
bin/gmsknl.elf:     file format elf64-x86-64


Disassembly of section .text:

ffff800000800000 <init_int>:
init_int():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:13
#include "kb.h"
#include <log.h>
#pragma pack(1)
gate *idt= (gate *) (KNL_BASE+IDT_ADDR);
extern int disk_int_handler();
void init_int(){
ffff800000800000:	f3 0f 1e fa          	endbr64 
ffff800000800004:	55                   	push   rbp
ffff800000800005:	48 89 e5             	mov    rbp,rsp
ffff800000800008:	41 57                	push   r15
ffff80000080000a:	53                   	push   rbx
ffff80000080000b:	48 83 ec 10          	sub    rsp,0x10
ffff80000080000f:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080000f <init_int+0xf>
ffff800000800016:	49 bb 21 35 12 00 00 	movabs r11,0x123521
ffff80000080001d:	00 00 00 
ffff800000800020:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:15
    //__asm__ volatile("sidt %0"::"m"(idt));
    set_gate(0,(addr_t)divide_err,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800023:	48 b8 f8 fe ff ff ff 	movabs rax,0xfffffffffffffef8
ffff80000080002a:	ff ff ff 
ffff80000080002d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800031:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800036:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080003b:	48 89 c6             	mov    rsi,rax
ffff80000080003e:	bf 00 00 00 00       	mov    edi,0x0
ffff800000800043:	49 89 df             	mov    r15,rbx
ffff800000800046:	48 b8 a2 d0 ed ff ff 	movabs rax,0xffffffffffedd0a2
ffff80000080004d:	ff ff ff 
ffff800000800050:	48 01 d8             	add    rax,rbx
ffff800000800053:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:16
    set_gate(1,(addr_t)debug,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800055:	48 b8 60 fd ff ff ff 	movabs rax,0xfffffffffffffd60
ffff80000080005c:	ff ff ff 
ffff80000080005f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800063:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800068:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080006d:	48 89 c6             	mov    rsi,rax
ffff800000800070:	bf 01 00 00 00       	mov    edi,0x1
ffff800000800075:	49 89 df             	mov    r15,rbx
ffff800000800078:	48 b8 a2 d0 ed ff ff 	movabs rax,0xffffffffffedd0a2
ffff80000080007f:	ff ff ff 
ffff800000800082:	48 01 d8             	add    rax,rbx
ffff800000800085:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:17
    set_gate(2,(addr_t)default_int_proc,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800087:	48 b8 40 fe ff ff ff 	movabs rax,0xfffffffffffffe40
ffff80000080008e:	ff ff ff 
ffff800000800091:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800095:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff80000080009a:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080009f:	48 89 c6             	mov    rsi,rax
ffff8000008000a2:	bf 02 00 00 00       	mov    edi,0x2
ffff8000008000a7:	49 89 df             	mov    r15,rbx
ffff8000008000aa:	48 b8 a2 d0 ed ff ff 	movabs rax,0xffffffffffedd0a2
ffff8000008000b1:	ff ff ff 
ffff8000008000b4:	48 01 d8             	add    rax,rbx
ffff8000008000b7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:18
    set_gate(3,(addr_t)breakpoint,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff8000008000b9:	48 b8 20 fe ff ff ff 	movabs rax,0xfffffffffffffe20
ffff8000008000c0:	ff ff ff 
ffff8000008000c3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008000c7:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008000cc:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008000d1:	48 89 c6             	mov    rsi,rax
ffff8000008000d4:	bf 03 00 00 00       	mov    edi,0x3
ffff8000008000d9:	49 89 df             	mov    r15,rbx
ffff8000008000dc:	48 b8 a2 d0 ed ff ff 	movabs rax,0xffffffffffedd0a2
ffff8000008000e3:	ff ff ff 
ffff8000008000e6:	48 01 d8             	add    rax,rbx
ffff8000008000e9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:19
    set_gate(4,(addr_t)overflow,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff8000008000eb:	48 b8 58 fd ff ff ff 	movabs rax,0xfffffffffffffd58
ffff8000008000f2:	ff ff ff 
ffff8000008000f5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008000f9:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008000fe:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800103:	48 89 c6             	mov    rsi,rax
ffff800000800106:	bf 04 00 00 00       	mov    edi,0x4
ffff80000080010b:	49 89 df             	mov    r15,rbx
ffff80000080010e:	48 b8 a2 d0 ed ff ff 	movabs rax,0xffffffffffedd0a2
ffff800000800115:	ff ff ff 
ffff800000800118:	48 01 d8             	add    rax,rbx
ffff80000080011b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:20
    set_gate(5,(addr_t)bounds,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff80000080011d:	48 b8 68 fd ff ff ff 	movabs rax,0xfffffffffffffd68
ffff800000800124:	ff ff ff 
ffff800000800127:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080012b:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800130:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800135:	48 89 c6             	mov    rsi,rax
ffff800000800138:	bf 05 00 00 00       	mov    edi,0x5
ffff80000080013d:	49 89 df             	mov    r15,rbx
ffff800000800140:	48 b8 a2 d0 ed ff ff 	movabs rax,0xffffffffffedd0a2
ffff800000800147:	ff ff ff 
ffff80000080014a:	48 01 d8             	add    rax,rbx
ffff80000080014d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:21
    set_gate(6,(addr_t)undefined_operator,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff80000080014f:	48 b8 30 ff ff ff ff 	movabs rax,0xffffffffffffff30
ffff800000800156:	ff ff ff 
ffff800000800159:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080015d:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800162:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800167:	48 89 c6             	mov    rsi,rax
ffff80000080016a:	bf 06 00 00 00       	mov    edi,0x6
ffff80000080016f:	49 89 df             	mov    r15,rbx
ffff800000800172:	48 b8 a2 d0 ed ff ff 	movabs rax,0xffffffffffedd0a2
ffff800000800179:	ff ff ff 
ffff80000080017c:	48 01 d8             	add    rax,rbx
ffff80000080017f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:22
    set_gate(7,(addr_t)coprocessor_notexist,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800181:	48 b8 e8 ff ff ff ff 	movabs rax,0xffffffffffffffe8
ffff800000800188:	ff ff ff 
ffff80000080018b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080018f:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800194:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800199:	48 89 c6             	mov    rsi,rax
ffff80000080019c:	bf 07 00 00 00       	mov    edi,0x7
ffff8000008001a1:	49 89 df             	mov    r15,rbx
ffff8000008001a4:	48 b8 a2 d0 ed ff ff 	movabs rax,0xffffffffffedd0a2
ffff8000008001ab:	ff ff ff 
ffff8000008001ae:	48 01 d8             	add    rax,rbx
ffff8000008001b1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:23
    set_gate(8,(addr_t)double_ints,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);//double_ints
ffff8000008001b3:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff8000008001ba:	ff ff ff 
ffff8000008001bd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008001c1:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008001c6:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008001cb:	48 89 c6             	mov    rsi,rax
ffff8000008001ce:	bf 08 00 00 00       	mov    edi,0x8
ffff8000008001d3:	49 89 df             	mov    r15,rbx
ffff8000008001d6:	48 b8 a2 d0 ed ff ff 	movabs rax,0xffffffffffedd0a2
ffff8000008001dd:	ff ff ff 
ffff8000008001e0:	48 01 d8             	add    rax,rbx
ffff8000008001e3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:24
    set_gate(9,(addr_t)coprocessor_seg_overbound,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff8000008001e5:	48 b8 b0 fd ff ff ff 	movabs rax,0xfffffffffffffdb0
ffff8000008001ec:	ff ff ff 
ffff8000008001ef:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008001f3:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008001f8:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008001fd:	48 89 c6             	mov    rsi,rax
ffff800000800200:	bf 09 00 00 00       	mov    edi,0x9
ffff800000800205:	49 89 df             	mov    r15,rbx
ffff800000800208:	48 b8 a2 d0 ed ff ff 	movabs rax,0xffffffffffedd0a2
ffff80000080020f:	ff ff ff 
ffff800000800212:	48 01 d8             	add    rax,rbx
ffff800000800215:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:25
    set_gate(10,(addr_t)invalid_tss,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800217:	48 b8 b0 ff ff ff ff 	movabs rax,0xffffffffffffffb0
ffff80000080021e:	ff ff ff 
ffff800000800221:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800225:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff80000080022a:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080022f:	48 89 c6             	mov    rsi,rax
ffff800000800232:	bf 0a 00 00 00       	mov    edi,0xa
ffff800000800237:	49 89 df             	mov    r15,rbx
ffff80000080023a:	48 b8 a2 d0 ed ff ff 	movabs rax,0xffffffffffedd0a2
ffff800000800241:	ff ff ff 
ffff800000800244:	48 01 d8             	add    rax,rbx
ffff800000800247:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:26
    set_gate(11,(addr_t)segment_notexist,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800249:	48 b8 d0 ff ff ff ff 	movabs rax,0xffffffffffffffd0
ffff800000800250:	ff ff ff 
ffff800000800253:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800257:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff80000080025c:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800261:	48 89 c6             	mov    rsi,rax
ffff800000800264:	bf 0b 00 00 00       	mov    edi,0xb
ffff800000800269:	49 89 df             	mov    r15,rbx
ffff80000080026c:	48 b8 a2 d0 ed ff ff 	movabs rax,0xffffffffffedd0a2
ffff800000800273:	ff ff ff 
ffff800000800276:	48 01 d8             	add    rax,rbx
ffff800000800279:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:27
    set_gate(12,(addr_t)stackseg_overbound,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);//
ffff80000080027b:	48 b8 98 ff ff ff ff 	movabs rax,0xffffffffffffff98
ffff800000800282:	ff ff ff 
ffff800000800285:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800289:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff80000080028e:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800293:	48 89 c6             	mov    rsi,rax
ffff800000800296:	bf 0c 00 00 00       	mov    edi,0xc
ffff80000080029b:	49 89 df             	mov    r15,rbx
ffff80000080029e:	48 b8 a2 d0 ed ff ff 	movabs rax,0xffffffffffedd0a2
ffff8000008002a5:	ff ff ff 
ffff8000008002a8:	48 01 d8             	add    rax,rbx
ffff8000008002ab:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:28
    set_gate(13,(addr_t)general_protect,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff8000008002ad:	48 b8 48 ff ff ff ff 	movabs rax,0xffffffffffffff48
ffff8000008002b4:	ff ff ff 
ffff8000008002b7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008002bb:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008002c0:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008002c5:	48 89 c6             	mov    rsi,rax
ffff8000008002c8:	bf 0d 00 00 00       	mov    edi,0xd
ffff8000008002cd:	49 89 df             	mov    r15,rbx
ffff8000008002d0:	48 b8 a2 d0 ed ff ff 	movabs rax,0xffffffffffedd0a2
ffff8000008002d7:	ff ff ff 
ffff8000008002da:	48 01 d8             	add    rax,rbx
ffff8000008002dd:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:29
    set_gate(14,(addr_t)page_err,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff8000008002df:	48 b8 d8 fc ff ff ff 	movabs rax,0xfffffffffffffcd8
ffff8000008002e6:	ff ff ff 
ffff8000008002e9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008002ed:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008002f2:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008002f7:	48 89 c6             	mov    rsi,rax
ffff8000008002fa:	bf 0e 00 00 00       	mov    edi,0xe
ffff8000008002ff:	49 89 df             	mov    r15,rbx
ffff800000800302:	48 b8 a2 d0 ed ff ff 	movabs rax,0xffffffffffedd0a2
ffff800000800309:	ff ff ff 
ffff80000080030c:	48 01 d8             	add    rax,rbx
ffff80000080030f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:30
    set_gate(15,(addr_t)default_int_proc,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800311:	48 b8 40 fe ff ff ff 	movabs rax,0xfffffffffffffe40
ffff800000800318:	ff ff ff 
ffff80000080031b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080031f:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800324:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800329:	48 89 c6             	mov    rsi,rax
ffff80000080032c:	bf 0f 00 00 00       	mov    edi,0xf
ffff800000800331:	49 89 df             	mov    r15,rbx
ffff800000800334:	48 b8 a2 d0 ed ff ff 	movabs rax,0xffffffffffedd0a2
ffff80000080033b:	ff ff ff 
ffff80000080033e:	48 01 d8             	add    rax,rbx
ffff800000800341:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:31
    set_gate(16,(addr_t)coprocessor_err,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800343:	48 b8 38 ff ff ff ff 	movabs rax,0xffffffffffffff38
ffff80000080034a:	ff ff ff 
ffff80000080034d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800351:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800356:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080035b:	48 89 c6             	mov    rsi,rax
ffff80000080035e:	bf 10 00 00 00       	mov    edi,0x10
ffff800000800363:	49 89 df             	mov    r15,rbx
ffff800000800366:	48 b8 a2 d0 ed ff ff 	movabs rax,0xffffffffffedd0a2
ffff80000080036d:	ff ff ff 
ffff800000800370:	48 01 d8             	add    rax,rbx
ffff800000800373:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:32
    for (int i=17;i<48;i++)
ffff800000800375:	c7 45 ec 11 00 00 00 	mov    DWORD PTR [rbp-0x14],0x11
ffff80000080037c:	eb 39                	jmp    ffff8000008003b7 <init_int+0x3b7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:33 (discriminator 3)
        set_gate(i,(addr_t)default_int_proc,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);
ffff80000080037e:	48 b8 40 fe ff ff ff 	movabs rax,0xfffffffffffffe40
ffff800000800385:	ff ff ff 
ffff800000800388:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080038c:	48 89 c6             	mov    rsi,rax
ffff80000080038f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000800392:	0f b6 c0             	movzx  eax,al
ffff800000800395:	b9 00 8e 00 00       	mov    ecx,0x8e00
ffff80000080039a:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080039f:	89 c7                	mov    edi,eax
ffff8000008003a1:	49 89 df             	mov    r15,rbx
ffff8000008003a4:	48 b8 a2 d0 ed ff ff 	movabs rax,0xffffffffffedd0a2
ffff8000008003ab:	ff ff ff 
ffff8000008003ae:	48 01 d8             	add    rax,rbx
ffff8000008003b1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:32 (discriminator 3)
    for (int i=17;i<48;i++)
ffff8000008003b3:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:32 (discriminator 1)
ffff8000008003b7:	83 7d ec 2f          	cmp    DWORD PTR [rbp-0x14],0x2f
ffff8000008003bb:	7e c1                	jle    ffff80000080037e <init_int+0x37e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:34
	set_gate(0x21,(addr_t)key_proc,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);
ffff8000008003bd:	48 b8 e8 fc ff ff ff 	movabs rax,0xfffffffffffffce8
ffff8000008003c4:	ff ff ff 
ffff8000008003c7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008003cb:	b9 00 8e 00 00       	mov    ecx,0x8e00
ffff8000008003d0:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008003d5:	48 89 c6             	mov    rsi,rax
ffff8000008003d8:	bf 21 00 00 00       	mov    edi,0x21
ffff8000008003dd:	49 89 df             	mov    r15,rbx
ffff8000008003e0:	48 b8 a2 d0 ed ff ff 	movabs rax,0xffffffffffedd0a2
ffff8000008003e7:	ff ff ff 
ffff8000008003ea:	48 01 d8             	add    rax,rbx
ffff8000008003ed:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:35
	set_gate(0x20,(addr_t)clock,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);
ffff8000008003ef:	48 b8 c8 ff ff ff ff 	movabs rax,0xffffffffffffffc8
ffff8000008003f6:	ff ff ff 
ffff8000008003f9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008003fd:	b9 00 8e 00 00       	mov    ecx,0x8e00
ffff800000800402:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800407:	48 89 c6             	mov    rsi,rax
ffff80000080040a:	bf 20 00 00 00       	mov    edi,0x20
ffff80000080040f:	49 89 df             	mov    r15,rbx
ffff800000800412:	48 b8 a2 d0 ed ff ff 	movabs rax,0xffffffffffedd0a2
ffff800000800419:	ff ff ff 
ffff80000080041c:	48 01 d8             	add    rax,rbx
ffff80000080041f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:36
	set_gate(0x2e,(addr_t)disk_int_handler,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);
ffff800000800421:	48 b8 f8 ff ff ff ff 	movabs rax,0xfffffffffffffff8
ffff800000800428:	ff ff ff 
ffff80000080042b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080042f:	b9 00 8e 00 00       	mov    ecx,0x8e00
ffff800000800434:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800439:	48 89 c6             	mov    rsi,rax
ffff80000080043c:	bf 2e 00 00 00       	mov    edi,0x2e
ffff800000800441:	49 89 df             	mov    r15,rbx
ffff800000800444:	48 b8 a2 d0 ed ff ff 	movabs rax,0xffffffffffedd0a2
ffff80000080044b:	ff ff ff 
ffff80000080044e:	48 01 d8             	add    rax,rbx
ffff800000800451:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:37
    set_gate(0x80,(addr_t)_syscall,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);//
ffff800000800453:	48 b8 08 fd ff ff ff 	movabs rax,0xfffffffffffffd08
ffff80000080045a:	ff ff ff 
ffff80000080045d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800461:	b9 00 8e 00 00       	mov    ecx,0x8e00
ffff800000800466:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080046b:	48 89 c6             	mov    rsi,rax
ffff80000080046e:	bf 80 00 00 00       	mov    edi,0x80
ffff800000800473:	49 89 df             	mov    r15,rbx
ffff800000800476:	48 b8 a2 d0 ed ff ff 	movabs rax,0xffffffffffedd0a2
ffff80000080047d:	ff ff ff 
ffff800000800480:	48 01 d8             	add    rax,rbx
ffff800000800483:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:42
    //set_gate(0x2c,mouse_proc,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);
    //启动8259A
    
	//ICW1
	outb(0x20,0x11);
ffff800000800485:	be 11 00 00 00       	mov    esi,0x11
ffff80000080048a:	bf 20 00 00 00       	mov    edi,0x20
ffff80000080048f:	49 89 df             	mov    r15,rbx
ffff800000800492:	48 b8 b0 62 ee ff ff 	movabs rax,0xffffffffffee62b0
ffff800000800499:	ff ff ff 
ffff80000080049c:	48 01 d8             	add    rax,rbx
ffff80000080049f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:43
	outb(0xA0,0x11);
ffff8000008004a1:	be 11 00 00 00       	mov    esi,0x11
ffff8000008004a6:	bf a0 00 00 00       	mov    edi,0xa0
ffff8000008004ab:	49 89 df             	mov    r15,rbx
ffff8000008004ae:	48 b8 b0 62 ee ff ff 	movabs rax,0xffffffffffee62b0
ffff8000008004b5:	ff ff ff 
ffff8000008004b8:	48 01 d8             	add    rax,rbx
ffff8000008004bb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:45
	//ICW2
	outb(0x21,0x20);//former 0x20,0x20
ffff8000008004bd:	be 20 00 00 00       	mov    esi,0x20
ffff8000008004c2:	bf 21 00 00 00       	mov    edi,0x21
ffff8000008004c7:	49 89 df             	mov    r15,rbx
ffff8000008004ca:	48 b8 b0 62 ee ff ff 	movabs rax,0xffffffffffee62b0
ffff8000008004d1:	ff ff ff 
ffff8000008004d4:	48 01 d8             	add    rax,rbx
ffff8000008004d7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:46
	outb(0xA1,0x28);
ffff8000008004d9:	be 28 00 00 00       	mov    esi,0x28
ffff8000008004de:	bf a1 00 00 00       	mov    edi,0xa1
ffff8000008004e3:	49 89 df             	mov    r15,rbx
ffff8000008004e6:	48 b8 b0 62 ee ff ff 	movabs rax,0xffffffffffee62b0
ffff8000008004ed:	ff ff ff 
ffff8000008004f0:	48 01 d8             	add    rax,rbx
ffff8000008004f3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:48
	//ICW3
	outb(0x21,0x04);
ffff8000008004f5:	be 04 00 00 00       	mov    esi,0x4
ffff8000008004fa:	bf 21 00 00 00       	mov    edi,0x21
ffff8000008004ff:	49 89 df             	mov    r15,rbx
ffff800000800502:	48 b8 b0 62 ee ff ff 	movabs rax,0xffffffffffee62b0
ffff800000800509:	ff ff ff 
ffff80000080050c:	48 01 d8             	add    rax,rbx
ffff80000080050f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:49
	outb(0xA1,0x02);
ffff800000800511:	be 02 00 00 00       	mov    esi,0x2
ffff800000800516:	bf a1 00 00 00       	mov    edi,0xa1
ffff80000080051b:	49 89 df             	mov    r15,rbx
ffff80000080051e:	48 b8 b0 62 ee ff ff 	movabs rax,0xffffffffffee62b0
ffff800000800525:	ff ff ff 
ffff800000800528:	48 01 d8             	add    rax,rbx
ffff80000080052b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:51
	//ICW4
	outb(0x21,0x01);
ffff80000080052d:	be 01 00 00 00       	mov    esi,0x1
ffff800000800532:	bf 21 00 00 00       	mov    edi,0x21
ffff800000800537:	49 89 df             	mov    r15,rbx
ffff80000080053a:	48 b8 b0 62 ee ff ff 	movabs rax,0xffffffffffee62b0
ffff800000800541:	ff ff ff 
ffff800000800544:	48 01 d8             	add    rax,rbx
ffff800000800547:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:52
	outb(0xA1,0x01);
ffff800000800549:	be 01 00 00 00       	mov    esi,0x1
ffff80000080054e:	bf a1 00 00 00       	mov    edi,0xa1
ffff800000800553:	49 89 df             	mov    r15,rbx
ffff800000800556:	48 b8 b0 62 ee ff ff 	movabs rax,0xffffffffffee62b0
ffff80000080055d:	ff ff ff 
ffff800000800560:	48 01 d8             	add    rax,rbx
ffff800000800563:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:54

    turn_on_int();
ffff800000800565:	49 89 df             	mov    r15,rbx
ffff800000800568:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080056d:	48 ba ea 62 ee ff ff 	movabs rdx,0xffffffffffee62ea
ffff800000800574:	ff ff ff 
ffff800000800577:	48 01 da             	add    rdx,rbx
ffff80000080057a:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:58


    //设置IA32_LSTAR,为syscall做设置
    wrmsr(0xc0000082, _syscall);
ffff80000080057c:	48 b8 08 fd ff ff ff 	movabs rax,0xfffffffffffffd08
ffff800000800583:	ff ff ff 
ffff800000800586:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080058a:	48 89 c6             	mov    rsi,rax
ffff80000080058d:	b8 82 00 00 c0       	mov    eax,0xc0000082
ffff800000800592:	48 89 c7             	mov    rdi,rax
ffff800000800595:	49 89 df             	mov    r15,rbx
ffff800000800598:	48 b8 56 d9 ed ff ff 	movabs rax,0xffffffffffedd956
ffff80000080059f:	ff ff ff 
ffff8000008005a2:	48 01 d8             	add    rax,rbx
ffff8000008005a5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:60
    //设置IA32_FMASK,为syscall做设置
    wrmsr(0xc0000084, -1);
ffff8000008005a7:	48 c7 c6 ff ff ff ff 	mov    rsi,0xffffffffffffffff
ffff8000008005ae:	b8 84 00 00 c0       	mov    eax,0xc0000084
ffff8000008005b3:	48 89 c7             	mov    rdi,rax
ffff8000008005b6:	49 89 df             	mov    r15,rbx
ffff8000008005b9:	48 b8 56 d9 ed ff ff 	movabs rax,0xffffffffffedd956
ffff8000008005c0:	ff ff ff 
ffff8000008005c3:	48 01 d8             	add    rax,rbx
ffff8000008005c6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:61
}
ffff8000008005c8:	90                   	nop
ffff8000008005c9:	48 83 c4 10          	add    rsp,0x10
ffff8000008005cd:	5b                   	pop    rbx
ffff8000008005ce:	41 5f                	pop    r15
ffff8000008005d0:	5d                   	pop    rbp
ffff8000008005d1:	c3                   	ret    

ffff8000008005d2 <set_gate>:
set_gate():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:63
void set_gate(u8 index,addr_t offset,u16 selector,u16 attr)
{
ffff8000008005d2:	f3 0f 1e fa          	endbr64 
ffff8000008005d6:	55                   	push   rbp
ffff8000008005d7:	48 89 e5             	mov    rbp,rsp
ffff8000008005da:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008005da <set_gate+0x8>
ffff8000008005e1:	49 bb 56 2f 12 00 00 	movabs r11,0x122f56
ffff8000008005e8:	00 00 00 
ffff8000008005eb:	4c 01 d8             	add    rax,r11
ffff8000008005ee:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff8000008005f2:	89 d6                	mov    esi,edx
ffff8000008005f4:	89 ca                	mov    edx,ecx
ffff8000008005f6:	89 f9                	mov    ecx,edi
ffff8000008005f8:	88 4d fc             	mov    BYTE PTR [rbp-0x4],cl
ffff8000008005fb:	89 f1                	mov    ecx,esi
ffff8000008005fd:	66 89 4d f8          	mov    WORD PTR [rbp-0x8],cx
ffff800000800601:	66 89 55 ec          	mov    WORD PTR [rbp-0x14],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:70
    /* idt[index].offset_low=offset&0xffffu;
    idt[index].offset_high=(offset>>16)&0xffffu;
    idt[index].attr=attr;
    idt[index].selector=selector; */
#else
    offset|=KNL_BASE;//中断必须在内核空间
ffff800000800605:	48 ba 00 00 00 00 00 	movabs rdx,0xffff800000000000
ffff80000080060c:	80 ff ff 
ffff80000080060f:	48 09 55 f0          	or     QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:71
    idt[index].offset_low=offset&0xffff;
ffff800000800613:	48 ba 08 ff ff ff ff 	movabs rdx,0xffffffffffffff08
ffff80000080061a:	ff ff ff 
ffff80000080061d:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000800621:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000800624:	0f b6 55 fc          	movzx  edx,BYTE PTR [rbp-0x4]
ffff800000800628:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080062c:	48 01 ca             	add    rdx,rcx
ffff80000080062f:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff800000800633:	66 89 0a             	mov    WORD PTR [rdx],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:72
    idt[index].offset_mid=(offset>>16)&0xffff;
ffff800000800636:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080063a:	48 89 d1             	mov    rcx,rdx
ffff80000080063d:	48 c1 e9 10          	shr    rcx,0x10
ffff800000800641:	48 ba 08 ff ff ff ff 	movabs rdx,0xffffffffffffff08
ffff800000800648:	ff ff ff 
ffff80000080064b:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080064f:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff800000800652:	0f b6 55 fc          	movzx  edx,BYTE PTR [rbp-0x4]
ffff800000800656:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080065a:	48 01 f2             	add    rdx,rsi
ffff80000080065d:	66 89 4a 06          	mov    WORD PTR [rdx+0x6],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:73
    idt[index].offset_high=(offset>>32);//0x0000ffff;
ffff800000800661:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff800000800665:	48 89 d1             	mov    rcx,rdx
ffff800000800668:	48 c1 e9 20          	shr    rcx,0x20
ffff80000080066c:	48 ba 08 ff ff ff ff 	movabs rdx,0xffffffffffffff08
ffff800000800673:	ff ff ff 
ffff800000800676:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080067a:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff80000080067d:	0f b6 55 fc          	movzx  edx,BYTE PTR [rbp-0x4]
ffff800000800681:	48 c1 e2 04          	shl    rdx,0x4
ffff800000800685:	48 01 f2             	add    rdx,rsi
ffff800000800688:	89 4a 08             	mov    DWORD PTR [rdx+0x8],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:74
    idt[index].attr=attr|1;//1是ist索引
ffff80000080068b:	48 ba 08 ff ff ff ff 	movabs rdx,0xffffffffffffff08
ffff800000800692:	ff ff ff 
ffff800000800695:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000800699:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080069c:	0f b6 55 fc          	movzx  edx,BYTE PTR [rbp-0x4]
ffff8000008006a0:	48 c1 e2 04          	shl    rdx,0x4
ffff8000008006a4:	48 01 ca             	add    rdx,rcx
ffff8000008006a7:	0f b7 4d ec          	movzx  ecx,WORD PTR [rbp-0x14]
ffff8000008006ab:	83 c9 01             	or     ecx,0x1
ffff8000008006ae:	66 89 4a 04          	mov    WORD PTR [rdx+0x4],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:75
    idt[index].selector=selector;
ffff8000008006b2:	48 ba 08 ff ff ff ff 	movabs rdx,0xffffffffffffff08
ffff8000008006b9:	ff ff ff 
ffff8000008006bc:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008006c0:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008006c3:	0f b6 55 fc          	movzx  edx,BYTE PTR [rbp-0x4]
ffff8000008006c7:	48 c1 e2 04          	shl    rdx,0x4
ffff8000008006cb:	48 01 d1             	add    rcx,rdx
ffff8000008006ce:	0f b7 55 f8          	movzx  edx,WORD PTR [rbp-0x8]
ffff8000008006d2:	66 89 51 02          	mov    WORD PTR [rcx+0x2],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:76
    idt[index].rsvd=0;
ffff8000008006d6:	48 ba 08 ff ff ff ff 	movabs rdx,0xffffffffffffff08
ffff8000008006dd:	ff ff ff 
ffff8000008006e0:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff8000008006e4:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008006e7:	0f b6 45 fc          	movzx  eax,BYTE PTR [rbp-0x4]
ffff8000008006eb:	48 c1 e0 04          	shl    rax,0x4
ffff8000008006ef:	48 01 d0             	add    rax,rdx
ffff8000008006f2:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [rax+0xc],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:78
#endif
}
ffff8000008006f9:	90                   	nop
ffff8000008006fa:	5d                   	pop    rbp
ffff8000008006fb:	c3                   	ret    

ffff8000008006fc <divide_err>:
divide_err():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:80

void divide_err(){
ffff8000008006fc:	f3 0f 1e fa          	endbr64 
ffff800000800700:	55                   	push   rbp
ffff800000800701:	48 89 e5             	mov    rbp,rsp
ffff800000800704:	41 57                	push   r15
ffff800000800706:	48 83 ec 08          	sub    rsp,0x8
ffff80000080070a:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080070a <divide_err+0xe>
ffff800000800711:	49 bb 26 2e 12 00 00 	movabs r11,0x122e26
ffff800000800718:	00 00 00 
ffff80000080071b:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:81
    __asm__("cli");
ffff80000080071e:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:83
    //puts("divide err");
    eoi();
ffff80000080071f:	49 89 d7             	mov    r15,rdx
ffff800000800722:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800727:	48 b9 de 62 ee ff ff 	movabs rcx,0xffffffffffee62de
ffff80000080072e:	ff ff ff 
ffff800000800731:	48 01 d1             	add    rcx,rdx
ffff800000800734:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:84
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800736:	fb                   	sti    
ffff800000800737:	c9                   	leave  
ffff800000800738:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:85
}
ffff80000080073a:	90                   	nop
ffff80000080073b:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080073f:	c9                   	leave  
ffff800000800740:	c3                   	ret    

ffff800000800741 <debug>:
debug():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:87

void debug(){
ffff800000800741:	f3 0f 1e fa          	endbr64 
ffff800000800745:	55                   	push   rbp
ffff800000800746:	48 89 e5             	mov    rbp,rsp
ffff800000800749:	41 57                	push   r15
ffff80000080074b:	48 83 ec 08          	sub    rsp,0x8
ffff80000080074f:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080074f <debug+0xe>
ffff800000800756:	49 bb e1 2d 12 00 00 	movabs r11,0x122de1
ffff80000080075d:	00 00 00 
ffff800000800760:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:88
    __asm__("cli");
ffff800000800763:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:90
    //puts("debug");
    eoi();
ffff800000800764:	49 89 d7             	mov    r15,rdx
ffff800000800767:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080076c:	48 b9 de 62 ee ff ff 	movabs rcx,0xffffffffffee62de
ffff800000800773:	ff ff ff 
ffff800000800776:	48 01 d1             	add    rcx,rdx
ffff800000800779:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:91
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff80000080077b:	fb                   	sti    
ffff80000080077c:	c9                   	leave  
ffff80000080077d:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:92
}
ffff80000080077f:	90                   	nop
ffff800000800780:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800784:	c9                   	leave  
ffff800000800785:	c3                   	ret    

ffff800000800786 <default_int_proc>:
default_int_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:93
void default_int_proc(){
ffff800000800786:	f3 0f 1e fa          	endbr64 
ffff80000080078a:	55                   	push   rbp
ffff80000080078b:	48 89 e5             	mov    rbp,rsp
ffff80000080078e:	41 57                	push   r15
ffff800000800790:	48 83 ec 08          	sub    rsp,0x8
ffff800000800794:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800794 <default_int_proc+0xe>
ffff80000080079b:	49 bb 9c 2d 12 00 00 	movabs r11,0x122d9c
ffff8000008007a2:	00 00 00 
ffff8000008007a5:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:94
    __asm__("cli");
ffff8000008007a8:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:96
    //puts("default_int_proc");
    eoi();
ffff8000008007a9:	49 89 d7             	mov    r15,rdx
ffff8000008007ac:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008007b1:	48 b9 de 62 ee ff ff 	movabs rcx,0xffffffffffee62de
ffff8000008007b8:	ff ff ff 
ffff8000008007bb:	48 01 d1             	add    rcx,rdx
ffff8000008007be:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:97
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff8000008007c0:	fb                   	sti    
ffff8000008007c1:	c9                   	leave  
ffff8000008007c2:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:98
}
ffff8000008007c4:	90                   	nop
ffff8000008007c5:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff8000008007c9:	c9                   	leave  
ffff8000008007ca:	c3                   	ret    

ffff8000008007cb <breakpoint>:
breakpoint():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:99
void breakpoint(){
ffff8000008007cb:	f3 0f 1e fa          	endbr64 
ffff8000008007cf:	55                   	push   rbp
ffff8000008007d0:	48 89 e5             	mov    rbp,rsp
ffff8000008007d3:	41 57                	push   r15
ffff8000008007d5:	48 83 ec 08          	sub    rsp,0x8
ffff8000008007d9:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff8000008007d9 <breakpoint+0xe>
ffff8000008007e0:	49 bb 57 2d 12 00 00 	movabs r11,0x122d57
ffff8000008007e7:	00 00 00 
ffff8000008007ea:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:100
    __asm__("cli");
ffff8000008007ed:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:102
    //puts("breakpoint");
    eoi();
ffff8000008007ee:	49 89 d7             	mov    r15,rdx
ffff8000008007f1:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008007f6:	48 b9 de 62 ee ff ff 	movabs rcx,0xffffffffffee62de
ffff8000008007fd:	ff ff ff 
ffff800000800800:	48 01 d1             	add    rcx,rdx
ffff800000800803:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:103
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800805:	fb                   	sti    
ffff800000800806:	c9                   	leave  
ffff800000800807:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:104
}
ffff800000800809:	90                   	nop
ffff80000080080a:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080080e:	c9                   	leave  
ffff80000080080f:	c3                   	ret    

ffff800000800810 <overflow>:
overflow():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:105
void overflow(){
ffff800000800810:	f3 0f 1e fa          	endbr64 
ffff800000800814:	55                   	push   rbp
ffff800000800815:	48 89 e5             	mov    rbp,rsp
ffff800000800818:	41 57                	push   r15
ffff80000080081a:	48 83 ec 08          	sub    rsp,0x8
ffff80000080081e:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080081e <overflow+0xe>
ffff800000800825:	49 bb 12 2d 12 00 00 	movabs r11,0x122d12
ffff80000080082c:	00 00 00 
ffff80000080082f:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:106
    __asm__("cli");
ffff800000800832:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:108
    //puts("overflow");
    eoi();
ffff800000800833:	49 89 d7             	mov    r15,rdx
ffff800000800836:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080083b:	48 b9 de 62 ee ff ff 	movabs rcx,0xffffffffffee62de
ffff800000800842:	ff ff ff 
ffff800000800845:	48 01 d1             	add    rcx,rdx
ffff800000800848:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:109
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff80000080084a:	fb                   	sti    
ffff80000080084b:	c9                   	leave  
ffff80000080084c:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:110
}
ffff80000080084e:	90                   	nop
ffff80000080084f:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800853:	c9                   	leave  
ffff800000800854:	c3                   	ret    

ffff800000800855 <bounds>:
bounds():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:111
void bounds(){
ffff800000800855:	f3 0f 1e fa          	endbr64 
ffff800000800859:	55                   	push   rbp
ffff80000080085a:	48 89 e5             	mov    rbp,rsp
ffff80000080085d:	41 57                	push   r15
ffff80000080085f:	48 83 ec 08          	sub    rsp,0x8
ffff800000800863:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800863 <bounds+0xe>
ffff80000080086a:	49 bb cd 2c 12 00 00 	movabs r11,0x122ccd
ffff800000800871:	00 00 00 
ffff800000800874:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:112
    __asm__("cli");
ffff800000800877:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:114
    //puts("bounds");
    eoi();
ffff800000800878:	49 89 d7             	mov    r15,rdx
ffff80000080087b:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800880:	48 b9 de 62 ee ff ff 	movabs rcx,0xffffffffffee62de
ffff800000800887:	ff ff ff 
ffff80000080088a:	48 01 d1             	add    rcx,rdx
ffff80000080088d:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:115
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff80000080088f:	fb                   	sti    
ffff800000800890:	c9                   	leave  
ffff800000800891:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:116
}
ffff800000800893:	90                   	nop
ffff800000800894:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800898:	c9                   	leave  
ffff800000800899:	c3                   	ret    

ffff80000080089a <undefined_operator>:
undefined_operator():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:117
void undefined_operator(){
ffff80000080089a:	f3 0f 1e fa          	endbr64 
ffff80000080089e:	55                   	push   rbp
ffff80000080089f:	48 89 e5             	mov    rbp,rsp
ffff8000008008a2:	41 57                	push   r15
ffff8000008008a4:	53                   	push   rbx
ffff8000008008a5:	48 83 ec 10          	sub    rsp,0x10
ffff8000008008a9:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008008a9 <undefined_operator+0xf>
ffff8000008008b0:	49 bb 87 2c 12 00 00 	movabs r11,0x122c87
ffff8000008008b7:	00 00 00 
ffff8000008008ba:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:119
    //puts("undef operator");
    eoi();
ffff8000008008bd:	49 89 df             	mov    r15,rbx
ffff8000008008c0:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008008c5:	48 ba de 62 ee ff ff 	movabs rdx,0xffffffffffee62de
ffff8000008008cc:	ff ff ff 
ffff8000008008cf:	48 01 da             	add    rdx,rbx
ffff8000008008d2:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:120
    off_t stk=0;
ffff8000008008d4:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff8000008008db:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:121
    __asm__ volatile("mov %%rbp,%0":"=m"(stk));
ffff8000008008dc:	48 89 6d e8          	mov    QWORD PTR [rbp-0x18],rbp
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:122
    stk-=16;
ffff8000008008e0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008008e4:	48 83 e8 10          	sub    rax,0x10
ffff8000008008e8:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:123
    backtrace(stk);
ffff8000008008ec:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008008f0:	48 89 c7             	mov    rdi,rax
ffff8000008008f3:	49 89 df             	mov    r15,rbx
ffff8000008008f6:	48 b8 57 db ed ff ff 	movabs rax,0xffffffffffeddb57
ffff8000008008fd:	ff ff ff 
ffff800000800900:	48 01 d8             	add    rax,rbx
ffff800000800903:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:124
    __asm__ volatile ("jmp .\r\n leave \r\n iretq");
ffff800000800905:	eb fe                	jmp    ffff800000800905 <undefined_operator+0x6b>
ffff800000800907:	c9                   	leave  
ffff800000800908:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:125
}
ffff80000080090a:	90                   	nop
ffff80000080090b:	48 83 c4 10          	add    rsp,0x10
ffff80000080090f:	5b                   	pop    rbx
ffff800000800910:	41 5f                	pop    r15
ffff800000800912:	5d                   	pop    rbp
ffff800000800913:	c3                   	ret    

ffff800000800914 <coprocessor_notexist>:
coprocessor_notexist():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:126
void coprocessor_notexist(){
ffff800000800914:	f3 0f 1e fa          	endbr64 
ffff800000800918:	55                   	push   rbp
ffff800000800919:	48 89 e5             	mov    rbp,rsp
ffff80000080091c:	41 57                	push   r15
ffff80000080091e:	48 83 ec 08          	sub    rsp,0x8
ffff800000800922:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800922 <coprocessor_notexist+0xe>
ffff800000800929:	49 bb 0e 2c 12 00 00 	movabs r11,0x122c0e
ffff800000800930:	00 00 00 
ffff800000800933:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:127
    __asm__("cli");
ffff800000800936:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:129
    //puts("coprocessor doesnt exist");
    eoi();
ffff800000800937:	49 89 d7             	mov    r15,rdx
ffff80000080093a:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080093f:	48 b9 de 62 ee ff ff 	movabs rcx,0xffffffffffee62de
ffff800000800946:	ff ff ff 
ffff800000800949:	48 01 d1             	add    rcx,rdx
ffff80000080094c:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:130
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff80000080094e:	fb                   	sti    
ffff80000080094f:	c9                   	leave  
ffff800000800950:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:131
}
ffff800000800952:	90                   	nop
ffff800000800953:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800957:	c9                   	leave  
ffff800000800958:	c3                   	ret    

ffff800000800959 <double_ints>:
double_ints():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:132
void double_ints(){
ffff800000800959:	f3 0f 1e fa          	endbr64 
ffff80000080095d:	55                   	push   rbp
ffff80000080095e:	48 89 e5             	mov    rbp,rsp
ffff800000800961:	41 57                	push   r15
ffff800000800963:	48 83 ec 08          	sub    rsp,0x8
ffff800000800967:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800967 <double_ints+0xe>
ffff80000080096e:	49 bb c9 2b 12 00 00 	movabs r11,0x122bc9
ffff800000800975:	00 00 00 
ffff800000800978:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:133
    __asm__("cli");
ffff80000080097b:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:135
    //puts("double interrupts");
    eoi();
ffff80000080097c:	49 89 d7             	mov    r15,rdx
ffff80000080097f:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800984:	48 b9 de 62 ee ff ff 	movabs rcx,0xffffffffffee62de
ffff80000080098b:	ff ff ff 
ffff80000080098e:	48 01 d1             	add    rcx,rdx
ffff800000800991:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:136
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800993:	fb                   	sti    
ffff800000800994:	c9                   	leave  
ffff800000800995:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:137
}
ffff800000800997:	90                   	nop
ffff800000800998:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080099c:	c9                   	leave  
ffff80000080099d:	c3                   	ret    

ffff80000080099e <coprocessor_seg_overbound>:
coprocessor_seg_overbound():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:138
void coprocessor_seg_overbound(){
ffff80000080099e:	f3 0f 1e fa          	endbr64 
ffff8000008009a2:	55                   	push   rbp
ffff8000008009a3:	48 89 e5             	mov    rbp,rsp
ffff8000008009a6:	41 57                	push   r15
ffff8000008009a8:	48 83 ec 08          	sub    rsp,0x8
ffff8000008009ac:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff8000008009ac <coprocessor_seg_overbound+0xe>
ffff8000008009b3:	49 bb 84 2b 12 00 00 	movabs r11,0x122b84
ffff8000008009ba:	00 00 00 
ffff8000008009bd:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:140
    //puts("coprocessfor seg overdound");
    eoi();
ffff8000008009c0:	49 89 d7             	mov    r15,rdx
ffff8000008009c3:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008009c8:	48 b9 de 62 ee ff ff 	movabs rcx,0xffffffffffee62de
ffff8000008009cf:	ff ff ff 
ffff8000008009d2:	48 01 d1             	add    rcx,rdx
ffff8000008009d5:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:141
    __asm__ volatile ("leave \r\n iretq");
ffff8000008009d7:	c9                   	leave  
ffff8000008009d8:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:142
}
ffff8000008009da:	90                   	nop
ffff8000008009db:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff8000008009df:	c9                   	leave  
ffff8000008009e0:	c3                   	ret    

ffff8000008009e1 <invalid_tss>:
invalid_tss():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:143
void invalid_tss(){
ffff8000008009e1:	f3 0f 1e fa          	endbr64 
ffff8000008009e5:	55                   	push   rbp
ffff8000008009e6:	48 89 e5             	mov    rbp,rsp
ffff8000008009e9:	41 57                	push   r15
ffff8000008009eb:	48 83 ec 08          	sub    rsp,0x8
ffff8000008009ef:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff8000008009ef <invalid_tss+0xe>
ffff8000008009f6:	49 bb 41 2b 12 00 00 	movabs r11,0x122b41
ffff8000008009fd:	00 00 00 
ffff800000800a00:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:144
    __asm__("cli");
ffff800000800a03:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:146
    //puts("invalid tss");
    eoi();
ffff800000800a04:	49 89 d7             	mov    r15,rdx
ffff800000800a07:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800a0c:	48 b9 de 62 ee ff ff 	movabs rcx,0xffffffffffee62de
ffff800000800a13:	ff ff ff 
ffff800000800a16:	48 01 d1             	add    rcx,rdx
ffff800000800a19:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:147
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800a1b:	fb                   	sti    
ffff800000800a1c:	c9                   	leave  
ffff800000800a1d:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:148
}
ffff800000800a1f:	90                   	nop
ffff800000800a20:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800a24:	c9                   	leave  
ffff800000800a25:	c3                   	ret    

ffff800000800a26 <segment_notexist>:
segment_notexist():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:149
void segment_notexist(){
ffff800000800a26:	f3 0f 1e fa          	endbr64 
ffff800000800a2a:	55                   	push   rbp
ffff800000800a2b:	48 89 e5             	mov    rbp,rsp
ffff800000800a2e:	41 57                	push   r15
ffff800000800a30:	48 83 ec 08          	sub    rsp,0x8
ffff800000800a34:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800a34 <segment_notexist+0xe>
ffff800000800a3b:	49 bb fc 2a 12 00 00 	movabs r11,0x122afc
ffff800000800a42:	00 00 00 
ffff800000800a45:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:150
    __asm__("cli");
ffff800000800a48:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:152
    //puts("seg nonexistent");
    eoi();
ffff800000800a49:	49 89 d7             	mov    r15,rdx
ffff800000800a4c:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800a51:	48 b9 de 62 ee ff ff 	movabs rcx,0xffffffffffee62de
ffff800000800a58:	ff ff ff 
ffff800000800a5b:	48 01 d1             	add    rcx,rdx
ffff800000800a5e:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:153
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800a60:	fb                   	sti    
ffff800000800a61:	c9                   	leave  
ffff800000800a62:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:154
}
ffff800000800a64:	90                   	nop
ffff800000800a65:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800a69:	c9                   	leave  
ffff800000800a6a:	c3                   	ret    

ffff800000800a6b <stackseg_overbound>:
stackseg_overbound():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:155
void stackseg_overbound(){
ffff800000800a6b:	f3 0f 1e fa          	endbr64 
ffff800000800a6f:	55                   	push   rbp
ffff800000800a70:	48 89 e5             	mov    rbp,rsp
ffff800000800a73:	41 57                	push   r15
ffff800000800a75:	48 83 ec 08          	sub    rsp,0x8
ffff800000800a79:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800a79 <stackseg_overbound+0xe>
ffff800000800a80:	49 bb b7 2a 12 00 00 	movabs r11,0x122ab7
ffff800000800a87:	00 00 00 
ffff800000800a8a:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:156
    __asm__("cli");
ffff800000800a8d:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:158
    //puts("stack seg overbound");
    eoi();
ffff800000800a8e:	49 89 d7             	mov    r15,rdx
ffff800000800a91:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800a96:	48 b9 de 62 ee ff ff 	movabs rcx,0xffffffffffee62de
ffff800000800a9d:	ff ff ff 
ffff800000800aa0:	48 01 d1             	add    rcx,rdx
ffff800000800aa3:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:159
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800aa5:	fb                   	sti    
ffff800000800aa6:	c9                   	leave  
ffff800000800aa7:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:160
}
ffff800000800aa9:	90                   	nop
ffff800000800aaa:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800aae:	c9                   	leave  
ffff800000800aaf:	c3                   	ret    

ffff800000800ab0 <general_protect>:
general_protect():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:161
void general_protect(){
ffff800000800ab0:	f3 0f 1e fa          	endbr64 
ffff800000800ab4:	55                   	push   rbp
ffff800000800ab5:	48 89 e5             	mov    rbp,rsp
ffff800000800ab8:	41 57                	push   r15
ffff800000800aba:	48 83 ec 18          	sub    rsp,0x18
ffff800000800abe:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800abe <general_protect+0xe>
ffff800000800ac5:	49 bb 72 2a 12 00 00 	movabs r11,0x122a72
ffff800000800acc:	00 00 00 
ffff800000800acf:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:163
    //print("general protect.");
    int err_code=0;
ffff800000800ad2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:181
    //杀死问题进程
    del_proc(cur_proc);
    printf("killed the problem process.\n");
	printf("shell:>");
    switch_proc_tss(0); */
    eoi();
ffff800000800ad9:	49 89 d7             	mov    r15,rdx
ffff800000800adc:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800ae1:	48 b9 de 62 ee ff ff 	movabs rcx,0xffffffffffee62de
ffff800000800ae8:	ff ff ff 
ffff800000800aeb:	48 01 d1             	add    rcx,rdx
ffff800000800aee:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:182
    __asm__ volatile ("leave\r\n add $8,%rsp \r\n iretq");
ffff800000800af0:	c9                   	leave  
ffff800000800af1:	48 83 c4 08          	add    rsp,0x8
ffff800000800af5:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:183
}
ffff800000800af7:	90                   	nop
ffff800000800af8:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800afc:	c9                   	leave  
ffff800000800afd:	c3                   	ret    

ffff800000800afe <coprocessor_err>:
coprocessor_err():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:185

void coprocessor_err(){
ffff800000800afe:	f3 0f 1e fa          	endbr64 
ffff800000800b02:	55                   	push   rbp
ffff800000800b03:	48 89 e5             	mov    rbp,rsp
ffff800000800b06:	41 57                	push   r15
ffff800000800b08:	48 83 ec 08          	sub    rsp,0x8
ffff800000800b0c:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800b0c <coprocessor_err+0xe>
ffff800000800b13:	49 bb 24 2a 12 00 00 	movabs r11,0x122a24
ffff800000800b1a:	00 00 00 
ffff800000800b1d:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:186
    __asm__("cli");
ffff800000800b20:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:188
    //puts("coprocessor err");
    eoi();
ffff800000800b21:	49 89 d7             	mov    r15,rdx
ffff800000800b24:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800b29:	48 b9 de 62 ee ff ff 	movabs rcx,0xffffffffffee62de
ffff800000800b30:	ff ff ff 
ffff800000800b33:	48 01 d1             	add    rcx,rdx
ffff800000800b36:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:189
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800b38:	fb                   	sti    
ffff800000800b39:	c9                   	leave  
ffff800000800b3a:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:190
}
ffff800000800b3c:	90                   	nop
ffff800000800b3d:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800b41:	c9                   	leave  
ffff800000800b42:	c3                   	ret    

ffff800000800b43 <syscall>:
syscall():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:209

xchg rcx to r10

*/
int syscall(long a, long b, long c, long d, long e, long f)
{
ffff800000800b43:	f3 0f 1e fa          	endbr64 
ffff800000800b47:	55                   	push   rbp
ffff800000800b48:	48 89 e5             	mov    rbp,rsp
ffff800000800b4b:	41 57                	push   r15
ffff800000800b4d:	53                   	push   rbx
ffff800000800b4e:	48 83 ec 40          	sub    rsp,0x40
ffff800000800b52:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000800b52 <syscall+0xf>
ffff800000800b59:	49 bb de 29 12 00 00 	movabs r11,0x1229de
ffff800000800b60:	00 00 00 
ffff800000800b63:	4c 01 db             	add    rbx,r11
ffff800000800b66:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000800b6a:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffff800000800b6e:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
ffff800000800b72:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
ffff800000800b76:	4c 89 45 b8          	mov    QWORD PTR [rbp-0x48],r8
ffff800000800b7a:	4c 89 4d b0          	mov    QWORD PTR [rbp-0x50],r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:211
    unsigned long num;
    __asm__ volatile("":"=a"(num));//这样rax中存的参数就到这了
ffff800000800b7e:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:212
    switch (num)
ffff800000800b82:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000800b86:	48 83 e8 05          	sub    rax,0x5
ffff800000800b8a:	48 83 f8 5f          	cmp    rax,0x5f
ffff800000800b8e:	0f 87 e9 02 00 00    	ja     ffff800000800e7d <syscall+0x33a>
ffff800000800b94:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000800b9b:	00 
ffff800000800b9c:	48 8d 05 1d f8 11 00 	lea    rax,[rip+0x11f81d]        # ffff8000009203c0 <filesystem+0x20>
ffff800000800ba3:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000800ba7:	48 8d 15 12 f8 11 00 	lea    rdx,[rip+0x11f812]        # ffff8000009203c0 <filesystem+0x20>
ffff800000800bae:	48 01 d0             	add    rax,rdx
ffff800000800bb1:	3e ff e0             	notrack jmp rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:219
        // case 0:return reg_device(a);
        // case 1:return dispose_device(a);
        // case 2:return reg_driver(a);
        // case 3:return dispose_driver(a);
        // case 4:return call_drv_func(a,b,c);
        case 5:return req_page_at(a,b);
ffff800000800bb4:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800bb8:	89 c2                	mov    edx,eax
ffff800000800bba:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800bbe:	89 d6                	mov    esi,edx
ffff800000800bc0:	48 89 c7             	mov    rdi,rax
ffff800000800bc3:	49 89 df             	mov    r15,rbx
ffff800000800bc6:	48 b8 bc 06 ee ff ff 	movabs rax,0xffffffffffee06bc
ffff800000800bcd:	ff ff ff 
ffff800000800bd0:	48 01 d8             	add    rax,rbx
ffff800000800bd3:	ff d0                	call   rax
ffff800000800bd5:	e9 a3 02 00 00       	jmp    ffff800000800e7d <syscall+0x33a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:220
        case 6:return free_page(a);
ffff800000800bda:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800bde:	48 89 c7             	mov    rdi,rax
ffff800000800be1:	49 89 df             	mov    r15,rbx
ffff800000800be4:	48 b8 b0 03 ee ff ff 	movabs rax,0xffffffffffee03b0
ffff800000800beb:	ff ff ff 
ffff800000800bee:	48 01 d8             	add    rax,rbx
ffff800000800bf1:	ff d0                	call   rax
ffff800000800bf3:	e9 85 02 00 00       	jmp    ffff800000800e7d <syscall+0x33a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:221
        case 7:return reg_proc(a, b, c);
ffff800000800bf8:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000800bfc:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffff800000800c00:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800c04:	48 89 ce             	mov    rsi,rcx
ffff800000800c07:	48 89 c7             	mov    rdi,rax
ffff800000800c0a:	49 89 df             	mov    r15,rbx
ffff800000800c0d:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800c12:	48 b9 8a 3a ee ff ff 	movabs rcx,0xffffffffffee3a8a
ffff800000800c19:	ff ff ff 
ffff800000800c1c:	48 01 d9             	add    rcx,rbx
ffff800000800c1f:	ff d1                	call   rcx
ffff800000800c21:	e9 57 02 00 00       	jmp    ffff800000800e7d <syscall+0x33a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:222
        case 8:del_proc(a);
ffff800000800c26:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800c2a:	89 c7                	mov    edi,eax
ffff800000800c2c:	49 89 df             	mov    r15,rbx
ffff800000800c2f:	48 b8 97 36 ee ff ff 	movabs rax,0xffffffffffee3697
ffff800000800c36:	ff ff ff 
ffff800000800c39:	48 01 d8             	add    rax,rbx
ffff800000800c3c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:223
        case 10:chk_vm(a,b);
ffff800000800c3e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800c42:	89 c2                	mov    edx,eax
ffff800000800c44:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800c48:	89 d6                	mov    esi,edx
ffff800000800c4a:	89 c7                	mov    edi,eax
ffff800000800c4c:	49 89 df             	mov    r15,rbx
ffff800000800c4f:	48 b8 ee 07 ee ff ff 	movabs rax,0xffffffffffee07ee
ffff800000800c56:	ff ff ff 
ffff800000800c59:	48 01 d8             	add    rax,rbx
ffff800000800c5c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:224
        case 11:return sys_open(a,b);
ffff800000800c5e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800c62:	89 c2                	mov    edx,eax
ffff800000800c64:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800c68:	89 d6                	mov    esi,edx
ffff800000800c6a:	48 89 c7             	mov    rdi,rax
ffff800000800c6d:	49 89 df             	mov    r15,rbx
ffff800000800c70:	48 b8 69 a3 ee ff ff 	movabs rax,0xffffffffffeea369
ffff800000800c77:	ff ff ff 
ffff800000800c7a:	48 01 d8             	add    rax,rbx
ffff800000800c7d:	ff d0                	call   rax
ffff800000800c7f:	e9 f9 01 00 00       	jmp    ffff800000800e7d <syscall+0x33a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:225
        case 12:return sys_close(a);
ffff800000800c84:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800c88:	89 c7                	mov    edi,eax
ffff800000800c8a:	49 89 df             	mov    r15,rbx
ffff800000800c8d:	48 b8 9d a9 ee ff ff 	movabs rax,0xffffffffffeea99d
ffff800000800c94:	ff ff ff 
ffff800000800c97:	48 01 d8             	add    rax,rbx
ffff800000800c9a:	ff d0                	call   rax
ffff800000800c9c:	e9 dc 01 00 00       	jmp    ffff800000800e7d <syscall+0x33a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:226
        case 13:return sys_read(a,b,c);
ffff800000800ca1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800ca5:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000800ca9:	89 d1                	mov    ecx,edx
ffff800000800cab:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000800caf:	48 89 c6             	mov    rsi,rax
ffff800000800cb2:	89 cf                	mov    edi,ecx
ffff800000800cb4:	49 89 df             	mov    r15,rbx
ffff800000800cb7:	48 b8 a6 aa ee ff ff 	movabs rax,0xffffffffffeeaaa6
ffff800000800cbe:	ff ff ff 
ffff800000800cc1:	48 01 d8             	add    rax,rbx
ffff800000800cc4:	ff d0                	call   rax
ffff800000800cc6:	e9 b2 01 00 00       	jmp    ffff800000800e7d <syscall+0x33a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:227
        case 14:return sys_write(a,b,c);
ffff800000800ccb:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800ccf:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000800cd3:	89 d1                	mov    ecx,edx
ffff800000800cd5:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000800cd9:	48 89 c6             	mov    rsi,rax
ffff800000800cdc:	89 cf                	mov    edi,ecx
ffff800000800cde:	49 89 df             	mov    r15,rbx
ffff800000800ce1:	48 b8 74 ab ee ff ff 	movabs rax,0xffffffffffeeab74
ffff800000800ce8:	ff ff ff 
ffff800000800ceb:	48 01 d8             	add    rax,rbx
ffff800000800cee:	ff d0                	call   rax
ffff800000800cf0:	e9 88 01 00 00       	jmp    ffff800000800e7d <syscall+0x33a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:228
        case 15:return sys_lseek(a,b,c);
ffff800000800cf5:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000800cf9:	89 c2                	mov    edx,eax
ffff800000800cfb:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800cff:	89 c1                	mov    ecx,eax
ffff800000800d01:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800d05:	48 89 c6             	mov    rsi,rax
ffff800000800d08:	89 cf                	mov    edi,ecx
ffff800000800d0a:	49 89 df             	mov    r15,rbx
ffff800000800d0d:	48 b8 42 ac ee ff ff 	movabs rax,0xffffffffffeeac42
ffff800000800d14:	ff ff ff 
ffff800000800d17:	48 01 d8             	add    rax,rbx
ffff800000800d1a:	ff d0                	call   rax
ffff800000800d1c:	e9 5c 01 00 00       	jmp    ffff800000800e7d <syscall+0x33a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:232
        // case 16:return sys_tell(a);
        // case 17:return reg_vol(a,b,c);
        // case 18:return free_vol(a);
        case 19:return execute(a, NULL);
ffff800000800d21:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800d25:	be 00 00 00 00       	mov    esi,0x0
ffff800000800d2a:	48 89 c7             	mov    rdi,rax
ffff800000800d2d:	49 89 df             	mov    r15,rbx
ffff800000800d30:	48 b8 54 66 ee ff ff 	movabs rax,0xffffffffffee6654
ffff800000800d37:	ff ff ff 
ffff800000800d3a:	48 01 d8             	add    rax,rbx
ffff800000800d3d:	ff d0                	call   rax
ffff800000800d3f:	e9 39 01 00 00       	jmp    ffff800000800e7d <syscall+0x33a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:233
        case SYSCALL_EXIT:return sys_exit(a);
ffff800000800d44:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800d48:	89 c7                	mov    edi,eax
ffff800000800d4a:	49 89 df             	mov    r15,rbx
ffff800000800d4d:	48 b8 10 3a ee ff ff 	movabs rax,0xffffffffffee3a10
ffff800000800d54:	ff ff ff 
ffff800000800d57:	48 01 d8             	add    rax,rbx
ffff800000800d5a:	ff d0                	call   rax
ffff800000800d5c:	e9 1c 01 00 00       	jmp    ffff800000800e7d <syscall+0x33a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:234
        case SYSCALL_CALL:return exec_call(a);
ffff800000800d61:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800d65:	48 89 c7             	mov    rdi,rax
ffff800000800d68:	49 89 df             	mov    r15,rbx
ffff800000800d6b:	48 b8 ca 6b ee ff ff 	movabs rax,0xffffffffffee6bca
ffff800000800d72:	ff ff ff 
ffff800000800d75:	48 01 d8             	add    rax,rbx
ffff800000800d78:	ff d0                	call   rax
ffff800000800d7a:	e9 fe 00 00 00       	jmp    ffff800000800e7d <syscall+0x33a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:236
        // case SYSCALL_MKFIFO:return sys_mkfifo(a);
        case SYSCALL_BRK:return sys_brk(a);
ffff800000800d7f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800d83:	48 89 c7             	mov    rdi,rax
ffff800000800d86:	49 89 df             	mov    r15,rbx
ffff800000800d89:	48 b8 3a b0 ee ff ff 	movabs rax,0xffffffffffeeb03a
ffff800000800d90:	ff ff ff 
ffff800000800d93:	48 01 d8             	add    rax,rbx
ffff800000800d96:	ff d0                	call   rax
ffff800000800d98:	e9 e0 00 00 00       	jmp    ffff800000800e7d <syscall+0x33a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:237
        case SYSCALL_FREE:return sys_free(a);
ffff800000800d9d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800da1:	89 c7                	mov    edi,eax
ffff800000800da3:	49 89 df             	mov    r15,rbx
ffff800000800da6:	48 b8 0c 3f ee ff ff 	movabs rax,0xffffffffffee3f0c
ffff800000800dad:	ff ff ff 
ffff800000800db0:	48 01 d8             	add    rax,rbx
ffff800000800db3:	ff d0                	call   rax
ffff800000800db5:	e9 c3 00 00 00       	jmp    ffff800000800e7d <syscall+0x33a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:238
        case SYSCALL_KB_READC:return sys_analyse_key();
ffff800000800dba:	49 89 df             	mov    r15,rbx
ffff800000800dbd:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800dc2:	48 ba 3b d4 ee ff ff 	movabs rdx,0xffffffffffeed43b
ffff800000800dc9:	ff ff ff 
ffff800000800dcc:	48 01 da             	add    rdx,rbx
ffff800000800dcf:	ff d2                	call   rdx
ffff800000800dd1:	0f be c0             	movsx  eax,al
ffff800000800dd4:	e9 a4 00 00 00       	jmp    ffff800000800e7d <syscall+0x33a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:240
        // case SYSCALL_FIND_DEV:return sys_find_dev(a);
        case SYSCALL_FORK:return sys_fork();
ffff800000800dd9:	49 89 df             	mov    r15,rbx
ffff800000800ddc:	48 b8 44 43 ee ff ff 	movabs rax,0xffffffffffee4344
ffff800000800de3:	ff ff ff 
ffff800000800de6:	48 01 d8             	add    rax,rbx
ffff800000800de9:	ff d0                	call   rax
ffff800000800deb:	e9 8d 00 00 00       	jmp    ffff800000800e7d <syscall+0x33a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:241
        case SYSCALL_EXECVE:return sys_execve(a, b, c);
ffff800000800df0:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000800df4:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800df8:	89 c1                	mov    ecx,eax
ffff800000800dfa:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800dfe:	89 ce                	mov    esi,ecx
ffff800000800e00:	48 89 c7             	mov    rdi,rax
ffff800000800e03:	49 89 df             	mov    r15,rbx
ffff800000800e06:	48 b8 48 67 ee ff ff 	movabs rax,0xffffffffffee6748
ffff800000800e0d:	ff ff ff 
ffff800000800e10:	48 01 d8             	add    rax,rbx
ffff800000800e13:	ff d0                	call   rax
ffff800000800e15:	eb 66                	jmp    ffff800000800e7d <syscall+0x33a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:243
        // case SYSCALL_OPERATE_DEV:return sys_operate_dev(a,b,c);
        case SYSCALL_WAIT:return sys_wait(a,b,c);
ffff800000800e17:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000800e1b:	89 c6                	mov    esi,eax
ffff800000800e1d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800e21:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000800e25:	89 d1                	mov    ecx,edx
ffff800000800e27:	89 f2                	mov    edx,esi
ffff800000800e29:	48 89 c6             	mov    rsi,rax
ffff800000800e2c:	89 cf                	mov    edi,ecx
ffff800000800e2e:	49 89 df             	mov    r15,rbx
ffff800000800e31:	48 b8 a2 ad ee ff ff 	movabs rax,0xffffffffffeeada2
ffff800000800e38:	ff ff ff 
ffff800000800e3b:	48 01 d8             	add    rax,rbx
ffff800000800e3e:	ff d0                	call   rax
ffff800000800e40:	eb 3b                	jmp    ffff800000800e7d <syscall+0x33a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:244
        case SYSCALL_MMAP:return sys_mmap(a,b,c,d,e,f);
ffff800000800e42:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffff800000800e46:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000800e4a:	41 89 c0             	mov    r8d,eax
ffff800000800e4d:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000800e51:	89 c1                	mov    ecx,eax
ffff800000800e53:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000800e57:	89 c7                	mov    edi,eax
ffff800000800e59:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff800000800e5d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800e61:	49 89 d1             	mov    r9,rdx
ffff800000800e64:	89 fa                	mov    edx,edi
ffff800000800e66:	48 89 c7             	mov    rdi,rax
ffff800000800e69:	49 89 df             	mov    r15,rbx
ffff800000800e6c:	48 b8 a7 b5 ee ff ff 	movabs rax,0xffffffffffeeb5a7
ffff800000800e73:	ff ff ff 
ffff800000800e76:	48 01 d8             	add    rax,rbx
ffff800000800e79:	ff d0                	call   rax
ffff800000800e7b:	eb 00                	jmp    ffff800000800e7d <syscall+0x33a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:250
    }
    // __asm__ volatile("mov %0,%%eax\r\n mov %1,%%ebx\r\n mov %2,%%ecx\r\n mov %3,%%edx\r\n mov %4,%%esi\r\n mov %5,%%edi"\
    // ::"m"(func),"m"(a),"m"(b),"m"(c),"m"(d),"m"(e));
    // __asm__ volatile("int $0x80\r\n leave\r\n ret");

}
ffff800000800e7d:	48 83 c4 40          	add    rsp,0x40
ffff800000800e81:	5b                   	pop    rbx
ffff800000800e82:	41 5f                	pop    r15
ffff800000800e84:	5d                   	pop    rbp
ffff800000800e85:	c3                   	ret    

ffff800000800e86 <wrmsr>:
wrmsr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:252
void wrmsr(unsigned long address,unsigned long value)
{
ffff800000800e86:	f3 0f 1e fa          	endbr64 
ffff800000800e8a:	55                   	push   rbp
ffff800000800e8b:	48 89 e5             	mov    rbp,rsp
ffff800000800e8e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000800e8e <wrmsr+0x8>
ffff800000800e95:	49 bb a2 26 12 00 00 	movabs r11,0x1226a2
ffff800000800e9c:	00 00 00 
ffff800000800e9f:	4c 01 d8             	add    rax,r11
ffff800000800ea2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000800ea6:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:253
    __asm__ __volatile__	("wrmsr	\n\t"::"d"(value >> 32),"a"(value & 0xffffffff),"c"(address):"memory");
ffff800000800eaa:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000800eae:	48 c1 e8 20          	shr    rax,0x20
ffff800000800eb2:	48 89 c2             	mov    rdx,rax
ffff800000800eb5:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000800eb9:	89 c0                	mov    eax,eax
ffff800000800ebb:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
ffff800000800ebf:	0f 30                	wrmsr  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:254
}
ffff800000800ec1:	90                   	nop
ffff800000800ec2:	5d                   	pop    rbp
ffff800000800ec3:	c3                   	ret    

ffff800000800ec4 <get_ksym>:
get_ksym():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:255
ksym *get_ksym(off_t addr){
ffff800000800ec4:	f3 0f 1e fa          	endbr64 
ffff800000800ec8:	55                   	push   rbp
ffff800000800ec9:	48 89 e5             	mov    rbp,rsp
ffff800000800ecc:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000800ecc <get_ksym+0x8>
ffff800000800ed3:	49 bb 64 26 12 00 00 	movabs r11,0x122664
ffff800000800eda:	00 00 00 
ffff800000800edd:	4c 01 d8             	add    rax,r11
ffff800000800ee0:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:258
    extern char _binary_bin_kallsyms_bin_start[]__attribute__((weak)), \
    _binary_bin_kallsyms_bin_end[] __attribute__((weak));
    ksym *sym=_binary_bin_kallsyms_bin_start,*bef=sym;
ffff800000800ee4:	48 ba 68 fe ff ff ff 	movabs rdx,0xfffffffffffffe68
ffff800000800eeb:	ff ff ff 
ffff800000800eee:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000800ef2:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffff800000800ef6:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000800efa:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:259
    off_t func_belonged=sym->addr;//所属函数
ffff800000800efe:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000800f02:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000800f05:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:260
    while (sym<_binary_bin_kallsyms_bin_end&&sym->addr<addr)
ffff800000800f09:	eb 33                	jmp    ffff800000800f3e <get_ksym+0x7a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:262
    {
        bef=sym;
ffff800000800f0b:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000800f0f:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:263
        func_belonged=sym->addr;
ffff800000800f13:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000800f17:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000800f1a:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:264
        int namelen=sym->namelen;
ffff800000800f1e:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000800f22:	8b 52 09             	mov    edx,DWORD PTR [rdx+0x9]
ffff800000800f25:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:265
        sym+=1;
ffff800000800f28:	48 83 45 f8 0d       	add    QWORD PTR [rbp-0x8],0xd
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:266
        sym=(off_t)sym+namelen;
ffff800000800f2d:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffff800000800f30:	48 63 ca             	movsxd rcx,edx
ffff800000800f33:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000800f37:	48 01 ca             	add    rdx,rcx
ffff800000800f3a:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:260
    while (sym<_binary_bin_kallsyms_bin_end&&sym->addr<addr)
ffff800000800f3e:	48 ba 00 fe ff ff ff 	movabs rdx,0xfffffffffffffe00
ffff800000800f45:	ff ff ff 
ffff800000800f48:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000800f4c:	48 39 55 f8          	cmp    QWORD PTR [rbp-0x8],rdx
ffff800000800f50:	73 0d                	jae    ffff800000800f5f <get_ksym+0x9b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:260 (discriminator 1)
ffff800000800f52:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000800f56:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000800f59:	48 39 55 d8          	cmp    QWORD PTR [rbp-0x28],rdx
ffff800000800f5d:	77 ac                	ja     ffff800000800f0b <get_ksym+0x47>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:268
    }
    return bef;
ffff800000800f5f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:269
}
ffff800000800f63:	5d                   	pop    rbp
ffff800000800f64:	c3                   	ret    

ffff800000800f65 <print_ksym>:
print_ksym():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:271
//根据给定的地址找到相应的内核符号，然后输出，如果找不到，就当成单纯的值输出。
int print_ksym(off_t addr){
ffff800000800f65:	f3 0f 1e fa          	endbr64 
ffff800000800f69:	55                   	push   rbp
ffff800000800f6a:	48 89 e5             	mov    rbp,rsp
ffff800000800f6d:	41 57                	push   r15
ffff800000800f6f:	53                   	push   rbx
ffff800000800f70:	48 83 c4 80          	add    rsp,0xffffffffffffff80
ffff800000800f74:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000800f74 <print_ksym+0xf>
ffff800000800f7b:	49 bb bc 25 12 00 00 	movabs r11,0x1225bc
ffff800000800f82:	00 00 00 
ffff800000800f85:	4c 01 db             	add    rbx,r11
ffff800000800f88:	48 89 bd 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:272
    ksym *ks=get_ksym(addr);
ffff800000800f8f:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000800f96:	48 89 c7             	mov    rdi,rax
ffff800000800f99:	49 89 df             	mov    r15,rbx
ffff800000800f9c:	48 b8 94 d9 ed ff ff 	movabs rax,0xffffffffffedd994
ffff800000800fa3:	ff ff ff 
ffff800000800fa6:	48 01 d8             	add    rax,rbx
ffff800000800fa9:	ff d0                	call   rax
ffff800000800fab:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:273
    if(!ks){
ffff800000800faf:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff800000800fb4:	75 3c                	jne    ffff800000800ff2 <print_ksym+0x8d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:274
        comprintf("%l\n",addr); 
ffff800000800fb6:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000800fbd:	48 89 c6             	mov    rsi,rax
ffff800000800fc0:	48 b8 90 d1 ff ff ff 	movabs rax,0xffffffffffffd190
ffff800000800fc7:	ff ff ff 
ffff800000800fca:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000800fce:	48 89 c7             	mov    rdi,rax
ffff800000800fd1:	49 89 df             	mov    r15,rbx
ffff800000800fd4:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800fd9:	48 ba 62 18 ef ff ff 	movabs rdx,0xffffffffffef1862
ffff800000800fe0:	ff ff ff 
ffff800000800fe3:	48 01 da             	add    rdx,rbx
ffff800000800fe6:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:275
        return 0;
ffff800000800fe8:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800fed:	e9 8c 00 00 00       	jmp    ffff80000080107e <print_ksym+0x119>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:278
    }else{
        char buf[100];
        memcpy(buf,ks+1,ks->namelen);
ffff800000800ff2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000800ff6:	8b 40 09             	mov    eax,DWORD PTR [rax+0x9]
ffff800000800ff9:	48 63 d0             	movsxd rdx,eax
ffff800000800ffc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801000:	48 8d 48 0d          	lea    rcx,[rax+0xd]
ffff800000801004:	48 8d 45 80          	lea    rax,[rbp-0x80]
ffff800000801008:	48 89 ce             	mov    rsi,rcx
ffff80000080100b:	48 89 c7             	mov    rdi,rax
ffff80000080100e:	49 89 df             	mov    r15,rbx
ffff800000801011:	48 b8 02 1d ef ff ff 	movabs rax,0xffffffffffef1d02
ffff800000801018:	ff ff ff 
ffff80000080101b:	48 01 d8             	add    rax,rbx
ffff80000080101e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:279
        buf[ks->namelen]=0;
ffff800000801020:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801024:	8b 40 09             	mov    eax,DWORD PTR [rax+0x9]
ffff800000801027:	48 98                	cdqe   
ffff800000801029:	c6 44 05 80 00       	mov    BYTE PTR [rbp+rax*1-0x80],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:280
        comprintf("%l %s:%l\n",ks->addr,buf,addr-ks->addr);
ffff80000080102e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801032:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000801035:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff80000080103c:	48 29 d0             	sub    rax,rdx
ffff80000080103f:	48 89 c1             	mov    rcx,rax
ffff800000801042:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801046:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801049:	48 8d 55 80          	lea    rdx,[rbp-0x80]
ffff80000080104d:	48 89 c6             	mov    rsi,rax
ffff800000801050:	48 b8 94 d1 ff ff ff 	movabs rax,0xffffffffffffd194
ffff800000801057:	ff ff ff 
ffff80000080105a:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080105e:	48 89 c7             	mov    rdi,rax
ffff800000801061:	49 89 df             	mov    r15,rbx
ffff800000801064:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801069:	49 b8 62 18 ef ff ff 	movabs r8,0xffffffffffef1862
ffff800000801070:	ff ff ff 
ffff800000801073:	49 01 d8             	add    r8,rbx
ffff800000801076:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:281
        return 1;
ffff800000801079:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:283 (discriminator 1)
    }
}
ffff80000080107e:	48 83 ec 80          	sub    rsp,0xffffffffffffff80
ffff800000801082:	5b                   	pop    rbx
ffff800000801083:	41 5f                	pop    r15
ffff800000801085:	5d                   	pop    rbp
ffff800000801086:	c3                   	ret    

ffff800000801087 <backtrace>:
backtrace():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:284
void backtrace(off_t* ret_stack){
ffff800000801087:	f3 0f 1e fa          	endbr64 
ffff80000080108b:	55                   	push   rbp
ffff80000080108c:	48 89 e5             	mov    rbp,rsp
ffff80000080108f:	41 57                	push   r15
ffff800000801091:	53                   	push   rbx
ffff800000801092:	48 83 ec 20          	sub    rsp,0x20
ffff800000801096:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000801096 <backtrace+0xf>
ffff80000080109d:	49 bb 9a 24 12 00 00 	movabs r11,0x12249a
ffff8000008010a4:	00 00 00 
ffff8000008010a7:	4c 01 db             	add    rbx,r11
ffff8000008010aa:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:285
    __asm__ volatile("mov %%rbp,%0":"=m"(ret_stack));
ffff8000008010ae:	48 89 6d d8          	mov    QWORD PTR [rbp-0x28],rbp
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:286
    ret_stack=ret_stack[0];
ffff8000008010b2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008010b6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008010b9:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:287
    off_t addr=ret_stack[2];//第一级返回函数地址
ffff8000008010bd:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008010c1:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008010c5:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:288
    comprintf("Backtrace:\n");
ffff8000008010c9:	48 b8 9e d1 ff ff ff 	movabs rax,0xffffffffffffd19e
ffff8000008010d0:	ff ff ff 
ffff8000008010d3:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008010d7:	48 89 c7             	mov    rdi,rax
ffff8000008010da:	49 89 df             	mov    r15,rbx
ffff8000008010dd:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008010e2:	48 ba 62 18 ef ff ff 	movabs rdx,0xffffffffffef1862
ffff8000008010e9:	ff ff ff 
ffff8000008010ec:	48 01 da             	add    rdx,rbx
ffff8000008010ef:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:289
    print_ksym(addr);
ffff8000008010f1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008010f5:	48 89 c7             	mov    rdi,rax
ffff8000008010f8:	49 89 df             	mov    r15,rbx
ffff8000008010fb:	48 b8 35 da ed ff ff 	movabs rax,0xffffffffffedda35
ffff800000801102:	ff ff ff 
ffff800000801105:	48 01 d8             	add    rax,rbx
ffff800000801108:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:291
    //回到用户栈，回溯
    ret_stack=ret_stack[0];
ffff80000080110a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080110e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801111:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:292
    for (int i = 0; i < 10;i++)
ffff800000801115:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff80000080111c:	eb 42                	jmp    ffff800000801160 <backtrace+0xd9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:294
    {
        print_ksym(ret_stack[1]);
ffff80000080111e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000801122:	48 83 c0 08          	add    rax,0x8
ffff800000801126:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801129:	48 89 c7             	mov    rdi,rax
ffff80000080112c:	49 89 df             	mov    r15,rbx
ffff80000080112f:	48 b8 35 da ed ff ff 	movabs rax,0xffffffffffedda35
ffff800000801136:	ff ff ff 
ffff800000801139:	48 01 d8             	add    rax,rbx
ffff80000080113c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:295
        ret_stack=ret_stack[0];
ffff80000080113e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000801142:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801145:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:296
        if(ret_stack<KNL_BASE)break;//超过栈顶
ffff800000801149:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080114d:	48 ba ff ff ff ff ff 	movabs rdx,0xffff7fffffffffff
ffff800000801154:	7f ff ff 
ffff800000801157:	48 39 d0             	cmp    rax,rdx
ffff80000080115a:	76 0c                	jbe    ffff800000801168 <backtrace+0xe1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:292 (discriminator 2)
    for (int i = 0; i < 10;i++)
ffff80000080115c:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:292 (discriminator 1)
ffff800000801160:	83 7d ec 09          	cmp    DWORD PTR [rbp-0x14],0x9
ffff800000801164:	7e b8                	jle    ffff80000080111e <backtrace+0x97>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:300
    }
    

ffff800000801166:	eb 01                	jmp    ffff800000801169 <backtrace+0xe2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:296
        if(ret_stack<KNL_BASE)break;//超过栈顶
ffff800000801168:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:300
ffff800000801169:	90                   	nop
ffff80000080116a:	48 83 c4 20          	add    rsp,0x20
ffff80000080116e:	5b                   	pop    rbx
ffff80000080116f:	41 5f                	pop    r15
ffff800000801171:	5d                   	pop    rbp
ffff800000801172:	c3                   	ret    

ffff800000801173 <main>:
main():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:24
#include "ramdisk.h"
#include "ramfs.h"

int manage_proc_lock=1;
void main(unsigned int magic,void* addr)
{
ffff800000801173:	f3 0f 1e fa          	endbr64 
ffff800000801177:	55                   	push   rbp
ffff800000801178:	48 89 e5             	mov    rbp,rsp
ffff80000080117b:	41 57                	push   r15
ffff80000080117d:	53                   	push   rbx
ffff80000080117e:	48 81 ec 00 01 00 00 	sub    rsp,0x100
ffff800000801185:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000801185 <main+0x12>
ffff80000080118c:	49 bb ab 23 12 00 00 	movabs r11,0x1223ab
ffff800000801193:	00 00 00 
ffff800000801196:	4c 01 db             	add    rbx,r11
ffff800000801199:	89 bd fc fe ff ff    	mov    DWORD PTR [rbp-0x104],edi
ffff80000080119f:	48 89 b5 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:26

    struct multiboot_header* mbi=0ul;
ffff8000008011a6:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff8000008011ad:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:27
    mbi=(struct multiboot_header*)addr;
ffff8000008011ae:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff8000008011b5:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:28
    init_logging();
ffff8000008011b9:	49 89 df             	mov    r15,rbx
ffff8000008011bc:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008011c1:	48 ba c4 e2 ed ff ff 	movabs rdx,0xffffffffffede2c4
ffff8000008011c8:	ff ff ff 
ffff8000008011cb:	48 01 da             	add    rdx,rbx
ffff8000008011ce:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:38
    }
    //获取tags
    struct multiboot_tag *tag;

    //先初始化串口，保证输出最基本的调试信息
    init_com(PORT_COM1);
ffff8000008011d0:	bf f8 03 00 00       	mov    edi,0x3f8
ffff8000008011d5:	49 89 df             	mov    r15,rbx
ffff8000008011d8:	48 b8 36 16 ef ff ff 	movabs rax,0xffffffffffef1636
ffff8000008011df:	ff ff ff 
ffff8000008011e2:	48 01 d8             	add    rax,rbx
ffff8000008011e5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:39
    comprintf("\rgamessis os loaded.\r\n");
ffff8000008011e7:	48 b8 b0 d1 ff ff ff 	movabs rax,0xffffffffffffd1b0
ffff8000008011ee:	ff ff ff 
ffff8000008011f1:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008011f5:	48 89 c7             	mov    rdi,rax
ffff8000008011f8:	49 89 df             	mov    r15,rbx
ffff8000008011fb:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801200:	48 ba 62 18 ef ff ff 	movabs rdx,0xffffffffffef1862
ffff800000801207:	ff ff ff 
ffff80000080120a:	48 01 da             	add    rdx,rbx
ffff80000080120d:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:41
	unsigned size;
    size = *(unsigned long*)addr;
ffff80000080120f:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff800000801216:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801219:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:43
//    //printf("Announced mbi size 0x%x\n", size);
	for (tag = (struct multiboot_tag *)(addr + 8);
ffff80000080121c:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff800000801223:	48 83 c0 08          	add    rax,0x8
ffff800000801227:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff80000080122b:	e9 93 02 00 00       	jmp    ffff8000008014c3 <main+0x350>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:48
		 tag->type != MULTIBOOT_TAG_TYPE_END;
		 tag = (struct multiboot_tag *)((u8 *)tag + ((tag->size + 7) & ~7)))
	{
		//printf("Tag 0x%x, Size 0x%x\n", tag->type, tag->size);
		switch (tag->type)
ffff800000801230:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801234:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000801236:	83 f8 08             	cmp    eax,0x8
ffff800000801239:	0f 87 71 02 00 00    	ja     ffff8000008014b0 <main+0x33d>
ffff80000080123f:	89 c0                	mov    eax,eax
ffff800000801241:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000801248:	00 
ffff800000801249:	48 8d 05 f0 f4 11 00 	lea    rax,[rip+0x11f4f0]        # ffff800000920740 <.LC4+0x11>
ffff800000801250:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000801254:	48 8d 15 e5 f4 11 00 	lea    rdx,[rip+0x11f4e5]        # ffff800000920740 <.LC4+0x11>
ffff80000080125b:	48 01 d0             	add    rax,rdx
ffff80000080125e:	3e ff e0             	notrack jmp rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:66
			break;
		case MULTIBOOT_TAG_TYPE_BASIC_MEMINFO:
			//printf("mem_lower = %uKB, mem_upper = %uKB\n",
//				   ((struct multiboot_tag_basic_meminfo *)tag)->mem_lower,
//				   ((struct multiboot_tag_basic_meminfo *)tag)->mem_upper);
			set_high_mem_base(((struct multiboot_tag_basic_meminfo *)tag)->mem_lower);
ffff800000801261:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801265:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000801268:	89 c7                	mov    edi,eax
ffff80000080126a:	49 89 df             	mov    r15,rbx
ffff80000080126d:	48 b8 c2 eb ed ff ff 	movabs rax,0xffffffffffedebc2
ffff800000801274:	ff ff ff 
ffff800000801277:	48 01 d8             	add    rax,rbx
ffff80000080127a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:67
			break;
ffff80000080127c:	e9 2f 02 00 00       	jmp    ffff8000008014b0 <main+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:80

			break;
		case MULTIBOOT_TAG_TYPE_MMAP:
		{
			//printf("mmap\n");
            for (multiboot_memory_map_t * mmap = ((struct multiboot_tag_mmap *)tag)->entries;
ffff800000801281:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801285:	48 83 c0 10          	add    rax,0x10
ffff800000801289:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffff80000080128d:	eb 44                	jmp    ffff8000008012d3 <main+0x160>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:84
                    (multiboot_uint8_t *)mmap < (multiboot_uint8_t *)tag + tag->size;
                    mmap = (multiboot_memory_map_t *)((unsigned long)mmap + ((struct multiboot_tag_mmap *)tag)->entry_size))
            {
                set_mem_area(mmap->addr,mmap->len,mmap->type);
ffff80000080128f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801293:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff800000801296:	89 c2                	mov    edx,eax
ffff800000801298:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080129c:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
ffff8000008012a0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008012a4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008012a7:	48 89 ce             	mov    rsi,rcx
ffff8000008012aa:	48 89 c7             	mov    rdi,rax
ffff8000008012ad:	49 89 df             	mov    r15,rbx
ffff8000008012b0:	48 b8 f7 eb ed ff ff 	movabs rax,0xffffffffffedebf7
ffff8000008012b7:	ff ff ff 
ffff8000008012ba:	48 01 d8             	add    rax,rbx
ffff8000008012bd:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:82
                    mmap = (multiboot_memory_map_t *)((unsigned long)mmap + ((struct multiboot_tag_mmap *)tag)->entry_size))
ffff8000008012bf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008012c3:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff8000008012c6:	89 c2                	mov    edx,eax
ffff8000008012c8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008012cc:	48 01 d0             	add    rax,rdx
ffff8000008012cf:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:81
                    (multiboot_uint8_t *)mmap < (multiboot_uint8_t *)tag + tag->size;
ffff8000008012d3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008012d7:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff8000008012da:	89 c2                	mov    edx,eax
ffff8000008012dc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008012e0:	48 01 d0             	add    rax,rdx
ffff8000008012e3:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
ffff8000008012e7:	72 a6                	jb     ffff80000080128f <main+0x11c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:88
            }

		}
		break;
ffff8000008012e9:	e9 c2 01 00 00       	jmp    ffff8000008014b0 <main+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:93
		case MULTIBOOT_TAG_TYPE_FRAMEBUFFER:
		{
			multiboot_uint32_t color;
			unsigned i;
			struct multiboot_tag_framebuffer *tagfb = (struct multiboot_tag_framebuffer *)tag;
ffff8000008012ee:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008012f2:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:94
			void *fb = (void *) FRAMEBUFFER_ADDR;
ffff8000008012f6:	48 b8 00 00 00 40 00 	movabs rax,0xffff800040000000
ffff8000008012fd:	80 ff ff 
ffff800000801300:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:95
			set_framebuffer(*tagfb);
ffff800000801304:	48 83 ec 08          	sub    rsp,0x8
ffff800000801308:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080130c:	ff 70 20             	push   QWORD PTR [rax+0x20]
ffff80000080130f:	ff 70 18             	push   QWORD PTR [rax+0x18]
ffff800000801312:	ff 70 10             	push   QWORD PTR [rax+0x10]
ffff800000801315:	ff 70 08             	push   QWORD PTR [rax+0x8]
ffff800000801318:	ff 30                	push   QWORD PTR [rax]
ffff80000080131a:	49 89 df             	mov    r15,rbx
ffff80000080131d:	48 b8 65 8c ee ff ff 	movabs rax,0xffffffffffee8c65
ffff800000801324:	ff ff ff 
ffff800000801327:	48 01 d8             	add    rax,rbx
ffff80000080132a:	ff d0                	call   rax
ffff80000080132c:	48 83 c4 30          	add    rsp,0x30
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:97

			switch (tagfb->common.framebuffer_type)
ffff800000801330:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801334:	0f b6 40 1d          	movzx  eax,BYTE PTR [rax+0x1d]
ffff800000801338:	0f b6 c0             	movzx  eax,al
ffff80000080133b:	83 f8 02             	cmp    eax,0x2
ffff80000080133e:	0f 84 5a 01 00 00    	je     ffff80000080149e <main+0x32b>
ffff800000801344:	83 f8 02             	cmp    eax,0x2
ffff800000801347:	0f 8f 5a 01 00 00    	jg     ffff8000008014a7 <main+0x334>
ffff80000080134d:	85 c0                	test   eax,eax
ffff80000080134f:	74 0e                	je     ffff80000080135f <main+0x1ec>
ffff800000801351:	83 f8 01             	cmp    eax,0x1
ffff800000801354:	0f 84 15 01 00 00    	je     ffff80000080146f <main+0x2fc>
ffff80000080135a:	e9 48 01 00 00       	jmp    ffff8000008014a7 <main+0x334>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:104
			case MULTIBOOT_FRAMEBUFFER_TYPE_INDEXED:
			{
				unsigned best_distance, distance;
				struct multiboot_color *palette;

				palette = tagfb->framebuffer_palette;
ffff80000080135f:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801363:	48 83 c0 22          	add    rax,0x22
ffff800000801367:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:106

				color = 0;
ffff80000080136b:	c7 45 b4 00 00 00 00 	mov    DWORD PTR [rbp-0x4c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:107
				best_distance = 4 * 256 * 256;
ffff800000801372:	c7 45 d8 00 00 04 00 	mov    DWORD PTR [rbp-0x28],0x40000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:109

				for (i = 0; i < tagfb->framebuffer_palette_num_colors; i++)
ffff800000801379:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
ffff800000801380:	e9 d4 00 00 00       	jmp    ffff800000801459 <main+0x2e6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:111
				{
					distance = (0xff - palette[i].blue) * (0xff - palette[i].blue) + palette[i].red * palette[i].red + palette[i].green * palette[i].green;
ffff800000801385:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000801388:	48 89 d0             	mov    rax,rdx
ffff80000080138b:	48 01 c0             	add    rax,rax
ffff80000080138e:	48 01 c2             	add    rdx,rax
ffff800000801391:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000801395:	48 01 d0             	add    rax,rdx
ffff800000801398:	0f b6 40 02          	movzx  eax,BYTE PTR [rax+0x2]
ffff80000080139c:	0f b6 c0             	movzx  eax,al
ffff80000080139f:	ba ff 00 00 00       	mov    edx,0xff
ffff8000008013a4:	89 d1                	mov    ecx,edx
ffff8000008013a6:	29 c1                	sub    ecx,eax
ffff8000008013a8:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff8000008013ab:	48 89 d0             	mov    rax,rdx
ffff8000008013ae:	48 01 c0             	add    rax,rax
ffff8000008013b1:	48 01 c2             	add    rdx,rax
ffff8000008013b4:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008013b8:	48 01 d0             	add    rax,rdx
ffff8000008013bb:	0f b6 40 02          	movzx  eax,BYTE PTR [rax+0x2]
ffff8000008013bf:	0f b6 d0             	movzx  edx,al
ffff8000008013c2:	b8 ff 00 00 00       	mov    eax,0xff
ffff8000008013c7:	29 d0                	sub    eax,edx
ffff8000008013c9:	89 ce                	mov    esi,ecx
ffff8000008013cb:	0f af f0             	imul   esi,eax
ffff8000008013ce:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff8000008013d1:	48 89 d0             	mov    rax,rdx
ffff8000008013d4:	48 01 c0             	add    rax,rax
ffff8000008013d7:	48 01 c2             	add    rdx,rax
ffff8000008013da:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008013de:	48 01 d0             	add    rax,rdx
ffff8000008013e1:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008013e4:	0f b6 c8             	movzx  ecx,al
ffff8000008013e7:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff8000008013ea:	48 89 d0             	mov    rax,rdx
ffff8000008013ed:	48 01 c0             	add    rax,rax
ffff8000008013f0:	48 01 c2             	add    rdx,rax
ffff8000008013f3:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008013f7:	48 01 d0             	add    rax,rdx
ffff8000008013fa:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008013fd:	0f b6 c0             	movzx  eax,al
ffff800000801400:	0f af c1             	imul   eax,ecx
ffff800000801403:	01 c6                	add    esi,eax
ffff800000801405:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000801408:	48 89 d0             	mov    rax,rdx
ffff80000080140b:	48 01 c0             	add    rax,rax
ffff80000080140e:	48 01 c2             	add    rdx,rax
ffff800000801411:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000801415:	48 01 d0             	add    rax,rdx
ffff800000801418:	0f b6 40 01          	movzx  eax,BYTE PTR [rax+0x1]
ffff80000080141c:	0f b6 c8             	movzx  ecx,al
ffff80000080141f:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000801422:	48 89 d0             	mov    rax,rdx
ffff800000801425:	48 01 c0             	add    rax,rax
ffff800000801428:	48 01 c2             	add    rdx,rax
ffff80000080142b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080142f:	48 01 d0             	add    rax,rdx
ffff800000801432:	0f b6 40 01          	movzx  eax,BYTE PTR [rax+0x1]
ffff800000801436:	0f b6 c0             	movzx  eax,al
ffff800000801439:	0f af c1             	imul   eax,ecx
ffff80000080143c:	01 f0                	add    eax,esi
ffff80000080143e:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:112
					if (distance < best_distance)
ffff800000801441:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
ffff800000801444:	3b 45 d8             	cmp    eax,DWORD PTR [rbp-0x28]
ffff800000801447:	73 0c                	jae    ffff800000801455 <main+0x2e2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:114
					{
						color = i;
ffff800000801449:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080144c:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:115
						best_distance = distance;
ffff80000080144f:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
ffff800000801452:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:109 (discriminator 2)
				for (i = 0; i < tagfb->framebuffer_palette_num_colors; i++)
ffff800000801455:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:109 (discriminator 1)
ffff800000801459:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080145d:	0f b7 40 20          	movzx  eax,WORD PTR [rax+0x20]
ffff800000801461:	0f b7 c0             	movzx  eax,ax
ffff800000801464:	39 45 dc             	cmp    DWORD PTR [rbp-0x24],eax
ffff800000801467:	0f 82 18 ff ff ff    	jb     ffff800000801385 <main+0x212>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:119
					}
				}
			}
			break;
ffff80000080146d:	eb 40                	jmp    ffff8000008014af <main+0x33c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:122

			case MULTIBOOT_FRAMEBUFFER_TYPE_RGB:
				color = ((1 << tagfb->framebuffer_blue_mask_size) - 1) << tagfb->framebuffer_blue_field_position;
ffff80000080146f:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801473:	0f b6 40 25          	movzx  eax,BYTE PTR [rax+0x25]
ffff800000801477:	0f b6 c0             	movzx  eax,al
ffff80000080147a:	ba 01 00 00 00       	mov    edx,0x1
ffff80000080147f:	89 c1                	mov    ecx,eax
ffff800000801481:	d3 e2                	shl    edx,cl
ffff800000801483:	89 d0                	mov    eax,edx
ffff800000801485:	8d 50 ff             	lea    edx,[rax-0x1]
ffff800000801488:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080148c:	0f b6 40 24          	movzx  eax,BYTE PTR [rax+0x24]
ffff800000801490:	0f b6 c0             	movzx  eax,al
ffff800000801493:	89 c1                	mov    ecx,eax
ffff800000801495:	d3 e2                	shl    edx,cl
ffff800000801497:	89 d0                	mov    eax,edx
ffff800000801499:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:123
				break;
ffff80000080149c:	eb 11                	jmp    ffff8000008014af <main+0x33c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:126

			case MULTIBOOT_FRAMEBUFFER_TYPE_EGA_TEXT:
				color = '\\' | 0x0100;
ffff80000080149e:	c7 45 b4 5c 01 00 00 	mov    DWORD PTR [rbp-0x4c],0x15c
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:127
				break;
ffff8000008014a5:	eb 08                	jmp    ffff8000008014af <main+0x33c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:130

			default:
				color = 0xffffffff;
ffff8000008014a7:	c7 45 b4 ff ff ff ff 	mov    DWORD PTR [rbp-0x4c],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:131
				break;
ffff8000008014ae:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:134 (discriminator 1)
			}

			break;
ffff8000008014af:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:45
		 tag = (struct multiboot_tag *)((u8 *)tag + ((tag->size + 7) & ~7)))
ffff8000008014b0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008014b4:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff8000008014b7:	83 c0 07             	add    eax,0x7
ffff8000008014ba:	89 c0                	mov    eax,eax
ffff8000008014bc:	83 e0 f8             	and    eax,0xfffffff8
ffff8000008014bf:	48 01 45 e8          	add    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:44
		 tag->type != MULTIBOOT_TAG_TYPE_END;
ffff8000008014c3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008014c7:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008014c9:	85 c0                	test   eax,eax
ffff8000008014cb:	0f 85 5f fd ff ff    	jne    ffff800000801230 <main+0xbd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:138
		}
		}
	}
	tag = (struct multiboot_tag *)((multiboot_uint8_t *)tag + ((tag->size + 7) & ~7));
ffff8000008014d1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008014d5:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff8000008014d8:	83 c0 07             	add    eax,0x7
ffff8000008014db:	89 c0                	mov    eax,eax
ffff8000008014dd:	83 e0 f8             	and    eax,0xfffffff8
ffff8000008014e0:	48 01 45 e8          	add    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:139
    init_memory();
ffff8000008014e4:	49 89 df             	mov    r15,rbx
ffff8000008014e7:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008014ec:	48 ba 99 f5 ed ff ff 	movabs rdx,0xffffffffffedf599
ffff8000008014f3:	ff ff ff 
ffff8000008014f6:	48 01 da             	add    rdx,rbx
ffff8000008014f9:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:140
    init_framebuffer();
ffff8000008014fb:	49 89 df             	mov    r15,rbx
ffff8000008014fe:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801503:	48 ba 14 89 ee ff ff 	movabs rdx,0xffffffffffee8914
ffff80000080150a:	ff ff ff 
ffff80000080150d:	48 01 da             	add    rdx,rbx
ffff800000801510:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:142
	//printf("Total mbi size 0x%x\n", (unsigned)tag - addr);
	char disk_count=*(char*)0x475;
ffff800000801512:	b8 75 04 00 00       	mov    eax,0x475
ffff800000801517:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080151a:	88 45 cb             	mov    BYTE PTR [rbp-0x35],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:144
	//printf("disk count:%d\n",disk_count);
    init_font();
ffff80000080151d:	49 89 df             	mov    r15,rbx
ffff800000801520:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801525:	48 ba 45 8a ee ff ff 	movabs rdx,0xffffffffffee8a45
ffff80000080152c:	ff ff ff 
ffff80000080152f:	48 01 da             	add    rdx,rbx
ffff800000801532:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:147
    //初始化区域
    //fill_rect(0,0,100,100,255);
    print("gamessis os loaded.\nkernel:>");
ffff800000801534:	48 b8 c7 d1 ff ff ff 	movabs rax,0xffffffffffffd1c7
ffff80000080153b:	ff ff ff 
ffff80000080153e:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000801542:	48 89 c7             	mov    rdi,rax
ffff800000801545:	49 89 df             	mov    r15,rbx
ffff800000801548:	48 b8 c8 91 ee ff ff 	movabs rax,0xffffffffffee91c8
ffff80000080154f:	ff ff ff 
ffff800000801552:	48 01 d8             	add    rax,rbx
ffff800000801555:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:148
    init_int();
ffff800000801557:	49 89 df             	mov    r15,rbx
ffff80000080155a:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080155f:	48 ba d0 ca ed ff ff 	movabs rdx,0xffffffffffedcad0
ffff800000801566:	ff ff ff 
ffff800000801569:	48 01 da             	add    rdx,rbx
ffff80000080156c:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:149
    print("int loaded.\n");
ffff80000080156e:	48 b8 e4 d1 ff ff ff 	movabs rax,0xffffffffffffd1e4
ffff800000801575:	ff ff ff 
ffff800000801578:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080157c:	48 89 c7             	mov    rdi,rax
ffff80000080157f:	49 89 df             	mov    r15,rbx
ffff800000801582:	48 b8 c8 91 ee ff ff 	movabs rax,0xffffffffffee91c8
ffff800000801589:	ff ff ff 
ffff80000080158c:	48 01 d8             	add    rax,rbx
ffff80000080158f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:151
//    set_tss(0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000);
	init_paging();
ffff800000801591:	49 89 df             	mov    r15,rbx
ffff800000801594:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801599:	48 ba 8b eb ed ff ff 	movabs rdx,0xffffffffffedeb8b
ffff8000008015a0:	ff ff ff 
ffff8000008015a3:	48 01 da             	add    rdx,rbx
ffff8000008015a6:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:152
 	init_gdt();
ffff8000008015a8:	49 89 df             	mov    r15,rbx
ffff8000008015ab:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008015b0:	48 ba 2d 63 ee ff ff 	movabs rdx,0xffffffffffee632d
ffff8000008015b7:	ff ff ff 
ffff8000008015ba:	48 01 da             	add    rdx,rbx
ffff8000008015bd:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:154

	init_blkdev();
ffff8000008015bf:	49 89 df             	mov    r15,rbx
ffff8000008015c2:	48 b8 ab c4 ee ff ff 	movabs rax,0xffffffffffeec4ab
ffff8000008015c9:	ff ff ff 
ffff8000008015cc:	48 01 d8             	add    rax,rbx
ffff8000008015cf:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:155
	init_blkbuf();
ffff8000008015d1:	49 89 df             	mov    r15,rbx
ffff8000008015d4:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008015d9:	48 ba fe c4 ee ff ff 	movabs rdx,0xffffffffffeec4fe
ffff8000008015e0:	ff ff ff 
ffff8000008015e3:	48 01 da             	add    rdx,rbx
ffff8000008015e6:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:157
	// init_disk();
    init_ramdisk();
ffff8000008015e8:	49 89 df             	mov    r15,rbx
ffff8000008015eb:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008015f0:	48 ba 78 bf ee ff ff 	movabs rdx,0xffffffffffeebf78
ffff8000008015f7:	ff ff ff 
ffff8000008015fa:	48 01 da             	add    rdx,rbx
ffff8000008015fd:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:158
    init_rootfs();
ffff8000008015ff:	49 89 df             	mov    r15,rbx
ffff800000801602:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801607:	48 ba 72 a1 ee ff ff 	movabs rdx,0xffffffffffeea172
ffff80000080160e:	ff ff ff 
ffff800000801611:	48 01 da             	add    rdx,rbx
ffff800000801614:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:159
    init_devfs();
ffff800000801616:	49 89 df             	mov    r15,rbx
ffff800000801619:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080161e:	48 ba ed 12 ee ff ff 	movabs rdx,0xffffffffffee12ed
ffff800000801625:	ff ff ff 
ffff800000801628:	48 01 da             	add    rdx,rbx
ffff80000080162b:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:161

    init_proc();
ffff80000080162d:	49 89 df             	mov    r15,rbx
ffff800000801630:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801635:	48 ba 30 1e ee ff ff 	movabs rdx,0xffffffffffee1e30
ffff80000080163c:	ff ff ff 
ffff80000080163f:	48 01 da             	add    rdx,rbx
ffff800000801642:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:163
	// init_ramfs();
  	DISK1_FAT32_FS_init();
ffff800000801644:	49 89 df             	mov    r15,rbx
ffff800000801647:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080164c:	48 ba 91 0d ef ff ff 	movabs rdx,0xffffffffffef0d91
ffff800000801653:	ff ff ff 
ffff800000801656:	48 01 da             	add    rdx,rbx
ffff800000801659:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:167

    //自带驱动
    //init_tty();
    init_kb();
ffff80000080165b:	49 89 df             	mov    r15,rbx
ffff80000080165e:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801663:	48 ba d8 d1 ee ff ff 	movabs rdx,0xffffffffffeed1d8
ffff80000080166a:	ff ff ff 
ffff80000080166d:	48 01 da             	add    rdx,rbx
ffff800000801670:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:169
//    init_disk();
    sti();
ffff800000801672:	fb                   	sti    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:170
    manage_proc_lock=0;
ffff800000801673:	48 b8 c8 fc ff ff ff 	movabs rax,0xfffffffffffffcc8
ffff80000080167a:	ff ff ff 
ffff80000080167d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000801681:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:173


    move_to_user_mode();
ffff800000801687:	49 89 df             	mov    r15,rbx
ffff80000080168a:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080168f:	48 ba 6d 26 ef ff ff 	movabs rdx,0xffffffffffef266d
ffff800000801696:	ff ff ff 
ffff800000801699:	48 01 da             	add    rdx,rbx
ffff80000080169c:	ff d2                	call   rdx
ffff80000080169e:	48 c7 45 98 1b 00 00 	mov    QWORD PTR [rbp-0x68],0x1b
ffff8000008016a5:	00 
ffff8000008016a6:	48 c7 45 90 00 00 00 	mov    QWORD PTR [rbp-0x70],0x0
ffff8000008016ad:	00 
ffff8000008016ae:	48 c7 45 88 00 00 00 	mov    QWORD PTR [rbp-0x78],0x0
ffff8000008016b5:	00 
ffff8000008016b6:	48 c7 45 80 00 00 00 	mov    QWORD PTR [rbp-0x80],0x0
ffff8000008016bd:	00 
ffff8000008016be:	48 c7 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],0x0
ffff8000008016c5:	00 00 00 00 
ffff8000008016c9:	48 c7 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],0x0
ffff8000008016d0:	00 00 00 00 
ffff8000008016d4:	48 c7 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],0x0
ffff8000008016db:	00 00 00 00 
do_syscall():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:63

#define	SYSTEM_REBOOT	(1UL << 0)
#define	SYSTEM_POWEROFF	(1UL << 1)

__attribute__((__always_inline__))inline int do_syscall(long func,long a1,long a2,long a3,long a4,long a5,long a6){
        __asm__ volatile(".byte 0x48\n"
ffff8000008016df:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008016e3:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
ffff8000008016e7:	48 8b 75 88          	mov    rsi,QWORD PTR [rbp-0x78]
ffff8000008016eb:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
ffff8000008016ef:	48 8b 8d 78 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x88]
ffff8000008016f6:	4c 8b 85 70 ff ff ff 	mov    r8,QWORD PTR [rbp-0x90]
ffff8000008016fd:	4c 8b 8d 68 ff ff ff 	mov    r9,QWORD PTR [rbp-0x98]
ffff800000801704:	48 0f 05             	rex.W syscall 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:65
                 "syscall"::"a"(func),"D"(a1),"S"(a2),"d"(a3),"c"(a4),"r"(a5),"r"(a6));
        long ret=0;
ffff800000801707:	48 c7 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],0x0
ffff80000080170e:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:66
        __asm__ volatile("mov %%rax,%0"::"m"(ret));
ffff800000801712:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:67
        return ret;
ffff800000801719:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
main():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:174
    if(do_syscall(SYSCALL_FORK,0,0,0,0,0,0)==0){
ffff800000801720:	85 c0                	test   eax,eax
ffff800000801722:	0f 85 ca 00 00 00    	jne    ffff8000008017f2 <main+0x67f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:175
        char *argv[]={"/mnt/test.elf","gamessis os"};
ffff800000801728:	48 b8 f1 d1 ff ff ff 	movabs rax,0xffffffffffffd1f1
ffff80000080172f:	ff ff ff 
ffff800000801732:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000801736:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
ffff80000080173d:	48 b8 ff d1 ff ff ff 	movabs rax,0xffffffffffffd1ff
ffff800000801744:	ff ff ff 
ffff800000801747:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080174b:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:176
        do_syscall(SYSCALL_EXECVE, (long) "/mnt/test.elf", 2, (long) &argv[0], 0, 0, 0);
ffff800000801752:	48 8d 85 10 ff ff ff 	lea    rax,[rbp-0xf0]
ffff800000801759:	48 ba f1 d1 ff ff ff 	movabs rdx,0xffffffffffffd1f1
ffff800000801760:	ff ff ff 
ffff800000801763:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000801767:	48 c7 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],0x1c
ffff80000080176e:	1c 00 00 00 
ffff800000801772:	48 89 95 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdx
ffff800000801779:	48 c7 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],0x2
ffff800000801780:	02 00 00 00 
ffff800000801784:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
ffff80000080178b:	48 c7 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],0x0
ffff800000801792:	00 00 00 00 
ffff800000801796:	48 c7 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],0x0
ffff80000080179d:	00 00 00 00 
ffff8000008017a1:	48 c7 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],0x0
ffff8000008017a8:	00 00 00 00 
do_syscall():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:63
        __asm__ volatile(".byte 0x48\n"
ffff8000008017ac:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff8000008017b3:	48 8b bd 58 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xa8]
ffff8000008017ba:	48 8b b5 50 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xb0]
ffff8000008017c1:	48 8b 95 48 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb8]
ffff8000008017c8:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
ffff8000008017cf:	4c 8b 85 38 ff ff ff 	mov    r8,QWORD PTR [rbp-0xc8]
ffff8000008017d6:	4c 8b 8d 30 ff ff ff 	mov    r9,QWORD PTR [rbp-0xd0]
ffff8000008017dd:	48 0f 05             	rex.W syscall 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:65
        long ret=0;
ffff8000008017e0:	48 c7 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],0x0
ffff8000008017e7:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:66
        __asm__ volatile("mov %%rax,%0"::"m"(ret));
ffff8000008017eb:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
main():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:187 (discriminator 3)
//    init_fat16();

//    extern device *dev_tree[];
//    blk_dev* p=dev_tree[DEVTREE_BLKDEVI];
//    mount_fs("fat16",p->par,vmalloc());
    while (1)
ffff8000008017f2:	eb fe                	jmp    ffff8000008017f2 <main+0x67f>

ffff8000008017f4 <init_logging>:
init_logging():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:12
static unsigned char* video;
static int xpos,ypos;
/* 将整数 D 转换为字符串并保存在 BUF 中。如果 BASE 为 'd'，则 D 为十进制，如果 BASE 为 'x'，则 D 为十六进制。 */

int init_logging()
{
ffff8000008017f4:	f3 0f 1e fa          	endbr64 
ffff8000008017f8:	55                   	push   rbp
ffff8000008017f9:	48 89 e5             	mov    rbp,rsp
ffff8000008017fc:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008017fc <init_logging+0x8>
ffff800000801803:	49 bb 34 1d 12 00 00 	movabs r11,0x121d34
ffff80000080180a:	00 00 00 
ffff80000080180d:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:13
    video=0xb8000;
ffff800000801810:	48 ba d0 ca ad ff ff 	movabs rdx,0xffffffffffadcad0
ffff800000801817:	ff ff ff 
ffff80000080181a:	48 c7 04 10 00 80 0b 	mov    QWORD PTR [rax+rdx*1],0xb8000
ffff800000801821:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:14
    xpos=0;
ffff800000801822:	48 ba d8 ca ad ff ff 	movabs rdx,0xffffffffffadcad8
ffff800000801829:	ff ff ff 
ffff80000080182c:	c7 04 10 00 00 00 00 	mov    DWORD PTR [rax+rdx*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:15
    ypos=0;
ffff800000801833:	48 ba dc ca ad ff ff 	movabs rdx,0xffffffffffadcadc
ffff80000080183a:	ff ff ff 
ffff80000080183d:	c7 04 10 00 00 00 00 	mov    DWORD PTR [rax+rdx*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:16
}
ffff800000801844:	90                   	nop
ffff800000801845:	5d                   	pop    rbp
ffff800000801846:	c3                   	ret    

ffff800000801847 <itoa>:
itoa():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:19

void itoa (char *buf, int base, int d)
{
ffff800000801847:	f3 0f 1e fa          	endbr64 
ffff80000080184b:	55                   	push   rbp
ffff80000080184c:	48 89 e5             	mov    rbp,rsp
ffff80000080184f:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080184f <itoa+0x8>
ffff800000801856:	49 bb e1 1c 12 00 00 	movabs r11,0x121ce1
ffff80000080185d:	00 00 00 
ffff800000801860:	4c 01 d8             	add    rax,r11
ffff800000801863:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000801867:	89 75 c4             	mov    DWORD PTR [rbp-0x3c],esi
ffff80000080186a:	89 55 c0             	mov    DWORD PTR [rbp-0x40],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:20
    char *p = buf;
ffff80000080186d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000801871:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:22
    char *p1, *p2;
    unsigned long ud = d;
ffff800000801875:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
ffff800000801878:	48 98                	cdqe   
ffff80000080187a:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:23
    int divisor = 10;
ffff80000080187e:	c7 45 dc 0a 00 00 00 	mov    DWORD PTR [rbp-0x24],0xa
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:26
 
    /* 如果指定了 %d 并且 D 是负数，在开始添上负号。 */
    if (base == 'd' && d < 0)
ffff800000801885:	83 7d c4 64          	cmp    DWORD PTR [rbp-0x3c],0x64
ffff800000801889:	75 27                	jne    ffff8000008018b2 <itoa+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:26 (discriminator 1)
ffff80000080188b:	83 7d c0 00          	cmp    DWORD PTR [rbp-0x40],0x0
ffff80000080188f:	79 21                	jns    ffff8000008018b2 <itoa+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:28
    {
        *p++ = '-';
ffff800000801891:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000801895:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffff800000801899:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffff80000080189d:	c6 00 2d             	mov    BYTE PTR [rax],0x2d
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:29
        buf++;
ffff8000008018a0:	48 83 45 c8 01       	add    QWORD PTR [rbp-0x38],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:30
        ud = -d;
ffff8000008018a5:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
ffff8000008018a8:	f7 d8                	neg    eax
ffff8000008018aa:	48 98                	cdqe   
ffff8000008018ac:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffff8000008018b0:	eb 0d                	jmp    ffff8000008018bf <itoa+0x78>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:32
    }
    else if (base == 'x')
ffff8000008018b2:	83 7d c4 78          	cmp    DWORD PTR [rbp-0x3c],0x78
ffff8000008018b6:	75 07                	jne    ffff8000008018bf <itoa+0x78>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:33
        divisor = 16;
ffff8000008018b8:	c7 45 dc 10 00 00 00 	mov    DWORD PTR [rbp-0x24],0x10
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:38
 
    /* 用 DIVISOR 去除 UD 直到 UD == 0。 */
    do
    {
        int remainder = ud % divisor;
ffff8000008018bf:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008018c2:	48 63 c8             	movsxd rcx,eax
ffff8000008018c5:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008018c9:	ba 00 00 00 00       	mov    edx,0x0
ffff8000008018ce:	48 f7 f1             	div    rcx
ffff8000008018d1:	48 89 d0             	mov    rax,rdx
ffff8000008018d4:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:40
 
        *p++ = (remainder < 10) ? remainder + '0' : remainder + 'a' - 10;
ffff8000008018d7:	83 7d d8 09          	cmp    DWORD PTR [rbp-0x28],0x9
ffff8000008018db:	7f 0a                	jg     ffff8000008018e7 <itoa+0xa0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:40 (discriminator 1)
ffff8000008018dd:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff8000008018e0:	83 c0 30             	add    eax,0x30
ffff8000008018e3:	89 c1                	mov    ecx,eax
ffff8000008018e5:	eb 08                	jmp    ffff8000008018ef <itoa+0xa8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:40 (discriminator 2)
ffff8000008018e7:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff8000008018ea:	83 c0 57             	add    eax,0x57
ffff8000008018ed:	89 c1                	mov    ecx,eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:40 (discriminator 4)
ffff8000008018ef:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008018f3:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffff8000008018f7:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffff8000008018fb:	88 08                	mov    BYTE PTR [rax],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:42 (discriminator 4)
    }
    while (ud /= divisor);
ffff8000008018fd:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000801900:	48 63 f0             	movsxd rsi,eax
ffff800000801903:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801907:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080190c:	48 f7 f6             	div    rsi
ffff80000080190f:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffff800000801913:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
ffff800000801918:	75 a5                	jne    ffff8000008018bf <itoa+0x78>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:45
 
    /* 在字符串尾添上终结符。 */
    *p = 0;
ffff80000080191a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080191e:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:48
 
    /* 反转 BUF。 */
    p1 = buf;
ffff800000801921:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000801925:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:49
    p2 = p - 1;
ffff800000801929:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080192d:	48 83 e8 01          	sub    rax,0x1
ffff800000801931:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:50
    while (p1 < p2)
ffff800000801935:	eb 2b                	jmp    ffff800000801962 <itoa+0x11b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:52
    {
        char tmp = *p1;
ffff800000801937:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080193b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080193e:	88 45 d7             	mov    BYTE PTR [rbp-0x29],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:53
        *p1 = *p2;
ffff800000801941:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801945:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff800000801948:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080194c:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:54
        *p2 = tmp;
ffff80000080194e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801952:	0f b6 55 d7          	movzx  edx,BYTE PTR [rbp-0x29]
ffff800000801956:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:55
        p1++;
ffff800000801958:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:56
        p2--;
ffff80000080195d:	48 83 6d e8 01       	sub    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:50
    while (p1 < p2)
ffff800000801962:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000801966:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff80000080196a:	72 cb                	jb     ffff800000801937 <itoa+0xf0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:58
    }
}
ffff80000080196c:	90                   	nop
ffff80000080196d:	90                   	nop
ffff80000080196e:	5d                   	pop    rbp
ffff80000080196f:	c3                   	ret    

ffff800000801970 <putchar>:
putchar():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:62
 
/* 在屏幕上输出字符 C 。 */
void putchar (char c)
{
ffff800000801970:	f3 0f 1e fa          	endbr64 
ffff800000801974:	55                   	push   rbp
ffff800000801975:	48 89 e5             	mov    rbp,rsp
ffff800000801978:	41 57                	push   r15
ffff80000080197a:	48 83 ec 28          	sub    rsp,0x28
ffff80000080197e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080197e <putchar+0xe>
ffff800000801985:	49 bb b2 1b 12 00 00 	movabs r11,0x121bb2
ffff80000080198c:	00 00 00 
ffff80000080198f:	4c 01 d8             	add    rax,r11
ffff800000801992:	89 fa                	mov    edx,edi
ffff800000801994:	88 55 dc             	mov    BYTE PTR [rbp-0x24],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:63
    char s[2]={c,'\0'};
ffff800000801997:	0f b6 55 dc          	movzx  edx,BYTE PTR [rbp-0x24]
ffff80000080199b:	88 55 ee             	mov    BYTE PTR [rbp-0x12],dl
ffff80000080199e:	c6 45 ef 00          	mov    BYTE PTR [rbp-0x11],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:64
    print(s);
ffff8000008019a2:	48 8d 55 ee          	lea    rdx,[rbp-0x12]
ffff8000008019a6:	48 89 d7             	mov    rdi,rdx
ffff8000008019a9:	49 89 c7             	mov    r15,rax
ffff8000008019ac:	48 ba c8 91 ee ff ff 	movabs rdx,0xffffffffffee91c8
ffff8000008019b3:	ff ff ff 
ffff8000008019b6:	48 01 c2             	add    rdx,rax
ffff8000008019b9:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:82
    *(video + (xpos + ypos * COLUMNS) * 2 + 1) = ATTRIBUTE;
 
    xpos++;
    if (xpos >= COLUMNS)
        goto newline;
}
ffff8000008019bb:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff8000008019bf:	c9                   	leave  
ffff8000008019c0:	c3                   	ret    

ffff8000008019c1 <printf>:
printf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:86
 
/* 格式化字符串并在屏幕上输出，就像 libc 函数 printf 一样。 */
void printf (const char *format,...)
{
ffff8000008019c1:	f3 0f 1e fa          	endbr64 
ffff8000008019c5:	55                   	push   rbp
ffff8000008019c6:	48 89 e5             	mov    rbp,rsp
ffff8000008019c9:	41 57                	push   r15
ffff8000008019cb:	53                   	push   rbx
ffff8000008019cc:	48 81 ec 00 01 00 00 	sub    rsp,0x100
ffff8000008019d3:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008019d3 <printf+0x12>
ffff8000008019da:	49 bb 5d 1b 12 00 00 	movabs r11,0x121b5d
ffff8000008019e1:	00 00 00 
ffff8000008019e4:	4c 01 db             	add    rbx,r11
ffff8000008019e7:	48 89 bd f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdi
ffff8000008019ee:	48 89 b5 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rsi
ffff8000008019f5:	48 89 95 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rdx
ffff8000008019fc:	48 89 8d 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rcx
ffff800000801a03:	4c 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],r8
ffff800000801a0a:	4c 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],r9
ffff800000801a11:	84 c0                	test   al,al
ffff800000801a13:	74 23                	je     ffff800000801a38 <printf+0x77>
ffff800000801a15:	0f 29 85 70 ff ff ff 	movaps XMMWORD PTR [rbp-0x90],xmm0
ffff800000801a1c:	0f 29 4d 80          	movaps XMMWORD PTR [rbp-0x80],xmm1
ffff800000801a20:	0f 29 55 90          	movaps XMMWORD PTR [rbp-0x70],xmm2
ffff800000801a24:	0f 29 5d a0          	movaps XMMWORD PTR [rbp-0x60],xmm3
ffff800000801a28:	0f 29 65 b0          	movaps XMMWORD PTR [rbp-0x50],xmm4
ffff800000801a2c:	0f 29 6d c0          	movaps XMMWORD PTR [rbp-0x40],xmm5
ffff800000801a30:	0f 29 75 d0          	movaps XMMWORD PTR [rbp-0x30],xmm6
ffff800000801a34:	0f 29 7d e0          	movaps XMMWORD PTR [rbp-0x20],xmm7
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:87
    if(strlen(format)>=1024)
ffff800000801a38:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000801a3f:	48 89 c7             	mov    rdi,rax
ffff800000801a42:	49 89 df             	mov    r15,rbx
ffff800000801a45:	48 b8 d3 20 ef ff ff 	movabs rax,0xffffffffffef20d3
ffff800000801a4c:	ff ff ff 
ffff800000801a4f:	48 01 d8             	add    rax,rbx
ffff800000801a52:	ff d0                	call   rax
ffff800000801a54:	3d ff 03 00 00       	cmp    eax,0x3ff
ffff800000801a59:	0f 8f f7 02 00 00    	jg     ffff800000801d56 <printf+0x395>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:89
        return;//一次性输出不了太长
    char* tmp=(char*) kmalloc(0,PAGE_4K_SIZE);
ffff800000801a5f:	be 00 10 00 00       	mov    esi,0x1000
ffff800000801a64:	bf 00 00 00 00       	mov    edi,0x0
ffff800000801a69:	49 89 df             	mov    r15,rbx
ffff800000801a6c:	48 b8 96 fe ed ff ff 	movabs rax,0xffffffffffedfe96
ffff800000801a73:	ff ff ff 
ffff800000801a76:	48 01 d8             	add    rax,rbx
ffff800000801a79:	ff d0                	call   rax
ffff800000801a7b:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:91
    va_list vargs;
    va_start(vargs,format);
ffff800000801a82:	c7 85 00 ff ff ff 08 	mov    DWORD PTR [rbp-0x100],0x8
ffff800000801a89:	00 00 00 
ffff800000801a8c:	c7 85 04 ff ff ff 30 	mov    DWORD PTR [rbp-0xfc],0x30
ffff800000801a93:	00 00 00 
ffff800000801a96:	48 8d 45 10          	lea    rax,[rbp+0x10]
ffff800000801a9a:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
ffff800000801aa1:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
ffff800000801aa8:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:92
    char *pstr=format;
ffff800000801aaf:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000801ab6:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:93
    for(;*pstr!='\0';pstr++){
ffff800000801abd:	e9 27 02 00 00       	jmp    ffff800000801ce9 <printf+0x328>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:94
        if(*pstr=='%'&&*(pstr+1)!='\0'){
ffff800000801ac2:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000801ac9:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801acc:	3c 25                	cmp    al,0x25
ffff800000801ace:	0f 85 e2 01 00 00    	jne    ffff800000801cb6 <printf+0x2f5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:94 (discriminator 1)
ffff800000801ad4:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000801adb:	48 83 c0 01          	add    rax,0x1
ffff800000801adf:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801ae2:	84 c0                	test   al,al
ffff800000801ae4:	0f 84 cc 01 00 00    	je     ffff800000801cb6 <printf+0x2f5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:95
            pstr++;
ffff800000801aea:	48 83 85 38 ff ff ff 	add    QWORD PTR [rbp-0xc8],0x1
ffff800000801af1:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:96
            if(*pstr=='x'){
ffff800000801af2:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000801af9:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801afc:	3c 78                	cmp    al,0x78
ffff800000801afe:	75 75                	jne    ffff800000801b75 <printf+0x1b4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:97
                int v=va_arg(vargs,int);
ffff800000801b00:	8b 85 00 ff ff ff    	mov    eax,DWORD PTR [rbp-0x100]
ffff800000801b06:	83 f8 2f             	cmp    eax,0x2f
ffff800000801b09:	77 23                	ja     ffff800000801b2e <printf+0x16d>
ffff800000801b0b:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff800000801b12:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff800000801b18:	89 d2                	mov    edx,edx
ffff800000801b1a:	48 01 d0             	add    rax,rdx
ffff800000801b1d:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff800000801b23:	83 c2 08             	add    edx,0x8
ffff800000801b26:	89 95 00 ff ff ff    	mov    DWORD PTR [rbp-0x100],edx
ffff800000801b2c:	eb 12                	jmp    ffff800000801b40 <printf+0x17f>
ffff800000801b2e:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff800000801b35:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000801b39:	48 89 95 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdx
ffff800000801b40:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000801b42:	89 85 1c ff ff ff    	mov    DWORD PTR [rbp-0xe4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:98
                sprint_hex(tmp,v);
ffff800000801b48:	8b 85 1c ff ff ff    	mov    eax,DWORD PTR [rbp-0xe4]
ffff800000801b4e:	48 63 d0             	movsxd rdx,eax
ffff800000801b51:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801b58:	48 89 d6             	mov    rsi,rdx
ffff800000801b5b:	48 89 c7             	mov    rdi,rax
ffff800000801b5e:	49 89 df             	mov    r15,rbx
ffff800000801b61:	48 b8 26 25 ef ff ff 	movabs rax,0xffffffffffef2526
ffff800000801b68:	ff ff ff 
ffff800000801b6b:	48 01 d8             	add    rax,rbx
ffff800000801b6e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:96
            if(*pstr=='x'){
ffff800000801b70:	e9 6c 01 00 00       	jmp    ffff800000801ce1 <printf+0x320>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:99
            }else if(*pstr=='s'){
ffff800000801b75:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000801b7c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801b7f:	3c 73                	cmp    al,0x73
ffff800000801b81:	75 75                	jne    ffff800000801bf8 <printf+0x237>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:100
                char* v=va_arg(vargs,char*);
ffff800000801b83:	8b 85 00 ff ff ff    	mov    eax,DWORD PTR [rbp-0x100]
ffff800000801b89:	83 f8 2f             	cmp    eax,0x2f
ffff800000801b8c:	77 23                	ja     ffff800000801bb1 <printf+0x1f0>
ffff800000801b8e:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff800000801b95:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff800000801b9b:	89 d2                	mov    edx,edx
ffff800000801b9d:	48 01 d0             	add    rax,rdx
ffff800000801ba0:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff800000801ba6:	83 c2 08             	add    edx,0x8
ffff800000801ba9:	89 95 00 ff ff ff    	mov    DWORD PTR [rbp-0x100],edx
ffff800000801baf:	eb 12                	jmp    ffff800000801bc3 <printf+0x202>
ffff800000801bb1:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff800000801bb8:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000801bbc:	48 89 95 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdx
ffff800000801bc3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801bc6:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:101
                sprintn(tmp,v);
ffff800000801bcd:	48 8b 95 20 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe0]
ffff800000801bd4:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801bdb:	48 89 d6             	mov    rsi,rdx
ffff800000801bde:	48 89 c7             	mov    rdi,rax
ffff800000801be1:	49 89 df             	mov    r15,rbx
ffff800000801be4:	48 b8 b4 25 ef ff ff 	movabs rax,0xffffffffffef25b4
ffff800000801beb:	ff ff ff 
ffff800000801bee:	48 01 d8             	add    rax,rbx
ffff800000801bf1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:96
            if(*pstr=='x'){
ffff800000801bf3:	e9 e9 00 00 00       	jmp    ffff800000801ce1 <printf+0x320>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:102
            }else if(*pstr=='d'){
ffff800000801bf8:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000801bff:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801c02:	3c 64                	cmp    al,0x64
ffff800000801c04:	75 73                	jne    ffff800000801c79 <printf+0x2b8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:103
                char* v=va_arg(vargs,char*);
ffff800000801c06:	8b 85 00 ff ff ff    	mov    eax,DWORD PTR [rbp-0x100]
ffff800000801c0c:	83 f8 2f             	cmp    eax,0x2f
ffff800000801c0f:	77 23                	ja     ffff800000801c34 <printf+0x273>
ffff800000801c11:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff800000801c18:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff800000801c1e:	89 d2                	mov    edx,edx
ffff800000801c20:	48 01 d0             	add    rax,rdx
ffff800000801c23:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff800000801c29:	83 c2 08             	add    edx,0x8
ffff800000801c2c:	89 95 00 ff ff ff    	mov    DWORD PTR [rbp-0x100],edx
ffff800000801c32:	eb 12                	jmp    ffff800000801c46 <printf+0x285>
ffff800000801c34:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff800000801c3b:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000801c3f:	48 89 95 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdx
ffff800000801c46:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801c49:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:104
                sprint_decimal(tmp,v);
ffff800000801c50:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
ffff800000801c57:	89 c2                	mov    edx,eax
ffff800000801c59:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801c60:	89 d6                	mov    esi,edx
ffff800000801c62:	48 89 c7             	mov    rdi,rax
ffff800000801c65:	49 89 df             	mov    r15,rbx
ffff800000801c68:	48 b8 6b 24 ef ff ff 	movabs rax,0xffffffffffef246b
ffff800000801c6f:	ff ff ff 
ffff800000801c72:	48 01 d8             	add    rax,rbx
ffff800000801c75:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:96
            if(*pstr=='x'){
ffff800000801c77:	eb 68                	jmp    ffff800000801ce1 <printf+0x320>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:105
            }else if(*pstr=='c'){
ffff800000801c79:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000801c80:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801c83:	3c 63                	cmp    al,0x63
ffff800000801c85:	75 02                	jne    ffff800000801c89 <printf+0x2c8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:106
                char v=va_arg(vargs,char);
ffff800000801c87:	0f 0b                	ud2    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:109
                sprintchar(tmp,v);
            }else{
                sprintchar(tmp,*pstr);
ffff800000801c89:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000801c90:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801c93:	0f be d0             	movsx  edx,al
ffff800000801c96:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801c9d:	89 d6                	mov    esi,edx
ffff800000801c9f:	48 89 c7             	mov    rdi,rax
ffff800000801ca2:	49 89 df             	mov    r15,rbx
ffff800000801ca5:	48 b8 2c 24 ef ff ff 	movabs rax,0xffffffffffef242c
ffff800000801cac:	ff ff ff 
ffff800000801caf:	48 01 d8             	add    rax,rbx
ffff800000801cb2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:96
            if(*pstr=='x'){
ffff800000801cb4:	eb 2b                	jmp    ffff800000801ce1 <printf+0x320>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:112
            }
        }else{
            sprintchar(tmp,*pstr);
ffff800000801cb6:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000801cbd:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801cc0:	0f be d0             	movsx  edx,al
ffff800000801cc3:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801cca:	89 d6                	mov    esi,edx
ffff800000801ccc:	48 89 c7             	mov    rdi,rax
ffff800000801ccf:	49 89 df             	mov    r15,rbx
ffff800000801cd2:	48 b8 2c 24 ef ff ff 	movabs rax,0xffffffffffef242c
ffff800000801cd9:	ff ff ff 
ffff800000801cdc:	48 01 d8             	add    rax,rbx
ffff800000801cdf:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:93
    for(;*pstr!='\0';pstr++){
ffff800000801ce1:	48 83 85 38 ff ff ff 	add    QWORD PTR [rbp-0xc8],0x1
ffff800000801ce8:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:93 (discriminator 1)
ffff800000801ce9:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000801cf0:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801cf3:	84 c0                	test   al,al
ffff800000801cf5:	0f 85 c7 fd ff ff    	jne    ffff800000801ac2 <printf+0x101>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:116
        }
    }
    va_end(vargs);
    print(tmp);
ffff800000801cfb:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801d02:	48 89 c7             	mov    rdi,rax
ffff800000801d05:	49 89 df             	mov    r15,rbx
ffff800000801d08:	48 b8 c8 91 ee ff ff 	movabs rax,0xffffffffffee91c8
ffff800000801d0f:	ff ff ff 
ffff800000801d12:	48 01 d8             	add    rax,rbx
ffff800000801d15:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:117
    comprintf(tmp);
ffff800000801d17:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801d1e:	48 89 c7             	mov    rdi,rax
ffff800000801d21:	49 89 df             	mov    r15,rbx
ffff800000801d24:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801d29:	48 ba 62 18 ef ff ff 	movabs rdx,0xffffffffffef1862
ffff800000801d30:	ff ff ff 
ffff800000801d33:	48 01 da             	add    rdx,rbx
ffff800000801d36:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:118
    kmfree(tmp);
ffff800000801d38:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801d3f:	48 89 c7             	mov    rdi,rax
ffff800000801d42:	49 89 df             	mov    r15,rbx
ffff800000801d45:	48 b8 37 00 ee ff ff 	movabs rax,0xffffffffffee0037
ffff800000801d4c:	ff ff ff 
ffff800000801d4f:	48 01 d8             	add    rax,rbx
ffff800000801d52:	ff d0                	call   rax
ffff800000801d54:	eb 01                	jmp    ffff800000801d57 <printf+0x396>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:88
        return;//一次性输出不了太长
ffff800000801d56:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:160
//                putchar (*((int *) arg++));
//                break;
//            }
//        }
//    }
}
ffff800000801d57:	48 81 c4 00 01 00 00 	add    rsp,0x100
ffff800000801d5e:	5b                   	pop    rbx
ffff800000801d5f:	41 5f                	pop    r15
ffff800000801d61:	5d                   	pop    rbp
ffff800000801d62:	c3                   	ret    

ffff800000801d63 <mmap>:
mmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:33
int mmap_t_i=0;

malloc_hdr *pmhdrs,*kmhdrs;
malloc_hdr* pmalloc_mhdr,*kmalloc_mhdr;
stat_t mmap(addr_t pa,addr_t la,u32 attr)
{
ffff800000801d63:	f3 0f 1e fa          	endbr64 
ffff800000801d67:	55                   	push   rbp
ffff800000801d68:	48 89 e5             	mov    rbp,rsp
ffff800000801d6b:	41 57                	push   r15
ffff800000801d6d:	48 83 ec 28          	sub    rsp,0x28
ffff800000801d71:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000801d71 <mmap+0xe>
ffff800000801d78:	49 bb bf 17 12 00 00 	movabs r11,0x1217bf
ffff800000801d7f:	00 00 00 
ffff800000801d82:	4c 01 d8             	add    rax,r11
ffff800000801d85:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000801d89:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff800000801d8d:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:34
    return smmap(pa,la,attr,current->pml4);
ffff800000801d90:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000801d97:	ff ff ff 
ffff800000801d9a:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000801d9e:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000801da1:	48 8b 8a e0 00 00 00 	mov    rcx,QWORD PTR [rdx+0xe0]
ffff800000801da8:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000801dab:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff800000801daf:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
ffff800000801db3:	49 89 c7             	mov    r15,rax
ffff800000801db6:	49 b8 9c e8 ed ff ff 	movabs r8,0xffffffffffede89c
ffff800000801dbd:	ff ff ff 
ffff800000801dc0:	49 01 c0             	add    r8,rax
ffff800000801dc3:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:64
    pt=(page_item*)((addr_t)pt & ~0xff);

    //在pt中找到la指向的page
    pt[la % PDE_SIZE / PAGE_SIZE]=pa|attr;//映射
    return NORMAL;*/
}
ffff800000801dc6:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000801dca:	c9                   	leave  
ffff800000801dcb:	c3                   	ret    

ffff800000801dcc <smmap>:
smmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:66
stat_t smmap(addr_t pa,addr_t la,u32 attr,page_item* pml4p)
{
ffff800000801dcc:	f3 0f 1e fa          	endbr64 
ffff800000801dd0:	55                   	push   rbp
ffff800000801dd1:	48 89 e5             	mov    rbp,rsp
ffff800000801dd4:	41 57                	push   r15
ffff800000801dd6:	53                   	push   rbx
ffff800000801dd7:	48 83 ec 40          	sub    rsp,0x40
ffff800000801ddb:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000801ddb <smmap+0xf>
ffff800000801de2:	49 bb 55 17 12 00 00 	movabs r11,0x121755
ffff800000801de9:	00 00 00 
ffff800000801dec:	4c 01 db             	add    rbx,r11
ffff800000801def:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000801df3:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffff800000801df7:	89 55 bc             	mov    DWORD PTR [rbp-0x44],edx
ffff800000801dfa:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:69
    //从pml4中找到la所属的pml4项目，即属于第几个512GB
    //canonical 高地址判断
    if(la>0x7ffffffffffful){
ffff800000801dfe:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffff
ffff800000801e05:	7f 00 00 
ffff800000801e08:	48 39 45 c0          	cmp    QWORD PTR [rbp-0x40],rax
ffff800000801e0c:	76 0e                	jbe    ffff800000801e1c <smmap+0x50>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:70
        la&=~0xffff000000000000ul;
ffff800000801e0e:	48 b8 ff ff ff ff ff 	movabs rax,0xffffffffffff
ffff800000801e15:	ff 00 00 
ffff800000801e18:	48 21 45 c0          	and    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:72
    }
    page_item *pdptp= (page_item *) (pml4p[la / PML4E_SIZE]);//指向的pdpt表
ffff800000801e1c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801e20:	48 c1 e8 27          	shr    rax,0x27
ffff800000801e24:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000801e2b:	00 
ffff800000801e2c:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000801e30:	48 01 d0             	add    rax,rdx
ffff800000801e33:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801e36:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:73
    int pml4i=la / PML4E_SIZE;
ffff800000801e3a:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801e3e:	48 c1 e8 27          	shr    rax,0x27
ffff800000801e42:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:74
    if(!((unsigned long long)pdptp&PAGE_PRESENT))
ffff800000801e45:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801e49:	83 e0 01             	and    eax,0x1
ffff800000801e4c:	48 85 c0             	test   rax,rax
ffff800000801e4f:	75 74                	jne    ffff800000801ec5 <smmap+0xf9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:76
    {
        pdptp=(page_item*) kmalloc(0,PAGE_4K_SIZE);
ffff800000801e51:	be 00 10 00 00       	mov    esi,0x1000
ffff800000801e56:	bf 00 00 00 00       	mov    edi,0x0
ffff800000801e5b:	49 89 df             	mov    r15,rbx
ffff800000801e5e:	48 b8 96 fe ed ff ff 	movabs rax,0xffffffffffedfe96
ffff800000801e65:	ff ff ff 
ffff800000801e68:	48 01 d8             	add    rax,rbx
ffff800000801e6b:	ff d0                	call   rax
ffff800000801e6d:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:77
        memset(pdptp,0,4096);
ffff800000801e71:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801e75:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000801e7a:	be 00 00 00 00       	mov    esi,0x0
ffff800000801e7f:	48 89 c7             	mov    rdi,rax
ffff800000801e82:	49 89 df             	mov    r15,rbx
ffff800000801e85:	48 b8 b1 1d ef ff ff 	movabs rax,0xffffffffffef1db1
ffff800000801e8c:	ff ff ff 
ffff800000801e8f:	48 01 d8             	add    rax,rbx
ffff800000801e92:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:79
        //这里使用了狡猾的技巧：kmalloc的内存-KNL_BASE直接就是实际的物理地址
        pml4p[pml4i]=((addr_t)pdptp&~KNL_BASE)|attr;
ffff800000801e94:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801e98:	48 ba ff ff ff ff ff 	movabs rdx,0x7fffffffffff
ffff800000801e9f:	7f 00 00 
ffff800000801ea2:	48 21 d0             	and    rax,rdx
ffff800000801ea5:	48 89 c1             	mov    rcx,rax
ffff800000801ea8:	8b 55 bc             	mov    edx,DWORD PTR [rbp-0x44]
ffff800000801eab:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000801eae:	48 98                	cdqe   
ffff800000801eb0:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
ffff800000801eb7:	00 
ffff800000801eb8:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000801ebc:	48 01 f0             	add    rax,rsi
ffff800000801ebf:	48 09 ca             	or     rdx,rcx
ffff800000801ec2:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:81
    }
    pdptp=(page_item*)(((addr_t)pdptp&~0xff)|KNL_BASE);
ffff800000801ec5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801ec9:	48 ba 00 ff ff ff ff 	movabs rdx,0x7fffffffff00
ffff800000801ed0:	7f 00 00 
ffff800000801ed3:	48 21 c2             	and    rdx,rax
ffff800000801ed6:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff800000801edd:	80 ff ff 
ffff800000801ee0:	48 09 d0             	or     rax,rdx
ffff800000801ee3:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:84

    //在这个512GB（一张pdpt表）中找到la所属的pdpt项目，找到指向的pd
    int pdpti=la%PML4E_SIZE/PDPTE_SIZE;
ffff800000801ee7:	48 b8 ff ff ff ff 7f 	movabs rax,0x7fffffffff
ffff800000801eee:	00 00 00 
ffff800000801ef1:	48 23 45 c0          	and    rax,QWORD PTR [rbp-0x40]
ffff800000801ef5:	48 c1 e8 1e          	shr    rax,0x1e
ffff800000801ef9:	89 45 d0             	mov    DWORD PTR [rbp-0x30],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:85
    page_item* pdp= (page_item *) pdptp[pdpti];//指向的pd
ffff800000801efc:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000801eff:	48 98                	cdqe   
ffff800000801f01:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000801f08:	00 
ffff800000801f09:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801f0d:	48 01 d0             	add    rax,rdx
ffff800000801f10:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801f13:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:87
    //检查pdptp是否被占用
    if(!((unsigned long long)pdp&PAGE_PRESENT))
ffff800000801f17:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801f1b:	83 e0 01             	and    eax,0x1
ffff800000801f1e:	48 85 c0             	test   rax,rax
ffff800000801f21:	75 74                	jne    ffff800000801f97 <smmap+0x1cb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:89
    {
        pdp=(page_item*) kmalloc(0,PAGE_4K_SIZE);
ffff800000801f23:	be 00 10 00 00       	mov    esi,0x1000
ffff800000801f28:	bf 00 00 00 00       	mov    edi,0x0
ffff800000801f2d:	49 89 df             	mov    r15,rbx
ffff800000801f30:	48 b8 96 fe ed ff ff 	movabs rax,0xffffffffffedfe96
ffff800000801f37:	ff ff ff 
ffff800000801f3a:	48 01 d8             	add    rax,rbx
ffff800000801f3d:	ff d0                	call   rax
ffff800000801f3f:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:90
        memset(pdp,0,4096);
ffff800000801f43:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801f47:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000801f4c:	be 00 00 00 00       	mov    esi,0x0
ffff800000801f51:	48 89 c7             	mov    rdi,rax
ffff800000801f54:	49 89 df             	mov    r15,rbx
ffff800000801f57:	48 b8 b1 1d ef ff ff 	movabs rax,0xffffffffffef1db1
ffff800000801f5e:	ff ff ff 
ffff800000801f61:	48 01 d8             	add    rax,rbx
ffff800000801f64:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:91
        pdptp[pdpti]=((addr_t)pdp&~KNL_BASE)|attr;
ffff800000801f66:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801f6a:	48 ba ff ff ff ff ff 	movabs rdx,0x7fffffffffff
ffff800000801f71:	7f 00 00 
ffff800000801f74:	48 21 d0             	and    rax,rdx
ffff800000801f77:	48 89 c1             	mov    rcx,rax
ffff800000801f7a:	8b 55 bc             	mov    edx,DWORD PTR [rbp-0x44]
ffff800000801f7d:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000801f80:	48 98                	cdqe   
ffff800000801f82:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
ffff800000801f89:	00 
ffff800000801f8a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801f8e:	48 01 f0             	add    rax,rsi
ffff800000801f91:	48 09 ca             	or     rdx,rcx
ffff800000801f94:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:93
    }
    pdp=(page_item*)(((addr_t)(pdp)&~0xff)|KNL_BASE);
ffff800000801f97:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801f9b:	48 ba 00 ff ff ff ff 	movabs rdx,0x7fffffffff00
ffff800000801fa2:	7f 00 00 
ffff800000801fa5:	48 21 c2             	and    rdx,rax
ffff800000801fa8:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff800000801faf:	80 ff ff 
ffff800000801fb2:	48 09 d0             	or     rax,rdx
ffff800000801fb5:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:96

    //在pd中找到la指向的pt
    page_item* pt=(page_item*)pdp[la % PDPTE_SIZE / PDE_SIZE];
ffff800000801fb9:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801fbd:	25 ff ff ff 3f       	and    eax,0x3fffffff
ffff800000801fc2:	48 c1 e8 15          	shr    rax,0x15
ffff800000801fc6:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000801fcd:	00 
ffff800000801fce:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801fd2:	48 01 d0             	add    rax,rdx
ffff800000801fd5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801fd8:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:97
    if(!((unsigned long long)pt & PAGE_PRESENT))
ffff800000801fdc:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000801fe0:	83 e0 01             	and    eax,0x1
ffff800000801fe3:	48 85 c0             	test   rax,rax
ffff800000801fe6:	75 7c                	jne    ffff800000802064 <smmap+0x298>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:99
    {
        pt=(page_item*) kmalloc(0,PAGE_4K_SIZE);
ffff800000801fe8:	be 00 10 00 00       	mov    esi,0x1000
ffff800000801fed:	bf 00 00 00 00       	mov    edi,0x0
ffff800000801ff2:	49 89 df             	mov    r15,rbx
ffff800000801ff5:	48 b8 96 fe ed ff ff 	movabs rax,0xffffffffffedfe96
ffff800000801ffc:	ff ff ff 
ffff800000801fff:	48 01 d8             	add    rax,rbx
ffff800000802002:	ff d0                	call   rax
ffff800000802004:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:100
        memset(pt,0,4096);
ffff800000802008:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080200c:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000802011:	be 00 00 00 00       	mov    esi,0x0
ffff800000802016:	48 89 c7             	mov    rdi,rax
ffff800000802019:	49 89 df             	mov    r15,rbx
ffff80000080201c:	48 b8 b1 1d ef ff ff 	movabs rax,0xffffffffffef1db1
ffff800000802023:	ff ff ff 
ffff800000802026:	48 01 d8             	add    rax,rbx
ffff800000802029:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:101
        pdp[la%PDPTE_SIZE/PDE_SIZE]= ((addr_t)pt&~KNL_BASE) | attr;
ffff80000080202b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080202f:	48 ba ff ff ff ff ff 	movabs rdx,0x7fffffffffff
ffff800000802036:	7f 00 00 
ffff800000802039:	48 21 d0             	and    rax,rdx
ffff80000080203c:	48 89 c1             	mov    rcx,rax
ffff80000080203f:	8b 55 bc             	mov    edx,DWORD PTR [rbp-0x44]
ffff800000802042:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000802046:	25 ff ff ff 3f       	and    eax,0x3fffffff
ffff80000080204b:	48 c1 e8 15          	shr    rax,0x15
ffff80000080204f:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
ffff800000802056:	00 
ffff800000802057:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080205b:	48 01 f0             	add    rax,rsi
ffff80000080205e:	48 09 ca             	or     rdx,rcx
ffff800000802061:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:103
    }
    pt=(page_item*)(((addr_t)pt & ~0xff)|KNL_BASE);
ffff800000802064:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000802068:	48 ba 00 ff ff ff ff 	movabs rdx,0x7fffffffff00
ffff80000080206f:	7f 00 00 
ffff800000802072:	48 21 c2             	and    rdx,rax
ffff800000802075:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff80000080207c:	80 ff ff 
ffff80000080207f:	48 09 d0             	or     rax,rdx
ffff800000802082:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:106

    //在pt中找到la指向的page
    pt[la % PDE_SIZE / PAGE_4K_SIZE]=pa|attr;//映射
ffff800000802086:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
ffff800000802089:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff80000080208d:	81 e2 ff ff 1f 00    	and    edx,0x1fffff
ffff800000802093:	48 c1 ea 0c          	shr    rdx,0xc
ffff800000802097:	48 8d 0c d5 00 00 00 	lea    rcx,[rdx*8+0x0]
ffff80000080209e:	00 
ffff80000080209f:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff8000008020a3:	48 01 ca             	add    rdx,rcx
ffff8000008020a6:	48 0b 45 c8          	or     rax,QWORD PTR [rbp-0x38]
ffff8000008020aa:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:107
    return NORMAL;
ffff8000008020ad:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:108
}
ffff8000008020b2:	48 83 c4 40          	add    rsp,0x40
ffff8000008020b6:	5b                   	pop    rbx
ffff8000008020b7:	41 5f                	pop    r15
ffff8000008020b9:	5d                   	pop    rbp
ffff8000008020ba:	c3                   	ret    

ffff8000008020bb <init_paging>:
init_paging():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:112


int init_paging()
{
ffff8000008020bb:	f3 0f 1e fa          	endbr64 
ffff8000008020bf:	55                   	push   rbp
ffff8000008020c0:	48 89 e5             	mov    rbp,rsp
ffff8000008020c3:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008020c3 <init_paging+0x8>
ffff8000008020ca:	49 bb 6d 14 12 00 00 	movabs r11,0x12146d
ffff8000008020d1:	00 00 00 
ffff8000008020d4:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:145
//    set_page_item(pml4,PDPT_ADDR,PAGE_PRESENT|PAGE_FOR_ALL|PAGE_RWX);
    //设置第一项pdpte，也就是内核空间
//    set_1gb_pdpt(pdpt,0,PAGE_RWX);//设置PDPT0x40000000ul
//    set_page_item(pdpt+1,PD_ADDR,PAGE_PRESENT|PAGE_FOR_ALL|PAGE_RWX);
    //把低512GB的空间取消映射，留给用户
    pml4[0]=0;
ffff8000008020d7:	48 ba 88 ff ff ff ff 	movabs rdx,0xffffffffffffff88
ffff8000008020de:	ff ff ff 
ffff8000008020e1:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff8000008020e5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008020e8:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:147
    #endif
}
ffff8000008020ef:	90                   	nop
ffff8000008020f0:	5d                   	pop    rbp
ffff8000008020f1:	c3                   	ret    

ffff8000008020f2 <set_high_mem_base>:
set_high_mem_base():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:149
void set_high_mem_base(int base)
{
ffff8000008020f2:	f3 0f 1e fa          	endbr64 
ffff8000008020f6:	55                   	push   rbp
ffff8000008020f7:	48 89 e5             	mov    rbp,rsp
ffff8000008020fa:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008020fa <set_high_mem_base+0x8>
ffff800000802101:	49 bb 36 14 12 00 00 	movabs r11,0x121436
ffff800000802108:	00 00 00 
ffff80000080210b:	4c 01 d8             	add    rax,r11
ffff80000080210e:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:150
    high_mem_base=base;
ffff800000802111:	48 ba 80 fd ff ff ff 	movabs rdx,0xfffffffffffffd80
ffff800000802118:	ff ff ff 
ffff80000080211b:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080211f:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000802122:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:151
}
ffff800000802124:	90                   	nop
ffff800000802125:	5d                   	pop    rbp
ffff800000802126:	c3                   	ret    

ffff800000802127 <set_mem_area>:
set_mem_area():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:153
void set_mem_area(unsigned long base, unsigned long len, unsigned long type)
{
ffff800000802127:	f3 0f 1e fa          	endbr64 
ffff80000080212b:	55                   	push   rbp
ffff80000080212c:	48 89 e5             	mov    rbp,rsp
ffff80000080212f:	41 57                	push   r15
ffff800000802131:	48 83 ec 28          	sub    rsp,0x28
ffff800000802135:	4c 8d 05 f9 ff ff ff 	lea    r8,[rip+0xfffffffffffffff9]        # ffff800000802135 <set_mem_area+0xe>
ffff80000080213c:	49 bb fb 13 12 00 00 	movabs r11,0x1213fb
ffff800000802143:	00 00 00 
ffff800000802146:	4d 01 d8             	add    r8,r11
ffff800000802149:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff80000080214d:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff800000802151:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:154
    phy_mmap_struct[mmap_t_i].base=base;
ffff800000802155:	48 b8 28 fe ff ff ff 	movabs rax,0xfffffffffffffe28
ffff80000080215c:	ff ff ff 
ffff80000080215f:	49 8b 04 00          	mov    rax,QWORD PTR [r8+rax*1]
ffff800000802163:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000802165:	48 ba f0 ff ff ff ff 	movabs rdx,0xfffffffffffffff0
ffff80000080216c:	ff ff ff 
ffff80000080216f:	49 8b 0c 10          	mov    rcx,QWORD PTR [r8+rdx*1]
ffff800000802173:	48 63 d0             	movsxd rdx,eax
ffff800000802176:	48 89 d0             	mov    rax,rdx
ffff800000802179:	48 01 c0             	add    rax,rax
ffff80000080217c:	48 01 d0             	add    rax,rdx
ffff80000080217f:	48 c1 e0 03          	shl    rax,0x3
ffff800000802183:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
ffff800000802187:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080218b:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:155
    phy_mmap_struct[mmap_t_i].len=len;
ffff80000080218e:	48 b8 28 fe ff ff ff 	movabs rax,0xfffffffffffffe28
ffff800000802195:	ff ff ff 
ffff800000802198:	49 8b 04 00          	mov    rax,QWORD PTR [r8+rax*1]
ffff80000080219c:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080219e:	48 ba f0 ff ff ff ff 	movabs rdx,0xfffffffffffffff0
ffff8000008021a5:	ff ff ff 
ffff8000008021a8:	49 8b 0c 10          	mov    rcx,QWORD PTR [r8+rdx*1]
ffff8000008021ac:	48 63 d0             	movsxd rdx,eax
ffff8000008021af:	48 89 d0             	mov    rax,rdx
ffff8000008021b2:	48 01 c0             	add    rax,rax
ffff8000008021b5:	48 01 d0             	add    rax,rdx
ffff8000008021b8:	48 c1 e0 03          	shl    rax,0x3
ffff8000008021bc:	48 01 c8             	add    rax,rcx
ffff8000008021bf:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff8000008021c3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008021c7:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:156
    phy_mmap_struct[mmap_t_i++].type=type;
ffff8000008021ca:	48 b8 28 fe ff ff ff 	movabs rax,0xfffffffffffffe28
ffff8000008021d1:	ff ff ff 
ffff8000008021d4:	49 8b 04 00          	mov    rax,QWORD PTR [r8+rax*1]
ffff8000008021d8:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008021da:	8d 48 01             	lea    ecx,[rax+0x1]
ffff8000008021dd:	48 ba 28 fe ff ff ff 	movabs rdx,0xfffffffffffffe28
ffff8000008021e4:	ff ff ff 
ffff8000008021e7:	49 8b 14 10          	mov    rdx,QWORD PTR [r8+rdx*1]
ffff8000008021eb:	89 0a                	mov    DWORD PTR [rdx],ecx
ffff8000008021ed:	48 ba f0 ff ff ff ff 	movabs rdx,0xfffffffffffffff0
ffff8000008021f4:	ff ff ff 
ffff8000008021f7:	49 8b 0c 10          	mov    rcx,QWORD PTR [r8+rdx*1]
ffff8000008021fb:	48 63 d0             	movsxd rdx,eax
ffff8000008021fe:	48 89 d0             	mov    rax,rdx
ffff800000802201:	48 01 c0             	add    rax,rax
ffff800000802204:	48 01 d0             	add    rax,rdx
ffff800000802207:	48 c1 e0 03          	shl    rax,0x3
ffff80000080220b:	48 01 c8             	add    rax,rcx
ffff80000080220e:	48 8d 50 10          	lea    rdx,[rax+0x10]
ffff800000802212:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000802216:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:157
    comprintf("mem info:base=0x%l,len=0x%l,type=%d\n",base,len,type);
ffff800000802219:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff80000080221d:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000802221:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802225:	48 89 c6             	mov    rsi,rax
ffff800000802228:	48 b8 58 d2 ff ff ff 	movabs rax,0xffffffffffffd258
ffff80000080222f:	ff ff ff 
ffff800000802232:	49 8d 04 00          	lea    rax,[r8+rax*1]
ffff800000802236:	48 89 c7             	mov    rdi,rax
ffff800000802239:	4d 89 c7             	mov    r15,r8
ffff80000080223c:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802241:	49 b9 62 18 ef ff ff 	movabs r9,0xffffffffffef1862
ffff800000802248:	ff ff ff 
ffff80000080224b:	4d 01 c1             	add    r9,r8
ffff80000080224e:	41 ff d1             	call   r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:158
}
ffff800000802251:	90                   	nop
ffff800000802252:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000802256:	c9                   	leave  
ffff800000802257:	c3                   	ret    

ffff800000802258 <_kmalloc>:
_kmalloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:160
addr_t _kmalloc()
{
ffff800000802258:	f3 0f 1e fa          	endbr64 
ffff80000080225c:	55                   	push   rbp
ffff80000080225d:	48 89 e5             	mov    rbp,rsp
ffff800000802260:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000802260 <_kmalloc+0x8>
ffff800000802267:	49 bb d0 12 12 00 00 	movabs r11,0x1212d0
ffff80000080226e:	00 00 00 
ffff800000802271:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:161
    for(int i=0;i<VMALLOC_PGN/32;i++)
ffff800000802274:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff80000080227b:	e9 c6 00 00 00       	jmp    ffff800000802346 <_kmalloc+0xee>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:163
    {
        for(int j=0;j<32;j++)
ffff800000802280:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
ffff800000802287:	e9 ac 00 00 00       	jmp    ffff800000802338 <_kmalloc+0xe0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:165
        {
            if(!(vmalloc_map[i]&(1<<j)))
ffff80000080228c:	48 ba f0 fc ff ff ff 	movabs rdx,0xfffffffffffffcf0
ffff800000802293:	ff ff ff 
ffff800000802296:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080229a:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080229d:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff8000008022a0:	48 63 d2             	movsxd rdx,edx
ffff8000008022a3:	48 c1 e2 02          	shl    rdx,0x2
ffff8000008022a7:	48 01 ca             	add    rdx,rcx
ffff8000008022aa:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff8000008022ac:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff8000008022af:	bf 01 00 00 00       	mov    edi,0x1
ffff8000008022b4:	89 d1                	mov    ecx,edx
ffff8000008022b6:	d3 e7                	shl    edi,cl
ffff8000008022b8:	89 fa                	mov    edx,edi
ffff8000008022ba:	21 f2                	and    edx,esi
ffff8000008022bc:	85 d2                	test   edx,edx
ffff8000008022be:	75 74                	jne    ffff800000802334 <_kmalloc+0xdc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:167
            {
                vmalloc_map[i]|=(1<<j);
ffff8000008022c0:	48 ba f0 fc ff ff ff 	movabs rdx,0xfffffffffffffcf0
ffff8000008022c7:	ff ff ff 
ffff8000008022ca:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008022ce:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008022d1:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff8000008022d4:	48 63 d2             	movsxd rdx,edx
ffff8000008022d7:	48 c1 e2 02          	shl    rdx,0x2
ffff8000008022db:	48 01 ca             	add    rdx,rcx
ffff8000008022de:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff8000008022e0:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff8000008022e3:	bf 01 00 00 00       	mov    edi,0x1
ffff8000008022e8:	89 d1                	mov    ecx,edx
ffff8000008022ea:	d3 e7                	shl    edi,cl
ffff8000008022ec:	89 fa                	mov    edx,edi
ffff8000008022ee:	89 d1                	mov    ecx,edx
ffff8000008022f0:	48 ba f0 fc ff ff ff 	movabs rdx,0xfffffffffffffcf0
ffff8000008022f7:	ff ff ff 
ffff8000008022fa:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff8000008022fe:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802301:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802304:	48 98                	cdqe   
ffff800000802306:	48 c1 e0 02          	shl    rax,0x2
ffff80000080230a:	48 01 d0             	add    rax,rdx
ffff80000080230d:	09 ce                	or     esi,ecx
ffff80000080230f:	89 f2                	mov    edx,esi
ffff800000802311:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:168
                return VMALLOC_BASE+(i*32+j)*0x1000;
ffff800000802313:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802316:	c1 e0 05             	shl    eax,0x5
ffff800000802319:	89 c2                	mov    edx,eax
ffff80000080231b:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff80000080231e:	01 d0                	add    eax,edx
ffff800000802320:	c1 e0 0c             	shl    eax,0xc
ffff800000802323:	48 98                	cdqe   
ffff800000802325:	48 ba 00 00 00 02 00 	movabs rdx,0xffff800002000000
ffff80000080232c:	80 ff ff 
ffff80000080232f:	48 01 d0             	add    rax,rdx
ffff800000802332:	eb 1c                	jmp    ffff800000802350 <_kmalloc+0xf8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:163 (discriminator 2)
        for(int j=0;j<32;j++)
ffff800000802334:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:163 (discriminator 1)
ffff800000802338:	83 7d f8 1f          	cmp    DWORD PTR [rbp-0x8],0x1f
ffff80000080233c:	0f 8e 4a ff ff ff    	jle    ffff80000080228c <_kmalloc+0x34>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:161 (discriminator 2)
    for(int i=0;i<VMALLOC_PGN/32;i++)
ffff800000802342:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:161 (discriminator 1)
ffff800000802346:	83 7d fc 7f          	cmp    DWORD PTR [rbp-0x4],0x7f
ffff80000080234a:	0f 8e 30 ff ff ff    	jle    ffff800000802280 <_kmalloc+0x28>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:172
            }
        }
    }
}
ffff800000802350:	5d                   	pop    rbp
ffff800000802351:	c3                   	ret    

ffff800000802352 <kmallocat>:
kmallocat():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:174
addr_t kmallocat(addr_t addr,int pgc)
{
ffff800000802352:	f3 0f 1e fa          	endbr64 
ffff800000802356:	55                   	push   rbp
ffff800000802357:	48 89 e5             	mov    rbp,rsp
ffff80000080235a:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080235a <kmallocat+0x8>
ffff800000802361:	49 bb d6 11 12 00 00 	movabs r11,0x1211d6
ffff800000802368:	00 00 00 
ffff80000080236b:	4c 01 d8             	add    rax,r11
ffff80000080236e:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000802372:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:175
    int pi=(addr-VMALLOC_BASE)/PAGE_4K_SIZE;
ffff800000802375:	48 b9 00 00 00 fe ff 	movabs rcx,0x7ffffe000000
ffff80000080237c:	7f 00 00 
ffff80000080237f:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000802383:	48 01 ca             	add    rdx,rcx
ffff800000802386:	48 c1 ea 0c          	shr    rdx,0xc
ffff80000080238a:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:176
    if(addr==0){
ffff80000080238d:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff800000802392:	0f 85 3f 01 00 00    	jne    ffff8000008024d7 <kmallocat+0x185>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:177
        int l=0,p=0;
ffff800000802398:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff80000080239f:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:178
        for(int i=0;i<kmalloc_pgc;i++){
ffff8000008023a6:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
ffff8000008023ad:	eb 63                	jmp    ffff800000802412 <kmallocat+0xc0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:179
            if(!(vmalloc_map[i/32]&(1u<<(i%32)))){
ffff8000008023af:	48 ba f0 fc ff ff ff 	movabs rdx,0xfffffffffffffcf0
ffff8000008023b6:	ff ff ff 
ffff8000008023b9:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008023bd:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff8000008023c0:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff8000008023c3:	8d 4a 1f             	lea    ecx,[rdx+0x1f]
ffff8000008023c6:	85 d2                	test   edx,edx
ffff8000008023c8:	0f 48 d1             	cmovs  edx,ecx
ffff8000008023cb:	c1 fa 05             	sar    edx,0x5
ffff8000008023ce:	48 63 d2             	movsxd rdx,edx
ffff8000008023d1:	48 c1 e2 02          	shl    rdx,0x2
ffff8000008023d5:	48 01 f2             	add    rdx,rsi
ffff8000008023d8:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff8000008023da:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff8000008023dd:	83 e2 1f             	and    edx,0x1f
ffff8000008023e0:	89 d1                	mov    ecx,edx
ffff8000008023e2:	d3 ee                	shr    esi,cl
ffff8000008023e4:	89 f2                	mov    edx,esi
ffff8000008023e6:	83 e2 01             	and    edx,0x1
ffff8000008023e9:	85 d2                	test   edx,edx
ffff8000008023eb:	75 12                	jne    ffff8000008023ff <kmallocat+0xad>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:180
                if(l==0)
ffff8000008023ed:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
ffff8000008023f1:	75 06                	jne    ffff8000008023f9 <kmallocat+0xa7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:181
                    p=i;//开头空页
ffff8000008023f3:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff8000008023f6:	89 55 f8             	mov    DWORD PTR [rbp-0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:182
                l++;
ffff8000008023f9:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
ffff8000008023fd:	eb 07                	jmp    ffff800000802406 <kmallocat+0xb4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:184
            } else
                l=0;
ffff8000008023ff:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:185
            if(l==pgc)break;
ffff800000802406:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000802409:	3b 55 d4             	cmp    edx,DWORD PTR [rbp-0x2c]
ffff80000080240c:	74 1b                	je     ffff800000802429 <kmallocat+0xd7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:178 (discriminator 2)
        for(int i=0;i<kmalloc_pgc;i++){
ffff80000080240e:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:178 (discriminator 1)
ffff800000802412:	48 ba 28 ff ff ff ff 	movabs rdx,0xffffffffffffff28
ffff800000802419:	ff ff ff 
ffff80000080241c:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000802420:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000802422:	39 55 f4             	cmp    DWORD PTR [rbp-0xc],edx
ffff800000802425:	7c 88                	jl     ffff8000008023af <kmallocat+0x5d>
ffff800000802427:	eb 01                	jmp    ffff80000080242a <kmallocat+0xd8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:185
            if(l==pgc)break;
ffff800000802429:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:187
        }
        if(l<pgc)return -1;
ffff80000080242a:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080242d:	3b 55 d4             	cmp    edx,DWORD PTR [rbp-0x2c]
ffff800000802430:	7d 0c                	jge    ffff80000080243e <kmallocat+0xec>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:187 (discriminator 1)
ffff800000802432:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff800000802439:	e9 87 01 00 00       	jmp    ffff8000008025c5 <kmallocat+0x273>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:189
        //开始占用
        for(int i=0;i<pgc;i++){
ffff80000080243e:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [rbp-0x10],0x0
ffff800000802445:	eb 6e                	jmp    ffff8000008024b5 <kmallocat+0x163>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:190 (discriminator 3)
            vmalloc_map[(p+i)/32]|=1u<<((p+i)%32);
ffff800000802447:	48 ba f0 fc ff ff ff 	movabs rdx,0xfffffffffffffcf0
ffff80000080244e:	ff ff ff 
ffff800000802451:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000802455:	48 8b 3a             	mov    rdi,QWORD PTR [rdx]
ffff800000802458:	8b 4d f8             	mov    ecx,DWORD PTR [rbp-0x8]
ffff80000080245b:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
ffff80000080245e:	01 ca                	add    edx,ecx
ffff800000802460:	8d 4a 1f             	lea    ecx,[rdx+0x1f]
ffff800000802463:	85 d2                	test   edx,edx
ffff800000802465:	0f 48 d1             	cmovs  edx,ecx
ffff800000802468:	c1 fa 05             	sar    edx,0x5
ffff80000080246b:	89 d6                	mov    esi,edx
ffff80000080246d:	48 63 d6             	movsxd rdx,esi
ffff800000802470:	48 c1 e2 02          	shl    rdx,0x2
ffff800000802474:	48 01 fa             	add    rdx,rdi
ffff800000802477:	8b 3a                	mov    edi,DWORD PTR [rdx]
ffff800000802479:	8b 4d f8             	mov    ecx,DWORD PTR [rbp-0x8]
ffff80000080247c:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
ffff80000080247f:	01 ca                	add    edx,ecx
ffff800000802481:	83 e2 1f             	and    edx,0x1f
ffff800000802484:	41 b8 01 00 00 00    	mov    r8d,0x1
ffff80000080248a:	89 d1                	mov    ecx,edx
ffff80000080248c:	41 d3 e0             	shl    r8d,cl
ffff80000080248f:	48 ba f0 fc ff ff ff 	movabs rdx,0xfffffffffffffcf0
ffff800000802496:	ff ff ff 
ffff800000802499:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080249d:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008024a0:	48 63 d6             	movsxd rdx,esi
ffff8000008024a3:	48 c1 e2 02          	shl    rdx,0x2
ffff8000008024a7:	48 01 ca             	add    rdx,rcx
ffff8000008024aa:	44 09 c7             	or     edi,r8d
ffff8000008024ad:	89 f9                	mov    ecx,edi
ffff8000008024af:	89 0a                	mov    DWORD PTR [rdx],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:189 (discriminator 3)
        for(int i=0;i<pgc;i++){
ffff8000008024b1:	83 45 f0 01          	add    DWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:189 (discriminator 1)
ffff8000008024b5:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
ffff8000008024b8:	3b 55 d4             	cmp    edx,DWORD PTR [rbp-0x2c]
ffff8000008024bb:	7c 8a                	jl     ffff800000802447 <kmallocat+0xf5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:192
        }
        return VMALLOC_BASE+PAGE_4K_SIZE*p;
ffff8000008024bd:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff8000008024c0:	c1 e0 0c             	shl    eax,0xc
ffff8000008024c3:	48 98                	cdqe   
ffff8000008024c5:	48 ba 00 00 00 02 00 	movabs rdx,0xffff800002000000
ffff8000008024cc:	80 ff ff 
ffff8000008024cf:	48 01 d0             	add    rax,rdx
ffff8000008024d2:	e9 ee 00 00 00       	jmp    ffff8000008025c5 <kmallocat+0x273>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:194
    }
    for(int i=0;i<pgc;i++){
ffff8000008024d7:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff8000008024de:	eb 5c                	jmp    ffff80000080253c <kmallocat+0x1ea>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:195
        if(vmalloc_map[(pi+i)/32]&(1<<((pi+i)%32)))
ffff8000008024e0:	48 ba f0 fc ff ff ff 	movabs rdx,0xfffffffffffffcf0
ffff8000008024e7:	ff ff ff 
ffff8000008024ea:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008024ee:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff8000008024f1:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
ffff8000008024f4:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff8000008024f7:	01 ca                	add    edx,ecx
ffff8000008024f9:	8d 4a 1f             	lea    ecx,[rdx+0x1f]
ffff8000008024fc:	85 d2                	test   edx,edx
ffff8000008024fe:	0f 48 d1             	cmovs  edx,ecx
ffff800000802501:	c1 fa 05             	sar    edx,0x5
ffff800000802504:	48 63 d2             	movsxd rdx,edx
ffff800000802507:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080250b:	48 01 f2             	add    rdx,rsi
ffff80000080250e:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff800000802510:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
ffff800000802513:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000802516:	01 ca                	add    edx,ecx
ffff800000802518:	83 e2 1f             	and    edx,0x1f
ffff80000080251b:	bf 01 00 00 00       	mov    edi,0x1
ffff800000802520:	89 d1                	mov    ecx,edx
ffff800000802522:	d3 e7                	shl    edi,cl
ffff800000802524:	89 fa                	mov    edx,edi
ffff800000802526:	21 f2                	and    edx,esi
ffff800000802528:	85 d2                	test   edx,edx
ffff80000080252a:	74 0c                	je     ffff800000802538 <kmallocat+0x1e6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:196
            return -1;
ffff80000080252c:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff800000802533:	e9 8d 00 00 00       	jmp    ffff8000008025c5 <kmallocat+0x273>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:194 (discriminator 2)
    for(int i=0;i<pgc;i++){
ffff800000802538:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:194 (discriminator 1)
ffff80000080253c:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080253f:	3b 55 d4             	cmp    edx,DWORD PTR [rbp-0x2c]
ffff800000802542:	7c 9c                	jl     ffff8000008024e0 <kmallocat+0x18e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:199
    }
    //
    for(int i=0;i<pgc;i++){
ffff800000802544:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff80000080254b:	eb 6c                	jmp    ffff8000008025b9 <kmallocat+0x267>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:200 (discriminator 3)
        vmalloc_map[(pi+i)]|=(1<<((pi+i)%32));
ffff80000080254d:	48 ba f0 fc ff ff ff 	movabs rdx,0xfffffffffffffcf0
ffff800000802554:	ff ff ff 
ffff800000802557:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080255b:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080255e:	8b 75 e4             	mov    esi,DWORD PTR [rbp-0x1c]
ffff800000802561:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000802564:	01 f2                	add    edx,esi
ffff800000802566:	48 63 d2             	movsxd rdx,edx
ffff800000802569:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080256d:	48 01 ca             	add    rdx,rcx
ffff800000802570:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff800000802572:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
ffff800000802575:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000802578:	01 ca                	add    edx,ecx
ffff80000080257a:	83 e2 1f             	and    edx,0x1f
ffff80000080257d:	bf 01 00 00 00       	mov    edi,0x1
ffff800000802582:	89 d1                	mov    ecx,edx
ffff800000802584:	d3 e7                	shl    edi,cl
ffff800000802586:	89 fa                	mov    edx,edi
ffff800000802588:	41 89 d0             	mov    r8d,edx
ffff80000080258b:	48 ba f0 fc ff ff ff 	movabs rdx,0xfffffffffffffcf0
ffff800000802592:	ff ff ff 
ffff800000802595:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000802599:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080259c:	8b 7d e4             	mov    edi,DWORD PTR [rbp-0x1c]
ffff80000080259f:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff8000008025a2:	01 fa                	add    edx,edi
ffff8000008025a4:	48 63 d2             	movsxd rdx,edx
ffff8000008025a7:	48 c1 e2 02          	shl    rdx,0x2
ffff8000008025ab:	48 01 ca             	add    rdx,rcx
ffff8000008025ae:	44 09 c6             	or     esi,r8d
ffff8000008025b1:	89 f1                	mov    ecx,esi
ffff8000008025b3:	89 0a                	mov    DWORD PTR [rdx],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:199 (discriminator 3)
    for(int i=0;i<pgc;i++){
ffff8000008025b5:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:199 (discriminator 1)
ffff8000008025b9:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff8000008025bc:	3b 55 d4             	cmp    edx,DWORD PTR [rbp-0x2c]
ffff8000008025bf:	7c 8c                	jl     ffff80000080254d <kmallocat+0x1fb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:202
    }
    return addr;
ffff8000008025c1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:204

}
ffff8000008025c5:	5d                   	pop    rbp
ffff8000008025c6:	c3                   	ret    

ffff8000008025c7 <_kmfree>:
_kmfree():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:207

int _kmfree(addr_t ptr)
{
ffff8000008025c7:	f3 0f 1e fa          	endbr64 
ffff8000008025cb:	55                   	push   rbp
ffff8000008025cc:	48 89 e5             	mov    rbp,rsp
ffff8000008025cf:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff8000008025cf <_kmfree+0x8>
ffff8000008025d6:	49 bb 61 0f 12 00 00 	movabs r11,0x120f61
ffff8000008025dd:	00 00 00 
ffff8000008025e0:	4c 01 da             	add    rdx,r11
ffff8000008025e3:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:208
    int num=ptr/PAGE_SIZE;
ffff8000008025e7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008025eb:	48 c1 e8 0c          	shr    rax,0xc
ffff8000008025ef:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:209
    int n=num/32;
ffff8000008025f2:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008025f5:	8d 48 1f             	lea    ecx,[rax+0x1f]
ffff8000008025f8:	85 c0                	test   eax,eax
ffff8000008025fa:	0f 48 c1             	cmovs  eax,ecx
ffff8000008025fd:	c1 f8 05             	sar    eax,0x5
ffff800000802600:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:210
    int r=num%32;
ffff800000802603:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802606:	89 c1                	mov    ecx,eax
ffff800000802608:	c1 f9 1f             	sar    ecx,0x1f
ffff80000080260b:	c1 e9 1b             	shr    ecx,0x1b
ffff80000080260e:	01 c8                	add    eax,ecx
ffff800000802610:	83 e0 1f             	and    eax,0x1f
ffff800000802613:	29 c8                	sub    eax,ecx
ffff800000802615:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:211
    vmalloc_map[n]=vmalloc_map[n]&~(unsigned int)(1<<r);
ffff800000802618:	48 b8 f0 fc ff ff ff 	movabs rax,0xfffffffffffffcf0
ffff80000080261f:	ff ff ff 
ffff800000802622:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000802626:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000802629:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff80000080262c:	48 98                	cdqe   
ffff80000080262e:	48 c1 e0 02          	shl    rax,0x2
ffff800000802632:	48 01 c8             	add    rax,rcx
ffff800000802635:	8b 30                	mov    esi,DWORD PTR [rax]
ffff800000802637:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffff80000080263a:	bf 01 00 00 00       	mov    edi,0x1
ffff80000080263f:	89 c1                	mov    ecx,eax
ffff800000802641:	d3 e7                	shl    edi,cl
ffff800000802643:	89 f8                	mov    eax,edi
ffff800000802645:	f7 d0                	not    eax
ffff800000802647:	89 c1                	mov    ecx,eax
ffff800000802649:	48 b8 f0 fc ff ff ff 	movabs rax,0xfffffffffffffcf0
ffff800000802650:	ff ff ff 
ffff800000802653:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000802657:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080265a:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff80000080265d:	48 98                	cdqe   
ffff80000080265f:	48 c1 e0 02          	shl    rax,0x2
ffff800000802663:	48 01 d0             	add    rax,rdx
ffff800000802666:	21 ce                	and    esi,ecx
ffff800000802668:	89 f2                	mov    edx,esi
ffff80000080266a:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:212
}
ffff80000080266c:	90                   	nop
ffff80000080266d:	5d                   	pop    rbp
ffff80000080266e:	c3                   	ret    

ffff80000080266f <get_mmap>:
get_mmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:215

///查询当前进程该地址是否有对应的映射
mmap_struct* get_mmap(off_t addr){
ffff80000080266f:	f3 0f 1e fa          	endbr64 
ffff800000802673:	55                   	push   rbp
ffff800000802674:	48 89 e5             	mov    rbp,rsp
ffff800000802677:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000802677 <get_mmap+0x8>
ffff80000080267e:	49 bb b9 0e 12 00 00 	movabs r11,0x120eb9
ffff800000802685:	00 00 00 
ffff800000802688:	4c 01 d8             	add    rax,r11
ffff80000080268b:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:216
    struct List* mp=current->mmaps;
ffff80000080268f:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000802696:	ff ff ff 
ffff800000802699:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080269d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008026a0:	48 8b 80 34 03 00 00 	mov    rax,QWORD PTR [rax+0x334]
ffff8000008026a7:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:217
    for (; mp&&((mmap_struct*)mp->data)->base!=addr; mp=mp->next);
ffff8000008026ab:	eb 0c                	jmp    ffff8000008026b9 <get_mmap+0x4a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:217 (discriminator 3)
ffff8000008026ad:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008026b1:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008026b5:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:217 (discriminator 1)
ffff8000008026b9:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffff8000008026be:	74 11                	je     ffff8000008026d1 <get_mmap+0x62>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:217 (discriminator 2)
ffff8000008026c0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008026c4:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff8000008026c8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008026cb:	48 39 45 e8          	cmp    QWORD PTR [rbp-0x18],rax
ffff8000008026cf:	75 dc                	jne    ffff8000008026ad <get_mmap+0x3e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:218
    if(!mp)return NULL;
ffff8000008026d1:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffff8000008026d6:	75 07                	jne    ffff8000008026df <get_mmap+0x70>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:218 (discriminator 1)
ffff8000008026d8:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008026dd:	eb 08                	jmp    ffff8000008026e7 <get_mmap+0x78>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:219
    return mp->data;
ffff8000008026df:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008026e3:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:220
}   
ffff8000008026e7:	5d                   	pop    rbp
ffff8000008026e8:	c3                   	ret    

ffff8000008026e9 <get_pmhdr>:
get_pmhdr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:222
///获取该物理地址的malloc header。
malloc_hdr* get_pmhdr(off_t pm){
ffff8000008026e9:	f3 0f 1e fa          	endbr64 
ffff8000008026ed:	55                   	push   rbp
ffff8000008026ee:	48 89 e5             	mov    rbp,rsp
ffff8000008026f1:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008026f1 <get_pmhdr+0x8>
ffff8000008026f8:	49 bb 3f 0e 12 00 00 	movabs r11,0x120e3f
ffff8000008026ff:	00 00 00 
ffff800000802702:	4c 01 d8             	add    rax,r11
ffff800000802705:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:223
    malloc_hdr* mp=pmhdrs;
ffff800000802709:	48 ba 10 ff ff ff ff 	movabs rdx,0xffffffffffffff10
ffff800000802710:	ff ff ff 
ffff800000802713:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000802717:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080271a:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:224
    for (; mp&&mp->base!=pm; mp=mp->next);
ffff80000080271e:	eb 0c                	jmp    ffff80000080272c <get_pmhdr+0x43>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:224 (discriminator 3)
ffff800000802720:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000802724:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000802728:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:224 (discriminator 1)
ffff80000080272c:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffff800000802731:	74 0d                	je     ffff800000802740 <get_pmhdr+0x57>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:224 (discriminator 2)
ffff800000802733:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000802737:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080273a:	48 39 45 e8          	cmp    QWORD PTR [rbp-0x18],rax
ffff80000080273e:	75 e0                	jne    ffff800000802720 <get_pmhdr+0x37>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:225
    return mp;
ffff800000802740:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:226
}
ffff800000802744:	5d                   	pop    rbp
ffff800000802745:	c3                   	ret    

ffff800000802746 <page_err>:
page_err():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:227
void page_err(){
ffff800000802746:	f3 0f 1e fa          	endbr64 
ffff80000080274a:	55                   	push   rbp
ffff80000080274b:	48 89 e5             	mov    rbp,rsp
ffff80000080274e:	41 57                	push   r15
ffff800000802750:	53                   	push   rbx
ffff800000802751:	48 83 ec 40          	sub    rsp,0x40
ffff800000802755:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000802755 <page_err+0xf>
ffff80000080275c:	49 bb db 0d 12 00 00 	movabs r11,0x120ddb
ffff800000802763:	00 00 00 
ffff800000802766:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:228
    __asm__("cli");
ffff800000802769:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:229
    printf("page err\n");
ffff80000080276a:	48 b8 7d d2 ff ff ff 	movabs rax,0xffffffffffffd27d
ffff800000802771:	ff ff ff 
ffff800000802774:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000802778:	48 89 c7             	mov    rdi,rax
ffff80000080277b:	49 89 df             	mov    r15,rbx
ffff80000080277e:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802783:	48 ba 91 e4 ed ff ff 	movabs rdx,0xffffffffffede491
ffff80000080278a:	ff ff ff 
ffff80000080278d:	48 01 da             	add    rdx,rbx
ffff800000802790:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:230
    unsigned long err_code=0,l_addr=0;
ffff800000802792:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff800000802799:	00 
ffff80000080279a:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff8000008027a1:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:231
    __asm__ volatile("mov 8(%%rbp),%0":"=r"(err_code));
ffff8000008027a2:	48 8b 45 08          	mov    rax,QWORD PTR [rbp+0x8]
ffff8000008027a6:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:232
    __asm__ volatile("mov %%cr2,%0":"=r"(l_addr));//试图访问的地址
ffff8000008027aa:	0f 20 d0             	mov    rax,cr2
ffff8000008027ad:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:233
    int p=err_code&1;
ffff8000008027b1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008027b5:	83 e0 01             	and    eax,0x1
ffff8000008027b8:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:235
    
    off_t *stk=0;
ffff8000008027bb:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffff8000008027c2:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:236
    __asm__ volatile("mov %%rbp,%0":"=m"(stk));
ffff8000008027c3:	48 89 6d b8          	mov    QWORD PTR [rbp-0x48],rbp
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:237
    stk-=2;
ffff8000008027c7:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008027cb:	48 83 e8 10          	sub    rax,0x10
ffff8000008027cf:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:238
    backtrace(stk);
ffff8000008027d3:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008027d7:	48 89 c7             	mov    rdi,rax
ffff8000008027da:	49 89 df             	mov    r15,rbx
ffff8000008027dd:	48 b8 57 db ed ff ff 	movabs rax,0xffffffffffeddb57
ffff8000008027e4:	ff ff ff 
ffff8000008027e7:	48 01 d8             	add    rax,rbx
ffff8000008027ea:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:240

    if(!p)
ffff8000008027ec:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
ffff8000008027f0:	0f 85 c0 01 00 00    	jne    ffff8000008029b6 <page_err+0x270>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:246
    {
        //accessing non-existent page
        //检查地址合法性
        if(l_addr>=MEM_END)
            ;
        mmap_struct* mp=NULL;
ffff8000008027f6:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff8000008027fd:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:247
        if((mp=get_mmap(l_addr))==NULL){
ffff8000008027fe:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802802:	48 89 c7             	mov    rdi,rax
ffff800000802805:	49 89 df             	mov    r15,rbx
ffff800000802808:	48 b8 3f f1 ed ff ff 	movabs rax,0xffffffffffedf13f
ffff80000080280f:	ff ff ff 
ffff800000802812:	48 01 d8             	add    rax,rbx
ffff800000802815:	ff d0                	call   rax
ffff800000802817:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
ffff80000080281b:	48 83 7d d0 00       	cmp    QWORD PTR [rbp-0x30],0x0
ffff800000802820:	75 2d                	jne    ffff80000080284f <page_err+0x109>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:249
            //TODO  没有映射，报错
            comprintf("page_err:page acceessed without mmap\n");
ffff800000802822:	48 b8 88 d2 ff ff ff 	movabs rax,0xffffffffffffd288
ffff800000802829:	ff ff ff 
ffff80000080282c:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000802830:	48 89 c7             	mov    rdi,rax
ffff800000802833:	49 89 df             	mov    r15,rbx
ffff800000802836:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080283b:	48 ba 62 18 ef ff ff 	movabs rdx,0xffffffffffef1862
ffff800000802842:	ff ff ff 
ffff800000802845:	48 01 da             	add    rdx,rbx
ffff800000802848:	ff d2                	call   rdx
ffff80000080284a:	e9 67 01 00 00       	jmp    ffff8000008029b6 <page_err+0x270>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:253

        }else {
            //在进程的页表中申请新页
            void *pm=pmalloc(PAGE_4K_ALIGN(mp->len));
ffff80000080284f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000802853:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000802857:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff80000080285d:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
ffff800000802863:	48 89 c7             	mov    rdi,rax
ffff800000802866:	49 89 df             	mov    r15,rbx
ffff800000802869:	48 b8 4b 01 ee ff ff 	movabs rax,0xffffffffffee014b
ffff800000802870:	ff ff ff 
ffff800000802873:	48 01 d8             	add    rax,rbx
ffff800000802876:	ff d0                	call   rax
ffff800000802878:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:254
            l_addr&=PAGE_4K_MASK;
ffff80000080287c:	48 81 65 e8 00 f0 ff 	and    QWORD PTR [rbp-0x18],0xfffffffffffff000
ffff800000802883:	ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:255
            for (int i=0; i<PAGE_4K_ALIGN(mp->len)/PAGE_4K_SIZE; i++) {
ffff800000802884:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff80000080288b:	eb 5a                	jmp    ffff8000008028e7 <page_err+0x1a1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:256 (discriminator 3)
                smmap(pm+i*PAGE_4K_SIZE,l_addr+i*PAGE_4K_SIZE,PAGE_PRESENT|PAGE_RWX|PAGE_FOR_ALL,current->pml4);
ffff80000080288d:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff800000802894:	ff ff ff 
ffff800000802897:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080289b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080289e:	48 8b 80 e0 00 00 00 	mov    rax,QWORD PTR [rax+0xe0]
ffff8000008028a5:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff8000008028a8:	c1 e2 0c             	shl    edx,0xc
ffff8000008028ab:	48 63 ca             	movsxd rcx,edx
ffff8000008028ae:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff8000008028b2:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff8000008028b6:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff8000008028b9:	c1 e2 0c             	shl    edx,0xc
ffff8000008028bc:	48 63 ca             	movsxd rcx,edx
ffff8000008028bf:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff8000008028c3:	48 01 ca             	add    rdx,rcx
ffff8000008028c6:	48 89 d7             	mov    rdi,rdx
ffff8000008028c9:	48 89 c1             	mov    rcx,rax
ffff8000008028cc:	ba 07 00 00 00       	mov    edx,0x7
ffff8000008028d1:	49 89 df             	mov    r15,rbx
ffff8000008028d4:	48 b8 9c e8 ed ff ff 	movabs rax,0xffffffffffede89c
ffff8000008028db:	ff ff ff 
ffff8000008028de:	48 01 d8             	add    rax,rbx
ffff8000008028e1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:255 (discriminator 3)
            for (int i=0; i<PAGE_4K_ALIGN(mp->len)/PAGE_4K_SIZE; i++) {
ffff8000008028e3:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:255 (discriminator 1)
ffff8000008028e7:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff8000008028ea:	48 63 d0             	movsxd rdx,eax
ffff8000008028ed:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008028f1:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff8000008028f5:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff8000008028fb:	48 c1 e8 0c          	shr    rax,0xc
ffff8000008028ff:	48 39 c2             	cmp    rdx,rax
ffff800000802902:	72 89                	jb     ffff80000080288d <page_err+0x147>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:258
            }
            mp->pmhdr=get_pmhdr(pm);//填写pmhdr
ffff800000802904:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000802908:	48 89 c7             	mov    rdi,rax
ffff80000080290b:	49 89 df             	mov    r15,rbx
ffff80000080290e:	48 b8 b9 f1 ed ff ff 	movabs rax,0xffffffffffedf1b9
ffff800000802915:	ff ff ff 
ffff800000802918:	48 01 d8             	add    rax,rbx
ffff80000080291b:	ff d0                	call   rax
ffff80000080291d:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000802921:	48 89 42 28          	mov    QWORD PTR [rdx+0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:260
            //读取文件
            if(mp->file){
ffff800000802925:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000802929:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080292d:	48 85 c0             	test   rax,rax
ffff800000802930:	0f 84 80 00 00 00    	je     ffff8000008029b6 <page_err+0x270>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:261
                int fd=mp->file-current->openf;
ffff800000802936:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080293a:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080293e:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff800000802945:	ff ff ff 
ffff800000802948:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080294c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080294f:	48 8d 88 f8 00 00 00 	lea    rcx,[rax+0xf8]
ffff800000802956:	48 89 d0             	mov    rax,rdx
ffff800000802959:	48 29 c8             	sub    rax,rcx
ffff80000080295c:	48 c1 f8 03          	sar    rax,0x3
ffff800000802960:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:262
                sys_lseek(fd, mp->offset, SEEK_SET);
ffff800000802963:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000802967:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080296b:	48 89 c1             	mov    rcx,rax
ffff80000080296e:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff800000802971:	ba 00 00 00 00       	mov    edx,0x0
ffff800000802976:	48 89 ce             	mov    rsi,rcx
ffff800000802979:	89 c7                	mov    edi,eax
ffff80000080297b:	49 89 df             	mov    r15,rbx
ffff80000080297e:	48 b8 42 ac ee ff ff 	movabs rax,0xffffffffffeeac42
ffff800000802985:	ff ff ff 
ffff800000802988:	48 01 d8             	add    rax,rbx
ffff80000080298b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:263
                sys_read(fd, l_addr, mp->len);
ffff80000080298d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000802991:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000802995:	48 89 c2             	mov    rdx,rax
ffff800000802998:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff80000080299c:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080299f:	48 89 ce             	mov    rsi,rcx
ffff8000008029a2:	89 c7                	mov    edi,eax
ffff8000008029a4:	49 89 df             	mov    r15,rbx
ffff8000008029a7:	48 b8 a6 aa ee ff ff 	movabs rax,0xffffffffffeeaaa6
ffff8000008029ae:	ff ff ff 
ffff8000008029b1:	48 01 d8             	add    rax,rbx
ffff8000008029b4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:271
    }
    else
    {
        //page level protection
    }
    p=err_code&2;
ffff8000008029b6:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008029ba:	83 e0 02             	and    eax,0x2
ffff8000008029bd:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:272
    if(p)printf("when writing\n");else //puts("when reading");
ffff8000008029c0:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
ffff8000008029c4:	74 2a                	je     ffff8000008029f0 <page_err+0x2aa>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:272 (discriminator 1)
ffff8000008029c6:	48 b8 ae d2 ff ff ff 	movabs rax,0xffffffffffffd2ae
ffff8000008029cd:	ff ff ff 
ffff8000008029d0:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008029d4:	48 89 c7             	mov    rdi,rax
ffff8000008029d7:	49 89 df             	mov    r15,rbx
ffff8000008029da:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008029df:	48 ba 91 e4 ed ff ff 	movabs rdx,0xffffffffffede491
ffff8000008029e6:	ff ff ff 
ffff8000008029e9:	48 01 da             	add    rdx,rbx
ffff8000008029ec:	ff d2                	call   rdx
ffff8000008029ee:	eb 0a                	jmp    ffff8000008029fa <page_err+0x2b4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:273
    p=err_code&4;
ffff8000008029f0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008029f4:	83 e0 04             	and    eax,0x4
ffff8000008029f7:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:274
    if(!p)printf("supervisor mode\n");else //puts("user mode");
ffff8000008029fa:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
ffff8000008029fe:	75 2a                	jne    ffff800000802a2a <page_err+0x2e4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:274 (discriminator 1)
ffff800000802a00:	48 b8 bc d2 ff ff ff 	movabs rax,0xffffffffffffd2bc
ffff800000802a07:	ff ff ff 
ffff800000802a0a:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000802a0e:	48 89 c7             	mov    rdi,rax
ffff800000802a11:	49 89 df             	mov    r15,rbx
ffff800000802a14:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802a19:	48 ba 91 e4 ed ff ff 	movabs rdx,0xffffffffffede491
ffff800000802a20:	ff ff ff 
ffff800000802a23:	48 01 da             	add    rdx,rbx
ffff800000802a26:	ff d2                	call   rdx
ffff800000802a28:	eb 0a                	jmp    ffff800000802a34 <page_err+0x2ee>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:275
    p=err_code&16;
ffff800000802a2a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000802a2e:	83 e0 10             	and    eax,0x10
ffff800000802a31:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:276
    if(p)printf("an instruction tries to fetch\n");
ffff800000802a34:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
ffff800000802a38:	74 28                	je     ffff800000802a62 <page_err+0x31c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:276 (discriminator 1)
ffff800000802a3a:	48 b8 d0 d2 ff ff ff 	movabs rax,0xffffffffffffd2d0
ffff800000802a41:	ff ff ff 
ffff800000802a44:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000802a48:	48 89 c7             	mov    rdi,rax
ffff800000802a4b:	49 89 df             	mov    r15,rbx
ffff800000802a4e:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802a53:	48 ba 91 e4 ed ff ff 	movabs rdx,0xffffffffffede491
ffff800000802a5a:	ff ff ff 
ffff800000802a5d:	48 01 da             	add    rdx,rbx
ffff800000802a60:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:277
    unsigned int addr=0;
ffff800000802a62:	c7 45 c0 00 00 00 00 	mov    DWORD PTR [rbp-0x40],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:278
    __asm__ volatile("mov 8(%%rbp),%0":"=r"(addr));
ffff800000802a69:	8b 45 08             	mov    eax,DWORD PTR [rbp+0x8]
ffff800000802a6c:	89 45 c0             	mov    DWORD PTR [rbp-0x40],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:279
    printf("occurred at %x(paddr), %x(laddr)\n",addr,l_addr);
ffff800000802a6f:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000802a73:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
ffff800000802a76:	89 c6                	mov    esi,eax
ffff800000802a78:	48 b8 f0 d2 ff ff ff 	movabs rax,0xffffffffffffd2f0
ffff800000802a7f:	ff ff ff 
ffff800000802a82:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000802a86:	48 89 c7             	mov    rdi,rax
ffff800000802a89:	49 89 df             	mov    r15,rbx
ffff800000802a8c:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802a91:	48 b9 91 e4 ed ff ff 	movabs rcx,0xffffffffffede491
ffff800000802a98:	ff ff ff 
ffff800000802a9b:	48 01 d9             	add    rcx,rbx
ffff800000802a9e:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:291
    }*/
    //杀死问题进程
//    del_proc(cur_proc);
    // printf("killed the problem process.\n");
    // printf("shell:>");
    eoi();
ffff800000802aa0:	49 89 df             	mov    r15,rbx
ffff800000802aa3:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802aa8:	48 ba de 62 ee ff ff 	movabs rdx,0xffffffffffee62de
ffff800000802aaf:	ff ff ff 
ffff800000802ab2:	48 01 da             	add    rdx,rbx
ffff800000802ab5:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:293
    //这里对esp的加法是必要的，因为page fault多push了一个错误码，但是iret识别不了
    __asm__ volatile ("sti \r\n  leave\n add $8,%rsp \n iretq");
ffff800000802ab7:	fb                   	sti    
ffff800000802ab8:	c9                   	leave  
ffff800000802ab9:	48 83 c4 08          	add    rsp,0x8
ffff800000802abd:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:294
}
ffff800000802abf:	90                   	nop
ffff800000802ac0:	48 83 c4 40          	add    rsp,0x40
ffff800000802ac4:	5b                   	pop    rbx
ffff800000802ac5:	41 5f                	pop    r15
ffff800000802ac7:	5d                   	pop    rbp
ffff800000802ac8:	c3                   	ret    

ffff800000802ac9 <init_memory>:
init_memory():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:296
void init_memory()
{
ffff800000802ac9:	f3 0f 1e fa          	endbr64 
ffff800000802acd:	55                   	push   rbp
ffff800000802ace:	48 89 e5             	mov    rbp,rsp
ffff800000802ad1:	41 57                	push   r15
ffff800000802ad3:	53                   	push   rbx
ffff800000802ad4:	48 83 ec 30          	sub    rsp,0x30
ffff800000802ad8:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000802ad8 <init_memory+0xf>
ffff800000802adf:	49 bb 58 0a 12 00 00 	movabs r11,0x120a58
ffff800000802ae6:	00 00 00 
ffff800000802ae9:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:299
    extern addr_t _knl_end,_knl_start;//lds中声明的内核的结尾地址，放置位图
    //获取可用内存大小mem_size
    size_t tot_mem_size=phy_mmap_struct[mmap_t_i-1].base+phy_mmap_struct[mmap_t_i-1].len,mem_size=0;
ffff800000802aec:	48 b8 28 fe ff ff ff 	movabs rax,0xfffffffffffffe28
ffff800000802af3:	ff ff ff 
ffff800000802af6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802afa:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000802afc:	8d 50 ff             	lea    edx,[rax-0x1]
ffff800000802aff:	48 b8 f0 ff ff ff ff 	movabs rax,0xfffffffffffffff0
ffff800000802b06:	ff ff ff 
ffff800000802b09:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000802b0d:	48 63 d2             	movsxd rdx,edx
ffff800000802b10:	48 89 d0             	mov    rax,rdx
ffff800000802b13:	48 01 c0             	add    rax,rax
ffff800000802b16:	48 01 d0             	add    rax,rdx
ffff800000802b19:	48 c1 e0 03          	shl    rax,0x3
ffff800000802b1d:	48 01 c8             	add    rax,rcx
ffff800000802b20:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000802b23:	48 b8 28 fe ff ff ff 	movabs rax,0xfffffffffffffe28
ffff800000802b2a:	ff ff ff 
ffff800000802b2d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802b31:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000802b33:	8d 50 ff             	lea    edx,[rax-0x1]
ffff800000802b36:	48 b8 f0 ff ff ff ff 	movabs rax,0xfffffffffffffff0
ffff800000802b3d:	ff ff ff 
ffff800000802b40:	48 8b 34 03          	mov    rsi,QWORD PTR [rbx+rax*1]
ffff800000802b44:	48 63 d2             	movsxd rdx,edx
ffff800000802b47:	48 89 d0             	mov    rax,rdx
ffff800000802b4a:	48 01 c0             	add    rax,rax
ffff800000802b4d:	48 01 d0             	add    rax,rdx
ffff800000802b50:	48 c1 e0 03          	shl    rax,0x3
ffff800000802b54:	48 01 f0             	add    rax,rsi
ffff800000802b57:	48 83 c0 08          	add    rax,0x8
ffff800000802b5b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000802b5e:	48 01 c8             	add    rax,rcx
ffff800000802b61:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
ffff800000802b65:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff800000802b6c:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:300
    for(int i=0;i<mmap_t_i;i++)
ffff800000802b6d:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff800000802b74:	eb 64                	jmp    ffff800000802bda <init_memory+0x111>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:302
    {
        if(phy_mmap_struct[i].type==MULTIBOOT_MEMORY_AVAILABLE)
ffff800000802b76:	48 b8 f0 ff ff ff ff 	movabs rax,0xfffffffffffffff0
ffff800000802b7d:	ff ff ff 
ffff800000802b80:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000802b84:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000802b87:	48 63 d0             	movsxd rdx,eax
ffff800000802b8a:	48 89 d0             	mov    rax,rdx
ffff800000802b8d:	48 01 c0             	add    rax,rax
ffff800000802b90:	48 01 d0             	add    rax,rdx
ffff800000802b93:	48 c1 e0 03          	shl    rax,0x3
ffff800000802b97:	48 01 c8             	add    rax,rcx
ffff800000802b9a:	48 83 c0 10          	add    rax,0x10
ffff800000802b9e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000802ba1:	48 83 f8 01          	cmp    rax,0x1
ffff800000802ba5:	75 2f                	jne    ffff800000802bd6 <init_memory+0x10d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:303
            mem_size+=phy_mmap_struct[i].len;
ffff800000802ba7:	48 b8 f0 ff ff ff ff 	movabs rax,0xfffffffffffffff0
ffff800000802bae:	ff ff ff 
ffff800000802bb1:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000802bb5:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000802bb8:	48 63 d0             	movsxd rdx,eax
ffff800000802bbb:	48 89 d0             	mov    rax,rdx
ffff800000802bbe:	48 01 c0             	add    rax,rax
ffff800000802bc1:	48 01 d0             	add    rax,rdx
ffff800000802bc4:	48 c1 e0 03          	shl    rax,0x3
ffff800000802bc8:	48 01 c8             	add    rax,rcx
ffff800000802bcb:	48 83 c0 08          	add    rax,0x8
ffff800000802bcf:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000802bd2:	48 01 45 e8          	add    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:300 (discriminator 2)
    for(int i=0;i<mmap_t_i;i++)
ffff800000802bd6:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:300 (discriminator 1)
ffff800000802bda:	48 b8 28 fe ff ff ff 	movabs rax,0xfffffffffffffe28
ffff800000802be1:	ff ff ff 
ffff800000802be4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802be8:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000802bea:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000802bed:	7c 87                	jl     ffff800000802b76 <init_memory+0xad>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:305
    }
    usr_mem_pa=PAGE_4K_ALIGN(mem_size/2);
ffff800000802bef:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802bf3:	48 d1 e8             	shr    rax,1
ffff800000802bf6:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff800000802bfc:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
ffff800000802c02:	48 89 c2             	mov    rdx,rax
ffff800000802c05:	48 b8 b8 fc ff ff ff 	movabs rax,0xfffffffffffffcb8
ffff800000802c0c:	ff ff ff 
ffff800000802c0f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802c13:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:314
    /*
     * 注：物理内存的一半会分给内核。
     * 前半部分是计算内存大小使多少个页，在位图中，一页表示为一位，所以除以后面部分，
     * 即一页位图可以有多少位。
     * */
    pmalloc_entc= tot_mem_size / PAGE_4K_SIZE/32;
ffff800000802c16:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000802c1a:	48 c1 e8 11          	shr    rax,0x11
ffff800000802c1e:	89 c2                	mov    edx,eax
ffff800000802c20:	48 b8 f0 fe ff ff ff 	movabs rax,0xfffffffffffffef0
ffff800000802c27:	ff ff ff 
ffff800000802c2a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802c2e:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:315
    int pgc=(tot_mem_size/PAGE_4K_SIZE)/(PAGE_4K_SIZE*8);
ffff800000802c30:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000802c34:	48 c1 e8 1b          	shr    rax,0x1b
ffff800000802c38:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:317
    //计算出位图所需的字节数
    int pg_bytes=pgc>>5;//=/32
ffff800000802c3b:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000802c3e:	c1 f8 05             	sar    eax,0x5
ffff800000802c41:	89 45 c8             	mov    DWORD PTR [rbp-0x38],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:321
    //初始化vmalloc内存位图
    //计算位图需要多少个int
    // size_t vmec= (mem_size/2-0x1000000)/PAGE_4K_SIZE/32;//去掉内核代码16M
    size_t vmms=(mem_size/2-0x1000000);//位图自己需要多少页
ffff800000802c44:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802c48:	48 d1 e8             	shr    rax,1
ffff800000802c4b:	48 2d 00 00 00 01    	sub    rax,0x1000000
ffff800000802c51:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:322
    comprintf("tot memsize:0x%l,available size 0x%l,kmalloc bitmap taking 0x%d pages\n", tot_mem_size,mem_size,vmms);
ffff800000802c55:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
ffff800000802c59:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000802c5d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000802c61:	48 89 c6             	mov    rsi,rax
ffff800000802c64:	48 b8 18 d3 ff ff ff 	movabs rax,0xffffffffffffd318
ffff800000802c6b:	ff ff ff 
ffff800000802c6e:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000802c72:	48 89 c7             	mov    rdi,rax
ffff800000802c75:	49 89 df             	mov    r15,rbx
ffff800000802c78:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802c7d:	49 b8 62 18 ef ff ff 	movabs r8,0xffffffffffef1862
ffff800000802c84:	ff ff ff 
ffff800000802c87:	49 01 d8             	add    r8,rbx
ffff800000802c8a:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:324
    //创建mhdr
    for(int i=0;i< MAX_KMHDRS;i++)
ffff800000802c8d:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff800000802c94:	eb 30                	jmp    ffff800000802cc6 <init_memory+0x1fd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:325 (discriminator 3)
        kmhdrs[i].type=-1;
ffff800000802c96:	48 b8 e0 fd ff ff ff 	movabs rax,0xfffffffffffffde0
ffff800000802c9d:	ff ff ff 
ffff800000802ca0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802ca4:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000802ca7:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000802caa:	48 63 d0             	movsxd rdx,eax
ffff800000802cad:	48 89 d0             	mov    rax,rdx
ffff800000802cb0:	48 c1 e0 02          	shl    rax,0x2
ffff800000802cb4:	48 01 d0             	add    rax,rdx
ffff800000802cb7:	48 c1 e0 03          	shl    rax,0x3
ffff800000802cbb:	48 01 c8             	add    rax,rcx
ffff800000802cbe:	c6 40 10 ff          	mov    BYTE PTR [rax+0x10],0xff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:324 (discriminator 3)
    for(int i=0;i< MAX_KMHDRS;i++)
ffff800000802cc2:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:324 (discriminator 1)
ffff800000802cc6:	81 7d e0 a9 00 00 00 	cmp    DWORD PTR [rbp-0x20],0xa9
ffff800000802ccd:	7e c7                	jle    ffff800000802c96 <init_memory+0x1cd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:326
    kmalloc_mhdr=kmhdrs=VMALLOC_BASE;
ffff800000802ccf:	48 b8 e0 fd ff ff ff 	movabs rax,0xfffffffffffffde0
ffff800000802cd6:	ff ff ff 
ffff800000802cd9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802cdd:	48 bf 00 00 00 02 00 	movabs rdi,0xffff800002000000
ffff800000802ce4:	80 ff ff 
ffff800000802ce7:	48 89 38             	mov    QWORD PTR [rax],rdi
ffff800000802cea:	48 b8 e0 fd ff ff ff 	movabs rax,0xfffffffffffffde0
ffff800000802cf1:	ff ff ff 
ffff800000802cf4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802cf8:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802cfb:	48 b8 e8 fe ff ff ff 	movabs rax,0xfffffffffffffee8
ffff800000802d02:	ff ff ff 
ffff800000802d05:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802d09:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:327
    kmhdrs->base=VMALLOC_BASE;
ffff800000802d0c:	48 b8 e0 fd ff ff ff 	movabs rax,0xfffffffffffffde0
ffff800000802d13:	ff ff ff 
ffff800000802d16:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802d1a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000802d1d:	48 89 38             	mov    QWORD PTR [rax],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:328
    kmhdrs->len=vmms;
ffff800000802d20:	48 b8 e0 fd ff ff ff 	movabs rax,0xfffffffffffffde0
ffff800000802d27:	ff ff ff 
ffff800000802d2a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802d2e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000802d31:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000802d35:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:329
    kmhdrs->prev=NULL;
ffff800000802d39:	48 b8 e0 fd ff ff ff 	movabs rax,0xfffffffffffffde0
ffff800000802d40:	ff ff ff 
ffff800000802d43:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802d47:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000802d4a:	48 c7 40 20 00 00 00 	mov    QWORD PTR [rax+0x20],0x0
ffff800000802d51:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:330
    kmhdrs->next=NULL;
ffff800000802d52:	48 b8 e0 fd ff ff ff 	movabs rax,0xfffffffffffffde0
ffff800000802d59:	ff ff ff 
ffff800000802d5c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802d60:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000802d63:	48 c7 40 18 00 00 00 	mov    QWORD PTR [rax+0x18],0x0
ffff800000802d6a:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:331
    kmhdrs->type=MEM_TYPE_AVAILABLE;
ffff800000802d6b:	48 b8 e0 fd ff ff ff 	movabs rax,0xfffffffffffffde0
ffff800000802d72:	ff ff ff 
ffff800000802d75:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802d79:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000802d7c:	c6 40 10 01          	mov    BYTE PTR [rax+0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:332
    kmhdrs->flag=MEM_FLAG_R|MEM_FLAG_W;
ffff800000802d80:	48 b8 e0 fd ff ff ff 	movabs rax,0xfffffffffffffde0
ffff800000802d87:	ff ff ff 
ffff800000802d8a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802d8e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000802d91:	c6 40 11 03          	mov    BYTE PTR [rax+0x11],0x3
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:334
    //先占用两页作为mhdrs
    kmalloc(VMALLOC_BASE,PAGE_4K_SIZE*2);
ffff800000802d95:	be 00 20 00 00       	mov    esi,0x2000
ffff800000802d9a:	48 b8 00 00 00 02 00 	movabs rax,0xffff800002000000
ffff800000802da1:	80 ff ff 
ffff800000802da4:	48 89 c7             	mov    rdi,rax
ffff800000802da7:	49 89 df             	mov    r15,rbx
ffff800000802daa:	48 b8 96 fe ed ff ff 	movabs rax,0xffffffffffedfe96
ffff800000802db1:	ff ff ff 
ffff800000802db4:	48 01 d8             	add    rax,rbx
ffff800000802db7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:352
            j++;
        }
        vmalloc_map[j]|=1u<<i;
    } */
    
    pmhdrs=kmalloc(0,PAGE_4K_SIZE);
ffff800000802db9:	be 00 10 00 00       	mov    esi,0x1000
ffff800000802dbe:	bf 00 00 00 00       	mov    edi,0x0
ffff800000802dc3:	49 89 df             	mov    r15,rbx
ffff800000802dc6:	48 b8 96 fe ed ff ff 	movabs rax,0xffffffffffedfe96
ffff800000802dcd:	ff ff ff 
ffff800000802dd0:	48 01 d8             	add    rax,rbx
ffff800000802dd3:	ff d0                	call   rax
ffff800000802dd5:	48 ba 10 ff ff ff ff 	movabs rdx,0xffffffffffffff10
ffff800000802ddc:	ff ff ff 
ffff800000802ddf:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000802de3:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:353
    for(int i=0;i< MAX_PMHDRS;i++)
ffff800000802de6:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
ffff800000802ded:	eb 30                	jmp    ffff800000802e1f <init_memory+0x356>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:354 (discriminator 3)
        pmhdrs[i].type=-1;
ffff800000802def:	48 b8 10 ff ff ff ff 	movabs rax,0xffffffffffffff10
ffff800000802df6:	ff ff ff 
ffff800000802df9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802dfd:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000802e00:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000802e03:	48 63 d0             	movsxd rdx,eax
ffff800000802e06:	48 89 d0             	mov    rax,rdx
ffff800000802e09:	48 c1 e0 02          	shl    rax,0x2
ffff800000802e0d:	48 01 d0             	add    rax,rdx
ffff800000802e10:	48 c1 e0 03          	shl    rax,0x3
ffff800000802e14:	48 01 c8             	add    rax,rcx
ffff800000802e17:	c6 40 10 ff          	mov    BYTE PTR [rax+0x10],0xff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:353 (discriminator 3)
    for(int i=0;i< MAX_PMHDRS;i++)
ffff800000802e1b:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:353 (discriminator 1)
ffff800000802e1f:	83 7d dc 54          	cmp    DWORD PTR [rbp-0x24],0x54
ffff800000802e23:	7e ca                	jle    ffff800000802def <init_memory+0x326>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:355
    for(int i=0;i<mmap_t_i;i++)
ffff800000802e25:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [rbp-0x28],0x0
ffff800000802e2c:	e9 45 02 00 00       	jmp    ffff800000803076 <init_memory+0x5ad>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:357
    {
        pmhdrs[i].base=phy_mmap_struct[i].base;
ffff800000802e31:	48 b8 10 ff ff ff ff 	movabs rax,0xffffffffffffff10
ffff800000802e38:	ff ff ff 
ffff800000802e3b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802e3f:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000802e42:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000802e45:	48 63 d0             	movsxd rdx,eax
ffff800000802e48:	48 89 d0             	mov    rax,rdx
ffff800000802e4b:	48 c1 e0 02          	shl    rax,0x2
ffff800000802e4f:	48 01 d0             	add    rax,rdx
ffff800000802e52:	48 c1 e0 03          	shl    rax,0x3
ffff800000802e56:	48 01 c1             	add    rcx,rax
ffff800000802e59:	48 b8 f0 ff ff ff ff 	movabs rax,0xfffffffffffffff0
ffff800000802e60:	ff ff ff 
ffff800000802e63:	48 8b 34 03          	mov    rsi,QWORD PTR [rbx+rax*1]
ffff800000802e67:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000802e6a:	48 63 d0             	movsxd rdx,eax
ffff800000802e6d:	48 89 d0             	mov    rax,rdx
ffff800000802e70:	48 01 c0             	add    rax,rax
ffff800000802e73:	48 01 d0             	add    rax,rdx
ffff800000802e76:	48 c1 e0 03          	shl    rax,0x3
ffff800000802e7a:	48 01 f0             	add    rax,rsi
ffff800000802e7d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000802e80:	48 89 01             	mov    QWORD PTR [rcx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:358
        pmhdrs[i].len=phy_mmap_struct[i].len;
ffff800000802e83:	48 b8 10 ff ff ff ff 	movabs rax,0xffffffffffffff10
ffff800000802e8a:	ff ff ff 
ffff800000802e8d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802e91:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000802e94:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000802e97:	48 63 d0             	movsxd rdx,eax
ffff800000802e9a:	48 89 d0             	mov    rax,rdx
ffff800000802e9d:	48 c1 e0 02          	shl    rax,0x2
ffff800000802ea1:	48 01 d0             	add    rax,rdx
ffff800000802ea4:	48 c1 e0 03          	shl    rax,0x3
ffff800000802ea8:	48 01 c1             	add    rcx,rax
ffff800000802eab:	48 b8 f0 ff ff ff ff 	movabs rax,0xfffffffffffffff0
ffff800000802eb2:	ff ff ff 
ffff800000802eb5:	48 8b 34 03          	mov    rsi,QWORD PTR [rbx+rax*1]
ffff800000802eb9:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000802ebc:	48 63 d0             	movsxd rdx,eax
ffff800000802ebf:	48 89 d0             	mov    rax,rdx
ffff800000802ec2:	48 01 c0             	add    rax,rax
ffff800000802ec5:	48 01 d0             	add    rax,rdx
ffff800000802ec8:	48 c1 e0 03          	shl    rax,0x3
ffff800000802ecc:	48 01 f0             	add    rax,rsi
ffff800000802ecf:	48 83 c0 08          	add    rax,0x8
ffff800000802ed3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000802ed6:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:359
        pmhdrs[i].flag=0;
ffff800000802eda:	48 b8 10 ff ff ff ff 	movabs rax,0xffffffffffffff10
ffff800000802ee1:	ff ff ff 
ffff800000802ee4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802ee8:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000802eeb:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000802eee:	48 63 d0             	movsxd rdx,eax
ffff800000802ef1:	48 89 d0             	mov    rax,rdx
ffff800000802ef4:	48 c1 e0 02          	shl    rax,0x2
ffff800000802ef8:	48 01 d0             	add    rax,rdx
ffff800000802efb:	48 c1 e0 03          	shl    rax,0x3
ffff800000802eff:	48 01 c8             	add    rax,rcx
ffff800000802f02:	c6 40 11 00          	mov    BYTE PTR [rax+0x11],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:360
        pmhdrs[i].next=pmhdrs+i+1;
ffff800000802f06:	48 b8 10 ff ff ff ff 	movabs rax,0xffffffffffffff10
ffff800000802f0d:	ff ff ff 
ffff800000802f10:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802f14:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000802f17:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000802f1a:	48 98                	cdqe   
ffff800000802f1c:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffff800000802f20:	48 89 d0             	mov    rax,rdx
ffff800000802f23:	48 c1 e0 02          	shl    rax,0x2
ffff800000802f27:	48 01 d0             	add    rax,rdx
ffff800000802f2a:	48 c1 e0 03          	shl    rax,0x3
ffff800000802f2e:	48 89 c7             	mov    rdi,rax
ffff800000802f31:	48 b8 10 ff ff ff ff 	movabs rax,0xffffffffffffff10
ffff800000802f38:	ff ff ff 
ffff800000802f3b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802f3f:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff800000802f42:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000802f45:	48 63 d0             	movsxd rdx,eax
ffff800000802f48:	48 89 d0             	mov    rax,rdx
ffff800000802f4b:	48 c1 e0 02          	shl    rax,0x2
ffff800000802f4f:	48 01 d0             	add    rax,rdx
ffff800000802f52:	48 c1 e0 03          	shl    rax,0x3
ffff800000802f56:	48 01 f0             	add    rax,rsi
ffff800000802f59:	48 8d 14 39          	lea    rdx,[rcx+rdi*1]
ffff800000802f5d:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:361
        pmhdrs[i].prev=pmhdrs+i-1;
ffff800000802f61:	48 b8 10 ff ff ff ff 	movabs rax,0xffffffffffffff10
ffff800000802f68:	ff ff ff 
ffff800000802f6b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802f6f:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000802f72:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000802f75:	48 63 d0             	movsxd rdx,eax
ffff800000802f78:	48 89 d0             	mov    rax,rdx
ffff800000802f7b:	48 c1 e0 02          	shl    rax,0x2
ffff800000802f7f:	48 01 d0             	add    rax,rdx
ffff800000802f82:	48 c1 e0 03          	shl    rax,0x3
ffff800000802f86:	48 8d 78 d8          	lea    rdi,[rax-0x28]
ffff800000802f8a:	48 b8 10 ff ff ff ff 	movabs rax,0xffffffffffffff10
ffff800000802f91:	ff ff ff 
ffff800000802f94:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802f98:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff800000802f9b:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000802f9e:	48 63 d0             	movsxd rdx,eax
ffff800000802fa1:	48 89 d0             	mov    rax,rdx
ffff800000802fa4:	48 c1 e0 02          	shl    rax,0x2
ffff800000802fa8:	48 01 d0             	add    rax,rdx
ffff800000802fab:	48 c1 e0 03          	shl    rax,0x3
ffff800000802faf:	48 01 f0             	add    rax,rsi
ffff800000802fb2:	48 8d 14 39          	lea    rdx,[rcx+rdi*1]
ffff800000802fb6:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:362
        switch (phy_mmap_struct[i].type)
ffff800000802fba:	48 b8 f0 ff ff ff ff 	movabs rax,0xfffffffffffffff0
ffff800000802fc1:	ff ff ff 
ffff800000802fc4:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000802fc8:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000802fcb:	48 63 d0             	movsxd rdx,eax
ffff800000802fce:	48 89 d0             	mov    rax,rdx
ffff800000802fd1:	48 01 c0             	add    rax,rax
ffff800000802fd4:	48 01 d0             	add    rax,rdx
ffff800000802fd7:	48 c1 e0 03          	shl    rax,0x3
ffff800000802fdb:	48 01 c8             	add    rax,rcx
ffff800000802fde:	48 83 c0 10          	add    rax,0x10
ffff800000802fe2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000802fe5:	48 83 f8 01          	cmp    rax,0x1
ffff800000802fe9:	75 5a                	jne    ffff800000803045 <init_memory+0x57c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:365
        {
        case MULTIBOOT_MEMORY_AVAILABLE:
            pmhdrs[i].type=MEM_TYPE_AVAILABLE;
ffff800000802feb:	48 b8 10 ff ff ff ff 	movabs rax,0xffffffffffffff10
ffff800000802ff2:	ff ff ff 
ffff800000802ff5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802ff9:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000802ffc:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000802fff:	48 63 d0             	movsxd rdx,eax
ffff800000803002:	48 89 d0             	mov    rax,rdx
ffff800000803005:	48 c1 e0 02          	shl    rax,0x2
ffff800000803009:	48 01 d0             	add    rax,rdx
ffff80000080300c:	48 c1 e0 03          	shl    rax,0x3
ffff800000803010:	48 01 c8             	add    rax,rcx
ffff800000803013:	c6 40 10 01          	mov    BYTE PTR [rax+0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:366
            pmhdrs[i].flag=MEM_FLAG_R;
ffff800000803017:	48 b8 10 ff ff ff ff 	movabs rax,0xffffffffffffff10
ffff80000080301e:	ff ff ff 
ffff800000803021:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803025:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000803028:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080302b:	48 63 d0             	movsxd rdx,eax
ffff80000080302e:	48 89 d0             	mov    rax,rdx
ffff800000803031:	48 c1 e0 02          	shl    rax,0x2
ffff800000803035:	48 01 d0             	add    rax,rdx
ffff800000803038:	48 c1 e0 03          	shl    rax,0x3
ffff80000080303c:	48 01 c8             	add    rax,rcx
ffff80000080303f:	c6 40 11 01          	mov    BYTE PTR [rax+0x11],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:367
            break;
ffff800000803043:	eb 2d                	jmp    ffff800000803072 <init_memory+0x5a9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:369
        default:
            pmhdrs[i].type=MEM_TYPE_RSVD;
ffff800000803045:	48 b8 10 ff ff ff ff 	movabs rax,0xffffffffffffff10
ffff80000080304c:	ff ff ff 
ffff80000080304f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803053:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000803056:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000803059:	48 63 d0             	movsxd rdx,eax
ffff80000080305c:	48 89 d0             	mov    rax,rdx
ffff80000080305f:	48 c1 e0 02          	shl    rax,0x2
ffff800000803063:	48 01 d0             	add    rax,rdx
ffff800000803066:	48 c1 e0 03          	shl    rax,0x3
ffff80000080306a:	48 01 c8             	add    rax,rcx
ffff80000080306d:	c6 40 10 00          	mov    BYTE PTR [rax+0x10],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:370
            break;
ffff800000803071:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:355 (discriminator 2)
    for(int i=0;i<mmap_t_i;i++)
ffff800000803072:	83 45 d8 01          	add    DWORD PTR [rbp-0x28],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:355 (discriminator 1)
ffff800000803076:	48 b8 28 fe ff ff ff 	movabs rax,0xfffffffffffffe28
ffff80000080307d:	ff ff ff 
ffff800000803080:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803084:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000803086:	39 45 d8             	cmp    DWORD PTR [rbp-0x28],eax
ffff800000803089:	0f 8c a2 fd ff ff    	jl     ffff800000802e31 <init_memory+0x368>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:373
        }
    }
    pmhdrs[0].prev=NULL;
ffff80000080308f:	48 b8 10 ff ff ff ff 	movabs rax,0xffffffffffffff10
ffff800000803096:	ff ff ff 
ffff800000803099:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080309d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008030a0:	48 c7 40 20 00 00 00 	mov    QWORD PTR [rax+0x20],0x0
ffff8000008030a7:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:374
    pmhdrs[mmap_t_i-1].next=NULL;
ffff8000008030a8:	48 b8 10 ff ff ff ff 	movabs rax,0xffffffffffffff10
ffff8000008030af:	ff ff ff 
ffff8000008030b2:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008030b6:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008030b9:	48 b8 28 fe ff ff ff 	movabs rax,0xfffffffffffffe28
ffff8000008030c0:	ff ff ff 
ffff8000008030c3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008030c7:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008030c9:	48 63 d0             	movsxd rdx,eax
ffff8000008030cc:	48 89 d0             	mov    rax,rdx
ffff8000008030cf:	48 c1 e0 02          	shl    rax,0x2
ffff8000008030d3:	48 01 d0             	add    rax,rdx
ffff8000008030d6:	48 c1 e0 03          	shl    rax,0x3
ffff8000008030da:	48 83 e8 28          	sub    rax,0x28
ffff8000008030de:	48 01 c8             	add    rax,rcx
ffff8000008030e1:	48 c7 40 18 00 00 00 	mov    QWORD PTR [rax+0x18],0x0
ffff8000008030e8:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:375
    pmalloc_mhdr=pmhdrs;
ffff8000008030e9:	48 b8 10 ff ff ff ff 	movabs rax,0xffffffffffffff10
ffff8000008030f0:	ff ff ff 
ffff8000008030f3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008030f7:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008030fa:	48 b8 c0 ff ff ff ff 	movabs rax,0xffffffffffffffc0
ffff800000803101:	ff ff ff 
ffff800000803104:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803108:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:397
    //低1gb提前占用掉 knl
    for(int j=0;j<0x2000;j++){
        page_map[j]=-1;
    }*/
   //占用1GB
    if(pmalloc(0x40000000)!=0){
ffff80000080310b:	bf 00 00 00 40       	mov    edi,0x40000000
ffff800000803110:	49 89 df             	mov    r15,rbx
ffff800000803113:	48 b8 4b 01 ee ff ff 	movabs rax,0xffffffffffee014b
ffff80000080311a:	ff ff ff 
ffff80000080311d:	48 01 d8             	add    rax,rbx
ffff800000803120:	ff d0                	call   rax
ffff800000803122:	48 85 c0             	test   rax,rax
ffff800000803125:	74 28                	je     ffff80000080314f <init_memory+0x686>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:398
        comprintf("error: failed to req pm for knl at 0\n");
ffff800000803127:	48 b8 60 d3 ff ff ff 	movabs rax,0xffffffffffffd360
ffff80000080312e:	ff ff ff 
ffff800000803131:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000803135:	48 89 c7             	mov    rdi,rax
ffff800000803138:	49 89 df             	mov    r15,rbx
ffff80000080313b:	b8 00 00 00 00       	mov    eax,0x0
ffff800000803140:	48 ba 62 18 ef ff ff 	movabs rdx,0xffffffffffef1862
ffff800000803147:	ff ff ff 
ffff80000080314a:	48 01 da             	add    rdx,rbx
ffff80000080314d:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:428
        pd[i+mapai]=ptpm|PAGE_PRESENT|PAGE_RWX;
    }
    page_item *pdpt=(addr_t)pml4[256]&PAGE_4K_MASK+KNL_BASE;
    pdpt[0]=pdpm|PAGE_PRESENT|PAGE_RWX;*/

}
ffff80000080314f:	90                   	nop
ffff800000803150:	48 83 c4 30          	add    rsp,0x30
ffff800000803154:	5b                   	pop    rbx
ffff800000803155:	41 5f                	pop    r15
ffff800000803157:	5d                   	pop    rbp
ffff800000803158:	c3                   	ret    

ffff800000803159 <req_a_page>:
req_a_page():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:434
/*
page_map存储方式:
0x00000000
little end
*/
addr_t req_a_page(){
ffff800000803159:	f3 0f 1e fa          	endbr64 
ffff80000080315d:	55                   	push   rbp
ffff80000080315e:	48 89 e5             	mov    rbp,rsp
ffff800000803161:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000803161 <req_a_page+0x8>
ffff800000803168:	49 bb cf 03 12 00 00 	movabs r11,0x1203cf
ffff80000080316f:	00 00 00 
ffff800000803172:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:435
    for(int i=0; i < pmalloc_entc; i++){
ffff800000803175:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff80000080317c:	e9 d3 00 00 00       	jmp    ffff800000803254 <req_a_page+0xfb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:436
        for(int j=0;j<32;j++){
ffff800000803181:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
ffff800000803188:	e9 b9 00 00 00       	jmp    ffff800000803246 <req_a_page+0xed>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:437
            unsigned int bit=page_map[i]&(1<<j);
ffff80000080318d:	48 ba 50 fe ff ff ff 	movabs rdx,0xfffffffffffffe50
ffff800000803194:	ff ff ff 
ffff800000803197:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080319b:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080319e:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff8000008031a1:	48 63 d2             	movsxd rdx,edx
ffff8000008031a4:	48 c1 e2 02          	shl    rdx,0x2
ffff8000008031a8:	48 01 ca             	add    rdx,rcx
ffff8000008031ab:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff8000008031ad:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff8000008031b0:	bf 01 00 00 00       	mov    edi,0x1
ffff8000008031b5:	89 d1                	mov    ecx,edx
ffff8000008031b7:	d3 e7                	shl    edi,cl
ffff8000008031b9:	89 fa                	mov    edx,edi
ffff8000008031bb:	21 f2                	and    edx,esi
ffff8000008031bd:	89 55 f4             	mov    DWORD PTR [rbp-0xc],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:438
            if((i*32+j)*4096>=0x100000&&(bit==0u))
ffff8000008031c0:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff8000008031c3:	89 d1                	mov    ecx,edx
ffff8000008031c5:	c1 e1 05             	shl    ecx,0x5
ffff8000008031c8:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff8000008031cb:	01 ca                	add    edx,ecx
ffff8000008031cd:	c1 e2 0c             	shl    edx,0xc
ffff8000008031d0:	81 fa ff ff 0f 00    	cmp    edx,0xfffff
ffff8000008031d6:	7e 6a                	jle    ffff800000803242 <req_a_page+0xe9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:438 (discriminator 1)
ffff8000008031d8:	83 7d f4 00          	cmp    DWORD PTR [rbp-0xc],0x0
ffff8000008031dc:	75 64                	jne    ffff800000803242 <req_a_page+0xe9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:441
            {
                // comprintf("req_a_page:before:page_map[%d]=0x%x,",i,page_map[i]);
                page_map[i]=page_map[i]|(1<<j);
ffff8000008031de:	48 ba 50 fe ff ff ff 	movabs rdx,0xfffffffffffffe50
ffff8000008031e5:	ff ff ff 
ffff8000008031e8:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008031ec:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008031ef:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff8000008031f2:	48 63 d2             	movsxd rdx,edx
ffff8000008031f5:	48 c1 e2 02          	shl    rdx,0x2
ffff8000008031f9:	48 01 ca             	add    rdx,rcx
ffff8000008031fc:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff8000008031fe:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff800000803201:	bf 01 00 00 00       	mov    edi,0x1
ffff800000803206:	89 d1                	mov    ecx,edx
ffff800000803208:	d3 e7                	shl    edi,cl
ffff80000080320a:	89 fa                	mov    edx,edi
ffff80000080320c:	89 d1                	mov    ecx,edx
ffff80000080320e:	48 ba 50 fe ff ff ff 	movabs rdx,0xfffffffffffffe50
ffff800000803215:	ff ff ff 
ffff800000803218:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080321c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080321f:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000803222:	48 98                	cdqe   
ffff800000803224:	48 c1 e0 02          	shl    rax,0x2
ffff800000803228:	48 01 d0             	add    rax,rdx
ffff80000080322b:	09 ce                	or     esi,ecx
ffff80000080322d:	89 f2                	mov    edx,esi
ffff80000080322f:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:443
                // comprintf("now = 0x%x",page_map[i]);
                return i*32+j;//num of page
ffff800000803231:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000803234:	c1 e0 05             	shl    eax,0x5
ffff800000803237:	89 c2                	mov    edx,eax
ffff800000803239:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff80000080323c:	01 d0                	add    eax,edx
ffff80000080323e:	48 98                	cdqe   
ffff800000803240:	eb 32                	jmp    ffff800000803274 <req_a_page+0x11b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:436 (discriminator 2)
        for(int j=0;j<32;j++){
ffff800000803242:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:436 (discriminator 1)
ffff800000803246:	83 7d f8 1f          	cmp    DWORD PTR [rbp-0x8],0x1f
ffff80000080324a:	0f 8e 3d ff ff ff    	jle    ffff80000080318d <req_a_page+0x34>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:435 (discriminator 2)
    for(int i=0; i < pmalloc_entc; i++){
ffff800000803250:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:435 (discriminator 1)
ffff800000803254:	48 ba f0 fe ff ff ff 	movabs rdx,0xfffffffffffffef0
ffff80000080325b:	ff ff ff 
ffff80000080325e:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000803262:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000803264:	39 55 fc             	cmp    DWORD PTR [rbp-0x4],edx
ffff800000803267:	0f 8c 14 ff ff ff    	jl     ffff800000803181 <req_a_page+0x28>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:448

            }
        }
    }
    return -1;
ffff80000080326d:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:449
}
ffff800000803274:	5d                   	pop    rbp
ffff800000803275:	c3                   	ret    

ffff800000803276 <mhdr_split>:
mhdr_split():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:454
/// @brief 将mhdr对应内存分成两块，返回高地址块内存的mhdr，其属性等复制自原来mhdr，低地址的mhdr来自被分割的mhdr。
/// @param target 被分割的mhdr
/// @param split_point 分割地址点
/// @return 高地址块内存的mhdr,即被分割出来的mhdr;如果割出来高地址内存大小为0，返回低地址mhdr，如果低地址内存大小为0，返回高地址mhdr。
malloc_hdr *mhdr_split(malloc_hdr* target,off_t split_point,malloc_hdr* array,size_t arraylen){
ffff800000803276:	f3 0f 1e fa          	endbr64 
ffff80000080327a:	55                   	push   rbp
ffff80000080327b:	48 89 e5             	mov    rbp,rsp
ffff80000080327e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080327e <mhdr_split+0x8>
ffff800000803285:	49 bb b2 02 12 00 00 	movabs r11,0x1202b2
ffff80000080328c:	00 00 00 
ffff80000080328f:	4c 01 d8             	add    rax,r11
ffff800000803292:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000803296:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080329a:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffff80000080329e:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:456
    //内部实现的时候出现大小为0的mhdr不创建
    if(target->base>=split_point||target->base+target->len<=split_point)return target;
ffff8000008032a2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008032a6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008032a9:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
ffff8000008032ad:	76 18                	jbe    ffff8000008032c7 <mhdr_split+0x51>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:456 (discriminator 2)
ffff8000008032af:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008032b3:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008032b6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008032ba:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff8000008032be:	48 01 d0             	add    rax,rdx
ffff8000008032c1:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
ffff8000008032c5:	72 09                	jb     ffff8000008032d0 <mhdr_split+0x5a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:456 (discriminator 3)
ffff8000008032c7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008032cb:	e9 f4 00 00 00       	jmp    ffff8000008033c4 <mhdr_split+0x14e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:457
    malloc_hdr* nmh=0;
ffff8000008032d0:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff8000008032d7:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:458
    for (int i=0;i<arraylen;i++){
ffff8000008032d8:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
ffff8000008032df:	eb 4e                	jmp    ffff80000080332f <mhdr_split+0xb9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:459
        if(array[i].type==-1){
ffff8000008032e1:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffff8000008032e4:	48 63 d0             	movsxd rdx,eax
ffff8000008032e7:	48 89 d0             	mov    rax,rdx
ffff8000008032ea:	48 c1 e0 02          	shl    rax,0x2
ffff8000008032ee:	48 01 d0             	add    rax,rdx
ffff8000008032f1:	48 c1 e0 03          	shl    rax,0x3
ffff8000008032f5:	48 89 c2             	mov    rdx,rax
ffff8000008032f8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008032fc:	48 01 d0             	add    rax,rdx
ffff8000008032ff:	0f b6 40 10          	movzx  eax,BYTE PTR [rax+0x10]
ffff800000803303:	3c ff                	cmp    al,0xff
ffff800000803305:	75 24                	jne    ffff80000080332b <mhdr_split+0xb5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:460
            nmh=array+i;
ffff800000803307:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffff80000080330a:	48 63 d0             	movsxd rdx,eax
ffff80000080330d:	48 89 d0             	mov    rax,rdx
ffff800000803310:	48 c1 e0 02          	shl    rax,0x2
ffff800000803314:	48 01 d0             	add    rax,rdx
ffff800000803317:	48 c1 e0 03          	shl    rax,0x3
ffff80000080331b:	48 89 c2             	mov    rdx,rax
ffff80000080331e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000803322:	48 01 d0             	add    rax,rdx
ffff800000803325:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:461
            break;
ffff800000803329:	eb 0f                	jmp    ffff80000080333a <mhdr_split+0xc4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:458 (discriminator 2)
    for (int i=0;i<arraylen;i++){
ffff80000080332b:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:458 (discriminator 1)
ffff80000080332f:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffff800000803332:	48 98                	cdqe   
ffff800000803334:	48 39 45 d0          	cmp    QWORD PTR [rbp-0x30],rax
ffff800000803338:	77 a7                	ja     ffff8000008032e1 <mhdr_split+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:464
        }
    }
    if(!nmh)return NULL;
ffff80000080333a:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffff80000080333f:	75 07                	jne    ffff800000803348 <mhdr_split+0xd2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:464 (discriminator 1)
ffff800000803341:	b8 00 00 00 00       	mov    eax,0x0
ffff800000803346:	eb 7c                	jmp    ffff8000008033c4 <mhdr_split+0x14e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:465
    nmh->next=target->next;
ffff800000803348:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080334c:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
ffff800000803350:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803354:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:466
    target->next->prev=nmh;
ffff800000803358:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080335c:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000803360:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000803364:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:467
    nmh->prev=target;
ffff800000803368:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080336c:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000803370:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:468
    target->next=nmh;
ffff800000803374:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803378:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080337c:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:470
    
    nmh->base=split_point;
ffff800000803380:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803384:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000803388:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:471
    nmh->len= target->len- split_point;
ffff80000080338b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080338f:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000803393:	48 2b 45 e0          	sub    rax,QWORD PTR [rbp-0x20]
ffff800000803397:	48 89 c2             	mov    rdx,rax
ffff80000080339a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080339e:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:472
    nmh->flag=target->flag;
ffff8000008033a2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008033a6:	0f b6 50 11          	movzx  edx,BYTE PTR [rax+0x11]
ffff8000008033aa:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008033ae:	88 50 11             	mov    BYTE PTR [rax+0x11],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:473
    nmh->type=target->flag;
ffff8000008033b1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008033b5:	0f b6 50 11          	movzx  edx,BYTE PTR [rax+0x11]
ffff8000008033b9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008033bd:	88 50 10             	mov    BYTE PTR [rax+0x10],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:475

    return nmh;
ffff8000008033c0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:477

}
ffff8000008033c4:	5d                   	pop    rbp
ffff8000008033c5:	c3                   	ret    

ffff8000008033c6 <kmalloc>:
kmalloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:478
void *kmalloc(off_t addr,size_t size){
ffff8000008033c6:	f3 0f 1e fa          	endbr64 
ffff8000008033ca:	55                   	push   rbp
ffff8000008033cb:	48 89 e5             	mov    rbp,rsp
ffff8000008033ce:	41 57                	push   r15
ffff8000008033d0:	53                   	push   rbx
ffff8000008033d1:	48 83 ec 30          	sub    rsp,0x30
ffff8000008033d5:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008033d5 <kmalloc+0xf>
ffff8000008033dc:	49 bb 5b 01 12 00 00 	movabs r11,0x12015b
ffff8000008033e3:	00 00 00 
ffff8000008033e6:	4c 01 db             	add    rbx,r11
ffff8000008033e9:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff8000008033ed:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:479
    for (malloc_hdr *mh = kmalloc_mhdr; mh; mh=mh->next)
ffff8000008033f1:	48 b8 e8 fe ff ff ff 	movabs rax,0xfffffffffffffee8
ffff8000008033f8:	ff ff ff 
ffff8000008033fb:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008033ff:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803402:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff800000803406:	e9 43 01 00 00       	jmp    ffff80000080354e <kmalloc+0x188>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:481
    {
        if(!addr&&(mh->type!=MEM_TYPE_AVAILABLE||mh->len<size))continue;
ffff80000080340b:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffff800000803410:	75 22                	jne    ffff800000803434 <kmalloc+0x6e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:481 (discriminator 1)
ffff800000803412:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803416:	0f b6 40 10          	movzx  eax,BYTE PTR [rax+0x10]
ffff80000080341a:	3c 01                	cmp    al,0x1
ffff80000080341c:	0f 85 1c 01 00 00    	jne    ffff80000080353e <kmalloc+0x178>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:481 (discriminator 3)
ffff800000803422:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803426:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080342a:	48 39 45 c0          	cmp    QWORD PTR [rbp-0x40],rax
ffff80000080342e:	0f 87 0a 01 00 00    	ja     ffff80000080353e <kmalloc+0x178>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:482
        if(mh->type!=MEM_TYPE_AVAILABLE||mh->len-(addr-mh->base)<size||addr<mh->base||addr>mh->base+mh->len)continue;
ffff800000803434:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803438:	0f b6 40 10          	movzx  eax,BYTE PTR [rax+0x10]
ffff80000080343c:	3c 01                	cmp    al,0x1
ffff80000080343e:	0f 85 fd 00 00 00    	jne    ffff800000803541 <kmalloc+0x17b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:482 (discriminator 2)
ffff800000803444:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803448:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff80000080344c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803450:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803453:	48 2b 45 c8          	sub    rax,QWORD PTR [rbp-0x38]
ffff800000803457:	48 01 d0             	add    rax,rdx
ffff80000080345a:	48 39 45 c0          	cmp    QWORD PTR [rbp-0x40],rax
ffff80000080345e:	0f 87 dd 00 00 00    	ja     ffff800000803541 <kmalloc+0x17b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:482 (discriminator 4)
ffff800000803464:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803468:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080346b:	48 39 45 c8          	cmp    QWORD PTR [rbp-0x38],rax
ffff80000080346f:	0f 82 cc 00 00 00    	jb     ffff800000803541 <kmalloc+0x17b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:482 (discriminator 6)
ffff800000803475:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803479:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080347c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803480:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000803484:	48 01 d0             	add    rax,rdx
ffff800000803487:	48 39 45 c8          	cmp    QWORD PTR [rbp-0x38],rax
ffff80000080348b:	0f 87 b0 00 00 00    	ja     ffff800000803541 <kmalloc+0x17b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:483
        if(!addr){
ffff800000803491:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffff800000803496:	75 0b                	jne    ffff8000008034a3 <kmalloc+0xdd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:484
            addr=mh->base;
ffff800000803498:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080349c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080349f:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:488
        }
        //以下为符合要求
        //分割空闲内存
        malloc_hdr* nmh=mhdr_split(mh,addr,kmhdrs,MAX_KMHDRS);
ffff8000008034a3:	48 b8 e0 fd ff ff ff 	movabs rax,0xfffffffffffffde0
ffff8000008034aa:	ff ff ff 
ffff8000008034ad:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008034b1:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008034b4:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
ffff8000008034b8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008034bc:	b9 aa 00 00 00       	mov    ecx,0xaa
ffff8000008034c1:	48 89 c7             	mov    rdi,rax
ffff8000008034c4:	49 89 df             	mov    r15,rbx
ffff8000008034c7:	48 b8 46 fd ed ff ff 	movabs rax,0xffffffffffedfd46
ffff8000008034ce:	ff ff ff 
ffff8000008034d1:	48 01 d8             	add    rax,rbx
ffff8000008034d4:	ff d0                	call   rax
ffff8000008034d6:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:489
        malloc_hdr* top=mhdr_split(nmh,addr+size,kmhdrs,MAX_KMHDRS);
ffff8000008034da:	48 b8 e0 fd ff ff ff 	movabs rax,0xfffffffffffffde0
ffff8000008034e1:	ff ff ff 
ffff8000008034e4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008034e8:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008034eb:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
ffff8000008034ef:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008034f3:	48 8d 34 01          	lea    rsi,[rcx+rax*1]
ffff8000008034f7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008034fb:	b9 aa 00 00 00       	mov    ecx,0xaa
ffff800000803500:	48 89 c7             	mov    rdi,rax
ffff800000803503:	49 89 df             	mov    r15,rbx
ffff800000803506:	48 b8 46 fd ed ff ff 	movabs rax,0xffffffffffedfd46
ffff80000080350d:	ff ff ff 
ffff800000803510:	48 01 d8             	add    rax,rbx
ffff800000803513:	ff d0                	call   rax
ffff800000803515:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:491

        nmh->type=MEM_TYPE_USED;
ffff800000803519:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080351d:	c6 40 10 06          	mov    BYTE PTR [rax+0x10],0x6
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:492
        nmh->flag|=MEM_FLAG_W|MEM_FLAG_X|MEM_FLAG_R;
ffff800000803521:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803525:	0f b6 40 11          	movzx  eax,BYTE PTR [rax+0x11]
ffff800000803529:	83 c8 07             	or     eax,0x7
ffff80000080352c:	89 c2                	mov    edx,eax
ffff80000080352e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803532:	88 50 11             	mov    BYTE PTR [rax+0x11],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:493
        return nmh->base;
ffff800000803535:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803539:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080353c:	eb 20                	jmp    ffff80000080355e <kmalloc+0x198>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:481
        if(!addr&&(mh->type!=MEM_TYPE_AVAILABLE||mh->len<size))continue;
ffff80000080353e:	90                   	nop
ffff80000080353f:	eb 01                	jmp    ffff800000803542 <kmalloc+0x17c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:482
        if(mh->type!=MEM_TYPE_AVAILABLE||mh->len-(addr-mh->base)<size||addr<mh->base||addr>mh->base+mh->len)continue;
ffff800000803541:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:479 (discriminator 2)
    for (malloc_hdr *mh = kmalloc_mhdr; mh; mh=mh->next)
ffff800000803542:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803546:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080354a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:479 (discriminator 1)
ffff80000080354e:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff800000803553:	0f 85 b2 fe ff ff    	jne    ffff80000080340b <kmalloc+0x45>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:496
        
    }
    return NULL;
ffff800000803559:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:497
}
ffff80000080355e:	48 83 c4 30          	add    rsp,0x30
ffff800000803562:	5b                   	pop    rbx
ffff800000803563:	41 5f                	pop    r15
ffff800000803565:	5d                   	pop    rbp
ffff800000803566:	c3                   	ret    

ffff800000803567 <kmfree>:
kmfree():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:498
int kmfree(off_t addr){
ffff800000803567:	f3 0f 1e fa          	endbr64 
ffff80000080356b:	55                   	push   rbp
ffff80000080356c:	48 89 e5             	mov    rbp,rsp
ffff80000080356f:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080356f <kmfree+0x8>
ffff800000803576:	49 bb c1 ff 11 00 00 	movabs r11,0x11ffc1
ffff80000080357d:	00 00 00 
ffff800000803580:	4c 01 d8             	add    rax,r11
ffff800000803583:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:499
    for (malloc_hdr* mh = kmalloc_mhdr; mh; mh=mh->next)
ffff800000803587:	48 ba e8 fe ff ff ff 	movabs rdx,0xfffffffffffffee8
ffff80000080358e:	ff ff ff 
ffff800000803591:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000803595:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803598:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffff80000080359c:	e9 c8 00 00 00       	jmp    ffff800000803669 <kmfree+0x102>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:501
    {
        if(mh->base!=addr)continue;
ffff8000008035a1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008035a5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008035a8:	48 39 45 e8          	cmp    QWORD PTR [rbp-0x18],rax
ffff8000008035ac:	0f 85 aa 00 00 00    	jne    ffff80000080365c <kmfree+0xf5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:502
        mh->type=MEM_TYPE_AVAILABLE;
ffff8000008035b2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008035b6:	c6 40 10 01          	mov    BYTE PTR [rax+0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:505
        //合并空闲项
        malloc_hdr* mp;
        for(mp=mh;mp->prev&&mh->type==MEM_TYPE_AVAILABLE;mp=mp->prev);
ffff8000008035ba:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008035be:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffff8000008035c2:	eb 0c                	jmp    ffff8000008035d0 <kmfree+0x69>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:505 (discriminator 4)
ffff8000008035c4:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008035c8:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff8000008035cc:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:505 (discriminator 1)
ffff8000008035d0:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008035d4:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff8000008035d8:	48 85 c0             	test   rax,rax
ffff8000008035db:	74 5d                	je     ffff80000080363a <kmfree+0xd3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:505 (discriminator 3)
ffff8000008035dd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008035e1:	0f b6 40 10          	movzx  eax,BYTE PTR [rax+0x10]
ffff8000008035e5:	3c 01                	cmp    al,0x1
ffff8000008035e7:	74 db                	je     ffff8000008035c4 <kmfree+0x5d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:506
        while (mp->next&&mp->next==MEM_TYPE_AVAILABLE)
ffff8000008035e9:	eb 4f                	jmp    ffff80000080363a <kmfree+0xd3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:508
        {
            mp->len+=mp->next->len;
ffff8000008035eb:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008035ef:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff8000008035f3:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008035f7:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff8000008035fb:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff8000008035ff:	48 01 c2             	add    rdx,rax
ffff800000803602:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000803606:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:510
            //drop the next
            mp->next->type=-1;
ffff80000080360a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080360e:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000803612:	c6 40 10 ff          	mov    BYTE PTR [rax+0x10],0xff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:511
            mp->next->prev=mp;
ffff800000803616:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080361a:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080361e:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff800000803622:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:512
            mp->next=mp->next->next;
ffff800000803626:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080362a:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080362e:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
ffff800000803632:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000803636:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:506
        while (mp->next&&mp->next==MEM_TYPE_AVAILABLE)
ffff80000080363a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080363e:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000803642:	48 85 c0             	test   rax,rax
ffff800000803645:	74 0e                	je     ffff800000803655 <kmfree+0xee>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:506 (discriminator 1)
ffff800000803647:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080364b:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080364f:	48 83 f8 01          	cmp    rax,0x1
ffff800000803653:	74 96                	je     ffff8000008035eb <kmfree+0x84>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:514
        }
        return 1;
ffff800000803655:	b8 01 00 00 00       	mov    eax,0x1
ffff80000080365a:	eb 1d                	jmp    ffff800000803679 <kmfree+0x112>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:501
        if(mh->base!=addr)continue;
ffff80000080365c:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:499
    for (malloc_hdr* mh = kmalloc_mhdr; mh; mh=mh->next)
ffff80000080365d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803661:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000803665:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:499 (discriminator 1)
ffff800000803669:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffff80000080366e:	0f 85 2d ff ff ff    	jne    ffff8000008035a1 <kmfree+0x3a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:516
    }
    return 0;
ffff800000803674:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:518
    
}
ffff800000803679:	5d                   	pop    rbp
ffff80000080367a:	c3                   	ret    

ffff80000080367b <pmalloc>:
pmalloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:519
void * pmalloc(size_t size){
ffff80000080367b:	f3 0f 1e fa          	endbr64 
ffff80000080367f:	55                   	push   rbp
ffff800000803680:	48 89 e5             	mov    rbp,rsp
ffff800000803683:	41 57                	push   r15
ffff800000803685:	48 83 ec 28          	sub    rsp,0x28
ffff800000803689:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000803689 <pmalloc+0xe>
ffff800000803690:	49 bb a7 fe 11 00 00 	movabs r11,0x11fea7
ffff800000803697:	00 00 00 
ffff80000080369a:	4c 01 d8             	add    rax,r11
ffff80000080369d:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:520
    for (malloc_hdr *mh = pmalloc_mhdr; mh; mh=mh->next)
ffff8000008036a1:	48 ba c0 ff ff ff ff 	movabs rdx,0xffffffffffffffc0
ffff8000008036a8:	ff ff ff 
ffff8000008036ab:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008036af:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008036b2:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff8000008036b6:	e9 8c 00 00 00       	jmp    ffff800000803747 <pmalloc+0xcc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:522
    {
        if(mh->type!=MEM_TYPE_AVAILABLE||mh->len<size)continue;
ffff8000008036bb:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff8000008036bf:	0f b6 52 10          	movzx  edx,BYTE PTR [rdx+0x10]
ffff8000008036c3:	80 fa 01             	cmp    dl,0x1
ffff8000008036c6:	75 72                	jne    ffff80000080373a <pmalloc+0xbf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:522 (discriminator 2)
ffff8000008036c8:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff8000008036cc:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff8000008036d0:	48 39 55 d8          	cmp    QWORD PTR [rbp-0x28],rdx
ffff8000008036d4:	77 64                	ja     ffff80000080373a <pmalloc+0xbf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:525
        //以下为符合要求
        //分割空闲内存
        malloc_hdr* nmh=mhdr_split(mh,mh->base+size,pmhdrs,MAX_PMHDRS);
ffff8000008036d6:	48 ba 10 ff ff ff ff 	movabs rdx,0xffffffffffffff10
ffff8000008036dd:	ff ff ff 
ffff8000008036e0:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008036e4:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008036e7:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff8000008036eb:	48 8b 31             	mov    rsi,QWORD PTR [rcx]
ffff8000008036ee:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff8000008036f2:	48 01 ce             	add    rsi,rcx
ffff8000008036f5:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
ffff8000008036f9:	b9 55 00 00 00       	mov    ecx,0x55
ffff8000008036fe:	49 89 c7             	mov    r15,rax
ffff800000803701:	49 b8 46 fd ed ff ff 	movabs r8,0xffffffffffedfd46
ffff800000803708:	ff ff ff 
ffff80000080370b:	49 01 c0             	add    r8,rax
ffff80000080370e:	41 ff d0             	call   r8
ffff800000803711:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:528


        mh->type=MEM_TYPE_USED;
ffff800000803715:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803719:	c6 40 10 06          	mov    BYTE PTR [rax+0x10],0x6
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:529
        mh->flag|=MEM_FLAG_W|MEM_FLAG_X|MEM_FLAG_R;
ffff80000080371d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803721:	0f b6 40 11          	movzx  eax,BYTE PTR [rax+0x11]
ffff800000803725:	83 c8 07             	or     eax,0x7
ffff800000803728:	89 c2                	mov    edx,eax
ffff80000080372a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080372e:	88 50 11             	mov    BYTE PTR [rax+0x11],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:530
        return mh->base;
ffff800000803731:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803735:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803738:	eb 1f                	jmp    ffff800000803759 <pmalloc+0xde>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:522
        if(mh->type!=MEM_TYPE_AVAILABLE||mh->len<size)continue;
ffff80000080373a:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:520
    for (malloc_hdr *mh = pmalloc_mhdr; mh; mh=mh->next)
ffff80000080373b:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080373f:	48 8b 52 18          	mov    rdx,QWORD PTR [rdx+0x18]
ffff800000803743:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:520 (discriminator 1)
ffff800000803747:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080374c:	0f 85 69 ff ff ff    	jne    ffff8000008036bb <pmalloc+0x40>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:533
        
    }
    return -1;
ffff800000803752:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:538
    
    /* void *ret=(void*)(get_phyaddr(req_a_page()));
    // comprintf("pmalloc(PAGE_4K_SIZE):%l\n",ret);
    return ret; */
}
ffff800000803759:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080375d:	c9                   	leave  
ffff80000080375e:	c3                   	ret    

ffff80000080375f <pmfree>:
pmfree():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:539
int pmfree(void *addr,size_t len){
ffff80000080375f:	f3 0f 1e fa          	endbr64 
ffff800000803763:	55                   	push   rbp
ffff800000803764:	48 89 e5             	mov    rbp,rsp
ffff800000803767:	41 57                	push   r15
ffff800000803769:	48 83 ec 38          	sub    rsp,0x38
ffff80000080376d:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080376d <pmfree+0xe>
ffff800000803774:	49 bb c3 fd 11 00 00 	movabs r11,0x11fdc3
ffff80000080377b:	00 00 00 
ffff80000080377e:	4c 01 d8             	add    rax,r11
ffff800000803781:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000803785:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:540
    malloc_hdr* prev=pmalloc_mhdr;
ffff800000803789:	48 ba c0 ff ff ff ff 	movabs rdx,0xffffffffffffffc0
ffff800000803790:	ff ff ff 
ffff800000803793:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000803797:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080379a:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:541
    for (malloc_hdr* mh = pmalloc_mhdr; mh; mh=mh->next)
ffff80000080379e:	48 ba c0 ff ff ff ff 	movabs rdx,0xffffffffffffffc0
ffff8000008037a5:	ff ff ff 
ffff8000008037a8:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008037ac:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008037af:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
ffff8000008037b3:	e9 12 01 00 00       	jmp    ffff8000008038ca <pmfree+0x16b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:543
    {
        if(mh->base<addr){
ffff8000008037b8:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008037bc:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008037bf:	48 39 55 c8          	cmp    QWORD PTR [rbp-0x38],rdx
ffff8000008037c3:	76 0d                	jbe    ffff8000008037d2 <pmfree+0x73>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:544 (discriminator 1)
            prev=mh;
ffff8000008037c5:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008037c9:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:545 (discriminator 1)
            continue;
ffff8000008037cd:	e9 ec 00 00 00       	jmp    ffff8000008038be <pmfree+0x15f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:547
        }
        if(prev->base<addr){
ffff8000008037d2:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff8000008037d6:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008037d9:	48 39 55 c8          	cmp    QWORD PTR [rbp-0x38],rdx
ffff8000008037dd:	76 35                	jbe    ffff800000803814 <pmfree+0xb5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:549
            //分割
            prev=mhdr_split(prev, addr, pmalloc_mhdr, MAX_PMHDRS);
ffff8000008037df:	48 ba c0 ff ff ff ff 	movabs rdx,0xffffffffffffffc0
ffff8000008037e6:	ff ff ff 
ffff8000008037e9:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008037ed:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008037f0:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
ffff8000008037f4:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
ffff8000008037f8:	b9 55 00 00 00       	mov    ecx,0x55
ffff8000008037fd:	49 89 c7             	mov    r15,rax
ffff800000803800:	49 b8 46 fd ed ff ff 	movabs r8,0xffffffffffedfd46
ffff800000803807:	ff ff ff 
ffff80000080380a:	49 01 c0             	add    r8,rax
ffff80000080380d:	41 ff d0             	call   r8
ffff800000803810:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:551
        }
        prev->type=MEM_TYPE_AVAILABLE;
ffff800000803814:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803818:	c6 40 10 01          	mov    BYTE PTR [rax+0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:554
        //合并空闲项
        malloc_hdr* mp;
        for(mp=prev;mp->prev&&prev->type==MEM_TYPE_AVAILABLE;mp=mp->prev);
ffff80000080381c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803820:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffff800000803824:	eb 0c                	jmp    ffff800000803832 <pmfree+0xd3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:554 (discriminator 4)
ffff800000803826:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080382a:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000080382e:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:554 (discriminator 1)
ffff800000803832:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000803836:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000080383a:	48 85 c0             	test   rax,rax
ffff80000080383d:	74 5d                	je     ffff80000080389c <pmfree+0x13d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:554 (discriminator 3)
ffff80000080383f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803843:	0f b6 40 10          	movzx  eax,BYTE PTR [rax+0x10]
ffff800000803847:	3c 01                	cmp    al,0x1
ffff800000803849:	74 db                	je     ffff800000803826 <pmfree+0xc7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:555
        while (mp->next&&mp->next==MEM_TYPE_AVAILABLE)
ffff80000080384b:	eb 4f                	jmp    ffff80000080389c <pmfree+0x13d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:557
        {
            mp->len+=mp->next->len;
ffff80000080384d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000803851:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff800000803855:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000803859:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080385d:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000803861:	48 01 c2             	add    rdx,rax
ffff800000803864:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000803868:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:559
            //drop the next
            mp->next->type=-1;
ffff80000080386c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000803870:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000803874:	c6 40 10 ff          	mov    BYTE PTR [rax+0x10],0xff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:560
            mp->next->prev=mp;
ffff800000803878:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080387c:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000803880:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000803884:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:561
            mp->next=mp->next->next;
ffff800000803888:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080388c:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000803890:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
ffff800000803894:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000803898:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:555
        while (mp->next&&mp->next==MEM_TYPE_AVAILABLE)
ffff80000080389c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008038a0:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff8000008038a4:	48 85 c0             	test   rax,rax
ffff8000008038a7:	74 0e                	je     ffff8000008038b7 <pmfree+0x158>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:555 (discriminator 1)
ffff8000008038a9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008038ad:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff8000008038b1:	48 83 f8 01          	cmp    rax,0x1
ffff8000008038b5:	74 96                	je     ffff80000080384d <pmfree+0xee>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:563
        }
        return 1;
ffff8000008038b7:	b8 01 00 00 00       	mov    eax,0x1
ffff8000008038bc:	eb 1c                	jmp    ffff8000008038da <pmfree+0x17b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:541 (discriminator 2)
    for (malloc_hdr* mh = pmalloc_mhdr; mh; mh=mh->next)
ffff8000008038be:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008038c2:	48 8b 52 18          	mov    rdx,QWORD PTR [rdx+0x18]
ffff8000008038c6:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:541 (discriminator 1)
ffff8000008038ca:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
ffff8000008038cf:	0f 85 e3 fe ff ff    	jne    ffff8000008037b8 <pmfree+0x59>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:565
    }
    return 0;
ffff8000008038d5:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:567
    
}
ffff8000008038da:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff8000008038de:	c9                   	leave  
ffff8000008038df:	c3                   	ret    

ffff8000008038e0 <free_page>:
free_page():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:568
int free_page(char *paddr){
ffff8000008038e0:	f3 0f 1e fa          	endbr64 
ffff8000008038e4:	55                   	push   rbp
ffff8000008038e5:	48 89 e5             	mov    rbp,rsp
ffff8000008038e8:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff8000008038e8 <free_page+0x8>
ffff8000008038ef:	49 bb 48 fc 11 00 00 	movabs r11,0x11fc48
ffff8000008038f6:	00 00 00 
ffff8000008038f9:	4c 01 da             	add    rdx,r11
ffff8000008038fc:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:569
    int num=(int)paddr/4096;
ffff800000803900:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803904:	8d 88 ff 0f 00 00    	lea    ecx,[rax+0xfff]
ffff80000080390a:	85 c0                	test   eax,eax
ffff80000080390c:	0f 48 c1             	cmovs  eax,ecx
ffff80000080390f:	c1 f8 0c             	sar    eax,0xc
ffff800000803912:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:570
    int n=num/32;
ffff800000803915:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000803918:	8d 48 1f             	lea    ecx,[rax+0x1f]
ffff80000080391b:	85 c0                	test   eax,eax
ffff80000080391d:	0f 48 c1             	cmovs  eax,ecx
ffff800000803920:	c1 f8 05             	sar    eax,0x5
ffff800000803923:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:571
    int r=num%32;
ffff800000803926:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000803929:	89 c1                	mov    ecx,eax
ffff80000080392b:	c1 f9 1f             	sar    ecx,0x1f
ffff80000080392e:	c1 e9 1b             	shr    ecx,0x1b
ffff800000803931:	01 c8                	add    eax,ecx
ffff800000803933:	83 e0 1f             	and    eax,0x1f
ffff800000803936:	29 c8                	sub    eax,ecx
ffff800000803938:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:572
    page_map[n]=page_map[n]&~(unsigned int)(1<<r);
ffff80000080393b:	48 b8 50 fe ff ff ff 	movabs rax,0xfffffffffffffe50
ffff800000803942:	ff ff ff 
ffff800000803945:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000803949:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080394c:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff80000080394f:	48 98                	cdqe   
ffff800000803951:	48 c1 e0 02          	shl    rax,0x2
ffff800000803955:	48 01 c8             	add    rax,rcx
ffff800000803958:	8b 30                	mov    esi,DWORD PTR [rax]
ffff80000080395a:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffff80000080395d:	bf 01 00 00 00       	mov    edi,0x1
ffff800000803962:	89 c1                	mov    ecx,eax
ffff800000803964:	d3 e7                	shl    edi,cl
ffff800000803966:	89 f8                	mov    eax,edi
ffff800000803968:	f7 d0                	not    eax
ffff80000080396a:	89 c1                	mov    ecx,eax
ffff80000080396c:	48 b8 50 fe ff ff ff 	movabs rax,0xfffffffffffffe50
ffff800000803973:	ff ff ff 
ffff800000803976:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff80000080397a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080397d:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff800000803980:	48 98                	cdqe   
ffff800000803982:	48 c1 e0 02          	shl    rax,0x2
ffff800000803986:	48 01 d0             	add    rax,rdx
ffff800000803989:	21 ce                	and    esi,ecx
ffff80000080398b:	89 f2                	mov    edx,esi
ffff80000080398d:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:573
}
ffff80000080398f:	90                   	nop
ffff800000803990:	5d                   	pop    rbp
ffff800000803991:	c3                   	ret    

ffff800000803992 <free_pages_at>:
free_pages_at():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:575

int free_pages_at(int base,int pgn){
ffff800000803992:	f3 0f 1e fa          	endbr64 
ffff800000803996:	55                   	push   rbp
ffff800000803997:	48 89 e5             	mov    rbp,rsp
ffff80000080399a:	41 57                	push   r15
ffff80000080399c:	53                   	push   rbx
ffff80000080399d:	48 83 ec 20          	sub    rsp,0x20
ffff8000008039a1:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008039a1 <free_pages_at+0xf>
ffff8000008039a8:	49 bb 8f fb 11 00 00 	movabs r11,0x11fb8f
ffff8000008039af:	00 00 00 
ffff8000008039b2:	4c 01 db             	add    rbx,r11
ffff8000008039b5:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff8000008039b8:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:576
    for(int i=0;i<pgn;i++){
ffff8000008039bb:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff8000008039c2:	eb 28                	jmp    ffff8000008039ec <free_pages_at+0x5a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:577 (discriminator 3)
        free_page(base+i*PAGE_4K_SIZE);
ffff8000008039c4:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008039c7:	c1 e0 0c             	shl    eax,0xc
ffff8000008039ca:	89 c2                	mov    edx,eax
ffff8000008039cc:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008039cf:	01 d0                	add    eax,edx
ffff8000008039d1:	48 98                	cdqe   
ffff8000008039d3:	48 89 c7             	mov    rdi,rax
ffff8000008039d6:	49 89 df             	mov    r15,rbx
ffff8000008039d9:	48 b8 b0 03 ee ff ff 	movabs rax,0xffffffffffee03b0
ffff8000008039e0:	ff ff ff 
ffff8000008039e3:	48 01 d8             	add    rax,rbx
ffff8000008039e6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:576 (discriminator 3)
    for(int i=0;i<pgn;i++){
ffff8000008039e8:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:576 (discriminator 1)
ffff8000008039ec:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008039ef:	3b 45 d8             	cmp    eax,DWORD PTR [rbp-0x28]
ffff8000008039f2:	7c d0                	jl     ffff8000008039c4 <free_pages_at+0x32>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:579
    }
}
ffff8000008039f4:	90                   	nop
ffff8000008039f5:	48 83 c4 20          	add    rsp,0x20
ffff8000008039f9:	5b                   	pop    rbx
ffff8000008039fa:	41 5f                	pop    r15
ffff8000008039fc:	5d                   	pop    rbp
ffff8000008039fd:	c3                   	ret    

ffff8000008039fe <check_page>:
check_page():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:580
int check_page(int num){
ffff8000008039fe:	f3 0f 1e fa          	endbr64 
ffff800000803a02:	55                   	push   rbp
ffff800000803a03:	48 89 e5             	mov    rbp,rsp
ffff800000803a06:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000803a06 <check_page+0x8>
ffff800000803a0d:	49 bb 2a fb 11 00 00 	movabs r11,0x11fb2a
ffff800000803a14:	00 00 00 
ffff800000803a17:	4c 01 da             	add    rdx,r11
ffff800000803a1a:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:581
    int n=num/32;
ffff800000803a1d:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803a20:	8d 48 1f             	lea    ecx,[rax+0x1f]
ffff800000803a23:	85 c0                	test   eax,eax
ffff800000803a25:	0f 48 c1             	cmovs  eax,ecx
ffff800000803a28:	c1 f8 05             	sar    eax,0x5
ffff800000803a2b:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:582
    int r=num%32;
ffff800000803a2e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803a31:	89 c1                	mov    ecx,eax
ffff800000803a33:	c1 f9 1f             	sar    ecx,0x1f
ffff800000803a36:	c1 e9 1b             	shr    ecx,0x1b
ffff800000803a39:	01 c8                	add    eax,ecx
ffff800000803a3b:	83 e0 1f             	and    eax,0x1f
ffff800000803a3e:	29 c8                	sub    eax,ecx
ffff800000803a40:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:583
    int bit=page_map[n]&(1<<r);
ffff800000803a43:	48 b8 50 fe ff ff ff 	movabs rax,0xfffffffffffffe50
ffff800000803a4a:	ff ff ff 
ffff800000803a4d:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000803a51:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803a54:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000803a57:	48 98                	cdqe   
ffff800000803a59:	48 c1 e0 02          	shl    rax,0x2
ffff800000803a5d:	48 01 d0             	add    rax,rdx
ffff800000803a60:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000803a62:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff800000803a65:	be 01 00 00 00       	mov    esi,0x1
ffff800000803a6a:	89 c1                	mov    ecx,eax
ffff800000803a6c:	d3 e6                	shl    esi,cl
ffff800000803a6e:	89 f0                	mov    eax,esi
ffff800000803a70:	21 d0                	and    eax,edx
ffff800000803a72:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:584
    return bit;
ffff800000803a75:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:585
}
ffff800000803a78:	5d                   	pop    rbp
ffff800000803a79:	c3                   	ret    

ffff800000803a7a <get_phyaddr>:
get_phyaddr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:589
/*
 * 获得这个页对应的物理内存地址
 * */
int get_phyaddr(int num){
ffff800000803a7a:	f3 0f 1e fa          	endbr64 
ffff800000803a7e:	55                   	push   rbp
ffff800000803a7f:	48 89 e5             	mov    rbp,rsp
ffff800000803a82:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000803a82 <get_phyaddr+0x8>
ffff800000803a89:	49 bb ae fa 11 00 00 	movabs r11,0x11faae
ffff800000803a90:	00 00 00 
ffff800000803a93:	4c 01 d8             	add    rax,r11
ffff800000803a96:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:590
    if(num==-1)return -1;
ffff800000803a99:	83 7d fc ff          	cmp    DWORD PTR [rbp-0x4],0xffffffff
ffff800000803a9d:	75 07                	jne    ffff800000803aa6 <get_phyaddr+0x2c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:590 (discriminator 1)
ffff800000803a9f:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000803aa4:	eb 06                	jmp    ffff800000803aac <get_phyaddr+0x32>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:591
    return num*0x1000;
ffff800000803aa6:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000803aa9:	c1 e0 0c             	shl    eax,0xc
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:592
}
ffff800000803aac:	5d                   	pop    rbp
ffff800000803aad:	c3                   	ret    

ffff800000803aae <set_page_item>:
set_page_item():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:595

void set_page_item(page_item *item_addr,int phy_addr,int attr)
{
ffff800000803aae:	f3 0f 1e fa          	endbr64 
ffff800000803ab2:	55                   	push   rbp
ffff800000803ab3:	48 89 e5             	mov    rbp,rsp
ffff800000803ab6:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000803ab6 <set_page_item+0x8>
ffff800000803abd:	49 bb 7a fa 11 00 00 	movabs r11,0x11fa7a
ffff800000803ac4:	00 00 00 
ffff800000803ac7:	4c 01 d8             	add    rax,r11
ffff800000803aca:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000803ace:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
ffff800000803ad1:	89 55 f0             	mov    DWORD PTR [rbp-0x10],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:596
    *item_addr=0;
ffff800000803ad4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803ad8:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:597
    *item_addr|=phy_addr&0xfffff000;
ffff800000803adf:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803ae3:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803ae6:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffff800000803ae9:	89 c0                	mov    eax,eax
ffff800000803aeb:	25 00 f0 ff ff       	and    eax,0xfffff000
ffff800000803af0:	48 09 c2             	or     rdx,rax
ffff800000803af3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803af7:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:598
    *item_addr|=attr;
ffff800000803afa:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803afe:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803b01:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
ffff800000803b04:	48 98                	cdqe   
ffff800000803b06:	48 09 c2             	or     rdx,rax
ffff800000803b09:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803b0d:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:599
}
ffff800000803b10:	90                   	nop
ffff800000803b11:	5d                   	pop    rbp
ffff800000803b12:	c3                   	ret    

ffff800000803b13 <set_1gb_pdpt>:
set_1gb_pdpt():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:601
void set_1gb_pdpt(page_item* ppdpt,int pa,unsigned int extra_attr)
{
ffff800000803b13:	f3 0f 1e fa          	endbr64 
ffff800000803b17:	55                   	push   rbp
ffff800000803b18:	48 89 e5             	mov    rbp,rsp
ffff800000803b1b:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000803b1b <set_1gb_pdpt+0x8>
ffff800000803b22:	49 bb 15 fa 11 00 00 	movabs r11,0x11fa15
ffff800000803b29:	00 00 00 
ffff800000803b2c:	4c 01 d8             	add    rax,r11
ffff800000803b2f:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000803b33:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
ffff800000803b36:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:602
    *ppdpt=0;
ffff800000803b39:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803b3d:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:603
    *ppdpt|=PAGE_PRESENT|PDPTE_1GB|extra_attr;
ffff800000803b44:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803b48:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803b4b:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000803b4e:	0c 81                	or     al,0x81
ffff800000803b50:	89 c0                	mov    eax,eax
ffff800000803b52:	48 09 c2             	or     rdx,rax
ffff800000803b55:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803b59:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:604
    unsigned int hipa=pa&0xffffc0000000ul;
ffff800000803b5c:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000803b5f:	25 00 00 00 c0       	and    eax,0xc0000000
ffff800000803b64:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:605
    *ppdpt|=hipa;
ffff800000803b67:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803b6b:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803b6e:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000803b71:	48 09 c2             	or     rdx,rax
ffff800000803b74:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803b78:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:606
}
ffff800000803b7b:	90                   	nop
ffff800000803b7c:	5d                   	pop    rbp
ffff800000803b7d:	c3                   	ret    

ffff800000803b7e <set_2mb_pde>:
set_2mb_pde():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:608
void set_2mb_pde(page_item *pde, int pa, int extra_attr)
{
ffff800000803b7e:	f3 0f 1e fa          	endbr64 
ffff800000803b82:	55                   	push   rbp
ffff800000803b83:	48 89 e5             	mov    rbp,rsp
ffff800000803b86:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000803b86 <set_2mb_pde+0x8>
ffff800000803b8d:	49 bb aa f9 11 00 00 	movabs r11,0x11f9aa
ffff800000803b94:	00 00 00 
ffff800000803b97:	4c 01 d8             	add    rax,r11
ffff800000803b9a:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000803b9e:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
ffff800000803ba1:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:609
    *pde=0;
ffff800000803ba4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803ba8:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:610
    *pde|=PAGE_PRESENT|PAGE_4MB_PAGE|PDE_4MB_PAT|extra_attr;
ffff800000803baf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803bb3:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803bb6:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000803bb9:	0d 81 10 00 00       	or     eax,0x1081
ffff800000803bbe:	48 98                	cdqe   
ffff800000803bc0:	48 09 c2             	or     rdx,rax
ffff800000803bc3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803bc7:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:611
    unsigned int hipa=pa&0xffc00000;
ffff800000803bca:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000803bcd:	25 00 00 c0 ff       	and    eax,0xffc00000
ffff800000803bd2:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:612
    *pde|=hipa;
ffff800000803bd5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803bd9:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803bdc:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000803bdf:	48 09 c2             	or     rdx,rax
ffff800000803be2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803be6:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:613
}
ffff800000803be9:	90                   	nop
ffff800000803bea:	5d                   	pop    rbp
ffff800000803beb:	c3                   	ret    

ffff800000803bec <req_page_at>:
req_page_at():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:634
        page_map[i]&=(u32)(1<<j);
    return ret;
} */
//在bitmap申请指定的页面,base默认0x1000对齐
addr_t req_page_at(addr_t base,int pgn)
{
ffff800000803bec:	f3 0f 1e fa          	endbr64 
ffff800000803bf0:	55                   	push   rbp
ffff800000803bf1:	48 89 e5             	mov    rbp,rsp
ffff800000803bf4:	41 57                	push   r15
ffff800000803bf6:	53                   	push   rbx
ffff800000803bf7:	48 83 ec 20          	sub    rsp,0x20
ffff800000803bfb:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000803bfb <req_page_at+0xf>
ffff800000803c02:	49 bb 35 f9 11 00 00 	movabs r11,0x11f935
ffff800000803c09:	00 00 00 
ffff800000803c0c:	4c 01 db             	add    rbx,r11
ffff800000803c0f:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000803c13:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:635
    if(base==0)//不指定地址
ffff800000803c16:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff800000803c1b:	75 32                	jne    ffff800000803c4f <req_page_at+0x63>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:637
    {
        return get_phyaddr(req_a_page());
ffff800000803c1d:	49 89 df             	mov    r15,rbx
ffff800000803c20:	b8 00 00 00 00       	mov    eax,0x0
ffff800000803c25:	48 ba 29 fc ed ff ff 	movabs rdx,0xffffffffffedfc29
ffff800000803c2c:	ff ff ff 
ffff800000803c2f:	48 01 da             	add    rdx,rbx
ffff800000803c32:	ff d2                	call   rdx
ffff800000803c34:	89 c7                	mov    edi,eax
ffff800000803c36:	49 89 df             	mov    r15,rbx
ffff800000803c39:	48 b8 4a 05 ee ff ff 	movabs rax,0xffffffffffee054a
ffff800000803c40:	ff ff ff 
ffff800000803c43:	48 01 d8             	add    rax,rbx
ffff800000803c46:	ff d0                	call   rax
ffff800000803c48:	48 98                	cdqe   
ffff800000803c4a:	e9 c6 00 00 00       	jmp    ffff800000803d15 <req_page_at+0x129>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:639
    }
    if(!is_pgs_ava(base,pgn))return -1;//先检查
ffff800000803c4f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000803c53:	89 c2                	mov    edx,eax
ffff800000803c55:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000803c58:	89 c6                	mov    esi,eax
ffff800000803c5a:	89 d7                	mov    edi,edx
ffff800000803c5c:	49 89 df             	mov    r15,rbx
ffff800000803c5f:	48 b8 bf 08 ee ff ff 	movabs rax,0xffffffffffee08bf
ffff800000803c66:	ff ff ff 
ffff800000803c69:	48 01 d8             	add    rax,rbx
ffff800000803c6c:	ff d0                	call   rax
ffff800000803c6e:	85 c0                	test   eax,eax
ffff800000803c70:	75 0c                	jne    ffff800000803c7e <req_page_at+0x92>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:639 (discriminator 1)
ffff800000803c72:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff800000803c79:	e9 97 00 00 00       	jmp    ffff800000803d15 <req_page_at+0x129>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:640
    int pgni=base/4096;
ffff800000803c7e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000803c82:	48 c1 e8 0c          	shr    rax,0xc
ffff800000803c86:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:641
    int pgi=pgni/32;
ffff800000803c89:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000803c8c:	8d 50 1f             	lea    edx,[rax+0x1f]
ffff800000803c8f:	85 c0                	test   eax,eax
ffff800000803c91:	0f 48 c2             	cmovs  eax,edx
ffff800000803c94:	c1 f8 05             	sar    eax,0x5
ffff800000803c97:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:642
    int pgj=pgni%32;
ffff800000803c9a:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000803c9d:	99                   	cdq    
ffff800000803c9e:	c1 ea 1b             	shr    edx,0x1b
ffff800000803ca1:	01 d0                	add    eax,edx
ffff800000803ca3:	83 e0 1f             	and    eax,0x1f
ffff800000803ca6:	29 d0                	sub    eax,edx
ffff800000803ca8:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:643
    for(int i=0;i<pgn;i++)
ffff800000803cab:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000803cb2:	eb 54                	jmp    ffff800000803d08 <req_page_at+0x11c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:645 (discriminator 3)
    {
        page_map[i]|=(1<<pgj);
ffff800000803cb4:	48 b8 50 fe ff ff ff 	movabs rax,0xfffffffffffffe50
ffff800000803cbb:	ff ff ff 
ffff800000803cbe:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803cc2:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803cc5:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803cc8:	48 98                	cdqe   
ffff800000803cca:	48 c1 e0 02          	shl    rax,0x2
ffff800000803cce:	48 01 d0             	add    rax,rdx
ffff800000803cd1:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000803cd3:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000803cd6:	be 01 00 00 00       	mov    esi,0x1
ffff800000803cdb:	89 c1                	mov    ecx,eax
ffff800000803cdd:	d3 e6                	shl    esi,cl
ffff800000803cdf:	89 f0                	mov    eax,esi
ffff800000803ce1:	89 c6                	mov    esi,eax
ffff800000803ce3:	48 b8 50 fe ff ff ff 	movabs rax,0xfffffffffffffe50
ffff800000803cea:	ff ff ff 
ffff800000803ced:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803cf1:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000803cf4:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803cf7:	48 98                	cdqe   
ffff800000803cf9:	48 c1 e0 02          	shl    rax,0x2
ffff800000803cfd:	48 01 c8             	add    rax,rcx
ffff800000803d00:	09 f2                	or     edx,esi
ffff800000803d02:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:643 (discriminator 3)
    for(int i=0;i<pgn;i++)
ffff800000803d04:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:643 (discriminator 1)
ffff800000803d08:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803d0b:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
ffff800000803d0e:	7c a4                	jl     ffff800000803cb4 <req_page_at+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:647
    }
    return 0;
ffff800000803d10:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:649

}
ffff800000803d15:	48 83 c4 20          	add    rsp,0x20
ffff800000803d19:	5b                   	pop    rbx
ffff800000803d1a:	41 5f                	pop    r15
ffff800000803d1c:	5d                   	pop    rbp
ffff800000803d1d:	c3                   	ret    

ffff800000803d1e <chk_vm>:
chk_vm():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:651
int chk_vm(int base, int pgn)
{
ffff800000803d1e:	f3 0f 1e fa          	endbr64 
ffff800000803d22:	55                   	push   rbp
ffff800000803d23:	48 89 e5             	mov    rbp,rsp
ffff800000803d26:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000803d26 <chk_vm+0x8>
ffff800000803d2d:	49 bb 0a f8 11 00 00 	movabs r11,0x11f80a
ffff800000803d34:	00 00 00 
ffff800000803d37:	4c 01 d8             	add    rax,r11
ffff800000803d3a:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff800000803d3d:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:652
    int *pdet=0;
ffff800000803d40:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff800000803d47:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:653
    __asm__ volatile("mov %%cr3,%0":"=r"(pdet));
ffff800000803d48:	0f 20 d8             	mov    rax,cr3
ffff800000803d4b:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:654
    int *pt=pdet[base/PAGE_INDEX_SIZE]&0xfffff000;
ffff800000803d4f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803d52:	8d 90 ff ff 1f 00    	lea    edx,[rax+0x1fffff]
ffff800000803d58:	85 c0                	test   eax,eax
ffff800000803d5a:	0f 48 c2             	cmovs  eax,edx
ffff800000803d5d:	c1 f8 15             	sar    eax,0x15
ffff800000803d60:	48 98                	cdqe   
ffff800000803d62:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff800000803d69:	00 
ffff800000803d6a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803d6e:	48 01 d0             	add    rax,rdx
ffff800000803d71:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000803d73:	89 c0                	mov    eax,eax
ffff800000803d75:	25 00 f0 ff ff       	and    eax,0xfffff000
ffff800000803d7a:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:655
    if(!(pdet[base/PAGE_INDEX_SIZE]&PAGE_PRESENT)||\
ffff800000803d7e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803d81:	8d 90 ff ff 1f 00    	lea    edx,[rax+0x1fffff]
ffff800000803d87:	85 c0                	test   eax,eax
ffff800000803d89:	0f 48 c2             	cmovs  eax,edx
ffff800000803d8c:	c1 f8 15             	sar    eax,0x15
ffff800000803d8f:	48 98                	cdqe   
ffff800000803d91:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff800000803d98:	00 
ffff800000803d99:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803d9d:	48 01 d0             	add    rax,rdx
ffff800000803da0:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000803da2:	83 e0 01             	and    eax,0x1
ffff800000803da5:	85 c0                	test   eax,eax
ffff800000803da7:	74 38                	je     ffff800000803de1 <chk_vm+0xc3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:656 (discriminator 1)
    !(pt[base%PAGE_INDEX_SIZE/PAGE_SIZE]&PAGE_PRESENT))
ffff800000803da9:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803dac:	99                   	cdq    
ffff800000803dad:	c1 ea 0b             	shr    edx,0xb
ffff800000803db0:	01 d0                	add    eax,edx
ffff800000803db2:	25 ff ff 1f 00       	and    eax,0x1fffff
ffff800000803db7:	29 d0                	sub    eax,edx
ffff800000803db9:	8d 90 ff 0f 00 00    	lea    edx,[rax+0xfff]
ffff800000803dbf:	85 c0                	test   eax,eax
ffff800000803dc1:	0f 48 c2             	cmovs  eax,edx
ffff800000803dc4:	c1 f8 0c             	sar    eax,0xc
ffff800000803dc7:	48 98                	cdqe   
ffff800000803dc9:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff800000803dd0:	00 
ffff800000803dd1:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000803dd5:	48 01 d0             	add    rax,rdx
ffff800000803dd8:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000803dda:	83 e0 01             	and    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:655 (discriminator 1)
    if(!(pdet[base/PAGE_INDEX_SIZE]&PAGE_PRESENT)||\
ffff800000803ddd:	85 c0                	test   eax,eax
ffff800000803ddf:	75 07                	jne    ffff800000803de8 <chk_vm+0xca>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:658
    {
        return -1;
ffff800000803de1:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000803de6:	eb 05                	jmp    ffff800000803ded <chk_vm+0xcf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:660
    }
    return 0;
ffff800000803de8:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:661
}
ffff800000803ded:	5d                   	pop    rbp
ffff800000803dee:	c3                   	ret    

ffff800000803def <is_pgs_ava>:
is_pgs_ava():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:664
//查看指定区域的页内存是否可用
int is_pgs_ava(int base,int pgn)
{
ffff800000803def:	f3 0f 1e fa          	endbr64 
ffff800000803df3:	55                   	push   rbp
ffff800000803df4:	48 89 e5             	mov    rbp,rsp
ffff800000803df7:	41 57                	push   r15
ffff800000803df9:	53                   	push   rbx
ffff800000803dfa:	48 83 ec 20          	sub    rsp,0x20
ffff800000803dfe:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000803dfe <is_pgs_ava+0xf>
ffff800000803e05:	49 bb 32 f7 11 00 00 	movabs r11,0x11f732
ffff800000803e0c:	00 00 00 
ffff800000803e0f:	4c 01 db             	add    rbx,r11
ffff800000803e12:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff800000803e15:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:665
    int pgi=base/4096;
ffff800000803e18:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000803e1b:	8d 90 ff 0f 00 00    	lea    edx,[rax+0xfff]
ffff800000803e21:	85 c0                	test   eax,eax
ffff800000803e23:	0f 48 c2             	cmovs  eax,edx
ffff800000803e26:	c1 f8 0c             	sar    eax,0xc
ffff800000803e29:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:666
    for(int i=0;i<pgn;i++)
ffff800000803e2c:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000803e33:	eb 2b                	jmp    ffff800000803e60 <is_pgs_ava+0x71>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:668
    {
        if(check_page(pgi+i)!=0)return 0;
ffff800000803e35:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000803e38:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803e3b:	01 d0                	add    eax,edx
ffff800000803e3d:	89 c7                	mov    edi,eax
ffff800000803e3f:	49 89 df             	mov    r15,rbx
ffff800000803e42:	48 b8 ce 04 ee ff ff 	movabs rax,0xffffffffffee04ce
ffff800000803e49:	ff ff ff 
ffff800000803e4c:	48 01 d8             	add    rax,rbx
ffff800000803e4f:	ff d0                	call   rax
ffff800000803e51:	85 c0                	test   eax,eax
ffff800000803e53:	74 07                	je     ffff800000803e5c <is_pgs_ava+0x6d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:668 (discriminator 1)
ffff800000803e55:	b8 00 00 00 00       	mov    eax,0x0
ffff800000803e5a:	eb 11                	jmp    ffff800000803e6d <is_pgs_ava+0x7e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:666 (discriminator 2)
    for(int i=0;i<pgn;i++)
ffff800000803e5c:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:666 (discriminator 1)
ffff800000803e60:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803e63:	3b 45 d8             	cmp    eax,DWORD PTR [rbp-0x28]
ffff800000803e66:	7c cd                	jl     ffff800000803e35 <is_pgs_ava+0x46>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:670
    }
    return 1;
ffff800000803e68:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:672

}
ffff800000803e6d:	48 83 c4 20          	add    rsp,0x20
ffff800000803e71:	5b                   	pop    rbx
ffff800000803e72:	41 5f                	pop    r15
ffff800000803e74:	5d                   	pop    rbp
ffff800000803e75:	c3                   	ret    

ffff800000803e76 <do_munmap>:
do_munmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:674
//取消映射，调用前应当将addr和len对齐4K，而且不允许释放的内存跨越多个映射块
int do_munmap(void *addr,int len){
ffff800000803e76:	f3 0f 1e fa          	endbr64 
ffff800000803e7a:	55                   	push   rbp
ffff800000803e7b:	48 89 e5             	mov    rbp,rsp
ffff800000803e7e:	41 57                	push   r15
ffff800000803e80:	53                   	push   rbx
ffff800000803e81:	48 81 ec a0 00 00 00 	sub    rsp,0xa0
ffff800000803e88:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000803e88 <do_munmap+0x12>
ffff800000803e8f:	49 bb a8 f6 11 00 00 	movabs r11,0x11f6a8
ffff800000803e96:	00 00 00 
ffff800000803e99:	4c 01 db             	add    rbx,r11
ffff800000803e9c:	48 89 bd 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdi
ffff800000803ea3:	89 b5 54 ff ff ff    	mov    DWORD PTR [rbp-0xac],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:676

    struct List* lp=current->mmaps;
ffff800000803ea9:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff800000803eb0:	ff ff ff 
ffff800000803eb3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803eb7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803eba:	48 8b 80 34 03 00 00 	mov    rax,QWORD PTR [rax+0x334]
ffff800000803ec1:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:677
    for (; lp; lp=lp->next) {
ffff800000803ec5:	e9 33 04 00 00       	jmp    ffff8000008042fd <do_munmap+0x487>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:678
        mmap_struct* mp=lp->data;
ffff800000803eca:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803ece:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000803ed2:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:679
        if (mp->base<=addr&&mp->base+mp->len>=addr+len) {
ffff800000803ed6:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803eda:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803edd:	48 39 85 58 ff ff ff 	cmp    QWORD PTR [rbp-0xa8],rax
ffff800000803ee4:	0f 82 07 04 00 00    	jb     ffff8000008042f1 <do_munmap+0x47b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:679 (discriminator 1)
ffff800000803eea:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803eee:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803ef1:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803ef5:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000803ef9:	48 01 d0             	add    rax,rdx
ffff800000803efc:	48 89 c1             	mov    rcx,rax
ffff800000803eff:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
ffff800000803f05:	48 63 d0             	movsxd rdx,eax
ffff800000803f08:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
ffff800000803f0f:	48 01 d0             	add    rax,rdx
ffff800000803f12:	48 39 c1             	cmp    rcx,rax
ffff800000803f15:	0f 82 d6 03 00 00    	jb     ffff8000008042f1 <do_munmap+0x47b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:681
            //去掉取消映射的部分，将原先分配的整块映射一分为二
            if (mp->base+mp->len>addr+len) {
ffff800000803f1b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803f1f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803f22:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803f26:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000803f2a:	48 01 d0             	add    rax,rdx
ffff800000803f2d:	48 89 c1             	mov    rcx,rax
ffff800000803f30:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
ffff800000803f36:	48 63 d0             	movsxd rdx,eax
ffff800000803f39:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
ffff800000803f40:	48 01 d0             	add    rax,rdx
ffff800000803f43:	48 39 c1             	cmp    rcx,rax
ffff800000803f46:	0f 86 c5 02 00 00    	jbe    ffff800000804211 <do_munmap+0x39b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:682
                mmap_struct* extra=kmalloc(0, sizeof(mmap_struct));
ffff800000803f4c:	be 48 00 00 00       	mov    esi,0x48
ffff800000803f51:	bf 00 00 00 00       	mov    edi,0x0
ffff800000803f56:	49 89 df             	mov    r15,rbx
ffff800000803f59:	48 b8 96 fe ed ff ff 	movabs rax,0xffffffffffedfe96
ffff800000803f60:	ff ff ff 
ffff800000803f63:	48 01 d8             	add    rax,rbx
ffff800000803f66:	ff d0                	call   rax
ffff800000803f68:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:683
                list_add(all_mmaps, extra);
ffff800000803f6c:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000803f73:	ff ff ff 
ffff800000803f76:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803f7a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803f7d:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
ffff800000803f81:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000803f85:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:33
        new->next->prev = new;
    entry->next = new;
}
__attribute__((always_inline)) inline void list_add(struct List * entry,struct List * new)	////add to the tail of the link
{
    struct List* p=entry;
ffff800000803f89:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000803f8d:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:34
    for(;p->next&&p->next!=p;p=p->next){
ffff800000803f91:	eb 21                	jmp    ffff800000803fb4 <do_munmap+0x13e>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:35
        if(p->data==new->data)
ffff800000803f93:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000803f97:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff800000803f9b:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000803f9f:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000803fa3:	48 39 c2             	cmp    rdx,rax
ffff800000803fa6:	74 7c                	je     ffff800000804024 <do_munmap+0x1ae>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:34
    for(;p->next&&p->next!=p;p=p->next){
ffff800000803fa8:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000803fac:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000803fb0:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
ffff800000803fb4:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000803fb8:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000803fbc:	48 85 c0             	test   rax,rax
ffff800000803fbf:	74 0e                	je     ffff800000803fcf <do_munmap+0x159>
ffff800000803fc1:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000803fc5:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000803fc9:	48 39 45 98          	cmp    QWORD PTR [rbp-0x68],rax
ffff800000803fcd:	75 c4                	jne    ffff800000803f93 <do_munmap+0x11d>
ffff800000803fcf:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000803fd3:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
ffff800000803fd7:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000803fdb:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff800000803fdf:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000803fe3:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff800000803fe7:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000803feb:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff800000803fef:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000803ff3:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
ffff800000803ff7:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff800000803ffa:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000803ffe:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000804002:	48 85 c0             	test   rax,rax
ffff800000804005:	74 0f                	je     ffff800000804016 <do_munmap+0x1a0>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff800000804007:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080400b:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080400f:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
ffff800000804013:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:29
    entry->next = new;
ffff800000804016:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080401a:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
ffff80000080401e:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff800000804022:	eb 01                	jmp    ffff800000804025 <do_munmap+0x1af>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:36
            return;
ffff800000804024:	90                   	nop
do_munmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:684
                extra->base=addr+len;
ffff800000804025:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
ffff80000080402b:	48 63 d0             	movsxd rdx,eax
ffff80000080402e:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
ffff800000804035:	48 01 d0             	add    rax,rdx
ffff800000804038:	48 89 c2             	mov    rdx,rax
ffff80000080403b:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080403f:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:685
                extra->len=mp->len-(size_t)addr-len;
ffff800000804042:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000804046:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080404a:	48 8b 8d 58 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa8]
ffff800000804051:	48 29 c8             	sub    rax,rcx
ffff800000804054:	48 89 c2             	mov    rdx,rax
ffff800000804057:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
ffff80000080405d:	48 98                	cdqe   
ffff80000080405f:	48 29 c2             	sub    rdx,rax
ffff800000804062:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000804066:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:687
                //加到进程映射链表
                struct List* node=kmalloc(0, sizeof(struct List));
ffff80000080406a:	be 18 00 00 00       	mov    esi,0x18
ffff80000080406f:	bf 00 00 00 00       	mov    edi,0x0
ffff800000804074:	49 89 df             	mov    r15,rbx
ffff800000804077:	48 b8 96 fe ed ff ff 	movabs rax,0xffffffffffedfe96
ffff80000080407e:	ff ff ff 
ffff800000804081:	48 01 d8             	add    rax,rbx
ffff800000804084:	ff d0                	call   rax
ffff800000804086:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
ffff80000080408a:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080408e:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff800000804092:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000804096:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000080409d:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff8000008040a1:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff8000008040a8:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff8000008040a9:	90                   	nop
do_munmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:689
                list_init(node);
                node->data=extra;
ffff8000008040aa:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008040ae:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff8000008040b2:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:690
                struct List* prevl=current->mmaps;
ffff8000008040b6:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff8000008040bd:	ff ff ff 
ffff8000008040c0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008040c4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008040c7:	48 8b 80 34 03 00 00 	mov    rax,QWORD PTR [rax+0x334]
ffff8000008040ce:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:691
                for (struct List* l=current->mmaps; l&&((mmap_struct*)l->data)->base<addr; l=l->next) {
ffff8000008040d2:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff8000008040d9:	ff ff ff 
ffff8000008040dc:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008040e0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008040e3:	48 8b 80 34 03 00 00 	mov    rax,QWORD PTR [rax+0x334]
ffff8000008040ea:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffff8000008040ee:	eb 14                	jmp    ffff800000804104 <do_munmap+0x28e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:692 (discriminator 4)
                    prevl=l;
ffff8000008040f0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008040f4:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:691 (discriminator 4)
                for (struct List* l=current->mmaps; l&&((mmap_struct*)l->data)->base<addr; l=l->next) {
ffff8000008040f8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008040fc:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000804100:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:691 (discriminator 1)
ffff800000804104:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff800000804109:	74 14                	je     ffff80000080411f <do_munmap+0x2a9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:691 (discriminator 3)
ffff80000080410b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080410f:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000804113:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804116:	48 39 85 58 ff ff ff 	cmp    QWORD PTR [rbp-0xa8],rax
ffff80000080411d:	77 d1                	ja     ffff8000008040f0 <do_munmap+0x27a>
ffff80000080411f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804123:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
ffff800000804127:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080412b:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:33
    struct List* p=entry;
ffff800000804132:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000804136:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:34
    for(;p->next&&p->next!=p;p=p->next){
ffff80000080413d:	eb 31                	jmp    ffff800000804170 <do_munmap+0x2fa>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:35
        if(p->data==new->data)
ffff80000080413f:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000804146:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff80000080414a:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000804151:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000804155:	48 39 c2             	cmp    rdx,rax
ffff800000804158:	0f 84 b2 00 00 00    	je     ffff800000804210 <do_munmap+0x39a>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:34
    for(;p->next&&p->next!=p;p=p->next){
ffff80000080415e:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000804165:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000804169:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
ffff800000804170:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000804177:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080417b:	48 85 c0             	test   rax,rax
ffff80000080417e:	74 14                	je     ffff800000804194 <do_munmap+0x31e>
ffff800000804180:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000804187:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080418b:	48 39 85 70 ff ff ff 	cmp    QWORD PTR [rbp-0x90],rax
ffff800000804192:	75 ab                	jne    ffff80000080413f <do_munmap+0x2c9>
ffff800000804194:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080419b:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
ffff8000008041a2:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff8000008041a9:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff8000008041b0:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff8000008041b7:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff8000008041bb:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff8000008041c2:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff8000008041c6:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff8000008041cd:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
ffff8000008041d4:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff8000008041d7:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff8000008041de:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008041e2:	48 85 c0             	test   rax,rax
ffff8000008041e5:	74 15                	je     ffff8000008041fc <do_munmap+0x386>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff8000008041e7:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff8000008041ee:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008041f2:	48 8b 95 60 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa0]
ffff8000008041f9:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:29
    entry->next = new;
ffff8000008041fc:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff800000804203:	48 8b 95 60 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa0]
ffff80000080420a:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff80000080420e:	eb 01                	jmp    ffff800000804211 <do_munmap+0x39b>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:36
            return;
ffff800000804210:	90                   	nop
do_munmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:696
                }
                list_add(prevl, node);
            }
            mp->len=addr-mp->base;
ffff800000804211:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000804215:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804218:	48 f7 d8             	neg    rax
ffff80000080421b:	48 89 c2             	mov    rdx,rax
ffff80000080421e:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
ffff800000804225:	48 01 d0             	add    rax,rdx
ffff800000804228:	48 89 c2             	mov    rdx,rax
ffff80000080422b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080422f:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:698
            //把相应的物理内存分配也释放
            pmfree(mp->pmhdr->base+addr-mp->base,len);
ffff800000804233:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
ffff800000804239:	48 98                	cdqe   
ffff80000080423b:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080423f:	48 8b 52 28          	mov    rdx,QWORD PTR [rdx+0x28]
ffff800000804243:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000804246:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080424a:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080424d:	48 29 d1             	sub    rcx,rdx
ffff800000804250:	48 8b 95 58 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa8]
ffff800000804257:	48 01 ca             	add    rdx,rcx
ffff80000080425a:	48 89 c6             	mov    rsi,rax
ffff80000080425d:	48 89 d7             	mov    rdi,rdx
ffff800000804260:	49 89 df             	mov    r15,rbx
ffff800000804263:	48 b8 2f 02 ee ff ff 	movabs rax,0xffffffffffee022f
ffff80000080426a:	ff ff ff 
ffff80000080426d:	48 01 d8             	add    rax,rbx
ffff800000804270:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:700
            //修改页表
            for (int i=0; i<TO_MPGN(len); i++) {
ffff800000804272:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x0
ffff800000804279:	eb 51                	jmp    ffff8000008042cc <do_munmap+0x456>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:701 (discriminator 3)
                smmap(0, addr+i*PAGE_4K_SIZE, 0, current->pml4);
ffff80000080427b:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff800000804282:	ff ff ff 
ffff800000804285:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804289:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080428c:	48 8b 80 e0 00 00 00 	mov    rax,QWORD PTR [rax+0xe0]
ffff800000804293:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff800000804296:	c1 e2 0c             	shl    edx,0xc
ffff800000804299:	48 63 ca             	movsxd rcx,edx
ffff80000080429c:	48 8b 95 58 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa8]
ffff8000008042a3:	48 01 ca             	add    rdx,rcx
ffff8000008042a6:	48 89 d6             	mov    rsi,rdx
ffff8000008042a9:	48 89 c1             	mov    rcx,rax
ffff8000008042ac:	ba 00 00 00 00       	mov    edx,0x0
ffff8000008042b1:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008042b6:	49 89 df             	mov    r15,rbx
ffff8000008042b9:	48 b8 9c e8 ed ff ff 	movabs rax,0xffffffffffede89c
ffff8000008042c0:	ff ff ff 
ffff8000008042c3:	48 01 d8             	add    rax,rbx
ffff8000008042c6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:700 (discriminator 3)
            for (int i=0; i<TO_MPGN(len); i++) {
ffff8000008042c8:	83 45 d4 01          	add    DWORD PTR [rbp-0x2c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:700 (discriminator 1)
ffff8000008042cc:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
ffff8000008042d2:	05 ff 0f 00 00       	add    eax,0xfff
ffff8000008042d7:	8d 90 ff 0f 00 00    	lea    edx,[rax+0xfff]
ffff8000008042dd:	85 c0                	test   eax,eax
ffff8000008042df:	0f 48 c2             	cmovs  eax,edx
ffff8000008042e2:	c1 f8 0c             	sar    eax,0xc
ffff8000008042e5:	39 45 d4             	cmp    DWORD PTR [rbp-0x2c],eax
ffff8000008042e8:	7c 91                	jl     ffff80000080427b <do_munmap+0x405>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:703
            }
            return 0;
ffff8000008042ea:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008042ef:	eb 33                	jmp    ffff800000804324 <do_munmap+0x4ae>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:677
    for (; lp; lp=lp->next) {
ffff8000008042f1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008042f5:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008042f9:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:677 (discriminator 1)
ffff8000008042fd:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff800000804302:	0f 85 c2 fb ff ff    	jne    ffff800000803eca <do_munmap+0x54>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:706
        }
    }
    set_errno(-ENOMEM);
ffff800000804308:	bf cf ff ff ff       	mov    edi,0xffffffcf
ffff80000080430d:	49 89 df             	mov    r15,rbx
ffff800000804310:	48 b8 6e 62 ee ff ff 	movabs rax,0xffffffffffee626e
ffff800000804317:	ff ff ff 
ffff80000080431a:	48 01 d8             	add    rax,rbx
ffff80000080431d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:707
    return -1;
ffff80000080431f:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:709
    
ffff800000804324:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
ffff80000080432b:	5b                   	pop    rbx
ffff80000080432c:	41 5f                	pop    r15
ffff80000080432e:	5d                   	pop    rbp
ffff80000080432f:	c3                   	ret    

ffff800000804330 <make_dentry>:
make_dentry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:25
};
struct dir_entry_operations dev_dir_dops={

};
static int devd_fd=-1;
void make_dentry(struct dir_entry* d,char* name,int namelen,struct dir_entry* parent,struct dir_entry_operations* dops){
ffff800000804330:	f3 0f 1e fa          	endbr64 
ffff800000804334:	55                   	push   rbp
ffff800000804335:	48 89 e5             	mov    rbp,rsp
ffff800000804338:	41 57                	push   r15
ffff80000080433a:	48 83 ec 78          	sub    rsp,0x78
ffff80000080433e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080433e <make_dentry+0xe>
ffff800000804345:	49 bb f2 f1 11 00 00 	movabs r11,0x11f1f2
ffff80000080434c:	00 00 00 
ffff80000080434f:	4c 01 d8             	add    rax,r11
ffff800000804352:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
ffff800000804356:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
ffff80000080435a:	89 55 9c             	mov    DWORD PTR [rbp-0x64],edx
ffff80000080435d:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
ffff800000804361:	4c 89 45 88          	mov    QWORD PTR [rbp-0x78],r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:26
    strcpy(d->name,name);
ffff800000804365:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff800000804369:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080436c:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
ffff800000804370:	48 89 ce             	mov    rsi,rcx
ffff800000804373:	48 89 d7             	mov    rdi,rdx
ffff800000804376:	49 89 c7             	mov    r15,rax
ffff800000804379:	48 ba 06 1e ef ff ff 	movabs rdx,0xffffffffffef1e06
ffff800000804380:	ff ff ff 
ffff800000804383:	48 01 c2             	add    rdx,rax
ffff800000804386:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:27
    d->name_length=namelen;
ffff800000804388:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080438c:	8b 55 9c             	mov    edx,DWORD PTR [rbp-0x64]
ffff80000080438f:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:29
    //添加dentry的操作方法，这样能够查找设备
    d->dir_ops=dops;
ffff800000804392:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000804396:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
ffff80000080439a:	48 89 50 60          	mov    QWORD PTR [rax+0x60],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:30
    list_init(&d->subdirs_list);
ffff80000080439e:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008043a2:	48 83 c0 28          	add    rax,0x28
ffff8000008043a6:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff8000008043aa:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008043ae:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff8000008043b5:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008043b9:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff8000008043c0:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff8000008043c1:	90                   	nop
make_dentry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:31
    list_init(&d->child_node);
ffff8000008043c2:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008043c6:	48 83 c0 10          	add    rax,0x10
ffff8000008043ca:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff8000008043ce:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008043d2:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff8000008043d9:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008043dd:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff8000008043e4:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff8000008043e5:	90                   	nop
make_dentry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:32
    d->child_node.data=d;
ffff8000008043e6:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008043ea:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff8000008043ee:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:33
    d->parent=parent;
ffff8000008043f2:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008043f6:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
ffff8000008043fa:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:34
    list_add(&parent->subdirs_list,&d->child_node);
ffff8000008043fe:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000804402:	48 83 c0 10          	add    rax,0x10
ffff800000804406:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
ffff80000080440a:	48 83 c2 28          	add    rdx,0x28
ffff80000080440e:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff800000804412:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:33
    struct List* p=entry;
ffff800000804416:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080441a:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:34
    for(;p->next&&p->next!=p;p=p->next){
ffff80000080441e:	eb 21                	jmp    ffff800000804441 <make_dentry+0x111>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:35
        if(p->data==new->data)
ffff800000804420:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000804424:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff800000804428:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080442c:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000804430:	48 39 c2             	cmp    rdx,rax
ffff800000804433:	74 7c                	je     ffff8000008044b1 <make_dentry+0x181>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:34
    for(;p->next&&p->next!=p;p=p->next){
ffff800000804435:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000804439:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080443d:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffff800000804441:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000804445:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000804449:	48 85 c0             	test   rax,rax
ffff80000080444c:	74 0e                	je     ffff80000080445c <make_dentry+0x12c>
ffff80000080444e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000804452:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000804456:	48 39 45 d8          	cmp    QWORD PTR [rbp-0x28],rax
ffff80000080445a:	75 c4                	jne    ffff800000804420 <make_dentry+0xf0>
ffff80000080445c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000804460:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
ffff800000804464:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804468:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff80000080446c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000804470:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff800000804474:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000804478:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff80000080447c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000804480:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000804484:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff800000804487:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080448b:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080448f:	48 85 c0             	test   rax,rax
ffff800000804492:	74 0f                	je     ffff8000008044a3 <make_dentry+0x173>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff800000804494:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000804498:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080449c:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff8000008044a0:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:29
    entry->next = new;
ffff8000008044a3:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008044a7:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff8000008044ab:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff8000008044af:	eb 01                	jmp    ffff8000008044b2 <make_dentry+0x182>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:36
            return;
ffff8000008044b1:	90                   	nop
make_dentry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:35
}
ffff8000008044b2:	90                   	nop
ffff8000008044b3:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff8000008044b7:	c9                   	leave  
ffff8000008044b8:	c3                   	ret    

ffff8000008044b9 <make_inode>:
make_inode():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:36
void make_inode(struct index_node* i,struct index_node_operations* iops,struct file_operations* fops,unsigned long attr,struct super_block* sb){
ffff8000008044b9:	f3 0f 1e fa          	endbr64 
ffff8000008044bd:	55                   	push   rbp
ffff8000008044be:	48 89 e5             	mov    rbp,rsp
ffff8000008044c1:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008044c1 <make_inode+0x8>
ffff8000008044c8:	49 bb 6f f0 11 00 00 	movabs r11,0x11f06f
ffff8000008044cf:	00 00 00 
ffff8000008044d2:	4c 01 d8             	add    rax,r11
ffff8000008044d5:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff8000008044d9:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff8000008044dd:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff8000008044e1:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
ffff8000008044e5:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:37
    i->f_ops=fops;
ffff8000008044e9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008044ed:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff8000008044f1:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:38
    i->attribute=attr;
ffff8000008044f5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008044f9:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008044fd:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:39
    i->sb=sb;
ffff800000804501:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804505:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000804509:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:40
    i->file_size=0;
ffff80000080450d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804511:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:41
    i->inode_ops=iops;
ffff800000804518:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080451c:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff800000804520:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:42
}
ffff800000804524:	90                   	nop
ffff800000804525:	5d                   	pop    rbp
ffff800000804526:	c3                   	ret    

ffff800000804527 <make_devf>:
make_devf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:47
/*
 * 创建/dev文件夹，添加必要的设备文件。
 * 这个/dev文件夹的dentry和inode等数据由devman管理，根文件系统切换时，这个文件夹会跟着挂载到新文件系统的根目录下。
 * */
void make_devf(struct dir_entry* d,struct index_node* i,char* name,struct dir_entry* dir_dev,struct file_operations* fops){
ffff800000804527:	f3 0f 1e fa          	endbr64 
ffff80000080452b:	55                   	push   rbp
ffff80000080452c:	48 89 e5             	mov    rbp,rsp
ffff80000080452f:	41 57                	push   r15
ffff800000804531:	53                   	push   rbx
ffff800000804532:	48 83 ec 30          	sub    rsp,0x30
ffff800000804536:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000804536 <make_devf+0xf>
ffff80000080453d:	49 bb fa ef 11 00 00 	movabs r11,0x11effa
ffff800000804544:	00 00 00 
ffff800000804547:	4c 01 db             	add    rbx,r11
ffff80000080454a:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff80000080454e:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff800000804552:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffff800000804556:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
ffff80000080455a:	4c 89 45 c8          	mov    QWORD PTR [rbp-0x38],r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:48
    make_dentry(d,name, strlen(name),dir_dev,&dev_dir_dops);
ffff80000080455e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000804562:	48 89 c7             	mov    rdi,rax
ffff800000804565:	49 89 df             	mov    r15,rbx
ffff800000804568:	48 b8 d3 20 ef ff ff 	movabs rax,0xffffffffffef20d3
ffff80000080456f:	ff ff ff 
ffff800000804572:	48 01 d8             	add    rax,rbx
ffff800000804575:	ff d0                	call   rax
ffff800000804577:	89 c7                	mov    edi,eax
ffff800000804579:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000080457d:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
ffff800000804581:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804585:	48 b9 a0 ff ff ff ff 	movabs rcx,0xffffffffffffffa0
ffff80000080458c:	ff ff ff 
ffff80000080458f:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff800000804593:	49 89 c8             	mov    r8,rcx
ffff800000804596:	48 89 d1             	mov    rcx,rdx
ffff800000804599:	89 fa                	mov    edx,edi
ffff80000080459b:	48 89 c7             	mov    rdi,rax
ffff80000080459e:	49 89 df             	mov    r15,rbx
ffff8000008045a1:	48 b8 00 0e ee ff ff 	movabs rax,0xffffffffffee0e00
ffff8000008045a8:	ff ff ff 
ffff8000008045ab:	48 01 d8             	add    rax,rbx
ffff8000008045ae:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:49
    d->dir_inode=i;
ffff8000008045b0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008045b4:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008045b8:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:50
    make_inode(i,dir_dev->dir_inode->inode_ops,fops,FS_ATTR_DEVICE,root_sb);
ffff8000008045bc:	48 b8 90 fd ff ff ff 	movabs rax,0xfffffffffffffd90
ffff8000008045c3:	ff ff ff 
ffff8000008045c6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008045ca:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008045cd:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008045d1:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008045d5:	48 8b 70 30          	mov    rsi,QWORD PTR [rax+0x30]
ffff8000008045d9:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff8000008045dd:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008045e1:	49 89 c8             	mov    r8,rcx
ffff8000008045e4:	b9 04 00 00 00       	mov    ecx,0x4
ffff8000008045e9:	48 89 c7             	mov    rdi,rax
ffff8000008045ec:	49 89 df             	mov    r15,rbx
ffff8000008045ef:	48 b8 89 0f ee ff ff 	movabs rax,0xffffffffffee0f89
ffff8000008045f6:	ff ff ff 
ffff8000008045f9:	48 01 d8             	add    rax,rbx
ffff8000008045fc:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:52
    // list_add(&dir_dev->subdirs_list,&d->child_node);//添加到/dev下
}
ffff8000008045fe:	90                   	nop
ffff8000008045ff:	48 83 c4 30          	add    rsp,0x30
ffff800000804603:	5b                   	pop    rbx
ffff800000804604:	41 5f                	pop    r15
ffff800000804606:	5d                   	pop    rbp
ffff800000804607:	c3                   	ret    

ffff800000804608 <devfs_lookup>:
devfs_lookup():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:53
struct dir_entry* devfs_lookup(struct index_node* parent_inode,struct dir_entry* dest_dentry){
ffff800000804608:	f3 0f 1e fa          	endbr64 
ffff80000080460c:	55                   	push   rbp
ffff80000080460d:	48 89 e5             	mov    rbp,rsp
ffff800000804610:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000804610 <devfs_lookup+0x8>
ffff800000804617:	49 bb 20 ef 11 00 00 	movabs r11,0x11ef20
ffff80000080461e:	00 00 00 
ffff800000804621:	4c 01 d8             	add    rax,r11
ffff800000804624:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000804628:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:55
    //TODO 待完成
}
ffff80000080462c:	90                   	nop
ffff80000080462d:	5d                   	pop    rbp
ffff80000080462e:	c3                   	ret    

ffff80000080462f <devfs_read_superblock>:
devfs_read_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:68
};
struct super_block_operations devfs_sops={
    //TODO 待完成
    
};
struct super_block* devfs_read_superblock(struct Disk_Partition_Table_Entry *PDTE,void *buf){
ffff80000080462f:	f3 0f 1e fa          	endbr64 
ffff800000804633:	55                   	push   rbp
ffff800000804634:	48 89 e5             	mov    rbp,rsp
ffff800000804637:	41 57                	push   r15
ffff800000804639:	53                   	push   rbx
ffff80000080463a:	48 83 ec 30          	sub    rsp,0x30
ffff80000080463e:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080463e <devfs_read_superblock+0xf>
ffff800000804645:	49 bb f2 ee 11 00 00 	movabs r11,0x11eef2
ffff80000080464c:	00 00 00 
ffff80000080464f:	4c 01 db             	add    rbx,r11
ffff800000804652:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000804656:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:69
    struct super_block* sb=kmalloc(0,PAGE_4K_SIZE);
ffff80000080465a:	be 00 10 00 00       	mov    esi,0x1000
ffff80000080465f:	bf 00 00 00 00       	mov    edi,0x0
ffff800000804664:	49 89 df             	mov    r15,rbx
ffff800000804667:	48 b8 96 fe ed ff ff 	movabs rax,0xffffffffffedfe96
ffff80000080466e:	ff ff ff 
ffff800000804671:	48 01 d8             	add    rax,rbx
ffff800000804674:	ff d0                	call   rax
ffff800000804676:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:70
    sb->dev=0;//不存在具体的存储设备
ffff80000080467a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080467e:	66 c7 40 10 00 00    	mov    WORD PTR [rax+0x10],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:71
    sb->p_dev=0;
ffff800000804684:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804688:	48 c7 40 18 00 00 00 	mov    QWORD PTR [rax+0x18],0x0
ffff80000080468f:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:72
    sb->root=sb+1;
ffff800000804690:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804694:	48 8d 50 28          	lea    rdx,[rax+0x28]
ffff800000804698:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080469c:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:73
    sb->sb_ops=&devfs_sops;
ffff80000080469f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008046a3:	48 ba a8 fd ff ff ff 	movabs rdx,0xfffffffffffffda8
ffff8000008046aa:	ff ff ff 
ffff8000008046ad:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff8000008046b1:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:75

    sb->root->dir_inode=sb->root+1;
ffff8000008046b5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008046b9:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008046bc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008046c0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008046c3:	48 83 c2 68          	add    rdx,0x68
ffff8000008046c7:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:76
    sb->root->dir_ops=&devfs_dops;
ffff8000008046cb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008046cf:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008046d2:	48 ba d8 fe ff ff ff 	movabs rdx,0xfffffffffffffed8
ffff8000008046d9:	ff ff ff 
ffff8000008046dc:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff8000008046e0:	48 89 50 60          	mov    QWORD PTR [rax+0x60],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:77
    list_init(&sb->root->child_node);
ffff8000008046e4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008046e8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008046eb:	48 83 c0 10          	add    rax,0x10
ffff8000008046ef:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff8000008046f3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008046f7:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff8000008046fe:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000804702:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff800000804709:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000080470a:	90                   	nop
devfs_read_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:78
    list_init(&sb->root->subdirs_list);
ffff80000080470b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080470f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804712:	48 83 c0 28          	add    rax,0x28
ffff800000804716:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff80000080471a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080471e:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff800000804725:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804729:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff800000804730:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff800000804731:	90                   	nop
devfs_read_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:79
    sb->root->name="dev";
ffff800000804732:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804736:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804739:	48 ba 86 d3 ff ff ff 	movabs rdx,0xffffffffffffd386
ffff800000804740:	ff ff ff 
ffff800000804743:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000804747:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:80
    sb->root->name_length=3;
ffff80000080474a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080474e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804751:	c7 40 08 03 00 00 00 	mov    DWORD PTR [rax+0x8],0x3
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:82

    sb->root->dir_inode->dev=0;
ffff800000804758:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080475c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080475f:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000804763:	66 c7 40 18 00 00    	mov    WORD PTR [rax+0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:83
    sb->root->dir_inode->inode_ops=&devfs_iops;
ffff800000804769:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080476d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804770:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000804774:	48 ba 68 ff ff ff ff 	movabs rdx,0xffffffffffffff68
ffff80000080477b:	ff ff ff 
ffff80000080477e:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000804782:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:84
    sb->root->dir_inode->sb=sb;
ffff800000804786:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080478a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080478d:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000804791:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000804795:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:85
    sb->root->dir_inode->file_size=0;
ffff800000804799:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080479d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008047a0:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008047a4:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:86
    sb->root->dir_inode->f_ops=&devfs_fops;
ffff8000008047ab:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008047af:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008047b2:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008047b6:	48 ba 78 fd ff ff ff 	movabs rdx,0xfffffffffffffd78
ffff8000008047bd:	ff ff ff 
ffff8000008047c0:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff8000008047c4:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:87
    sb->root->dir_inode->blocks=0;
ffff8000008047c8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008047cc:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008047cf:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008047d3:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
ffff8000008047da:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:88
    sb->root->dir_inode->attribute|=FS_ATTR_DIR;
ffff8000008047db:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008047df:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008047e2:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008047e6:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff8000008047ea:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008047ee:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008047f1:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008047f5:	48 83 ca 02          	or     rdx,0x2
ffff8000008047f9:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:89
    sb->root->dir_inode->private_index_info=0;
ffff8000008047fd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804801:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804804:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000804808:	48 c7 40 38 00 00 00 	mov    QWORD PTR [rax+0x38],0x0
ffff80000080480f:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:91

    return sb;
ffff800000804810:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:92
}
ffff800000804814:	48 83 c4 30          	add    rsp,0x30
ffff800000804818:	5b                   	pop    rbx
ffff800000804819:	41 5f                	pop    r15
ffff80000080481b:	5d                   	pop    rbp
ffff80000080481c:	c3                   	ret    

ffff80000080481d <init_devfs>:
init_devfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:101
    .name="devfs",
    .next=0,
    .read_superblock=devfs_read_superblock
};
int init_devfs()
{
ffff80000080481d:	f3 0f 1e fa          	endbr64 
ffff800000804821:	55                   	push   rbp
ffff800000804822:	48 89 e5             	mov    rbp,rsp
ffff800000804825:	41 57                	push   r15
ffff800000804827:	53                   	push   rbx
ffff800000804828:	48 83 ec 30          	sub    rsp,0x30
ffff80000080482c:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080482c <init_devfs+0xf>
ffff800000804833:	49 bb 04 ed 11 00 00 	movabs r11,0x11ed04
ffff80000080483a:	00 00 00 
ffff80000080483d:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:120
    make_dentry(dmnt,"mnt",3,root_sb->root,root_sb->root->dir_ops);
    dmnt->dir_inode=imnt;
    make_inode(imnt,root_sb->root->dir_inode->inode_ops,root_sb->root->dir_inode->f_ops,FS_ATTR_DIR,root_sb);
    imnt->private_index_info=dmnt; */

    register_filesystem(&fs_devfs);
ffff800000804840:	48 b8 e0 ff ff ff ff 	movabs rax,0xffffffffffffffe0
ffff800000804847:	ff ff ff 
ffff80000080484a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080484e:	48 89 c7             	mov    rdi,rax
ffff800000804851:	49 89 df             	mov    r15,rbx
ffff800000804854:	48 b8 50 9f ee ff ff 	movabs rax,0xffffffffffee9f50
ffff80000080485b:	ff ff ff 
ffff80000080485e:	48 01 d8             	add    rax,rbx
ffff800000804861:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:121
    struct super_block *sb_devfs=mount_fs("devfs",0,0);
ffff800000804863:	ba 00 00 00 00       	mov    edx,0x0
ffff800000804868:	be 00 00 00 00       	mov    esi,0x0
ffff80000080486d:	48 b8 8a d3 ff ff ff 	movabs rax,0xffffffffffffd38a
ffff800000804874:	ff ff ff 
ffff800000804877:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080487b:	48 89 c7             	mov    rdi,rax
ffff80000080487e:	49 89 df             	mov    r15,rbx
ffff800000804881:	48 b8 6b 9d ee ff ff 	movabs rax,0xffffffffffee9d6b
ffff800000804888:	ff ff ff 
ffff80000080488b:	48 01 d8             	add    rax,rbx
ffff80000080488e:	ff d0                	call   rax
ffff800000804890:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:122
    ddev=path_walk("/dev",1);
ffff800000804894:	be 01 00 00 00       	mov    esi,0x1
ffff800000804899:	48 b8 90 d3 ff ff ff 	movabs rax,0xffffffffffffd390
ffff8000008048a0:	ff ff ff 
ffff8000008048a3:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008048a7:	48 89 c7             	mov    rdi,rax
ffff8000008048aa:	49 89 df             	mov    r15,rbx
ffff8000008048ad:	48 b8 22 99 ee ff ff 	movabs rax,0xffffffffffee9922
ffff8000008048b4:	ff ff ff 
ffff8000008048b7:	48 01 d8             	add    rax,rbx
ffff8000008048ba:	ff d0                	call   rax
ffff8000008048bc:	48 ba 60 ff ff ff ff 	movabs rdx,0xffffffffffffff60
ffff8000008048c3:	ff ff ff 
ffff8000008048c6:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff8000008048ca:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:123
    mount_fs_on(ddev,&fs_devfs);
ffff8000008048cd:	48 b8 60 ff ff ff ff 	movabs rax,0xffffffffffffff60
ffff8000008048d4:	ff ff ff 
ffff8000008048d7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008048db:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008048de:	48 ba e0 ff ff ff ff 	movabs rdx,0xffffffffffffffe0
ffff8000008048e5:	ff ff ff 
ffff8000008048e8:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff8000008048ec:	48 89 d6             	mov    rsi,rdx
ffff8000008048ef:	48 89 c7             	mov    rdi,rax
ffff8000008048f2:	49 89 df             	mov    r15,rbx
ffff8000008048f5:	48 b8 18 9e ee ff ff 	movabs rax,0xffffffffffee9e18
ffff8000008048fc:	ff ff ff 
ffff8000008048ff:	48 01 d8             	add    rax,rbx
ffff800000804902:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:125
    
    struct dir_entry* rt_devfs=sb_devfs->root;
ffff800000804904:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804908:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080490b:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:130

    
    //创建几个设备文件
    //console-framebuffer.c
    dconsole= (struct dir_entry *) kmalloc(0,PAGE_4K_SIZE);
ffff80000080490f:	be 00 10 00 00       	mov    esi,0x1000
ffff800000804914:	bf 00 00 00 00       	mov    edi,0x0
ffff800000804919:	49 89 df             	mov    r15,rbx
ffff80000080491c:	48 b8 96 fe ed ff ff 	movabs rax,0xffffffffffedfe96
ffff800000804923:	ff ff ff 
ffff800000804926:	48 01 d8             	add    rax,rbx
ffff800000804929:	ff d0                	call   rax
ffff80000080492b:	48 ba b0 fe ff ff ff 	movabs rdx,0xfffffffffffffeb0
ffff800000804932:	ff ff ff 
ffff800000804935:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000804939:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:131
    struct index_node* iconsole=dconsole+1;
ffff80000080493c:	48 b8 b0 fe ff ff ff 	movabs rax,0xfffffffffffffeb0
ffff800000804943:	ff ff ff 
ffff800000804946:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080494a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080494d:	48 83 c0 68          	add    rax,0x68
ffff800000804951:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:132
    dconsole->name=iconsole+1;
ffff800000804955:	48 b8 b0 fe ff ff ff 	movabs rax,0xfffffffffffffeb0
ffff80000080495c:	ff ff ff 
ffff80000080495f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804963:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804966:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080496a:	48 83 c2 40          	add    rdx,0x40
ffff80000080496e:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:133
    iconsole->dev=0x10000;
ffff800000804971:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000804975:	66 c7 40 18 00 00    	mov    WORD PTR [rax+0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:134
    make_devf(dconsole,iconsole,"console",rt_devfs,&devfs_fops);
ffff80000080497b:	48 b8 b0 fe ff ff ff 	movabs rax,0xfffffffffffffeb0
ffff800000804982:	ff ff ff 
ffff800000804985:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804989:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080498c:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000804990:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
ffff800000804994:	48 b9 78 fd ff ff ff 	movabs rcx,0xfffffffffffffd78
ffff80000080499b:	ff ff ff 
ffff80000080499e:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff8000008049a2:	49 89 c8             	mov    r8,rcx
ffff8000008049a5:	48 89 d1             	mov    rcx,rdx
ffff8000008049a8:	48 ba 95 d3 ff ff ff 	movabs rdx,0xffffffffffffd395
ffff8000008049af:	ff ff ff 
ffff8000008049b2:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff8000008049b6:	48 89 c7             	mov    rdi,rax
ffff8000008049b9:	49 89 df             	mov    r15,rbx
ffff8000008049bc:	48 b8 f7 0f ee ff ff 	movabs rax,0xffffffffffee0ff7
ffff8000008049c3:	ff ff ff 
ffff8000008049c6:	48 01 d8             	add    rax,rbx
ffff8000008049c9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:136
    //hd0-disk.c
    dhd0= (struct dir_entry *) kmalloc(0,PAGE_4K_SIZE);
ffff8000008049cb:	be 00 10 00 00       	mov    esi,0x1000
ffff8000008049d0:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008049d5:	49 89 df             	mov    r15,rbx
ffff8000008049d8:	48 b8 96 fe ed ff ff 	movabs rax,0xffffffffffedfe96
ffff8000008049df:	ff ff ff 
ffff8000008049e2:	48 01 d8             	add    rax,rbx
ffff8000008049e5:	ff d0                	call   rax
ffff8000008049e7:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff8000008049ee:	ff ff ff 
ffff8000008049f1:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff8000008049f5:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:137
    struct index_node* ihd0=dhd0+1;
ffff8000008049f8:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff8000008049ff:	ff ff ff 
ffff800000804a02:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804a06:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804a09:	48 83 c0 68          	add    rax,0x68
ffff800000804a0d:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:138
    dhd0->name=ihd0+1;
ffff800000804a11:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000804a18:	ff ff ff 
ffff800000804a1b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804a1f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804a22:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000804a26:	48 83 c2 40          	add    rdx,0x40
ffff800000804a2a:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:140
    extern int dev_hd;
    ihd0->dev=dev_hd<<8;
ffff800000804a2d:	48 b8 c8 fe ff ff ff 	movabs rax,0xfffffffffffffec8
ffff800000804a34:	ff ff ff 
ffff800000804a37:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804a3b:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000804a3d:	c1 e0 08             	shl    eax,0x8
ffff800000804a40:	89 c2                	mov    edx,eax
ffff800000804a42:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000804a46:	66 89 50 18          	mov    WORD PTR [rax+0x18],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:141
    make_devf(dhd0,ihd0,"hd0",rt_devfs,&devfs_fops);
ffff800000804a4a:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000804a51:	ff ff ff 
ffff800000804a54:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804a58:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804a5b:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000804a5f:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff800000804a63:	48 b9 78 fd ff ff ff 	movabs rcx,0xfffffffffffffd78
ffff800000804a6a:	ff ff ff 
ffff800000804a6d:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff800000804a71:	49 89 c8             	mov    r8,rcx
ffff800000804a74:	48 89 d1             	mov    rcx,rdx
ffff800000804a77:	48 ba 9d d3 ff ff ff 	movabs rdx,0xffffffffffffd39d
ffff800000804a7e:	ff ff ff 
ffff800000804a81:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000804a85:	48 89 c7             	mov    rdi,rax
ffff800000804a88:	49 89 df             	mov    r15,rbx
ffff800000804a8b:	48 b8 f7 0f ee ff ff 	movabs rax,0xffffffffffee0ff7
ffff800000804a92:	ff ff ff 
ffff800000804a95:	48 01 d8             	add    rax,rbx
ffff800000804a98:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:143
    //tty-tty.c
    dtty= (struct dir_entry *) kmalloc(0,PAGE_4K_SIZE);
ffff800000804a9a:	be 00 10 00 00       	mov    esi,0x1000
ffff800000804a9f:	bf 00 00 00 00       	mov    edi,0x0
ffff800000804aa4:	49 89 df             	mov    r15,rbx
ffff800000804aa7:	48 b8 96 fe ed ff ff 	movabs rax,0xffffffffffedfe96
ffff800000804aae:	ff ff ff 
ffff800000804ab1:	48 01 d8             	add    rax,rbx
ffff800000804ab4:	ff d0                	call   rax
ffff800000804ab6:	48 ba 00 fd ff ff ff 	movabs rdx,0xfffffffffffffd00
ffff800000804abd:	ff ff ff 
ffff800000804ac0:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000804ac4:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:144
    struct index_node* itty=dtty+1;
ffff800000804ac7:	48 b8 00 fd ff ff ff 	movabs rax,0xfffffffffffffd00
ffff800000804ace:	ff ff ff 
ffff800000804ad1:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804ad5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804ad8:	48 83 c0 68          	add    rax,0x68
ffff800000804adc:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:145
    dtty->name=itty+1;
ffff800000804ae0:	48 b8 00 fd ff ff ff 	movabs rax,0xfffffffffffffd00
ffff800000804ae7:	ff ff ff 
ffff800000804aea:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804aee:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804af1:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000804af5:	48 83 c2 40          	add    rdx,0x40
ffff800000804af9:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:146
    itty->dev|=0x10000;
ffff800000804afc:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000804b00:	0f b7 50 18          	movzx  edx,WORD PTR [rax+0x18]
ffff800000804b04:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000804b08:	66 89 50 18          	mov    WORD PTR [rax+0x18],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:147
    make_devf(dtty,itty,"tty",rt_devfs,&devfs_fops);
ffff800000804b0c:	48 b8 00 fd ff ff ff 	movabs rax,0xfffffffffffffd00
ffff800000804b13:	ff ff ff 
ffff800000804b16:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804b1a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804b1d:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000804b21:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
ffff800000804b25:	48 b9 78 fd ff ff ff 	movabs rcx,0xfffffffffffffd78
ffff800000804b2c:	ff ff ff 
ffff800000804b2f:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff800000804b33:	49 89 c8             	mov    r8,rcx
ffff800000804b36:	48 89 d1             	mov    rcx,rdx
ffff800000804b39:	48 ba a1 d3 ff ff ff 	movabs rdx,0xffffffffffffd3a1
ffff800000804b40:	ff ff ff 
ffff800000804b43:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000804b47:	48 89 c7             	mov    rdi,rax
ffff800000804b4a:	49 89 df             	mov    r15,rbx
ffff800000804b4d:	48 b8 f7 0f ee ff ff 	movabs rax,0xffffffffffee0ff7
ffff800000804b54:	ff ff ff 
ffff800000804b57:	48 01 d8             	add    rax,rbx
ffff800000804b5a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:149
    //初始化一下
    tty_fops.open(itty,&ftty);
ffff800000804b5c:	48 b8 70 fe ff ff ff 	movabs rax,0xfffffffffffffe70
ffff800000804b63:	ff ff ff 
ffff800000804b66:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804b6a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804b6d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000804b71:	48 b9 d0 fd ff ff ff 	movabs rcx,0xfffffffffffffdd0
ffff800000804b78:	ff ff ff 
ffff800000804b7b:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff800000804b7f:	48 89 ce             	mov    rsi,rcx
ffff800000804b82:	48 89 c7             	mov    rdi,rax
ffff800000804b85:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:152

    //ramdisk- ramdisk.c
    dramdisk= (struct dir_entry *) kmalloc(0,PAGE_4K_SIZE);
ffff800000804b87:	be 00 10 00 00       	mov    esi,0x1000
ffff800000804b8c:	bf 00 00 00 00       	mov    edi,0x0
ffff800000804b91:	49 89 df             	mov    r15,rbx
ffff800000804b94:	48 b8 96 fe ed ff ff 	movabs rax,0xffffffffffedfe96
ffff800000804b9b:	ff ff ff 
ffff800000804b9e:	48 01 d8             	add    rax,rbx
ffff800000804ba1:	ff d0                	call   rax
ffff800000804ba3:	48 ba 58 ff ff ff ff 	movabs rdx,0xffffffffffffff58
ffff800000804baa:	ff ff ff 
ffff800000804bad:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000804bb1:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:153
    struct index_node* iramdisk=dramdisk+1;
ffff800000804bb4:	48 b8 58 ff ff ff ff 	movabs rax,0xffffffffffffff58
ffff800000804bbb:	ff ff ff 
ffff800000804bbe:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804bc2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804bc5:	48 83 c0 68          	add    rax,0x68
ffff800000804bc9:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:154
    dramdisk->name=iramdisk+1;
ffff800000804bcd:	48 b8 58 ff ff ff ff 	movabs rax,0xffffffffffffff58
ffff800000804bd4:	ff ff ff 
ffff800000804bd7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804bdb:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804bde:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000804be2:	48 83 c2 40          	add    rdx,0x40
ffff800000804be6:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:155
    iramdisk->dev=dev_ramdisk<<8;
ffff800000804be9:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff800000804bf0:	ff ff ff 
ffff800000804bf3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804bf7:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000804bf9:	c1 e0 08             	shl    eax,0x8
ffff800000804bfc:	89 c2                	mov    edx,eax
ffff800000804bfe:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000804c02:	66 89 50 18          	mov    WORD PTR [rax+0x18],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:156
    make_devf(dramdisk,iramdisk,"ram",rt_devfs,&devfs_fops);
ffff800000804c06:	48 b8 58 ff ff ff ff 	movabs rax,0xffffffffffffff58
ffff800000804c0d:	ff ff ff 
ffff800000804c10:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804c14:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804c17:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000804c1b:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
ffff800000804c1f:	48 b9 78 fd ff ff ff 	movabs rcx,0xfffffffffffffd78
ffff800000804c26:	ff ff ff 
ffff800000804c29:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff800000804c2d:	49 89 c8             	mov    r8,rcx
ffff800000804c30:	48 89 d1             	mov    rcx,rdx
ffff800000804c33:	48 ba a5 d3 ff ff ff 	movabs rdx,0xffffffffffffd3a5
ffff800000804c3a:	ff ff ff 
ffff800000804c3d:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000804c41:	48 89 c7             	mov    rdi,rax
ffff800000804c44:	49 89 df             	mov    r15,rbx
ffff800000804c47:	48 b8 f7 0f ee ff ff 	movabs rax,0xffffffffffee0ff7
ffff800000804c4e:	ff ff ff 
ffff800000804c51:	48 01 d8             	add    rax,rbx
ffff800000804c54:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:158

}
ffff800000804c56:	90                   	nop
ffff800000804c57:	48 83 c4 30          	add    rsp,0x30
ffff800000804c5b:	5b                   	pop    rbx
ffff800000804c5c:	41 5f                	pop    r15
ffff800000804c5e:	5d                   	pop    rbp
ffff800000804c5f:	c3                   	ret    

ffff800000804c60 <open_dev>:
open_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:160
//
long open_dev(struct index_node * inode,struct file * filp){
ffff800000804c60:	f3 0f 1e fa          	endbr64 
ffff800000804c64:	55                   	push   rbp
ffff800000804c65:	48 89 e5             	mov    rbp,rsp
ffff800000804c68:	41 57                	push   r15
ffff800000804c6a:	53                   	push   rbx
ffff800000804c6b:	48 83 ec 20          	sub    rsp,0x20
ffff800000804c6f:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000804c6f <open_dev+0xf>
ffff800000804c76:	49 bb c1 e8 11 00 00 	movabs r11,0x11e8c1
ffff800000804c7d:	00 00 00 
ffff800000804c80:	4c 01 db             	add    rbx,r11
ffff800000804c83:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000804c87:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:162
    //查看文件名
    char* name=filp->dentry->name;
ffff800000804c8b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000804c8f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000804c93:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804c96:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:163
    char* p=name+ strlen(name)-1;
ffff800000804c9a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804c9e:	48 89 c7             	mov    rdi,rax
ffff800000804ca1:	49 89 df             	mov    r15,rbx
ffff800000804ca4:	48 b8 d3 20 ef ff ff 	movabs rax,0xffffffffffef20d3
ffff800000804cab:	ff ff ff 
ffff800000804cae:	48 01 d8             	add    rax,rbx
ffff800000804cb1:	ff d0                	call   rax
ffff800000804cb3:	48 98                	cdqe   
ffff800000804cb5:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff800000804cb9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804cbd:	48 01 d0             	add    rax,rdx
ffff800000804cc0:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:164
    for(;*p!='/'&&p>=name;p--);
ffff800000804cc4:	eb 05                	jmp    ffff800000804ccb <open_dev+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:164 (discriminator 3)
ffff800000804cc6:	48 83 6d e0 01       	sub    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:164 (discriminator 1)
ffff800000804ccb:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804ccf:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000804cd2:	3c 2f                	cmp    al,0x2f
ffff800000804cd4:	74 0a                	je     ffff800000804ce0 <open_dev+0x80>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:164 (discriminator 2)
ffff800000804cd6:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804cda:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000804cde:	73 e6                	jae    ffff800000804cc6 <open_dev+0x66>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:165
    if(p>=name)
ffff800000804ce0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804ce4:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000804ce8:	72 0c                	jb     ffff800000804cf6 <open_dev+0x96>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:166
        name=p+1;
ffff800000804cea:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804cee:	48 83 c0 01          	add    rax,0x1
ffff800000804cf2:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:167
    if(memcmp(name,"tty",3)==0){
ffff800000804cf6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804cfa:	ba 03 00 00 00       	mov    edx,0x3
ffff800000804cff:	48 b9 a1 d3 ff ff ff 	movabs rcx,0xffffffffffffd3a1
ffff800000804d06:	ff ff ff 
ffff800000804d09:	48 8d 0c 0b          	lea    rcx,[rbx+rcx*1]
ffff800000804d0d:	48 89 ce             	mov    rsi,rcx
ffff800000804d10:	48 89 c7             	mov    rdi,rax
ffff800000804d13:	49 89 df             	mov    r15,rbx
ffff800000804d16:	48 b8 4c 1d ef ff ff 	movabs rax,0xffffffffffef1d4c
ffff800000804d1d:	ff ff ff 
ffff800000804d20:	48 01 d8             	add    rax,rbx
ffff800000804d23:	ff d0                	call   rax
ffff800000804d25:	85 c0                	test   eax,eax
ffff800000804d27:	75 22                	jne    ffff800000804d4b <open_dev+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:168
        return init_tty(inode,filp);
ffff800000804d29:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000804d2d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000804d31:	48 89 d6             	mov    rsi,rdx
ffff800000804d34:	48 89 c7             	mov    rdi,rax
ffff800000804d37:	49 89 df             	mov    r15,rbx
ffff800000804d3a:	48 b8 c0 10 ef ff ff 	movabs rax,0xffffffffffef10c0
ffff800000804d41:	ff ff ff 
ffff800000804d44:	48 01 d8             	add    rax,rbx
ffff800000804d47:	ff d0                	call   rax
ffff800000804d49:	eb 57                	jmp    ffff800000804da2 <open_dev+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:169
    }else if(strcmp(name,"console")==0){
ffff800000804d4b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804d4f:	48 ba 95 d3 ff ff ff 	movabs rdx,0xffffffffffffd395
ffff800000804d56:	ff ff ff 
ffff800000804d59:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000804d5d:	48 89 d6             	mov    rsi,rdx
ffff800000804d60:	48 89 c7             	mov    rdi,rax
ffff800000804d63:	49 89 df             	mov    r15,rbx
ffff800000804d66:	48 b8 54 20 ef ff ff 	movabs rax,0xffffffffffef2054
ffff800000804d6d:	ff ff ff 
ffff800000804d70:	48 01 d8             	add    rax,rbx
ffff800000804d73:	ff d0                	call   rax
ffff800000804d75:	85 c0                	test   eax,eax
ffff800000804d77:	75 22                	jne    ffff800000804d9b <open_dev+0x13b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:170
        return open_framebuffer(inode,filp);
ffff800000804d79:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000804d7d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000804d81:	48 89 d6             	mov    rsi,rdx
ffff800000804d84:	48 89 c7             	mov    rdi,rax
ffff800000804d87:	49 89 df             	mov    r15,rbx
ffff800000804d8a:	48 b8 ef 93 ee ff ff 	movabs rax,0xffffffffffee93ef
ffff800000804d91:	ff ff ff 
ffff800000804d94:	48 01 d8             	add    rax,rbx
ffff800000804d97:	ff d0                	call   rax
ffff800000804d99:	eb 07                	jmp    ffff800000804da2 <open_dev+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:172
    }
    return -1;
ffff800000804d9b:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:173
}
ffff800000804da2:	48 83 c4 20          	add    rsp,0x20
ffff800000804da6:	5b                   	pop    rbx
ffff800000804da7:	41 5f                	pop    r15
ffff800000804da9:	5d                   	pop    rbp
ffff800000804daa:	c3                   	ret    

ffff800000804dab <close_dev>:
close_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:174
long close_dev(struct index_node * inode,struct file * filp){
ffff800000804dab:	f3 0f 1e fa          	endbr64 
ffff800000804daf:	55                   	push   rbp
ffff800000804db0:	48 89 e5             	mov    rbp,rsp
ffff800000804db3:	41 57                	push   r15
ffff800000804db5:	53                   	push   rbx
ffff800000804db6:	48 83 ec 20          	sub    rsp,0x20
ffff800000804dba:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000804dba <close_dev+0xf>
ffff800000804dc1:	49 bb 76 e7 11 00 00 	movabs r11,0x11e776
ffff800000804dc8:	00 00 00 
ffff800000804dcb:	4c 01 db             	add    rbx,r11
ffff800000804dce:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000804dd2:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:176
    //查看文件名
    char* name=filp->dentry->name;
ffff800000804dd6:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000804dda:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000804dde:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804de1:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:177
    char* p=name+ strlen(name)-1;
ffff800000804de5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804de9:	48 89 c7             	mov    rdi,rax
ffff800000804dec:	49 89 df             	mov    r15,rbx
ffff800000804def:	48 b8 d3 20 ef ff ff 	movabs rax,0xffffffffffef20d3
ffff800000804df6:	ff ff ff 
ffff800000804df9:	48 01 d8             	add    rax,rbx
ffff800000804dfc:	ff d0                	call   rax
ffff800000804dfe:	48 98                	cdqe   
ffff800000804e00:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff800000804e04:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804e08:	48 01 d0             	add    rax,rdx
ffff800000804e0b:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:178
    for(;*p!='/'&&p>=name;p--);
ffff800000804e0f:	eb 05                	jmp    ffff800000804e16 <close_dev+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:178 (discriminator 3)
ffff800000804e11:	48 83 6d e0 01       	sub    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:178 (discriminator 1)
ffff800000804e16:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804e1a:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000804e1d:	3c 2f                	cmp    al,0x2f
ffff800000804e1f:	74 0a                	je     ffff800000804e2b <close_dev+0x80>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:178 (discriminator 2)
ffff800000804e21:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804e25:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000804e29:	73 e6                	jae    ffff800000804e11 <close_dev+0x66>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:179
    if(p>=name)
ffff800000804e2b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804e2f:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000804e33:	72 0c                	jb     ffff800000804e41 <close_dev+0x96>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:180
        name=p+1;
ffff800000804e35:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804e39:	48 83 c0 01          	add    rax,0x1
ffff800000804e3d:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:181
    if(memcmp(name,"tty",3)==0){
ffff800000804e41:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804e45:	ba 03 00 00 00       	mov    edx,0x3
ffff800000804e4a:	48 b9 a1 d3 ff ff ff 	movabs rcx,0xffffffffffffd3a1
ffff800000804e51:	ff ff ff 
ffff800000804e54:	48 8d 0c 0b          	lea    rcx,[rbx+rcx*1]
ffff800000804e58:	48 89 ce             	mov    rsi,rcx
ffff800000804e5b:	48 89 c7             	mov    rdi,rax
ffff800000804e5e:	49 89 df             	mov    r15,rbx
ffff800000804e61:	48 b8 4c 1d ef ff ff 	movabs rax,0xffffffffffef1d4c
ffff800000804e68:	ff ff ff 
ffff800000804e6b:	48 01 d8             	add    rax,rbx
ffff800000804e6e:	ff d0                	call   rax
ffff800000804e70:	85 c0                	test   eax,eax
ffff800000804e72:	75 22                	jne    ffff800000804e96 <close_dev+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:182
        return close_tty(inode,filp);
ffff800000804e74:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000804e78:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000804e7c:	48 89 d6             	mov    rsi,rdx
ffff800000804e7f:	48 89 c7             	mov    rdi,rax
ffff800000804e82:	49 89 df             	mov    r15,rbx
ffff800000804e85:	48 b8 f3 0f ef ff ff 	movabs rax,0xffffffffffef0ff3
ffff800000804e8c:	ff ff ff 
ffff800000804e8f:	48 01 d8             	add    rax,rbx
ffff800000804e92:	ff d0                	call   rax
ffff800000804e94:	eb 57                	jmp    ffff800000804eed <close_dev+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:183
    }else if(strcmp(name,"console")==0){
ffff800000804e96:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804e9a:	48 ba 95 d3 ff ff ff 	movabs rdx,0xffffffffffffd395
ffff800000804ea1:	ff ff ff 
ffff800000804ea4:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000804ea8:	48 89 d6             	mov    rsi,rdx
ffff800000804eab:	48 89 c7             	mov    rdi,rax
ffff800000804eae:	49 89 df             	mov    r15,rbx
ffff800000804eb1:	48 b8 54 20 ef ff ff 	movabs rax,0xffffffffffef2054
ffff800000804eb8:	ff ff ff 
ffff800000804ebb:	48 01 d8             	add    rax,rbx
ffff800000804ebe:	ff d0                	call   rax
ffff800000804ec0:	85 c0                	test   eax,eax
ffff800000804ec2:	75 22                	jne    ffff800000804ee6 <close_dev+0x13b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:184
        return close_framebuffer(inode,filp);
ffff800000804ec4:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000804ec8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000804ecc:	48 89 d6             	mov    rsi,rdx
ffff800000804ecf:	48 89 c7             	mov    rdi,rax
ffff800000804ed2:	49 89 df             	mov    r15,rbx
ffff800000804ed5:	48 b8 46 94 ee ff ff 	movabs rax,0xffffffffffee9446
ffff800000804edc:	ff ff ff 
ffff800000804edf:	48 01 d8             	add    rax,rbx
ffff800000804ee2:	ff d0                	call   rax
ffff800000804ee4:	eb 07                	jmp    ffff800000804eed <close_dev+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:186
    }
    return -1;
ffff800000804ee6:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:188

}
ffff800000804eed:	48 83 c4 20          	add    rsp,0x20
ffff800000804ef1:	5b                   	pop    rbx
ffff800000804ef2:	41 5f                	pop    r15
ffff800000804ef4:	5d                   	pop    rbp
ffff800000804ef5:	c3                   	ret    

ffff800000804ef6 <read_dev>:
read_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:189
long read_dev(struct file * filp,char * buf,unsigned long count,long * position){
ffff800000804ef6:	f3 0f 1e fa          	endbr64 
ffff800000804efa:	55                   	push   rbp
ffff800000804efb:	48 89 e5             	mov    rbp,rsp
ffff800000804efe:	41 57                	push   r15
ffff800000804f00:	53                   	push   rbx
ffff800000804f01:	48 83 ec 40          	sub    rsp,0x40
ffff800000804f05:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000804f05 <read_dev+0xf>
ffff800000804f0c:	49 bb 2b e6 11 00 00 	movabs r11,0x11e62b
ffff800000804f13:	00 00 00 
ffff800000804f16:	4c 01 db             	add    rbx,r11
ffff800000804f19:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000804f1d:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffff800000804f21:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
ffff800000804f25:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:191
    //判断是不是块设备文件
    struct index_node* i_dev=filp->dentry->dir_inode;
ffff800000804f29:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000804f2d:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000804f31:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000804f35:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:198
        //这里需要调用缓冲区层的函数读取块设备
        return blkdev_read(i_dev->dev,*position,count,buf);
    }
    
    //查看文件名
    char* name=filp->dentry->name;
ffff800000804f39:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000804f3d:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000804f41:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804f44:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:199
    char* p=name+ strlen(name)-1;
ffff800000804f48:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804f4c:	48 89 c7             	mov    rdi,rax
ffff800000804f4f:	49 89 df             	mov    r15,rbx
ffff800000804f52:	48 b8 d3 20 ef ff ff 	movabs rax,0xffffffffffef20d3
ffff800000804f59:	ff ff ff 
ffff800000804f5c:	48 01 d8             	add    rax,rbx
ffff800000804f5f:	ff d0                	call   rax
ffff800000804f61:	48 98                	cdqe   
ffff800000804f63:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff800000804f67:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804f6b:	48 01 d0             	add    rax,rdx
ffff800000804f6e:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:200
    for(;*p!='/'&&p>=name;p--);
ffff800000804f72:	eb 05                	jmp    ffff800000804f79 <read_dev+0x83>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:200 (discriminator 3)
ffff800000804f74:	48 83 6d e0 01       	sub    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:200 (discriminator 1)
ffff800000804f79:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804f7d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000804f80:	3c 2f                	cmp    al,0x2f
ffff800000804f82:	74 0a                	je     ffff800000804f8e <read_dev+0x98>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:200 (discriminator 2)
ffff800000804f84:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804f88:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000804f8c:	73 e6                	jae    ffff800000804f74 <read_dev+0x7e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:201
    if(p>=name)
ffff800000804f8e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804f92:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000804f96:	72 0c                	jb     ffff800000804fa4 <read_dev+0xae>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:202
        name=p+1;
ffff800000804f98:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804f9c:	48 83 c0 01          	add    rax,0x1
ffff800000804fa0:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:203
    if(memcmp(name,"tty",3)==0){
ffff800000804fa4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804fa8:	ba 03 00 00 00       	mov    edx,0x3
ffff800000804fad:	48 b9 a1 d3 ff ff ff 	movabs rcx,0xffffffffffffd3a1
ffff800000804fb4:	ff ff ff 
ffff800000804fb7:	48 8d 0c 0b          	lea    rcx,[rbx+rcx*1]
ffff800000804fbb:	48 89 ce             	mov    rsi,rcx
ffff800000804fbe:	48 89 c7             	mov    rdi,rax
ffff800000804fc1:	49 89 df             	mov    r15,rbx
ffff800000804fc4:	48 b8 4c 1d ef ff ff 	movabs rax,0xffffffffffef1d4c
ffff800000804fcb:	ff ff ff 
ffff800000804fce:	48 01 d8             	add    rax,rbx
ffff800000804fd1:	ff d0                	call   rax
ffff800000804fd3:	85 c0                	test   eax,eax
ffff800000804fd5:	75 27                	jne    ffff800000804ffe <read_dev+0x108>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:204
        return read_tty(filp,buf,count,position);
ffff800000804fd7:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
ffff800000804fdb:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff800000804fdf:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
ffff800000804fe3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000804fe7:	48 89 c7             	mov    rdi,rax
ffff800000804fea:	49 89 df             	mov    r15,rbx
ffff800000804fed:	48 b8 1f 12 ef ff ff 	movabs rax,0xffffffffffef121f
ffff800000804ff4:	ff ff ff 
ffff800000804ff7:	48 01 d8             	add    rax,rbx
ffff800000804ffa:	ff d0                	call   rax
ffff800000804ffc:	eb 5c                	jmp    ffff80000080505a <read_dev+0x164>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:205
    }else if(strcmp(name,"console")==0){
ffff800000804ffe:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000805002:	48 ba 95 d3 ff ff ff 	movabs rdx,0xffffffffffffd395
ffff800000805009:	ff ff ff 
ffff80000080500c:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000805010:	48 89 d6             	mov    rsi,rdx
ffff800000805013:	48 89 c7             	mov    rdi,rax
ffff800000805016:	49 89 df             	mov    r15,rbx
ffff800000805019:	48 b8 54 20 ef ff ff 	movabs rax,0xffffffffffef2054
ffff800000805020:	ff ff ff 
ffff800000805023:	48 01 d8             	add    rax,rbx
ffff800000805026:	ff d0                	call   rax
ffff800000805028:	85 c0                	test   eax,eax
ffff80000080502a:	75 27                	jne    ffff800000805053 <read_dev+0x15d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:206
        return read_framebuffer(filp,buf,count,position);
ffff80000080502c:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
ffff800000805030:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff800000805034:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
ffff800000805038:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080503c:	48 89 c7             	mov    rdi,rax
ffff80000080503f:	49 89 df             	mov    r15,rbx
ffff800000805042:	48 b8 6d 94 ee ff ff 	movabs rax,0xffffffffffee946d
ffff800000805049:	ff ff ff 
ffff80000080504c:	48 01 d8             	add    rax,rbx
ffff80000080504f:	ff d0                	call   rax
ffff800000805051:	eb 07                	jmp    ffff80000080505a <read_dev+0x164>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:208
    }
    return -1;
ffff800000805053:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:210

}
ffff80000080505a:	48 83 c4 40          	add    rsp,0x40
ffff80000080505e:	5b                   	pop    rbx
ffff80000080505f:	41 5f                	pop    r15
ffff800000805061:	5d                   	pop    rbp
ffff800000805062:	c3                   	ret    

ffff800000805063 <write_dev>:
write_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:211
long write_dev(struct file * filp,char * buf,unsigned long count,long * position){
ffff800000805063:	f3 0f 1e fa          	endbr64 
ffff800000805067:	55                   	push   rbp
ffff800000805068:	48 89 e5             	mov    rbp,rsp
ffff80000080506b:	41 57                	push   r15
ffff80000080506d:	53                   	push   rbx
ffff80000080506e:	48 83 ec 40          	sub    rsp,0x40
ffff800000805072:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000805072 <write_dev+0xf>
ffff800000805079:	49 bb be e4 11 00 00 	movabs r11,0x11e4be
ffff800000805080:	00 00 00 
ffff800000805083:	4c 01 db             	add    rbx,r11
ffff800000805086:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff80000080508a:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffff80000080508e:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
ffff800000805092:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:213
    //判断是不是块设备文件
    struct index_node* idev=filp->dentry->dir_inode;
ffff800000805096:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080509a:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080509e:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008050a2:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:220
        //这里需要调用缓冲区层的函数写块设备
        return blkdev_write(idev->dev,*position,count,buf);
    }

    //查看文件名
    char* name=filp->dentry->name;
ffff8000008050a6:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008050aa:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008050ae:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008050b1:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:221
    char* p=name+ strlen(name)-1;
ffff8000008050b5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008050b9:	48 89 c7             	mov    rdi,rax
ffff8000008050bc:	49 89 df             	mov    r15,rbx
ffff8000008050bf:	48 b8 d3 20 ef ff ff 	movabs rax,0xffffffffffef20d3
ffff8000008050c6:	ff ff ff 
ffff8000008050c9:	48 01 d8             	add    rax,rbx
ffff8000008050cc:	ff d0                	call   rax
ffff8000008050ce:	48 98                	cdqe   
ffff8000008050d0:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff8000008050d4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008050d8:	48 01 d0             	add    rax,rdx
ffff8000008050db:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:222
    for(;*p!='/'&&p>=name;p--);
ffff8000008050df:	eb 05                	jmp    ffff8000008050e6 <write_dev+0x83>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:222 (discriminator 3)
ffff8000008050e1:	48 83 6d e0 01       	sub    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:222 (discriminator 1)
ffff8000008050e6:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008050ea:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008050ed:	3c 2f                	cmp    al,0x2f
ffff8000008050ef:	74 0a                	je     ffff8000008050fb <write_dev+0x98>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:222 (discriminator 2)
ffff8000008050f1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008050f5:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff8000008050f9:	73 e6                	jae    ffff8000008050e1 <write_dev+0x7e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:223
    if(p>=name)
ffff8000008050fb:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008050ff:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000805103:	72 0c                	jb     ffff800000805111 <write_dev+0xae>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:224
        name=p+1;
ffff800000805105:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000805109:	48 83 c0 01          	add    rax,0x1
ffff80000080510d:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:225
    if(memcmp(name,"tty",3)==0){
ffff800000805111:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000805115:	ba 03 00 00 00       	mov    edx,0x3
ffff80000080511a:	48 b9 a1 d3 ff ff ff 	movabs rcx,0xffffffffffffd3a1
ffff800000805121:	ff ff ff 
ffff800000805124:	48 8d 0c 0b          	lea    rcx,[rbx+rcx*1]
ffff800000805128:	48 89 ce             	mov    rsi,rcx
ffff80000080512b:	48 89 c7             	mov    rdi,rax
ffff80000080512e:	49 89 df             	mov    r15,rbx
ffff800000805131:	48 b8 4c 1d ef ff ff 	movabs rax,0xffffffffffef1d4c
ffff800000805138:	ff ff ff 
ffff80000080513b:	48 01 d8             	add    rax,rbx
ffff80000080513e:	ff d0                	call   rax
ffff800000805140:	85 c0                	test   eax,eax
ffff800000805142:	75 27                	jne    ffff80000080516b <write_dev+0x108>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:226
        return write_tty(filp,buf,count,position);
ffff800000805144:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
ffff800000805148:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000080514c:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
ffff800000805150:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000805154:	48 89 c7             	mov    rdi,rax
ffff800000805157:	49 89 df             	mov    r15,rbx
ffff80000080515a:	48 b8 e0 12 ef ff ff 	movabs rax,0xffffffffffef12e0
ffff800000805161:	ff ff ff 
ffff800000805164:	48 01 d8             	add    rax,rbx
ffff800000805167:	ff d0                	call   rax
ffff800000805169:	eb 5c                	jmp    ffff8000008051c7 <write_dev+0x164>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:227
    }else if(strcmp(name,"console")==0){
ffff80000080516b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080516f:	48 ba 95 d3 ff ff ff 	movabs rdx,0xffffffffffffd395
ffff800000805176:	ff ff ff 
ffff800000805179:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff80000080517d:	48 89 d6             	mov    rsi,rdx
ffff800000805180:	48 89 c7             	mov    rdi,rax
ffff800000805183:	49 89 df             	mov    r15,rbx
ffff800000805186:	48 b8 54 20 ef ff ff 	movabs rax,0xffffffffffef2054
ffff80000080518d:	ff ff ff 
ffff800000805190:	48 01 d8             	add    rax,rbx
ffff800000805193:	ff d0                	call   rax
ffff800000805195:	85 c0                	test   eax,eax
ffff800000805197:	75 27                	jne    ffff8000008051c0 <write_dev+0x15d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:228
        return write_framebuffer(filp,buf,count,position);
ffff800000805199:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
ffff80000080519d:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff8000008051a1:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
ffff8000008051a5:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008051a9:	48 89 c7             	mov    rdi,rax
ffff8000008051ac:	49 89 df             	mov    r15,rbx
ffff8000008051af:	48 b8 9c 94 ee ff ff 	movabs rax,0xffffffffffee949c
ffff8000008051b6:	ff ff ff 
ffff8000008051b9:	48 01 d8             	add    rax,rbx
ffff8000008051bc:	ff d0                	call   rax
ffff8000008051be:	eb 07                	jmp    ffff8000008051c7 <write_dev+0x164>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:230
    }
    return -1;
ffff8000008051c0:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:232

}
ffff8000008051c7:	48 83 c4 40          	add    rsp,0x40
ffff8000008051cb:	5b                   	pop    rbx
ffff8000008051cc:	41 5f                	pop    r15
ffff8000008051ce:	5d                   	pop    rbp
ffff8000008051cf:	c3                   	ret    

ffff8000008051d0 <ioctl_dev>:
ioctl_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:233
long ioctl_dev(struct index_node * inode,struct file * filp,unsigned long cmd,unsigned long arg){
ffff8000008051d0:	f3 0f 1e fa          	endbr64 
ffff8000008051d4:	55                   	push   rbp
ffff8000008051d5:	48 89 e5             	mov    rbp,rsp
ffff8000008051d8:	41 57                	push   r15
ffff8000008051da:	53                   	push   rbx
ffff8000008051db:	48 83 ec 40          	sub    rsp,0x40
ffff8000008051df:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008051df <ioctl_dev+0xf>
ffff8000008051e6:	49 bb 51 e3 11 00 00 	movabs r11,0x11e351
ffff8000008051ed:	00 00 00 
ffff8000008051f0:	4c 01 db             	add    rbx,r11
ffff8000008051f3:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff8000008051f7:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffff8000008051fb:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
ffff8000008051ff:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:235
    //判断是不是块设备文件
    struct index_node* idev=filp->dentry->dir_inode;
ffff800000805203:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000805207:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080520b:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080520f:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:241
    if(IS_BLKDEV(idev->dev)){
        //这里需要调用缓冲区层的函数ioctl块设备
        return 1;
    }
    //查看文件名
    char* name=filp->dentry->name;
ffff800000805213:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000805217:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080521b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080521e:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:242
    char* p=name+ strlen(name)-1;
ffff800000805222:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000805226:	48 89 c7             	mov    rdi,rax
ffff800000805229:	49 89 df             	mov    r15,rbx
ffff80000080522c:	48 b8 d3 20 ef ff ff 	movabs rax,0xffffffffffef20d3
ffff800000805233:	ff ff ff 
ffff800000805236:	48 01 d8             	add    rax,rbx
ffff800000805239:	ff d0                	call   rax
ffff80000080523b:	48 98                	cdqe   
ffff80000080523d:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff800000805241:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000805245:	48 01 d0             	add    rax,rdx
ffff800000805248:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:243
    for(;*p!='/'&&p>=name;p--);
ffff80000080524c:	eb 05                	jmp    ffff800000805253 <ioctl_dev+0x83>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:243 (discriminator 3)
ffff80000080524e:	48 83 6d e0 01       	sub    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:243 (discriminator 1)
ffff800000805253:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000805257:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080525a:	3c 2f                	cmp    al,0x2f
ffff80000080525c:	74 0a                	je     ffff800000805268 <ioctl_dev+0x98>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:243 (discriminator 2)
ffff80000080525e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000805262:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000805266:	73 e6                	jae    ffff80000080524e <ioctl_dev+0x7e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:244
    if(p>=name)
ffff800000805268:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080526c:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000805270:	72 0c                	jb     ffff80000080527e <ioctl_dev+0xae>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:245
        name=p+1;
ffff800000805272:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000805276:	48 83 c0 01          	add    rax,0x1
ffff80000080527a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:246
    if(memcmp(name,"tty",3)==0){
ffff80000080527e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000805282:	ba 03 00 00 00       	mov    edx,0x3
ffff800000805287:	48 b9 a1 d3 ff ff ff 	movabs rcx,0xffffffffffffd3a1
ffff80000080528e:	ff ff ff 
ffff800000805291:	48 8d 0c 0b          	lea    rcx,[rbx+rcx*1]
ffff800000805295:	48 89 ce             	mov    rsi,rcx
ffff800000805298:	48 89 c7             	mov    rdi,rax
ffff80000080529b:	49 89 df             	mov    r15,rbx
ffff80000080529e:	48 b8 4c 1d ef ff ff 	movabs rax,0xffffffffffef1d4c
ffff8000008052a5:	ff ff ff 
ffff8000008052a8:	48 01 d8             	add    rax,rbx
ffff8000008052ab:	ff d0                	call   rax
ffff8000008052ad:	85 c0                	test   eax,eax
ffff8000008052af:	75 27                	jne    ffff8000008052d8 <ioctl_dev+0x108>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:247
        return ioctl_tty(inode, filp, cmd, arg);
ffff8000008052b1:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
ffff8000008052b5:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff8000008052b9:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
ffff8000008052bd:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008052c1:	48 89 c7             	mov    rdi,rax
ffff8000008052c4:	49 89 df             	mov    r15,rbx
ffff8000008052c7:	48 b8 d0 13 ef ff ff 	movabs rax,0xffffffffffef13d0
ffff8000008052ce:	ff ff ff 
ffff8000008052d1:	48 01 d8             	add    rax,rbx
ffff8000008052d4:	ff d0                	call   rax
ffff8000008052d6:	eb 5c                	jmp    ffff800000805334 <ioctl_dev+0x164>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:248
    }else if(strcmp(name,"console")==0){
ffff8000008052d8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008052dc:	48 ba 95 d3 ff ff ff 	movabs rdx,0xffffffffffffd395
ffff8000008052e3:	ff ff ff 
ffff8000008052e6:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff8000008052ea:	48 89 d6             	mov    rsi,rdx
ffff8000008052ed:	48 89 c7             	mov    rdi,rax
ffff8000008052f0:	49 89 df             	mov    r15,rbx
ffff8000008052f3:	48 b8 54 20 ef ff ff 	movabs rax,0xffffffffffef2054
ffff8000008052fa:	ff ff ff 
ffff8000008052fd:	48 01 d8             	add    rax,rbx
ffff800000805300:	ff d0                	call   rax
ffff800000805302:	85 c0                	test   eax,eax
ffff800000805304:	75 27                	jne    ffff80000080532d <ioctl_dev+0x15d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:249
        return ioctl_framebuffer(inode,filp,cmd,arg);
ffff800000805306:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
ffff80000080530a:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000080530e:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
ffff800000805312:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000805316:	48 89 c7             	mov    rdi,rax
ffff800000805319:	49 89 df             	mov    r15,rbx
ffff80000080531c:	48 b8 c2 95 ee ff ff 	movabs rax,0xffffffffffee95c2
ffff800000805323:	ff ff ff 
ffff800000805326:	48 01 d8             	add    rax,rbx
ffff800000805329:	ff d0                	call   rax
ffff80000080532b:	eb 07                	jmp    ffff800000805334 <ioctl_dev+0x164>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:251
    }
    return -1;
ffff80000080532d:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:253

}
ffff800000805334:	48 83 c4 40          	add    rsp,0x40
ffff800000805338:	5b                   	pop    rbx
ffff800000805339:	41 5f                	pop    r15
ffff80000080533b:	5d                   	pop    rbp
ffff80000080533c:	c3                   	ret    

ffff80000080533d <load_driver>:
load_driver():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:255
int load_driver(char *path)
{
ffff80000080533d:	f3 0f 1e fa          	endbr64 
ffff800000805341:	55                   	push   rbp
ffff800000805342:	48 89 e5             	mov    rbp,rsp
ffff800000805345:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000805345 <load_driver+0x8>
ffff80000080534c:	49 bb eb e1 11 00 00 	movabs r11,0x11e1eb
ffff800000805353:	00 00 00 
ffff800000805356:	4c 01 d8             	add    rax,r11
ffff800000805359:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:257
    
}
ffff80000080535d:	90                   	nop
ffff80000080535e:	5d                   	pop    rbp
ffff80000080535f:	c3                   	ret    

ffff800000805360 <init_proc>:
init_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:29
int cur_proc=0;
int pidd=0;
int palloc_paddr=0;
static pid_t sidd=0;
mmap_struct* all_mmaps=NULL;
void init_proc(){
ffff800000805360:	f3 0f 1e fa          	endbr64 
ffff800000805364:	55                   	push   rbp
ffff800000805365:	48 89 e5             	mov    rbp,rsp
ffff800000805368:	41 57                	push   r15
ffff80000080536a:	53                   	push   rbx
ffff80000080536b:	48 83 ec 10          	sub    rsp,0x10
ffff80000080536f:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080536f <init_proc+0xf>
ffff800000805376:	49 bb c1 e1 11 00 00 	movabs r11,0x11e1c1
ffff80000080537d:	00 00 00 
ffff800000805380:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:31
    //task=(struct process*)get_global_var(TASK_PCBS_ADDR);//[MAX_TASKS];;
    task=(struct process*)kmallocat(0,13);
ffff800000805383:	be 0d 00 00 00       	mov    esi,0xd
ffff800000805388:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080538d:	49 89 df             	mov    r15,rbx
ffff800000805390:	48 b8 22 ee ed ff ff 	movabs rax,0xffffffffffedee22
ffff800000805397:	ff ff ff 
ffff80000080539a:	48 01 d8             	add    rax,rbx
ffff80000080539d:	ff d0                	call   rax
ffff80000080539f:	48 89 c2             	mov    rdx,rax
ffff8000008053a2:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff8000008053a9:	ff ff ff 
ffff8000008053ac:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008053b0:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:32
    for(int i=0;i<MAX_PROC_COUNT;i++){
ffff8000008053b3:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff8000008053ba:	e9 b1 00 00 00       	jmp    ffff800000805470 <init_proc+0x110>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:33 (discriminator 3)
        task[i].pid=-1;
ffff8000008053bf:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff8000008053c6:	ff ff ff 
ffff8000008053c9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008053cd:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008053d0:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008053d3:	48 63 d0             	movsxd rdx,eax
ffff8000008053d6:	48 89 d0             	mov    rax,rdx
ffff8000008053d9:	48 01 c0             	add    rax,rax
ffff8000008053dc:	48 01 d0             	add    rax,rdx
ffff8000008053df:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008053e6:	00 
ffff8000008053e7:	48 01 d0             	add    rax,rdx
ffff8000008053ea:	48 c1 e0 05          	shl    rax,0x5
ffff8000008053ee:	48 01 c8             	add    rax,rcx
ffff8000008053f1:	c7 00 ff ff ff ff    	mov    DWORD PTR [rax],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:34 (discriminator 3)
        task[i].stat=TASK_EMPTY;
ffff8000008053f7:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff8000008053fe:	ff ff ff 
ffff800000805401:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805405:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000805408:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080540b:	48 63 d0             	movsxd rdx,eax
ffff80000080540e:	48 89 d0             	mov    rax,rdx
ffff800000805411:	48 01 c0             	add    rax,rax
ffff800000805414:	48 01 d0             	add    rax,rdx
ffff800000805417:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080541e:	00 
ffff80000080541f:	48 01 d0             	add    rax,rdx
ffff800000805422:	48 c1 e0 05          	shl    rax,0x5
ffff800000805426:	48 01 c8             	add    rax,rcx
ffff800000805429:	c7 40 18 00 00 00 00 	mov    DWORD PTR [rax+0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:35 (discriminator 3)
        task[i].parent_pid=-1;
ffff800000805430:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000805437:	ff ff ff 
ffff80000080543a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080543e:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000805441:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000805444:	48 63 d0             	movsxd rdx,eax
ffff800000805447:	48 89 d0             	mov    rax,rdx
ffff80000080544a:	48 01 c0             	add    rax,rax
ffff80000080544d:	48 01 d0             	add    rax,rdx
ffff800000805450:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000805457:	00 
ffff800000805458:	48 01 d0             	add    rax,rdx
ffff80000080545b:	48 c1 e0 05          	shl    rax,0x5
ffff80000080545f:	48 01 c8             	add    rax,rcx
ffff800000805462:	c7 80 bc 00 00 00 ff 	mov    DWORD PTR [rax+0xbc],0xffffffff
ffff800000805469:	ff ff ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:32 (discriminator 3)
    for(int i=0;i<MAX_PROC_COUNT;i++){
ffff80000080546c:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:32 (discriminator 1)
ffff800000805470:	83 7d ec 3f          	cmp    DWORD PTR [rbp-0x14],0x3f
ffff800000805474:	0f 8e 45 ff ff ff    	jle    ffff8000008053bf <init_proc+0x5f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:37
    }
    cur_proc=0;//proc zero
ffff80000080547a:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff800000805481:	ff ff ff 
ffff800000805484:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805488:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:38
    current=task;
ffff80000080548e:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000805495:	ff ff ff 
ffff800000805498:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080549c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080549f:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff8000008054a6:	ff ff ff 
ffff8000008054a9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008054ad:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:39
    pidd=1;
ffff8000008054b0:	48 b8 10 fe ff ff ff 	movabs rax,0xfffffffffffffe10
ffff8000008054b7:	ff ff ff 
ffff8000008054ba:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008054be:	c7 00 01 00 00 00    	mov    DWORD PTR [rax],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:44


    //__asm__ volatile("lldt %0"::"m"(xi));
    //__asm__ volatile("ltr %0"::"m"(zi));
    set_tss(0x400000+KNL_BASE,0x400000+KNL_BASE,0x400000+KNL_BASE\
ffff8000008054c4:	68 00 00 80 00       	push   0x800000
ffff8000008054c9:	c7 44 24 04 00 80 ff 	mov    DWORD PTR [rsp+0x4],0xffff8000
ffff8000008054d0:	ff 
ffff8000008054d1:	68 00 00 80 00       	push   0x800000
ffff8000008054d6:	c7 44 24 04 00 80 ff 	mov    DWORD PTR [rsp+0x4],0xffff8000
ffff8000008054dd:	ff 
ffff8000008054de:	68 00 00 80 00       	push   0x800000
ffff8000008054e3:	c7 44 24 04 00 80 ff 	mov    DWORD PTR [rsp+0x4],0xffff8000
ffff8000008054ea:	ff 
ffff8000008054eb:	68 00 00 80 00       	push   0x800000
ffff8000008054f0:	c7 44 24 04 00 80 ff 	mov    DWORD PTR [rsp+0x4],0xffff8000
ffff8000008054f7:	ff 
ffff8000008054f8:	49 b9 00 00 80 00 00 	movabs r9,0xffff800000800000
ffff8000008054ff:	80 ff ff 
ffff800000805502:	49 b8 00 00 80 00 00 	movabs r8,0xffff800000800000
ffff800000805509:	80 ff ff 
ffff80000080550c:	48 b8 00 00 80 00 00 	movabs rax,0xffff800000800000
ffff800000805513:	80 ff ff 
ffff800000805516:	48 89 c1             	mov    rcx,rax
ffff800000805519:	48 b8 00 00 40 00 00 	movabs rax,0xffff800000400000
ffff800000805520:	80 ff ff 
ffff800000805523:	48 89 c2             	mov    rdx,rax
ffff800000805526:	48 b8 00 00 40 00 00 	movabs rax,0xffff800000400000
ffff80000080552d:	80 ff ff 
ffff800000805530:	48 89 c6             	mov    rsi,rax
ffff800000805533:	48 b8 00 00 40 00 00 	movabs rax,0xffff800000400000
ffff80000080553a:	80 ff ff 
ffff80000080553d:	48 89 c7             	mov    rdi,rax
ffff800000805540:	49 89 df             	mov    r15,rbx
ffff800000805543:	48 b8 f0 41 ee ff ff 	movabs rax,0xffffffffffee41f0
ffff80000080554a:	ff ff ff 
ffff80000080554d:	48 01 d8             	add    rax,rbx
ffff800000805550:	ff d0                	call   rax
ffff800000805552:	48 83 c4 20          	add    rsp,0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:49
    ,0x800000+KNL_BASE,0x800000+KNL_BASE,0x800000+KNL_BASE,0x800000+KNL_BASE\
    ,0x800000+KNL_BASE,0x800000+KNL_BASE,0x800000+KNL_BASE);

    //===============创建0号进程======================
    int zi= init_proc0();
ffff800000805556:	49 89 df             	mov    r15,rbx
ffff800000805559:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080555e:	48 ba 76 24 ee ff ff 	movabs rdx,0xffffffffffee2476
ffff800000805565:	ff ff ff 
ffff800000805568:	48 01 da             	add    rdx,rbx
ffff80000080556b:	ff d2                	call   rdx
ffff80000080556d:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:50
    task[zi].stat=TASK_READY;
ffff800000805570:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000805577:	ff ff ff 
ffff80000080557a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080557e:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000805581:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000805584:	48 63 d0             	movsxd rdx,eax
ffff800000805587:	48 89 d0             	mov    rax,rdx
ffff80000080558a:	48 01 c0             	add    rax,rax
ffff80000080558d:	48 01 d0             	add    rax,rdx
ffff800000805590:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000805597:	00 
ffff800000805598:	48 01 d0             	add    rax,rdx
ffff80000080559b:	48 c1 e0 05          	shl    rax,0x5
ffff80000080559f:	48 01 c8             	add    rax,rcx
ffff8000008055a2:	c7 40 18 02 00 00 00 	mov    DWORD PTR [rax+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:52
    //IA32_INTERRUPT_SSP_TABLE_ADDR，准备IST
    wrmsr(0x6a8,tss->rsvd2);
ffff8000008055a9:	48 b8 b8 fd ff ff ff 	movabs rax,0xfffffffffffffdb8
ffff8000008055b0:	ff ff ff 
ffff8000008055b3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008055b7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008055ba:	48 8b 40 1c          	mov    rax,QWORD PTR [rax+0x1c]
ffff8000008055be:	48 89 c6             	mov    rsi,rax
ffff8000008055c1:	bf a8 06 00 00       	mov    edi,0x6a8
ffff8000008055c6:	49 89 df             	mov    r15,rbx
ffff8000008055c9:	48 b8 56 d9 ed ff ff 	movabs rax,0xffffffffffedd956
ffff8000008055d0:	ff ff ff 
ffff8000008055d3:	48 01 d8             	add    rax,rbx
ffff8000008055d6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:54
    //把内核代码段选择子写到MSR寄存器中准备用于特权级转换(sysexit，现在没用)
    wrmsr(0x174,0x8);
ffff8000008055d8:	be 08 00 00 00       	mov    esi,0x8
ffff8000008055dd:	bf 74 01 00 00       	mov    edi,0x174
ffff8000008055e2:	49 89 df             	mov    r15,rbx
ffff8000008055e5:	48 b8 56 d9 ed ff ff 	movabs rax,0xffffffffffedd956
ffff8000008055ec:	ff ff ff 
ffff8000008055ef:	48 01 d8             	add    rax,rbx
ffff8000008055f2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:56
    //准备用于特权级转换(sysret，正在使用)
    wrmsr(0xc0000081,0x0020000800000000ul);
ffff8000008055f4:	48 b8 00 00 00 00 08 	movabs rax,0x20000800000000
ffff8000008055fb:	00 20 00 
ffff8000008055fe:	48 89 c6             	mov    rsi,rax
ffff800000805601:	b8 81 00 00 c0       	mov    eax,0xc0000081
ffff800000805606:	48 89 c7             	mov    rdi,rax
ffff800000805609:	49 89 df             	mov    r15,rbx
ffff80000080560c:	48 b8 56 d9 ed ff ff 	movabs rax,0xffffffffffedd956
ffff800000805613:	ff ff ff 
ffff800000805616:	48 01 d8             	add    rax,rbx
ffff800000805619:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:58

    comprintf("proc init set.\r\ntss.ist=0x%p\r\n",tss->ists[0]);
ffff80000080561b:	48 b8 b8 fd ff ff ff 	movabs rax,0xfffffffffffffdb8
ffff800000805622:	ff ff ff 
ffff800000805625:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805629:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080562c:	48 8b 40 24          	mov    rax,QWORD PTR [rax+0x24]
ffff800000805630:	48 89 c6             	mov    rsi,rax
ffff800000805633:	48 b8 b0 d3 ff ff ff 	movabs rax,0xffffffffffffd3b0
ffff80000080563a:	ff ff ff 
ffff80000080563d:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000805641:	48 89 c7             	mov    rdi,rax
ffff800000805644:	49 89 df             	mov    r15,rbx
ffff800000805647:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080564c:	48 ba 62 18 ef ff ff 	movabs rdx,0xffffffffffef1862
ffff800000805653:	ff ff ff 
ffff800000805656:	48 01 da             	add    rdx,rbx
ffff800000805659:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:61
    //创建一个测试进程
//    create_test_proc();
}
ffff80000080565b:	90                   	nop
ffff80000080565c:	48 8d 65 f0          	lea    rsp,[rbp-0x10]
ffff800000805660:	5b                   	pop    rbx
ffff800000805661:	41 5f                	pop    r15
ffff800000805663:	5d                   	pop    rbp
ffff800000805664:	c3                   	ret    

ffff800000805665 <create_test_proc>:
create_test_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:62
void create_test_proc(){
ffff800000805665:	f3 0f 1e fa          	endbr64 
ffff800000805669:	55                   	push   rbp
ffff80000080566a:	48 89 e5             	mov    rbp,rsp
ffff80000080566d:	41 57                	push   r15
ffff80000080566f:	53                   	push   rbx
ffff800000805670:	48 83 ec 20          	sub    rsp,0x20
ffff800000805674:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000805674 <create_test_proc+0xf>
ffff80000080567b:	49 bb bc de 11 00 00 	movabs r11,0x11debc
ffff800000805682:	00 00 00 
ffff800000805685:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:64

    int index=req_proc();
ffff800000805688:	49 89 df             	mov    r15,rbx
ffff80000080568b:	b8 00 00 00 00       	mov    eax,0x0
ffff800000805690:	48 ba b8 26 ee ff ff 	movabs rdx,0xffffffffffee26b8
ffff800000805697:	ff ff ff 
ffff80000080569a:	48 01 da             	add    rdx,rbx
ffff80000080569d:	ff d2                	call   rdx
ffff80000080569f:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:65
    task[index].stat=TASK_READY;
ffff8000008056a2:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff8000008056a9:	ff ff ff 
ffff8000008056ac:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008056b0:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008056b3:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008056b6:	48 63 d0             	movsxd rdx,eax
ffff8000008056b9:	48 89 d0             	mov    rax,rdx
ffff8000008056bc:	48 01 c0             	add    rax,rax
ffff8000008056bf:	48 01 d0             	add    rax,rdx
ffff8000008056c2:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008056c9:	00 
ffff8000008056ca:	48 01 d0             	add    rax,rdx
ffff8000008056cd:	48 c1 e0 05          	shl    rax,0x5
ffff8000008056d1:	48 01 c8             	add    rax,rcx
ffff8000008056d4:	c7 40 18 02 00 00 00 	mov    DWORD PTR [rax+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:66
    int currsp=0x9fc00-1;
ffff8000008056db:	c7 45 dc ff fb 09 00 	mov    DWORD PTR [rbp-0x24],0x9fbff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:67
    __asm__ volatile("mov %%rsp,%0":"=m"(currsp));
ffff8000008056e2:	48 89 65 dc          	mov    QWORD PTR [rbp-0x24],rsp
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:68
    set_proc(0, 0, 0, 0, 0x10, 0x8, 0x10, 0x10, 0x10, 0x10,
ffff8000008056e6:	48 b8 98 fd ff ff ff 	movabs rax,0xfffffffffffffd98
ffff8000008056ed:	ff ff ff 
ffff8000008056f0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008056f4:	48 89 c2             	mov    rdx,rax
ffff8000008056f7:	48 83 ec 08          	sub    rsp,0x8
ffff8000008056fb:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008056fe:	50                   	push   rax
ffff8000008056ff:	6a 00                	push   0x0
ffff800000805701:	52                   	push   rdx
ffff800000805702:	6a 00                	push   0x0
ffff800000805704:	6a 00                	push   0x0
ffff800000805706:	6a 00                	push   0x0
ffff800000805708:	68 58 7d 00 00       	push   0x7d58
ffff80000080570d:	6a 10                	push   0x10
ffff80000080570f:	6a 10                	push   0x10
ffff800000805711:	6a 10                	push   0x10
ffff800000805713:	6a 10                	push   0x10
ffff800000805715:	41 b9 08 00 00 00    	mov    r9d,0x8
ffff80000080571b:	41 b8 10 00 00 00    	mov    r8d,0x10
ffff800000805721:	b9 00 00 00 00       	mov    ecx,0x0
ffff800000805726:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080572b:	be 00 00 00 00       	mov    esi,0x0
ffff800000805730:	bf 00 00 00 00       	mov    edi,0x0
ffff800000805735:	49 89 df             	mov    r15,rbx
ffff800000805738:	48 b8 70 28 ee ff ff 	movabs rax,0xffffffffffee2870
ffff80000080573f:	ff ff ff 
ffff800000805742:	48 01 d8             	add    rax,rbx
ffff800000805745:	ff d0                	call   rax
ffff800000805747:	48 83 c4 60          	add    rsp,0x60
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:70
             0x7e00- sizeof(stack_store_regs), 0, 0, 0, (long)_syscall_sysret, 0, index);
    task[index].tss.rsp0=0x400000;
ffff80000080574b:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000805752:	ff ff ff 
ffff800000805755:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805759:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080575c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080575f:	48 63 d0             	movsxd rdx,eax
ffff800000805762:	48 89 d0             	mov    rax,rdx
ffff800000805765:	48 01 c0             	add    rax,rax
ffff800000805768:	48 01 d0             	add    rax,rdx
ffff80000080576b:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000805772:	00 
ffff800000805773:	48 01 d0             	add    rax,rdx
ffff800000805776:	48 c1 e0 05          	shl    rax,0x5
ffff80000080577a:	48 01 c8             	add    rax,rcx
ffff80000080577d:	48 c7 80 fc 01 00 00 	mov    QWORD PTR [rax+0x1fc],0x400000
ffff800000805784:	00 00 40 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:71
    task[index].mem_struct.stack_top=0x7e00;
ffff800000805788:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff80000080578f:	ff ff ff 
ffff800000805792:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805796:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000805799:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080579c:	48 63 d0             	movsxd rdx,eax
ffff80000080579f:	48 89 d0             	mov    rax,rdx
ffff8000008057a2:	48 01 c0             	add    rax,rax
ffff8000008057a5:	48 01 d0             	add    rax,rdx
ffff8000008057a8:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008057af:	00 
ffff8000008057b0:	48 01 d0             	add    rax,rdx
ffff8000008057b3:	48 c1 e0 05          	shl    rax,0x5
ffff8000008057b7:	48 01 c8             	add    rax,rcx
ffff8000008057ba:	48 c7 40 40 00 7e 00 	mov    QWORD PTR [rax+0x40],0x7e00
ffff8000008057c1:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:72
    task[index].mem_struct.stack_bottom=0x6e00;
ffff8000008057c2:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff8000008057c9:	ff ff ff 
ffff8000008057cc:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008057d0:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008057d3:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008057d6:	48 63 d0             	movsxd rdx,eax
ffff8000008057d9:	48 89 d0             	mov    rax,rdx
ffff8000008057dc:	48 01 c0             	add    rax,rax
ffff8000008057df:	48 01 d0             	add    rax,rdx
ffff8000008057e2:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008057e9:	00 
ffff8000008057ea:	48 01 d0             	add    rax,rdx
ffff8000008057ed:	48 c1 e0 05          	shl    rax,0x5
ffff8000008057f1:	48 01 c8             	add    rax,rcx
ffff8000008057f4:	48 c7 40 38 00 6e 00 	mov    QWORD PTR [rax+0x38],0x6e00
ffff8000008057fb:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:73
    task[index].mem_struct.heap_top=0x1101000;
ffff8000008057fc:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000805803:	ff ff ff 
ffff800000805806:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080580a:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080580d:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000805810:	48 63 d0             	movsxd rdx,eax
ffff800000805813:	48 89 d0             	mov    rax,rdx
ffff800000805816:	48 01 c0             	add    rax,rax
ffff800000805819:	48 01 d0             	add    rax,rdx
ffff80000080581c:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000805823:	00 
ffff800000805824:	48 01 d0             	add    rax,rdx
ffff800000805827:	48 c1 e0 05          	shl    rax,0x5
ffff80000080582b:	48 01 c8             	add    rax,rcx
ffff80000080582e:	48 c7 40 30 00 10 10 	mov    QWORD PTR [rax+0x30],0x1101000
ffff800000805835:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:74
    task[index].mem_struct.heap_base=0x1100000;
ffff800000805836:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff80000080583d:	ff ff ff 
ffff800000805840:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805844:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000805847:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080584a:	48 63 d0             	movsxd rdx,eax
ffff80000080584d:	48 89 d0             	mov    rax,rdx
ffff800000805850:	48 01 c0             	add    rax,rax
ffff800000805853:	48 01 d0             	add    rax,rdx
ffff800000805856:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080585d:	00 
ffff80000080585e:	48 01 d0             	add    rax,rdx
ffff800000805861:	48 c1 e0 05          	shl    rax,0x5
ffff800000805865:	48 01 c8             	add    rax,rcx
ffff800000805868:	48 c7 40 28 00 00 10 	mov    QWORD PTR [rax+0x28],0x1100000
ffff80000080586f:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:77

    //把还原现场时用到的堆栈设置好
    stack_store_regs *str= (stack_store_regs *) (0x7e00 - sizeof(stack_store_regs));
ffff800000805870:	48 c7 45 e0 58 7d 00 	mov    QWORD PTR [rbp-0x20],0x7d58
ffff800000805877:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:78
    str->rax=0;
ffff800000805878:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080587c:	48 c7 40 78 00 00 00 	mov    QWORD PTR [rax+0x78],0x0
ffff800000805883:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:79
    str->rbx=0;
ffff800000805884:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000805888:	48 c7 40 70 00 00 00 	mov    QWORD PTR [rax+0x70],0x0
ffff80000080588f:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:80
    str->rcx=proc_zero;//sysret采用的返回地址
ffff800000805890:	48 b8 e0 fe ff ff ff 	movabs rax,0xfffffffffffffee0
ffff800000805897:	ff ff ff 
ffff80000080589a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080589e:	48 89 c2             	mov    rdx,rax
ffff8000008058a1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008058a5:	48 89 50 68          	mov    QWORD PTR [rax+0x68],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:81
    str->rdx=0;
ffff8000008058a9:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008058ad:	48 c7 40 60 00 00 00 	mov    QWORD PTR [rax+0x60],0x0
ffff8000008058b4:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:82
    str->rsi=0;
ffff8000008058b5:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008058b9:	48 c7 40 50 00 00 00 	mov    QWORD PTR [rax+0x50],0x0
ffff8000008058c0:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:83
    str->rdi=0;
ffff8000008058c1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008058c5:	48 c7 40 58 00 00 00 	mov    QWORD PTR [rax+0x58],0x0
ffff8000008058cc:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:84
    str->r15=0;
ffff8000008058cd:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008058d1:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff8000008058d8:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:85
    str->r14=0;
ffff8000008058d9:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008058dd:	48 c7 40 18 00 00 00 	mov    QWORD PTR [rax+0x18],0x0
ffff8000008058e4:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:86
    str->r13=0;
ffff8000008058e5:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008058e9:	48 c7 40 20 00 00 00 	mov    QWORD PTR [rax+0x20],0x0
ffff8000008058f0:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:87
    str->r12=0;
ffff8000008058f1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008058f5:	48 c7 40 28 00 00 00 	mov    QWORD PTR [rax+0x28],0x0
ffff8000008058fc:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:88
    str->r11=0x200;
ffff8000008058fd:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000805901:	48 c7 40 30 00 02 00 	mov    QWORD PTR [rax+0x30],0x200
ffff800000805908:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:89
    str->r10=0;
ffff800000805909:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080590d:	48 c7 40 38 00 00 00 	mov    QWORD PTR [rax+0x38],0x0
ffff800000805914:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:90
    str->r9=0;
ffff800000805915:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000805919:	48 c7 40 40 00 00 00 	mov    QWORD PTR [rax+0x40],0x0
ffff800000805920:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:91
    str->r8=0;
ffff800000805921:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000805925:	48 c7 40 48 00 00 00 	mov    QWORD PTR [rax+0x48],0x0
ffff80000080592c:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:92
    str->rip=proc_zero;
ffff80000080592d:	48 b8 e0 fe ff ff ff 	movabs rax,0xfffffffffffffee0
ffff800000805934:	ff ff ff 
ffff800000805937:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080593b:	48 89 c2             	mov    rdx,rax
ffff80000080593e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000805942:	48 89 90 80 00 00 00 	mov    QWORD PTR [rax+0x80],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:93
    str->cs=0x8;
ffff800000805949:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080594d:	48 c7 80 88 00 00 00 	mov    QWORD PTR [rax+0x88],0x8
ffff800000805954:	08 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:94
    str->rflags=0x00200206;
ffff800000805958:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080595c:	48 c7 80 90 00 00 00 	mov    QWORD PTR [rax+0x90],0x200206
ffff800000805963:	06 02 20 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:95
    str->rsp=0x7e00;
ffff800000805967:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080596b:	48 c7 80 98 00 00 00 	mov    QWORD PTR [rax+0x98],0x7e00
ffff800000805972:	00 7e 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:96
    str->ss=0x2b;
ffff800000805976:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080597a:	48 c7 80 a0 00 00 00 	mov    QWORD PTR [rax+0xa0],0x2b
ffff800000805981:	2b 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:97
    str->ds=0x2b;
ffff800000805985:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000805989:	48 c7 00 2b 00 00 00 	mov    QWORD PTR [rax],0x2b
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:98
    str->es=0x2b;
ffff800000805990:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000805994:	48 c7 40 08 2b 00 00 	mov    QWORD PTR [rax+0x8],0x2b
ffff80000080599b:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:100

}
ffff80000080599c:	90                   	nop
ffff80000080599d:	48 8d 65 f0          	lea    rsp,[rbp-0x10]
ffff8000008059a1:	5b                   	pop    rbx
ffff8000008059a2:	41 5f                	pop    r15
ffff8000008059a4:	5d                   	pop    rbp
ffff8000008059a5:	c3                   	ret    

ffff8000008059a6 <init_proc0>:
init_proc0():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:102
int init_proc0()
{
ffff8000008059a6:	f3 0f 1e fa          	endbr64 
ffff8000008059aa:	55                   	push   rbp
ffff8000008059ab:	48 89 e5             	mov    rbp,rsp
ffff8000008059ae:	41 57                	push   r15
ffff8000008059b0:	53                   	push   rbx
ffff8000008059b1:	48 83 ec 10          	sub    rsp,0x10
ffff8000008059b5:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008059b5 <init_proc0+0xf>
ffff8000008059bc:	49 bb 7b db 11 00 00 	movabs r11,0x11db7b
ffff8000008059c3:	00 00 00 
ffff8000008059c6:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:104

    task[0].pid=pidd++;
ffff8000008059c9:	48 b8 10 fe ff ff ff 	movabs rax,0xfffffffffffffe10
ffff8000008059d0:	ff ff ff 
ffff8000008059d3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008059d7:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008059d9:	8d 48 01             	lea    ecx,[rax+0x1]
ffff8000008059dc:	48 ba 10 fe ff ff ff 	movabs rdx,0xfffffffffffffe10
ffff8000008059e3:	ff ff ff 
ffff8000008059e6:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff8000008059ea:	89 0a                	mov    DWORD PTR [rdx],ecx
ffff8000008059ec:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff8000008059f3:	ff ff ff 
ffff8000008059f6:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff8000008059fa:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008059fd:	89 02                	mov    DWORD PTR [rdx],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:105
    task[0].stat=TASK_RUNNING;
ffff8000008059ff:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000805a06:	ff ff ff 
ffff800000805a09:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805a0d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000805a10:	c7 40 18 01 00 00 00 	mov    DWORD PTR [rax+0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:106
    task[0].utime=0;
ffff800000805a17:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000805a1e:	ff ff ff 
ffff800000805a21:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805a25:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000805a28:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [rax+0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:107
    task[0].priority=0;
ffff800000805a2f:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000805a36:	ff ff ff 
ffff800000805a39:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805a3d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000805a40:	c7 40 20 00 00 00 00 	mov    DWORD PTR [rax+0x20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:109

    struct process *pz=task;
ffff800000805a47:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000805a4e:	ff ff ff 
ffff800000805a51:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805a55:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000805a58:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:118
//    task[index].tss.eip=(long)proc_zero;
    extern struct dir_entry* dtty;
    //stdin stdout stderr
    //这里绕开了sys open，这样是为了尽量快
    extern struct file ftty;
    pz->openf[0]=(struct file*)&ftty;
ffff800000805a5c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000805a60:	48 ba d0 fd ff ff ff 	movabs rdx,0xfffffffffffffdd0
ffff800000805a67:	ff ff ff 
ffff800000805a6a:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000805a6e:	48 89 90 f8 00 00 00 	mov    QWORD PTR [rax+0xf8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:119
    pz->openf[1]=(struct file*)&ftty;
ffff800000805a75:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000805a79:	48 ba d0 fd ff ff ff 	movabs rdx,0xfffffffffffffdd0
ffff800000805a80:	ff ff ff 
ffff800000805a83:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000805a87:	48 89 90 00 01 00 00 	mov    QWORD PTR [rax+0x100],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:120
    pz->openf[2]=(struct file*)&ftty;
ffff800000805a8e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000805a92:	48 ba d0 fd ff ff ff 	movabs rdx,0xfffffffffffffdd0
ffff800000805a99:	ff ff ff 
ffff800000805a9c:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000805aa0:	48 89 90 08 01 00 00 	mov    QWORD PTR [rax+0x108],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:122

    pz->mem_struct.stack_top=STACK_TOP;
ffff800000805aa7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000805aab:	48 be 00 f0 ff ff ff 	movabs rsi,0x7ffffffff000
ffff800000805ab2:	7f 00 00 
ffff800000805ab5:	48 89 70 40          	mov    QWORD PTR [rax+0x40],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:123
    pz->mem_struct.stack_bottom=STACK_TOP;
ffff800000805ab9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000805abd:	48 89 70 38          	mov    QWORD PTR [rax+0x38],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:124
    pz->mem_struct.heap_top=HEAP_BASE;
ffff800000805ac1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000805ac5:	48 c7 40 30 00 00 00 	mov    QWORD PTR [rax+0x30],0x1000000
ffff800000805acc:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:125
    pz->mem_struct.heap_base=HEAP_BASE;
ffff800000805acd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000805ad1:	48 c7 40 28 00 00 00 	mov    QWORD PTR [rax+0x28],0x1000000
ffff800000805ad8:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:126
    memcpy(&pz->tss,tss, sizeof(TSS));
ffff800000805ad9:	48 b8 b8 fd ff ff ff 	movabs rax,0xfffffffffffffdb8
ffff800000805ae0:	ff ff ff 
ffff800000805ae3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805ae7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000805aea:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000805aee:	48 8d 8a f8 01 00 00 	lea    rcx,[rdx+0x1f8]
ffff800000805af5:	ba 6c 00 00 00       	mov    edx,0x6c
ffff800000805afa:	48 89 c6             	mov    rsi,rax
ffff800000805afd:	48 89 cf             	mov    rdi,rcx
ffff800000805b00:	49 89 df             	mov    r15,rbx
ffff800000805b03:	48 b8 02 1d ef ff ff 	movabs rax,0xffffffffffef1d02
ffff800000805b0a:	ff ff ff 
ffff800000805b0d:	48 01 d8             	add    rax,rbx
ffff800000805b10:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:128

    pz->child_procs=NULL;
ffff800000805b12:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000805b16:	48 c7 80 54 03 00 00 	mov    QWORD PTR [rax+0x354],0x0
ffff800000805b1d:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:131

    //这个是进程切换的时候要读取的值
    pz->regs.cr3=PML4_ADDR&~KNL_BASE;
ffff800000805b21:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000805b25:	48 c7 80 64 02 00 00 	mov    QWORD PTR [rax+0x264],0x101000
ffff800000805b2c:	00 10 10 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:132
    pz->pml4=PML4_ADDR;
ffff800000805b30:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000805b34:	48 bf 00 10 10 00 00 	movabs rdi,0xffff800000101000
ffff800000805b3b:	80 ff ff 
ffff800000805b3e:	48 89 b8 e0 00 00 00 	mov    QWORD PTR [rax+0xe0],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:133
    pz->cwd=root_sb->root;
ffff800000805b45:	48 b8 90 fd ff ff ff 	movabs rax,0xfffffffffffffd90
ffff800000805b4c:	ff ff ff 
ffff800000805b4f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805b53:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000805b56:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805b59:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000805b5d:	48 89 90 e8 00 00 00 	mov    QWORD PTR [rax+0xe8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:134
    pz->exef=NULL;
ffff800000805b64:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000805b68:	48 c7 80 f0 00 00 00 	mov    QWORD PTR [rax+0xf0],0x0
ffff800000805b6f:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:135
    list_init(&pz->node);
ffff800000805b73:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000805b77:	48 05 3c 03 00 00    	add    rax,0x33c
ffff800000805b7d:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff800000805b81:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000805b85:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff800000805b8c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000805b90:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff800000805b97:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff800000805b98:	90                   	nop
init_proc0():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:136
    pz->node.data=pz;
ffff800000805b99:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000805b9d:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000805ba1:	48 89 90 44 03 00 00 	mov    QWORD PTR [rax+0x344],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:138
    
    pz->gpid=pz->pid;
ffff800000805ba8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000805bac:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000805bae:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000805bb2:	89 50 04             	mov    DWORD PTR [rax+0x4],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:139
    pz->sid=pz->pid;
ffff800000805bb5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000805bb9:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000805bbb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000805bbf:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:140
    pz->fg_pgid=pz->pid;
ffff800000805bc2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000805bc6:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000805bc8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000805bcc:	89 50 0c             	mov    DWORD PTR [rax+0xc],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:141
    pz->in_bgpg=0;
ffff800000805bcf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000805bd3:	c7 40 10 00 00 00 00 	mov    DWORD PTR [rax+0x10],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:142
    return 0;
ffff800000805bda:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:143
}
ffff800000805bdf:	48 83 c4 10          	add    rsp,0x10
ffff800000805be3:	5b                   	pop    rbx
ffff800000805be4:	41 5f                	pop    r15
ffff800000805be6:	5d                   	pop    rbp
ffff800000805be7:	c3                   	ret    

ffff800000805be8 <req_proc>:
req_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:144
int req_proc(){
ffff800000805be8:	f3 0f 1e fa          	endbr64 
ffff800000805bec:	55                   	push   rbp
ffff800000805bed:	48 89 e5             	mov    rbp,rsp
ffff800000805bf0:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000805bf0 <req_proc+0x8>
ffff800000805bf7:	49 bb 40 d9 11 00 00 	movabs r11,0x11d940
ffff800000805bfe:	00 00 00 
ffff800000805c01:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:145
    int num=0;
ffff800000805c04:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:146
    while(task[num].pid!=-1 && task[num].stat != TASK_EMPTY && \
ffff800000805c0b:	eb 04                	jmp    ffff800000805c11 <req_proc+0x29>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:148
    num<=MAX_PROC_COUNT){
        num++;
ffff800000805c0d:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:146
    while(task[num].pid!=-1 && task[num].stat != TASK_EMPTY && \
ffff800000805c11:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff800000805c18:	ff ff ff 
ffff800000805c1b:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805c1f:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff800000805c22:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000805c25:	48 63 ca             	movsxd rcx,edx
ffff800000805c28:	48 89 ca             	mov    rdx,rcx
ffff800000805c2b:	48 01 d2             	add    rdx,rdx
ffff800000805c2e:	48 01 ca             	add    rdx,rcx
ffff800000805c31:	48 8d 0c d5 00 00 00 	lea    rcx,[rdx*8+0x0]
ffff800000805c38:	00 
ffff800000805c39:	48 01 ca             	add    rdx,rcx
ffff800000805c3c:	48 c1 e2 05          	shl    rdx,0x5
ffff800000805c40:	48 01 f2             	add    rdx,rsi
ffff800000805c43:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000805c45:	83 fa ff             	cmp    edx,0xffffffff
ffff800000805c48:	74 3f                	je     ffff800000805c89 <req_proc+0xa1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:146 (discriminator 1)
ffff800000805c4a:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff800000805c51:	ff ff ff 
ffff800000805c54:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805c58:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff800000805c5b:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000805c5e:	48 63 ca             	movsxd rcx,edx
ffff800000805c61:	48 89 ca             	mov    rdx,rcx
ffff800000805c64:	48 01 d2             	add    rdx,rdx
ffff800000805c67:	48 01 ca             	add    rdx,rcx
ffff800000805c6a:	48 8d 0c d5 00 00 00 	lea    rcx,[rdx*8+0x0]
ffff800000805c71:	00 
ffff800000805c72:	48 01 ca             	add    rdx,rcx
ffff800000805c75:	48 c1 e2 05          	shl    rdx,0x5
ffff800000805c79:	48 01 f2             	add    rdx,rsi
ffff800000805c7c:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff800000805c7f:	85 d2                	test   edx,edx
ffff800000805c81:	74 06                	je     ffff800000805c89 <req_proc+0xa1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:146 (discriminator 2)
ffff800000805c83:	83 7d fc 40          	cmp    DWORD PTR [rbp-0x4],0x40
ffff800000805c87:	7e 84                	jle    ffff800000805c0d <req_proc+0x25>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:150
    }
    if(num>=MAX_PROC_COUNT)
ffff800000805c89:	83 7d fc 3f          	cmp    DWORD PTR [rbp-0x4],0x3f
ffff800000805c8d:	7e 0a                	jle    ffff800000805c99 <req_proc+0xb1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:151
        return -1;
ffff800000805c8f:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000805c94:	e9 05 01 00 00       	jmp    ffff800000805d9e <req_proc+0x1b6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:152
    task[num].pid=pidd++;
ffff800000805c99:	48 ba 10 fe ff ff ff 	movabs rdx,0xfffffffffffffe10
ffff800000805ca0:	ff ff ff 
ffff800000805ca3:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805ca7:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff800000805ca9:	8d 71 01             	lea    esi,[rcx+0x1]
ffff800000805cac:	48 ba 10 fe ff ff ff 	movabs rdx,0xfffffffffffffe10
ffff800000805cb3:	ff ff ff 
ffff800000805cb6:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805cba:	89 32                	mov    DWORD PTR [rdx],esi
ffff800000805cbc:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff800000805cc3:	ff ff ff 
ffff800000805cc6:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805cca:	48 8b 3a             	mov    rdi,QWORD PTR [rdx]
ffff800000805ccd:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000805cd0:	48 63 f2             	movsxd rsi,edx
ffff800000805cd3:	48 89 f2             	mov    rdx,rsi
ffff800000805cd6:	48 01 d2             	add    rdx,rdx
ffff800000805cd9:	48 01 f2             	add    rdx,rsi
ffff800000805cdc:	48 8d 34 d5 00 00 00 	lea    rsi,[rdx*8+0x0]
ffff800000805ce3:	00 
ffff800000805ce4:	48 01 f2             	add    rdx,rsi
ffff800000805ce7:	48 c1 e2 05          	shl    rdx,0x5
ffff800000805ceb:	48 01 fa             	add    rdx,rdi
ffff800000805cee:	89 0a                	mov    DWORD PTR [rdx],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:153
    task[num].stat=TASK_ZOMBIE;
ffff800000805cf0:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff800000805cf7:	ff ff ff 
ffff800000805cfa:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805cfe:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff800000805d01:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000805d04:	48 63 ca             	movsxd rcx,edx
ffff800000805d07:	48 89 ca             	mov    rdx,rcx
ffff800000805d0a:	48 01 d2             	add    rdx,rdx
ffff800000805d0d:	48 01 ca             	add    rdx,rcx
ffff800000805d10:	48 8d 0c d5 00 00 00 	lea    rcx,[rdx*8+0x0]
ffff800000805d17:	00 
ffff800000805d18:	48 01 ca             	add    rdx,rcx
ffff800000805d1b:	48 c1 e2 05          	shl    rdx,0x5
ffff800000805d1f:	48 01 f2             	add    rdx,rsi
ffff800000805d22:	c7 42 18 04 00 00 00 	mov    DWORD PTR [rdx+0x18],0x4
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:154
    task[num].utime=0;
ffff800000805d29:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff800000805d30:	ff ff ff 
ffff800000805d33:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805d37:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff800000805d3a:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000805d3d:	48 63 ca             	movsxd rcx,edx
ffff800000805d40:	48 89 ca             	mov    rdx,rcx
ffff800000805d43:	48 01 d2             	add    rdx,rdx
ffff800000805d46:	48 01 ca             	add    rdx,rcx
ffff800000805d49:	48 8d 0c d5 00 00 00 	lea    rcx,[rdx*8+0x0]
ffff800000805d50:	00 
ffff800000805d51:	48 01 ca             	add    rdx,rcx
ffff800000805d54:	48 c1 e2 05          	shl    rdx,0x5
ffff800000805d58:	48 01 f2             	add    rdx,rsi
ffff800000805d5b:	c7 42 1c 00 00 00 00 	mov    DWORD PTR [rdx+0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:155
    task[num].priority=0;
ffff800000805d62:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff800000805d69:	ff ff ff 
ffff800000805d6c:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000805d70:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000805d73:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000805d76:	48 63 d0             	movsxd rdx,eax
ffff800000805d79:	48 89 d0             	mov    rax,rdx
ffff800000805d7c:	48 01 c0             	add    rax,rax
ffff800000805d7f:	48 01 d0             	add    rax,rdx
ffff800000805d82:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000805d89:	00 
ffff800000805d8a:	48 01 d0             	add    rax,rdx
ffff800000805d8d:	48 c1 e0 05          	shl    rax,0x5
ffff800000805d91:	48 01 c8             	add    rax,rcx
ffff800000805d94:	c7 40 20 00 00 00 00 	mov    DWORD PTR [rax+0x20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:156
    return num;
ffff800000805d9b:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:157
}
ffff800000805d9e:	5d                   	pop    rbp
ffff800000805d9f:	c3                   	ret    

ffff800000805da0 <set_proc>:
set_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:159
void set_proc(long rax, long rbx, long rcx, long rdx, long es, long cs, long ss, long ds, long fs, long gs, long rsp,
              long rbp, long rsi, long rdi, long rip, long rflags, int proc_nr) {
ffff800000805da0:	f3 0f 1e fa          	endbr64 
ffff800000805da4:	55                   	push   rbp
ffff800000805da5:	48 89 e5             	mov    rbp,rsp
ffff800000805da8:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000805da8 <set_proc+0x8>
ffff800000805daf:	49 bb 88 d7 11 00 00 	movabs r11,0x11d788
ffff800000805db6:	00 00 00 
ffff800000805db9:	4c 01 d8             	add    rax,r11
ffff800000805dbc:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000805dc0:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff800000805dc4:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffff800000805dc8:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
ffff800000805dcc:	4c 89 45 c8          	mov    QWORD PTR [rbp-0x38],r8
ffff800000805dd0:	4c 89 4d c0          	mov    QWORD PTR [rbp-0x40],r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:160
    struct process* proc=&task[proc_nr];
ffff800000805dd4:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff800000805ddb:	ff ff ff 
ffff800000805dde:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000805de2:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000805de5:	8b 45 60             	mov    eax,DWORD PTR [rbp+0x60]
ffff800000805de8:	48 63 d0             	movsxd rdx,eax
ffff800000805deb:	48 89 d0             	mov    rax,rdx
ffff800000805dee:	48 01 c0             	add    rax,rax
ffff800000805df1:	48 01 d0             	add    rax,rdx
ffff800000805df4:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000805dfb:	00 
ffff800000805dfc:	48 01 d0             	add    rax,rdx
ffff800000805dff:	48 c1 e0 05          	shl    rax,0x5
ffff800000805e03:	48 01 c8             	add    rax,rcx
ffff800000805e06:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:161
    proc->regs.rax=rax;
ffff800000805e0a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000805e0e:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000805e12:	48 89 90 7c 02 00 00 	mov    QWORD PTR [rax+0x27c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:162
    proc->regs.rbx=rbx;
ffff800000805e19:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000805e1d:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000805e21:	48 89 90 94 02 00 00 	mov    QWORD PTR [rax+0x294],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:163
    proc->regs.rcx=rcx;
ffff800000805e28:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000805e2c:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000805e30:	48 89 90 84 02 00 00 	mov    QWORD PTR [rax+0x284],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:164
    proc->regs.rdx=rdx;
ffff800000805e37:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000805e3b:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000805e3f:	48 89 90 8c 02 00 00 	mov    QWORD PTR [rax+0x28c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:165
    proc->regs.es=es;
ffff800000805e46:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000805e4a:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000805e4e:	48 89 90 bc 02 00 00 	mov    QWORD PTR [rax+0x2bc],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:166
    proc->regs.cs=cs;
ffff800000805e55:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000805e59:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000805e5d:	48 89 90 c4 02 00 00 	mov    QWORD PTR [rax+0x2c4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:167
    proc->regs.ss=ss;
ffff800000805e64:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000805e68:	48 8b 55 10          	mov    rdx,QWORD PTR [rbp+0x10]
ffff800000805e6c:	48 89 90 cc 02 00 00 	mov    QWORD PTR [rax+0x2cc],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:168
    proc->regs.ds=ds;
ffff800000805e73:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000805e77:	48 8b 55 18          	mov    rdx,QWORD PTR [rbp+0x18]
ffff800000805e7b:	48 89 90 d4 02 00 00 	mov    QWORD PTR [rax+0x2d4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:169
    proc->regs.fs=fs;
ffff800000805e82:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000805e86:	48 8b 55 20          	mov    rdx,QWORD PTR [rbp+0x20]
ffff800000805e8a:	48 89 90 dc 02 00 00 	mov    QWORD PTR [rax+0x2dc],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:170
    proc->regs.gs=gs;
ffff800000805e91:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000805e95:	48 8b 55 28          	mov    rdx,QWORD PTR [rbp+0x28]
ffff800000805e99:	48 89 90 e4 02 00 00 	mov    QWORD PTR [rax+0x2e4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:171
    proc->regs.rsp=rsp;
ffff800000805ea0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000805ea4:	48 8b 55 30          	mov    rdx,QWORD PTR [rbp+0x30]
ffff800000805ea8:	48 89 90 9c 02 00 00 	mov    QWORD PTR [rax+0x29c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:172
    proc->regs.rbp=rbp;
ffff800000805eaf:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000805eb3:	48 8b 55 38          	mov    rdx,QWORD PTR [rbp+0x38]
ffff800000805eb7:	48 89 90 a4 02 00 00 	mov    QWORD PTR [rax+0x2a4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:173
    proc->regs.rsi=rsi;
ffff800000805ebe:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000805ec2:	48 8b 55 40          	mov    rdx,QWORD PTR [rbp+0x40]
ffff800000805ec6:	48 89 90 ac 02 00 00 	mov    QWORD PTR [rax+0x2ac],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:174
    proc->regs.rdi=rdi;
ffff800000805ecd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000805ed1:	48 8b 55 48          	mov    rdx,QWORD PTR [rbp+0x48]
ffff800000805ed5:	48 89 90 b4 02 00 00 	mov    QWORD PTR [rax+0x2b4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:175
    proc->regs.rflags=0x202;//设置为默认值:0b 0010 0000 0010
ffff800000805edc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000805ee0:	48 c7 80 74 02 00 00 	mov    QWORD PTR [rax+0x274],0x202
ffff800000805ee7:	02 02 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:177
    //能接受中断
    proc->regs.rip=rip;
ffff800000805eeb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000805eef:	48 8b 55 50          	mov    rdx,QWORD PTR [rbp+0x50]
ffff800000805ef3:	48 89 90 6c 02 00 00 	mov    QWORD PTR [rax+0x26c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:179

    proc->regs.cs=cs;
ffff800000805efa:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000805efe:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000805f02:	48 89 90 c4 02 00 00 	mov    QWORD PTR [rax+0x2c4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:180
    proc->regs.ds=ds;
ffff800000805f09:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000805f0d:	48 8b 55 18          	mov    rdx,QWORD PTR [rbp+0x18]
ffff800000805f11:	48 89 90 d4 02 00 00 	mov    QWORD PTR [rax+0x2d4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:181
    proc->regs.es=es;
ffff800000805f18:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000805f1c:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000805f20:	48 89 90 bc 02 00 00 	mov    QWORD PTR [rax+0x2bc],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:182
    proc->regs.cr3=PML4_ADDR;//get_phyaddr(n1);//暂时先搞成全局
ffff800000805f27:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000805f2b:	48 be 00 10 10 00 00 	movabs rsi,0xffff800000101000
ffff800000805f32:	80 ff ff 
ffff800000805f35:	48 89 b0 64 02 00 00 	mov    QWORD PTR [rax+0x264],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:183
    proc->pml4=PML4_ADDR;
ffff800000805f3c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000805f40:	48 89 b0 e0 00 00 00 	mov    QWORD PTR [rax+0xe0],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:186


}
ffff800000805f47:	90                   	nop
ffff800000805f48:	5d                   	pop    rbp
ffff800000805f49:	c3                   	ret    

ffff800000805f4a <proc_zero>:
proc_zero():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:188
void proc_zero()
{
ffff800000805f4a:	f3 0f 1e fa          	endbr64 
ffff800000805f4e:	55                   	push   rbp
ffff800000805f4f:	48 89 e5             	mov    rbp,rsp
ffff800000805f52:	41 57                	push   r15
ffff800000805f54:	53                   	push   rbx
ffff800000805f55:	48 83 ec 10          	sub    rsp,0x10
ffff800000805f59:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000805f59 <proc_zero+0xf>
ffff800000805f60:	49 bb d7 d5 11 00 00 	movabs r11,0x11d5d7
ffff800000805f67:	00 00 00 
ffff800000805f6a:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:201 (discriminator 1)
//    }else{
//        printf("parent proc ret:%d\n",rax);
//    }
    while (1)
    {
        char c= sys_analyse_key();
ffff800000805f6d:	49 89 df             	mov    r15,rbx
ffff800000805f70:	b8 00 00 00 00       	mov    eax,0x0
ffff800000805f75:	48 ba 3b d4 ee ff ff 	movabs rdx,0xffffffffffeed43b
ffff800000805f7c:	ff ff ff 
ffff800000805f7f:	48 01 da             	add    rdx,rbx
ffff800000805f82:	ff d2                	call   rdx
ffff800000805f84:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:202 (discriminator 1)
        putchar(c);
ffff800000805f87:	0f be 45 ef          	movsx  eax,BYTE PTR [rbp-0x11]
ffff800000805f8b:	89 c7                	mov    edi,eax
ffff800000805f8d:	49 89 df             	mov    r15,rbx
ffff800000805f90:	48 b8 40 e4 ed ff ff 	movabs rax,0xffffffffffede440
ffff800000805f97:	ff ff ff 
ffff800000805f9a:	48 01 d8             	add    rax,rbx
ffff800000805f9d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:200 (discriminator 1)
    {
ffff800000805f9f:	eb cc                	jmp    ffff800000805f6d <proc_zero+0x23>

ffff800000805fa1 <save_rsp>:
save_rsp():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:205
    }
}
void save_rsp(){
ffff800000805fa1:	f3 0f 1e fa          	endbr64 
ffff800000805fa5:	55                   	push   rbp
ffff800000805fa6:	48 89 e5             	mov    rbp,rsp
ffff800000805fa9:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000805fa9 <save_rsp+0x8>
ffff800000805fb0:	49 bb 87 d5 11 00 00 	movabs r11,0x11d587
ffff800000805fb7:	00 00 00 
ffff800000805fba:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:207
    //在时钟中断context下
    addr_t * p=INT_STACK_TOP-16;
ffff800000805fbd:	48 be f0 ff 7f 00 00 	movabs rsi,0xffff8000007ffff0
ffff800000805fc4:	80 ff ff 
ffff800000805fc7:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:208
    current->regs.rsp=*p;
ffff800000805fcb:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000805fcf:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000805fd2:	48 b9 48 fe ff ff ff 	movabs rcx,0xfffffffffffffe48
ffff800000805fd9:	ff ff ff 
ffff800000805fdc:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff800000805fe0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000805fe3:	48 89 90 9c 02 00 00 	mov    QWORD PTR [rax+0x29c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:209
}
ffff800000805fea:	90                   	nop
ffff800000805feb:	5d                   	pop    rbp
ffff800000805fec:	c3                   	ret    

ffff800000805fed <manage_proc>:
manage_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:210
void manage_proc(){
ffff800000805fed:	f3 0f 1e fa          	endbr64 
ffff800000805ff1:	55                   	push   rbp
ffff800000805ff2:	48 89 e5             	mov    rbp,rsp
ffff800000805ff5:	41 57                	push   r15
ffff800000805ff7:	48 83 ec 18          	sub    rsp,0x18
ffff800000805ffb:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000805ffb <manage_proc+0xe>
ffff800000806002:	49 bb 35 d5 11 00 00 	movabs r11,0x11d535
ffff800000806009:	00 00 00 
ffff80000080600c:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:211
    if(cur_proc!=-1)
ffff80000080600f:	48 ba d8 fd ff ff ff 	movabs rdx,0xfffffffffffffdd8
ffff800000806016:	ff ff ff 
ffff800000806019:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080601d:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff80000080601f:	83 fa ff             	cmp    edx,0xffffffff
ffff800000806022:	74 48                	je     ffff80000080606c <manage_proc+0x7f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:212
        task[cur_proc].utime++;
ffff800000806024:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff80000080602b:	ff ff ff 
ffff80000080602e:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806032:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff800000806035:	48 ba d8 fd ff ff ff 	movabs rdx,0xfffffffffffffdd8
ffff80000080603c:	ff ff ff 
ffff80000080603f:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806043:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000806045:	48 63 ca             	movsxd rcx,edx
ffff800000806048:	48 89 ca             	mov    rdx,rcx
ffff80000080604b:	48 01 d2             	add    rdx,rdx
ffff80000080604e:	48 01 ca             	add    rdx,rcx
ffff800000806051:	48 8d 0c d5 00 00 00 	lea    rcx,[rdx*8+0x0]
ffff800000806058:	00 
ffff800000806059:	48 01 ca             	add    rdx,rcx
ffff80000080605c:	48 c1 e2 05          	shl    rdx,0x5
ffff800000806060:	48 01 f2             	add    rdx,rsi
ffff800000806063:	8b 4a 1c             	mov    ecx,DWORD PTR [rdx+0x1c]
ffff800000806066:	83 c1 01             	add    ecx,0x1
ffff800000806069:	89 4a 1c             	mov    DWORD PTR [rdx+0x1c],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:213
    if(cur_proc==-1||task[cur_proc].utime>MAX_UTIME||\
ffff80000080606c:	48 ba d8 fd ff ff ff 	movabs rdx,0xfffffffffffffdd8
ffff800000806073:	ff ff ff 
ffff800000806076:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080607a:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff80000080607c:	83 fa ff             	cmp    edx,0xffffffff
ffff80000080607f:	0f 84 92 00 00 00    	je     ffff800000806117 <manage_proc+0x12a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:213 (discriminator 1)
ffff800000806085:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff80000080608c:	ff ff ff 
ffff80000080608f:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806093:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff800000806096:	48 ba d8 fd ff ff ff 	movabs rdx,0xfffffffffffffdd8
ffff80000080609d:	ff ff ff 
ffff8000008060a0:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008060a4:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff8000008060a6:	48 63 ca             	movsxd rcx,edx
ffff8000008060a9:	48 89 ca             	mov    rdx,rcx
ffff8000008060ac:	48 01 d2             	add    rdx,rdx
ffff8000008060af:	48 01 ca             	add    rdx,rcx
ffff8000008060b2:	48 8d 0c d5 00 00 00 	lea    rcx,[rdx*8+0x0]
ffff8000008060b9:	00 
ffff8000008060ba:	48 01 ca             	add    rdx,rcx
ffff8000008060bd:	48 c1 e2 05          	shl    rdx,0x5
ffff8000008060c1:	48 01 f2             	add    rdx,rsi
ffff8000008060c4:	8b 52 1c             	mov    edx,DWORD PTR [rdx+0x1c]
ffff8000008060c7:	83 fa 0a             	cmp    edx,0xa
ffff8000008060ca:	77 4b                	ja     ffff800000806117 <manage_proc+0x12a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:214 (discriminator 2)
    task[cur_proc].stat != TASK_READY){
ffff8000008060cc:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff8000008060d3:	ff ff ff 
ffff8000008060d6:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008060da:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff8000008060dd:	48 ba d8 fd ff ff ff 	movabs rdx,0xfffffffffffffdd8
ffff8000008060e4:	ff ff ff 
ffff8000008060e7:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008060eb:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff8000008060ed:	48 63 ca             	movsxd rcx,edx
ffff8000008060f0:	48 89 ca             	mov    rdx,rcx
ffff8000008060f3:	48 01 d2             	add    rdx,rdx
ffff8000008060f6:	48 01 ca             	add    rdx,rcx
ffff8000008060f9:	48 8d 0c d5 00 00 00 	lea    rcx,[rdx*8+0x0]
ffff800000806100:	00 
ffff800000806101:	48 01 ca             	add    rdx,rcx
ffff800000806104:	48 c1 e2 05          	shl    rdx,0x5
ffff800000806108:	48 01 f2             	add    rdx,rsi
ffff80000080610b:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:213 (discriminator 2)
    if(cur_proc==-1||task[cur_proc].utime>MAX_UTIME||\
ffff80000080610e:	83 fa 02             	cmp    edx,0x2
ffff800000806111:	0f 84 3a 02 00 00    	je     ffff800000806351 <manage_proc+0x364>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:215
        if(cur_proc!=-1)
ffff800000806117:	48 ba d8 fd ff ff ff 	movabs rdx,0xfffffffffffffdd8
ffff80000080611e:	ff ff ff 
ffff800000806121:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806125:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000806127:	83 fa ff             	cmp    edx,0xffffffff
ffff80000080612a:	74 46                	je     ffff800000806172 <manage_proc+0x185>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:216
            task[cur_proc].utime=0;
ffff80000080612c:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff800000806133:	ff ff ff 
ffff800000806136:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080613a:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff80000080613d:	48 ba d8 fd ff ff ff 	movabs rdx,0xfffffffffffffdd8
ffff800000806144:	ff ff ff 
ffff800000806147:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080614b:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff80000080614d:	48 63 ca             	movsxd rcx,edx
ffff800000806150:	48 89 ca             	mov    rdx,rcx
ffff800000806153:	48 01 d2             	add    rdx,rdx
ffff800000806156:	48 01 ca             	add    rdx,rcx
ffff800000806159:	48 8d 0c d5 00 00 00 	lea    rcx,[rdx*8+0x0]
ffff800000806160:	00 
ffff800000806161:	48 01 ca             	add    rdx,rcx
ffff800000806164:	48 c1 e2 05          	shl    rdx,0x5
ffff800000806168:	48 01 f2             	add    rdx,rsi
ffff80000080616b:	c7 42 1c 00 00 00 00 	mov    DWORD PTR [rdx+0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:218
        //find
        int i=cur_proc+1;
ffff800000806172:	48 ba d8 fd ff ff ff 	movabs rdx,0xfffffffffffffdd8
ffff800000806179:	ff ff ff 
ffff80000080617c:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806180:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000806182:	83 c2 01             	add    edx,0x1
ffff800000806185:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:219
        int times=0;
ffff800000806188:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:221
        //轮询，直到有一个符合条件
        while(times<10){
ffff80000080618f:	e9 9d 00 00 00       	jmp    ffff800000806231 <manage_proc+0x244>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:222
            if(task[i].pid!=-1 && task[i].stat == TASK_READY && i != cur_proc){
ffff800000806194:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff80000080619b:	ff ff ff 
ffff80000080619e:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008061a2:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff8000008061a5:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff8000008061a8:	48 63 ca             	movsxd rcx,edx
ffff8000008061ab:	48 89 ca             	mov    rdx,rcx
ffff8000008061ae:	48 01 d2             	add    rdx,rdx
ffff8000008061b1:	48 01 ca             	add    rdx,rcx
ffff8000008061b4:	48 8d 0c d5 00 00 00 	lea    rcx,[rdx*8+0x0]
ffff8000008061bb:	00 
ffff8000008061bc:	48 01 ca             	add    rdx,rcx
ffff8000008061bf:	48 c1 e2 05          	shl    rdx,0x5
ffff8000008061c3:	48 01 f2             	add    rdx,rsi
ffff8000008061c6:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff8000008061c8:	83 fa ff             	cmp    edx,0xffffffff
ffff8000008061cb:	74 4f                	je     ffff80000080621c <manage_proc+0x22f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:222 (discriminator 1)
ffff8000008061cd:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff8000008061d4:	ff ff ff 
ffff8000008061d7:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008061db:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff8000008061de:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff8000008061e1:	48 63 ca             	movsxd rcx,edx
ffff8000008061e4:	48 89 ca             	mov    rdx,rcx
ffff8000008061e7:	48 01 d2             	add    rdx,rdx
ffff8000008061ea:	48 01 ca             	add    rdx,rcx
ffff8000008061ed:	48 8d 0c d5 00 00 00 	lea    rcx,[rdx*8+0x0]
ffff8000008061f4:	00 
ffff8000008061f5:	48 01 ca             	add    rdx,rcx
ffff8000008061f8:	48 c1 e2 05          	shl    rdx,0x5
ffff8000008061fc:	48 01 f2             	add    rdx,rsi
ffff8000008061ff:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff800000806202:	83 fa 02             	cmp    edx,0x2
ffff800000806205:	75 15                	jne    ffff80000080621c <manage_proc+0x22f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:222 (discriminator 2)
ffff800000806207:	48 ba d8 fd ff ff ff 	movabs rdx,0xfffffffffffffdd8
ffff80000080620e:	ff ff ff 
ffff800000806211:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806215:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000806217:	39 55 ec             	cmp    DWORD PTR [rbp-0x14],edx
ffff80000080621a:	75 21                	jne    ffff80000080623d <manage_proc+0x250>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:225
                break;
            }
            i++;
ffff80000080621c:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:226
            if(i>=MAX_TASKS){
ffff800000806220:	83 7d ec 1f          	cmp    DWORD PTR [rbp-0x14],0x1f
ffff800000806224:	7e 0b                	jle    ffff800000806231 <manage_proc+0x244>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:227
                times++;
ffff800000806226:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:228
                i=0;
ffff80000080622a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:221
        while(times<10){
ffff800000806231:	83 7d e8 09          	cmp    DWORD PTR [rbp-0x18],0x9
ffff800000806235:	0f 8e 59 ff ff ff    	jle    ffff800000806194 <manage_proc+0x1a7>
ffff80000080623b:	eb 01                	jmp    ffff80000080623e <manage_proc+0x251>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:223
                break;
ffff80000080623d:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:231
            }
        }
        if(times==10)return;//超过十次尝试都没有，暂时不切换
ffff80000080623e:	83 7d e8 0a          	cmp    DWORD PTR [rbp-0x18],0xa
ffff800000806242:	0f 84 0c 01 00 00    	je     ffff800000806354 <manage_proc+0x367>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:233
        //switch
        task[cur_proc].stat=TASK_READY;
ffff800000806248:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff80000080624f:	ff ff ff 
ffff800000806252:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806256:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff800000806259:	48 ba d8 fd ff ff ff 	movabs rdx,0xfffffffffffffdd8
ffff800000806260:	ff ff ff 
ffff800000806263:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806267:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000806269:	48 63 ca             	movsxd rcx,edx
ffff80000080626c:	48 89 ca             	mov    rdx,rcx
ffff80000080626f:	48 01 d2             	add    rdx,rdx
ffff800000806272:	48 01 ca             	add    rdx,rcx
ffff800000806275:	48 8d 0c d5 00 00 00 	lea    rcx,[rdx*8+0x0]
ffff80000080627c:	00 
ffff80000080627d:	48 01 ca             	add    rdx,rcx
ffff800000806280:	48 c1 e2 05          	shl    rdx,0x5
ffff800000806284:	48 01 f2             	add    rdx,rsi
ffff800000806287:	c7 42 18 02 00 00 00 	mov    DWORD PTR [rdx+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:234
        task[i].stat=TASK_RUNNING;
ffff80000080628e:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff800000806295:	ff ff ff 
ffff800000806298:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080629c:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff80000080629f:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff8000008062a2:	48 63 ca             	movsxd rcx,edx
ffff8000008062a5:	48 89 ca             	mov    rdx,rcx
ffff8000008062a8:	48 01 d2             	add    rdx,rdx
ffff8000008062ab:	48 01 ca             	add    rdx,rcx
ffff8000008062ae:	48 8d 0c d5 00 00 00 	lea    rcx,[rdx*8+0x0]
ffff8000008062b5:	00 
ffff8000008062b6:	48 01 ca             	add    rdx,rcx
ffff8000008062b9:	48 c1 e2 05          	shl    rdx,0x5
ffff8000008062bd:	48 01 f2             	add    rdx,rsi
ffff8000008062c0:	c7 42 18 01 00 00 00 	mov    DWORD PTR [rdx+0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:235
        switch_to(&task[cur_proc], &task[i]);
ffff8000008062c7:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff8000008062ce:	ff ff ff 
ffff8000008062d1:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008062d5:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff8000008062d8:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff8000008062db:	48 63 ca             	movsxd rcx,edx
ffff8000008062de:	48 89 ca             	mov    rdx,rcx
ffff8000008062e1:	48 01 d2             	add    rdx,rdx
ffff8000008062e4:	48 01 ca             	add    rdx,rcx
ffff8000008062e7:	48 8d 0c d5 00 00 00 	lea    rcx,[rdx*8+0x0]
ffff8000008062ee:	00 
ffff8000008062ef:	48 01 ca             	add    rdx,rcx
ffff8000008062f2:	48 c1 e2 05          	shl    rdx,0x5
ffff8000008062f6:	48 8d 0c 16          	lea    rcx,[rsi+rdx*1]
ffff8000008062fa:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff800000806301:	ff ff ff 
ffff800000806304:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806308:	48 8b 3a             	mov    rdi,QWORD PTR [rdx]
ffff80000080630b:	48 ba d8 fd ff ff ff 	movabs rdx,0xfffffffffffffdd8
ffff800000806312:	ff ff ff 
ffff800000806315:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806319:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff80000080631b:	48 63 f2             	movsxd rsi,edx
ffff80000080631e:	48 89 f2             	mov    rdx,rsi
ffff800000806321:	48 01 d2             	add    rdx,rdx
ffff800000806324:	48 01 f2             	add    rdx,rsi
ffff800000806327:	48 8d 34 d5 00 00 00 	lea    rsi,[rdx*8+0x0]
ffff80000080632e:	00 
ffff80000080632f:	48 01 f2             	add    rdx,rsi
ffff800000806332:	48 c1 e2 05          	shl    rdx,0x5
ffff800000806336:	48 01 fa             	add    rdx,rdi
ffff800000806339:	48 89 ce             	mov    rsi,rcx
ffff80000080633c:	48 89 d7             	mov    rdi,rdx
ffff80000080633f:	49 89 c7             	mov    r15,rax
ffff800000806342:	48 ba d7 3f ee ff ff 	movabs rdx,0xffffffffffee3fd7
ffff800000806349:	ff ff ff 
ffff80000080634c:	48 01 c2             	add    rdx,rax
ffff80000080634f:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:237
    }
    return;
ffff800000806351:	90                   	nop
ffff800000806352:	eb 01                	jmp    ffff800000806355 <manage_proc+0x368>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:231
        if(times==10)return;//超过十次尝试都没有，暂时不切换
ffff800000806354:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:238
}
ffff800000806355:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000806359:	c9                   	leave  
ffff80000080635a:	c3                   	ret    

ffff80000080635b <switch_proc_tss>:
switch_proc_tss():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:241

void switch_proc_tss(int pnr)
{
ffff80000080635b:	f3 0f 1e fa          	endbr64 
ffff80000080635f:	55                   	push   rbp
ffff800000806360:	48 89 e5             	mov    rbp,rsp
ffff800000806363:	41 57                	push   r15
ffff800000806365:	48 83 ec 28          	sub    rsp,0x28
ffff800000806369:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000806369 <switch_proc_tss+0xe>
ffff800000806370:	49 bb c7 d1 11 00 00 	movabs r11,0x11d1c7
ffff800000806377:	00 00 00 
ffff80000080637a:	4c 01 d8             	add    rax,r11
ffff80000080637d:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:242
    int sel=_TSS_IND(pnr)*8;
ffff800000806380:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000806383:	01 d2                	add    edx,edx
ffff800000806385:	83 c2 05             	add    edx,0x5
ffff800000806388:	c1 e2 03             	shl    edx,0x3
ffff80000080638b:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:243
    cur_proc=pnr;
ffff80000080638e:	48 ba d8 fd ff ff ff 	movabs rdx,0xfffffffffffffdd8
ffff800000806395:	ff ff ff 
ffff800000806398:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080639c:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
ffff80000080639f:	89 0a                	mov    DWORD PTR [rdx],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:244
    switch_proc_asm(sel);
ffff8000008063a1:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff8000008063a4:	89 d7                	mov    edi,edx
ffff8000008063a6:	49 89 c7             	mov    r15,rax
ffff8000008063a9:	48 ba 17 26 ef ff ff 	movabs rdx,0xffffffffffef2617
ffff8000008063b0:	ff ff ff 
ffff8000008063b3:	48 01 c2             	add    rdx,rax
ffff8000008063b6:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:245
}
ffff8000008063b8:	90                   	nop
ffff8000008063b9:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff8000008063bd:	c9                   	leave  
ffff8000008063be:	c3                   	ret    

ffff8000008063bf <switch_proc>:
switch_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:246
void switch_proc(int pnr){
ffff8000008063bf:	f3 0f 1e fa          	endbr64 
ffff8000008063c3:	55                   	push   rbp
ffff8000008063c4:	48 89 e5             	mov    rbp,rsp
ffff8000008063c7:	41 57                	push   r15
ffff8000008063c9:	53                   	push   rbx
ffff8000008063ca:	48 81 ec 80 03 00 00 	sub    rsp,0x380
ffff8000008063d1:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008063d1 <switch_proc+0x12>
ffff8000008063d8:	49 bb 5f d1 11 00 00 	movabs r11,0x11d15f
ffff8000008063df:	00 00 00 
ffff8000008063e2:	4c 01 db             	add    rbx,r11
ffff8000008063e5:	89 bd 7c fc ff ff    	mov    DWORD PTR [rbp-0x384],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:249
    //printf("switching proc to %d\n",pnr);
    //printf("eip:%x\n",task[pnr].tss.eip);
    struct process p=task[pnr];
ffff8000008063eb:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff8000008063f2:	ff ff ff 
ffff8000008063f5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008063f9:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008063fc:	8b 85 7c fc ff ff    	mov    eax,DWORD PTR [rbp-0x384]
ffff800000806402:	48 63 d0             	movsxd rdx,eax
ffff800000806405:	48 89 d0             	mov    rax,rdx
ffff800000806408:	48 01 c0             	add    rax,rax
ffff80000080640b:	48 01 d0             	add    rax,rdx
ffff80000080640e:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000806415:	00 
ffff800000806416:	48 01 d0             	add    rax,rdx
ffff800000806419:	48 c1 e0 05          	shl    rax,0x5
ffff80000080641d:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
ffff800000806421:	48 8d 85 80 fc ff ff 	lea    rax,[rbp-0x380]
ffff800000806428:	48 89 d6             	mov    rsi,rdx
ffff80000080642b:	ba 6c 00 00 00       	mov    edx,0x6c
ffff800000806430:	48 89 c7             	mov    rdi,rax
ffff800000806433:	48 89 d1             	mov    rcx,rdx
ffff800000806436:	f3 48 a5             	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:250
    save_context(&task[cur_proc].tss);
ffff800000806439:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000806440:	ff ff ff 
ffff800000806443:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806447:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080644a:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff800000806451:	ff ff ff 
ffff800000806454:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806458:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080645a:	48 63 d0             	movsxd rdx,eax
ffff80000080645d:	48 89 d0             	mov    rax,rdx
ffff800000806460:	48 01 c0             	add    rax,rax
ffff800000806463:	48 01 d0             	add    rax,rdx
ffff800000806466:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080646d:	00 
ffff80000080646e:	48 01 d0             	add    rax,rdx
ffff800000806471:	48 c1 e0 05          	shl    rax,0x5
ffff800000806475:	48 01 c8             	add    rax,rcx
ffff800000806478:	48 05 f8 01 00 00    	add    rax,0x1f8
ffff80000080647e:	48 89 c7             	mov    rdi,rax
ffff800000806481:	49 89 df             	mov    r15,rbx
ffff800000806484:	b8 00 00 00 00       	mov    eax,0x0
ffff800000806489:	48 ba 17 26 ef ff ff 	movabs rdx,0xffffffffffef2617
ffff800000806490:	ff ff ff 
ffff800000806493:	48 01 da             	add    rdx,rbx
ffff800000806496:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:255
//    //重新设置0号进程
//    task[0].tss.eip=proc_zero;
//    task[0].tss.cr3=PAGE_INDEX_ADDR;
//    task[0].tss.eflags=0x202;
    cur_proc=pnr;
ffff800000806498:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff80000080649f:	ff ff ff 
ffff8000008064a2:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008064a6:	8b 95 7c fc ff ff    	mov    edx,DWORD PTR [rbp-0x384]
ffff8000008064ac:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:256
    int sel=_TSS_IND(pnr)*8;
ffff8000008064ae:	8b 85 7c fc ff ff    	mov    eax,DWORD PTR [rbp-0x384]
ffff8000008064b4:	01 c0                	add    eax,eax
ffff8000008064b6:	83 c0 05             	add    eax,0x5
ffff8000008064b9:	c1 e0 03             	shl    eax,0x3
ffff8000008064bc:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:257
    switch_to(NULL, &task[pnr].tss);
ffff8000008064bf:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff8000008064c6:	ff ff ff 
ffff8000008064c9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008064cd:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008064d0:	8b 85 7c fc ff ff    	mov    eax,DWORD PTR [rbp-0x384]
ffff8000008064d6:	48 63 d0             	movsxd rdx,eax
ffff8000008064d9:	48 89 d0             	mov    rax,rdx
ffff8000008064dc:	48 01 c0             	add    rax,rax
ffff8000008064df:	48 01 d0             	add    rax,rdx
ffff8000008064e2:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008064e9:	00 
ffff8000008064ea:	48 01 d0             	add    rax,rdx
ffff8000008064ed:	48 c1 e0 05          	shl    rax,0x5
ffff8000008064f1:	48 01 c8             	add    rax,rcx
ffff8000008064f4:	48 05 f8 01 00 00    	add    rax,0x1f8
ffff8000008064fa:	48 89 c6             	mov    rsi,rax
ffff8000008064fd:	bf 00 00 00 00       	mov    edi,0x0
ffff800000806502:	49 89 df             	mov    r15,rbx
ffff800000806505:	48 b8 d7 3f ee ff ff 	movabs rax,0xffffffffffee3fd7
ffff80000080650c:	ff ff ff 
ffff80000080650f:	48 01 d8             	add    rax,rbx
ffff800000806512:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:260
    //__asm__ volatile("push %0":"=r"(task[pnr].tss.eip));
    //switch_proc_asm(pnr*8+0x8*3);
}
ffff800000806514:	90                   	nop
ffff800000806515:	48 81 c4 80 03 00 00 	add    rsp,0x380
ffff80000080651c:	5b                   	pop    rbx
ffff80000080651d:	41 5f                	pop    r15
ffff80000080651f:	5d                   	pop    rbp
ffff800000806520:	c3                   	ret    

ffff800000806521 <save_context_c>:
save_context_c():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:262
void save_context_c(void* ctx,void *int_stk)
{
ffff800000806521:	f3 0f 1e fa          	endbr64 
ffff800000806525:	55                   	push   rbp
ffff800000806526:	48 89 e5             	mov    rbp,rsp
ffff800000806529:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000806529 <save_context_c+0x8>
ffff800000806530:	49 bb 07 d0 11 00 00 	movabs r11,0x11d007
ffff800000806537:	00 00 00 
ffff80000080653a:	4c 01 d8             	add    rax,r11
ffff80000080653d:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000806541:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:263
    unsigned long long* rs=ctx;
ffff800000806545:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000806549:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:264
    current->regs.rbp=rs[0];
ffff80000080654d:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000806551:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000806554:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff80000080655b:	ff ff ff 
ffff80000080655e:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806562:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000806565:	48 89 8a a4 02 00 00 	mov    QWORD PTR [rdx+0x2a4],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:265
    current->regs.rip=((unsigned long long*)int_stk)[0];
ffff80000080656c:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000806570:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000806573:	48 b9 48 fe ff ff ff 	movabs rcx,0xfffffffffffffe48
ffff80000080657a:	ff ff ff 
ffff80000080657d:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff800000806581:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806584:	48 89 90 6c 02 00 00 	mov    QWORD PTR [rax+0x26c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:266
}
ffff80000080658b:	90                   	nop
ffff80000080658c:	5d                   	pop    rbp
ffff80000080658d:	c3                   	ret    

ffff80000080658e <palloc>:
palloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:427
    task[index].stat=TASK_READY;
    return index;
} */
//为指定进程申请新的内存，并返回这块内存的线性地址。
void* palloc(int proc_index,int size)
{
ffff80000080658e:	f3 0f 1e fa          	endbr64 
ffff800000806592:	55                   	push   rbp
ffff800000806593:	48 89 e5             	mov    rbp,rsp
ffff800000806596:	41 57                	push   r15
ffff800000806598:	53                   	push   rbx
ffff800000806599:	48 83 ec 60          	sub    rsp,0x60
ffff80000080659d:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080659d <palloc+0xf>
ffff8000008065a4:	49 bb 93 cf 11 00 00 	movabs r11,0x11cf93
ffff8000008065ab:	00 00 00 
ffff8000008065ae:	4c 01 db             	add    rbx,r11
ffff8000008065b1:	89 7d 9c             	mov    DWORD PTR [rbp-0x64],edi
ffff8000008065b4:	89 75 98             	mov    DWORD PTR [rbp-0x68],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:428
    int page_c=size/4096+size%4096?1:0;
ffff8000008065b7:	8b 45 98             	mov    eax,DWORD PTR [rbp-0x68]
ffff8000008065ba:	8d 90 ff 0f 00 00    	lea    edx,[rax+0xfff]
ffff8000008065c0:	85 c0                	test   eax,eax
ffff8000008065c2:	0f 48 c2             	cmovs  eax,edx
ffff8000008065c5:	c1 f8 0c             	sar    eax,0xc
ffff8000008065c8:	89 c1                	mov    ecx,eax
ffff8000008065ca:	8b 45 98             	mov    eax,DWORD PTR [rbp-0x68]
ffff8000008065cd:	99                   	cdq    
ffff8000008065ce:	c1 ea 14             	shr    edx,0x14
ffff8000008065d1:	01 d0                	add    eax,edx
ffff8000008065d3:	25 ff 0f 00 00       	and    eax,0xfff
ffff8000008065d8:	29 d0                	sub    eax,edx
ffff8000008065da:	01 c8                	add    eax,ecx
ffff8000008065dc:	85 c0                	test   eax,eax
ffff8000008065de:	0f 95 c0             	setne  al
ffff8000008065e1:	0f b6 c0             	movzx  eax,al
ffff8000008065e4:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:429
    int c=0;
ffff8000008065e7:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:430
    void *ptr=NULL;
ffff8000008065ee:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
ffff8000008065f5:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:431
    page_item *pgind=NULL;//task[proc_index].tss.cr3;
ffff8000008065f6:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff8000008065fd:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:432
    pgind++;
ffff8000008065fe:	48 83 45 e0 08       	add    QWORD PTR [rbp-0x20],0x8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:433
    for(int i=1;i<1024;i++)
ffff800000806603:	c7 45 dc 01 00 00 00 	mov    DWORD PTR [rbp-0x24],0x1
ffff80000080660a:	e9 bb 03 00 00       	jmp    ffff8000008069ca <palloc+0x43c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:435
    {
        page_item* tblp=*pgind&0xfffff000;
ffff80000080660f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806613:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806616:	25 00 f0 ff ff       	and    eax,0xfffff000
ffff80000080661b:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:436
        for(int j=0;j<1024;j++)
ffff80000080661f:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
ffff800000806626:	e9 89 03 00 00       	jmp    ffff8000008069b4 <palloc+0x426>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:438
        {
            int v=*tblp&PAGE_PRESENT;
ffff80000080662b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080662f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806632:	83 e0 01             	and    eax,0x1
ffff800000806635:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:439
            if(!v)
ffff800000806638:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
ffff80000080663c:	0f 85 69 03 00 00    	jne    ffff8000008069ab <palloc+0x41d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:441
            {
                int new_pg=req_a_page();
ffff800000806642:	49 89 df             	mov    r15,rbx
ffff800000806645:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080664a:	48 ba 29 fc ed ff ff 	movabs rdx,0xffffffffffedfc29
ffff800000806651:	ff ff ff 
ffff800000806654:	48 01 da             	add    rdx,rbx
ffff800000806657:	ff d2                	call   rdx
ffff800000806659:	89 45 b8             	mov    DWORD PTR [rbp-0x48],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:442
                if(new_pg==-1)
ffff80000080665c:	83 7d b8 ff          	cmp    DWORD PTR [rbp-0x48],0xffffffff
ffff800000806660:	0f 85 66 01 00 00    	jne    ffff8000008067cc <palloc+0x23e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:445
                {
                    //修改ldt,增加数据空间
                    unsigned int size=task[proc_index].ldt[2].limit_lo16;
ffff800000806666:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff80000080666d:	ff ff ff 
ffff800000806670:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806674:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000806677:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff80000080667a:	48 63 d0             	movsxd rdx,eax
ffff80000080667d:	48 89 d0             	mov    rax,rdx
ffff800000806680:	48 01 c0             	add    rax,rax
ffff800000806683:	48 01 d0             	add    rax,rdx
ffff800000806686:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080668d:	00 
ffff80000080668e:	48 01 d0             	add    rax,rdx
ffff800000806691:	48 c1 e0 05          	shl    rax,0x5
ffff800000806695:	48 01 c8             	add    rax,rcx
ffff800000806698:	0f b7 80 88 00 00 00 	movzx  eax,WORD PTR [rax+0x88]
ffff80000080669f:	0f b7 c0             	movzx  eax,ax
ffff8000008066a2:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:446
                    size+=(task[proc_index].ldt[2].attr&0xf)<<16;
ffff8000008066a5:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff8000008066ac:	ff ff ff 
ffff8000008066af:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008066b3:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008066b6:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff8000008066b9:	48 63 d0             	movsxd rdx,eax
ffff8000008066bc:	48 89 d0             	mov    rax,rdx
ffff8000008066bf:	48 01 c0             	add    rax,rax
ffff8000008066c2:	48 01 d0             	add    rax,rdx
ffff8000008066c5:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008066cc:	00 
ffff8000008066cd:	48 01 d0             	add    rax,rdx
ffff8000008066d0:	48 c1 e0 05          	shl    rax,0x5
ffff8000008066d4:	48 01 c8             	add    rax,rcx
ffff8000008066d7:	0f b7 80 8d 00 00 00 	movzx  eax,WORD PTR [rax+0x8d]
ffff8000008066de:	0f b7 c0             	movzx  eax,ax
ffff8000008066e1:	c1 e0 10             	shl    eax,0x10
ffff8000008066e4:	25 00 00 0f 00       	and    eax,0xf0000
ffff8000008066e9:	01 45 a4             	add    DWORD PTR [rbp-0x5c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:447
                    size+=c;
ffff8000008066ec:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff8000008066ef:	01 45 a4             	add    DWORD PTR [rbp-0x5c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:448
                    task[proc_index].ldt[2].limit_lo16=size&0xffff;
ffff8000008066f2:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff8000008066f9:	ff ff ff 
ffff8000008066fc:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806700:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000806703:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff800000806706:	48 63 d0             	movsxd rdx,eax
ffff800000806709:	48 89 d0             	mov    rax,rdx
ffff80000080670c:	48 01 c0             	add    rax,rax
ffff80000080670f:	48 01 d0             	add    rax,rdx
ffff800000806712:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000806719:	00 
ffff80000080671a:	48 01 d0             	add    rax,rdx
ffff80000080671d:	48 c1 e0 05          	shl    rax,0x5
ffff800000806721:	48 01 c8             	add    rax,rcx
ffff800000806724:	8b 55 a4             	mov    edx,DWORD PTR [rbp-0x5c]
ffff800000806727:	66 89 90 88 00 00 00 	mov    WORD PTR [rax+0x88],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:449
                    int tmp_attr=task[proc_index].ldt[2].attr;
ffff80000080672e:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000806735:	ff ff ff 
ffff800000806738:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080673c:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080673f:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff800000806742:	48 63 d0             	movsxd rdx,eax
ffff800000806745:	48 89 d0             	mov    rax,rdx
ffff800000806748:	48 01 c0             	add    rax,rax
ffff80000080674b:	48 01 d0             	add    rax,rdx
ffff80000080674e:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000806755:	00 
ffff800000806756:	48 01 d0             	add    rax,rdx
ffff800000806759:	48 c1 e0 05          	shl    rax,0x5
ffff80000080675d:	48 01 c8             	add    rax,rcx
ffff800000806760:	0f b7 80 8d 00 00 00 	movzx  eax,WORD PTR [rax+0x8d]
ffff800000806767:	0f b7 c0             	movzx  eax,ax
ffff80000080676a:	89 45 a0             	mov    DWORD PTR [rbp-0x60],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:450
                    tmp_attr&=0xfff0;
ffff80000080676d:	81 65 a0 f0 ff 00 00 	and    DWORD PTR [rbp-0x60],0xfff0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:451
                    tmp_attr+=(size>>16)&0xf;
ffff800000806774:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
ffff800000806777:	c1 e8 10             	shr    eax,0x10
ffff80000080677a:	83 e0 0f             	and    eax,0xf
ffff80000080677d:	89 c2                	mov    edx,eax
ffff80000080677f:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
ffff800000806782:	01 d0                	add    eax,edx
ffff800000806784:	89 45 a0             	mov    DWORD PTR [rbp-0x60],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:452
                    task[proc_index].ldt[2].attr=tmp_attr;
ffff800000806787:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff80000080678e:	ff ff ff 
ffff800000806791:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806795:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000806798:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff80000080679b:	48 63 d0             	movsxd rdx,eax
ffff80000080679e:	48 89 d0             	mov    rax,rdx
ffff8000008067a1:	48 01 c0             	add    rax,rax
ffff8000008067a4:	48 01 d0             	add    rax,rdx
ffff8000008067a7:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008067ae:	00 
ffff8000008067af:	48 01 d0             	add    rax,rdx
ffff8000008067b2:	48 c1 e0 05          	shl    rax,0x5
ffff8000008067b6:	48 01 c8             	add    rax,rcx
ffff8000008067b9:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
ffff8000008067bc:	66 89 90 8d 00 00 00 	mov    WORD PTR [rax+0x8d],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:453
                    return ptr;//失败了，只能申请一部分的内存或者返回NULL
ffff8000008067c3:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008067c7:	e9 10 02 00 00       	jmp    ffff8000008069dc <palloc+0x44e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:455
                }
                int addr=get_phyaddr(new_pg);
ffff8000008067cc:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
ffff8000008067cf:	89 c7                	mov    edi,eax
ffff8000008067d1:	49 89 df             	mov    r15,rbx
ffff8000008067d4:	48 b8 4a 05 ee ff ff 	movabs rax,0xffffffffffee054a
ffff8000008067db:	ff ff ff 
ffff8000008067de:	48 01 d8             	add    rax,rbx
ffff8000008067e1:	ff d0                	call   rax
ffff8000008067e3:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:456
                set_page_item(tblp,addr,PAGE_PRESENT|\
ffff8000008067e6:	8b 4d b4             	mov    ecx,DWORD PTR [rbp-0x4c]
ffff8000008067e9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008067ed:	ba 07 00 00 00       	mov    edx,0x7
ffff8000008067f2:	89 ce                	mov    esi,ecx
ffff8000008067f4:	48 89 c7             	mov    rdi,rax
ffff8000008067f7:	49 89 df             	mov    r15,rbx
ffff8000008067fa:	48 b8 7e 05 ee ff ff 	movabs rax,0xffffffffffee057e
ffff800000806801:	ff ff ff 
ffff800000806804:	48 01 d8             	add    rax,rbx
ffff800000806807:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:458
                PAGE_RWX|PAGE_FOR_ALL);
                int laddr=i*0x400000+j*0x1000;//线性地址
ffff800000806809:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080680c:	c1 e0 0a             	shl    eax,0xa
ffff80000080680f:	89 c2                	mov    edx,eax
ffff800000806811:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000806814:	01 d0                	add    eax,edx
ffff800000806816:	c1 e0 0c             	shl    eax,0xc
ffff800000806819:	89 45 b0             	mov    DWORD PTR [rbp-0x50],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:459
                if(ptr==NULL)
ffff80000080681c:	48 83 7d c0 00       	cmp    QWORD PTR [rbp-0x40],0x0
ffff800000806821:	75 13                	jne    ffff800000806836 <palloc+0x2a8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:462
                {
                   // ptr=laddr;
                    palloc_paddr=addr;
ffff800000806823:	48 b8 f8 fc ff ff ff 	movabs rax,0xfffffffffffffcf8
ffff80000080682a:	ff ff ff 
ffff80000080682d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806831:	8b 55 b4             	mov    edx,DWORD PTR [rbp-0x4c]
ffff800000806834:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:464
                }
                page_c--;
ffff800000806836:	83 6d ec 01          	sub    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:465
                c++;
ffff80000080683a:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:466
                if(page_c==0)
ffff80000080683e:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff800000806842:	0f 85 63 01 00 00    	jne    ffff8000008069ab <palloc+0x41d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:469
                {
                    //修改ldt,增加数据空间
                    unsigned int size=task[proc_index].ldt[2].limit_lo16;
ffff800000806848:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff80000080684f:	ff ff ff 
ffff800000806852:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806856:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000806859:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff80000080685c:	48 63 d0             	movsxd rdx,eax
ffff80000080685f:	48 89 d0             	mov    rax,rdx
ffff800000806862:	48 01 c0             	add    rax,rax
ffff800000806865:	48 01 d0             	add    rax,rdx
ffff800000806868:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080686f:	00 
ffff800000806870:	48 01 d0             	add    rax,rdx
ffff800000806873:	48 c1 e0 05          	shl    rax,0x5
ffff800000806877:	48 01 c8             	add    rax,rcx
ffff80000080687a:	0f b7 80 88 00 00 00 	movzx  eax,WORD PTR [rax+0x88]
ffff800000806881:	0f b7 c0             	movzx  eax,ax
ffff800000806884:	89 45 ac             	mov    DWORD PTR [rbp-0x54],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:470
                    size+=(task[proc_index].ldt[2].attr&0xf)<<16;
ffff800000806887:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff80000080688e:	ff ff ff 
ffff800000806891:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806895:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000806898:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff80000080689b:	48 63 d0             	movsxd rdx,eax
ffff80000080689e:	48 89 d0             	mov    rax,rdx
ffff8000008068a1:	48 01 c0             	add    rax,rax
ffff8000008068a4:	48 01 d0             	add    rax,rdx
ffff8000008068a7:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008068ae:	00 
ffff8000008068af:	48 01 d0             	add    rax,rdx
ffff8000008068b2:	48 c1 e0 05          	shl    rax,0x5
ffff8000008068b6:	48 01 c8             	add    rax,rcx
ffff8000008068b9:	0f b7 80 8d 00 00 00 	movzx  eax,WORD PTR [rax+0x8d]
ffff8000008068c0:	0f b7 c0             	movzx  eax,ax
ffff8000008068c3:	c1 e0 10             	shl    eax,0x10
ffff8000008068c6:	25 00 00 0f 00       	and    eax,0xf0000
ffff8000008068cb:	01 45 ac             	add    DWORD PTR [rbp-0x54],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:471
                    size+=c;
ffff8000008068ce:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff8000008068d1:	01 45 ac             	add    DWORD PTR [rbp-0x54],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:472
                    task[proc_index].ldt[2].limit_lo16=size&0xffff;
ffff8000008068d4:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff8000008068db:	ff ff ff 
ffff8000008068de:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008068e2:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008068e5:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff8000008068e8:	48 63 d0             	movsxd rdx,eax
ffff8000008068eb:	48 89 d0             	mov    rax,rdx
ffff8000008068ee:	48 01 c0             	add    rax,rax
ffff8000008068f1:	48 01 d0             	add    rax,rdx
ffff8000008068f4:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008068fb:	00 
ffff8000008068fc:	48 01 d0             	add    rax,rdx
ffff8000008068ff:	48 c1 e0 05          	shl    rax,0x5
ffff800000806903:	48 01 c8             	add    rax,rcx
ffff800000806906:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
ffff800000806909:	66 89 90 88 00 00 00 	mov    WORD PTR [rax+0x88],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:473
                    int tmp_attr=task[proc_index].ldt[2].attr;
ffff800000806910:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000806917:	ff ff ff 
ffff80000080691a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080691e:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000806921:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff800000806924:	48 63 d0             	movsxd rdx,eax
ffff800000806927:	48 89 d0             	mov    rax,rdx
ffff80000080692a:	48 01 c0             	add    rax,rax
ffff80000080692d:	48 01 d0             	add    rax,rdx
ffff800000806930:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000806937:	00 
ffff800000806938:	48 01 d0             	add    rax,rdx
ffff80000080693b:	48 c1 e0 05          	shl    rax,0x5
ffff80000080693f:	48 01 c8             	add    rax,rcx
ffff800000806942:	0f b7 80 8d 00 00 00 	movzx  eax,WORD PTR [rax+0x8d]
ffff800000806949:	0f b7 c0             	movzx  eax,ax
ffff80000080694c:	89 45 a8             	mov    DWORD PTR [rbp-0x58],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:474
                    tmp_attr&=0xfff0;
ffff80000080694f:	81 65 a8 f0 ff 00 00 	and    DWORD PTR [rbp-0x58],0xfff0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:475
                    tmp_attr+=(size>>16)&0xf;
ffff800000806956:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
ffff800000806959:	c1 e8 10             	shr    eax,0x10
ffff80000080695c:	83 e0 0f             	and    eax,0xf
ffff80000080695f:	89 c2                	mov    edx,eax
ffff800000806961:	8b 45 a8             	mov    eax,DWORD PTR [rbp-0x58]
ffff800000806964:	01 d0                	add    eax,edx
ffff800000806966:	89 45 a8             	mov    DWORD PTR [rbp-0x58],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:476
                    task[proc_index].ldt[2].attr=tmp_attr;
ffff800000806969:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000806970:	ff ff ff 
ffff800000806973:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806977:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080697a:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff80000080697d:	48 63 d0             	movsxd rdx,eax
ffff800000806980:	48 89 d0             	mov    rax,rdx
ffff800000806983:	48 01 c0             	add    rax,rax
ffff800000806986:	48 01 d0             	add    rax,rdx
ffff800000806989:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000806990:	00 
ffff800000806991:	48 01 d0             	add    rax,rdx
ffff800000806994:	48 c1 e0 05          	shl    rax,0x5
ffff800000806998:	48 01 c8             	add    rax,rcx
ffff80000080699b:	8b 55 a8             	mov    edx,DWORD PTR [rbp-0x58]
ffff80000080699e:	66 89 90 8d 00 00 00 	mov    WORD PTR [rax+0x8d],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:477
                    return ptr;
ffff8000008069a5:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008069a9:	eb 31                	jmp    ffff8000008069dc <palloc+0x44e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:480 (discriminator 2)
                }
            }
            tblp++;
ffff8000008069ab:	48 83 45 d0 08       	add    QWORD PTR [rbp-0x30],0x8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:436 (discriminator 2)
        for(int j=0;j<1024;j++)
ffff8000008069b0:	83 45 cc 01          	add    DWORD PTR [rbp-0x34],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:436 (discriminator 1)
ffff8000008069b4:	81 7d cc ff 03 00 00 	cmp    DWORD PTR [rbp-0x34],0x3ff
ffff8000008069bb:	0f 8e 6a fc ff ff    	jle    ffff80000080662b <palloc+0x9d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:482 (discriminator 2)
        }
        pgind++;
ffff8000008069c1:	48 83 45 e0 08       	add    QWORD PTR [rbp-0x20],0x8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:433 (discriminator 2)
    for(int i=1;i<1024;i++)
ffff8000008069c6:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:433 (discriminator 1)
ffff8000008069ca:	81 7d dc ff 03 00 00 	cmp    DWORD PTR [rbp-0x24],0x3ff
ffff8000008069d1:	0f 8e 38 fc ff ff    	jle    ffff80000080660f <palloc+0x81>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:484
    }
    return NULL;
ffff8000008069d7:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:485
}
ffff8000008069dc:	48 83 c4 60          	add    rsp,0x60
ffff8000008069e0:	5b                   	pop    rbx
ffff8000008069e1:	41 5f                	pop    r15
ffff8000008069e3:	5d                   	pop    rbp
ffff8000008069e4:	c3                   	ret    

ffff8000008069e5 <malloc>:
malloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:488
//为当前进程申请新的内存，并返回这块内存的线性地址。
void* malloc(int size)
{
ffff8000008069e5:	f3 0f 1e fa          	endbr64 
ffff8000008069e9:	55                   	push   rbp
ffff8000008069ea:	48 89 e5             	mov    rbp,rsp
ffff8000008069ed:	41 57                	push   r15
ffff8000008069ef:	48 83 ec 18          	sub    rsp,0x18
ffff8000008069f3:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008069f3 <malloc+0xe>
ffff8000008069fa:	49 bb 3d cb 11 00 00 	movabs r11,0x11cb3d
ffff800000806a01:	00 00 00 
ffff800000806a04:	4c 01 d8             	add    rax,r11
ffff800000806a07:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:489
    return palloc(cur_proc,size);
ffff800000806a0a:	48 ba d8 fd ff ff ff 	movabs rdx,0xfffffffffffffdd8
ffff800000806a11:	ff ff ff 
ffff800000806a14:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806a18:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000806a1a:	8b 4d ec             	mov    ecx,DWORD PTR [rbp-0x14]
ffff800000806a1d:	89 ce                	mov    esi,ecx
ffff800000806a1f:	89 d7                	mov    edi,edx
ffff800000806a21:	49 89 c7             	mov    r15,rax
ffff800000806a24:	48 ba 5e 30 ee ff ff 	movabs rdx,0xffffffffffee305e
ffff800000806a2b:	ff ff ff 
ffff800000806a2e:	48 01 c2             	add    rdx,rax
ffff800000806a31:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:490
}
ffff800000806a33:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000806a37:	c9                   	leave  
ffff800000806a38:	c3                   	ret    

ffff800000806a39 <proc_end>:
proc_end():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:492
void proc_end()
{
ffff800000806a39:	f3 0f 1e fa          	endbr64 
ffff800000806a3d:	55                   	push   rbp
ffff800000806a3e:	48 89 e5             	mov    rbp,rsp
ffff800000806a41:	41 57                	push   r15
ffff800000806a43:	53                   	push   rbx
ffff800000806a44:	48 83 ec 10          	sub    rsp,0x10
ffff800000806a48:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000806a48 <proc_end+0xf>
ffff800000806a4f:	49 bb e8 ca 11 00 00 	movabs r11,0x11cae8
ffff800000806a56:	00 00 00 
ffff800000806a59:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:494
    int ret;
    __asm__ volatile("mov %%eax,%0":"=m"(ret));
ffff800000806a5c:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:498
    //printf("proc #%d ended with retv %d.\n",cur_proc,ret);
    //切换堆栈
    //__asm__ volatile("mov %0,%%rsp"::"r"(task[0].tss.esp));
    del_proc(cur_proc);
ffff800000806a5f:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff800000806a66:	ff ff ff 
ffff800000806a69:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806a6d:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000806a6f:	89 c7                	mov    edi,eax
ffff800000806a71:	49 89 df             	mov    r15,rbx
ffff800000806a74:	48 b8 97 36 ee ff ff 	movabs rax,0xffffffffffee3697
ffff800000806a7b:	ff ff ff 
ffff800000806a7e:	48 01 d8             	add    rax,rbx
ffff800000806a81:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:499
    if(task[cur_proc].parent_pid!=-1){
ffff800000806a83:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000806a8a:	ff ff ff 
ffff800000806a8d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806a91:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000806a94:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff800000806a9b:	ff ff ff 
ffff800000806a9e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806aa2:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000806aa4:	48 63 d0             	movsxd rdx,eax
ffff800000806aa7:	48 89 d0             	mov    rax,rdx
ffff800000806aaa:	48 01 c0             	add    rax,rax
ffff800000806aad:	48 01 d0             	add    rax,rdx
ffff800000806ab0:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000806ab7:	00 
ffff800000806ab8:	48 01 d0             	add    rax,rdx
ffff800000806abb:	48 c1 e0 05          	shl    rax,0x5
ffff800000806abf:	48 01 c8             	add    rax,rcx
ffff800000806ac2:	8b 80 bc 00 00 00    	mov    eax,DWORD PTR [rax+0xbc]
ffff800000806ac8:	83 f8 ff             	cmp    eax,0xffffffff
ffff800000806acb:	0f 84 d5 00 00 00    	je     ffff800000806ba6 <proc_end+0x16d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:500
        task[task[cur_proc].parent_pid].stat=TASK_READY;
ffff800000806ad1:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000806ad8:	ff ff ff 
ffff800000806adb:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806adf:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000806ae2:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000806ae9:	ff ff ff 
ffff800000806aec:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806af0:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff800000806af3:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff800000806afa:	ff ff ff 
ffff800000806afd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806b01:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000806b03:	48 63 d0             	movsxd rdx,eax
ffff800000806b06:	48 89 d0             	mov    rax,rdx
ffff800000806b09:	48 01 c0             	add    rax,rax
ffff800000806b0c:	48 01 d0             	add    rax,rdx
ffff800000806b0f:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000806b16:	00 
ffff800000806b17:	48 01 d0             	add    rax,rdx
ffff800000806b1a:	48 c1 e0 05          	shl    rax,0x5
ffff800000806b1e:	48 01 f0             	add    rax,rsi
ffff800000806b21:	8b 80 bc 00 00 00    	mov    eax,DWORD PTR [rax+0xbc]
ffff800000806b27:	89 c2                	mov    edx,eax
ffff800000806b29:	48 89 d0             	mov    rax,rdx
ffff800000806b2c:	48 01 c0             	add    rax,rax
ffff800000806b2f:	48 01 d0             	add    rax,rdx
ffff800000806b32:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000806b39:	00 
ffff800000806b3a:	48 01 d0             	add    rax,rdx
ffff800000806b3d:	48 c1 e0 05          	shl    rax,0x5
ffff800000806b41:	48 01 c8             	add    rax,rcx
ffff800000806b44:	c7 40 18 02 00 00 00 	mov    DWORD PTR [rax+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:501
        switch_proc_tss(task[cur_proc].parent_pid);
ffff800000806b4b:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000806b52:	ff ff ff 
ffff800000806b55:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806b59:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000806b5c:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff800000806b63:	ff ff ff 
ffff800000806b66:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806b6a:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000806b6c:	48 63 d0             	movsxd rdx,eax
ffff800000806b6f:	48 89 d0             	mov    rax,rdx
ffff800000806b72:	48 01 c0             	add    rax,rax
ffff800000806b75:	48 01 d0             	add    rax,rdx
ffff800000806b78:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000806b7f:	00 
ffff800000806b80:	48 01 d0             	add    rax,rdx
ffff800000806b83:	48 c1 e0 05          	shl    rax,0x5
ffff800000806b87:	48 01 c8             	add    rax,rcx
ffff800000806b8a:	8b 80 bc 00 00 00    	mov    eax,DWORD PTR [rax+0xbc]
ffff800000806b90:	89 c7                	mov    edi,eax
ffff800000806b92:	49 89 df             	mov    r15,rbx
ffff800000806b95:	48 b8 2b 2e ee ff ff 	movabs rax,0xffffffffffee2e2b
ffff800000806b9c:	ff ff ff 
ffff800000806b9f:	48 01 d8             	add    rax,rbx
ffff800000806ba2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:506
    }
    else
        switch_proc_tss(0);
    //syscall(SYSCALL_DEL_PROC,cur_proc,0,0,0,0);
}
ffff800000806ba4:	eb 17                	jmp    ffff800000806bbd <proc_end+0x184>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:504
        switch_proc_tss(0);
ffff800000806ba6:	bf 00 00 00 00       	mov    edi,0x0
ffff800000806bab:	49 89 df             	mov    r15,rbx
ffff800000806bae:	48 b8 2b 2e ee ff ff 	movabs rax,0xffffffffffee2e2b
ffff800000806bb5:	ff ff ff 
ffff800000806bb8:	48 01 d8             	add    rax,rbx
ffff800000806bbb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:506
}
ffff800000806bbd:	90                   	nop
ffff800000806bbe:	48 83 c4 10          	add    rsp,0x10
ffff800000806bc2:	5b                   	pop    rbx
ffff800000806bc3:	41 5f                	pop    r15
ffff800000806bc5:	5d                   	pop    rbp
ffff800000806bc6:	c3                   	ret    

ffff800000806bc7 <del_proc>:
del_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:508
void del_proc(int pnr)
{
ffff800000806bc7:	f3 0f 1e fa          	endbr64 
ffff800000806bcb:	55                   	push   rbp
ffff800000806bcc:	48 89 e5             	mov    rbp,rsp
ffff800000806bcf:	41 57                	push   r15
ffff800000806bd1:	53                   	push   rbx
ffff800000806bd2:	48 83 ec 20          	sub    rsp,0x20
ffff800000806bd6:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000806bd6 <del_proc+0xf>
ffff800000806bdd:	49 bb 5a c9 11 00 00 	movabs r11,0x11c95a
ffff800000806be4:	00 00 00 
ffff800000806be7:	4c 01 db             	add    rbx,r11
ffff800000806bea:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:509
    task[pnr].stat=TASK_ZOMBIE;
ffff800000806bed:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000806bf4:	ff ff ff 
ffff800000806bf7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806bfb:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000806bfe:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806c01:	48 63 d0             	movsxd rdx,eax
ffff800000806c04:	48 89 d0             	mov    rax,rdx
ffff800000806c07:	48 01 c0             	add    rax,rax
ffff800000806c0a:	48 01 d0             	add    rax,rdx
ffff800000806c0d:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000806c14:	00 
ffff800000806c15:	48 01 d0             	add    rax,rdx
ffff800000806c18:	48 c1 e0 05          	shl    rax,0x5
ffff800000806c1c:	48 01 c8             	add    rax,rcx
ffff800000806c1f:	c7 40 18 04 00 00 00 	mov    DWORD PTR [rax+0x18],0x4
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:512
//    task[pnr].pid=-1;
    //释放申请的页面
    release_mmap(&task[pnr]);
ffff800000806c26:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000806c2d:	ff ff ff 
ffff800000806c30:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806c34:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000806c37:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806c3a:	48 63 d0             	movsxd rdx,eax
ffff800000806c3d:	48 89 d0             	mov    rax,rdx
ffff800000806c40:	48 01 c0             	add    rax,rax
ffff800000806c43:	48 01 d0             	add    rax,rdx
ffff800000806c46:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000806c4d:	00 
ffff800000806c4e:	48 01 d0             	add    rax,rdx
ffff800000806c51:	48 c1 e0 05          	shl    rax,0x5
ffff800000806c55:	48 01 c8             	add    rax,rcx
ffff800000806c58:	48 89 c7             	mov    rdi,rax
ffff800000806c5b:	49 89 df             	mov    r15,rbx
ffff800000806c5e:	48 b8 8d 52 ee ff ff 	movabs rax,0xffffffffffee528d
ffff800000806c65:	ff ff ff 
ffff800000806c68:	48 01 d8             	add    rax,rbx
ffff800000806c6b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:514
    //释放存放页目录的页面
    kmfree(task[pnr].pml4);
ffff800000806c6d:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000806c74:	ff ff ff 
ffff800000806c77:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806c7b:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000806c7e:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806c81:	48 63 d0             	movsxd rdx,eax
ffff800000806c84:	48 89 d0             	mov    rax,rdx
ffff800000806c87:	48 01 c0             	add    rax,rax
ffff800000806c8a:	48 01 d0             	add    rax,rdx
ffff800000806c8d:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000806c94:	00 
ffff800000806c95:	48 01 d0             	add    rax,rdx
ffff800000806c98:	48 c1 e0 05          	shl    rax,0x5
ffff800000806c9c:	48 01 c8             	add    rax,rcx
ffff800000806c9f:	48 8b 80 e0 00 00 00 	mov    rax,QWORD PTR [rax+0xe0]
ffff800000806ca6:	48 89 c7             	mov    rdi,rax
ffff800000806ca9:	49 89 df             	mov    r15,rbx
ffff800000806cac:	48 b8 37 00 ee ff ff 	movabs rax,0xffffffffffee0037
ffff800000806cb3:	ff ff ff 
ffff800000806cb6:	48 01 d8             	add    rax,rbx
ffff800000806cb9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:516
    //关闭打开的文件
    for(int i=3;i<MAX_PROC_OPENF;i++){
ffff800000806cbb:	c7 45 ec 03 00 00 00 	mov    DWORD PTR [rbp-0x14],0x3
ffff800000806cc2:	eb 61                	jmp    ffff800000806d25 <del_proc+0x15e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:517
        if(task[pnr].openf[i]){
ffff800000806cc4:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000806ccb:	ff ff ff 
ffff800000806cce:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806cd2:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000806cd5:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806cd8:	48 63 d0             	movsxd rdx,eax
ffff800000806cdb:	48 89 d0             	mov    rax,rdx
ffff800000806cde:	48 01 c0             	add    rax,rax
ffff800000806ce1:	48 01 d0             	add    rax,rdx
ffff800000806ce4:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000806ceb:	00 
ffff800000806cec:	48 01 d0             	add    rax,rdx
ffff800000806cef:	48 c1 e0 05          	shl    rax,0x5
ffff800000806cf3:	48 01 c8             	add    rax,rcx
ffff800000806cf6:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000806cf9:	48 63 d2             	movsxd rdx,edx
ffff800000806cfc:	48 83 c2 1e          	add    rdx,0x1e
ffff800000806d00:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff800000806d05:	48 85 c0             	test   rax,rax
ffff800000806d08:	74 17                	je     ffff800000806d21 <del_proc+0x15a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:518
            sys_close(i);
ffff800000806d0a:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000806d0d:	89 c7                	mov    edi,eax
ffff800000806d0f:	49 89 df             	mov    r15,rbx
ffff800000806d12:	48 b8 9d a9 ee ff ff 	movabs rax,0xffffffffffeea99d
ffff800000806d19:	ff ff ff 
ffff800000806d1c:	48 01 d8             	add    rax,rbx
ffff800000806d1f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:516 (discriminator 2)
    for(int i=3;i<MAX_PROC_OPENF;i++){
ffff800000806d21:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:516 (discriminator 1)
ffff800000806d25:	83 7d ec 1f          	cmp    DWORD PTR [rbp-0x14],0x1f
ffff800000806d29:	7e 99                	jle    ffff800000806cc4 <del_proc+0xfd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:522
        }
    }
    //三个std判断一下是否是会话leader，是的话再关闭
    if(task[pnr].sid==task[pnr].pid){
ffff800000806d2b:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000806d32:	ff ff ff 
ffff800000806d35:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806d39:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000806d3c:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806d3f:	48 63 d0             	movsxd rdx,eax
ffff800000806d42:	48 89 d0             	mov    rax,rdx
ffff800000806d45:	48 01 c0             	add    rax,rax
ffff800000806d48:	48 01 d0             	add    rax,rdx
ffff800000806d4b:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000806d52:	00 
ffff800000806d53:	48 01 d0             	add    rax,rdx
ffff800000806d56:	48 c1 e0 05          	shl    rax,0x5
ffff800000806d5a:	48 01 c8             	add    rax,rcx
ffff800000806d5d:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffff800000806d60:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000806d67:	ff ff ff 
ffff800000806d6a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806d6e:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff800000806d71:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806d74:	48 63 d0             	movsxd rdx,eax
ffff800000806d77:	48 89 d0             	mov    rax,rdx
ffff800000806d7a:	48 01 c0             	add    rax,rax
ffff800000806d7d:	48 01 d0             	add    rax,rdx
ffff800000806d80:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000806d87:	00 
ffff800000806d88:	48 01 d0             	add    rax,rdx
ffff800000806d8b:	48 c1 e0 05          	shl    rax,0x5
ffff800000806d8f:	48 01 f0             	add    rax,rsi
ffff800000806d92:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000806d94:	39 c1                	cmp    ecx,eax
ffff800000806d96:	75 79                	jne    ffff800000806e11 <del_proc+0x24a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:524
        //tty和console断联
        sys_ioctl(0,TTY_DISCONNECT,0);
ffff800000806d98:	ba 00 00 00 00       	mov    edx,0x0
ffff800000806d9d:	be 02 00 00 00       	mov    esi,0x2
ffff800000806da2:	bf 00 00 00 00       	mov    edi,0x0
ffff800000806da7:	49 89 df             	mov    r15,rbx
ffff800000806daa:	48 b8 c1 61 ee ff ff 	movabs rax,0xffffffffffee61c1
ffff800000806db1:	ff ff ff 
ffff800000806db4:	48 01 d8             	add    rax,rbx
ffff800000806db7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:525
        sys_close(0);
ffff800000806db9:	bf 00 00 00 00       	mov    edi,0x0
ffff800000806dbe:	49 89 df             	mov    r15,rbx
ffff800000806dc1:	48 b8 9d a9 ee ff ff 	movabs rax,0xffffffffffeea99d
ffff800000806dc8:	ff ff ff 
ffff800000806dcb:	48 01 d8             	add    rax,rbx
ffff800000806dce:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:526
        sys_close(1);
ffff800000806dd0:	bf 01 00 00 00       	mov    edi,0x1
ffff800000806dd5:	49 89 df             	mov    r15,rbx
ffff800000806dd8:	48 b8 9d a9 ee ff ff 	movabs rax,0xffffffffffeea99d
ffff800000806ddf:	ff ff ff 
ffff800000806de2:	48 01 d8             	add    rax,rbx
ffff800000806de5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:527
        sys_close(2);
ffff800000806de7:	bf 02 00 00 00       	mov    edi,0x2
ffff800000806dec:	49 89 df             	mov    r15,rbx
ffff800000806def:	48 b8 9d a9 ee ff ff 	movabs rax,0xffffffffffeea99d
ffff800000806df6:	ff ff ff 
ffff800000806df9:	48 01 d8             	add    rax,rbx
ffff800000806dfc:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:529
        //然后,关闭所有前台进程组的进程
        for(int i=0;i<MAX_TASKS;i++){
ffff800000806dfe:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff800000806e05:	eb 04                	jmp    ffff800000806e0b <del_proc+0x244>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:529 (discriminator 3)
ffff800000806e07:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:529 (discriminator 1)
ffff800000806e0b:	83 7d e8 1f          	cmp    DWORD PTR [rbp-0x18],0x1f
ffff800000806e0f:	7e f6                	jle    ffff800000806e07 <del_proc+0x240>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:539
    }
    //TODO 给子进程发送SIGHUP信号结束他们
    //
    //从进程中解除cr3,tss和ldt
    //switch_proc_tss(task[pnr]);
}
ffff800000806e11:	90                   	nop
ffff800000806e12:	48 83 c4 20          	add    rsp,0x20
ffff800000806e16:	5b                   	pop    rbx
ffff800000806e17:	41 5f                	pop    r15
ffff800000806e19:	5d                   	pop    rbp
ffff800000806e1a:	c3                   	ret    

ffff800000806e1b <set_proc_stat>:
set_proc_stat():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:542

int set_proc_stat(int pid,int stat)
{
ffff800000806e1b:	f3 0f 1e fa          	endbr64 
ffff800000806e1f:	55                   	push   rbp
ffff800000806e20:	48 89 e5             	mov    rbp,rsp
ffff800000806e23:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000806e23 <set_proc_stat+0x8>
ffff800000806e2a:	49 bb 0d c7 11 00 00 	movabs r11,0x11c70d
ffff800000806e31:	00 00 00 
ffff800000806e34:	4c 01 d8             	add    rax,r11
ffff800000806e37:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff800000806e3a:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:543
    if(pid==-1)return -1;
ffff800000806e3d:	83 7d ec ff          	cmp    DWORD PTR [rbp-0x14],0xffffffff
ffff800000806e41:	75 0a                	jne    ffff800000806e4d <set_proc_stat+0x32>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:543 (discriminator 1)
ffff800000806e43:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000806e48:	e9 f1 00 00 00       	jmp    ffff800000806f3e <set_proc_stat+0x123>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:544
    int i=0;
ffff800000806e4d:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:545
    for(;task[i].pid!=pid;i++);
ffff800000806e54:	eb 04                	jmp    ffff800000806e5a <set_proc_stat+0x3f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:545 (discriminator 2)
ffff800000806e56:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:545 (discriminator 1)
ffff800000806e5a:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff800000806e61:	ff ff ff 
ffff800000806e64:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806e68:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff800000806e6b:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000806e6e:	48 63 ca             	movsxd rcx,edx
ffff800000806e71:	48 89 ca             	mov    rdx,rcx
ffff800000806e74:	48 01 d2             	add    rdx,rdx
ffff800000806e77:	48 01 ca             	add    rdx,rcx
ffff800000806e7a:	48 8d 0c d5 00 00 00 	lea    rcx,[rdx*8+0x0]
ffff800000806e81:	00 
ffff800000806e82:	48 01 ca             	add    rdx,rcx
ffff800000806e85:	48 c1 e2 05          	shl    rdx,0x5
ffff800000806e89:	48 01 f2             	add    rdx,rsi
ffff800000806e8c:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff800000806e8e:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000806e91:	39 d1                	cmp    ecx,edx
ffff800000806e93:	75 c1                	jne    ffff800000806e56 <set_proc_stat+0x3b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:546
    if(i==MAX_PROC_COUNT)return -1;
ffff800000806e95:	83 7d fc 40          	cmp    DWORD PTR [rbp-0x4],0x40
ffff800000806e99:	75 0a                	jne    ffff800000806ea5 <set_proc_stat+0x8a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:546 (discriminator 1)
ffff800000806e9b:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000806ea0:	e9 99 00 00 00       	jmp    ffff800000806f3e <set_proc_stat+0x123>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:547
    task[i].stat=stat;
ffff800000806ea5:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff800000806eac:	ff ff ff 
ffff800000806eaf:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806eb3:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff800000806eb6:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000806eb9:	48 63 ca             	movsxd rcx,edx
ffff800000806ebc:	48 89 ca             	mov    rdx,rcx
ffff800000806ebf:	48 01 d2             	add    rdx,rdx
ffff800000806ec2:	48 01 ca             	add    rdx,rcx
ffff800000806ec5:	48 8d 0c d5 00 00 00 	lea    rcx,[rdx*8+0x0]
ffff800000806ecc:	00 
ffff800000806ecd:	48 01 ca             	add    rdx,rcx
ffff800000806ed0:	48 c1 e2 05          	shl    rdx,0x5
ffff800000806ed4:	48 8d 0c 16          	lea    rcx,[rsi+rdx*1]
ffff800000806ed8:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000806edb:	89 51 18             	mov    DWORD PTR [rcx+0x18],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:549
    //如果这就是正在运行的进程，那么马上停止
    if(cur_proc==i)
ffff800000806ede:	48 ba d8 fd ff ff ff 	movabs rdx,0xfffffffffffffdd8
ffff800000806ee5:	ff ff ff 
ffff800000806ee8:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806eec:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000806eee:	39 55 fc             	cmp    DWORD PTR [rbp-0x4],edx
ffff800000806ef1:	75 46                	jne    ffff800000806f39 <set_proc_stat+0x11e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:550
        task[cur_proc].utime=MAX_UTIME;
ffff800000806ef3:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff800000806efa:	ff ff ff 
ffff800000806efd:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806f01:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000806f04:	48 ba d8 fd ff ff ff 	movabs rdx,0xfffffffffffffdd8
ffff800000806f0b:	ff ff ff 
ffff800000806f0e:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000806f12:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000806f14:	48 63 d0             	movsxd rdx,eax
ffff800000806f17:	48 89 d0             	mov    rax,rdx
ffff800000806f1a:	48 01 c0             	add    rax,rax
ffff800000806f1d:	48 01 d0             	add    rax,rdx
ffff800000806f20:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000806f27:	00 
ffff800000806f28:	48 01 d0             	add    rax,rdx
ffff800000806f2b:	48 c1 e0 05          	shl    rax,0x5
ffff800000806f2f:	48 01 c8             	add    rax,rcx
ffff800000806f32:	c7 40 1c 0a 00 00 00 	mov    DWORD PTR [rax+0x1c],0xa
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:551
    return 0;
ffff800000806f39:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:552
}
ffff800000806f3e:	5d                   	pop    rbp
ffff800000806f3f:	c3                   	ret    

ffff800000806f40 <sys_exit>:
sys_exit():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:584
//}
/*
 * 进程结束。
 * */
int sys_exit(int code)
{
ffff800000806f40:	f3 0f 1e fa          	endbr64 
ffff800000806f44:	55                   	push   rbp
ffff800000806f45:	48 89 e5             	mov    rbp,rsp
ffff800000806f48:	41 57                	push   r15
ffff800000806f4a:	53                   	push   rbx
ffff800000806f4b:	48 83 ec 10          	sub    rsp,0x10
ffff800000806f4f:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000806f4f <sys_exit+0xf>
ffff800000806f56:	49 bb e1 c5 11 00 00 	movabs r11,0x11c5e1
ffff800000806f5d:	00 00 00 
ffff800000806f60:	4c 01 db             	add    rbx,r11
ffff800000806f63:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:585
    current->exit_code=code;
ffff800000806f66:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff800000806f6d:	ff ff ff 
ffff800000806f70:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806f74:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806f77:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000806f7a:	89 50 24             	mov    DWORD PTR [rax+0x24],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:586
    del_proc(cur_proc);
ffff800000806f7d:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff800000806f84:	ff ff ff 
ffff800000806f87:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806f8b:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000806f8d:	89 c7                	mov    edi,eax
ffff800000806f8f:	49 89 df             	mov    r15,rbx
ffff800000806f92:	48 b8 97 36 ee ff ff 	movabs rax,0xffffffffffee3697
ffff800000806f99:	ff ff ff 
ffff800000806f9c:	48 01 d8             	add    rax,rbx
ffff800000806f9f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:588 (discriminator 1)
    while(1)
        manage_proc();
ffff800000806fa1:	49 89 df             	mov    r15,rbx
ffff800000806fa4:	b8 00 00 00 00       	mov    eax,0x0
ffff800000806fa9:	48 ba bd 2a ee ff ff 	movabs rdx,0xffffffffffee2abd
ffff800000806fb0:	ff ff ff 
ffff800000806fb3:	48 01 da             	add    rdx,rbx
ffff800000806fb6:	ff d2                	call   rdx
ffff800000806fb8:	eb e7                	jmp    ffff800000806fa1 <sys_exit+0x61>

ffff800000806fba <reg_proc>:
reg_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:644
    dllmain(NULL,0,NULL);
    
}*/

int reg_proc(addr_t entry, struct index_node *cwd, struct index_node *exef)
{
ffff800000806fba:	f3 0f 1e fa          	endbr64 
ffff800000806fbe:	55                   	push   rbp
ffff800000806fbf:	48 89 e5             	mov    rbp,rsp
ffff800000806fc2:	41 57                	push   r15
ffff800000806fc4:	41 54                	push   r12
ffff800000806fc6:	53                   	push   rbx
ffff800000806fc7:	48 83 ec 48          	sub    rsp,0x48
ffff800000806fcb:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000806fcb <reg_proc+0x11>
ffff800000806fd2:	49 bb 65 c5 11 00 00 	movabs r11,0x11c565
ffff800000806fd9:	00 00 00 
ffff800000806fdc:	4c 01 db             	add    rbx,r11
ffff800000806fdf:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
ffff800000806fe3:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
ffff800000806fe7:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:646
    
    int i=req_proc();
ffff800000806feb:	49 89 df             	mov    r15,rbx
ffff800000806fee:	b8 00 00 00 00       	mov    eax,0x0
ffff800000806ff3:	48 ba b8 26 ee ff ff 	movabs rdx,0xffffffffffee26b8
ffff800000806ffa:	ff ff ff 
ffff800000806ffd:	48 01 da             	add    rdx,rbx
ffff800000807000:	ff d2                	call   rdx
ffff800000807002:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:647
    if(i==-1)return -1;
ffff800000807005:	83 7d dc ff          	cmp    DWORD PTR [rbp-0x24],0xffffffff
ffff800000807009:	75 0a                	jne    ffff800000807015 <reg_proc+0x5b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:647 (discriminator 1)
ffff80000080700b:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000807010:	e9 25 03 00 00       	jmp    ffff80000080733a <reg_proc+0x380>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:650

    //栈顶设置在了4G处
    set_proc(0, 0, 0, 0, DS_USER, CS_USER, DS_USER, DS_USER\
ffff800000807015:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000807019:	48 83 ec 08          	sub    rsp,0x8
ffff80000080701d:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000807020:	52                   	push   rdx
ffff800000807021:	6a 00                	push   0x0
ffff800000807023:	50                   	push   rax
ffff800000807024:	6a 00                	push   0x0
ffff800000807026:	6a 00                	push   0x0
ffff800000807028:	6a 00                	push   0x0
ffff80000080702a:	68 00 f0 ff ff       	push   0xfffffffffffff000
ffff80000080702f:	c7 44 24 04 ff 7f 00 	mov    DWORD PTR [rsp+0x4],0x7fff
ffff800000807036:	00 
ffff800000807037:	6a 28                	push   0x28
ffff800000807039:	6a 28                	push   0x28
ffff80000080703b:	6a 28                	push   0x28
ffff80000080703d:	6a 28                	push   0x28
ffff80000080703f:	41 b9 30 00 00 00    	mov    r9d,0x30
ffff800000807045:	41 b8 28 00 00 00    	mov    r8d,0x28
ffff80000080704b:	b9 00 00 00 00       	mov    ecx,0x0
ffff800000807050:	ba 00 00 00 00       	mov    edx,0x0
ffff800000807055:	be 00 00 00 00       	mov    esi,0x0
ffff80000080705a:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080705f:	49 89 df             	mov    r15,rbx
ffff800000807062:	48 b8 70 28 ee ff ff 	movabs rax,0xffffffffffee2870
ffff800000807069:	ff ff ff 
ffff80000080706c:	48 01 d8             	add    rax,rbx
ffff80000080706f:	ff d0                	call   rax
ffff800000807071:	48 83 c4 60          	add    rsp,0x60
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:652
, DS_USER, DS_USER, STACK_TOP, 0, 0, 0, entry, 0, i);
    task[i].pml4= kmalloc(0,PAGE_4K_SIZE);
ffff800000807075:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff80000080707c:	ff ff ff 
ffff80000080707f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807083:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000807086:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000807089:	48 63 d0             	movsxd rdx,eax
ffff80000080708c:	48 89 d0             	mov    rax,rdx
ffff80000080708f:	48 01 c0             	add    rax,rax
ffff800000807092:	48 01 d0             	add    rax,rdx
ffff800000807095:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080709c:	00 
ffff80000080709d:	48 01 d0             	add    rax,rdx
ffff8000008070a0:	48 c1 e0 05          	shl    rax,0x5
ffff8000008070a4:	4c 8d 24 01          	lea    r12,[rcx+rax*1]
ffff8000008070a8:	be 00 10 00 00       	mov    esi,0x1000
ffff8000008070ad:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008070b2:	49 89 df             	mov    r15,rbx
ffff8000008070b5:	48 b8 96 fe ed ff ff 	movabs rax,0xffffffffffedfe96
ffff8000008070bc:	ff ff ff 
ffff8000008070bf:	48 01 d8             	add    rax,rbx
ffff8000008070c2:	ff d0                	call   rax
ffff8000008070c4:	49 89 84 24 e0 00 00 	mov    QWORD PTR [r12+0xe0],rax
ffff8000008070cb:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:653
    task[i].pml4[0]= kmalloc(0,PAGE_4K_SIZE);
ffff8000008070cc:	be 00 10 00 00       	mov    esi,0x1000
ffff8000008070d1:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008070d6:	49 89 df             	mov    r15,rbx
ffff8000008070d9:	48 b8 96 fe ed ff ff 	movabs rax,0xffffffffffedfe96
ffff8000008070e0:	ff ff ff 
ffff8000008070e3:	48 01 d8             	add    rax,rbx
ffff8000008070e6:	ff d0                	call   rax
ffff8000008070e8:	48 89 c2             	mov    rdx,rax
ffff8000008070eb:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff8000008070f2:	ff ff ff 
ffff8000008070f5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008070f9:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff8000008070fc:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008070ff:	48 63 c8             	movsxd rcx,eax
ffff800000807102:	48 89 c8             	mov    rax,rcx
ffff800000807105:	48 01 c0             	add    rax,rax
ffff800000807108:	48 01 c8             	add    rax,rcx
ffff80000080710b:	48 8d 0c c5 00 00 00 	lea    rcx,[rax*8+0x0]
ffff800000807112:	00 
ffff800000807113:	48 01 c8             	add    rax,rcx
ffff800000807116:	48 c1 e0 05          	shl    rax,0x5
ffff80000080711a:	48 01 f0             	add    rax,rsi
ffff80000080711d:	48 8b 80 e0 00 00 00 	mov    rax,QWORD PTR [rax+0xe0]
ffff800000807124:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:654
    unsigned long *pdpt=task[i].pml4;
ffff800000807127:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff80000080712e:	ff ff ff 
ffff800000807131:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807135:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000807138:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080713b:	48 63 d0             	movsxd rdx,eax
ffff80000080713e:	48 89 d0             	mov    rax,rdx
ffff800000807141:	48 01 c0             	add    rax,rax
ffff800000807144:	48 01 d0             	add    rax,rdx
ffff800000807147:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080714e:	00 
ffff80000080714f:	48 01 d0             	add    rax,rdx
ffff800000807152:	48 c1 e0 05          	shl    rax,0x5
ffff800000807156:	48 01 c8             	add    rax,rcx
ffff800000807159:	48 8b 80 e0 00 00 00 	mov    rax,QWORD PTR [rax+0xe0]
ffff800000807160:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:656
    //pdpt第一项(0-1GB)设置为内核空间，这样才能访问中断
    set_1gb_pdpt(pdpt,0,PAGE_PRESENT|PAGE_RWX);
ffff800000807164:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000807168:	ba 03 00 00 00       	mov    edx,0x3
ffff80000080716d:	be 00 00 00 00       	mov    esi,0x0
ffff800000807172:	48 89 c7             	mov    rdi,rax
ffff800000807175:	49 89 df             	mov    r15,rbx
ffff800000807178:	48 b8 e3 05 ee ff ff 	movabs rax,0xffffffffffee05e3
ffff80000080717f:	ff ff ff 
ffff800000807182:	48 01 d8             	add    rax,rbx
ffff800000807185:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:659

    //申请一项pd,里面申请一2mb页用于堆栈
    addr_t *stackb= kmalloc(0,PAGE_4K_SIZE);
ffff800000807187:	be 00 10 00 00       	mov    esi,0x1000
ffff80000080718c:	bf 00 00 00 00       	mov    edi,0x0
ffff800000807191:	49 89 df             	mov    r15,rbx
ffff800000807194:	48 b8 96 fe ed ff ff 	movabs rax,0xffffffffffedfe96
ffff80000080719b:	ff ff ff 
ffff80000080719e:	48 01 d8             	add    rax,rbx
ffff8000008071a1:	ff d0                	call   rax
ffff8000008071a3:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:660
    pdpt[3]=(unsigned long)stackb|PAGE_PRESENT|PAGE_FOR_ALL|PAGE_RWX;//3-4G分配栈空间
ffff8000008071a7:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff8000008071ab:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008071af:	48 83 c0 18          	add    rax,0x18
ffff8000008071b3:	48 83 ca 07          	or     rdx,0x7
ffff8000008071b7:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:661
    set_2mb_pde(stackb + 511, get_phyaddr(req_a_page()), PAGE_FOR_ALL|PAGE_RWX);
ffff8000008071ba:	49 89 df             	mov    r15,rbx
ffff8000008071bd:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008071c2:	48 ba 29 fc ed ff ff 	movabs rdx,0xffffffffffedfc29
ffff8000008071c9:	ff ff ff 
ffff8000008071cc:	48 01 da             	add    rdx,rbx
ffff8000008071cf:	ff d2                	call   rdx
ffff8000008071d1:	89 c7                	mov    edi,eax
ffff8000008071d3:	49 89 df             	mov    r15,rbx
ffff8000008071d6:	48 b8 4a 05 ee ff ff 	movabs rax,0xffffffffffee054a
ffff8000008071dd:	ff ff ff 
ffff8000008071e0:	48 01 d8             	add    rax,rbx
ffff8000008071e3:	ff d0                	call   rax
ffff8000008071e5:	89 c1                	mov    ecx,eax
ffff8000008071e7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008071eb:	48 05 f8 0f 00 00    	add    rax,0xff8
ffff8000008071f1:	ba 06 00 00 00       	mov    edx,0x6
ffff8000008071f6:	89 ce                	mov    esi,ecx
ffff8000008071f8:	48 89 c7             	mov    rdi,rax
ffff8000008071fb:	49 89 df             	mov    r15,rbx
ffff8000008071fe:	48 b8 4e 06 ee ff ff 	movabs rax,0xffffffffffee064e
ffff800000807205:	ff ff ff 
ffff800000807208:	48 01 d8             	add    rax,rbx
ffff80000080720b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:662
    task[i].regs.cr3=task[i].pml4;
ffff80000080720d:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000807214:	ff ff ff 
ffff800000807217:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080721b:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080721e:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000807221:	48 63 d0             	movsxd rdx,eax
ffff800000807224:	48 89 d0             	mov    rax,rdx
ffff800000807227:	48 01 c0             	add    rax,rax
ffff80000080722a:	48 01 d0             	add    rax,rdx
ffff80000080722d:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807234:	00 
ffff800000807235:	48 01 d0             	add    rax,rdx
ffff800000807238:	48 c1 e0 05          	shl    rax,0x5
ffff80000080723c:	48 01 c8             	add    rax,rcx
ffff80000080723f:	48 8b 88 e0 00 00 00 	mov    rcx,QWORD PTR [rax+0xe0]
ffff800000807246:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff80000080724d:	ff ff ff 
ffff800000807250:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807254:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff800000807257:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080725a:	48 63 d0             	movsxd rdx,eax
ffff80000080725d:	48 89 d0             	mov    rax,rdx
ffff800000807260:	48 01 c0             	add    rax,rax
ffff800000807263:	48 01 d0             	add    rax,rdx
ffff800000807266:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080726d:	00 
ffff80000080726e:	48 01 d0             	add    rax,rdx
ffff800000807271:	48 c1 e0 05          	shl    rax,0x5
ffff800000807275:	48 01 f0             	add    rax,rsi
ffff800000807278:	48 89 ca             	mov    rdx,rcx
ffff80000080727b:	48 89 90 64 02 00 00 	mov    QWORD PTR [rax+0x264],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:664

    task[i].stat=TASK_READY;
ffff800000807282:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000807289:	ff ff ff 
ffff80000080728c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807290:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000807293:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000807296:	48 63 d0             	movsxd rdx,eax
ffff800000807299:	48 89 d0             	mov    rax,rdx
ffff80000080729c:	48 01 c0             	add    rax,rax
ffff80000080729f:	48 01 d0             	add    rax,rdx
ffff8000008072a2:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008072a9:	00 
ffff8000008072aa:	48 01 d0             	add    rax,rdx
ffff8000008072ad:	48 c1 e0 05          	shl    rax,0x5
ffff8000008072b1:	48 01 c8             	add    rax,rcx
ffff8000008072b4:	c7 40 18 02 00 00 00 	mov    DWORD PTR [rax+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:665
    task[i].cwd=cwd;
ffff8000008072bb:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff8000008072c2:	ff ff ff 
ffff8000008072c5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008072c9:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008072cc:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008072cf:	48 63 d0             	movsxd rdx,eax
ffff8000008072d2:	48 89 d0             	mov    rax,rdx
ffff8000008072d5:	48 01 c0             	add    rax,rax
ffff8000008072d8:	48 01 d0             	add    rax,rdx
ffff8000008072db:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008072e2:	00 
ffff8000008072e3:	48 01 d0             	add    rax,rdx
ffff8000008072e6:	48 c1 e0 05          	shl    rax,0x5
ffff8000008072ea:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
ffff8000008072ee:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff8000008072f2:	48 89 82 e8 00 00 00 	mov    QWORD PTR [rdx+0xe8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:666
    task[i].exef=exef;
ffff8000008072f9:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000807300:	ff ff ff 
ffff800000807303:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807307:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080730a:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080730d:	48 63 d0             	movsxd rdx,eax
ffff800000807310:	48 89 d0             	mov    rax,rdx
ffff800000807313:	48 01 c0             	add    rax,rax
ffff800000807316:	48 01 d0             	add    rax,rdx
ffff800000807319:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807320:	00 
ffff800000807321:	48 01 d0             	add    rax,rdx
ffff800000807324:	48 c1 e0 05          	shl    rax,0x5
ffff800000807328:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
ffff80000080732c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000807330:	48 89 82 f0 00 00 00 	mov    QWORD PTR [rdx+0xf0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:668

    return i;
ffff800000807337:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:723
    proc_ret_stack *pstack=stack_paddr+stack_size-12;
    pstack->argc=0;
    pstack->argv=0;
    pstack->proc_end_addr=proc_end;
    int *pptr=pstack;*/
}
ffff80000080733a:	48 8d 65 e8          	lea    rsp,[rbp-0x18]
ffff80000080733e:	5b                   	pop    rbx
ffff80000080733f:	41 5c                	pop    r12
ffff800000807341:	41 5f                	pop    r15
ffff800000807343:	5d                   	pop    rbp
ffff800000807344:	c3                   	ret    

ffff800000807345 <do_brk>:
do_brk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:726

void * do_brk(off_t brk)
{
ffff800000807345:	f3 0f 1e fa          	endbr64 
ffff800000807349:	55                   	push   rbp
ffff80000080734a:	48 89 e5             	mov    rbp,rsp
ffff80000080734d:	41 57                	push   r15
ffff80000080734f:	48 83 ec 28          	sub    rsp,0x28
ffff800000807353:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807353 <do_brk+0xe>
ffff80000080735a:	49 bb dd c1 11 00 00 	movabs r11,0x11c1dd
ffff800000807361:	00 00 00 
ffff800000807364:	4c 01 d8             	add    rax,r11
ffff800000807367:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:743
    void *data=current->mem_struct.heap_top;
    current->mem_struct.heap_top=new_heaptop;
    return data; */
    

    int n=PAGE_4K_ALIGN(brk),old_n=PAGE_4K_ALIGN(current->mem_struct.heap_top);
ffff80000080736b:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080736f:	81 c2 ff 0f 00 00    	add    edx,0xfff
ffff800000807375:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
ffff80000080737b:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
ffff80000080737e:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000807385:	ff ff ff 
ffff800000807388:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080738c:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080738f:	48 8b 52 30          	mov    rdx,QWORD PTR [rdx+0x30]
ffff800000807393:	81 c2 ff 0f 00 00    	add    edx,0xfff
ffff800000807399:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
ffff80000080739f:	89 55 e8             	mov    DWORD PTR [rbp-0x18],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:744
    if(old_n<n)
ffff8000008073a2:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff8000008073a5:	3b 55 ec             	cmp    edx,DWORD PTR [rbp-0x14]
ffff8000008073a8:	0f 8d 84 00 00 00    	jge    ffff800000807432 <do_brk+0xed>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:747
    {
        //上抬heap top
        if(current->mem_struct.stack_bottom-brk<CHUNK_SIZE)
ffff8000008073ae:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff8000008073b5:	ff ff ff 
ffff8000008073b8:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008073bc:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008073bf:	48 8b 52 38          	mov    rdx,QWORD PTR [rdx+0x38]
ffff8000008073c3:	48 2b 55 d8          	sub    rdx,QWORD PTR [rbp-0x28]
ffff8000008073c7:	48 81 fa ff 0f 00 00 	cmp    rdx,0xfff
ffff8000008073ce:	77 07                	ja     ffff8000008073d7 <do_brk+0x92>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:750
        {
            //超过顶部
            return NULL;
ffff8000008073d0:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008073d5:	eb 5f                	jmp    ffff800000807436 <do_brk+0xf1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:752
        }
        sys_mmap(PAGE_4K_ALIGN(current->mem_struct.heap_top), (n-old_n)*PAGE_4K_SIZE, PROT_READ|PROT_WRITE, \
ffff8000008073d7:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff8000008073da:	2b 55 e8             	sub    edx,DWORD PTR [rbp-0x18]
ffff8000008073dd:	c1 e2 0c             	shl    edx,0xc
ffff8000008073e0:	48 63 f2             	movsxd rsi,edx
ffff8000008073e3:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff8000008073ea:	ff ff ff 
ffff8000008073ed:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008073f1:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008073f4:	48 8b 52 30          	mov    rdx,QWORD PTR [rdx+0x30]
ffff8000008073f8:	48 81 c2 ff 0f 00 00 	add    rdx,0xfff
ffff8000008073ff:	48 81 e2 00 f0 ff ff 	and    rdx,0xfffffffffffff000
ffff800000807406:	48 89 d7             	mov    rdi,rdx
ffff800000807409:	41 b9 00 00 00 00    	mov    r9d,0x0
ffff80000080740f:	41 b8 00 00 00 00    	mov    r8d,0x0
ffff800000807415:	b9 0b 00 00 00       	mov    ecx,0xb
ffff80000080741a:	ba 03 00 00 00       	mov    edx,0x3
ffff80000080741f:	49 89 c7             	mov    r15,rax
ffff800000807422:	49 ba a7 b5 ee ff ff 	movabs r10,0xffffffffffeeb5a7
ffff800000807429:	ff ff ff 
ffff80000080742c:	49 01 c2             	add    r10,rax
ffff80000080742f:	41 ff d2             	call   r10
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:777
        np->next=hp->next;
        np->prev=hp;
        hp->next=np;
    }
    hp->alloc=1;//分配完毕 */
    return brk;
ffff800000807432:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:778
}
ffff800000807436:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080743a:	c9                   	leave  
ffff80000080743b:	c3                   	ret    

ffff80000080743c <sys_free>:
sys_free():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:780
int sys_free(int ptr)
{
ffff80000080743c:	f3 0f 1e fa          	endbr64 
ffff800000807440:	55                   	push   rbp
ffff800000807441:	48 89 e5             	mov    rbp,rsp
ffff800000807444:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807444 <sys_free+0x8>
ffff80000080744b:	49 bb ec c0 11 00 00 	movabs r11,0x11c0ec
ffff800000807452:	00 00 00 
ffff800000807455:	4c 01 d8             	add    rax,r11
ffff800000807458:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:781
    chunk_header *hp=ptr-CHUNK_SIZE;//回退到头
ffff80000080745b:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080745e:	2d 00 10 00 00       	sub    eax,0x1000
ffff800000807463:	48 98                	cdqe   
ffff800000807465:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:782
    hp->alloc=0;    //合并
ffff800000807469:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080746d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [rax+0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:784
    //向后合并
    chunk_header *p=hp->next;
ffff800000807474:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000807478:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080747c:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:785
    while(p!=NULL)
ffff800000807480:	eb 2e                	jmp    ffff8000008074b0 <sys_free+0x74>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:787
    {
        if(p->alloc==0)
ffff800000807482:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000807486:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff800000807489:	85 c0                	test   eax,eax
ffff80000080748b:	75 2c                	jne    ffff8000008074b9 <sys_free+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:789
        {
            hp->pgn+=p->pgn+1;//把区域合并
ffff80000080748d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000807491:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000807493:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000807497:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000807499:	83 c0 01             	add    eax,0x1
ffff80000080749c:	01 c2                	add    edx,eax
ffff80000080749e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008074a2:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:792
        }else
            break;
        p=p->next;
ffff8000008074a4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008074a8:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff8000008074ac:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:785
    while(p!=NULL)
ffff8000008074b0:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffff8000008074b5:	75 cb                	jne    ffff800000807482 <sys_free+0x46>
ffff8000008074b7:	eb 01                	jmp    ffff8000008074ba <sys_free+0x7e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:791
            break;
ffff8000008074b9:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:795
    }
    //向前合并
    p=hp->prev;
ffff8000008074ba:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008074be:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008074c2:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:796
    while(p!=NULL)
ffff8000008074c6:	eb 2e                	jmp    ffff8000008074f6 <sys_free+0xba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:798
    {
        if(p->alloc==0)
ffff8000008074c8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008074cc:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff8000008074cf:	85 c0                	test   eax,eax
ffff8000008074d1:	75 2c                	jne    ffff8000008074ff <sys_free+0xc3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:800
        {
            p->pgn+=hp->pgn+1;//把区域合并
ffff8000008074d3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008074d7:	8b 10                	mov    edx,DWORD PTR [rax]
ffff8000008074d9:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008074dd:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008074df:	83 c0 01             	add    eax,0x1
ffff8000008074e2:	01 c2                	add    edx,eax
ffff8000008074e4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008074e8:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:803
        }else
            break;
        p=p->prev;
ffff8000008074ea:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008074ee:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008074f2:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:796
    while(p!=NULL)
ffff8000008074f6:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffff8000008074fb:	75 cb                	jne    ffff8000008074c8 <sys_free+0x8c>
ffff8000008074fd:	eb 01                	jmp    ffff800000807500 <sys_free+0xc4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:802
            break;
ffff8000008074ff:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:806
    }
    //合并完成
    return 0;
ffff800000807500:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:807
}
ffff800000807505:	5d                   	pop    rbp
ffff800000807506:	c3                   	ret    

ffff800000807507 <switch_to>:
switch_to():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:809

void switch_to(struct process *from, struct process *to) {
ffff800000807507:	f3 0f 1e fa          	endbr64 
ffff80000080750b:	55                   	push   rbp
ffff80000080750c:	48 89 e5             	mov    rbp,rsp
ffff80000080750f:	53                   	push   rbx
ffff800000807510:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807510 <switch_to+0x9>
ffff800000807517:	49 bb 20 c0 11 00 00 	movabs r11,0x11c020
ffff80000080751e:	00 00 00 
ffff800000807521:	4c 01 d8             	add    rax,r11
ffff800000807524:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
ffff800000807528:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:810
    cur_proc=to-task;
ffff80000080752c:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff800000807533:	ff ff ff 
ffff800000807536:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080753a:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080753d:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000807541:	48 29 ca             	sub    rdx,rcx
ffff800000807544:	48 89 d1             	mov    rcx,rdx
ffff800000807547:	48 c1 f9 05          	sar    rcx,0x5
ffff80000080754b:	48 ba 13 da 4b 68 2f 	movabs rdx,0x84bda12f684bda13
ffff800000807552:	a1 bd 84 
ffff800000807555:	48 0f af d1          	imul   rdx,rcx
ffff800000807559:	89 d1                	mov    ecx,edx
ffff80000080755b:	48 ba d8 fd ff ff ff 	movabs rdx,0xfffffffffffffdd8
ffff800000807562:	ff ff ff 
ffff800000807565:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807569:	89 0a                	mov    DWORD PTR [rdx],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:811
    current=&task[cur_proc];
ffff80000080756b:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff800000807572:	ff ff ff 
ffff800000807575:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807579:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff80000080757c:	48 ba d8 fd ff ff ff 	movabs rdx,0xfffffffffffffdd8
ffff800000807583:	ff ff ff 
ffff800000807586:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080758a:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff80000080758c:	48 63 ca             	movsxd rcx,edx
ffff80000080758f:	48 89 ca             	mov    rdx,rcx
ffff800000807592:	48 01 d2             	add    rdx,rdx
ffff800000807595:	48 01 ca             	add    rdx,rcx
ffff800000807598:	48 8d 0c d5 00 00 00 	lea    rcx,[rdx*8+0x0]
ffff80000080759f:	00 
ffff8000008075a0:	48 01 ca             	add    rdx,rcx
ffff8000008075a3:	48 c1 e2 05          	shl    rdx,0x5
ffff8000008075a7:	48 01 f2             	add    rdx,rsi
ffff8000008075aa:	48 b9 48 fe ff ff ff 	movabs rcx,0xfffffffffffffe48
ffff8000008075b1:	ff ff ff 
ffff8000008075b4:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff8000008075b8:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:813
    //cr3需要物理地址,regs.cr3里面填的就是物理地址
    __asm__ volatile("mov %0,%%rax\n"
ffff8000008075bb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008075bf:	48 8b 80 64 02 00 00 	mov    rax,QWORD PTR [rax+0x264]
ffff8000008075c6:	0f 22 d8             	mov    cr3,rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:815
                 "mov %%rax,%%cr3\n":"=m"(to->regs.cr3));
    __asm__ volatile("mov %%rsp,%0\r\n"
ffff8000008075c9:	4c 8b 4d f0          	mov    r9,QWORD PTR [rbp-0x10]
ffff8000008075cd:	4c 8b 55 f0          	mov    r10,QWORD PTR [rbp-0x10]
ffff8000008075d1:	4c 8b 5d f0          	mov    r11,QWORD PTR [rbp-0x10]
ffff8000008075d5:	48 8b 5d f0          	mov    rbx,QWORD PTR [rbp-0x10]
ffff8000008075d9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008075dd:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff8000008075e1:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff8000008075e5:	4c 8b 45 e8          	mov    r8,QWORD PTR [rbp-0x18]
ffff8000008075e9:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
ffff8000008075ed:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
ffff8000008075f1:	49 89 a1 9c 02 00 00 	mov    QWORD PTR [r9+0x29c],rsp
ffff8000008075f8:	48 8d 05 24 00 00 00 	lea    rax,[rip+0x24]        # ffff800000807623 <done>
ffff8000008075ff:	49 89 82 6c 02 00 00 	mov    QWORD PTR [r10+0x26c],rax
ffff800000807606:	41 8c a3 dc 02 00 00 	mov    WORD PTR [r11+0x2dc],fs
ffff80000080760d:	8c ab e4 02 00 00    	mov    WORD PTR [rbx+0x2e4],gs
ffff800000807613:	48 8b a1 9c 02 00 00 	mov    rsp,QWORD PTR [rcx+0x29c]
ffff80000080761a:	41 ff b0 6c 02 00 00 	push   QWORD PTR [r8+0x26c]
ffff800000807621:	eb 08                	jmp    ffff80000080762b <__switch_to>

ffff800000807623 <done>:
ffff800000807623:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:829
                 "nop":"=m"(from->regs.rsp),"=m"(from->regs.rip),
                 "=m"(from->regs.fs),"=m"(from->regs.gs):
                "m"(to->regs.fs),"m"(to->regs.gs),"m"(to->regs.rsp),"m"(to->regs.rip),
                "D"(from),"S"(to));

}
ffff800000807624:	90                   	nop
ffff800000807625:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
ffff800000807629:	c9                   	leave  
ffff80000080762a:	c3                   	ret    

ffff80000080762b <__switch_to>:
__switch_to():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:830
void __switch_to(struct process *from, struct process *to) {
ffff80000080762b:	f3 0f 1e fa          	endbr64 
ffff80000080762f:	55                   	push   rbp
ffff800000807630:	48 89 e5             	mov    rbp,rsp
ffff800000807633:	41 57                	push   r15
ffff800000807635:	41 54                	push   r12
ffff800000807637:	53                   	push   rbx
ffff800000807638:	48 83 ec 18          	sub    rsp,0x18
ffff80000080763c:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080763c <__switch_to+0x11>
ffff800000807643:	49 bb f4 be 11 00 00 	movabs r11,0x11bef4
ffff80000080764a:	00 00 00 
ffff80000080764d:	4c 01 d8             	add    rax,r11
ffff800000807650:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000807654:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:831
    set_tss(to->tss.rsp0,to->tss.rsp1,to->tss.rsp2,to->tss.ists[0],to->tss.ists[1],
ffff800000807658:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000080765c:	4c 8b 9a 4c 02 00 00 	mov    r11,QWORD PTR [rdx+0x24c]
ffff800000807663:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000807667:	4c 8b 92 44 02 00 00 	mov    r10,QWORD PTR [rdx+0x244]
ffff80000080766e:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000807672:	4c 8b 8a 3c 02 00 00 	mov    r9,QWORD PTR [rdx+0x23c]
ffff800000807679:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000080767d:	4c 8b 82 34 02 00 00 	mov    r8,QWORD PTR [rdx+0x234]
ffff800000807684:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000807688:	4c 8b a2 2c 02 00 00 	mov    r12,QWORD PTR [rdx+0x22c]
ffff80000080768f:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000807693:	48 8b 9a 24 02 00 00 	mov    rbx,QWORD PTR [rdx+0x224]
ffff80000080769a:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000080769e:	48 8b 8a 1c 02 00 00 	mov    rcx,QWORD PTR [rdx+0x21c]
ffff8000008076a5:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff8000008076a9:	48 8b 92 0c 02 00 00 	mov    rdx,QWORD PTR [rdx+0x20c]
ffff8000008076b0:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff8000008076b4:	48 8b b6 04 02 00 00 	mov    rsi,QWORD PTR [rsi+0x204]
ffff8000008076bb:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffff8000008076bf:	48 8b bf fc 01 00 00 	mov    rdi,QWORD PTR [rdi+0x1fc]
ffff8000008076c6:	41 53                	push   r11
ffff8000008076c8:	41 52                	push   r10
ffff8000008076ca:	41 51                	push   r9
ffff8000008076cc:	41 50                	push   r8
ffff8000008076ce:	4d 89 e1             	mov    r9,r12
ffff8000008076d1:	49 89 d8             	mov    r8,rbx
ffff8000008076d4:	49 89 c7             	mov    r15,rax
ffff8000008076d7:	49 ba f0 41 ee ff ff 	movabs r10,0xffffffffffee41f0
ffff8000008076de:	ff ff ff 
ffff8000008076e1:	49 01 c2             	add    r10,rax
ffff8000008076e4:	41 ff d2             	call   r10
ffff8000008076e7:	48 83 c4 20          	add    rsp,0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:833
            to->tss.ists[2],to->tss.ists[3],to->tss.ists[4],to->tss.ists[5],to->tss.ists[6]);
    __asm__ volatile("mov %%fs,%0\r\n"
ffff8000008076eb:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008076ef:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff8000008076f3:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff8000008076f7:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff8000008076fb:	8c a0 dc 02 00 00    	mov    WORD PTR [rax+0x2dc],fs
ffff800000807701:	8c ae e4 02 00 00    	mov    WORD PTR [rsi+0x2e4],gs
ffff800000807707:	8e a2 dc 02 00 00    	mov    fs,WORD PTR [rdx+0x2dc]
ffff80000080770d:	8e a9 e4 02 00 00    	mov    gs,WORD PTR [rcx+0x2e4]
ffff800000807713:	fb                   	sti    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:839
                 "mov %%gs,%1\r\n"
                 "mov %2,%%fs\r\n"
                 "mov %3,%%gs\r\n"
                 "sti":"=m"(to->regs.fs),"=m"(to->regs.gs):
                 "m"(from->regs.fs),"m"(from->regs.gs));
}
ffff800000807714:	90                   	nop
ffff800000807715:	48 8d 65 e8          	lea    rsp,[rbp-0x18]
ffff800000807719:	5b                   	pop    rbx
ffff80000080771a:	41 5c                	pop    r12
ffff80000080771c:	41 5f                	pop    r15
ffff80000080771e:	5d                   	pop    rbp
ffff80000080771f:	c3                   	ret    

ffff800000807720 <set_tss>:
set_tss():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:841

void set_tss(u64 rsp0,u64 rsp1,u64 rsp2,u64 ist0,u64 ist1,u64 ist2,u64 ist3,u64 ist4,u64 ist5,u64 ist6){
ffff800000807720:	f3 0f 1e fa          	endbr64 
ffff800000807724:	55                   	push   rbp
ffff800000807725:	48 89 e5             	mov    rbp,rsp
ffff800000807728:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807728 <set_tss+0x8>
ffff80000080772f:	49 bb 08 be 11 00 00 	movabs r11,0x11be08
ffff800000807736:	00 00 00 
ffff800000807739:	4c 01 d8             	add    rax,r11
ffff80000080773c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000807740:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000807744:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff800000807748:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
ffff80000080774c:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
ffff800000807750:	4c 89 4d d0          	mov    QWORD PTR [rbp-0x30],r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:842
    tss->rsp0=rsp0;
ffff800000807754:	48 ba b8 fd ff ff ff 	movabs rdx,0xfffffffffffffdb8
ffff80000080775b:	ff ff ff 
ffff80000080775e:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807762:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000807765:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
ffff800000807769:	48 89 4a 04          	mov    QWORD PTR [rdx+0x4],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:843
    tss->rsp1=rsp1;
ffff80000080776d:	48 ba b8 fd ff ff ff 	movabs rdx,0xfffffffffffffdb8
ffff800000807774:	ff ff ff 
ffff800000807777:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080777b:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080777e:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff800000807782:	48 89 4a 0c          	mov    QWORD PTR [rdx+0xc],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:844
    tss->rsp2=rsp2;
ffff800000807786:	48 ba b8 fd ff ff ff 	movabs rdx,0xfffffffffffffdb8
ffff80000080778d:	ff ff ff 
ffff800000807790:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807794:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000807797:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff80000080779b:	48 89 4a 14          	mov    QWORD PTR [rdx+0x14],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:845
    tss->ists[0]=ist0;
ffff80000080779f:	48 ba b8 fd ff ff ff 	movabs rdx,0xfffffffffffffdb8
ffff8000008077a6:	ff ff ff 
ffff8000008077a9:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008077ad:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008077b0:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
ffff8000008077b4:	48 89 4a 24          	mov    QWORD PTR [rdx+0x24],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:846
    tss->ists[1]=ist1;
ffff8000008077b8:	48 ba b8 fd ff ff ff 	movabs rdx,0xfffffffffffffdb8
ffff8000008077bf:	ff ff ff 
ffff8000008077c2:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008077c6:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008077c9:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff8000008077cd:	48 89 4a 2c          	mov    QWORD PTR [rdx+0x2c],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:847
    tss->ists[2]=ist2;
ffff8000008077d1:	48 ba b8 fd ff ff ff 	movabs rdx,0xfffffffffffffdb8
ffff8000008077d8:	ff ff ff 
ffff8000008077db:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008077df:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008077e2:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffff8000008077e6:	48 89 4a 34          	mov    QWORD PTR [rdx+0x34],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:848
    tss->ists[3]=ist3;
ffff8000008077ea:	48 ba b8 fd ff ff ff 	movabs rdx,0xfffffffffffffdb8
ffff8000008077f1:	ff ff ff 
ffff8000008077f4:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008077f8:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008077fb:	48 8b 4d 10          	mov    rcx,QWORD PTR [rbp+0x10]
ffff8000008077ff:	48 89 4a 3c          	mov    QWORD PTR [rdx+0x3c],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:849
    tss->ists[4]=ist4;
ffff800000807803:	48 ba b8 fd ff ff ff 	movabs rdx,0xfffffffffffffdb8
ffff80000080780a:	ff ff ff 
ffff80000080780d:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807811:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000807814:	48 8b 4d 18          	mov    rcx,QWORD PTR [rbp+0x18]
ffff800000807818:	48 89 4a 44          	mov    QWORD PTR [rdx+0x44],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:850
    tss->ists[5]=ist5;
ffff80000080781c:	48 ba b8 fd ff ff ff 	movabs rdx,0xfffffffffffffdb8
ffff800000807823:	ff ff ff 
ffff800000807826:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080782a:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080782d:	48 8b 4d 20          	mov    rcx,QWORD PTR [rbp+0x20]
ffff800000807831:	48 89 4a 4c          	mov    QWORD PTR [rdx+0x4c],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:851
    tss->ists[6]=ist6;
ffff800000807835:	48 ba b8 fd ff ff ff 	movabs rdx,0xfffffffffffffdb8
ffff80000080783c:	ff ff ff 
ffff80000080783f:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000807843:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807846:	48 8b 55 28          	mov    rdx,QWORD PTR [rbp+0x28]
ffff80000080784a:	48 89 50 54          	mov    QWORD PTR [rax+0x54],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:852
}
ffff80000080784e:	90                   	nop
ffff80000080784f:	5d                   	pop    rbp
ffff800000807850:	c3                   	ret    

ffff800000807851 <fork_child_ret>:
fork_child_ret():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:854

int fork_child_ret(){
ffff800000807851:	f3 0f 1e fa          	endbr64 
ffff800000807855:	55                   	push   rbp
ffff800000807856:	48 89 e5             	mov    rbp,rsp
ffff800000807859:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807859 <fork_child_ret+0x8>
ffff800000807860:	49 bb d7 bc 11 00 00 	movabs r11,0x11bcd7
ffff800000807867:	00 00 00 
ffff80000080786a:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:855
    return 0;
ffff80000080786d:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:857

}
ffff800000807872:	5d                   	pop    rbp
ffff800000807873:	c3                   	ret    

ffff800000807874 <sys_fork>:
sys_fork():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:859

int sys_fork(void){
ffff800000807874:	f3 0f 1e fa          	endbr64 
ffff800000807878:	55                   	push   rbp
ffff800000807879:	48 89 e5             	mov    rbp,rsp
ffff80000080787c:	41 57                	push   r15
ffff80000080787e:	53                   	push   rbx
ffff80000080787f:	48 81 ec c0 00 00 00 	sub    rsp,0xc0
ffff800000807886:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000807886 <sys_fork+0x12>
ffff80000080788d:	49 bb aa bc 11 00 00 	movabs r11,0x11bcaa
ffff800000807894:	00 00 00 
ffff800000807897:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:860
    cli();
ffff80000080789a:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:861
    int pid=req_proc();
ffff80000080789b:	49 89 df             	mov    r15,rbx
ffff80000080789e:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008078a3:	48 ba b8 26 ee ff ff 	movabs rdx,0xffffffffffee26b8
ffff8000008078aa:	ff ff ff 
ffff8000008078ad:	48 01 da             	add    rdx,rbx
ffff8000008078b0:	ff d2                	call   rdx
ffff8000008078b2:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:862
    int pids=task[pid].pid;
ffff8000008078b5:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff8000008078bc:	ff ff ff 
ffff8000008078bf:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008078c3:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008078c6:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff8000008078c9:	48 63 d0             	movsxd rdx,eax
ffff8000008078cc:	48 89 d0             	mov    rax,rdx
ffff8000008078cf:	48 01 c0             	add    rax,rax
ffff8000008078d2:	48 01 d0             	add    rax,rdx
ffff8000008078d5:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008078dc:	00 
ffff8000008078dd:	48 01 d0             	add    rax,rdx
ffff8000008078e0:	48 c1 e0 05          	shl    rax,0x5
ffff8000008078e4:	48 01 c8             	add    rax,rcx
ffff8000008078e7:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008078e9:	89 45 d0             	mov    DWORD PTR [rbp-0x30],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:863
    if(pid==-1)return -1;
ffff8000008078ec:	83 7d d4 ff          	cmp    DWORD PTR [rbp-0x2c],0xffffffff
ffff8000008078f0:	75 0a                	jne    ffff8000008078fc <sys_fork+0x88>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:863 (discriminator 1)
ffff8000008078f2:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff8000008078f7:	e9 b5 0e 00 00       	jmp    ffff8000008087b1 <sys_fork+0xf3d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:865
    //首先完全复制
    task[pid]=*current;
ffff8000008078fc:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff800000807903:	ff ff ff 
ffff800000807906:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080790a:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080790d:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000807914:	ff ff ff 
ffff800000807917:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080791b:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff80000080791e:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000807921:	48 63 d0             	movsxd rdx,eax
ffff800000807924:	48 89 d0             	mov    rax,rdx
ffff800000807927:	48 01 c0             	add    rax,rax
ffff80000080792a:	48 01 d0             	add    rax,rdx
ffff80000080792d:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807934:	00 
ffff800000807935:	48 01 d0             	add    rax,rdx
ffff800000807938:	48 c1 e0 05          	shl    rax,0x5
ffff80000080793c:	48 01 f0             	add    rax,rsi
ffff80000080793f:	48 89 c2             	mov    rdx,rax
ffff800000807942:	48 89 c8             	mov    rax,rcx
ffff800000807945:	b9 60 03 00 00       	mov    ecx,0x360
ffff80000080794a:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff80000080794d:	48 89 32             	mov    QWORD PTR [rdx],rsi
ffff800000807950:	89 ce                	mov    esi,ecx
ffff800000807952:	48 01 d6             	add    rsi,rdx
ffff800000807955:	48 8d 7e 08          	lea    rdi,[rsi+0x8]
ffff800000807959:	89 ce                	mov    esi,ecx
ffff80000080795b:	48 01 c6             	add    rsi,rax
ffff80000080795e:	48 83 c6 08          	add    rsi,0x8
ffff800000807962:	48 8b 76 f0          	mov    rsi,QWORD PTR [rsi-0x10]
ffff800000807966:	48 89 77 f0          	mov    QWORD PTR [rdi-0x10],rsi
ffff80000080796a:	48 8d 7a 08          	lea    rdi,[rdx+0x8]
ffff80000080796e:	48 83 e7 f8          	and    rdi,0xfffffffffffffff8
ffff800000807972:	48 29 fa             	sub    rdx,rdi
ffff800000807975:	48 29 d0             	sub    rax,rdx
ffff800000807978:	01 d1                	add    ecx,edx
ffff80000080797a:	83 e1 f8             	and    ecx,0xfffffff8
ffff80000080797d:	c1 e9 03             	shr    ecx,0x3
ffff800000807980:	89 ca                	mov    edx,ecx
ffff800000807982:	89 d2                	mov    edx,edx
ffff800000807984:	48 89 c6             	mov    rsi,rax
ffff800000807987:	48 89 d1             	mov    rcx,rdx
ffff80000080798a:	f3 48 a5             	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:866
    task[pid].pid=pids;
ffff80000080798d:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000807994:	ff ff ff 
ffff800000807997:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080799b:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080799e:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff8000008079a1:	48 63 d0             	movsxd rdx,eax
ffff8000008079a4:	48 89 d0             	mov    rax,rdx
ffff8000008079a7:	48 01 c0             	add    rax,rax
ffff8000008079aa:	48 01 d0             	add    rax,rdx
ffff8000008079ad:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008079b4:	00 
ffff8000008079b5:	48 01 d0             	add    rax,rdx
ffff8000008079b8:	48 c1 e0 05          	shl    rax,0x5
ffff8000008079bc:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
ffff8000008079c0:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff8000008079c3:	89 02                	mov    DWORD PTR [rdx],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:867
    task[pid].stat=TASK_ZOMBIE;
ffff8000008079c5:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff8000008079cc:	ff ff ff 
ffff8000008079cf:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008079d3:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008079d6:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff8000008079d9:	48 63 d0             	movsxd rdx,eax
ffff8000008079dc:	48 89 d0             	mov    rax,rdx
ffff8000008079df:	48 01 c0             	add    rax,rax
ffff8000008079e2:	48 01 d0             	add    rax,rdx
ffff8000008079e5:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008079ec:	00 
ffff8000008079ed:	48 01 d0             	add    rax,rdx
ffff8000008079f0:	48 c1 e0 05          	shl    rax,0x5
ffff8000008079f4:	48 01 c8             	add    rax,rcx
ffff8000008079f7:	c7 40 18 04 00 00 00 	mov    DWORD PTR [rax+0x18],0x4
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:874

//    __asm__ volatile("mov %%r10,%0"::"m"(r->rip));
    // r->rip=current->regs.rip;

    // memcpy(&task[pid].tss,tss, sizeof(TSS));
    task[pid].parent_pid=current->pid;
ffff8000008079fe:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff800000807a05:	ff ff ff 
ffff800000807a08:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807a0c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807a0f:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000807a16:	ff ff ff 
ffff800000807a19:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807a1d:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff800000807a20:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000807a23:	48 63 c8             	movsxd rcx,eax
ffff800000807a26:	48 89 c8             	mov    rax,rcx
ffff800000807a29:	48 01 c0             	add    rax,rax
ffff800000807a2c:	48 01 c8             	add    rax,rcx
ffff800000807a2f:	48 8d 0c c5 00 00 00 	lea    rcx,[rax*8+0x0]
ffff800000807a36:	00 
ffff800000807a37:	48 01 c8             	add    rax,rcx
ffff800000807a3a:	48 c1 e0 05          	shl    rax,0x5
ffff800000807a3e:	48 8d 0c 06          	lea    rcx,[rsi+rax*1]
ffff800000807a42:	8b 02                	mov    eax,DWORD PTR [rdx]
ffff800000807a44:	89 81 bc 00 00 00    	mov    DWORD PTR [rcx+0xbc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:876
    //设置父子关系以及初始化子进程的的list节点
    list_init(&task[pid].node);
ffff800000807a4a:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000807a51:	ff ff ff 
ffff800000807a54:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807a58:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000807a5b:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000807a5e:	48 63 d0             	movsxd rdx,eax
ffff800000807a61:	48 89 d0             	mov    rax,rdx
ffff800000807a64:	48 01 c0             	add    rax,rax
ffff800000807a67:	48 01 d0             	add    rax,rdx
ffff800000807a6a:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807a71:	00 
ffff800000807a72:	48 01 d0             	add    rax,rdx
ffff800000807a75:	48 c1 e0 05          	shl    rax,0x5
ffff800000807a79:	48 01 c8             	add    rax,rcx
ffff800000807a7c:	48 05 3c 03 00 00    	add    rax,0x33c
ffff800000807a82:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff800000807a86:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000807a8a:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff800000807a91:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000807a95:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff800000807a9c:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff800000807a9d:	90                   	nop
sys_fork():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:877
    task[pid].child_procs=NULL;
ffff800000807a9e:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000807aa5:	ff ff ff 
ffff800000807aa8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807aac:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000807aaf:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000807ab2:	48 63 d0             	movsxd rdx,eax
ffff800000807ab5:	48 89 d0             	mov    rax,rdx
ffff800000807ab8:	48 01 c0             	add    rax,rax
ffff800000807abb:	48 01 d0             	add    rax,rdx
ffff800000807abe:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807ac5:	00 
ffff800000807ac6:	48 01 d0             	add    rax,rdx
ffff800000807ac9:	48 c1 e0 05          	shl    rax,0x5
ffff800000807acd:	48 01 c8             	add    rax,rcx
ffff800000807ad0:	48 c7 80 54 03 00 00 	mov    QWORD PTR [rax+0x354],0x0
ffff800000807ad7:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:878
    task[pid].node.data=&task[pid];
ffff800000807adb:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000807ae2:	ff ff ff 
ffff800000807ae5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807ae9:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000807aec:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000807aef:	48 63 d0             	movsxd rdx,eax
ffff800000807af2:	48 89 d0             	mov    rax,rdx
ffff800000807af5:	48 01 c0             	add    rax,rax
ffff800000807af8:	48 01 d0             	add    rax,rdx
ffff800000807afb:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807b02:	00 
ffff800000807b03:	48 01 d0             	add    rax,rdx
ffff800000807b06:	48 c1 e0 05          	shl    rax,0x5
ffff800000807b0a:	48 89 c7             	mov    rdi,rax
ffff800000807b0d:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000807b14:	ff ff ff 
ffff800000807b17:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807b1b:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff800000807b1e:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000807b21:	48 63 d0             	movsxd rdx,eax
ffff800000807b24:	48 89 d0             	mov    rax,rdx
ffff800000807b27:	48 01 c0             	add    rax,rax
ffff800000807b2a:	48 01 d0             	add    rax,rdx
ffff800000807b2d:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807b34:	00 
ffff800000807b35:	48 01 d0             	add    rax,rdx
ffff800000807b38:	48 c1 e0 05          	shl    rax,0x5
ffff800000807b3c:	48 01 f0             	add    rax,rsi
ffff800000807b3f:	48 8d 14 39          	lea    rdx,[rcx+rdi*1]
ffff800000807b43:	48 89 90 44 03 00 00 	mov    QWORD PTR [rax+0x344],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:879
    if(!current->child_procs)
ffff800000807b4a:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff800000807b51:	ff ff ff 
ffff800000807b54:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807b58:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807b5b:	48 8b 80 54 03 00 00 	mov    rax,QWORD PTR [rax+0x354]
ffff800000807b62:	48 85 c0             	test   rax,rax
ffff800000807b65:	75 57                	jne    ffff800000807bbe <sys_fork+0x34a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:880
        current->child_procs=&task[pid].node;
ffff800000807b67:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000807b6e:	ff ff ff 
ffff800000807b71:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807b75:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000807b78:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000807b7b:	48 63 d0             	movsxd rdx,eax
ffff800000807b7e:	48 89 d0             	mov    rax,rdx
ffff800000807b81:	48 01 c0             	add    rax,rax
ffff800000807b84:	48 01 d0             	add    rax,rdx
ffff800000807b87:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807b8e:	00 
ffff800000807b8f:	48 01 d0             	add    rax,rdx
ffff800000807b92:	48 c1 e0 05          	shl    rax,0x5
ffff800000807b96:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
ffff800000807b9a:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff800000807ba1:	ff ff ff 
ffff800000807ba4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807ba8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807bab:	48 81 c2 3c 03 00 00 	add    rdx,0x33c
ffff800000807bb2:	48 89 90 54 03 00 00 	mov    QWORD PTR [rax+0x354],rdx
ffff800000807bb9:	e9 3b 01 00 00       	jmp    ffff800000807cf9 <sys_fork+0x485>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:882
    else
        list_add(current->child_procs,&task[pid].node);
ffff800000807bbe:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000807bc5:	ff ff ff 
ffff800000807bc8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807bcc:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000807bcf:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000807bd2:	48 63 d0             	movsxd rdx,eax
ffff800000807bd5:	48 89 d0             	mov    rax,rdx
ffff800000807bd8:	48 01 c0             	add    rax,rax
ffff800000807bdb:	48 01 d0             	add    rax,rdx
ffff800000807bde:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807be5:	00 
ffff800000807be6:	48 01 d0             	add    rax,rdx
ffff800000807be9:	48 c1 e0 05          	shl    rax,0x5
ffff800000807bed:	48 01 c8             	add    rax,rcx
ffff800000807bf0:	48 8d 90 3c 03 00 00 	lea    rdx,[rax+0x33c]
ffff800000807bf7:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff800000807bfe:	ff ff ff 
ffff800000807c01:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807c05:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807c08:	48 8b 80 54 03 00 00 	mov    rax,QWORD PTR [rax+0x354]
ffff800000807c0f:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
ffff800000807c13:	48 89 95 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdx
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:33
    struct List* p=entry;
ffff800000807c1a:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000807c1e:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:34
    for(;p->next&&p->next!=p;p=p->next){
ffff800000807c25:	eb 31                	jmp    ffff800000807c58 <sys_fork+0x3e4>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:35
        if(p->data==new->data)
ffff800000807c27:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000807c2e:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff800000807c32:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000807c39:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000807c3d:	48 39 c2             	cmp    rdx,rax
ffff800000807c40:	0f 84 b2 00 00 00    	je     ffff800000807cf8 <sys_fork+0x484>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:34
    for(;p->next&&p->next!=p;p=p->next){
ffff800000807c46:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000807c4d:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000807c51:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
ffff800000807c58:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000807c5f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000807c63:	48 85 c0             	test   rax,rax
ffff800000807c66:	74 14                	je     ffff800000807c7c <sys_fork+0x408>
ffff800000807c68:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000807c6f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000807c73:	48 39 85 70 ff ff ff 	cmp    QWORD PTR [rbp-0x90],rax
ffff800000807c7a:	75 ab                	jne    ffff800000807c27 <sys_fork+0x3b3>
ffff800000807c7c:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000807c83:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
ffff800000807c8a:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000807c91:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff800000807c98:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff800000807c9f:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff800000807ca3:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff800000807caa:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff800000807cae:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff800000807cb5:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
ffff800000807cbc:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff800000807cbf:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff800000807cc6:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000807cca:	48 85 c0             	test   rax,rax
ffff800000807ccd:	74 15                	je     ffff800000807ce4 <sys_fork+0x470>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff800000807ccf:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff800000807cd6:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000807cda:	48 8b 95 60 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa0]
ffff800000807ce1:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:29
    entry->next = new;
ffff800000807ce4:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff800000807ceb:	48 8b 95 60 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa0]
ffff800000807cf2:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff800000807cf6:	eb 01                	jmp    ffff800000807cf9 <sys_fork+0x485>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:36
            return;
ffff800000807cf8:	90                   	nop
sys_fork():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:884

    task[pid].utime=0;
ffff800000807cf9:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000807d00:	ff ff ff 
ffff800000807d03:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807d07:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000807d0a:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000807d0d:	48 63 d0             	movsxd rdx,eax
ffff800000807d10:	48 89 d0             	mov    rax,rdx
ffff800000807d13:	48 01 c0             	add    rax,rax
ffff800000807d16:	48 01 d0             	add    rax,rdx
ffff800000807d19:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807d20:	00 
ffff800000807d21:	48 01 d0             	add    rax,rdx
ffff800000807d24:	48 c1 e0 05          	shl    rax,0x5
ffff800000807d28:	48 01 c8             	add    rax,rcx
ffff800000807d2b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [rax+0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:887

    //复制父进程的内存映射到子进程，然后重新映射并复制子进程的堆栈和数据段
    copy_mmap(current,&task[pid]);
ffff800000807d32:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000807d39:	ff ff ff 
ffff800000807d3c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807d40:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000807d43:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000807d46:	48 63 d0             	movsxd rdx,eax
ffff800000807d49:	48 89 d0             	mov    rax,rdx
ffff800000807d4c:	48 01 c0             	add    rax,rax
ffff800000807d4f:	48 01 d0             	add    rax,rdx
ffff800000807d52:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807d59:	00 
ffff800000807d5a:	48 01 d0             	add    rax,rdx
ffff800000807d5d:	48 c1 e0 05          	shl    rax,0x5
ffff800000807d61:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
ffff800000807d65:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff800000807d6c:	ff ff ff 
ffff800000807d6f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807d73:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807d76:	48 89 d6             	mov    rsi,rdx
ffff800000807d79:	48 89 c7             	mov    rdi,rax
ffff800000807d7c:	49 89 df             	mov    r15,rbx
ffff800000807d7f:	48 b8 2f 56 ee ff ff 	movabs rax,0xffffffffffee562f
ffff800000807d86:	ff ff ff 
ffff800000807d89:	48 01 d8             	add    rax,rbx
ffff800000807d8c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:892
    
    //复制完毕，开始更改堆栈
    //栈
    //首先获取物理内存，然后临时映射到一个地方，然后拷贝数据，再解除映射，再映射到目标进程的页表。
    addr_t stk=task[pid].mem_struct.stack_top-PAGE_4K_SIZE;
ffff800000807d8e:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000807d95:	ff ff ff 
ffff800000807d98:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807d9c:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000807d9f:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000807da2:	48 63 d0             	movsxd rdx,eax
ffff800000807da5:	48 89 d0             	mov    rax,rdx
ffff800000807da8:	48 01 c0             	add    rax,rax
ffff800000807dab:	48 01 d0             	add    rax,rdx
ffff800000807dae:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807db5:	00 
ffff800000807db6:	48 01 d0             	add    rax,rdx
ffff800000807db9:	48 c1 e0 05          	shl    rax,0x5
ffff800000807dbd:	48 01 c8             	add    rax,rcx
ffff800000807dc0:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000807dc4:	48 2d 00 10 00 00    	sub    rax,0x1000
ffff800000807dca:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:893
    addr_t tmpla=KNL_BASE+0x80000000;
ffff800000807dce:	48 b8 00 00 00 80 00 	movabs rax,0xffff800080000000
ffff800000807dd5:	80 ff ff 
ffff800000807dd8:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:894
    for(;stk>=task[pid].mem_struct.stack_bottom;stk-=PAGE_4K_SIZE){
ffff800000807ddc:	e9 e3 00 00 00       	jmp    ffff800000807ec4 <sys_fork+0x650>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:895 (discriminator 2)
        addr_t new_stkpg= pmalloc(PAGE_4K_SIZE);
ffff800000807de1:	bf 00 10 00 00       	mov    edi,0x1000
ffff800000807de6:	49 89 df             	mov    r15,rbx
ffff800000807de9:	48 b8 4b 01 ee ff ff 	movabs rax,0xffffffffffee014b
ffff800000807df0:	ff ff ff 
ffff800000807df3:	48 01 d8             	add    rax,rbx
ffff800000807df6:	ff d0                	call   rax
ffff800000807df8:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:896 (discriminator 2)
        smmap(new_stkpg,tmpla,PAGE_PRESENT|PAGE_RWX,current->pml4);
ffff800000807dfc:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff800000807e03:	ff ff ff 
ffff800000807e06:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807e0a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807e0d:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff800000807e14:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
ffff800000807e18:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000807e1c:	48 89 d1             	mov    rcx,rdx
ffff800000807e1f:	ba 03 00 00 00       	mov    edx,0x3
ffff800000807e24:	48 89 c7             	mov    rdi,rax
ffff800000807e27:	49 89 df             	mov    r15,rbx
ffff800000807e2a:	48 b8 9c e8 ed ff ff 	movabs rax,0xffffffffffede89c
ffff800000807e31:	ff ff ff 
ffff800000807e34:	48 01 d8             	add    rax,rbx
ffff800000807e37:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:897 (discriminator 2)
        memcpy(tmpla,stk,PAGE_4K_SIZE);//把当前进程的栈空间复制到新栈里面
ffff800000807e39:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff800000807e3d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000807e41:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000807e46:	48 89 ce             	mov    rsi,rcx
ffff800000807e49:	48 89 c7             	mov    rdi,rax
ffff800000807e4c:	49 89 df             	mov    r15,rbx
ffff800000807e4f:	48 b8 02 1d ef ff ff 	movabs rax,0xffffffffffef1d02
ffff800000807e56:	ff ff ff 
ffff800000807e59:	48 01 d8             	add    rax,rbx
ffff800000807e5c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:900 (discriminator 2)
        
        //把新的页面映射到进程页表里
        smmap(new_stkpg,stk,PAGE_PRESENT|PAGE_RWX|PAGE_FOR_ALL,task[pid].pml4);
ffff800000807e5e:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000807e65:	ff ff ff 
ffff800000807e68:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807e6c:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000807e6f:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000807e72:	48 63 d0             	movsxd rdx,eax
ffff800000807e75:	48 89 d0             	mov    rax,rdx
ffff800000807e78:	48 01 c0             	add    rax,rax
ffff800000807e7b:	48 01 d0             	add    rax,rdx
ffff800000807e7e:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807e85:	00 
ffff800000807e86:	48 01 d0             	add    rax,rdx
ffff800000807e89:	48 c1 e0 05          	shl    rax,0x5
ffff800000807e8d:	48 01 c8             	add    rax,rcx
ffff800000807e90:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff800000807e97:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
ffff800000807e9b:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000807e9f:	48 89 d1             	mov    rcx,rdx
ffff800000807ea2:	ba 07 00 00 00       	mov    edx,0x7
ffff800000807ea7:	48 89 c7             	mov    rdi,rax
ffff800000807eaa:	49 89 df             	mov    r15,rbx
ffff800000807ead:	48 b8 9c e8 ed ff ff 	movabs rax,0xffffffffffede89c
ffff800000807eb4:	ff ff ff 
ffff800000807eb7:	48 01 d8             	add    rax,rbx
ffff800000807eba:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:894 (discriminator 2)
    for(;stk>=task[pid].mem_struct.stack_bottom;stk-=PAGE_4K_SIZE){
ffff800000807ebc:	48 81 6d e8 00 10 00 	sub    QWORD PTR [rbp-0x18],0x1000
ffff800000807ec3:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:894 (discriminator 1)
ffff800000807ec4:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000807ecb:	ff ff ff 
ffff800000807ece:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807ed2:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000807ed5:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000807ed8:	48 63 d0             	movsxd rdx,eax
ffff800000807edb:	48 89 d0             	mov    rax,rdx
ffff800000807ede:	48 01 c0             	add    rax,rax
ffff800000807ee1:	48 01 d0             	add    rax,rdx
ffff800000807ee4:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807eeb:	00 
ffff800000807eec:	48 01 d0             	add    rax,rdx
ffff800000807eef:	48 c1 e0 05          	shl    rax,0x5
ffff800000807ef3:	48 01 c8             	add    rax,rcx
ffff800000807ef6:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff800000807efa:	48 39 45 e8          	cmp    QWORD PTR [rbp-0x18],rax
ffff800000807efe:	0f 83 dd fe ff ff    	jae    ffff800000807de1 <sys_fork+0x56d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:902
    }
    if(task[pid].mem_struct.stack_top<=task[pid].mem_struct.stack_bottom){
ffff800000807f04:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000807f0b:	ff ff ff 
ffff800000807f0e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807f12:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000807f15:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000807f18:	48 63 d0             	movsxd rdx,eax
ffff800000807f1b:	48 89 d0             	mov    rax,rdx
ffff800000807f1e:	48 01 c0             	add    rax,rax
ffff800000807f21:	48 01 d0             	add    rax,rdx
ffff800000807f24:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807f2b:	00 
ffff800000807f2c:	48 01 d0             	add    rax,rdx
ffff800000807f2f:	48 c1 e0 05          	shl    rax,0x5
ffff800000807f33:	48 01 c8             	add    rax,rcx
ffff800000807f36:	48 8b 48 40          	mov    rcx,QWORD PTR [rax+0x40]
ffff800000807f3a:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000807f41:	ff ff ff 
ffff800000807f44:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807f48:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff800000807f4b:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000807f4e:	48 63 d0             	movsxd rdx,eax
ffff800000807f51:	48 89 d0             	mov    rax,rdx
ffff800000807f54:	48 01 c0             	add    rax,rax
ffff800000807f57:	48 01 d0             	add    rax,rdx
ffff800000807f5a:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807f61:	00 
ffff800000807f62:	48 01 d0             	add    rax,rdx
ffff800000807f65:	48 c1 e0 05          	shl    rax,0x5
ffff800000807f69:	48 01 f0             	add    rax,rsi
ffff800000807f6c:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff800000807f70:	48 39 c1             	cmp    rcx,rax
ffff800000807f73:	0f 87 f4 00 00 00    	ja     ffff80000080806d <sys_fork+0x7f9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:905
        //父进程没有栈空间（一般是不可能的，这个几乎就是为了内核进程fork而写）
        //开辟一页空栈。
        addr_t new_stkpg= (addr_t) pmalloc(PAGE_4K_SIZE);
ffff800000807f79:	bf 00 10 00 00       	mov    edi,0x1000
ffff800000807f7e:	49 89 df             	mov    r15,rbx
ffff800000807f81:	48 b8 4b 01 ee ff ff 	movabs rax,0xffffffffffee014b
ffff800000807f88:	ff ff ff 
ffff800000807f8b:	48 01 d8             	add    rax,rbx
ffff800000807f8e:	ff d0                	call   rax
ffff800000807f90:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:906
        stk=task[pid].mem_struct.stack_top-PAGE_4K_SIZE;
ffff800000807f94:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000807f9b:	ff ff ff 
ffff800000807f9e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807fa2:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000807fa5:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000807fa8:	48 63 d0             	movsxd rdx,eax
ffff800000807fab:	48 89 d0             	mov    rax,rdx
ffff800000807fae:	48 01 c0             	add    rax,rax
ffff800000807fb1:	48 01 d0             	add    rax,rdx
ffff800000807fb4:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807fbb:	00 
ffff800000807fbc:	48 01 d0             	add    rax,rdx
ffff800000807fbf:	48 c1 e0 05          	shl    rax,0x5
ffff800000807fc3:	48 01 c8             	add    rax,rcx
ffff800000807fc6:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000807fca:	48 2d 00 10 00 00    	sub    rax,0x1000
ffff800000807fd0:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:908
        //把新的页面映射到进程页表里
        smmap(new_stkpg,stk,PAGE_PRESENT|PAGE_RWX|PAGE_FOR_ALL,task[pid].pml4);
ffff800000807fd4:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000807fdb:	ff ff ff 
ffff800000807fde:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807fe2:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000807fe5:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000807fe8:	48 63 d0             	movsxd rdx,eax
ffff800000807feb:	48 89 d0             	mov    rax,rdx
ffff800000807fee:	48 01 c0             	add    rax,rax
ffff800000807ff1:	48 01 d0             	add    rax,rdx
ffff800000807ff4:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807ffb:	00 
ffff800000807ffc:	48 01 d0             	add    rax,rdx
ffff800000807fff:	48 c1 e0 05          	shl    rax,0x5
ffff800000808003:	48 01 c8             	add    rax,rcx
ffff800000808006:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff80000080800d:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
ffff800000808011:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000808015:	48 89 d1             	mov    rcx,rdx
ffff800000808018:	ba 07 00 00 00       	mov    edx,0x7
ffff80000080801d:	48 89 c7             	mov    rdi,rax
ffff800000808020:	49 89 df             	mov    r15,rbx
ffff800000808023:	48 b8 9c e8 ed ff ff 	movabs rax,0xffffffffffede89c
ffff80000080802a:	ff ff ff 
ffff80000080802d:	48 01 d8             	add    rax,rbx
ffff800000808030:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:910
        //给新进程分配一页栈
        task[pid].mem_struct.stack_bottom=stk;
ffff800000808032:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000808039:	ff ff ff 
ffff80000080803c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808040:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000808043:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000808046:	48 63 d0             	movsxd rdx,eax
ffff800000808049:	48 89 d0             	mov    rax,rdx
ffff80000080804c:	48 01 c0             	add    rax,rax
ffff80000080804f:	48 01 d0             	add    rax,rdx
ffff800000808052:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000808059:	00 
ffff80000080805a:	48 01 d0             	add    rax,rdx
ffff80000080805d:	48 c1 e0 05          	shl    rax,0x5
ffff800000808061:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
ffff800000808065:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000808069:	48 89 42 38          	mov    QWORD PTR [rdx+0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:916
        //给这页新的栈填上恢复上下文需要的内容
        
    }
    //中断使用的栈空间
    //ist一页就够
    addr_t new_stkpg= kmalloc(0,PAGE_4K_SIZE);
ffff80000080806d:	be 00 10 00 00       	mov    esi,0x1000
ffff800000808072:	bf 00 00 00 00       	mov    edi,0x0
ffff800000808077:	49 89 df             	mov    r15,rbx
ffff80000080807a:	48 b8 96 fe ed ff ff 	movabs rax,0xffffffffffedfe96
ffff800000808081:	ff ff ff 
ffff800000808084:	48 01 d8             	add    rax,rbx
ffff800000808087:	ff d0                	call   rax
ffff800000808089:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:917
    memcpy(new_stkpg,current->tss.ists[0]-PAGE_4K_SIZE,PAGE_4K_SIZE);//把当前进程的栈空间复制到新栈里面
ffff80000080808d:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff800000808094:	ff ff ff 
ffff800000808097:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080809b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080809e:	48 8b 80 1c 02 00 00 	mov    rax,QWORD PTR [rax+0x21c]
ffff8000008080a5:	48 2d 00 10 00 00    	sub    rax,0x1000
ffff8000008080ab:	48 89 c1             	mov    rcx,rax
ffff8000008080ae:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008080b2:	ba 00 10 00 00       	mov    edx,0x1000
ffff8000008080b7:	48 89 ce             	mov    rsi,rcx
ffff8000008080ba:	48 89 c7             	mov    rdi,rax
ffff8000008080bd:	49 89 df             	mov    r15,rbx
ffff8000008080c0:	48 b8 02 1d ef ff ff 	movabs rax,0xffffffffffef1d02
ffff8000008080c7:	ff ff ff 
ffff8000008080ca:	48 01 d8             	add    rax,rbx
ffff8000008080cd:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:918
    stack_store_regs* ctx_dup=new_stkpg+PAGE_4K_SIZE-sizeof(stack_store_regs);//拷贝的上下文
ffff8000008080cf:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008080d3:	48 05 58 0f 00 00    	add    rax,0xf58
ffff8000008080d9:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:919
    ctx_dup->rax=0;//这样进程切换到子进程的done标签，从时钟中断返回弹出堆栈的时候rax弹出来的就是0，成为返回值。
ffff8000008080dd:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff8000008080e1:	48 c7 40 78 00 00 00 	mov    QWORD PTR [rax+0x78],0x0
ffff8000008080e8:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:920
    task[pid].regs.rip=clock_ret;
ffff8000008080e9:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff8000008080f0:	ff ff ff 
ffff8000008080f3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008080f7:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008080fa:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff8000008080fd:	48 63 d0             	movsxd rdx,eax
ffff800000808100:	48 89 d0             	mov    rax,rdx
ffff800000808103:	48 01 c0             	add    rax,rax
ffff800000808106:	48 01 d0             	add    rax,rdx
ffff800000808109:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000808110:	00 
ffff800000808111:	48 01 d0             	add    rax,rdx
ffff800000808114:	48 c1 e0 05          	shl    rax,0x5
ffff800000808118:	48 01 c8             	add    rax,rcx
ffff80000080811b:	48 ba a8 ff ff ff ff 	movabs rdx,0xffffffffffffffa8
ffff800000808122:	ff ff ff 
ffff800000808125:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000808129:	48 89 90 6c 02 00 00 	mov    QWORD PTR [rax+0x26c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:921
    task[pid].regs.rsp=ctx_dup;
ffff800000808130:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000808137:	ff ff ff 
ffff80000080813a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080813e:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000808141:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000808144:	48 63 d0             	movsxd rdx,eax
ffff800000808147:	48 89 d0             	mov    rax,rdx
ffff80000080814a:	48 01 c0             	add    rax,rax
ffff80000080814d:	48 01 d0             	add    rax,rdx
ffff800000808150:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000808157:	00 
ffff800000808158:	48 01 d0             	add    rax,rdx
ffff80000080815b:	48 c1 e0 05          	shl    rax,0x5
ffff80000080815f:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
ffff800000808163:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000808167:	48 89 82 9c 02 00 00 	mov    QWORD PTR [rdx+0x29c],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:922
    task[pid].tss.ists[0]=new_stkpg+PAGE_4K_SIZE;
ffff80000080816e:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000808175:	ff ff ff 
ffff800000808178:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080817c:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080817f:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000808182:	48 63 d0             	movsxd rdx,eax
ffff800000808185:	48 89 d0             	mov    rax,rdx
ffff800000808188:	48 01 c0             	add    rax,rax
ffff80000080818b:	48 01 d0             	add    rax,rdx
ffff80000080818e:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000808195:	00 
ffff800000808196:	48 01 d0             	add    rax,rdx
ffff800000808199:	48 c1 e0 05          	shl    rax,0x5
ffff80000080819d:	48 01 c8             	add    rax,rcx
ffff8000008081a0:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff8000008081a4:	48 81 c2 00 10 00 00 	add    rdx,0x1000
ffff8000008081ab:	48 89 90 1c 02 00 00 	mov    QWORD PTR [rax+0x21c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:923
    task[pid].tss.ists[1]=new_stkpg+PAGE_4K_SIZE;
ffff8000008081b2:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff8000008081b9:	ff ff ff 
ffff8000008081bc:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008081c0:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008081c3:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff8000008081c6:	48 63 d0             	movsxd rdx,eax
ffff8000008081c9:	48 89 d0             	mov    rax,rdx
ffff8000008081cc:	48 01 c0             	add    rax,rax
ffff8000008081cf:	48 01 d0             	add    rax,rdx
ffff8000008081d2:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008081d9:	00 
ffff8000008081da:	48 01 d0             	add    rax,rdx
ffff8000008081dd:	48 c1 e0 05          	shl    rax,0x5
ffff8000008081e1:	48 01 c8             	add    rax,rcx
ffff8000008081e4:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff8000008081e8:	48 81 c2 00 10 00 00 	add    rdx,0x1000
ffff8000008081ef:	48 89 90 24 02 00 00 	mov    QWORD PTR [rax+0x224],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:924
    task[pid].tss.ists[2]=new_stkpg+PAGE_4K_SIZE;
ffff8000008081f6:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff8000008081fd:	ff ff ff 
ffff800000808200:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808204:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000808207:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080820a:	48 63 d0             	movsxd rdx,eax
ffff80000080820d:	48 89 d0             	mov    rax,rdx
ffff800000808210:	48 01 c0             	add    rax,rax
ffff800000808213:	48 01 d0             	add    rax,rdx
ffff800000808216:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080821d:	00 
ffff80000080821e:	48 01 d0             	add    rax,rdx
ffff800000808221:	48 c1 e0 05          	shl    rax,0x5
ffff800000808225:	48 01 c8             	add    rax,rcx
ffff800000808228:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000080822c:	48 81 c2 00 10 00 00 	add    rdx,0x1000
ffff800000808233:	48 89 90 2c 02 00 00 	mov    QWORD PTR [rax+0x22c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:925
    task[pid].tss.ists[3]=new_stkpg+PAGE_4K_SIZE;
ffff80000080823a:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000808241:	ff ff ff 
ffff800000808244:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808248:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080824b:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080824e:	48 63 d0             	movsxd rdx,eax
ffff800000808251:	48 89 d0             	mov    rax,rdx
ffff800000808254:	48 01 c0             	add    rax,rax
ffff800000808257:	48 01 d0             	add    rax,rdx
ffff80000080825a:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000808261:	00 
ffff800000808262:	48 01 d0             	add    rax,rdx
ffff800000808265:	48 c1 e0 05          	shl    rax,0x5
ffff800000808269:	48 01 c8             	add    rax,rcx
ffff80000080826c:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff800000808270:	48 81 c2 00 10 00 00 	add    rdx,0x1000
ffff800000808277:	48 89 90 34 02 00 00 	mov    QWORD PTR [rax+0x234],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:926
    task[pid].tss.ists[4]=new_stkpg+PAGE_4K_SIZE;
ffff80000080827e:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000808285:	ff ff ff 
ffff800000808288:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080828c:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080828f:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000808292:	48 63 d0             	movsxd rdx,eax
ffff800000808295:	48 89 d0             	mov    rax,rdx
ffff800000808298:	48 01 c0             	add    rax,rax
ffff80000080829b:	48 01 d0             	add    rax,rdx
ffff80000080829e:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008082a5:	00 
ffff8000008082a6:	48 01 d0             	add    rax,rdx
ffff8000008082a9:	48 c1 e0 05          	shl    rax,0x5
ffff8000008082ad:	48 01 c8             	add    rax,rcx
ffff8000008082b0:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff8000008082b4:	48 81 c2 00 10 00 00 	add    rdx,0x1000
ffff8000008082bb:	48 89 90 3c 02 00 00 	mov    QWORD PTR [rax+0x23c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:927
    task[pid].tss.ists[5]=new_stkpg+PAGE_4K_SIZE;
ffff8000008082c2:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff8000008082c9:	ff ff ff 
ffff8000008082cc:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008082d0:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008082d3:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff8000008082d6:	48 63 d0             	movsxd rdx,eax
ffff8000008082d9:	48 89 d0             	mov    rax,rdx
ffff8000008082dc:	48 01 c0             	add    rax,rax
ffff8000008082df:	48 01 d0             	add    rax,rdx
ffff8000008082e2:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008082e9:	00 
ffff8000008082ea:	48 01 d0             	add    rax,rdx
ffff8000008082ed:	48 c1 e0 05          	shl    rax,0x5
ffff8000008082f1:	48 01 c8             	add    rax,rcx
ffff8000008082f4:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff8000008082f8:	48 81 c2 00 10 00 00 	add    rdx,0x1000
ffff8000008082ff:	48 89 90 44 02 00 00 	mov    QWORD PTR [rax+0x244],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:928
    task[pid].tss.ists[6]=new_stkpg+PAGE_4K_SIZE;
ffff800000808306:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff80000080830d:	ff ff ff 
ffff800000808310:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808314:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000808317:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080831a:	48 63 d0             	movsxd rdx,eax
ffff80000080831d:	48 89 d0             	mov    rax,rdx
ffff800000808320:	48 01 c0             	add    rax,rax
ffff800000808323:	48 01 d0             	add    rax,rdx
ffff800000808326:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080832d:	00 
ffff80000080832e:	48 01 d0             	add    rax,rdx
ffff800000808331:	48 c1 e0 05          	shl    rax,0x5
ffff800000808335:	48 01 c8             	add    rax,rcx
ffff800000808338:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000080833c:	48 81 c2 00 10 00 00 	add    rdx,0x1000
ffff800000808343:	48 89 90 4c 02 00 00 	mov    QWORD PTR [rax+0x24c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:931

    //堆
    addr_t hp=task[pid].mem_struct.heap_top-PAGE_4K_SIZE;
ffff80000080834a:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000808351:	ff ff ff 
ffff800000808354:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808358:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080835b:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080835e:	48 63 d0             	movsxd rdx,eax
ffff800000808361:	48 89 d0             	mov    rax,rdx
ffff800000808364:	48 01 c0             	add    rax,rax
ffff800000808367:	48 01 d0             	add    rax,rdx
ffff80000080836a:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000808371:	00 
ffff800000808372:	48 01 d0             	add    rax,rdx
ffff800000808375:	48 c1 e0 05          	shl    rax,0x5
ffff800000808379:	48 01 c8             	add    rax,rcx
ffff80000080837c:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff800000808380:	48 2d 00 10 00 00    	sub    rax,0x1000
ffff800000808386:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:932
    for(;hp>=task[pid].mem_struct.heap_base;hp-=PAGE_4K_SIZE){
ffff80000080838a:	e9 e3 00 00 00       	jmp    ffff800000808472 <sys_fork+0xbfe>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:933 (discriminator 2)
        addr_t new_hppg= pmalloc(PAGE_4K_SIZE);
ffff80000080838f:	bf 00 10 00 00       	mov    edi,0x1000
ffff800000808394:	49 89 df             	mov    r15,rbx
ffff800000808397:	48 b8 4b 01 ee ff ff 	movabs rax,0xffffffffffee014b
ffff80000080839e:	ff ff ff 
ffff8000008083a1:	48 01 d8             	add    rax,rbx
ffff8000008083a4:	ff d0                	call   rax
ffff8000008083a6:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:934 (discriminator 2)
        smmap(new_hppg,tmpla,PAGE_PRESENT|PAGE_RWX,current->pml4);
ffff8000008083aa:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff8000008083b1:	ff ff ff 
ffff8000008083b4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008083b8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008083bb:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff8000008083c2:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
ffff8000008083c6:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008083ca:	48 89 d1             	mov    rcx,rdx
ffff8000008083cd:	ba 03 00 00 00       	mov    edx,0x3
ffff8000008083d2:	48 89 c7             	mov    rdi,rax
ffff8000008083d5:	49 89 df             	mov    r15,rbx
ffff8000008083d8:	48 b8 9c e8 ed ff ff 	movabs rax,0xffffffffffede89c
ffff8000008083df:	ff ff ff 
ffff8000008083e2:	48 01 d8             	add    rax,rbx
ffff8000008083e5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:935 (discriminator 2)
        memcpy(tmpla,hp,PAGE_4K_SIZE);//把当前进程的栈空间复制到新栈里面
ffff8000008083e7:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
ffff8000008083eb:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008083ef:	ba 00 10 00 00       	mov    edx,0x1000
ffff8000008083f4:	48 89 ce             	mov    rsi,rcx
ffff8000008083f7:	48 89 c7             	mov    rdi,rax
ffff8000008083fa:	49 89 df             	mov    r15,rbx
ffff8000008083fd:	48 b8 02 1d ef ff ff 	movabs rax,0xffffffffffef1d02
ffff800000808404:	ff ff ff 
ffff800000808407:	48 01 d8             	add    rax,rbx
ffff80000080840a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:937 (discriminator 2)
        //把新的页面映射到进程页表里
        smmap(new_hppg,hp,PAGE_PRESENT|PAGE_RWX|PAGE_FOR_ALL,task[pid].pml4);
ffff80000080840c:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000808413:	ff ff ff 
ffff800000808416:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080841a:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080841d:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000808420:	48 63 d0             	movsxd rdx,eax
ffff800000808423:	48 89 d0             	mov    rax,rdx
ffff800000808426:	48 01 c0             	add    rax,rax
ffff800000808429:	48 01 d0             	add    rax,rdx
ffff80000080842c:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000808433:	00 
ffff800000808434:	48 01 d0             	add    rax,rdx
ffff800000808437:	48 c1 e0 05          	shl    rax,0x5
ffff80000080843b:	48 01 c8             	add    rax,rcx
ffff80000080843e:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff800000808445:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff800000808449:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080844d:	48 89 d1             	mov    rcx,rdx
ffff800000808450:	ba 07 00 00 00       	mov    edx,0x7
ffff800000808455:	48 89 c7             	mov    rdi,rax
ffff800000808458:	49 89 df             	mov    r15,rbx
ffff80000080845b:	48 b8 9c e8 ed ff ff 	movabs rax,0xffffffffffede89c
ffff800000808462:	ff ff ff 
ffff800000808465:	48 01 d8             	add    rax,rbx
ffff800000808468:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:932 (discriminator 2)
    for(;hp>=task[pid].mem_struct.heap_base;hp-=PAGE_4K_SIZE){
ffff80000080846a:	48 81 6d e0 00 10 00 	sub    QWORD PTR [rbp-0x20],0x1000
ffff800000808471:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:932 (discriminator 1)
ffff800000808472:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000808479:	ff ff ff 
ffff80000080847c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808480:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000808483:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000808486:	48 63 d0             	movsxd rdx,eax
ffff800000808489:	48 89 d0             	mov    rax,rdx
ffff80000080848c:	48 01 c0             	add    rax,rax
ffff80000080848f:	48 01 d0             	add    rax,rdx
ffff800000808492:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000808499:	00 
ffff80000080849a:	48 01 d0             	add    rax,rdx
ffff80000080849d:	48 c1 e0 05          	shl    rax,0x5
ffff8000008084a1:	48 01 c8             	add    rax,rcx
ffff8000008084a4:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff8000008084a8:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
ffff8000008084ac:	0f 83 dd fe ff ff    	jae    ffff80000080838f <sys_fork+0xb1b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:939
    }
    smmap(0,tmpla,0,current->pml4);//解除映射
ffff8000008084b2:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff8000008084b9:	ff ff ff 
ffff8000008084bc:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008084c0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008084c3:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff8000008084ca:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008084ce:	48 89 d1             	mov    rcx,rdx
ffff8000008084d1:	ba 00 00 00 00       	mov    edx,0x0
ffff8000008084d6:	48 89 c6             	mov    rsi,rax
ffff8000008084d9:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008084de:	49 89 df             	mov    r15,rbx
ffff8000008084e1:	48 b8 9c e8 ed ff ff 	movabs rax,0xffffffffffede89c
ffff8000008084e8:	ff ff ff 
ffff8000008084eb:	48 01 d8             	add    rax,rbx
ffff8000008084ee:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:941
    //复制映射数据结构
    struct List *mp=current->mmaps;
ffff8000008084f0:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff8000008084f7:	ff ff ff 
ffff8000008084fa:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008084fe:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808501:	48 8b 80 34 03 00 00 	mov    rax,QWORD PTR [rax+0x334]
ffff800000808508:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:942
    for (; mp; mp=mp->next) {
ffff80000080850c:	e9 58 02 00 00       	jmp    ffff800000808769 <sys_fork+0xef5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:943
        mmap_struct* new_mp=kmalloc(0, sizeof(mmap_struct));
ffff800000808511:	be 48 00 00 00       	mov    esi,0x48
ffff800000808516:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080851b:	49 89 df             	mov    r15,rbx
ffff80000080851e:	48 b8 96 fe ed ff ff 	movabs rax,0xffffffffffedfe96
ffff800000808525:	ff ff ff 
ffff800000808528:	48 01 d8             	add    rax,rbx
ffff80000080852b:	ff d0                	call   rax
ffff80000080852d:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:944
        struct List* nd=kmalloc(0, sizeof(struct List));
ffff800000808531:	be 18 00 00 00       	mov    esi,0x18
ffff800000808536:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080853b:	49 89 df             	mov    r15,rbx
ffff80000080853e:	48 b8 96 fe ed ff ff 	movabs rax,0xffffffffffedfe96
ffff800000808545:	ff ff ff 
ffff800000808548:	48 01 d8             	add    rax,rbx
ffff80000080854b:	ff d0                	call   rax
ffff80000080854d:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
ffff800000808551:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000808555:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff80000080855c:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
ffff800000808563:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000080856a:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
ffff800000808571:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff800000808578:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff800000808579:	90                   	nop
sys_fork():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:946
        list_init(nd);
        nd->data=new_mp;
ffff80000080857a:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080857e:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff800000808582:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:947
        if(!task[pid].mmaps){
ffff800000808586:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff80000080858d:	ff ff ff 
ffff800000808590:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808594:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000808597:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080859a:	48 63 d0             	movsxd rdx,eax
ffff80000080859d:	48 89 d0             	mov    rax,rdx
ffff8000008085a0:	48 01 c0             	add    rax,rax
ffff8000008085a3:	48 01 d0             	add    rax,rdx
ffff8000008085a6:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008085ad:	00 
ffff8000008085ae:	48 01 d0             	add    rax,rdx
ffff8000008085b1:	48 c1 e0 05          	shl    rax,0x5
ffff8000008085b5:	48 01 c8             	add    rax,rcx
ffff8000008085b8:	48 8b 80 34 03 00 00 	mov    rax,QWORD PTR [rax+0x334]
ffff8000008085bf:	48 85 c0             	test   rax,rax
ffff8000008085c2:	75 43                	jne    ffff800000808607 <sys_fork+0xd93>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:948
            task[pid].mmaps=nd;
ffff8000008085c4:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff8000008085cb:	ff ff ff 
ffff8000008085ce:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008085d2:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008085d5:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff8000008085d8:	48 63 d0             	movsxd rdx,eax
ffff8000008085db:	48 89 d0             	mov    rax,rdx
ffff8000008085de:	48 01 c0             	add    rax,rax
ffff8000008085e1:	48 01 d0             	add    rax,rdx
ffff8000008085e4:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008085eb:	00 
ffff8000008085ec:	48 01 d0             	add    rax,rdx
ffff8000008085ef:	48 c1 e0 05          	shl    rax,0x5
ffff8000008085f3:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
ffff8000008085f7:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff8000008085fb:	48 89 82 34 03 00 00 	mov    QWORD PTR [rdx+0x334],rax
ffff800000808602:	e9 2d 01 00 00       	jmp    ffff800000808734 <sys_fork+0xec0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:950
        }else{
            list_add(task[pid].mmaps, nd);
ffff800000808607:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff80000080860e:	ff ff ff 
ffff800000808611:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808615:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000808618:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080861b:	48 63 d0             	movsxd rdx,eax
ffff80000080861e:	48 89 d0             	mov    rax,rdx
ffff800000808621:	48 01 c0             	add    rax,rax
ffff800000808624:	48 01 d0             	add    rax,rdx
ffff800000808627:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080862e:	00 
ffff80000080862f:	48 01 d0             	add    rax,rdx
ffff800000808632:	48 c1 e0 05          	shl    rax,0x5
ffff800000808636:	48 01 c8             	add    rax,rcx
ffff800000808639:	48 8b 80 34 03 00 00 	mov    rax,QWORD PTR [rax+0x334]
ffff800000808640:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
ffff800000808647:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080864b:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:33
    struct List* p=entry;
ffff800000808652:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
ffff800000808659:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:34
    for(;p->next&&p->next!=p;p=p->next){
ffff800000808660:	eb 31                	jmp    ffff800000808693 <sys_fork+0xe1f>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:35
        if(p->data==new->data)
ffff800000808662:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
ffff800000808669:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff80000080866d:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000808674:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000808678:	48 39 c2             	cmp    rdx,rax
ffff80000080867b:	0f 84 b2 00 00 00    	je     ffff800000808733 <sys_fork+0xebf>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:34
    for(;p->next&&p->next!=p;p=p->next){
ffff800000808681:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
ffff800000808688:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080868c:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
ffff800000808693:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
ffff80000080869a:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080869e:	48 85 c0             	test   rax,rax
ffff8000008086a1:	74 14                	je     ffff8000008086b7 <sys_fork+0xe43>
ffff8000008086a3:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
ffff8000008086aa:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008086ae:	48 39 85 40 ff ff ff 	cmp    QWORD PTR [rbp-0xc0],rax
ffff8000008086b5:	75 ab                	jne    ffff800000808662 <sys_fork+0xdee>
ffff8000008086b7:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
ffff8000008086be:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
ffff8000008086c5:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff8000008086cc:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff8000008086d3:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff8000008086da:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff8000008086de:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff8000008086e5:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff8000008086e9:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff8000008086f0:	48 8b 95 38 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xc8]
ffff8000008086f7:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff8000008086fa:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000808701:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000808705:	48 85 c0             	test   rax,rax
ffff800000808708:	74 15                	je     ffff80000080871f <sys_fork+0xeab>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff80000080870a:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000808711:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000808715:	48 8b 95 30 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd0]
ffff80000080871c:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:29
    entry->next = new;
ffff80000080871f:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000808726:	48 8b 95 30 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd0]
ffff80000080872d:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff800000808731:	eb 01                	jmp    ffff800000808734 <sys_fork+0xec0>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:36
            return;
ffff800000808733:	90                   	nop
sys_fork():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:952
        }
        memcpy(new_mp, mp->data, sizeof(mmap_struct));
ffff800000808734:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000808738:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
ffff80000080873c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000808740:	ba 48 00 00 00       	mov    edx,0x48
ffff800000808745:	48 89 ce             	mov    rsi,rcx
ffff800000808748:	48 89 c7             	mov    rdi,rax
ffff80000080874b:	49 89 df             	mov    r15,rbx
ffff80000080874e:	48 b8 02 1d ef ff ff 	movabs rax,0xffffffffffef1d02
ffff800000808755:	ff ff ff 
ffff800000808758:	48 01 d8             	add    rax,rbx
ffff80000080875b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:942
    for (; mp; mp=mp->next) {
ffff80000080875d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000808761:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000808765:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:942 (discriminator 1)
ffff800000808769:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff80000080876e:	0f 85 9d fd ff ff    	jne    ffff800000808511 <sys_fork+0xc9d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:956
        
    }
    
    task[pid].stat=TASK_READY;
ffff800000808774:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff80000080877b:	ff ff ff 
ffff80000080877e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808782:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000808785:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000808788:	48 63 d0             	movsxd rdx,eax
ffff80000080878b:	48 89 d0             	mov    rax,rdx
ffff80000080878e:	48 01 c0             	add    rax,rax
ffff800000808791:	48 01 d0             	add    rax,rdx
ffff800000808794:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080879b:	00 
ffff80000080879c:	48 01 d0             	add    rax,rdx
ffff80000080879f:	48 c1 e0 05          	shl    rax,0x5
ffff8000008087a3:	48 01 c8             	add    rax,rcx
ffff8000008087a6:	c7 40 18 02 00 00 00 	mov    DWORD PTR [rax+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:959
    

    sti();
ffff8000008087ad:	fb                   	sti    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:962
    //如果父进程没有堆，不开辟。留给load_xx函数。
    //父进程运行到这里
    return pid;
ffff8000008087ae:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:963
}
ffff8000008087b1:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
ffff8000008087b8:	5b                   	pop    rbx
ffff8000008087b9:	41 5f                	pop    r15
ffff8000008087bb:	5d                   	pop    rbp
ffff8000008087bc:	c3                   	ret    

ffff8000008087bd <release_mmap>:
release_mmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:965
//释放进程页表映射的内存，内核空间除外。
void release_mmap(struct process* p){
ffff8000008087bd:	f3 0f 1e fa          	endbr64 
ffff8000008087c1:	55                   	push   rbp
ffff8000008087c2:	48 89 e5             	mov    rbp,rsp
ffff8000008087c5:	41 57                	push   r15
ffff8000008087c7:	53                   	push   rbx
ffff8000008087c8:	48 83 ec 50          	sub    rsp,0x50
ffff8000008087cc:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008087cc <release_mmap+0xf>
ffff8000008087d3:	49 bb 64 ad 11 00 00 	movabs r11,0x11ad64
ffff8000008087da:	00 00 00 
ffff8000008087dd:	4c 01 db             	add    rbx,r11
ffff8000008087e0:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:966
    page_item * pml4p=p->pml4;
ffff8000008087e4:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008087e8:	48 8b 80 e0 00 00 00 	mov    rax,QWORD PTR [rax+0xe0]
ffff8000008087ef:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:968
    //复制pdpt
    page_item *pml4e= pml4p;
ffff8000008087f3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008087f7:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:969
    for(int i=0;i<256;i++)//高地址不释放（内核空间）
ffff8000008087fb:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000808802:	e9 40 03 00 00       	jmp    ffff800000808b47 <release_mmap+0x38a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:971
    {
        if(pml4e[i]&PAGE_PRESENT){
ffff800000808807:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080880a:	48 98                	cdqe   
ffff80000080880c:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000808813:	00 
ffff800000808814:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000808818:	48 01 d0             	add    rax,rdx
ffff80000080881b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080881e:	83 e0 01             	and    eax,0x1
ffff800000808821:	48 85 c0             	test   rax,rax
ffff800000808824:	0f 84 19 03 00 00    	je     ffff800000808b43 <release_mmap+0x386>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:972
            page_item *pdpte=pml4e[i]&PAGE_4K_MASK|KNL_BASE;
ffff80000080882a:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080882d:	48 98                	cdqe   
ffff80000080882f:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000808836:	00 
ffff800000808837:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080883b:	48 01 d0             	add    rax,rdx
ffff80000080883e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808841:	48 ba 00 f0 ff ff ff 	movabs rdx,0x7ffffffff000
ffff800000808848:	7f 00 00 
ffff80000080884b:	48 21 c2             	and    rdx,rax
ffff80000080884e:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff800000808855:	80 ff ff 
ffff800000808858:	48 09 d0             	or     rax,rdx
ffff80000080885b:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:973
            for(int j=0;j<512;j++)
ffff80000080885f:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff800000808866:	e9 85 02 00 00       	jmp    ffff800000808af0 <release_mmap+0x333>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:975
            {
                if(pdpte[j]&PAGE_PRESENT&&!(pdpte[j]&PDPTE_1GB)){
ffff80000080886b:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080886e:	48 98                	cdqe   
ffff800000808870:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000808877:	00 
ffff800000808878:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080887c:	48 01 d0             	add    rax,rdx
ffff80000080887f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808882:	83 e0 01             	and    eax,0x1
ffff800000808885:	48 85 c0             	test   rax,rax
ffff800000808888:	0f 84 5e 02 00 00    	je     ffff800000808aec <release_mmap+0x32f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:975 (discriminator 1)
ffff80000080888e:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000808891:	48 98                	cdqe   
ffff800000808893:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080889a:	00 
ffff80000080889b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080889f:	48 01 d0             	add    rax,rdx
ffff8000008088a2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008088a5:	25 80 00 00 00       	and    eax,0x80
ffff8000008088aa:	48 85 c0             	test   rax,rax
ffff8000008088ad:	0f 85 39 02 00 00    	jne    ffff800000808aec <release_mmap+0x32f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:976
                    page_item *pde=pdpte[j]&PAGE_4K_MASK|KNL_BASE;
ffff8000008088b3:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff8000008088b6:	48 98                	cdqe   
ffff8000008088b8:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008088bf:	00 
ffff8000008088c0:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008088c4:	48 01 d0             	add    rax,rdx
ffff8000008088c7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008088ca:	48 ba 00 f0 ff ff ff 	movabs rdx,0x7ffffffff000
ffff8000008088d1:	7f 00 00 
ffff8000008088d4:	48 21 c2             	and    rdx,rax
ffff8000008088d7:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff8000008088de:	80 ff ff 
ffff8000008088e1:	48 09 d0             	or     rax,rdx
ffff8000008088e4:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:977
                    for(int k=0;k<512;k++)
ffff8000008088e8:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff8000008088ef:	e9 a5 01 00 00       	jmp    ffff800000808a99 <release_mmap+0x2dc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:979
                    {
                        if(pde[k]&PAGE_PRESENT&&!(pde[k] & PDE_2MB)){
ffff8000008088f4:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008088f7:	48 98                	cdqe   
ffff8000008088f9:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000808900:	00 
ffff800000808901:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000808905:	48 01 d0             	add    rax,rdx
ffff800000808908:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080890b:	83 e0 01             	and    eax,0x1
ffff80000080890e:	48 85 c0             	test   rax,rax
ffff800000808911:	0f 84 09 01 00 00    	je     ffff800000808a20 <release_mmap+0x263>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:979 (discriminator 1)
ffff800000808917:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080891a:	48 98                	cdqe   
ffff80000080891c:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000808923:	00 
ffff800000808924:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000808928:	48 01 d0             	add    rax,rdx
ffff80000080892b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080892e:	25 80 00 00 00       	and    eax,0x80
ffff800000808933:	48 85 c0             	test   rax,rax
ffff800000808936:	0f 85 e4 00 00 00    	jne    ffff800000808a20 <release_mmap+0x263>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:980
                            page_item *pte=pde[k]&PAGE_4K_MASK|KNL_BASE;
ffff80000080893c:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080893f:	48 98                	cdqe   
ffff800000808941:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000808948:	00 
ffff800000808949:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080894d:	48 01 d0             	add    rax,rdx
ffff800000808950:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808953:	48 ba 00 f0 ff ff ff 	movabs rdx,0x7ffffffff000
ffff80000080895a:	7f 00 00 
ffff80000080895d:	48 21 c2             	and    rdx,rax
ffff800000808960:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff800000808967:	80 ff ff 
ffff80000080896a:	48 09 d0             	or     rax,rdx
ffff80000080896d:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:981
                            for(int l=0;l<512;l++){
ffff800000808971:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff800000808978:	eb 55                	jmp    ffff8000008089cf <release_mmap+0x212>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:982
                                if(pte[l]&PAGE_PRESENT){
ffff80000080897a:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff80000080897d:	48 98                	cdqe   
ffff80000080897f:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000808986:	00 
ffff800000808987:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080898b:	48 01 d0             	add    rax,rdx
ffff80000080898e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808991:	83 e0 01             	and    eax,0x1
ffff800000808994:	48 85 c0             	test   rax,rax
ffff800000808997:	74 32                	je     ffff8000008089cb <release_mmap+0x20e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:984
                                    //释放申请的物理内存
                                    free_page(pte[l]&PAGE_4K_MASK);
ffff800000808999:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff80000080899c:	48 98                	cdqe   
ffff80000080899e:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008089a5:	00 
ffff8000008089a6:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008089aa:	48 01 d0             	add    rax,rdx
ffff8000008089ad:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008089b0:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
ffff8000008089b6:	48 89 c7             	mov    rdi,rax
ffff8000008089b9:	49 89 df             	mov    r15,rbx
ffff8000008089bc:	48 b8 b0 03 ee ff ff 	movabs rax,0xffffffffffee03b0
ffff8000008089c3:	ff ff ff 
ffff8000008089c6:	48 01 d8             	add    rax,rbx
ffff8000008089c9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:981 (discriminator 2)
                            for(int l=0;l<512;l++){
ffff8000008089cb:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:981 (discriminator 1)
ffff8000008089cf:	81 7d e0 ff 01 00 00 	cmp    DWORD PTR [rbp-0x20],0x1ff
ffff8000008089d6:	7e a2                	jle    ffff80000080897a <release_mmap+0x1bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:988
                                }
                            }
                            //里面的项释放完了，这一项指向的vmalloc内存可以释放了
                            kmfree(pde[k] & PAGE_4K_MASK|KNL_BASE);
ffff8000008089d8:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008089db:	48 98                	cdqe   
ffff8000008089dd:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008089e4:	00 
ffff8000008089e5:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008089e9:	48 01 d0             	add    rax,rdx
ffff8000008089ec:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008089ef:	48 ba 00 f0 ff ff ff 	movabs rdx,0x7ffffffff000
ffff8000008089f6:	7f 00 00 
ffff8000008089f9:	48 21 c2             	and    rdx,rax
ffff8000008089fc:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff800000808a03:	80 ff ff 
ffff800000808a06:	48 09 d0             	or     rax,rdx
ffff800000808a09:	48 89 c7             	mov    rdi,rax
ffff800000808a0c:	49 89 df             	mov    r15,rbx
ffff800000808a0f:	48 b8 37 00 ee ff ff 	movabs rax,0xffffffffffee0037
ffff800000808a16:	ff ff ff 
ffff800000808a19:	48 01 d8             	add    rax,rbx
ffff800000808a1c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:979
                        if(pde[k]&PAGE_PRESENT&&!(pde[k] & PDE_2MB)){
ffff800000808a1e:	eb 75                	jmp    ffff800000808a95 <release_mmap+0x2d8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:989
                        }else if((pde[k]&PAGE_PRESENT)&&(pde[k] & PDE_2MB)){
ffff800000808a20:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000808a23:	48 98                	cdqe   
ffff800000808a25:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000808a2c:	00 
ffff800000808a2d:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000808a31:	48 01 d0             	add    rax,rdx
ffff800000808a34:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808a37:	83 e0 01             	and    eax,0x1
ffff800000808a3a:	48 85 c0             	test   rax,rax
ffff800000808a3d:	74 56                	je     ffff800000808a95 <release_mmap+0x2d8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:989 (discriminator 1)
ffff800000808a3f:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000808a42:	48 98                	cdqe   
ffff800000808a44:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000808a4b:	00 
ffff800000808a4c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000808a50:	48 01 d0             	add    rax,rdx
ffff800000808a53:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808a56:	25 80 00 00 00       	and    eax,0x80
ffff800000808a5b:	48 85 c0             	test   rax,rax
ffff800000808a5e:	74 35                	je     ffff800000808a95 <release_mmap+0x2d8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:991
                            //释放2MB页
                            free_pages_at(pde[k]&PAGE_4K_MASK,512);
ffff800000808a60:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000808a63:	48 98                	cdqe   
ffff800000808a65:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000808a6c:	00 
ffff800000808a6d:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000808a71:	48 01 d0             	add    rax,rdx
ffff800000808a74:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808a77:	25 00 f0 ff ff       	and    eax,0xfffff000
ffff800000808a7c:	be 00 02 00 00       	mov    esi,0x200
ffff800000808a81:	89 c7                	mov    edi,eax
ffff800000808a83:	49 89 df             	mov    r15,rbx
ffff800000808a86:	48 b8 62 04 ee ff ff 	movabs rax,0xffffffffffee0462
ffff800000808a8d:	ff ff ff 
ffff800000808a90:	48 01 d8             	add    rax,rbx
ffff800000808a93:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:977 (discriminator 2)
                    for(int k=0;k<512;k++)
ffff800000808a95:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:977 (discriminator 1)
ffff800000808a99:	81 7d e4 ff 01 00 00 	cmp    DWORD PTR [rbp-0x1c],0x1ff
ffff800000808aa0:	0f 8e 4e fe ff ff    	jle    ffff8000008088f4 <release_mmap+0x137>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:995
                        }
                    }
                    //这一页pde的内容释放完了，这一项指向的vmalloc可以释放了
                    kmfree(pdpte[j] & PAGE_4K_MASK|KNL_BASE);
ffff800000808aa6:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000808aa9:	48 98                	cdqe   
ffff800000808aab:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000808ab2:	00 
ffff800000808ab3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000808ab7:	48 01 d0             	add    rax,rdx
ffff800000808aba:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808abd:	48 ba 00 f0 ff ff ff 	movabs rdx,0x7ffffffff000
ffff800000808ac4:	7f 00 00 
ffff800000808ac7:	48 21 c2             	and    rdx,rax
ffff800000808aca:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff800000808ad1:	80 ff ff 
ffff800000808ad4:	48 09 d0             	or     rax,rdx
ffff800000808ad7:	48 89 c7             	mov    rdi,rax
ffff800000808ada:	49 89 df             	mov    r15,rbx
ffff800000808add:	48 b8 37 00 ee ff ff 	movabs rax,0xffffffffffee0037
ffff800000808ae4:	ff ff ff 
ffff800000808ae7:	48 01 d8             	add    rax,rbx
ffff800000808aea:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:973 (discriminator 2)
            for(int j=0;j<512;j++)
ffff800000808aec:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:973 (discriminator 1)
ffff800000808af0:	81 7d e8 ff 01 00 00 	cmp    DWORD PTR [rbp-0x18],0x1ff
ffff800000808af7:	0f 8e 6e fd ff ff    	jle    ffff80000080886b <release_mmap+0xae>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1000
                }//1GB先不写，目前还没有初始化之后动态申请1GB页的

            }
            //这一页pdpte的内容释放完了，这一项指向的vmalloc可以释放了
            kmfree(pml4e[i] & PAGE_4K_MASK|KNL_BASE);
ffff800000808afd:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000808b00:	48 98                	cdqe   
ffff800000808b02:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000808b09:	00 
ffff800000808b0a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000808b0e:	48 01 d0             	add    rax,rdx
ffff800000808b11:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808b14:	48 ba 00 f0 ff ff ff 	movabs rdx,0x7ffffffff000
ffff800000808b1b:	7f 00 00 
ffff800000808b1e:	48 21 c2             	and    rdx,rax
ffff800000808b21:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff800000808b28:	80 ff ff 
ffff800000808b2b:	48 09 d0             	or     rax,rdx
ffff800000808b2e:	48 89 c7             	mov    rdi,rax
ffff800000808b31:	49 89 df             	mov    r15,rbx
ffff800000808b34:	48 b8 37 00 ee ff ff 	movabs rax,0xffffffffffee0037
ffff800000808b3b:	ff ff ff 
ffff800000808b3e:	48 01 d8             	add    rax,rbx
ffff800000808b41:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:969 (discriminator 2)
    for(int i=0;i<256;i++)//高地址不释放（内核空间）
ffff800000808b43:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:969 (discriminator 1)
ffff800000808b47:	81 7d ec ff 00 00 00 	cmp    DWORD PTR [rbp-0x14],0xff
ffff800000808b4e:	0f 8e b3 fc ff ff    	jle    ffff800000808807 <release_mmap+0x4a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1003
        }
    }
}
ffff800000808b54:	90                   	nop
ffff800000808b55:	90                   	nop
ffff800000808b56:	48 83 c4 50          	add    rsp,0x50
ffff800000808b5a:	5b                   	pop    rbx
ffff800000808b5b:	41 5f                	pop    r15
ffff800000808b5d:	5d                   	pop    rbp
ffff800000808b5e:	c3                   	ret    

ffff800000808b5f <copy_mmap>:
copy_mmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1004
void copy_mmap(struct process* from, struct process *to){
ffff800000808b5f:	f3 0f 1e fa          	endbr64 
ffff800000808b63:	55                   	push   rbp
ffff800000808b64:	48 89 e5             	mov    rbp,rsp
ffff800000808b67:	41 57                	push   r15
ffff800000808b69:	53                   	push   rbx
ffff800000808b6a:	48 83 ec 70          	sub    rsp,0x70
ffff800000808b6e:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000808b6e <copy_mmap+0xf>
ffff800000808b75:	49 bb c2 a9 11 00 00 	movabs r11,0x11a9c2
ffff800000808b7c:	00 00 00 
ffff800000808b7f:	4c 01 db             	add    rbx,r11
ffff800000808b82:	48 89 7d 88          	mov    QWORD PTR [rbp-0x78],rdi
ffff800000808b86:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1005
    page_item * pml4p= kmalloc(0,PAGE_4K_SIZE);
ffff800000808b8a:	be 00 10 00 00       	mov    esi,0x1000
ffff800000808b8f:	bf 00 00 00 00       	mov    edi,0x0
ffff800000808b94:	49 89 df             	mov    r15,rbx
ffff800000808b97:	48 b8 96 fe ed ff ff 	movabs rax,0xffffffffffedfe96
ffff800000808b9e:	ff ff ff 
ffff800000808ba1:	48 01 d8             	add    rax,rbx
ffff800000808ba4:	ff d0                	call   rax
ffff800000808ba6:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1006
    memcpy(pml4p, (unsigned char *) from->pml4, PAGE_4K_SIZE);//复制pml4
ffff800000808baa:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000808bae:	48 8b 88 e0 00 00 00 	mov    rcx,QWORD PTR [rax+0xe0]
ffff800000808bb5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000808bb9:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000808bbe:	48 89 ce             	mov    rsi,rcx
ffff800000808bc1:	48 89 c7             	mov    rdi,rax
ffff800000808bc4:	49 89 df             	mov    r15,rbx
ffff800000808bc7:	48 b8 02 1d ef ff ff 	movabs rax,0xffffffffffef1d02
ffff800000808bce:	ff ff ff 
ffff800000808bd1:	48 01 d8             	add    rax,rbx
ffff800000808bd4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1007
    to->regs.cr3=(unsigned long)pml4p&~KNL_BASE;
ffff800000808bd6:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000808bda:	48 ba ff ff ff ff ff 	movabs rdx,0x7fffffffffff
ffff800000808be1:	7f 00 00 
ffff800000808be4:	48 21 c2             	and    rdx,rax
ffff800000808be7:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000808beb:	48 89 90 64 02 00 00 	mov    QWORD PTR [rax+0x264],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1008
    to->pml4=pml4p;
ffff800000808bf2:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000808bf6:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000808bfa:	48 89 90 e0 00 00 00 	mov    QWORD PTR [rax+0xe0],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1011
    //复制pdpt

    page_item *pml4e= pml4p;
ffff800000808c01:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000808c05:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1012
    for(int i=0;i<512;i++)
ffff800000808c09:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000808c10:	e9 1d 03 00 00       	jmp    ffff800000808f32 <copy_mmap+0x3d3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1014
    {
        if((pml4e[i]&PAGE_PRESENT)==0)
ffff800000808c15:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000808c18:	48 98                	cdqe   
ffff800000808c1a:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000808c21:	00 
ffff800000808c22:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000808c26:	48 01 d0             	add    rax,rdx
ffff800000808c29:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808c2c:	83 e0 01             	and    eax,0x1
ffff800000808c2f:	48 85 c0             	test   rax,rax
ffff800000808c32:	0f 84 f5 02 00 00    	je     ffff800000808f2d <copy_mmap+0x3ce>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1016
            continue;
        addr_t old_data=pml4e[i];//旧的数据，里面保存了属性和要拷贝的数据的地址
ffff800000808c38:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000808c3b:	48 98                	cdqe   
ffff800000808c3d:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000808c44:	00 
ffff800000808c45:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000808c49:	48 01 d0             	add    rax,rdx
ffff800000808c4c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808c4f:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1017
        addr_t m4=kmalloc(0,PAGE_4K_SIZE);
ffff800000808c53:	be 00 10 00 00       	mov    esi,0x1000
ffff800000808c58:	bf 00 00 00 00       	mov    edi,0x0
ffff800000808c5d:	49 89 df             	mov    r15,rbx
ffff800000808c60:	48 b8 96 fe ed ff ff 	movabs rax,0xffffffffffedfe96
ffff800000808c67:	ff ff ff 
ffff800000808c6a:	48 01 d8             	add    rax,rbx
ffff800000808c6d:	ff d0                	call   rax
ffff800000808c6f:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1018
        pml4e[i]= (m4&~KNL_BASE) | (old_data & ~PAGE_4K_MASK);
ffff800000808c73:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffff
ffff800000808c7a:	7f 00 00 
ffff800000808c7d:	48 23 45 c0          	and    rax,QWORD PTR [rbp-0x40]
ffff800000808c81:	48 89 c2             	mov    rdx,rax
ffff800000808c84:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000808c88:	25 ff 0f 00 00       	and    eax,0xfff
ffff800000808c8d:	48 89 c1             	mov    rcx,rax
ffff800000808c90:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000808c93:	48 98                	cdqe   
ffff800000808c95:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
ffff800000808c9c:	00 
ffff800000808c9d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000808ca1:	48 01 f0             	add    rax,rsi
ffff800000808ca4:	48 09 ca             	or     rdx,rcx
ffff800000808ca7:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1019
        memcpy((unsigned char *) m4, old_data & PAGE_4K_MASK | KNL_BASE, PAGE_4K_SIZE);//把老的数据拷贝到新的页面里
ffff800000808caa:	48 b8 00 f0 ff ff ff 	movabs rax,0x7ffffffff000
ffff800000808cb1:	7f 00 00 
ffff800000808cb4:	48 23 45 c8          	and    rax,QWORD PTR [rbp-0x38]
ffff800000808cb8:	48 ba 00 00 00 00 00 	movabs rdx,0xffff800000000000
ffff800000808cbf:	80 ff ff 
ffff800000808cc2:	48 09 d0             	or     rax,rdx
ffff800000808cc5:	48 89 c1             	mov    rcx,rax
ffff800000808cc8:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000808ccc:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000808cd1:	48 89 ce             	mov    rsi,rcx
ffff800000808cd4:	48 89 c7             	mov    rdi,rax
ffff800000808cd7:	49 89 df             	mov    r15,rbx
ffff800000808cda:	48 b8 02 1d ef ff ff 	movabs rax,0xffffffffffef1d02
ffff800000808ce1:	ff ff ff 
ffff800000808ce4:	48 01 d8             	add    rax,rbx
ffff800000808ce7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1020
        page_item *pdpte= (page_item *) m4;
ffff800000808ce9:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000808ced:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1021
        for(int j=0;j<512;j++)
ffff800000808cf1:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff800000808cf8:	e9 21 02 00 00       	jmp    ffff800000808f1e <copy_mmap+0x3bf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1023
        {
            if((pdpte[j]&PAGE_PRESENT)==0||(pdpte[j]&PDPTE_1GB)!=0)
ffff800000808cfd:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000808d00:	48 98                	cdqe   
ffff800000808d02:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000808d09:	00 
ffff800000808d0a:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000808d0e:	48 01 d0             	add    rax,rdx
ffff800000808d11:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808d14:	83 e0 01             	and    eax,0x1
ffff800000808d17:	48 85 c0             	test   rax,rax
ffff800000808d1a:	0f 84 f9 01 00 00    	je     ffff800000808f19 <copy_mmap+0x3ba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1023 (discriminator 2)
ffff800000808d20:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000808d23:	48 98                	cdqe   
ffff800000808d25:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000808d2c:	00 
ffff800000808d2d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000808d31:	48 01 d0             	add    rax,rdx
ffff800000808d34:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808d37:	25 80 00 00 00       	and    eax,0x80
ffff800000808d3c:	48 85 c0             	test   rax,rax
ffff800000808d3f:	0f 85 d4 01 00 00    	jne    ffff800000808f19 <copy_mmap+0x3ba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1025
                continue;
            addr_t old_data2=pdpte[j];//旧的数据，里面保存了属性和要拷贝的数据的地址
ffff800000808d45:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000808d48:	48 98                	cdqe   
ffff800000808d4a:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000808d51:	00 
ffff800000808d52:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000808d56:	48 01 d0             	add    rax,rdx
ffff800000808d59:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808d5c:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1026
            addr_t m3=kmalloc(0,PAGE_4K_SIZE);
ffff800000808d60:	be 00 10 00 00       	mov    esi,0x1000
ffff800000808d65:	bf 00 00 00 00       	mov    edi,0x0
ffff800000808d6a:	49 89 df             	mov    r15,rbx
ffff800000808d6d:	48 b8 96 fe ed ff ff 	movabs rax,0xffffffffffedfe96
ffff800000808d74:	ff ff ff 
ffff800000808d77:	48 01 d8             	add    rax,rbx
ffff800000808d7a:	ff d0                	call   rax
ffff800000808d7c:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1027
            pdpte[j]= (m3&~KNL_BASE) | (old_data2 & ~PAGE_4K_MASK);
ffff800000808d80:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffff
ffff800000808d87:	7f 00 00 
ffff800000808d8a:	48 23 45 a8          	and    rax,QWORD PTR [rbp-0x58]
ffff800000808d8e:	48 89 c2             	mov    rdx,rax
ffff800000808d91:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000808d95:	25 ff 0f 00 00       	and    eax,0xfff
ffff800000808d9a:	48 89 c1             	mov    rcx,rax
ffff800000808d9d:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000808da0:	48 98                	cdqe   
ffff800000808da2:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
ffff800000808da9:	00 
ffff800000808daa:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000808dae:	48 01 f0             	add    rax,rsi
ffff800000808db1:	48 09 ca             	or     rdx,rcx
ffff800000808db4:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1028
            memcpy((unsigned char *) m3, old_data2 & PAGE_4K_MASK | KNL_BASE, PAGE_4K_SIZE);//把老的数据拷贝到新的页面里
ffff800000808db7:	48 b8 00 f0 ff ff ff 	movabs rax,0x7ffffffff000
ffff800000808dbe:	7f 00 00 
ffff800000808dc1:	48 23 45 b0          	and    rax,QWORD PTR [rbp-0x50]
ffff800000808dc5:	48 ba 00 00 00 00 00 	movabs rdx,0xffff800000000000
ffff800000808dcc:	80 ff ff 
ffff800000808dcf:	48 09 d0             	or     rax,rdx
ffff800000808dd2:	48 89 c1             	mov    rcx,rax
ffff800000808dd5:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000808dd9:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000808dde:	48 89 ce             	mov    rsi,rcx
ffff800000808de1:	48 89 c7             	mov    rdi,rax
ffff800000808de4:	49 89 df             	mov    r15,rbx
ffff800000808de7:	48 b8 02 1d ef ff ff 	movabs rax,0xffffffffffef1d02
ffff800000808dee:	ff ff ff 
ffff800000808df1:	48 01 d8             	add    rax,rbx
ffff800000808df4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1029
            page_item *pde= (page_item *) m3;
ffff800000808df6:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000808dfa:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1030
            for(int k=0;k<512;k++)
ffff800000808dfe:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff800000808e05:	e9 00 01 00 00       	jmp    ffff800000808f0a <copy_mmap+0x3ab>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1032
            {
                if((pde[k]&PAGE_PRESENT)==0||(pde[k]&PDE_2MB)!=0)
ffff800000808e0a:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000808e0d:	48 98                	cdqe   
ffff800000808e0f:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000808e16:	00 
ffff800000808e17:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000808e1b:	48 01 d0             	add    rax,rdx
ffff800000808e1e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808e21:	83 e0 01             	and    eax,0x1
ffff800000808e24:	48 85 c0             	test   rax,rax
ffff800000808e27:	0f 84 d8 00 00 00    	je     ffff800000808f05 <copy_mmap+0x3a6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1032 (discriminator 2)
ffff800000808e2d:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000808e30:	48 98                	cdqe   
ffff800000808e32:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000808e39:	00 
ffff800000808e3a:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000808e3e:	48 01 d0             	add    rax,rdx
ffff800000808e41:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808e44:	25 80 00 00 00       	and    eax,0x80
ffff800000808e49:	48 85 c0             	test   rax,rax
ffff800000808e4c:	0f 85 b3 00 00 00    	jne    ffff800000808f05 <copy_mmap+0x3a6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1034
                    continue;
                addr_t old_data3=pde[k];//旧的数据，里面保存了属性和要拷贝的数据的地址
ffff800000808e52:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000808e55:	48 98                	cdqe   
ffff800000808e57:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000808e5e:	00 
ffff800000808e5f:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000808e63:	48 01 d0             	add    rax,rdx
ffff800000808e66:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808e69:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1035
                addr_t m2=kmalloc(0,PAGE_4K_SIZE);
ffff800000808e6d:	be 00 10 00 00       	mov    esi,0x1000
ffff800000808e72:	bf 00 00 00 00       	mov    edi,0x0
ffff800000808e77:	49 89 df             	mov    r15,rbx
ffff800000808e7a:	48 b8 96 fe ed ff ff 	movabs rax,0xffffffffffedfe96
ffff800000808e81:	ff ff ff 
ffff800000808e84:	48 01 d8             	add    rax,rbx
ffff800000808e87:	ff d0                	call   rax
ffff800000808e89:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1036
                pde[k]= (m2&~KNL_BASE) | (old_data3 & ~PAGE_4K_MASK);
ffff800000808e8d:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffff
ffff800000808e94:	7f 00 00 
ffff800000808e97:	48 23 45 90          	and    rax,QWORD PTR [rbp-0x70]
ffff800000808e9b:	48 89 c2             	mov    rdx,rax
ffff800000808e9e:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000808ea2:	25 ff 0f 00 00       	and    eax,0xfff
ffff800000808ea7:	48 89 c1             	mov    rcx,rax
ffff800000808eaa:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000808ead:	48 98                	cdqe   
ffff800000808eaf:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
ffff800000808eb6:	00 
ffff800000808eb7:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000808ebb:	48 01 f0             	add    rax,rsi
ffff800000808ebe:	48 09 ca             	or     rdx,rcx
ffff800000808ec1:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1037
                memcpy((unsigned char *) m2, old_data3 & PAGE_4K_MASK | KNL_BASE, PAGE_4K_SIZE);//把老的数据拷贝到新的页面里
ffff800000808ec4:	48 b8 00 f0 ff ff ff 	movabs rax,0x7ffffffff000
ffff800000808ecb:	7f 00 00 
ffff800000808ece:	48 23 45 98          	and    rax,QWORD PTR [rbp-0x68]
ffff800000808ed2:	48 ba 00 00 00 00 00 	movabs rdx,0xffff800000000000
ffff800000808ed9:	80 ff ff 
ffff800000808edc:	48 09 d0             	or     rax,rdx
ffff800000808edf:	48 89 c1             	mov    rcx,rax
ffff800000808ee2:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000808ee6:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000808eeb:	48 89 ce             	mov    rsi,rcx
ffff800000808eee:	48 89 c7             	mov    rdi,rax
ffff800000808ef1:	49 89 df             	mov    r15,rbx
ffff800000808ef4:	48 b8 02 1d ef ff ff 	movabs rax,0xffffffffffef1d02
ffff800000808efb:	ff ff ff 
ffff800000808efe:	48 01 d8             	add    rax,rbx
ffff800000808f01:	ff d0                	call   rax
ffff800000808f03:	eb 01                	jmp    ffff800000808f06 <copy_mmap+0x3a7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1033
                    continue;
ffff800000808f05:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1030 (discriminator 2)
            for(int k=0;k<512;k++)
ffff800000808f06:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1030 (discriminator 1)
ffff800000808f0a:	81 7d e4 ff 01 00 00 	cmp    DWORD PTR [rbp-0x1c],0x1ff
ffff800000808f11:	0f 8e f3 fe ff ff    	jle    ffff800000808e0a <copy_mmap+0x2ab>
ffff800000808f17:	eb 01                	jmp    ffff800000808f1a <copy_mmap+0x3bb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1024
                continue;
ffff800000808f19:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1021 (discriminator 2)
        for(int j=0;j<512;j++)
ffff800000808f1a:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1021 (discriminator 1)
ffff800000808f1e:	81 7d e8 ff 01 00 00 	cmp    DWORD PTR [rbp-0x18],0x1ff
ffff800000808f25:	0f 8e d2 fd ff ff    	jle    ffff800000808cfd <copy_mmap+0x19e>
ffff800000808f2b:	eb 01                	jmp    ffff800000808f2e <copy_mmap+0x3cf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1015
            continue;
ffff800000808f2d:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1012 (discriminator 2)
    for(int i=0;i<512;i++)
ffff800000808f2e:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1012 (discriminator 1)
ffff800000808f32:	81 7d ec ff 01 00 00 	cmp    DWORD PTR [rbp-0x14],0x1ff
ffff800000808f39:	0f 8e d6 fc ff ff    	jle    ffff800000808c15 <copy_mmap+0xb6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1044
            }

        }

    }
}
ffff800000808f3f:	90                   	nop
ffff800000808f40:	90                   	nop
ffff800000808f41:	48 83 c4 70          	add    rsp,0x70
ffff800000808f45:	5b                   	pop    rbx
ffff800000808f46:	41 5f                	pop    r15
ffff800000808f48:	5d                   	pop    rbp
ffff800000808f49:	c3                   	ret    

ffff800000808f4a <chk_mmap>:
chk_mmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1046

int chk_mmap(off_t base, size_t mem_size){
ffff800000808f4a:	f3 0f 1e fa          	endbr64 
ffff800000808f4e:	55                   	push   rbp
ffff800000808f4f:	48 89 e5             	mov    rbp,rsp
ffff800000808f52:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000808f52 <chk_mmap+0x8>
ffff800000808f59:	49 bb de a5 11 00 00 	movabs r11,0x11a5de
ffff800000808f60:	00 00 00 
ffff800000808f63:	4c 01 d8             	add    rax,r11
ffff800000808f66:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000808f6a:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1047
    mmap_struct* mp=current->mmaps;
ffff800000808f6e:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000808f75:	ff ff ff 
ffff800000808f78:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000808f7c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808f7f:	48 8b 80 34 03 00 00 	mov    rax,QWORD PTR [rax+0x334]
ffff800000808f86:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1048
    for (; mp; mp=mp->node.next->data)
ffff800000808f8a:	eb 46                	jmp    ffff800000808fd2 <chk_mmap+0x88>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1050
    {
        if(mp->base<=base&&mp->base+mp->len>=base+mem_size)return 0;
ffff800000808f8c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000808f90:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808f93:	48 39 45 e8          	cmp    QWORD PTR [rbp-0x18],rax
ffff800000808f97:	72 29                	jb     ffff800000808fc2 <chk_mmap+0x78>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1050 (discriminator 1)
ffff800000808f99:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000808f9d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808fa0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000808fa4:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000808fa8:	48 01 c2             	add    rdx,rax
ffff800000808fab:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff800000808faf:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000808fb3:	48 01 c8             	add    rax,rcx
ffff800000808fb6:	48 39 c2             	cmp    rdx,rax
ffff800000808fb9:	72 07                	jb     ffff800000808fc2 <chk_mmap+0x78>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1050 (discriminator 2)
ffff800000808fbb:	b8 00 00 00 00       	mov    eax,0x0
ffff800000808fc0:	eb 1c                	jmp    ffff800000808fde <chk_mmap+0x94>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1048
    for (; mp; mp=mp->node.next->data)
ffff800000808fc2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000808fc6:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000808fca:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000808fce:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1048 (discriminator 1)
ffff800000808fd2:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffff800000808fd7:	75 b3                	jne    ffff800000808f8c <chk_mmap+0x42>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1052
    }
    return 1;
ffff800000808fd9:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1054
    
}
ffff800000808fde:	5d                   	pop    rbp
ffff800000808fdf:	c3                   	ret    

ffff800000808fe0 <chk_mtable>:
chk_mtable():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1059
/// @brief 查看当前进程下相应内存页表是否已经被填写。
/// @param base 
/// @param mem_size 
/// @return 
int chk_mtable(off_t base, size_t mem_size){
ffff800000808fe0:	f3 0f 1e fa          	endbr64 
ffff800000808fe4:	55                   	push   rbp
ffff800000808fe5:	48 89 e5             	mov    rbp,rsp
ffff800000808fe8:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000808fe8 <chk_mtable+0x8>
ffff800000808fef:	49 bb 48 a5 11 00 00 	movabs r11,0x11a548
ffff800000808ff6:	00 00 00 
ffff800000808ff9:	4c 01 d8             	add    rax,r11
ffff800000808ffc:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000809000:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1061
    size_t nr_pte;
    size_t ndx_pml4=0,ndx_pdpt=0,ndx_pd=0,ndx_pt=0;
ffff800000809004:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffff80000080900b:	00 
ffff80000080900c:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff800000809013:	00 
ffff800000809014:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000080901b:	00 
ffff80000080901c:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff800000809023:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1062
    page_item *pml4e= current->pml4;
ffff800000809024:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff80000080902b:	ff ff ff 
ffff80000080902e:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000809032:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809035:	48 8b 80 e0 00 00 00 	mov    rax,QWORD PTR [rax+0xe0]
ffff80000080903c:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1063
    nr_pte=  (mem_size-1+PAGE_4K_SIZE)/PAGE_4K_SIZE;
ffff800000809040:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000809044:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff80000080904a:	48 c1 e8 0c          	shr    rax,0xc
ffff80000080904e:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1064
    ndx_pt=  base/PAGE_4K_SIZE;
ffff800000809052:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000809056:	48 c1 e8 0c          	shr    rax,0xc
ffff80000080905a:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1065
    ndx_pd=  ndx_pt/512%512;
ffff80000080905e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000809062:	48 c1 e8 09          	shr    rax,0x9
ffff800000809066:	25 ff 01 00 00       	and    eax,0x1ff
ffff80000080906b:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1066
    ndx_pdpt=ndx_pd/512%512;
ffff80000080906f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000809073:	48 c1 e8 09          	shr    rax,0x9
ffff800000809077:	25 ff 01 00 00       	and    eax,0x1ff
ffff80000080907c:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1067
    ndx_pml4=ndx_pdpt/512%512;
ffff800000809080:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000809084:	48 c1 e8 09          	shr    rax,0x9
ffff800000809088:	25 ff 01 00 00       	and    eax,0x1ff
ffff80000080908d:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1068
    while (nr_pte)
ffff800000809091:	eb 25                	jmp    ffff8000008090b8 <chk_mtable+0xd8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1070
    {
        if(ndx_pdpt==512){
ffff800000809093:	48 81 7d f8 00 02 00 	cmp    QWORD PTR [rbp-0x8],0x200
ffff80000080909a:	00 
ffff80000080909b:	75 0d                	jne    ffff8000008090aa <chk_mtable+0xca>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1071
            ndx_pml4++;
ffff80000080909d:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1072
            ndx_pdpt=0;
ffff8000008090a2:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff8000008090a9:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1075 (discriminator 1)
        }
        if(pml4e[ndx_pml4]%PAGE_PRESENT==0){
            ndx_pml4++;
ffff8000008090aa:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1076 (discriminator 1)
            ndx_pdpt=0;
ffff8000008090af:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff8000008090b6:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1077 (discriminator 1)
            continue;
ffff8000008090b7:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1068
    while (nr_pte)
ffff8000008090b8:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
ffff8000008090bd:	75 d4                	jne    ffff800000809093 <chk_mtable+0xb3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1107
        if(pt[ndx_pt]&PAGE_PRESENT)return 0;
        ndx_pt++;
        nr_pte--;
    }
    
    return 1;
ffff8000008090bf:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1108
}
ffff8000008090c4:	5d                   	pop    rbp
ffff8000008090c5:	c3                   	ret    

ffff8000008090c6 <sys_getpgrp>:
sys_getpgrp():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1109
pid_t sys_getpgrp(void){
ffff8000008090c6:	f3 0f 1e fa          	endbr64 
ffff8000008090ca:	55                   	push   rbp
ffff8000008090cb:	48 89 e5             	mov    rbp,rsp
ffff8000008090ce:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008090ce <sys_getpgrp+0x8>
ffff8000008090d5:	49 bb 62 a4 11 00 00 	movabs r11,0x11a462
ffff8000008090dc:	00 00 00 
ffff8000008090df:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1110
    return current->gpid;
ffff8000008090e2:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff8000008090e9:	ff ff ff 
ffff8000008090ec:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff8000008090f0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008090f3:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1111
}
ffff8000008090f6:	5d                   	pop    rbp
ffff8000008090f7:	c3                   	ret    

ffff8000008090f8 <sys_getpgid>:
sys_getpgid():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1113

int sys_getpgid(pid_t pid,gid_t gid){
ffff8000008090f8:	f3 0f 1e fa          	endbr64 
ffff8000008090fc:	55                   	push   rbp
ffff8000008090fd:	48 89 e5             	mov    rbp,rsp
ffff800000809100:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000809100 <sys_getpgid+0x8>
ffff800000809107:	49 bb 30 a4 11 00 00 	movabs r11,0x11a430
ffff80000080910e:	00 00 00 
ffff800000809111:	4c 01 da             	add    rdx,r11
ffff800000809114:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff800000809117:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1114
    if(pid==0)
ffff80000080911a:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff80000080911e:	75 19                	jne    ffff800000809139 <sys_getpgid+0x41>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1115
        return current->gpid;
ffff800000809120:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff800000809127:	ff ff ff 
ffff80000080912a:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff80000080912e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809131:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff800000809134:	e9 8a 00 00 00       	jmp    ffff8000008091c3 <sys_getpgid+0xcb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1116
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000809139:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000809140:	eb 76                	jmp    ffff8000008091b8 <sys_getpgid+0xc0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1117
        if(task[i].pid==pid)
ffff800000809142:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000809149:	ff ff ff 
ffff80000080914c:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000809150:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff800000809153:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000809156:	48 63 c8             	movsxd rcx,eax
ffff800000809159:	48 89 c8             	mov    rax,rcx
ffff80000080915c:	48 01 c0             	add    rax,rax
ffff80000080915f:	48 01 c8             	add    rax,rcx
ffff800000809162:	48 8d 0c c5 00 00 00 	lea    rcx,[rax*8+0x0]
ffff800000809169:	00 
ffff80000080916a:	48 01 c8             	add    rax,rcx
ffff80000080916d:	48 c1 e0 05          	shl    rax,0x5
ffff800000809171:	48 01 f0             	add    rax,rsi
ffff800000809174:	8b 08                	mov    ecx,DWORD PTR [rax]
ffff800000809176:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000809179:	39 c1                	cmp    ecx,eax
ffff80000080917b:	75 37                	jne    ffff8000008091b4 <sys_getpgid+0xbc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1118
            return task[i].gpid;
ffff80000080917d:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000809184:	ff ff ff 
ffff800000809187:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff80000080918b:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080918e:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000809191:	48 63 d0             	movsxd rdx,eax
ffff800000809194:	48 89 d0             	mov    rax,rdx
ffff800000809197:	48 01 c0             	add    rax,rax
ffff80000080919a:	48 01 d0             	add    rax,rdx
ffff80000080919d:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008091a4:	00 
ffff8000008091a5:	48 01 d0             	add    rax,rdx
ffff8000008091a8:	48 c1 e0 05          	shl    rax,0x5
ffff8000008091ac:	48 01 c8             	add    rax,rcx
ffff8000008091af:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff8000008091b2:	eb 0f                	jmp    ffff8000008091c3 <sys_getpgid+0xcb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1116 (discriminator 2)
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff8000008091b4:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1116 (discriminator 1)
ffff8000008091b8:	83 7d fc 1f          	cmp    DWORD PTR [rbp-0x4],0x1f
ffff8000008091bc:	7e 84                	jle    ffff800000809142 <sys_getpgid+0x4a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1120
    }
    return -1;
ffff8000008091be:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1121
}
ffff8000008091c3:	5d                   	pop    rbp
ffff8000008091c4:	c3                   	ret    

ffff8000008091c5 <sys_setpgid>:
sys_setpgid():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1122
int sys_setpgid(pid_t pid,gid_t gid){
ffff8000008091c5:	f3 0f 1e fa          	endbr64 
ffff8000008091c9:	55                   	push   rbp
ffff8000008091ca:	48 89 e5             	mov    rbp,rsp
ffff8000008091cd:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008091cd <sys_setpgid+0x8>
ffff8000008091d4:	49 bb 63 a3 11 00 00 	movabs r11,0x11a363
ffff8000008091db:	00 00 00 
ffff8000008091de:	4c 01 d8             	add    rax,r11
ffff8000008091e1:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff8000008091e4:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1123
    if(pid==0)
ffff8000008091e7:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff8000008091eb:	75 56                	jne    ffff800000809243 <sys_setpgid+0x7e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1125
    {
        if(current->sid==current->pid)
ffff8000008091ed:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff8000008091f4:	ff ff ff 
ffff8000008091f7:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008091fb:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008091fe:	8b 4a 08             	mov    ecx,DWORD PTR [rdx+0x8]
ffff800000809201:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000809208:	ff ff ff 
ffff80000080920b:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080920f:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000809212:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000809214:	39 d1                	cmp    ecx,edx
ffff800000809216:	75 0a                	jne    ffff800000809222 <sys_setpgid+0x5d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1126
            return -1;
ffff800000809218:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080921d:	e9 33 01 00 00       	jmp    ffff800000809355 <sys_setpgid+0x190>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1127
        current->gpid=gid;
ffff800000809222:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000809229:	ff ff ff 
ffff80000080922c:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000809230:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809233:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000809236:	89 50 04             	mov    DWORD PTR [rax+0x4],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1128
        return 0;
ffff800000809239:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080923e:	e9 12 01 00 00       	jmp    ffff800000809355 <sys_setpgid+0x190>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1130
    }
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000809243:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff80000080924a:	e9 f7 00 00 00       	jmp    ffff800000809346 <sys_setpgid+0x181>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1131
        if(task[i].pid==pid)
ffff80000080924f:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff800000809256:	ff ff ff 
ffff800000809259:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080925d:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff800000809260:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000809263:	48 63 ca             	movsxd rcx,edx
ffff800000809266:	48 89 ca             	mov    rdx,rcx
ffff800000809269:	48 01 d2             	add    rdx,rdx
ffff80000080926c:	48 01 ca             	add    rdx,rcx
ffff80000080926f:	48 8d 0c d5 00 00 00 	lea    rcx,[rdx*8+0x0]
ffff800000809276:	00 
ffff800000809277:	48 01 ca             	add    rdx,rcx
ffff80000080927a:	48 c1 e2 05          	shl    rdx,0x5
ffff80000080927e:	48 01 f2             	add    rdx,rsi
ffff800000809281:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff800000809283:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000809286:	39 d1                	cmp    ecx,edx
ffff800000809288:	0f 85 b4 00 00 00    	jne    ffff800000809342 <sys_setpgid+0x17d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1133
        {
            if(task[i].sid==task[i].pid)
ffff80000080928e:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff800000809295:	ff ff ff 
ffff800000809298:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080929c:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff80000080929f:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff8000008092a2:	48 63 ca             	movsxd rcx,edx
ffff8000008092a5:	48 89 ca             	mov    rdx,rcx
ffff8000008092a8:	48 01 d2             	add    rdx,rdx
ffff8000008092ab:	48 01 ca             	add    rdx,rcx
ffff8000008092ae:	48 8d 0c d5 00 00 00 	lea    rcx,[rdx*8+0x0]
ffff8000008092b5:	00 
ffff8000008092b6:	48 01 ca             	add    rdx,rcx
ffff8000008092b9:	48 c1 e2 05          	shl    rdx,0x5
ffff8000008092bd:	48 01 f2             	add    rdx,rsi
ffff8000008092c0:	8b 72 08             	mov    esi,DWORD PTR [rdx+0x8]
ffff8000008092c3:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff8000008092ca:	ff ff ff 
ffff8000008092cd:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008092d1:	48 8b 3a             	mov    rdi,QWORD PTR [rdx]
ffff8000008092d4:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff8000008092d7:	48 63 ca             	movsxd rcx,edx
ffff8000008092da:	48 89 ca             	mov    rdx,rcx
ffff8000008092dd:	48 01 d2             	add    rdx,rdx
ffff8000008092e0:	48 01 ca             	add    rdx,rcx
ffff8000008092e3:	48 8d 0c d5 00 00 00 	lea    rcx,[rdx*8+0x0]
ffff8000008092ea:	00 
ffff8000008092eb:	48 01 ca             	add    rdx,rcx
ffff8000008092ee:	48 c1 e2 05          	shl    rdx,0x5
ffff8000008092f2:	48 01 fa             	add    rdx,rdi
ffff8000008092f5:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff8000008092f7:	39 d6                	cmp    esi,edx
ffff8000008092f9:	75 07                	jne    ffff800000809302 <sys_setpgid+0x13d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1134
                return -1;
ffff8000008092fb:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000809300:	eb 53                	jmp    ffff800000809355 <sys_setpgid+0x190>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1135
            task[i].gpid=gid;
ffff800000809302:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff800000809309:	ff ff ff 
ffff80000080930c:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000809310:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000809313:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000809316:	48 63 d0             	movsxd rdx,eax
ffff800000809319:	48 89 d0             	mov    rax,rdx
ffff80000080931c:	48 01 c0             	add    rax,rax
ffff80000080931f:	48 01 d0             	add    rax,rdx
ffff800000809322:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000809329:	00 
ffff80000080932a:	48 01 d0             	add    rax,rdx
ffff80000080932d:	48 c1 e0 05          	shl    rax,0x5
ffff800000809331:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
ffff800000809335:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000809338:	89 42 04             	mov    DWORD PTR [rdx+0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1136
            return 0;
ffff80000080933b:	b8 00 00 00 00       	mov    eax,0x0
ffff800000809340:	eb 13                	jmp    ffff800000809355 <sys_setpgid+0x190>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1130 (discriminator 2)
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000809342:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1130 (discriminator 1)
ffff800000809346:	83 7d fc 1f          	cmp    DWORD PTR [rbp-0x4],0x1f
ffff80000080934a:	0f 8e ff fe ff ff    	jle    ffff80000080924f <sys_setpgid+0x8a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1139
        }
    }
    return -1;
ffff800000809350:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1140
}
ffff800000809355:	5d                   	pop    rbp
ffff800000809356:	c3                   	ret    

ffff800000809357 <sys_setsid>:
sys_setsid():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1142

pid_t sys_setsid(void){
ffff800000809357:	f3 0f 1e fa          	endbr64 
ffff80000080935b:	55                   	push   rbp
ffff80000080935c:	48 89 e5             	mov    rbp,rsp
ffff80000080935f:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080935f <sys_setsid+0x8>
ffff800000809366:	49 bb d1 a1 11 00 00 	movabs r11,0x11a1d1
ffff80000080936d:	00 00 00 
ffff800000809370:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1143
    current->sid=current->pid;
ffff800000809373:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff80000080937a:	ff ff ff 
ffff80000080937d:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000809381:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000809384:	48 b9 48 fe ff ff ff 	movabs rcx,0xfffffffffffffe48
ffff80000080938b:	ff ff ff 
ffff80000080938e:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff800000809392:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809395:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000809397:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1144
}
ffff80000080939a:	90                   	nop
ffff80000080939b:	5d                   	pop    rbp
ffff80000080939c:	c3                   	ret    

ffff80000080939d <sys_getsid>:
sys_getsid():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1145
pid_t sys_getsid(pid_t pid){
ffff80000080939d:	f3 0f 1e fa          	endbr64 
ffff8000008093a1:	55                   	push   rbp
ffff8000008093a2:	48 89 e5             	mov    rbp,rsp
ffff8000008093a5:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff8000008093a5 <sys_getsid+0x8>
ffff8000008093ac:	49 bb 8b a1 11 00 00 	movabs r11,0x11a18b
ffff8000008093b3:	00 00 00 
ffff8000008093b6:	4c 01 da             	add    rdx,r11
ffff8000008093b9:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1146
    if(pid==0)
ffff8000008093bc:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff8000008093c0:	75 19                	jne    ffff8000008093db <sys_getsid+0x3e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1147
        return current->sid;
ffff8000008093c2:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff8000008093c9:	ff ff ff 
ffff8000008093cc:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff8000008093d0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008093d3:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff8000008093d6:	e9 8a 00 00 00       	jmp    ffff800000809465 <sys_getsid+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1148
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff8000008093db:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff8000008093e2:	eb 76                	jmp    ffff80000080945a <sys_getsid+0xbd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1149
        if(task[i].pid==pid)
ffff8000008093e4:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff8000008093eb:	ff ff ff 
ffff8000008093ee:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff8000008093f2:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff8000008093f5:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008093f8:	48 63 c8             	movsxd rcx,eax
ffff8000008093fb:	48 89 c8             	mov    rax,rcx
ffff8000008093fe:	48 01 c0             	add    rax,rax
ffff800000809401:	48 01 c8             	add    rax,rcx
ffff800000809404:	48 8d 0c c5 00 00 00 	lea    rcx,[rax*8+0x0]
ffff80000080940b:	00 
ffff80000080940c:	48 01 c8             	add    rax,rcx
ffff80000080940f:	48 c1 e0 05          	shl    rax,0x5
ffff800000809413:	48 01 f0             	add    rax,rsi
ffff800000809416:	8b 08                	mov    ecx,DWORD PTR [rax]
ffff800000809418:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080941b:	39 c1                	cmp    ecx,eax
ffff80000080941d:	75 37                	jne    ffff800000809456 <sys_getsid+0xb9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1150
            return task[i].sid;
ffff80000080941f:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000809426:	ff ff ff 
ffff800000809429:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff80000080942d:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000809430:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000809433:	48 63 d0             	movsxd rdx,eax
ffff800000809436:	48 89 d0             	mov    rax,rdx
ffff800000809439:	48 01 c0             	add    rax,rax
ffff80000080943c:	48 01 d0             	add    rax,rdx
ffff80000080943f:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000809446:	00 
ffff800000809447:	48 01 d0             	add    rax,rdx
ffff80000080944a:	48 c1 e0 05          	shl    rax,0x5
ffff80000080944e:	48 01 c8             	add    rax,rcx
ffff800000809451:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000809454:	eb 0f                	jmp    ffff800000809465 <sys_getsid+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1148 (discriminator 2)
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000809456:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1148 (discriminator 1)
ffff80000080945a:	83 7d fc 1f          	cmp    DWORD PTR [rbp-0x4],0x1f
ffff80000080945e:	7e 84                	jle    ffff8000008093e4 <sys_getsid+0x47>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1152
    }
    return -1;
ffff800000809460:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1153
}
ffff800000809465:	5d                   	pop    rbp
ffff800000809466:	c3                   	ret    

ffff800000809467 <sys_tcsetpgrp>:
sys_tcsetpgrp():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1154
int sys_tcsetpgrp(int fildes,pid_t pgid_id){
ffff800000809467:	f3 0f 1e fa          	endbr64 
ffff80000080946b:	55                   	push   rbp
ffff80000080946c:	48 89 e5             	mov    rbp,rsp
ffff80000080946f:	41 57                	push   r15
ffff800000809471:	53                   	push   rbx
ffff800000809472:	48 83 ec 20          	sub    rsp,0x20
ffff800000809476:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000809476 <sys_tcsetpgrp+0xf>
ffff80000080947d:	49 bb ba a0 11 00 00 	movabs r11,0x11a0ba
ffff800000809484:	00 00 00 
ffff800000809487:	4c 01 db             	add    rbx,r11
ffff80000080948a:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff80000080948d:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1156
    //当前controlling terminal断联
    sys_ioctl(fildes,TTY_DISCONNECT,0);
ffff800000809490:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000809493:	ba 00 00 00 00       	mov    edx,0x0
ffff800000809498:	be 02 00 00 00       	mov    esi,0x2
ffff80000080949d:	89 c7                	mov    edi,eax
ffff80000080949f:	49 89 df             	mov    r15,rbx
ffff8000008094a2:	48 b8 c1 61 ee ff ff 	movabs rax,0xffffffffffee61c1
ffff8000008094a9:	ff ff ff 
ffff8000008094ac:	48 01 d8             	add    rax,rbx
ffff8000008094af:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1157
    int sid= sys_getsid(0);//获取session id
ffff8000008094b1:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008094b6:	49 89 df             	mov    r15,rbx
ffff8000008094b9:	48 b8 6d 5e ee ff ff 	movabs rax,0xffffffffffee5e6d
ffff8000008094c0:	ff ff ff 
ffff8000008094c3:	48 01 d8             	add    rax,rbx
ffff8000008094c6:	ff d0                	call   rax
ffff8000008094c8:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1158
    struct process* new_fgl=NULL;
ffff8000008094cb:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff8000008094d2:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1159
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff8000008094d3:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff8000008094da:	e9 6c 01 00 00       	jmp    ffff80000080964b <sys_tcsetpgrp+0x1e4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1160
        if(task[i].stat == TASK_ZOMBIE||task[i].stat == TASK_EMPTY)continue;
ffff8000008094df:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff8000008094e6:	ff ff ff 
ffff8000008094e9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008094ed:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008094f0:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008094f3:	48 63 d0             	movsxd rdx,eax
ffff8000008094f6:	48 89 d0             	mov    rax,rdx
ffff8000008094f9:	48 01 c0             	add    rax,rax
ffff8000008094fc:	48 01 d0             	add    rax,rdx
ffff8000008094ff:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000809506:	00 
ffff800000809507:	48 01 d0             	add    rax,rdx
ffff80000080950a:	48 c1 e0 05          	shl    rax,0x5
ffff80000080950e:	48 01 c8             	add    rax,rcx
ffff800000809511:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff800000809514:	83 f8 04             	cmp    eax,0x4
ffff800000809517:	0f 84 29 01 00 00    	je     ffff800000809646 <sys_tcsetpgrp+0x1df>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1160 (discriminator 2)
ffff80000080951d:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000809524:	ff ff ff 
ffff800000809527:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080952b:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080952e:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000809531:	48 63 d0             	movsxd rdx,eax
ffff800000809534:	48 89 d0             	mov    rax,rdx
ffff800000809537:	48 01 c0             	add    rax,rax
ffff80000080953a:	48 01 d0             	add    rax,rdx
ffff80000080953d:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000809544:	00 
ffff800000809545:	48 01 d0             	add    rax,rdx
ffff800000809548:	48 c1 e0 05          	shl    rax,0x5
ffff80000080954c:	48 01 c8             	add    rax,rcx
ffff80000080954f:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff800000809552:	85 c0                	test   eax,eax
ffff800000809554:	0f 84 ec 00 00 00    	je     ffff800000809646 <sys_tcsetpgrp+0x1df>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1161
        if(task[i].sid==sid){
ffff80000080955a:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000809561:	ff ff ff 
ffff800000809564:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809568:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080956b:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080956e:	48 63 d0             	movsxd rdx,eax
ffff800000809571:	48 89 d0             	mov    rax,rdx
ffff800000809574:	48 01 c0             	add    rax,rax
ffff800000809577:	48 01 d0             	add    rax,rdx
ffff80000080957a:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000809581:	00 
ffff800000809582:	48 01 d0             	add    rax,rdx
ffff800000809585:	48 c1 e0 05          	shl    rax,0x5
ffff800000809589:	48 01 c8             	add    rax,rcx
ffff80000080958c:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffff80000080958f:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000809592:	39 c2                	cmp    edx,eax
ffff800000809594:	0f 85 ad 00 00 00    	jne    ffff800000809647 <sys_tcsetpgrp+0x1e0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1162
            task[i].fg_pgid=pgid_id;
ffff80000080959a:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff8000008095a1:	ff ff ff 
ffff8000008095a4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008095a8:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008095ab:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008095ae:	48 63 d0             	movsxd rdx,eax
ffff8000008095b1:	48 89 d0             	mov    rax,rdx
ffff8000008095b4:	48 01 c0             	add    rax,rax
ffff8000008095b7:	48 01 d0             	add    rax,rdx
ffff8000008095ba:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008095c1:	00 
ffff8000008095c2:	48 01 d0             	add    rax,rdx
ffff8000008095c5:	48 c1 e0 05          	shl    rax,0x5
ffff8000008095c9:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
ffff8000008095cd:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff8000008095d0:	89 42 0c             	mov    DWORD PTR [rdx+0xc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1163
            if(task[i].pid==pgid_id){
ffff8000008095d3:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff8000008095da:	ff ff ff 
ffff8000008095dd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008095e1:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008095e4:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008095e7:	48 63 d0             	movsxd rdx,eax
ffff8000008095ea:	48 89 d0             	mov    rax,rdx
ffff8000008095ed:	48 01 c0             	add    rax,rax
ffff8000008095f0:	48 01 d0             	add    rax,rdx
ffff8000008095f3:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008095fa:	00 
ffff8000008095fb:	48 01 d0             	add    rax,rdx
ffff8000008095fe:	48 c1 e0 05          	shl    rax,0x5
ffff800000809602:	48 01 c8             	add    rax,rcx
ffff800000809605:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000809607:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080960a:	39 c2                	cmp    edx,eax
ffff80000080960c:	75 39                	jne    ffff800000809647 <sys_tcsetpgrp+0x1e0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1165
                //这是新前台进程组的leader
                new_fgl=&task[i];
ffff80000080960e:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000809615:	ff ff ff 
ffff800000809618:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080961c:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080961f:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000809622:	48 63 d0             	movsxd rdx,eax
ffff800000809625:	48 89 d0             	mov    rax,rdx
ffff800000809628:	48 01 c0             	add    rax,rax
ffff80000080962b:	48 01 d0             	add    rax,rdx
ffff80000080962e:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000809635:	00 
ffff800000809636:	48 01 d0             	add    rax,rdx
ffff800000809639:	48 c1 e0 05          	shl    rax,0x5
ffff80000080963d:	48 01 c8             	add    rax,rcx
ffff800000809640:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff800000809644:	eb 01                	jmp    ffff800000809647 <sys_tcsetpgrp+0x1e0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1160
        if(task[i].stat == TASK_ZOMBIE||task[i].stat == TASK_EMPTY)continue;
ffff800000809646:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1159 (discriminator 2)
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000809647:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1159 (discriminator 1)
ffff80000080964b:	83 7d e4 1f          	cmp    DWORD PTR [rbp-0x1c],0x1f
ffff80000080964f:	0f 8e 8a fe ff ff    	jle    ffff8000008094df <sys_tcsetpgrp+0x78>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1170
            }
        }
    }
    //新leader把tty连接
    new_fgl->openf[new_fgl->tty_fd]->f_ops->ioctl(new_fgl->openf[fildes]->dentry->dir_inode,new_fgl->openf[fildes]\
ffff800000809655:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000809659:	8b 50 14             	mov    edx,DWORD PTR [rax+0x14]
ffff80000080965c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000809660:	48 63 d2             	movsxd rdx,edx
ffff800000809663:	48 83 c2 1e          	add    rdx,0x1e
ffff800000809667:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff80000080966c:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000809670:	4c 8b 40 28          	mov    r8,QWORD PTR [rax+0x28]
ffff800000809674:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000809678:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080967b:	48 63 d2             	movsxd rdx,edx
ffff80000080967e:	48 83 c2 1e          	add    rdx,0x1e
ffff800000809682:	48 8b 74 d0 08       	mov    rsi,QWORD PTR [rax+rdx*8+0x8]
ffff800000809687:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080968b:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080968e:	48 63 d2             	movsxd rdx,edx
ffff800000809691:	48 83 c2 1e          	add    rdx,0x1e
ffff800000809695:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff80000080969a:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080969e:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008096a2:	b9 00 00 00 00       	mov    ecx,0x0
ffff8000008096a7:	ba 01 00 00 00       	mov    edx,0x1
ffff8000008096ac:	48 89 c7             	mov    rdi,rax
ffff8000008096af:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1172
    ,TTY_CONNECT,0);
}
ffff8000008096b2:	90                   	nop
ffff8000008096b3:	48 83 c4 20          	add    rsp,0x20
ffff8000008096b7:	5b                   	pop    rbx
ffff8000008096b8:	41 5f                	pop    r15
ffff8000008096ba:	5d                   	pop    rbp
ffff8000008096bb:	c3                   	ret    

ffff8000008096bc <sys_tcgetpgrp>:
sys_tcgetpgrp():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1173
pid_t sys_tcgetpgrp(int fildes){
ffff8000008096bc:	f3 0f 1e fa          	endbr64 
ffff8000008096c0:	55                   	push   rbp
ffff8000008096c1:	48 89 e5             	mov    rbp,rsp
ffff8000008096c4:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008096c4 <sys_tcgetpgrp+0x8>
ffff8000008096cb:	49 bb 6c 9e 11 00 00 	movabs r11,0x119e6c
ffff8000008096d2:	00 00 00 
ffff8000008096d5:	4c 01 d8             	add    rax,r11
ffff8000008096d8:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1174
    return current->fg_pgid;
ffff8000008096db:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff8000008096e2:	ff ff ff 
ffff8000008096e5:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff8000008096e9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008096ec:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1175
}
ffff8000008096ef:	5d                   	pop    rbp
ffff8000008096f0:	c3                   	ret    

ffff8000008096f1 <sys_ioctl>:
sys_ioctl():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1178
//===============

int sys_ioctl(int fildes, int request, unsigned long args){
ffff8000008096f1:	f3 0f 1e fa          	endbr64 
ffff8000008096f5:	55                   	push   rbp
ffff8000008096f6:	48 89 e5             	mov    rbp,rsp
ffff8000008096f9:	48 83 ec 10          	sub    rsp,0x10
ffff8000008096fd:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008096fd <sys_ioctl+0xc>
ffff800000809704:	49 bb 33 9e 11 00 00 	movabs r11,0x119e33
ffff80000080970b:	00 00 00 
ffff80000080970e:	4c 01 d8             	add    rax,r11
ffff800000809711:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffff800000809714:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
ffff800000809717:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1179
    current->openf[fildes]->f_ops->ioctl(current->openf[fildes]->dentry->dir_inode,current->openf[fildes]\
ffff80000080971b:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000809722:	ff ff ff 
ffff800000809725:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000809729:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080972c:	8b 4d fc             	mov    ecx,DWORD PTR [rbp-0x4]
ffff80000080972f:	48 63 c9             	movsxd rcx,ecx
ffff800000809732:	48 83 c1 1e          	add    rcx,0x1e
ffff800000809736:	48 8b 54 ca 08       	mov    rdx,QWORD PTR [rdx+rcx*8+0x8]
ffff80000080973b:	48 8b 52 18          	mov    rdx,QWORD PTR [rdx+0x18]
ffff80000080973f:	4c 8b 42 28          	mov    r8,QWORD PTR [rdx+0x28]
ffff800000809743:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff800000809746:	48 63 d2             	movsxd rdx,edx
ffff800000809749:	48 b9 48 fe ff ff ff 	movabs rcx,0xfffffffffffffe48
ffff800000809750:	ff ff ff 
ffff800000809753:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff800000809757:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
ffff80000080975a:	8b 75 fc             	mov    esi,DWORD PTR [rbp-0x4]
ffff80000080975d:	48 63 f6             	movsxd rsi,esi
ffff800000809760:	48 83 c6 1e          	add    rsi,0x1e
ffff800000809764:	48 8b 74 f1 08       	mov    rsi,QWORD PTR [rcx+rsi*8+0x8]
ffff800000809769:	48 b9 48 fe ff ff ff 	movabs rcx,0xfffffffffffffe48
ffff800000809770:	ff ff ff 
ffff800000809773:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff800000809777:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080977a:	8b 4d fc             	mov    ecx,DWORD PTR [rbp-0x4]
ffff80000080977d:	48 63 c9             	movsxd rcx,ecx
ffff800000809780:	48 83 c1 1e          	add    rcx,0x1e
ffff800000809784:	48 8b 44 c8 08       	mov    rax,QWORD PTR [rax+rcx*8+0x8]
ffff800000809789:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080978d:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000809791:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff800000809795:	48 89 c7             	mov    rdi,rax
ffff800000809798:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1181
    ,request,args);
}
ffff80000080979b:	90                   	nop
ffff80000080979c:	c9                   	leave  
ffff80000080979d:	c3                   	ret    

ffff80000080979e <set_errno>:
set_errno():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1182
void set_errno(int errno){
ffff80000080979e:	f3 0f 1e fa          	endbr64 
ffff8000008097a2:	55                   	push   rbp
ffff8000008097a3:	48 89 e5             	mov    rbp,rsp
ffff8000008097a6:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008097a6 <set_errno+0x8>
ffff8000008097ad:	49 bb 8a 9d 11 00 00 	movabs r11,0x119d8a
ffff8000008097b4:	00 00 00 
ffff8000008097b7:	4c 01 d8             	add    rax,r11
ffff8000008097ba:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1183
    current->regs.errcode=errno;
ffff8000008097bd:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff8000008097c4:	ff ff ff 
ffff8000008097c7:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff8000008097cb:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008097ce:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff8000008097d1:	48 63 d2             	movsxd rdx,edx
ffff8000008097d4:	48 89 90 2c 03 00 00 	mov    QWORD PTR [rax+0x32c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1184
ffff8000008097db:	90                   	nop
ffff8000008097dc:	5d                   	pop    rbp
ffff8000008097dd:	c3                   	ret    
ffff8000008097de:	66 90                	xchg   ax,ax

ffff8000008097e0 <outb>:
outb():
ffff8000008097e0:	66 89 fa             	mov    dx,di
ffff8000008097e3:	66 89 f0             	mov    ax,si
ffff8000008097e6:	ee                   	out    dx,al
ffff8000008097e7:	e8 29 00 00 00       	call   ffff800000809815 <io_delay>
ffff8000008097ec:	c3                   	ret    

ffff8000008097ed <outw>:
outw():
ffff8000008097ed:	66 89 fa             	mov    dx,di
ffff8000008097f0:	66 89 f0             	mov    ax,si
ffff8000008097f3:	66 ef                	out    dx,ax
ffff8000008097f5:	90                   	nop
ffff8000008097f6:	90                   	nop
ffff8000008097f7:	90                   	nop
ffff8000008097f8:	c3                   	ret    

ffff8000008097f9 <inb>:
inb():
ffff8000008097f9:	31 c0                	xor    eax,eax
ffff8000008097fb:	66 89 fa             	mov    dx,di
ffff8000008097fe:	ec                   	in     al,dx
ffff8000008097ff:	90                   	nop
ffff800000809800:	90                   	nop
ffff800000809801:	90                   	nop
ffff800000809802:	c3                   	ret    

ffff800000809803 <inw>:
inw():
ffff800000809803:	31 c0                	xor    eax,eax
ffff800000809805:	66 89 fa             	mov    dx,di
ffff800000809808:	66 ed                	in     ax,dx
ffff80000080980a:	90                   	nop
ffff80000080980b:	90                   	nop
ffff80000080980c:	90                   	nop
ffff80000080980d:	c3                   	ret    

ffff80000080980e <eoi>:
eoi():
ffff80000080980e:	b0 20                	mov    al,0x20
ffff800000809810:	e6 a0                	out    0xa0,al
ffff800000809812:	e6 20                	out    0x20,al
ffff800000809814:	c3                   	ret    

ffff800000809815 <io_delay>:
io_delay():
ffff800000809815:	90                   	nop
ffff800000809816:	90                   	nop
ffff800000809817:	90                   	nop
ffff800000809818:	90                   	nop
ffff800000809819:	c3                   	ret    

ffff80000080981a <turn_on_int>:
turn_on_int():
ffff80000080981a:	b0 f8                	mov    al,0xf8
ffff80000080981c:	e6 21                	out    0x21,al
ffff80000080981e:	e8 f2 ff ff ff       	call   ffff800000809815 <io_delay>
ffff800000809823:	b0 af                	mov    al,0xaf
ffff800000809825:	e6 a1                	out    0xa1,al
ffff800000809827:	e8 e9 ff ff ff       	call   ffff800000809815 <io_delay>
ffff80000080982c:	48 b8 00 70 10 00 00 	movabs rax,0xffff800000107000
ffff800000809833:	80 ff ff 
ffff800000809836:	0f 01 18             	lidt   [rax]
ffff800000809839:	90                   	nop
ffff80000080983a:	90                   	nop
ffff80000080983b:	90                   	nop
ffff80000080983c:	90                   	nop
ffff80000080983d:	c3                   	ret    

ffff80000080983e <_report_back_trace_of_err>:
_report_back_trace_of_err():
ffff80000080983e:	67 8b 44 24 04       	mov    eax,DWORD PTR [esp+0x4]
ffff800000809843:	50                   	push   rax
ffff800000809844:	83 c4 08             	add    esp,0x8
ffff800000809847:	c3                   	ret    

ffff800000809848 <bt_msg>:
bt_msg():
ffff800000809848:	65 72 72             	gs jb  ffff8000008098bd <fill_desc+0x3a>
ffff80000080984b:	6f                   	outs   dx,DWORD PTR ds:[rsi]
ffff80000080984c:	72 20                	jb     ffff80000080986e <init_gdt+0x11>
ffff80000080984e:	6f                   	outs   dx,DWORD PTR ds:[rsi]
ffff80000080984f:	63 63 75             	movsxd esp,DWORD PTR [rbx+0x75]
ffff800000809852:	72 73                	jb     ffff8000008098c7 <fill_desc+0x44>
ffff800000809854:	20 61 74             	and    BYTE PTR [rcx+0x74],ah
ffff800000809857:	3a 25 78 5c 6e 00    	cmp    ah,BYTE PTR [rip+0x6e5c78]        # ffff800000eef4d5 <_knl_end+0x2ef4d5>

ffff80000080985d <init_gdt>:
init_gdt():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:9
#include "proc.h"

descriptor *gdt=GDT_ADDR+KNL_BASE;
extern char *gdtptr;
int init_gdt()
{
ffff80000080985d:	f3 0f 1e fa          	endbr64 
ffff800000809861:	55                   	push   rbp
ffff800000809862:	48 89 e5             	mov    rbp,rsp
ffff800000809865:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000809865 <init_gdt+0x8>
ffff80000080986c:	49 bb cb 9c 11 00 00 	movabs r11,0x119ccb
ffff800000809873:	00 00 00 
ffff800000809876:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:11
//    fill_desc(0x108000,108,SEG_SYS_TSS|SEG_PRESENT,4);
    __asm__ volatile("mov $0x48,%ax\r\n"
ffff800000809879:	66 b8 48 00          	mov    ax,0x48
ffff80000080987d:	0f 00 d8             	ltr    ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:13
                 "ltr %ax");  
}
ffff800000809880:	90                   	nop
ffff800000809881:	5d                   	pop    rbp
ffff800000809882:	c3                   	ret    

ffff800000809883 <fill_desc>:
fill_desc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:15
void fill_desc(u64 base, u64 limit, u16 attr, u32 index)
{
ffff800000809883:	f3 0f 1e fa          	endbr64 
ffff800000809887:	55                   	push   rbp
ffff800000809888:	48 89 e5             	mov    rbp,rsp
ffff80000080988b:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080988b <fill_desc+0x8>
ffff800000809892:	49 bb a5 9c 11 00 00 	movabs r11,0x119ca5
ffff800000809899:	00 00 00 
ffff80000080989c:	4c 01 d8             	add    rax,r11
ffff80000080989f:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff8000008098a3:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff8000008098a7:	89 4d e8             	mov    DWORD PTR [rbp-0x18],ecx
ffff8000008098aa:	66 89 55 ec          	mov    WORD PTR [rbp-0x14],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:16
    gdt[index].base_12=base&0xffff;
ffff8000008098ae:	48 ba 40 fd ff ff ff 	movabs rdx,0xfffffffffffffd40
ffff8000008098b5:	ff ff ff 
ffff8000008098b8:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008098bc:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008098bf:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff8000008098c2:	48 c1 e2 04          	shl    rdx,0x4
ffff8000008098c6:	48 01 ca             	add    rdx,rcx
ffff8000008098c9:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
ffff8000008098cd:	66 89 4a 02          	mov    WORD PTR [rdx+0x2],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:17
    gdt[index].base_3=(base>>16)&0xff;
ffff8000008098d1:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff8000008098d5:	48 89 d6             	mov    rsi,rdx
ffff8000008098d8:	48 c1 ee 10          	shr    rsi,0x10
ffff8000008098dc:	48 ba 40 fd ff ff ff 	movabs rdx,0xfffffffffffffd40
ffff8000008098e3:	ff ff ff 
ffff8000008098e6:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008098ea:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008098ed:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff8000008098f0:	48 c1 e2 04          	shl    rdx,0x4
ffff8000008098f4:	48 01 ca             	add    rdx,rcx
ffff8000008098f7:	89 f1                	mov    ecx,esi
ffff8000008098f9:	88 4a 04             	mov    BYTE PTR [rdx+0x4],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:18
    gdt[index].base_4=(base>>24)&0xff;
ffff8000008098fc:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000809900:	48 89 d6             	mov    rsi,rdx
ffff800000809903:	48 c1 ee 18          	shr    rsi,0x18
ffff800000809907:	48 ba 40 fd ff ff ff 	movabs rdx,0xfffffffffffffd40
ffff80000080990e:	ff ff ff 
ffff800000809911:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000809915:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000809918:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff80000080991b:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080991f:	48 01 ca             	add    rdx,rcx
ffff800000809922:	89 f1                	mov    ecx,esi
ffff800000809924:	88 4a 07             	mov    BYTE PTR [rdx+0x7],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:19
    gdt[index].base_5678=(base>>32)&0xffffffff;
ffff800000809927:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080992b:	48 89 d1             	mov    rcx,rdx
ffff80000080992e:	48 c1 e9 20          	shr    rcx,0x20
ffff800000809932:	48 ba 40 fd ff ff ff 	movabs rdx,0xfffffffffffffd40
ffff800000809939:	ff ff ff 
ffff80000080993c:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000809940:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff800000809943:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000809946:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080994a:	48 01 f2             	add    rdx,rsi
ffff80000080994d:	89 4a 08             	mov    DWORD PTR [rdx+0x8],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:20
    gdt[index].limit_lo16=limit&0xffff;
ffff800000809950:	48 ba 40 fd ff ff ff 	movabs rdx,0xfffffffffffffd40
ffff800000809957:	ff ff ff 
ffff80000080995a:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080995e:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000809961:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000809964:	48 c1 e2 04          	shl    rdx,0x4
ffff800000809968:	48 01 ca             	add    rdx,rcx
ffff80000080996b:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff80000080996f:	66 89 0a             	mov    WORD PTR [rdx],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:21
    gdt[index].attr=attr|((limit>>8)&0xf0);
ffff800000809972:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff800000809976:	48 c1 ea 08          	shr    rdx,0x8
ffff80000080997a:	89 d1                	mov    ecx,edx
ffff80000080997c:	66 81 e1 f0 00       	and    cx,0xf0
ffff800000809981:	48 ba 40 fd ff ff ff 	movabs rdx,0xfffffffffffffd40
ffff800000809988:	ff ff ff 
ffff80000080998b:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080998f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000809992:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000809995:	48 c1 e0 04          	shl    rax,0x4
ffff800000809999:	48 01 c2             	add    rdx,rax
ffff80000080999c:	89 c8                	mov    eax,ecx
ffff80000080999e:	66 0b 45 ec          	or     ax,WORD PTR [rbp-0x14]
ffff8000008099a2:	66 89 42 05          	mov    WORD PTR [rdx+0x5],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:23

}
ffff8000008099a6:	90                   	nop
ffff8000008099a7:	5d                   	pop    rbp
ffff8000008099a8:	c3                   	ret    

ffff8000008099a9 <fill_gate>:
fill_gate():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:26

void fill_gate(u32 index,u32 offset,u16 selector,u16 attr)
{
ffff8000008099a9:	f3 0f 1e fa          	endbr64 
ffff8000008099ad:	55                   	push   rbp
ffff8000008099ae:	48 89 e5             	mov    rbp,rsp
ffff8000008099b1:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008099b1 <fill_gate+0x8>
ffff8000008099b8:	49 bb 7f 9b 11 00 00 	movabs r11,0x119b7f
ffff8000008099bf:	00 00 00 
ffff8000008099c2:	4c 01 d8             	add    rax,r11
ffff8000008099c5:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff8000008099c8:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
ffff8000008099cb:	89 d6                	mov    esi,edx
ffff8000008099cd:	89 ca                	mov    edx,ecx
ffff8000008099cf:	89 f1                	mov    ecx,esi
ffff8000008099d1:	66 89 4d e4          	mov    WORD PTR [rbp-0x1c],cx
ffff8000008099d5:	66 89 55 e0          	mov    WORD PTR [rbp-0x20],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:27
    gate* ptr=gdt;
ffff8000008099d9:	48 ba 40 fd ff ff ff 	movabs rdx,0xfffffffffffffd40
ffff8000008099e0:	ff ff ff 
ffff8000008099e3:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff8000008099e7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008099ea:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:28
    ptr[index].offset_low=offset&0xffff;
ffff8000008099ee:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008099f1:	48 c1 e0 04          	shl    rax,0x4
ffff8000008099f5:	48 89 c2             	mov    rdx,rax
ffff8000008099f8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008099fc:	48 01 d0             	add    rax,rdx
ffff8000008099ff:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000809a02:	66 89 10             	mov    WORD PTR [rax],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:29
    ptr[index].offset_high=(offset>>16)&0xffff;
ffff800000809a05:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000809a08:	48 c1 e0 04          	shl    rax,0x4
ffff800000809a0c:	48 89 c2             	mov    rdx,rax
ffff800000809a0f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000809a13:	48 01 d0             	add    rax,rdx
ffff800000809a16:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000809a19:	c1 ea 10             	shr    edx,0x10
ffff800000809a1c:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:30
    ptr[index].selector=selector;
ffff800000809a1f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000809a22:	48 c1 e0 04          	shl    rax,0x4
ffff800000809a26:	48 89 c2             	mov    rdx,rax
ffff800000809a29:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000809a2d:	48 01 c2             	add    rdx,rax
ffff800000809a30:	0f b7 45 e4          	movzx  eax,WORD PTR [rbp-0x1c]
ffff800000809a34:	66 89 42 02          	mov    WORD PTR [rdx+0x2],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:31
    ptr[index].attr=attr;
ffff800000809a38:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000809a3b:	48 c1 e0 04          	shl    rax,0x4
ffff800000809a3f:	48 89 c2             	mov    rdx,rax
ffff800000809a42:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000809a46:	48 01 c2             	add    rdx,rax
ffff800000809a49:	0f b7 45 e0          	movzx  eax,WORD PTR [rbp-0x20]
ffff800000809a4d:	66 89 42 04          	mov    WORD PTR [rdx+0x4],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:32
}
ffff800000809a51:	90                   	nop
ffff800000809a52:	5d                   	pop    rbp
ffff800000809a53:	c3                   	ret    

ffff800000809a54 <fill_ldt_desc>:
fill_ldt_desc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:35

void fill_ldt_desc(u32 base, u32 limit,u16 attr,descriptor *desc)
{
ffff800000809a54:	f3 0f 1e fa          	endbr64 
ffff800000809a58:	55                   	push   rbp
ffff800000809a59:	48 89 e5             	mov    rbp,rsp
ffff800000809a5c:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000809a5c <fill_ldt_desc+0x8>
ffff800000809a63:	49 bb d4 9a 11 00 00 	movabs r11,0x119ad4
ffff800000809a6a:	00 00 00 
ffff800000809a6d:	4c 01 d8             	add    rax,r11
ffff800000809a70:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffff800000809a73:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
ffff800000809a76:	89 d0                	mov    eax,edx
ffff800000809a78:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
ffff800000809a7c:	66 89 45 f4          	mov    WORD PTR [rbp-0xc],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:41
//    desc->base_lo16=base&0xffff;
//    desc->base_mid8=(base>>16)&0xff;
//    desc->base_hi8=(base>>24)&0xff;
//    desc->limit_lo16=limit&0xffff;
//    desc->attr=attr|(limit>>16&0xf)<<8;
ffff800000809a80:	90                   	nop
ffff800000809a81:	5d                   	pop    rbp
ffff800000809a82:	c3                   	ret    
ffff800000809a83:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffff800000809a8a:	00 00 00 
ffff800000809a8d:	0f 1f 00             	nop    DWORD PTR [rax]

ffff800000809a90 <fill_desc>:
fill_desc():
ffff800000809a90:	67 8b 44 24 04       	mov    eax,DWORD PTR [esp+0x4]
ffff800000809a95:	67 8b 5c 24 08       	mov    ebx,DWORD PTR [esp+0x8]
ffff800000809a9a:	67 8b 4c 24 0c       	mov    ecx,DWORD PTR [esp+0xc]
ffff800000809a9f:	67 8b 54 24 10       	mov    edx,DWORD PTR [esp+0x10]
ffff800000809aa4:	be 00 60 00 00       	mov    esi,0x6000
ffff800000809aa9:	c1 e2 03             	shl    edx,0x3
ffff800000809aac:	01 d6                	add    esi,edx
ffff800000809aae:	66 67 89 1e          	mov    WORD PTR [esi],bx
ffff800000809ab2:	66 67 89 46 02       	mov    WORD PTR [esi+0x2],ax
ffff800000809ab7:	c1 e8 10             	shr    eax,0x10
ffff800000809aba:	67 88 46 04          	mov    BYTE PTR [esi+0x4],al
ffff800000809abe:	c1 eb 10             	shr    ebx,0x10
ffff800000809ac1:	67 88 5e 06          	mov    BYTE PTR [esi+0x6],bl
ffff800000809ac5:	67 88 66 07          	mov    BYTE PTR [esi+0x7],ah
ffff800000809ac9:	67 09 4e 05          	or     DWORD PTR [esi+0x5],ecx
ffff800000809acd:	c3                   	ret    

ffff800000809ace <clock_c>:
clock_c():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/clock.c:9
#include <devman.h>
#include <disk.h>
extern int manage_proc_lock;
extern int cur_proc;
extern struct process *task;
void clock_c(){
ffff800000809ace:	f3 0f 1e fa          	endbr64 
ffff800000809ad2:	55                   	push   rbp
ffff800000809ad3:	48 89 e5             	mov    rbp,rsp
ffff800000809ad6:	41 57                	push   r15
ffff800000809ad8:	48 83 ec 08          	sub    rsp,0x8
ffff800000809adc:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000809adc <clock_c+0xe>
ffff800000809ae3:	49 bb 54 9a 11 00 00 	movabs r11,0x119a54
ffff800000809aea:	00 00 00 
ffff800000809aed:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/clock.c:11
    //refresh_wnds();
    if(!manage_proc_lock)
ffff800000809af0:	48 b8 c8 fc ff ff ff 	movabs rax,0xfffffffffffffcc8
ffff800000809af7:	ff ff ff 
ffff800000809afa:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000809afe:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000809b00:	85 c0                	test   eax,eax
ffff800000809b02:	75 17                	jne    ffff800000809b1b <clock_c+0x4d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/clock.c:13
    {
        manage_proc();
ffff800000809b04:	49 89 d7             	mov    r15,rdx
ffff800000809b07:	b8 00 00 00 00       	mov    eax,0x0
ffff800000809b0c:	48 b9 bd 2a ee ff ff 	movabs rcx,0xffffffffffee2abd
ffff800000809b13:	ff ff ff 
ffff800000809b16:	48 01 d1             	add    rcx,rdx
ffff800000809b19:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/clock.c:16
    }
    //puts("1 disk req executed.");
ffff800000809b1b:	90                   	nop
ffff800000809b1c:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000809b20:	c9                   	leave  
ffff800000809b21:	c3                   	ret    
ffff800000809b22:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffff800000809b29:	00 00 00 
ffff800000809b2c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

ffff800000809b30 <clock>:
clock():
ffff800000809b30:	50                   	push   rax
ffff800000809b31:	53                   	push   rbx
ffff800000809b32:	51                   	push   rcx
ffff800000809b33:	52                   	push   rdx
ffff800000809b34:	57                   	push   rdi
ffff800000809b35:	56                   	push   rsi
ffff800000809b36:	41 50                	push   r8
ffff800000809b38:	41 51                	push   r9
ffff800000809b3a:	41 52                	push   r10
ffff800000809b3c:	41 53                	push   r11
ffff800000809b3e:	41 54                	push   r12
ffff800000809b40:	41 55                	push   r13
ffff800000809b42:	41 56                	push   r14
ffff800000809b44:	41 57                	push   r15
ffff800000809b46:	e8 56 c4 ff ff       	call   ffff800000805fa1 <save_rsp>
ffff800000809b4b:	66 8c c0             	mov    ax,es
ffff800000809b4e:	50                   	push   rax
ffff800000809b4f:	66 8c d8             	mov    ax,ds
ffff800000809b52:	50                   	push   rax
ffff800000809b53:	66 b8 10 00          	mov    ax,0x10
ffff800000809b57:	8e c0                	mov    es,eax
ffff800000809b59:	8e d8                	mov    ds,eax

ffff800000809b5b <clock.normal_part>:
clock.normal_part():
ffff800000809b5b:	b0 20                	mov    al,0x20
ffff800000809b5d:	e6 a0                	out    0xa0,al
ffff800000809b5f:	e6 20                	out    0x20,al
ffff800000809b61:	e8 68 ff ff ff       	call   ffff800000809ace <clock_c>

ffff800000809b66 <clock_ret>:
clock_ret():
ffff800000809b66:	58                   	pop    rax
ffff800000809b67:	8e d8                	mov    ds,eax
ffff800000809b69:	58                   	pop    rax
ffff800000809b6a:	8e c0                	mov    es,eax
ffff800000809b6c:	41 5f                	pop    r15
ffff800000809b6e:	41 5e                	pop    r14
ffff800000809b70:	41 5d                	pop    r13
ffff800000809b72:	41 5c                	pop    r12
ffff800000809b74:	41 5b                	pop    r11
ffff800000809b76:	41 5a                	pop    r10
ffff800000809b78:	41 59                	pop    r9
ffff800000809b7a:	41 58                	pop    r8
ffff800000809b7c:	5e                   	pop    rsi
ffff800000809b7d:	5f                   	pop    rdi
ffff800000809b7e:	5a                   	pop    rdx
ffff800000809b7f:	59                   	pop    rcx
ffff800000809b80:	5b                   	pop    rbx
ffff800000809b81:	58                   	pop    rax
ffff800000809b82:	48 cf                	iretq  

ffff800000809b84 <execute>:
execute():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:123
    return ind;
}
*/

int execute(char *path, char **argv)
{
ffff800000809b84:	f3 0f 1e fa          	endbr64 
ffff800000809b88:	55                   	push   rbp
ffff800000809b89:	48 89 e5             	mov    rbp,rsp
ffff800000809b8c:	41 57                	push   r15
ffff800000809b8e:	53                   	push   rbx
ffff800000809b8f:	48 83 ec 20          	sub    rsp,0x20
ffff800000809b93:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000809b93 <execute+0xf>
ffff800000809b9a:	49 bb 9d 99 11 00 00 	movabs r11,0x11999d
ffff800000809ba1:	00 00 00 
ffff800000809ba4:	4c 01 db             	add    rbx,r11
ffff800000809ba7:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000809bab:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:126
    //尚未切换到目标进程
    //syscall(SYSCALL_REG_PROC, load_pe,0,0,0,0);
    int fno=-1,cwd_fno=-1;
ffff800000809baf:	c7 45 e4 ff ff ff ff 	mov    DWORD PTR [rbp-0x1c],0xffffffff
ffff800000809bb6:	c7 45 e0 ff ff ff ff 	mov    DWORD PTR [rbp-0x20],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:127
    if((fno=sys_open(path, O_EXEC)) <0)return -1;
ffff800000809bbd:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000809bc1:	be 00 10 00 00       	mov    esi,0x1000
ffff800000809bc6:	48 89 c7             	mov    rdi,rax
ffff800000809bc9:	49 89 df             	mov    r15,rbx
ffff800000809bcc:	48 b8 69 a3 ee ff ff 	movabs rax,0xffffffffffeea369
ffff800000809bd3:	ff ff ff 
ffff800000809bd6:	48 01 d8             	add    rax,rbx
ffff800000809bd9:	ff d0                	call   rax
ffff800000809bdb:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
ffff800000809bde:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
ffff800000809be2:	79 0a                	jns    ffff800000809bee <execute+0x6a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:127 (discriminator 1)
ffff800000809be4:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000809be9:	e9 81 00 00 00       	jmp    ffff800000809c6f <execute+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:129
    //
    char *p=path;
ffff800000809bee:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000809bf2:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:130
    for(;*p!='\0';p++);
ffff800000809bf6:	eb 05                	jmp    ffff800000809bfd <execute+0x79>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:130 (discriminator 2)
ffff800000809bf8:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:130 (discriminator 1)
ffff800000809bfd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000809c01:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000809c04:	84 c0                	test   al,al
ffff800000809c06:	75 f0                	jne    ffff800000809bf8 <execute+0x74>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:131
    for(;*p!='/'&&p>path;p--);
ffff800000809c08:	eb 05                	jmp    ffff800000809c0f <execute+0x8b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:131 (discriminator 3)
ffff800000809c0a:	48 83 6d e8 01       	sub    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:131 (discriminator 1)
ffff800000809c0f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000809c13:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000809c16:	3c 2f                	cmp    al,0x2f
ffff800000809c18:	74 0a                	je     ffff800000809c24 <execute+0xa0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:131 (discriminator 2)
ffff800000809c1a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000809c1e:	48 3b 45 d8          	cmp    rax,QWORD PTR [rbp-0x28]
ffff800000809c22:	77 e6                	ja     ffff800000809c0a <execute+0x86>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:132
    if(p>path)
ffff800000809c24:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000809c28:	48 3b 45 d8          	cmp    rax,QWORD PTR [rbp-0x28]
ffff800000809c2c:	76 3c                	jbe    ffff800000809c6a <execute+0xe6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:134
    {
        *p='\0';
ffff800000809c2e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000809c32:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:135
        if((cwd_fno=sys_open(path, O_DIRECTORY)) <0)return -1;
ffff800000809c35:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000809c39:	be 00 40 00 00       	mov    esi,0x4000
ffff800000809c3e:	48 89 c7             	mov    rdi,rax
ffff800000809c41:	49 89 df             	mov    r15,rbx
ffff800000809c44:	48 b8 69 a3 ee ff ff 	movabs rax,0xffffffffffeea369
ffff800000809c4b:	ff ff ff 
ffff800000809c4e:	48 01 d8             	add    rax,rbx
ffff800000809c51:	ff d0                	call   rax
ffff800000809c53:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
ffff800000809c56:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
ffff800000809c5a:	79 07                	jns    ffff800000809c63 <execute+0xdf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:135 (discriminator 1)
ffff800000809c5c:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000809c61:	eb 0c                	jmp    ffff800000809c6f <execute+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:136
        *p='/';
ffff800000809c63:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000809c67:	c6 00 2f             	mov    BYTE PTR [rax],0x2f
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:141
    }
    // extern struct file opened[];
    extern struct process task[];
    // int pi= reg_proc(proc_start, &opened[cwd_fno], &opened[fno]);
    return 0;
ffff800000809c6a:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:142
}
ffff800000809c6f:	48 83 c4 20          	add    rsp,0x20
ffff800000809c73:	5b                   	pop    rbx
ffff800000809c74:	41 5f                	pop    r15
ffff800000809c76:	5d                   	pop    rbp
ffff800000809c77:	c3                   	ret    

ffff800000809c78 <sys_execve>:
sys_execve():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:144

int sys_execve(char *path, int argc, char **argv) {
ffff800000809c78:	f3 0f 1e fa          	endbr64 
ffff800000809c7c:	55                   	push   rbp
ffff800000809c7d:	48 89 e5             	mov    rbp,rsp
ffff800000809c80:	41 57                	push   r15
ffff800000809c82:	41 55                	push   r13
ffff800000809c84:	41 54                	push   r12
ffff800000809c86:	53                   	push   rbx
ffff800000809c87:	48 83 c4 80          	add    rsp,0xffffffffffffff80
ffff800000809c8b:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000809c8b <sys_execve+0x13>
ffff800000809c92:	49 bb a5 98 11 00 00 	movabs r11,0x1198a5
ffff800000809c99:	00 00 00 
ffff800000809c9c:	4c 01 db             	add    rbx,r11
ffff800000809c9f:	48 89 bd 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdi
ffff800000809ca6:	89 b5 74 ff ff ff    	mov    DWORD PTR [rbp-0x8c],esi
ffff800000809cac:	48 89 95 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:145
    int fno=-1,cwd_fno=-1;
ffff800000809cb3:	c7 45 b8 ff ff ff ff 	mov    DWORD PTR [rbp-0x48],0xffffffff
ffff800000809cba:	c7 45 b4 ff ff ff ff 	mov    DWORD PTR [rbp-0x4c],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:146
    if((fno=sys_open(path, O_EXEC)) <0)return -ENOENT;
ffff800000809cc1:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000809cc8:	be 00 10 00 00       	mov    esi,0x1000
ffff800000809ccd:	48 89 c7             	mov    rdi,rax
ffff800000809cd0:	49 89 df             	mov    r15,rbx
ffff800000809cd3:	48 b8 69 a3 ee ff ff 	movabs rax,0xffffffffffeea369
ffff800000809cda:	ff ff ff 
ffff800000809cdd:	48 01 d8             	add    rax,rbx
ffff800000809ce0:	ff d0                	call   rax
ffff800000809ce2:	89 45 b8             	mov    DWORD PTR [rbp-0x48],eax
ffff800000809ce5:	83 7d b8 00          	cmp    DWORD PTR [rbp-0x48],0x0
ffff800000809ce9:	79 0a                	jns    ffff800000809cf5 <sys_execve+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:146 (discriminator 1)
ffff800000809ceb:	b8 d3 ff ff ff       	mov    eax,0xffffffd3
ffff800000809cf0:	e9 f8 03 00 00       	jmp    ffff80000080a0ed <sys_execve+0x475>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:150

    //重新设置进程数据
    //清空原来的页表
    release_mmap(current);
ffff800000809cf5:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff800000809cfc:	ff ff ff 
ffff800000809cff:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809d03:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809d06:	48 89 c7             	mov    rdi,rax
ffff800000809d09:	49 89 df             	mov    r15,rbx
ffff800000809d0c:	48 b8 8d 52 ee ff ff 	movabs rax,0xffffffffffee528d
ffff800000809d13:	ff ff ff 
ffff800000809d16:	48 01 d8             	add    rax,rbx
ffff800000809d19:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:154
    // current->regs.rsp=STACK_TOP;//清空栈
    extern TSS* tss;

    current->exef=current->openf[fno];//改变执行文件
ffff800000809d1b:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff800000809d22:	ff ff ff 
ffff800000809d25:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809d29:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000809d2c:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff800000809d33:	ff ff ff 
ffff800000809d36:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809d3a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809d3d:	8b 4d b8             	mov    ecx,DWORD PTR [rbp-0x48]
ffff800000809d40:	48 63 c9             	movsxd rcx,ecx
ffff800000809d43:	48 83 c1 1e          	add    rcx,0x1e
ffff800000809d47:	48 8b 54 ca 08       	mov    rdx,QWORD PTR [rdx+rcx*8+0x8]
ffff800000809d4c:	48 89 90 f0 00 00 00 	mov    QWORD PTR [rax+0xf0],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:155
    off_t entry= load_elf(current->exef);
ffff800000809d53:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff800000809d5a:	ff ff ff 
ffff800000809d5d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809d61:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809d64:	48 8b 80 f0 00 00 00 	mov    rax,QWORD PTR [rax+0xf0]
ffff800000809d6b:	89 c7                	mov    edi,eax
ffff800000809d6d:	49 89 df             	mov    r15,rbx
ffff800000809d70:	48 b8 97 77 ee ff ff 	movabs rax,0xffffffffffee7797
ffff800000809d77:	ff ff ff 
ffff800000809d7a:	48 01 d8             	add    rax,rbx
ffff800000809d7d:	ff d0                	call   rax
ffff800000809d7f:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:156
    if(entry==-1)
ffff800000809d83:	48 83 7d a8 ff       	cmp    QWORD PTR [rbp-0x58],0xffffffffffffffff
ffff800000809d88:	75 4d                	jne    ffff800000809dd7 <sys_execve+0x15f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:158
    {
        comprintf("failed execve, errcode:%d\n",current->regs.errcode);
ffff800000809d8a:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff800000809d91:	ff ff ff 
ffff800000809d94:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809d98:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809d9b:	48 8b 80 2c 03 00 00 	mov    rax,QWORD PTR [rax+0x32c]
ffff800000809da2:	48 89 c6             	mov    rsi,rax
ffff800000809da5:	48 b8 d0 d3 ff ff ff 	movabs rax,0xffffffffffffd3d0
ffff800000809dac:	ff ff ff 
ffff800000809daf:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000809db3:	48 89 c7             	mov    rdi,rax
ffff800000809db6:	49 89 df             	mov    r15,rbx
ffff800000809db9:	b8 00 00 00 00       	mov    eax,0x0
ffff800000809dbe:	48 ba 62 18 ef ff ff 	movabs rdx,0xffffffffffef1862
ffff800000809dc5:	ff ff ff 
ffff800000809dc8:	48 01 da             	add    rdx,rbx
ffff800000809dcb:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:159
        return -1;
ffff800000809dcd:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000809dd2:	e9 16 03 00 00       	jmp    ffff80000080a0ed <sys_execve+0x475>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:161
    }
    if(sys_close(fno)<0)return -1;
ffff800000809dd7:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
ffff800000809dda:	89 c7                	mov    edi,eax
ffff800000809ddc:	49 89 df             	mov    r15,rbx
ffff800000809ddf:	48 b8 9d a9 ee ff ff 	movabs rax,0xffffffffffeea99d
ffff800000809de6:	ff ff ff 
ffff800000809de9:	48 01 d8             	add    rax,rbx
ffff800000809dec:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:164

    //sysret直接返回到新程序的main
    void *retp= (void *) entry;
ffff800000809dee:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000809df2:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:165
    stack_store_regs *rs= (stack_store_regs *) (tss->ists[0] - sizeof(stack_store_regs));
ffff800000809df6:	48 b8 b8 fd ff ff ff 	movabs rax,0xfffffffffffffdb8
ffff800000809dfd:	ff ff ff 
ffff800000809e00:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809e04:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809e07:	48 8b 40 24          	mov    rax,QWORD PTR [rax+0x24]
ffff800000809e0b:	48 2d a8 00 00 00    	sub    rax,0xa8
ffff800000809e11:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:166
    rs->rcx= (unsigned long) retp;//返回地址
ffff800000809e15:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
ffff800000809e19:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000809e1d:	48 89 50 68          	mov    QWORD PTR [rax+0x68],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:168
    //第二个参数argv需要把内容从内核空间拷贝到用户堆里面
    size_t arglen=0;
ffff800000809e21:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff800000809e28:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:169
    for(int i=0;i<argc;i++){
ffff800000809e29:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x0
ffff800000809e30:	eb 3c                	jmp    ffff800000809e6e <sys_execve+0x1f6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:170 (discriminator 3)
        arglen+= strlen(argv[i])+1;
ffff800000809e32:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000809e35:	48 98                	cdqe   
ffff800000809e37:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000809e3e:	00 
ffff800000809e3f:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff800000809e46:	48 01 d0             	add    rax,rdx
ffff800000809e49:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809e4c:	48 89 c7             	mov    rdi,rax
ffff800000809e4f:	49 89 df             	mov    r15,rbx
ffff800000809e52:	48 b8 d3 20 ef ff ff 	movabs rax,0xffffffffffef20d3
ffff800000809e59:	ff ff ff 
ffff800000809e5c:	48 01 d8             	add    rax,rbx
ffff800000809e5f:	ff d0                	call   rax
ffff800000809e61:	83 c0 01             	add    eax,0x1
ffff800000809e64:	48 98                	cdqe   
ffff800000809e66:	48 01 45 d8          	add    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:169 (discriminator 3)
    for(int i=0;i<argc;i++){
ffff800000809e6a:	83 45 d4 01          	add    DWORD PTR [rbp-0x2c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:169 (discriminator 1)
ffff800000809e6e:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000809e71:	3b 85 74 ff ff ff    	cmp    eax,DWORD PTR [rbp-0x8c]
ffff800000809e77:	7c b9                	jl     ffff800000809e32 <sys_execve+0x1ba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:173
    }
    //参数放栈
    int tot_argsz=0;
ffff800000809e79:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:174
    for(int i=0;i<argc;i++){
ffff800000809e80:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
ffff800000809e87:	eb 3f                	jmp    ffff800000809ec8 <sys_execve+0x250>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:175 (discriminator 3)
        int tmpsz=strlen(argv[i])+1;
ffff800000809e89:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000809e8c:	48 98                	cdqe   
ffff800000809e8e:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000809e95:	00 
ffff800000809e96:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff800000809e9d:	48 01 d0             	add    rax,rdx
ffff800000809ea0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809ea3:	48 89 c7             	mov    rdi,rax
ffff800000809ea6:	49 89 df             	mov    r15,rbx
ffff800000809ea9:	48 b8 d3 20 ef ff ff 	movabs rax,0xffffffffffef20d3
ffff800000809eb0:	ff ff ff 
ffff800000809eb3:	48 01 d8             	add    rax,rbx
ffff800000809eb6:	ff d0                	call   rax
ffff800000809eb8:	83 c0 01             	add    eax,0x1
ffff800000809ebb:	89 45 84             	mov    DWORD PTR [rbp-0x7c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:176 (discriminator 3)
        tot_argsz+=tmpsz;
ffff800000809ebe:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
ffff800000809ec1:	01 45 d0             	add    DWORD PTR [rbp-0x30],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:174 (discriminator 3)
    for(int i=0;i<argc;i++){
ffff800000809ec4:	83 45 cc 01          	add    DWORD PTR [rbp-0x34],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:174 (discriminator 1)
ffff800000809ec8:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000809ecb:	3b 85 74 ff ff ff    	cmp    eax,DWORD PTR [rbp-0x8c]
ffff800000809ed1:	7c b6                	jl     ffff800000809e89 <sys_execve+0x211>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:180
    }
    //初始需要的栈大小为argv指向的字符串大小之和+argv指针数组大小+
    // argc+一个main函数返回地址+一个rbp入栈空间
    if(tot_argsz+argc*8+24>=PAGE_4K_SIZE){
ffff800000809ed3:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
ffff800000809ed9:	8d 14 c5 00 00 00 00 	lea    edx,[rax*8+0x0]
ffff800000809ee0:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000809ee3:	01 d0                	add    eax,edx
ffff800000809ee5:	3d e7 0f 00 00       	cmp    eax,0xfe7
ffff800000809eea:	0f 8e 9c 00 00 00    	jle    ffff800000809f8c <sys_execve+0x314>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:181
        int needed=(tot_argsz+PAGE_4K_SIZE-1)/PAGE_4K_SIZE-1;
ffff800000809ef0:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000809ef3:	05 ff 0f 00 00       	add    eax,0xfff
ffff800000809ef8:	8d 90 ff 0f 00 00    	lea    edx,[rax+0xfff]
ffff800000809efe:	85 c0                	test   eax,eax
ffff800000809f00:	0f 48 c2             	cmovs  eax,edx
ffff800000809f03:	c1 f8 0c             	sar    eax,0xc
ffff800000809f06:	83 e8 01             	sub    eax,0x1
ffff800000809f09:	89 45 94             	mov    DWORD PTR [rbp-0x6c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:182
        for(int i=0;i<needed;i++){
ffff800000809f0c:	c7 45 c8 00 00 00 00 	mov    DWORD PTR [rbp-0x38],0x0
ffff800000809f13:	eb 6f                	jmp    ffff800000809f84 <sys_execve+0x30c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:183 (discriminator 3)
            smmap(pmalloc(PAGE_4K_SIZE),STACK_TOP-PAGE_4K_SIZE*(i+1),PAGE_PRESENT|PAGE_RWX|PAGE_FOR_ALL,current->pml4);
ffff800000809f15:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff800000809f1c:	ff ff ff 
ffff800000809f1f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809f23:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809f26:	4c 8b a0 e0 00 00 00 	mov    r12,QWORD PTR [rax+0xe0]
ffff800000809f2d:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
ffff800000809f30:	83 c0 01             	add    eax,0x1
ffff800000809f33:	c1 e0 0c             	shl    eax,0xc
ffff800000809f36:	48 63 d0             	movsxd rdx,eax
ffff800000809f39:	48 b8 00 f0 ff ff ff 	movabs rax,0x7ffffffff000
ffff800000809f40:	7f 00 00 
ffff800000809f43:	48 29 d0             	sub    rax,rdx
ffff800000809f46:	49 89 c5             	mov    r13,rax
ffff800000809f49:	bf 00 10 00 00       	mov    edi,0x1000
ffff800000809f4e:	49 89 df             	mov    r15,rbx
ffff800000809f51:	48 b8 4b 01 ee ff ff 	movabs rax,0xffffffffffee014b
ffff800000809f58:	ff ff ff 
ffff800000809f5b:	48 01 d8             	add    rax,rbx
ffff800000809f5e:	ff d0                	call   rax
ffff800000809f60:	4c 89 e1             	mov    rcx,r12
ffff800000809f63:	ba 07 00 00 00       	mov    edx,0x7
ffff800000809f68:	4c 89 ee             	mov    rsi,r13
ffff800000809f6b:	48 89 c7             	mov    rdi,rax
ffff800000809f6e:	49 89 df             	mov    r15,rbx
ffff800000809f71:	48 b8 9c e8 ed ff ff 	movabs rax,0xffffffffffede89c
ffff800000809f78:	ff ff ff 
ffff800000809f7b:	48 01 d8             	add    rax,rbx
ffff800000809f7e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:182 (discriminator 3)
        for(int i=0;i<needed;i++){
ffff800000809f80:	83 45 c8 01          	add    DWORD PTR [rbp-0x38],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:182 (discriminator 1)
ffff800000809f84:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
ffff800000809f87:	3b 45 94             	cmp    eax,DWORD PTR [rbp-0x6c]
ffff800000809f8a:	7c 89                	jl     ffff800000809f15 <sys_execve+0x29d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:186
        }
    }
    unsigned long* argp_aryp=STACK_TOP-tot_argsz;
ffff800000809f8c:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000809f8f:	48 63 d0             	movsxd rdx,eax
ffff800000809f92:	48 b8 00 f0 ff ff ff 	movabs rax,0x7ffffffff000
ffff800000809f99:	7f 00 00 
ffff800000809f9c:	48 29 d0             	sub    rax,rdx
ffff800000809f9f:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:187
    argp_aryp-=argc;
ffff800000809fa3:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
ffff800000809fa9:	48 98                	cdqe   
ffff800000809fab:	48 c1 e0 03          	shl    rax,0x3
ffff800000809faf:	48 f7 d8             	neg    rax
ffff800000809fb2:	48 01 45 88          	add    QWORD PTR [rbp-0x78],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:189

    char* p= STACK_TOP;
ffff800000809fb6:	48 b8 00 f0 ff ff ff 	movabs rax,0x7ffffffff000
ffff800000809fbd:	7f 00 00 
ffff800000809fc0:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:190
    for(int i=0;i<argc;i++){
ffff800000809fc4:	c7 45 bc 00 00 00 00 	mov    DWORD PTR [rbp-0x44],0x0
ffff800000809fcb:	e9 90 00 00 00       	jmp    ffff80000080a060 <sys_execve+0x3e8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:191 (discriminator 3)
        p-=strlen(argv[i])+1;
ffff800000809fd0:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
ffff800000809fd3:	48 98                	cdqe   
ffff800000809fd5:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000809fdc:	00 
ffff800000809fdd:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff800000809fe4:	48 01 d0             	add    rax,rdx
ffff800000809fe7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809fea:	48 89 c7             	mov    rdi,rax
ffff800000809fed:	49 89 df             	mov    r15,rbx
ffff800000809ff0:	48 b8 d3 20 ef ff ff 	movabs rax,0xffffffffffef20d3
ffff800000809ff7:	ff ff ff 
ffff800000809ffa:	48 01 d8             	add    rax,rbx
ffff800000809ffd:	ff d0                	call   rax
ffff800000809fff:	83 c0 01             	add    eax,0x1
ffff80000080a002:	48 98                	cdqe   
ffff80000080a004:	48 f7 d8             	neg    rax
ffff80000080a007:	48 01 45 c0          	add    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:192 (discriminator 3)
        strcpy(p,argv[i]);
ffff80000080a00b:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
ffff80000080a00e:	48 98                	cdqe   
ffff80000080a010:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080a017:	00 
ffff80000080a018:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080a01f:	48 01 d0             	add    rax,rdx
ffff80000080a022:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080a025:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080a029:	48 89 d6             	mov    rsi,rdx
ffff80000080a02c:	48 89 c7             	mov    rdi,rax
ffff80000080a02f:	49 89 df             	mov    r15,rbx
ffff80000080a032:	48 b8 06 1e ef ff ff 	movabs rax,0xffffffffffef1e06
ffff80000080a039:	ff ff ff 
ffff80000080a03c:	48 01 d8             	add    rax,rbx
ffff80000080a03f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:193 (discriminator 3)
        argp_aryp[i]=p;
ffff80000080a041:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
ffff80000080a044:	48 98                	cdqe   
ffff80000080a046:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080a04d:	00 
ffff80000080a04e:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080a052:	48 01 c2             	add    rdx,rax
ffff80000080a055:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080a059:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:190 (discriminator 3)
    for(int i=0;i<argc;i++){
ffff80000080a05c:	83 45 bc 01          	add    DWORD PTR [rbp-0x44],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:190 (discriminator 1)
ffff80000080a060:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
ffff80000080a063:	3b 85 74 ff ff ff    	cmp    eax,DWORD PTR [rbp-0x8c]
ffff80000080a069:	0f 8c 61 ff ff ff    	jl     ffff800000809fd0 <sys_execve+0x358>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:197
    }
    
    //第一个参数argc
    if(current->dl){
ffff80000080a06f:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080a076:	ff ff ff 
ffff80000080a079:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a07d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a080:	8b 80 5c 03 00 00    	mov    eax,DWORD PTR [rax+0x35c]
ffff80000080a086:	85 c0                	test   eax,eax
ffff80000080a088:	74 41                	je     ffff80000080a0cb <sys_execve+0x453>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:198
        rs->rsi=current->dl;
ffff80000080a08a:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080a091:	ff ff ff 
ffff80000080a094:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a098:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a09b:	8b 80 5c 03 00 00    	mov    eax,DWORD PTR [rax+0x35c]
ffff80000080a0a1:	48 63 d0             	movsxd rdx,eax
ffff80000080a0a4:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080a0a8:	48 89 50 50          	mov    QWORD PTR [rax+0x50],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:199
        rs->rdi=argc;
ffff80000080a0ac:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
ffff80000080a0b2:	48 63 d0             	movsxd rdx,eax
ffff80000080a0b5:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080a0b9:	48 89 50 58          	mov    QWORD PTR [rax+0x58],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:200
        rs->rdx=argp_aryp;
ffff80000080a0bd:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
ffff80000080a0c1:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080a0c5:	48 89 50 60          	mov    QWORD PTR [rax+0x60],rdx
ffff80000080a0c9:	eb 1d                	jmp    ffff80000080a0e8 <sys_execve+0x470>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:202
    }else{
        rs->rsi=argc;
ffff80000080a0cb:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
ffff80000080a0d1:	48 63 d0             	movsxd rdx,eax
ffff80000080a0d4:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080a0d8:	48 89 50 50          	mov    QWORD PTR [rax+0x50],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:203
        rs->rdi=argp_aryp;
ffff80000080a0dc:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
ffff80000080a0e0:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080a0e4:	48 89 50 58          	mov    QWORD PTR [rax+0x58],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:209
    }
    
    //以下部分是临时测试代码
//    int (*pmain)(int argc,char **argv)=(int (*)(int, char **)) entry;
//    pmain(argc, (char **) rs->rdi);
    return 0;
ffff80000080a0e8:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:210
}
ffff80000080a0ed:	48 83 ec 80          	sub    rsp,0xffffffffffffff80
ffff80000080a0f1:	5b                   	pop    rbx
ffff80000080a0f2:	41 5c                	pop    r12
ffff80000080a0f4:	41 5d                	pop    r13
ffff80000080a0f6:	41 5f                	pop    r15
ffff80000080a0f8:	5d                   	pop    rbp
ffff80000080a0f9:	c3                   	ret    

ffff80000080a0fa <exec_call>:
exec_call():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:212
int exec_call(char *path)
{
ffff80000080a0fa:	f3 0f 1e fa          	endbr64 
ffff80000080a0fe:	55                   	push   rbp
ffff80000080a0ff:	48 89 e5             	mov    rbp,rsp
ffff80000080a102:	41 57                	push   r15
ffff80000080a104:	53                   	push   rbx
ffff80000080a105:	48 83 ec 20          	sub    rsp,0x20
ffff80000080a109:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080a109 <exec_call+0xf>
ffff80000080a110:	49 bb 27 94 11 00 00 	movabs r11,0x119427
ffff80000080a117:	00 00 00 
ffff80000080a11a:	4c 01 db             	add    rbx,r11
ffff80000080a11d:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:213
    int pi= execute(path, NULL);
ffff80000080a121:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a125:	be 00 00 00 00       	mov    esi,0x0
ffff80000080a12a:	48 89 c7             	mov    rdi,rax
ffff80000080a12d:	49 89 df             	mov    r15,rbx
ffff80000080a130:	48 b8 54 66 ee ff ff 	movabs rax,0xffffffffffee6654
ffff80000080a137:	ff ff ff 
ffff80000080a13a:	48 01 d8             	add    rax,rbx
ffff80000080a13d:	ff d0                	call   rax
ffff80000080a13f:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:214
    int tss= _TSS_IND(pi)*8;
ffff80000080a142:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080a145:	01 c0                	add    eax,eax
ffff80000080a147:	83 c0 05             	add    eax,0x5
ffff80000080a14a:	c1 e0 03             	shl    eax,0x3
ffff80000080a14d:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:217
    extern struct process task[];
    extern int cur_proc;
    switch_proc_tss(pi);
ffff80000080a150:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080a153:	89 c7                	mov    edi,eax
ffff80000080a155:	49 89 df             	mov    r15,rbx
ffff80000080a158:	48 b8 2b 2e ee ff ff 	movabs rax,0xffffffffffee2e2b
ffff80000080a15f:	ff ff ff 
ffff80000080a162:	48 01 d8             	add    rax,rbx
ffff80000080a165:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:218
    while(task[pi].stat != TASK_ZOMBIE);
ffff80000080a167:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:218 (discriminator 1)
ffff80000080a168:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff80000080a16f:	ff ff ff 
ffff80000080a172:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff80000080a176:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080a179:	48 63 d0             	movsxd rdx,eax
ffff80000080a17c:	48 89 d0             	mov    rax,rdx
ffff80000080a17f:	48 01 c0             	add    rax,rax
ffff80000080a182:	48 01 d0             	add    rax,rdx
ffff80000080a185:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080a18c:	00 
ffff80000080a18d:	48 01 d0             	add    rax,rdx
ffff80000080a190:	48 c1 e0 05          	shl    rax,0x5
ffff80000080a194:	48 01 c8             	add    rax,rcx
ffff80000080a197:	48 83 c0 10          	add    rax,0x10
ffff80000080a19b:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080a19e:	83 f8 04             	cmp    eax,0x4
ffff80000080a1a1:	75 c5                	jne    ffff80000080a168 <exec_call+0x6e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:219
    return task[pi].exit_code;
ffff80000080a1a3:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff80000080a1aa:	ff ff ff 
ffff80000080a1ad:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff80000080a1b1:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080a1b4:	48 63 d0             	movsxd rdx,eax
ffff80000080a1b7:	48 89 d0             	mov    rax,rdx
ffff80000080a1ba:	48 01 c0             	add    rax,rax
ffff80000080a1bd:	48 01 d0             	add    rax,rdx
ffff80000080a1c0:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080a1c7:	00 
ffff80000080a1c8:	48 01 d0             	add    rax,rdx
ffff80000080a1cb:	48 c1 e0 05          	shl    rax,0x5
ffff80000080a1cf:	48 01 c8             	add    rax,rcx
ffff80000080a1d2:	48 83 c0 20          	add    rax,0x20
ffff80000080a1d6:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:220
}
ffff80000080a1d9:	48 83 c4 20          	add    rsp,0x20
ffff80000080a1dd:	5b                   	pop    rbx
ffff80000080a1de:	41 5f                	pop    r15
ffff80000080a1e0:	5d                   	pop    rbp
ffff80000080a1e1:	c3                   	ret    

ffff80000080a1e2 <proc_start>:
proc_start():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:222
int proc_start()
{
ffff80000080a1e2:	f3 0f 1e fa          	endbr64 
ffff80000080a1e6:	55                   	push   rbp
ffff80000080a1e7:	48 89 e5             	mov    rbp,rsp
ffff80000080a1ea:	41 57                	push   r15
ffff80000080a1ec:	53                   	push   rbx
ffff80000080a1ed:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080a1ed <proc_start+0xb>
ffff80000080a1f4:	49 bb 43 93 11 00 00 	movabs r11,0x119343
ffff80000080a1fb:	00 00 00 
ffff80000080a1fe:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:225
    extern struct process task[];
    extern int cur_proc;
    load_pe(&task[cur_proc]);
ffff80000080a201:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff80000080a208:	ff ff ff 
ffff80000080a20b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a20f:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080a211:	48 63 d0             	movsxd rdx,eax
ffff80000080a214:	48 89 d0             	mov    rax,rdx
ffff80000080a217:	48 01 c0             	add    rax,rax
ffff80000080a21a:	48 01 d0             	add    rax,rdx
ffff80000080a21d:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080a224:	00 
ffff80000080a225:	48 01 d0             	add    rax,rdx
ffff80000080a228:	48 c1 e0 05          	shl    rax,0x5
ffff80000080a22c:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff80000080a233:	ff ff ff 
ffff80000080a236:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080a23a:	48 01 d0             	add    rax,rdx
ffff80000080a23d:	48 89 c7             	mov    rdi,rax
ffff80000080a240:	49 89 df             	mov    r15,rbx
ffff80000080a243:	48 b8 3f 6d ee ff ff 	movabs rax,0xffffffffffee6d3f
ffff80000080a24a:	ff ff ff 
ffff80000080a24d:	48 01 d8             	add    rax,rbx
ffff80000080a250:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:227
    //释放进程资源
    sys_exit(0);
ffff80000080a252:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080a257:	49 89 df             	mov    r15,rbx
ffff80000080a25a:	48 b8 10 3a ee ff ff 	movabs rax,0xffffffffffee3a10
ffff80000080a261:	ff ff ff 
ffff80000080a264:	48 01 d8             	add    rax,rbx
ffff80000080a267:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:228
}
ffff80000080a269:	90                   	nop
ffff80000080a26a:	5b                   	pop    rbx
ffff80000080a26b:	41 5f                	pop    r15
ffff80000080a26d:	5d                   	pop    rbp
ffff80000080a26e:	c3                   	ret    

ffff80000080a26f <load_pe>:
load_pe():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:231
//在cr3切换到目标进程下的加载程序
int load_pe(struct process *proc)
{
ffff80000080a26f:	f3 0f 1e fa          	endbr64 
ffff80000080a273:	55                   	push   rbp
ffff80000080a274:	48 89 e5             	mov    rbp,rsp
ffff80000080a277:	41 57                	push   r15
ffff80000080a279:	53                   	push   rbx
ffff80000080a27a:	48 81 ec 10 03 00 00 	sub    rsp,0x310
ffff80000080a281:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080a281 <load_pe+0x12>
ffff80000080a288:	49 bb af 92 11 00 00 	movabs r11,0x1192af
ffff80000080a28f:	00 00 00 
ffff80000080a292:	4c 01 db             	add    rbx,r11
ffff80000080a295:	48 89 bd e8 fc ff ff 	mov    QWORD PTR [rbp-0x318],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:233
    // 读取文件头
    struct file *f=proc->exef;
ffff80000080a29c:	48 8b 85 e8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x318]
ffff80000080a2a3:	48 8b 80 f0 00 00 00 	mov    rax,QWORD PTR [rax+0xf0]
ffff80000080a2aa:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:234
    int exefno=-1;
ffff80000080a2ae:	c7 45 ec ff ff ff ff 	mov    DWORD PTR [rbp-0x14],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:235
    for(int i=0;i<MAX_PROC_OPENF;i++)
ffff80000080a2b5:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff80000080a2bc:	eb 32                	jmp    ffff80000080a2f0 <load_pe+0x81>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:236
        if(current->openf[i]==f)
ffff80000080a2be:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080a2c5:	ff ff ff 
ffff80000080a2c8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a2cc:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a2cf:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff80000080a2d2:	48 63 d2             	movsxd rdx,edx
ffff80000080a2d5:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080a2d9:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff80000080a2de:	48 39 45 88          	cmp    QWORD PTR [rbp-0x78],rax
ffff80000080a2e2:	75 08                	jne    ffff80000080a2ec <load_pe+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:238
        {
            exefno=i;
ffff80000080a2e4:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080a2e7:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:239
            break;
ffff80000080a2ea:	eb 0a                	jmp    ffff80000080a2f6 <load_pe+0x87>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:235 (discriminator 2)
    for(int i=0;i<MAX_PROC_OPENF;i++)
ffff80000080a2ec:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:235 (discriminator 1)
ffff80000080a2f0:	83 7d e8 1f          	cmp    DWORD PTR [rbp-0x18],0x1f
ffff80000080a2f4:	7e c8                	jle    ffff80000080a2be <load_pe+0x4f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:241
        }
    if(exefno==-1)return ERR;
ffff80000080a2f6:	83 7d ec ff          	cmp    DWORD PTR [rbp-0x14],0xffffffff
ffff80000080a2fa:	75 0a                	jne    ffff80000080a306 <load_pe+0x97>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:241 (discriminator 1)
ffff80000080a2fc:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080a301:	e9 a0 08 00 00       	jmp    ffff80000080aba6 <load_pe+0x937>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:245

    IMAGE_DOS_HEADER tdh;
    IMAGE_NT_HEADERS32 tnth;
    sys_read(exefno, &tdh, sizeof(tdh));
ffff80000080a306:	48 8d 8d 30 fe ff ff 	lea    rcx,[rbp-0x1d0]
ffff80000080a30d:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080a310:	ba 44 00 00 00       	mov    edx,0x44
ffff80000080a315:	48 89 ce             	mov    rsi,rcx
ffff80000080a318:	89 c7                	mov    edi,eax
ffff80000080a31a:	49 89 df             	mov    r15,rbx
ffff80000080a31d:	48 b8 a6 aa ee ff ff 	movabs rax,0xffffffffffeeaaa6
ffff80000080a324:	ff ff ff 
ffff80000080a327:	48 01 d8             	add    rax,rbx
ffff80000080a32a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:246
    sys_lseek(exefno,tdh.e_lfanew,SEEK_SET);
ffff80000080a32c:	48 8b 85 6c fe ff ff 	mov    rax,QWORD PTR [rbp-0x194]
ffff80000080a333:	48 89 c1             	mov    rcx,rax
ffff80000080a336:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080a339:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080a33e:	48 89 ce             	mov    rsi,rcx
ffff80000080a341:	89 c7                	mov    edi,eax
ffff80000080a343:	49 89 df             	mov    r15,rbx
ffff80000080a346:	48 b8 42 ac ee ff ff 	movabs rax,0xffffffffffeeac42
ffff80000080a34d:	ff ff ff 
ffff80000080a350:	48 01 d8             	add    rax,rbx
ffff80000080a353:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:247
    sys_read(exefno, &tnth, sizeof(tnth));
ffff80000080a355:	48 8d 8d 20 fd ff ff 	lea    rcx,[rbp-0x2e0]
ffff80000080a35c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080a35f:	ba 0c 01 00 00       	mov    edx,0x10c
ffff80000080a364:	48 89 ce             	mov    rsi,rcx
ffff80000080a367:	89 c7                	mov    edi,eax
ffff80000080a369:	49 89 df             	mov    r15,rbx
ffff80000080a36c:	48 b8 a6 aa ee ff ff 	movabs rax,0xffffffffffeeaaa6
ffff80000080a373:	ff ff ff 
ffff80000080a376:	48 01 d8             	add    rax,rbx
ffff80000080a379:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:250

    //是否需要移动base(先不检查)
    off_t nbase=tnth.OptionalHeader.ImageBase;
ffff80000080a37b:	48 8b 85 54 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2ac]
ffff80000080a382:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:251
    int pgn=tnth.OptionalHeader.SizeOfImage/PAGE_SIZE;
ffff80000080a386:	8b 85 74 fd ff ff    	mov    eax,DWORD PTR [rbp-0x28c]
ffff80000080a38c:	c1 e8 0c             	shr    eax,0xc
ffff80000080a38f:	89 85 7c ff ff ff    	mov    DWORD PTR [rbp-0x84],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:276
//        break;
//    }

    //proc->tss.eip=tnth.OptionalHeader.AddressOfEntryPoint+nbase;
    //存放文件头
    sys_lseek(exefno,0,SEEK_SET);
ffff80000080a395:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080a398:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080a39d:	be 00 00 00 00       	mov    esi,0x0
ffff80000080a3a2:	89 c7                	mov    edi,eax
ffff80000080a3a4:	49 89 df             	mov    r15,rbx
ffff80000080a3a7:	48 b8 42 ac ee ff ff 	movabs rax,0xffffffffffeeac42
ffff80000080a3ae:	ff ff ff 
ffff80000080a3b1:	48 01 d8             	add    rax,rbx
ffff80000080a3b4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:277
    sys_read(exefno, nbase, PAGE_SIZE);
ffff80000080a3b6:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
ffff80000080a3ba:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080a3bd:	ba 00 10 00 00       	mov    edx,0x1000
ffff80000080a3c2:	48 89 ce             	mov    rsi,rcx
ffff80000080a3c5:	89 c7                	mov    edi,eax
ffff80000080a3c7:	49 89 df             	mov    r15,rbx
ffff80000080a3ca:	48 b8 a6 aa ee ff ff 	movabs rax,0xffffffffffeeaaa6
ffff80000080a3d1:	ff ff ff 
ffff80000080a3d4:	48 01 d8             	add    rax,rbx
ffff80000080a3d7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:279
    //dos头
    PIMAGE_DOS_HEADER dosh=nbase;
ffff80000080a3d9:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080a3dd:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:280
    PIMAGE_NT_HEADERS64 nth=nbase+dosh->e_lfanew;
ffff80000080a3e4:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080a3eb:	48 8b 50 3c          	mov    rdx,QWORD PTR [rax+0x3c]
ffff80000080a3ef:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080a3f3:	48 01 d0             	add    rax,rdx
ffff80000080a3f6:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:281
    PIMAGE_FILE_HEADER fh=&nth->FileHeader;
ffff80000080a3fd:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080a404:	48 83 c0 04          	add    rax,0x4
ffff80000080a408:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:284
    //为新进程分配内存页
    //计算所需的页
    int prog_size=nth->OptionalHeader.SizeOfImage;
ffff80000080a40f:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080a416:	8b 40 50             	mov    eax,DWORD PTR [rax+0x50]
ffff80000080a419:	89 85 5c ff ff ff    	mov    DWORD PTR [rbp-0xa4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:285
    int page_count=prog_size/4096;
ffff80000080a41f:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
ffff80000080a425:	8d 90 ff 0f 00 00    	lea    edx,[rax+0xfff]
ffff80000080a42b:	85 c0                	test   eax,eax
ffff80000080a42d:	0f 48 c2             	cmovs  eax,edx
ffff80000080a430:	c1 f8 0c             	sar    eax,0xc
ffff80000080a433:	89 85 58 ff ff ff    	mov    DWORD PTR [rbp-0xa8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:287

    off_t shell_addr=nth->OptionalHeader.AddressOfEntryPoint+nbase;
ffff80000080a439:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080a440:	8b 40 28             	mov    eax,DWORD PTR [rax+0x28]
ffff80000080a443:	89 c2                	mov    edx,eax
ffff80000080a445:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080a449:	48 01 d0             	add    rax,rdx
ffff80000080a44c:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:288
    int page_index_item_count=page_count/1024+page_count%1024==0?0:1;
ffff80000080a453:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
ffff80000080a459:	8d 90 ff 03 00 00    	lea    edx,[rax+0x3ff]
ffff80000080a45f:	85 c0                	test   eax,eax
ffff80000080a461:	0f 48 c2             	cmovs  eax,edx
ffff80000080a464:	c1 f8 0a             	sar    eax,0xa
ffff80000080a467:	89 c1                	mov    ecx,eax
ffff80000080a469:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
ffff80000080a46f:	99                   	cdq    
ffff80000080a470:	c1 ea 16             	shr    edx,0x16
ffff80000080a473:	01 d0                	add    eax,edx
ffff80000080a475:	25 ff 03 00 00       	and    eax,0x3ff
ffff80000080a47a:	29 d0                	sub    eax,edx
ffff80000080a47c:	01 c8                	add    eax,ecx
ffff80000080a47e:	85 c0                	test   eax,eax
ffff80000080a480:	0f 95 c0             	setne  al
ffff80000080a483:	0f b6 c0             	movzx  eax,al
ffff80000080a486:	89 85 4c ff ff ff    	mov    DWORD PTR [rbp-0xb4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:289
    int start_pgind_item=shell_addr/PAGE_INDEX_SIZE;
ffff80000080a48c:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
ffff80000080a493:	48 c1 e8 15          	shr    rax,0x15
ffff80000080a497:	89 85 48 ff ff ff    	mov    DWORD PTR [rbp-0xb8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:292

    //sys_read sections
    PIMAGE_SECTION_HEADER psec=(u32)nth+sizeof(IMAGE_NT_HEADERS32);
ffff80000080a49d:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080a4a4:	89 c0                	mov    eax,eax
ffff80000080a4a6:	48 05 0c 01 00 00    	add    rax,0x10c
ffff80000080a4ac:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:294
    int data_start=sizeof(IMAGE_DOS_HEADER)+sizeof(IMAGE_NT_HEADERS32)+\
    nth->FileHeader.NumberOfSections*sizeof(IMAGE_SECTION_HEADER);
ffff80000080a4b0:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080a4b7:	0f b7 40 06          	movzx  eax,WORD PTR [rax+0x6]
ffff80000080a4bb:	0f b7 d0             	movzx  edx,ax
ffff80000080a4be:	89 d0                	mov    eax,edx
ffff80000080a4c0:	c1 e0 02             	shl    eax,0x2
ffff80000080a4c3:	01 d0                	add    eax,edx
ffff80000080a4c5:	c1 e0 03             	shl    eax,0x3
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:293
    int data_start=sizeof(IMAGE_DOS_HEADER)+sizeof(IMAGE_NT_HEADERS32)+\
ffff80000080a4c8:	05 50 01 00 00       	add    eax,0x150
ffff80000080a4cd:	89 85 44 ff ff ff    	mov    DWORD PTR [rbp-0xbc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:295
    int align=nth->OptionalHeader.FileAlignment;
ffff80000080a4d3:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080a4da:	8b 40 3c             	mov    eax,DWORD PTR [rax+0x3c]
ffff80000080a4dd:	89 85 40 ff ff ff    	mov    DWORD PTR [rbp-0xc0],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:296
    data_start=data_start%align?data_start-data_start%align+align:data_start;
ffff80000080a4e3:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
ffff80000080a4e9:	99                   	cdq    
ffff80000080a4ea:	f7 bd 40 ff ff ff    	idiv   DWORD PTR [rbp-0xc0]
ffff80000080a4f0:	89 d0                	mov    eax,edx
ffff80000080a4f2:	85 c0                	test   eax,eax
ffff80000080a4f4:	74 23                	je     ffff80000080a519 <load_pe+0x2aa>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:296 (discriminator 1)
ffff80000080a4f6:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
ffff80000080a4fc:	99                   	cdq    
ffff80000080a4fd:	f7 bd 40 ff ff ff    	idiv   DWORD PTR [rbp-0xc0]
ffff80000080a503:	89 d1                	mov    ecx,edx
ffff80000080a505:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
ffff80000080a50b:	29 c8                	sub    eax,ecx
ffff80000080a50d:	89 c2                	mov    edx,eax
ffff80000080a50f:	8b 85 40 ff ff ff    	mov    eax,DWORD PTR [rbp-0xc0]
ffff80000080a515:	01 d0                	add    eax,edx
ffff80000080a517:	eb 06                	jmp    ffff80000080a51f <load_pe+0x2b0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:296 (discriminator 2)
ffff80000080a519:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:296 (discriminator 4)
ffff80000080a51f:	89 85 44 ff ff ff    	mov    DWORD PTR [rbp-0xbc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:297 (discriminator 4)
    for(int i=0;i<nth->FileHeader.NumberOfSections;i++,psec++)
ffff80000080a525:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
ffff80000080a52c:	e9 85 00 00 00       	jmp    ffff80000080a5b6 <load_pe+0x347>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:299
    {
        int disca=psec->Characteristics&IMAGE_SCN_MEM_DISCARDABLE;
ffff80000080a531:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080a535:	8b 40 24             	mov    eax,DWORD PTR [rax+0x24]
ffff80000080a538:	25 00 00 00 02       	and    eax,0x2000000
ffff80000080a53d:	89 85 b0 fe ff ff    	mov    DWORD PTR [rbp-0x150],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:300
        if(disca)
ffff80000080a543:	83 bd b0 fe ff ff 00 	cmp    DWORD PTR [rbp-0x150],0x0
ffff80000080a54a:	75 60                	jne    ffff80000080a5ac <load_pe+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:303
            continue;
        //直接读，缺页内核解决
        sys_lseek(exefno,psec->PointerToRawData,SEEK_SET);
ffff80000080a54c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080a550:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
ffff80000080a553:	89 c1                	mov    ecx,eax
ffff80000080a555:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080a558:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080a55d:	48 89 ce             	mov    rsi,rcx
ffff80000080a560:	89 c7                	mov    edi,eax
ffff80000080a562:	49 89 df             	mov    r15,rbx
ffff80000080a565:	48 b8 42 ac ee ff ff 	movabs rax,0xffffffffffeeac42
ffff80000080a56c:	ff ff ff 
ffff80000080a56f:	48 01 d8             	add    rax,rbx
ffff80000080a572:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:304
        sys_read(exefno, psec->VirtualAddress + nbase,  psec->SizeOfRawData);
ffff80000080a574:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080a578:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff80000080a57b:	89 c2                	mov    edx,eax
ffff80000080a57d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080a581:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff80000080a584:	89 c1                	mov    ecx,eax
ffff80000080a586:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080a58a:	48 01 c8             	add    rax,rcx
ffff80000080a58d:	48 89 c1             	mov    rcx,rax
ffff80000080a590:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080a593:	48 89 ce             	mov    rsi,rcx
ffff80000080a596:	89 c7                	mov    edi,eax
ffff80000080a598:	49 89 df             	mov    r15,rbx
ffff80000080a59b:	48 b8 a6 aa ee ff ff 	movabs rax,0xffffffffffeeaaa6
ffff80000080a5a2:	ff ff ff 
ffff80000080a5a5:	48 01 d8             	add    rax,rbx
ffff80000080a5a8:	ff d0                	call   rax
ffff80000080a5aa:	eb 01                	jmp    ffff80000080a5ad <load_pe+0x33e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:301
            continue;
ffff80000080a5ac:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:297 (discriminator 2)
    for(int i=0;i<nth->FileHeader.NumberOfSections;i++,psec++)
ffff80000080a5ad:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
ffff80000080a5b1:	48 83 45 e0 28       	add    QWORD PTR [rbp-0x20],0x28
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:297 (discriminator 1)
ffff80000080a5b6:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080a5bd:	0f b7 40 06          	movzx  eax,WORD PTR [rax+0x6]
ffff80000080a5c1:	0f b7 c0             	movzx  eax,ax
ffff80000080a5c4:	39 45 dc             	cmp    DWORD PTR [rbp-0x24],eax
ffff80000080a5c7:	0f 8c 64 ff ff ff    	jl     ffff80000080a531 <load_pe+0x2c2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:309

    }

    //通过导入表加载需要的dll
    PIMAGE_DATA_DIRECTORY impd=&nth->OptionalHeader.DataDirectory[1];
ffff80000080a5cd:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080a5d4:	48 05 90 00 00 00    	add    rax,0x90
ffff80000080a5da:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:310
    if(impd->Size>0)
ffff80000080a5e1:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff80000080a5e8:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff80000080a5eb:	85 c0                	test   eax,eax
ffff80000080a5ed:	0f 84 bc 02 00 00    	je     ffff80000080a8af <load_pe+0x640>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:312
    {
        int tmpi=impd->VirtualAddress+nbase;
ffff80000080a5f3:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff80000080a5fa:	8b 10                	mov    edx,DWORD PTR [rax]
ffff80000080a5fc:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080a600:	01 d0                	add    eax,edx
ffff80000080a602:	89 85 34 ff ff ff    	mov    DWORD PTR [rbp-0xcc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:313
        PIMAGE_IMPORT_DESCRIPTOR impdes=tmpi;
ffff80000080a608:	8b 85 34 ff ff ff    	mov    eax,DWORD PTR [rbp-0xcc]
ffff80000080a60e:	48 98                	cdqe   
ffff80000080a610:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:315
        int dllp;
        while (impdes->Characteristics)
ffff80000080a614:	e9 88 02 00 00       	jmp    ffff80000080a8a1 <load_pe+0x632>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:318
        {
            //加载dll
            char *dllname=impdes->Name+nbase;
ffff80000080a619:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080a61d:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff80000080a620:	89 c2                	mov    edx,eax
ffff80000080a622:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080a626:	48 01 d0             	add    rax,rdx
ffff80000080a629:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:321
            //此处应有加载dll代码
            int dlli;
            if(strcmp(dllname,"sys.dll")==0)//加载系统dll的部分由内核已经完成
ffff80000080a630:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
ffff80000080a637:	48 ba eb d3 ff ff ff 	movabs rdx,0xffffffffffffd3eb
ffff80000080a63e:	ff ff ff 
ffff80000080a641:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff80000080a645:	48 89 d6             	mov    rsi,rdx
ffff80000080a648:	48 89 c7             	mov    rdi,rax
ffff80000080a64b:	49 89 df             	mov    r15,rbx
ffff80000080a64e:	48 b8 54 20 ef ff ff 	movabs rax,0xffffffffffef2054
ffff80000080a655:	ff ff ff 
ffff80000080a658:	48 01 d8             	add    rax,rbx
ffff80000080a65b:	ff d0                	call   rax
ffff80000080a65d:	85 c0                	test   eax,eax
ffff80000080a65f:	75 09                	jne    ffff80000080a66a <load_pe+0x3fb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:323
            {
                dllp=0x1c00000;
ffff80000080a661:	c7 45 cc 00 00 c0 01 	mov    DWORD PTR [rbp-0x34],0x1c00000
ffff80000080a668:	eb 3d                	jmp    ffff80000080a6a7 <load_pe+0x438>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:326
            }else{
                //load_pe要记录module的加载
                dlli= load_pe(proc);
ffff80000080a66a:	48 8b 85 e8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x318]
ffff80000080a671:	48 89 c7             	mov    rdi,rax
ffff80000080a674:	48 b8 3f 6d ee ff ff 	movabs rax,0xffffffffffee6d3f
ffff80000080a67b:	ff ff ff 
ffff80000080a67e:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080a682:	ff d0                	call   rax
ffff80000080a684:	89 85 24 ff ff ff    	mov    DWORD PTR [rbp-0xdc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:329
                //dlli=load_library(dllname);
                //这个是线性地址
                dllp=get_module_addr(dlli);
ffff80000080a68a:	8b 85 24 ff ff ff    	mov    eax,DWORD PTR [rbp-0xdc]
ffff80000080a690:	89 c7                	mov    edi,eax
ffff80000080a692:	49 89 df             	mov    r15,rbx
ffff80000080a695:	48 b8 82 76 ee ff ff 	movabs rax,0xffffffffffee7682
ffff80000080a69c:	ff ff ff 
ffff80000080a69f:	48 01 d8             	add    rax,rbx
ffff80000080a6a2:	ff d0                	call   rax
ffff80000080a6a4:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:332
            }
            //从线性地址查页表找到物理地址
            PIMAGE_DOS_HEADER dlldos=dllp;
ffff80000080a6a7:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080a6aa:	48 98                	cdqe   
ffff80000080a6ac:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:333
            PIMAGE_NT_HEADERS32 dllnth=dllp+dlldos->e_lfanew;
ffff80000080a6b3:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080a6b6:	48 63 d0             	movsxd rdx,eax
ffff80000080a6b9:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
ffff80000080a6c0:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff80000080a6c4:	48 01 d0             	add    rax,rdx
ffff80000080a6c7:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:334
            PIMAGE_EXPORT_DIRECTORY dllexp=(dllnth->OptionalHeader.DataDirectory[0].VirtualAddress+dllp);
ffff80000080a6ce:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff80000080a6d5:	8b 90 8c 00 00 00    	mov    edx,DWORD PTR [rax+0x8c]
ffff80000080a6db:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080a6de:	01 d0                	add    eax,edx
ffff80000080a6e0:	89 c0                	mov    eax,eax
ffff80000080a6e2:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:335
            int funcn=dllexp->NumberOfNames;
ffff80000080a6e9:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff80000080a6f0:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff80000080a6f3:	89 85 04 ff ff ff    	mov    DWORD PTR [rbp-0xfc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:336
            char **fnames=dllexp->AddressOfNames+dllp;
ffff80000080a6f9:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff80000080a700:	8b 50 20             	mov    edx,DWORD PTR [rax+0x20]
ffff80000080a703:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080a706:	01 d0                	add    eax,edx
ffff80000080a708:	89 c0                	mov    eax,eax
ffff80000080a70a:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:337
            int *funcaddrs=dllexp->AddressOfFunctions+dllp;
ffff80000080a711:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff80000080a718:	8b 50 1c             	mov    edx,DWORD PTR [rax+0x1c]
ffff80000080a71b:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080a71e:	01 d0                	add    eax,edx
ffff80000080a720:	89 c0                	mov    eax,eax
ffff80000080a722:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:338
            short *funcords=dllexp->AddressOfNameOrdinals+dllp;
ffff80000080a729:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff80000080a730:	8b 50 24             	mov    edx,DWORD PTR [rax+0x24]
ffff80000080a733:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080a736:	01 d0                	add    eax,edx
ffff80000080a738:	89 c0                	mov    eax,eax
ffff80000080a73a:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:340
            //寻找nameordinal的base（最小值），里面的数据加上base才是真正的序号
            unsigned int ord_base=dllexp->Base;
ffff80000080a741:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff80000080a748:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff80000080a74b:	89 85 e4 fe ff ff    	mov    DWORD PTR [rbp-0x11c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:342
            //开始将导入表IAT的内容更新为函数地址
            unsigned int *iataddrs=impdes->FirstThunk+nbase;//IAT和INT内容一样，只用IAT
ffff80000080a751:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080a755:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff80000080a758:	89 c2                	mov    edx,eax
ffff80000080a75a:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080a75e:	48 01 d0             	add    rax,rdx
ffff80000080a761:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:343
            char **siataddrs=impdes->FirstThunk+nbase;
ffff80000080a765:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080a769:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff80000080a76c:	89 c2                	mov    edx,eax
ffff80000080a76e:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080a772:	48 01 d0             	add    rax,rdx
ffff80000080a775:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:344
            while (*iataddrs)
ffff80000080a779:	e9 10 01 00 00       	jmp    ffff80000080a88e <load_pe+0x61f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:347
            {
                //判断是序号导入还是名称导入
                if(((unsigned)*iataddrs)&0x80000000)
ffff80000080a77e:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080a782:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080a784:	85 c0                	test   eax,eax
ffff80000080a786:	79 43                	jns    ffff80000080a7cb <load_pe+0x55c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:350
                {
                    //序号导入
                    unsigned int ord=((*iataddrs)&0x7fffffff)-ord_base;
ffff80000080a788:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080a78c:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080a78e:	25 ff ff ff 7f       	and    eax,0x7fffffff
ffff80000080a793:	2b 85 e4 fe ff ff    	sub    eax,DWORD PTR [rbp-0x11c]
ffff80000080a799:	89 85 d0 fe ff ff    	mov    DWORD PTR [rbp-0x130],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:351
                    *iataddrs=funcaddrs[ord]+dllp;
ffff80000080a79f:	8b 85 d0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x130]
ffff80000080a7a5:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff80000080a7ac:	00 
ffff80000080a7ad:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff80000080a7b4:	48 01 d0             	add    rax,rdx
ffff80000080a7b7:	8b 10                	mov    edx,DWORD PTR [rax]
ffff80000080a7b9:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080a7bc:	01 d0                	add    eax,edx
ffff80000080a7be:	89 c2                	mov    edx,eax
ffff80000080a7c0:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080a7c4:	89 10                	mov    DWORD PTR [rax],edx
ffff80000080a7c6:	e9 b9 00 00 00       	jmp    ffff80000080a884 <load_pe+0x615>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:355
                }else
                {
                    //名称导入
                    char *import_by_name_p=*iataddrs;//指向IMPORT_BY_NAME
ffff80000080a7cb:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080a7cf:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080a7d1:	89 c0                	mov    eax,eax
ffff80000080a7d3:	48 89 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:356
                    import_by_name_p+=2;//跳过开头两字节序号
ffff80000080a7da:	48 83 85 d8 fe ff ff 	add    QWORD PTR [rbp-0x128],0x2
ffff80000080a7e1:	02 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:357
                    int i=0;
ffff80000080a7e2:	c7 45 b4 00 00 00 00 	mov    DWORD PTR [rbp-0x4c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:358
                    for(;i<funcn;i++)
ffff80000080a7e9:	e9 87 00 00 00       	jmp    ffff80000080a875 <load_pe+0x606>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:360
                    {
                        if(strcmp(import_by_name_p,fnames[i])==0)
ffff80000080a7ee:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffff80000080a7f1:	48 98                	cdqe   
ffff80000080a7f3:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080a7fa:	00 
ffff80000080a7fb:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff80000080a802:	48 01 d0             	add    rax,rdx
ffff80000080a805:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080a808:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
ffff80000080a80f:	48 89 d6             	mov    rsi,rdx
ffff80000080a812:	48 89 c7             	mov    rdi,rax
ffff80000080a815:	49 89 df             	mov    r15,rbx
ffff80000080a818:	48 b8 54 20 ef ff ff 	movabs rax,0xffffffffffef2054
ffff80000080a81f:	ff ff ff 
ffff80000080a822:	48 01 d8             	add    rax,rbx
ffff80000080a825:	ff d0                	call   rax
ffff80000080a827:	85 c0                	test   eax,eax
ffff80000080a829:	75 46                	jne    ffff80000080a871 <load_pe+0x602>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:362
                        {
                            int ordi=funcords[i];
ffff80000080a82b:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffff80000080a82e:	48 98                	cdqe   
ffff80000080a830:	48 8d 14 00          	lea    rdx,[rax+rax*1]
ffff80000080a834:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
ffff80000080a83b:	48 01 d0             	add    rax,rdx
ffff80000080a83e:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff80000080a841:	98                   	cwde   
ffff80000080a842:	89 85 d4 fe ff ff    	mov    DWORD PTR [rbp-0x12c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:363
                            *iataddrs=funcaddrs[ordi]+dllp;//导入表中的IAT内容修改成地址
ffff80000080a848:	8b 85 d4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x12c]
ffff80000080a84e:	48 98                	cdqe   
ffff80000080a850:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff80000080a857:	00 
ffff80000080a858:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff80000080a85f:	48 01 d0             	add    rax,rdx
ffff80000080a862:	8b 10                	mov    edx,DWORD PTR [rax]
ffff80000080a864:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080a867:	01 d0                	add    eax,edx
ffff80000080a869:	89 c2                	mov    edx,eax
ffff80000080a86b:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080a86f:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:358
                    for(;i<funcn;i++)
ffff80000080a871:	83 45 b4 01          	add    DWORD PTR [rbp-0x4c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:358 (discriminator 1)
ffff80000080a875:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffff80000080a878:	3b 85 04 ff ff ff    	cmp    eax,DWORD PTR [rbp-0xfc]
ffff80000080a87e:	0f 8c 6a ff ff ff    	jl     ffff80000080a7ee <load_pe+0x57f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:367
                        }
                    }
                }
                iataddrs++;
ffff80000080a884:	48 83 45 c0 04       	add    QWORD PTR [rbp-0x40],0x4
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:368
                siataddrs++;
ffff80000080a889:	48 83 45 b8 08       	add    QWORD PTR [rbp-0x48],0x8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:344
            while (*iataddrs)
ffff80000080a88e:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080a892:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080a894:	85 c0                	test   eax,eax
ffff80000080a896:	0f 85 e2 fe ff ff    	jne    ffff80000080a77e <load_pe+0x50f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:370
            }
            impdes++;
ffff80000080a89c:	48 83 45 d0 14       	add    QWORD PTR [rbp-0x30],0x14
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:315
        while (impdes->Characteristics)
ffff80000080a8a1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080a8a5:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080a8a7:	85 c0                	test   eax,eax
ffff80000080a8a9:	0f 85 6a fd ff ff    	jne    ffff80000080a619 <load_pe+0x3aa>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:377
        }
    }


    //开始重定位
    PIMAGE_BASE_RELOCATION relp=0;
ffff80000080a8af:	48 c7 45 a8 00 00 00 	mov    QWORD PTR [rbp-0x58],0x0
ffff80000080a8b6:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:378
    if(nth->OptionalHeader.DataDirectory[5].Size>0)
ffff80000080a8b7:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080a8be:	8b 80 b4 00 00 00    	mov    eax,DWORD PTR [rax+0xb4]
ffff80000080a8c4:	85 c0                	test   eax,eax
ffff80000080a8c6:	0f 84 ec 00 00 00    	je     ffff80000080a9b8 <load_pe+0x749>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:380
    {
        relp=(u32)(nth->OptionalHeader.DataDirectory[5].VirtualAddress\
ffff80000080a8cc:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080a8d3:	8b 90 b0 00 00 00    	mov    edx,DWORD PTR [rax+0xb0]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:381
                                +(u32)nbase);
ffff80000080a8d9:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:380
        relp=(u32)(nth->OptionalHeader.DataDirectory[5].VirtualAddress\
ffff80000080a8dd:	01 d0                	add    eax,edx
ffff80000080a8df:	89 c0                	mov    eax,eax
ffff80000080a8e1:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:382
        u16 *reloc=relp+sizeof(IMAGE_BASE_RELOCATION);
ffff80000080a8e5:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080a8e9:	48 83 c0 40          	add    rax,0x40
ffff80000080a8ed:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:383
        u16 *rtype=reloc+1;
ffff80000080a8f1:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080a8f5:	48 83 c0 02          	add    rax,0x2
ffff80000080a8f9:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:384
        int old_base=nth->OptionalHeader.ImageBase;
ffff80000080a8fd:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080a904:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff80000080a908:	89 85 cc fe ff ff    	mov    DWORD PTR [rbp-0x134],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:385
        while(relp->VirtualAddress){
ffff80000080a90e:	e9 97 00 00 00       	jmp    ffff80000080a9aa <load_pe+0x73b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:386
            int pgva=relp->VirtualAddress+nbase;
ffff80000080a913:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080a917:	8b 10                	mov    edx,DWORD PTR [rax]
ffff80000080a919:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080a91d:	01 d0                	add    eax,edx
ffff80000080a91f:	89 85 c8 fe ff ff    	mov    DWORD PTR [rbp-0x138],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:387
            for(int i=0;i<relp->SizeOfBlock/4;i++)
ffff80000080a925:	c7 45 94 00 00 00 00 	mov    DWORD PTR [rbp-0x6c],0x0
ffff80000080a92c:	eb 5a                	jmp    ffff80000080a988 <load_pe+0x719>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:389
            {
                if(*rtype==IMAGE_REL_BASED_ABSOLUTE)continue;//不用重定位
ffff80000080a92e:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080a932:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff80000080a935:	66 85 c0             	test   ax,ax
ffff80000080a938:	74 49                	je     ffff80000080a983 <load_pe+0x714>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:390
                int *at=*reloc+pgva;//要重定位的数据的地址
ffff80000080a93a:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080a93e:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff80000080a941:	0f b7 d0             	movzx  edx,ax
ffff80000080a944:	8b 85 c8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x138]
ffff80000080a94a:	01 d0                	add    eax,edx
ffff80000080a94c:	48 98                	cdqe   
ffff80000080a94e:	48 89 85 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:391
                *at=*at-old_base+nbase;
ffff80000080a955:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
ffff80000080a95c:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080a95e:	2b 85 cc fe ff ff    	sub    eax,DWORD PTR [rbp-0x134]
ffff80000080a964:	89 c2                	mov    edx,eax
ffff80000080a966:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080a96a:	01 d0                	add    eax,edx
ffff80000080a96c:	89 c2                	mov    edx,eax
ffff80000080a96e:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
ffff80000080a975:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:393
                //下一个
                reloc+=2;
ffff80000080a977:	48 83 45 a0 04       	add    QWORD PTR [rbp-0x60],0x4
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:394
                rtype+=2;
ffff80000080a97c:	48 83 45 98 04       	add    QWORD PTR [rbp-0x68],0x4
ffff80000080a981:	eb 01                	jmp    ffff80000080a984 <load_pe+0x715>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:389
                if(*rtype==IMAGE_REL_BASED_ABSOLUTE)continue;//不用重定位
ffff80000080a983:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:387 (discriminator 2)
            for(int i=0;i<relp->SizeOfBlock/4;i++)
ffff80000080a984:	83 45 94 01          	add    DWORD PTR [rbp-0x6c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:387 (discriminator 1)
ffff80000080a988:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080a98c:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff80000080a98f:	c1 e8 02             	shr    eax,0x2
ffff80000080a992:	89 c2                	mov    edx,eax
ffff80000080a994:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
ffff80000080a997:	39 c2                	cmp    edx,eax
ffff80000080a999:	77 93                	ja     ffff80000080a92e <load_pe+0x6bf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:396
            }
            relp=(int)relp+0x1000;
ffff80000080a99b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080a99f:	05 00 10 00 00       	add    eax,0x1000
ffff80000080a9a4:	48 98                	cdqe   
ffff80000080a9a6:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:385
        while(relp->VirtualAddress){
ffff80000080a9aa:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080a9ae:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080a9b0:	85 c0                	test   eax,eax
ffff80000080a9b2:	0f 85 5b ff ff ff    	jne    ffff80000080a913 <load_pe+0x6a4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:402
        }
    }
    extern struct process task[];
    extern int cur_proc;
    //初始化堆
    chunk_header hdrtmp={
ffff80000080a9b8:	c7 85 00 fd ff ff 00 	mov    DWORD PTR [rbp-0x300],0x0
ffff80000080a9bf:	00 00 00 
ffff80000080a9c2:	c7 85 04 fd ff ff 00 	mov    DWORD PTR [rbp-0x2fc],0x0
ffff80000080a9c9:	00 00 00 
ffff80000080a9cc:	48 c7 85 08 fd ff ff 	mov    QWORD PTR [rbp-0x2f8],0x0
ffff80000080a9d3:	00 00 00 00 
ffff80000080a9d7:	48 c7 85 10 fd ff ff 	mov    QWORD PTR [rbp-0x2f0],0x0
ffff80000080a9de:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:409
            .next=NULL,
            .pgn=0,
            .prev=NULL
    };//空堆
    //拷贝触发页中断然后分配
    memcpy((chunk_header*)HEAP_BASE,&hdrtmp,sizeof(hdrtmp));
ffff80000080a9e2:	48 8d 85 00 fd ff ff 	lea    rax,[rbp-0x300]
ffff80000080a9e9:	ba 18 00 00 00       	mov    edx,0x18
ffff80000080a9ee:	48 89 c6             	mov    rsi,rax
ffff80000080a9f1:	bf 00 00 00 01       	mov    edi,0x1000000
ffff80000080a9f6:	49 89 df             	mov    r15,rbx
ffff80000080a9f9:	48 b8 02 1d ef ff ff 	movabs rax,0xffffffffffef1d02
ffff80000080aa00:	ff ff ff 
ffff80000080aa03:	48 01 d8             	add    rax,rbx
ffff80000080aa06:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:410
    task[cur_proc].mem_struct.heap_base=HEAP_BASE;
ffff80000080aa08:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff80000080aa0f:	ff ff ff 
ffff80000080aa12:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080aa16:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080aa18:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff80000080aa1f:	ff ff ff 
ffff80000080aa22:	48 8b 0c 13          	mov    rcx,QWORD PTR [rbx+rdx*1]
ffff80000080aa26:	48 63 d0             	movsxd rdx,eax
ffff80000080aa29:	48 89 d0             	mov    rax,rdx
ffff80000080aa2c:	48 01 c0             	add    rax,rax
ffff80000080aa2f:	48 01 d0             	add    rax,rdx
ffff80000080aa32:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080aa39:	00 
ffff80000080aa3a:	48 01 d0             	add    rax,rdx
ffff80000080aa3d:	48 c1 e0 05          	shl    rax,0x5
ffff80000080aa41:	48 01 c8             	add    rax,rcx
ffff80000080aa44:	48 83 c0 20          	add    rax,0x20
ffff80000080aa48:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x1000000
ffff80000080aa4f:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:411
    task[cur_proc].mem_struct.heap_top=HEAP_BASE+CHUNK_SIZE;
ffff80000080aa50:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff80000080aa57:	ff ff ff 
ffff80000080aa5a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080aa5e:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080aa60:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff80000080aa67:	ff ff ff 
ffff80000080aa6a:	48 8b 0c 13          	mov    rcx,QWORD PTR [rbx+rdx*1]
ffff80000080aa6e:	48 63 d0             	movsxd rdx,eax
ffff80000080aa71:	48 89 d0             	mov    rax,rdx
ffff80000080aa74:	48 01 c0             	add    rax,rax
ffff80000080aa77:	48 01 d0             	add    rax,rdx
ffff80000080aa7a:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080aa81:	00 
ffff80000080aa82:	48 01 d0             	add    rax,rdx
ffff80000080aa85:	48 c1 e0 05          	shl    rax,0x5
ffff80000080aa89:	48 01 c8             	add    rax,rcx
ffff80000080aa8c:	48 83 c0 20          	add    rax,0x20
ffff80000080aa90:	48 c7 40 10 00 10 00 	mov    QWORD PTR [rax+0x10],0x1001000
ffff80000080aa97:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:413
    //设置栈
    task[cur_proc].mem_struct.stack_top=STACK_TOP;
ffff80000080aa98:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff80000080aa9f:	ff ff ff 
ffff80000080aaa2:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080aaa6:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080aaa8:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff80000080aaaf:	ff ff ff 
ffff80000080aab2:	48 8b 0c 13          	mov    rcx,QWORD PTR [rbx+rdx*1]
ffff80000080aab6:	48 63 d0             	movsxd rdx,eax
ffff80000080aab9:	48 89 d0             	mov    rax,rdx
ffff80000080aabc:	48 01 c0             	add    rax,rax
ffff80000080aabf:	48 01 d0             	add    rax,rdx
ffff80000080aac2:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080aac9:	00 
ffff80000080aaca:	48 01 d0             	add    rax,rdx
ffff80000080aacd:	48 c1 e0 05          	shl    rax,0x5
ffff80000080aad1:	48 01 c8             	add    rax,rcx
ffff80000080aad4:	48 83 c0 30          	add    rax,0x30
ffff80000080aad8:	48 be 00 f0 ff ff ff 	movabs rsi,0x7ffffffff000
ffff80000080aadf:	7f 00 00 
ffff80000080aae2:	48 89 70 10          	mov    QWORD PTR [rax+0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:420


    //完毕,调用入口函数
    //重定位完毕，准备调用DllMain
    typedef int (*Main)(int,void*);
    Main main=shell_addr;
ffff80000080aae6:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
ffff80000080aaed:	48 89 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:421
    int ecode=main(0,NULL);
ffff80000080aaf4:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
ffff80000080aafb:	be 00 00 00 00       	mov    esi,0x0
ffff80000080ab00:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080ab05:	ff d0                	call   rax
ffff80000080ab07:	89 85 b4 fe ff ff    	mov    DWORD PTR [rbp-0x14c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:422
    do_syscall(SYSCALL_EXIT,ecode,0,0,0,0,0);
ffff80000080ab0d:	8b 85 b4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x14c]
ffff80000080ab13:	48 98                	cdqe   
ffff80000080ab15:	48 c7 85 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],0x14
ffff80000080ab1c:	14 00 00 00 
ffff80000080ab20:	48 89 85 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rax
ffff80000080ab27:	48 c7 85 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],0x0
ffff80000080ab2e:	00 00 00 00 
ffff80000080ab32:	48 c7 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],0x0
ffff80000080ab39:	00 00 00 00 
ffff80000080ab3d:	48 c7 85 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],0x0
ffff80000080ab44:	00 00 00 00 
ffff80000080ab48:	48 c7 85 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],0x0
ffff80000080ab4f:	00 00 00 00 
ffff80000080ab53:	48 c7 85 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],0x0
ffff80000080ab5a:	00 00 00 00 
do_syscall():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:63
        __asm__ volatile(".byte 0x48\n"
ffff80000080ab5e:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
ffff80000080ab65:	48 8b bd a0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x160]
ffff80000080ab6c:	48 8b b5 98 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x168]
ffff80000080ab73:	48 8b 95 90 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x170]
ffff80000080ab7a:	48 8b 8d 88 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x178]
ffff80000080ab81:	4c 8b 85 80 fe ff ff 	mov    r8,QWORD PTR [rbp-0x180]
ffff80000080ab88:	4c 8b 8d 78 fe ff ff 	mov    r9,QWORD PTR [rbp-0x188]
ffff80000080ab8f:	48 0f 05             	rex.W syscall 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:65
        long ret=0;
ffff80000080ab92:	48 c7 85 f8 fc ff ff 	mov    QWORD PTR [rbp-0x308],0x0
ffff80000080ab99:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:66
        __asm__ volatile("mov %%rax,%0"::"m"(ret));
ffff80000080ab9d:	48 89 85 f8 fc ff ff 	mov    QWORD PTR [rbp-0x308],rax
load_pe():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:425 (discriminator 1)
    //
    //不应该执行到这
    while(1);
ffff80000080aba4:	eb fe                	jmp    ffff80000080aba4 <load_pe+0x935>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:427 (discriminator 2)
    return task[cur_proc].exit_code;
}
ffff80000080aba6:	48 81 c4 10 03 00 00 	add    rsp,0x310
ffff80000080abad:	5b                   	pop    rbx
ffff80000080abae:	41 5f                	pop    r15
ffff80000080abb0:	5d                   	pop    rbp
ffff80000080abb1:	c3                   	ret    

ffff80000080abb2 <get_module_addr>:
get_module_addr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:430

int get_module_addr(int mi)
{
ffff80000080abb2:	f3 0f 1e fa          	endbr64 
ffff80000080abb6:	55                   	push   rbp
ffff80000080abb7:	48 89 e5             	mov    rbp,rsp
ffff80000080abba:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080abba <get_module_addr+0x8>
ffff80000080abc1:	49 bb 76 89 11 00 00 	movabs r11,0x118976
ffff80000080abc8:	00 00 00 
ffff80000080abcb:	4c 01 d8             	add    rax,r11
ffff80000080abce:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:431
    return modules[mi].base;
ffff80000080abd1:	48 ba a0 fd ff ff ff 	movabs rdx,0xfffffffffffffda0
ffff80000080abd8:	ff ff ff 
ffff80000080abdb:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080abdf:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000080abe2:	48 63 d0             	movsxd rdx,eax
ffff80000080abe5:	48 89 d0             	mov    rax,rdx
ffff80000080abe8:	48 c1 e0 03          	shl    rax,0x3
ffff80000080abec:	48 29 d0             	sub    rax,rdx
ffff80000080abef:	48 c1 e0 03          	shl    rax,0x3
ffff80000080abf3:	48 01 c8             	add    rax,rcx
ffff80000080abf6:	48 8b 00             	mov    rax,QWORD PTR [rax]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:432
}
ffff80000080abf9:	5d                   	pop    rbp
ffff80000080abfa:	c3                   	ret    

ffff80000080abfb <dispose_library>:
dispose_library():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:434
int dispose_library(int dlln)
{
ffff80000080abfb:	f3 0f 1e fa          	endbr64 
ffff80000080abff:	55                   	push   rbp
ffff80000080ac00:	48 89 e5             	mov    rbp,rsp
ffff80000080ac03:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080ac03 <dispose_library+0x8>
ffff80000080ac0a:	49 bb 2d 89 11 00 00 	movabs r11,0x11892d
ffff80000080ac11:	00 00 00 
ffff80000080ac14:	4c 01 d8             	add    rax,r11
ffff80000080ac17:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:435
    if(dlln<0||dlln>=MAX_DLLS)return -1;
ffff80000080ac1a:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
ffff80000080ac1e:	78 09                	js     ffff80000080ac29 <dispose_library+0x2e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:435 (discriminator 2)
ffff80000080ac20:	81 7d fc ff 00 00 00 	cmp    DWORD PTR [rbp-0x4],0xff
ffff80000080ac27:	7e 07                	jle    ffff80000080ac30 <dispose_library+0x35>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:435 (discriminator 3)
ffff80000080ac29:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080ac2e:	eb 2c                	jmp    ffff80000080ac5c <dispose_library+0x61>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:440
    //空间不够，释放之前申请的
    // for(int j=0;j<dlls[dlln].page_used;j++)
    //     dispose_page(get_phyaddr(dlls[dlln].page_num[j]));
    //释放dll
    dlls[dlln].flag=DLL_STAT_EMPTY;
ffff80000080ac30:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff80000080ac37:	ff ff ff 
ffff80000080ac3a:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080ac3e:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000080ac41:	48 98                	cdqe   
ffff80000080ac43:	48 69 c0 2c 01 00 00 	imul   rax,rax,0x12c
ffff80000080ac4a:	48 01 d0             	add    rax,rdx
ffff80000080ac4d:	48 83 c0 08          	add    rax,0x8
ffff80000080ac51:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:441
    return 0;
ffff80000080ac57:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:442
}
ffff80000080ac5c:	5d                   	pop    rbp
ffff80000080ac5d:	c3                   	ret    

ffff80000080ac5e <sys_insmod>:
sys_insmod():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:490

    return 0;
} */

int sys_insmod(char *path)
{
ffff80000080ac5e:	f3 0f 1e fa          	endbr64 
ffff80000080ac62:	55                   	push   rbp
ffff80000080ac63:	48 89 e5             	mov    rbp,rsp
ffff80000080ac66:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080ac66 <sys_insmod+0x8>
ffff80000080ac6d:	49 bb ca 88 11 00 00 	movabs r11,0x1188ca
ffff80000080ac74:	00 00 00 
ffff80000080ac77:	4c 01 d8             	add    rax,r11
ffff80000080ac7a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:492

}
ffff80000080ac7e:	90                   	nop
ffff80000080ac7f:	5d                   	pop    rbp
ffff80000080ac80:	c3                   	ret    

ffff80000080ac81 <sys_rmmod>:
sys_rmmod():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:494
int sys_rmmod(char *name)
{
ffff80000080ac81:	f3 0f 1e fa          	endbr64 
ffff80000080ac85:	55                   	push   rbp
ffff80000080ac86:	48 89 e5             	mov    rbp,rsp
ffff80000080ac89:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080ac89 <sys_rmmod+0x8>
ffff80000080ac90:	49 bb a7 88 11 00 00 	movabs r11,0x1188a7
ffff80000080ac97:	00 00 00 
ffff80000080ac9a:	4c 01 d8             	add    rax,r11
ffff80000080ac9d:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:496

}
ffff80000080aca1:	90                   	nop
ffff80000080aca2:	5d                   	pop    rbp
ffff80000080aca3:	c3                   	ret    

ffff80000080aca4 <new_load_elf>:
new_load_elf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:497
off_t new_load_elf(struct file* elf){
ffff80000080aca4:	f3 0f 1e fa          	endbr64 
ffff80000080aca8:	55                   	push   rbp
ffff80000080aca9:	48 89 e5             	mov    rbp,rsp
ffff80000080acac:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080acac <new_load_elf+0x8>
ffff80000080acb3:	49 bb 84 88 11 00 00 	movabs r11,0x118884
ffff80000080acba:	00 00 00 
ffff80000080acbd:	4c 01 d8             	add    rax,r11
ffff80000080acc0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:503
    //读取文件头
    //if ET_DYN
    //load dl
    //else
    // load elf
}
ffff80000080acc4:	90                   	nop
ffff80000080acc5:	5d                   	pop    rbp
ffff80000080acc6:	c3                   	ret    

ffff80000080acc7 <load_elf>:
load_elf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:505
//切换进程前,在execve系统调用中
off_t load_elf(int fildes) {
ffff80000080acc7:	f3 0f 1e fa          	endbr64 
ffff80000080accb:	55                   	push   rbp
ffff80000080accc:	48 89 e5             	mov    rbp,rsp
ffff80000080accf:	41 57                	push   r15
ffff80000080acd1:	53                   	push   rbx
ffff80000080acd2:	48 81 ec 20 01 00 00 	sub    rsp,0x120
ffff80000080acd9:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080acd9 <load_elf+0x12>
ffff80000080ace0:	49 bb 57 88 11 00 00 	movabs r11,0x118857
ffff80000080ace7:	00 00 00 
ffff80000080acea:	4c 01 db             	add    rbx,r11
ffff80000080aced:	89 bd dc fe ff ff    	mov    DWORD PTR [rbp-0x124],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:507
    // 读取文件头
    struct file* elf=current->openf[fildes];
ffff80000080acf3:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080acfa:	ff ff ff 
ffff80000080acfd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ad01:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ad04:	8b 95 dc fe ff ff    	mov    edx,DWORD PTR [rbp-0x124]
ffff80000080ad0a:	48 63 d2             	movsxd rdx,edx
ffff80000080ad0d:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080ad11:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff80000080ad16:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:508
    struct file* elf_storage=elf;
ffff80000080ad1a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080ad1e:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:509
    off_t tmpla=kmalloc(0,PAGE_4K_SIZE);
ffff80000080ad25:	be 00 10 00 00       	mov    esi,0x1000
ffff80000080ad2a:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080ad2f:	49 89 df             	mov    r15,rbx
ffff80000080ad32:	48 b8 96 fe ed ff ff 	movabs rax,0xffffffffffedfe96
ffff80000080ad39:	ff ff ff 
ffff80000080ad3c:	48 01 d8             	add    rax,rbx
ffff80000080ad3f:	ff d0                	call   rax
ffff80000080ad41:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:510
    off_t shla=kmalloc(0,PAGE_4K_SIZE);
ffff80000080ad48:	be 00 10 00 00       	mov    esi,0x1000
ffff80000080ad4d:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080ad52:	49 89 df             	mov    r15,rbx
ffff80000080ad55:	48 b8 96 fe ed ff ff 	movabs rax,0xffffffffffedfe96
ffff80000080ad5c:	ff ff ff 
ffff80000080ad5f:	48 01 d8             	add    rax,rbx
ffff80000080ad62:	ff d0                	call   rax
ffff80000080ad64:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:511
    if(tmpla==-1)
ffff80000080ad6b:	48 83 bd 68 ff ff ff 	cmp    QWORD PTR [rbp-0x98],0xffffffffffffffff
ffff80000080ad72:	ff 
ffff80000080ad73:	75 28                	jne    ffff80000080ad9d <load_elf+0xd6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:513
    {
        current->regs.errcode=-ENOMEM;
ffff80000080ad75:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080ad7c:	ff ff ff 
ffff80000080ad7f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ad83:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ad86:	48 c7 80 2c 03 00 00 	mov    QWORD PTR [rax+0x32c],0xffffffffffffffcf
ffff80000080ad8d:	cf ff ff ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:514
        return -1;
ffff80000080ad91:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff80000080ad98:	e9 20 0a 00 00       	jmp    ffff80000080b7bd <load_elf+0xaf6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:516
    }
ready:
ffff80000080ad9d:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:517
    elf->position=0;
ffff80000080ad9e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080ada2:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:519
    //读取文件头
    elf->f_ops->read(elf, (char *) tmpla, PAGE_4K_SIZE, &elf->position);
ffff80000080ada9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080adad:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080adb1:	4c 8b 40 10          	mov    r8,QWORD PTR [rax+0x10]
ffff80000080adb5:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080adb9:	48 8b b5 68 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x98]
ffff80000080adc0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080adc4:	48 89 d1             	mov    rcx,rdx
ffff80000080adc7:	ba 00 10 00 00       	mov    edx,0x1000
ffff80000080adcc:	48 89 c7             	mov    rdi,rax
ffff80000080adcf:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:521

    Elf64_Ehdr *ehdr=(Elf64_Phdr*)tmpla;
ffff80000080add2:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080add9:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:522
    u16 entn=ehdr->e_phnum;
ffff80000080ade0:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
ffff80000080ade7:	0f b7 40 38          	movzx  eax,WORD PTR [rax+0x38]
ffff80000080adeb:	66 89 85 56 ff ff ff 	mov    WORD PTR [rbp-0xaa],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:523
    u16 ents=ehdr->e_phentsize;
ffff80000080adf2:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
ffff80000080adf9:	0f b7 40 36          	movzx  eax,WORD PTR [rax+0x36]
ffff80000080adfd:	66 89 85 54 ff ff ff 	mov    WORD PTR [rbp-0xac],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:524
    elf->position=ehdr->e_shoff;
ffff80000080ae04:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
ffff80000080ae0b:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080ae0f:	48 89 c2             	mov    rdx,rax
ffff80000080ae12:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080ae16:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:525
    sys_lseek(fildes, ehdr->e_shoff, SEEK_SET);
ffff80000080ae19:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
ffff80000080ae20:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080ae24:	48 89 c1             	mov    rcx,rax
ffff80000080ae27:	8b 85 dc fe ff ff    	mov    eax,DWORD PTR [rbp-0x124]
ffff80000080ae2d:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080ae32:	48 89 ce             	mov    rsi,rcx
ffff80000080ae35:	89 c7                	mov    edi,eax
ffff80000080ae37:	49 89 df             	mov    r15,rbx
ffff80000080ae3a:	48 b8 42 ac ee ff ff 	movabs rax,0xffffffffffeeac42
ffff80000080ae41:	ff ff ff 
ffff80000080ae44:	48 01 d8             	add    rax,rbx
ffff80000080ae47:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:526
    sys_read(fildes, shla, entn*ents);
ffff80000080ae49:	0f b7 95 56 ff ff ff 	movzx  edx,WORD PTR [rbp-0xaa]
ffff80000080ae50:	0f b7 85 54 ff ff ff 	movzx  eax,WORD PTR [rbp-0xac]
ffff80000080ae57:	0f af c2             	imul   eax,edx
ffff80000080ae5a:	48 63 d0             	movsxd rdx,eax
ffff80000080ae5d:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
ffff80000080ae64:	8b 85 dc fe ff ff    	mov    eax,DWORD PTR [rbp-0x124]
ffff80000080ae6a:	48 89 ce             	mov    rsi,rcx
ffff80000080ae6d:	89 c7                	mov    edi,eax
ffff80000080ae6f:	49 89 df             	mov    r15,rbx
ffff80000080ae72:	48 b8 a6 aa ee ff ff 	movabs rax,0xffffffffffeeaaa6
ffff80000080ae79:	ff ff ff 
ffff80000080ae7c:	48 01 d8             	add    rax,rbx
ffff80000080ae7f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:528
    // elf->f_ops->read(elf,(char*)shla,ehdr->e_shnum*ehdr->e_shentsize,&elf->position);
    struct Elf64_Shdr* sh= (struct Elf64_Shdr *) (shla);
ffff80000080ae81:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff80000080ae88:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:529
    Elf64_Phdr *ph= (Elf64_Phdr *) (tmpla + ehdr->e_phoff);
ffff80000080ae8f:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
ffff80000080ae96:	48 8b 50 20          	mov    rdx,QWORD PTR [rax+0x20]
ffff80000080ae9a:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080aea1:	48 01 d0             	add    rax,rdx
ffff80000080aea4:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:530
    size_t tot_sz=0;
ffff80000080aea8:	48 c7 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],0x0
ffff80000080aeaf:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:531
    off_t base=ph->p_vaddr,offset=0;
ffff80000080aeb3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080aeb7:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080aebb:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
ffff80000080aec2:	48 c7 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],0x0
ffff80000080aec9:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:532
    int reloc_flag=0;
ffff80000080aecd:	c7 85 2c ff ff ff 00 	mov    DWORD PTR [rbp-0xd4],0x0
ffff80000080aed4:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:556
            offset=new_base-base;
        }
    } */
    

    module* mod=0;
ffff80000080aed7:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff80000080aede:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:558
    //module项设置
    for(int i=0;i<MAX_MODULES;i++){
ffff80000080aedf:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x0
ffff80000080aee6:	e9 04 01 00 00       	jmp    ffff80000080afef <load_elf+0x328>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:559
        if(modules[i].type==ET_NONE){
ffff80000080aeeb:	48 b8 a0 fd ff ff ff 	movabs rax,0xfffffffffffffda0
ffff80000080aef2:	ff ff ff 
ffff80000080aef5:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff80000080aef9:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080aefc:	48 63 d0             	movsxd rdx,eax
ffff80000080aeff:	48 89 d0             	mov    rax,rdx
ffff80000080af02:	48 c1 e0 03          	shl    rax,0x3
ffff80000080af06:	48 29 d0             	sub    rax,rdx
ffff80000080af09:	48 c1 e0 03          	shl    rax,0x3
ffff80000080af0d:	48 01 c8             	add    rax,rcx
ffff80000080af10:	48 83 c0 18          	add    rax,0x18
ffff80000080af14:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080af17:	48 85 c0             	test   rax,rax
ffff80000080af1a:	0f 85 cb 00 00 00    	jne    ffff80000080afeb <load_elf+0x324>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:560
            modules[i].type=ehdr->e_type;
ffff80000080af20:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
ffff80000080af27:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff80000080af2b:	0f b7 d0             	movzx  edx,ax
ffff80000080af2e:	48 b8 a0 fd ff ff ff 	movabs rax,0xfffffffffffffda0
ffff80000080af35:	ff ff ff 
ffff80000080af38:	48 8b 34 03          	mov    rsi,QWORD PTR [rbx+rax*1]
ffff80000080af3c:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080af3f:	48 63 c8             	movsxd rcx,eax
ffff80000080af42:	48 89 c8             	mov    rax,rcx
ffff80000080af45:	48 c1 e0 03          	shl    rax,0x3
ffff80000080af49:	48 29 c8             	sub    rax,rcx
ffff80000080af4c:	48 c1 e0 03          	shl    rax,0x3
ffff80000080af50:	48 01 f0             	add    rax,rsi
ffff80000080af53:	48 83 c0 18          	add    rax,0x18
ffff80000080af57:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:561
            modules[i].load_offset=offset;
ffff80000080af5a:	48 b8 a0 fd ff ff ff 	movabs rax,0xfffffffffffffda0
ffff80000080af61:	ff ff ff 
ffff80000080af64:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff80000080af68:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080af6b:	48 63 d0             	movsxd rdx,eax
ffff80000080af6e:	48 89 d0             	mov    rax,rdx
ffff80000080af71:	48 c1 e0 03          	shl    rax,0x3
ffff80000080af75:	48 29 d0             	sub    rax,rdx
ffff80000080af78:	48 c1 e0 03          	shl    rax,0x3
ffff80000080af7c:	48 01 c8             	add    rax,rcx
ffff80000080af7f:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff80000080af83:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff80000080af8a:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:562
            modules[i].base=base;
ffff80000080af8d:	48 b8 a0 fd ff ff ff 	movabs rax,0xfffffffffffffda0
ffff80000080af94:	ff ff ff 
ffff80000080af97:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff80000080af9b:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080af9e:	48 63 d0             	movsxd rdx,eax
ffff80000080afa1:	48 89 d0             	mov    rax,rdx
ffff80000080afa4:	48 c1 e0 03          	shl    rax,0x3
ffff80000080afa8:	48 29 d0             	sub    rax,rdx
ffff80000080afab:	48 c1 e0 03          	shl    rax,0x3
ffff80000080afaf:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
ffff80000080afb3:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff80000080afba:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:563
            mod=modules+i;
ffff80000080afbd:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080afc0:	48 63 d0             	movsxd rdx,eax
ffff80000080afc3:	48 89 d0             	mov    rax,rdx
ffff80000080afc6:	48 c1 e0 03          	shl    rax,0x3
ffff80000080afca:	48 29 d0             	sub    rax,rdx
ffff80000080afcd:	48 c1 e0 03          	shl    rax,0x3
ffff80000080afd1:	48 89 c2             	mov    rdx,rax
ffff80000080afd4:	48 b8 a0 fd ff ff ff 	movabs rax,0xfffffffffffffda0
ffff80000080afdb:	ff ff ff 
ffff80000080afde:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080afe2:	48 01 d0             	add    rax,rdx
ffff80000080afe5:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:564
            break;
ffff80000080afe9:	eb 0e                	jmp    ffff80000080aff9 <load_elf+0x332>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:558 (discriminator 2)
    for(int i=0;i<MAX_MODULES;i++){
ffff80000080afeb:	83 45 d4 01          	add    DWORD PTR [rbp-0x2c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:558 (discriminator 1)
ffff80000080afef:	83 7d d4 7f          	cmp    DWORD PTR [rbp-0x2c],0x7f
ffff80000080aff3:	0f 8e f2 fe ff ff    	jle    ffff80000080aeeb <load_elf+0x224>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:567
        }
    }
    for(int i=0;i<entn;i++){
ffff80000080aff9:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
ffff80000080b000:	e9 fb 00 00 00       	jmp    ffff80000080b100 <load_elf+0x439>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:569
        
        if(ph[i].p_type==PT_INTERP){
ffff80000080b005:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff80000080b008:	48 63 d0             	movsxd rdx,eax
ffff80000080b00b:	48 89 d0             	mov    rax,rdx
ffff80000080b00e:	48 c1 e0 03          	shl    rax,0x3
ffff80000080b012:	48 29 d0             	sub    rax,rdx
ffff80000080b015:	48 c1 e0 03          	shl    rax,0x3
ffff80000080b019:	48 89 c2             	mov    rdx,rax
ffff80000080b01c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080b020:	48 01 d0             	add    rax,rdx
ffff80000080b023:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080b025:	83 f8 03             	cmp    eax,0x3
ffff80000080b028:	0f 85 ce 00 00 00    	jne    ffff80000080b0fc <load_elf+0x435>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:572
            //load dl
            //
            if(current->dl)break;
ffff80000080b02e:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080b035:	ff ff ff 
ffff80000080b038:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b03c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b03f:	8b 80 5c 03 00 00    	mov    eax,DWORD PTR [rax+0x35c]
ffff80000080b045:	85 c0                	test   eax,eax
ffff80000080b047:	0f 85 c5 00 00 00    	jne    ffff80000080b112 <load_elf+0x44b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:573
            int fd=sys_open("/dl.so",O_EXEC);
ffff80000080b04d:	be 00 10 00 00       	mov    esi,0x1000
ffff80000080b052:	48 b8 f3 d3 ff ff ff 	movabs rax,0xffffffffffffd3f3
ffff80000080b059:	ff ff ff 
ffff80000080b05c:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080b060:	48 89 c7             	mov    rdi,rax
ffff80000080b063:	49 89 df             	mov    r15,rbx
ffff80000080b066:	48 b8 69 a3 ee ff ff 	movabs rax,0xffffffffffeea369
ffff80000080b06d:	ff ff ff 
ffff80000080b070:	48 01 d8             	add    rax,rbx
ffff80000080b073:	ff d0                	call   rax
ffff80000080b075:	89 85 28 ff ff ff    	mov    DWORD PTR [rbp-0xd8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:574
            kmfree(tmpla);
ffff80000080b07b:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080b082:	48 89 c7             	mov    rdi,rax
ffff80000080b085:	49 89 df             	mov    r15,rbx
ffff80000080b088:	48 b8 37 00 ee ff ff 	movabs rax,0xffffffffffee0037
ffff80000080b08f:	ff ff ff 
ffff80000080b092:	48 01 d8             	add    rax,rbx
ffff80000080b095:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:575
            kmfree(shla);
ffff80000080b097:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff80000080b09e:	48 89 c7             	mov    rdi,rax
ffff80000080b0a1:	49 89 df             	mov    r15,rbx
ffff80000080b0a4:	48 b8 37 00 ee ff ff 	movabs rax,0xffffffffffee0037
ffff80000080b0ab:	ff ff ff 
ffff80000080b0ae:	48 01 d8             	add    rax,rbx
ffff80000080b0b1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:576
            current->dl=fd;
ffff80000080b0b3:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080b0ba:	ff ff ff 
ffff80000080b0bd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b0c1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b0c4:	8b 95 28 ff ff ff    	mov    edx,DWORD PTR [rbp-0xd8]
ffff80000080b0ca:	89 90 5c 03 00 00    	mov    DWORD PTR [rax+0x35c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:577
            elf=current->openf[fd];
ffff80000080b0d0:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080b0d7:	ff ff ff 
ffff80000080b0da:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b0de:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b0e1:	8b 95 28 ff ff ff    	mov    edx,DWORD PTR [rbp-0xd8]
ffff80000080b0e7:	48 63 d2             	movsxd rdx,edx
ffff80000080b0ea:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080b0ee:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff80000080b0f3:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:578
            goto ready;
ffff80000080b0f7:	e9 a2 fc ff ff       	jmp    ffff80000080ad9e <load_elf+0xd7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:567 (discriminator 2)
    for(int i=0;i<entn;i++){
ffff80000080b0fc:	83 45 d0 01          	add    DWORD PTR [rbp-0x30],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:567 (discriminator 1)
ffff80000080b100:	0f b7 85 56 ff ff ff 	movzx  eax,WORD PTR [rbp-0xaa]
ffff80000080b107:	39 45 d0             	cmp    DWORD PTR [rbp-0x30],eax
ffff80000080b10a:	0f 8c f5 fe ff ff    	jl     ffff80000080b005 <load_elf+0x33e>
ffff80000080b110:	eb 01                	jmp    ffff80000080b113 <load_elf+0x44c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:572
            if(current->dl)break;
ffff80000080b112:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:582
        }
    }
    //程序占用的最高地址，这里就是堆开始分配的地方
    off_t max_allocated=0;
ffff80000080b113:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff80000080b11a:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:583
    current->mem_struct.text_base=-1;
ffff80000080b11b:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080b122:	ff ff ff 
ffff80000080b125:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b129:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b12c:	48 c7 40 48 ff ff ff 	mov    QWORD PTR [rax+0x48],0xffffffffffffffff
ffff80000080b133:	ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:584
    current->mem_struct.text_top=0;
ffff80000080b134:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080b13b:	ff ff ff 
ffff80000080b13e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b142:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b145:	48 c7 40 50 00 00 00 	mov    QWORD PTR [rax+0x50],0x0
ffff80000080b14c:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:585
    for(int i=0;i<entn;i++){
ffff80000080b14d:	c7 45 c4 00 00 00 00 	mov    DWORD PTR [rbp-0x3c],0x0
ffff80000080b154:	e9 af 01 00 00       	jmp    ffff80000080b308 <load_elf+0x641>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:587
        //加载段
        if(ph->p_type==PT_LOAD){
ffff80000080b159:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080b15d:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080b15f:	83 f8 01             	cmp    eax,0x1
ffff80000080b162:	0f 85 97 01 00 00    	jne    ffff80000080b2ff <load_elf+0x638>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:588
            unsigned long off=ph->p_offset;
ffff80000080b168:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080b16c:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080b170:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:589
            unsigned long fs=ph->p_filesz;
ffff80000080b177:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080b17b:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000080b17f:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:590
            size_t ms=ph->p_memsz;
ffff80000080b186:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080b18a:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080b18e:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:591
            char* vptr= (char *) ph->p_vaddr+offset;
ffff80000080b195:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080b199:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080b19d:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff80000080b1a4:	48 01 d0             	add    rax,rdx
ffff80000080b1a7:	48 89 85 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:592
            if(max_allocated<vptr+ms)
ffff80000080b1ae:	48 8b 95 e0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x120]
ffff80000080b1b5:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
ffff80000080b1bc:	48 01 c2             	add    rdx,rax
ffff80000080b1bf:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b1c3:	48 39 c2             	cmp    rdx,rax
ffff80000080b1c6:	76 15                	jbe    ffff80000080b1dd <load_elf+0x516>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:593
                max_allocated=vptr+ms;
ffff80000080b1c8:	48 8b 95 e0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x120]
ffff80000080b1cf:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
ffff80000080b1d6:	48 01 d0             	add    rax,rdx
ffff80000080b1d9:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:594
            elf->position=off;
ffff80000080b1dd:	48 8b 95 f8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x108]
ffff80000080b1e4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b1e8:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:595
            if(off==0){
ffff80000080b1eb:	48 83 bd f8 fe ff ff 	cmp    QWORD PTR [rbp-0x108],0x0
ffff80000080b1f2:	00 
ffff80000080b1f3:	75 0f                	jne    ffff80000080b204 <load_elf+0x53d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:596
                mod->header=vptr;
ffff80000080b1f5:	48 8b 95 e0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x120]
ffff80000080b1fc:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080b200:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:599
            }
            //先映射好内存，访问时再分配内存
            int attr=PROT_READ;
ffff80000080b204:	c7 45 c0 01 00 00 00 	mov    DWORD PTR [rbp-0x40],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:600
            if((ph->p_flags&PF_W))
ffff80000080b20b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080b20f:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff80000080b212:	83 e0 02             	and    eax,0x2
ffff80000080b215:	85 c0                	test   eax,eax
ffff80000080b217:	74 04                	je     ffff80000080b21d <load_elf+0x556>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:601
                attr|=PROT_WRITE;
ffff80000080b219:	83 4d c0 02          	or     DWORD PTR [rbp-0x40],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:602
            if((ph->p_flags&PF_X)){
ffff80000080b21d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080b221:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff80000080b224:	83 e0 01             	and    eax,0x1
ffff80000080b227:	85 c0                	test   eax,eax
ffff80000080b229:	0f 84 92 00 00 00    	je     ffff80000080b2c1 <load_elf+0x5fa>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:603
                attr|=PROT_EXEC;
ffff80000080b22f:	83 4d c0 04          	or     DWORD PTR [rbp-0x40],0x4
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:605
                //代码段底部
                if(current->mem_struct.text_base>vptr)current->mem_struct.text_base=vptr;
ffff80000080b233:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080b23a:	ff ff ff 
ffff80000080b23d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b241:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b244:	48 8b 40 48          	mov    rax,QWORD PTR [rax+0x48]
ffff80000080b248:	48 39 85 e0 fe ff ff 	cmp    QWORD PTR [rbp-0x120],rax
ffff80000080b24f:	73 1c                	jae    ffff80000080b26d <load_elf+0x5a6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:605 (discriminator 1)
ffff80000080b251:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080b258:	ff ff ff 
ffff80000080b25b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b25f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b262:	48 8b 95 e0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x120]
ffff80000080b269:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:607
                //代码段顶部
                if(current->mem_struct.text_top<vptr+ms)current->mem_struct.text_top=vptr+ms;
ffff80000080b26d:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080b274:	ff ff ff 
ffff80000080b277:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b27b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b27e:	48 8b 40 50          	mov    rax,QWORD PTR [rax+0x50]
ffff80000080b282:	48 89 c1             	mov    rcx,rax
ffff80000080b285:	48 8b 95 e0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x120]
ffff80000080b28c:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
ffff80000080b293:	48 01 d0             	add    rax,rdx
ffff80000080b296:	48 39 c1             	cmp    rcx,rax
ffff80000080b299:	73 26                	jae    ffff80000080b2c1 <load_elf+0x5fa>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:607 (discriminator 1)
ffff80000080b29b:	48 8b 95 e0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x120]
ffff80000080b2a2:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
ffff80000080b2a9:	48 01 c2             	add    rdx,rax
ffff80000080b2ac:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080b2b3:	ff ff ff 
ffff80000080b2b6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b2ba:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b2bd:	48 89 50 50          	mov    QWORD PTR [rax+0x50],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:609
            }
            sys_mmap(vptr, ms, attr, MAP_FIXED|MAP_PRIVATE, fildes, off);
ffff80000080b2c1:	48 8b bd f8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x108]
ffff80000080b2c8:	8b 8d dc fe ff ff    	mov    ecx,DWORD PTR [rbp-0x124]
ffff80000080b2ce:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
ffff80000080b2d1:	48 8b b5 e8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x118]
ffff80000080b2d8:	48 8b 85 e0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x120]
ffff80000080b2df:	49 89 f9             	mov    r9,rdi
ffff80000080b2e2:	41 89 c8             	mov    r8d,ecx
ffff80000080b2e5:	b9 03 00 00 00       	mov    ecx,0x3
ffff80000080b2ea:	48 89 c7             	mov    rdi,rax
ffff80000080b2ed:	49 89 df             	mov    r15,rbx
ffff80000080b2f0:	48 b8 a7 b5 ee ff ff 	movabs rax,0xffffffffffeeb5a7
ffff80000080b2f7:	ff ff ff 
ffff80000080b2fa:	48 01 d8             	add    rax,rbx
ffff80000080b2fd:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:625 (discriminator 2)
            }
            //读取
            elf->f_ops->read(elf,vptr,fs,&elf->position); */

        }
        ph++;
ffff80000080b2ff:	48 83 45 e0 38       	add    QWORD PTR [rbp-0x20],0x38
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:585 (discriminator 2)
    for(int i=0;i<entn;i++){
ffff80000080b304:	83 45 c4 01          	add    DWORD PTR [rbp-0x3c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:585 (discriminator 1)
ffff80000080b308:	0f b7 85 56 ff ff ff 	movzx  eax,WORD PTR [rbp-0xaa]
ffff80000080b30f:	39 45 c4             	cmp    DWORD PTR [rbp-0x3c],eax
ffff80000080b312:	0f 8c 41 fe ff ff    	jl     ffff80000080b159 <load_elf+0x492>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:628
    }
    //找dynamic段
    struct Elf64_Shdr *dynamic=NULL;
ffff80000080b318:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffff80000080b31f:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:629
    off_t* got=NULL;
ffff80000080b320:	48 c7 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],0x0
ffff80000080b327:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:630
    for(int i=0;i<ehdr->e_shnum;i++){
ffff80000080b32b:	c7 45 b4 00 00 00 00 	mov    DWORD PTR [rbp-0x4c],0x0
ffff80000080b332:	eb 50                	jmp    ffff80000080b384 <load_elf+0x6bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:631
        if(sh[i].sh_type==SHT_DYNAMIC)
ffff80000080b334:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffff80000080b337:	48 63 d0             	movsxd rdx,eax
ffff80000080b33a:	48 89 d0             	mov    rax,rdx
ffff80000080b33d:	48 01 c0             	add    rax,rax
ffff80000080b340:	48 01 d0             	add    rax,rdx
ffff80000080b343:	48 c1 e0 04          	shl    rax,0x4
ffff80000080b347:	48 89 c2             	mov    rdx,rax
ffff80000080b34a:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff80000080b351:	48 01 d0             	add    rax,rdx
ffff80000080b354:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff80000080b357:	83 f8 06             	cmp    eax,0x6
ffff80000080b35a:	75 24                	jne    ffff80000080b380 <load_elf+0x6b9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:632
            dynamic=sh+i;
ffff80000080b35c:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffff80000080b35f:	48 63 d0             	movsxd rdx,eax
ffff80000080b362:	48 89 d0             	mov    rax,rdx
ffff80000080b365:	48 01 c0             	add    rax,rax
ffff80000080b368:	48 01 d0             	add    rax,rdx
ffff80000080b36b:	48 c1 e0 04          	shl    rax,0x4
ffff80000080b36f:	48 89 c2             	mov    rdx,rax
ffff80000080b372:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff80000080b379:	48 01 d0             	add    rax,rdx
ffff80000080b37c:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:630 (discriminator 2)
    for(int i=0;i<ehdr->e_shnum;i++){
ffff80000080b380:	83 45 b4 01          	add    DWORD PTR [rbp-0x4c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:630 (discriminator 1)
ffff80000080b384:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
ffff80000080b38b:	0f b7 40 3c          	movzx  eax,WORD PTR [rax+0x3c]
ffff80000080b38f:	0f b7 c0             	movzx  eax,ax
ffff80000080b392:	39 45 b4             	cmp    DWORD PTR [rbp-0x4c],eax
ffff80000080b395:	7c 9d                	jl     ffff80000080b334 <load_elf+0x66d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:634
    }
    if(dynamic){
ffff80000080b397:	48 83 7d b8 00       	cmp    QWORD PTR [rbp-0x48],0x0
ffff80000080b39c:	0f 84 6e 03 00 00    	je     ffff80000080b710 <load_elf+0xa49>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:635
        char* dynstr=0;
ffff80000080b3a2:	48 c7 45 a8 00 00 00 	mov    QWORD PTR [rbp-0x58],0x0
ffff80000080b3a9:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:636
        Elf64_Dyn *dyn=dynamic->sh_addr+offset;
ffff80000080b3aa:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080b3ae:	48 8b 50 0c          	mov    rdx,QWORD PTR [rax+0xc]
ffff80000080b3b2:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff80000080b3b9:	48 01 d0             	add    rax,rdx
ffff80000080b3bc:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:638

        mod->p_dynamic=dynamic;
ffff80000080b3c3:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000080b3c7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080b3cb:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:642
        //这里一堆获取函数之后实现细节
        // dynstr=so_get_dynstr(dyn);
        //so_get_dynstr从so中获取.dynstr节
        for(Elf64_Dyn* p=dyn;p->d_tag;p++){
ffff80000080b3cf:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
ffff80000080b3d6:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
ffff80000080b3da:	eb 2a                	jmp    ffff80000080b406 <load_elf+0x73f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:643
            if(p->d_tag==DT_STRTAB){
ffff80000080b3dc:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080b3e0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b3e3:	48 83 f8 05          	cmp    rax,0x5
ffff80000080b3e7:	75 18                	jne    ffff80000080b401 <load_elf+0x73a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:644
                dynstr=p->d_un.d_ptr+offset;
ffff80000080b3e9:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080b3ed:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff80000080b3f1:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff80000080b3f8:	48 01 d0             	add    rax,rdx
ffff80000080b3fb:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:645
                break;
ffff80000080b3ff:	eb 11                	jmp    ffff80000080b412 <load_elf+0x74b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:642 (discriminator 2)
        for(Elf64_Dyn* p=dyn;p->d_tag;p++){
ffff80000080b401:	48 83 45 a0 10       	add    QWORD PTR [rbp-0x60],0x10
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:642 (discriminator 1)
ffff80000080b406:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080b40a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b40d:	48 85 c0             	test   rax,rax
ffff80000080b410:	75 ca                	jne    ffff80000080b3dc <load_elf+0x715>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:648
            }
        }
        if(!dynstr){
ffff80000080b412:	48 83 7d a8 00       	cmp    QWORD PTR [rbp-0x58],0x0
ffff80000080b417:	75 28                	jne    ffff80000080b441 <load_elf+0x77a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:649
            comprintf("cannot find dynstr in .dynamic!\n");
ffff80000080b419:	48 b8 00 d4 ff ff ff 	movabs rax,0xffffffffffffd400
ffff80000080b420:	ff ff ff 
ffff80000080b423:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080b427:	48 89 c7             	mov    rdi,rax
ffff80000080b42a:	49 89 df             	mov    r15,rbx
ffff80000080b42d:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080b432:	48 ba 62 18 ef ff ff 	movabs rdx,0xffffffffffef1862
ffff80000080b439:	ff ff ff 
ffff80000080b43c:	48 01 da             	add    rdx,rbx
ffff80000080b43f:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:658
        // so_load_sos(so_paths);
        //so_get_needed&so_load_sos
        //so_get_got
        // got=so_get_got(dyn);
        //intel架构上DT_PLTGOT存放的是got地址
        size_t relsz=0,relentsz=0;
ffff80000080b441:	48 c7 45 98 00 00 00 	mov    QWORD PTR [rbp-0x68],0x0
ffff80000080b448:	00 
ffff80000080b449:	48 c7 45 90 00 00 00 	mov    QWORD PTR [rbp-0x70],0x0
ffff80000080b450:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:659
        off_t relptr=0;
ffff80000080b451:	48 c7 45 88 00 00 00 	mov    QWORD PTR [rbp-0x78],0x0
ffff80000080b458:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:660
        for(Elf64_Dyn* p=dyn;p->d_tag;p++){
ffff80000080b459:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
ffff80000080b460:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
ffff80000080b464:	e9 97 02 00 00       	jmp    ffff80000080b700 <load_elf+0xa39>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:661
            char* pathname=p->d_un.d_val+dynstr;
ffff80000080b469:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080b46d:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff80000080b471:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080b475:	48 01 d0             	add    rax,rdx
ffff80000080b478:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:662
            int so_fno=sys_open(pathname,O_EXEC);
ffff80000080b47f:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff80000080b486:	be 00 10 00 00       	mov    esi,0x1000
ffff80000080b48b:	48 89 c7             	mov    rdi,rax
ffff80000080b48e:	49 89 df             	mov    r15,rbx
ffff80000080b491:	48 b8 69 a3 ee ff ff 	movabs rax,0xffffffffffeea369
ffff80000080b498:	ff ff ff 
ffff80000080b49b:	48 01 d8             	add    rax,rbx
ffff80000080b49e:	ff d0                	call   rax
ffff80000080b4a0:	89 85 0c ff ff ff    	mov    DWORD PTR [rbp-0xf4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:663
            switch (p->d_tag)
ffff80000080b4a6:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080b4aa:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b4ad:	48 83 f8 13          	cmp    rax,0x13
ffff80000080b4b1:	0f 87 77 01 00 00    	ja     ffff80000080b62e <load_elf+0x967>
ffff80000080b4b7:	48 83 f8 07          	cmp    rax,0x7
ffff80000080b4bb:	73 29                	jae    ffff80000080b4e6 <load_elf+0x81f>
ffff80000080b4bd:	48 83 f8 06          	cmp    rax,0x6
ffff80000080b4c1:	0f 84 2b 01 00 00    	je     ffff80000080b5f2 <load_elf+0x92b>
ffff80000080b4c7:	48 83 f8 06          	cmp    rax,0x6
ffff80000080b4cb:	0f 87 5d 01 00 00    	ja     ffff80000080b62e <load_elf+0x967>
ffff80000080b4d1:	48 83 f8 01          	cmp    rax,0x1
ffff80000080b4d5:	74 62                	je     ffff80000080b539 <load_elf+0x872>
ffff80000080b4d7:	48 83 f8 03          	cmp    rax,0x3
ffff80000080b4db:	0f 84 8f 00 00 00    	je     ffff80000080b570 <load_elf+0x8a9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:696
                relentsz=p->d_un.d_val;
                goto is_rel_prepared;

            
            default:
                break;
ffff80000080b4e1:	e9 48 01 00 00       	jmp    ffff80000080b62e <load_elf+0x967>
ffff80000080b4e6:	ba 01 00 00 00       	mov    edx,0x1
ffff80000080b4eb:	89 c1                	mov    ecx,eax
ffff80000080b4ed:	48 d3 e2             	shl    rdx,cl
ffff80000080b4f0:	48 89 d0             	mov    rax,rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:663
            switch (p->d_tag)
ffff80000080b4f3:	48 89 c2             	mov    rdx,rax
ffff80000080b4f6:	81 e2 00 02 08 00    	and    edx,0x80200
ffff80000080b4fc:	48 85 d2             	test   rdx,rdx
ffff80000080b4ff:	0f 95 c2             	setne  dl
ffff80000080b502:	84 d2                	test   dl,dl
ffff80000080b504:	0f 85 16 01 00 00    	jne    ffff80000080b620 <load_elf+0x959>
ffff80000080b50a:	48 89 c2             	mov    rdx,rax
ffff80000080b50d:	81 e2 80 00 02 00    	and    edx,0x20080
ffff80000080b513:	48 85 d2             	test   rdx,rdx
ffff80000080b516:	0f 95 c2             	setne  dl
ffff80000080b519:	84 d2                	test   dl,dl
ffff80000080b51b:	0f 85 f1 00 00 00    	jne    ffff80000080b612 <load_elf+0x94b>
ffff80000080b521:	25 00 01 04 00       	and    eax,0x40100
ffff80000080b526:	48 85 c0             	test   rax,rax
ffff80000080b529:	0f 95 c0             	setne  al
ffff80000080b52c:	84 c0                	test   al,al
ffff80000080b52e:	0f 85 d0 00 00 00    	jne    ffff80000080b604 <load_elf+0x93d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:696
                break;
ffff80000080b534:	e9 f5 00 00 00       	jmp    ffff80000080b62e <load_elf+0x967>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:667
                load_elf(so_fno);
ffff80000080b539:	8b 85 0c ff ff ff    	mov    eax,DWORD PTR [rbp-0xf4]
ffff80000080b53f:	89 c7                	mov    edi,eax
ffff80000080b541:	48 b8 97 77 ee ff ff 	movabs rax,0xffffffffffee7797
ffff80000080b548:	ff ff ff 
ffff80000080b54b:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080b54f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:668
                sys_close(so_fno);
ffff80000080b551:	8b 85 0c ff ff ff    	mov    eax,DWORD PTR [rbp-0xf4]
ffff80000080b557:	89 c7                	mov    edi,eax
ffff80000080b559:	49 89 df             	mov    r15,rbx
ffff80000080b55c:	48 b8 9d a9 ee ff ff 	movabs rax,0xffffffffffeea99d
ffff80000080b563:	ff ff ff 
ffff80000080b566:	48 01 d8             	add    rax,rbx
ffff80000080b569:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:669
                break;
ffff80000080b56b:	e9 bf 00 00 00       	jmp    ffff80000080b62f <load_elf+0x968>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:671
                got=p->d_un.d_ptr+offset;
ffff80000080b570:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080b574:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff80000080b578:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff80000080b57f:	48 01 d0             	add    rax,rdx
ffff80000080b582:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:674
                got[2]=dl_runtime_resolve;
ffff80000080b589:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
ffff80000080b590:	48 83 c0 10          	add    rax,0x10
ffff80000080b594:	48 ba d0 fe ff ff ff 	movabs rdx,0xfffffffffffffed0
ffff80000080b59b:	ff ff ff 
ffff80000080b59e:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080b5a2:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:676
                got[1]=mod-modules;
ffff80000080b5a5:	48 b8 a0 fd ff ff ff 	movabs rax,0xfffffffffffffda0
ffff80000080b5ac:	ff ff ff 
ffff80000080b5af:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b5b3:	48 89 c2             	mov    rdx,rax
ffff80000080b5b6:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080b5ba:	48 29 d0             	sub    rax,rdx
ffff80000080b5bd:	48 c1 f8 03          	sar    rax,0x3
ffff80000080b5c1:	48 89 c2             	mov    rdx,rax
ffff80000080b5c4:	48 b8 b7 6d db b6 6d 	movabs rax,0x6db6db6db6db6db7
ffff80000080b5cb:	db b6 6d 
ffff80000080b5ce:	48 0f af c2          	imul   rax,rdx
ffff80000080b5d2:	48 89 c2             	mov    rdx,rax
ffff80000080b5d5:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
ffff80000080b5dc:	48 83 c0 08          	add    rax,0x8
ffff80000080b5e0:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:677
                mod->p_got=got;
ffff80000080b5e3:	48 8b 95 20 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe0]
ffff80000080b5ea:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080b5ee:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:679
                mod->p_symbol=p->d_un.d_ptr;
ffff80000080b5f2:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080b5f6:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff80000080b5fa:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080b5fe:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:680
                break;
ffff80000080b602:	eb 2b                	jmp    ffff80000080b62f <load_elf+0x968>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:683
                relsz=p->d_un.d_val;
ffff80000080b604:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080b608:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080b60c:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:684
                goto is_rel_prepared;
ffff80000080b610:	eb 22                	jmp    ffff80000080b634 <load_elf+0x96d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:687
                relptr=p->d_un.d_ptr;
ffff80000080b612:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080b616:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080b61a:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:688
                goto is_rel_prepared;
ffff80000080b61e:	eb 14                	jmp    ffff80000080b634 <load_elf+0x96d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:691
                relentsz=p->d_un.d_val;
ffff80000080b620:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080b624:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080b628:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:692
                goto is_rel_prepared;
ffff80000080b62c:	eb 06                	jmp    ffff80000080b634 <load_elf+0x96d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:696
                break;
ffff80000080b62e:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:698
            }
            continue;
ffff80000080b62f:	e9 c7 00 00 00       	jmp    ffff80000080b6fb <load_elf+0xa34>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:700
is_rel_prepared:
            if(!(relsz&&relentsz&&relptr))continue;
ffff80000080b634:	48 83 7d 98 00       	cmp    QWORD PTR [rbp-0x68],0x0
ffff80000080b639:	0f 84 bb 00 00 00    	je     ffff80000080b6fa <load_elf+0xa33>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:700 (discriminator 2)
ffff80000080b63f:	48 83 7d 90 00       	cmp    QWORD PTR [rbp-0x70],0x0
ffff80000080b644:	0f 84 b0 00 00 00    	je     ffff80000080b6fa <load_elf+0xa33>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:700 (discriminator 4)
ffff80000080b64a:	48 83 7d 88 00       	cmp    QWORD PTR [rbp-0x78],0x0
ffff80000080b64f:	0f 84 a5 00 00 00    	je     ffff80000080b6fa <load_elf+0xa33>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:701
            for(int j=0;j<relsz/relentsz;j++){
ffff80000080b655:	c7 85 7c ff ff ff 00 	mov    DWORD PTR [rbp-0x84],0x0
ffff80000080b65c:	00 00 00 
ffff80000080b65f:	eb 64                	jmp    ffff80000080b6c5 <load_elf+0x9fe>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:702 (discriminator 3)
                fill_reloc(relptr+j*relentsz,mod-modules);
ffff80000080b661:	48 b8 a0 fd ff ff ff 	movabs rax,0xfffffffffffffda0
ffff80000080b668:	ff ff ff 
ffff80000080b66b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b66f:	48 89 c2             	mov    rdx,rax
ffff80000080b672:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080b676:	48 29 d0             	sub    rax,rdx
ffff80000080b679:	48 c1 f8 03          	sar    rax,0x3
ffff80000080b67d:	48 89 c2             	mov    rdx,rax
ffff80000080b680:	48 b8 b7 6d db b6 6d 	movabs rax,0x6db6db6db6db6db7
ffff80000080b687:	db b6 6d 
ffff80000080b68a:	48 0f af c2          	imul   rax,rdx
ffff80000080b68e:	89 c2                	mov    edx,eax
ffff80000080b690:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
ffff80000080b696:	48 98                	cdqe   
ffff80000080b698:	48 0f af 45 90       	imul   rax,QWORD PTR [rbp-0x70]
ffff80000080b69d:	48 89 c1             	mov    rcx,rax
ffff80000080b6a0:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080b6a4:	48 01 c8             	add    rax,rcx
ffff80000080b6a7:	89 d6                	mov    esi,edx
ffff80000080b6a9:	48 89 c7             	mov    rdi,rax
ffff80000080b6ac:	49 89 df             	mov    r15,rbx
ffff80000080b6af:	48 b8 96 86 ee ff ff 	movabs rax,0xffffffffffee8696
ffff80000080b6b6:	ff ff ff 
ffff80000080b6b9:	48 01 d8             	add    rax,rbx
ffff80000080b6bc:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:701 (discriminator 3)
            for(int j=0;j<relsz/relentsz;j++){
ffff80000080b6be:	83 85 7c ff ff ff 01 	add    DWORD PTR [rbp-0x84],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:701 (discriminator 1)
ffff80000080b6c5:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
ffff80000080b6cb:	48 63 c8             	movsxd rcx,eax
ffff80000080b6ce:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080b6d2:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080b6d7:	48 f7 75 90          	div    QWORD PTR [rbp-0x70]
ffff80000080b6db:	48 39 c1             	cmp    rcx,rax
ffff80000080b6de:	72 81                	jb     ffff80000080b661 <load_elf+0x99a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:704
            }
            relsz=relentsz=relptr=0;
ffff80000080b6e0:	48 c7 45 88 00 00 00 	mov    QWORD PTR [rbp-0x78],0x0
ffff80000080b6e7:	00 
ffff80000080b6e8:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080b6ec:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
ffff80000080b6f0:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080b6f4:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
ffff80000080b6f8:	eb 01                	jmp    ffff80000080b6fb <load_elf+0xa34>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:700
            if(!(relsz&&relentsz&&relptr))continue;
ffff80000080b6fa:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:660 (discriminator 2)
        for(Elf64_Dyn* p=dyn;p->d_tag;p++){
ffff80000080b6fb:	48 83 45 80 10       	add    QWORD PTR [rbp-0x80],0x10
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:660 (discriminator 3)
ffff80000080b700:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080b704:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b707:	48 85 c0             	test   rax,rax
ffff80000080b70a:	0f 85 59 fd ff ff    	jne    ffff80000080b469 <load_elf+0x7a2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:729
    // }
    // off_t real_head_base=sys_mmap(HEAP_BASE, CHUNK_SIZE, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANNONYMOUS, 0, 0);
    // smmap(lma, HEAP_BASE, PAGE_PRESENT | PAGE_FOR_ALL | PAGE_RWX, current->pml4);
    // memset((unsigned char *) HEAP_BASE, 0, CHUNK_SIZE);
    //堆一开始不分配，通过后边brk分配
    current->mem_struct.heap_base=max_allocated;
ffff80000080b710:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080b717:	ff ff ff 
ffff80000080b71a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b71e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b721:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080b725:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:730
    current->mem_struct.heap_top=max_allocated;
ffff80000080b729:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080b730:	ff ff ff 
ffff80000080b733:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b737:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b73a:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080b73e:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:733
    // memcpy((chunk_header*)HEAP_BASE,&hdrtmp,sizeof(hdrtmp));
    //设置栈
    current->mem_struct.stack_top=STACK_TOP;
ffff80000080b742:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080b749:	ff ff ff 
ffff80000080b74c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b750:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b753:	48 be 00 f0 ff ff ff 	movabs rsi,0x7ffffffff000
ffff80000080b75a:	7f 00 00 
ffff80000080b75d:	48 89 70 40          	mov    QWORD PTR [rax+0x40],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:734
    off_t entry=0;
ffff80000080b761:	48 c7 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],0x0
ffff80000080b768:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:735
    entry=ehdr->e_entry;
ffff80000080b76c:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
ffff80000080b773:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080b777:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:736
    kmfree(tmpla);
ffff80000080b77e:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080b785:	48 89 c7             	mov    rdi,rax
ffff80000080b788:	49 89 df             	mov    r15,rbx
ffff80000080b78b:	48 b8 37 00 ee ff ff 	movabs rax,0xffffffffffee0037
ffff80000080b792:	ff ff ff 
ffff80000080b795:	48 01 d8             	add    rax,rbx
ffff80000080b798:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:737
    kmfree(shla);
ffff80000080b79a:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff80000080b7a1:	48 89 c7             	mov    rdi,rax
ffff80000080b7a4:	49 89 df             	mov    r15,rbx
ffff80000080b7a7:	48 b8 37 00 ee ff ff 	movabs rax,0xffffffffffee0037
ffff80000080b7ae:	ff ff ff 
ffff80000080b7b1:	48 01 d8             	add    rax,rbx
ffff80000080b7b4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:739
    //从系统调用返回
    return entry;
ffff80000080b7b6:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:740
}
ffff80000080b7bd:	48 81 c4 20 01 00 00 	add    rsp,0x120
ffff80000080b7c4:	5b                   	pop    rbx
ffff80000080b7c5:	41 5f                	pop    r15
ffff80000080b7c7:	5d                   	pop    rbp
ffff80000080b7c8:	c3                   	ret    

ffff80000080b7c9 <get_modid>:
get_modid():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:741
id_t get_modid(void){
ffff80000080b7c9:	f3 0f 1e fa          	endbr64 
ffff80000080b7cd:	55                   	push   rbp
ffff80000080b7ce:	48 89 e5             	mov    rbp,rsp
ffff80000080b7d1:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080b7d1 <get_modid+0x8>
ffff80000080b7d8:	49 bb 5f 7d 11 00 00 	movabs r11,0x117d5f
ffff80000080b7df:	00 00 00 
ffff80000080b7e2:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:743
    static id_t modid_d=0;
    return modid_d++;
ffff80000080b7e5:	48 ba d0 16 af ff ff 	movabs rdx,0xffffffffffaf16d0
ffff80000080b7ec:	ff ff ff 
ffff80000080b7ef:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080b7f2:	8d 4a 01             	lea    ecx,[rdx+0x1]
ffff80000080b7f5:	48 be d0 16 af ff ff 	movabs rsi,0xffffffffffaf16d0
ffff80000080b7fc:	ff ff ff 
ffff80000080b7ff:	89 0c 30             	mov    DWORD PTR [rax+rsi*1],ecx
ffff80000080b802:	89 d0                	mov    eax,edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:744
}
ffff80000080b804:	5d                   	pop    rbp
ffff80000080b805:	c3                   	ret    

ffff80000080b806 <dl_runtime_resolve>:
dl_runtime_resolve():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:745
void dl_runtime_resolve(){
ffff80000080b806:	f3 0f 1e fa          	endbr64 
ffff80000080b80a:	55                   	push   rbp
ffff80000080b80b:	48 89 e5             	mov    rbp,rsp
ffff80000080b80e:	41 57                	push   r15
ffff80000080b810:	53                   	push   rbx
ffff80000080b811:	48 83 ec 30          	sub    rsp,0x30
ffff80000080b815:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080b815 <dl_runtime_resolve+0xf>
ffff80000080b81c:	49 bb 1b 7d 11 00 00 	movabs r11,0x117d1b
ffff80000080b823:	00 00 00 
ffff80000080b826:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:748
    //获取modid
    unsigned long modid,rel_offset;
    __asm__ volatile("push %%rax\n mov 8(%%rsp),%%rax\n mov %%rax,%0":"=m"(modid));
ffff80000080b829:	50                   	push   rax
ffff80000080b82a:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
ffff80000080b82f:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:749
    __asm__ volatile("push %%rax\n mov 16(%%rsp),%%rax\n mov %%rax,%0":"=m"(rel_offset));
ffff80000080b833:	50                   	push   rax
ffff80000080b834:	48 8b 44 24 10       	mov    rax,QWORD PTR [rsp+0x10]
ffff80000080b839:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:750
    Elf64_Rel* rel=rel_offset;
ffff80000080b83d:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080b841:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:751
    int symi=ELF64_R_SYM(rel->r_info),type=ELF64_R_TYPE(rel->r_info);
ffff80000080b845:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b849:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080b84c:	ba 20 00 00 00       	mov    edx,0x20
ffff80000080b851:	89 d1                	mov    ecx,edx
ffff80000080b853:	d3 e8                	shr    eax,cl
ffff80000080b855:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
ffff80000080b858:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b85c:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080b85f:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:752
    off_t sym_off=get_sym_addr(modid,symi);
ffff80000080b862:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080b865:	48 63 d0             	movsxd rdx,eax
ffff80000080b868:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b86c:	48 89 d6             	mov    rsi,rdx
ffff80000080b86f:	48 89 c7             	mov    rdi,rax
ffff80000080b872:	49 89 df             	mov    r15,rbx
ffff80000080b875:	48 b8 a0 84 ee ff ff 	movabs rax,0xffffffffffee84a0
ffff80000080b87c:	ff ff ff 
ffff80000080b87f:	48 01 d8             	add    rax,rbx
ffff80000080b882:	ff d0                	call   rax
ffff80000080b884:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:755
    //这里假定获取符号的地址是正确的，可以不修改符号表，而是通过记录模块整体加载地址，
    //来加上偏移量获取正确的符号地址
    off_t* v_rel=rel->r_offset;
ffff80000080b888:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b88c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b88f:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:756
    switch (type)
ffff80000080b893:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff80000080b896:	83 e8 03             	sub    eax,0x3
ffff80000080b899:	83 f8 07             	cmp    eax,0x7
ffff80000080b89c:	0f 87 18 01 00 00    	ja     ffff80000080b9ba <dl_runtime_resolve+0x1b4>
ffff80000080b8a2:	89 c0                	mov    eax,eax
ffff80000080b8a4:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080b8ab:	00 
ffff80000080b8ac:	48 8d 05 a5 50 11 00 	lea    rax,[rip+0x1150a5]        # ffff800000920958 <.LC3+0x28>
ffff80000080b8b3:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff80000080b8b7:	48 8d 15 9a 50 11 00 	lea    rdx,[rip+0x11509a]        # ffff800000920958 <.LC3+0x28>
ffff80000080b8be:	48 01 d0             	add    rax,rdx
ffff80000080b8c1:	3e ff e0             	notrack jmp rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:760
    {
    case R_X86_64_GLOB_DAT:
    case R_X86_64_JUMP_SLOT:
        *v_rel=sym_off;
ffff80000080b8c4:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080b8c8:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080b8cc:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:761
        break;
ffff80000080b8cf:	e9 e7 00 00 00       	jmp    ffff80000080b9bb <dl_runtime_resolve+0x1b5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:763
    case R_X86_64_PLT32:
        *v_rel=get_sym_plt(modid,symi);
ffff80000080b8d4:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080b8d7:	48 63 d0             	movsxd rdx,eax
ffff80000080b8da:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b8de:	48 89 d6             	mov    rsi,rdx
ffff80000080b8e1:	48 89 c7             	mov    rdi,rax
ffff80000080b8e4:	49 89 df             	mov    r15,rbx
ffff80000080b8e7:	48 b8 db 85 ee ff ff 	movabs rax,0xffffffffffee85db
ffff80000080b8ee:	ff ff ff 
ffff80000080b8f1:	48 01 d8             	add    rax,rbx
ffff80000080b8f4:	ff d0                	call   rax
ffff80000080b8f6:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000080b8fa:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:764
        break;
ffff80000080b8fd:	e9 b9 00 00 00       	jmp    ffff80000080b9bb <dl_runtime_resolve+0x1b5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:766
    case R_X86_64_RELATIVE:
        *v_rel+=get_load_base(modid);
ffff80000080b902:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b906:	48 89 c7             	mov    rdi,rax
ffff80000080b909:	49 89 df             	mov    r15,rbx
ffff80000080b90c:	48 b8 02 86 ee ff ff 	movabs rax,0xffffffffffee8602
ffff80000080b913:	ff ff ff 
ffff80000080b916:	48 01 d8             	add    rax,rbx
ffff80000080b919:	ff d0                	call   rax
ffff80000080b91b:	48 89 c2             	mov    rdx,rax
ffff80000080b91e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080b922:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b925:	48 01 c2             	add    rdx,rax
ffff80000080b928:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080b92c:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:767
        break;
ffff80000080b92f:	e9 87 00 00 00       	jmp    ffff80000080b9bb <dl_runtime_resolve+0x1b5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:769
    case R_X86_64_GOTOFF:
        *v_rel+=sym_off-get_got(modid);
ffff80000080b934:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b938:	48 89 c7             	mov    rdi,rax
ffff80000080b93b:	49 89 df             	mov    r15,rbx
ffff80000080b93e:	48 b8 4a 86 ee ff ff 	movabs rax,0xffffffffffee864a
ffff80000080b945:	ff ff ff 
ffff80000080b948:	48 01 d8             	add    rax,rbx
ffff80000080b94b:	ff d0                	call   rax
ffff80000080b94d:	48 89 c2             	mov    rdx,rax
ffff80000080b950:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080b954:	48 29 d0             	sub    rax,rdx
ffff80000080b957:	48 89 c1             	mov    rcx,rax
ffff80000080b95a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080b95e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b961:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
ffff80000080b965:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080b969:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:770
        break;
ffff80000080b96c:	eb 4d                	jmp    ffff80000080b9bb <dl_runtime_resolve+0x1b5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:772
    case R_X86_64_GOTPC:
        *v_rel+=get_got(modid)-rel_offset;
ffff80000080b96e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b972:	48 89 c7             	mov    rdi,rax
ffff80000080b975:	49 89 df             	mov    r15,rbx
ffff80000080b978:	48 b8 4a 86 ee ff ff 	movabs rax,0xffffffffffee864a
ffff80000080b97f:	ff ff ff 
ffff80000080b982:	48 01 d8             	add    rax,rbx
ffff80000080b985:	ff d0                	call   rax
ffff80000080b987:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff80000080b98b:	48 29 d0             	sub    rax,rdx
ffff80000080b98e:	48 89 c1             	mov    rcx,rax
ffff80000080b991:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080b995:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b998:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
ffff80000080b99c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080b9a0:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:773
        break;
ffff80000080b9a3:	eb 16                	jmp    ffff80000080b9bb <dl_runtime_resolve+0x1b5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:776
    case R_X86_64_GOT32:
    //这一项,rel里面指向的符号的地址就是got
        *v_rel+=sym_off;
ffff80000080b9a5:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080b9a9:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080b9ac:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080b9b0:	48 01 c2             	add    rdx,rax
ffff80000080b9b3:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080b9b7:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:778
    default:
        break;
ffff80000080b9ba:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:782
    }
    //重定位完毕，直接返回到目标地址

    __asm__ volatile("mov %0,%%rax\n mov %%rax,0(%%rsp)"::"m"(*v_rel));
ffff80000080b9bb:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080b9bf:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b9c2:	48 89 04 24          	mov    QWORD PTR [rsp],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:783
}
ffff80000080b9c6:	90                   	nop
ffff80000080b9c7:	48 83 c4 30          	add    rsp,0x30
ffff80000080b9cb:	5b                   	pop    rbx
ffff80000080b9cc:	41 5f                	pop    r15
ffff80000080b9ce:	5d                   	pop    rbp
ffff80000080b9cf:	c3                   	ret    

ffff80000080b9d0 <get_sym_addr>:
get_sym_addr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:784
off_t get_sym_addr(unsigned long modid,unsigned long symi){
ffff80000080b9d0:	f3 0f 1e fa          	endbr64 
ffff80000080b9d4:	55                   	push   rbp
ffff80000080b9d5:	48 89 e5             	mov    rbp,rsp
ffff80000080b9d8:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080b9d8 <get_sym_addr+0x8>
ffff80000080b9df:	49 bb 58 7b 11 00 00 	movabs r11,0x117b58
ffff80000080b9e6:	00 00 00 
ffff80000080b9e9:	4c 01 d8             	add    rax,r11
ffff80000080b9ec:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff80000080b9f0:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:785
    struct Elf64_Sym *sym=modules[modid].p_symbol;
ffff80000080b9f4:	48 ba a0 fd ff ff ff 	movabs rdx,0xfffffffffffffda0
ffff80000080b9fb:	ff ff ff 
ffff80000080b9fe:	48 8b 34 10          	mov    rsi,QWORD PTR [rax+rdx*1]
ffff80000080ba02:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff80000080ba06:	48 89 ca             	mov    rdx,rcx
ffff80000080ba09:	48 c1 e2 03          	shl    rdx,0x3
ffff80000080ba0d:	48 29 ca             	sub    rdx,rcx
ffff80000080ba10:	48 c1 e2 03          	shl    rdx,0x3
ffff80000080ba14:	48 01 f2             	add    rdx,rsi
ffff80000080ba17:	48 83 c2 28          	add    rdx,0x28
ffff80000080ba1b:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080ba1e:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:786
    sym+=symi;
ffff80000080ba22:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffff80000080ba26:	48 89 ca             	mov    rdx,rcx
ffff80000080ba29:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080ba2d:	48 01 ca             	add    rdx,rcx
ffff80000080ba30:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080ba34:	48 01 55 f0          	add    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:792
    if(sym->st_shndx==SHN_COMMON){
        //还没分配空间的符号，需要分配空间，st_value表示地址对齐约束

    }

    off_t symaddr=sym->st_value+modules[modid].load_offset;
ffff80000080ba38:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080ba3c:	48 8b 72 04          	mov    rsi,QWORD PTR [rdx+0x4]
ffff80000080ba40:	48 ba a0 fd ff ff ff 	movabs rdx,0xfffffffffffffda0
ffff80000080ba47:	ff ff ff 
ffff80000080ba4a:	48 8b 3c 10          	mov    rdi,QWORD PTR [rax+rdx*1]
ffff80000080ba4e:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff80000080ba52:	48 89 ca             	mov    rdx,rcx
ffff80000080ba55:	48 c1 e2 03          	shl    rdx,0x3
ffff80000080ba59:	48 29 ca             	sub    rdx,rcx
ffff80000080ba5c:	48 c1 e2 03          	shl    rdx,0x3
ffff80000080ba60:	48 01 fa             	add    rdx,rdi
ffff80000080ba63:	48 83 c2 08          	add    rdx,0x8
ffff80000080ba67:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080ba6a:	48 01 f2             	add    rdx,rsi
ffff80000080ba6d:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:793
    if(modules[modid].type==ET_DYN){
ffff80000080ba71:	48 ba a0 fd ff ff ff 	movabs rdx,0xfffffffffffffda0
ffff80000080ba78:	ff ff ff 
ffff80000080ba7b:	48 8b 34 10          	mov    rsi,QWORD PTR [rax+rdx*1]
ffff80000080ba7f:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff80000080ba83:	48 89 ca             	mov    rdx,rcx
ffff80000080ba86:	48 c1 e2 03          	shl    rdx,0x3
ffff80000080ba8a:	48 29 ca             	sub    rdx,rcx
ffff80000080ba8d:	48 c1 e2 03          	shl    rdx,0x3
ffff80000080ba91:	48 01 f2             	add    rdx,rsi
ffff80000080ba94:	48 83 c2 18          	add    rdx,0x18
ffff80000080ba98:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080ba9b:	48 83 fa 03          	cmp    rdx,0x3
ffff80000080ba9f:	75 64                	jne    ffff80000080bb05 <get_sym_addr+0x135>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:795
        //还要加上节地址
        Elf64_Ehdr* ehdr=modules[modid].header;
ffff80000080baa1:	48 ba a0 fd ff ff ff 	movabs rdx,0xfffffffffffffda0
ffff80000080baa8:	ff ff ff 
ffff80000080baab:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080baaf:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080bab3:	48 89 d0             	mov    rax,rdx
ffff80000080bab6:	48 c1 e0 03          	shl    rax,0x3
ffff80000080baba:	48 29 d0             	sub    rax,rdx
ffff80000080babd:	48 c1 e0 03          	shl    rax,0x3
ffff80000080bac1:	48 01 c8             	add    rax,rcx
ffff80000080bac4:	48 83 c0 10          	add    rax,0x10
ffff80000080bac8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080bacb:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:796
        struct Elf64_Shdr* shdr=ehdr->e_shoff;
ffff80000080bacf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080bad3:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080bad7:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:797
        symaddr+=shdr[sym->st_shndx].sh_addr;
ffff80000080badb:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080badf:	0f b7 40 12          	movzx  eax,WORD PTR [rax+0x12]
ffff80000080bae3:	0f b7 d0             	movzx  edx,ax
ffff80000080bae6:	48 89 d0             	mov    rax,rdx
ffff80000080bae9:	48 01 c0             	add    rax,rax
ffff80000080baec:	48 01 d0             	add    rax,rdx
ffff80000080baef:	48 c1 e0 04          	shl    rax,0x4
ffff80000080baf3:	48 89 c2             	mov    rdx,rax
ffff80000080baf6:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bafa:	48 01 d0             	add    rax,rdx
ffff80000080bafd:	48 8b 40 0c          	mov    rax,QWORD PTR [rax+0xc]
ffff80000080bb01:	48 01 45 f8          	add    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:799
    }
    return symaddr;
ffff80000080bb05:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:800
}
ffff80000080bb09:	5d                   	pop    rbp
ffff80000080bb0a:	c3                   	ret    

ffff80000080bb0b <get_sym_plt>:
get_sym_plt():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:801
off_t get_sym_plt(unsigned long modid,unsigned long symi){
ffff80000080bb0b:	f3 0f 1e fa          	endbr64 
ffff80000080bb0f:	55                   	push   rbp
ffff80000080bb10:	48 89 e5             	mov    rbp,rsp
ffff80000080bb13:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080bb13 <get_sym_plt+0x8>
ffff80000080bb1a:	49 bb 1d 7a 11 00 00 	movabs r11,0x117a1d
ffff80000080bb21:	00 00 00 
ffff80000080bb24:	4c 01 d8             	add    rax,r11
ffff80000080bb27:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080bb2b:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:803

}
ffff80000080bb2f:	90                   	nop
ffff80000080bb30:	5d                   	pop    rbp
ffff80000080bb31:	c3                   	ret    

ffff80000080bb32 <get_load_base>:
get_load_base():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:804
off_t get_load_base(unsigned long modid){
ffff80000080bb32:	f3 0f 1e fa          	endbr64 
ffff80000080bb36:	55                   	push   rbp
ffff80000080bb37:	48 89 e5             	mov    rbp,rsp
ffff80000080bb3a:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080bb3a <get_load_base+0x8>
ffff80000080bb41:	49 bb f6 79 11 00 00 	movabs r11,0x1179f6
ffff80000080bb48:	00 00 00 
ffff80000080bb4b:	4c 01 d8             	add    rax,r11
ffff80000080bb4e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:805
    return modules[modid].base;
ffff80000080bb52:	48 ba a0 fd ff ff ff 	movabs rdx,0xfffffffffffffda0
ffff80000080bb59:	ff ff ff 
ffff80000080bb5c:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080bb60:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080bb64:	48 89 d0             	mov    rax,rdx
ffff80000080bb67:	48 c1 e0 03          	shl    rax,0x3
ffff80000080bb6b:	48 29 d0             	sub    rax,rdx
ffff80000080bb6e:	48 c1 e0 03          	shl    rax,0x3
ffff80000080bb72:	48 01 c8             	add    rax,rcx
ffff80000080bb75:	48 8b 00             	mov    rax,QWORD PTR [rax]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:806
}
ffff80000080bb78:	5d                   	pop    rbp
ffff80000080bb79:	c3                   	ret    

ffff80000080bb7a <get_got>:
get_got():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:807
off_t get_got(unsigned long modid){
ffff80000080bb7a:	f3 0f 1e fa          	endbr64 
ffff80000080bb7e:	55                   	push   rbp
ffff80000080bb7f:	48 89 e5             	mov    rbp,rsp
ffff80000080bb82:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080bb82 <get_got+0x8>
ffff80000080bb89:	49 bb ae 79 11 00 00 	movabs r11,0x1179ae
ffff80000080bb90:	00 00 00 
ffff80000080bb93:	4c 01 d8             	add    rax,r11
ffff80000080bb96:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:808
    return modules[modid].p_got;
ffff80000080bb9a:	48 ba a0 fd ff ff ff 	movabs rdx,0xfffffffffffffda0
ffff80000080bba1:	ff ff ff 
ffff80000080bba4:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080bba8:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080bbac:	48 89 d0             	mov    rax,rdx
ffff80000080bbaf:	48 c1 e0 03          	shl    rax,0x3
ffff80000080bbb3:	48 29 d0             	sub    rax,rdx
ffff80000080bbb6:	48 c1 e0 03          	shl    rax,0x3
ffff80000080bbba:	48 01 c8             	add    rax,rcx
ffff80000080bbbd:	48 83 c0 30          	add    rax,0x30
ffff80000080bbc1:	48 8b 00             	mov    rax,QWORD PTR [rax]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:809
}
ffff80000080bbc4:	5d                   	pop    rbp
ffff80000080bbc5:	c3                   	ret    

ffff80000080bbc6 <fill_reloc>:
fill_reloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:811

void fill_reloc(Elf64_Rel* rel,int modid){
ffff80000080bbc6:	f3 0f 1e fa          	endbr64 
ffff80000080bbca:	55                   	push   rbp
ffff80000080bbcb:	48 89 e5             	mov    rbp,rsp
ffff80000080bbce:	41 57                	push   r15
ffff80000080bbd0:	53                   	push   rbx
ffff80000080bbd1:	48 83 ec 30          	sub    rsp,0x30
ffff80000080bbd5:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080bbd5 <fill_reloc+0xf>
ffff80000080bbdc:	49 bb 5b 79 11 00 00 	movabs r11,0x11795b
ffff80000080bbe3:	00 00 00 
ffff80000080bbe6:	4c 01 db             	add    rbx,r11
ffff80000080bbe9:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff80000080bbed:	89 75 c4             	mov    DWORD PTR [rbp-0x3c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:812
    int symi=ELF64_R_SYM(rel->r_info),type=ELF64_R_TYPE(rel->r_info);
ffff80000080bbf0:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080bbf4:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080bbf7:	ba 20 00 00 00       	mov    edx,0x20
ffff80000080bbfc:	89 d1                	mov    ecx,edx
ffff80000080bbfe:	d3 e8                	shr    eax,cl
ffff80000080bc00:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
ffff80000080bc03:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080bc07:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080bc0a:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:813
    off_t sym_off=get_sym_addr(modid,symi);
ffff80000080bc0d:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080bc10:	48 63 d0             	movsxd rdx,eax
ffff80000080bc13:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080bc16:	48 98                	cdqe   
ffff80000080bc18:	48 89 d6             	mov    rsi,rdx
ffff80000080bc1b:	48 89 c7             	mov    rdi,rax
ffff80000080bc1e:	49 89 df             	mov    r15,rbx
ffff80000080bc21:	48 b8 a0 84 ee ff ff 	movabs rax,0xffffffffffee84a0
ffff80000080bc28:	ff ff ff 
ffff80000080bc2b:	48 01 d8             	add    rax,rbx
ffff80000080bc2e:	ff d0                	call   rax
ffff80000080bc30:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:816
    //这里假定获取符号的地址是正确的，可以不修改符号表，而是通过记录模块整体加载地址，
    //来加上偏移量获取正确的符号地址
    off_t* v_rel=rel->r_offset;
ffff80000080bc34:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080bc38:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080bc3b:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:817
    switch (type)
ffff80000080bc3f:	83 7d e8 0b          	cmp    DWORD PTR [rbp-0x18],0xb
ffff80000080bc43:	0f 87 57 01 00 00    	ja     ffff80000080bda0 <fill_reloc+0x1da>
ffff80000080bc49:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080bc4c:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080bc53:	00 
ffff80000080bc54:	48 8d 05 3d 4d 11 00 	lea    rax,[rip+0x114d3d]        # ffff800000920998 <.LC3+0x68>
ffff80000080bc5b:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff80000080bc5f:	48 8d 15 32 4d 11 00 	lea    rdx,[rip+0x114d32]        # ffff800000920998 <.LC3+0x68>
ffff80000080bc66:	48 01 d0             	add    rax,rdx
ffff80000080bc69:	3e ff e0             	notrack jmp rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:821
    {
    case R_X86_64_GLOB_DAT:
    case R_X86_64_JUMP_SLOT:
        *v_rel=sym_off;
ffff80000080bc6c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080bc70:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080bc74:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:822
        break;
ffff80000080bc77:	e9 25 01 00 00       	jmp    ffff80000080bda1 <fill_reloc+0x1db>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:824
    case R_X86_64_PLT32:
        *v_rel=get_sym_plt(modid,symi);
ffff80000080bc7c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080bc7f:	48 63 d0             	movsxd rdx,eax
ffff80000080bc82:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080bc85:	48 98                	cdqe   
ffff80000080bc87:	48 89 d6             	mov    rsi,rdx
ffff80000080bc8a:	48 89 c7             	mov    rdi,rax
ffff80000080bc8d:	49 89 df             	mov    r15,rbx
ffff80000080bc90:	48 b8 db 85 ee ff ff 	movabs rax,0xffffffffffee85db
ffff80000080bc97:	ff ff ff 
ffff80000080bc9a:	48 01 d8             	add    rax,rbx
ffff80000080bc9d:	ff d0                	call   rax
ffff80000080bc9f:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080bca3:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:825
        break;
ffff80000080bca6:	e9 f6 00 00 00       	jmp    ffff80000080bda1 <fill_reloc+0x1db>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:827
    case R_X86_64_RELATIVE:
        *v_rel+=get_load_base(modid);
ffff80000080bcab:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080bcae:	48 98                	cdqe   
ffff80000080bcb0:	48 89 c7             	mov    rdi,rax
ffff80000080bcb3:	49 89 df             	mov    r15,rbx
ffff80000080bcb6:	48 b8 02 86 ee ff ff 	movabs rax,0xffffffffffee8602
ffff80000080bcbd:	ff ff ff 
ffff80000080bcc0:	48 01 d8             	add    rax,rbx
ffff80000080bcc3:	ff d0                	call   rax
ffff80000080bcc5:	48 89 c2             	mov    rdx,rax
ffff80000080bcc8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080bccc:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080bccf:	48 01 c2             	add    rdx,rax
ffff80000080bcd2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080bcd6:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:828
        break;
ffff80000080bcd9:	e9 c3 00 00 00       	jmp    ffff80000080bda1 <fill_reloc+0x1db>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:830
    case R_X86_64_GOTOFF:
        *v_rel+=sym_off-get_got(modid);
ffff80000080bcde:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080bce1:	48 98                	cdqe   
ffff80000080bce3:	48 89 c7             	mov    rdi,rax
ffff80000080bce6:	49 89 df             	mov    r15,rbx
ffff80000080bce9:	48 b8 4a 86 ee ff ff 	movabs rax,0xffffffffffee864a
ffff80000080bcf0:	ff ff ff 
ffff80000080bcf3:	48 01 d8             	add    rax,rbx
ffff80000080bcf6:	ff d0                	call   rax
ffff80000080bcf8:	48 89 c2             	mov    rdx,rax
ffff80000080bcfb:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bcff:	48 29 d0             	sub    rax,rdx
ffff80000080bd02:	48 89 c1             	mov    rcx,rax
ffff80000080bd05:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080bd09:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080bd0c:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
ffff80000080bd10:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080bd14:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:831
        break;
ffff80000080bd17:	e9 85 00 00 00       	jmp    ffff80000080bda1 <fill_reloc+0x1db>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:833
    case R_X86_64_GOTPC:
        *v_rel+=get_got(modid)-(off_t)rel;
ffff80000080bd1c:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080bd1f:	48 98                	cdqe   
ffff80000080bd21:	48 89 c7             	mov    rdi,rax
ffff80000080bd24:	49 89 df             	mov    r15,rbx
ffff80000080bd27:	48 b8 4a 86 ee ff ff 	movabs rax,0xffffffffffee864a
ffff80000080bd2e:	ff ff ff 
ffff80000080bd31:	48 01 d8             	add    rax,rbx
ffff80000080bd34:	ff d0                	call   rax
ffff80000080bd36:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080bd3a:	48 29 d0             	sub    rax,rdx
ffff80000080bd3d:	48 89 c1             	mov    rcx,rax
ffff80000080bd40:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080bd44:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080bd47:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
ffff80000080bd4b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080bd4f:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:834
        break;
ffff80000080bd52:	eb 4d                	jmp    ffff80000080bda1 <fill_reloc+0x1db>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:837
    case R_X86_64_GOT32:
    //这一项,rel里面指向的符号的地址就是got
        *v_rel+=sym_off;
ffff80000080bd54:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080bd58:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080bd5b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bd5f:	48 01 c2             	add    rdx,rax
ffff80000080bd62:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080bd66:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:838
        break;
ffff80000080bd69:	eb 36                	jmp    ffff80000080bda1 <fill_reloc+0x1db>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:841
    case R_X86_64_32S:
    case R_X86_64_64:
        *v_rel+=sym_off;
ffff80000080bd6b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080bd6f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080bd72:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bd76:	48 01 c2             	add    rdx,rax
ffff80000080bd79:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080bd7d:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:842
        break;
ffff80000080bd80:	eb 1f                	jmp    ffff80000080bda1 <fill_reloc+0x1db>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:844
    case R_X86_64_PC32:
        *v_rel+=sym_off-(off_t)rel;
ffff80000080bd82:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080bd86:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080bd89:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
ffff80000080bd8d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bd91:	48 29 c8             	sub    rax,rcx
ffff80000080bd94:	48 01 c2             	add    rdx,rax
ffff80000080bd97:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080bd9b:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:845
        break;
ffff80000080bd9e:	eb 01                	jmp    ffff80000080bda1 <fill_reloc+0x1db>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:847
    default:
        break;
ffff80000080bda0:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:849
    }
ffff80000080bda1:	90                   	nop
ffff80000080bda2:	48 83 c4 30          	add    rsp,0x30
ffff80000080bda6:	5b                   	pop    rbx
ffff80000080bda7:	41 5f                	pop    r15
ffff80000080bda9:	5d                   	pop    rbp
ffff80000080bdaa:	c3                   	ret    
ffff80000080bdab:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

ffff80000080bdb0 <_syscall>:
_syscall():
ffff80000080bdb0:	55                   	push   rbp
ffff80000080bdb1:	48 bd 00 80 10 00 00 	movabs rbp,0xffff800000108000
ffff80000080bdb8:	80 ff ff 
ffff80000080bdbb:	48 89 65 14          	mov    QWORD PTR [rbp+0x14],rsp
ffff80000080bdbf:	48 8b 65 24          	mov    rsp,QWORD PTR [rbp+0x24]
ffff80000080bdc3:	6a 2b                	push   0x2b
ffff80000080bdc5:	54                   	push   rsp
ffff80000080bdc6:	9c                   	pushf  
ffff80000080bdc7:	6a 33                	push   0x33
ffff80000080bdc9:	51                   	push   rcx
ffff80000080bdca:	50                   	push   rax
ffff80000080bdcb:	53                   	push   rbx
ffff80000080bdcc:	51                   	push   rcx
ffff80000080bdcd:	52                   	push   rdx
ffff80000080bdce:	57                   	push   rdi
ffff80000080bdcf:	56                   	push   rsi
ffff80000080bdd0:	41 50                	push   r8
ffff80000080bdd2:	41 51                	push   r9
ffff80000080bdd4:	41 52                	push   r10
ffff80000080bdd6:	41 53                	push   r11
ffff80000080bdd8:	41 54                	push   r12
ffff80000080bdda:	41 55                	push   r13
ffff80000080bddc:	41 56                	push   r14
ffff80000080bdde:	41 57                	push   r15
ffff80000080bde0:	66 8c c0             	mov    ax,es
ffff80000080bde3:	50                   	push   rax
ffff80000080bde4:	66 8c d8             	mov    ax,ds
ffff80000080bde7:	50                   	push   rax
ffff80000080bde8:	66 b8 10 00          	mov    ax,0x10
ffff80000080bdec:	8e c0                	mov    es,eax
ffff80000080bdee:	8e d8                	mov    ds,eax
ffff80000080bdf0:	48 8b 44 24 78       	mov    rax,QWORD PTR [rsp+0x78]
ffff80000080bdf5:	41 53                	push   r11
ffff80000080bdf7:	51                   	push   rcx
ffff80000080bdf8:	49 87 ca             	xchg   r10,rcx
ffff80000080bdfb:	57                   	push   rdi
ffff80000080bdfc:	48 bf 48 03 40 00 00 	movabs rdi,0xffff800000400348
ffff80000080be03:	80 ff ff 
ffff80000080be06:	48 8b 3f             	mov    rdi,QWORD PTR [rdi]
ffff80000080be09:	4c 89 97 6c 02 00 00 	mov    QWORD PTR [rdi+0x26c],r10
ffff80000080be10:	5f                   	pop    rdi
ffff80000080be11:	e8 2d 4d ff ff       	call   ffff800000800b43 <syscall>

ffff80000080be16 <_syscall_sysret>:
_syscall_sysret():
ffff80000080be16:	4c 87 d1             	xchg   rcx,r10
ffff80000080be19:	59                   	pop    rcx
ffff80000080be1a:	41 5b                	pop    r11
ffff80000080be1c:	58                   	pop    rax
ffff80000080be1d:	8e d8                	mov    ds,eax
ffff80000080be1f:	58                   	pop    rax
ffff80000080be20:	8e c0                	mov    es,eax
ffff80000080be22:	41 5f                	pop    r15
ffff80000080be24:	41 5e                	pop    r14
ffff80000080be26:	41 5d                	pop    r13
ffff80000080be28:	41 5c                	pop    r12
ffff80000080be2a:	41 5b                	pop    r11
ffff80000080be2c:	41 5a                	pop    r10
ffff80000080be2e:	41 59                	pop    r9
ffff80000080be30:	41 58                	pop    r8
ffff80000080be32:	5e                   	pop    rsi
ffff80000080be33:	5f                   	pop    rdi
ffff80000080be34:	5a                   	pop    rdx
ffff80000080be35:	59                   	pop    rcx
ffff80000080be36:	5b                   	pop    rbx
ffff80000080be37:	48 83 c4 08          	add    rsp,0x8
ffff80000080be3b:	48 8b 65 14          	mov    rsp,QWORD PTR [rbp+0x14]
ffff80000080be3f:	5d                   	pop    rbp
ffff80000080be40:	fb                   	sti    
ffff80000080be41:	48 0f 07             	sysretq 

ffff80000080be44 <init_framebuffer>:
init_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:29
static u32 bytes_per_glyph, glyph_nr;
static char *text_buffer;
static int txtbfh=0,txtbft=0,max_chs=0;
int font_size=1;
void init_framebuffer()
{
ffff80000080be44:	f3 0f 1e fa          	endbr64 
ffff80000080be48:	55                   	push   rbp
ffff80000080be49:	48 89 e5             	mov    rbp,rsp
ffff80000080be4c:	41 57                	push   r15
ffff80000080be4e:	53                   	push   rbx
ffff80000080be4f:	48 83 ec 50          	sub    rsp,0x50
ffff80000080be53:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080be53 <init_framebuffer+0xf>
ffff80000080be5a:	49 bb dd 76 11 00 00 	movabs r11,0x1176dd
ffff80000080be61:	00 00 00 
ffff80000080be64:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:31
    //映射页帧内存
    size_t w=framebuffer.common.framebuffer_width;
ffff80000080be67:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff80000080be6e:	ff ff ff 
ffff80000080be71:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080be75:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
ffff80000080be78:	89 c0                	mov    eax,eax
ffff80000080be7a:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:32
    size_t h=framebuffer.common.framebuffer_height;
ffff80000080be7e:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff80000080be85:	ff ff ff 
ffff80000080be88:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080be8c:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff80000080be8f:	89 c0                	mov    eax,eax
ffff80000080be91:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:33
    size_t bypp=framebuffer.common.framebuffer_bpp/8;
ffff80000080be95:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff80000080be9c:	ff ff ff 
ffff80000080be9f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080bea3:	0f b6 40 1c          	movzx  eax,BYTE PTR [rax+0x1c]
ffff80000080bea7:	c0 e8 03             	shr    al,0x3
ffff80000080beaa:	0f b6 c0             	movzx  eax,al
ffff80000080bead:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:34
    size_t inter=framebuffer.common.framebuffer_pitch;
ffff80000080beb1:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff80000080beb8:	ff ff ff 
ffff80000080bebb:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080bebf:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff80000080bec2:	89 c0                	mov    eax,eax
ffff80000080bec4:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:35
    size_t pc=w*h;
ffff80000080bec8:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080becc:	48 0f af 45 c8       	imul   rax,QWORD PTR [rbp-0x38]
ffff80000080bed1:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:36
    size_t size=h*inter;
ffff80000080bed5:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080bed9:	48 0f af 45 b8       	imul   rax,QWORD PTR [rbp-0x48]
ffff80000080bede:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:37
    int pgc=size/PAGE_SIZE;
ffff80000080bee2:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080bee6:	48 c1 e8 0c          	shr    rax,0xc
ffff80000080beea:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:38
    addr_t p=FRAMEBUFFER_ADDR;
ffff80000080beed:	48 b8 00 00 00 40 00 	movabs rax,0xffff800040000000
ffff80000080bef4:	80 ff ff 
ffff80000080bef7:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:39
    addr_t pp=framebuffer.common.framebuffer_addr;
ffff80000080befb:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff80000080bf02:	ff ff ff 
ffff80000080bf05:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080bf09:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080bf0d:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:40
    for (size_t i = 0; i < pgc; i++)
ffff80000080bf11:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff80000080bf18:	00 
ffff80000080bf19:	eb 44                	jmp    ffff80000080bf5f <init_framebuffer+0x11b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:42 (discriminator 3)
    {
        smmap(pp,p,PAGE_PRESENT|PAGE_RWX|PAGE_FOR_ALL,PML4_ADDR);
ffff80000080bf1b:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
ffff80000080bf1f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bf23:	48 ba 00 10 10 00 00 	movabs rdx,0xffff800000101000
ffff80000080bf2a:	80 ff ff 
ffff80000080bf2d:	48 89 d1             	mov    rcx,rdx
ffff80000080bf30:	ba 07 00 00 00       	mov    edx,0x7
ffff80000080bf35:	48 89 c7             	mov    rdi,rax
ffff80000080bf38:	49 89 df             	mov    r15,rbx
ffff80000080bf3b:	48 b8 9c e8 ed ff ff 	movabs rax,0xffffffffffede89c
ffff80000080bf42:	ff ff ff 
ffff80000080bf45:	48 01 d8             	add    rax,rbx
ffff80000080bf48:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:43 (discriminator 3)
        pp+=PAGE_SIZE;
ffff80000080bf4a:	48 81 45 e0 00 10 00 	add    QWORD PTR [rbp-0x20],0x1000
ffff80000080bf51:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:44 (discriminator 3)
        p+=PAGE_SIZE;
ffff80000080bf52:	48 81 45 e8 00 10 00 	add    QWORD PTR [rbp-0x18],0x1000
ffff80000080bf59:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:40 (discriminator 3)
    for (size_t i = 0; i < pgc; i++)
ffff80000080bf5a:	48 83 45 d8 01       	add    QWORD PTR [rbp-0x28],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:40 (discriminator 1)
ffff80000080bf5f:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
ffff80000080bf62:	48 98                	cdqe   
ffff80000080bf64:	48 39 45 d8          	cmp    QWORD PTR [rbp-0x28],rax
ffff80000080bf68:	72 b1                	jb     ffff80000080bf1b <init_framebuffer+0xd7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:47
    }
    
}
ffff80000080bf6a:	90                   	nop
ffff80000080bf6b:	90                   	nop
ffff80000080bf6c:	48 83 c4 50          	add    rsp,0x50
ffff80000080bf70:	5b                   	pop    rbx
ffff80000080bf71:	41 5f                	pop    r15
ffff80000080bf73:	5d                   	pop    rbp
ffff80000080bf74:	c3                   	ret    

ffff80000080bf75 <init_font>:
init_font():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:48
void init_font(){
ffff80000080bf75:	f3 0f 1e fa          	endbr64 
ffff80000080bf79:	55                   	push   rbp
ffff80000080bf7a:	48 89 e5             	mov    rbp,rsp
ffff80000080bf7d:	41 57                	push   r15
ffff80000080bf7f:	53                   	push   rbx
ffff80000080bf80:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080bf80 <init_font+0xb>
ffff80000080bf87:	49 bb b0 75 11 00 00 	movabs r11,0x1175b0
ffff80000080bf8e:	00 00 00 
ffff80000080bf91:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:49
    boot_font = (struct psf2_header*) (_binary_res_font_psf_start);
ffff80000080bf94:	48 b8 30 17 af ff ff 	movabs rax,0xffffffffffaf1730
ffff80000080bf9b:	ff ff ff 
ffff80000080bf9e:	48 ba 38 fd ff ff ff 	movabs rdx,0xfffffffffffffd38
ffff80000080bfa5:	ff ff ff 
ffff80000080bfa8:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080bfac:	48 89 14 03          	mov    QWORD PTR [rbx+rax*1],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:51

    font_width_bytes = (boot_font->width + 7) / 8;
ffff80000080bfb0:	48 b8 30 17 af ff ff 	movabs rax,0xffffffffffaf1730
ffff80000080bfb7:	ff ff ff 
ffff80000080bfba:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080bfbe:	8b 40 1c             	mov    eax,DWORD PTR [rax+0x1c]
ffff80000080bfc1:	83 c0 07             	add    eax,0x7
ffff80000080bfc4:	c1 e8 03             	shr    eax,0x3
ffff80000080bfc7:	89 c2                	mov    edx,eax
ffff80000080bfc9:	48 b8 40 17 af ff ff 	movabs rax,0xffffffffffaf1740
ffff80000080bfd0:	ff ff ff 
ffff80000080bfd3:	89 14 03             	mov    DWORD PTR [rbx+rax*1],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:52
    font_width = font_width_bytes * 8;
ffff80000080bfd6:	48 b8 40 17 af ff ff 	movabs rax,0xffffffffffaf1740
ffff80000080bfdd:	ff ff ff 
ffff80000080bfe0:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080bfe3:	8d 14 c5 00 00 00 00 	lea    edx,[rax*8+0x0]
ffff80000080bfea:	48 b8 38 17 af ff ff 	movabs rax,0xffffffffffaf1738
ffff80000080bff1:	ff ff ff 
ffff80000080bff4:	89 14 03             	mov    DWORD PTR [rbx+rax*1],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:53
    font_height = boot_font->height;
ffff80000080bff7:	48 b8 30 17 af ff ff 	movabs rax,0xffffffffffaf1730
ffff80000080bffe:	ff ff ff 
ffff80000080c001:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080c005:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff80000080c008:	48 ba 3c 17 af ff ff 	movabs rdx,0xffffffffffaf173c
ffff80000080c00f:	ff ff ff 
ffff80000080c012:	89 04 13             	mov    DWORD PTR [rbx+rdx*1],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:55

    glyph_table = (u8*)(_binary_res_font_psf_start)+boot_font->header_size;
ffff80000080c015:	48 b8 30 17 af ff ff 	movabs rax,0xffffffffffaf1730
ffff80000080c01c:	ff ff ff 
ffff80000080c01f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080c023:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080c026:	89 c2                	mov    edx,eax
ffff80000080c028:	48 b8 38 fd ff ff ff 	movabs rax,0xfffffffffffffd38
ffff80000080c02f:	ff ff ff 
ffff80000080c032:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080c036:	48 01 c2             	add    rdx,rax
ffff80000080c039:	48 b8 48 17 af ff ff 	movabs rax,0xffffffffffaf1748
ffff80000080c040:	ff ff ff 
ffff80000080c043:	48 89 14 03          	mov    QWORD PTR [rbx+rax*1],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:56
    glyph_nr = boot_font->glyph_nr;
ffff80000080c047:	48 b8 30 17 af ff ff 	movabs rax,0xffffffffffaf1730
ffff80000080c04e:	ff ff ff 
ffff80000080c051:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080c055:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff80000080c058:	48 ba 54 17 af ff ff 	movabs rdx,0xffffffffffaf1754
ffff80000080c05f:	ff ff ff 
ffff80000080c062:	89 04 13             	mov    DWORD PTR [rbx+rdx*1],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:57
    bytes_per_glyph = boot_font->bytes_per_glyph;
ffff80000080c065:	48 b8 30 17 af ff ff 	movabs rax,0xffffffffffaf1730
ffff80000080c06c:	ff ff ff 
ffff80000080c06f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080c073:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
ffff80000080c076:	48 ba 50 17 af ff ff 	movabs rdx,0xffffffffffaf1750
ffff80000080c07d:	ff ff ff 
ffff80000080c080:	89 04 13             	mov    DWORD PTR [rbx+rdx*1],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:59

    fb_cursor_x = fb_cursor_y = 0;
ffff80000080c083:	48 b8 20 17 af ff ff 	movabs rax,0xffffffffffaf1720
ffff80000080c08a:	ff ff ff 
ffff80000080c08d:	c7 04 03 00 00 00 00 	mov    DWORD PTR [rbx+rax*1],0x0
ffff80000080c094:	48 b8 20 17 af ff ff 	movabs rax,0xffffffffffaf1720
ffff80000080c09b:	ff ff ff 
ffff80000080c09e:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080c0a1:	48 ba 1c 17 af ff ff 	movabs rdx,0xffffffffffaf171c
ffff80000080c0a8:	ff ff ff 
ffff80000080c0ab:	89 04 13             	mov    DWORD PTR [rbx+rdx*1],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:60
    max_ch_nr_x = framebuffer.common.framebuffer_width / font_width;
ffff80000080c0ae:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff80000080c0b5:	ff ff ff 
ffff80000080c0b8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080c0bc:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
ffff80000080c0bf:	48 ba 38 17 af ff ff 	movabs rdx,0xffffffffffaf1738
ffff80000080c0c6:	ff ff ff 
ffff80000080c0c9:	8b 0c 13             	mov    ecx,DWORD PTR [rbx+rdx*1]
ffff80000080c0cc:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080c0d1:	f7 f1                	div    ecx
ffff80000080c0d3:	89 c2                	mov    edx,eax
ffff80000080c0d5:	48 b8 24 17 af ff ff 	movabs rax,0xffffffffffaf1724
ffff80000080c0dc:	ff ff ff 
ffff80000080c0df:	89 14 03             	mov    DWORD PTR [rbx+rax*1],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:61
    max_ch_nr_y = framebuffer.common.framebuffer_height / font_height;
ffff80000080c0e2:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff80000080c0e9:	ff ff ff 
ffff80000080c0ec:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080c0f0:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff80000080c0f3:	48 ba 3c 17 af ff ff 	movabs rdx,0xffffffffffaf173c
ffff80000080c0fa:	ff ff ff 
ffff80000080c0fd:	8b 34 13             	mov    esi,DWORD PTR [rbx+rdx*1]
ffff80000080c100:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080c105:	f7 f6                	div    esi
ffff80000080c107:	89 c2                	mov    edx,eax
ffff80000080c109:	48 b8 28 17 af ff ff 	movabs rax,0xffffffffffaf1728
ffff80000080c110:	ff ff ff 
ffff80000080c113:	89 14 03             	mov    DWORD PTR [rbx+rax*1],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:62
    font_size=1;
ffff80000080c116:	48 b8 c8 fd ff ff ff 	movabs rax,0xfffffffffffffdc8
ffff80000080c11d:	ff ff ff 
ffff80000080c120:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080c124:	c7 00 01 00 00 00    	mov    DWORD PTR [rax],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:63
    max_chs=max_ch_nr_x*max_ch_nr_y*2;
ffff80000080c12a:	48 b8 24 17 af ff ff 	movabs rax,0xffffffffffaf1724
ffff80000080c131:	ff ff ff 
ffff80000080c134:	8b 14 03             	mov    edx,DWORD PTR [rbx+rax*1]
ffff80000080c137:	48 b8 28 17 af ff ff 	movabs rax,0xffffffffffaf1728
ffff80000080c13e:	ff ff ff 
ffff80000080c141:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080c144:	0f af c2             	imul   eax,edx
ffff80000080c147:	01 c0                	add    eax,eax
ffff80000080c149:	89 c2                	mov    edx,eax
ffff80000080c14b:	48 b8 68 17 af ff ff 	movabs rax,0xffffffffffaf1768
ffff80000080c152:	ff ff ff 
ffff80000080c155:	89 14 03             	mov    DWORD PTR [rbx+rax*1],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:64
    text_buffer=kmalloc(0, max_chs);
ffff80000080c158:	48 b8 68 17 af ff ff 	movabs rax,0xffffffffffaf1768
ffff80000080c15f:	ff ff ff 
ffff80000080c162:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080c165:	48 98                	cdqe   
ffff80000080c167:	48 89 c6             	mov    rsi,rax
ffff80000080c16a:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080c16f:	49 89 df             	mov    r15,rbx
ffff80000080c172:	48 b8 96 fe ed ff ff 	movabs rax,0xffffffffffedfe96
ffff80000080c179:	ff ff ff 
ffff80000080c17c:	48 01 d8             	add    rax,rbx
ffff80000080c17f:	ff d0                	call   rax
ffff80000080c181:	48 ba 58 17 af ff ff 	movabs rdx,0xffffffffffaf1758
ffff80000080c188:	ff ff ff 
ffff80000080c18b:	48 89 04 13          	mov    QWORD PTR [rbx+rdx*1],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:66
    
}
ffff80000080c18f:	90                   	nop
ffff80000080c190:	5b                   	pop    rbx
ffff80000080c191:	41 5f                	pop    r15
ffff80000080c193:	5d                   	pop    rbp
ffff80000080c194:	c3                   	ret    

ffff80000080c195 <set_framebuffer>:
set_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:68
void set_framebuffer(struct multiboot_tag_framebuffer tag)
{
ffff80000080c195:	f3 0f 1e fa          	endbr64 
ffff80000080c199:	55                   	push   rbp
ffff80000080c19a:	48 89 e5             	mov    rbp,rsp
ffff80000080c19d:	53                   	push   rbx
ffff80000080c19e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080c19e <set_framebuffer+0x9>
ffff80000080c1a5:	49 bb 92 73 11 00 00 	movabs r11,0x117392
ffff80000080c1ac:	00 00 00 
ffff80000080c1af:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:69
    framebuffer=tag;
ffff80000080c1b2:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff80000080c1b9:	ff ff ff 
ffff80000080c1bc:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080c1c0:	48 8b 4d 10          	mov    rcx,QWORD PTR [rbp+0x10]
ffff80000080c1c4:	48 8b 5d 18          	mov    rbx,QWORD PTR [rbp+0x18]
ffff80000080c1c8:	48 89 08             	mov    QWORD PTR [rax],rcx
ffff80000080c1cb:	48 89 58 08          	mov    QWORD PTR [rax+0x8],rbx
ffff80000080c1cf:	48 8b 4d 20          	mov    rcx,QWORD PTR [rbp+0x20]
ffff80000080c1d3:	48 8b 5d 28          	mov    rbx,QWORD PTR [rbp+0x28]
ffff80000080c1d7:	48 89 48 10          	mov    QWORD PTR [rax+0x10],rcx
ffff80000080c1db:	48 89 58 18          	mov    QWORD PTR [rax+0x18],rbx
ffff80000080c1df:	48 8b 55 30          	mov    rdx,QWORD PTR [rbp+0x30]
ffff80000080c1e3:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:70
}
ffff80000080c1e7:	90                   	nop
ffff80000080c1e8:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
ffff80000080c1ec:	c9                   	leave  
ffff80000080c1ed:	c3                   	ret    

ffff80000080c1ee <fill_rect>:
fill_rect():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:72

void fill_rect(int x,int y,int w,int h,unsigned int color){
ffff80000080c1ee:	f3 0f 1e fa          	endbr64 
ffff80000080c1f2:	55                   	push   rbp
ffff80000080c1f3:	48 89 e5             	mov    rbp,rsp
ffff80000080c1f6:	4c 8d 0d f9 ff ff ff 	lea    r9,[rip+0xfffffffffffffff9]        # ffff80000080c1f6 <fill_rect+0x8>
ffff80000080c1fd:	49 bb 3a 73 11 00 00 	movabs r11,0x11733a
ffff80000080c204:	00 00 00 
ffff80000080c207:	4d 01 d9             	add    r9,r11
ffff80000080c20a:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff80000080c20d:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080c210:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff80000080c213:	89 4d d0             	mov    DWORD PTR [rbp-0x30],ecx
ffff80000080c216:	44 89 45 cc          	mov    DWORD PTR [rbp-0x34],r8d
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:73
    unsigned int* fb= (unsigned int*) FRAMEBUFFER_ADDR;
ffff80000080c21a:	48 b8 00 00 00 40 00 	movabs rax,0xffff800040000000
ffff80000080c221:	80 ff ff 
ffff80000080c224:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:75
    //目前只写32bpp
    for(int py=x;py<h+x;py++){
ffff80000080c228:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080c22b:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffff80000080c22e:	e9 82 00 00 00       	jmp    ffff80000080c2b5 <fill_rect+0xc7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:76
        for(int px=y;px<w+y;px++){
ffff80000080c233:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080c236:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffff80000080c239:	eb 69                	jmp    ffff80000080c2a4 <fill_rect+0xb6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:77 (discriminator 3)
            addr_t ptr=FRAMEBUFFER_ADDR+py*framebuffer.common.framebuffer_pitch
ffff80000080c23b:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff80000080c242:	ff ff ff 
ffff80000080c245:	49 8b 04 01          	mov    rax,QWORD PTR [r9+rax*1]
ffff80000080c249:	8b 50 10             	mov    edx,DWORD PTR [rax+0x10]
ffff80000080c24c:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000080c24f:	0f af c2             	imul   eax,edx
ffff80000080c252:	89 c1                	mov    ecx,eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:78 (discriminator 3)
                       +px*framebuffer.common.framebuffer_bpp/8;
ffff80000080c254:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff80000080c25b:	ff ff ff 
ffff80000080c25e:	49 8b 04 01          	mov    rax,QWORD PTR [r9+rax*1]
ffff80000080c262:	0f b6 40 1c          	movzx  eax,BYTE PTR [rax+0x1c]
ffff80000080c266:	0f b6 c0             	movzx  eax,al
ffff80000080c269:	0f af 45 f8          	imul   eax,DWORD PTR [rbp-0x8]
ffff80000080c26d:	8d 50 07             	lea    edx,[rax+0x7]
ffff80000080c270:	85 c0                	test   eax,eax
ffff80000080c272:	0f 48 c2             	cmovs  eax,edx
ffff80000080c275:	c1 f8 03             	sar    eax,0x3
ffff80000080c278:	48 98                	cdqe   
ffff80000080c27a:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:77 (discriminator 3)
            addr_t ptr=FRAMEBUFFER_ADDR+py*framebuffer.common.framebuffer_pitch
ffff80000080c27e:	48 b8 00 00 00 40 00 	movabs rax,0xffff800040000000
ffff80000080c285:	80 ff ff 
ffff80000080c288:	48 01 d0             	add    rax,rdx
ffff80000080c28b:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:79 (discriminator 3)
            fb=(unsigned int*)ptr;
ffff80000080c28f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c293:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:80 (discriminator 3)
            *fb=color;
ffff80000080c297:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080c29b:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000080c29e:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:76 (discriminator 3)
        for(int px=y;px<w+y;px++){
ffff80000080c2a0:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:76 (discriminator 1)
ffff80000080c2a4:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff80000080c2a7:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080c2aa:	01 d0                	add    eax,edx
ffff80000080c2ac:	39 45 f8             	cmp    DWORD PTR [rbp-0x8],eax
ffff80000080c2af:	7c 8a                	jl     ffff80000080c23b <fill_rect+0x4d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:75 (discriminator 2)
    for(int py=x;py<h+x;py++){
ffff80000080c2b1:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:75 (discriminator 1)
ffff80000080c2b5:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
ffff80000080c2b8:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080c2bb:	01 d0                	add    eax,edx
ffff80000080c2bd:	39 45 fc             	cmp    DWORD PTR [rbp-0x4],eax
ffff80000080c2c0:	0f 8c 6d ff ff ff    	jl     ffff80000080c233 <fill_rect+0x45>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:83
        }
    }
}
ffff80000080c2c6:	90                   	nop
ffff80000080c2c7:	90                   	nop
ffff80000080c2c8:	5d                   	pop    rbp
ffff80000080c2c9:	c3                   	ret    

ffff80000080c2ca <draw_text>:
draw_text():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:86
unsigned char letters[];
void draw_text(int x, int y, int size, char *str)
{
ffff80000080c2ca:	f3 0f 1e fa          	endbr64 
ffff80000080c2ce:	55                   	push   rbp
ffff80000080c2cf:	48 89 e5             	mov    rbp,rsp
ffff80000080c2d2:	41 57                	push   r15
ffff80000080c2d4:	53                   	push   rbx
ffff80000080c2d5:	48 83 ec 30          	sub    rsp,0x30
ffff80000080c2d9:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080c2d9 <draw_text+0xf>
ffff80000080c2e0:	49 bb 57 72 11 00 00 	movabs r11,0x117257
ffff80000080c2e7:	00 00 00 
ffff80000080c2ea:	4c 01 db             	add    rbx,r11
ffff80000080c2ed:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff80000080c2f0:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080c2f3:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff80000080c2f6:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:87
    int tx=x;
ffff80000080c2fa:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080c2fd:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:88
    while(*str!='\0')
ffff80000080c300:	eb 75                	jmp    ffff80000080c377 <draw_text+0xad>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:90
    {
        if(*str=='\n')
ffff80000080c302:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080c306:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080c309:	3c 0a                	cmp    al,0xa
ffff80000080c30b:	75 23                	jne    ffff80000080c330 <draw_text+0x66>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:92
        {
            y+=font_height*size;
ffff80000080c30d:	48 b8 3c 17 af ff ff 	movabs rax,0xffffffffffaf173c
ffff80000080c314:	ff ff ff 
ffff80000080c317:	8b 14 03             	mov    edx,DWORD PTR [rbx+rax*1]
ffff80000080c31a:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080c31d:	0f af d0             	imul   edx,eax
ffff80000080c320:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080c323:	01 d0                	add    eax,edx
ffff80000080c325:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:93
            tx=x;
ffff80000080c328:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080c32b:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
ffff80000080c32e:	eb 42                	jmp    ffff80000080c372 <draw_text+0xa8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:97
        }
        else
        {
            draw_letter(tx,y,size,*str);
ffff80000080c330:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080c334:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080c337:	0f be c8             	movsx  ecx,al
ffff80000080c33a:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff80000080c33d:	8b 75 d8             	mov    esi,DWORD PTR [rbp-0x28]
ffff80000080c340:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080c343:	89 c7                	mov    edi,eax
ffff80000080c345:	49 89 df             	mov    r15,rbx
ffff80000080c348:	48 b8 5d 8e ee ff ff 	movabs rax,0xffffffffffee8e5d
ffff80000080c34f:	ff ff ff 
ffff80000080c352:	48 01 d8             	add    rax,rbx
ffff80000080c355:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:98
            tx+=size*font_width;
ffff80000080c357:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff80000080c35a:	48 b8 38 17 af ff ff 	movabs rax,0xffffffffffaf1738
ffff80000080c361:	ff ff ff 
ffff80000080c364:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080c367:	0f af d0             	imul   edx,eax
ffff80000080c36a:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080c36d:	01 d0                	add    eax,edx
ffff80000080c36f:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:100
        }
        str++;
ffff80000080c372:	48 83 45 c8 01       	add    QWORD PTR [rbp-0x38],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:88
    while(*str!='\0')
ffff80000080c377:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080c37b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080c37e:	84 c0                	test   al,al
ffff80000080c380:	75 80                	jne    ffff80000080c302 <draw_text+0x38>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:102
    }
}
ffff80000080c382:	90                   	nop
ffff80000080c383:	90                   	nop
ffff80000080c384:	48 83 c4 30          	add    rsp,0x30
ffff80000080c388:	5b                   	pop    rbx
ffff80000080c389:	41 5f                	pop    r15
ffff80000080c38b:	5d                   	pop    rbp
ffff80000080c38c:	c3                   	ret    

ffff80000080c38d <draw_letter>:
draw_letter():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:103
void draw_letter(int x, volatile int y, int size, char c) {
ffff80000080c38d:	f3 0f 1e fa          	endbr64 
ffff80000080c391:	55                   	push   rbp
ffff80000080c392:	48 89 e5             	mov    rbp,rsp
ffff80000080c395:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080c395 <draw_letter+0x8>
ffff80000080c39c:	49 bb 9b 71 11 00 00 	movabs r11,0x11719b
ffff80000080c3a3:	00 00 00 
ffff80000080c3a6:	4c 01 d8             	add    rax,r11
ffff80000080c3a9:	89 7d cc             	mov    DWORD PTR [rbp-0x34],edi
ffff80000080c3ac:	89 75 c8             	mov    DWORD PTR [rbp-0x38],esi
ffff80000080c3af:	89 55 c4             	mov    DWORD PTR [rbp-0x3c],edx
ffff80000080c3b2:	89 ca                	mov    edx,ecx
ffff80000080c3b4:	88 55 c0             	mov    BYTE PTR [rbp-0x40],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:104
    u8 *glyph = glyph_table;
ffff80000080c3b7:	48 ba 48 17 af ff ff 	movabs rdx,0xffffffffffaf1748
ffff80000080c3be:	ff ff ff 
ffff80000080c3c1:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080c3c5:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:105
    if (c < glyph_nr) {
ffff80000080c3c9:	0f be 4d c0          	movsx  ecx,BYTE PTR [rbp-0x40]
ffff80000080c3cd:	48 ba 54 17 af ff ff 	movabs rdx,0xffffffffffaf1754
ffff80000080c3d4:	ff ff ff 
ffff80000080c3d7:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080c3da:	39 d1                	cmp    ecx,edx
ffff80000080c3dc:	73 1a                	jae    ffff80000080c3f8 <draw_letter+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:106
        glyph += c * bytes_per_glyph;
ffff80000080c3de:	0f be 4d c0          	movsx  ecx,BYTE PTR [rbp-0x40]
ffff80000080c3e2:	48 ba 50 17 af ff ff 	movabs rdx,0xffffffffffaf1750
ffff80000080c3e9:	ff ff ff 
ffff80000080c3ec:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080c3ef:	0f af d1             	imul   edx,ecx
ffff80000080c3f2:	89 d2                	mov    edx,edx
ffff80000080c3f4:	48 01 55 f8          	add    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:109
    }
    /* output the font to frame buffer */
    for (u32 ch_y = 0; ch_y < font_height; ch_y++) {
ffff80000080c3f8:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
ffff80000080c3ff:	e9 f8 00 00 00       	jmp    ffff80000080c4fc <draw_letter+0x16f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:110
        u8 mask = 1 << 7;
ffff80000080c404:	c6 45 f3 80          	mov    BYTE PTR [rbp-0xd],0x80
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:112

        for (u32 ch_x = 0; ch_x < font_width; ch_x++) {
ffff80000080c408:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff80000080c40f:	e9 bb 00 00 00       	jmp    ffff80000080c4cf <draw_letter+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:113
            int px=x+ch_x*size;
ffff80000080c414:	8b 55 c4             	mov    edx,DWORD PTR [rbp-0x3c]
ffff80000080c417:	89 d1                	mov    ecx,edx
ffff80000080c419:	0f af 4d ec          	imul   ecx,DWORD PTR [rbp-0x14]
ffff80000080c41d:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000080c420:	01 ca                	add    edx,ecx
ffff80000080c422:	89 55 e8             	mov    DWORD PTR [rbp-0x18],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:114
            int py=y+ch_y*size;
ffff80000080c425:	8b 55 c4             	mov    edx,DWORD PTR [rbp-0x3c]
ffff80000080c428:	89 d1                	mov    ecx,edx
ffff80000080c42a:	0f af 4d f4          	imul   ecx,DWORD PTR [rbp-0xc]
ffff80000080c42e:	8b 55 c8             	mov    edx,DWORD PTR [rbp-0x38]
ffff80000080c431:	01 ca                	add    edx,ecx
ffff80000080c433:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:115
            int* ptr=FRAMEBUFFER_ADDR+py*framebuffer.common.framebuffer_pitch
ffff80000080c436:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff80000080c43d:	ff ff ff 
ffff80000080c440:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080c444:	8b 4a 10             	mov    ecx,DWORD PTR [rdx+0x10]
ffff80000080c447:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffff80000080c44a:	0f af d1             	imul   edx,ecx
ffff80000080c44d:	89 d6                	mov    esi,edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:116
                     +px*framebuffer.common.framebuffer_bpp/8;
ffff80000080c44f:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff80000080c456:	ff ff ff 
ffff80000080c459:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080c45d:	0f b6 52 1c          	movzx  edx,BYTE PTR [rdx+0x1c]
ffff80000080c461:	0f b6 d2             	movzx  edx,dl
ffff80000080c464:	0f af 55 e8          	imul   edx,DWORD PTR [rbp-0x18]
ffff80000080c468:	8d 4a 07             	lea    ecx,[rdx+0x7]
ffff80000080c46b:	85 d2                	test   edx,edx
ffff80000080c46d:	0f 48 d1             	cmovs  edx,ecx
ffff80000080c470:	c1 fa 03             	sar    edx,0x3
ffff80000080c473:	48 63 d2             	movsxd rdx,edx
ffff80000080c476:	48 8d 0c 16          	lea    rcx,[rsi+rdx*1]
ffff80000080c47a:	48 ba 00 00 00 40 00 	movabs rdx,0xffff800040000000
ffff80000080c481:	80 ff ff 
ffff80000080c484:	48 01 ca             	add    rdx,rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:115
            int* ptr=FRAMEBUFFER_ADDR+py*framebuffer.common.framebuffer_pitch
ffff80000080c487:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:117
            if ((*(glyph + ch_x / 8) & mask) != 0) {
ffff80000080c48b:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080c48e:	c1 ea 03             	shr    edx,0x3
ffff80000080c491:	89 d1                	mov    ecx,edx
ffff80000080c493:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080c497:	48 01 ca             	add    rdx,rcx
ffff80000080c49a:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080c49d:	22 55 f3             	and    dl,BYTE PTR [rbp-0xd]
ffff80000080c4a0:	84 d2                	test   dl,dl
ffff80000080c4a2:	74 0c                	je     ffff80000080c4b0 <draw_letter+0x123>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:118
                *ptr=-1;
ffff80000080c4a4:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080c4a8:	c7 02 ff ff ff ff    	mov    DWORD PTR [rdx],0xffffffff
ffff80000080c4ae:	eb 0a                	jmp    ffff80000080c4ba <draw_letter+0x12d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:120
            } else {
                *ptr=0;
ffff80000080c4b0:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080c4b4:	c7 02 00 00 00 00    	mov    DWORD PTR [rdx],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:123
            }

            mask >>= 1;
ffff80000080c4ba:	d0 6d f3             	shr    BYTE PTR [rbp-0xd],1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:124
            if (ch_x % 8 == 0) {
ffff80000080c4bd:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080c4c0:	83 e2 07             	and    edx,0x7
ffff80000080c4c3:	85 d2                	test   edx,edx
ffff80000080c4c5:	75 04                	jne    ffff80000080c4cb <draw_letter+0x13e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:125
                mask = 1 << 7;
ffff80000080c4c7:	c6 45 f3 80          	mov    BYTE PTR [rbp-0xd],0x80
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:112 (discriminator 2)
        for (u32 ch_x = 0; ch_x < font_width; ch_x++) {
ffff80000080c4cb:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:112 (discriminator 1)
ffff80000080c4cf:	48 ba 38 17 af ff ff 	movabs rdx,0xffffffffffaf1738
ffff80000080c4d6:	ff ff ff 
ffff80000080c4d9:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080c4dc:	39 55 ec             	cmp    DWORD PTR [rbp-0x14],edx
ffff80000080c4df:	0f 82 2f ff ff ff    	jb     ffff80000080c414 <draw_letter+0x87>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:129 (discriminator 2)
            }
        }

        glyph += font_width_bytes;
ffff80000080c4e5:	48 ba 40 17 af ff ff 	movabs rdx,0xffffffffffaf1740
ffff80000080c4ec:	ff ff ff 
ffff80000080c4ef:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080c4f2:	89 d2                	mov    edx,edx
ffff80000080c4f4:	48 01 55 f8          	add    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:109 (discriminator 2)
    for (u32 ch_y = 0; ch_y < font_height; ch_y++) {
ffff80000080c4f8:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:109 (discriminator 1)
ffff80000080c4fc:	48 ba 3c 17 af ff ff 	movabs rdx,0xffffffffffaf173c
ffff80000080c503:	ff ff ff 
ffff80000080c506:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080c509:	39 55 f4             	cmp    DWORD PTR [rbp-0xc],edx
ffff80000080c50c:	0f 82 f2 fe ff ff    	jb     ffff80000080c404 <draw_letter+0x77>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:131
    }
}
ffff80000080c512:	90                   	nop
ffff80000080c513:	90                   	nop
ffff80000080c514:	5d                   	pop    rbp
ffff80000080c515:	c3                   	ret    

ffff80000080c516 <scr_up>:
scr_up():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:133
//向上滚动一个像素
void scr_up(){
ffff80000080c516:	f3 0f 1e fa          	endbr64 
ffff80000080c51a:	55                   	push   rbp
ffff80000080c51b:	48 89 e5             	mov    rbp,rsp
ffff80000080c51e:	41 57                	push   r15
ffff80000080c520:	48 83 ec 08          	sub    rsp,0x8
ffff80000080c524:	48 8d 0d f9 ff ff ff 	lea    rcx,[rip+0xfffffffffffffff9]        # ffff80000080c524 <scr_up+0xe>
ffff80000080c52b:	49 bb 0c 70 11 00 00 	movabs r11,0x11700c
ffff80000080c532:	00 00 00 
ffff80000080c535:	4c 01 d9             	add    rcx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:134
    txtbfh=(txtbfh+max_ch_nr_x)%max_chs;
ffff80000080c538:	48 b8 60 17 af ff ff 	movabs rax,0xffffffffffaf1760
ffff80000080c53f:	ff ff ff 
ffff80000080c542:	8b 04 01             	mov    eax,DWORD PTR [rcx+rax*1]
ffff80000080c545:	89 c2                	mov    edx,eax
ffff80000080c547:	48 b8 24 17 af ff ff 	movabs rax,0xffffffffffaf1724
ffff80000080c54e:	ff ff ff 
ffff80000080c551:	8b 04 01             	mov    eax,DWORD PTR [rcx+rax*1]
ffff80000080c554:	01 d0                	add    eax,edx
ffff80000080c556:	48 ba 68 17 af ff ff 	movabs rdx,0xffffffffffaf1768
ffff80000080c55d:	ff ff ff 
ffff80000080c560:	8b 14 11             	mov    edx,DWORD PTR [rcx+rdx*1]
ffff80000080c563:	89 d6                	mov    esi,edx
ffff80000080c565:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080c56a:	f7 f6                	div    esi
ffff80000080c56c:	89 d0                	mov    eax,edx
ffff80000080c56e:	89 c2                	mov    edx,eax
ffff80000080c570:	48 b8 60 17 af ff ff 	movabs rax,0xffffffffffaf1760
ffff80000080c577:	ff ff ff 
ffff80000080c57a:	89 14 01             	mov    DWORD PTR [rcx+rax*1],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:135
    fb_cursor_x=0;
ffff80000080c57d:	48 b8 1c 17 af ff ff 	movabs rax,0xffffffffffaf171c
ffff80000080c584:	ff ff ff 
ffff80000080c587:	c7 04 01 00 00 00 00 	mov    DWORD PTR [rcx+rax*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:136
    fb_cursor_y=0;
ffff80000080c58e:	48 b8 20 17 af ff ff 	movabs rax,0xffffffffffaf1720
ffff80000080c595:	ff ff ff 
ffff80000080c598:	c7 04 01 00 00 00 00 	mov    DWORD PTR [rcx+rax*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:137
    text_buffer[(txtbfh-1)%max_ch_nr_x]='\0';
ffff80000080c59f:	48 b8 58 17 af ff ff 	movabs rax,0xffffffffffaf1758
ffff80000080c5a6:	ff ff ff 
ffff80000080c5a9:	48 8b 3c 01          	mov    rdi,QWORD PTR [rcx+rax*1]
ffff80000080c5ad:	48 b8 60 17 af ff ff 	movabs rax,0xffffffffffaf1760
ffff80000080c5b4:	ff ff ff 
ffff80000080c5b7:	8b 04 01             	mov    eax,DWORD PTR [rcx+rax*1]
ffff80000080c5ba:	83 e8 01             	sub    eax,0x1
ffff80000080c5bd:	89 c2                	mov    edx,eax
ffff80000080c5bf:	48 b8 24 17 af ff ff 	movabs rax,0xffffffffffaf1724
ffff80000080c5c6:	ff ff ff 
ffff80000080c5c9:	8b 34 01             	mov    esi,DWORD PTR [rcx+rax*1]
ffff80000080c5cc:	89 d0                	mov    eax,edx
ffff80000080c5ce:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080c5d3:	f7 f6                	div    esi
ffff80000080c5d5:	89 d0                	mov    eax,edx
ffff80000080c5d7:	89 c0                	mov    eax,eax
ffff80000080c5d9:	48 01 f8             	add    rax,rdi
ffff80000080c5dc:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:138
    print(txtbfh);
ffff80000080c5df:	48 b8 60 17 af ff ff 	movabs rax,0xffffffffffaf1760
ffff80000080c5e6:	ff ff ff 
ffff80000080c5e9:	8b 04 01             	mov    eax,DWORD PTR [rcx+rax*1]
ffff80000080c5ec:	48 98                	cdqe   
ffff80000080c5ee:	48 89 c7             	mov    rdi,rax
ffff80000080c5f1:	49 89 cf             	mov    r15,rcx
ffff80000080c5f4:	48 b8 c8 91 ee ff ff 	movabs rax,0xffffffffffee91c8
ffff80000080c5fb:	ff ff ff 
ffff80000080c5fe:	48 01 c8             	add    rax,rcx
ffff80000080c601:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:151
    //     }

    // }
//    for(int i=0;i< framebuffer.common.framebuffer_width*framebuffer.common.framebuffer_bpp/8;i++)
//        *(p++)=0;
}
ffff80000080c603:	90                   	nop
ffff80000080c604:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080c608:	c9                   	leave  
ffff80000080c609:	c3                   	ret    

ffff80000080c60a <scr_down>:
scr_down():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:152
void scr_down(){
ffff80000080c60a:	f3 0f 1e fa          	endbr64 
ffff80000080c60e:	55                   	push   rbp
ffff80000080c60f:	48 89 e5             	mov    rbp,rsp
ffff80000080c612:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080c612 <scr_down+0x8>
ffff80000080c619:	49 bb 1e 6f 11 00 00 	movabs r11,0x116f1e
ffff80000080c620:	00 00 00 
ffff80000080c623:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:153
    for(int dy=1;dy<max_ch_nr_y;dy++){
ffff80000080c626:	c7 45 fc 01 00 00 00 	mov    DWORD PTR [rbp-0x4],0x1
ffff80000080c62d:	e9 aa 00 00 00       	jmp    ffff80000080c6dc <scr_down+0xd2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:154
        for(int dx=0;dx<max_ch_nr_x;dx++){
ffff80000080c632:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
ffff80000080c639:	e9 82 00 00 00       	jmp    ffff80000080c6c0 <scr_down+0xb6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:155 (discriminator 3)
            char *p=(char*)(FRAMEBUFFER_ADDR+dy*framebuffer.common.framebuffer_pitch
ffff80000080c63e:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff80000080c645:	ff ff ff 
ffff80000080c648:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080c64c:	8b 4a 10             	mov    ecx,DWORD PTR [rdx+0x10]
ffff80000080c64f:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080c652:	0f af d1             	imul   edx,ecx
ffff80000080c655:	89 d6                	mov    esi,edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:156 (discriminator 3)
                            +dx*framebuffer.common.framebuffer_bpp/8);
ffff80000080c657:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff80000080c65e:	ff ff ff 
ffff80000080c661:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080c665:	0f b6 52 1c          	movzx  edx,BYTE PTR [rdx+0x1c]
ffff80000080c669:	0f b6 d2             	movzx  edx,dl
ffff80000080c66c:	0f af 55 f8          	imul   edx,DWORD PTR [rbp-0x8]
ffff80000080c670:	8d 4a 07             	lea    ecx,[rdx+0x7]
ffff80000080c673:	85 d2                	test   edx,edx
ffff80000080c675:	0f 48 d1             	cmovs  edx,ecx
ffff80000080c678:	c1 fa 03             	sar    edx,0x3
ffff80000080c67b:	48 63 d2             	movsxd rdx,edx
ffff80000080c67e:	48 8d 0c 16          	lea    rcx,[rsi+rdx*1]
ffff80000080c682:	48 ba 00 00 00 40 00 	movabs rdx,0xffff800040000000
ffff80000080c689:	80 ff ff 
ffff80000080c68c:	48 01 ca             	add    rdx,rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:155 (discriminator 3)
            char *p=(char*)(FRAMEBUFFER_ADDR+dy*framebuffer.common.framebuffer_pitch
ffff80000080c68f:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:157 (discriminator 3)
            *p=*(p-framebuffer.common.framebuffer_pitch);
ffff80000080c693:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff80000080c69a:	ff ff ff 
ffff80000080c69d:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080c6a1:	8b 52 10             	mov    edx,DWORD PTR [rdx+0x10]
ffff80000080c6a4:	89 d2                	mov    edx,edx
ffff80000080c6a6:	48 89 d1             	mov    rcx,rdx
ffff80000080c6a9:	48 f7 d9             	neg    rcx
ffff80000080c6ac:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080c6b0:	48 01 ca             	add    rdx,rcx
ffff80000080c6b3:	0f b6 0a             	movzx  ecx,BYTE PTR [rdx]
ffff80000080c6b6:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080c6ba:	88 0a                	mov    BYTE PTR [rdx],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:154 (discriminator 3)
        for(int dx=0;dx<max_ch_nr_x;dx++){
ffff80000080c6bc:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:154 (discriminator 1)
ffff80000080c6c0:	8b 4d f8             	mov    ecx,DWORD PTR [rbp-0x8]
ffff80000080c6c3:	48 ba 24 17 af ff ff 	movabs rdx,0xffffffffffaf1724
ffff80000080c6ca:	ff ff ff 
ffff80000080c6cd:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080c6d0:	39 d1                	cmp    ecx,edx
ffff80000080c6d2:	0f 82 66 ff ff ff    	jb     ffff80000080c63e <scr_down+0x34>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:153 (discriminator 2)
    for(int dy=1;dy<max_ch_nr_y;dy++){
ffff80000080c6d8:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:153 (discriminator 1)
ffff80000080c6dc:	8b 4d fc             	mov    ecx,DWORD PTR [rbp-0x4]
ffff80000080c6df:	48 ba 28 17 af ff ff 	movabs rdx,0xffffffffffaf1728
ffff80000080c6e6:	ff ff ff 
ffff80000080c6e9:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080c6ec:	39 d1                	cmp    ecx,edx
ffff80000080c6ee:	0f 82 3e ff ff ff    	jb     ffff80000080c632 <scr_down+0x28>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:161
        }

    }
}
ffff80000080c6f4:	90                   	nop
ffff80000080c6f5:	90                   	nop
ffff80000080c6f6:	5d                   	pop    rbp
ffff80000080c6f7:	c3                   	ret    

ffff80000080c6f8 <print>:
print():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:162
void print(char* s){
ffff80000080c6f8:	f3 0f 1e fa          	endbr64 
ffff80000080c6fc:	55                   	push   rbp
ffff80000080c6fd:	48 89 e5             	mov    rbp,rsp
ffff80000080c700:	41 57                	push   r15
ffff80000080c702:	53                   	push   rbx
ffff80000080c703:	48 83 ec 10          	sub    rsp,0x10
ffff80000080c707:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080c707 <print+0xf>
ffff80000080c70e:	49 bb 29 6e 11 00 00 	movabs r11,0x116e29
ffff80000080c715:	00 00 00 
ffff80000080c718:	4c 01 db             	add    rbx,r11
ffff80000080c71b:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:163
    for(;*s;s++){
ffff80000080c71f:	e9 e1 01 00 00       	jmp    ffff80000080c905 <print+0x20d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:164
        if(fb_cursor_x>max_ch_nr_x||*s=='\n')
ffff80000080c724:	48 b8 1c 17 af ff ff 	movabs rax,0xffffffffffaf171c
ffff80000080c72b:	ff ff ff 
ffff80000080c72e:	8b 14 03             	mov    edx,DWORD PTR [rbx+rax*1]
ffff80000080c731:	48 b8 24 17 af ff ff 	movabs rax,0xffffffffffaf1724
ffff80000080c738:	ff ff ff 
ffff80000080c73b:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080c73e:	39 c2                	cmp    edx,eax
ffff80000080c740:	77 0b                	ja     ffff80000080c74d <print+0x55>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:164 (discriminator 1)
ffff80000080c742:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c746:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080c749:	3c 0a                	cmp    al,0xa
ffff80000080c74b:	75 2e                	jne    ffff80000080c77b <print+0x83>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:166
        {
            fb_cursor_y+=1;
ffff80000080c74d:	48 b8 20 17 af ff ff 	movabs rax,0xffffffffffaf1720
ffff80000080c754:	ff ff ff 
ffff80000080c757:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080c75a:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080c75d:	48 b8 20 17 af ff ff 	movabs rax,0xffffffffffaf1720
ffff80000080c764:	ff ff ff 
ffff80000080c767:	89 14 03             	mov    DWORD PTR [rbx+rax*1],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:167
            fb_cursor_x=0;
ffff80000080c76a:	48 b8 1c 17 af ff ff 	movabs rax,0xffffffffffaf171c
ffff80000080c771:	ff ff ff 
ffff80000080c774:	c7 04 03 00 00 00 00 	mov    DWORD PTR [rbx+rax*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:169
        }
        if(*s=='\n')continue;
ffff80000080c77b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c77f:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080c782:	3c 0a                	cmp    al,0xa
ffff80000080c784:	0f 84 75 01 00 00    	je     ffff80000080c8ff <print+0x207>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:170
        if(fb_cursor_y>=max_ch_nr_y-1){
ffff80000080c78a:	48 b8 28 17 af ff ff 	movabs rax,0xffffffffffaf1728
ffff80000080c791:	ff ff ff 
ffff80000080c794:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080c797:	8d 50 ff             	lea    edx,[rax-0x1]
ffff80000080c79a:	48 b8 20 17 af ff ff 	movabs rax,0xffffffffffaf1720
ffff80000080c7a1:	ff ff ff 
ffff80000080c7a4:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080c7a7:	39 c2                	cmp    edx,eax
ffff80000080c7a9:	77 34                	ja     ffff80000080c7df <print+0xe7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:171
            scr_up();
ffff80000080c7ab:	49 89 df             	mov    r15,rbx
ffff80000080c7ae:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080c7b3:	48 ba e6 8f ee ff ff 	movabs rdx,0xffffffffffee8fe6
ffff80000080c7ba:	ff ff ff 
ffff80000080c7bd:	48 01 da             	add    rdx,rbx
ffff80000080c7c0:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:172
            fb_cursor_y=max_ch_nr_y-1;
ffff80000080c7c2:	48 b8 28 17 af ff ff 	movabs rax,0xffffffffffaf1728
ffff80000080c7c9:	ff ff ff 
ffff80000080c7cc:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080c7cf:	8d 50 ff             	lea    edx,[rax-0x1]
ffff80000080c7d2:	48 b8 20 17 af ff ff 	movabs rax,0xffffffffffaf1720
ffff80000080c7d9:	ff ff ff 
ffff80000080c7dc:	89 14 03             	mov    DWORD PTR [rbx+rax*1],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:175
            // fb_cursor_y=0;
        }
        draw_letter(fb_cursor_x*font_width*font_size,fb_cursor_y*font_height*font_size,font_size,*s);
ffff80000080c7df:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c7e3:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080c7e6:	0f be d0             	movsx  edx,al
ffff80000080c7e9:	48 b8 c8 fd ff ff ff 	movabs rax,0xfffffffffffffdc8
ffff80000080c7f0:	ff ff ff 
ffff80000080c7f3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080c7f7:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080c7f9:	48 b9 20 17 af ff ff 	movabs rcx,0xffffffffffaf1720
ffff80000080c800:	ff ff ff 
ffff80000080c803:	8b 34 0b             	mov    esi,DWORD PTR [rbx+rcx*1]
ffff80000080c806:	48 b9 3c 17 af ff ff 	movabs rcx,0xffffffffffaf173c
ffff80000080c80d:	ff ff ff 
ffff80000080c810:	8b 0c 0b             	mov    ecx,DWORD PTR [rbx+rcx*1]
ffff80000080c813:	0f af f1             	imul   esi,ecx
ffff80000080c816:	48 b9 c8 fd ff ff ff 	movabs rcx,0xfffffffffffffdc8
ffff80000080c81d:	ff ff ff 
ffff80000080c820:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff80000080c824:	8b 09                	mov    ecx,DWORD PTR [rcx]
ffff80000080c826:	0f af ce             	imul   ecx,esi
ffff80000080c829:	41 89 c8             	mov    r8d,ecx
ffff80000080c82c:	48 b9 1c 17 af ff ff 	movabs rcx,0xffffffffffaf171c
ffff80000080c833:	ff ff ff 
ffff80000080c836:	8b 34 0b             	mov    esi,DWORD PTR [rbx+rcx*1]
ffff80000080c839:	48 b9 38 17 af ff ff 	movabs rcx,0xffffffffffaf1738
ffff80000080c840:	ff ff ff 
ffff80000080c843:	8b 0c 0b             	mov    ecx,DWORD PTR [rbx+rcx*1]
ffff80000080c846:	0f af f1             	imul   esi,ecx
ffff80000080c849:	48 b9 c8 fd ff ff ff 	movabs rcx,0xfffffffffffffdc8
ffff80000080c850:	ff ff ff 
ffff80000080c853:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff80000080c857:	8b 09                	mov    ecx,DWORD PTR [rcx]
ffff80000080c859:	0f af ce             	imul   ecx,esi
ffff80000080c85c:	89 cf                	mov    edi,ecx
ffff80000080c85e:	89 d1                	mov    ecx,edx
ffff80000080c860:	89 c2                	mov    edx,eax
ffff80000080c862:	44 89 c6             	mov    esi,r8d
ffff80000080c865:	49 89 df             	mov    r15,rbx
ffff80000080c868:	48 b8 5d 8e ee ff ff 	movabs rax,0xffffffffffee8e5d
ffff80000080c86f:	ff ff ff 
ffff80000080c872:	48 01 d8             	add    rax,rbx
ffff80000080c875:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:176
        fb_cursor_x+=1;
ffff80000080c877:	48 b8 1c 17 af ff ff 	movabs rax,0xffffffffffaf171c
ffff80000080c87e:	ff ff ff 
ffff80000080c881:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080c884:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080c887:	48 b8 1c 17 af ff ff 	movabs rax,0xffffffffffaf171c
ffff80000080c88e:	ff ff ff 
ffff80000080c891:	89 14 03             	mov    DWORD PTR [rbx+rax*1],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:177
        text_buffer[txtbft++]=*s;
ffff80000080c894:	48 b8 58 17 af ff ff 	movabs rax,0xffffffffffaf1758
ffff80000080c89b:	ff ff ff 
ffff80000080c89e:	48 8b 34 03          	mov    rsi,QWORD PTR [rbx+rax*1]
ffff80000080c8a2:	48 b8 64 17 af ff ff 	movabs rax,0xffffffffffaf1764
ffff80000080c8a9:	ff ff ff 
ffff80000080c8ac:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080c8af:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080c8b2:	48 b9 64 17 af ff ff 	movabs rcx,0xffffffffffaf1764
ffff80000080c8b9:	ff ff ff 
ffff80000080c8bc:	89 14 0b             	mov    DWORD PTR [rbx+rcx*1],edx
ffff80000080c8bf:	48 98                	cdqe   
ffff80000080c8c1:	48 8d 14 06          	lea    rdx,[rsi+rax*1]
ffff80000080c8c5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c8c9:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080c8cc:	88 02                	mov    BYTE PTR [rdx],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:178
        if(txtbft==max_chs)txtbft=0;
ffff80000080c8ce:	48 b8 64 17 af ff ff 	movabs rax,0xffffffffffaf1764
ffff80000080c8d5:	ff ff ff 
ffff80000080c8d8:	8b 14 03             	mov    edx,DWORD PTR [rbx+rax*1]
ffff80000080c8db:	48 b8 68 17 af ff ff 	movabs rax,0xffffffffffaf1768
ffff80000080c8e2:	ff ff ff 
ffff80000080c8e5:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080c8e8:	39 c2                	cmp    edx,eax
ffff80000080c8ea:	75 14                	jne    ffff80000080c900 <print+0x208>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:178 (discriminator 1)
ffff80000080c8ec:	48 b8 64 17 af ff ff 	movabs rax,0xffffffffffaf1764
ffff80000080c8f3:	ff ff ff 
ffff80000080c8f6:	c7 04 03 00 00 00 00 	mov    DWORD PTR [rbx+rax*1],0x0
ffff80000080c8fd:	eb 01                	jmp    ffff80000080c900 <print+0x208>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:169
        if(*s=='\n')continue;
ffff80000080c8ff:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:163
    for(;*s;s++){
ffff80000080c900:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:163 (discriminator 1)
ffff80000080c905:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c909:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080c90c:	84 c0                	test   al,al
ffff80000080c90e:	0f 85 10 fe ff ff    	jne    ffff80000080c724 <print+0x2c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:180
    }
}
ffff80000080c914:	90                   	nop
ffff80000080c915:	90                   	nop
ffff80000080c916:	48 83 c4 10          	add    rsp,0x10
ffff80000080c91a:	5b                   	pop    rbx
ffff80000080c91b:	41 5f                	pop    r15
ffff80000080c91d:	5d                   	pop    rbp
ffff80000080c91e:	c3                   	ret    

ffff80000080c91f <open_framebuffer>:
open_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:185
struct file_operations framebuffer_fops={
        .open=open_framebuffer,.close=close_framebuffer,.read=read_framebuffer,.write=write_framebuffer,
        .ioctl=ioctl_framebuffer
};
long open_framebuffer(struct index_node * inode,struct file * filp){
ffff80000080c91f:	f3 0f 1e fa          	endbr64 
ffff80000080c923:	55                   	push   rbp
ffff80000080c924:	48 89 e5             	mov    rbp,rsp
ffff80000080c927:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080c927 <open_framebuffer+0x8>
ffff80000080c92e:	49 bb 09 6c 11 00 00 	movabs r11,0x116c09
ffff80000080c935:	00 00 00 
ffff80000080c938:	4c 01 d8             	add    rax,r11
ffff80000080c93b:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080c93f:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:186
    inode->f_ops=&framebuffer_fops;
ffff80000080c943:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080c947:	48 b9 e8 fd ff ff ff 	movabs rcx,0xfffffffffffffde8
ffff80000080c94e:	ff ff ff 
ffff80000080c951:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080c955:	48 89 4a 28          	mov    QWORD PTR [rdx+0x28],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:187
    filp->f_ops=&framebuffer_fops;
ffff80000080c959:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080c95d:	48 b9 e8 fd ff ff ff 	movabs rcx,0xfffffffffffffde8
ffff80000080c964:	ff ff ff 
ffff80000080c967:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff80000080c96b:	48 89 42 18          	mov    QWORD PTR [rdx+0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:188
    return 1;
ffff80000080c96f:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:189
}
ffff80000080c974:	5d                   	pop    rbp
ffff80000080c975:	c3                   	ret    

ffff80000080c976 <close_framebuffer>:
close_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190
long close_framebuffer(struct index_node * inode,struct file * filp){
ffff80000080c976:	f3 0f 1e fa          	endbr64 
ffff80000080c97a:	55                   	push   rbp
ffff80000080c97b:	48 89 e5             	mov    rbp,rsp
ffff80000080c97e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080c97e <close_framebuffer+0x8>
ffff80000080c985:	49 bb b2 6b 11 00 00 	movabs r11,0x116bb2
ffff80000080c98c:	00 00 00 
ffff80000080c98f:	4c 01 d8             	add    rax,r11
ffff80000080c992:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080c996:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:192

}
ffff80000080c99a:	90                   	nop
ffff80000080c99b:	5d                   	pop    rbp
ffff80000080c99c:	c3                   	ret    

ffff80000080c99d <read_framebuffer>:
read_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:193
long read_framebuffer(struct file * filp,char * buf,unsigned long count,long * position){
ffff80000080c99d:	f3 0f 1e fa          	endbr64 
ffff80000080c9a1:	55                   	push   rbp
ffff80000080c9a2:	48 89 e5             	mov    rbp,rsp
ffff80000080c9a5:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080c9a5 <read_framebuffer+0x8>
ffff80000080c9ac:	49 bb 8b 6b 11 00 00 	movabs r11,0x116b8b
ffff80000080c9b3:	00 00 00 
ffff80000080c9b6:	4c 01 d8             	add    rax,r11
ffff80000080c9b9:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080c9bd:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080c9c1:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080c9c5:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:195

}
ffff80000080c9c9:	90                   	nop
ffff80000080c9ca:	5d                   	pop    rbp
ffff80000080c9cb:	c3                   	ret    

ffff80000080c9cc <write_framebuffer>:
write_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:196
long write_framebuffer(struct file * filp,char * buf,unsigned long count,long * position){
ffff80000080c9cc:	f3 0f 1e fa          	endbr64 
ffff80000080c9d0:	55                   	push   rbp
ffff80000080c9d1:	48 89 e5             	mov    rbp,rsp
ffff80000080c9d4:	41 57                	push   r15
ffff80000080c9d6:	53                   	push   rbx
ffff80000080c9d7:	48 83 ec 40          	sub    rsp,0x40
ffff80000080c9db:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080c9db <write_framebuffer+0xf>
ffff80000080c9e2:	49 bb 55 6b 11 00 00 	movabs r11,0x116b55
ffff80000080c9e9:	00 00 00 
ffff80000080c9ec:	4c 01 db             	add    rbx,r11
ffff80000080c9ef:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff80000080c9f3:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffff80000080c9f7:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
ffff80000080c9fb:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:197
    char *tmp= (char*) kmalloc(0,PAGE_4K_SIZE);
ffff80000080c9ff:	be 00 10 00 00       	mov    esi,0x1000
ffff80000080ca04:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080ca09:	49 89 df             	mov    r15,rbx
ffff80000080ca0c:	48 b8 96 fe ed ff ff 	movabs rax,0xffffffffffedfe96
ffff80000080ca13:	ff ff ff 
ffff80000080ca16:	48 01 d8             	add    rax,rbx
ffff80000080ca19:	ff d0                	call   rax
ffff80000080ca1b:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:198
    int c=count/(PAGE_4K_SIZE-1),p=0;
ffff80000080ca1f:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
ffff80000080ca23:	48 ba 11 00 01 10 00 	movabs rdx,0x10010010010011
ffff80000080ca2a:	01 10 00 
ffff80000080ca2d:	48 89 c8             	mov    rax,rcx
ffff80000080ca30:	48 f7 e2             	mul    rdx
ffff80000080ca33:	48 89 c8             	mov    rax,rcx
ffff80000080ca36:	48 29 d0             	sub    rax,rdx
ffff80000080ca39:	48 d1 e8             	shr    rax,1
ffff80000080ca3c:	48 01 d0             	add    rax,rdx
ffff80000080ca3f:	48 c1 e8 0b          	shr    rax,0xb
ffff80000080ca43:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
ffff80000080ca46:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:200
    //一块一块输出
    for(int i=0;i<(c?c:1);i++){
ffff80000080ca4d:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff80000080ca54:	eb 60                	jmp    ffff80000080cab6 <write_framebuffer+0xea>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:201 (discriminator 7)
        memcpy(tmp,buf+p,PAGE_4K_SIZE-1);
ffff80000080ca56:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080ca59:	48 63 d0             	movsxd rdx,eax
ffff80000080ca5c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080ca60:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
ffff80000080ca64:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ca68:	ba ff 0f 00 00       	mov    edx,0xfff
ffff80000080ca6d:	48 89 ce             	mov    rsi,rcx
ffff80000080ca70:	48 89 c7             	mov    rdi,rax
ffff80000080ca73:	49 89 df             	mov    r15,rbx
ffff80000080ca76:	48 b8 02 1d ef ff ff 	movabs rax,0xffffffffffef1d02
ffff80000080ca7d:	ff ff ff 
ffff80000080ca80:	48 01 d8             	add    rax,rbx
ffff80000080ca83:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:202 (discriminator 7)
        tmp[PAGE_4K_SIZE-1]=0;
ffff80000080ca85:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ca89:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff80000080ca8f:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:203 (discriminator 7)
        print(tmp);
ffff80000080ca92:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ca96:	48 89 c7             	mov    rdi,rax
ffff80000080ca99:	49 89 df             	mov    r15,rbx
ffff80000080ca9c:	48 b8 c8 91 ee ff ff 	movabs rax,0xffffffffffee91c8
ffff80000080caa3:	ff ff ff 
ffff80000080caa6:	48 01 d8             	add    rax,rbx
ffff80000080caa9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:204 (discriminator 7)
        p+=PAGE_4K_SIZE-1;
ffff80000080caab:	81 45 ec ff 0f 00 00 	add    DWORD PTR [rbp-0x14],0xfff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:200 (discriminator 7)
    for(int i=0;i<(c?c:1);i++){
ffff80000080cab2:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:200 (discriminator 1)
ffff80000080cab6:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
ffff80000080caba:	74 05                	je     ffff80000080cac1 <write_framebuffer+0xf5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:200 (discriminator 3)
ffff80000080cabc:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080cabf:	eb 05                	jmp    ffff80000080cac6 <write_framebuffer+0xfa>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:200 (discriminator 4)
ffff80000080cac1:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:200 (discriminator 6)
ffff80000080cac6:	3b 45 e8             	cmp    eax,DWORD PTR [rbp-0x18]
ffff80000080cac9:	7f 8b                	jg     ffff80000080ca56 <write_framebuffer+0x8a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:206
    }
    kmfree(tmp);
ffff80000080cacb:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080cacf:	48 89 c7             	mov    rdi,rax
ffff80000080cad2:	49 89 df             	mov    r15,rbx
ffff80000080cad5:	48 b8 37 00 ee ff ff 	movabs rax,0xffffffffffee0037
ffff80000080cadc:	ff ff ff 
ffff80000080cadf:	48 01 d8             	add    rax,rbx
ffff80000080cae2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:207
    return 0;
ffff80000080cae4:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:208
}
ffff80000080cae9:	48 83 c4 40          	add    rsp,0x40
ffff80000080caed:	5b                   	pop    rbx
ffff80000080caee:	41 5f                	pop    r15
ffff80000080caf0:	5d                   	pop    rbp
ffff80000080caf1:	c3                   	ret    

ffff80000080caf2 <ioctl_framebuffer>:
ioctl_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:209
long ioctl_framebuffer(struct index_node * inode,struct file * filp,unsigned long cmd,unsigned long arg){
ffff80000080caf2:	f3 0f 1e fa          	endbr64 
ffff80000080caf6:	55                   	push   rbp
ffff80000080caf7:	48 89 e5             	mov    rbp,rsp
ffff80000080cafa:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080cafa <ioctl_framebuffer+0x8>
ffff80000080cb01:	49 bb 36 6a 11 00 00 	movabs r11,0x116a36
ffff80000080cb08:	00 00 00 
ffff80000080cb0b:	4c 01 d8             	add    rax,r11
ffff80000080cb0e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080cb12:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080cb16:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080cb1a:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:211

}
ffff80000080cb1e:	90                   	nop
ffff80000080cb1f:	5d                   	pop    rbp
ffff80000080cb20:	c3                   	ret    

ffff80000080cb21 <drelse>:
drelse():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:21
每一个被使用或者创建的dentry，会被放到数组的开头，剩余后移。当有dentry被挤出去的时候，如果不是necessary，则释放dentry。如果期间被使用了，
则被放到开头。
*/
struct dir_entry* history_dentry[48];

void drelse(struct dir_entry* d){
ffff80000080cb21:	f3 0f 1e fa          	endbr64 
ffff80000080cb25:	55                   	push   rbp
ffff80000080cb26:	48 89 e5             	mov    rbp,rsp
ffff80000080cb29:	41 57                	push   r15
ffff80000080cb2b:	53                   	push   rbx
ffff80000080cb2c:	48 83 ec 20          	sub    rsp,0x20
ffff80000080cb30:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080cb30 <drelse+0xf>
ffff80000080cb37:	49 bb 00 6a 11 00 00 	movabs r11,0x116a00
ffff80000080cb3e:	00 00 00 
ffff80000080cb41:	4c 01 db             	add    rbx,r11
ffff80000080cb44:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:23
    //同步inode到介质中
    d->dir_ops->iput(d,d->dir_inode);
ffff80000080cb48:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080cb4c:	48 8b 40 60          	mov    rax,QWORD PTR [rax+0x60]
ffff80000080cb50:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
ffff80000080cb54:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080cb58:	48 8b 50 40          	mov    rdx,QWORD PTR [rax+0x40]
ffff80000080cb5c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080cb60:	48 89 d6             	mov    rsi,rdx
ffff80000080cb63:	48 89 c7             	mov    rdi,rax
ffff80000080cb66:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:25
    //释放
    list_drop(&d->child_node);
ffff80000080cb68:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080cb6c:	48 83 c0 10          	add    rax,0x10
ffff80000080cb70:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
list_drop():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:43
    list_add_to_behind(p,new);
}
__attribute__((always_inline)) inline void list_drop(struct List * entry)
{
    //从链表中删除
    if(entry->prev)
ffff80000080cb74:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080cb78:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080cb7b:	48 85 c0             	test   rax,rax
ffff80000080cb7e:	74 13                	je     ffff80000080cb93 <drelse+0x72>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:44
        entry->prev->next=entry->next;
ffff80000080cb80:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080cb84:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080cb87:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080cb8b:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
ffff80000080cb8f:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:45
    if(entry->next)
ffff80000080cb93:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080cb97:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080cb9b:	48 85 c0             	test   rax,rax
ffff80000080cb9e:	74 12                	je     ffff80000080cbb2 <drelse+0x91>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:46
        entry->next->prev=entry->prev;
ffff80000080cba0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080cba4:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080cba8:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080cbac:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080cbaf:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:47
}
ffff80000080cbb2:	90                   	nop
drelse():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:26
    kmfree(d->name);
ffff80000080cbb3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080cbb7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080cbba:	48 89 c7             	mov    rdi,rax
ffff80000080cbbd:	49 89 df             	mov    r15,rbx
ffff80000080cbc0:	48 b8 37 00 ee ff ff 	movabs rax,0xffffffffffee0037
ffff80000080cbc7:	ff ff ff 
ffff80000080cbca:	48 01 d8             	add    rax,rbx
ffff80000080cbcd:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:27
    d->dir_inode->link--;
ffff80000080cbcf:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080cbd3:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080cbd7:	8b 50 1c             	mov    edx,DWORD PTR [rax+0x1c]
ffff80000080cbda:	83 ea 01             	sub    edx,0x1
ffff80000080cbdd:	89 50 1c             	mov    DWORD PTR [rax+0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:28
    if(!d->dir_inode->link)
ffff80000080cbe0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080cbe4:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080cbe8:	8b 40 1c             	mov    eax,DWORD PTR [rax+0x1c]
ffff80000080cbeb:	85 c0                	test   eax,eax
ffff80000080cbed:	75 3e                	jne    ffff80000080cc2d <drelse+0x10c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:30
    {
        kmfree(d->dir_inode->private_index_info);
ffff80000080cbef:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080cbf3:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080cbf7:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff80000080cbfb:	48 89 c7             	mov    rdi,rax
ffff80000080cbfe:	49 89 df             	mov    r15,rbx
ffff80000080cc01:	48 b8 37 00 ee ff ff 	movabs rax,0xffffffffffee0037
ffff80000080cc08:	ff ff ff 
ffff80000080cc0b:	48 01 d8             	add    rax,rbx
ffff80000080cc0e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:31
        kmfree(d->dir_inode);//释放inode
ffff80000080cc10:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080cc14:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080cc18:	48 89 c7             	mov    rdi,rax
ffff80000080cc1b:	49 89 df             	mov    r15,rbx
ffff80000080cc1e:	48 b8 37 00 ee ff ff 	movabs rax,0xffffffffffee0037
ffff80000080cc25:	ff ff ff 
ffff80000080cc28:	48 01 d8             	add    rax,rbx
ffff80000080cc2b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:33
    }
    kmfree(d);
ffff80000080cc2d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080cc31:	48 89 c7             	mov    rdi,rax
ffff80000080cc34:	49 89 df             	mov    r15,rbx
ffff80000080cc37:	48 b8 37 00 ee ff ff 	movabs rax,0xffffffffffee0037
ffff80000080cc3e:	ff ff ff 
ffff80000080cc41:	48 01 d8             	add    rax,rbx
ffff80000080cc44:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:34
}
ffff80000080cc46:	90                   	nop
ffff80000080cc47:	48 83 c4 20          	add    rsp,0x20
ffff80000080cc4b:	5b                   	pop    rbx
ffff80000080cc4c:	41 5f                	pop    r15
ffff80000080cc4e:	5d                   	pop    rbp
ffff80000080cc4f:	c3                   	ret    

ffff80000080cc50 <dentry_cmp>:
dentry_cmp():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:35
int dentry_cmp(struct dir_entry* a,struct dir_entry* b){
ffff80000080cc50:	f3 0f 1e fa          	endbr64 
ffff80000080cc54:	55                   	push   rbp
ffff80000080cc55:	48 89 e5             	mov    rbp,rsp
ffff80000080cc58:	41 57                	push   r15
ffff80000080cc5a:	53                   	push   rbx
ffff80000080cc5b:	48 83 ec 10          	sub    rsp,0x10
ffff80000080cc5f:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080cc5f <dentry_cmp+0xf>
ffff80000080cc66:	49 bb d1 68 11 00 00 	movabs r11,0x1168d1
ffff80000080cc6d:	00 00 00 
ffff80000080cc70:	4c 01 db             	add    rbx,r11
ffff80000080cc73:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff80000080cc77:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:36
    while (a&&b) {
ffff80000080cc7b:	eb 72                	jmp    ffff80000080ccef <dentry_cmp+0x9f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:37
        if(strcmp(a->name, b->name)!=0)return a->name_length-b->name_length;
ffff80000080cc7d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080cc81:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080cc84:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080cc88:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080cc8b:	48 89 d6             	mov    rsi,rdx
ffff80000080cc8e:	48 89 c7             	mov    rdi,rax
ffff80000080cc91:	49 89 df             	mov    r15,rbx
ffff80000080cc94:	48 b8 54 20 ef ff ff 	movabs rax,0xffffffffffef2054
ffff80000080cc9b:	ff ff ff 
ffff80000080cc9e:	48 01 d8             	add    rax,rbx
ffff80000080cca1:	ff d0                	call   rax
ffff80000080cca3:	85 c0                	test   eax,eax
ffff80000080cca5:	74 14                	je     ffff80000080ccbb <dentry_cmp+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:37 (discriminator 1)
ffff80000080cca7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080ccab:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffff80000080ccae:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ccb2:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffff80000080ccb5:	89 d0                	mov    eax,edx
ffff80000080ccb7:	29 c8                	sub    eax,ecx
ffff80000080ccb9:	eb 4a                	jmp    ffff80000080cd05 <dentry_cmp+0xb5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:38
        a=a->parent;
ffff80000080ccbb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080ccbf:	48 8b 40 48          	mov    rax,QWORD PTR [rax+0x48]
ffff80000080ccc3:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:39
        b=b->parent;
ffff80000080ccc7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080cccb:	48 8b 40 48          	mov    rax,QWORD PTR [rax+0x48]
ffff80000080cccf:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:40
        if(a->parent==a&&b->parent==b){
ffff80000080ccd3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080ccd7:	48 8b 40 48          	mov    rax,QWORD PTR [rax+0x48]
ffff80000080ccdb:	48 39 45 e8          	cmp    QWORD PTR [rbp-0x18],rax
ffff80000080ccdf:	75 0e                	jne    ffff80000080ccef <dentry_cmp+0x9f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:40 (discriminator 1)
ffff80000080cce1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080cce5:	48 8b 40 48          	mov    rax,QWORD PTR [rax+0x48]
ffff80000080cce9:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
ffff80000080cced:	74 10                	je     ffff80000080ccff <dentry_cmp+0xaf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:36
    while (a&&b) {
ffff80000080ccef:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080ccf4:	74 0a                	je     ffff80000080cd00 <dentry_cmp+0xb0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:36 (discriminator 1)
ffff80000080ccf6:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
ffff80000080ccfb:	75 80                	jne    ffff80000080cc7d <dentry_cmp+0x2d>
ffff80000080ccfd:	eb 01                	jmp    ffff80000080cd00 <dentry_cmp+0xb0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:42
            //有的根目录会把parent设置成自己，这里的代码是为了检测这种情况，即已经比较到根目录了
            break;
ffff80000080ccff:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:45
        }
    }
    return 0;
ffff80000080cd00:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:46
}
ffff80000080cd05:	48 83 c4 10          	add    rsp,0x10
ffff80000080cd09:	5b                   	pop    rbx
ffff80000080cd0a:	41 5f                	pop    r15
ffff80000080cd0c:	5d                   	pop    rbp
ffff80000080cd0d:	c3                   	ret    

ffff80000080cd0e <mark_use>:
mark_use():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:47
void mark_use(struct dir_entry* d){
ffff80000080cd0e:	f3 0f 1e fa          	endbr64 
ffff80000080cd12:	55                   	push   rbp
ffff80000080cd13:	48 89 e5             	mov    rbp,rsp
ffff80000080cd16:	41 57                	push   r15
ffff80000080cd18:	53                   	push   rbx
ffff80000080cd19:	48 83 ec 20          	sub    rsp,0x20
ffff80000080cd1d:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080cd1d <mark_use+0xf>
ffff80000080cd24:	49 bb 13 68 11 00 00 	movabs r11,0x116813
ffff80000080cd2b:	00 00 00 
ffff80000080cd2e:	4c 01 db             	add    rbx,r11
ffff80000080cd31:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:48
    int mk=47;
ffff80000080cd35:	c7 45 ec 2f 00 00 00 	mov    DWORD PTR [rbp-0x14],0x2f
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:49
    for(int i=0;i<48;i++){
ffff80000080cd3c:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff80000080cd43:	eb 44                	jmp    ffff80000080cd89 <mark_use+0x7b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:50
        if(dentry_cmp(history_dentry[i],d)==0){
ffff80000080cd45:	48 b8 b8 ff ff ff ff 	movabs rax,0xffffffffffffffb8
ffff80000080cd4c:	ff ff ff 
ffff80000080cd4f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080cd53:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff80000080cd56:	48 63 d2             	movsxd rdx,edx
ffff80000080cd59:	48 8b 04 d0          	mov    rax,QWORD PTR [rax+rdx*8]
ffff80000080cd5d:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080cd61:	48 89 d6             	mov    rsi,rdx
ffff80000080cd64:	48 89 c7             	mov    rdi,rax
ffff80000080cd67:	49 89 df             	mov    r15,rbx
ffff80000080cd6a:	48 b8 20 97 ee ff ff 	movabs rax,0xffffffffffee9720
ffff80000080cd71:	ff ff ff 
ffff80000080cd74:	48 01 d8             	add    rax,rbx
ffff80000080cd77:	ff d0                	call   rax
ffff80000080cd79:	85 c0                	test   eax,eax
ffff80000080cd7b:	75 08                	jne    ffff80000080cd85 <mark_use+0x77>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:51
            mk=i;
ffff80000080cd7d:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080cd80:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:52
            break;
ffff80000080cd83:	eb 0a                	jmp    ffff80000080cd8f <mark_use+0x81>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:49 (discriminator 2)
    for(int i=0;i<48;i++){
ffff80000080cd85:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:49 (discriminator 1)
ffff80000080cd89:	83 7d e8 2f          	cmp    DWORD PTR [rbp-0x18],0x2f
ffff80000080cd8d:	7e b6                	jle    ffff80000080cd45 <mark_use+0x37>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:56
        }
    }
    struct dir_entry* dropped;
    if(mk==47){
ffff80000080cd8f:	83 7d ec 2f          	cmp    DWORD PTR [rbp-0x14],0x2f
ffff80000080cd93:	0f 85 94 00 00 00    	jne    ffff80000080ce2d <mark_use+0x11f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:57
        dropped=history_dentry[mk];
ffff80000080cd99:	48 b8 b8 ff ff ff ff 	movabs rax,0xffffffffffffffb8
ffff80000080cda0:	ff ff ff 
ffff80000080cda3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080cda7:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080cdaa:	48 63 d2             	movsxd rdx,edx
ffff80000080cdad:	48 8b 04 d0          	mov    rax,QWORD PTR [rax+rdx*8]
ffff80000080cdb1:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:58
        if(!dropped->mount_point&&!dropped->subdirs_list.next&&!dropped->link){
ffff80000080cdb5:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080cdb9:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
ffff80000080cdbd:	48 85 c0             	test   rax,rax
ffff80000080cdc0:	75 6b                	jne    ffff80000080ce2d <mark_use+0x11f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:58 (discriminator 1)
ffff80000080cdc2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080cdc6:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff80000080cdca:	48 85 c0             	test   rax,rax
ffff80000080cdcd:	75 5e                	jne    ffff80000080ce2d <mark_use+0x11f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:58 (discriminator 2)
ffff80000080cdcf:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080cdd3:	0f b6 40 50          	movzx  eax,BYTE PTR [rax+0x50]
ffff80000080cdd7:	84 c0                	test   al,al
ffff80000080cdd9:	75 52                	jne    ffff80000080ce2d <mark_use+0x11f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:59
            drelse(dropped);
ffff80000080cddb:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080cddf:	48 89 c7             	mov    rdi,rax
ffff80000080cde2:	49 89 df             	mov    r15,rbx
ffff80000080cde5:	48 b8 f1 95 ee ff ff 	movabs rax,0xffffffffffee95f1
ffff80000080cdec:	ff ff ff 
ffff80000080cdef:	48 01 d8             	add    rax,rbx
ffff80000080cdf2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:62
        }
    }
    for(;mk>0;mk--){
ffff80000080cdf4:	eb 37                	jmp    ffff80000080ce2d <mark_use+0x11f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:63 (discriminator 2)
        history_dentry[mk]=history_dentry[mk-1];
ffff80000080cdf6:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080cdf9:	8d 50 ff             	lea    edx,[rax-0x1]
ffff80000080cdfc:	48 b8 b8 ff ff ff ff 	movabs rax,0xffffffffffffffb8
ffff80000080ce03:	ff ff ff 
ffff80000080ce06:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ce0a:	48 63 d2             	movsxd rdx,edx
ffff80000080ce0d:	48 8b 0c d0          	mov    rcx,QWORD PTR [rax+rdx*8]
ffff80000080ce11:	48 b8 b8 ff ff ff ff 	movabs rax,0xffffffffffffffb8
ffff80000080ce18:	ff ff ff 
ffff80000080ce1b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ce1f:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080ce22:	48 63 d2             	movsxd rdx,edx
ffff80000080ce25:	48 89 0c d0          	mov    QWORD PTR [rax+rdx*8],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:62 (discriminator 2)
    for(;mk>0;mk--){
ffff80000080ce29:	83 6d ec 01          	sub    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:62 (discriminator 1)
ffff80000080ce2d:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff80000080ce31:	7f c3                	jg     ffff80000080cdf6 <mark_use+0xe8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:65
    }
    history_dentry[0]=d;
ffff80000080ce33:	48 b8 b8 ff ff ff ff 	movabs rax,0xffffffffffffffb8
ffff80000080ce3a:	ff ff ff 
ffff80000080ce3d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ce41:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080ce45:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:67

}
ffff80000080ce48:	90                   	nop
ffff80000080ce49:	48 83 c4 20          	add    rsp,0x20
ffff80000080ce4d:	5b                   	pop    rbx
ffff80000080ce4e:	41 5f                	pop    r15
ffff80000080ce50:	5d                   	pop    rbp
ffff80000080ce51:	c3                   	ret    

ffff80000080ce52 <path_walk>:
path_walk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:69
struct dir_entry * path_walk(char * name,unsigned long flags)
{
ffff80000080ce52:	f3 0f 1e fa          	endbr64 
ffff80000080ce56:	55                   	push   rbp
ffff80000080ce57:	48 89 e5             	mov    rbp,rsp
ffff80000080ce5a:	41 57                	push   r15
ffff80000080ce5c:	53                   	push   rbx
ffff80000080ce5d:	48 83 ec 60          	sub    rsp,0x60
ffff80000080ce61:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080ce61 <path_walk+0xf>
ffff80000080ce68:	49 bb cf 66 11 00 00 	movabs r11,0x1166cf
ffff80000080ce6f:	00 00 00 
ffff80000080ce72:	4c 01 db             	add    rbx,r11
ffff80000080ce75:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
ffff80000080ce79:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:70
    char * tmpname = NULL;
ffff80000080ce7d:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff80000080ce84:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:71
    int tmpnamelen = 0;
ffff80000080ce85:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:72
    struct dir_entry * parent = root_sb->root;
ffff80000080ce8c:	48 b8 90 fd ff ff ff 	movabs rax,0xfffffffffffffd90
ffff80000080ce93:	ff ff ff 
ffff80000080ce96:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ce9a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ce9d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080cea0:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:73
    struct dir_entry * path = NULL;
ffff80000080cea4:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff80000080ceab:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:75

    while(*name == '/')
ffff80000080ceac:	eb 05                	jmp    ffff80000080ceb3 <path_walk+0x61>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:76
        name++;
ffff80000080ceae:	48 83 45 98 01       	add    QWORD PTR [rbp-0x68],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:75
    while(*name == '/')
ffff80000080ceb3:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080ceb7:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080ceba:	3c 2f                	cmp    al,0x2f
ffff80000080cebc:	74 f0                	je     ffff80000080ceae <path_walk+0x5c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:78

    if(!*name)
ffff80000080cebe:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080cec2:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080cec5:	84 c0                	test   al,al
ffff80000080cec7:	75 09                	jne    ffff80000080ced2 <path_walk+0x80>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:80
    {
        return parent;
ffff80000080cec9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080cecd:	e9 15 03 00 00       	jmp    ffff80000080d1e7 <path_walk+0x395>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:85
    }

    for(;;)
    {
        tmpname = name;
ffff80000080ced2:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080ced6:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:86
        while(*name && (*name != '/'))
ffff80000080ceda:	eb 05                	jmp    ffff80000080cee1 <path_walk+0x8f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:87
            name++;
ffff80000080cedc:	48 83 45 98 01       	add    QWORD PTR [rbp-0x68],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:86
        while(*name && (*name != '/'))
ffff80000080cee1:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080cee5:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080cee8:	84 c0                	test   al,al
ffff80000080ceea:	74 0b                	je     ffff80000080cef7 <path_walk+0xa5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:86 (discriminator 1)
ffff80000080ceec:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080cef0:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080cef3:	3c 2f                	cmp    al,0x2f
ffff80000080cef5:	75 e5                	jne    ffff80000080cedc <path_walk+0x8a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:88
        tmpnamelen = name - tmpname;
ffff80000080cef7:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080cefb:	48 2b 45 d0          	sub    rax,QWORD PTR [rbp-0x30]
ffff80000080ceff:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:89
        if(parent->mount_point)
ffff80000080cf02:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080cf06:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
ffff80000080cf0a:	48 85 c0             	test   rax,rax
ffff80000080cf0d:	74 12                	je     ffff80000080cf21 <path_walk+0xcf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:92
        {
            //有挂载点，则进入挂载文件系统的文件树
            parent=parent->mount_point->sb->root;
ffff80000080cf0f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080cf13:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
ffff80000080cf17:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080cf1a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080cf1d:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:96
        }
        //先在缓存中寻找已有的dentry
        //寻找名字为tmpname的dentry
        struct List* lp=parent->subdirs_list.next;
ffff80000080cf21:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080cf25:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff80000080cf29:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:97
        while (lp)
ffff80000080cf2d:	eb 4e                	jmp    ffff80000080cf7d <path_walk+0x12b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:99
        {
            path=lp->data;
ffff80000080cf2f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080cf33:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080cf37:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:100
            if(memcmp(tmpname,path->name,tmpnamelen)==0){
ffff80000080cf3b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080cf3f:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080cf42:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000080cf45:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080cf49:	48 89 ce             	mov    rsi,rcx
ffff80000080cf4c:	48 89 c7             	mov    rdi,rax
ffff80000080cf4f:	49 89 df             	mov    r15,rbx
ffff80000080cf52:	48 b8 4c 1d ef ff ff 	movabs rax,0xffffffffffef1d4c
ffff80000080cf59:	ff ff ff 
ffff80000080cf5c:	48 01 d8             	add    rax,rbx
ffff80000080cf5f:	ff d0                	call   rax
ffff80000080cf61:	85 c0                	test   eax,eax
ffff80000080cf63:	74 21                	je     ffff80000080cf86 <path_walk+0x134>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:103
                break;
            }
            lp=&path->child_node;
ffff80000080cf65:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080cf69:	48 83 c0 10          	add    rax,0x10
ffff80000080cf6d:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:104
            lp=lp->next;
ffff80000080cf71:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080cf75:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080cf79:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:97
        while (lp)
ffff80000080cf7d:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff80000080cf82:	75 ab                	jne    ffff80000080cf2f <path_walk+0xdd>
ffff80000080cf84:	eb 01                	jmp    ffff80000080cf87 <path_walk+0x135>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:101
                break;
ffff80000080cf86:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:106
        }
        if(!lp){
ffff80000080cf87:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff80000080cf8c:	0f 85 ed 01 00 00    	jne    ffff80000080d17f <path_walk+0x32d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:108
            //缓存中没有，再读取介质
            path = (struct dir_entry *) kmalloc(sizeof(struct dir_entry), 0);
ffff80000080cf92:	be 00 00 00 00       	mov    esi,0x0
ffff80000080cf97:	bf 68 00 00 00       	mov    edi,0x68
ffff80000080cf9c:	49 89 df             	mov    r15,rbx
ffff80000080cf9f:	48 b8 96 fe ed ff ff 	movabs rax,0xffffffffffedfe96
ffff80000080cfa6:	ff ff ff 
ffff80000080cfa9:	48 01 d8             	add    rax,rbx
ffff80000080cfac:	ff d0                	call   rax
ffff80000080cfae:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:109
            memset(path,0,sizeof(struct dir_entry));
ffff80000080cfb2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080cfb6:	ba 68 00 00 00       	mov    edx,0x68
ffff80000080cfbb:	be 00 00 00 00       	mov    esi,0x0
ffff80000080cfc0:	48 89 c7             	mov    rdi,rax
ffff80000080cfc3:	49 89 df             	mov    r15,rbx
ffff80000080cfc6:	48 b8 b1 1d ef ff ff 	movabs rax,0xffffffffffef1db1
ffff80000080cfcd:	ff ff ff 
ffff80000080cfd0:	48 01 d8             	add    rax,rbx
ffff80000080cfd3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:111

            path->name = kmalloc(0,tmpnamelen+1);
ffff80000080cfd5:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080cfd8:	83 c0 01             	add    eax,0x1
ffff80000080cfdb:	48 98                	cdqe   
ffff80000080cfdd:	48 89 c6             	mov    rsi,rax
ffff80000080cfe0:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080cfe5:	49 89 df             	mov    r15,rbx
ffff80000080cfe8:	48 b8 96 fe ed ff ff 	movabs rax,0xffffffffffedfe96
ffff80000080cfef:	ff ff ff 
ffff80000080cff2:	48 01 d8             	add    rax,rbx
ffff80000080cff5:	ff d0                	call   rax
ffff80000080cff7:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080cffb:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:112
            memset(path->name,0,tmpnamelen+1);
ffff80000080cffe:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080d001:	83 c0 01             	add    eax,0x1
ffff80000080d004:	89 c2                	mov    edx,eax
ffff80000080d006:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d00a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d00d:	be 00 00 00 00       	mov    esi,0x0
ffff80000080d012:	48 89 c7             	mov    rdi,rax
ffff80000080d015:	49 89 df             	mov    r15,rbx
ffff80000080d018:	48 b8 b1 1d ef ff ff 	movabs rax,0xffffffffffef1db1
ffff80000080d01f:	ff ff ff 
ffff80000080d022:	48 01 d8             	add    rax,rbx
ffff80000080d025:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:113
            memcpy(path->name,tmpname,tmpnamelen);
ffff80000080d027:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000080d02a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d02e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d031:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffff80000080d035:	48 89 ce             	mov    rsi,rcx
ffff80000080d038:	48 89 c7             	mov    rdi,rax
ffff80000080d03b:	49 89 df             	mov    r15,rbx
ffff80000080d03e:	48 b8 02 1d ef ff ff 	movabs rax,0xffffffffffef1d02
ffff80000080d045:	ff ff ff 
ffff80000080d048:	48 01 d8             	add    rax,rbx
ffff80000080d04b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:114
            path->name_length = tmpnamelen;
ffff80000080d04d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d051:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000080d054:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:116

            path=parent->dir_inode->inode_ops->lookup(parent->dir_inode,path);
ffff80000080d057:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d05b:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080d05f:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff80000080d063:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
ffff80000080d067:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d06b:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080d06f:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080d073:	48 89 d6             	mov    rsi,rdx
ffff80000080d076:	48 89 c7             	mov    rdi,rax
ffff80000080d079:	ff d1                	call   rcx
ffff80000080d07b:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:118
        
            if(path == NULL)
ffff80000080d07f:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
ffff80000080d084:	75 39                	jne    ffff80000080d0bf <path_walk+0x26d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:120
            {
                printf("can not find file or dir:%s\n",name);
ffff80000080d086:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080d08a:	48 89 c6             	mov    rsi,rax
ffff80000080d08d:	48 b8 c8 d4 ff ff ff 	movabs rax,0xffffffffffffd4c8
ffff80000080d094:	ff ff ff 
ffff80000080d097:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080d09b:	48 89 c7             	mov    rdi,rax
ffff80000080d09e:	49 89 df             	mov    r15,rbx
ffff80000080d0a1:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080d0a6:	48 ba 91 e4 ed ff ff 	movabs rdx,0xffffffffffede491
ffff80000080d0ad:	ff ff ff 
ffff80000080d0b0:	48 01 da             	add    rdx,rbx
ffff80000080d0b3:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:123
                // kmfree(path->name);
                // kmfree(path);
                return NULL;
ffff80000080d0b5:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080d0ba:	e9 28 01 00 00       	jmp    ffff80000080d1e7 <path_walk+0x395>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:127
            }
//        list_init(&path->child_node);
//        list_init(&path->subdirs_list);
            path->parent = parent;
ffff80000080d0bf:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d0c3:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080d0c7:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:130
            //list_add会查重，如果链表里面已经有了data指针值相同的项，就不添加。
            //不过这里已经是缓存中没有找到dentry的情况了，一般不会出现data一样。
            list_add(&parent->subdirs_list,&path->child_node);
ffff80000080d0cb:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d0cf:	48 83 c0 10          	add    rax,0x10
ffff80000080d0d3:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080d0d7:	48 83 c2 28          	add    rdx,0x28
ffff80000080d0db:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
ffff80000080d0df:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:33
    struct List* p=entry;
ffff80000080d0e3:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080d0e7:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:34
    for(;p->next&&p->next!=p;p=p->next){
ffff80000080d0eb:	eb 21                	jmp    ffff80000080d10e <path_walk+0x2bc>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:35
        if(p->data==new->data)
ffff80000080d0ed:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080d0f1:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff80000080d0f5:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080d0f9:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080d0fd:	48 39 c2             	cmp    rdx,rax
ffff80000080d100:	74 7c                	je     ffff80000080d17e <path_walk+0x32c>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:34
    for(;p->next&&p->next!=p;p=p->next){
ffff80000080d102:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080d106:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080d10a:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
ffff80000080d10e:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080d112:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080d116:	48 85 c0             	test   rax,rax
ffff80000080d119:	74 0e                	je     ffff80000080d129 <path_walk+0x2d7>
ffff80000080d11b:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080d11f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080d123:	48 39 45 b0          	cmp    QWORD PTR [rbp-0x50],rax
ffff80000080d127:	75 c4                	jne    ffff80000080d0ed <path_walk+0x29b>
ffff80000080d129:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080d12d:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
ffff80000080d131:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080d135:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff80000080d139:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080d13d:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080d141:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080d145:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff80000080d149:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080d14d:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff80000080d151:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff80000080d154:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080d158:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080d15c:	48 85 c0             	test   rax,rax
ffff80000080d15f:	74 0f                	je     ffff80000080d170 <path_walk+0x31e>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff80000080d161:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080d165:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080d169:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
ffff80000080d16d:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:29
    entry->next = new;
ffff80000080d170:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080d174:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
ffff80000080d178:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff80000080d17c:	eb 01                	jmp    ffff80000080d17f <path_walk+0x32d>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:36
            return;
ffff80000080d17e:	90                   	nop
path_walk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:136

        }
        
        
        //标记这个dentry刚刚使用过
        mark_use(path);
ffff80000080d17f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d183:	48 89 c7             	mov    rdi,rax
ffff80000080d186:	49 89 df             	mov    r15,rbx
ffff80000080d189:	48 b8 de 97 ee ff ff 	movabs rax,0xffffffffffee97de
ffff80000080d190:	ff ff ff 
ffff80000080d193:	48 01 d8             	add    rax,rbx
ffff80000080d196:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:137
        if(!*name)
ffff80000080d198:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080d19c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080d19f:	84 c0                	test   al,al
ffff80000080d1a1:	74 2a                	je     ffff80000080d1cd <path_walk+0x37b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:139
            goto last_component;
        while(*name == '/')
ffff80000080d1a3:	eb 05                	jmp    ffff80000080d1aa <path_walk+0x358>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:140
            name++;
ffff80000080d1a5:	48 83 45 98 01       	add    QWORD PTR [rbp-0x68],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:139
        while(*name == '/')
ffff80000080d1aa:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080d1ae:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080d1b1:	3c 2f                	cmp    al,0x2f
ffff80000080d1b3:	74 f0                	je     ffff80000080d1a5 <path_walk+0x353>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:141
        if(!*name)
ffff80000080d1b5:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080d1b9:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080d1bc:	84 c0                	test   al,al
ffff80000080d1be:	74 10                	je     ffff80000080d1d0 <path_walk+0x37e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:143
            goto last_slash;
        parent = path;
ffff80000080d1c0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d1c4:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:84
    {
ffff80000080d1c8:	e9 05 fd ff ff       	jmp    ffff80000080ced2 <path_walk+0x80>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:138
            goto last_component;
ffff80000080d1cd:	90                   	nop
ffff80000080d1ce:	eb 01                	jmp    ffff80000080d1d1 <path_walk+0x37f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:142
            goto last_slash;
ffff80000080d1d0:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:149
    }

    last_slash:
    last_component:

    if(flags & 1)
ffff80000080d1d1:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080d1d5:	83 e0 01             	and    eax,0x1
ffff80000080d1d8:	48 85 c0             	test   rax,rax
ffff80000080d1db:	74 06                	je     ffff80000080d1e3 <path_walk+0x391>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:151
    {
        return parent;
ffff80000080d1dd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d1e1:	eb 04                	jmp    ffff80000080d1e7 <path_walk+0x395>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:154
    }

    return path;
ffff80000080d1e3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:155
}
ffff80000080d1e7:	48 83 c4 60          	add    rsp,0x60
ffff80000080d1eb:	5b                   	pop    rbx
ffff80000080d1ec:	41 5f                	pop    r15
ffff80000080d1ee:	5d                   	pop    rbp
ffff80000080d1ef:	c3                   	ret    

ffff80000080d1f0 <fill_dentry>:
fill_dentry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:159


int fill_dentry(void *buf,char *name, long namelen,long type,long offset)
{
ffff80000080d1f0:	f3 0f 1e fa          	endbr64 
ffff80000080d1f4:	55                   	push   rbp
ffff80000080d1f5:	48 89 e5             	mov    rbp,rsp
ffff80000080d1f8:	41 57                	push   r15
ffff80000080d1fa:	48 83 ec 48          	sub    rsp,0x48
ffff80000080d1fe:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d1fe <fill_dentry+0xe>
ffff80000080d205:	49 bb 32 63 11 00 00 	movabs r11,0x116332
ffff80000080d20c:	00 00 00 
ffff80000080d20f:	4c 01 d8             	add    rax,r11
ffff80000080d212:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff80000080d216:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffff80000080d21a:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
ffff80000080d21e:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
ffff80000080d222:	4c 89 45 b8          	mov    QWORD PTR [rbp-0x48],r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:160
    struct dirent* dent = (struct dirent*)buf;
ffff80000080d226:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080d22a:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:162

    if((unsigned long)buf < PAGE_4K_SIZE)
ffff80000080d22e:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080d232:	48 81 fa ff 0f 00 00 	cmp    rdx,0xfff
ffff80000080d239:	77 07                	ja     ffff80000080d242 <fill_dentry+0x52>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:163
        return -EFAULT;
ffff80000080d23b:	b8 eb ff ff ff       	mov    eax,0xffffffeb
ffff80000080d240:	eb 53                	jmp    ffff80000080d295 <fill_dentry+0xa5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:165

    memcpy(name,dent->d_name,namelen);
ffff80000080d242:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080d246:	89 d7                	mov    edi,edx
ffff80000080d248:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080d24c:	48 8d 72 18          	lea    rsi,[rdx+0x18]
ffff80000080d250:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffff80000080d254:	89 fa                	mov    edx,edi
ffff80000080d256:	48 89 cf             	mov    rdi,rcx
ffff80000080d259:	49 89 c7             	mov    r15,rax
ffff80000080d25c:	48 b9 02 1d ef ff ff 	movabs rcx,0xffffffffffef1d02
ffff80000080d263:	ff ff ff 
ffff80000080d266:	48 01 c1             	add    rcx,rax
ffff80000080d269:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:166
    dent->d_namelen = namelen;
ffff80000080d26b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d26f:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080d273:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:167
    dent->d_type = type;
ffff80000080d277:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d27b:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff80000080d27f:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:168
    dent->d_offset = offset;
ffff80000080d283:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d287:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000080d28b:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:169
    return sizeof(struct dirent) + namelen;
ffff80000080d28e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080d292:	83 c0 18             	add    eax,0x18
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:170
}
ffff80000080d295:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080d299:	c9                   	leave  
ffff80000080d29a:	c3                   	ret    

ffff80000080d29b <mount_fs>:
mount_fs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:177
//function mount_root
struct super_block * root_sb = NULL;
struct file_system_type filesystem = {"filesystem",0};

struct super_block* mount_fs(char * name,struct Disk_Partition_Table_Entry * DPTE,void * buf)
{
ffff80000080d29b:	f3 0f 1e fa          	endbr64 
ffff80000080d29f:	55                   	push   rbp
ffff80000080d2a0:	48 89 e5             	mov    rbp,rsp
ffff80000080d2a3:	41 57                	push   r15
ffff80000080d2a5:	53                   	push   rbx
ffff80000080d2a6:	48 83 ec 30          	sub    rsp,0x30
ffff80000080d2aa:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080d2aa <mount_fs+0xf>
ffff80000080d2b1:	49 bb 86 62 11 00 00 	movabs r11,0x116286
ffff80000080d2b8:	00 00 00 
ffff80000080d2bb:	4c 01 db             	add    rbx,r11
ffff80000080d2be:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff80000080d2c2:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffff80000080d2c6:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:178
    struct file_system_type * p = NULL;
ffff80000080d2ca:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000080d2d1:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:180

    for(p = &filesystem;p;p = p->next)
ffff80000080d2d2:	48 b8 20 ff ff ff ff 	movabs rax,0xffffffffffffff20
ffff80000080d2d9:	ff ff ff 
ffff80000080d2dc:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d2e0:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff80000080d2e4:	eb 4d                	jmp    ffff80000080d333 <mount_fs+0x98>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:181
        if(!strcmp(p->name,name))
ffff80000080d2e6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d2ea:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d2ed:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080d2f1:	48 89 d6             	mov    rsi,rdx
ffff80000080d2f4:	48 89 c7             	mov    rdi,rax
ffff80000080d2f7:	49 89 df             	mov    r15,rbx
ffff80000080d2fa:	48 b8 54 20 ef ff ff 	movabs rax,0xffffffffffef2054
ffff80000080d301:	ff ff ff 
ffff80000080d304:	48 01 d8             	add    rax,rbx
ffff80000080d307:	ff d0                	call   rax
ffff80000080d309:	85 c0                	test   eax,eax
ffff80000080d30b:	75 1a                	jne    ffff80000080d327 <mount_fs+0x8c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:183
        {
            return p->read_superblock(DPTE,buf);
ffff80000080d30d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d311:	48 8b 48 10          	mov    rcx,QWORD PTR [rax+0x10]
ffff80000080d315:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080d319:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080d31d:	48 89 d6             	mov    rsi,rdx
ffff80000080d320:	48 89 c7             	mov    rdi,rax
ffff80000080d323:	ff d1                	call   rcx
ffff80000080d325:	eb 18                	jmp    ffff80000080d33f <mount_fs+0xa4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:180 (discriminator 2)
    for(p = &filesystem;p;p = p->next)
ffff80000080d327:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d32b:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080d32f:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:180 (discriminator 1)
ffff80000080d333:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080d338:	75 ac                	jne    ffff80000080d2e6 <mount_fs+0x4b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:185
        }
    return 0;
ffff80000080d33a:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:186
}
ffff80000080d33f:	48 83 c4 30          	add    rsp,0x30
ffff80000080d343:	5b                   	pop    rbx
ffff80000080d344:	41 5f                	pop    r15
ffff80000080d346:	5d                   	pop    rbp
ffff80000080d347:	c3                   	ret    

ffff80000080d348 <mount_fs_on>:
mount_fs_on():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:187
int mount_fs_on(struct dir_entry *d_to_mount,struct super_block* fs){
ffff80000080d348:	f3 0f 1e fa          	endbr64 
ffff80000080d34c:	55                   	push   rbp
ffff80000080d34d:	48 89 e5             	mov    rbp,rsp
ffff80000080d350:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d350 <mount_fs_on+0x8>
ffff80000080d357:	49 bb e0 61 11 00 00 	movabs r11,0x1161e0
ffff80000080d35e:	00 00 00 
ffff80000080d361:	4c 01 d8             	add    rax,r11
ffff80000080d364:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff80000080d368:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:188
    for(int i=0;i<MAX_MOUNTPOINTS;i++){
ffff80000080d36c:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff80000080d373:	e9 9d 00 00 00       	jmp    ffff80000080d415 <mount_fs_on+0xcd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:189
        if(!mp_mount_points[i].sb){
ffff80000080d378:	48 ba 38 fe ff ff ff 	movabs rdx,0xfffffffffffffe38
ffff80000080d37f:	ff ff ff 
ffff80000080d382:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080d386:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080d389:	48 63 d2             	movsxd rdx,edx
ffff80000080d38c:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080d390:	48 01 ca             	add    rdx,rcx
ffff80000080d393:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080d396:	48 85 d2             	test   rdx,rdx
ffff80000080d399:	75 76                	jne    ffff80000080d411 <mount_fs_on+0xc9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:190
            mp_mount_points[i].sb=fs;
ffff80000080d39b:	48 ba 38 fe ff ff ff 	movabs rdx,0xfffffffffffffe38
ffff80000080d3a2:	ff ff ff 
ffff80000080d3a5:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080d3a9:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080d3ac:	48 63 d2             	movsxd rdx,edx
ffff80000080d3af:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080d3b3:	48 01 d1             	add    rcx,rdx
ffff80000080d3b6:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080d3ba:	48 89 11             	mov    QWORD PTR [rcx],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:191
            mp_mount_points[i].dmount_point=d_to_mount;
ffff80000080d3bd:	48 ba 38 fe ff ff ff 	movabs rdx,0xfffffffffffffe38
ffff80000080d3c4:	ff ff ff 
ffff80000080d3c7:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080d3cb:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080d3ce:	48 63 d2             	movsxd rdx,edx
ffff80000080d3d1:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080d3d5:	48 01 ca             	add    rdx,rcx
ffff80000080d3d8:	48 8d 4a 08          	lea    rcx,[rdx+0x8]
ffff80000080d3dc:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080d3e0:	48 89 11             	mov    QWORD PTR [rcx],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:192
            d_to_mount->mount_point=mp_mount_points+i;
ffff80000080d3e3:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080d3e6:	48 63 d2             	movsxd rdx,edx
ffff80000080d3e9:	48 89 d1             	mov    rcx,rdx
ffff80000080d3ec:	48 c1 e1 04          	shl    rcx,0x4
ffff80000080d3f0:	48 ba 38 fe ff ff ff 	movabs rdx,0xfffffffffffffe38
ffff80000080d3f7:	ff ff ff 
ffff80000080d3fa:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080d3fe:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
ffff80000080d402:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d406:	48 89 50 58          	mov    QWORD PTR [rax+0x58],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:193
            return 1;
ffff80000080d40a:	b8 01 00 00 00       	mov    eax,0x1
ffff80000080d40f:	eb 13                	jmp    ffff80000080d424 <mount_fs_on+0xdc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:188 (discriminator 2)
    for(int i=0;i<MAX_MOUNTPOINTS;i++){
ffff80000080d411:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:188 (discriminator 1)
ffff80000080d415:	83 7d fc 17          	cmp    DWORD PTR [rbp-0x4],0x17
ffff80000080d419:	0f 8e 59 ff ff ff    	jle    ffff80000080d378 <mount_fs_on+0x30>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:196
        }
    }
    return -ENOMEM;
ffff80000080d41f:	b8 cf ff ff ff       	mov    eax,0xffffffcf
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:197
}
ffff80000080d424:	5d                   	pop    rbp
ffff80000080d425:	c3                   	ret    

ffff80000080d426 <umount_fs>:
umount_fs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:198
int umount_fs(struct dir_entry* d_mp){
ffff80000080d426:	f3 0f 1e fa          	endbr64 
ffff80000080d42a:	55                   	push   rbp
ffff80000080d42b:	48 89 e5             	mov    rbp,rsp
ffff80000080d42e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d42e <umount_fs+0x8>
ffff80000080d435:	49 bb 02 61 11 00 00 	movabs r11,0x116102
ffff80000080d43c:	00 00 00 
ffff80000080d43f:	4c 01 d8             	add    rax,r11
ffff80000080d442:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:199
    if(d_mp->mount_point){
ffff80000080d446:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080d44a:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
ffff80000080d44e:	48 85 c0             	test   rax,rax
ffff80000080d451:	74 26                	je     ffff80000080d479 <umount_fs+0x53>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:200
        d_mp->mount_point->dmount_point=0;
ffff80000080d453:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080d457:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
ffff80000080d45b:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
ffff80000080d462:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:201
        d_mp->mount_point->sb=0;
ffff80000080d463:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080d467:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
ffff80000080d46b:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:202
        return 1;
ffff80000080d472:	b8 01 00 00 00       	mov    eax,0x1
ffff80000080d477:	eb 05                	jmp    ffff80000080d47e <umount_fs+0x58>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:204
    }
    return -ENOENT;
ffff80000080d479:	b8 d3 ff ff ff       	mov    eax,0xffffffd3
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:205
}
ffff80000080d47e:	5d                   	pop    rbp
ffff80000080d47f:	c3                   	ret    

ffff80000080d480 <register_filesystem>:
register_filesystem():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:207
unsigned long register_filesystem(struct file_system_type * fs)
{
ffff80000080d480:	f3 0f 1e fa          	endbr64 
ffff80000080d484:	55                   	push   rbp
ffff80000080d485:	48 89 e5             	mov    rbp,rsp
ffff80000080d488:	41 57                	push   r15
ffff80000080d48a:	53                   	push   rbx
ffff80000080d48b:	48 83 ec 20          	sub    rsp,0x20
ffff80000080d48f:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080d48f <register_filesystem+0xf>
ffff80000080d496:	49 bb a1 60 11 00 00 	movabs r11,0x1160a1
ffff80000080d49d:	00 00 00 
ffff80000080d4a0:	4c 01 db             	add    rbx,r11
ffff80000080d4a3:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:208
    struct file_system_type * p = NULL;
ffff80000080d4a7:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000080d4ae:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:210

    for(p = &filesystem;p;p = p->next)
ffff80000080d4af:	48 b8 20 ff ff ff ff 	movabs rax,0xffffffffffffff20
ffff80000080d4b6:	ff ff ff 
ffff80000080d4b9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d4bd:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff80000080d4c1:	eb 3d                	jmp    ffff80000080d500 <register_filesystem+0x80>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:211
        if(!strcmp(fs->name,p->name))
ffff80000080d4c3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d4c7:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080d4ca:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080d4ce:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d4d1:	48 89 d6             	mov    rsi,rdx
ffff80000080d4d4:	48 89 c7             	mov    rdi,rax
ffff80000080d4d7:	49 89 df             	mov    r15,rbx
ffff80000080d4da:	48 b8 54 20 ef ff ff 	movabs rax,0xffffffffffef2054
ffff80000080d4e1:	ff ff ff 
ffff80000080d4e4:	48 01 d8             	add    rax,rbx
ffff80000080d4e7:	ff d0                	call   rax
ffff80000080d4e9:	85 c0                	test   eax,eax
ffff80000080d4eb:	75 07                	jne    ffff80000080d4f4 <register_filesystem+0x74>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:212
            return 0;
ffff80000080d4ed:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080d4f2:	eb 48                	jmp    ffff80000080d53c <register_filesystem+0xbc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:210 (discriminator 2)
    for(p = &filesystem;p;p = p->next)
ffff80000080d4f4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d4f8:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080d4fc:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:210 (discriminator 1)
ffff80000080d500:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080d505:	75 bc                	jne    ffff80000080d4c3 <register_filesystem+0x43>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:214

    fs->next = filesystem.next;
ffff80000080d507:	48 b8 20 ff ff ff ff 	movabs rax,0xffffffffffffff20
ffff80000080d50e:	ff ff ff 
ffff80000080d511:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d515:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
ffff80000080d519:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080d51d:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:215
    filesystem.next = fs;
ffff80000080d521:	48 b8 20 ff ff ff ff 	movabs rax,0xffffffffffffff20
ffff80000080d528:	ff ff ff 
ffff80000080d52b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d52f:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080d533:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:217

    return 1;
ffff80000080d537:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:218
}
ffff80000080d53c:	48 83 c4 20          	add    rsp,0x20
ffff80000080d540:	5b                   	pop    rbx
ffff80000080d541:	41 5f                	pop    r15
ffff80000080d543:	5d                   	pop    rbp
ffff80000080d544:	c3                   	ret    

ffff80000080d545 <unregister_filesystem>:
unregister_filesystem():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:221

unsigned long unregister_filesystem(struct file_system_type * fs)
{
ffff80000080d545:	f3 0f 1e fa          	endbr64 
ffff80000080d549:	55                   	push   rbp
ffff80000080d54a:	48 89 e5             	mov    rbp,rsp
ffff80000080d54d:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d54d <unregister_filesystem+0x8>
ffff80000080d554:	49 bb e3 5f 11 00 00 	movabs r11,0x115fe3
ffff80000080d55b:	00 00 00 
ffff80000080d55e:	4c 01 d8             	add    rax,r11
ffff80000080d561:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:222
    struct file_system_type * p = &filesystem;
ffff80000080d565:	48 ba 20 ff ff ff ff 	movabs rdx,0xffffffffffffff20
ffff80000080d56c:	ff ff ff 
ffff80000080d56f:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080d573:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:224

    while(p->next)
ffff80000080d577:	eb 41                	jmp    ffff80000080d5ba <unregister_filesystem+0x75>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:225
        if(p->next == fs)
ffff80000080d579:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080d57d:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080d581:	48 39 45 e8          	cmp    QWORD PTR [rbp-0x18],rax
ffff80000080d585:	75 27                	jne    ffff80000080d5ae <unregister_filesystem+0x69>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:227
        {
            p->next = p->next->next;
ffff80000080d587:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080d58b:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080d58f:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
ffff80000080d593:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080d597:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:228
            fs->next = NULL;
ffff80000080d59b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d59f:	48 c7 40 18 00 00 00 	mov    QWORD PTR [rax+0x18],0x0
ffff80000080d5a6:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:229
            return 1;
ffff80000080d5a7:	b8 01 00 00 00       	mov    eax,0x1
ffff80000080d5ac:	eb 1e                	jmp    ffff80000080d5cc <unregister_filesystem+0x87>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:232
        }
        else
            p = p->next;
ffff80000080d5ae:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080d5b2:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080d5b6:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:224
    while(p->next)
ffff80000080d5ba:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080d5be:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080d5c2:	48 85 c0             	test   rax,rax
ffff80000080d5c5:	75 b2                	jne    ffff80000080d579 <unregister_filesystem+0x34>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:233
    return 0;
ffff80000080d5c7:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:234
}
ffff80000080d5cc:	5d                   	pop    rbp
ffff80000080d5cd:	c3                   	ret    

ffff80000080d5ce <root_lookup>:
root_lookup():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:236
//在parent inode下查找dest dentry
struct dir_entry* root_lookup(struct index_node * parent_inode,struct dir_entry * dest_dentry){
ffff80000080d5ce:	f3 0f 1e fa          	endbr64 
ffff80000080d5d2:	55                   	push   rbp
ffff80000080d5d3:	48 89 e5             	mov    rbp,rsp
ffff80000080d5d6:	41 57                	push   r15
ffff80000080d5d8:	53                   	push   rbx
ffff80000080d5d9:	48 83 ec 30          	sub    rsp,0x30
ffff80000080d5dd:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080d5dd <root_lookup+0xf>
ffff80000080d5e4:	49 bb 53 5f 11 00 00 	movabs r11,0x115f53
ffff80000080d5eb:	00 00 00 
ffff80000080d5ee:	4c 01 db             	add    rbx,r11
ffff80000080d5f1:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff80000080d5f5:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:237
    struct dir_entry* tmp= (struct dir_entry *) parent_inode->private_index_info;
ffff80000080d5f9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080d5fd:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff80000080d601:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:238
    struct List* p= tmp->subdirs_list.next;
ffff80000080d605:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d609:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff80000080d60d:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:239
    while (p){
ffff80000080d611:	eb 61                	jmp    ffff80000080d674 <root_lookup+0xa6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:240
        struct dir_entry* dp=p->data;
ffff80000080d613:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d617:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080d61b:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:241
        if(strcmp(dp->name,dest_dentry->name)==0){
ffff80000080d61f:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080d623:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080d626:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080d62a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d62d:	48 89 d6             	mov    rsi,rdx
ffff80000080d630:	48 89 c7             	mov    rdi,rax
ffff80000080d633:	49 89 df             	mov    r15,rbx
ffff80000080d636:	48 b8 54 20 ef ff ff 	movabs rax,0xffffffffffef2054
ffff80000080d63d:	ff ff ff 
ffff80000080d640:	48 01 d8             	add    rax,rbx
ffff80000080d643:	ff d0                	call   rax
ffff80000080d645:	85 c0                	test   eax,eax
ffff80000080d647:	75 1f                	jne    ffff80000080d668 <root_lookup+0x9a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:242
            kmfree(dest_dentry);
ffff80000080d649:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080d64d:	48 89 c7             	mov    rdi,rax
ffff80000080d650:	49 89 df             	mov    r15,rbx
ffff80000080d653:	48 b8 37 00 ee ff ff 	movabs rax,0xffffffffffee0037
ffff80000080d65a:	ff ff ff 
ffff80000080d65d:	48 01 d8             	add    rax,rbx
ffff80000080d660:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:243
            return dp;
ffff80000080d662:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080d666:	eb 31                	jmp    ffff80000080d699 <root_lookup+0xcb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:245
        }
        p=p->next;
ffff80000080d668:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d66c:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080d670:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:239
    while (p){
ffff80000080d674:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080d679:	75 98                	jne    ffff80000080d613 <root_lookup+0x45>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:247
    }
    kmfree(dest_dentry);
ffff80000080d67b:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080d67f:	48 89 c7             	mov    rdi,rax
ffff80000080d682:	49 89 df             	mov    r15,rbx
ffff80000080d685:	48 b8 37 00 ee ff ff 	movabs rax,0xffffffffffee0037
ffff80000080d68c:	ff ff ff 
ffff80000080d68f:	48 01 d8             	add    rax,rbx
ffff80000080d692:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:248
    return NULL;
ffff80000080d694:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:249
}
ffff80000080d699:	48 83 c4 30          	add    rsp,0x30
ffff80000080d69d:	5b                   	pop    rbx
ffff80000080d69e:	41 5f                	pop    r15
ffff80000080d6a0:	5d                   	pop    rbp
ffff80000080d6a1:	c3                   	ret    

ffff80000080d6a2 <init_rootfs>:
init_rootfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:253
struct index_node_operations root_iops={
    .lookup=root_lookup
};
void init_rootfs(){
ffff80000080d6a2:	f3 0f 1e fa          	endbr64 
ffff80000080d6a6:	55                   	push   rbp
ffff80000080d6a7:	48 89 e5             	mov    rbp,rsp
ffff80000080d6aa:	41 57                	push   r15
ffff80000080d6ac:	53                   	push   rbx
ffff80000080d6ad:	48 83 ec 10          	sub    rsp,0x10
ffff80000080d6b1:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080d6b1 <init_rootfs+0xf>
ffff80000080d6b8:	49 bb 7f 5e 11 00 00 	movabs r11,0x115e7f
ffff80000080d6bf:	00 00 00 
ffff80000080d6c2:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:257
    /* root_sb=(struct super_block*) kmalloc(0,PAGE_4K_SIZE);
    root_sb->root=root_sb+1;//紧凑跟在后面
    root_sb->sb_ops=NULL; */
    droot=kmalloc(0,sizeof(struct dir_entry));
ffff80000080d6c5:	be 68 00 00 00       	mov    esi,0x68
ffff80000080d6ca:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080d6cf:	49 89 df             	mov    r15,rbx
ffff80000080d6d2:	48 b8 96 fe ed ff ff 	movabs rax,0xffffffffffedfe96
ffff80000080d6d9:	ff ff ff 
ffff80000080d6dc:	48 01 d8             	add    rax,rbx
ffff80000080d6df:	ff d0                	call   rax
ffff80000080d6e1:	48 ba 48 fd ff ff ff 	movabs rdx,0xfffffffffffffd48
ffff80000080d6e8:	ff ff ff 
ffff80000080d6eb:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080d6ef:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:268
    ir->file_size=0;
    ir->inode_ops=&root_iops;//lookup函数是必要的
    ir->f_ops=NULL;
    ir->private_index_info=droot; */

    droot->name=droot+1;//紧凑跟在后面
ffff80000080d6f2:	48 b8 48 fd ff ff ff 	movabs rax,0xfffffffffffffd48
ffff80000080d6f9:	ff ff ff 
ffff80000080d6fc:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d700:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080d703:	48 b8 48 fd ff ff ff 	movabs rax,0xfffffffffffffd48
ffff80000080d70a:	ff ff ff 
ffff80000080d70d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d711:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d714:	48 83 c2 68          	add    rdx,0x68
ffff80000080d718:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:269
    strcpy(droot->name,"/");
ffff80000080d71b:	48 b8 48 fd ff ff ff 	movabs rax,0xfffffffffffffd48
ffff80000080d722:	ff ff ff 
ffff80000080d725:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d729:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d72c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d72f:	48 ba f0 d4 ff ff ff 	movabs rdx,0xffffffffffffd4f0
ffff80000080d736:	ff ff ff 
ffff80000080d739:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff80000080d73d:	48 89 d6             	mov    rsi,rdx
ffff80000080d740:	48 89 c7             	mov    rdi,rax
ffff80000080d743:	49 89 df             	mov    r15,rbx
ffff80000080d746:	48 b8 06 1e ef ff ff 	movabs rax,0xffffffffffef1e06
ffff80000080d74d:	ff ff ff 
ffff80000080d750:	48 01 d8             	add    rax,rbx
ffff80000080d753:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:270
    droot->name_length=1;
ffff80000080d755:	48 b8 48 fd ff ff ff 	movabs rax,0xfffffffffffffd48
ffff80000080d75c:	ff ff ff 
ffff80000080d75f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d763:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d766:	c7 40 08 01 00 00 00 	mov    DWORD PTR [rax+0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:271
    droot->parent=droot;
ffff80000080d76d:	48 b8 48 fd ff ff ff 	movabs rax,0xfffffffffffffd48
ffff80000080d774:	ff ff ff 
ffff80000080d777:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d77b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d77e:	48 ba 48 fd ff ff ff 	movabs rdx,0xfffffffffffffd48
ffff80000080d785:	ff ff ff 
ffff80000080d788:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080d78c:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080d78f:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:272
    list_init(&droot->subdirs_list);
ffff80000080d793:	48 b8 48 fd ff ff ff 	movabs rax,0xfffffffffffffd48
ffff80000080d79a:	ff ff ff 
ffff80000080d79d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d7a1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d7a4:	48 83 c0 28          	add    rax,0x28
ffff80000080d7a8:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff80000080d7ac:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d7b0:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000080d7b7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d7bb:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000080d7c2:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000080d7c3:	90                   	nop
init_rootfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:273
    list_init(&droot->child_node);
ffff80000080d7c4:	48 b8 48 fd ff ff ff 	movabs rax,0xfffffffffffffd48
ffff80000080d7cb:	ff ff ff 
ffff80000080d7ce:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d7d2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d7d5:	48 83 c0 10          	add    rax,0x10
ffff80000080d7d9:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff80000080d7dd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d7e1:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000080d7e8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d7ec:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000080d7f3:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000080d7f4:	90                   	nop
init_rootfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:274
    droot->child_node.data=droot;
ffff80000080d7f5:	48 b8 48 fd ff ff ff 	movabs rax,0xfffffffffffffd48
ffff80000080d7fc:	ff ff ff 
ffff80000080d7ff:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d803:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d806:	48 ba 48 fd ff ff ff 	movabs rdx,0xfffffffffffffd48
ffff80000080d80d:	ff ff ff 
ffff80000080d810:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080d814:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080d817:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:279

    // root_sb->dev=dev_ramdisk<<8;
    // root_sb->p_dev=&bd_ramdisk;
    //TODO 以后要直接拿设备号，这个设备号通过devman创建设备文件（节点）分配。
    ROOT_DEV=dev_ramdisk<<8;
ffff80000080d81b:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff80000080d822:	ff ff ff 
ffff80000080d825:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d829:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080d82b:	c1 e0 08             	shl    eax,0x8
ffff80000080d82e:	89 c2                	mov    edx,eax
ffff80000080d830:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff80000080d837:	ff ff ff 
ffff80000080d83a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d83e:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:281
    
}
ffff80000080d840:	90                   	nop
ffff80000080d841:	48 83 c4 10          	add    rsp,0x10
ffff80000080d845:	5b                   	pop    rbx
ffff80000080d846:	41 5f                	pop    r15
ffff80000080d848:	5d                   	pop    rbp
ffff80000080d849:	c3                   	ret    

ffff80000080d84a <sys_putstring>:
sys_putstring():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:22
#include "int.h"
#include <sys/mman.h>


unsigned long sys_putstring(char *string)
{
ffff80000080d84a:	f3 0f 1e fa          	endbr64 
ffff80000080d84e:	55                   	push   rbp
ffff80000080d84f:	48 89 e5             	mov    rbp,rsp
ffff80000080d852:	41 57                	push   r15
ffff80000080d854:	48 83 ec 18          	sub    rsp,0x18
ffff80000080d858:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080d858 <sys_putstring+0xe>
ffff80000080d85f:	49 bb d8 5c 11 00 00 	movabs r11,0x115cd8
ffff80000080d866:	00 00 00 
ffff80000080d869:	4c 01 da             	add    rdx,r11
ffff80000080d86c:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:23
    printf(string);
ffff80000080d870:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d874:	48 89 c7             	mov    rdi,rax
ffff80000080d877:	49 89 d7             	mov    r15,rdx
ffff80000080d87a:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080d87f:	48 b9 91 e4 ed ff ff 	movabs rcx,0xffffffffffede491
ffff80000080d886:	ff ff ff 
ffff80000080d889:	48 01 d1             	add    rcx,rdx
ffff80000080d88c:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:24
    return 0;
ffff80000080d88e:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:25
}
ffff80000080d893:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080d897:	c9                   	leave  
ffff80000080d898:	c3                   	ret    

ffff80000080d899 <sys_open>:
sys_open():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:28

unsigned long sys_open(char *filename,int flags)
{
ffff80000080d899:	f3 0f 1e fa          	endbr64 
ffff80000080d89d:	55                   	push   rbp
ffff80000080d89e:	48 89 e5             	mov    rbp,rsp
ffff80000080d8a1:	41 57                	push   r15
ffff80000080d8a3:	53                   	push   rbx
ffff80000080d8a4:	48 81 ec 90 00 00 00 	sub    rsp,0x90
ffff80000080d8ab:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080d8ab <sys_open+0x12>
ffff80000080d8b2:	49 bb 85 5c 11 00 00 	movabs r11,0x115c85
ffff80000080d8b9:	00 00 00 
ffff80000080d8bc:	4c 01 db             	add    rbx,r11
ffff80000080d8bf:	48 89 bd 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdi
ffff80000080d8c6:	89 b5 64 ff ff ff    	mov    DWORD PTR [rbp-0x9c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:29
    char * path = NULL;
ffff80000080d8cc:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff80000080d8d3:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:30
    long pathlen = 0;
ffff80000080d8d4:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
ffff80000080d8db:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:31
    long error = 0;
ffff80000080d8dc:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000080d8e3:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:32
    struct dir_entry * dentry = NULL;
ffff80000080d8e4:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff80000080d8eb:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:33
    struct file * filp = NULL;
ffff80000080d8ec:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffff80000080d8f3:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:34
    struct file ** f = NULL;
ffff80000080d8f4:	48 c7 45 b0 00 00 00 	mov    QWORD PTR [rbp-0x50],0x0
ffff80000080d8fb:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:35
    int fd = -1;
ffff80000080d8fc:	c7 45 dc ff ff ff ff 	mov    DWORD PTR [rbp-0x24],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:39
    int i;

//	printf("sys_open\n");
    path = (char *) kmalloc(0,PAGE_4K_SIZE);
ffff80000080d903:	be 00 10 00 00       	mov    esi,0x1000
ffff80000080d908:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080d90d:	49 89 df             	mov    r15,rbx
ffff80000080d910:	48 b8 96 fe ed ff ff 	movabs rax,0xffffffffffedfe96
ffff80000080d917:	ff ff ff 
ffff80000080d91a:	48 01 d8             	add    rax,rbx
ffff80000080d91d:	ff d0                	call   rax
ffff80000080d91f:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:40
    if(path == NULL)
ffff80000080d923:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffff80000080d928:	75 0c                	jne    ffff80000080d936 <sys_open+0x9d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:41
        return -ENOMEM;
ffff80000080d92a:	48 c7 c0 cf ff ff ff 	mov    rax,0xffffffffffffffcf
ffff80000080d931:	e9 8b 05 00 00       	jmp    ffff80000080dec1 <sys_open+0x628>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:42
    memset(path,0,PAGE_4K_SIZE);
ffff80000080d936:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080d93a:	ba 00 10 00 00       	mov    edx,0x1000
ffff80000080d93f:	be 00 00 00 00       	mov    esi,0x0
ffff80000080d944:	48 89 c7             	mov    rdi,rax
ffff80000080d947:	49 89 df             	mov    r15,rbx
ffff80000080d94a:	48 b8 b1 1d ef ff ff 	movabs rax,0xffffffffffef1db1
ffff80000080d951:	ff ff ff 
ffff80000080d954:	48 01 d8             	add    rax,rbx
ffff80000080d957:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:43
    pathlen = strlen(filename);
ffff80000080d959:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080d960:	48 89 c7             	mov    rdi,rax
ffff80000080d963:	49 89 df             	mov    r15,rbx
ffff80000080d966:	48 b8 d3 20 ef ff ff 	movabs rax,0xffffffffffef20d3
ffff80000080d96d:	ff ff ff 
ffff80000080d970:	48 01 d8             	add    rax,rbx
ffff80000080d973:	ff d0                	call   rax
ffff80000080d975:	48 98                	cdqe   
ffff80000080d977:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:44
    if(pathlen <= 0)
ffff80000080d97b:	48 83 7d c0 00       	cmp    QWORD PTR [rbp-0x40],0x0
ffff80000080d980:	7f 25                	jg     ffff80000080d9a7 <sys_open+0x10e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:46
    {
        kmfree(path);
ffff80000080d982:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080d986:	48 89 c7             	mov    rdi,rax
ffff80000080d989:	49 89 df             	mov    r15,rbx
ffff80000080d98c:	48 b8 37 00 ee ff ff 	movabs rax,0xffffffffffee0037
ffff80000080d993:	ff ff ff 
ffff80000080d996:	48 01 d8             	add    rax,rbx
ffff80000080d999:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:47
        return -EFAULT;
ffff80000080d99b:	48 c7 c0 eb ff ff ff 	mov    rax,0xffffffffffffffeb
ffff80000080d9a2:	e9 1a 05 00 00       	jmp    ffff80000080dec1 <sys_open+0x628>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:49
    }
    else if(pathlen >= PAGE_4K_SIZE)
ffff80000080d9a7:	48 81 7d c0 ff 0f 00 	cmp    QWORD PTR [rbp-0x40],0xfff
ffff80000080d9ae:	00 
ffff80000080d9af:	7e 25                	jle    ffff80000080d9d6 <sys_open+0x13d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:51
    {
        kmfree(path);
ffff80000080d9b1:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080d9b5:	48 89 c7             	mov    rdi,rax
ffff80000080d9b8:	49 89 df             	mov    r15,rbx
ffff80000080d9bb:	48 b8 37 00 ee ff ff 	movabs rax,0xffffffffffee0037
ffff80000080d9c2:	ff ff ff 
ffff80000080d9c5:	48 01 d8             	add    rax,rbx
ffff80000080d9c8:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:52
        return -ENAMETOOLONG;
ffff80000080d9ca:	48 c7 c0 db ff ff ff 	mov    rax,0xffffffffffffffdb
ffff80000080d9d1:	e9 eb 04 00 00       	jmp    ffff80000080dec1 <sys_open+0x628>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:54
    }
    strcpy(path,filename);
ffff80000080d9d6:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
ffff80000080d9dd:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080d9e1:	48 89 d6             	mov    rsi,rdx
ffff80000080d9e4:	48 89 c7             	mov    rdi,rax
ffff80000080d9e7:	49 89 df             	mov    r15,rbx
ffff80000080d9ea:	48 b8 06 1e ef ff ff 	movabs rax,0xffffffffffef1e06
ffff80000080d9f1:	ff ff ff 
ffff80000080d9f4:	48 01 d8             	add    rax,rbx
ffff80000080d9f7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:56

    dentry = path_walk(path,0);
ffff80000080d9f9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080d9fd:	be 00 00 00 00       	mov    esi,0x0
ffff80000080da02:	48 89 c7             	mov    rdi,rax
ffff80000080da05:	49 89 df             	mov    r15,rbx
ffff80000080da08:	48 b8 22 99 ee ff ff 	movabs rax,0xffffffffffee9922
ffff80000080da0f:	ff ff ff 
ffff80000080da12:	48 01 d8             	add    rax,rbx
ffff80000080da15:	ff d0                	call   rax
ffff80000080da17:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:58

    if(dentry == NULL){
ffff80000080da1b:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
ffff80000080da20:	0f 85 37 02 00 00    	jne    ffff80000080dc5d <sys_open+0x3c4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:64
        if(!flags&O_CREAT)
            return -ENOENT;
        //创建文件
        //TODO 创建文件改为更正规的方法
        //找到上一级目录
        char* p=path+strlen(path)-1;
ffff80000080da26:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080da2a:	48 89 c7             	mov    rdi,rax
ffff80000080da2d:	49 89 df             	mov    r15,rbx
ffff80000080da30:	48 b8 d3 20 ef ff ff 	movabs rax,0xffffffffffef20d3
ffff80000080da37:	ff ff ff 
ffff80000080da3a:	48 01 d8             	add    rax,rbx
ffff80000080da3d:	ff d0                	call   rax
ffff80000080da3f:	48 98                	cdqe   
ffff80000080da41:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff80000080da45:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080da49:	48 01 d0             	add    rax,rdx
ffff80000080da4c:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:65
        for(;*p!='/'&&p>path;p--);
ffff80000080da50:	eb 05                	jmp    ffff80000080da57 <sys_open+0x1be>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:65 (discriminator 3)
ffff80000080da52:	48 83 6d d0 01       	sub    QWORD PTR [rbp-0x30],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:65 (discriminator 1)
ffff80000080da57:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080da5b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080da5e:	3c 2f                	cmp    al,0x2f
ffff80000080da60:	74 0a                	je     ffff80000080da6c <sys_open+0x1d3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:65 (discriminator 2)
ffff80000080da62:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080da66:	48 3b 45 c8          	cmp    rax,QWORD PTR [rbp-0x38]
ffff80000080da6a:	77 e6                	ja     ffff80000080da52 <sys_open+0x1b9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:66
        *p='\0';
ffff80000080da6c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080da70:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:67
        struct dir_entry *parent= path_walk(path,O_DIRECTORY);
ffff80000080da73:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080da77:	be 00 40 00 00       	mov    esi,0x4000
ffff80000080da7c:	48 89 c7             	mov    rdi,rax
ffff80000080da7f:	49 89 df             	mov    r15,rbx
ffff80000080da82:	48 b8 22 99 ee ff ff 	movabs rax,0xffffffffffee9922
ffff80000080da89:	ff ff ff 
ffff80000080da8c:	48 01 d8             	add    rax,rbx
ffff80000080da8f:	ff d0                	call   rax
ffff80000080da91:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:68
        if(parent==NULL)
ffff80000080da95:	48 83 7d a8 00       	cmp    QWORD PTR [rbp-0x58],0x0
ffff80000080da9a:	75 0c                	jne    ffff80000080daa8 <sys_open+0x20f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:69
            return -ENOENT;//上级目录也不在
ffff80000080da9c:	48 c7 c0 d3 ff ff ff 	mov    rax,0xffffffffffffffd3
ffff80000080daa3:	e9 19 04 00 00       	jmp    ffff80000080dec1 <sys_open+0x628>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:71
        //创建新的文件
        dentry=(struct dir_entry*) kmalloc(0,sizeof(struct dir_entry));
ffff80000080daa8:	be 68 00 00 00       	mov    esi,0x68
ffff80000080daad:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080dab2:	49 89 df             	mov    r15,rbx
ffff80000080dab5:	48 b8 96 fe ed ff ff 	movabs rax,0xffffffffffedfe96
ffff80000080dabc:	ff ff ff 
ffff80000080dabf:	48 01 d8             	add    rax,rbx
ffff80000080dac2:	ff d0                	call   rax
ffff80000080dac4:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:72
        list_init(&dentry->subdirs_list);
ffff80000080dac8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080dacc:	48 83 c0 28          	add    rax,0x28
ffff80000080dad0:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff80000080dad7:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080dade:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000080dae5:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080daec:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000080daf3:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000080daf4:	90                   	nop
sys_open():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:73
        list_init(&dentry->child_node);
ffff80000080daf5:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080daf9:	48 83 c0 10          	add    rax,0x10
ffff80000080dafd:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff80000080db04:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff80000080db0b:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000080db12:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff80000080db19:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000080db20:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000080db21:	90                   	nop
sys_open():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:74
        dentry->child_node.data=dentry;
ffff80000080db22:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080db26:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080db2a:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:75
        list_add(&parent->subdirs_list,&dentry->child_node);
ffff80000080db2e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080db32:	48 83 c0 10          	add    rax,0x10
ffff80000080db36:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff80000080db3a:	48 83 c2 28          	add    rdx,0x28
ffff80000080db3e:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
ffff80000080db42:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:33
    struct List* p=entry;
ffff80000080db46:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080db4a:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:34
    for(;p->next&&p->next!=p;p=p->next){
ffff80000080db4e:	eb 21                	jmp    ffff80000080db71 <sys_open+0x2d8>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:35
        if(p->data==new->data)
ffff80000080db50:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080db54:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff80000080db58:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080db5c:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080db60:	48 39 c2             	cmp    rdx,rax
ffff80000080db63:	74 7c                	je     ffff80000080dbe1 <sys_open+0x348>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:34
    for(;p->next&&p->next!=p;p=p->next){
ffff80000080db65:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080db69:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080db6d:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
ffff80000080db71:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080db75:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080db79:	48 85 c0             	test   rax,rax
ffff80000080db7c:	74 0e                	je     ffff80000080db8c <sys_open+0x2f3>
ffff80000080db7e:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080db82:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080db86:	48 39 45 90          	cmp    QWORD PTR [rbp-0x70],rax
ffff80000080db8a:	75 c4                	jne    ffff80000080db50 <sys_open+0x2b7>
ffff80000080db8c:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080db90:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
ffff80000080db94:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080db98:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff80000080db9c:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080dba0:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080dba4:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080dba8:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff80000080dbac:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080dbb0:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
ffff80000080dbb4:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff80000080dbb7:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080dbbb:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080dbbf:	48 85 c0             	test   rax,rax
ffff80000080dbc2:	74 0f                	je     ffff80000080dbd3 <sys_open+0x33a>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff80000080dbc4:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080dbc8:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080dbcc:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
ffff80000080dbd0:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:29
    entry->next = new;
ffff80000080dbd3:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080dbd7:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
ffff80000080dbdb:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff80000080dbdf:	eb 01                	jmp    ffff80000080dbe2 <sys_open+0x349>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:36
            return;
ffff80000080dbe1:	90                   	nop
sys_open():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:76
        dentry->parent=parent;
ffff80000080dbe2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080dbe6:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff80000080dbea:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:77
        dentry->dir_inode=dentry+1;//放在后面
ffff80000080dbee:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080dbf2:	48 8d 50 68          	lea    rdx,[rax+0x68]
ffff80000080dbf6:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080dbfa:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:78
        dentry->dir_inode->file_size=0;
ffff80000080dbfe:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080dc02:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080dc06:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:80
        //继承操作方法
        dentry->dir_inode->f_ops=parent->dir_inode->f_ops;
ffff80000080dc0d:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080dc11:	48 8b 50 40          	mov    rdx,QWORD PTR [rax+0x40]
ffff80000080dc15:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080dc19:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080dc1d:	48 8b 52 28          	mov    rdx,QWORD PTR [rdx+0x28]
ffff80000080dc21:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:81
        dentry->dir_inode->inode_ops=parent->dir_inode->inode_ops;
ffff80000080dc25:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080dc29:	48 8b 50 40          	mov    rdx,QWORD PTR [rax+0x40]
ffff80000080dc2d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080dc31:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080dc35:	48 8b 52 30          	mov    rdx,QWORD PTR [rdx+0x30]
ffff80000080dc39:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:82
        dentry->dir_ops=parent->dir_ops;
ffff80000080dc3d:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080dc41:	48 8b 50 60          	mov    rdx,QWORD PTR [rax+0x60]
ffff80000080dc45:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080dc49:	48 89 50 60          	mov    QWORD PTR [rax+0x60],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:84
        //这样的创建文件只能创建普通文件，设备文件要通过devman创建
        dentry->dir_inode->attribute=FS_ATTR_FILE;
ffff80000080dc4d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080dc51:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080dc55:	48 c7 40 10 01 00 00 	mov    QWORD PTR [rax+0x10],0x1
ffff80000080dc5c:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:86
    }
    dentry->link++;//这样哪怕长时间不path walk，也不会被释放
ffff80000080dc5d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080dc61:	0f b6 40 50          	movzx  eax,BYTE PTR [rax+0x50]
ffff80000080dc65:	83 c0 01             	add    eax,0x1
ffff80000080dc68:	89 c2                	mov    edx,eax
ffff80000080dc6a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080dc6e:	88 50 50             	mov    BYTE PTR [rax+0x50],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:89
    // kmfree(path);

    if((flags & O_DIRECTORY) && (dentry->dir_inode->attribute != FS_ATTR_DIR))
ffff80000080dc71:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
ffff80000080dc77:	25 00 40 00 00       	and    eax,0x4000
ffff80000080dc7c:	85 c0                	test   eax,eax
ffff80000080dc7e:	74 1e                	je     ffff80000080dc9e <sys_open+0x405>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:89 (discriminator 1)
ffff80000080dc80:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080dc84:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080dc88:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080dc8c:	48 83 f8 02          	cmp    rax,0x2
ffff80000080dc90:	74 0c                	je     ffff80000080dc9e <sys_open+0x405>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:90
        return -ENOTDIR;
ffff80000080dc92:	48 c7 c0 c7 ff ff ff 	mov    rax,0xffffffffffffffc7
ffff80000080dc99:	e9 23 02 00 00       	jmp    ffff80000080dec1 <sys_open+0x628>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:91
    if(!(flags & O_DIRECTORY) && (dentry->dir_inode->attribute == FS_ATTR_DIR))
ffff80000080dc9e:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
ffff80000080dca4:	25 00 40 00 00       	and    eax,0x4000
ffff80000080dca9:	85 c0                	test   eax,eax
ffff80000080dcab:	75 1e                	jne    ffff80000080dccb <sys_open+0x432>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:91 (discriminator 1)
ffff80000080dcad:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080dcb1:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080dcb5:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080dcb9:	48 83 f8 02          	cmp    rax,0x2
ffff80000080dcbd:	75 0c                	jne    ffff80000080dccb <sys_open+0x432>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:92
        return -EISDIR;
ffff80000080dcbf:	48 c7 c0 e1 ff ff ff 	mov    rax,0xffffffffffffffe1
ffff80000080dcc6:	e9 f6 01 00 00       	jmp    ffff80000080dec1 <sys_open+0x628>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:94

    filp = (struct file *) kmalloc(0,sizeof(struct file));
ffff80000080dccb:	be 28 00 00 00       	mov    esi,0x28
ffff80000080dcd0:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080dcd5:	49 89 df             	mov    r15,rbx
ffff80000080dcd8:	48 b8 96 fe ed ff ff 	movabs rax,0xffffffffffedfe96
ffff80000080dcdf:	ff ff ff 
ffff80000080dce2:	48 01 d8             	add    rax,rbx
ffff80000080dce5:	ff d0                	call   rax
ffff80000080dce7:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:95
    memset(filp,0,sizeof(struct file));
ffff80000080dceb:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080dcef:	ba 28 00 00 00       	mov    edx,0x28
ffff80000080dcf4:	be 00 00 00 00       	mov    esi,0x0
ffff80000080dcf9:	48 89 c7             	mov    rdi,rax
ffff80000080dcfc:	49 89 df             	mov    r15,rbx
ffff80000080dcff:	48 b8 b1 1d ef ff ff 	movabs rax,0xffffffffffef1db1
ffff80000080dd06:	ff ff ff 
ffff80000080dd09:	48 01 d8             	add    rax,rbx
ffff80000080dd0c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:96
    filp->dentry = dentry;
ffff80000080dd0e:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080dd12:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080dd16:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:97
    filp->mode = flags;
ffff80000080dd1a:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
ffff80000080dd20:	48 63 d0             	movsxd rdx,eax
ffff80000080dd23:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080dd27:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:99

    if(dentry->dir_inode->attribute & FS_ATTR_DEVICE){
ffff80000080dd2b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080dd2f:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080dd33:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080dd37:	83 e0 04             	and    eax,0x4
ffff80000080dd3a:	48 85 c0             	test   rax,rax
ffff80000080dd3d:	74 18                	je     ffff80000080dd57 <sys_open+0x4be>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:101
        extern struct file_operations devfs_fops;
        filp->f_ops = &devfs_fops;	//////	find device file operation function
ffff80000080dd3f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080dd43:	48 ba 78 fd ff ff ff 	movabs rdx,0xfffffffffffffd78
ffff80000080dd4a:	ff ff ff 
ffff80000080dd4d:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080dd51:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
ffff80000080dd55:	eb 14                	jmp    ffff80000080dd6b <sys_open+0x4d2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:104
    }
    else
        filp->f_ops = dentry->dir_inode->f_ops;
ffff80000080dd57:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080dd5b:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080dd5f:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
ffff80000080dd63:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080dd67:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:105
    if(filp->f_ops && filp->f_ops->open)
ffff80000080dd6b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080dd6f:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080dd73:	48 85 c0             	test   rax,rax
ffff80000080dd76:	74 33                	je     ffff80000080ddab <sys_open+0x512>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:105 (discriminator 1)
ffff80000080dd78:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080dd7c:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080dd80:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080dd83:	48 85 c0             	test   rax,rax
ffff80000080dd86:	74 23                	je     ffff80000080ddab <sys_open+0x512>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:106
        error = filp->f_ops->open(dentry->dir_inode,filp);
ffff80000080dd88:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080dd8c:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080dd90:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080dd93:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080dd97:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080dd9b:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000080dd9f:	48 89 d6             	mov    rsi,rdx
ffff80000080dda2:	48 89 c7             	mov    rdi,rax
ffff80000080dda5:	ff d1                	call   rcx
ffff80000080dda7:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:107
    if(error != 1)
ffff80000080ddab:	48 83 7d e8 01       	cmp    QWORD PTR [rbp-0x18],0x1
ffff80000080ddb0:	74 25                	je     ffff80000080ddd7 <sys_open+0x53e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:109
    {
        kmfree(filp);
ffff80000080ddb2:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080ddb6:	48 89 c7             	mov    rdi,rax
ffff80000080ddb9:	49 89 df             	mov    r15,rbx
ffff80000080ddbc:	48 b8 37 00 ee ff ff 	movabs rax,0xffffffffffee0037
ffff80000080ddc3:	ff ff ff 
ffff80000080ddc6:	48 01 d8             	add    rax,rbx
ffff80000080ddc9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:110
        return -EFAULT;
ffff80000080ddcb:	48 c7 c0 eb ff ff ff 	mov    rax,0xffffffffffffffeb
ffff80000080ddd2:	e9 ea 00 00 00       	jmp    ffff80000080dec1 <sys_open+0x628>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:113
    }

    if(filp->mode & O_TRUNC)
ffff80000080ddd7:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080dddb:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080dddf:	25 00 02 00 00       	and    eax,0x200
ffff80000080dde4:	48 85 c0             	test   rax,rax
ffff80000080dde7:	74 13                	je     ffff80000080ddfc <sys_open+0x563>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:115
    {
        filp->dentry->dir_inode->file_size = 0;
ffff80000080dde9:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080dded:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080ddf1:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080ddf5:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:117
    }
    if(filp->mode & O_APPEND)
ffff80000080ddfc:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080de00:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080de04:	25 00 04 00 00       	and    eax,0x400
ffff80000080de09:	48 85 c0             	test   rax,rax
ffff80000080de0c:	74 19                	je     ffff80000080de27 <sys_open+0x58e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:119
    {
        filp->position = filp->dentry->dir_inode->file_size;
ffff80000080de0e:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080de12:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080de16:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080de1a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080de1d:	48 89 c2             	mov    rdx,rax
ffff80000080de20:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080de24:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:122
    }

    f = current->openf;
ffff80000080de27:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080de2e:	ff ff ff 
ffff80000080de31:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080de35:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080de38:	48 05 f8 00 00 00    	add    rax,0xf8
ffff80000080de3e:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:123
    for(i = 0;i < MAX_TASKS;i++)
ffff80000080de42:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [rbp-0x28],0x0
ffff80000080de49:	eb 28                	jmp    ffff80000080de73 <sys_open+0x5da>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:124
        if(f[i] == NULL)
ffff80000080de4b:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080de4e:	48 98                	cdqe   
ffff80000080de50:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080de57:	00 
ffff80000080de58:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080de5c:	48 01 d0             	add    rax,rdx
ffff80000080de5f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080de62:	48 85 c0             	test   rax,rax
ffff80000080de65:	75 08                	jne    ffff80000080de6f <sys_open+0x5d6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:126
        {
            fd = i;
ffff80000080de67:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080de6a:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:127
            break;
ffff80000080de6d:	eb 0a                	jmp    ffff80000080de79 <sys_open+0x5e0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:123 (discriminator 2)
    for(i = 0;i < MAX_TASKS;i++)
ffff80000080de6f:	83 45 d8 01          	add    DWORD PTR [rbp-0x28],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:123 (discriminator 1)
ffff80000080de73:	83 7d d8 1f          	cmp    DWORD PTR [rbp-0x28],0x1f
ffff80000080de77:	7e d2                	jle    ffff80000080de4b <sys_open+0x5b2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:129
        }
    if(i == MAX_TASKS)
ffff80000080de79:	83 7d d8 20          	cmp    DWORD PTR [rbp-0x28],0x20
ffff80000080de7d:	75 22                	jne    ffff80000080dea1 <sys_open+0x608>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:131
    {
        kmfree(filp);
ffff80000080de7f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080de83:	48 89 c7             	mov    rdi,rax
ffff80000080de86:	49 89 df             	mov    r15,rbx
ffff80000080de89:	48 b8 37 00 ee ff ff 	movabs rax,0xffffffffffee0037
ffff80000080de90:	ff ff ff 
ffff80000080de93:	48 01 d8             	add    rax,rbx
ffff80000080de96:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:133
        //// reclaim struct index_node & struct dir_entry
        return -EMFILE;
ffff80000080de98:	48 c7 c0 df ff ff ff 	mov    rax,0xffffffffffffffdf
ffff80000080de9f:	eb 20                	jmp    ffff80000080dec1 <sys_open+0x628>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:135
    }
    f[fd] = filp;
ffff80000080dea1:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080dea4:	48 98                	cdqe   
ffff80000080dea6:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080dead:	00 
ffff80000080deae:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080deb2:	48 01 c2             	add    rdx,rax
ffff80000080deb5:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080deb9:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:137

    return fd;
ffff80000080debc:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080debf:	48 98                	cdqe   
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:138
}
ffff80000080dec1:	48 81 c4 90 00 00 00 	add    rsp,0x90
ffff80000080dec8:	5b                   	pop    rbx
ffff80000080dec9:	41 5f                	pop    r15
ffff80000080decb:	5d                   	pop    rbp
ffff80000080decc:	c3                   	ret    

ffff80000080decd <sys_close>:
sys_close():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:141

unsigned long sys_close(int fd)
{
ffff80000080decd:	f3 0f 1e fa          	endbr64 
ffff80000080ded1:	55                   	push   rbp
ffff80000080ded2:	48 89 e5             	mov    rbp,rsp
ffff80000080ded5:	41 57                	push   r15
ffff80000080ded7:	53                   	push   rbx
ffff80000080ded8:	48 83 ec 20          	sub    rsp,0x20
ffff80000080dedc:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080dedc <sys_close+0xf>
ffff80000080dee3:	49 bb 54 56 11 00 00 	movabs r11,0x115654
ffff80000080deea:	00 00 00 
ffff80000080deed:	4c 01 db             	add    rbx,r11
ffff80000080def0:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:142
    struct file * filp = NULL;
ffff80000080def3:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000080defa:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:145

//	printf("sys_close:%d\n",fd);
    if(fd < 0 || fd >= MAX_TASKS)
ffff80000080defb:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
ffff80000080deff:	78 06                	js     ffff80000080df07 <sys_close+0x3a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:145 (discriminator 1)
ffff80000080df01:	83 7d dc 1f          	cmp    DWORD PTR [rbp-0x24],0x1f
ffff80000080df05:	7e 0c                	jle    ffff80000080df13 <sys_close+0x46>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:146
        return -EBADF;
ffff80000080df07:	48 c7 c0 f8 ff ff ff 	mov    rax,0xfffffffffffffff8
ffff80000080df0e:	e9 ba 00 00 00       	jmp    ffff80000080dfcd <sys_close+0x100>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:148

    filp = current->openf[fd];
ffff80000080df13:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080df1a:	ff ff ff 
ffff80000080df1d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080df21:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080df24:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080df27:	48 63 d2             	movsxd rdx,edx
ffff80000080df2a:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080df2e:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff80000080df33:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:149
    if(filp->f_ops && filp->f_ops->close)
ffff80000080df37:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080df3b:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080df3f:	48 85 c0             	test   rax,rax
ffff80000080df42:	74 35                	je     ffff80000080df79 <sys_close+0xac>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:149 (discriminator 1)
ffff80000080df44:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080df48:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080df4c:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080df50:	48 85 c0             	test   rax,rax
ffff80000080df53:	74 24                	je     ffff80000080df79 <sys_close+0xac>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:150
        filp->f_ops->close(filp->dentry->dir_inode,filp);
ffff80000080df55:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080df59:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080df5d:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
ffff80000080df61:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080df65:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080df69:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080df6d:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080df71:	48 89 d6             	mov    rsi,rdx
ffff80000080df74:	48 89 c7             	mov    rdi,rax
ffff80000080df77:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:151
    filp->dentry->link--;
ffff80000080df79:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080df7d:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080df81:	0f b6 50 50          	movzx  edx,BYTE PTR [rax+0x50]
ffff80000080df85:	83 ea 01             	sub    edx,0x1
ffff80000080df88:	88 50 50             	mov    BYTE PTR [rax+0x50],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:152
    kmfree(filp);
ffff80000080df8b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080df8f:	48 89 c7             	mov    rdi,rax
ffff80000080df92:	49 89 df             	mov    r15,rbx
ffff80000080df95:	48 b8 37 00 ee ff ff 	movabs rax,0xffffffffffee0037
ffff80000080df9c:	ff ff ff 
ffff80000080df9f:	48 01 d8             	add    rax,rbx
ffff80000080dfa2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:153
    current->openf[fd] = NULL;
ffff80000080dfa4:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080dfab:	ff ff ff 
ffff80000080dfae:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080dfb2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080dfb5:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080dfb8:	48 63 d2             	movsxd rdx,edx
ffff80000080dfbb:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080dfbf:	48 c7 44 d0 08 00 00 	mov    QWORD PTR [rax+rdx*8+0x8],0x0
ffff80000080dfc6:	00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:155

    return 0;
ffff80000080dfc8:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:156
}
ffff80000080dfcd:	48 83 c4 20          	add    rsp,0x20
ffff80000080dfd1:	5b                   	pop    rbx
ffff80000080dfd2:	41 5f                	pop    r15
ffff80000080dfd4:	5d                   	pop    rbp
ffff80000080dfd5:	c3                   	ret    

ffff80000080dfd6 <sys_read>:
sys_read():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:159

unsigned long sys_read(int fd,void * buf,long count)
{
ffff80000080dfd6:	f3 0f 1e fa          	endbr64 
ffff80000080dfda:	55                   	push   rbp
ffff80000080dfdb:	48 89 e5             	mov    rbp,rsp
ffff80000080dfde:	48 83 ec 30          	sub    rsp,0x30
ffff80000080dfe2:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080dfe2 <sys_read+0xc>
ffff80000080dfe9:	49 bb 4e 55 11 00 00 	movabs r11,0x11554e
ffff80000080dff0:	00 00 00 
ffff80000080dff3:	4c 01 d8             	add    rax,r11
ffff80000080dff6:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff80000080dff9:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080dffd:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:160
    struct file * filp = NULL;
ffff80000080e001:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffff80000080e008:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:161
    unsigned long ret = 0;
ffff80000080e009:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080e010:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:164

//	printf("sys_read:%d\n",fd);
    if(fd < 0 || fd >= MAX_TASKS)
ffff80000080e011:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff80000080e015:	78 06                	js     ffff80000080e01d <sys_read+0x47>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:164 (discriminator 1)
ffff80000080e017:	83 7d ec 1f          	cmp    DWORD PTR [rbp-0x14],0x1f
ffff80000080e01b:	7e 09                	jle    ffff80000080e026 <sys_read+0x50>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:165
        return -EBADF;
ffff80000080e01d:	48 c7 c0 f8 ff ff ff 	mov    rax,0xfffffffffffffff8
ffff80000080e024:	eb 7c                	jmp    ffff80000080e0a2 <sys_read+0xcc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:166
    if(count < 0)
ffff80000080e026:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff80000080e02b:	79 09                	jns    ffff80000080e036 <sys_read+0x60>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:167
        return -EINVAL;
ffff80000080e02d:	48 c7 c0 e4 ff ff ff 	mov    rax,0xffffffffffffffe4
ffff80000080e034:	eb 6c                	jmp    ffff80000080e0a2 <sys_read+0xcc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:169

    filp = current->openf[fd];
ffff80000080e036:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff80000080e03d:	ff ff ff 
ffff80000080e040:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080e044:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e047:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080e04a:	48 63 d2             	movsxd rdx,edx
ffff80000080e04d:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080e051:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff80000080e056:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:170
    if(filp->f_ops && filp->f_ops->read)
ffff80000080e05a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080e05e:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080e062:	48 85 c0             	test   rax,rax
ffff80000080e065:	74 37                	je     ffff80000080e09e <sys_read+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:170 (discriminator 1)
ffff80000080e067:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080e06b:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080e06f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080e073:	48 85 c0             	test   rax,rax
ffff80000080e076:	74 26                	je     ffff80000080e09e <sys_read+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:171
        ret = filp->f_ops->read(filp,buf,count,&filp->position);
ffff80000080e078:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080e07c:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080e080:	4c 8b 40 10          	mov    r8,QWORD PTR [rax+0x10]
ffff80000080e084:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff80000080e088:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080e08c:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff80000080e090:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080e094:	48 89 c7             	mov    rdi,rax
ffff80000080e097:	41 ff d0             	call   r8
ffff80000080e09a:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:172
    return ret;
ffff80000080e09e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:173
}
ffff80000080e0a2:	c9                   	leave  
ffff80000080e0a3:	c3                   	ret    

ffff80000080e0a4 <sys_write>:
sys_write():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:176

unsigned long sys_write(int fd,void * buf,long count)
{
ffff80000080e0a4:	f3 0f 1e fa          	endbr64 
ffff80000080e0a8:	55                   	push   rbp
ffff80000080e0a9:	48 89 e5             	mov    rbp,rsp
ffff80000080e0ac:	48 83 ec 30          	sub    rsp,0x30
ffff80000080e0b0:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080e0b0 <sys_write+0xc>
ffff80000080e0b7:	49 bb 80 54 11 00 00 	movabs r11,0x115480
ffff80000080e0be:	00 00 00 
ffff80000080e0c1:	4c 01 d8             	add    rax,r11
ffff80000080e0c4:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff80000080e0c7:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080e0cb:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:177
    struct file * filp = NULL;
ffff80000080e0cf:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffff80000080e0d6:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:178
    unsigned long ret = 0;
ffff80000080e0d7:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080e0de:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:181

//	printf("sys_write:%d\n",fd);
    if(fd < 0 || fd >= MAX_TASKS)
ffff80000080e0df:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff80000080e0e3:	78 06                	js     ffff80000080e0eb <sys_write+0x47>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:181 (discriminator 1)
ffff80000080e0e5:	83 7d ec 1f          	cmp    DWORD PTR [rbp-0x14],0x1f
ffff80000080e0e9:	7e 09                	jle    ffff80000080e0f4 <sys_write+0x50>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:182
        return -EBADF;
ffff80000080e0eb:	48 c7 c0 f8 ff ff ff 	mov    rax,0xfffffffffffffff8
ffff80000080e0f2:	eb 7c                	jmp    ffff80000080e170 <sys_write+0xcc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:183
    if(count < 0)
ffff80000080e0f4:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff80000080e0f9:	79 09                	jns    ffff80000080e104 <sys_write+0x60>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:184
        return -EINVAL;
ffff80000080e0fb:	48 c7 c0 e4 ff ff ff 	mov    rax,0xffffffffffffffe4
ffff80000080e102:	eb 6c                	jmp    ffff80000080e170 <sys_write+0xcc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:186

    filp = current->openf[fd];
ffff80000080e104:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff80000080e10b:	ff ff ff 
ffff80000080e10e:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080e112:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e115:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080e118:	48 63 d2             	movsxd rdx,edx
ffff80000080e11b:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080e11f:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff80000080e124:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:187
    if(filp->f_ops && filp->f_ops->write)
ffff80000080e128:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080e12c:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080e130:	48 85 c0             	test   rax,rax
ffff80000080e133:	74 37                	je     ffff80000080e16c <sys_write+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:187 (discriminator 1)
ffff80000080e135:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080e139:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080e13d:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080e141:	48 85 c0             	test   rax,rax
ffff80000080e144:	74 26                	je     ffff80000080e16c <sys_write+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:188
        ret = filp->f_ops->write(filp,buf,count,&filp->position);
ffff80000080e146:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080e14a:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080e14e:	4c 8b 40 18          	mov    r8,QWORD PTR [rax+0x18]
ffff80000080e152:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff80000080e156:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080e15a:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff80000080e15e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080e162:	48 89 c7             	mov    rdi,rax
ffff80000080e165:	41 ff d0             	call   r8
ffff80000080e168:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:189
    return ret;
ffff80000080e16c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:190
}
ffff80000080e170:	c9                   	leave  
ffff80000080e171:	c3                   	ret    

ffff80000080e172 <sys_lseek>:
sys_lseek():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:194


unsigned long sys_lseek(int filds,long offset,int whence)
{
ffff80000080e172:	f3 0f 1e fa          	endbr64 
ffff80000080e176:	55                   	push   rbp
ffff80000080e177:	48 89 e5             	mov    rbp,rsp
ffff80000080e17a:	48 83 ec 20          	sub    rsp,0x20
ffff80000080e17e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080e17e <sys_lseek+0xc>
ffff80000080e185:	49 bb b2 53 11 00 00 	movabs r11,0x1153b2
ffff80000080e18c:	00 00 00 
ffff80000080e18f:	4c 01 d8             	add    rax,r11
ffff80000080e192:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff80000080e195:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080e199:	89 55 e8             	mov    DWORD PTR [rbp-0x18],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:195
    struct file * filp = NULL;
ffff80000080e19c:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffff80000080e1a3:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:196
    unsigned long ret = 0;
ffff80000080e1a4:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080e1ab:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:199

//	printf("sys_lseek:%d\n",filds);
    if(filds < 0 || filds >= MAX_TASKS)
ffff80000080e1ac:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff80000080e1b0:	78 06                	js     ffff80000080e1b8 <sys_lseek+0x46>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:199 (discriminator 1)
ffff80000080e1b2:	83 7d ec 1f          	cmp    DWORD PTR [rbp-0x14],0x1f
ffff80000080e1b6:	7e 0c                	jle    ffff80000080e1c4 <sys_lseek+0x52>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:200
        return -EBADF;
ffff80000080e1b8:	48 c7 c0 f8 ff ff ff 	mov    rax,0xfffffffffffffff8
ffff80000080e1bf:	e9 82 00 00 00       	jmp    ffff80000080e246 <sys_lseek+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:201
    if(whence < 0 || whence >= SEEK_MAX)
ffff80000080e1c4:	83 7d e8 00          	cmp    DWORD PTR [rbp-0x18],0x0
ffff80000080e1c8:	78 06                	js     ffff80000080e1d0 <sys_lseek+0x5e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:201 (discriminator 1)
ffff80000080e1ca:	83 7d e8 02          	cmp    DWORD PTR [rbp-0x18],0x2
ffff80000080e1ce:	7e 09                	jle    ffff80000080e1d9 <sys_lseek+0x67>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:202
        return -EINVAL;
ffff80000080e1d0:	48 c7 c0 e4 ff ff ff 	mov    rax,0xffffffffffffffe4
ffff80000080e1d7:	eb 6d                	jmp    ffff80000080e246 <sys_lseek+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:204

    filp = current->openf[filds];
ffff80000080e1d9:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff80000080e1e0:	ff ff ff 
ffff80000080e1e3:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080e1e7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e1ea:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080e1ed:	48 63 d2             	movsxd rdx,edx
ffff80000080e1f0:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080e1f4:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff80000080e1f9:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:205
    if(filp->f_ops && filp->f_ops->lseek)
ffff80000080e1fd:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080e201:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080e205:	48 85 c0             	test   rax,rax
ffff80000080e208:	74 38                	je     ffff80000080e242 <sys_lseek+0xd0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:205 (discriminator 1)
ffff80000080e20a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080e20e:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080e212:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000080e216:	48 85 c0             	test   rax,rax
ffff80000080e219:	74 27                	je     ffff80000080e242 <sys_lseek+0xd0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:206
        ret = filp->f_ops->lseek(filp,offset,whence);
ffff80000080e21b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080e21f:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080e223:	4c 8b 40 20          	mov    r8,QWORD PTR [rax+0x20]
ffff80000080e227:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080e22a:	48 63 d0             	movsxd rdx,eax
ffff80000080e22d:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
ffff80000080e231:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080e235:	48 89 ce             	mov    rsi,rcx
ffff80000080e238:	48 89 c7             	mov    rdi,rax
ffff80000080e23b:	41 ff d0             	call   r8
ffff80000080e23e:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:207
    return ret;
ffff80000080e242:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:208
}
ffff80000080e246:	c9                   	leave  
ffff80000080e247:	c3                   	ret    

ffff80000080e248 <sys_vfork>:
sys_vfork():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:218
//    printf("sys_fork\n");
//    //return do_fork(regs,0,regs->rsp,0);
//}

unsigned long sys_vfork()
{
ffff80000080e248:	f3 0f 1e fa          	endbr64 
ffff80000080e24c:	55                   	push   rbp
ffff80000080e24d:	48 89 e5             	mov    rbp,rsp
ffff80000080e250:	41 57                	push   r15
ffff80000080e252:	53                   	push   rbx
ffff80000080e253:	48 83 ec 10          	sub    rsp,0x10
ffff80000080e257:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080e257 <sys_vfork+0xf>
ffff80000080e25e:	49 bb d9 52 11 00 00 	movabs r11,0x1152d9
ffff80000080e265:	00 00 00 
ffff80000080e268:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:219
    regs_t *regs = (regs_t *)current->tss.rsp0 -1;
ffff80000080e26b:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080e272:	ff ff ff 
ffff80000080e275:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e279:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e27c:	48 8b 80 fc 01 00 00 	mov    rax,QWORD PTR [rax+0x1fc]
ffff80000080e283:	48 2d d0 00 00 00    	sub    rax,0xd0
ffff80000080e289:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:220
    printf("sys_vfork\n");
ffff80000080e28d:	48 b8 f8 d4 ff ff ff 	movabs rax,0xffffffffffffd4f8
ffff80000080e294:	ff ff ff 
ffff80000080e297:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080e29b:	48 89 c7             	mov    rdi,rax
ffff80000080e29e:	49 89 df             	mov    r15,rbx
ffff80000080e2a1:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e2a6:	48 ba 91 e4 ed ff ff 	movabs rdx,0xffffffffffede491
ffff80000080e2ad:	ff ff ff 
ffff80000080e2b0:	48 01 da             	add    rdx,rbx
ffff80000080e2b3:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:221
    return sys_fork();
ffff80000080e2b5:	49 89 df             	mov    r15,rbx
ffff80000080e2b8:	48 b8 44 43 ee ff ff 	movabs rax,0xffffffffffee4344
ffff80000080e2bf:	ff ff ff 
ffff80000080e2c2:	48 01 d8             	add    rax,rbx
ffff80000080e2c5:	ff d0                	call   rax
ffff80000080e2c7:	48 98                	cdqe   
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:223
    //return do_fork(regs,CLONE_VM | CLONE_FS | CLONE_SIGNAL,regs->rsp,0);
}
ffff80000080e2c9:	48 83 c4 10          	add    rsp,0x10
ffff80000080e2cd:	5b                   	pop    rbx
ffff80000080e2ce:	41 5f                	pop    r15
ffff80000080e2d0:	5d                   	pop    rbp
ffff80000080e2d1:	c3                   	ret    

ffff80000080e2d2 <sys_wait>:
sys_wait():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:266

/*
	rusage reserved
*/

unsigned long sys_wait(pid_t pid, int *stat_loc, int options){
ffff80000080e2d2:	f3 0f 1e fa          	endbr64 
ffff80000080e2d6:	55                   	push   rbp
ffff80000080e2d7:	48 89 e5             	mov    rbp,rsp
ffff80000080e2da:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080e2da <sys_wait+0x8>
ffff80000080e2e1:	49 bb 56 52 11 00 00 	movabs r11,0x115256
ffff80000080e2e8:	00 00 00 
ffff80000080e2eb:	4c 01 d8             	add    rax,r11
ffff80000080e2ee:	89 7d bc             	mov    DWORD PTR [rbp-0x44],edi
ffff80000080e2f1:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
ffff80000080e2f5:	89 55 b8             	mov    DWORD PTR [rbp-0x48],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:267
    struct process* waitee=NULL;
ffff80000080e2f8:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080e2ff:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:269
    extern struct process task[];
    if(!current->child_procs)
ffff80000080e300:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff80000080e307:	ff ff ff 
ffff80000080e30a:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080e30e:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080e311:	48 8b 92 54 03 00 00 	mov    rdx,QWORD PTR [rdx+0x354]
ffff80000080e318:	48 85 d2             	test   rdx,rdx
ffff80000080e31b:	75 0c                	jne    ffff80000080e329 <sys_wait+0x57>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:270
        return -ECHILD;//没有子进程可以等
ffff80000080e31d:	48 c7 c0 f4 ff ff ff 	mov    rax,0xfffffffffffffff4
ffff80000080e324:	e9 11 02 00 00       	jmp    ffff80000080e53a <sys_wait+0x268>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:271
    if(pid==-1){
ffff80000080e329:	83 7d bc ff          	cmp    DWORD PTR [rbp-0x44],0xffffffff
ffff80000080e32d:	75 58                	jne    ffff80000080e387 <sys_wait+0xb5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:274
        //任意一个子进程
        while (1) {
            for(struct List* l=current->child_procs;l;l=l->next) {
ffff80000080e32f:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff80000080e336:	ff ff ff 
ffff80000080e339:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080e33d:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080e340:	48 8b 92 54 03 00 00 	mov    rdx,QWORD PTR [rdx+0x354]
ffff80000080e347:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
ffff80000080e34b:	eb 31                	jmp    ffff80000080e37e <sys_wait+0xac>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:275
                struct process* p=l->data;
ffff80000080e34d:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080e351:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff80000080e355:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:276
                if(p->stat == TASK_ZOMBIE) {
ffff80000080e359:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000080e35d:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff80000080e360:	83 fa 04             	cmp    edx,0x4
ffff80000080e363:	75 0d                	jne    ffff80000080e372 <sys_wait+0xa0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:277
                    waitee=p;
ffff80000080e365:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080e369:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:278
                    goto done;
ffff80000080e36d:	e9 68 01 00 00       	jmp    ffff80000080e4da <sys_wait+0x208>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:274 (discriminator 2)
            for(struct List* l=current->child_procs;l;l=l->next) {
ffff80000080e372:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080e376:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
ffff80000080e37a:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:274 (discriminator 1)
ffff80000080e37e:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
ffff80000080e383:	75 c8                	jne    ffff80000080e34d <sys_wait+0x7b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:274
ffff80000080e385:	eb a8                	jmp    ffff80000080e32f <sys_wait+0x5d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:283
                }
            }
        }

    }else if(pid==0) {
ffff80000080e387:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
ffff80000080e38b:	75 77                	jne    ffff80000080e404 <sys_wait+0x132>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:286
        //等待任意一个和父进程同一个进程组的子进程
        while (1) {
            for(struct List* l=current->child_procs;l;l=l->next) {
ffff80000080e38d:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff80000080e394:	ff ff ff 
ffff80000080e397:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080e39b:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080e39e:	48 8b 92 54 03 00 00 	mov    rdx,QWORD PTR [rdx+0x354]
ffff80000080e3a5:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080e3a9:	eb 50                	jmp    ffff80000080e3fb <sys_wait+0x129>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:287
                struct process* p=l->data;
ffff80000080e3ab:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080e3af:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff80000080e3b3:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:288
                if(p->gpid==current->gpid&& p->stat == TASK_ZOMBIE) {
ffff80000080e3b7:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080e3bb:	8b 4a 04             	mov    ecx,DWORD PTR [rdx+0x4]
ffff80000080e3be:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff80000080e3c5:	ff ff ff 
ffff80000080e3c8:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080e3cc:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080e3cf:	8b 52 04             	mov    edx,DWORD PTR [rdx+0x4]
ffff80000080e3d2:	39 d1                	cmp    ecx,edx
ffff80000080e3d4:	75 19                	jne    ffff80000080e3ef <sys_wait+0x11d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:288 (discriminator 1)
ffff80000080e3d6:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080e3da:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff80000080e3dd:	83 fa 04             	cmp    edx,0x4
ffff80000080e3e0:	75 0d                	jne    ffff80000080e3ef <sys_wait+0x11d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:289
                    waitee=p;
ffff80000080e3e2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080e3e6:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:290
                    goto done;
ffff80000080e3ea:	e9 eb 00 00 00       	jmp    ffff80000080e4da <sys_wait+0x208>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:286 (discriminator 2)
            for(struct List* l=current->child_procs;l;l=l->next) {
ffff80000080e3ef:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080e3f3:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
ffff80000080e3f7:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:286 (discriminator 1)
ffff80000080e3fb:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080e400:	75 a9                	jne    ffff80000080e3ab <sys_wait+0xd9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:286
ffff80000080e402:	eb 89                	jmp    ffff80000080e38d <sys_wait+0xbb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:295
                }
            }
        }
    }else{
        if(pid<0)pid=-pid;
ffff80000080e404:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
ffff80000080e408:	79 03                	jns    ffff80000080e40d <sys_wait+0x13b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:295 (discriminator 1)
ffff80000080e40a:	f7 5d bc             	neg    DWORD PTR [rbp-0x44]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:297
        //检查是不是本进程的子进程
        for(int i=0;i<MAX_TASKS;i++){
ffff80000080e40d:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff80000080e414:	eb 71                	jmp    ffff80000080e487 <sys_wait+0x1b5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:298
            if(task[i].pid==pid){
ffff80000080e416:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff80000080e41d:	ff ff ff 
ffff80000080e420:	48 8b 34 10          	mov    rsi,QWORD PTR [rax+rdx*1]
ffff80000080e424:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffff80000080e427:	48 63 ca             	movsxd rcx,edx
ffff80000080e42a:	48 89 ca             	mov    rdx,rcx
ffff80000080e42d:	48 01 d2             	add    rdx,rdx
ffff80000080e430:	48 01 ca             	add    rdx,rcx
ffff80000080e433:	48 8d 0c d5 00 00 00 	lea    rcx,[rdx*8+0x0]
ffff80000080e43a:	00 
ffff80000080e43b:	48 01 ca             	add    rdx,rcx
ffff80000080e43e:	48 c1 e2 05          	shl    rdx,0x5
ffff80000080e442:	48 01 f2             	add    rdx,rsi
ffff80000080e445:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff80000080e447:	8b 55 bc             	mov    edx,DWORD PTR [rbp-0x44]
ffff80000080e44a:	39 d1                	cmp    ecx,edx
ffff80000080e44c:	75 35                	jne    ffff80000080e483 <sys_wait+0x1b1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:299
                waitee=&task[i];
ffff80000080e44e:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffff80000080e451:	48 63 ca             	movsxd rcx,edx
ffff80000080e454:	48 89 ca             	mov    rdx,rcx
ffff80000080e457:	48 01 d2             	add    rdx,rdx
ffff80000080e45a:	48 01 ca             	add    rdx,rcx
ffff80000080e45d:	48 8d 0c d5 00 00 00 	lea    rcx,[rdx*8+0x0]
ffff80000080e464:	00 
ffff80000080e465:	48 01 ca             	add    rdx,rcx
ffff80000080e468:	48 c1 e2 05          	shl    rdx,0x5
ffff80000080e46c:	48 b9 60 fe ff ff ff 	movabs rcx,0xfffffffffffffe60
ffff80000080e473:	ff ff ff 
ffff80000080e476:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080e47a:	48 01 ca             	add    rdx,rcx
ffff80000080e47d:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:300
                break;
ffff80000080e481:	eb 0a                	jmp    ffff80000080e48d <sys_wait+0x1bb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:297 (discriminator 2)
        for(int i=0;i<MAX_TASKS;i++){
ffff80000080e483:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:297 (discriminator 1)
ffff80000080e487:	83 7d e4 1f          	cmp    DWORD PTR [rbp-0x1c],0x1f
ffff80000080e48b:	7e 89                	jle    ffff80000080e416 <sys_wait+0x144>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:303
            }
        }
        if(waitee==NULL||waitee->parent_pid!=current->pid)
ffff80000080e48d:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffff80000080e492:	74 21                	je     ffff80000080e4b5 <sys_wait+0x1e3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:303 (discriminator 1)
ffff80000080e494:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080e498:	8b 92 bc 00 00 00    	mov    edx,DWORD PTR [rdx+0xbc]
ffff80000080e49e:	48 b9 48 fe ff ff ff 	movabs rcx,0xfffffffffffffe48
ffff80000080e4a5:	ff ff ff 
ffff80000080e4a8:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff80000080e4ac:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e4af:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080e4b1:	39 c2                	cmp    edx,eax
ffff80000080e4b3:	74 09                	je     ffff80000080e4be <sys_wait+0x1ec>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:304
            return -ECHILD;//没有这个进程或者不是子进程
ffff80000080e4b5:	48 c7 c0 f4 ff ff ff 	mov    rax,0xfffffffffffffff4
ffff80000080e4bc:	eb 7c                	jmp    ffff80000080e53a <sys_wait+0x268>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:306
        //TODO 等待结束以及等待信号
        while (waitee->stat != TASK_ZOMBIE);
ffff80000080e4be:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:306 (discriminator 1)
ffff80000080e4bf:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080e4c3:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff80000080e4c6:	83 f8 04             	cmp    eax,0x4
ffff80000080e4c9:	75 f4                	jne    ffff80000080e4bf <sys_wait+0x1ed>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:307
        *stat_loc=waitee->exit_code;
ffff80000080e4cb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080e4cf:	8b 40 24             	mov    eax,DWORD PTR [rax+0x24]
ffff80000080e4d2:	89 c2                	mov    edx,eax
ffff80000080e4d4:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080e4d8:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:311
    }
    done:
    //清除子进程
    waitee->stat=TASK_EMPTY;
ffff80000080e4da:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080e4de:	c7 40 18 00 00 00 00 	mov    DWORD PTR [rax+0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:313
    //从链表中删除，不再是子进程
    list_drop(&waitee->node);
ffff80000080e4e5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080e4e9:	48 05 3c 03 00 00    	add    rax,0x33c
ffff80000080e4ef:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
list_drop():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:43
    if(entry->prev)
ffff80000080e4f3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080e4f7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e4fa:	48 85 c0             	test   rax,rax
ffff80000080e4fd:	74 13                	je     ffff80000080e512 <sys_wait+0x240>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:44
        entry->prev->next=entry->next;
ffff80000080e4ff:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080e503:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e506:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080e50a:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
ffff80000080e50e:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:45
    if(entry->next)
ffff80000080e512:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080e516:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080e51a:	48 85 c0             	test   rax,rax
ffff80000080e51d:	74 12                	je     ffff80000080e531 <sys_wait+0x25f>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:46
        entry->next->prev=entry->prev;
ffff80000080e51f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080e523:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080e527:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080e52b:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080e52e:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:47
}
ffff80000080e531:	90                   	nop
sys_wait():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:315
    //TODO 被信号中断时返回-1
    return waitee->pid;
ffff80000080e532:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080e536:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080e538:	89 c0                	mov    eax,eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:316
}
ffff80000080e53a:	5d                   	pop    rbp
ffff80000080e53b:	c3                   	ret    

ffff80000080e53c <sys_wait4>:
sys_wait4():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:318
unsigned long sys_wait4(unsigned long pid,int *status,int options,void *rusage)
{
ffff80000080e53c:	f3 0f 1e fa          	endbr64 
ffff80000080e540:	55                   	push   rbp
ffff80000080e541:	48 89 e5             	mov    rbp,rsp
ffff80000080e544:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080e544 <sys_wait4+0x8>
ffff80000080e54b:	49 bb ec 4f 11 00 00 	movabs r11,0x114fec
ffff80000080e552:	00 00 00 
ffff80000080e555:	4c 01 d8             	add    rax,r11
ffff80000080e558:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080e55c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080e560:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
ffff80000080e563:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:354
//    copy_to_user(&child->exit_code,status,sizeof(long));
//    tsk->next = child->next;
//    exit_mm(child);
//    vmfree(child);
//    return retval;
}
ffff80000080e567:	90                   	nop
ffff80000080e568:	5d                   	pop    rbp
ffff80000080e569:	c3                   	ret    

ffff80000080e56a <sys_brk>:
sys_brk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:357
//扩展或者释放进程可用内存（堆）空间。分配时以4K为单位
unsigned long sys_brk(unsigned long brk)
{
ffff80000080e56a:	f3 0f 1e fa          	endbr64 
ffff80000080e56e:	55                   	push   rbp
ffff80000080e56f:	48 89 e5             	mov    rbp,rsp
ffff80000080e572:	41 57                	push   r15
ffff80000080e574:	53                   	push   rbx
ffff80000080e575:	48 83 ec 20          	sub    rsp,0x20
ffff80000080e579:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080e579 <sys_brk+0xf>
ffff80000080e580:	49 bb b7 4f 11 00 00 	movabs r11,0x114fb7
ffff80000080e587:	00 00 00 
ffff80000080e58a:	4c 01 db             	add    rbx,r11
ffff80000080e58d:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:358
   unsigned long new_brk = PAGE_4K_ALIGN(brk);
ffff80000080e591:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080e595:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff80000080e59b:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
ffff80000080e5a1:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:362

//	printf("sys_brk\n");
//	printf("brk:%#018lx,new_brk:%#018lx,current->mm->end_brk:%#018lx\n",brk,new_brk,current->mm->end_brk);
    if(new_brk == 0)
ffff80000080e5a5:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080e5aa:	75 1a                	jne    ffff80000080e5c6 <sys_brk+0x5c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:363
       return current->mem_struct.heap_base;
ffff80000080e5ac:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080e5b3:	ff ff ff 
ffff80000080e5b6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e5ba:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e5bd:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080e5c1:	e9 c9 00 00 00       	jmp    ffff80000080e68f <sys_brk+0x125>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:364
    if(new_brk<current->mem_struct.heap_base)return current->mem_struct.heap_top;
ffff80000080e5c6:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080e5cd:	ff ff ff 
ffff80000080e5d0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e5d4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e5d7:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080e5db:	48 39 45 e8          	cmp    QWORD PTR [rbp-0x18],rax
ffff80000080e5df:	73 1a                	jae    ffff80000080e5fb <sys_brk+0x91>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:364 (discriminator 1)
ffff80000080e5e1:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080e5e8:	ff ff ff 
ffff80000080e5eb:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e5ef:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e5f2:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff80000080e5f6:	e9 94 00 00 00       	jmp    ffff80000080e68f <sys_brk+0x125>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:365
    if(new_brk < current->mem_struct.heap_top)
ffff80000080e5fb:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080e602:	ff ff ff 
ffff80000080e605:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e609:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e60c:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff80000080e610:	48 39 45 e8          	cmp    QWORD PTR [rbp-0x18],rax
ffff80000080e614:	73 3f                	jae    ffff80000080e655 <sys_brk+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:367
    {
        size_t ms=current->mem_struct.heap_top-new_brk;
ffff80000080e616:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080e61d:	ff ff ff 
ffff80000080e620:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e624:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e627:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff80000080e62b:	48 2b 45 e8          	sub    rax,QWORD PTR [rbp-0x18]
ffff80000080e62f:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:368
        sys_munmap(brk, ms);
ffff80000080e633:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080e637:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080e63b:	48 89 d6             	mov    rsi,rdx
ffff80000080e63e:	48 89 c7             	mov    rdi,rax
ffff80000080e641:	49 89 df             	mov    r15,rbx
ffff80000080e644:	48 b8 f1 b4 ee ff ff 	movabs rax,0xffffffffffeeb4f1
ffff80000080e64b:	ff ff ff 
ffff80000080e64e:	48 01 d8             	add    rax,rbx
ffff80000080e651:	ff d0                	call   rax
ffff80000080e653:	eb 1d                	jmp    ffff80000080e672 <sys_brk+0x108>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:371
        
    }else {
        new_brk = do_brk(new_brk);	//expand brk space
ffff80000080e655:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080e659:	48 89 c7             	mov    rdi,rax
ffff80000080e65c:	49 89 df             	mov    r15,rbx
ffff80000080e65f:	48 b8 15 3e ee ff ff 	movabs rax,0xffffffffffee3e15
ffff80000080e666:	ff ff ff 
ffff80000080e669:	48 01 d8             	add    rax,rbx
ffff80000080e66c:	ff d0                	call   rax
ffff80000080e66e:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:376
    }



   current->mem_struct.heap_top = new_brk;
ffff80000080e672:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080e679:	ff ff ff 
ffff80000080e67c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e680:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e683:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080e687:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:377
   return new_brk;
ffff80000080e68b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:378
}
ffff80000080e68f:	48 83 c4 20          	add    rsp,0x20
ffff80000080e693:	5b                   	pop    rbx
ffff80000080e694:	41 5f                	pop    r15
ffff80000080e696:	5d                   	pop    rbp
ffff80000080e697:	c3                   	ret    

ffff80000080e698 <sys_reboot>:
sys_reboot():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:381

unsigned long sys_reboot(unsigned long cmd,void * arg)
{
ffff80000080e698:	f3 0f 1e fa          	endbr64 
ffff80000080e69c:	55                   	push   rbp
ffff80000080e69d:	48 89 e5             	mov    rbp,rsp
ffff80000080e6a0:	41 57                	push   r15
ffff80000080e6a2:	53                   	push   rbx
ffff80000080e6a3:	48 83 ec 10          	sub    rsp,0x10
ffff80000080e6a7:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080e6a7 <sys_reboot+0xf>
ffff80000080e6ae:	49 bb 89 4e 11 00 00 	movabs r11,0x114e89
ffff80000080e6b5:	00 00 00 
ffff80000080e6b8:	4c 01 db             	add    rbx,r11
ffff80000080e6bb:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff80000080e6bf:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:382
    printf("sys_reboot\n");
ffff80000080e6c3:	48 b8 03 d5 ff ff ff 	movabs rax,0xffffffffffffd503
ffff80000080e6ca:	ff ff ff 
ffff80000080e6cd:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080e6d1:	48 89 c7             	mov    rdi,rax
ffff80000080e6d4:	49 89 df             	mov    r15,rbx
ffff80000080e6d7:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e6dc:	48 ba 91 e4 ed ff ff 	movabs rdx,0xffffffffffede491
ffff80000080e6e3:	ff ff ff 
ffff80000080e6e6:	48 01 da             	add    rdx,rbx
ffff80000080e6e9:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:383
    switch(cmd)
ffff80000080e6eb:	48 83 7d e8 01       	cmp    QWORD PTR [rbp-0x18],0x1
ffff80000080e6f0:	74 09                	je     ffff80000080e6fb <sys_reboot+0x63>
ffff80000080e6f2:	48 83 7d e8 02       	cmp    QWORD PTR [rbp-0x18],0x2
ffff80000080e6f7:	74 20                	je     ffff80000080e719 <sys_reboot+0x81>
ffff80000080e6f9:	eb 48                	jmp    ffff80000080e743 <sys_reboot+0xab>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:386
    {
        case SYSTEM_REBOOT:
            outb(0x64,0xFE);
ffff80000080e6fb:	be fe 00 00 00       	mov    esi,0xfe
ffff80000080e700:	bf 64 00 00 00       	mov    edi,0x64
ffff80000080e705:	49 89 df             	mov    r15,rbx
ffff80000080e708:	48 b8 b0 62 ee ff ff 	movabs rax,0xffffffffffee62b0
ffff80000080e70f:	ff ff ff 
ffff80000080e712:	48 01 d8             	add    rax,rbx
ffff80000080e715:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:387
            break;
ffff80000080e717:	eb 53                	jmp    ffff80000080e76c <sys_reboot+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:390

        case SYSTEM_POWEROFF:
            printf("sys_reboot cmd SYSTEM_POWEROFF\n");
ffff80000080e719:	48 b8 10 d5 ff ff ff 	movabs rax,0xffffffffffffd510
ffff80000080e720:	ff ff ff 
ffff80000080e723:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080e727:	48 89 c7             	mov    rdi,rax
ffff80000080e72a:	49 89 df             	mov    r15,rbx
ffff80000080e72d:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e732:	48 ba 91 e4 ed ff ff 	movabs rdx,0xffffffffffede491
ffff80000080e739:	ff ff ff 
ffff80000080e73c:	48 01 da             	add    rdx,rbx
ffff80000080e73f:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:391
            break;
ffff80000080e741:	eb 29                	jmp    ffff80000080e76c <sys_reboot+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:394

        default:
            printf("sys_reboot cmd ERROR!\n");
ffff80000080e743:	48 b8 30 d5 ff ff ff 	movabs rax,0xffffffffffffd530
ffff80000080e74a:	ff ff ff 
ffff80000080e74d:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080e751:	48 89 c7             	mov    rdi,rax
ffff80000080e754:	49 89 df             	mov    r15,rbx
ffff80000080e757:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e75c:	48 ba 91 e4 ed ff ff 	movabs rdx,0xffffffffffede491
ffff80000080e763:	ff ff ff 
ffff80000080e766:	48 01 da             	add    rdx,rbx
ffff80000080e769:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:395
            break;
ffff80000080e76b:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:397
    }
    return 0;
ffff80000080e76c:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:398
}
ffff80000080e771:	48 83 c4 10          	add    rsp,0x10
ffff80000080e775:	5b                   	pop    rbx
ffff80000080e776:	41 5f                	pop    r15
ffff80000080e778:	5d                   	pop    rbp
ffff80000080e779:	c3                   	ret    

ffff80000080e77a <sys_chdir>:
sys_chdir():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:402


unsigned long sys_chdir(char *filename)
{
ffff80000080e77a:	f3 0f 1e fa          	endbr64 
ffff80000080e77e:	55                   	push   rbp
ffff80000080e77f:	48 89 e5             	mov    rbp,rsp
ffff80000080e782:	41 57                	push   r15
ffff80000080e784:	53                   	push   rbx
ffff80000080e785:	48 83 ec 30          	sub    rsp,0x30
ffff80000080e789:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080e789 <sys_chdir+0xf>
ffff80000080e790:	49 bb a7 4d 11 00 00 	movabs r11,0x114da7
ffff80000080e797:	00 00 00 
ffff80000080e79a:	4c 01 db             	add    rbx,r11
ffff80000080e79d:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:403
    char * path = NULL;
ffff80000080e7a1:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000080e7a8:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:404
    long pathlen = 0;
ffff80000080e7a9:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff80000080e7b0:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:405
    struct dir_entry * dentry = NULL;
ffff80000080e7b1:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff80000080e7b8:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:407

    printf("sys_chdir\n");
ffff80000080e7b9:	48 b8 47 d5 ff ff ff 	movabs rax,0xffffffffffffd547
ffff80000080e7c0:	ff ff ff 
ffff80000080e7c3:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080e7c7:	48 89 c7             	mov    rdi,rax
ffff80000080e7ca:	49 89 df             	mov    r15,rbx
ffff80000080e7cd:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e7d2:	48 ba 91 e4 ed ff ff 	movabs rdx,0xffffffffffede491
ffff80000080e7d9:	ff ff ff 
ffff80000080e7dc:	48 01 da             	add    rdx,rbx
ffff80000080e7df:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:408
    pathlen = strlen(filename);
ffff80000080e7e1:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080e7e5:	48 89 c7             	mov    rdi,rax
ffff80000080e7e8:	49 89 df             	mov    r15,rbx
ffff80000080e7eb:	48 b8 d3 20 ef ff ff 	movabs rax,0xffffffffffef20d3
ffff80000080e7f2:	ff ff ff 
ffff80000080e7f5:	48 01 d8             	add    rax,rbx
ffff80000080e7f8:	ff d0                	call   rax
ffff80000080e7fa:	48 98                	cdqe   
ffff80000080e7fc:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:409
    path = (char *) kmalloc(0,pathlen);
ffff80000080e800:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080e804:	48 89 c6             	mov    rsi,rax
ffff80000080e807:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080e80c:	49 89 df             	mov    r15,rbx
ffff80000080e80f:	48 b8 96 fe ed ff ff 	movabs rax,0xffffffffffedfe96
ffff80000080e816:	ff ff ff 
ffff80000080e819:	48 01 d8             	add    rax,rbx
ffff80000080e81c:	ff d0                	call   rax
ffff80000080e81e:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:411

    if(path == NULL)
ffff80000080e822:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080e827:	75 0c                	jne    ffff80000080e835 <sys_chdir+0xbb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:412
        return -ENOMEM;
ffff80000080e829:	48 c7 c0 cf ff ff ff 	mov    rax,0xffffffffffffffcf
ffff80000080e830:	e9 09 01 00 00       	jmp    ffff80000080e93e <sys_chdir+0x1c4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:413
    memset(path,0,PAGE_4K_SIZE);
ffff80000080e835:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080e839:	ba 00 10 00 00       	mov    edx,0x1000
ffff80000080e83e:	be 00 00 00 00       	mov    esi,0x0
ffff80000080e843:	48 89 c7             	mov    rdi,rax
ffff80000080e846:	49 89 df             	mov    r15,rbx
ffff80000080e849:	48 b8 b1 1d ef ff ff 	movabs rax,0xffffffffffef1db1
ffff80000080e850:	ff ff ff 
ffff80000080e853:	48 01 d8             	add    rax,rbx
ffff80000080e856:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:414
    if(pathlen <= 0)
ffff80000080e858:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
ffff80000080e85d:	7f 25                	jg     ffff80000080e884 <sys_chdir+0x10a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:416
    {
        kmfree(path);
ffff80000080e85f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080e863:	48 89 c7             	mov    rdi,rax
ffff80000080e866:	49 89 df             	mov    r15,rbx
ffff80000080e869:	48 b8 37 00 ee ff ff 	movabs rax,0xffffffffffee0037
ffff80000080e870:	ff ff ff 
ffff80000080e873:	48 01 d8             	add    rax,rbx
ffff80000080e876:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:417
        return -EFAULT;
ffff80000080e878:	48 c7 c0 eb ff ff ff 	mov    rax,0xffffffffffffffeb
ffff80000080e87f:	e9 ba 00 00 00       	jmp    ffff80000080e93e <sys_chdir+0x1c4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:419
    }
    else if(pathlen >= PAGE_4K_SIZE)
ffff80000080e884:	48 81 7d e0 ff 0f 00 	cmp    QWORD PTR [rbp-0x20],0xfff
ffff80000080e88b:	00 
ffff80000080e88c:	7e 25                	jle    ffff80000080e8b3 <sys_chdir+0x139>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:421
    {
        kmfree(path);
ffff80000080e88e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080e892:	48 89 c7             	mov    rdi,rax
ffff80000080e895:	49 89 df             	mov    r15,rbx
ffff80000080e898:	48 b8 37 00 ee ff ff 	movabs rax,0xffffffffffee0037
ffff80000080e89f:	ff ff ff 
ffff80000080e8a2:	48 01 d8             	add    rax,rbx
ffff80000080e8a5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:422
        return -ENAMETOOLONG;
ffff80000080e8a7:	48 c7 c0 db ff ff ff 	mov    rax,0xffffffffffffffdb
ffff80000080e8ae:	e9 8b 00 00 00       	jmp    ffff80000080e93e <sys_chdir+0x1c4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:424
    }
    strcpy(filename,path);
ffff80000080e8b3:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080e8b7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080e8bb:	48 89 d6             	mov    rsi,rdx
ffff80000080e8be:	48 89 c7             	mov    rdi,rax
ffff80000080e8c1:	49 89 df             	mov    r15,rbx
ffff80000080e8c4:	48 b8 06 1e ef ff ff 	movabs rax,0xffffffffffef1e06
ffff80000080e8cb:	ff ff ff 
ffff80000080e8ce:	48 01 d8             	add    rax,rbx
ffff80000080e8d1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:426

    dentry = path_walk(path,0);
ffff80000080e8d3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080e8d7:	be 00 00 00 00       	mov    esi,0x0
ffff80000080e8dc:	48 89 c7             	mov    rdi,rax
ffff80000080e8df:	49 89 df             	mov    r15,rbx
ffff80000080e8e2:	48 b8 22 99 ee ff ff 	movabs rax,0xffffffffffee9922
ffff80000080e8e9:	ff ff ff 
ffff80000080e8ec:	48 01 d8             	add    rax,rbx
ffff80000080e8ef:	ff d0                	call   rax
ffff80000080e8f1:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:427
    kmfree(path);
ffff80000080e8f5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080e8f9:	48 89 c7             	mov    rdi,rax
ffff80000080e8fc:	49 89 df             	mov    r15,rbx
ffff80000080e8ff:	48 b8 37 00 ee ff ff 	movabs rax,0xffffffffffee0037
ffff80000080e906:	ff ff ff 
ffff80000080e909:	48 01 d8             	add    rax,rbx
ffff80000080e90c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:429

    if(dentry == NULL)
ffff80000080e90e:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff80000080e913:	75 09                	jne    ffff80000080e91e <sys_chdir+0x1a4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:430
        return -ENOENT;
ffff80000080e915:	48 c7 c0 d3 ff ff ff 	mov    rax,0xffffffffffffffd3
ffff80000080e91c:	eb 20                	jmp    ffff80000080e93e <sys_chdir+0x1c4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:431
    if(dentry->dir_inode->attribute != FS_ATTR_DIR)
ffff80000080e91e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080e922:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080e926:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080e92a:	48 83 f8 02          	cmp    rax,0x2
ffff80000080e92e:	74 09                	je     ffff80000080e939 <sys_chdir+0x1bf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:432
        return -ENOTDIR;
ffff80000080e930:	48 c7 c0 c7 ff ff ff 	mov    rax,0xffffffffffffffc7
ffff80000080e937:	eb 05                	jmp    ffff80000080e93e <sys_chdir+0x1c4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:433
    return 0;
ffff80000080e939:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:434
}
ffff80000080e93e:	48 83 c4 30          	add    rsp,0x30
ffff80000080e942:	5b                   	pop    rbx
ffff80000080e943:	41 5f                	pop    r15
ffff80000080e945:	5d                   	pop    rbp
ffff80000080e946:	c3                   	ret    

ffff80000080e947 <sys_getdents>:
sys_getdents():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:437

unsigned long sys_getdents(int fd, void * dirent, long count)
{
ffff80000080e947:	f3 0f 1e fa          	endbr64 
ffff80000080e94b:	55                   	push   rbp
ffff80000080e94c:	48 89 e5             	mov    rbp,rsp
ffff80000080e94f:	48 83 ec 30          	sub    rsp,0x30
ffff80000080e953:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080e953 <sys_getdents+0xc>
ffff80000080e95a:	49 bb dd 4b 11 00 00 	movabs r11,0x114bdd
ffff80000080e961:	00 00 00 
ffff80000080e964:	4c 01 d8             	add    rax,r11
ffff80000080e967:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff80000080e96a:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080e96e:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:438
    struct file * filp = NULL;
ffff80000080e972:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffff80000080e979:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:439
    unsigned long ret = 0;
ffff80000080e97a:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080e981:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:442

//	printf("sys_getdents:%d\n",fd);
    if(fd < 0 || fd > MAX_TASKS)
ffff80000080e982:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff80000080e986:	78 06                	js     ffff80000080e98e <sys_getdents+0x47>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:442 (discriminator 1)
ffff80000080e988:	83 7d ec 20          	cmp    DWORD PTR [rbp-0x14],0x20
ffff80000080e98c:	7e 0c                	jle    ffff80000080e99a <sys_getdents+0x53>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:443
        return -EBADF;
ffff80000080e98e:	48 c7 c0 f8 ff ff ff 	mov    rax,0xfffffffffffffff8
ffff80000080e995:	e9 85 00 00 00       	jmp    ffff80000080ea1f <sys_getdents+0xd8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:444
    if(count < 0)
ffff80000080e99a:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff80000080e99f:	79 09                	jns    ffff80000080e9aa <sys_getdents+0x63>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:445
        return -EINVAL;
ffff80000080e9a1:	48 c7 c0 e4 ff ff ff 	mov    rax,0xffffffffffffffe4
ffff80000080e9a8:	eb 75                	jmp    ffff80000080ea1f <sys_getdents+0xd8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:447

    filp = current->openf[fd];
ffff80000080e9aa:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff80000080e9b1:	ff ff ff 
ffff80000080e9b4:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080e9b8:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080e9bb:	8b 4d ec             	mov    ecx,DWORD PTR [rbp-0x14]
ffff80000080e9be:	48 63 c9             	movsxd rcx,ecx
ffff80000080e9c1:	48 83 c1 1e          	add    rcx,0x1e
ffff80000080e9c5:	48 8b 54 ca 08       	mov    rdx,QWORD PTR [rdx+rcx*8+0x8]
ffff80000080e9ca:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:448
    if(filp->f_ops && filp->f_ops->readdir)
ffff80000080e9ce:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080e9d2:	48 8b 52 18          	mov    rdx,QWORD PTR [rdx+0x18]
ffff80000080e9d6:	48 85 d2             	test   rdx,rdx
ffff80000080e9d9:	74 40                	je     ffff80000080ea1b <sys_getdents+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:448 (discriminator 1)
ffff80000080e9db:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080e9df:	48 8b 52 18          	mov    rdx,QWORD PTR [rdx+0x18]
ffff80000080e9e3:	48 8b 52 30          	mov    rdx,QWORD PTR [rdx+0x30]
ffff80000080e9e7:	48 85 d2             	test   rdx,rdx
ffff80000080e9ea:	74 2f                	je     ffff80000080ea1b <sys_getdents+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:449
        ret = filp->f_ops->readdir(filp,dirent,&fill_dentry);
ffff80000080e9ec:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080e9f0:	48 8b 52 18          	mov    rdx,QWORD PTR [rdx+0x18]
ffff80000080e9f4:	4c 8b 42 30          	mov    r8,QWORD PTR [rdx+0x30]
ffff80000080e9f8:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff80000080e9fc:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff80000080ea00:	48 ba 50 ff ff ff ff 	movabs rdx,0xffffffffffffff50
ffff80000080ea07:	ff ff ff 
ffff80000080ea0a:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080ea0e:	48 89 c2             	mov    rdx,rax
ffff80000080ea11:	48 89 cf             	mov    rdi,rcx
ffff80000080ea14:	41 ff d0             	call   r8
ffff80000080ea17:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:450
    return ret;
ffff80000080ea1b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:451
}
ffff80000080ea1f:	c9                   	leave  
ffff80000080ea20:	c3                   	ret    

ffff80000080ea21 <sys_munmap>:
sys_munmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:453

int sys_munmap(void *addr, size_t len){
ffff80000080ea21:	f3 0f 1e fa          	endbr64 
ffff80000080ea25:	55                   	push   rbp
ffff80000080ea26:	48 89 e5             	mov    rbp,rsp
ffff80000080ea29:	41 57                	push   r15
ffff80000080ea2b:	53                   	push   rbx
ffff80000080ea2c:	48 83 ec 20          	sub    rsp,0x20
ffff80000080ea30:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080ea30 <sys_munmap+0xf>
ffff80000080ea37:	49 bb 00 4b 11 00 00 	movabs r11,0x114b00
ffff80000080ea3e:	00 00 00 
ffff80000080ea41:	4c 01 db             	add    rbx,r11
ffff80000080ea44:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff80000080ea48:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:454
    void *addr2=PAGE_4K_ALIGN(addr);
ffff80000080ea4c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080ea50:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff80000080ea56:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
ffff80000080ea5c:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:455
    size_t len2=PAGE_4K_ALIGN(len);
ffff80000080ea60:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080ea64:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff80000080ea6a:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
ffff80000080ea70:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:456
    if(len==0)return 0;
ffff80000080ea74:	48 83 7d d0 00       	cmp    QWORD PTR [rbp-0x30],0x0
ffff80000080ea79:	75 07                	jne    ffff80000080ea82 <sys_munmap+0x61>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:456 (discriminator 1)
ffff80000080ea7b:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080ea80:	eb 4c                	jmp    ffff80000080eace <sys_munmap+0xad>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:458
    //本来就没被映射
    if(chk_mmap(addr, len))return 0;
ffff80000080ea82:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080ea86:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000080ea8a:	48 89 d6             	mov    rsi,rdx
ffff80000080ea8d:	48 89 c7             	mov    rdi,rax
ffff80000080ea90:	49 89 df             	mov    r15,rbx
ffff80000080ea93:	48 b8 1a 5a ee ff ff 	movabs rax,0xffffffffffee5a1a
ffff80000080ea9a:	ff ff ff 
ffff80000080ea9d:	48 01 d8             	add    rax,rbx
ffff80000080eaa0:	ff d0                	call   rax
ffff80000080eaa2:	85 c0                	test   eax,eax
ffff80000080eaa4:	74 07                	je     ffff80000080eaad <sys_munmap+0x8c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:458 (discriminator 1)
ffff80000080eaa6:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080eaab:	eb 21                	jmp    ffff80000080eace <sys_munmap+0xad>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:459
    return do_munmap(addr2,len2);
ffff80000080eaad:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080eab1:	89 c2                	mov    edx,eax
ffff80000080eab3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080eab7:	89 d6                	mov    esi,edx
ffff80000080eab9:	48 89 c7             	mov    rdi,rax
ffff80000080eabc:	49 89 df             	mov    r15,rbx
ffff80000080eabf:	48 b8 46 09 ee ff ff 	movabs rax,0xffffffffffee0946
ffff80000080eac6:	ff ff ff 
ffff80000080eac9:	48 01 d8             	add    rax,rbx
ffff80000080eacc:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:460
}
ffff80000080eace:	48 83 c4 20          	add    rsp,0x20
ffff80000080ead2:	5b                   	pop    rbx
ffff80000080ead3:	41 5f                	pop    r15
ffff80000080ead5:	5d                   	pop    rbp
ffff80000080ead6:	c3                   	ret    

ffff80000080ead7 <sys_mmap>:
sys_mmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:461
void *sys_mmap(void *addr, size_t len, int prot, int flags,int fildes, off_t off){
ffff80000080ead7:	f3 0f 1e fa          	endbr64 
ffff80000080eadb:	55                   	push   rbp
ffff80000080eadc:	48 89 e5             	mov    rbp,rsp
ffff80000080eadf:	41 57                	push   r15
ffff80000080eae1:	53                   	push   rbx
ffff80000080eae2:	48 81 ec c0 00 00 00 	sub    rsp,0xc0
ffff80000080eae9:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080eae9 <sys_mmap+0x12>
ffff80000080eaf0:	49 bb 47 4a 11 00 00 	movabs r11,0x114a47
ffff80000080eaf7:	00 00 00 
ffff80000080eafa:	4c 01 db             	add    rbx,r11
ffff80000080eafd:	48 89 bd 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdi
ffff80000080eb04:	48 89 b5 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rsi
ffff80000080eb0b:	89 95 4c ff ff ff    	mov    DWORD PTR [rbp-0xb4],edx
ffff80000080eb11:	89 8d 48 ff ff ff    	mov    DWORD PTR [rbp-0xb8],ecx
ffff80000080eb17:	44 89 85 44 ff ff ff 	mov    DWORD PTR [rbp-0xbc],r8d
ffff80000080eb1e:	4c 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:462
    int attr=PAGE_PRESENT|PAGE_FOR_ALL;
ffff80000080eb25:	c7 45 d4 05 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x5
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:464
    if((prot|PROT_WRITE)||(prot|PROT_EXEC))
        attr|=PAGE_RWX;
ffff80000080eb2c:	83 4d d4 02          	or     DWORD PTR [rbp-0x2c],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:465
    if(!addr){
ffff80000080eb30:	48 83 bd 58 ff ff ff 	cmp    QWORD PTR [rbp-0xa8],0x0
ffff80000080eb37:	00 
ffff80000080eb38:	75 6d                	jne    ffff80000080eba7 <sys_mmap+0xd0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:468
        //没有指定地址
        //寻找一块空的虚拟内存
        while (!chk_mmap(addr,len))
ffff80000080eb3a:	eb 41                	jmp    ffff80000080eb7d <sys_mmap+0xa6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:470
        {
            addr+=PAGE_4K_SIZE;
ffff80000080eb3c:	48 81 85 58 ff ff ff 	add    QWORD PTR [rbp-0xa8],0x1000
ffff80000080eb43:	00 10 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:471
            if(addr>=KNL_BASE){
ffff80000080eb47:	48 b8 ff ff ff ff ff 	movabs rax,0xffff7fffffffffff
ffff80000080eb4e:	7f ff ff 
ffff80000080eb51:	48 39 85 58 ff ff ff 	cmp    QWORD PTR [rbp-0xa8],rax
ffff80000080eb58:	76 23                	jbe    ffff80000080eb7d <sys_mmap+0xa6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:472
                set_errno(-ENOMEM);
ffff80000080eb5a:	bf cf ff ff ff       	mov    edi,0xffffffcf
ffff80000080eb5f:	49 89 df             	mov    r15,rbx
ffff80000080eb62:	48 b8 6e 62 ee ff ff 	movabs rax,0xffffffffffee626e
ffff80000080eb69:	ff ff ff 
ffff80000080eb6c:	48 01 d8             	add    rax,rbx
ffff80000080eb6f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:473
                return MAP_FAILED;
ffff80000080eb71:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff80000080eb78:	e9 3c 04 00 00       	jmp    ffff80000080efb9 <sys_mmap+0x4e2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:468
        while (!chk_mmap(addr,len))
ffff80000080eb7d:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
ffff80000080eb84:	48 8b 95 50 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb0]
ffff80000080eb8b:	48 89 d6             	mov    rsi,rdx
ffff80000080eb8e:	48 89 c7             	mov    rdi,rax
ffff80000080eb91:	49 89 df             	mov    r15,rbx
ffff80000080eb94:	48 b8 1a 5a ee ff ff 	movabs rax,0xffffffffffee5a1a
ffff80000080eb9b:	ff ff ff 
ffff80000080eb9e:	48 01 d8             	add    rax,rbx
ffff80000080eba1:	ff d0                	call   rax
ffff80000080eba3:	85 c0                	test   eax,eax
ffff80000080eba5:	74 95                	je     ffff80000080eb3c <sys_mmap+0x65>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:477
            }
        }
    }
    if(!chk_mmap(addr,len)&&(flags&MAP_FIXED)){
ffff80000080eba7:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
ffff80000080ebae:	48 8b 95 50 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb0]
ffff80000080ebb5:	48 89 d6             	mov    rsi,rdx
ffff80000080ebb8:	48 89 c7             	mov    rdi,rax
ffff80000080ebbb:	49 89 df             	mov    r15,rbx
ffff80000080ebbe:	48 b8 1a 5a ee ff ff 	movabs rax,0xffffffffffee5a1a
ffff80000080ebc5:	ff ff ff 
ffff80000080ebc8:	48 01 d8             	add    rax,rbx
ffff80000080ebcb:	ff d0                	call   rax
ffff80000080ebcd:	85 c0                	test   eax,eax
ffff80000080ebcf:	75 30                	jne    ffff80000080ec01 <sys_mmap+0x12a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:477 (discriminator 1)
ffff80000080ebd1:	8b 85 48 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb8]
ffff80000080ebd7:	83 e0 01             	and    eax,0x1
ffff80000080ebda:	85 c0                	test   eax,eax
ffff80000080ebdc:	74 23                	je     ffff80000080ec01 <sys_mmap+0x12a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:478
        set_errno(-ENOMEM);
ffff80000080ebde:	bf cf ff ff ff       	mov    edi,0xffffffcf
ffff80000080ebe3:	49 89 df             	mov    r15,rbx
ffff80000080ebe6:	48 b8 6e 62 ee ff ff 	movabs rax,0xffffffffffee626e
ffff80000080ebed:	ff ff ff 
ffff80000080ebf0:	48 01 d8             	add    rax,rbx
ffff80000080ebf3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:479
        return MAP_FAILED;
ffff80000080ebf5:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff80000080ebfc:	e9 b8 03 00 00       	jmp    ffff80000080efb9 <sys_mmap+0x4e2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:482
    }
    //创建mmap struct
    mmap_struct* mmps=kmalloc(0,sizeof(mmap_struct)),*mp=all_mmaps;
ffff80000080ec01:	be 48 00 00 00       	mov    esi,0x48
ffff80000080ec06:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080ec0b:	49 89 df             	mov    r15,rbx
ffff80000080ec0e:	48 b8 96 fe ed ff ff 	movabs rax,0xffffffffffedfe96
ffff80000080ec15:	ff ff ff 
ffff80000080ec18:	48 01 d8             	add    rax,rbx
ffff80000080ec1b:	ff d0                	call   rax
ffff80000080ec1d:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
ffff80000080ec21:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff80000080ec28:	ff ff ff 
ffff80000080ec2b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ec2f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ec32:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:484
    
    for(;mp&&mp->node.next;mp=mp->node.next->data);
ffff80000080ec36:	eb 10                	jmp    ffff80000080ec48 <sys_mmap+0x171>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:484 (discriminator 3)
ffff80000080ec38:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080ec3c:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080ec40:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080ec44:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:484 (discriminator 1)
ffff80000080ec48:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080ec4d:	74 0d                	je     ffff80000080ec5c <sys_mmap+0x185>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:484 (discriminator 2)
ffff80000080ec4f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080ec53:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080ec57:	48 85 c0             	test   rax,rax
ffff80000080ec5a:	75 dc                	jne    ffff80000080ec38 <sys_mmap+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:485
    if(!mp)all_mmaps=kmalloc(0,sizeof(mmap_struct));
ffff80000080ec5c:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080ec61:	75 2d                	jne    ffff80000080ec90 <sys_mmap+0x1b9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:485 (discriminator 1)
ffff80000080ec63:	be 48 00 00 00       	mov    esi,0x48
ffff80000080ec68:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080ec6d:	49 89 df             	mov    r15,rbx
ffff80000080ec70:	48 b8 96 fe ed ff ff 	movabs rax,0xffffffffffedfe96
ffff80000080ec77:	ff ff ff 
ffff80000080ec7a:	48 01 d8             	add    rax,rbx
ffff80000080ec7d:	ff d0                	call   rax
ffff80000080ec7f:	48 ba 98 fe ff ff ff 	movabs rdx,0xfffffffffffffe98
ffff80000080ec86:	ff ff ff 
ffff80000080ec89:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080ec8d:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:486
    list_init(&mmps->node);
ffff80000080ec90:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080ec94:	48 83 c0 30          	add    rax,0x30
ffff80000080ec98:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff80000080ec9c:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080eca0:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000080eca7:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080ecab:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000080ecb2:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000080ecb3:	90                   	nop
ffff80000080ecb4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080ecb8:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
ffff80000080ecbc:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080ecc0:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:33
    struct List* p=entry;
ffff80000080ecc4:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080ecc8:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:34
    for(;p->next&&p->next!=p;p=p->next){
ffff80000080eccc:	eb 21                	jmp    ffff80000080ecef <sys_mmap+0x218>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:35
        if(p->data==new->data)
ffff80000080ecce:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080ecd2:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff80000080ecd6:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080ecda:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080ecde:	48 39 c2             	cmp    rdx,rax
ffff80000080ece1:	74 7c                	je     ffff80000080ed5f <sys_mmap+0x288>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:34
    for(;p->next&&p->next!=p;p=p->next){
ffff80000080ece3:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080ece7:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080eceb:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
ffff80000080ecef:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080ecf3:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080ecf7:	48 85 c0             	test   rax,rax
ffff80000080ecfa:	74 0e                	je     ffff80000080ed0a <sys_mmap+0x233>
ffff80000080ecfc:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080ed00:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080ed04:	48 39 45 a8          	cmp    QWORD PTR [rbp-0x58],rax
ffff80000080ed08:	75 c4                	jne    ffff80000080ecce <sys_mmap+0x1f7>
ffff80000080ed0a:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080ed0e:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
ffff80000080ed12:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080ed16:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff80000080ed1a:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080ed1e:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080ed22:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080ed26:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff80000080ed2a:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080ed2e:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
ffff80000080ed32:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff80000080ed35:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080ed39:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080ed3d:	48 85 c0             	test   rax,rax
ffff80000080ed40:	74 0f                	je     ffff80000080ed51 <sys_mmap+0x27a>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff80000080ed42:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080ed46:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080ed4a:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
ffff80000080ed4e:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:29
    entry->next = new;
ffff80000080ed51:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080ed55:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
ffff80000080ed59:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff80000080ed5d:	eb 01                	jmp    ffff80000080ed60 <sys_mmap+0x289>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:36
            return;
ffff80000080ed5f:	90                   	nop
sys_mmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:489
    list_add(mp,mmps);
    //设置mmap struct
    mmps->base=addr;
ffff80000080ed60:	48 8b 95 58 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa8]
ffff80000080ed67:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080ed6b:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:490
    mmps->len=len;
ffff80000080ed6e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080ed72:	48 8b 95 50 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb0]
ffff80000080ed79:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:491
    if(fildes>0)
ffff80000080ed7d:	83 bd 44 ff ff ff 00 	cmp    DWORD PTR [rbp-0xbc],0x0
ffff80000080ed84:	7e 2d                	jle    ffff80000080edb3 <sys_mmap+0x2dc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:492
        mmps->file=current->openf[fildes];
ffff80000080ed86:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080ed8d:	ff ff ff 
ffff80000080ed90:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ed94:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ed97:	8b 95 44 ff ff ff    	mov    edx,DWORD PTR [rbp-0xbc]
ffff80000080ed9d:	48 63 d2             	movsxd rdx,edx
ffff80000080eda0:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080eda4:	48 8b 54 d0 08       	mov    rdx,QWORD PTR [rax+rdx*8+0x8]
ffff80000080eda9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080edad:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
ffff80000080edb1:	eb 0c                	jmp    ffff80000080edbf <sys_mmap+0x2e8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:494
    else
        mmps->file=NULL;
ffff80000080edb3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080edb7:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000080edbe:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:495
    mmps->offset=off;
ffff80000080edbf:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080edc3:	48 8b 95 38 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xc8]
ffff80000080edca:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:496
    mmps->pmhdr=NULL;
ffff80000080edce:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080edd2:	48 c7 40 28 00 00 00 	mov    QWORD PTR [rax+0x28],0x0
ffff80000080edd9:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:497
    mmps->flags=prot|(flags&MAP_SHARED?MMAP_FLAG_S:0);
ffff80000080edda:	8b 85 48 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb8]
ffff80000080ede0:	01 c0                	add    eax,eax
ffff80000080ede2:	83 e0 08             	and    eax,0x8
ffff80000080ede5:	89 c2                	mov    edx,eax
ffff80000080ede7:	8b 85 4c ff ff ff    	mov    eax,DWORD PTR [rbp-0xb4]
ffff80000080eded:	09 d0                	or     eax,edx
ffff80000080edef:	89 c2                	mov    edx,eax
ffff80000080edf1:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080edf5:	66 89 50 20          	mov    WORD PTR [rax+0x20],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:499
    //加入到进程mmaps链表
    struct List *new_node=kmalloc(0,sizeof(struct List)),*np=current->mmaps,*prevnp=np;
ffff80000080edf9:	be 18 00 00 00       	mov    esi,0x18
ffff80000080edfe:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080ee03:	49 89 df             	mov    r15,rbx
ffff80000080ee06:	48 b8 96 fe ed ff ff 	movabs rax,0xffffffffffedfe96
ffff80000080ee0d:	ff ff ff 
ffff80000080ee10:	48 01 d8             	add    rax,rbx
ffff80000080ee13:	ff d0                	call   rax
ffff80000080ee15:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
ffff80000080ee19:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080ee20:	ff ff ff 
ffff80000080ee23:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ee27:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ee2a:	48 8b 80 34 03 00 00 	mov    rax,QWORD PTR [rax+0x334]
ffff80000080ee31:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffff80000080ee35:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ee39:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffff80000080ee3d:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080ee41:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff80000080ee45:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080ee49:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000080ee50:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080ee54:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000080ee5b:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000080ee5c:	90                   	nop
sys_mmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:501
    list_init(new_node);
    new_node->data=mmps;
ffff80000080ee5d:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080ee61:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080ee65:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:502
    if(!np)current->mmaps=new_node;
ffff80000080ee69:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
ffff80000080ee6e:	75 35                	jne    ffff80000080eea5 <sys_mmap+0x3ce>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:502 (discriminator 1)
ffff80000080ee70:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080ee77:	ff ff ff 
ffff80000080ee7a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ee7e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ee81:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff80000080ee85:	48 89 90 34 03 00 00 	mov    QWORD PTR [rax+0x334],rdx
ffff80000080ee8c:	e9 21 01 00 00       	jmp    ffff80000080efb2 <sys_mmap+0x4db>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:505 (discriminator 3)
    else{
        for(;np&&((mmap_struct*)np->data)->base<addr;np=((mmap_struct*)np->next)){
            prevnp=np;
ffff80000080ee91:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ee95:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:504 (discriminator 3)
        for(;np&&((mmap_struct*)np->data)->base<addr;np=((mmap_struct*)np->next)){
ffff80000080ee99:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ee9d:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080eea1:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:504 (discriminator 1)
ffff80000080eea5:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
ffff80000080eeaa:	74 14                	je     ffff80000080eec0 <sys_mmap+0x3e9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:504 (discriminator 2)
ffff80000080eeac:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080eeb0:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080eeb4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080eeb7:	48 39 85 58 ff ff ff 	cmp    QWORD PTR [rbp-0xa8],rax
ffff80000080eebe:	77 d1                	ja     ffff80000080ee91 <sys_mmap+0x3ba>
ffff80000080eec0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080eec4:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
ffff80000080eec8:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080eecc:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:33
    struct List* p=entry;
ffff80000080eed3:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080eed7:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:34
    for(;p->next&&p->next!=p;p=p->next){
ffff80000080eede:	eb 31                	jmp    ffff80000080ef11 <sys_mmap+0x43a>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:35
        if(p->data==new->data)
ffff80000080eee0:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080eee7:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff80000080eeeb:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff80000080eef2:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080eef6:	48 39 c2             	cmp    rdx,rax
ffff80000080eef9:	0f 84 b2 00 00 00    	je     ffff80000080efb1 <sys_mmap+0x4da>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:34
    for(;p->next&&p->next!=p;p=p->next){
ffff80000080eeff:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080ef06:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080ef0a:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
ffff80000080ef11:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080ef18:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080ef1c:	48 85 c0             	test   rax,rax
ffff80000080ef1f:	74 14                	je     ffff80000080ef35 <sys_mmap+0x45e>
ffff80000080ef21:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080ef28:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080ef2c:	48 39 85 70 ff ff ff 	cmp    QWORD PTR [rbp-0x90],rax
ffff80000080ef33:	75 ab                	jne    ffff80000080eee0 <sys_mmap+0x409>
ffff80000080ef35:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080ef3c:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
ffff80000080ef43:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff80000080ef4a:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff80000080ef51:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080ef58:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080ef5c:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff80000080ef63:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff80000080ef67:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff80000080ef6e:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
ffff80000080ef75:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff80000080ef78:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff80000080ef7f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080ef83:	48 85 c0             	test   rax,rax
ffff80000080ef86:	74 15                	je     ffff80000080ef9d <sys_mmap+0x4c6>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff80000080ef88:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff80000080ef8f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080ef93:	48 8b 95 60 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa0]
ffff80000080ef9a:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:29
    entry->next = new;
ffff80000080ef9d:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080efa4:	48 8b 95 60 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa0]
ffff80000080efab:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff80000080efaf:	eb 01                	jmp    ffff80000080efb2 <sys_mmap+0x4db>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:36
            return;
ffff80000080efb1:	90                   	nop
sys_mmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:530
//     }
    //根据需要是否同步文件内容
    //目前先一致读取
    // sys_lseek(fildes,off,SEEK_SET);
    // sys_read(fildes,addr,len);
    return addr;
ffff80000080efb2:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:532
    
}
ffff80000080efb9:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
ffff80000080efc0:	5b                   	pop    rbx
ffff80000080efc1:	41 5f                	pop    r15
ffff80000080efc3:	5d                   	pop    rbp
ffff80000080efc4:	c3                   	ret    

ffff80000080efc5 <init_ramfs>:
init_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:28
};
struct index_node_operations ramfs_iops={
        .lookup=lookup_inode_ramfs,.create=create_inode_ramfs
};
struct index_node* test;
void init_ramfs(){
ffff80000080efc5:	f3 0f 1e fa          	endbr64 
ffff80000080efc9:	55                   	push   rbp
ffff80000080efca:	48 89 e5             	mov    rbp,rsp
ffff80000080efcd:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080efcd <init_ramfs+0x8>
ffff80000080efd4:	49 bb 63 45 11 00 00 	movabs r11,0x114563
ffff80000080efdb:	00 00 00 
ffff80000080efde:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:31
    //挂载新文件系统到/mnt,设备为/dev/ram

    ramfs_sb.sb_ops=&ramfs_fops;
ffff80000080efe1:	48 ba f0 fd ff ff ff 	movabs rdx,0xfffffffffffffdf0
ffff80000080efe8:	ff ff ff 
ffff80000080efeb:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080efef:	48 b9 d0 fc ff ff ff 	movabs rcx,0xfffffffffffffcd0
ffff80000080eff6:	ff ff ff 
ffff80000080eff9:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080effd:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:32
    ramfs_sb.root=dmnt;
ffff80000080f001:	48 ba 90 fe ff ff ff 	movabs rdx,0xfffffffffffffe90
ffff80000080f008:	ff ff ff 
ffff80000080f00b:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080f00f:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080f012:	48 ba f0 fd ff ff ff 	movabs rdx,0xfffffffffffffdf0
ffff80000080f019:	ff ff ff 
ffff80000080f01c:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080f020:	48 89 0a             	mov    QWORD PTR [rdx],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:33
    ramfs_sb.p_dev=&bd_ramdisk;
ffff80000080f023:	48 ba f0 fd ff ff ff 	movabs rdx,0xfffffffffffffdf0
ffff80000080f02a:	ff ff ff 
ffff80000080f02d:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080f031:	48 b9 80 ff ff ff ff 	movabs rcx,0xffffffffffffff80
ffff80000080f038:	ff ff ff 
ffff80000080f03b:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080f03f:	48 89 4a 18          	mov    QWORD PTR [rdx+0x18],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:34
    ramfs_sb.dev=dev_ramdisk;
ffff80000080f043:	48 ba 78 fe ff ff ff 	movabs rdx,0xfffffffffffffe78
ffff80000080f04a:	ff ff ff 
ffff80000080f04d:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080f051:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff80000080f053:	89 d1                	mov    ecx,edx
ffff80000080f055:	48 ba f0 fd ff ff ff 	movabs rdx,0xfffffffffffffdf0
ffff80000080f05c:	ff ff ff 
ffff80000080f05f:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080f063:	66 89 48 10          	mov    WORD PTR [rax+0x10],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:45
    // test->sb=&ramfs_sb;
    // test->attribute=FS_ATTR_FILE;
    // test->inode_ops=&ramfs_iops;
    //设置一下dmnt的inode的操作，查找的时候会用到
    // dmnt->dir_inode->inode_ops=&ramfs_iops;
}
ffff80000080f067:	90                   	nop
ffff80000080f068:	5d                   	pop    rbp
ffff80000080f069:	c3                   	ret    

ffff80000080f06a <create_inode_ramfs>:
create_inode_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:47

long create_inode_ramfs(struct index_node * inode,struct dir_entry * dentry,int mode){}
ffff80000080f06a:	f3 0f 1e fa          	endbr64 
ffff80000080f06e:	55                   	push   rbp
ffff80000080f06f:	48 89 e5             	mov    rbp,rsp
ffff80000080f072:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080f072 <create_inode_ramfs+0x8>
ffff80000080f079:	49 bb be 44 11 00 00 	movabs r11,0x1144be
ffff80000080f080:	00 00 00 
ffff80000080f083:	4c 01 d8             	add    rax,r11
ffff80000080f086:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080f08a:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080f08e:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
ffff80000080f091:	90                   	nop
ffff80000080f092:	5d                   	pop    rbp
ffff80000080f093:	c3                   	ret    

ffff80000080f094 <lookup_inode_ramfs>:
lookup_inode_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:48
struct dir_entry* lookup_inode_ramfs(struct index_node * parent_inode,struct dir_entry * dest_dentry){
ffff80000080f094:	f3 0f 1e fa          	endbr64 
ffff80000080f098:	55                   	push   rbp
ffff80000080f099:	48 89 e5             	mov    rbp,rsp
ffff80000080f09c:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080f09c <lookup_inode_ramfs+0x8>
ffff80000080f0a3:	49 bb 94 44 11 00 00 	movabs r11,0x114494
ffff80000080f0aa:	00 00 00 
ffff80000080f0ad:	4c 01 d8             	add    rax,r11
ffff80000080f0b0:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff80000080f0b4:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:49
    list_init(&dest_dentry->subdirs_list);
ffff80000080f0b8:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080f0bc:	48 83 c2 28          	add    rdx,0x28
ffff80000080f0c0:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff80000080f0c4:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080f0c8:	48 c7 02 00 00 00 00 	mov    QWORD PTR [rdx],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000080f0cf:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080f0d3:	48 c7 42 10 00 00 00 	mov    QWORD PTR [rdx+0x10],0x0
ffff80000080f0da:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000080f0db:	90                   	nop
lookup_inode_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:50
    list_init(&dest_dentry->child_node);
ffff80000080f0dc:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080f0e0:	48 83 c2 10          	add    rdx,0x10
ffff80000080f0e4:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff80000080f0e8:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080f0ec:	48 c7 02 00 00 00 00 	mov    QWORD PTR [rdx],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000080f0f3:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080f0f7:	48 c7 42 10 00 00 00 	mov    QWORD PTR [rdx+0x10],0x0
ffff80000080f0fe:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000080f0ff:	90                   	nop
lookup_inode_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:51
    dest_dentry->dir_inode=test;
ffff80000080f100:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff80000080f107:	ff ff ff 
ffff80000080f10a:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080f10e:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080f111:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080f115:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:52
    dest_dentry->child_node.data=dest_dentry;
ffff80000080f119:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080f11d:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080f121:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:53
    return dest_dentry;
ffff80000080f125:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:54
}
ffff80000080f129:	5d                   	pop    rbp
ffff80000080f12a:	c3                   	ret    

ffff80000080f12b <open_ramfs>:
open_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:55
long open_ramfs(struct index_node * inode,struct file * filp){
ffff80000080f12b:	f3 0f 1e fa          	endbr64 
ffff80000080f12f:	55                   	push   rbp
ffff80000080f130:	48 89 e5             	mov    rbp,rsp
ffff80000080f133:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080f133 <open_ramfs+0x8>
ffff80000080f13a:	49 bb fd 43 11 00 00 	movabs r11,0x1143fd
ffff80000080f141:	00 00 00 
ffff80000080f144:	4c 01 d8             	add    rax,r11
ffff80000080f147:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080f14b:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:56
    filp->f_ops=inode->f_ops;
ffff80000080f14f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080f153:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
ffff80000080f157:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080f15b:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:57
    filp->position=0;
ffff80000080f15f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080f163:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:58
    return 1;
ffff80000080f16a:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:59
}
ffff80000080f16f:	5d                   	pop    rbp
ffff80000080f170:	c3                   	ret    

ffff80000080f171 <close_ramfs>:
close_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:61

long close_ramfs(struct index_node * inode,struct file * filp){
ffff80000080f171:	f3 0f 1e fa          	endbr64 
ffff80000080f175:	55                   	push   rbp
ffff80000080f176:	48 89 e5             	mov    rbp,rsp
ffff80000080f179:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080f179 <close_ramfs+0x8>
ffff80000080f180:	49 bb b7 43 11 00 00 	movabs r11,0x1143b7
ffff80000080f187:	00 00 00 
ffff80000080f18a:	4c 01 d8             	add    rax,r11
ffff80000080f18d:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080f191:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:62
    return 0;
ffff80000080f195:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:63
}
ffff80000080f19a:	5d                   	pop    rbp
ffff80000080f19b:	c3                   	ret    

ffff80000080f19c <read_ramfs>:
read_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:65
//注意一下:position是指针
long read_ramfs(struct file * filp,char * buf,unsigned long count,long * position){
ffff80000080f19c:	f3 0f 1e fa          	endbr64 
ffff80000080f1a0:	55                   	push   rbp
ffff80000080f1a1:	48 89 e5             	mov    rbp,rsp
ffff80000080f1a4:	41 57                	push   r15
ffff80000080f1a6:	48 83 ec 28          	sub    rsp,0x28
ffff80000080f1aa:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080f1aa <read_ramfs+0xe>
ffff80000080f1b1:	49 bb 86 43 11 00 00 	movabs r11,0x114386
ffff80000080f1b8:	00 00 00 
ffff80000080f1bb:	4c 01 d8             	add    rax,r11
ffff80000080f1be:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff80000080f1c2:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080f1c6:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffff80000080f1ca:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:66
    blkdev_read(filp->dentry->dir_inode->dev,*position,count,buf);
ffff80000080f1ce:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000080f1d2:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080f1d5:	48 89 d6             	mov    rsi,rdx
ffff80000080f1d8:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080f1dc:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
ffff80000080f1e0:	48 8b 52 40          	mov    rdx,QWORD PTR [rdx+0x40]
ffff80000080f1e4:	0f b7 52 18          	movzx  edx,WORD PTR [rdx+0x18]
ffff80000080f1e8:	0f b7 fa             	movzx  edi,dx
ffff80000080f1eb:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
ffff80000080f1ef:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080f1f3:	49 89 c7             	mov    r15,rax
ffff80000080f1f6:	49 b8 60 cb ee ff ff 	movabs r8,0xffffffffffeecb60
ffff80000080f1fd:	ff ff ff 
ffff80000080f200:	49 01 c0             	add    r8,rax
ffff80000080f203:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:73
    if(len>count)len=count;
    for(int i=0;i<len;i++){
        buf[i]=_binary_bin_test_elf_start[i + *position];
    }
    *position+=len; */
    return 0;
ffff80000080f206:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:74
}
ffff80000080f20b:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080f20f:	c9                   	leave  
ffff80000080f210:	c3                   	ret    

ffff80000080f211 <write_ramfs>:
write_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:75
long write_ramfs(struct file * filp,char * buf,unsigned long count,long * position){
ffff80000080f211:	f3 0f 1e fa          	endbr64 
ffff80000080f215:	55                   	push   rbp
ffff80000080f216:	48 89 e5             	mov    rbp,rsp
ffff80000080f219:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080f219 <write_ramfs+0x8>
ffff80000080f220:	49 bb 17 43 11 00 00 	movabs r11,0x114317
ffff80000080f227:	00 00 00 
ffff80000080f22a:	4c 01 d8             	add    rax,r11
ffff80000080f22d:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080f231:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080f235:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080f239:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:76
    return 0;
ffff80000080f23d:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:77
}
ffff80000080f242:	5d                   	pop    rbp
ffff80000080f243:	c3                   	ret    

ffff80000080f244 <ioctl_ramfs>:
ioctl_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:78
long ioctl_ramfs(struct index_node * inode,struct file * filp,unsigned long cmd,unsigned long arg){
ffff80000080f244:	f3 0f 1e fa          	endbr64 
ffff80000080f248:	55                   	push   rbp
ffff80000080f249:	48 89 e5             	mov    rbp,rsp
ffff80000080f24c:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080f24c <ioctl_ramfs+0x8>
ffff80000080f253:	49 bb e4 42 11 00 00 	movabs r11,0x1142e4
ffff80000080f25a:	00 00 00 
ffff80000080f25d:	4c 01 d8             	add    rax,r11
ffff80000080f260:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080f264:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080f268:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080f26c:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:79
    return 0;
ffff80000080f270:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:80
ffff80000080f275:	5d                   	pop    rbp
ffff80000080f276:	c3                   	ret    

ffff80000080f277 <ramdisk_do_req>:
ramdisk_do_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:22
long ramdisk_size;
int dev_ramdisk=-1;
struct blk_dev bd_ramdisk={
    .do_request=ramdisk_do_req
};
void ramdisk_do_req(struct request* req){
ffff80000080f277:	f3 0f 1e fa          	endbr64 
ffff80000080f27b:	55                   	push   rbp
ffff80000080f27c:	48 89 e5             	mov    rbp,rsp
ffff80000080f27f:	48 83 ec 40          	sub    rsp,0x40
ffff80000080f283:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080f283 <ramdisk_do_req+0xc>
ffff80000080f28a:	49 bb ad 42 11 00 00 	movabs r11,0x1142ad
ffff80000080f291:	00 00 00 
ffff80000080f294:	4c 01 d8             	add    rax,r11
ffff80000080f297:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:23
    if(!req)
ffff80000080f29b:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffff80000080f2a0:	0f 84 ff 01 00 00    	je     ffff80000080f4a5 <ramdisk_do_req+0x22e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:25
        return;
    start_request(req->dev);
ffff80000080f2a6:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080f2aa:	0f b7 12             	movzx  edx,WORD PTR [rdx]
ffff80000080f2ad:	0f b7 d2             	movzx  edx,dx
ffff80000080f2b0:	66 89 55 ee          	mov    WORD PTR [rbp-0x12],dx
start_request():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:71
    int major=BLKDEV_MAJOR(dev);
    blk_devs[major].current_request->dev=-1;
    blk_devs[major].current_request=blk_devs[major].current_request->next;
}
__attribute__((__always_inline__))inline void start_request(unsigned short dev){
    wait_on_req(blk_devs[BLKDEV_MAJOR(dev)].current_request->waiting);
ffff80000080f2b4:	0f b7 55 ee          	movzx  edx,WORD PTR [rbp-0x12]
ffff80000080f2b8:	c1 fa 04             	sar    edx,0x4
ffff80000080f2bb:	89 d1                	mov    ecx,edx
ffff80000080f2bd:	83 e1 0f             	and    ecx,0xf
ffff80000080f2c0:	48 ba 70 ff ff ff ff 	movabs rdx,0xffffffffffffff70
ffff80000080f2c7:	ff ff ff 
ffff80000080f2ca:	48 8b 34 10          	mov    rsi,QWORD PTR [rax+rdx*1]
ffff80000080f2ce:	48 63 d1             	movsxd rdx,ecx
ffff80000080f2d1:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080f2d5:	48 01 f2             	add    rdx,rsi
ffff80000080f2d8:	48 83 c2 08          	add    rdx,0x8
ffff80000080f2dc:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080f2df:	48 8b 52 30          	mov    rdx,QWORD PTR [rdx+0x30]
ffff80000080f2e3:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
wait_on_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:218
    unsigned int argv;
    unsigned int argc;
}proc_ret_stack;

__attribute__((__always_inline__))inline void wait_on_req(struct process* p){
        if(p->stat==TASK_READY||p->stat==TASK_RUNNING)
ffff80000080f2e7:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080f2eb:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff80000080f2ee:	83 fa 02             	cmp    edx,0x2
ffff80000080f2f1:	74 0c                	je     ffff80000080f2ff <ramdisk_do_req+0x88>
ffff80000080f2f3:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080f2f7:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff80000080f2fa:	83 fa 01             	cmp    edx,0x1
ffff80000080f2fd:	75 0b                	jne    ffff80000080f30a <ramdisk_do_req+0x93>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:219
            p->stat=TASK_SUSPENDED;
ffff80000080f2ff:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080f303:	c7 42 18 03 00 00 00 	mov    DWORD PTR [rdx+0x18],0x3
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:220
}
ffff80000080f30a:	90                   	nop
start_request():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:72
ffff80000080f30b:	90                   	nop
ramdisk_do_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:26
    int len= req->nr_sectors*SECTOR_SIZE;
ffff80000080f30c:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080f310:	48 8b 52 18          	mov    rdx,QWORD PTR [rdx+0x18]
ffff80000080f314:	c1 e2 09             	shl    edx,0x9
ffff80000080f317:	89 55 f4             	mov    DWORD PTR [rbp-0xc],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:27
    int base=req->sector*SECTOR_SIZE;
ffff80000080f31a:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080f31e:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
ffff80000080f322:	c1 e2 09             	shl    edx,0x9
ffff80000080f325:	89 55 f0             	mov    DWORD PTR [rbp-0x10],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:28
    switch (req->cmd)
ffff80000080f328:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080f32c:	8b 52 04             	mov    edx,DWORD PTR [rdx+0x4]
ffff80000080f32f:	85 d2                	test   edx,edx
ffff80000080f331:	74 0a                	je     ffff80000080f33d <ramdisk_do_req+0xc6>
ffff80000080f333:	83 fa 01             	cmp    edx,0x1
ffff80000080f336:	74 52                	je     ffff80000080f38a <ramdisk_do_req+0x113>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:41
        for(int i=0;i<len;i++){
            ramdisk_base[i + base]=req->buffer[i];
        }
        break;
    default:
        break;
ffff80000080f338:	e9 99 00 00 00       	jmp    ffff80000080f3d6 <ramdisk_do_req+0x15f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:31
        for(int i=0;i<len;i++){
ffff80000080f33d:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff80000080f344:	eb 3a                	jmp    ffff80000080f380 <ramdisk_do_req+0x109>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:32 (discriminator 3)
            req->buffer[i]=ramdisk_base[i + base];
ffff80000080f346:	48 ba d8 ff ff ff ff 	movabs rdx,0xffffffffffffffd8
ffff80000080f34d:	ff ff ff 
ffff80000080f350:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080f354:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080f357:	8b 75 fc             	mov    esi,DWORD PTR [rbp-0x4]
ffff80000080f35a:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
ffff80000080f35d:	01 f2                	add    edx,esi
ffff80000080f35f:	48 63 d2             	movsxd rdx,edx
ffff80000080f362:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff80000080f366:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080f36a:	48 8b 4a 28          	mov    rcx,QWORD PTR [rdx+0x28]
ffff80000080f36e:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080f371:	48 63 d2             	movsxd rdx,edx
ffff80000080f374:	48 01 d1             	add    rcx,rdx
ffff80000080f377:	0f b6 16             	movzx  edx,BYTE PTR [rsi]
ffff80000080f37a:	88 11                	mov    BYTE PTR [rcx],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:31 (discriminator 3)
        for(int i=0;i<len;i++){
ffff80000080f37c:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:31 (discriminator 1)
ffff80000080f380:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080f383:	3b 55 f4             	cmp    edx,DWORD PTR [rbp-0xc]
ffff80000080f386:	7c be                	jl     ffff80000080f346 <ramdisk_do_req+0xcf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:34
        break;
ffff80000080f388:	eb 4c                	jmp    ffff80000080f3d6 <ramdisk_do_req+0x15f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:36
        for(int i=0;i<len;i++){
ffff80000080f38a:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
ffff80000080f391:	eb 3a                	jmp    ffff80000080f3cd <ramdisk_do_req+0x156>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:37 (discriminator 3)
            ramdisk_base[i + base]=req->buffer[i];
ffff80000080f393:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080f397:	48 8b 4a 28          	mov    rcx,QWORD PTR [rdx+0x28]
ffff80000080f39b:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff80000080f39e:	48 63 d2             	movsxd rdx,edx
ffff80000080f3a1:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff80000080f3a5:	48 ba d8 ff ff ff ff 	movabs rdx,0xffffffffffffffd8
ffff80000080f3ac:	ff ff ff 
ffff80000080f3af:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080f3b3:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080f3b6:	8b 7d f8             	mov    edi,DWORD PTR [rbp-0x8]
ffff80000080f3b9:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
ffff80000080f3bc:	01 fa                	add    edx,edi
ffff80000080f3be:	48 63 d2             	movsxd rdx,edx
ffff80000080f3c1:	48 01 d1             	add    rcx,rdx
ffff80000080f3c4:	0f b6 16             	movzx  edx,BYTE PTR [rsi]
ffff80000080f3c7:	88 11                	mov    BYTE PTR [rcx],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:36 (discriminator 3)
        for(int i=0;i<len;i++){
ffff80000080f3c9:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:36 (discriminator 1)
ffff80000080f3cd:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff80000080f3d0:	3b 55 f4             	cmp    edx,DWORD PTR [rbp-0xc]
ffff80000080f3d3:	7c be                	jl     ffff80000080f393 <ramdisk_do_req+0x11c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:39
        break;
ffff80000080f3d5:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:43
    }
    end_request(req->dev);
ffff80000080f3d6:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080f3da:	0f b7 12             	movzx  edx,WORD PTR [rdx]
ffff80000080f3dd:	0f b7 d2             	movzx  edx,dx
ffff80000080f3e0:	66 89 55 de          	mov    WORD PTR [rbp-0x22],dx
end_request():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:66
    int major=BLKDEV_MAJOR(dev);
ffff80000080f3e4:	0f b7 55 de          	movzx  edx,WORD PTR [rbp-0x22]
ffff80000080f3e8:	c1 fa 04             	sar    edx,0x4
ffff80000080f3eb:	83 e2 0f             	and    edx,0xf
ffff80000080f3ee:	89 55 d8             	mov    DWORD PTR [rbp-0x28],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:67
    blk_devs[major].current_request->dev=-1;
ffff80000080f3f1:	48 ba 70 ff ff ff ff 	movabs rdx,0xffffffffffffff70
ffff80000080f3f8:	ff ff ff 
ffff80000080f3fb:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080f3ff:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
ffff80000080f402:	48 63 d2             	movsxd rdx,edx
ffff80000080f405:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080f409:	48 01 ca             	add    rdx,rcx
ffff80000080f40c:	48 83 c2 08          	add    rdx,0x8
ffff80000080f410:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080f413:	66 c7 02 ff ff       	mov    WORD PTR [rdx],0xffff
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:68
    blk_devs[major].current_request=blk_devs[major].current_request->next;
ffff80000080f418:	48 ba 70 ff ff ff ff 	movabs rdx,0xffffffffffffff70
ffff80000080f41f:	ff ff ff 
ffff80000080f422:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080f426:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
ffff80000080f429:	48 63 d2             	movsxd rdx,edx
ffff80000080f42c:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080f430:	48 01 ca             	add    rdx,rcx
ffff80000080f433:	48 83 c2 08          	add    rdx,0x8
ffff80000080f437:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080f43a:	48 8b 52 38          	mov    rdx,QWORD PTR [rdx+0x38]
ffff80000080f43e:	48 b9 70 ff ff ff ff 	movabs rcx,0xffffffffffffff70
ffff80000080f445:	ff ff ff 
ffff80000080f448:	48 8b 34 08          	mov    rsi,QWORD PTR [rax+rcx*1]
ffff80000080f44c:	8b 4d d8             	mov    ecx,DWORD PTR [rbp-0x28]
ffff80000080f44f:	48 63 c9             	movsxd rcx,ecx
ffff80000080f452:	48 c1 e1 04          	shl    rcx,0x4
ffff80000080f456:	48 01 f1             	add    rcx,rsi
ffff80000080f459:	48 83 c1 08          	add    rcx,0x8
ffff80000080f45d:	48 89 11             	mov    QWORD PTR [rcx],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:69
}
ffff80000080f460:	90                   	nop
ramdisk_do_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:44
    ramdisk_do_req(blk_devs[dev_ramdisk].current_request);
ffff80000080f461:	48 ba 78 fe ff ff ff 	movabs rdx,0xfffffffffffffe78
ffff80000080f468:	ff ff ff 
ffff80000080f46b:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080f46f:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff80000080f471:	48 b9 70 ff ff ff ff 	movabs rcx,0xffffffffffffff70
ffff80000080f478:	ff ff ff 
ffff80000080f47b:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080f47f:	48 63 d2             	movsxd rdx,edx
ffff80000080f482:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080f486:	48 01 ca             	add    rdx,rcx
ffff80000080f489:	48 83 c2 08          	add    rdx,0x8
ffff80000080f48d:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080f490:	48 89 d7             	mov    rdi,rdx
ffff80000080f493:	48 ba 47 bd ee ff ff 	movabs rdx,0xffffffffffeebd47
ffff80000080f49a:	ff ff ff 
ffff80000080f49d:	48 8d 04 10          	lea    rax,[rax+rdx*1]
ffff80000080f4a1:	ff d0                	call   rax
ffff80000080f4a3:	eb 01                	jmp    ffff80000080f4a6 <ramdisk_do_req+0x22f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:24
        return;
ffff80000080f4a5:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:45
}
ffff80000080f4a6:	c9                   	leave  
ffff80000080f4a7:	c3                   	ret    

ffff80000080f4a8 <init_ramdisk>:
init_ramdisk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:46
void init_ramdisk(){
ffff80000080f4a8:	f3 0f 1e fa          	endbr64 
ffff80000080f4ac:	55                   	push   rbp
ffff80000080f4ad:	48 89 e5             	mov    rbp,rsp
ffff80000080f4b0:	41 57                	push   r15
ffff80000080f4b2:	41 54                	push   r12
ffff80000080f4b4:	53                   	push   rbx
ffff80000080f4b5:	48 83 ec 18          	sub    rsp,0x18
ffff80000080f4b9:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080f4b9 <init_ramdisk+0x11>
ffff80000080f4c0:	49 bb 77 40 11 00 00 	movabs r11,0x114077
ffff80000080f4c7:	00 00 00 
ffff80000080f4ca:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:48
    //初始化ramdisk，在/dev下创建一个ram
    ramdisk_base= KNL_BASE+0x81000000;//(char *) kmallocat(0, 100);
ffff80000080f4cd:	48 b8 d8 ff ff ff ff 	movabs rax,0xffffffffffffffd8
ffff80000080f4d4:	ff ff ff 
ffff80000080f4d7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080f4db:	48 be 00 00 00 81 00 	movabs rsi,0xffff800081000000
ffff80000080f4e2:	80 ff ff 
ffff80000080f4e5:	48 89 30             	mov    QWORD PTR [rax],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:49
    if(ramdisk_base==-1){
ffff80000080f4e8:	48 b8 d8 ff ff ff ff 	movabs rax,0xffffffffffffffd8
ffff80000080f4ef:	ff ff ff 
ffff80000080f4f2:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080f4f6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f4f9:	48 83 f8 ff          	cmp    rax,0xffffffffffffffff
ffff80000080f4fd:	75 2d                	jne    ffff80000080f52c <init_ramdisk+0x84>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:50
        comprintf("failed to init ramdisk.\n");
ffff80000080f4ff:	48 b8 52 d5 ff ff ff 	movabs rax,0xffffffffffffd552
ffff80000080f506:	ff ff ff 
ffff80000080f509:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080f50d:	48 89 c7             	mov    rdi,rax
ffff80000080f510:	49 89 df             	mov    r15,rbx
ffff80000080f513:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080f518:	48 ba 62 18 ef ff ff 	movabs rdx,0xffffffffffef1862
ffff80000080f51f:	ff ff ff 
ffff80000080f522:	48 01 da             	add    rdx,rbx
ffff80000080f525:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:51
        return;
ffff80000080f527:	e9 a3 01 00 00       	jmp    ffff80000080f6cf <init_ramdisk+0x227>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:53
    }
    ramdisk_size= (char*)_binary_rd_img_end - (char*)_binary_rd_img_start;//PAGE_4K_SIZE*100;
ffff80000080f52c:	48 b8 28 fd ff ff ff 	movabs rax,0xfffffffffffffd28
ffff80000080f533:	ff ff ff 
ffff80000080f536:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080f53a:	48 89 c2             	mov    rdx,rax
ffff80000080f53d:	48 b8 f8 fd ff ff ff 	movabs rax,0xfffffffffffffdf8
ffff80000080f544:	ff ff ff 
ffff80000080f547:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080f54b:	48 29 c2             	sub    rdx,rax
ffff80000080f54e:	48 b8 50 fd ff ff ff 	movabs rax,0xfffffffffffffd50
ffff80000080f555:	ff ff ff 
ffff80000080f558:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080f55c:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:54
    if((dev_ramdisk=reg_blkdev(&bd_ramdisk))<0){
ffff80000080f55f:	48 b8 80 ff ff ff ff 	movabs rax,0xffffffffffffff80
ffff80000080f566:	ff ff ff 
ffff80000080f569:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080f56d:	48 89 c7             	mov    rdi,rax
ffff80000080f570:	49 89 df             	mov    r15,rbx
ffff80000080f573:	48 b8 aa c1 ee ff ff 	movabs rax,0xffffffffffeec1aa
ffff80000080f57a:	ff ff ff 
ffff80000080f57d:	48 01 d8             	add    rax,rbx
ffff80000080f580:	ff d0                	call   rax
ffff80000080f582:	48 ba 78 fe ff ff ff 	movabs rdx,0xfffffffffffffe78
ffff80000080f589:	ff ff ff 
ffff80000080f58c:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080f590:	89 02                	mov    DWORD PTR [rdx],eax
ffff80000080f592:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff80000080f599:	ff ff ff 
ffff80000080f59c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080f5a0:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080f5a2:	85 c0                	test   eax,eax
ffff80000080f5a4:	79 2d                	jns    ffff80000080f5d3 <init_ramdisk+0x12b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:55
        comprintf("no place for more blkdev.\n");
ffff80000080f5a6:	48 b8 6b d5 ff ff ff 	movabs rax,0xffffffffffffd56b
ffff80000080f5ad:	ff ff ff 
ffff80000080f5b0:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080f5b4:	48 89 c7             	mov    rdi,rax
ffff80000080f5b7:	49 89 df             	mov    r15,rbx
ffff80000080f5ba:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080f5bf:	48 ba 62 18 ef ff ff 	movabs rdx,0xffffffffffef1862
ffff80000080f5c6:	ff ff ff 
ffff80000080f5c9:	48 01 da             	add    rdx,rbx
ffff80000080f5cc:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:56
        return;
ffff80000080f5ce:	e9 fc 00 00 00       	jmp    ffff80000080f6cf <init_ramdisk+0x227>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:58
    }
    for(int i=0;i<(ramdisk_size+PAGE_4K_SIZE-1)/PAGE_4K_SIZE;i++){
ffff80000080f5d3:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
ffff80000080f5da:	e9 b8 00 00 00       	jmp    ffff80000080f697 <init_ramdisk+0x1ef>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:59 (discriminator 3)
        smmap(pmalloc(PAGE_4K_SIZE),ramdisk_base+i*PAGE_4K_SIZE,PAGE_PRESENT|PAGE_RWX,PML4_ADDR);
ffff80000080f5df:	48 b8 d8 ff ff ff ff 	movabs rax,0xffffffffffffffd8
ffff80000080f5e6:	ff ff ff 
ffff80000080f5e9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080f5ed:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080f5f0:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080f5f3:	c1 e0 0c             	shl    eax,0xc
ffff80000080f5f6:	48 98                	cdqe   
ffff80000080f5f8:	48 01 d0             	add    rax,rdx
ffff80000080f5fb:	49 89 c4             	mov    r12,rax
ffff80000080f5fe:	bf 00 10 00 00       	mov    edi,0x1000
ffff80000080f603:	49 89 df             	mov    r15,rbx
ffff80000080f606:	48 b8 4b 01 ee ff ff 	movabs rax,0xffffffffffee014b
ffff80000080f60d:	ff ff ff 
ffff80000080f610:	48 01 d8             	add    rax,rbx
ffff80000080f613:	ff d0                	call   rax
ffff80000080f615:	48 89 c7             	mov    rdi,rax
ffff80000080f618:	48 b8 00 10 10 00 00 	movabs rax,0xffff800000101000
ffff80000080f61f:	80 ff ff 
ffff80000080f622:	48 89 c1             	mov    rcx,rax
ffff80000080f625:	ba 03 00 00 00       	mov    edx,0x3
ffff80000080f62a:	4c 89 e6             	mov    rsi,r12
ffff80000080f62d:	49 89 df             	mov    r15,rbx
ffff80000080f630:	48 b8 9c e8 ed ff ff 	movabs rax,0xffffffffffede89c
ffff80000080f637:	ff ff ff 
ffff80000080f63a:	48 01 d8             	add    rax,rbx
ffff80000080f63d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:61 (discriminator 3)
        //解压img里面的test程序
        memcpy(ramdisk_base+i*PAGE_4K_SIZE, _binary_rd_img_start+i*PAGE_4K_SIZE,PAGE_4K_SIZE);
ffff80000080f63f:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080f642:	c1 e0 0c             	shl    eax,0xc
ffff80000080f645:	48 63 d0             	movsxd rdx,eax
ffff80000080f648:	48 b8 f8 fd ff ff ff 	movabs rax,0xfffffffffffffdf8
ffff80000080f64f:	ff ff ff 
ffff80000080f652:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080f656:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
ffff80000080f65a:	48 b8 d8 ff ff ff ff 	movabs rax,0xffffffffffffffd8
ffff80000080f661:	ff ff ff 
ffff80000080f664:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080f668:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080f66b:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080f66e:	c1 e0 0c             	shl    eax,0xc
ffff80000080f671:	48 98                	cdqe   
ffff80000080f673:	48 01 d0             	add    rax,rdx
ffff80000080f676:	ba 00 10 00 00       	mov    edx,0x1000
ffff80000080f67b:	48 89 ce             	mov    rsi,rcx
ffff80000080f67e:	48 89 c7             	mov    rdi,rax
ffff80000080f681:	49 89 df             	mov    r15,rbx
ffff80000080f684:	48 b8 02 1d ef ff ff 	movabs rax,0xffffffffffef1d02
ffff80000080f68b:	ff ff ff 
ffff80000080f68e:	48 01 d8             	add    rax,rbx
ffff80000080f691:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:58 (discriminator 3)
    for(int i=0;i<(ramdisk_size+PAGE_4K_SIZE-1)/PAGE_4K_SIZE;i++){
ffff80000080f693:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:58 (discriminator 1)
ffff80000080f697:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080f69a:	48 63 d0             	movsxd rdx,eax
ffff80000080f69d:	48 b8 50 fd ff ff ff 	movabs rax,0xfffffffffffffd50
ffff80000080f6a4:	ff ff ff 
ffff80000080f6a7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080f6ab:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f6ae:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff80000080f6b4:	48 8d 88 ff 0f 00 00 	lea    rcx,[rax+0xfff]
ffff80000080f6bb:	48 85 c0             	test   rax,rax
ffff80000080f6be:	48 0f 48 c1          	cmovs  rax,rcx
ffff80000080f6c2:	48 c1 f8 0c          	sar    rax,0xc
ffff80000080f6c6:	48 39 c2             	cmp    rdx,rax
ffff80000080f6c9:	0f 8c 10 ff ff ff    	jl     ffff80000080f5df <init_ramdisk+0x137>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:65

    }
    
}
ffff80000080f6cf:	48 83 c4 18          	add    rsp,0x18
ffff80000080f6d3:	5b                   	pop    rbx
ffff80000080f6d4:	41 5c                	pop    r12
ffff80000080f6d6:	41 5f                	pop    r15
ffff80000080f6d8:	5d                   	pop    rbp
ffff80000080f6d9:	c3                   	ret    

ffff80000080f6da <reg_blkdev>:
reg_blkdev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:5
#include <blk_dev.h>
#include <errno.h>
struct blk_dev blk_devs[MAX_BLKDEVS];
struct request requests[MAX_REQUESTS];
int reg_blkdev(struct blk_dev* dev){
ffff80000080f6da:	f3 0f 1e fa          	endbr64 
ffff80000080f6de:	55                   	push   rbp
ffff80000080f6df:	48 89 e5             	mov    rbp,rsp
ffff80000080f6e2:	53                   	push   rbx
ffff80000080f6e3:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080f6e3 <reg_blkdev+0x9>
ffff80000080f6ea:	49 bb 4d 3e 11 00 00 	movabs r11,0x113e4d
ffff80000080f6f1:	00 00 00 
ffff80000080f6f4:	4c 01 d8             	add    rax,r11
ffff80000080f6f7:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:6
    for(int i=0;i<MAX_BLKDEVS;i++){
ffff80000080f6fb:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
ffff80000080f702:	e9 80 00 00 00       	jmp    ffff80000080f787 <reg_blkdev+0xad>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:7
        if(blk_devs[i].do_request)continue;
ffff80000080f707:	48 ba 70 ff ff ff ff 	movabs rdx,0xffffffffffffff70
ffff80000080f70e:	ff ff ff 
ffff80000080f711:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080f715:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff80000080f718:	48 63 d2             	movsxd rdx,edx
ffff80000080f71b:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080f71f:	48 01 ca             	add    rdx,rcx
ffff80000080f722:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080f725:	48 85 d2             	test   rdx,rdx
ffff80000080f728:	75 58                	jne    ffff80000080f782 <reg_blkdev+0xa8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:8
        blk_devs[i]=*dev;
ffff80000080f72a:	48 ba 70 ff ff ff ff 	movabs rdx,0xffffffffffffff70
ffff80000080f731:	ff ff ff 
ffff80000080f734:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080f738:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff80000080f73b:	48 63 d2             	movsxd rdx,edx
ffff80000080f73e:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080f742:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff80000080f746:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080f74a:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080f74d:	48 8b 5a 08          	mov    rbx,QWORD PTR [rdx+0x8]
ffff80000080f751:	48 89 0e             	mov    QWORD PTR [rsi],rcx
ffff80000080f754:	48 89 5e 08          	mov    QWORD PTR [rsi+0x8],rbx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:9
        blk_devs[i].current_request=NULL;
ffff80000080f758:	48 ba 70 ff ff ff ff 	movabs rdx,0xffffffffffffff70
ffff80000080f75f:	ff ff ff 
ffff80000080f762:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080f766:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffff80000080f769:	48 98                	cdqe   
ffff80000080f76b:	48 c1 e0 04          	shl    rax,0x4
ffff80000080f76f:	48 01 d0             	add    rax,rdx
ffff80000080f772:	48 83 c0 08          	add    rax,0x8
ffff80000080f776:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:10
        return i;
ffff80000080f77d:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffff80000080f780:	eb 14                	jmp    ffff80000080f796 <reg_blkdev+0xbc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:7
        if(blk_devs[i].do_request)continue;
ffff80000080f782:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:6
    for(int i=0;i<MAX_BLKDEVS;i++){
ffff80000080f783:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:6 (discriminator 1)
ffff80000080f787:	83 7d f4 0b          	cmp    DWORD PTR [rbp-0xc],0xb
ffff80000080f78b:	0f 8e 76 ff ff ff    	jle    ffff80000080f707 <reg_blkdev+0x2d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:12
    }
    return -ENOMEM;
ffff80000080f791:	b8 cf ff ff ff       	mov    eax,0xffffffcf
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:13
}
ffff80000080f796:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
ffff80000080f79a:	c9                   	leave  
ffff80000080f79b:	c3                   	ret    

ffff80000080f79c <unreg_blkdev>:
unreg_blkdev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:14
int unreg_blkdev(unsigned short dev){
ffff80000080f79c:	f3 0f 1e fa          	endbr64 
ffff80000080f7a0:	55                   	push   rbp
ffff80000080f7a1:	48 89 e5             	mov    rbp,rsp
ffff80000080f7a4:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080f7a4 <unreg_blkdev+0x8>
ffff80000080f7ab:	49 bb 8c 3d 11 00 00 	movabs r11,0x113d8c
ffff80000080f7b2:	00 00 00 
ffff80000080f7b5:	4c 01 d8             	add    rax,r11
ffff80000080f7b8:	89 fa                	mov    edx,edi
ffff80000080f7ba:	66 89 55 fc          	mov    WORD PTR [rbp-0x4],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:15
    if(blk_devs[dev].current_request)
ffff80000080f7be:	0f b7 55 fc          	movzx  edx,WORD PTR [rbp-0x4]
ffff80000080f7c2:	48 b9 70 ff ff ff ff 	movabs rcx,0xffffffffffffff70
ffff80000080f7c9:	ff ff ff 
ffff80000080f7cc:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080f7d0:	48 63 d2             	movsxd rdx,edx
ffff80000080f7d3:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080f7d7:	48 01 ca             	add    rdx,rcx
ffff80000080f7da:	48 83 c2 08          	add    rdx,0x8
ffff80000080f7de:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080f7e1:	48 85 d2             	test   rdx,rdx
ffff80000080f7e4:	74 07                	je     ffff80000080f7ed <unreg_blkdev+0x51>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:16
        return -EBUSY;//设备还有没完成的请求
ffff80000080f7e6:	b8 f6 ff ff ff       	mov    eax,0xfffffff6
ffff80000080f7eb:	eb 23                	jmp    ffff80000080f810 <unreg_blkdev+0x74>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:17
    blk_devs[dev].do_request=0;//清除
ffff80000080f7ed:	0f b7 55 fc          	movzx  edx,WORD PTR [rbp-0x4]
ffff80000080f7f1:	48 b9 70 ff ff ff ff 	movabs rcx,0xffffffffffffff70
ffff80000080f7f8:	ff ff ff 
ffff80000080f7fb:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080f7ff:	48 63 c2             	movsxd rax,edx
ffff80000080f802:	48 c1 e0 04          	shl    rax,0x4
ffff80000080f806:	48 01 c8             	add    rax,rcx
ffff80000080f809:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:18
}
ffff80000080f810:	5d                   	pop    rbp
ffff80000080f811:	c3                   	ret    

ffff80000080f812 <make_request>:
make_request():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:19
int make_request(unsigned short dev,int cmd,unsigned long sector, unsigned long count,char * buffer){
ffff80000080f812:	f3 0f 1e fa          	endbr64 
ffff80000080f816:	55                   	push   rbp
ffff80000080f817:	48 89 e5             	mov    rbp,rsp
ffff80000080f81a:	48 83 ec 40          	sub    rsp,0x40
ffff80000080f81e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080f81e <make_request+0xc>
ffff80000080f825:	49 bb 12 3d 11 00 00 	movabs r11,0x113d12
ffff80000080f82c:	00 00 00 
ffff80000080f82f:	4c 01 d8             	add    rax,r11
ffff80000080f832:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080f835:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
ffff80000080f839:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
ffff80000080f83d:	4c 89 45 c0          	mov    QWORD PTR [rbp-0x40],r8
ffff80000080f841:	89 fa                	mov    edx,edi
ffff80000080f843:	66 89 55 dc          	mov    WORD PTR [rbp-0x24],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:20
    struct blk_dev* d=&blk_devs[BLKDEV_MAJOR(dev)];
ffff80000080f847:	0f b7 55 dc          	movzx  edx,WORD PTR [rbp-0x24]
ffff80000080f84b:	c1 fa 04             	sar    edx,0x4
ffff80000080f84e:	83 e2 0f             	and    edx,0xf
ffff80000080f851:	48 63 d2             	movsxd rdx,edx
ffff80000080f854:	48 89 d1             	mov    rcx,rdx
ffff80000080f857:	48 c1 e1 04          	shl    rcx,0x4
ffff80000080f85b:	48 ba 70 ff ff ff ff 	movabs rdx,0xffffffffffffff70
ffff80000080f862:	ff ff ff 
ffff80000080f865:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080f869:	48 01 ca             	add    rdx,rcx
ffff80000080f86c:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:21
    if(!d->do_request)
ffff80000080f870:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080f874:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080f877:	48 85 d2             	test   rdx,rdx
ffff80000080f87a:	75 0a                	jne    ffff80000080f886 <make_request+0x74>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:22
        return -ENODEV;//没有这个设备
ffff80000080f87c:	b8 d4 ff ff ff       	mov    eax,0xffffffd4
ffff80000080f881:	e9 53 01 00 00       	jmp    ffff80000080f9d9 <make_request+0x1c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:24
    //找一个空的请求
    struct request* req=NULL;
ffff80000080f886:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080f88d:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:25
    for(int i=0;i<MAX_REQUESTS;i++){
ffff80000080f88e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
ffff80000080f895:	eb 4c                	jmp    ffff80000080f8e3 <make_request+0xd1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:26
        if(requests[i].dev==(unsigned short)-1){
ffff80000080f897:	48 ba 88 fd ff ff ff 	movabs rdx,0xfffffffffffffd88
ffff80000080f89e:	ff ff ff 
ffff80000080f8a1:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080f8a5:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff80000080f8a8:	48 63 d2             	movsxd rdx,edx
ffff80000080f8ab:	48 c1 e2 06          	shl    rdx,0x6
ffff80000080f8af:	48 01 ca             	add    rdx,rcx
ffff80000080f8b2:	0f b7 12             	movzx  edx,WORD PTR [rdx]
ffff80000080f8b5:	66 83 fa ff          	cmp    dx,0xffff
ffff80000080f8b9:	75 24                	jne    ffff80000080f8df <make_request+0xcd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:27
            req=requests+i;
ffff80000080f8bb:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff80000080f8be:	48 63 d2             	movsxd rdx,edx
ffff80000080f8c1:	48 89 d1             	mov    rcx,rdx
ffff80000080f8c4:	48 c1 e1 06          	shl    rcx,0x6
ffff80000080f8c8:	48 ba 88 fd ff ff ff 	movabs rdx,0xfffffffffffffd88
ffff80000080f8cf:	ff ff ff 
ffff80000080f8d2:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080f8d6:	48 01 ca             	add    rdx,rcx
ffff80000080f8d9:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:28
            break;
ffff80000080f8dd:	eb 0a                	jmp    ffff80000080f8e9 <make_request+0xd7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:25 (discriminator 2)
    for(int i=0;i<MAX_REQUESTS;i++){
ffff80000080f8df:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:25 (discriminator 1)
ffff80000080f8e3:	83 7d f4 3f          	cmp    DWORD PTR [rbp-0xc],0x3f
ffff80000080f8e7:	7e ae                	jle    ffff80000080f897 <make_request+0x85>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:32
        }
    }
    //下面的处理不太好。感觉最好是等到有空位置为止。
    if(!req)
ffff80000080f8e9:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffff80000080f8ee:	75 0a                	jne    ffff80000080f8fa <make_request+0xe8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:33
        return -ENOMEM;//没有空的请求位置。
ffff80000080f8f0:	b8 cf ff ff ff       	mov    eax,0xffffffcf
ffff80000080f8f5:	e9 df 00 00 00       	jmp    ffff80000080f9d9 <make_request+0x1c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:38
    /*
    检查有没有请求正在运行，有的话接到后面，没有的话直接接上去，前面请求完成之后顺着链表下一个，
    这样就能保证所有请求都可以被访问到。
    */
    req->dev=dev;
ffff80000080f8fa:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080f8fe:	0f b7 4d dc          	movzx  ecx,WORD PTR [rbp-0x24]
ffff80000080f902:	66 89 0a             	mov    WORD PTR [rdx],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:39
    req->cmd=cmd;
ffff80000080f905:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080f909:	8b 4d d8             	mov    ecx,DWORD PTR [rbp-0x28]
ffff80000080f90c:	89 4a 04             	mov    DWORD PTR [rdx+0x4],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:40
    req->buffer=buffer;
ffff80000080f90f:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080f913:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
ffff80000080f917:	48 89 4a 28          	mov    QWORD PTR [rdx+0x28],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:41
    req->count=count;
ffff80000080f91b:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080f91f:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
ffff80000080f923:	48 89 4a 20          	mov    QWORD PTR [rdx+0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:42
    req->next=NULL;
ffff80000080f927:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080f92b:	48 c7 42 38 00 00 00 	mov    QWORD PTR [rdx+0x38],0x0
ffff80000080f932:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:43
    req->nr_sectors=TO_SECN(count);
ffff80000080f933:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080f937:	48 81 c2 ff 01 00 00 	add    rdx,0x1ff
ffff80000080f93e:	48 89 d1             	mov    rcx,rdx
ffff80000080f941:	48 c1 e9 09          	shr    rcx,0x9
ffff80000080f945:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080f949:	48 89 4a 18          	mov    QWORD PTR [rdx+0x18],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:44
    req->sector=sector;
ffff80000080f94d:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080f951:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffff80000080f955:	48 89 4a 10          	mov    QWORD PTR [rdx+0x10],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:45
    req->waiting=current;
ffff80000080f959:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff80000080f960:	ff ff ff 
ffff80000080f963:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080f967:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080f96a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080f96e:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:47
    //这里可能不需要阻塞进程，有的设备不需要阻塞。    
    if(!d->current_request)
ffff80000080f972:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080f976:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080f97a:	48 85 c0             	test   rax,rax
ffff80000080f97d:	75 22                	jne    ffff80000080f9a1 <make_request+0x18f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:49
    {
        d->current_request=req;
ffff80000080f97f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080f983:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080f987:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:50
        d->do_request(d->current_request);
ffff80000080f98b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080f98f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080f992:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080f996:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080f99a:	48 89 c7             	mov    rdi,rax
ffff80000080f99d:	ff d2                	call   rdx
ffff80000080f99f:	eb 33                	jmp    ffff80000080f9d4 <make_request+0x1c2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:52
    }else{
        struct request* rp=d->current_request;
ffff80000080f9a1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080f9a5:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080f9a9:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:53
        for(;rp->next;rp=rp->next);
ffff80000080f9ad:	eb 0c                	jmp    ffff80000080f9bb <make_request+0x1a9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:53 (discriminator 2)
ffff80000080f9af:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080f9b3:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff80000080f9b7:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:53 (discriminator 1)
ffff80000080f9bb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080f9bf:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff80000080f9c3:	48 85 c0             	test   rax,rax
ffff80000080f9c6:	75 e7                	jne    ffff80000080f9af <make_request+0x19d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:54
        rp->next=req;
ffff80000080f9c8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080f9cc:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080f9d0:	48 89 50 38          	mov    QWORD PTR [rax+0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:56
    }
    return 1;
ffff80000080f9d4:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:57
}
ffff80000080f9d9:	c9                   	leave  
ffff80000080f9da:	c3                   	ret    

ffff80000080f9db <init_blkdev>:
init_blkdev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:58
void init_blkdev(void){
ffff80000080f9db:	f3 0f 1e fa          	endbr64 
ffff80000080f9df:	55                   	push   rbp
ffff80000080f9e0:	48 89 e5             	mov    rbp,rsp
ffff80000080f9e3:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080f9e3 <init_blkdev+0x8>
ffff80000080f9ea:	49 bb 4d 3b 11 00 00 	movabs r11,0x113b4d
ffff80000080f9f1:	00 00 00 
ffff80000080f9f4:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:59
    for(int i=0;i<MAX_REQUESTS;i++){
ffff80000080f9f7:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff80000080f9fe:	eb 24                	jmp    ffff80000080fa24 <init_blkdev+0x49>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:60 (discriminator 3)
        requests[i].dev=-1;
ffff80000080fa00:	48 ba 88 fd ff ff ff 	movabs rdx,0xfffffffffffffd88
ffff80000080fa07:	ff ff ff 
ffff80000080fa0a:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080fa0e:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080fa11:	48 63 d2             	movsxd rdx,edx
ffff80000080fa14:	48 c1 e2 06          	shl    rdx,0x6
ffff80000080fa18:	48 01 ca             	add    rdx,rcx
ffff80000080fa1b:	66 c7 02 ff ff       	mov    WORD PTR [rdx],0xffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:59 (discriminator 3)
    for(int i=0;i<MAX_REQUESTS;i++){
ffff80000080fa20:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:59 (discriminator 1)
ffff80000080fa24:	83 7d fc 3f          	cmp    DWORD PTR [rbp-0x4],0x3f
ffff80000080fa28:	7e d6                	jle    ffff80000080fa00 <init_blkdev+0x25>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:62
    }
ffff80000080fa2a:	90                   	nop
ffff80000080fa2b:	90                   	nop
ffff80000080fa2c:	5d                   	pop    rbp
ffff80000080fa2d:	c3                   	ret    

ffff80000080fa2e <init_blkbuf>:
init_blkbuf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:9
#include <errno.h>
#include <memory.h>
buffer_head l_buffer_heads[MAX_BUFFERHEADS];
//这个存储的是各个块设备映射的缓冲区链表中的头
buffer_head* l_blk_bh_heads[MAX_BLKDEVS];
void init_blkbuf(){
ffff80000080fa2e:	f3 0f 1e fa          	endbr64 
ffff80000080fa32:	55                   	push   rbp
ffff80000080fa33:	48 89 e5             	mov    rbp,rsp
ffff80000080fa36:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080fa36 <init_blkbuf+0x8>
ffff80000080fa3d:	49 bb fa 3a 11 00 00 	movabs r11,0x113afa
ffff80000080fa44:	00 00 00 
ffff80000080fa47:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:10
    for(int i=0;i<MAX_BUFFERHEADS;i++){
ffff80000080fa4a:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff80000080fa51:	eb 44                	jmp    ffff80000080fa97 <init_blkbuf+0x69>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:11 (discriminator 3)
        l_buffer_heads[i].dev=-1;
ffff80000080fa53:	48 ba 70 fd ff ff ff 	movabs rdx,0xfffffffffffffd70
ffff80000080fa5a:	ff ff ff 
ffff80000080fa5d:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080fa61:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080fa64:	48 63 d2             	movsxd rdx,edx
ffff80000080fa67:	48 c1 e2 06          	shl    rdx,0x6
ffff80000080fa6b:	48 01 ca             	add    rdx,rcx
ffff80000080fa6e:	48 83 c2 10          	add    rdx,0x10
ffff80000080fa72:	66 c7 02 ff ff       	mov    WORD PTR [rdx],0xffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:12 (discriminator 3)
        l_blk_bh_heads[i]=NULL;
ffff80000080fa77:	48 ba 88 fe ff ff ff 	movabs rdx,0xfffffffffffffe88
ffff80000080fa7e:	ff ff ff 
ffff80000080fa81:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080fa85:	8b 4d fc             	mov    ecx,DWORD PTR [rbp-0x4]
ffff80000080fa88:	48 63 c9             	movsxd rcx,ecx
ffff80000080fa8b:	48 c7 04 ca 00 00 00 	mov    QWORD PTR [rdx+rcx*8],0x0
ffff80000080fa92:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:10 (discriminator 3)
    for(int i=0;i<MAX_BUFFERHEADS;i++){
ffff80000080fa93:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:10 (discriminator 1)
ffff80000080fa97:	83 7d fc 7f          	cmp    DWORD PTR [rbp-0x4],0x7f
ffff80000080fa9b:	7e b6                	jle    ffff80000080fa53 <init_blkbuf+0x25>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:14
    }
}
ffff80000080fa9d:	90                   	nop
ffff80000080fa9e:	90                   	nop
ffff80000080fa9f:	5d                   	pop    rbp
ffff80000080faa0:	c3                   	ret    

ffff80000080faa1 <bget>:
bget():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:15
buffer_head *bget(){
ffff80000080faa1:	f3 0f 1e fa          	endbr64 
ffff80000080faa5:	55                   	push   rbp
ffff80000080faa6:	48 89 e5             	mov    rbp,rsp
ffff80000080faa9:	41 57                	push   r15
ffff80000080faab:	53                   	push   rbx
ffff80000080faac:	48 83 ec 10          	sub    rsp,0x10
ffff80000080fab0:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080fab0 <bget+0xf>
ffff80000080fab7:	49 bb 80 3a 11 00 00 	movabs r11,0x113a80
ffff80000080fabe:	00 00 00 
ffff80000080fac1:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:16
    for(int i=0;i<MAX_BUFFERHEADS;i++){
ffff80000080fac4:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff80000080facb:	e9 f3 00 00 00       	jmp    ffff80000080fbc3 <bget+0x122>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:17
        if(l_buffer_heads[i].dev==(unsigned short)-1)
ffff80000080fad0:	48 b8 70 fd ff ff ff 	movabs rax,0xfffffffffffffd70
ffff80000080fad7:	ff ff ff 
ffff80000080fada:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff80000080fade:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080fae1:	48 98                	cdqe   
ffff80000080fae3:	48 c1 e0 06          	shl    rax,0x6
ffff80000080fae7:	48 01 d0             	add    rax,rdx
ffff80000080faea:	48 83 c0 10          	add    rax,0x10
ffff80000080faee:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff80000080faf1:	66 83 f8 ff          	cmp    ax,0xffff
ffff80000080faf5:	0f 85 c4 00 00 00    	jne    ffff80000080fbbf <bget+0x11e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:19
        {
            l_buffer_heads[i].data=kmalloc(0,PAGE_4K_SIZE);
ffff80000080fafb:	be 00 10 00 00       	mov    esi,0x1000
ffff80000080fb00:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080fb05:	49 89 df             	mov    r15,rbx
ffff80000080fb08:	48 b8 96 fe ed ff ff 	movabs rax,0xffffffffffedfe96
ffff80000080fb0f:	ff ff ff 
ffff80000080fb12:	48 01 d8             	add    rax,rbx
ffff80000080fb15:	ff d0                	call   rax
ffff80000080fb17:	48 ba 70 fd ff ff ff 	movabs rdx,0xfffffffffffffd70
ffff80000080fb1e:	ff ff ff 
ffff80000080fb21:	48 8b 0c 13          	mov    rcx,QWORD PTR [rbx+rdx*1]
ffff80000080fb25:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080fb28:	48 63 d2             	movsxd rdx,edx
ffff80000080fb2b:	48 c1 e2 06          	shl    rdx,0x6
ffff80000080fb2f:	48 01 ca             	add    rdx,rcx
ffff80000080fb32:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:20
            l_buffer_heads[i].count=0;
ffff80000080fb35:	48 b8 70 fd ff ff ff 	movabs rax,0xfffffffffffffd70
ffff80000080fb3c:	ff ff ff 
ffff80000080fb3f:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff80000080fb43:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080fb46:	48 98                	cdqe   
ffff80000080fb48:	48 c1 e0 06          	shl    rax,0x6
ffff80000080fb4c:	48 01 d0             	add    rax,rdx
ffff80000080fb4f:	48 83 c0 14          	add    rax,0x14
ffff80000080fb53:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:21
            l_buffer_heads[i].next=NULL;
ffff80000080fb56:	48 b8 70 fd ff ff ff 	movabs rax,0xfffffffffffffd70
ffff80000080fb5d:	ff ff ff 
ffff80000080fb60:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff80000080fb64:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080fb67:	48 98                	cdqe   
ffff80000080fb69:	48 c1 e0 06          	shl    rax,0x6
ffff80000080fb6d:	48 01 d0             	add    rax,rdx
ffff80000080fb70:	48 83 c0 28          	add    rax,0x28
ffff80000080fb74:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:22
            l_buffer_heads[i].prev=NULL;
ffff80000080fb7b:	48 b8 70 fd ff ff ff 	movabs rax,0xfffffffffffffd70
ffff80000080fb82:	ff ff ff 
ffff80000080fb85:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff80000080fb89:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080fb8c:	48 98                	cdqe   
ffff80000080fb8e:	48 c1 e0 06          	shl    rax,0x6
ffff80000080fb92:	48 01 d0             	add    rax,rdx
ffff80000080fb95:	48 83 c0 20          	add    rax,0x20
ffff80000080fb99:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:23
            return l_buffer_heads+i;
ffff80000080fba0:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080fba3:	48 98                	cdqe   
ffff80000080fba5:	48 c1 e0 06          	shl    rax,0x6
ffff80000080fba9:	48 89 c2             	mov    rdx,rax
ffff80000080fbac:	48 b8 70 fd ff ff ff 	movabs rax,0xfffffffffffffd70
ffff80000080fbb3:	ff ff ff 
ffff80000080fbb6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080fbba:	48 01 d0             	add    rax,rdx
ffff80000080fbbd:	eb 13                	jmp    ffff80000080fbd2 <bget+0x131>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:16 (discriminator 2)
    for(int i=0;i<MAX_BUFFERHEADS;i++){
ffff80000080fbbf:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:16 (discriminator 1)
ffff80000080fbc3:	83 7d ec 7f          	cmp    DWORD PTR [rbp-0x14],0x7f
ffff80000080fbc7:	0f 8e 03 ff ff ff    	jle    ffff80000080fad0 <bget+0x2f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:27
        }
    }
    //errno = -ENOBUF
    return NULL;
ffff80000080fbcd:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:28
}
ffff80000080fbd2:	48 83 c4 10          	add    rsp,0x10
ffff80000080fbd6:	5b                   	pop    rbx
ffff80000080fbd7:	41 5f                	pop    r15
ffff80000080fbd9:	5d                   	pop    rbp
ffff80000080fbda:	c3                   	ret    

ffff80000080fbdb <get_block>:
get_block():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:30

buffer_head *get_block(unsigned short dev,int blocknr){
ffff80000080fbdb:	f3 0f 1e fa          	endbr64 
ffff80000080fbdf:	55                   	push   rbp
ffff80000080fbe0:	48 89 e5             	mov    rbp,rsp
ffff80000080fbe3:	41 57                	push   r15
ffff80000080fbe5:	53                   	push   rbx
ffff80000080fbe6:	48 83 ec 20          	sub    rsp,0x20
ffff80000080fbea:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080fbea <get_block+0xf>
ffff80000080fbf1:	49 bb 46 39 11 00 00 	movabs r11,0x113946
ffff80000080fbf8:	00 00 00 
ffff80000080fbfb:	4c 01 db             	add    rbx,r11
ffff80000080fbfe:	89 f8                	mov    eax,edi
ffff80000080fc00:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080fc03:	66 89 45 dc          	mov    WORD PTR [rbp-0x24],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:31
    buffer_head *bh=l_blk_bh_heads[BLKDEV_MAJOR(dev)];
ffff80000080fc07:	0f b7 45 dc          	movzx  eax,WORD PTR [rbp-0x24]
ffff80000080fc0b:	c1 f8 04             	sar    eax,0x4
ffff80000080fc0e:	83 e0 0f             	and    eax,0xf
ffff80000080fc11:	89 c2                	mov    edx,eax
ffff80000080fc13:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff80000080fc1a:	ff ff ff 
ffff80000080fc1d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080fc21:	48 63 d2             	movsxd rdx,edx
ffff80000080fc24:	48 8b 04 d0          	mov    rax,QWORD PTR [rax+rdx*8]
ffff80000080fc28:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:32
    if(!bh){
ffff80000080fc2c:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080fc31:	75 7c                	jne    ffff80000080fcaf <get_block+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:34
        //这个设备没有任何的缓冲区
        bh=bget();
ffff80000080fc33:	49 89 df             	mov    r15,rbx
ffff80000080fc36:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080fc3b:	48 ba 71 c5 ee ff ff 	movabs rdx,0xffffffffffeec571
ffff80000080fc42:	ff ff ff 
ffff80000080fc45:	48 01 da             	add    rdx,rbx
ffff80000080fc48:	ff d2                	call   rdx
ffff80000080fc4a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:35
        if(!bh){
ffff80000080fc4e:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080fc53:	75 0a                	jne    ffff80000080fc5f <get_block+0x84>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:37
            //errno=-ENOBUFS
            return NULL;
ffff80000080fc55:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080fc5a:	e9 f0 00 00 00       	jmp    ffff80000080fd4f <get_block+0x174>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:39
        }
        bh->dev=dev;
ffff80000080fc5f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080fc63:	0f b7 55 dc          	movzx  edx,WORD PTR [rbp-0x24]
ffff80000080fc67:	66 89 50 10          	mov    WORD PTR [rax+0x10],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:40
        bh->blocknr=blocknr;
ffff80000080fc6b:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080fc6e:	48 63 d0             	movsxd rdx,eax
ffff80000080fc71:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080fc75:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:41
        l_blk_bh_heads[BLKDEV_MAJOR(dev)]=bh;
ffff80000080fc79:	0f b7 45 dc          	movzx  eax,WORD PTR [rbp-0x24]
ffff80000080fc7d:	c1 f8 04             	sar    eax,0x4
ffff80000080fc80:	83 e0 0f             	and    eax,0xf
ffff80000080fc83:	89 c2                	mov    edx,eax
ffff80000080fc85:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff80000080fc8c:	ff ff ff 
ffff80000080fc8f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080fc93:	48 63 d2             	movsxd rdx,edx
ffff80000080fc96:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff80000080fc9a:	48 89 0c d0          	mov    QWORD PTR [rax+rdx*8],rcx
ffff80000080fc9e:	e9 96 00 00 00       	jmp    ffff80000080fd39 <get_block+0x15e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:43 (discriminator 3)
    }else{
        for(;bh->next&&bh->blocknr!=blocknr;bh=bh->next);
ffff80000080fca3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080fca7:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080fcab:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:43 (discriminator 1)
ffff80000080fcaf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080fcb3:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080fcb7:	48 85 c0             	test   rax,rax
ffff80000080fcba:	74 12                	je     ffff80000080fcce <get_block+0xf3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:43 (discriminator 2)
ffff80000080fcbc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080fcc0:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff80000080fcc4:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080fcc7:	48 98                	cdqe   
ffff80000080fcc9:	48 39 c2             	cmp    rdx,rax
ffff80000080fccc:	75 d5                	jne    ffff80000080fca3 <get_block+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:44
        if(bh->blocknr!=blocknr)
ffff80000080fcce:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080fcd2:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff80000080fcd6:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080fcd9:	48 98                	cdqe   
ffff80000080fcdb:	48 39 c2             	cmp    rdx,rax
ffff80000080fcde:	74 59                	je     ffff80000080fd39 <get_block+0x15e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:48
        {
            //这块数据没有缓冲
            //这个时候肯定处于链表最后一个了
            bh->next=bget();
ffff80000080fce0:	49 89 df             	mov    r15,rbx
ffff80000080fce3:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080fce8:	48 ba 71 c5 ee ff ff 	movabs rdx,0xffffffffffeec571
ffff80000080fcef:	ff ff ff 
ffff80000080fcf2:	48 01 da             	add    rdx,rbx
ffff80000080fcf5:	ff d2                	call   rdx
ffff80000080fcf7:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080fcfb:	48 89 42 28          	mov    QWORD PTR [rdx+0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:49
            buffer_head *bhn=bh->next;
ffff80000080fcff:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080fd03:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080fd07:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:50
            bhn->prev=bh;
ffff80000080fd0b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080fd0f:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080fd13:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:51
            bh=bhn;
ffff80000080fd17:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080fd1b:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:52
            bh->dev=dev;
ffff80000080fd1f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080fd23:	0f b7 55 dc          	movzx  edx,WORD PTR [rbp-0x24]
ffff80000080fd27:	66 89 50 10          	mov    WORD PTR [rax+0x10],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:53
            bh->blocknr=blocknr;
ffff80000080fd2b:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080fd2e:	48 63 d0             	movsxd rdx,eax
ffff80000080fd31:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080fd35:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:57
        }
    }
    //TODO 等待缓冲解锁
    bh->count++;
ffff80000080fd39:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080fd3d:	0f b6 40 14          	movzx  eax,BYTE PTR [rax+0x14]
ffff80000080fd41:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080fd44:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080fd48:	88 50 14             	mov    BYTE PTR [rax+0x14],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:58
    return bh;
ffff80000080fd4b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:59
}
ffff80000080fd4f:	48 83 c4 20          	add    rsp,0x20
ffff80000080fd53:	5b                   	pop    rbx
ffff80000080fd54:	41 5f                	pop    r15
ffff80000080fd56:	5d                   	pop    rbp
ffff80000080fd57:	c3                   	ret    

ffff80000080fd58 <bread>:
bread():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:61
//从指定的块设备中读取一块数据，然后返回这块数据。
buffer_head* bread(unsigned short dev,int blkn){
ffff80000080fd58:	f3 0f 1e fa          	endbr64 
ffff80000080fd5c:	55                   	push   rbp
ffff80000080fd5d:	48 89 e5             	mov    rbp,rsp
ffff80000080fd60:	41 57                	push   r15
ffff80000080fd62:	53                   	push   rbx
ffff80000080fd63:	48 83 ec 20          	sub    rsp,0x20
ffff80000080fd67:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080fd67 <bread+0xf>
ffff80000080fd6e:	49 bb c9 37 11 00 00 	movabs r11,0x1137c9
ffff80000080fd75:	00 00 00 
ffff80000080fd78:	4c 01 db             	add    rbx,r11
ffff80000080fd7b:	89 f8                	mov    eax,edi
ffff80000080fd7d:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080fd80:	66 89 45 dc          	mov    WORD PTR [rbp-0x24],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:62
    if(!blk_devs[BLKDEV_MAJOR(dev)].do_request)
ffff80000080fd84:	0f b7 45 dc          	movzx  eax,WORD PTR [rbp-0x24]
ffff80000080fd88:	c1 f8 04             	sar    eax,0x4
ffff80000080fd8b:	83 e0 0f             	and    eax,0xf
ffff80000080fd8e:	89 c2                	mov    edx,eax
ffff80000080fd90:	48 b8 70 ff ff ff ff 	movabs rax,0xffffffffffffff70
ffff80000080fd97:	ff ff ff 
ffff80000080fd9a:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff80000080fd9e:	48 63 c2             	movsxd rax,edx
ffff80000080fda1:	48 c1 e0 04          	shl    rax,0x4
ffff80000080fda5:	48 01 c8             	add    rax,rcx
ffff80000080fda8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080fdab:	48 85 c0             	test   rax,rax
ffff80000080fdae:	75 07                	jne    ffff80000080fdb7 <bread+0x5f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:63
        return NULL;
ffff80000080fdb0:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080fdb5:	eb 7a                	jmp    ffff80000080fe31 <bread+0xd9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:64
    buffer_head *bh=get_block(dev,blkn);
ffff80000080fdb7:	0f b7 45 dc          	movzx  eax,WORD PTR [rbp-0x24]
ffff80000080fdbb:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
ffff80000080fdbe:	89 d6                	mov    esi,edx
ffff80000080fdc0:	89 c7                	mov    edi,eax
ffff80000080fdc2:	49 89 df             	mov    r15,rbx
ffff80000080fdc5:	48 b8 ab c6 ee ff ff 	movabs rax,0xffffffffffeec6ab
ffff80000080fdcc:	ff ff ff 
ffff80000080fdcf:	48 01 d8             	add    rax,rbx
ffff80000080fdd2:	ff d0                	call   rax
ffff80000080fdd4:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:65
    if(!bh)
ffff80000080fdd8:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080fddd:	75 07                	jne    ffff80000080fde6 <bread+0x8e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:66
        return NULL;
ffff80000080fddf:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080fde4:	eb 4b                	jmp    ffff80000080fe31 <bread+0xd9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:67
    if(bh->uptodate)
ffff80000080fde6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080fdea:	0f b6 40 12          	movzx  eax,BYTE PTR [rax+0x12]
ffff80000080fdee:	84 c0                	test   al,al
ffff80000080fdf0:	74 06                	je     ffff80000080fdf8 <bread+0xa0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:68
        return bh;//数据没变，可以直接返回
ffff80000080fdf2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080fdf6:	eb 39                	jmp    ffff80000080fe31 <bread+0xd9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:71
    //这里的疑点是，可以直接返回吗？
    //应该要等数据准备完毕之后再返回的
    make_request(dev,BLKDEV_REQ_READ,blkn*BLOCK_SIZE/SECTOR_SIZE,BLOCK_SIZE,bh->data);
ffff80000080fdf8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080fdfc:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080fdff:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080fe02:	c1 e0 03             	shl    eax,0x3
ffff80000080fe05:	48 63 d0             	movsxd rdx,eax
ffff80000080fe08:	0f b7 45 dc          	movzx  eax,WORD PTR [rbp-0x24]
ffff80000080fe0c:	49 89 c8             	mov    r8,rcx
ffff80000080fe0f:	b9 00 10 00 00       	mov    ecx,0x1000
ffff80000080fe14:	be 00 00 00 00       	mov    esi,0x0
ffff80000080fe19:	89 c7                	mov    edi,eax
ffff80000080fe1b:	49 89 df             	mov    r15,rbx
ffff80000080fe1e:	48 b8 e2 c2 ee ff ff 	movabs rax,0xffffffffffeec2e2
ffff80000080fe25:	ff ff ff 
ffff80000080fe28:	48 01 d8             	add    rax,rbx
ffff80000080fe2b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:73
    //TODO 等待读取完成
    return bh;
ffff80000080fe2d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:74
}
ffff80000080fe31:	48 83 c4 20          	add    rsp,0x20
ffff80000080fe35:	5b                   	pop    rbx
ffff80000080fe36:	41 5f                	pop    r15
ffff80000080fe38:	5d                   	pop    rbp
ffff80000080fe39:	c3                   	ret    

ffff80000080fe3a <bwrite>:
bwrite():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:79
/*
向缓冲区写入数据。注意缓冲区的大小固定BLOCK_SIZE。
这会使得dirty置位。
*/
int bwrite(buffer_head* bh,char* src,int pos,int count){
ffff80000080fe3a:	f3 0f 1e fa          	endbr64 
ffff80000080fe3e:	55                   	push   rbp
ffff80000080fe3f:	48 89 e5             	mov    rbp,rsp
ffff80000080fe42:	41 57                	push   r15
ffff80000080fe44:	48 83 ec 28          	sub    rsp,0x28
ffff80000080fe48:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080fe48 <bwrite+0xe>
ffff80000080fe4f:	49 bb e8 36 11 00 00 	movabs r11,0x1136e8
ffff80000080fe56:	00 00 00 
ffff80000080fe59:	4c 01 d8             	add    rax,r11
ffff80000080fe5c:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff80000080fe60:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080fe64:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff80000080fe67:	89 4d d8             	mov    DWORD PTR [rbp-0x28],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:80
    if(!bh)
ffff80000080fe6a:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080fe6f:	75 07                	jne    ffff80000080fe78 <bwrite+0x3e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:81
        return -ENOBUFS;
ffff80000080fe71:	b8 d6 ff ff ff       	mov    eax,0xffffffd6
ffff80000080fe76:	eb 5d                	jmp    ffff80000080fed5 <bwrite+0x9b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:82
    if (count+pos>BLOCK_SIZE)
ffff80000080fe78:	8b 4d d8             	mov    ecx,DWORD PTR [rbp-0x28]
ffff80000080fe7b:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080fe7e:	01 ca                	add    edx,ecx
ffff80000080fe80:	81 fa 00 10 00 00    	cmp    edx,0x1000
ffff80000080fe86:	7e 0b                	jle    ffff80000080fe93 <bwrite+0x59>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:83
        count=BLOCK_SIZE-pos;//truncate
ffff80000080fe88:	ba 00 10 00 00       	mov    edx,0x1000
ffff80000080fe8d:	2b 55 dc             	sub    edx,DWORD PTR [rbp-0x24]
ffff80000080fe90:	89 55 d8             	mov    DWORD PTR [rbp-0x28],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:84
    memcpy(bh->data+pos,src,count);
ffff80000080fe93:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
ffff80000080fe96:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff80000080fe9a:	48 8b 31             	mov    rsi,QWORD PTR [rcx]
ffff80000080fe9d:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
ffff80000080fea0:	48 63 c9             	movsxd rcx,ecx
ffff80000080fea3:	48 8d 3c 0e          	lea    rdi,[rsi+rcx*1]
ffff80000080fea7:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
ffff80000080feab:	48 89 ce             	mov    rsi,rcx
ffff80000080feae:	49 89 c7             	mov    r15,rax
ffff80000080feb1:	48 b9 02 1d ef ff ff 	movabs rcx,0xffffffffffef1d02
ffff80000080feb8:	ff ff ff 
ffff80000080febb:	48 01 c1             	add    rcx,rax
ffff80000080febe:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:85
    bh->dirt=1;
ffff80000080fec0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080fec4:	c6 40 13 01          	mov    BYTE PTR [rax+0x13],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:86
    bh->uptodate=0;
ffff80000080fec8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080fecc:	c6 40 12 00          	mov    BYTE PTR [rax+0x12],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:87
    return 1;
ffff80000080fed0:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:88
}
ffff80000080fed5:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080fed9:	c9                   	leave  
ffff80000080feda:	c3                   	ret    

ffff80000080fedb <bflush>:
bflush():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:92
/*
立即把缓冲区里面的更新应用到块设备上。
*/
int bflush(buffer_head* bh){
ffff80000080fedb:	f3 0f 1e fa          	endbr64 
ffff80000080fedf:	55                   	push   rbp
ffff80000080fee0:	48 89 e5             	mov    rbp,rsp
ffff80000080fee3:	41 57                	push   r15
ffff80000080fee5:	48 83 ec 18          	sub    rsp,0x18
ffff80000080fee9:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080fee9 <bflush+0xe>
ffff80000080fef0:	49 bb 47 36 11 00 00 	movabs r11,0x113647
ffff80000080fef7:	00 00 00 
ffff80000080fefa:	4c 01 d8             	add    rax,r11
ffff80000080fefd:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:93
    if(!blk_devs[bh->dev].do_request)
ffff80000080ff01:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080ff05:	0f b7 52 10          	movzx  edx,WORD PTR [rdx+0x10]
ffff80000080ff09:	0f b7 d2             	movzx  edx,dx
ffff80000080ff0c:	48 b9 70 ff ff ff ff 	movabs rcx,0xffffffffffffff70
ffff80000080ff13:	ff ff ff 
ffff80000080ff16:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080ff1a:	48 63 d2             	movsxd rdx,edx
ffff80000080ff1d:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080ff21:	48 01 ca             	add    rdx,rcx
ffff80000080ff24:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080ff27:	48 85 d2             	test   rdx,rdx
ffff80000080ff2a:	75 07                	jne    ffff80000080ff33 <bflush+0x58>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:94
        return -ENODEV;
ffff80000080ff2c:	b8 d4 ff ff ff       	mov    eax,0xffffffd4
ffff80000080ff31:	eb 5a                	jmp    ffff80000080ff8d <bflush+0xb2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:95
    if(!bh->dirt)
ffff80000080ff33:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080ff37:	0f b6 52 13          	movzx  edx,BYTE PTR [rdx+0x13]
ffff80000080ff3b:	84 d2                	test   dl,dl
ffff80000080ff3d:	75 07                	jne    ffff80000080ff46 <bflush+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:96
        return 1;
ffff80000080ff3f:	b8 01 00 00 00       	mov    eax,0x1
ffff80000080ff44:	eb 47                	jmp    ffff80000080ff8d <bflush+0xb2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:97
    make_request(bh->dev,BLKDEV_REQ_WRITE,bh->blocknr*BLOCK_SIZE/SECTOR_SIZE,BLOCK_SIZE/SECTOR_SIZE,bh->data);
ffff80000080ff46:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080ff4a:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff80000080ff4d:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080ff51:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff80000080ff55:	48 c1 e2 0c          	shl    rdx,0xc
ffff80000080ff59:	48 c1 ea 09          	shr    rdx,0x9
ffff80000080ff5d:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff80000080ff61:	0f b7 49 10          	movzx  ecx,WORD PTR [rcx+0x10]
ffff80000080ff65:	0f b7 f9             	movzx  edi,cx
ffff80000080ff68:	49 89 f0             	mov    r8,rsi
ffff80000080ff6b:	b9 08 00 00 00       	mov    ecx,0x8
ffff80000080ff70:	be 01 00 00 00       	mov    esi,0x1
ffff80000080ff75:	49 89 c7             	mov    r15,rax
ffff80000080ff78:	49 b9 e2 c2 ee ff ff 	movabs r9,0xffffffffffeec2e2
ffff80000080ff7f:	ff ff ff 
ffff80000080ff82:	49 01 c1             	add    r9,rax
ffff80000080ff85:	41 ff d1             	call   r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:99
    //这个不用等
    return 1;
ffff80000080ff88:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:100
}
ffff80000080ff8d:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080ff91:	c9                   	leave  
ffff80000080ff92:	c3                   	ret    

ffff80000080ff93 <bdiscard>:
bdiscard():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:102
//丢弃更改。
int bdiscard(buffer_head *bh){
ffff80000080ff93:	f3 0f 1e fa          	endbr64 
ffff80000080ff97:	55                   	push   rbp
ffff80000080ff98:	48 89 e5             	mov    rbp,rsp
ffff80000080ff9b:	41 57                	push   r15
ffff80000080ff9d:	48 83 ec 18          	sub    rsp,0x18
ffff80000080ffa1:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080ffa1 <bdiscard+0xe>
ffff80000080ffa8:	49 bb 8f 35 11 00 00 	movabs r11,0x11358f
ffff80000080ffaf:	00 00 00 
ffff80000080ffb2:	4c 01 d8             	add    rax,r11
ffff80000080ffb5:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:103
    if(bh->dev==-1||!blk_devs[bh->dev].do_request)
ffff80000080ffb9:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080ffbd:	0f b7 52 10          	movzx  edx,WORD PTR [rdx+0x10]
ffff80000080ffc1:	0f b7 d2             	movzx  edx,dx
ffff80000080ffc4:	48 b9 70 ff ff ff ff 	movabs rcx,0xffffffffffffff70
ffff80000080ffcb:	ff ff ff 
ffff80000080ffce:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080ffd2:	48 63 d2             	movsxd rdx,edx
ffff80000080ffd5:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080ffd9:	48 01 ca             	add    rdx,rcx
ffff80000080ffdc:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080ffdf:	48 85 d2             	test   rdx,rdx
ffff80000080ffe2:	75 07                	jne    ffff80000080ffeb <bdiscard+0x58>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:104
        return -ENODEV;
ffff80000080ffe4:	b8 d4 ff ff ff       	mov    eax,0xffffffd4
ffff80000080ffe9:	eb 5a                	jmp    ffff800000810045 <bdiscard+0xb2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:106
    
    if(bh->uptodate)
ffff80000080ffeb:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080ffef:	0f b6 52 12          	movzx  edx,BYTE PTR [rdx+0x12]
ffff80000080fff3:	84 d2                	test   dl,dl
ffff80000080fff5:	74 07                	je     ffff80000080fffe <bdiscard+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:107
        return 1;//数据没变，可以直接返回
ffff80000080fff7:	b8 01 00 00 00       	mov    eax,0x1
ffff80000080fffc:	eb 47                	jmp    ffff800000810045 <bdiscard+0xb2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:110
    //这里的疑点是，可以直接返回吗？
    //应该要等数据准备完毕之后再返回的
    make_request(bh->dev,BLKDEV_REQ_READ,bh->blocknr*BLOCK_SIZE/SECTOR_SIZE,BLOCK_SIZE/SECTOR_SIZE,bh->data);
ffff80000080fffe:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000810002:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff800000810005:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000810009:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff80000081000d:	48 c1 e2 0c          	shl    rdx,0xc
ffff800000810011:	48 c1 ea 09          	shr    rdx,0x9
ffff800000810015:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff800000810019:	0f b7 49 10          	movzx  ecx,WORD PTR [rcx+0x10]
ffff80000081001d:	0f b7 f9             	movzx  edi,cx
ffff800000810020:	49 89 f0             	mov    r8,rsi
ffff800000810023:	b9 08 00 00 00       	mov    ecx,0x8
ffff800000810028:	be 00 00 00 00       	mov    esi,0x0
ffff80000081002d:	49 89 c7             	mov    r15,rax
ffff800000810030:	49 b9 e2 c2 ee ff ff 	movabs r9,0xffffffffffeec2e2
ffff800000810037:	ff ff ff 
ffff80000081003a:	49 01 c1             	add    r9,rax
ffff80000081003d:	41 ff d1             	call   r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:112
    //TODO 等待读取完成
    return 1;
ffff800000810040:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:113
}
ffff800000810045:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000810049:	c9                   	leave  
ffff80000081004a:	c3                   	ret    

ffff80000081004b <bupdate>:
bupdate():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:115

int bupdate(buffer_head *bh){
ffff80000081004b:	f3 0f 1e fa          	endbr64 
ffff80000081004f:	55                   	push   rbp
ffff800000810050:	48 89 e5             	mov    rbp,rsp
ffff800000810053:	41 57                	push   r15
ffff800000810055:	48 83 ec 18          	sub    rsp,0x18
ffff800000810059:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000810059 <bupdate+0xe>
ffff800000810060:	49 bb d7 34 11 00 00 	movabs r11,0x1134d7
ffff800000810067:	00 00 00 
ffff80000081006a:	4c 01 d8             	add    rax,r11
ffff80000081006d:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:116
    return bdiscard(bh);
ffff800000810071:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000810075:	48 89 d7             	mov    rdi,rdx
ffff800000810078:	49 89 c7             	mov    r15,rax
ffff80000081007b:	48 ba 63 ca ee ff ff 	movabs rdx,0xffffffffffeeca63
ffff800000810082:	ff ff ff 
ffff800000810085:	48 01 c2             	add    rdx,rax
ffff800000810088:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:117
}
ffff80000081008a:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000081008e:	c9                   	leave  
ffff80000081008f:	c3                   	ret    

ffff800000810090 <blkdev_read>:
blkdev_read():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:121
/*
bread的更高级封装，可以不以块为单位读取到buf。
*/
int blkdev_read(unsigned short dev,off_t offset, size_t count, char *buf){
ffff800000810090:	f3 0f 1e fa          	endbr64 
ffff800000810094:	55                   	push   rbp
ffff800000810095:	48 89 e5             	mov    rbp,rsp
ffff800000810098:	41 57                	push   r15
ffff80000081009a:	53                   	push   rbx
ffff80000081009b:	48 83 ec 60          	sub    rsp,0x60
ffff80000081009f:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000081009f <blkdev_read+0xf>
ffff8000008100a6:	49 bb 91 34 11 00 00 	movabs r11,0x113491
ffff8000008100ad:	00 00 00 
ffff8000008100b0:	4c 01 db             	add    rbx,r11
ffff8000008100b3:	89 f8                	mov    eax,edi
ffff8000008100b5:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
ffff8000008100b9:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
ffff8000008100bd:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
ffff8000008100c1:	66 89 45 ac          	mov    WORD PTR [rbp-0x54],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:122
    int n=TO_BLKN(count);
ffff8000008100c5:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008100c9:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff8000008100cf:	48 c1 e8 0c          	shr    rax,0xc
ffff8000008100d3:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:123
    off_t blkn=BLOCK_FLOOR(offset);
ffff8000008100d6:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff8000008100da:	48 c1 e8 0c          	shr    rax,0xc
ffff8000008100de:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:124
    off_t first_off=offset%BLOCK_SIZE;
ffff8000008100e2:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff8000008100e6:	25 ff 0f 00 00       	and    eax,0xfff
ffff8000008100eb:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:125
    char* p=buf;
ffff8000008100ef:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008100f3:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:126
    size_t mod_count=count%BLOCK_SIZE;
ffff8000008100f7:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008100fb:	25 ff 0f 00 00       	and    eax,0xfff
ffff800000810100:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:127
    int len=BLOCK_SIZE-first_off;
ffff800000810104:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000810108:	89 c2                	mov    edx,eax
ffff80000081010a:	b8 00 10 00 00       	mov    eax,0x1000
ffff80000081010f:	29 d0                	sub    eax,edx
ffff800000810111:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:128
    for(int i=0;i<n;i++){
ffff800000810114:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
ffff80000081011b:	e9 b5 00 00 00       	jmp    ffff8000008101d5 <blkdev_read+0x145>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:129
        buffer_head *bh=bread(dev,blkn);
ffff800000810120:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000810124:	89 c2                	mov    edx,eax
ffff800000810126:	0f b7 45 ac          	movzx  eax,WORD PTR [rbp-0x54]
ffff80000081012a:	89 d6                	mov    esi,edx
ffff80000081012c:	89 c7                	mov    edi,eax
ffff80000081012e:	49 89 df             	mov    r15,rbx
ffff800000810131:	48 b8 28 c8 ee ff ff 	movabs rax,0xffffffffffeec828
ffff800000810138:	ff ff ff 
ffff80000081013b:	48 01 d8             	add    rax,rbx
ffff80000081013e:	ff d0                	call   rax
ffff800000810140:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:130
        if(!bh)
ffff800000810144:	48 83 7d b8 00       	cmp    QWORD PTR [rbp-0x48],0x0
ffff800000810149:	75 0a                	jne    ffff800000810155 <blkdev_read+0xc5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:131
            return -ENOBUFS;//buffer不够了
ffff80000081014b:	b8 d6 ff ff ff       	mov    eax,0xffffffd6
ffff800000810150:	e9 91 00 00 00       	jmp    ffff8000008101e6 <blkdev_read+0x156>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:132
        if(i==n-1)
ffff800000810155:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000810158:	83 e8 01             	sub    eax,0x1
ffff80000081015b:	39 45 d0             	cmp    DWORD PTR [rbp-0x30],eax
ffff80000081015e:	75 09                	jne    ffff800000810169 <blkdev_read+0xd9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:133
            len=mod_count;
ffff800000810160:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000810164:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
ffff800000810167:	eb 0d                	jmp    ffff800000810176 <blkdev_read+0xe6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:134
        else if(i==2)
ffff800000810169:	83 7d d0 02          	cmp    DWORD PTR [rbp-0x30],0x2
ffff80000081016d:	75 07                	jne    ffff800000810176 <blkdev_read+0xe6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:135
            len=BLOCK_SIZE;
ffff80000081016f:	c7 45 d4 00 10 00 00 	mov    DWORD PTR [rbp-0x2c],0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:136 (discriminator 2)
        memcpy(p,bh->data+first_off,len);
ffff800000810176:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff800000810179:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081017d:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000810180:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000810184:	48 01 c1             	add    rcx,rax
ffff800000810187:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081018b:	48 89 ce             	mov    rsi,rcx
ffff80000081018e:	48 89 c7             	mov    rdi,rax
ffff800000810191:	49 89 df             	mov    r15,rbx
ffff800000810194:	48 b8 02 1d ef ff ff 	movabs rax,0xffffffffffef1d02
ffff80000081019b:	ff ff ff 
ffff80000081019e:	48 01 d8             	add    rax,rbx
ffff8000008101a1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:137 (discriminator 2)
        brelse(bh);
ffff8000008101a3:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008101a7:	48 89 c7             	mov    rdi,rax
ffff8000008101aa:	49 89 df             	mov    r15,rbx
ffff8000008101ad:	48 b8 1e ce ee ff ff 	movabs rax,0xffffffffffeece1e
ffff8000008101b4:	ff ff ff 
ffff8000008101b7:	48 01 d8             	add    rax,rbx
ffff8000008101ba:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:138 (discriminator 2)
        blkn++;
ffff8000008101bc:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:139 (discriminator 2)
        p+=BLOCK_SIZE;
ffff8000008101c1:	48 81 45 d8 00 10 00 	add    QWORD PTR [rbp-0x28],0x1000
ffff8000008101c8:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:140 (discriminator 2)
        first_off=0;
ffff8000008101c9:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff8000008101d0:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:128 (discriminator 2)
    for(int i=0;i<n;i++){
ffff8000008101d1:	83 45 d0 01          	add    DWORD PTR [rbp-0x30],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:128 (discriminator 1)
ffff8000008101d5:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff8000008101d8:	3b 45 cc             	cmp    eax,DWORD PTR [rbp-0x34]
ffff8000008101db:	0f 8c 3f ff ff ff    	jl     ffff800000810120 <blkdev_read+0x90>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:142
    }
    return 1;
ffff8000008101e1:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:143
}
ffff8000008101e6:	48 83 c4 60          	add    rsp,0x60
ffff8000008101ea:	5b                   	pop    rbx
ffff8000008101eb:	41 5f                	pop    r15
ffff8000008101ed:	5d                   	pop    rbp
ffff8000008101ee:	c3                   	ret    

ffff8000008101ef <blkdev_write>:
blkdev_write():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:145

int blkdev_write(unsigned short dev,off_t offset, size_t count, char *buf){
ffff8000008101ef:	f3 0f 1e fa          	endbr64 
ffff8000008101f3:	55                   	push   rbp
ffff8000008101f4:	48 89 e5             	mov    rbp,rsp
ffff8000008101f7:	41 57                	push   r15
ffff8000008101f9:	53                   	push   rbx
ffff8000008101fa:	48 83 ec 60          	sub    rsp,0x60
ffff8000008101fe:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008101fe <blkdev_write+0xf>
ffff800000810205:	49 bb 32 33 11 00 00 	movabs r11,0x113332
ffff80000081020c:	00 00 00 
ffff80000081020f:	4c 01 db             	add    rbx,r11
ffff800000810212:	89 f8                	mov    eax,edi
ffff800000810214:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
ffff800000810218:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
ffff80000081021c:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
ffff800000810220:	66 89 45 ac          	mov    WORD PTR [rbp-0x54],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:146
    int n=TO_BLKN(count);
ffff800000810224:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000810228:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff80000081022e:	48 c1 e8 0c          	shr    rax,0xc
ffff800000810232:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:147
    off_t blkn=BLOCK_FLOOR(offset);
ffff800000810235:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000810239:	48 c1 e8 0c          	shr    rax,0xc
ffff80000081023d:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:148
    off_t first_off=offset%BLOCK_SIZE;
ffff800000810241:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000810245:	25 ff 0f 00 00       	and    eax,0xfff
ffff80000081024a:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:149
    char* p=buf;
ffff80000081024e:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810252:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:150
    size_t mod_count=count%BLOCK_SIZE;
ffff800000810256:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000081025a:	25 ff 0f 00 00       	and    eax,0xfff
ffff80000081025f:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:151
    int len=BLOCK_SIZE-first_off;
ffff800000810263:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000810267:	89 c2                	mov    edx,eax
ffff800000810269:	b8 00 10 00 00       	mov    eax,0x1000
ffff80000081026e:	29 d0                	sub    eax,edx
ffff800000810270:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:152
    for(int i=0;i<n;i++){
ffff800000810273:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
ffff80000081027a:	e9 b5 00 00 00       	jmp    ffff800000810334 <blkdev_write+0x145>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:153
        buffer_head *bh=get_block(dev,blkn);
ffff80000081027f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000810283:	89 c2                	mov    edx,eax
ffff800000810285:	0f b7 45 ac          	movzx  eax,WORD PTR [rbp-0x54]
ffff800000810289:	89 d6                	mov    esi,edx
ffff80000081028b:	89 c7                	mov    edi,eax
ffff80000081028d:	49 89 df             	mov    r15,rbx
ffff800000810290:	48 b8 ab c6 ee ff ff 	movabs rax,0xffffffffffeec6ab
ffff800000810297:	ff ff ff 
ffff80000081029a:	48 01 d8             	add    rax,rbx
ffff80000081029d:	ff d0                	call   rax
ffff80000081029f:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:154
        if(!bh)
ffff8000008102a3:	48 83 7d b8 00       	cmp    QWORD PTR [rbp-0x48],0x0
ffff8000008102a8:	75 0a                	jne    ffff8000008102b4 <blkdev_write+0xc5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:155
            return -ENOBUFS;//buffer不够了
ffff8000008102aa:	b8 d6 ff ff ff       	mov    eax,0xffffffd6
ffff8000008102af:	e9 91 00 00 00       	jmp    ffff800000810345 <blkdev_write+0x156>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:156
        if(i==n-1)
ffff8000008102b4:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff8000008102b7:	83 e8 01             	sub    eax,0x1
ffff8000008102ba:	39 45 d0             	cmp    DWORD PTR [rbp-0x30],eax
ffff8000008102bd:	75 09                	jne    ffff8000008102c8 <blkdev_write+0xd9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:157
            len=mod_count;
ffff8000008102bf:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008102c3:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
ffff8000008102c6:	eb 0d                	jmp    ffff8000008102d5 <blkdev_write+0xe6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:158
        else if(i==2)
ffff8000008102c8:	83 7d d0 02          	cmp    DWORD PTR [rbp-0x30],0x2
ffff8000008102cc:	75 07                	jne    ffff8000008102d5 <blkdev_write+0xe6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:159
            len=BLOCK_SIZE;
ffff8000008102ce:	c7 45 d4 00 10 00 00 	mov    DWORD PTR [rbp-0x2c],0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:160 (discriminator 2)
        memcpy(bh->data+first_off,p,len);
ffff8000008102d5:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff8000008102d8:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008102dc:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008102df:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008102e3:	48 01 c1             	add    rcx,rax
ffff8000008102e6:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008102ea:	48 89 c6             	mov    rsi,rax
ffff8000008102ed:	48 89 cf             	mov    rdi,rcx
ffff8000008102f0:	49 89 df             	mov    r15,rbx
ffff8000008102f3:	48 b8 02 1d ef ff ff 	movabs rax,0xffffffffffef1d02
ffff8000008102fa:	ff ff ff 
ffff8000008102fd:	48 01 d8             	add    rax,rbx
ffff800000810300:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:161 (discriminator 2)
        brelse(bh);
ffff800000810302:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810306:	48 89 c7             	mov    rdi,rax
ffff800000810309:	49 89 df             	mov    r15,rbx
ffff80000081030c:	48 b8 1e ce ee ff ff 	movabs rax,0xffffffffffeece1e
ffff800000810313:	ff ff ff 
ffff800000810316:	48 01 d8             	add    rax,rbx
ffff800000810319:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:162 (discriminator 2)
        blkn++;
ffff80000081031b:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:163 (discriminator 2)
        p+=BLOCK_SIZE;
ffff800000810320:	48 81 45 d8 00 10 00 	add    QWORD PTR [rbp-0x28],0x1000
ffff800000810327:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:164 (discriminator 2)
        first_off=0;
ffff800000810328:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff80000081032f:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:152 (discriminator 2)
    for(int i=0;i<n;i++){
ffff800000810330:	83 45 d0 01          	add    DWORD PTR [rbp-0x30],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:152 (discriminator 1)
ffff800000810334:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000810337:	3b 45 cc             	cmp    eax,DWORD PTR [rbp-0x34]
ffff80000081033a:	0f 8c 3f ff ff ff    	jl     ffff80000081027f <blkdev_write+0x90>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:166
    }
    return 1;
ffff800000810340:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:168

}
ffff800000810345:	48 83 c4 60          	add    rsp,0x60
ffff800000810349:	5b                   	pop    rbx
ffff80000081034a:	41 5f                	pop    r15
ffff80000081034c:	5d                   	pop    rbp
ffff80000081034d:	c3                   	ret    

ffff80000081034e <brelse>:
brelse():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:169
int brelse(buffer_head *bh){
ffff80000081034e:	f3 0f 1e fa          	endbr64 
ffff800000810352:	55                   	push   rbp
ffff800000810353:	48 89 e5             	mov    rbp,rsp
ffff800000810356:	41 57                	push   r15
ffff800000810358:	53                   	push   rbx
ffff800000810359:	48 83 ec 20          	sub    rsp,0x20
ffff80000081035d:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000081035d <brelse+0xf>
ffff800000810364:	49 bb d3 31 11 00 00 	movabs r11,0x1131d3
ffff80000081036b:	00 00 00 
ffff80000081036e:	4c 01 db             	add    rbx,r11
ffff800000810371:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:170
    if(bh->dev==(unsigned short)-1||!blk_devs[BLKDEV_MAJOR(bh->dev)].do_request)
ffff800000810375:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810379:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff80000081037d:	66 83 f8 ff          	cmp    ax,0xffff
ffff800000810381:	74 33                	je     ffff8000008103b6 <brelse+0x68>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:170 (discriminator 1)
ffff800000810383:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810387:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff80000081038b:	0f b7 c0             	movzx  eax,ax
ffff80000081038e:	c1 f8 04             	sar    eax,0x4
ffff800000810391:	83 e0 0f             	and    eax,0xf
ffff800000810394:	89 c2                	mov    edx,eax
ffff800000810396:	48 b8 70 ff ff ff ff 	movabs rax,0xffffffffffffff70
ffff80000081039d:	ff ff ff 
ffff8000008103a0:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff8000008103a4:	48 63 c2             	movsxd rax,edx
ffff8000008103a7:	48 c1 e0 04          	shl    rax,0x4
ffff8000008103ab:	48 01 c8             	add    rax,rcx
ffff8000008103ae:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008103b1:	48 85 c0             	test   rax,rax
ffff8000008103b4:	75 0a                	jne    ffff8000008103c0 <brelse+0x72>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:171
        return -ENODEV;
ffff8000008103b6:	b8 d4 ff ff ff       	mov    eax,0xffffffd4
ffff8000008103bb:	e9 07 01 00 00       	jmp    ffff8000008104c7 <brelse+0x179>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:172
    if(bh->dirt)
ffff8000008103c0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008103c4:	0f b6 40 13          	movzx  eax,BYTE PTR [rax+0x13]
ffff8000008103c8:	84 c0                	test   al,al
ffff8000008103ca:	74 19                	je     ffff8000008103e5 <brelse+0x97>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:173
        bflush(bh);
ffff8000008103cc:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008103d0:	48 89 c7             	mov    rdi,rax
ffff8000008103d3:	49 89 df             	mov    r15,rbx
ffff8000008103d6:	48 b8 ab c9 ee ff ff 	movabs rax,0xffffffffffeec9ab
ffff8000008103dd:	ff ff ff 
ffff8000008103e0:	48 01 d8             	add    rax,rbx
ffff8000008103e3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:174
    bh->count--;
ffff8000008103e5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008103e9:	0f b6 40 14          	movzx  eax,BYTE PTR [rax+0x14]
ffff8000008103ed:	8d 50 ff             	lea    edx,[rax-0x1]
ffff8000008103f0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008103f4:	88 50 14             	mov    BYTE PTR [rax+0x14],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:175
    if(bh->count==0)
ffff8000008103f7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008103fb:	0f b6 40 14          	movzx  eax,BYTE PTR [rax+0x14]
ffff8000008103ff:	84 c0                	test   al,al
ffff800000810401:	0f 85 bb 00 00 00    	jne    ffff8000008104c2 <brelse+0x174>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:177
    {
        if(bh->prev)
ffff800000810407:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081040b:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000081040f:	48 85 c0             	test   rax,rax
ffff800000810412:	74 14                	je     ffff800000810428 <brelse+0xda>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:178
            bh->prev->next=bh->next;
ffff800000810414:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810418:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000081041c:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000810420:	48 8b 52 28          	mov    rdx,QWORD PTR [rdx+0x28]
ffff800000810424:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:179
        if(bh->next)
ffff800000810428:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081042c:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff800000810430:	48 85 c0             	test   rax,rax
ffff800000810433:	74 14                	je     ffff800000810449 <brelse+0xfb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:180
            bh->next->prev=bh->prev;
ffff800000810435:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810439:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000081043d:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000810441:	48 8b 52 20          	mov    rdx,QWORD PTR [rdx+0x20]
ffff800000810445:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:181
        for(int i=0;i<MAX_BLKDEVS;i++){
ffff800000810449:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000810450:	eb 44                	jmp    ffff800000810496 <brelse+0x148>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:182
            if(l_blk_bh_heads[i]==bh)
ffff800000810452:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff800000810459:	ff ff ff 
ffff80000081045c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000810460:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000810463:	48 63 d2             	movsxd rdx,edx
ffff800000810466:	48 8b 04 d0          	mov    rax,QWORD PTR [rax+rdx*8]
ffff80000081046a:	48 39 45 d8          	cmp    QWORD PTR [rbp-0x28],rax
ffff80000081046e:	75 22                	jne    ffff800000810492 <brelse+0x144>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:184
            {
                l_blk_bh_heads[i]=bh->next;
ffff800000810470:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810474:	48 8b 48 28          	mov    rcx,QWORD PTR [rax+0x28]
ffff800000810478:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff80000081047f:	ff ff ff 
ffff800000810482:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000810486:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000810489:	48 63 d2             	movsxd rdx,edx
ffff80000081048c:	48 89 0c d0          	mov    QWORD PTR [rax+rdx*8],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:185
                break;
ffff800000810490:	eb 0a                	jmp    ffff80000081049c <brelse+0x14e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:181 (discriminator 2)
        for(int i=0;i<MAX_BLKDEVS;i++){
ffff800000810492:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:181 (discriminator 1)
ffff800000810496:	83 7d ec 0b          	cmp    DWORD PTR [rbp-0x14],0xb
ffff80000081049a:	7e b6                	jle    ffff800000810452 <brelse+0x104>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:188
            }
        }
        bh->dev=-1;
ffff80000081049c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008104a0:	66 c7 40 10 ff ff    	mov    WORD PTR [rax+0x10],0xffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:189
        kmfree(bh->data);
ffff8000008104a6:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008104aa:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008104ad:	48 89 c7             	mov    rdi,rax
ffff8000008104b0:	49 89 df             	mov    r15,rbx
ffff8000008104b3:	48 b8 37 00 ee ff ff 	movabs rax,0xffffffffffee0037
ffff8000008104ba:	ff ff ff 
ffff8000008104bd:	48 01 d8             	add    rax,rbx
ffff8000008104c0:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:191
    }
    return 1;
ffff8000008104c2:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:192
ffff8000008104c7:	48 83 c4 20          	add    rsp,0x20
ffff8000008104cb:	5b                   	pop    rbx
ffff8000008104cc:	41 5f                	pop    r15
ffff8000008104ce:	5d                   	pop    rbp
ffff8000008104cf:	c3                   	ret    

ffff8000008104d0 <shift>:
shift():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:123
/* 0x5D - Apps      */ {  0,        0,       0x5D,      0x5D }
        };
char k_shift=0,k_ctrl=0,k_capslock=0;

void shift()
{
ffff8000008104d0:	f3 0f 1e fa          	endbr64 
ffff8000008104d4:	55                   	push   rbp
ffff8000008104d5:	48 89 e5             	mov    rbp,rsp
ffff8000008104d8:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008104d8 <shift+0x8>
ffff8000008104df:	49 bb 58 30 11 00 00 	movabs r11,0x113058
ffff8000008104e6:	00 00 00 
ffff8000008104e9:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:124
    k_shift=!k_shift;
ffff8000008104ec:	48 ba 40 ff ff ff ff 	movabs rdx,0xffffffffffffff40
ffff8000008104f3:	ff ff ff 
ffff8000008104f6:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008104fa:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff8000008104fd:	84 d2                	test   dl,dl
ffff8000008104ff:	0f 94 c2             	sete   dl
ffff800000810502:	89 d1                	mov    ecx,edx
ffff800000810504:	48 ba 40 ff ff ff ff 	movabs rdx,0xffffffffffffff40
ffff80000081050b:	ff ff ff 
ffff80000081050e:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000810512:	88 08                	mov    BYTE PTR [rax],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:125
}
ffff800000810514:	90                   	nop
ffff800000810515:	5d                   	pop    rbp
ffff800000810516:	c3                   	ret    

ffff800000810517 <ctrl>:
ctrl():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:127
void ctrl()
{
ffff800000810517:	f3 0f 1e fa          	endbr64 
ffff80000081051b:	55                   	push   rbp
ffff80000081051c:	48 89 e5             	mov    rbp,rsp
ffff80000081051f:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000081051f <ctrl+0x8>
ffff800000810526:	49 bb 11 30 11 00 00 	movabs r11,0x113011
ffff80000081052d:	00 00 00 
ffff800000810530:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:128
    k_ctrl=!k_ctrl;
ffff800000810533:	48 ba c0 fc ff ff ff 	movabs rdx,0xfffffffffffffcc0
ffff80000081053a:	ff ff ff 
ffff80000081053d:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000810541:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff800000810544:	84 d2                	test   dl,dl
ffff800000810546:	0f 94 c2             	sete   dl
ffff800000810549:	89 d1                	mov    ecx,edx
ffff80000081054b:	48 ba c0 fc ff ff ff 	movabs rdx,0xfffffffffffffcc0
ffff800000810552:	ff ff ff 
ffff800000810555:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000810559:	88 08                	mov    BYTE PTR [rax],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:129
}
ffff80000081055b:	90                   	nop
ffff80000081055c:	5d                   	pop    rbp
ffff80000081055d:	c3                   	ret    

ffff80000081055e <capslock>:
capslock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:131
void capslock()
{
ffff80000081055e:	f3 0f 1e fa          	endbr64 
ffff800000810562:	55                   	push   rbp
ffff800000810563:	48 89 e5             	mov    rbp,rsp
ffff800000810566:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000810566 <capslock+0x8>
ffff80000081056d:	49 bb ca 2f 11 00 00 	movabs r11,0x112fca
ffff800000810574:	00 00 00 
ffff800000810577:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:132
    k_capslock=k_capslock==0?1:0;
ffff80000081057a:	48 ba 30 fe ff ff ff 	movabs rdx,0xfffffffffffffe30
ffff800000810581:	ff ff ff 
ffff800000810584:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000810588:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000081058b:	84 d2                	test   dl,dl
ffff80000081058d:	0f 94 c2             	sete   dl
ffff800000810590:	89 d1                	mov    ecx,edx
ffff800000810592:	48 ba 30 fe ff ff ff 	movabs rdx,0xfffffffffffffe30
ffff800000810599:	ff ff ff 
ffff80000081059c:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff8000008105a0:	88 08                	mov    BYTE PTR [rax],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:133
}
ffff8000008105a2:	90                   	nop
ffff8000008105a3:	5d                   	pop    rbp
ffff8000008105a4:	c3                   	ret    

ffff8000008105a5 <to_ascii>:
to_ascii():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:135
char to_ascii(char scan_code)
{
ffff8000008105a5:	f3 0f 1e fa          	endbr64 
ffff8000008105a9:	55                   	push   rbp
ffff8000008105aa:	48 89 e5             	mov    rbp,rsp
ffff8000008105ad:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008105ad <to_ascii+0x8>
ffff8000008105b4:	49 bb 83 2f 11 00 00 	movabs r11,0x112f83
ffff8000008105bb:	00 00 00 
ffff8000008105be:	4c 01 d8             	add    rax,r11
ffff8000008105c1:	89 fa                	mov    edx,edi
ffff8000008105c3:	88 55 ec             	mov    BYTE PTR [rbp-0x14],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:136
    for(int i=0;i<0x5e;i++)//sizeof(key_map)/sizeof(key_code)
ffff8000008105c6:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff8000008105cd:	e9 25 01 00 00       	jmp    ffff8000008106f7 <to_ascii+0x152>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:137
        if(key_map[i].scan_code==scan_code)
ffff8000008105d2:	48 be 90 d5 ff ff ff 	movabs rsi,0xffffffffffffd590
ffff8000008105d9:	ff ff ff 
ffff8000008105dc:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff8000008105df:	48 63 ca             	movsxd rcx,edx
ffff8000008105e2:	48 89 ca             	mov    rdx,rcx
ffff8000008105e5:	48 c1 e2 02          	shl    rdx,0x2
ffff8000008105e9:	48 01 ca             	add    rdx,rcx
ffff8000008105ec:	48 01 c2             	add    rdx,rax
ffff8000008105ef:	48 01 f2             	add    rdx,rsi
ffff8000008105f2:	48 83 c2 02          	add    rdx,0x2
ffff8000008105f6:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff8000008105f9:	38 55 ec             	cmp    BYTE PTR [rbp-0x14],dl
ffff8000008105fc:	0f 85 f1 00 00 00    	jne    ffff8000008106f3 <to_ascii+0x14e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:139
        {
            if(k_capslock&&key_map[i].ascii>='a'&&key_map[i].ascii<='z')return key_map[i].ascii_shift;
ffff800000810602:	48 ba 30 fe ff ff ff 	movabs rdx,0xfffffffffffffe30
ffff800000810609:	ff ff ff 
ffff80000081060c:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000810610:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff800000810613:	84 d2                	test   dl,dl
ffff800000810615:	74 79                	je     ffff800000810690 <to_ascii+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:139 (discriminator 1)
ffff800000810617:	48 be 90 d5 ff ff ff 	movabs rsi,0xffffffffffffd590
ffff80000081061e:	ff ff ff 
ffff800000810621:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000810624:	48 63 ca             	movsxd rcx,edx
ffff800000810627:	48 01 c6             	add    rsi,rax
ffff80000081062a:	48 89 ca             	mov    rdx,rcx
ffff80000081062d:	48 c1 e2 02          	shl    rdx,0x2
ffff800000810631:	48 01 ca             	add    rdx,rcx
ffff800000810634:	48 01 f2             	add    rdx,rsi
ffff800000810637:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000081063a:	80 fa 60             	cmp    dl,0x60
ffff80000081063d:	7e 51                	jle    ffff800000810690 <to_ascii+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:139 (discriminator 2)
ffff80000081063f:	48 be 90 d5 ff ff ff 	movabs rsi,0xffffffffffffd590
ffff800000810646:	ff ff ff 
ffff800000810649:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000081064c:	48 63 ca             	movsxd rcx,edx
ffff80000081064f:	48 01 c6             	add    rsi,rax
ffff800000810652:	48 89 ca             	mov    rdx,rcx
ffff800000810655:	48 c1 e2 02          	shl    rdx,0x2
ffff800000810659:	48 01 ca             	add    rdx,rcx
ffff80000081065c:	48 01 f2             	add    rdx,rsi
ffff80000081065f:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff800000810662:	80 fa 7a             	cmp    dl,0x7a
ffff800000810665:	7f 29                	jg     ffff800000810690 <to_ascii+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:139 (discriminator 3)
ffff800000810667:	48 be 90 d5 ff ff ff 	movabs rsi,0xffffffffffffd590
ffff80000081066e:	ff ff ff 
ffff800000810671:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000810674:	48 63 ca             	movsxd rcx,edx
ffff800000810677:	48 89 ca             	mov    rdx,rcx
ffff80000081067a:	48 c1 e2 02          	shl    rdx,0x2
ffff80000081067e:	48 01 ca             	add    rdx,rcx
ffff800000810681:	48 01 d0             	add    rax,rdx
ffff800000810684:	48 01 f0             	add    rax,rsi
ffff800000810687:	48 83 c0 01          	add    rax,0x1
ffff80000081068b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081068e:	eb 76                	jmp    ffff800000810706 <to_ascii+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:140
            else if(k_shift)return key_map[i].ascii_shift;
ffff800000810690:	48 ba 40 ff ff ff ff 	movabs rdx,0xffffffffffffff40
ffff800000810697:	ff ff ff 
ffff80000081069a:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000081069e:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff8000008106a1:	84 d2                	test   dl,dl
ffff8000008106a3:	74 29                	je     ffff8000008106ce <to_ascii+0x129>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:140 (discriminator 1)
ffff8000008106a5:	48 be 90 d5 ff ff ff 	movabs rsi,0xffffffffffffd590
ffff8000008106ac:	ff ff ff 
ffff8000008106af:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff8000008106b2:	48 63 ca             	movsxd rcx,edx
ffff8000008106b5:	48 89 ca             	mov    rdx,rcx
ffff8000008106b8:	48 c1 e2 02          	shl    rdx,0x2
ffff8000008106bc:	48 01 ca             	add    rdx,rcx
ffff8000008106bf:	48 01 d0             	add    rax,rdx
ffff8000008106c2:	48 01 f0             	add    rax,rsi
ffff8000008106c5:	48 83 c0 01          	add    rax,0x1
ffff8000008106c9:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008106cc:	eb 38                	jmp    ffff800000810706 <to_ascii+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:141
            else return key_map[i].ascii;
ffff8000008106ce:	48 b9 90 d5 ff ff ff 	movabs rcx,0xffffffffffffd590
ffff8000008106d5:	ff ff ff 
ffff8000008106d8:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff8000008106db:	48 63 d2             	movsxd rdx,edx
ffff8000008106de:	48 01 c1             	add    rcx,rax
ffff8000008106e1:	48 89 d0             	mov    rax,rdx
ffff8000008106e4:	48 c1 e0 02          	shl    rax,0x2
ffff8000008106e8:	48 01 d0             	add    rax,rdx
ffff8000008106eb:	48 01 c8             	add    rax,rcx
ffff8000008106ee:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008106f1:	eb 13                	jmp    ffff800000810706 <to_ascii+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:136 (discriminator 2)
    for(int i=0;i<0x5e;i++)//sizeof(key_map)/sizeof(key_code)
ffff8000008106f3:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:136 (discriminator 1)
ffff8000008106f7:	83 7d fc 5d          	cmp    DWORD PTR [rbp-0x4],0x5d
ffff8000008106fb:	0f 8e d1 fe ff ff    	jle    ffff8000008105d2 <to_ascii+0x2d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:144
        }

    return '\0';
ffff800000810701:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:145
}
ffff800000810706:	5d                   	pop    rbp
ffff800000810707:	c3                   	ret    

ffff800000810708 <init_kb>:
init_kb():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:147
int init_kb()
{
ffff800000810708:	f3 0f 1e fa          	endbr64 
ffff80000081070c:	55                   	push   rbp
ffff80000081070d:	48 89 e5             	mov    rbp,rsp
ffff800000810710:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000810710 <init_kb+0x8>
ffff800000810717:	49 bb 20 2e 11 00 00 	movabs r11,0x112e20
ffff80000081071e:	00 00 00 
ffff800000810721:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:148
}
ffff800000810724:	90                   	nop
ffff800000810725:	5d                   	pop    rbp
ffff800000810726:	c3                   	ret    

ffff800000810727 <key_proc>:
key_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:150
int key_proc()
{
ffff800000810727:	f3 0f 1e fa          	endbr64 
ffff80000081072b:	55                   	push   rbp
ffff80000081072c:	48 89 e5             	mov    rbp,rsp
ffff80000081072f:	41 57                	push   r15
ffff800000810731:	53                   	push   rbx
ffff800000810732:	48 83 ec 20          	sub    rsp,0x20
ffff800000810736:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000810736 <key_proc+0xf>
ffff80000081073d:	49 bb fa 2d 11 00 00 	movabs r11,0x112dfa
ffff800000810744:	00 00 00 
ffff800000810747:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:151
    __asm__ volatile("cli");
ffff80000081074a:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:153
    //获取完整的扫描码
    u8 scan1=0,scan2=0,ch=0;
ffff80000081074b:	c6 45 ef 00          	mov    BYTE PTR [rbp-0x11],0x0
ffff80000081074f:	c6 45 ee 00          	mov    BYTE PTR [rbp-0x12],0x0
ffff800000810753:	c6 45 ed 00          	mov    BYTE PTR [rbp-0x13],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:155
    key_code tmpc;
    scan1=inb(0x60);
ffff800000810757:	bf 60 00 00 00       	mov    edi,0x60
ffff80000081075c:	49 89 df             	mov    r15,rbx
ffff80000081075f:	48 b8 c9 62 ee ff ff 	movabs rax,0xffffffffffee62c9
ffff800000810766:	ff ff ff 
ffff800000810769:	48 01 d8             	add    rax,rbx
ffff80000081076c:	ff d0                	call   rax
ffff80000081076e:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:167
//    tmpc.scan_code2=scan2;
//    tmpc.ascii= ch;


//    ENQUEUE(key_bufq,tmpc)
    if((key_bufq.tail+1)%key_bufq.size!=key_bufq.head)
ffff800000810771:	48 b8 78 ff ff ff ff 	movabs rax,0xffffffffffffff78
ffff800000810778:	ff ff ff 
ffff80000081077b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000081077f:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff800000810782:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000810785:	48 b8 78 ff ff ff ff 	movabs rax,0xffffffffffffff78
ffff80000081078c:	ff ff ff 
ffff80000081078f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000810793:	8b 48 10             	mov    ecx,DWORD PTR [rax+0x10]
ffff800000810796:	89 d0                	mov    eax,edx
ffff800000810798:	99                   	cdq    
ffff800000810799:	f7 f9                	idiv   ecx
ffff80000081079b:	48 b8 78 ff ff ff ff 	movabs rax,0xffffffffffffff78
ffff8000008107a2:	ff ff ff 
ffff8000008107a5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008107a9:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff8000008107ac:	39 c2                	cmp    edx,eax
ffff8000008107ae:	74 68                	je     ffff800000810818 <key_proc+0xf1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:169
    {
        key_bufq.data[key_bufq.tail]=scan1;
ffff8000008107b0:	48 b8 78 ff ff ff ff 	movabs rax,0xffffffffffffff78
ffff8000008107b7:	ff ff ff 
ffff8000008107ba:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008107be:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008107c1:	48 b8 78 ff ff ff ff 	movabs rax,0xffffffffffffff78
ffff8000008107c8:	ff ff ff 
ffff8000008107cb:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008107cf:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff8000008107d2:	48 98                	cdqe   
ffff8000008107d4:	48 01 c2             	add    rdx,rax
ffff8000008107d7:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
ffff8000008107db:	88 02                	mov    BYTE PTR [rdx],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:170
        key_bufq.tail=(key_bufq.tail+1)%key_bufq.size;
ffff8000008107dd:	48 b8 78 ff ff ff ff 	movabs rax,0xffffffffffffff78
ffff8000008107e4:	ff ff ff 
ffff8000008107e7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008107eb:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff8000008107ee:	8d 50 01             	lea    edx,[rax+0x1]
ffff8000008107f1:	48 b8 78 ff ff ff ff 	movabs rax,0xffffffffffffff78
ffff8000008107f8:	ff ff ff 
ffff8000008107fb:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008107ff:	8b 48 10             	mov    ecx,DWORD PTR [rax+0x10]
ffff800000810802:	89 d0                	mov    eax,edx
ffff800000810804:	99                   	cdq    
ffff800000810805:	f7 f9                	idiv   ecx
ffff800000810807:	48 b8 78 ff ff ff ff 	movabs rax,0xffffffffffffff78
ffff80000081080e:	ff ff ff 
ffff800000810811:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000810815:	89 50 0c             	mov    DWORD PTR [rax+0xc],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:173
    }

    if(scan1==0x48)
ffff800000810818:	80 7d ef 48          	cmp    BYTE PTR [rbp-0x11],0x48
ffff80000081081c:	75 17                	jne    ffff800000810835 <key_proc+0x10e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:174
        scr_up();
ffff80000081081e:	49 89 df             	mov    r15,rbx
ffff800000810821:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810826:	48 ba e6 8f ee ff ff 	movabs rdx,0xffffffffffee8fe6
ffff80000081082d:	ff ff ff 
ffff800000810830:	48 01 da             	add    rdx,rbx
ffff800000810833:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:175
    if(scan1==0x50)
ffff800000810835:	80 7d ef 50          	cmp    BYTE PTR [rbp-0x11],0x50
ffff800000810839:	75 17                	jne    ffff800000810852 <key_proc+0x12b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:176
        scr_down();
ffff80000081083b:	49 89 df             	mov    r15,rbx
ffff80000081083e:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810843:	48 ba da 90 ee ff ff 	movabs rdx,0xffffffffffee90da
ffff80000081084a:	ff ff ff 
ffff80000081084d:	48 01 da             	add    rdx,rbx
ffff800000810850:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:177
    switch (scan1)
ffff800000810852:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
ffff800000810856:	3d b6 00 00 00       	cmp    eax,0xb6
ffff80000081085b:	74 45                	je     ffff8000008108a2 <key_proc+0x17b>
ffff80000081085d:	3d b6 00 00 00       	cmp    eax,0xb6
ffff800000810862:	0f 8f 85 00 00 00    	jg     ffff8000008108ed <key_proc+0x1c6>
ffff800000810868:	3d aa 00 00 00       	cmp    eax,0xaa
ffff80000081086d:	74 33                	je     ffff8000008108a2 <key_proc+0x17b>
ffff80000081086f:	3d aa 00 00 00       	cmp    eax,0xaa
ffff800000810874:	7f 77                	jg     ffff8000008108ed <key_proc+0x1c6>
ffff800000810876:	3d 9d 00 00 00       	cmp    eax,0x9d
ffff80000081087b:	74 3e                	je     ffff8000008108bb <key_proc+0x194>
ffff80000081087d:	3d 9d 00 00 00       	cmp    eax,0x9d
ffff800000810882:	7f 69                	jg     ffff8000008108ed <key_proc+0x1c6>
ffff800000810884:	83 f8 3a             	cmp    eax,0x3a
ffff800000810887:	74 4b                	je     ffff8000008108d4 <key_proc+0x1ad>
ffff800000810889:	83 f8 3a             	cmp    eax,0x3a
ffff80000081088c:	7f 5f                	jg     ffff8000008108ed <key_proc+0x1c6>
ffff80000081088e:	83 f8 36             	cmp    eax,0x36
ffff800000810891:	74 0f                	je     ffff8000008108a2 <key_proc+0x17b>
ffff800000810893:	83 f8 36             	cmp    eax,0x36
ffff800000810896:	7f 55                	jg     ffff8000008108ed <key_proc+0x1c6>
ffff800000810898:	83 f8 1d             	cmp    eax,0x1d
ffff80000081089b:	74 1e                	je     ffff8000008108bb <key_proc+0x194>
ffff80000081089d:	83 f8 2a             	cmp    eax,0x2a
ffff8000008108a0:	75 4b                	jne    ffff8000008108ed <key_proc+0x1c6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:183
    {
        case 0x36:
        case 0x2a:
        case 0xaa:
        case 0xb6:
            shift();
ffff8000008108a2:	49 89 df             	mov    r15,rbx
ffff8000008108a5:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008108aa:	48 ba a0 cf ee ff ff 	movabs rdx,0xffffffffffeecfa0
ffff8000008108b1:	ff ff ff 
ffff8000008108b4:	48 01 da             	add    rdx,rbx
ffff8000008108b7:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:184
            break;
ffff8000008108b9:	eb 33                	jmp    ffff8000008108ee <key_proc+0x1c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:187
        case 0x1d:
        case 0x9d:
            ctrl();
ffff8000008108bb:	49 89 df             	mov    r15,rbx
ffff8000008108be:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008108c3:	48 ba e7 cf ee ff ff 	movabs rdx,0xffffffffffeecfe7
ffff8000008108ca:	ff ff ff 
ffff8000008108cd:	48 01 da             	add    rdx,rbx
ffff8000008108d0:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:188
            break;
ffff8000008108d2:	eb 1a                	jmp    ffff8000008108ee <key_proc+0x1c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:190
        case 0x3a:
            capslock();
ffff8000008108d4:	49 89 df             	mov    r15,rbx
ffff8000008108d7:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008108dc:	48 ba 2e d0 ee ff ff 	movabs rdx,0xffffffffffeed02e
ffff8000008108e3:	ff ff ff 
ffff8000008108e6:	48 01 da             	add    rdx,rbx
ffff8000008108e9:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:191
            break;
ffff8000008108eb:	eb 01                	jmp    ffff8000008108ee <key_proc+0x1c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:193
        default:
            break;
ffff8000008108ed:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:196
    }
    //发送到std
    if(!(scan1&FLAG_BREAK)){
ffff8000008108ee:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
ffff8000008108f2:	84 c0                	test   al,al
ffff8000008108f4:	78 51                	js     ffff800000810947 <key_proc+0x220>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:197
        char ch= to_ascii(scan1);
ffff8000008108f6:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
ffff8000008108fa:	0f be c0             	movsx  eax,al
ffff8000008108fd:	89 c7                	mov    edi,eax
ffff8000008108ff:	49 89 df             	mov    r15,rbx
ffff800000810902:	48 b8 75 d0 ee ff ff 	movabs rax,0xffffffffffeed075
ffff800000810909:	ff ff ff 
ffff80000081090c:	48 01 d8             	add    rax,rbx
ffff80000081090f:	ff d0                	call   rax
ffff800000810911:	88 45 e7             	mov    BYTE PTR [rbp-0x19],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:198
        unsigned long args[]={(unsigned long) &ch, 1};
ffff800000810914:	48 8d 45 e7          	lea    rax,[rbp-0x19]
ffff800000810918:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
ffff80000081091c:	48 c7 45 d8 01 00 00 	mov    QWORD PTR [rbp-0x28],0x1
ffff800000810923:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:200
        //写入stdin
        sys_ioctl(0,TTY_WSTDIN,(unsigned long)args);
ffff800000810924:	48 8d 45 d0          	lea    rax,[rbp-0x30]
ffff800000810928:	48 89 c2             	mov    rdx,rax
ffff80000081092b:	be 03 00 00 00       	mov    esi,0x3
ffff800000810930:	bf 00 00 00 00       	mov    edi,0x0
ffff800000810935:	49 89 df             	mov    r15,rbx
ffff800000810938:	48 b8 c1 61 ee ff ff 	movabs rax,0xffffffffffee61c1
ffff80000081093f:	ff ff ff 
ffff800000810942:	48 01 d8             	add    rax,rbx
ffff800000810945:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:219
//        //logf("%x\n",stdin.w_ptr);
//        //print_stdin();
//        //printchar(ch);
//        //flush_screen(0);*/
//    }
    eoi();
ffff800000810947:	49 89 df             	mov    r15,rbx
ffff80000081094a:	b8 00 00 00 00       	mov    eax,0x0
ffff80000081094f:	48 ba de 62 ee ff ff 	movabs rdx,0xffffffffffee62de
ffff800000810956:	ff ff ff 
ffff800000810959:	48 01 da             	add    rdx,rbx
ffff80000081095c:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:220
    __asm__ volatile("leave\r\n iretq");
ffff80000081095e:	c9                   	leave  
ffff80000081095f:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:221
}
ffff800000810961:	90                   	nop
ffff800000810962:	48 83 c4 20          	add    rsp,0x20
ffff800000810966:	5b                   	pop    rbx
ffff800000810967:	41 5f                	pop    r15
ffff800000810969:	5d                   	pop    rbp
ffff80000081096a:	c3                   	ret    

ffff80000081096b <sys_analyse_key>:
sys_analyse_key():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:224

char sys_analyse_key()
{
ffff80000081096b:	f3 0f 1e fa          	endbr64 
ffff80000081096f:	55                   	push   rbp
ffff800000810970:	48 89 e5             	mov    rbp,rsp
ffff800000810973:	41 57                	push   r15
ffff800000810975:	53                   	push   rbx
ffff800000810976:	48 83 ec 30          	sub    rsp,0x30
ffff80000081097a:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000081097a <sys_analyse_key+0xf>
ffff800000810981:	49 bb b6 2b 11 00 00 	movabs r11,0x112bb6
ffff800000810988:	00 00 00 
ffff80000081098b:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:225
    if(key_bufq.tail==key_bufq.head)return -1;
ffff80000081098e:	48 b8 78 ff ff ff ff 	movabs rax,0xffffffffffffff78
ffff800000810995:	ff ff ff 
ffff800000810998:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000081099c:	8b 50 0c             	mov    edx,DWORD PTR [rax+0xc]
ffff80000081099f:	48 b8 78 ff ff ff ff 	movabs rax,0xffffffffffffff78
ffff8000008109a6:	ff ff ff 
ffff8000008109a9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008109ad:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff8000008109b0:	39 c2                	cmp    edx,eax
ffff8000008109b2:	75 0a                	jne    ffff8000008109be <sys_analyse_key+0x53>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:225 (discriminator 1)
ffff8000008109b4:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff8000008109b9:	e9 b1 01 00 00       	jmp    ffff800000810b6f <sys_analyse_key+0x204>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:226
    char c=key_buf[key_bufq.head];
ffff8000008109be:	48 b8 78 ff ff ff ff 	movabs rax,0xffffffffffffff78
ffff8000008109c5:	ff ff ff 
ffff8000008109c8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008109cc:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff8000008109cf:	48 ba 10 fd ff ff ff 	movabs rdx,0xfffffffffffffd10
ffff8000008109d6:	ff ff ff 
ffff8000008109d9:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff8000008109dd:	48 98                	cdqe   
ffff8000008109df:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff8000008109e3:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:227
    key_bufq.head=(key_bufq.head+1)%key_bufq.size;
ffff8000008109e6:	48 b8 78 ff ff ff ff 	movabs rax,0xffffffffffffff78
ffff8000008109ed:	ff ff ff 
ffff8000008109f0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008109f4:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff8000008109f7:	8d 50 01             	lea    edx,[rax+0x1]
ffff8000008109fa:	48 b8 78 ff ff ff ff 	movabs rax,0xffffffffffffff78
ffff800000810a01:	ff ff ff 
ffff800000810a04:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000810a08:	8b 48 10             	mov    ecx,DWORD PTR [rax+0x10]
ffff800000810a0b:	89 d0                	mov    eax,edx
ffff800000810a0d:	99                   	cdq    
ffff800000810a0e:	f7 f9                	idiv   ecx
ffff800000810a10:	48 b8 78 ff ff ff ff 	movabs rax,0xffffffffffffff78
ffff800000810a17:	ff ff ff 
ffff800000810a1a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000810a1e:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:229
//    QHEAD(key_bufq)=(QHEAD(key_bufq)+1)%QSIZE(key_bufq);
    printf("scan code:");
ffff800000810a21:	48 b8 66 d7 ff ff ff 	movabs rax,0xffffffffffffd766
ffff800000810a28:	ff ff ff 
ffff800000810a2b:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000810a2f:	48 89 c7             	mov    rdi,rax
ffff800000810a32:	49 89 df             	mov    r15,rbx
ffff800000810a35:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810a3a:	48 ba 91 e4 ed ff ff 	movabs rdx,0xffffffffffede491
ffff800000810a41:	ff ff ff 
ffff800000810a44:	48 01 da             	add    rdx,rbx
ffff800000810a47:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:230
    char res[33]={0};
ffff800000810a49:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
ffff800000810a50:	00 
ffff800000810a51:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff800000810a58:	00 
ffff800000810a59:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff800000810a60:	00 
ffff800000810a61:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff800000810a68:	00 
ffff800000810a69:	c6 45 e0 00          	mov    BYTE PTR [rbp-0x20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:231
    itoa(res,16,c);
ffff800000810a6d:	0f be 55 ef          	movsx  edx,BYTE PTR [rbp-0x11]
ffff800000810a71:	48 8d 45 c0          	lea    rax,[rbp-0x40]
ffff800000810a75:	be 10 00 00 00       	mov    esi,0x10
ffff800000810a7a:	48 89 c7             	mov    rdi,rax
ffff800000810a7d:	49 89 df             	mov    r15,rbx
ffff800000810a80:	48 b8 17 e3 ed ff ff 	movabs rax,0xffffffffffede317
ffff800000810a87:	ff ff ff 
ffff800000810a8a:	48 01 d8             	add    rax,rbx
ffff800000810a8d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:232
    printf(res);
ffff800000810a8f:	48 8d 45 c0          	lea    rax,[rbp-0x40]
ffff800000810a93:	48 89 c7             	mov    rdi,rax
ffff800000810a96:	49 89 df             	mov    r15,rbx
ffff800000810a99:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810a9e:	48 ba 91 e4 ed ff ff 	movabs rdx,0xffffffffffede491
ffff800000810aa5:	ff ff ff 
ffff800000810aa8:	48 01 da             	add    rdx,rbx
ffff800000810aab:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:233
    if(c&FLAG_BREAK){
ffff800000810aad:	80 7d ef 00          	cmp    BYTE PTR [rbp-0x11],0x0
ffff800000810ab1:	79 32                	jns    ffff800000810ae5 <sys_analyse_key+0x17a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:234
        printf("\n");
ffff800000810ab3:	48 b8 71 d7 ff ff ff 	movabs rax,0xffffffffffffd771
ffff800000810aba:	ff ff ff 
ffff800000810abd:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000810ac1:	48 89 c7             	mov    rdi,rax
ffff800000810ac4:	49 89 df             	mov    r15,rbx
ffff800000810ac7:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810acc:	48 ba 91 e4 ed ff ff 	movabs rdx,0xffffffffffede491
ffff800000810ad3:	ff ff ff 
ffff800000810ad6:	48 01 da             	add    rdx,rbx
ffff800000810ad9:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:235
        return -1;
ffff800000810adb:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000810ae0:	e9 8a 00 00 00       	jmp    ffff800000810b6f <sys_analyse_key+0x204>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:237
    }
    c= to_ascii(c&0x7f);
ffff800000810ae5:	0f be 45 ef          	movsx  eax,BYTE PTR [rbp-0x11]
ffff800000810ae9:	83 e0 7f             	and    eax,0x7f
ffff800000810aec:	89 c7                	mov    edi,eax
ffff800000810aee:	49 89 df             	mov    r15,rbx
ffff800000810af1:	48 b8 75 d0 ee ff ff 	movabs rax,0xffffffffffeed075
ffff800000810af8:	ff ff ff 
ffff800000810afb:	48 01 d8             	add    rax,rbx
ffff800000810afe:	ff d0                	call   rax
ffff800000810b00:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:238
    printf(" char:");
ffff800000810b03:	48 b8 73 d7 ff ff ff 	movabs rax,0xffffffffffffd773
ffff800000810b0a:	ff ff ff 
ffff800000810b0d:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000810b11:	48 89 c7             	mov    rdi,rax
ffff800000810b14:	49 89 df             	mov    r15,rbx
ffff800000810b17:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810b1c:	48 ba 91 e4 ed ff ff 	movabs rdx,0xffffffffffede491
ffff800000810b23:	ff ff ff 
ffff800000810b26:	48 01 da             	add    rdx,rbx
ffff800000810b29:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:239
    putchar(c);
ffff800000810b2b:	0f be 45 ef          	movsx  eax,BYTE PTR [rbp-0x11]
ffff800000810b2f:	89 c7                	mov    edi,eax
ffff800000810b31:	49 89 df             	mov    r15,rbx
ffff800000810b34:	48 b8 40 e4 ed ff ff 	movabs rax,0xffffffffffede440
ffff800000810b3b:	ff ff ff 
ffff800000810b3e:	48 01 d8             	add    rax,rbx
ffff800000810b41:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:240
    printf("\n");
ffff800000810b43:	48 b8 71 d7 ff ff ff 	movabs rax,0xffffffffffffd771
ffff800000810b4a:	ff ff ff 
ffff800000810b4d:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000810b51:	48 89 c7             	mov    rdi,rax
ffff800000810b54:	49 89 df             	mov    r15,rbx
ffff800000810b57:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810b5c:	48 ba 91 e4 ed ff ff 	movabs rdx,0xffffffffffede491
ffff800000810b63:	ff ff ff 
ffff800000810b66:	48 01 da             	add    rdx,rbx
ffff800000810b69:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:241
    return c;
ffff800000810b6b:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:242 (discriminator 1)
ffff800000810b6f:	48 83 c4 30          	add    rsp,0x30
ffff800000810b73:	5b                   	pop    rbx
ffff800000810b74:	41 5f                	pop    r15
ffff800000810b76:	5d                   	pop    rbp
ffff800000810b77:	c3                   	ret    

ffff800000810b78 <init_disk>:
init_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:20
struct blk_dev bd_hd={
    .do_request=hd_do_req
};
int dev_hd=-1,last_chk_res=0;
int init_disk()
{
ffff800000810b78:	f3 0f 1e fa          	endbr64 
ffff800000810b7c:	55                   	push   rbp
ffff800000810b7d:	48 89 e5             	mov    rbp,rsp
ffff800000810b80:	41 57                	push   r15
ffff800000810b82:	53                   	push   rbx
ffff800000810b83:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000810b83 <init_disk+0xb>
ffff800000810b8a:	49 bb ad 29 11 00 00 	movabs r11,0x1129ad
ffff800000810b91:	00 00 00 
ffff800000810b94:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:21
    if((dev_hd= reg_blkdev(&bd_hd))<0)
ffff800000810b97:	48 b8 20 fd ff ff ff 	movabs rax,0xfffffffffffffd20
ffff800000810b9e:	ff ff ff 
ffff800000810ba1:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000810ba5:	48 89 c7             	mov    rdi,rax
ffff800000810ba8:	49 89 df             	mov    r15,rbx
ffff800000810bab:	48 b8 aa c1 ee ff ff 	movabs rax,0xffffffffffeec1aa
ffff800000810bb2:	ff ff ff 
ffff800000810bb5:	48 01 d8             	add    rax,rbx
ffff800000810bb8:	ff d0                	call   rax
ffff800000810bba:	48 ba c8 fe ff ff ff 	movabs rdx,0xfffffffffffffec8
ffff800000810bc1:	ff ff ff 
ffff800000810bc4:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000810bc8:	89 02                	mov    DWORD PTR [rdx],eax
ffff800000810bca:	48 b8 c8 fe ff ff ff 	movabs rax,0xfffffffffffffec8
ffff800000810bd1:	ff ff ff 
ffff800000810bd4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000810bd8:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000810bda:	85 c0                	test   eax,eax
ffff800000810bdc:	79 07                	jns    ffff800000810be5 <init_disk+0x6d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:22
        return -1;
ffff800000810bde:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000810be3:	eb 05                	jmp    ffff800000810bea <init_disk+0x72>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:27
    //disk_devi= reg_device(&dev_disk);
    //disk_drvi= reg_driver(&drv_disk);
    //dev_disk.drv=&drv_disk;
    // hd_iterate();
    return 0;
ffff800000810be5:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:28
}
ffff800000810bea:	5b                   	pop    rbx
ffff800000810beb:	41 5f                	pop    r15
ffff800000810bed:	5d                   	pop    rbp
ffff800000810bee:	c3                   	ret    

ffff800000810bef <disk_int_handler_c>:
disk_int_handler_c():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:31

int disk_int_handler_c()
{
ffff800000810bef:	f3 0f 1e fa          	endbr64 
ffff800000810bf3:	55                   	push   rbp
ffff800000810bf4:	48 89 e5             	mov    rbp,rsp
ffff800000810bf7:	41 57                	push   r15
ffff800000810bf9:	53                   	push   rbx
ffff800000810bfa:	48 83 ec 30          	sub    rsp,0x30
ffff800000810bfe:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000810bfe <disk_int_handler_c+0xf>
ffff800000810c05:	49 bb 32 29 11 00 00 	movabs r11,0x112932
ffff800000810c0c:	00 00 00 
ffff800000810c0f:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:32
    if(r_running==NULL)
ffff800000810c12:	48 b8 e0 fc ff ff ff 	movabs rax,0xfffffffffffffce0
ffff800000810c19:	ff ff ff 
ffff800000810c1c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000810c20:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810c23:	48 85 c0             	test   rax,rax
ffff800000810c26:	75 32                	jne    ffff800000810c5a <disk_int_handler_c+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:34
    {
        comprintf("err:null running dreq\n");
ffff800000810c28:	48 b8 7a d7 ff ff ff 	movabs rax,0xffffffffffffd77a
ffff800000810c2f:	ff ff ff 
ffff800000810c32:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000810c36:	48 89 c7             	mov    rdi,rax
ffff800000810c39:	49 89 df             	mov    r15,rbx
ffff800000810c3c:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810c41:	48 ba 62 18 ef ff ff 	movabs rdx,0xffffffffffef1862
ffff800000810c48:	ff ff ff 
ffff800000810c4b:	48 01 da             	add    rdx,rbx
ffff800000810c4e:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:35
        return 1;//同步读写硬盘
ffff800000810c50:	b8 01 00 00 00       	mov    eax,0x1
ffff800000810c55:	e9 20 03 00 00       	jmp    ffff800000810f7a <disk_int_handler_c+0x38b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:37
    }
    short *p=r_running->buffer;
ffff800000810c5a:	48 b8 e0 fc ff ff ff 	movabs rax,0xfffffffffffffce0
ffff800000810c61:	ff ff ff 
ffff800000810c64:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000810c68:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810c6b:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff800000810c6f:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:38
    int port=PORT_DISK_MAJOR;
ffff800000810c73:	c7 45 e4 f0 01 00 00 	mov    DWORD PTR [rbp-0x1c],0x1f0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:39
    if(BLKDEV_MINOR(r_running->dev)==DISK_SLAVE_MAJOR||\
ffff800000810c7a:	48 b8 e0 fc ff ff ff 	movabs rax,0xfffffffffffffce0
ffff800000810c81:	ff ff ff 
ffff800000810c84:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000810c88:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810c8b:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff800000810c8e:	0f b7 c0             	movzx  eax,ax
ffff800000810c91:	83 e0 0f             	and    eax,0xf
ffff800000810c94:	83 f8 02             	cmp    eax,0x2
ffff800000810c97:	74 1f                	je     ffff800000810cb8 <disk_int_handler_c+0xc9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:40 (discriminator 1)
    BLKDEV_MINOR(r_running->dev)==DISK_SLAVE_SLAVE)
ffff800000810c99:	48 b8 e0 fc ff ff ff 	movabs rax,0xfffffffffffffce0
ffff800000810ca0:	ff ff ff 
ffff800000810ca3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000810ca7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810caa:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff800000810cad:	0f b7 c0             	movzx  eax,ax
ffff800000810cb0:	83 e0 0f             	and    eax,0xf
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:39 (discriminator 1)
    if(BLKDEV_MINOR(r_running->dev)==DISK_SLAVE_MAJOR||\
ffff800000810cb3:	83 f8 03             	cmp    eax,0x3
ffff800000810cb6:	75 07                	jne    ffff800000810cbf <disk_int_handler_c+0xd0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:41
        port=PORT_DISK_SLAVE;
ffff800000810cb8:	c7 45 e4 70 01 00 00 	mov    DWORD PTR [rbp-0x1c],0x170
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:42
    if(r_running->cmd==BLKDEV_REQ_READ)
ffff800000810cbf:	48 b8 e0 fc ff ff ff 	movabs rax,0xfffffffffffffce0
ffff800000810cc6:	ff ff ff 
ffff800000810cc9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000810ccd:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810cd0:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff800000810cd3:	85 c0                	test   eax,eax
ffff800000810cd5:	75 61                	jne    ffff800000810d38 <disk_int_handler_c+0x149>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:46
    {
        ////printf("sys_read dist:%x\n",p);
        //读取
        for(int i=0;i<r_running->nr_sectors*256;i++)
ffff800000810cd7:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff800000810cde:	eb 2f                	jmp    ffff800000810d0f <disk_int_handler_c+0x120>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:48 (discriminator 3)
        {
            *p++=inw(port);
ffff800000810ce0:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000810ce3:	0f b7 c0             	movzx  eax,ax
ffff800000810ce6:	89 c7                	mov    edi,eax
ffff800000810ce8:	49 89 df             	mov    r15,rbx
ffff800000810ceb:	48 b8 d3 62 ee ff ff 	movabs rax,0xffffffffffee62d3
ffff800000810cf2:	ff ff ff 
ffff800000810cf5:	48 01 d8             	add    rax,rbx
ffff800000810cf8:	ff d0                	call   rax
ffff800000810cfa:	89 c2                	mov    edx,eax
ffff800000810cfc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000810d00:	48 8d 48 02          	lea    rcx,[rax+0x2]
ffff800000810d04:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
ffff800000810d08:	66 89 10             	mov    WORD PTR [rax],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:46 (discriminator 3)
        for(int i=0;i<r_running->nr_sectors*256;i++)
ffff800000810d0b:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:46 (discriminator 1)
ffff800000810d0f:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000810d12:	48 63 d0             	movsxd rdx,eax
ffff800000810d15:	48 b8 e0 fc ff ff ff 	movabs rax,0xfffffffffffffce0
ffff800000810d1c:	ff ff ff 
ffff800000810d1f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000810d23:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810d26:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000810d2a:	48 c1 e0 08          	shl    rax,0x8
ffff800000810d2e:	48 39 c2             	cmp    rdx,rax
ffff800000810d31:	72 ad                	jb     ffff800000810ce0 <disk_int_handler_c+0xf1>
ffff800000810d33:	e9 53 01 00 00       	jmp    ffff800000810e8b <disk_int_handler_c+0x29c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:50
        }
    }else if(r_running->cmd==BLKDEV_REQ_WRITE)
ffff800000810d38:	48 b8 e0 fc ff ff ff 	movabs rax,0xfffffffffffffce0
ffff800000810d3f:	ff ff ff 
ffff800000810d42:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000810d46:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810d49:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff800000810d4c:	83 f8 01             	cmp    eax,0x1
ffff800000810d4f:	75 64                	jne    ffff800000810db5 <disk_int_handler_c+0x1c6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:52
    {
        for(int i=0;i<r_running->nr_sectors*256;i++)
ffff800000810d51:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
ffff800000810d58:	eb 32                	jmp    ffff800000810d8c <disk_int_handler_c+0x19d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:53 (discriminator 3)
            outw(port,*p++);
ffff800000810d5a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000810d5e:	48 8d 50 02          	lea    rdx,[rax+0x2]
ffff800000810d62:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff800000810d66:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff800000810d69:	0f b7 d0             	movzx  edx,ax
ffff800000810d6c:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000810d6f:	0f b7 c0             	movzx  eax,ax
ffff800000810d72:	89 d6                	mov    esi,edx
ffff800000810d74:	89 c7                	mov    edi,eax
ffff800000810d76:	49 89 df             	mov    r15,rbx
ffff800000810d79:	48 b8 bd 62 ee ff ff 	movabs rax,0xffffffffffee62bd
ffff800000810d80:	ff ff ff 
ffff800000810d83:	48 01 d8             	add    rax,rbx
ffff800000810d86:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:52 (discriminator 3)
        for(int i=0;i<r_running->nr_sectors*256;i++)
ffff800000810d88:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:52 (discriminator 1)
ffff800000810d8c:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000810d8f:	48 63 d0             	movsxd rdx,eax
ffff800000810d92:	48 b8 e0 fc ff ff ff 	movabs rax,0xfffffffffffffce0
ffff800000810d99:	ff ff ff 
ffff800000810d9c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000810da0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810da3:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000810da7:	48 c1 e0 08          	shl    rax,0x8
ffff800000810dab:	48 39 c2             	cmp    rdx,rax
ffff800000810dae:	72 aa                	jb     ffff800000810d5a <disk_int_handler_c+0x16b>
ffff800000810db0:	e9 d6 00 00 00       	jmp    ffff800000810e8b <disk_int_handler_c+0x29c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:54
    }else if(r_running->cmd==DISKREQ_CHECK)
ffff800000810db5:	48 b8 e0 fc ff ff ff 	movabs rax,0xfffffffffffffce0
ffff800000810dbc:	ff ff ff 
ffff800000810dbf:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000810dc3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810dc6:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff800000810dc9:	83 f8 02             	cmp    eax,0x2
ffff800000810dcc:	75 54                	jne    ffff800000810e22 <disk_int_handler_c+0x233>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:56
    {
        char stat=inb(port+7);
ffff800000810dce:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000810dd1:	83 c0 07             	add    eax,0x7
ffff800000810dd4:	0f b6 c0             	movzx  eax,al
ffff800000810dd7:	89 c7                	mov    edi,eax
ffff800000810dd9:	49 89 df             	mov    r15,rbx
ffff800000810ddc:	48 b8 c9 62 ee ff ff 	movabs rax,0xffffffffffee62c9
ffff800000810de3:	ff ff ff 
ffff800000810de6:	48 01 d8             	add    rax,rbx
ffff800000810de9:	ff d0                	call   rax
ffff800000810deb:	88 45 d7             	mov    BYTE PTR [rbp-0x29],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:57
        short dat=inw(port);
ffff800000810dee:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000810df1:	0f b7 c0             	movzx  eax,ax
ffff800000810df4:	89 c7                	mov    edi,eax
ffff800000810df6:	49 89 df             	mov    r15,rbx
ffff800000810df9:	48 b8 d3 62 ee ff ff 	movabs rax,0xffffffffffee62d3
ffff800000810e00:	ff ff ff 
ffff800000810e03:	48 01 d8             	add    rax,rbx
ffff800000810e06:	ff d0                	call   rax
ffff800000810e08:	66 89 45 d4          	mov    WORD PTR [rbp-0x2c],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:60
        if(1)
        {
            last_chk_res=DISK_CHK_OK;
ffff800000810e0c:	48 b8 30 fd ff ff ff 	movabs rax,0xfffffffffffffd30
ffff800000810e13:	ff ff ff 
ffff800000810e16:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000810e1a:	c7 00 01 00 00 00    	mov    DWORD PTR [rax],0x1
ffff800000810e20:	eb 69                	jmp    ffff800000810e8b <disk_int_handler_c+0x29c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:67
        {
            char err=inb(port+1);//错误原因
            printf("checking disk err:%x\nresetting hd\n",err);
            last_chk_res=DISK_CHK_ERR;
        }
    }else if(r_running->cmd==DISKREQ_RESET)
ffff800000810e22:	48 b8 e0 fc ff ff ff 	movabs rax,0xfffffffffffffce0
ffff800000810e29:	ff ff ff 
ffff800000810e2c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000810e30:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810e33:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff800000810e36:	83 f8 03             	cmp    eax,0x3
ffff800000810e39:	75 50                	jne    ffff800000810e8b <disk_int_handler_c+0x29c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:69
    {
        int stat=inb(port+7);
ffff800000810e3b:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000810e3e:	83 c0 07             	add    eax,0x7
ffff800000810e41:	0f b6 c0             	movzx  eax,al
ffff800000810e44:	89 c7                	mov    edi,eax
ffff800000810e46:	49 89 df             	mov    r15,rbx
ffff800000810e49:	48 b8 c9 62 ee ff ff 	movabs rax,0xffffffffffee62c9
ffff800000810e50:	ff ff ff 
ffff800000810e53:	48 01 d8             	add    rax,rbx
ffff800000810e56:	ff d0                	call   rax
ffff800000810e58:	0f b6 c0             	movzx  eax,al
ffff800000810e5b:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:70
        printf("reset disk done.\nstat now:%x\n",stat);
ffff800000810e5e:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000810e61:	89 c6                	mov    esi,eax
ffff800000810e63:	48 b8 91 d7 ff ff ff 	movabs rax,0xffffffffffffd791
ffff800000810e6a:	ff ff ff 
ffff800000810e6d:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000810e71:	48 89 c7             	mov    rdi,rax
ffff800000810e74:	49 89 df             	mov    r15,rbx
ffff800000810e77:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810e7c:	48 ba 91 e4 ed ff ff 	movabs rdx,0xffffffffffede491
ffff800000810e83:	ff ff ff 
ffff800000810e86:	48 01 da             	add    rdx,rbx
ffff800000810e89:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:73
    }
    
    r_running=NULL;
ffff800000810e8b:	48 b8 e0 fc ff ff ff 	movabs rax,0xfffffffffffffce0
ffff800000810e92:	ff ff ff 
ffff800000810e95:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000810e99:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:74
    end_request(dev_hd);
ffff800000810ea0:	48 b8 c8 fe ff ff ff 	movabs rax,0xfffffffffffffec8
ffff800000810ea7:	ff ff ff 
ffff800000810eaa:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000810eae:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000810eb0:	0f b7 c0             	movzx  eax,ax
ffff800000810eb3:	66 89 45 d2          	mov    WORD PTR [rbp-0x2e],ax
end_request():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:66
    int major=BLKDEV_MAJOR(dev);
ffff800000810eb7:	0f b7 45 d2          	movzx  eax,WORD PTR [rbp-0x2e]
ffff800000810ebb:	c1 f8 04             	sar    eax,0x4
ffff800000810ebe:	83 e0 0f             	and    eax,0xf
ffff800000810ec1:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:67
    blk_devs[major].current_request->dev=-1;
ffff800000810ec4:	48 b8 70 ff ff ff ff 	movabs rax,0xffffffffffffff70
ffff800000810ecb:	ff ff ff 
ffff800000810ece:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff800000810ed2:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000810ed5:	48 98                	cdqe   
ffff800000810ed7:	48 c1 e0 04          	shl    rax,0x4
ffff800000810edb:	48 01 d0             	add    rax,rdx
ffff800000810ede:	48 83 c0 08          	add    rax,0x8
ffff800000810ee2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810ee5:	66 c7 00 ff ff       	mov    WORD PTR [rax],0xffff
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:68
    blk_devs[major].current_request=blk_devs[major].current_request->next;
ffff800000810eea:	48 b8 70 ff ff ff ff 	movabs rax,0xffffffffffffff70
ffff800000810ef1:	ff ff ff 
ffff800000810ef4:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff800000810ef8:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000810efb:	48 98                	cdqe   
ffff800000810efd:	48 c1 e0 04          	shl    rax,0x4
ffff800000810f01:	48 01 d0             	add    rax,rdx
ffff800000810f04:	48 83 c0 08          	add    rax,0x8
ffff800000810f08:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810f0b:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff800000810f0f:	48 ba 70 ff ff ff ff 	movabs rdx,0xffffffffffffff70
ffff800000810f16:	ff ff ff 
ffff800000810f19:	48 8b 0c 13          	mov    rcx,QWORD PTR [rbx+rdx*1]
ffff800000810f1d:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff800000810f20:	48 63 d2             	movsxd rdx,edx
ffff800000810f23:	48 c1 e2 04          	shl    rdx,0x4
ffff800000810f27:	48 01 ca             	add    rdx,rcx
ffff800000810f2a:	48 83 c2 08          	add    rdx,0x8
ffff800000810f2e:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:69
}
ffff800000810f31:	90                   	nop
disk_int_handler_c():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:76
    //执行下一个请求
    hd_do_req(blk_devs[dev_hd].current_request);
ffff800000810f32:	48 b8 c8 fe ff ff ff 	movabs rax,0xfffffffffffffec8
ffff800000810f39:	ff ff ff 
ffff800000810f3c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000810f40:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000810f42:	48 ba 70 ff ff ff ff 	movabs rdx,0xffffffffffffff70
ffff800000810f49:	ff ff ff 
ffff800000810f4c:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000810f50:	48 98                	cdqe   
ffff800000810f52:	48 c1 e0 04          	shl    rax,0x4
ffff800000810f56:	48 01 d0             	add    rax,rdx
ffff800000810f59:	48 83 c0 08          	add    rax,0x8
ffff800000810f5d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810f60:	48 89 c7             	mov    rdi,rax
ffff800000810f63:	49 89 df             	mov    r15,rbx
ffff800000810f66:	48 b8 07 e0 ee ff ff 	movabs rax,0xffffffffffeee007
ffff800000810f6d:	ff ff ff 
ffff800000810f70:	48 01 d8             	add    rax,rbx
ffff800000810f73:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:77
    return 0;
ffff800000810f75:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:78
}
ffff800000810f7a:	48 83 c4 30          	add    rsp,0x30
ffff800000810f7e:	5b                   	pop    rbx
ffff800000810f7f:	41 5f                	pop    r15
ffff800000810f81:	5d                   	pop    rbp
ffff800000810f82:	c3                   	ret    

ffff800000810f83 <async_reset_disk>:
async_reset_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:80
int async_reset_disk(int disk)
{
ffff800000810f83:	f3 0f 1e fa          	endbr64 
ffff800000810f87:	55                   	push   rbp
ffff800000810f88:	48 89 e5             	mov    rbp,rsp
ffff800000810f8b:	41 57                	push   r15
ffff800000810f8d:	48 83 ec 18          	sub    rsp,0x18
ffff800000810f91:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000810f91 <async_reset_disk+0xe>
ffff800000810f98:	49 bb 9f 25 11 00 00 	movabs r11,0x11259f
ffff800000810f9f:	00 00 00 
ffff800000810fa2:	4c 01 d8             	add    rax,r11
ffff800000810fa5:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:81
    outb(PORT_DISK_CONTROL,DISK_CMD_RESET);
ffff800000810fa8:	be 0c 00 00 00       	mov    esi,0xc
ffff800000810fad:	bf f6 03 00 00       	mov    edi,0x3f6
ffff800000810fb2:	49 89 c7             	mov    r15,rax
ffff800000810fb5:	48 ba b0 62 ee ff ff 	movabs rdx,0xffffffffffee62b0
ffff800000810fbc:	ff ff ff 
ffff800000810fbf:	48 01 c2             	add    rdx,rax
ffff800000810fc2:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:82
    return 0;
ffff800000810fc4:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:83
}
ffff800000810fc9:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000810fcd:	c9                   	leave  
ffff800000810fce:	c3                   	ret    

ffff800000810fcf <async_read_disk>:
async_read_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:85
int async_read_disk(int disk,unsigned int lba,int sec_n,char* mem_addr)
{
ffff800000810fcf:	f3 0f 1e fa          	endbr64 
ffff800000810fd3:	55                   	push   rbp
ffff800000810fd4:	48 89 e5             	mov    rbp,rsp
ffff800000810fd7:	41 57                	push   r15
ffff800000810fd9:	53                   	push   rbx
ffff800000810fda:	48 83 ec 30          	sub    rsp,0x30
ffff800000810fde:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000810fde <async_read_disk+0xf>
ffff800000810fe5:	49 bb 52 25 11 00 00 	movabs r11,0x112552
ffff800000810fec:	00 00 00 
ffff800000810fef:	4c 01 db             	add    rbx,r11
ffff800000810ff2:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff800000810ff5:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff800000810ff8:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff800000810ffb:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:86
    unsigned short port=PORT_DISK_MAJOR;
ffff800000810fff:	66 c7 45 ee f0 01    	mov    WORD PTR [rbp-0x12],0x1f0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:87
    int slave_disk=0;
ffff800000811005:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:88
    if(disk==DISK_SLAVE_MAJOR||disk==DISK_SLAVE_SLAVE)
ffff80000081100c:	83 7d dc 02          	cmp    DWORD PTR [rbp-0x24],0x2
ffff800000811010:	74 06                	je     ffff800000811018 <async_read_disk+0x49>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:88 (discriminator 1)
ffff800000811012:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff800000811016:	75 06                	jne    ffff80000081101e <async_read_disk+0x4f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:89
        port=PORT_DISK_SLAVE;
ffff800000811018:	66 c7 45 ee 70 01    	mov    WORD PTR [rbp-0x12],0x170
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:90
    if(disk==DISK_SLAVE_SLAVE||disk==DISK_MAJOR_SLAVE)
ffff80000081101e:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff800000811022:	74 06                	je     ffff80000081102a <async_read_disk+0x5b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:90 (discriminator 1)
ffff800000811024:	83 7d dc 01          	cmp    DWORD PTR [rbp-0x24],0x1
ffff800000811028:	75 07                	jne    ffff800000811031 <async_read_disk+0x62>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:91
        slave_disk=1;
ffff80000081102a:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:92
    outb(port+2,sec_n);
ffff800000811031:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000811034:	0f b6 d0             	movzx  edx,al
ffff800000811037:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000081103b:	83 c0 02             	add    eax,0x2
ffff80000081103e:	0f b7 c0             	movzx  eax,ax
ffff800000811041:	89 d6                	mov    esi,edx
ffff800000811043:	89 c7                	mov    edi,eax
ffff800000811045:	49 89 df             	mov    r15,rbx
ffff800000811048:	48 b8 b0 62 ee ff ff 	movabs rax,0xffffffffffee62b0
ffff80000081104f:	ff ff ff 
ffff800000811052:	48 01 d8             	add    rax,rbx
ffff800000811055:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:93
    outb(port+3,lba&0xff);
ffff800000811057:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000081105a:	0f b6 d0             	movzx  edx,al
ffff80000081105d:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff800000811061:	83 c0 03             	add    eax,0x3
ffff800000811064:	0f b7 c0             	movzx  eax,ax
ffff800000811067:	89 d6                	mov    esi,edx
ffff800000811069:	89 c7                	mov    edi,eax
ffff80000081106b:	49 89 df             	mov    r15,rbx
ffff80000081106e:	48 b8 b0 62 ee ff ff 	movabs rax,0xffffffffffee62b0
ffff800000811075:	ff ff ff 
ffff800000811078:	48 01 d8             	add    rax,rbx
ffff80000081107b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:94
    outb(port+4,(lba>>8)&0xff);
ffff80000081107d:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000811080:	c1 e8 08             	shr    eax,0x8
ffff800000811083:	0f b6 d0             	movzx  edx,al
ffff800000811086:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000081108a:	83 c0 04             	add    eax,0x4
ffff80000081108d:	0f b7 c0             	movzx  eax,ax
ffff800000811090:	89 d6                	mov    esi,edx
ffff800000811092:	89 c7                	mov    edi,eax
ffff800000811094:	49 89 df             	mov    r15,rbx
ffff800000811097:	48 b8 b0 62 ee ff ff 	movabs rax,0xffffffffffee62b0
ffff80000081109e:	ff ff ff 
ffff8000008110a1:	48 01 d8             	add    rax,rbx
ffff8000008110a4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:95
    outb(port+5,(lba>>16)&0xff);
ffff8000008110a6:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff8000008110a9:	c1 e8 10             	shr    eax,0x10
ffff8000008110ac:	0f b6 d0             	movzx  edx,al
ffff8000008110af:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff8000008110b3:	83 c0 05             	add    eax,0x5
ffff8000008110b6:	0f b7 c0             	movzx  eax,ax
ffff8000008110b9:	89 d6                	mov    esi,edx
ffff8000008110bb:	89 c7                	mov    edi,eax
ffff8000008110bd:	49 89 df             	mov    r15,rbx
ffff8000008110c0:	48 b8 b0 62 ee ff ff 	movabs rax,0xffffffffffee62b0
ffff8000008110c7:	ff ff ff 
ffff8000008110ca:	48 01 d8             	add    rax,rbx
ffff8000008110cd:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:96
    char drv=slave_disk?0x10:0;
ffff8000008110cf:	83 7d e8 00          	cmp    DWORD PTR [rbp-0x18],0x0
ffff8000008110d3:	74 07                	je     ffff8000008110dc <async_read_disk+0x10d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:96 (discriminator 1)
ffff8000008110d5:	b8 10 00 00 00       	mov    eax,0x10
ffff8000008110da:	eb 05                	jmp    ffff8000008110e1 <async_read_disk+0x112>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:96 (discriminator 2)
ffff8000008110dc:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:96 (discriminator 4)
ffff8000008110e1:	88 45 e7             	mov    BYTE PTR [rbp-0x19],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:97 (discriminator 4)
    char lba_hi=(lba>>24)&0xf|drv|0xe0;
ffff8000008110e4:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff8000008110e7:	c1 e8 18             	shr    eax,0x18
ffff8000008110ea:	83 e0 0f             	and    eax,0xf
ffff8000008110ed:	89 c2                	mov    edx,eax
ffff8000008110ef:	0f b6 45 e7          	movzx  eax,BYTE PTR [rbp-0x19]
ffff8000008110f3:	09 d0                	or     eax,edx
ffff8000008110f5:	83 c8 e0             	or     eax,0xffffffe0
ffff8000008110f8:	88 45 e6             	mov    BYTE PTR [rbp-0x1a],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:98 (discriminator 4)
    outb(port+6,lba_hi);
ffff8000008110fb:	0f b6 45 e6          	movzx  eax,BYTE PTR [rbp-0x1a]
ffff8000008110ff:	0f b6 d0             	movzx  edx,al
ffff800000811102:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff800000811106:	83 c0 06             	add    eax,0x6
ffff800000811109:	0f b7 c0             	movzx  eax,ax
ffff80000081110c:	89 d6                	mov    esi,edx
ffff80000081110e:	89 c7                	mov    edi,eax
ffff800000811110:	49 89 df             	mov    r15,rbx
ffff800000811113:	48 b8 b0 62 ee ff ff 	movabs rax,0xffffffffffee62b0
ffff80000081111a:	ff ff ff 
ffff80000081111d:	48 01 d8             	add    rax,rbx
ffff800000811120:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:99 (discriminator 4)
    outb(port+7,DISK_CMD_READ);
ffff800000811122:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff800000811126:	83 c0 07             	add    eax,0x7
ffff800000811129:	0f b7 c0             	movzx  eax,ax
ffff80000081112c:	be 20 00 00 00       	mov    esi,0x20
ffff800000811131:	89 c7                	mov    edi,eax
ffff800000811133:	49 89 df             	mov    r15,rbx
ffff800000811136:	48 b8 b0 62 ee ff ff 	movabs rax,0xffffffffffee62b0
ffff80000081113d:	ff ff ff 
ffff800000811140:	48 01 d8             	add    rax,rbx
ffff800000811143:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:119 (discriminator 4)
    // }
    // for(int i=0;i<running_req->sec_n*256;i++)
    // {
    //     *mem_addr++=inw(port);
    // }
    return 0;
ffff800000811145:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:120 (discriminator 4)
}
ffff80000081114a:	48 83 c4 30          	add    rsp,0x30
ffff80000081114e:	5b                   	pop    rbx
ffff80000081114f:	41 5f                	pop    r15
ffff800000811151:	5d                   	pop    rbp
ffff800000811152:	c3                   	ret    

ffff800000811153 <async_write_disk>:
async_write_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:122
int async_write_disk(int disk,unsigned int lba, int sec_n, char* mem_ptr)
{
ffff800000811153:	f3 0f 1e fa          	endbr64 
ffff800000811157:	55                   	push   rbp
ffff800000811158:	48 89 e5             	mov    rbp,rsp
ffff80000081115b:	41 57                	push   r15
ffff80000081115d:	53                   	push   rbx
ffff80000081115e:	48 83 ec 30          	sub    rsp,0x30
ffff800000811162:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000811162 <async_write_disk+0xf>
ffff800000811169:	49 bb ce 23 11 00 00 	movabs r11,0x1123ce
ffff800000811170:	00 00 00 
ffff800000811173:	4c 01 db             	add    rbx,r11
ffff800000811176:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff800000811179:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000081117c:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff80000081117f:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:123
    unsigned short port=PORT_DISK_MAJOR;
ffff800000811183:	66 c7 45 ee f0 01    	mov    WORD PTR [rbp-0x12],0x1f0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:124
    int slave_disk=0;
ffff800000811189:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:125
    if(disk==DISK_SLAVE_MAJOR||disk==DISK_SLAVE_SLAVE)
ffff800000811190:	83 7d dc 02          	cmp    DWORD PTR [rbp-0x24],0x2
ffff800000811194:	74 06                	je     ffff80000081119c <async_write_disk+0x49>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:125 (discriminator 1)
ffff800000811196:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff80000081119a:	75 06                	jne    ffff8000008111a2 <async_write_disk+0x4f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:126
        port=PORT_DISK_SLAVE;
ffff80000081119c:	66 c7 45 ee 70 01    	mov    WORD PTR [rbp-0x12],0x170
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:127
    if(disk==DISK_SLAVE_SLAVE||disk==DISK_MAJOR_SLAVE)
ffff8000008111a2:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff8000008111a6:	74 06                	je     ffff8000008111ae <async_write_disk+0x5b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:127 (discriminator 1)
ffff8000008111a8:	83 7d dc 01          	cmp    DWORD PTR [rbp-0x24],0x1
ffff8000008111ac:	75 07                	jne    ffff8000008111b5 <async_write_disk+0x62>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:128
        slave_disk=1;
ffff8000008111ae:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:131
    while (1)
    {
        byte t=inb(0x1f7);
ffff8000008111b5:	bf f7 00 00 00       	mov    edi,0xf7
ffff8000008111ba:	49 89 df             	mov    r15,rbx
ffff8000008111bd:	48 b8 c9 62 ee ff ff 	movabs rax,0xffffffffffee62c9
ffff8000008111c4:	ff ff ff 
ffff8000008111c7:	48 01 d8             	add    rax,rbx
ffff8000008111ca:	ff d0                	call   rax
ffff8000008111cc:	88 45 e7             	mov    BYTE PTR [rbp-0x19],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:133
        //logf("istat:%x",t);
        byte err=t&1;
ffff8000008111cf:	0f b6 45 e7          	movzx  eax,BYTE PTR [rbp-0x19]
ffff8000008111d3:	83 e0 01             	and    eax,0x1
ffff8000008111d6:	88 45 e6             	mov    BYTE PTR [rbp-0x1a],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:134
        if(err!=0)
ffff8000008111d9:	80 7d e6 00          	cmp    BYTE PTR [rbp-0x1a],0x0
ffff8000008111dd:	74 0a                	je     ffff8000008111e9 <async_write_disk+0x96>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:137
        {
            //printf("ERR iwriting disk\n");
            return -1;
ffff8000008111df:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff8000008111e4:	e9 23 01 00 00       	jmp    ffff80000081130c <async_write_disk+0x1b9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:139
        }
        t&=0x88;
ffff8000008111e9:	80 65 e7 88          	and    BYTE PTR [rbp-0x19],0x88
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:140
        if(t==0x8)break;
ffff8000008111ed:	80 7d e7 08          	cmp    BYTE PTR [rbp-0x19],0x8
ffff8000008111f1:	74 02                	je     ffff8000008111f5 <async_write_disk+0xa2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:130
    {
ffff8000008111f3:	eb c0                	jmp    ffff8000008111b5 <async_write_disk+0x62>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:140
        if(t==0x8)break;
ffff8000008111f5:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:142
    }
    outb(port+2,sec_n);
ffff8000008111f6:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff8000008111f9:	0f b6 d0             	movzx  edx,al
ffff8000008111fc:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff800000811200:	83 c0 02             	add    eax,0x2
ffff800000811203:	0f b7 c0             	movzx  eax,ax
ffff800000811206:	89 d6                	mov    esi,edx
ffff800000811208:	89 c7                	mov    edi,eax
ffff80000081120a:	49 89 df             	mov    r15,rbx
ffff80000081120d:	48 b8 b0 62 ee ff ff 	movabs rax,0xffffffffffee62b0
ffff800000811214:	ff ff ff 
ffff800000811217:	48 01 d8             	add    rax,rbx
ffff80000081121a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:143
    outb(port+3,lba&0xff);
ffff80000081121c:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000081121f:	0f b6 d0             	movzx  edx,al
ffff800000811222:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff800000811226:	83 c0 03             	add    eax,0x3
ffff800000811229:	0f b7 c0             	movzx  eax,ax
ffff80000081122c:	89 d6                	mov    esi,edx
ffff80000081122e:	89 c7                	mov    edi,eax
ffff800000811230:	49 89 df             	mov    r15,rbx
ffff800000811233:	48 b8 b0 62 ee ff ff 	movabs rax,0xffffffffffee62b0
ffff80000081123a:	ff ff ff 
ffff80000081123d:	48 01 d8             	add    rax,rbx
ffff800000811240:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:144
    outb(port+4,(lba>>8)&0xff);
ffff800000811242:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000811245:	c1 e8 08             	shr    eax,0x8
ffff800000811248:	0f b6 d0             	movzx  edx,al
ffff80000081124b:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000081124f:	83 c0 04             	add    eax,0x4
ffff800000811252:	0f b7 c0             	movzx  eax,ax
ffff800000811255:	89 d6                	mov    esi,edx
ffff800000811257:	89 c7                	mov    edi,eax
ffff800000811259:	49 89 df             	mov    r15,rbx
ffff80000081125c:	48 b8 b0 62 ee ff ff 	movabs rax,0xffffffffffee62b0
ffff800000811263:	ff ff ff 
ffff800000811266:	48 01 d8             	add    rax,rbx
ffff800000811269:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:145
    outb(port+5,(lba>>16)&0xff);
ffff80000081126b:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000081126e:	c1 e8 10             	shr    eax,0x10
ffff800000811271:	0f b6 d0             	movzx  edx,al
ffff800000811274:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff800000811278:	83 c0 05             	add    eax,0x5
ffff80000081127b:	0f b7 c0             	movzx  eax,ax
ffff80000081127e:	89 d6                	mov    esi,edx
ffff800000811280:	89 c7                	mov    edi,eax
ffff800000811282:	49 89 df             	mov    r15,rbx
ffff800000811285:	48 b8 b0 62 ee ff ff 	movabs rax,0xffffffffffee62b0
ffff80000081128c:	ff ff ff 
ffff80000081128f:	48 01 d8             	add    rax,rbx
ffff800000811292:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:146
    char drv=slave_disk?0x10:0;
ffff800000811294:	83 7d e8 00          	cmp    DWORD PTR [rbp-0x18],0x0
ffff800000811298:	74 07                	je     ffff8000008112a1 <async_write_disk+0x14e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:146 (discriminator 1)
ffff80000081129a:	b8 10 00 00 00       	mov    eax,0x10
ffff80000081129f:	eb 05                	jmp    ffff8000008112a6 <async_write_disk+0x153>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:146 (discriminator 2)
ffff8000008112a1:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:146 (discriminator 4)
ffff8000008112a6:	88 45 e5             	mov    BYTE PTR [rbp-0x1b],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:147 (discriminator 4)
    unsigned char lba_hi=(lba>>24)&0xf|drv|0xe0;
ffff8000008112a9:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff8000008112ac:	c1 e8 18             	shr    eax,0x18
ffff8000008112af:	83 e0 0f             	and    eax,0xf
ffff8000008112b2:	89 c2                	mov    edx,eax
ffff8000008112b4:	0f b6 45 e5          	movzx  eax,BYTE PTR [rbp-0x1b]
ffff8000008112b8:	09 d0                	or     eax,edx
ffff8000008112ba:	83 c8 e0             	or     eax,0xffffffe0
ffff8000008112bd:	88 45 e4             	mov    BYTE PTR [rbp-0x1c],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:148 (discriminator 4)
    outb(port+6,lba_hi);
ffff8000008112c0:	0f b6 55 e4          	movzx  edx,BYTE PTR [rbp-0x1c]
ffff8000008112c4:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff8000008112c8:	83 c0 06             	add    eax,0x6
ffff8000008112cb:	0f b7 c0             	movzx  eax,ax
ffff8000008112ce:	89 d6                	mov    esi,edx
ffff8000008112d0:	89 c7                	mov    edi,eax
ffff8000008112d2:	49 89 df             	mov    r15,rbx
ffff8000008112d5:	48 b8 b0 62 ee ff ff 	movabs rax,0xffffffffffee62b0
ffff8000008112dc:	ff ff ff 
ffff8000008112df:	48 01 d8             	add    rax,rbx
ffff8000008112e2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:149 (discriminator 4)
    outb(port+7,DISK_CMD_WRITE);
ffff8000008112e4:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff8000008112e8:	83 c0 07             	add    eax,0x7
ffff8000008112eb:	0f b7 c0             	movzx  eax,ax
ffff8000008112ee:	be 30 00 00 00       	mov    esi,0x30
ffff8000008112f3:	89 c7                	mov    edi,eax
ffff8000008112f5:	49 89 df             	mov    r15,rbx
ffff8000008112f8:	48 b8 b0 62 ee ff ff 	movabs rax,0xffffffffffee62b0
ffff8000008112ff:	ff ff ff 
ffff800000811302:	48 01 d8             	add    rax,rbx
ffff800000811305:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:166 (discriminator 4)
    //     if(t==0x8)break;
    // }
    // short *p=mem_ptr;
    // for(int i=0;i<running_req->sec_n*256;i++)
    //         outw(port,*p++);
    return 0;
ffff800000811307:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:167
}
ffff80000081130c:	48 83 c4 30          	add    rsp,0x30
ffff800000811310:	5b                   	pop    rbx
ffff800000811311:	41 5f                	pop    r15
ffff800000811313:	5d                   	pop    rbp
ffff800000811314:	c3                   	ret    

ffff800000811315 <read_disk>:
read_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:169
int read_disk(int disk, int lba, int secn, char *dest)
{
ffff800000811315:	f3 0f 1e fa          	endbr64 
ffff800000811319:	55                   	push   rbp
ffff80000081131a:	48 89 e5             	mov    rbp,rsp
ffff80000081131d:	41 57                	push   r15
ffff80000081131f:	53                   	push   rbx
ffff800000811320:	48 83 ec 30          	sub    rsp,0x30
ffff800000811324:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000811324 <read_disk+0xf>
ffff80000081132b:	49 bb 0c 22 11 00 00 	movabs r11,0x11220c
ffff800000811332:	00 00 00 
ffff800000811335:	4c 01 db             	add    rbx,r11
ffff800000811338:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff80000081133b:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000081133e:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff800000811341:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:171
    // request(disk,DISKREQ_READ,lba,secn,dest);
    int ret=read_disk_asm(lba,secn,dest);
ffff800000811345:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000811349:	8b 4d d4             	mov    ecx,DWORD PTR [rbp-0x2c]
ffff80000081134c:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000081134f:	89 ce                	mov    esi,ecx
ffff800000811351:	89 c7                	mov    edi,eax
ffff800000811353:	49 89 df             	mov    r15,rbx
ffff800000811356:	48 b8 8c e1 ee ff ff 	movabs rax,0xffffffffffeee18c
ffff80000081135d:	ff ff ff 
ffff800000811360:	48 01 d8             	add    rax,rbx
ffff800000811363:	ff d0                	call   rax
ffff800000811365:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:179

        // running_req->stat=REQ_STAT_DONE;
        // running_req->args->stat=REQ_STAT_EMPTY;
    }
    //set_proc_stat(running_req->pid,TASK_READY);
    running_req=NULL;
ffff800000811368:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff80000081136f:	ff ff ff 
ffff800000811372:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000811376:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:180
    return ret;
ffff80000081137d:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:181
}
ffff800000811380:	48 83 c4 30          	add    rsp,0x30
ffff800000811384:	5b                   	pop    rbx
ffff800000811385:	41 5f                	pop    r15
ffff800000811387:	5d                   	pop    rbp
ffff800000811388:	c3                   	ret    

ffff800000811389 <write_disk>:
write_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:183
int write_disk(int disk, int lba, int secn, char *src)
{
ffff800000811389:	f3 0f 1e fa          	endbr64 
ffff80000081138d:	55                   	push   rbp
ffff80000081138e:	48 89 e5             	mov    rbp,rsp
ffff800000811391:	41 57                	push   r15
ffff800000811393:	53                   	push   rbx
ffff800000811394:	48 83 ec 30          	sub    rsp,0x30
ffff800000811398:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000811398 <write_disk+0xf>
ffff80000081139f:	49 bb 98 21 11 00 00 	movabs r11,0x112198
ffff8000008113a6:	00 00 00 
ffff8000008113a9:	4c 01 db             	add    rbx,r11
ffff8000008113ac:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff8000008113af:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff8000008113b2:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff8000008113b5:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:185
    // request(disk,DISKREQ_WRITE,lba,secn,src);
    int ret=write_disk_asm(lba,secn,src);
ffff8000008113b9:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff8000008113bd:	8b 4d d4             	mov    ecx,DWORD PTR [rbp-0x2c]
ffff8000008113c0:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff8000008113c3:	89 ce                	mov    esi,ecx
ffff8000008113c5:	89 c7                	mov    edi,eax
ffff8000008113c7:	49 89 df             	mov    r15,rbx
ffff8000008113ca:	48 b8 00 e2 ee ff ff 	movabs rax,0xffffffffffeee200
ffff8000008113d1:	ff ff ff 
ffff8000008113d4:	48 01 d8             	add    rax,rbx
ffff8000008113d7:	ff d0                	call   rax
ffff8000008113d9:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:192
    if(running_req){

        // running_req->stat=REQ_STAT_DONE;
        // running_req->args->stat=REQ_STAT_EMPTY;
    }
    running_req=NULL;
ffff8000008113dc:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff8000008113e3:	ff ff ff 
ffff8000008113e6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008113ea:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:193
    return ret;
ffff8000008113f1:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:194
}
ffff8000008113f4:	48 83 c4 30          	add    rsp,0x30
ffff8000008113f8:	5b                   	pop    rbx
ffff8000008113f9:	41 5f                	pop    r15
ffff8000008113fb:	5d                   	pop    rbp
ffff8000008113fc:	c3                   	ret    

ffff8000008113fd <async_check_disk>:
async_check_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:198


int async_check_disk(int disk)
{
ffff8000008113fd:	f3 0f 1e fa          	endbr64 
ffff800000811401:	55                   	push   rbp
ffff800000811402:	48 89 e5             	mov    rbp,rsp
ffff800000811405:	41 57                	push   r15
ffff800000811407:	53                   	push   rbx
ffff800000811408:	48 83 ec 20          	sub    rsp,0x20
ffff80000081140c:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000081140c <async_check_disk+0xf>
ffff800000811413:	49 bb 24 21 11 00 00 	movabs r11,0x112124
ffff80000081141a:	00 00 00 
ffff80000081141d:	4c 01 db             	add    rbx,r11
ffff800000811420:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:199
    unsigned short disknr=PORT_DISK_MAJOR;
ffff800000811423:	66 c7 45 ee f0 01    	mov    WORD PTR [rbp-0x12],0x1f0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:200
    unsigned short chkcmd=0xe0;
ffff800000811429:	66 c7 45 ec e0 00    	mov    WORD PTR [rbp-0x14],0xe0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:201
    if(disk==DISK_SLAVE_MAJOR||disk==DISK_SLAVE_SLAVE)
ffff80000081142f:	83 7d dc 02          	cmp    DWORD PTR [rbp-0x24],0x2
ffff800000811433:	74 06                	je     ffff80000081143b <async_check_disk+0x3e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:201 (discriminator 1)
ffff800000811435:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff800000811439:	75 06                	jne    ffff800000811441 <async_check_disk+0x44>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:202
        disknr=PORT_DISK_SLAVE;
ffff80000081143b:	66 c7 45 ee 70 01    	mov    WORD PTR [rbp-0x12],0x170
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:203
    if(disk==DISK_MAJOR_SLAVE||disk==DISK_SLAVE_SLAVE)
ffff800000811441:	83 7d dc 01          	cmp    DWORD PTR [rbp-0x24],0x1
ffff800000811445:	74 06                	je     ffff80000081144d <async_check_disk+0x50>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:203 (discriminator 1)
ffff800000811447:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff80000081144b:	75 06                	jne    ffff800000811453 <async_check_disk+0x56>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:204
        chkcmd=0xf0;
ffff80000081144d:	66 c7 45 ec f0 00    	mov    WORD PTR [rbp-0x14],0xf0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:205
    outb(disknr+2,1);
ffff800000811453:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff800000811457:	83 c0 02             	add    eax,0x2
ffff80000081145a:	0f b7 c0             	movzx  eax,ax
ffff80000081145d:	be 01 00 00 00       	mov    esi,0x1
ffff800000811462:	89 c7                	mov    edi,eax
ffff800000811464:	49 89 df             	mov    r15,rbx
ffff800000811467:	48 b8 b0 62 ee ff ff 	movabs rax,0xffffffffffee62b0
ffff80000081146e:	ff ff ff 
ffff800000811471:	48 01 d8             	add    rax,rbx
ffff800000811474:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:206
    outb(disknr+3,0);
ffff800000811476:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000081147a:	83 c0 03             	add    eax,0x3
ffff80000081147d:	0f b7 c0             	movzx  eax,ax
ffff800000811480:	be 00 00 00 00       	mov    esi,0x0
ffff800000811485:	89 c7                	mov    edi,eax
ffff800000811487:	49 89 df             	mov    r15,rbx
ffff80000081148a:	48 b8 b0 62 ee ff ff 	movabs rax,0xffffffffffee62b0
ffff800000811491:	ff ff ff 
ffff800000811494:	48 01 d8             	add    rax,rbx
ffff800000811497:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:207
    outb(disknr+4,0);
ffff800000811499:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000081149d:	83 c0 04             	add    eax,0x4
ffff8000008114a0:	0f b7 c0             	movzx  eax,ax
ffff8000008114a3:	be 00 00 00 00       	mov    esi,0x0
ffff8000008114a8:	89 c7                	mov    edi,eax
ffff8000008114aa:	49 89 df             	mov    r15,rbx
ffff8000008114ad:	48 b8 b0 62 ee ff ff 	movabs rax,0xffffffffffee62b0
ffff8000008114b4:	ff ff ff 
ffff8000008114b7:	48 01 d8             	add    rax,rbx
ffff8000008114ba:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:208
    outb(disknr+5,0);
ffff8000008114bc:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff8000008114c0:	83 c0 05             	add    eax,0x5
ffff8000008114c3:	0f b7 c0             	movzx  eax,ax
ffff8000008114c6:	be 00 00 00 00       	mov    esi,0x0
ffff8000008114cb:	89 c7                	mov    edi,eax
ffff8000008114cd:	49 89 df             	mov    r15,rbx
ffff8000008114d0:	48 b8 b0 62 ee ff ff 	movabs rax,0xffffffffffee62b0
ffff8000008114d7:	ff ff ff 
ffff8000008114da:	48 01 d8             	add    rax,rbx
ffff8000008114dd:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:209
    outb(disknr+6,chkcmd);//主硬盘
ffff8000008114df:	0f b7 45 ec          	movzx  eax,WORD PTR [rbp-0x14]
ffff8000008114e3:	0f b6 d0             	movzx  edx,al
ffff8000008114e6:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff8000008114ea:	83 c0 06             	add    eax,0x6
ffff8000008114ed:	0f b7 c0             	movzx  eax,ax
ffff8000008114f0:	89 d6                	mov    esi,edx
ffff8000008114f2:	89 c7                	mov    edi,eax
ffff8000008114f4:	49 89 df             	mov    r15,rbx
ffff8000008114f7:	48 b8 b0 62 ee ff ff 	movabs rax,0xffffffffffee62b0
ffff8000008114fe:	ff ff ff 
ffff800000811501:	48 01 d8             	add    rax,rbx
ffff800000811504:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:210
    outb(disknr+7,DISK_CMD_CHECK);
ffff800000811506:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000081150a:	83 c0 07             	add    eax,0x7
ffff80000081150d:	0f b7 c0             	movzx  eax,ax
ffff800000811510:	be 90 00 00 00       	mov    esi,0x90
ffff800000811515:	89 c7                	mov    edi,eax
ffff800000811517:	49 89 df             	mov    r15,rbx
ffff80000081151a:	48 b8 b0 62 ee ff ff 	movabs rax,0xffffffffffee62b0
ffff800000811521:	ff ff ff 
ffff800000811524:	48 01 d8             	add    rax,rbx
ffff800000811527:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:221
    //     // {
    //     //     printf("DISK ERR\n");
    //     //     return -1;
    //     // }
    // }
    return 0;
ffff800000811529:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:222
}
ffff80000081152e:	48 83 c4 20          	add    rsp,0x20
ffff800000811532:	5b                   	pop    rbx
ffff800000811533:	41 5f                	pop    r15
ffff800000811535:	5d                   	pop    rbp
ffff800000811536:	c3                   	ret    

ffff800000811537 <hd_do_req>:
hd_do_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:226

//接口函数：负责接收VFS的请求然后执行
int hd_do_req(struct request* req)
{
ffff800000811537:	f3 0f 1e fa          	endbr64 
ffff80000081153b:	55                   	push   rbp
ffff80000081153c:	48 89 e5             	mov    rbp,rsp
ffff80000081153f:	41 57                	push   r15
ffff800000811541:	48 83 ec 28          	sub    rsp,0x28
ffff800000811545:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000811545 <hd_do_req+0xe>
ffff80000081154c:	49 bb eb 1f 11 00 00 	movabs r11,0x111feb
ffff800000811553:	00 00 00 
ffff800000811556:	4c 01 d8             	add    rax,r11
ffff800000811559:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:227
    if(!req)
ffff80000081155d:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff800000811562:	75 0a                	jne    ffff80000081156e <hd_do_req+0x37>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:228
        return -1;
ffff800000811564:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000811569:	e9 38 01 00 00       	jmp    ffff8000008116a6 <hd_do_req+0x16f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:229
    start_request(req->dev);
ffff80000081156e:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000811572:	0f b7 12             	movzx  edx,WORD PTR [rdx]
ffff800000811575:	0f b7 d2             	movzx  edx,dx
ffff800000811578:	66 89 55 ea          	mov    WORD PTR [rbp-0x16],dx
start_request():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:71
    wait_on_req(blk_devs[BLKDEV_MAJOR(dev)].current_request->waiting);
ffff80000081157c:	0f b7 55 ea          	movzx  edx,WORD PTR [rbp-0x16]
ffff800000811580:	c1 fa 04             	sar    edx,0x4
ffff800000811583:	89 d1                	mov    ecx,edx
ffff800000811585:	83 e1 0f             	and    ecx,0xf
ffff800000811588:	48 ba 70 ff ff ff ff 	movabs rdx,0xffffffffffffff70
ffff80000081158f:	ff ff ff 
ffff800000811592:	48 8b 34 10          	mov    rsi,QWORD PTR [rax+rdx*1]
ffff800000811596:	48 63 d1             	movsxd rdx,ecx
ffff800000811599:	48 c1 e2 04          	shl    rdx,0x4
ffff80000081159d:	48 01 f2             	add    rdx,rsi
ffff8000008115a0:	48 83 c2 08          	add    rdx,0x8
ffff8000008115a4:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008115a7:	48 8b 52 30          	mov    rdx,QWORD PTR [rdx+0x30]
ffff8000008115ab:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
wait_on_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:218
        if(p->stat==TASK_READY||p->stat==TASK_RUNNING)
ffff8000008115af:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008115b3:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff8000008115b6:	83 fa 02             	cmp    edx,0x2
ffff8000008115b9:	74 0c                	je     ffff8000008115c7 <hd_do_req+0x90>
ffff8000008115bb:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008115bf:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff8000008115c2:	83 fa 01             	cmp    edx,0x1
ffff8000008115c5:	75 0b                	jne    ffff8000008115d2 <hd_do_req+0x9b>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:219
            p->stat=TASK_SUSPENDED;
ffff8000008115c7:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008115cb:	c7 42 18 03 00 00 00 	mov    DWORD PTR [rdx+0x18],0x3
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:220
}
ffff8000008115d2:	90                   	nop
start_request():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:72
ffff8000008115d3:	90                   	nop
hd_do_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:230
    int diski=BLKDEV_MINOR(req->dev);
ffff8000008115d4:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff8000008115d8:	0f b7 12             	movzx  edx,WORD PTR [rdx]
ffff8000008115db:	0f b7 d2             	movzx  edx,dx
ffff8000008115de:	83 e2 0f             	and    edx,0xf
ffff8000008115e1:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:233
    // for(;disks[diski]!=args->dev;diski++);

    switch (req->cmd)
ffff8000008115e4:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff8000008115e8:	8b 52 04             	mov    edx,DWORD PTR [rdx+0x4]
ffff8000008115eb:	83 fa 04             	cmp    edx,0x4
ffff8000008115ee:	0f 84 8d 00 00 00    	je     ffff800000811681 <hd_do_req+0x14a>
ffff8000008115f4:	83 fa 04             	cmp    edx,0x4
ffff8000008115f7:	0f 8f 9d 00 00 00    	jg     ffff80000081169a <hd_do_req+0x163>
ffff8000008115fd:	85 d2                	test   edx,edx
ffff8000008115ff:	74 0a                	je     ffff80000081160b <hd_do_req+0xd4>
ffff800000811601:	83 fa 01             	cmp    edx,0x1
ffff800000811604:	74 40                	je     ffff800000811646 <hd_do_req+0x10f>
ffff800000811606:	e9 8f 00 00 00       	jmp    ffff80000081169a <hd_do_req+0x163>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:236
    {
    case BLKDEV_REQ_READ:
        async_read_disk(diski,req->sector,req->nr_sectors,req->buffer);
ffff80000081160b:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000081160f:	48 8b 52 28          	mov    rdx,QWORD PTR [rdx+0x28]
ffff800000811613:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff800000811617:	48 8b 49 18          	mov    rcx,QWORD PTR [rcx+0x18]
ffff80000081161b:	41 89 c8             	mov    r8d,ecx
ffff80000081161e:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff800000811622:	48 8b 49 10          	mov    rcx,QWORD PTR [rcx+0x10]
ffff800000811626:	89 ce                	mov    esi,ecx
ffff800000811628:	8b 7d ec             	mov    edi,DWORD PTR [rbp-0x14]
ffff80000081162b:	48 89 d1             	mov    rcx,rdx
ffff80000081162e:	44 89 c2             	mov    edx,r8d
ffff800000811631:	49 89 c7             	mov    r15,rax
ffff800000811634:	49 b8 9f da ee ff ff 	movabs r8,0xffffffffffeeda9f
ffff80000081163b:	ff ff ff 
ffff80000081163e:	49 01 c0             	add    r8,rax
ffff800000811641:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:237
        break;
ffff800000811644:	eb 5b                	jmp    ffff8000008116a1 <hd_do_req+0x16a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:239
    case BLKDEV_REQ_WRITE:
        async_write_disk(diski,req->sector,req->nr_sectors,req->buffer);
ffff800000811646:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000081164a:	48 8b 52 28          	mov    rdx,QWORD PTR [rdx+0x28]
ffff80000081164e:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff800000811652:	48 8b 49 18          	mov    rcx,QWORD PTR [rcx+0x18]
ffff800000811656:	41 89 c8             	mov    r8d,ecx
ffff800000811659:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff80000081165d:	48 8b 49 10          	mov    rcx,QWORD PTR [rcx+0x10]
ffff800000811661:	89 ce                	mov    esi,ecx
ffff800000811663:	8b 7d ec             	mov    edi,DWORD PTR [rbp-0x14]
ffff800000811666:	48 89 d1             	mov    rcx,rdx
ffff800000811669:	44 89 c2             	mov    edx,r8d
ffff80000081166c:	49 89 c7             	mov    r15,rax
ffff80000081166f:	49 b8 23 dc ee ff ff 	movabs r8,0xffffffffffeedc23
ffff800000811676:	ff ff ff 
ffff800000811679:	49 01 c0             	add    r8,rax
ffff80000081167c:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:240
        break;
ffff80000081167f:	eb 20                	jmp    ffff8000008116a1 <hd_do_req+0x16a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:242
    case DRVF_CHK:
        async_check_disk(diski);
ffff800000811681:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000811684:	89 d7                	mov    edi,edx
ffff800000811686:	49 89 c7             	mov    r15,rax
ffff800000811689:	48 ba cd de ee ff ff 	movabs rdx,0xffffffffffeedecd
ffff800000811690:	ff ff ff 
ffff800000811693:	48 01 c2             	add    rdx,rax
ffff800000811696:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:243
        break;
ffff800000811698:	eb 07                	jmp    ffff8000008116a1 <hd_do_req+0x16a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:244
    default:return -1;
ffff80000081169a:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000081169f:	eb 05                	jmp    ffff8000008116a6 <hd_do_req+0x16f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:246
    }
    return 0;
ffff8000008116a1:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:247
ffff8000008116a6:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff8000008116aa:	c9                   	leave  
ffff8000008116ab:	c3                   	ret    
ffff8000008116ac:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

ffff8000008116b0 <disk_int_handler>:
disk_int_handler():
ffff8000008116b0:	e8 59 81 ff ff       	call   ffff80000080980e <eoi>
ffff8000008116b5:	e8 35 f5 ff ff       	call   ffff800000810bef <disk_int_handler_c>
ffff8000008116ba:	48 cf                	iretq  

ffff8000008116bc <read_disk_asm>:
read_disk_asm():
ffff8000008116bc:	55                   	push   rbp
ffff8000008116bd:	48 89 e5             	mov    rbp,rsp
ffff8000008116c0:	66 ba f7 01          	mov    dx,0x1f7
ffff8000008116c4:	31 c9                	xor    ecx,ecx
ffff8000008116c6:	48 89 f8             	mov    rax,rdi
ffff8000008116c9:	48 89 f1             	mov    rcx,rsi
ffff8000008116cc:	48 89 d3             	mov    rbx,rdx
ffff8000008116cf:	48 89 c6             	mov    rsi,rax
ffff8000008116d2:	66 ba f2 01          	mov    dx,0x1f2
ffff8000008116d6:	88 c8                	mov    al,cl
ffff8000008116d8:	ee                   	out    dx,al
ffff8000008116d9:	66 ba f3 01          	mov    dx,0x1f3
ffff8000008116dd:	89 f0                	mov    eax,esi
ffff8000008116df:	ee                   	out    dx,al
ffff8000008116e0:	66 ff c2             	inc    dx
ffff8000008116e3:	c1 e8 08             	shr    eax,0x8
ffff8000008116e6:	ee                   	out    dx,al
ffff8000008116e7:	66 ff c2             	inc    dx
ffff8000008116ea:	c1 e8 08             	shr    eax,0x8
ffff8000008116ed:	ee                   	out    dx,al
ffff8000008116ee:	66 ff c2             	inc    dx
ffff8000008116f1:	66 c1 e8 08          	shr    ax,0x8
ffff8000008116f5:	24 0f                	and    al,0xf
ffff8000008116f7:	0c e0                	or     al,0xe0
ffff8000008116f9:	ee                   	out    dx,al
ffff8000008116fa:	66 ff c2             	inc    dx
ffff8000008116fd:	b0 20                	mov    al,0x20
ffff8000008116ff:	ee                   	out    dx,al

ffff800000811700 <read_disk_asm.wait>:
read_disk_asm.wait():
ffff800000811700:	90                   	nop
ffff800000811701:	ec                   	in     al,dx
ffff800000811702:	24 88                	and    al,0x88
ffff800000811704:	3c 08                	cmp    al,0x8
ffff800000811706:	75 f8                	jne    ffff800000811700 <read_disk_asm.wait>
ffff800000811708:	66 89 d7             	mov    di,dx
ffff80000081170b:	48 c1 e1 08          	shl    rcx,0x8
ffff80000081170f:	66 ba f0 01          	mov    dx,0x1f0

ffff800000811713 <read_disk_asm.read>:
read_disk_asm.read():
ffff800000811713:	66 ed                	in     ax,dx
ffff800000811715:	66 89 03             	mov    WORD PTR [rbx],ax
ffff800000811718:	48 83 c3 02          	add    rbx,0x2
ffff80000081171c:	e2 f5                	loop   ffff800000811713 <read_disk_asm.read>
ffff80000081171e:	c9                   	leave  
ffff80000081171f:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811724:	c3                   	ret    

ffff800000811725 <read_disk_asm.err_disk_reading>:
read_disk_asm.err_disk_reading():
ffff800000811725:	66 ba f1 01          	mov    dx,0x1f1
ffff800000811729:	48 31 c0             	xor    rax,rax
ffff80000081172c:	66 ed                	in     ax,dx
ffff80000081172e:	c9                   	leave  
ffff80000081172f:	c3                   	ret    

ffff800000811730 <write_disk_asm>:
write_disk_asm():
ffff800000811730:	55                   	push   rbp
ffff800000811731:	48 89 e5             	mov    rbp,rsp
ffff800000811734:	48 89 f8             	mov    rax,rdi
ffff800000811737:	48 89 f1             	mov    rcx,rsi
ffff80000081173a:	48 89 d3             	mov    rbx,rdx
ffff80000081173d:	50                   	push   rax
ffff80000081173e:	66 ba f2 01          	mov    dx,0x1f2
ffff800000811742:	88 c8                	mov    al,cl
ffff800000811744:	ee                   	out    dx,al
ffff800000811745:	58                   	pop    rax
ffff800000811746:	66 ba f3 01          	mov    dx,0x1f3
ffff80000081174a:	ee                   	out    dx,al
ffff80000081174b:	c1 e8 08             	shr    eax,0x8
ffff80000081174e:	66 ba f4 01          	mov    dx,0x1f4
ffff800000811752:	ee                   	out    dx,al
ffff800000811753:	c1 e8 08             	shr    eax,0x8
ffff800000811756:	66 ba f5 01          	mov    dx,0x1f5
ffff80000081175a:	ee                   	out    dx,al
ffff80000081175b:	c1 e8 08             	shr    eax,0x8
ffff80000081175e:	24 0f                	and    al,0xf
ffff800000811760:	0c e0                	or     al,0xe0
ffff800000811762:	66 ba f6 01          	mov    dx,0x1f6
ffff800000811766:	ee                   	out    dx,al
ffff800000811767:	66 ba f7 01          	mov    dx,0x1f7
ffff80000081176b:	b0 30                	mov    al,0x30
ffff80000081176d:	ee                   	out    dx,al

ffff80000081176e <write_disk_asm.not_ready2>:
write_disk_asm.not_ready2():
ffff80000081176e:	90                   	nop
ffff80000081176f:	ec                   	in     al,dx
ffff800000811770:	24 88                	and    al,0x88
ffff800000811772:	3c 08                	cmp    al,0x8
ffff800000811774:	75 f8                	jne    ffff80000081176e <write_disk_asm.not_ready2>
ffff800000811776:	48 c1 e1 08          	shl    rcx,0x8
ffff80000081177a:	66 ba f0 01          	mov    dx,0x1f0

ffff80000081177e <write_disk_asm.go_on_write>:
write_disk_asm.go_on_write():
ffff80000081177e:	66 8b 03             	mov    ax,WORD PTR [rbx]
ffff800000811781:	66 ef                	out    dx,ax
ffff800000811783:	83 c3 02             	add    ebx,0x2
ffff800000811786:	e2 f6                	loop   ffff80000081177e <write_disk_asm.go_on_write>
ffff800000811788:	c9                   	leave  
ffff800000811789:	c3                   	ret    

ffff80000081178a <DISK1_FAT32_read_FAT_Entry>:
DISK1_FAT32_read_FAT_Entry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:14
#include "memory.h"
#include "devman.h"
#include <sys/unistd.h>

unsigned int DISK1_FAT32_read_FAT_Entry(struct FAT32_sb_info * fsbi,unsigned int fat_entry)
{
ffff80000081178a:	f3 0f 1e fa          	endbr64 
ffff80000081178e:	55                   	push   rbp
ffff80000081178f:	48 89 e5             	mov    rbp,rsp
ffff800000811792:	41 57                	push   r15
ffff800000811794:	53                   	push   rbx
ffff800000811795:	48 83 ec 40          	sub    rsp,0x40
ffff800000811799:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000811799 <DISK1_FAT32_read_FAT_Entry+0xf>
ffff8000008117a0:	49 bb 97 1d 11 00 00 	movabs r11,0x111d97
ffff8000008117a7:	00 00 00 
ffff8000008117aa:	4c 01 db             	add    rbx,r11
ffff8000008117ad:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
ffff8000008117b1:	89 75 b4             	mov    DWORD PTR [rbp-0x4c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:15
	size_t fat_size=TO_MPGN(fsbi->sector_per_FAT*SECTOR_SIZE);
ffff8000008117b4:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008117b8:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff8000008117bc:	48 c1 e0 09          	shl    rax,0x9
ffff8000008117c0:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff8000008117c6:	48 c1 e8 0c          	shr    rax,0xc
ffff8000008117ca:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:16
	int sector=fsbi->FAT1_firstsector + (fat_entry >> 7);
ffff8000008117ce:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008117d2:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff8000008117d6:	89 c2                	mov    edx,eax
ffff8000008117d8:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffff8000008117db:	c1 e8 07             	shr    eax,0x7
ffff8000008117de:	01 d0                	add    eax,edx
ffff8000008117e0:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:17
	unsigned int *buf=kmallocat(0,fat_size);
ffff8000008117e3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008117e7:	89 c6                	mov    esi,eax
ffff8000008117e9:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008117ee:	49 89 df             	mov    r15,rbx
ffff8000008117f1:	48 b8 22 ee ed ff ff 	movabs rax,0xffffffffffedee22
ffff8000008117f8:	ff ff ff 
ffff8000008117fb:	48 01 d8             	add    rax,rbx
ffff8000008117fe:	ff d0                	call   rax
ffff800000811800:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:19
	//FIXME 这里的cluster查找存在问题
	blkdev_read(root_sb->dev,sector*SECTOR_SIZE,fat_size,buf);
ffff800000811804:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000811807:	c1 e0 09             	shl    eax,0x9
ffff80000081180a:	48 63 f0             	movsxd rsi,eax
ffff80000081180d:	48 b8 90 fd ff ff ff 	movabs rax,0xfffffffffffffd90
ffff800000811814:	ff ff ff 
ffff800000811817:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000081181b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000081181e:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff800000811822:	0f b7 c0             	movzx  eax,ax
ffff800000811825:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffff800000811829:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000081182d:	89 c7                	mov    edi,eax
ffff80000081182f:	49 89 df             	mov    r15,rbx
ffff800000811832:	48 b8 60 cb ee ff ff 	movabs rax,0xffffffffffeecb60
ffff800000811839:	ff ff ff 
ffff80000081183c:	48 01 d8             	add    rax,rbx
ffff80000081183f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:20
    printf("DISK1_FAT32_read_FAT_Entry fat_entry:%x,%x\n",fat_entry,buf[fat_entry & 0x7f]);
ffff800000811841:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffff800000811844:	83 e0 7f             	and    eax,0x7f
ffff800000811847:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff80000081184e:	00 
ffff80000081184f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811853:	48 01 d0             	add    rax,rdx
ffff800000811856:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000811858:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffff80000081185b:	89 c6                	mov    esi,eax
ffff80000081185d:	48 b8 b0 d7 ff ff ff 	movabs rax,0xffffffffffffd7b0
ffff800000811864:	ff ff ff 
ffff800000811867:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000081186b:	48 89 c7             	mov    rdi,rax
ffff80000081186e:	49 89 df             	mov    r15,rbx
ffff800000811871:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811876:	48 b9 91 e4 ed ff ff 	movabs rcx,0xffffffffffede491
ffff80000081187d:	ff ff ff 
ffff800000811880:	48 01 d9             	add    rcx,rbx
ffff800000811883:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:21
	for(int i=0;i<fat_size;i++){
ffff800000811885:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff80000081188c:	eb 29                	jmp    ffff8000008118b7 <DISK1_FAT32_read_FAT_Entry+0x12d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:22 (discriminator 3)
		kmfree((void*)buf+PAGE_4K_SIZE*i);
ffff80000081188e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000811891:	c1 e0 0c             	shl    eax,0xc
ffff800000811894:	48 63 d0             	movsxd rdx,eax
ffff800000811897:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081189b:	48 01 d0             	add    rax,rdx
ffff80000081189e:	48 89 c7             	mov    rdi,rax
ffff8000008118a1:	49 89 df             	mov    r15,rbx
ffff8000008118a4:	48 b8 37 00 ee ff ff 	movabs rax,0xffffffffffee0037
ffff8000008118ab:	ff ff ff 
ffff8000008118ae:	48 01 d8             	add    rax,rbx
ffff8000008118b1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:21 (discriminator 3)
	for(int i=0;i<fat_size;i++){
ffff8000008118b3:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:21 (discriminator 1)
ffff8000008118b7:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008118ba:	48 98                	cdqe   
ffff8000008118bc:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
ffff8000008118c0:	77 cc                	ja     ffff80000081188e <DISK1_FAT32_read_FAT_Entry+0x104>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:24
	}
	unsigned int fatr=buf[fat_entry & 0x7f] & 0x0fffffff;
ffff8000008118c2:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffff8000008118c5:	83 e0 7f             	and    eax,0x7f
ffff8000008118c8:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff8000008118cf:	00 
ffff8000008118d0:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008118d4:	48 01 d0             	add    rax,rdx
ffff8000008118d7:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008118d9:	25 ff ff ff 0f       	and    eax,0xfffffff
ffff8000008118de:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:25
	return fatr;
ffff8000008118e1:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:26
}
ffff8000008118e4:	48 83 c4 40          	add    rsp,0x40
ffff8000008118e8:	5b                   	pop    rbx
ffff8000008118e9:	41 5f                	pop    r15
ffff8000008118eb:	5d                   	pop    rbp
ffff8000008118ec:	c3                   	ret    

ffff8000008118ed <DISK1_FAT32_write_FAT_Entry>:
DISK1_FAT32_write_FAT_Entry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:30


unsigned long DISK1_FAT32_write_FAT_Entry(struct FAT32_sb_info * fsbi,unsigned int fat_entry,unsigned int value)
{
ffff8000008118ed:	f3 0f 1e fa          	endbr64 
ffff8000008118f1:	55                   	push   rbp
ffff8000008118f2:	48 89 e5             	mov    rbp,rsp
ffff8000008118f5:	41 57                	push   r15
ffff8000008118f7:	53                   	push   rbx
ffff8000008118f8:	48 83 ec 30          	sub    rsp,0x30
ffff8000008118fc:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008118fc <DISK1_FAT32_write_FAT_Entry+0xf>
ffff800000811903:	49 bb 34 1c 11 00 00 	movabs r11,0x111c34
ffff80000081190a:	00 00 00 
ffff80000081190d:	4c 01 db             	add    rbx,r11
ffff800000811910:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000811914:	89 75 c4             	mov    DWORD PTR [rbp-0x3c],esi
ffff800000811917:	89 55 c0             	mov    DWORD PTR [rbp-0x40],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:34
	unsigned int *buf;
	int i;

	buffer_head *bh=bread(root_sb->dev,fsbi->FAT1_firstsector + (fat_entry >> 7));
ffff80000081191a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000081191e:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff800000811922:	89 c2                	mov    edx,eax
ffff800000811924:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff800000811927:	c1 e8 07             	shr    eax,0x7
ffff80000081192a:	01 d0                	add    eax,edx
ffff80000081192c:	89 c2                	mov    edx,eax
ffff80000081192e:	48 b8 90 fd ff ff ff 	movabs rax,0xfffffffffffffd90
ffff800000811935:	ff ff ff 
ffff800000811938:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000081193c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000081193f:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff800000811943:	0f b7 c0             	movzx  eax,ax
ffff800000811946:	89 d6                	mov    esi,edx
ffff800000811948:	89 c7                	mov    edi,eax
ffff80000081194a:	49 89 df             	mov    r15,rbx
ffff80000081194d:	48 b8 28 c8 ee ff ff 	movabs rax,0xffffffffffeec828
ffff800000811954:	ff ff ff 
ffff800000811957:	48 01 d8             	add    rax,rbx
ffff80000081195a:	ff d0                	call   rax
ffff80000081195c:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:35
	buf=bh->data;
ffff800000811960:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000811964:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811967:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:36
    buf[fat_entry & 0x7f] = (buf[fat_entry & 0x7f] & 0xf0000000) | (value & 0x0fffffff);
ffff80000081196b:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000081196e:	83 e0 7f             	and    eax,0x7f
ffff800000811971:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff800000811978:	00 
ffff800000811979:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081197d:	48 01 d0             	add    rax,rdx
ffff800000811980:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000811982:	25 00 00 00 f0       	and    eax,0xf0000000
ffff800000811987:	89 c1                	mov    ecx,eax
ffff800000811989:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
ffff80000081198c:	25 ff ff ff 0f       	and    eax,0xfffffff
ffff800000811991:	89 c2                	mov    edx,eax
ffff800000811993:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff800000811996:	83 e0 7f             	and    eax,0x7f
ffff800000811999:	48 8d 34 85 00 00 00 	lea    rsi,[rax*4+0x0]
ffff8000008119a0:	00 
ffff8000008119a1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008119a5:	48 01 f0             	add    rax,rsi
ffff8000008119a8:	09 ca                	or     edx,ecx
ffff8000008119aa:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:38

	for(i = 0;i < fsbi->NumFATs;i++){
ffff8000008119ac:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff8000008119b3:	eb 70                	jmp    ffff800000811a25 <DISK1_FAT32_write_FAT_Entry+0x138>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:39 (discriminator 3)
		off_t off=(fsbi->FAT1_firstsector + fsbi->sector_per_FAT * i + (fat_entry >> 7))*SECTOR_SIZE;
ffff8000008119b5:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008119b9:	48 8b 48 30          	mov    rcx,QWORD PTR [rax+0x30]
ffff8000008119bd:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008119c1:	48 8b 50 38          	mov    rdx,QWORD PTR [rax+0x38]
ffff8000008119c5:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008119c8:	48 98                	cdqe   
ffff8000008119ca:	48 0f af c2          	imul   rax,rdx
ffff8000008119ce:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
ffff8000008119d2:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff8000008119d5:	c1 e8 07             	shr    eax,0x7
ffff8000008119d8:	89 c0                	mov    eax,eax
ffff8000008119da:	48 01 d0             	add    rax,rdx
ffff8000008119dd:	48 c1 e0 09          	shl    rax,0x9
ffff8000008119e1:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:40 (discriminator 3)
		blkdev_write(root_sb->dev,off,SECTOR_SIZE,buf);
ffff8000008119e5:	48 b8 90 fd ff ff ff 	movabs rax,0xfffffffffffffd90
ffff8000008119ec:	ff ff ff 
ffff8000008119ef:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008119f3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008119f6:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff8000008119fa:	0f b7 c0             	movzx  eax,ax
ffff8000008119fd:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000811a01:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff800000811a05:	48 89 d1             	mov    rcx,rdx
ffff800000811a08:	ba 00 02 00 00       	mov    edx,0x200
ffff800000811a0d:	89 c7                	mov    edi,eax
ffff800000811a0f:	49 89 df             	mov    r15,rbx
ffff800000811a12:	48 b8 bf cc ee ff ff 	movabs rax,0xffffffffffeeccbf
ffff800000811a19:	ff ff ff 
ffff800000811a1c:	48 01 d8             	add    rax,rbx
ffff800000811a1f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:38 (discriminator 3)
	for(i = 0;i < fsbi->NumFATs;i++){
ffff800000811a21:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:38 (discriminator 1)
ffff800000811a25:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000811a28:	48 63 d0             	movsxd rdx,eax
ffff800000811a2b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000811a2f:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000811a33:	48 39 c2             	cmp    rdx,rax
ffff800000811a36:	0f 82 79 ff ff ff    	jb     ffff8000008119b5 <DISK1_FAT32_write_FAT_Entry+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:42
    }
	brelse(bh);
ffff800000811a3c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000811a40:	48 89 c7             	mov    rdi,rax
ffff800000811a43:	49 89 df             	mov    r15,rbx
ffff800000811a46:	48 b8 1e ce ee ff ff 	movabs rax,0xffffffffffeece1e
ffff800000811a4d:	ff ff ff 
ffff800000811a50:	48 01 d8             	add    rax,rbx
ffff800000811a53:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:43
	return 1;
ffff800000811a55:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:44
}
ffff800000811a5a:	48 83 c4 30          	add    rsp,0x30
ffff800000811a5e:	5b                   	pop    rbx
ffff800000811a5f:	41 5f                	pop    r15
ffff800000811a61:	5d                   	pop    rbp
ffff800000811a62:	c3                   	ret    

ffff800000811a63 <FAT32_open>:
FAT32_open():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:48


long FAT32_open(struct index_node * inode,struct file * filp)
{
ffff800000811a63:	f3 0f 1e fa          	endbr64 
ffff800000811a67:	55                   	push   rbp
ffff800000811a68:	48 89 e5             	mov    rbp,rsp
ffff800000811a6b:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000811a6b <FAT32_open+0x8>
ffff800000811a72:	49 bb c5 1a 11 00 00 	movabs r11,0x111ac5
ffff800000811a79:	00 00 00 
ffff800000811a7c:	4c 01 d8             	add    rax,r11
ffff800000811a7f:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000811a83:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:49
	return 1;
ffff800000811a87:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:50
}
ffff800000811a8c:	5d                   	pop    rbp
ffff800000811a8d:	c3                   	ret    

ffff800000811a8e <FAT32_close>:
FAT32_close():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:54


long FAT32_close(struct index_node * inode,struct file * filp)
{
ffff800000811a8e:	f3 0f 1e fa          	endbr64 
ffff800000811a92:	55                   	push   rbp
ffff800000811a93:	48 89 e5             	mov    rbp,rsp
ffff800000811a96:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000811a96 <FAT32_close+0x8>
ffff800000811a9d:	49 bb 9a 1a 11 00 00 	movabs r11,0x111a9a
ffff800000811aa4:	00 00 00 
ffff800000811aa7:	4c 01 d8             	add    rax,r11
ffff800000811aaa:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000811aae:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:55
	return 1;
ffff800000811ab2:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:56
}
ffff800000811ab7:	5d                   	pop    rbp
ffff800000811ab8:	c3                   	ret    

ffff800000811ab9 <FAT32_read>:
FAT32_read():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:60


long FAT32_read(struct file * filp,char * buf,unsigned long count,long * position)
{
ffff800000811ab9:	f3 0f 1e fa          	endbr64 
ffff800000811abd:	55                   	push   rbp
ffff800000811abe:	48 89 e5             	mov    rbp,rsp
ffff800000811ac1:	41 57                	push   r15
ffff800000811ac3:	53                   	push   rbx
ffff800000811ac4:	48 83 ec 70          	sub    rsp,0x70
ffff800000811ac8:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000811ac8 <FAT32_read+0xf>
ffff800000811acf:	49 bb 68 1a 11 00 00 	movabs r11,0x111a68
ffff800000811ad6:	00 00 00 
ffff800000811ad9:	4c 01 db             	add    rbx,r11
ffff800000811adc:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
ffff800000811ae0:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
ffff800000811ae4:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
ffff800000811ae8:	48 89 4d 80          	mov    QWORD PTR [rbp-0x80],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:61
	struct FAT32_inode_info * finode = filp->dentry->dir_inode->private_index_info;
ffff800000811aec:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000811af0:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000811af4:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000811af8:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff800000811afc:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:62
	struct FAT32_sb_info * fsbi = filp->dentry->dir_inode->sb->private_sb_info;
ffff800000811b00:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000811b04:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000811b08:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000811b0c:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000811b10:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000811b14:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:64

	unsigned long cluster = finode->first_cluster;
ffff800000811b18:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000811b1c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811b1f:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:65
	unsigned long sector = 0;
ffff800000811b23:	48 c7 45 b0 00 00 00 	mov    QWORD PTR [rbp-0x50],0x0
ffff800000811b2a:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:66
	int i,length = 0;
ffff800000811b2b:	c7 45 ac 00 00 00 00 	mov    DWORD PTR [rbp-0x54],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:67
	long retval = 0;
ffff800000811b32:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff800000811b39:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:68
	int index = *position / fsbi->bytes_per_cluster;
ffff800000811b3a:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000811b3e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811b41:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff800000811b45:	48 8b 72 18          	mov    rsi,QWORD PTR [rdx+0x18]
ffff800000811b49:	48 99                	cqo    
ffff800000811b4b:	48 f7 fe             	idiv   rsi
ffff800000811b4e:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:69
	long offset = *position % fsbi->bytes_per_cluster;
ffff800000811b51:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000811b55:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811b58:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff800000811b5c:	48 8b 4a 18          	mov    rcx,QWORD PTR [rdx+0x18]
ffff800000811b60:	48 99                	cqo    
ffff800000811b62:	48 f7 f9             	idiv   rcx
ffff800000811b65:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:70
	char * buffer = (char *) kmallocat(0,(fsbi->bytes_per_cluster+PAGE_4K_SIZE-1)/PAGE_4K_SIZE);
ffff800000811b69:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000811b6d:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000811b71:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff800000811b77:	48 8d 90 ff 0f 00 00 	lea    rdx,[rax+0xfff]
ffff800000811b7e:	48 85 c0             	test   rax,rax
ffff800000811b81:	48 0f 48 c2          	cmovs  rax,rdx
ffff800000811b85:	48 c1 f8 0c          	sar    rax,0xc
ffff800000811b89:	89 c6                	mov    esi,eax
ffff800000811b8b:	bf 00 00 00 00       	mov    edi,0x0
ffff800000811b90:	49 89 df             	mov    r15,rbx
ffff800000811b93:	48 b8 22 ee ed ff ff 	movabs rax,0xffffffffffedee22
ffff800000811b9a:	ff ff ff 
ffff800000811b9d:	48 01 d8             	add    rax,rbx
ffff800000811ba0:	ff d0                	call   rax
ffff800000811ba2:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:72

	if(!cluster)
ffff800000811ba6:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff800000811bab:	75 0c                	jne    ffff800000811bb9 <FAT32_read+0x100>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:73
		return -EFAULT;
ffff800000811bad:	48 c7 c0 eb ff ff ff 	mov    rax,0xffffffffffffffeb
ffff800000811bb4:	e9 6f 02 00 00       	jmp    ffff800000811e28 <FAT32_read+0x36f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:74
	for(i = 0;i < index;i++)
ffff800000811bb9:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff800000811bc0:	eb 2b                	jmp    ffff800000811bed <FAT32_read+0x134>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:75 (discriminator 3)
		cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff800000811bc2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811bc6:	89 c2                	mov    edx,eax
ffff800000811bc8:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000811bcc:	89 d6                	mov    esi,edx
ffff800000811bce:	48 89 c7             	mov    rdi,rax
ffff800000811bd1:	49 89 df             	mov    r15,rbx
ffff800000811bd4:	48 b8 5a e2 ee ff ff 	movabs rax,0xffffffffffeee25a
ffff800000811bdb:	ff ff ff 
ffff800000811bde:	48 01 d8             	add    rax,rbx
ffff800000811be1:	ff d0                	call   rax
ffff800000811be3:	89 c0                	mov    eax,eax
ffff800000811be5:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:74 (discriminator 3)
	for(i = 0;i < index;i++)
ffff800000811be9:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:74 (discriminator 1)
ffff800000811bed:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000811bf0:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
ffff800000811bf3:	7c cd                	jl     ffff800000811bc2 <FAT32_read+0x109>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:77

	if(*position + count > filp->dentry->dir_inode->file_size)
ffff800000811bf5:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000811bf9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811bfc:	48 89 c2             	mov    rdx,rax
ffff800000811bff:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000811c03:	48 01 c2             	add    rdx,rax
ffff800000811c06:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000811c0a:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000811c0e:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000811c12:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811c15:	48 39 c2             	cmp    rdx,rax
ffff800000811c18:	76 2c                	jbe    ffff800000811c46 <FAT32_read+0x18d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:78
		index = count = filp->dentry->dir_inode->file_size - *position;
ffff800000811c1a:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000811c1e:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000811c22:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000811c26:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000811c29:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000811c2d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811c30:	48 89 c1             	mov    rcx,rax
ffff800000811c33:	48 89 d0             	mov    rax,rdx
ffff800000811c36:	48 29 c8             	sub    rax,rcx
ffff800000811c39:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
ffff800000811c3d:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000811c41:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
ffff800000811c44:	eb 07                	jmp    ffff800000811c4d <FAT32_read+0x194>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:80
	else
		index = count;
ffff800000811c46:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000811c4a:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:86

//	printf("FAT32_read first_cluster:%d,size:%d,preempt_count:%d\n",finode->first_cluster,filp->dentry->dir_inode->file_size,current->preempt_count);

	do
	{
		memset(buffer,0,fsbi->bytes_per_cluster);
ffff800000811c4d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000811c51:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000811c55:	89 c2                	mov    edx,eax
ffff800000811c57:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000811c5b:	be 00 00 00 00       	mov    esi,0x0
ffff800000811c60:	48 89 c7             	mov    rdi,rax
ffff800000811c63:	49 89 df             	mov    r15,rbx
ffff800000811c66:	48 b8 b1 1d ef ff ff 	movabs rax,0xffffffffffef1db1
ffff800000811c6d:	ff ff ff 
ffff800000811c70:	48 01 d8             	add    rax,rbx
ffff800000811c73:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:87
		sector = fsbi->Data_firstsector + (cluster - 2) * fsbi->sector_per_cluster;
ffff800000811c75:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000811c79:	48 8b 48 28          	mov    rcx,QWORD PTR [rax+0x28]
ffff800000811c7d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811c81:	48 8d 50 fe          	lea    rdx,[rax-0x2]
ffff800000811c85:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000811c89:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000811c8d:	48 0f af c2          	imul   rax,rdx
ffff800000811c91:	48 01 c8             	add    rax,rcx
ffff800000811c94:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:88
		if(blkdev_read(filp->dentry->dir_inode->dev,sector*SECTOR_SIZE,fsbi->sector_per_cluster*SECTOR_SIZE,buffer)<0)
ffff800000811c98:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000811c9c:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000811ca0:	48 c1 e0 09          	shl    rax,0x9
ffff800000811ca4:	48 89 c7             	mov    rdi,rax
ffff800000811ca7:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000811cab:	48 c1 e0 09          	shl    rax,0x9
ffff800000811caf:	48 89 c6             	mov    rsi,rax
ffff800000811cb2:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000811cb6:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000811cba:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000811cbe:	0f b7 40 18          	movzx  eax,WORD PTR [rax+0x18]
ffff800000811cc2:	0f b7 c0             	movzx  eax,ax
ffff800000811cc5:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
ffff800000811cc9:	48 89 d1             	mov    rcx,rdx
ffff800000811ccc:	48 89 fa             	mov    rdx,rdi
ffff800000811ccf:	89 c7                	mov    edi,eax
ffff800000811cd1:	49 89 df             	mov    r15,rbx
ffff800000811cd4:	48 b8 60 cb ee ff ff 	movabs rax,0xffffffffffeecb60
ffff800000811cdb:	ff ff ff 
ffff800000811cde:	48 01 d8             	add    rax,rbx
ffff800000811ce1:	ff d0                	call   rax
ffff800000811ce3:	85 c0                	test   eax,eax
ffff800000811ce5:	79 35                	jns    ffff800000811d1c <FAT32_read+0x263>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:90
		{
			printf("FAT32 FS(read) read disk ERROR!!!!!!!!!!\n");
ffff800000811ce7:	48 b8 e0 d7 ff ff ff 	movabs rax,0xffffffffffffd7e0
ffff800000811cee:	ff ff ff 
ffff800000811cf1:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000811cf5:	48 89 c7             	mov    rdi,rax
ffff800000811cf8:	49 89 df             	mov    r15,rbx
ffff800000811cfb:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811d00:	48 ba 91 e4 ed ff ff 	movabs rdx,0xffffffffffede491
ffff800000811d07:	ff ff ff 
ffff800000811d0a:	48 01 da             	add    rdx,rbx
ffff800000811d0d:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:91
			retval = -EIO;
ffff800000811d0f:	48 c7 45 d8 e3 ff ff 	mov    QWORD PTR [rbp-0x28],0xffffffffffffffe3
ffff800000811d16:	ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:92
			break;
ffff800000811d17:	e9 e1 00 00 00       	jmp    ffff800000811dfd <FAT32_read+0x344>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:95
		}

		length = index <= fsbi->bytes_per_cluster - offset ? index : fsbi->bytes_per_cluster - offset;
ffff800000811d1c:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000811d1f:	48 63 d0             	movsxd rdx,eax
ffff800000811d22:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000811d26:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000811d2a:	48 2b 45 c8          	sub    rax,QWORD PTR [rbp-0x38]
ffff800000811d2e:	48 39 c2             	cmp    rdx,rax
ffff800000811d31:	48 0f 4e c2          	cmovle rax,rdx
ffff800000811d35:	89 45 ac             	mov    DWORD PTR [rbp-0x54],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:97

		if((unsigned long)buf < MAX_TASKS)
ffff800000811d38:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811d3c:	48 83 f8 1f          	cmp    rax,0x1f
ffff800000811d40:	77 2c                	ja     ffff800000811d6e <FAT32_read+0x2b5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:98
			memcpy(buf,buffer + offset,length);
ffff800000811d42:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
ffff800000811d45:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
ffff800000811d49:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000811d4d:	48 01 c1             	add    rcx,rax
ffff800000811d50:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811d54:	48 89 ce             	mov    rsi,rcx
ffff800000811d57:	48 89 c7             	mov    rdi,rax
ffff800000811d5a:	49 89 df             	mov    r15,rbx
ffff800000811d5d:	48 b8 02 1d ef ff ff 	movabs rax,0xffffffffffef1d02
ffff800000811d64:	ff ff ff 
ffff800000811d67:	48 01 d8             	add    rax,rbx
ffff800000811d6a:	ff d0                	call   rax
ffff800000811d6c:	eb 2a                	jmp    ffff800000811d98 <FAT32_read+0x2df>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:100
		else
			memcpy(buf,buffer + offset,length);
ffff800000811d6e:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
ffff800000811d71:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
ffff800000811d75:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000811d79:	48 01 c1             	add    rcx,rax
ffff800000811d7c:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811d80:	48 89 ce             	mov    rsi,rcx
ffff800000811d83:	48 89 c7             	mov    rdi,rax
ffff800000811d86:	49 89 df             	mov    r15,rbx
ffff800000811d89:	48 b8 02 1d ef ff ff 	movabs rax,0xffffffffffef1d02
ffff800000811d90:	ff ff ff 
ffff800000811d93:	48 01 d8             	add    rax,rbx
ffff800000811d96:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:102

		index -= length;
ffff800000811d98:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
ffff800000811d9b:	29 45 d4             	sub    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:103
		buf += length;
ffff800000811d9e:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
ffff800000811da1:	48 98                	cdqe   
ffff800000811da3:	48 01 45 90          	add    QWORD PTR [rbp-0x70],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:104
		offset -= offset;
ffff800000811da7:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff800000811dae:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:105
		*position += length;
ffff800000811daf:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000811db3:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000811db6:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
ffff800000811db9:	48 98                	cdqe   
ffff800000811dbb:	48 01 c2             	add    rdx,rax
ffff800000811dbe:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000811dc2:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:106
	}while(index && (cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster)));
ffff800000811dc5:	83 7d d4 00          	cmp    DWORD PTR [rbp-0x2c],0x0
ffff800000811dc9:	74 32                	je     ffff800000811dfd <FAT32_read+0x344>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:106 (discriminator 1)
ffff800000811dcb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811dcf:	89 c2                	mov    edx,eax
ffff800000811dd1:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000811dd5:	89 d6                	mov    esi,edx
ffff800000811dd7:	48 89 c7             	mov    rdi,rax
ffff800000811dda:	49 89 df             	mov    r15,rbx
ffff800000811ddd:	48 b8 5a e2 ee ff ff 	movabs rax,0xffffffffffeee25a
ffff800000811de4:	ff ff ff 
ffff800000811de7:	48 01 d8             	add    rax,rbx
ffff800000811dea:	ff d0                	call   rax
ffff800000811dec:	89 c0                	mov    eax,eax
ffff800000811dee:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff800000811df2:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff800000811df7:	0f 85 50 fe ff ff    	jne    ffff800000811c4d <FAT32_read+0x194>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:108

    kmfree(buffer);
ffff800000811dfd:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000811e01:	48 89 c7             	mov    rdi,rax
ffff800000811e04:	49 89 df             	mov    r15,rbx
ffff800000811e07:	48 b8 37 00 ee ff ff 	movabs rax,0xffffffffffee0037
ffff800000811e0e:	ff ff ff 
ffff800000811e11:	48 01 d8             	add    rax,rbx
ffff800000811e14:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:109
	if(!index)
ffff800000811e16:	83 7d d4 00          	cmp    DWORD PTR [rbp-0x2c],0x0
ffff800000811e1a:	75 08                	jne    ffff800000811e24 <FAT32_read+0x36b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:110
		retval = count;
ffff800000811e1c:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000811e20:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:111
	return retval;
ffff800000811e24:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:112
}
ffff800000811e28:	48 83 c4 70          	add    rsp,0x70
ffff800000811e2c:	5b                   	pop    rbx
ffff800000811e2d:	41 5f                	pop    r15
ffff800000811e2f:	5d                   	pop    rbp
ffff800000811e30:	c3                   	ret    

ffff800000811e31 <FAT32_find_available_cluster>:
FAT32_find_available_cluster():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:116


unsigned long FAT32_find_available_cluster(struct FAT32_sb_info * fsbi)
{
ffff800000811e31:	f3 0f 1e fa          	endbr64 
ffff800000811e35:	55                   	push   rbp
ffff800000811e36:	48 89 e5             	mov    rbp,rsp
ffff800000811e39:	41 57                	push   r15
ffff800000811e3b:	53                   	push   rbx
ffff800000811e3c:	48 81 ec 20 02 00 00 	sub    rsp,0x220
ffff800000811e43:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000811e43 <FAT32_find_available_cluster+0x12>
ffff800000811e4a:	49 bb ed 16 11 00 00 	movabs r11,0x1116ed
ffff800000811e51:	00 00 00 
ffff800000811e54:	4c 01 db             	add    rbx,r11
ffff800000811e57:	48 89 bd d8 fd ff ff 	mov    QWORD PTR [rbp-0x228],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:119
	int i,j;
	int fat_entry;
	unsigned long sector_per_fat = fsbi->sector_per_FAT;
ffff800000811e5e:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffff800000811e65:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff800000811e69:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:124
	unsigned int buf[128];

//	fsbi->fat_fsinfo->FSI_Free_Count & fsbi->fat_fsinfo->FSI_Nxt_Free not exactly,so unuse

	for(i = 0;i < sector_per_fat;i++)
ffff800000811e6d:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000811e74:	e9 b8 00 00 00       	jmp    ffff800000811f31 <FAT32_find_available_cluster+0x100>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:126
	{
		memset(buf,0,512);
ffff800000811e79:	48 8d 85 e0 fd ff ff 	lea    rax,[rbp-0x220]
ffff800000811e80:	ba 00 02 00 00       	mov    edx,0x200
ffff800000811e85:	be 00 00 00 00       	mov    esi,0x0
ffff800000811e8a:	48 89 c7             	mov    rdi,rax
ffff800000811e8d:	49 89 df             	mov    r15,rbx
ffff800000811e90:	48 b8 b1 1d ef ff ff 	movabs rax,0xffffffffffef1db1
ffff800000811e97:	ff ff ff 
ffff800000811e9a:	48 01 d8             	add    rax,rbx
ffff800000811e9d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:127
		blkdev_read(root_sb->dev,(fsbi->FAT1_firstsector + i)*SECTOR_SIZE,SECTOR_SIZE,buf);
ffff800000811e9f:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffff800000811ea6:	48 8b 50 30          	mov    rdx,QWORD PTR [rax+0x30]
ffff800000811eaa:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000811ead:	48 98                	cdqe   
ffff800000811eaf:	48 01 d0             	add    rax,rdx
ffff800000811eb2:	48 c1 e0 09          	shl    rax,0x9
ffff800000811eb6:	48 89 c6             	mov    rsi,rax
ffff800000811eb9:	48 b8 90 fd ff ff ff 	movabs rax,0xfffffffffffffd90
ffff800000811ec0:	ff ff ff 
ffff800000811ec3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000811ec7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811eca:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff800000811ece:	0f b7 c0             	movzx  eax,ax
ffff800000811ed1:	48 8d 95 e0 fd ff ff 	lea    rdx,[rbp-0x220]
ffff800000811ed8:	48 89 d1             	mov    rcx,rdx
ffff800000811edb:	ba 00 02 00 00       	mov    edx,0x200
ffff800000811ee0:	89 c7                	mov    edi,eax
ffff800000811ee2:	49 89 df             	mov    r15,rbx
ffff800000811ee5:	48 b8 60 cb ee ff ff 	movabs rax,0xffffffffffeecb60
ffff800000811eec:	ff ff ff 
ffff800000811eef:	48 01 d8             	add    rax,rbx
ffff800000811ef2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:129

		for(j = 0;j < 128;j++)
ffff800000811ef4:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff800000811efb:	eb 2a                	jmp    ffff800000811f27 <FAT32_find_available_cluster+0xf6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:131
		{
			if((buf[j] & 0x0fffffff) == 0)
ffff800000811efd:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000811f00:	48 98                	cdqe   
ffff800000811f02:	8b 84 85 e0 fd ff ff 	mov    eax,DWORD PTR [rbp+rax*4-0x220]
ffff800000811f09:	25 ff ff ff 0f       	and    eax,0xfffffff
ffff800000811f0e:	85 c0                	test   eax,eax
ffff800000811f10:	75 11                	jne    ffff800000811f23 <FAT32_find_available_cluster+0xf2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:132
				return (i << 7) + j;
ffff800000811f12:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000811f15:	c1 e0 07             	shl    eax,0x7
ffff800000811f18:	89 c2                	mov    edx,eax
ffff800000811f1a:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000811f1d:	01 d0                	add    eax,edx
ffff800000811f1f:	48 98                	cdqe   
ffff800000811f21:	eb 22                	jmp    ffff800000811f45 <FAT32_find_available_cluster+0x114>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:129 (discriminator 2)
		for(j = 0;j < 128;j++)
ffff800000811f23:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:129 (discriminator 1)
ffff800000811f27:	83 7d e8 7f          	cmp    DWORD PTR [rbp-0x18],0x7f
ffff800000811f2b:	7e d0                	jle    ffff800000811efd <FAT32_find_available_cluster+0xcc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:124 (discriminator 2)
	for(i = 0;i < sector_per_fat;i++)
ffff800000811f2d:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:124 (discriminator 1)
ffff800000811f31:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000811f34:	48 98                	cdqe   
ffff800000811f36:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
ffff800000811f3a:	0f 87 39 ff ff ff    	ja     ffff800000811e79 <FAT32_find_available_cluster+0x48>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:135
		}
	}
	return 0;
ffff800000811f40:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:136 (discriminator 1)
}
ffff800000811f45:	48 81 c4 20 02 00 00 	add    rsp,0x220
ffff800000811f4c:	5b                   	pop    rbx
ffff800000811f4d:	41 5f                	pop    r15
ffff800000811f4f:	5d                   	pop    rbp
ffff800000811f50:	c3                   	ret    

ffff800000811f51 <FAT32_write>:
FAT32_write():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:140


long FAT32_write(struct file * filp,char * buf,unsigned long count,long * position)
{
ffff800000811f51:	f3 0f 1e fa          	endbr64 
ffff800000811f55:	55                   	push   rbp
ffff800000811f56:	48 89 e5             	mov    rbp,rsp
ffff800000811f59:	41 57                	push   r15
ffff800000811f5b:	53                   	push   rbx
ffff800000811f5c:	48 83 c4 80          	add    rsp,0xffffffffffffff80
ffff800000811f60:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000811f60 <FAT32_write+0xf>
ffff800000811f67:	49 bb d0 15 11 00 00 	movabs r11,0x1115d0
ffff800000811f6e:	00 00 00 
ffff800000811f71:	4c 01 db             	add    rbx,r11
ffff800000811f74:	48 89 7d 88          	mov    QWORD PTR [rbp-0x78],rdi
ffff800000811f78:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
ffff800000811f7c:	48 89 95 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdx
ffff800000811f83:	48 89 8d 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:141
	struct FAT32_inode_info * finode = filp->dentry->dir_inode->private_index_info;
ffff800000811f8a:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000811f8e:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000811f92:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000811f96:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff800000811f9a:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:142
	struct FAT32_sb_info * fsbi = filp->dentry->dir_inode->sb->private_sb_info;
ffff800000811f9e:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000811fa2:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000811fa6:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000811faa:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000811fae:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000811fb2:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:144

	unsigned long cluster = finode->first_cluster;
ffff800000811fb6:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000811fba:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811fbd:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:145
	unsigned long next_cluster = 0;
ffff800000811fc1:	48 c7 45 a0 00 00 00 	mov    QWORD PTR [rbp-0x60],0x0
ffff800000811fc8:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:146
	unsigned long sector = 0;
ffff800000811fc9:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff800000811fd0:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:147
	int i,length = 0;
ffff800000811fd1:	c7 45 9c 00 00 00 00 	mov    DWORD PTR [rbp-0x64],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:148
	long retval = 0;
ffff800000811fd8:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff800000811fdf:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:149
	long flags = 0;
ffff800000811fe0:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff800000811fe7:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:150
	int index = *position / fsbi->bytes_per_cluster;
ffff800000811fe8:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000811fef:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811ff2:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff800000811ff6:	48 8b 72 18          	mov    rsi,QWORD PTR [rdx+0x18]
ffff800000811ffa:	48 99                	cqo    
ffff800000811ffc:	48 f7 fe             	idiv   rsi
ffff800000811fff:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:151
	long offset = *position % fsbi->bytes_per_cluster;
ffff800000812002:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000812009:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000081200c:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff800000812010:	48 8b 4a 18          	mov    rcx,QWORD PTR [rdx+0x18]
ffff800000812014:	48 99                	cqo    
ffff800000812016:	48 f7 f9             	idiv   rcx
ffff800000812019:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:152
	char * buffer = (char *) kmallocat(0,TO_MPGN(fsbi->bytes_per_cluster));
ffff80000081201d:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000812021:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000812025:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff80000081202b:	48 8d 90 ff 0f 00 00 	lea    rdx,[rax+0xfff]
ffff800000812032:	48 85 c0             	test   rax,rax
ffff800000812035:	48 0f 48 c2          	cmovs  rax,rdx
ffff800000812039:	48 c1 f8 0c          	sar    rax,0xc
ffff80000081203d:	89 c6                	mov    esi,eax
ffff80000081203f:	bf 00 00 00 00       	mov    edi,0x0
ffff800000812044:	49 89 df             	mov    r15,rbx
ffff800000812047:	48 b8 22 ee ed ff ff 	movabs rax,0xffffffffffedee22
ffff80000081204e:	ff ff ff 
ffff800000812051:	48 01 d8             	add    rax,rbx
ffff800000812054:	ff d0                	call   rax
ffff800000812056:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:154

	if(!cluster)
ffff80000081205a:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000081205f:	75 27                	jne    ffff800000812088 <FAT32_write+0x137>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:156
	{
		cluster = FAT32_find_available_cluster(fsbi);
ffff800000812061:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000812065:	48 89 c7             	mov    rdi,rax
ffff800000812068:	49 89 df             	mov    r15,rbx
ffff80000081206b:	48 b8 01 e9 ee ff ff 	movabs rax,0xffffffffffeee901
ffff800000812072:	ff ff ff 
ffff800000812075:	48 01 d8             	add    rax,rbx
ffff800000812078:	ff d0                	call   rax
ffff80000081207a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:157
		flags = 1;
ffff80000081207e:	48 c7 45 c8 01 00 00 	mov    QWORD PTR [rbp-0x38],0x1
ffff800000812085:	00 
ffff800000812086:	eb 3c                	jmp    ffff8000008120c4 <FAT32_write+0x173>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:160
	}
	else
		for(i = 0;i < index;i++)
ffff800000812088:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
ffff80000081208f:	eb 2b                	jmp    ffff8000008120bc <FAT32_write+0x16b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:161 (discriminator 3)
			cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff800000812091:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812095:	89 c2                	mov    edx,eax
ffff800000812097:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000081209b:	89 d6                	mov    esi,edx
ffff80000081209d:	48 89 c7             	mov    rdi,rax
ffff8000008120a0:	49 89 df             	mov    r15,rbx
ffff8000008120a3:	48 b8 5a e2 ee ff ff 	movabs rax,0xffffffffffeee25a
ffff8000008120aa:	ff ff ff 
ffff8000008120ad:	48 01 d8             	add    rax,rbx
ffff8000008120b0:	ff d0                	call   rax
ffff8000008120b2:	89 c0                	mov    eax,eax
ffff8000008120b4:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:160 (discriminator 3)
		for(i = 0;i < index;i++)
ffff8000008120b8:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:160 (discriminator 1)
ffff8000008120bc:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008120bf:	3b 45 c4             	cmp    eax,DWORD PTR [rbp-0x3c]
ffff8000008120c2:	7c cd                	jl     ffff800000812091 <FAT32_write+0x140>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:163

	if(!cluster)
ffff8000008120c4:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff8000008120c9:	75 25                	jne    ffff8000008120f0 <FAT32_write+0x19f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:165
	{
        kmfree(buffer);
ffff8000008120cb:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008120cf:	48 89 c7             	mov    rdi,rax
ffff8000008120d2:	49 89 df             	mov    r15,rbx
ffff8000008120d5:	48 b8 37 00 ee ff ff 	movabs rax,0xffffffffffee0037
ffff8000008120dc:	ff ff ff 
ffff8000008120df:	48 01 d8             	add    rax,rbx
ffff8000008120e2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:166
		return -ENOSPC;
ffff8000008120e4:	48 c7 c0 cc ff ff ff 	mov    rax,0xffffffffffffffcc
ffff8000008120eb:	e9 fb 03 00 00       	jmp    ffff8000008124eb <FAT32_write+0x59a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:169
	}

	if(flags)
ffff8000008120f0:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffff8000008120f5:	74 5a                	je     ffff800000812151 <FAT32_write+0x200>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:171
	{
		finode->first_cluster = cluster;
ffff8000008120f7:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff8000008120fb:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff8000008120ff:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:172
		filp->dentry->dir_inode->sb->sb_ops->write_inode(filp->dentry->dir_inode);
ffff800000812102:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000812106:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000081210a:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000081210e:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000812112:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000812116:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000081211a:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000081211e:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000812122:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000812126:	48 89 c7             	mov    rdi,rax
ffff800000812129:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:173
		DISK1_FAT32_write_FAT_Entry(fsbi,cluster,0x0ffffff8);
ffff80000081212b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081212f:	89 c1                	mov    ecx,eax
ffff800000812131:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000812135:	ba f8 ff ff 0f       	mov    edx,0xffffff8
ffff80000081213a:	89 ce                	mov    esi,ecx
ffff80000081213c:	48 89 c7             	mov    rdi,rax
ffff80000081213f:	49 89 df             	mov    r15,rbx
ffff800000812142:	48 b8 bd e3 ee ff ff 	movabs rax,0xffffffffffeee3bd
ffff800000812149:	ff ff ff 
ffff80000081214c:	48 01 d8             	add    rax,rbx
ffff80000081214f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:176
	}

	index = count;
ffff800000812151:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000812158:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:180

	do
	{
		if(!flags)
ffff80000081215b:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffff800000812160:	0f 85 cf 00 00 00    	jne    ffff800000812235 <FAT32_write+0x2e4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:182
		{
			memset(buffer,0,fsbi->bytes_per_cluster);
ffff800000812166:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000081216a:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000081216e:	89 c2                	mov    edx,eax
ffff800000812170:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000812174:	be 00 00 00 00       	mov    esi,0x0
ffff800000812179:	48 89 c7             	mov    rdi,rax
ffff80000081217c:	49 89 df             	mov    r15,rbx
ffff80000081217f:	48 b8 b1 1d ef ff ff 	movabs rax,0xffffffffffef1db1
ffff800000812186:	ff ff ff 
ffff800000812189:	48 01 d8             	add    rax,rbx
ffff80000081218c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:183
			sector = fsbi->Data_firstsector + (cluster - 2) * fsbi->sector_per_cluster;
ffff80000081218e:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000812192:	48 8b 48 28          	mov    rcx,QWORD PTR [rax+0x28]
ffff800000812196:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081219a:	48 8d 50 fe          	lea    rdx,[rax-0x2]
ffff80000081219e:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008121a2:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008121a6:	48 0f af c2          	imul   rax,rdx
ffff8000008121aa:	48 01 c8             	add    rax,rcx
ffff8000008121ad:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:185
			
			if(blkdev_read(filp->dentry->dir_inode->dev,sector*SECTOR_SIZE,fsbi->sector_per_cluster*SECTOR_SIZE,buffer)<0)
ffff8000008121b1:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008121b5:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008121b9:	48 c1 e0 09          	shl    rax,0x9
ffff8000008121bd:	48 89 c7             	mov    rdi,rax
ffff8000008121c0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008121c4:	48 c1 e0 09          	shl    rax,0x9
ffff8000008121c8:	48 89 c6             	mov    rsi,rax
ffff8000008121cb:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff8000008121cf:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008121d3:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008121d7:	0f b7 40 18          	movzx  eax,WORD PTR [rax+0x18]
ffff8000008121db:	0f b7 c0             	movzx  eax,ax
ffff8000008121de:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
ffff8000008121e2:	48 89 d1             	mov    rcx,rdx
ffff8000008121e5:	48 89 fa             	mov    rdx,rdi
ffff8000008121e8:	89 c7                	mov    edi,eax
ffff8000008121ea:	49 89 df             	mov    r15,rbx
ffff8000008121ed:	48 b8 60 cb ee ff ff 	movabs rax,0xffffffffffeecb60
ffff8000008121f4:	ff ff ff 
ffff8000008121f7:	48 01 d8             	add    rax,rbx
ffff8000008121fa:	ff d0                	call   rax
ffff8000008121fc:	85 c0                	test   eax,eax
ffff8000008121fe:	79 35                	jns    ffff800000812235 <FAT32_write+0x2e4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:187
			{
				printf("FAT32 FS(write) read disk ERROR!!!!!!!!!!\n");
ffff800000812200:	48 b8 10 d8 ff ff ff 	movabs rax,0xffffffffffffd810
ffff800000812207:	ff ff ff 
ffff80000081220a:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000081220e:	48 89 c7             	mov    rdi,rax
ffff800000812211:	49 89 df             	mov    r15,rbx
ffff800000812214:	b8 00 00 00 00       	mov    eax,0x0
ffff800000812219:	48 ba 91 e4 ed ff ff 	movabs rdx,0xffffffffffede491
ffff800000812220:	ff ff ff 
ffff800000812223:	48 01 da             	add    rdx,rbx
ffff800000812226:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:188
				retval = -EIO;
ffff800000812228:	48 c7 45 d0 e3 ff ff 	mov    QWORD PTR [rbp-0x30],0xffffffffffffffe3
ffff80000081222f:	ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:189
				break;
ffff800000812230:	e9 25 02 00 00       	jmp    ffff80000081245a <FAT32_write+0x509>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:193
			}
		}

		length = index <= fsbi->bytes_per_cluster - offset ? index : fsbi->bytes_per_cluster - offset;
ffff800000812235:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff800000812238:	48 63 d0             	movsxd rdx,eax
ffff80000081223b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000081223f:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000812243:	48 2b 45 b8          	sub    rax,QWORD PTR [rbp-0x48]
ffff800000812247:	48 39 c2             	cmp    rdx,rax
ffff80000081224a:	48 0f 4e c2          	cmovle rax,rdx
ffff80000081224e:	89 45 9c             	mov    DWORD PTR [rbp-0x64],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:195

		if((unsigned long)buf < MAX_TASKS)
ffff800000812251:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000812255:	48 83 f8 1f          	cmp    rax,0x1f
ffff800000812259:	77 2c                	ja     ffff800000812287 <FAT32_write+0x336>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:196
			memcpy(buf,buffer + offset,length);
ffff80000081225b:	8b 55 9c             	mov    edx,DWORD PTR [rbp-0x64]
ffff80000081225e:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
ffff800000812262:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000812266:	48 01 c1             	add    rcx,rax
ffff800000812269:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000081226d:	48 89 ce             	mov    rsi,rcx
ffff800000812270:	48 89 c7             	mov    rdi,rax
ffff800000812273:	49 89 df             	mov    r15,rbx
ffff800000812276:	48 b8 02 1d ef ff ff 	movabs rax,0xffffffffffef1d02
ffff80000081227d:	ff ff ff 
ffff800000812280:	48 01 d8             	add    rax,rbx
ffff800000812283:	ff d0                	call   rax
ffff800000812285:	eb 2a                	jmp    ffff8000008122b1 <FAT32_write+0x360>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:198
		else
			memcpy(buf,buffer + offset,length);
ffff800000812287:	8b 55 9c             	mov    edx,DWORD PTR [rbp-0x64]
ffff80000081228a:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
ffff80000081228e:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000812292:	48 01 c1             	add    rcx,rax
ffff800000812295:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000812299:	48 89 ce             	mov    rsi,rcx
ffff80000081229c:	48 89 c7             	mov    rdi,rax
ffff80000081229f:	49 89 df             	mov    r15,rbx
ffff8000008122a2:	48 b8 02 1d ef ff ff 	movabs rax,0xffffffffffef1d02
ffff8000008122a9:	ff ff ff 
ffff8000008122ac:	48 01 d8             	add    rax,rbx
ffff8000008122af:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:199
        if(blkdev_write(filp->dentry->dir_inode->dev,sector*SECTOR_SIZE,fsbi->sector_per_cluster*SECTOR_SIZE,buffer)<0)
ffff8000008122b1:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008122b5:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008122b9:	48 c1 e0 09          	shl    rax,0x9
ffff8000008122bd:	48 89 c7             	mov    rdi,rax
ffff8000008122c0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008122c4:	48 c1 e0 09          	shl    rax,0x9
ffff8000008122c8:	48 89 c6             	mov    rsi,rax
ffff8000008122cb:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff8000008122cf:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008122d3:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008122d7:	0f b7 40 18          	movzx  eax,WORD PTR [rax+0x18]
ffff8000008122db:	0f b7 c0             	movzx  eax,ax
ffff8000008122de:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
ffff8000008122e2:	48 89 d1             	mov    rcx,rdx
ffff8000008122e5:	48 89 fa             	mov    rdx,rdi
ffff8000008122e8:	89 c7                	mov    edi,eax
ffff8000008122ea:	49 89 df             	mov    r15,rbx
ffff8000008122ed:	48 b8 bf cc ee ff ff 	movabs rax,0xffffffffffeeccbf
ffff8000008122f4:	ff ff ff 
ffff8000008122f7:	48 01 d8             	add    rax,rbx
ffff8000008122fa:	ff d0                	call   rax
ffff8000008122fc:	85 c0                	test   eax,eax
ffff8000008122fe:	79 35                	jns    ffff800000812335 <FAT32_write+0x3e4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:201
		{
			printf("FAT32 FS(write) write disk ERROR!!!!!!!!!!\n");
ffff800000812300:	48 b8 40 d8 ff ff ff 	movabs rax,0xffffffffffffd840
ffff800000812307:	ff ff ff 
ffff80000081230a:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000081230e:	48 89 c7             	mov    rdi,rax
ffff800000812311:	49 89 df             	mov    r15,rbx
ffff800000812314:	b8 00 00 00 00       	mov    eax,0x0
ffff800000812319:	48 ba 91 e4 ed ff ff 	movabs rdx,0xffffffffffede491
ffff800000812320:	ff ff ff 
ffff800000812323:	48 01 da             	add    rdx,rbx
ffff800000812326:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:202
			retval = -EIO;
ffff800000812328:	48 c7 45 d0 e3 ff ff 	mov    QWORD PTR [rbp-0x30],0xffffffffffffffe3
ffff80000081232f:	ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:203
			break;
ffff800000812330:	e9 25 01 00 00       	jmp    ffff80000081245a <FAT32_write+0x509>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:206
		}

		index -= length;
ffff800000812335:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff800000812338:	29 45 c4             	sub    DWORD PTR [rbp-0x3c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:207
		buf += length;
ffff80000081233b:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff80000081233e:	48 98                	cdqe   
ffff800000812340:	48 01 45 80          	add    QWORD PTR [rbp-0x80],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:208
		offset -= offset;
ffff800000812344:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffff80000081234b:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:209
		*position += length;
ffff80000081234c:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000812353:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000812356:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff800000812359:	48 98                	cdqe   
ffff80000081235b:	48 01 c2             	add    rdx,rax
ffff80000081235e:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000812365:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:211

		if(index)
ffff800000812368:	83 7d c4 00          	cmp    DWORD PTR [rbp-0x3c],0x0
ffff80000081236c:	0f 84 e7 00 00 00    	je     ffff800000812459 <FAT32_write+0x508>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:212
			next_cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff800000812372:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812376:	89 c2                	mov    edx,eax
ffff800000812378:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000081237c:	89 d6                	mov    esi,edx
ffff80000081237e:	48 89 c7             	mov    rdi,rax
ffff800000812381:	49 89 df             	mov    r15,rbx
ffff800000812384:	48 b8 5a e2 ee ff ff 	movabs rax,0xffffffffffeee25a
ffff80000081238b:	ff ff ff 
ffff80000081238e:	48 01 d8             	add    rax,rbx
ffff800000812391:	ff d0                	call   rax
ffff800000812393:	89 c0                	mov    eax,eax
ffff800000812395:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:216
		else
			break;

		if(next_cluster >= 0x0ffffff8)
ffff800000812399:	48 81 7d a0 f7 ff ff 	cmp    QWORD PTR [rbp-0x60],0xffffff7
ffff8000008123a0:	0f 
ffff8000008123a1:	0f 86 a6 00 00 00    	jbe    ffff80000081244d <FAT32_write+0x4fc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:218
		{
			next_cluster = FAT32_find_available_cluster(fsbi);
ffff8000008123a7:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008123ab:	48 89 c7             	mov    rdi,rax
ffff8000008123ae:	49 89 df             	mov    r15,rbx
ffff8000008123b1:	48 b8 01 e9 ee ff ff 	movabs rax,0xffffffffffeee901
ffff8000008123b8:	ff ff ff 
ffff8000008123bb:	48 01 d8             	add    rax,rbx
ffff8000008123be:	ff d0                	call   rax
ffff8000008123c0:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:219
			if(!next_cluster)
ffff8000008123c4:	48 83 7d a0 00       	cmp    QWORD PTR [rbp-0x60],0x0
ffff8000008123c9:	75 25                	jne    ffff8000008123f0 <FAT32_write+0x49f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:221
			{
                kmfree(buffer);
ffff8000008123cb:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008123cf:	48 89 c7             	mov    rdi,rax
ffff8000008123d2:	49 89 df             	mov    r15,rbx
ffff8000008123d5:	48 b8 37 00 ee ff ff 	movabs rax,0xffffffffffee0037
ffff8000008123dc:	ff ff ff 
ffff8000008123df:	48 01 d8             	add    rax,rbx
ffff8000008123e2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:222
				return -ENOSPC;
ffff8000008123e4:	48 c7 c0 cc ff ff ff 	mov    rax,0xffffffffffffffcc
ffff8000008123eb:	e9 fb 00 00 00       	jmp    ffff8000008124eb <FAT32_write+0x59a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:225
			}			
				
			DISK1_FAT32_write_FAT_Entry(fsbi,cluster,next_cluster);
ffff8000008123f0:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff8000008123f4:	89 c2                	mov    edx,eax
ffff8000008123f6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008123fa:	89 c1                	mov    ecx,eax
ffff8000008123fc:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000812400:	89 ce                	mov    esi,ecx
ffff800000812402:	48 89 c7             	mov    rdi,rax
ffff800000812405:	49 89 df             	mov    r15,rbx
ffff800000812408:	48 b8 bd e3 ee ff ff 	movabs rax,0xffffffffffeee3bd
ffff80000081240f:	ff ff ff 
ffff800000812412:	48 01 d8             	add    rax,rbx
ffff800000812415:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:226
			DISK1_FAT32_write_FAT_Entry(fsbi,next_cluster,0x0ffffff8);
ffff800000812417:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000081241b:	89 c1                	mov    ecx,eax
ffff80000081241d:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000812421:	ba f8 ff ff 0f       	mov    edx,0xffffff8
ffff800000812426:	89 ce                	mov    esi,ecx
ffff800000812428:	48 89 c7             	mov    rdi,rax
ffff80000081242b:	49 89 df             	mov    r15,rbx
ffff80000081242e:	48 b8 bd e3 ee ff ff 	movabs rax,0xffffffffffeee3bd
ffff800000812435:	ff ff ff 
ffff800000812438:	48 01 d8             	add    rax,rbx
ffff80000081243b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:227
			cluster = next_cluster;
ffff80000081243d:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000812441:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:228
			flags = 1;
ffff800000812445:	48 c7 45 c8 01 00 00 	mov    QWORD PTR [rbp-0x38],0x1
ffff80000081244c:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:231
		}

	}while(index);
ffff80000081244d:	83 7d c4 00          	cmp    DWORD PTR [rbp-0x3c],0x0
ffff800000812451:	0f 85 04 fd ff ff    	jne    ffff80000081215b <FAT32_write+0x20a>
ffff800000812457:	eb 01                	jmp    ffff80000081245a <FAT32_write+0x509>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:214
			break;
ffff800000812459:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:233

	if(*position > filp->dentry->dir_inode->file_size)
ffff80000081245a:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000812461:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812464:	48 89 c2             	mov    rdx,rax
ffff800000812467:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000081246b:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000081246f:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000812473:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812476:	48 39 c2             	cmp    rdx,rax
ffff800000812479:	76 42                	jbe    ffff8000008124bd <FAT32_write+0x56c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:235
	{
		filp->dentry->dir_inode->file_size = *position;
ffff80000081247b:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000812482:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000812485:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000812489:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000081248d:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000812491:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:236
		filp->dentry->dir_inode->sb->sb_ops->write_inode(filp->dentry->dir_inode);
ffff800000812494:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000812498:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000081249c:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008124a0:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff8000008124a4:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff8000008124a8:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff8000008124ac:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff8000008124b0:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008124b4:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008124b8:	48 89 c7             	mov    rdi,rax
ffff8000008124bb:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:239
	}

    kmfree(buffer);
ffff8000008124bd:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008124c1:	48 89 c7             	mov    rdi,rax
ffff8000008124c4:	49 89 df             	mov    r15,rbx
ffff8000008124c7:	48 b8 37 00 ee ff ff 	movabs rax,0xffffffffffee0037
ffff8000008124ce:	ff ff ff 
ffff8000008124d1:	48 01 d8             	add    rax,rbx
ffff8000008124d4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:240
	if(!index)
ffff8000008124d6:	83 7d c4 00          	cmp    DWORD PTR [rbp-0x3c],0x0
ffff8000008124da:	75 0b                	jne    ffff8000008124e7 <FAT32_write+0x596>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:241
		retval = count;
ffff8000008124dc:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff8000008124e3:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:242
	return retval;
ffff8000008124e7:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:243
}
ffff8000008124eb:	48 83 ec 80          	sub    rsp,0xffffffffffffff80
ffff8000008124ef:	5b                   	pop    rbx
ffff8000008124f0:	41 5f                	pop    r15
ffff8000008124f2:	5d                   	pop    rbp
ffff8000008124f3:	c3                   	ret    

ffff8000008124f4 <FAT32_lseek>:
FAT32_lseek():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:247


long FAT32_lseek(struct file * filp,long offset,long origin)
{
ffff8000008124f4:	f3 0f 1e fa          	endbr64 
ffff8000008124f8:	55                   	push   rbp
ffff8000008124f9:	48 89 e5             	mov    rbp,rsp
ffff8000008124fc:	41 57                	push   r15
ffff8000008124fe:	48 83 ec 38          	sub    rsp,0x38
ffff800000812502:	48 8d 0d f9 ff ff ff 	lea    rcx,[rip+0xfffffffffffffff9]        # ffff800000812502 <FAT32_lseek+0xe>
ffff800000812509:	49 bb 2e 10 11 00 00 	movabs r11,0x11102e
ffff800000812510:	00 00 00 
ffff800000812513:	4c 01 d9             	add    rcx,r11
ffff800000812516:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff80000081251a:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffff80000081251e:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:248
	struct index_node *inode = filp->dentry->dir_inode;
ffff800000812522:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812526:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000081252a:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000081252e:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:249
	long pos = 0;
ffff800000812532:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff800000812539:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:251

	switch(origin)
ffff80000081253a:	48 83 7d c8 02       	cmp    QWORD PTR [rbp-0x38],0x2
ffff80000081253f:	74 21                	je     ffff800000812562 <FAT32_lseek+0x6e>
ffff800000812541:	48 83 7d c8 02       	cmp    QWORD PTR [rbp-0x38],0x2
ffff800000812546:	7f 4a                	jg     ffff800000812592 <FAT32_lseek+0x9e>
ffff800000812548:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffff80000081254d:	74 09                	je     ffff800000812558 <FAT32_lseek+0x64>
ffff80000081254f:	48 83 7d c8 01       	cmp    QWORD PTR [rbp-0x38],0x1
ffff800000812554:	74 20                	je     ffff800000812576 <FAT32_lseek+0x82>
ffff800000812556:	eb 3a                	jmp    ffff800000812592 <FAT32_lseek+0x9e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:254
	{
		case SEEK_SET:
				pos = offset;
ffff800000812558:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081255c:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:255
			break;
ffff800000812560:	eb 39                	jmp    ffff80000081259b <FAT32_lseek+0xa7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:258

		case SEEK_CUR:
				pos =  filp->position + offset;
ffff800000812562:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812566:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000812569:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081256d:	48 01 d0             	add    rax,rdx
ffff800000812570:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:259
			break;
ffff800000812574:	eb 25                	jmp    ffff80000081259b <FAT32_lseek+0xa7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:262

		case SEEK_END:
				pos = filp->dentry->dir_inode->file_size + offset;
ffff800000812576:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081257a:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000081257e:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000812582:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000812585:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000812589:	48 01 d0             	add    rax,rdx
ffff80000081258c:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:263
			break;
ffff800000812590:	eb 09                	jmp    ffff80000081259b <FAT32_lseek+0xa7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:266

		default:
			return -EINVAL;
ffff800000812592:	48 c7 c0 e4 ff ff ff 	mov    rax,0xffffffffffffffe4
ffff800000812599:	eb 69                	jmp    ffff800000812604 <FAT32_lseek+0x110>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:270
			break;
	}

	if(pos < 0 || pos > filp->dentry->dir_inode->file_size)
ffff80000081259b:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff8000008125a0:	78 18                	js     ffff8000008125ba <FAT32_lseek+0xc6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:270 (discriminator 1)
ffff8000008125a2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008125a6:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008125aa:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008125ae:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008125b1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008125b5:	48 39 c2             	cmp    rdx,rax
ffff8000008125b8:	73 09                	jae    ffff8000008125c3 <FAT32_lseek+0xcf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:271
		return -EOVERFLOW;
ffff8000008125ba:	48 c7 c0 bf ff ff ff 	mov    rax,0xffffffffffffffbf
ffff8000008125c1:	eb 41                	jmp    ffff800000812604 <FAT32_lseek+0x110>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:273

	filp->position = pos;
ffff8000008125c3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008125c7:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff8000008125cb:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:274
	printf("FAT32 FS(lseek) alert position:%d\n",filp->position);
ffff8000008125ce:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008125d2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008125d5:	48 89 c6             	mov    rsi,rax
ffff8000008125d8:	48 b8 70 d8 ff ff ff 	movabs rax,0xffffffffffffd870
ffff8000008125df:	ff ff ff 
ffff8000008125e2:	48 8d 04 01          	lea    rax,[rcx+rax*1]
ffff8000008125e6:	48 89 c7             	mov    rdi,rax
ffff8000008125e9:	49 89 cf             	mov    r15,rcx
ffff8000008125ec:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008125f1:	48 ba 91 e4 ed ff ff 	movabs rdx,0xffffffffffede491
ffff8000008125f8:	ff ff ff 
ffff8000008125fb:	48 01 ca             	add    rdx,rcx
ffff8000008125fe:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:276

	return pos;
ffff800000812600:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:277
}
ffff800000812604:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000812608:	c9                   	leave  
ffff800000812609:	c3                   	ret    

ffff80000081260a <FAT32_ioctl>:
FAT32_ioctl():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:281


long FAT32_ioctl(struct index_node * inode,struct file * filp,unsigned long cmd,unsigned long arg)
{}
ffff80000081260a:	f3 0f 1e fa          	endbr64 
ffff80000081260e:	55                   	push   rbp
ffff80000081260f:	48 89 e5             	mov    rbp,rsp
ffff800000812612:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000812612 <FAT32_ioctl+0x8>
ffff800000812619:	49 bb 1e 0f 11 00 00 	movabs r11,0x110f1e
ffff800000812620:	00 00 00 
ffff800000812623:	4c 01 d8             	add    rax,r11
ffff800000812626:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000081262a:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000081262e:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff800000812632:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
ffff800000812636:	90                   	nop
ffff800000812637:	5d                   	pop    rbp
ffff800000812638:	c3                   	ret    

ffff800000812639 <FAT32_readdir>:
FAT32_readdir():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:284

long FAT32_readdir(struct file * filp,void * dirent,filldir_t filler)
{
ffff800000812639:	f3 0f 1e fa          	endbr64 
ffff80000081263d:	55                   	push   rbp
ffff80000081263e:	48 89 e5             	mov    rbp,rsp
ffff800000812641:	41 57                	push   r15
ffff800000812643:	53                   	push   rbx
ffff800000812644:	48 83 c4 80          	add    rsp,0xffffffffffffff80
ffff800000812648:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000812648 <FAT32_readdir+0xf>
ffff80000081264f:	49 bb e8 0e 11 00 00 	movabs r11,0x110ee8
ffff800000812656:	00 00 00 
ffff800000812659:	4c 01 db             	add    rbx,r11
ffff80000081265c:	48 89 7d 88          	mov    QWORD PTR [rbp-0x78],rdi
ffff800000812660:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
ffff800000812664:	48 89 95 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:285
	struct FAT32_inode_info * finode = filp->dentry->dir_inode->private_index_info;
ffff80000081266b:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000081266f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000812673:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000812677:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff80000081267b:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:286
	struct FAT32_sb_info * fsbi = filp->dentry->dir_inode->sb->private_sb_info;
ffff80000081267f:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000812683:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000812687:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000081268b:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000081268f:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000812693:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:288

	unsigned int cluster = 0;
ffff800000812697:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:289
	unsigned long sector = 0;
ffff80000081269e:	48 c7 45 a0 00 00 00 	mov    QWORD PTR [rbp-0x60],0x0
ffff8000008126a5:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:290
	unsigned char * buf =NULL; 
ffff8000008126a6:	48 c7 45 98 00 00 00 	mov    QWORD PTR [rbp-0x68],0x0
ffff8000008126ad:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:291
	char *name = NULL;
ffff8000008126ae:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff8000008126b5:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:292
	int namelen = 0;
ffff8000008126b6:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:293
	int i = 0,j = 0,x = 0,y = 0;
ffff8000008126bd:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [rbp-0x28],0x0
ffff8000008126c4:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x0
ffff8000008126cb:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
ffff8000008126d2:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:294
	struct FAT32_Directory * tmpdentry = NULL;
ffff8000008126d9:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
ffff8000008126e0:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:295
	struct FAT32_LongDirectory * tmpldentry = NULL;
ffff8000008126e1:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffff8000008126e8:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:297

	buf = kmallocat(0,TO_MPGN(fsbi->bytes_per_cluster));
ffff8000008126e9:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008126ed:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff8000008126f1:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff8000008126f7:	48 8d 90 ff 0f 00 00 	lea    rdx,[rax+0xfff]
ffff8000008126fe:	48 85 c0             	test   rax,rax
ffff800000812701:	48 0f 48 c2          	cmovs  rax,rdx
ffff800000812705:	48 c1 f8 0c          	sar    rax,0xc
ffff800000812709:	89 c6                	mov    esi,eax
ffff80000081270b:	bf 00 00 00 00       	mov    edi,0x0
ffff800000812710:	49 89 df             	mov    r15,rbx
ffff800000812713:	48 b8 22 ee ed ff ff 	movabs rax,0xffffffffffedee22
ffff80000081271a:	ff ff ff 
ffff80000081271d:	48 01 d8             	add    rax,rbx
ffff800000812720:	ff d0                	call   rax
ffff800000812722:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:299

	cluster = finode->first_cluster;
ffff800000812726:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000081272a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000081272d:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:301

	j = filp->position/fsbi->bytes_per_cluster;
ffff800000812730:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000812734:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812737:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff80000081273b:	48 8b 72 18          	mov    rsi,QWORD PTR [rdx+0x18]
ffff80000081273f:	48 99                	cqo    
ffff800000812741:	48 f7 fe             	idiv   rsi
ffff800000812744:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:303
	
	for(i = 0;i<j;i++)
ffff800000812747:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [rbp-0x28],0x0
ffff80000081274e:	eb 60                	jmp    ffff8000008127b0 <FAT32_readdir+0x177>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:305
	{
		cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff800000812750:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000812753:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000812757:	89 d6                	mov    esi,edx
ffff800000812759:	48 89 c7             	mov    rdi,rax
ffff80000081275c:	49 89 df             	mov    r15,rbx
ffff80000081275f:	48 b8 5a e2 ee ff ff 	movabs rax,0xffffffffffeee25a
ffff800000812766:	ff ff ff 
ffff800000812769:	48 01 d8             	add    rax,rbx
ffff80000081276c:	ff d0                	call   rax
ffff80000081276e:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:306
		if(cluster > 0x0ffffff7)
ffff800000812771:	81 7d ec f7 ff ff 0f 	cmp    DWORD PTR [rbp-0x14],0xffffff7
ffff800000812778:	76 32                	jbe    ffff8000008127ac <FAT32_readdir+0x173>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:308
		{
			printf("FAT32 FS(readdir) cluster didn`t exist\n");
ffff80000081277a:	48 b8 98 d8 ff ff ff 	movabs rax,0xffffffffffffd898
ffff800000812781:	ff ff ff 
ffff800000812784:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000812788:	48 89 c7             	mov    rdi,rax
ffff80000081278b:	49 89 df             	mov    r15,rbx
ffff80000081278e:	b8 00 00 00 00       	mov    eax,0x0
ffff800000812793:	48 ba 91 e4 ed ff ff 	movabs rdx,0xffffffffffede491
ffff80000081279a:	ff ff ff 
ffff80000081279d:	48 01 da             	add    rdx,rbx
ffff8000008127a0:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:309
			return NULL;
ffff8000008127a2:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008127a7:	e9 1e 06 00 00       	jmp    ffff800000812dca <FAT32_readdir+0x791>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:303 (discriminator 2)
	for(i = 0;i<j;i++)
ffff8000008127ac:	83 45 d8 01          	add    DWORD PTR [rbp-0x28],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:303 (discriminator 1)
ffff8000008127b0:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff8000008127b3:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
ffff8000008127b6:	7c 98                	jl     ffff800000812750 <FAT32_readdir+0x117>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:313
		}
	}

next_cluster:
ffff8000008127b8:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:314
	sector = fsbi->Data_firstsector + (cluster - 2) * fsbi->sector_per_cluster;
ffff8000008127b9:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008127bd:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
ffff8000008127c1:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008127c4:	83 e8 02             	sub    eax,0x2
ffff8000008127c7:	89 c1                	mov    ecx,eax
ffff8000008127c9:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008127cd:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008127d1:	48 0f af c1          	imul   rax,rcx
ffff8000008127d5:	48 01 d0             	add    rax,rdx
ffff8000008127d8:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:315
    if(blkdev_read(filp->dentry->dir_inode->dev,sector*SECTOR_SIZE,fsbi->sector_per_cluster*SECTOR_SIZE,buf)<0)
ffff8000008127dc:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008127e0:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008127e4:	48 c1 e0 09          	shl    rax,0x9
ffff8000008127e8:	48 89 c7             	mov    rdi,rax
ffff8000008127eb:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff8000008127ef:	48 c1 e0 09          	shl    rax,0x9
ffff8000008127f3:	48 89 c6             	mov    rsi,rax
ffff8000008127f6:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff8000008127fa:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008127fe:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000812802:	0f b7 40 18          	movzx  eax,WORD PTR [rax+0x18]
ffff800000812806:	0f b7 c0             	movzx  eax,ax
ffff800000812809:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
ffff80000081280d:	48 89 d1             	mov    rcx,rdx
ffff800000812810:	48 89 fa             	mov    rdx,rdi
ffff800000812813:	89 c7                	mov    edi,eax
ffff800000812815:	49 89 df             	mov    r15,rbx
ffff800000812818:	48 b8 60 cb ee ff ff 	movabs rax,0xffffffffffeecb60
ffff80000081281f:	ff ff ff 
ffff800000812822:	48 01 d8             	add    rax,rbx
ffff800000812825:	ff d0                	call   rax
ffff800000812827:	85 c0                	test   eax,eax
ffff800000812829:	79 4b                	jns    ffff800000812876 <FAT32_readdir+0x23d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:317
	{
		printf("FAT32 FS(readdir) read disk ERROR!!!!!!!!!!\n");
ffff80000081282b:	48 b8 c0 d8 ff ff ff 	movabs rax,0xffffffffffffd8c0
ffff800000812832:	ff ff ff 
ffff800000812835:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000812839:	48 89 c7             	mov    rdi,rax
ffff80000081283c:	49 89 df             	mov    r15,rbx
ffff80000081283f:	b8 00 00 00 00       	mov    eax,0x0
ffff800000812844:	48 ba 91 e4 ed ff ff 	movabs rdx,0xffffffffffede491
ffff80000081284b:	ff ff ff 
ffff80000081284e:	48 01 da             	add    rdx,rbx
ffff800000812851:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:318
        kmfree(buf);
ffff800000812853:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000812857:	48 89 c7             	mov    rdi,rax
ffff80000081285a:	49 89 df             	mov    r15,rbx
ffff80000081285d:	48 b8 37 00 ee ff ff 	movabs rax,0xffffffffffee0037
ffff800000812864:	ff ff ff 
ffff800000812867:	48 01 d8             	add    rax,rbx
ffff80000081286a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:319
		return NULL;
ffff80000081286c:	b8 00 00 00 00       	mov    eax,0x0
ffff800000812871:	e9 54 05 00 00       	jmp    ffff800000812dca <FAT32_readdir+0x791>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:322
	}

	tmpdentry = (struct FAT32_Directory *)(buf + filp->position%fsbi->bytes_per_cluster);
ffff800000812876:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000081287a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000081287d:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff800000812881:	48 8b 4a 18          	mov    rcx,QWORD PTR [rdx+0x18]
ffff800000812885:	48 99                	cqo    
ffff800000812887:	48 f7 f9             	idiv   rcx
ffff80000081288a:	48 89 d0             	mov    rax,rdx
ffff80000081288d:	48 89 c2             	mov    rdx,rax
ffff800000812890:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000812894:	48 01 d0             	add    rax,rdx
ffff800000812897:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:324

	for(i = filp->position%fsbi->bytes_per_cluster;i < fsbi->bytes_per_cluster;i += 32,tmpdentry++,filp->position += 32)
ffff80000081289b:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000081289f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008128a2:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff8000008128a6:	48 8b 4a 18          	mov    rcx,QWORD PTR [rdx+0x18]
ffff8000008128aa:	48 99                	cqo    
ffff8000008128ac:	48 f7 f9             	idiv   rcx
ffff8000008128af:	48 89 d0             	mov    rax,rdx
ffff8000008128b2:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
ffff8000008128b5:	e9 6c 04 00 00       	jmp    ffff800000812d26 <FAT32_readdir+0x6ed>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:326
	{
		if(tmpdentry->DIR_Attr == ATTR_LONG_NAME)
ffff8000008128ba:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008128be:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff8000008128c2:	3c 0f                	cmp    al,0xf
ffff8000008128c4:	0f 84 3d 04 00 00    	je     ffff800000812d07 <FAT32_readdir+0x6ce>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:328
			continue;
		if(tmpdentry->DIR_Name[0] == 0xe5 || tmpdentry->DIR_Name[0] == 0x00 || tmpdentry->DIR_Name[0] == 0x05)
ffff8000008128ca:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008128ce:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008128d1:	3c e5                	cmp    al,0xe5
ffff8000008128d3:	0f 84 31 04 00 00    	je     ffff800000812d0a <FAT32_readdir+0x6d1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:328 (discriminator 2)
ffff8000008128d9:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008128dd:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008128e0:	84 c0                	test   al,al
ffff8000008128e2:	0f 84 22 04 00 00    	je     ffff800000812d0a <FAT32_readdir+0x6d1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:328 (discriminator 4)
ffff8000008128e8:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008128ec:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008128ef:	3c 05                	cmp    al,0x5
ffff8000008128f1:	0f 84 13 04 00 00    	je     ffff800000812d0a <FAT32_readdir+0x6d1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:331
			continue;

		namelen = 0;
ffff8000008128f7:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:332
		tmpldentry = (struct FAT32_LongDirectory *)tmpdentry-1;
ffff8000008128fe:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000812902:	48 83 e8 20          	sub    rax,0x20
ffff800000812906:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:334

		if(tmpldentry->LDIR_Attr == ATTR_LONG_NAME && tmpldentry->LDIR_Ord != 0xe5 && tmpldentry->LDIR_Ord != 0x00 && tmpldentry->LDIR_Ord != 0x05)
ffff80000081290a:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081290e:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff800000812912:	3c 0f                	cmp    al,0xf
ffff800000812914:	0f 85 4f 02 00 00    	jne    ffff800000812b69 <FAT32_readdir+0x530>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:334 (discriminator 1)
ffff80000081291a:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081291e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812921:	3c e5                	cmp    al,0xe5
ffff800000812923:	0f 84 40 02 00 00    	je     ffff800000812b69 <FAT32_readdir+0x530>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:334 (discriminator 2)
ffff800000812929:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081292d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812930:	84 c0                	test   al,al
ffff800000812932:	0f 84 31 02 00 00    	je     ffff800000812b69 <FAT32_readdir+0x530>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:334 (discriminator 3)
ffff800000812938:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081293c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081293f:	3c 05                	cmp    al,0x5
ffff800000812941:	0f 84 22 02 00 00    	je     ffff800000812b69 <FAT32_readdir+0x530>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:336
		{
			j = 0;
ffff800000812947:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:338
			//long file/dir name read
			while(tmpldentry->LDIR_Attr == ATTR_LONG_NAME  && tmpldentry->LDIR_Ord != 0xe5 && tmpldentry->LDIR_Ord != 0x00 && tmpldentry->LDIR_Ord != 0x05)
ffff80000081294e:	eb 1a                	jmp    ffff80000081296a <FAT32_readdir+0x331>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:340
			{
				j++;
ffff800000812950:	83 45 d4 01          	add    DWORD PTR [rbp-0x2c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:341
				if(tmpldentry->LDIR_Ord & 0x40)
ffff800000812954:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000812958:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081295b:	0f b6 c0             	movzx  eax,al
ffff80000081295e:	83 e0 40             	and    eax,0x40
ffff800000812961:	85 c0                	test   eax,eax
ffff800000812963:	75 34                	jne    ffff800000812999 <FAT32_readdir+0x360>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:343
					break;
				tmpldentry --;
ffff800000812965:	48 83 6d b8 20       	sub    QWORD PTR [rbp-0x48],0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:338
			while(tmpldentry->LDIR_Attr == ATTR_LONG_NAME  && tmpldentry->LDIR_Ord != 0xe5 && tmpldentry->LDIR_Ord != 0x00 && tmpldentry->LDIR_Ord != 0x05)
ffff80000081296a:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081296e:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff800000812972:	3c 0f                	cmp    al,0xf
ffff800000812974:	75 24                	jne    ffff80000081299a <FAT32_readdir+0x361>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:338 (discriminator 1)
ffff800000812976:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081297a:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081297d:	3c e5                	cmp    al,0xe5
ffff80000081297f:	74 19                	je     ffff80000081299a <FAT32_readdir+0x361>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:338 (discriminator 2)
ffff800000812981:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000812985:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812988:	84 c0                	test   al,al
ffff80000081298a:	74 0e                	je     ffff80000081299a <FAT32_readdir+0x361>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:338 (discriminator 3)
ffff80000081298c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000812990:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812993:	3c 05                	cmp    al,0x5
ffff800000812995:	75 b9                	jne    ffff800000812950 <FAT32_readdir+0x317>
ffff800000812997:	eb 01                	jmp    ffff80000081299a <FAT32_readdir+0x361>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:342
					break;
ffff800000812999:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:346
			}

			name = kmallocat(0,TO_MPGN(j * 13 + 1));
ffff80000081299a:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff80000081299d:	89 d0                	mov    eax,edx
ffff80000081299f:	01 c0                	add    eax,eax
ffff8000008129a1:	01 d0                	add    eax,edx
ffff8000008129a3:	c1 e0 02             	shl    eax,0x2
ffff8000008129a6:	01 d0                	add    eax,edx
ffff8000008129a8:	05 00 10 00 00       	add    eax,0x1000
ffff8000008129ad:	8d 90 ff 0f 00 00    	lea    edx,[rax+0xfff]
ffff8000008129b3:	85 c0                	test   eax,eax
ffff8000008129b5:	0f 48 c2             	cmovs  eax,edx
ffff8000008129b8:	c1 f8 0c             	sar    eax,0xc
ffff8000008129bb:	89 c6                	mov    esi,eax
ffff8000008129bd:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008129c2:	49 89 df             	mov    r15,rbx
ffff8000008129c5:	48 b8 22 ee ed ff ff 	movabs rax,0xffffffffffedee22
ffff8000008129cc:	ff ff ff 
ffff8000008129cf:	48 01 d8             	add    rax,rbx
ffff8000008129d2:	ff d0                	call   rax
ffff8000008129d4:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:347
			memset(name,0,j*13+1);
ffff8000008129d8:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff8000008129db:	89 d0                	mov    eax,edx
ffff8000008129dd:	01 c0                	add    eax,eax
ffff8000008129df:	01 d0                	add    eax,edx
ffff8000008129e1:	c1 e0 02             	shl    eax,0x2
ffff8000008129e4:	01 d0                	add    eax,edx
ffff8000008129e6:	83 c0 01             	add    eax,0x1
ffff8000008129e9:	89 c2                	mov    edx,eax
ffff8000008129eb:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008129ef:	be 00 00 00 00       	mov    esi,0x0
ffff8000008129f4:	48 89 c7             	mov    rdi,rax
ffff8000008129f7:	49 89 df             	mov    r15,rbx
ffff8000008129fa:	48 b8 b1 1d ef ff ff 	movabs rax,0xffffffffffef1db1
ffff800000812a01:	ff ff ff 
ffff800000812a04:	48 01 d8             	add    rax,rbx
ffff800000812a07:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:348
			tmpldentry = (struct FAT32_LongDirectory *)tmpdentry-1;
ffff800000812a09:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000812a0d:	48 83 e8 20          	sub    rax,0x20
ffff800000812a11:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:350

			for(x = 0;x<j;x++,tmpldentry --)
ffff800000812a15:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
ffff800000812a1c:	e9 37 01 00 00       	jmp    ffff800000812b58 <FAT32_readdir+0x51f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:352
			{
				for(y = 0;y<5;y++)
ffff800000812a21:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
ffff800000812a28:	eb 53                	jmp    ffff800000812a7d <FAT32_readdir+0x444>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:353
					if(tmpldentry->LDIR_Name1[y] != 0xffff && tmpldentry->LDIR_Name1[y] != 0x0000)
ffff800000812a2a:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000812a2e:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff800000812a31:	48 63 d2             	movsxd rdx,edx
ffff800000812a34:	0f b7 44 50 01       	movzx  eax,WORD PTR [rax+rdx*2+0x1]
ffff800000812a39:	66 83 f8 ff          	cmp    ax,0xffff
ffff800000812a3d:	74 3a                	je     ffff800000812a79 <FAT32_readdir+0x440>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:353 (discriminator 1)
ffff800000812a3f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000812a43:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff800000812a46:	48 63 d2             	movsxd rdx,edx
ffff800000812a49:	0f b7 44 50 01       	movzx  eax,WORD PTR [rax+rdx*2+0x1]
ffff800000812a4e:	66 85 c0             	test   ax,ax
ffff800000812a51:	74 26                	je     ffff800000812a79 <FAT32_readdir+0x440>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:354
						name[namelen++] = (char)tmpldentry->LDIR_Name1[y];
ffff800000812a53:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000812a57:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff800000812a5a:	48 63 d2             	movsxd rdx,edx
ffff800000812a5d:	0f b7 4c 50 01       	movzx  ecx,WORD PTR [rax+rdx*2+0x1]
ffff800000812a62:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000812a65:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000812a68:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff800000812a6b:	48 63 d0             	movsxd rdx,eax
ffff800000812a6e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000812a72:	48 01 d0             	add    rax,rdx
ffff800000812a75:	89 ca                	mov    edx,ecx
ffff800000812a77:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:352 (discriminator 2)
				for(y = 0;y<5;y++)
ffff800000812a79:	83 45 cc 01          	add    DWORD PTR [rbp-0x34],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:352 (discriminator 1)
ffff800000812a7d:	83 7d cc 04          	cmp    DWORD PTR [rbp-0x34],0x4
ffff800000812a81:	7e a7                	jle    ffff800000812a2a <FAT32_readdir+0x3f1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:356

				for(y = 0;y<6;y++)
ffff800000812a83:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
ffff800000812a8a:	eb 53                	jmp    ffff800000812adf <FAT32_readdir+0x4a6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:357
					if(tmpldentry->LDIR_Name2[y] != 0xffff && tmpldentry->LDIR_Name1[y] != 0x0000)
ffff800000812a8c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000812a90:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff800000812a93:	48 63 d2             	movsxd rdx,edx
ffff800000812a96:	0f b7 44 50 0e       	movzx  eax,WORD PTR [rax+rdx*2+0xe]
ffff800000812a9b:	66 83 f8 ff          	cmp    ax,0xffff
ffff800000812a9f:	74 3a                	je     ffff800000812adb <FAT32_readdir+0x4a2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:357 (discriminator 1)
ffff800000812aa1:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000812aa5:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff800000812aa8:	48 63 d2             	movsxd rdx,edx
ffff800000812aab:	0f b7 44 50 01       	movzx  eax,WORD PTR [rax+rdx*2+0x1]
ffff800000812ab0:	66 85 c0             	test   ax,ax
ffff800000812ab3:	74 26                	je     ffff800000812adb <FAT32_readdir+0x4a2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:358
						name[namelen++] = (char)tmpldentry->LDIR_Name2[y];
ffff800000812ab5:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000812ab9:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff800000812abc:	48 63 d2             	movsxd rdx,edx
ffff800000812abf:	0f b7 4c 50 0e       	movzx  ecx,WORD PTR [rax+rdx*2+0xe]
ffff800000812ac4:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000812ac7:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000812aca:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff800000812acd:	48 63 d0             	movsxd rdx,eax
ffff800000812ad0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000812ad4:	48 01 d0             	add    rax,rdx
ffff800000812ad7:	89 ca                	mov    edx,ecx
ffff800000812ad9:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:356 (discriminator 2)
				for(y = 0;y<6;y++)
ffff800000812adb:	83 45 cc 01          	add    DWORD PTR [rbp-0x34],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:356 (discriminator 1)
ffff800000812adf:	83 7d cc 05          	cmp    DWORD PTR [rbp-0x34],0x5
ffff800000812ae3:	7e a7                	jle    ffff800000812a8c <FAT32_readdir+0x453>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:360

				for(y = 0;y<2;y++)
ffff800000812ae5:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
ffff800000812aec:	eb 5b                	jmp    ffff800000812b49 <FAT32_readdir+0x510>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:361
					if(tmpldentry->LDIR_Name3[y] != 0xffff && tmpldentry->LDIR_Name1[y] != 0x0000)
ffff800000812aee:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000812af2:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff800000812af5:	48 63 d2             	movsxd rdx,edx
ffff800000812af8:	48 83 c2 08          	add    rdx,0x8
ffff800000812afc:	0f b7 44 50 0c       	movzx  eax,WORD PTR [rax+rdx*2+0xc]
ffff800000812b01:	66 83 f8 ff          	cmp    ax,0xffff
ffff800000812b05:	74 3e                	je     ffff800000812b45 <FAT32_readdir+0x50c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:361 (discriminator 1)
ffff800000812b07:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000812b0b:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff800000812b0e:	48 63 d2             	movsxd rdx,edx
ffff800000812b11:	0f b7 44 50 01       	movzx  eax,WORD PTR [rax+rdx*2+0x1]
ffff800000812b16:	66 85 c0             	test   ax,ax
ffff800000812b19:	74 2a                	je     ffff800000812b45 <FAT32_readdir+0x50c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:362
						name[namelen++] = (char)tmpldentry->LDIR_Name3[y];
ffff800000812b1b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000812b1f:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff800000812b22:	48 63 d2             	movsxd rdx,edx
ffff800000812b25:	48 83 c2 08          	add    rdx,0x8
ffff800000812b29:	0f b7 4c 50 0c       	movzx  ecx,WORD PTR [rax+rdx*2+0xc]
ffff800000812b2e:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000812b31:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000812b34:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff800000812b37:	48 63 d0             	movsxd rdx,eax
ffff800000812b3a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000812b3e:	48 01 d0             	add    rax,rdx
ffff800000812b41:	89 ca                	mov    edx,ecx
ffff800000812b43:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:360 (discriminator 2)
				for(y = 0;y<2;y++)
ffff800000812b45:	83 45 cc 01          	add    DWORD PTR [rbp-0x34],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:360 (discriminator 1)
ffff800000812b49:	83 7d cc 01          	cmp    DWORD PTR [rbp-0x34],0x1
ffff800000812b4d:	7e 9f                	jle    ffff800000812aee <FAT32_readdir+0x4b5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:350 (discriminator 2)
			for(x = 0;x<j;x++,tmpldentry --)
ffff800000812b4f:	83 45 d0 01          	add    DWORD PTR [rbp-0x30],0x1
ffff800000812b53:	48 83 6d b8 20       	sub    QWORD PTR [rbp-0x48],0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:350 (discriminator 1)
ffff800000812b58:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000812b5b:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
ffff800000812b5e:	0f 8c bd fe ff ff    	jl     ffff800000812a21 <FAT32_readdir+0x3e8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:364
			}
			goto find_lookup_success;
ffff800000812b64:	e9 27 02 00 00       	jmp    ffff800000812d90 <FAT32_readdir+0x757>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:367
		}

		name = kmallocat(0,TO_MPGN(15));
ffff800000812b69:	be 01 00 00 00       	mov    esi,0x1
ffff800000812b6e:	bf 00 00 00 00       	mov    edi,0x0
ffff800000812b73:	49 89 df             	mov    r15,rbx
ffff800000812b76:	48 b8 22 ee ed ff ff 	movabs rax,0xffffffffffedee22
ffff800000812b7d:	ff ff ff 
ffff800000812b80:	48 01 d8             	add    rax,rbx
ffff800000812b83:	ff d0                	call   rax
ffff800000812b85:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:368
		memset(name,0,15);
ffff800000812b89:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000812b8d:	ba 0f 00 00 00       	mov    edx,0xf
ffff800000812b92:	be 00 00 00 00       	mov    esi,0x0
ffff800000812b97:	48 89 c7             	mov    rdi,rax
ffff800000812b9a:	49 89 df             	mov    r15,rbx
ffff800000812b9d:	48 b8 b1 1d ef ff ff 	movabs rax,0xffffffffffef1db1
ffff800000812ba4:	ff ff ff 
ffff800000812ba7:	48 01 d8             	add    rax,rbx
ffff800000812baa:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:370
		//short file/dir base name compare
		for(x=0;x<8;x++)
ffff800000812bac:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
ffff800000812bb3:	eb 74                	jmp    ffff800000812c29 <FAT32_readdir+0x5f0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:372
		{
			if(tmpdentry->DIR_Name[x] == ' ')
ffff800000812bb5:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000812bb9:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000812bbc:	48 98                	cdqe   
ffff800000812bbe:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000812bc2:	3c 20                	cmp    al,0x20
ffff800000812bc4:	74 6b                	je     ffff800000812c31 <FAT32_readdir+0x5f8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:374
				break;
			if(tmpdentry->DIR_NTRes & LOWERCASE_BASE)
ffff800000812bc6:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000812bca:	0f b6 40 0c          	movzx  eax,BYTE PTR [rax+0xc]
ffff800000812bce:	0f b6 c0             	movzx  eax,al
ffff800000812bd1:	83 e0 08             	and    eax,0x8
ffff800000812bd4:	85 c0                	test   eax,eax
ffff800000812bd6:	74 29                	je     ffff800000812c01 <FAT32_readdir+0x5c8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:375
				name[namelen++] = tmpdentry->DIR_Name[x] + 32;
ffff800000812bd8:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000812bdc:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000812bdf:	48 98                	cdqe   
ffff800000812be1:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000812be5:	8d 48 20             	lea    ecx,[rax+0x20]
ffff800000812be8:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000812beb:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000812bee:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff800000812bf1:	48 63 d0             	movsxd rdx,eax
ffff800000812bf4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000812bf8:	48 01 d0             	add    rax,rdx
ffff800000812bfb:	89 ca                	mov    edx,ecx
ffff800000812bfd:	88 10                	mov    BYTE PTR [rax],dl
ffff800000812bff:	eb 24                	jmp    ffff800000812c25 <FAT32_readdir+0x5ec>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:377
			else
				name[namelen++] = tmpdentry->DIR_Name[x];
ffff800000812c01:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000812c05:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000812c08:	48 98                	cdqe   
ffff800000812c0a:	0f b6 0c 02          	movzx  ecx,BYTE PTR [rdx+rax*1]
ffff800000812c0e:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000812c11:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000812c14:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff800000812c17:	48 63 d0             	movsxd rdx,eax
ffff800000812c1a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000812c1e:	48 01 d0             	add    rax,rdx
ffff800000812c21:	89 ca                	mov    edx,ecx
ffff800000812c23:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:370 (discriminator 2)
		for(x=0;x<8;x++)
ffff800000812c25:	83 45 d0 01          	add    DWORD PTR [rbp-0x30],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:370 (discriminator 1)
ffff800000812c29:	83 7d d0 07          	cmp    DWORD PTR [rbp-0x30],0x7
ffff800000812c2d:	7e 86                	jle    ffff800000812bb5 <FAT32_readdir+0x57c>
ffff800000812c2f:	eb 01                	jmp    ffff800000812c32 <FAT32_readdir+0x5f9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:373
				break;
ffff800000812c31:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:380
		}

		if(tmpdentry->DIR_Attr & ATTR_DIRECTORY)
ffff800000812c32:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000812c36:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff800000812c3a:	0f b6 c0             	movzx  eax,al
ffff800000812c3d:	83 e0 10             	and    eax,0x10
ffff800000812c40:	85 c0                	test   eax,eax
ffff800000812c42:	0f 85 44 01 00 00    	jne    ffff800000812d8c <FAT32_readdir+0x753>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:383
			goto find_lookup_success;

		name[namelen++] = '.';
ffff800000812c48:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000812c4b:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000812c4e:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff800000812c51:	48 63 d0             	movsxd rdx,eax
ffff800000812c54:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000812c58:	48 01 d0             	add    rax,rdx
ffff800000812c5b:	c6 00 2e             	mov    BYTE PTR [rax],0x2e
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:386

		//short file ext name compare
		for(x=8;x<11;x++)
ffff800000812c5e:	c7 45 d0 08 00 00 00 	mov    DWORD PTR [rbp-0x30],0x8
ffff800000812c65:	eb 74                	jmp    ffff800000812cdb <FAT32_readdir+0x6a2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:388
		{
			if(tmpdentry->DIR_Name[x] == ' ')
ffff800000812c67:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000812c6b:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000812c6e:	48 98                	cdqe   
ffff800000812c70:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000812c74:	3c 20                	cmp    al,0x20
ffff800000812c76:	74 6b                	je     ffff800000812ce3 <FAT32_readdir+0x6aa>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:390
				break;
			if(tmpdentry->DIR_NTRes & LOWERCASE_EXT)
ffff800000812c78:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000812c7c:	0f b6 40 0c          	movzx  eax,BYTE PTR [rax+0xc]
ffff800000812c80:	0f b6 c0             	movzx  eax,al
ffff800000812c83:	83 e0 10             	and    eax,0x10
ffff800000812c86:	85 c0                	test   eax,eax
ffff800000812c88:	74 29                	je     ffff800000812cb3 <FAT32_readdir+0x67a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:391
				name[namelen++] = tmpdentry->DIR_Name[x] + 32;
ffff800000812c8a:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000812c8e:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000812c91:	48 98                	cdqe   
ffff800000812c93:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000812c97:	8d 48 20             	lea    ecx,[rax+0x20]
ffff800000812c9a:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000812c9d:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000812ca0:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff800000812ca3:	48 63 d0             	movsxd rdx,eax
ffff800000812ca6:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000812caa:	48 01 d0             	add    rax,rdx
ffff800000812cad:	89 ca                	mov    edx,ecx
ffff800000812caf:	88 10                	mov    BYTE PTR [rax],dl
ffff800000812cb1:	eb 24                	jmp    ffff800000812cd7 <FAT32_readdir+0x69e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:393
			else
				name[namelen++] = tmpdentry->DIR_Name[x];
ffff800000812cb3:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000812cb7:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000812cba:	48 98                	cdqe   
ffff800000812cbc:	0f b6 0c 02          	movzx  ecx,BYTE PTR [rdx+rax*1]
ffff800000812cc0:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000812cc3:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000812cc6:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff800000812cc9:	48 63 d0             	movsxd rdx,eax
ffff800000812ccc:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000812cd0:	48 01 d0             	add    rax,rdx
ffff800000812cd3:	89 ca                	mov    edx,ecx
ffff800000812cd5:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:386 (discriminator 2)
		for(x=8;x<11;x++)
ffff800000812cd7:	83 45 d0 01          	add    DWORD PTR [rbp-0x30],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:386 (discriminator 1)
ffff800000812cdb:	83 7d d0 0a          	cmp    DWORD PTR [rbp-0x30],0xa
ffff800000812cdf:	7e 86                	jle    ffff800000812c67 <FAT32_readdir+0x62e>
ffff800000812ce1:	eb 01                	jmp    ffff800000812ce4 <FAT32_readdir+0x6ab>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:389
				break;
ffff800000812ce3:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:395
		}
		if(x == 8)
ffff800000812ce4:	83 7d d0 08          	cmp    DWORD PTR [rbp-0x30],0x8
ffff800000812ce8:	0f 85 a1 00 00 00    	jne    ffff800000812d8f <FAT32_readdir+0x756>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:396
			name[--namelen] = 0;
ffff800000812cee:	83 6d dc 01          	sub    DWORD PTR [rbp-0x24],0x1
ffff800000812cf2:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000812cf5:	48 63 d0             	movsxd rdx,eax
ffff800000812cf8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000812cfc:	48 01 d0             	add    rax,rdx
ffff800000812cff:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:397
		goto find_lookup_success;
ffff800000812d02:	e9 88 00 00 00       	jmp    ffff800000812d8f <FAT32_readdir+0x756>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:327
			continue;
ffff800000812d07:	90                   	nop
ffff800000812d08:	eb 01                	jmp    ffff800000812d0b <FAT32_readdir+0x6d2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:329
			continue;
ffff800000812d0a:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:324 (discriminator 2)
	for(i = filp->position%fsbi->bytes_per_cluster;i < fsbi->bytes_per_cluster;i += 32,tmpdentry++,filp->position += 32)
ffff800000812d0b:	83 45 d8 20          	add    DWORD PTR [rbp-0x28],0x20
ffff800000812d0f:	48 83 45 c0 20       	add    QWORD PTR [rbp-0x40],0x20
ffff800000812d14:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000812d18:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812d1b:	48 8d 50 20          	lea    rdx,[rax+0x20]
ffff800000812d1f:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000812d23:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:324 (discriminator 1)
ffff800000812d26:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000812d29:	48 63 d0             	movsxd rdx,eax
ffff800000812d2c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000812d30:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000812d34:	48 39 c2             	cmp    rdx,rax
ffff800000812d37:	0f 8c 7d fb ff ff    	jl     ffff8000008128ba <FAT32_readdir+0x281>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:400
	}
	
	cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff800000812d3d:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000812d40:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000812d44:	89 d6                	mov    esi,edx
ffff800000812d46:	48 89 c7             	mov    rdi,rax
ffff800000812d49:	49 89 df             	mov    r15,rbx
ffff800000812d4c:	48 b8 5a e2 ee ff ff 	movabs rax,0xffffffffffeee25a
ffff800000812d53:	ff ff ff 
ffff800000812d56:	48 01 d8             	add    rax,rbx
ffff800000812d59:	ff d0                	call   rax
ffff800000812d5b:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:401
	if(cluster < 0x0ffffff7)
ffff800000812d5e:	81 7d ec f6 ff ff 0f 	cmp    DWORD PTR [rbp-0x14],0xffffff6
ffff800000812d65:	77 05                	ja     ffff800000812d6c <FAT32_readdir+0x733>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:402
		goto next_cluster;
ffff800000812d67:	e9 4d fa ff ff       	jmp    ffff8000008127b9 <FAT32_readdir+0x180>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:404

    kmfree(buf);
ffff800000812d6c:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000812d70:	48 89 c7             	mov    rdi,rax
ffff800000812d73:	49 89 df             	mov    r15,rbx
ffff800000812d76:	48 b8 37 00 ee ff ff 	movabs rax,0xffffffffffee0037
ffff800000812d7d:	ff ff ff 
ffff800000812d80:	48 01 d8             	add    rax,rbx
ffff800000812d83:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:405
	return NULL;
ffff800000812d85:	b8 00 00 00 00       	mov    eax,0x0
ffff800000812d8a:	eb 3e                	jmp    ffff800000812dca <FAT32_readdir+0x791>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:381
			goto find_lookup_success;
ffff800000812d8c:	90                   	nop
ffff800000812d8d:	eb 01                	jmp    ffff800000812d90 <FAT32_readdir+0x757>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:397
		goto find_lookup_success;
ffff800000812d8f:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:409

find_lookup_success:

	filp->position += 32;
ffff800000812d90:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000812d94:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812d97:	48 8d 50 20          	lea    rdx,[rax+0x20]
ffff800000812d9b:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000812d9f:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:410
	return filler(dirent,name,namelen,0,0);
ffff800000812da2:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000812da5:	48 63 d0             	movsxd rdx,eax
ffff800000812da8:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff800000812dac:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000812db0:	4c 8b 8d 78 ff ff ff 	mov    r9,QWORD PTR [rbp-0x88]
ffff800000812db7:	41 b8 00 00 00 00    	mov    r8d,0x0
ffff800000812dbd:	b9 00 00 00 00       	mov    ecx,0x0
ffff800000812dc2:	48 89 c7             	mov    rdi,rax
ffff800000812dc5:	41 ff d1             	call   r9
ffff800000812dc8:	48 98                	cdqe   
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:411
}
ffff800000812dca:	48 83 ec 80          	sub    rsp,0xffffffffffffff80
ffff800000812dce:	5b                   	pop    rbx
ffff800000812dcf:	41 5f                	pop    r15
ffff800000812dd1:	5d                   	pop    rbp
ffff800000812dd2:	c3                   	ret    

ffff800000812dd3 <FAT32_create>:
FAT32_create():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:428
	.readdir = FAT32_readdir,
};


long FAT32_create(struct index_node * inode,struct dir_entry * dentry,int mode)
{}
ffff800000812dd3:	f3 0f 1e fa          	endbr64 
ffff800000812dd7:	55                   	push   rbp
ffff800000812dd8:	48 89 e5             	mov    rbp,rsp
ffff800000812ddb:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000812ddb <FAT32_create+0x8>
ffff800000812de2:	49 bb 55 07 11 00 00 	movabs r11,0x110755
ffff800000812de9:	00 00 00 
ffff800000812dec:	4c 01 d8             	add    rax,r11
ffff800000812def:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000812df3:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000812df7:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
ffff800000812dfa:	90                   	nop
ffff800000812dfb:	5d                   	pop    rbp
ffff800000812dfc:	c3                   	ret    

ffff800000812dfd <FAT32_lookup>:
FAT32_lookup():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:432


struct dir_entry * FAT32_lookup(struct index_node * parent_inode,struct dir_entry * dest_dentry)
{
ffff800000812dfd:	f3 0f 1e fa          	endbr64 
ffff800000812e01:	55                   	push   rbp
ffff800000812e02:	48 89 e5             	mov    rbp,rsp
ffff800000812e05:	41 57                	push   r15
ffff800000812e07:	53                   	push   rbx
ffff800000812e08:	48 83 ec 60          	sub    rsp,0x60
ffff800000812e0c:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000812e0c <FAT32_lookup+0xf>
ffff800000812e13:	49 bb 24 07 11 00 00 	movabs r11,0x110724
ffff800000812e1a:	00 00 00 
ffff800000812e1d:	4c 01 db             	add    rbx,r11
ffff800000812e20:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
ffff800000812e24:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:433
	struct FAT32_inode_info * finode = parent_inode->private_index_info;
ffff800000812e28:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000812e2c:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff800000812e30:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:434
	struct FAT32_sb_info * fsbi = parent_inode->sb->private_sb_info;
ffff800000812e34:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000812e38:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000812e3c:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000812e40:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:436

	unsigned int cluster = 0;
ffff800000812e44:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:437
	unsigned long sector = 0;
ffff800000812e4b:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffff800000812e52:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:438
	unsigned char * buf =NULL; 
ffff800000812e53:	48 c7 45 b0 00 00 00 	mov    QWORD PTR [rbp-0x50],0x0
ffff800000812e5a:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:439
	int i = 0,j = 0,x = 0;
ffff800000812e5b:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff800000812e62:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff800000812e69:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:440
	struct FAT32_Directory * tmpdentry = NULL;
ffff800000812e70:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff800000812e77:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:441
	struct FAT32_LongDirectory * tmpldentry = NULL;
ffff800000812e78:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff800000812e7f:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:442
	struct index_node * p = NULL;
ffff800000812e80:	48 c7 45 a8 00 00 00 	mov    QWORD PTR [rbp-0x58],0x0
ffff800000812e87:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:444

	buf = kmallocat(0,TO_MPGN(fsbi->bytes_per_cluster));
ffff800000812e88:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000812e8c:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000812e90:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff800000812e96:	48 8d 90 ff 0f 00 00 	lea    rdx,[rax+0xfff]
ffff800000812e9d:	48 85 c0             	test   rax,rax
ffff800000812ea0:	48 0f 48 c2          	cmovs  rax,rdx
ffff800000812ea4:	48 c1 f8 0c          	sar    rax,0xc
ffff800000812ea8:	89 c6                	mov    esi,eax
ffff800000812eaa:	bf 00 00 00 00       	mov    edi,0x0
ffff800000812eaf:	49 89 df             	mov    r15,rbx
ffff800000812eb2:	48 b8 22 ee ed ff ff 	movabs rax,0xffffffffffedee22
ffff800000812eb9:	ff ff ff 
ffff800000812ebc:	48 01 d8             	add    rax,rbx
ffff800000812ebf:	ff d0                	call   rax
ffff800000812ec1:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:446

	cluster = finode->first_cluster;
ffff800000812ec5:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000812ec9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812ecc:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:449

next_cluster:
	sector = fsbi->Data_firstsector + (cluster - 2) * fsbi->sector_per_cluster;
ffff800000812ecf:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000812ed3:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
ffff800000812ed7:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000812eda:	83 e8 02             	sub    eax,0x2
ffff800000812edd:	89 c1                	mov    ecx,eax
ffff800000812edf:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000812ee3:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000812ee7:	48 0f af c1          	imul   rax,rcx
ffff800000812eeb:	48 01 d0             	add    rax,rdx
ffff800000812eee:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:450
	printf("lookup cluster:0x%x,sector:0x%x\r\n",cluster,sector);
ffff800000812ef2:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff800000812ef6:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000812ef9:	89 c6                	mov    esi,eax
ffff800000812efb:	48 b8 f0 d8 ff ff ff 	movabs rax,0xffffffffffffd8f0
ffff800000812f02:	ff ff ff 
ffff800000812f05:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000812f09:	48 89 c7             	mov    rdi,rax
ffff800000812f0c:	49 89 df             	mov    r15,rbx
ffff800000812f0f:	b8 00 00 00 00       	mov    eax,0x0
ffff800000812f14:	48 b9 91 e4 ed ff ff 	movabs rcx,0xffffffffffede491
ffff800000812f1b:	ff ff ff 
ffff800000812f1e:	48 01 d9             	add    rcx,rbx
ffff800000812f21:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:451
    if(blkdev_read(parent_inode->dev,sector*SECTOR_SIZE,fsbi->sector_per_cluster*SECTOR_SIZE,buf)<0)
ffff800000812f23:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000812f27:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000812f2b:	48 c1 e0 09          	shl    rax,0x9
ffff800000812f2f:	48 89 c7             	mov    rdi,rax
ffff800000812f32:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000812f36:	48 c1 e0 09          	shl    rax,0x9
ffff800000812f3a:	48 89 c6             	mov    rsi,rax
ffff800000812f3d:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000812f41:	0f b7 40 18          	movzx  eax,WORD PTR [rax+0x18]
ffff800000812f45:	0f b7 c0             	movzx  eax,ax
ffff800000812f48:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffff800000812f4c:	48 89 d1             	mov    rcx,rdx
ffff800000812f4f:	48 89 fa             	mov    rdx,rdi
ffff800000812f52:	89 c7                	mov    edi,eax
ffff800000812f54:	49 89 df             	mov    r15,rbx
ffff800000812f57:	48 b8 60 cb ee ff ff 	movabs rax,0xffffffffffeecb60
ffff800000812f5e:	ff ff ff 
ffff800000812f61:	48 01 d8             	add    rax,rbx
ffff800000812f64:	ff d0                	call   rax
ffff800000812f66:	85 c0                	test   eax,eax
ffff800000812f68:	79 4b                	jns    ffff800000812fb5 <FAT32_lookup+0x1b8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:453
	{
		printf("FAT32 FS(lookup) read disk ERROR!!!!!!!!!!\n");
ffff800000812f6a:	48 b8 18 d9 ff ff ff 	movabs rax,0xffffffffffffd918
ffff800000812f71:	ff ff ff 
ffff800000812f74:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000812f78:	48 89 c7             	mov    rdi,rax
ffff800000812f7b:	49 89 df             	mov    r15,rbx
ffff800000812f7e:	b8 00 00 00 00       	mov    eax,0x0
ffff800000812f83:	48 ba 91 e4 ed ff ff 	movabs rdx,0xffffffffffede491
ffff800000812f8a:	ff ff ff 
ffff800000812f8d:	48 01 da             	add    rdx,rbx
ffff800000812f90:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:454
        kmfree(buf);
ffff800000812f92:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000812f96:	48 89 c7             	mov    rdi,rax
ffff800000812f99:	49 89 df             	mov    r15,rbx
ffff800000812f9c:	48 b8 37 00 ee ff ff 	movabs rax,0xffffffffffee0037
ffff800000812fa3:	ff ff ff 
ffff800000812fa6:	48 01 d8             	add    rax,rbx
ffff800000812fa9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:455
		return NULL;
ffff800000812fab:	b8 00 00 00 00       	mov    eax,0x0
ffff800000812fb0:	e9 60 08 00 00       	jmp    ffff800000813815 <FAT32_lookup+0xa18>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:458
	}

	tmpdentry = (struct FAT32_Directory *)buf;
ffff800000812fb5:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000812fb9:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:460

	for(i = 0;i < fsbi->bytes_per_cluster;i+= 32,tmpdentry++)
ffff800000812fbd:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff800000812fc4:	e9 9d 05 00 00       	jmp    ffff800000813566 <FAT32_lookup+0x769>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:462
	{
		if(tmpdentry->DIR_Attr == ATTR_LONG_NAME)
ffff800000812fc9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812fcd:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff800000812fd1:	3c 0f                	cmp    al,0xf
ffff800000812fd3:	0f 84 59 05 00 00    	je     ffff800000813532 <FAT32_lookup+0x735>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:464
			continue;
		if(tmpdentry->DIR_Name[0] == 0xe5 || tmpdentry->DIR_Name[0] == 0x00 || tmpdentry->DIR_Name[0] == 0x05)
ffff800000812fd9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812fdd:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812fe0:	3c e5                	cmp    al,0xe5
ffff800000812fe2:	0f 84 4d 05 00 00    	je     ffff800000813535 <FAT32_lookup+0x738>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:464 (discriminator 2)
ffff800000812fe8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812fec:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812fef:	84 c0                	test   al,al
ffff800000812ff1:	0f 84 3e 05 00 00    	je     ffff800000813535 <FAT32_lookup+0x738>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:464 (discriminator 4)
ffff800000812ff7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812ffb:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812ffe:	3c 05                	cmp    al,0x5
ffff800000813000:	0f 84 2f 05 00 00    	je     ffff800000813535 <FAT32_lookup+0x738>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:467
			continue;

		tmpldentry = (struct FAT32_LongDirectory *)tmpdentry-1;
ffff800000813006:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081300a:	48 83 e8 20          	sub    rax,0x20
ffff80000081300e:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:468
		j = 0;
ffff800000813012:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:471

		//long file/dir name compare
		while(tmpldentry->LDIR_Attr == ATTR_LONG_NAME && tmpldentry->LDIR_Ord != 0xe5)
ffff800000813019:	e9 88 01 00 00       	jmp    ffff8000008131a6 <FAT32_lookup+0x3a9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:473
		{
			for(x=0;x<5;x++)
ffff80000081301e:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff800000813025:	eb 6a                	jmp    ffff800000813091 <FAT32_lookup+0x294>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:475
			{
				if(j>dest_dentry->name_length && tmpldentry->LDIR_Name1[x] == 0xffff)
ffff800000813027:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000081302b:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000081302e:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000813031:	7e 15                	jle    ffff800000813048 <FAT32_lookup+0x24b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:475 (discriminator 1)
ffff800000813033:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000813037:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff80000081303a:	48 63 d2             	movsxd rdx,edx
ffff80000081303d:	0f b7 44 50 01       	movzx  eax,WORD PTR [rax+rdx*2+0x1]
ffff800000813042:	66 83 f8 ff          	cmp    ax,0xffff
ffff800000813046:	74 44                	je     ffff80000081308c <FAT32_lookup+0x28f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:477
					continue;
				else if(j>dest_dentry->name_length || tmpldentry->LDIR_Name1[x] != (unsigned short)(dest_dentry->name[j++]))
ffff800000813048:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000081304c:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000081304f:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000813052:	0f 8f e0 04 00 00    	jg     ffff800000813538 <FAT32_lookup+0x73b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:477 (discriminator 1)
ffff800000813058:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081305c:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff80000081305f:	48 63 d2             	movsxd rdx,edx
ffff800000813062:	0f b7 4c 50 01       	movzx  ecx,WORD PTR [rax+rdx*2+0x1]
ffff800000813067:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000081306b:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff80000081306e:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000813071:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000813074:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
ffff800000813077:	48 98                	cdqe   
ffff800000813079:	48 01 f0             	add    rax,rsi
ffff80000081307c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081307f:	66 98                	cbw    
ffff800000813081:	66 39 c1             	cmp    cx,ax
ffff800000813084:	0f 85 ae 04 00 00    	jne    ffff800000813538 <FAT32_lookup+0x73b>
ffff80000081308a:	eb 01                	jmp    ffff80000081308d <FAT32_lookup+0x290>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:476
					continue;
ffff80000081308c:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:473 (discriminator 2)
			for(x=0;x<5;x++)
ffff80000081308d:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:473 (discriminator 1)
ffff800000813091:	83 7d e0 04          	cmp    DWORD PTR [rbp-0x20],0x4
ffff800000813095:	7e 90                	jle    ffff800000813027 <FAT32_lookup+0x22a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:480
					goto continue_cmp_fail;
			}
			for(x=0;x<6;x++)
ffff800000813097:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff80000081309e:	eb 6a                	jmp    ffff80000081310a <FAT32_lookup+0x30d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:482
			{
				if(j>dest_dentry->name_length && tmpldentry->LDIR_Name2[x] == 0xffff)
ffff8000008130a0:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008130a4:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff8000008130a7:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff8000008130aa:	7e 15                	jle    ffff8000008130c1 <FAT32_lookup+0x2c4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:482 (discriminator 1)
ffff8000008130ac:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008130b0:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff8000008130b3:	48 63 d2             	movsxd rdx,edx
ffff8000008130b6:	0f b7 44 50 0e       	movzx  eax,WORD PTR [rax+rdx*2+0xe]
ffff8000008130bb:	66 83 f8 ff          	cmp    ax,0xffff
ffff8000008130bf:	74 44                	je     ffff800000813105 <FAT32_lookup+0x308>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:484
					continue;
				else if(j>dest_dentry->name_length || tmpldentry->LDIR_Name2[x] != (unsigned short)(dest_dentry->name[j++]))
ffff8000008130c1:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008130c5:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff8000008130c8:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff8000008130cb:	0f 8f 6a 04 00 00    	jg     ffff80000081353b <FAT32_lookup+0x73e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:484 (discriminator 1)
ffff8000008130d1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008130d5:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff8000008130d8:	48 63 d2             	movsxd rdx,edx
ffff8000008130db:	0f b7 4c 50 0e       	movzx  ecx,WORD PTR [rax+rdx*2+0xe]
ffff8000008130e0:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008130e4:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff8000008130e7:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008130ea:	8d 50 01             	lea    edx,[rax+0x1]
ffff8000008130ed:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
ffff8000008130f0:	48 98                	cdqe   
ffff8000008130f2:	48 01 f0             	add    rax,rsi
ffff8000008130f5:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008130f8:	66 98                	cbw    
ffff8000008130fa:	66 39 c1             	cmp    cx,ax
ffff8000008130fd:	0f 85 38 04 00 00    	jne    ffff80000081353b <FAT32_lookup+0x73e>
ffff800000813103:	eb 01                	jmp    ffff800000813106 <FAT32_lookup+0x309>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:483
					continue;
ffff800000813105:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:480 (discriminator 2)
			for(x=0;x<6;x++)
ffff800000813106:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:480 (discriminator 1)
ffff80000081310a:	83 7d e0 05          	cmp    DWORD PTR [rbp-0x20],0x5
ffff80000081310e:	7e 90                	jle    ffff8000008130a0 <FAT32_lookup+0x2a3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:487
					goto continue_cmp_fail;
			}
			for(x=0;x<2;x++)
ffff800000813110:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff800000813117:	eb 72                	jmp    ffff80000081318b <FAT32_lookup+0x38e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:489
			{
				if(j>dest_dentry->name_length && tmpldentry->LDIR_Name3[x] == 0xffff)
ffff800000813119:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000081311d:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000813120:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000813123:	7e 19                	jle    ffff80000081313e <FAT32_lookup+0x341>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:489 (discriminator 1)
ffff800000813125:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000813129:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff80000081312c:	48 63 d2             	movsxd rdx,edx
ffff80000081312f:	48 83 c2 08          	add    rdx,0x8
ffff800000813133:	0f b7 44 50 0c       	movzx  eax,WORD PTR [rax+rdx*2+0xc]
ffff800000813138:	66 83 f8 ff          	cmp    ax,0xffff
ffff80000081313c:	74 48                	je     ffff800000813186 <FAT32_lookup+0x389>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:491
					continue;
				else if(j>dest_dentry->name_length || tmpldentry->LDIR_Name3[x] != (unsigned short)(dest_dentry->name[j++]))
ffff80000081313e:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000813142:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000813145:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000813148:	0f 8f f0 03 00 00    	jg     ffff80000081353e <FAT32_lookup+0x741>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:491 (discriminator 1)
ffff80000081314e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000813152:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff800000813155:	48 63 d2             	movsxd rdx,edx
ffff800000813158:	48 83 c2 08          	add    rdx,0x8
ffff80000081315c:	0f b7 4c 50 0c       	movzx  ecx,WORD PTR [rax+rdx*2+0xc]
ffff800000813161:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000813165:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff800000813168:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000081316b:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000081316e:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
ffff800000813171:	48 98                	cdqe   
ffff800000813173:	48 01 f0             	add    rax,rsi
ffff800000813176:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813179:	66 98                	cbw    
ffff80000081317b:	66 39 c1             	cmp    cx,ax
ffff80000081317e:	0f 85 ba 03 00 00    	jne    ffff80000081353e <FAT32_lookup+0x741>
ffff800000813184:	eb 01                	jmp    ffff800000813187 <FAT32_lookup+0x38a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:490
					continue;
ffff800000813186:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:487 (discriminator 2)
			for(x=0;x<2;x++)
ffff800000813187:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:487 (discriminator 1)
ffff80000081318b:	83 7d e0 01          	cmp    DWORD PTR [rbp-0x20],0x1
ffff80000081318f:	7e 88                	jle    ffff800000813119 <FAT32_lookup+0x31c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:495
					goto continue_cmp_fail;
			}

			if(j >= dest_dentry->name_length)
ffff800000813191:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000813195:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000813198:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff80000081319b:	0f 8d 2e 04 00 00    	jge    ffff8000008135cf <FAT32_lookup+0x7d2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:500
			{
				goto find_lookup_success;
			}

			tmpldentry --;
ffff8000008131a1:	48 83 6d d0 20       	sub    QWORD PTR [rbp-0x30],0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:471
		while(tmpldentry->LDIR_Attr == ATTR_LONG_NAME && tmpldentry->LDIR_Ord != 0xe5)
ffff8000008131a6:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008131aa:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff8000008131ae:	3c 0f                	cmp    al,0xf
ffff8000008131b0:	75 0f                	jne    ffff8000008131c1 <FAT32_lookup+0x3c4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:471 (discriminator 1)
ffff8000008131b2:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008131b6:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008131b9:	3c e5                	cmp    al,0xe5
ffff8000008131bb:	0f 85 5d fe ff ff    	jne    ffff80000081301e <FAT32_lookup+0x221>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:504
		}

		//short file/dir base name compare
		j = 0;
ffff8000008131c1:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:505
		for(x=0;x<8;x++)
ffff8000008131c8:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff8000008131cf:	e9 f4 01 00 00       	jmp    ffff8000008133c8 <FAT32_lookup+0x5cb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:507
		{
			switch(tmpdentry->DIR_Name[x])
ffff8000008131d4:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff8000008131d8:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff8000008131db:	48 98                	cdqe   
ffff8000008131dd:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff8000008131e1:	0f b6 c0             	movzx  eax,al
ffff8000008131e4:	83 f8 7a             	cmp    eax,0x7a
ffff8000008131e7:	0f 8f d0 01 00 00    	jg     ffff8000008133bd <FAT32_lookup+0x5c0>
ffff8000008131ed:	83 f8 61             	cmp    eax,0x61
ffff8000008131f0:	0f 8d e6 00 00 00    	jge    ffff8000008132dc <FAT32_lookup+0x4df>
ffff8000008131f6:	83 f8 5a             	cmp    eax,0x5a
ffff8000008131f9:	0f 8f be 01 00 00    	jg     ffff8000008133bd <FAT32_lookup+0x5c0>
ffff8000008131ff:	83 f8 41             	cmp    eax,0x41
ffff800000813202:	0f 8d d4 00 00 00    	jge    ffff8000008132dc <FAT32_lookup+0x4df>
ffff800000813208:	83 f8 20             	cmp    eax,0x20
ffff80000081320b:	74 1a                	je     ffff800000813227 <FAT32_lookup+0x42a>
ffff80000081320d:	83 f8 20             	cmp    eax,0x20
ffff800000813210:	0f 8c a7 01 00 00    	jl     ffff8000008133bd <FAT32_lookup+0x5c0>
ffff800000813216:	83 e8 30             	sub    eax,0x30
ffff800000813219:	83 f8 09             	cmp    eax,0x9
ffff80000081321c:	0f 87 9b 01 00 00    	ja     ffff8000008133bd <FAT32_lookup+0x5c0>
ffff800000813222:	e9 53 01 00 00       	jmp    ffff80000081337a <FAT32_lookup+0x57d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:510
			{
				case ' ':
					if(!(tmpdentry->DIR_Attr & ATTR_DIRECTORY))
ffff800000813227:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081322b:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff80000081322f:	0f b6 c0             	movzx  eax,al
ffff800000813232:	83 e0 10             	and    eax,0x10
ffff800000813235:	85 c0                	test   eax,eax
ffff800000813237:	75 50                	jne    ffff800000813289 <FAT32_lookup+0x48c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:512
					{
						if(dest_dentry->name[j]=='.')
ffff800000813239:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000081323d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000813240:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000813243:	48 98                	cdqe   
ffff800000813245:	48 01 d0             	add    rax,rdx
ffff800000813248:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081324b:	3c 2e                	cmp    al,0x2e
ffff80000081324d:	0f 84 70 01 00 00    	je     ffff8000008133c3 <FAT32_lookup+0x5c6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:514
							continue;
						else if(tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff800000813253:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000813257:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff80000081325a:	48 98                	cdqe   
ffff80000081325c:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000813260:	0f b6 d0             	movzx  edx,al
ffff800000813263:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000813267:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000081326a:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000081326d:	48 98                	cdqe   
ffff80000081326f:	48 01 c8             	add    rax,rcx
ffff800000813272:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813275:	0f be c0             	movsx  eax,al
ffff800000813278:	39 c2                	cmp    edx,eax
ffff80000081327a:	0f 85 c1 02 00 00    	jne    ffff800000813541 <FAT32_lookup+0x744>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:516
						{
							j++;
ffff800000813280:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:517
							break;
ffff800000813284:	e9 3b 01 00 00       	jmp    ffff8000008133c4 <FAT32_lookup+0x5c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:524
						else
							goto continue_cmp_fail;
					}
					else
					{
						if(j < dest_dentry->name_length && tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff800000813289:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000081328d:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000813290:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000813293:	7d 32                	jge    ffff8000008132c7 <FAT32_lookup+0x4ca>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:524 (discriminator 1)
ffff800000813295:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000813299:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff80000081329c:	48 98                	cdqe   
ffff80000081329e:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff8000008132a2:	0f b6 d0             	movzx  edx,al
ffff8000008132a5:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008132a9:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008132ac:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008132af:	48 98                	cdqe   
ffff8000008132b1:	48 01 c8             	add    rax,rcx
ffff8000008132b4:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008132b7:	0f be c0             	movsx  eax,al
ffff8000008132ba:	39 c2                	cmp    edx,eax
ffff8000008132bc:	75 09                	jne    ffff8000008132c7 <FAT32_lookup+0x4ca>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:526
						{
							j++;
ffff8000008132be:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:527
							break;
ffff8000008132c2:	e9 fd 00 00 00       	jmp    ffff8000008133c4 <FAT32_lookup+0x5c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:529
						}
						else if(j == dest_dentry->name_length)
ffff8000008132c7:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008132cb:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff8000008132ce:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff8000008132d1:	0f 85 6d 02 00 00    	jne    ffff800000813544 <FAT32_lookup+0x747>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:530
							continue;
ffff8000008132d7:	e9 e8 00 00 00       	jmp    ffff8000008133c4 <FAT32_lookup+0x5c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:537
							goto continue_cmp_fail;
					}

				case 'A' ... 'Z':
				case 'a' ... 'z':
					if(tmpdentry->DIR_NTRes & LOWERCASE_BASE)
ffff8000008132dc:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008132e0:	0f b6 40 0c          	movzx  eax,BYTE PTR [rax+0xc]
ffff8000008132e4:	0f b6 c0             	movzx  eax,al
ffff8000008132e7:	83 e0 08             	and    eax,0x8
ffff8000008132ea:	85 c0                	test   eax,eax
ffff8000008132ec:	74 49                	je     ffff800000813337 <FAT32_lookup+0x53a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:538
						if(j < dest_dentry->name_length && tmpdentry->DIR_Name[x] + 32 == dest_dentry->name[j])
ffff8000008132ee:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008132f2:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff8000008132f5:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff8000008132f8:	0f 8d 49 02 00 00    	jge    ffff800000813547 <FAT32_lookup+0x74a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:538 (discriminator 1)
ffff8000008132fe:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000813302:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000813305:	48 98                	cdqe   
ffff800000813307:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff80000081330b:	0f b6 c0             	movzx  eax,al
ffff80000081330e:	8d 50 20             	lea    edx,[rax+0x20]
ffff800000813311:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000813315:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000813318:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000081331b:	48 98                	cdqe   
ffff80000081331d:	48 01 c8             	add    rax,rcx
ffff800000813320:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813323:	0f be c0             	movsx  eax,al
ffff800000813326:	39 c2                	cmp    edx,eax
ffff800000813328:	0f 85 19 02 00 00    	jne    ffff800000813547 <FAT32_lookup+0x74a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:540
						{
							j++;
ffff80000081332e:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:541
							break;
ffff800000813332:	e9 8d 00 00 00       	jmp    ffff8000008133c4 <FAT32_lookup+0x5c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:547
						}
						else
							goto continue_cmp_fail;
					else
					{
						if(j < dest_dentry->name_length && tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff800000813337:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000081333b:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000081333e:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000813341:	0f 8d 03 02 00 00    	jge    ffff80000081354a <FAT32_lookup+0x74d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:547 (discriminator 1)
ffff800000813347:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000081334b:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff80000081334e:	48 98                	cdqe   
ffff800000813350:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000813354:	0f b6 d0             	movzx  edx,al
ffff800000813357:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000081335b:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000081335e:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000813361:	48 98                	cdqe   
ffff800000813363:	48 01 c8             	add    rax,rcx
ffff800000813366:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813369:	0f be c0             	movsx  eax,al
ffff80000081336c:	39 c2                	cmp    edx,eax
ffff80000081336e:	0f 85 d6 01 00 00    	jne    ffff80000081354a <FAT32_lookup+0x74d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:549
						{
							j++;
ffff800000813374:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:550
							break;
ffff800000813378:	eb 4a                	jmp    ffff8000008133c4 <FAT32_lookup+0x5c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:557
						else
							goto continue_cmp_fail;
					}

				case '0' ... '9':
					if(j < dest_dentry->name_length && tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff80000081337a:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000081337e:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000813381:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000813384:	0f 8d c3 01 00 00    	jge    ffff80000081354d <FAT32_lookup+0x750>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:557 (discriminator 1)
ffff80000081338a:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000081338e:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000813391:	48 98                	cdqe   
ffff800000813393:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000813397:	0f b6 d0             	movzx  edx,al
ffff80000081339a:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000081339e:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008133a1:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008133a4:	48 98                	cdqe   
ffff8000008133a6:	48 01 c8             	add    rax,rcx
ffff8000008133a9:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008133ac:	0f be c0             	movsx  eax,al
ffff8000008133af:	39 c2                	cmp    edx,eax
ffff8000008133b1:	0f 85 96 01 00 00    	jne    ffff80000081354d <FAT32_lookup+0x750>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:559
					{
						j++;
ffff8000008133b7:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:560
						break;
ffff8000008133bb:	eb 07                	jmp    ffff8000008133c4 <FAT32_lookup+0x5c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:566
					}
					else
						goto continue_cmp_fail;

				default :
					j++;
ffff8000008133bd:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:567
					break;
ffff8000008133c1:	eb 01                	jmp    ffff8000008133c4 <FAT32_lookup+0x5c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:513
							continue;
ffff8000008133c3:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:505 (discriminator 2)
		for(x=0;x<8;x++)
ffff8000008133c4:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:505 (discriminator 1)
ffff8000008133c8:	83 7d e0 07          	cmp    DWORD PTR [rbp-0x20],0x7
ffff8000008133cc:	0f 8e 02 fe ff ff    	jle    ffff8000008131d4 <FAT32_lookup+0x3d7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:571
			}
		}
		//short file ext name compare
		if(!(tmpdentry->DIR_Attr & ATTR_DIRECTORY))
ffff8000008133d2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008133d6:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff8000008133da:	0f b6 c0             	movzx  eax,al
ffff8000008133dd:	83 e0 10             	and    eax,0x10
ffff8000008133e0:	85 c0                	test   eax,eax
ffff8000008133e2:	0f 85 ea 01 00 00    	jne    ffff8000008135d2 <FAT32_lookup+0x7d5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:573
		{
			j++;
ffff8000008133e8:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:574
			for(x=8;x<11;x++)
ffff8000008133ec:	c7 45 e0 08 00 00 00 	mov    DWORD PTR [rbp-0x20],0x8
ffff8000008133f3:	e9 2b 01 00 00       	jmp    ffff800000813523 <FAT32_lookup+0x726>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:576
			{
				switch(tmpdentry->DIR_Name[x])
ffff8000008133f8:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff8000008133fc:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff8000008133ff:	48 98                	cdqe   
ffff800000813401:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000813405:	0f b6 c0             	movzx  eax,al
ffff800000813408:	83 f8 7a             	cmp    eax,0x7a
ffff80000081340b:	0f 8f 3f 01 00 00    	jg     ffff800000813550 <FAT32_lookup+0x753>
ffff800000813411:	83 f8 61             	cmp    eax,0x61
ffff800000813414:	7d 2e                	jge    ffff800000813444 <FAT32_lookup+0x647>
ffff800000813416:	83 f8 5a             	cmp    eax,0x5a
ffff800000813419:	0f 8f 31 01 00 00    	jg     ffff800000813550 <FAT32_lookup+0x753>
ffff80000081341f:	83 f8 41             	cmp    eax,0x41
ffff800000813422:	7d 20                	jge    ffff800000813444 <FAT32_lookup+0x647>
ffff800000813424:	83 f8 20             	cmp    eax,0x20
ffff800000813427:	0f 84 c4 00 00 00    	je     ffff8000008134f1 <FAT32_lookup+0x6f4>
ffff80000081342d:	83 f8 20             	cmp    eax,0x20
ffff800000813430:	0f 8c 1a 01 00 00    	jl     ffff800000813550 <FAT32_lookup+0x753>
ffff800000813436:	83 e8 30             	sub    eax,0x30
ffff800000813439:	83 f8 09             	cmp    eax,0x9
ffff80000081343c:	0f 87 0e 01 00 00    	ja     ffff800000813550 <FAT32_lookup+0x753>
ffff800000813442:	eb 7e                	jmp    ffff8000008134c2 <FAT32_lookup+0x6c5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:580
				{
					case 'A' ... 'Z':
					case 'a' ... 'z':
						if(tmpdentry->DIR_NTRes & LOWERCASE_EXT)
ffff800000813444:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000813448:	0f b6 40 0c          	movzx  eax,BYTE PTR [rax+0xc]
ffff80000081344c:	0f b6 c0             	movzx  eax,al
ffff80000081344f:	83 e0 10             	and    eax,0x10
ffff800000813452:	85 c0                	test   eax,eax
ffff800000813454:	74 39                	je     ffff80000081348f <FAT32_lookup+0x692>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:581
							if(tmpdentry->DIR_Name[x] + 32 == dest_dentry->name[j])
ffff800000813456:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000081345a:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff80000081345d:	48 98                	cdqe   
ffff80000081345f:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000813463:	0f b6 c0             	movzx  eax,al
ffff800000813466:	8d 50 20             	lea    edx,[rax+0x20]
ffff800000813469:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000081346d:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000813470:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000813473:	48 98                	cdqe   
ffff800000813475:	48 01 c8             	add    rax,rcx
ffff800000813478:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081347b:	0f be c0             	movsx  eax,al
ffff80000081347e:	39 c2                	cmp    edx,eax
ffff800000813480:	0f 85 cd 00 00 00    	jne    ffff800000813553 <FAT32_lookup+0x756>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:583
							{
								j++;
ffff800000813486:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:584
								break;
ffff80000081348a:	e9 90 00 00 00       	jmp    ffff80000081351f <FAT32_lookup+0x722>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:590
							}
							else
								goto continue_cmp_fail;
						else
						{
							if(tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff80000081348f:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000813493:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000813496:	48 98                	cdqe   
ffff800000813498:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff80000081349c:	0f b6 d0             	movzx  edx,al
ffff80000081349f:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008134a3:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008134a6:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008134a9:	48 98                	cdqe   
ffff8000008134ab:	48 01 c8             	add    rax,rcx
ffff8000008134ae:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008134b1:	0f be c0             	movsx  eax,al
ffff8000008134b4:	39 c2                	cmp    edx,eax
ffff8000008134b6:	0f 85 9a 00 00 00    	jne    ffff800000813556 <FAT32_lookup+0x759>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:592
							{
								j++;
ffff8000008134bc:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:593
								break;
ffff8000008134c0:	eb 5d                	jmp    ffff80000081351f <FAT32_lookup+0x722>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:600
							else
								goto continue_cmp_fail;
						}

					case '0' ... '9':
						if(tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff8000008134c2:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff8000008134c6:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff8000008134c9:	48 98                	cdqe   
ffff8000008134cb:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff8000008134cf:	0f b6 d0             	movzx  edx,al
ffff8000008134d2:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008134d6:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008134d9:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008134dc:	48 98                	cdqe   
ffff8000008134de:	48 01 c8             	add    rax,rcx
ffff8000008134e1:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008134e4:	0f be c0             	movsx  eax,al
ffff8000008134e7:	39 c2                	cmp    edx,eax
ffff8000008134e9:	75 6e                	jne    ffff800000813559 <FAT32_lookup+0x75c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:602
						{
							j++;
ffff8000008134eb:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:603
							break;
ffff8000008134ef:	eb 2e                	jmp    ffff80000081351f <FAT32_lookup+0x722>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:609
						}
						else
							goto continue_cmp_fail;

					case ' ':
						if(tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff8000008134f1:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff8000008134f5:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff8000008134f8:	48 98                	cdqe   
ffff8000008134fa:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff8000008134fe:	0f b6 d0             	movzx  edx,al
ffff800000813501:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000813505:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000813508:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000081350b:	48 98                	cdqe   
ffff80000081350d:	48 01 c8             	add    rax,rcx
ffff800000813510:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813513:	0f be c0             	movsx  eax,al
ffff800000813516:	39 c2                	cmp    edx,eax
ffff800000813518:	75 42                	jne    ffff80000081355c <FAT32_lookup+0x75f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:611
						{
							j++;
ffff80000081351a:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:612
							break;
ffff80000081351e:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:574 (discriminator 2)
			for(x=8;x<11;x++)
ffff80000081351f:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:574 (discriminator 1)
ffff800000813523:	83 7d e0 0a          	cmp    DWORD PTR [rbp-0x20],0xa
ffff800000813527:	0f 8e cb fe ff ff    	jle    ffff8000008133f8 <FAT32_lookup+0x5fb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:622
					default :
						goto continue_cmp_fail;
				}
			}
		}
		goto find_lookup_success;
ffff80000081352d:	e9 a0 00 00 00       	jmp    ffff8000008135d2 <FAT32_lookup+0x7d5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:463
			continue;
ffff800000813532:	90                   	nop
ffff800000813533:	eb 28                	jmp    ffff80000081355d <FAT32_lookup+0x760>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:465
			continue;
ffff800000813535:	90                   	nop
ffff800000813536:	eb 25                	jmp    ffff80000081355d <FAT32_lookup+0x760>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:478
					goto continue_cmp_fail;
ffff800000813538:	90                   	nop
ffff800000813539:	eb 22                	jmp    ffff80000081355d <FAT32_lookup+0x760>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:485
					goto continue_cmp_fail;
ffff80000081353b:	90                   	nop
ffff80000081353c:	eb 1f                	jmp    ffff80000081355d <FAT32_lookup+0x760>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:492
					goto continue_cmp_fail;
ffff80000081353e:	90                   	nop
ffff80000081353f:	eb 1c                	jmp    ffff80000081355d <FAT32_lookup+0x760>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:520
							goto continue_cmp_fail;
ffff800000813541:	90                   	nop
ffff800000813542:	eb 19                	jmp    ffff80000081355d <FAT32_lookup+0x760>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:532
							goto continue_cmp_fail;
ffff800000813544:	90                   	nop
ffff800000813545:	eb 16                	jmp    ffff80000081355d <FAT32_lookup+0x760>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:544
							goto continue_cmp_fail;
ffff800000813547:	90                   	nop
ffff800000813548:	eb 13                	jmp    ffff80000081355d <FAT32_lookup+0x760>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:553
							goto continue_cmp_fail;
ffff80000081354a:	90                   	nop
ffff80000081354b:	eb 10                	jmp    ffff80000081355d <FAT32_lookup+0x760>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:563
						goto continue_cmp_fail;
ffff80000081354d:	90                   	nop
ffff80000081354e:	eb 0d                	jmp    ffff80000081355d <FAT32_lookup+0x760>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:618
						goto continue_cmp_fail;
ffff800000813550:	90                   	nop
ffff800000813551:	eb 0a                	jmp    ffff80000081355d <FAT32_lookup+0x760>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:587
								goto continue_cmp_fail;
ffff800000813553:	90                   	nop
ffff800000813554:	eb 07                	jmp    ffff80000081355d <FAT32_lookup+0x760>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:596
								goto continue_cmp_fail;
ffff800000813556:	90                   	nop
ffff800000813557:	eb 04                	jmp    ffff80000081355d <FAT32_lookup+0x760>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:606
							goto continue_cmp_fail;
ffff800000813559:	90                   	nop
ffff80000081355a:	eb 01                	jmp    ffff80000081355d <FAT32_lookup+0x760>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:615
							goto continue_cmp_fail;
ffff80000081355c:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:460 (discriminator 2)
	for(i = 0;i < fsbi->bytes_per_cluster;i+= 32,tmpdentry++)
ffff80000081355d:	83 45 e8 20          	add    DWORD PTR [rbp-0x18],0x20
ffff800000813561:	48 83 45 d8 20       	add    QWORD PTR [rbp-0x28],0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:460 (discriminator 1)
ffff800000813566:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000813569:	48 63 d0             	movsxd rdx,eax
ffff80000081356c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000813570:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000813574:	48 39 c2             	cmp    rdx,rax
ffff800000813577:	0f 8c 4c fa ff ff    	jl     ffff800000812fc9 <FAT32_lookup+0x1cc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:627

continue_cmp_fail:;
	}
	
	cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff80000081357d:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000813580:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000813584:	89 d6                	mov    esi,edx
ffff800000813586:	48 89 c7             	mov    rdi,rax
ffff800000813589:	49 89 df             	mov    r15,rbx
ffff80000081358c:	48 b8 5a e2 ee ff ff 	movabs rax,0xffffffffffeee25a
ffff800000813593:	ff ff ff 
ffff800000813596:	48 01 d8             	add    rax,rbx
ffff800000813599:	ff d0                	call   rax
ffff80000081359b:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:628
	if(cluster < 0x0ffffff7)
ffff80000081359e:	81 7d ec f6 ff ff 0f 	cmp    DWORD PTR [rbp-0x14],0xffffff6
ffff8000008135a5:	77 05                	ja     ffff8000008135ac <FAT32_lookup+0x7af>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:629
		goto next_cluster;
ffff8000008135a7:	e9 23 f9 ff ff       	jmp    ffff800000812ecf <FAT32_lookup+0xd2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:631

    kmfree(buf);
ffff8000008135ac:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff8000008135b0:	48 89 c7             	mov    rdi,rax
ffff8000008135b3:	49 89 df             	mov    r15,rbx
ffff8000008135b6:	48 b8 37 00 ee ff ff 	movabs rax,0xffffffffffee0037
ffff8000008135bd:	ff ff ff 
ffff8000008135c0:	48 01 d8             	add    rax,rbx
ffff8000008135c3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:632
	return NULL;
ffff8000008135c5:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008135ca:	e9 46 02 00 00       	jmp    ffff800000813815 <FAT32_lookup+0xa18>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:497
				goto find_lookup_success;
ffff8000008135cf:	90                   	nop
ffff8000008135d0:	eb 01                	jmp    ffff8000008135d3 <FAT32_lookup+0x7d6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:622
		goto find_lookup_success;
ffff8000008135d2:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:635

find_lookup_success:
	p = (struct index_node *) kmallocat(0,TO_MPGN(sizeof(struct index_node)));
ffff8000008135d3:	be 01 00 00 00       	mov    esi,0x1
ffff8000008135d8:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008135dd:	49 89 df             	mov    r15,rbx
ffff8000008135e0:	48 b8 22 ee ed ff ff 	movabs rax,0xffffffffffedee22
ffff8000008135e7:	ff ff ff 
ffff8000008135ea:	48 01 d8             	add    rax,rbx
ffff8000008135ed:	ff d0                	call   rax
ffff8000008135ef:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:636
	memset(p,0,sizeof(struct index_node));
ffff8000008135f3:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008135f7:	ba 40 00 00 00       	mov    edx,0x40
ffff8000008135fc:	be 00 00 00 00       	mov    esi,0x0
ffff800000813601:	48 89 c7             	mov    rdi,rax
ffff800000813604:	49 89 df             	mov    r15,rbx
ffff800000813607:	48 b8 b1 1d ef ff ff 	movabs rax,0xffffffffffef1db1
ffff80000081360e:	ff ff ff 
ffff800000813611:	48 01 d8             	add    rax,rbx
ffff800000813614:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:637
	p->file_size = tmpdentry->DIR_FileSize;
ffff800000813616:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081361a:	8b 40 1c             	mov    eax,DWORD PTR [rax+0x1c]
ffff80000081361d:	89 c2                	mov    edx,eax
ffff80000081361f:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000813623:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:638
	p->blocks = (p->file_size + fsbi->bytes_per_cluster - 1)/fsbi->bytes_per_sector;
ffff800000813626:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000081362a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000081362d:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000813631:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000813635:	48 01 d0             	add    rax,rdx
ffff800000813638:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff80000081363c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000813640:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000813644:	48 89 c1             	mov    rcx,rax
ffff800000813647:	48 89 d0             	mov    rax,rdx
ffff80000081364a:	ba 00 00 00 00       	mov    edx,0x0
ffff80000081364f:	48 f7 f1             	div    rcx
ffff800000813652:	48 89 c2             	mov    rdx,rax
ffff800000813655:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000813659:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:639
	p->attribute = (tmpdentry->DIR_Attr & ATTR_DIRECTORY) ? FS_ATTR_DIR : FS_ATTR_FILE;
ffff80000081365d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000813661:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff800000813665:	0f b6 c0             	movzx  eax,al
ffff800000813668:	83 e0 10             	and    eax,0x10
ffff80000081366b:	85 c0                	test   eax,eax
ffff80000081366d:	74 07                	je     ffff800000813676 <FAT32_lookup+0x879>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:639 (discriminator 1)
ffff80000081366f:	ba 02 00 00 00       	mov    edx,0x2
ffff800000813674:	eb 05                	jmp    ffff80000081367b <FAT32_lookup+0x87e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:639 (discriminator 2)
ffff800000813676:	ba 01 00 00 00       	mov    edx,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:639 (discriminator 4)
ffff80000081367b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000081367f:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:640 (discriminator 4)
	p->sb = parent_inode->sb;
ffff800000813683:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000813687:	48 8b 50 20          	mov    rdx,QWORD PTR [rax+0x20]
ffff80000081368b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000081368f:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:641 (discriminator 4)
	p->f_ops = &FAT32_file_ops;
ffff800000813693:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000813697:	48 ba c0 fd ff ff ff 	movabs rdx,0xfffffffffffffdc0
ffff80000081369e:	ff ff ff 
ffff8000008136a1:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff8000008136a5:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:642 (discriminator 4)
	p->inode_ops = &FAT32_inode_ops;
ffff8000008136a9:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008136ad:	48 ba 18 ff ff ff ff 	movabs rdx,0xffffffffffffff18
ffff8000008136b4:	ff ff ff 
ffff8000008136b7:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff8000008136bb:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:644 (discriminator 4)

	p->private_index_info = (struct FAT32_inode_info *) kmallocat(0,TO_MPGN(sizeof(struct FAT32_inode_info)));
ffff8000008136bf:	be 01 00 00 00       	mov    esi,0x1
ffff8000008136c4:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008136c9:	49 89 df             	mov    r15,rbx
ffff8000008136cc:	48 b8 22 ee ed ff ff 	movabs rax,0xffffffffffedee22
ffff8000008136d3:	ff ff ff 
ffff8000008136d6:	48 01 d8             	add    rax,rbx
ffff8000008136d9:	ff d0                	call   rax
ffff8000008136db:	48 89 c2             	mov    rdx,rax
ffff8000008136de:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008136e2:	48 89 50 38          	mov    QWORD PTR [rax+0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:645 (discriminator 4)
	memset(p->private_index_info,0,sizeof(struct FAT32_inode_info));
ffff8000008136e6:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008136ea:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff8000008136ee:	ba 20 00 00 00       	mov    edx,0x20
ffff8000008136f3:	be 00 00 00 00       	mov    esi,0x0
ffff8000008136f8:	48 89 c7             	mov    rdi,rax
ffff8000008136fb:	49 89 df             	mov    r15,rbx
ffff8000008136fe:	48 b8 b1 1d ef ff ff 	movabs rax,0xffffffffffef1db1
ffff800000813705:	ff ff ff 
ffff800000813708:	48 01 d8             	add    rax,rbx
ffff80000081370b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:646 (discriminator 4)
	finode = p->private_index_info;
ffff80000081370d:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000813711:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff800000813715:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:648 (discriminator 4)

	finode->first_cluster = (tmpdentry->DIR_FstClusHI<< 16 | tmpdentry->DIR_FstClusLO) & 0x0fffffff;
ffff800000813719:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081371d:	0f b7 40 14          	movzx  eax,WORD PTR [rax+0x14]
ffff800000813721:	0f b7 c0             	movzx  eax,ax
ffff800000813724:	c1 e0 10             	shl    eax,0x10
ffff800000813727:	89 c2                	mov    edx,eax
ffff800000813729:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081372d:	0f b7 40 1a          	movzx  eax,WORD PTR [rax+0x1a]
ffff800000813731:	0f b7 c0             	movzx  eax,ax
ffff800000813734:	09 d0                	or     eax,edx
ffff800000813736:	48 98                	cdqe   
ffff800000813738:	25 ff ff ff 0f       	and    eax,0xfffffff
ffff80000081373d:	48 89 c2             	mov    rdx,rax
ffff800000813740:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000813744:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:649 (discriminator 4)
	finode->dentry_location = cluster;
ffff800000813747:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000081374a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000081374e:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:650 (discriminator 4)
	finode->dentry_position = tmpdentry - (struct FAT32_Directory *)buf;
ffff800000813752:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000813756:	48 2b 45 b0          	sub    rax,QWORD PTR [rbp-0x50]
ffff80000081375a:	48 c1 f8 05          	sar    rax,0x5
ffff80000081375e:	48 89 c2             	mov    rdx,rax
ffff800000813761:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000813765:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:651 (discriminator 4)
	finode->create_date = tmpdentry->DIR_CrtTime;
ffff800000813769:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081376d:	0f b7 50 0e          	movzx  edx,WORD PTR [rax+0xe]
ffff800000813771:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000813775:	66 89 50 18          	mov    WORD PTR [rax+0x18],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:652 (discriminator 4)
	finode->create_time = tmpdentry->DIR_CrtDate;
ffff800000813779:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081377d:	0f b7 50 10          	movzx  edx,WORD PTR [rax+0x10]
ffff800000813781:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000813785:	66 89 50 1a          	mov    WORD PTR [rax+0x1a],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:653 (discriminator 4)
	finode->write_date = tmpdentry->DIR_WrtTime;
ffff800000813789:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081378d:	0f b7 50 16          	movzx  edx,WORD PTR [rax+0x16]
ffff800000813791:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000813795:	66 89 50 1c          	mov    WORD PTR [rax+0x1c],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:654 (discriminator 4)
	finode->write_time = tmpdentry->DIR_WrtDate;
ffff800000813799:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081379d:	0f b7 50 18          	movzx  edx,WORD PTR [rax+0x18]
ffff8000008137a1:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008137a5:	66 89 50 1e          	mov    WORD PTR [rax+0x1e],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:656 (discriminator 4)

	if((tmpdentry->DIR_FstClusHI >> 12) && (p->attribute & FS_ATTR_FILE))
ffff8000008137a9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008137ad:	0f b7 40 14          	movzx  eax,WORD PTR [rax+0x14]
ffff8000008137b1:	66 c1 e8 0c          	shr    ax,0xc
ffff8000008137b5:	66 85 c0             	test   ax,ax
ffff8000008137b8:	74 27                	je     ffff8000008137e1 <FAT32_lookup+0x9e4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:656 (discriminator 1)
ffff8000008137ba:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008137be:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008137c2:	83 e0 01             	and    eax,0x1
ffff8000008137c5:	48 85 c0             	test   rax,rax
ffff8000008137c8:	74 17                	je     ffff8000008137e1 <FAT32_lookup+0x9e4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:658
	{
		p->attribute |= FS_ATTR_DEVICE;
ffff8000008137ca:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008137ce:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008137d2:	48 83 c8 04          	or     rax,0x4
ffff8000008137d6:	48 89 c2             	mov    rdx,rax
ffff8000008137d9:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008137dd:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:660
	}
	p->link=1;
ffff8000008137e1:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008137e5:	c7 40 1c 01 00 00 00 	mov    DWORD PTR [rax+0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:661
	dest_dentry->dir_inode = p;
ffff8000008137ec:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008137f0:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff8000008137f4:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:662
    kmfree(buf);
ffff8000008137f8:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff8000008137fc:	48 89 c7             	mov    rdi,rax
ffff8000008137ff:	49 89 df             	mov    r15,rbx
ffff800000813802:	48 b8 37 00 ee ff ff 	movabs rax,0xffffffffffee0037
ffff800000813809:	ff ff ff 
ffff80000081380c:	48 01 d8             	add    rax,rbx
ffff80000081380f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:663
	return dest_dentry;	
ffff800000813811:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:664
}
ffff800000813815:	48 83 c4 60          	add    rsp,0x60
ffff800000813819:	5b                   	pop    rbx
ffff80000081381a:	41 5f                	pop    r15
ffff80000081381c:	5d                   	pop    rbp
ffff80000081381d:	c3                   	ret    

ffff80000081381e <FAT32_mkdir>:
FAT32_mkdir():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:668


long FAT32_mkdir(struct index_node * inode,struct dir_entry * dentry,int mode)
{}
ffff80000081381e:	f3 0f 1e fa          	endbr64 
ffff800000813822:	55                   	push   rbp
ffff800000813823:	48 89 e5             	mov    rbp,rsp
ffff800000813826:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000813826 <FAT32_mkdir+0x8>
ffff80000081382d:	49 bb 0a fd 10 00 00 	movabs r11,0x10fd0a
ffff800000813834:	00 00 00 
ffff800000813837:	4c 01 d8             	add    rax,r11
ffff80000081383a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000081383e:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000813842:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
ffff800000813845:	90                   	nop
ffff800000813846:	5d                   	pop    rbp
ffff800000813847:	c3                   	ret    

ffff800000813848 <FAT32_rmdir>:
FAT32_rmdir():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:672


long FAT32_rmdir(struct index_node * inode,struct dir_entry * dentry)
{}
ffff800000813848:	f3 0f 1e fa          	endbr64 
ffff80000081384c:	55                   	push   rbp
ffff80000081384d:	48 89 e5             	mov    rbp,rsp
ffff800000813850:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000813850 <FAT32_rmdir+0x8>
ffff800000813857:	49 bb e0 fc 10 00 00 	movabs r11,0x10fce0
ffff80000081385e:	00 00 00 
ffff800000813861:	4c 01 d8             	add    rax,r11
ffff800000813864:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000813868:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000081386c:	90                   	nop
ffff80000081386d:	5d                   	pop    rbp
ffff80000081386e:	c3                   	ret    

ffff80000081386f <FAT32_rename>:
FAT32_rename():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:675

long FAT32_rename(struct index_node * old_inode,struct dir_entry * old_dentry,struct index_node * new_inode,struct dir_entry * new_dentry)
{}
ffff80000081386f:	f3 0f 1e fa          	endbr64 
ffff800000813873:	55                   	push   rbp
ffff800000813874:	48 89 e5             	mov    rbp,rsp
ffff800000813877:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000813877 <FAT32_rename+0x8>
ffff80000081387e:	49 bb b9 fc 10 00 00 	movabs r11,0x10fcb9
ffff800000813885:	00 00 00 
ffff800000813888:	4c 01 d8             	add    rax,r11
ffff80000081388b:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000081388f:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000813893:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff800000813897:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
ffff80000081389b:	90                   	nop
ffff80000081389c:	5d                   	pop    rbp
ffff80000081389d:	c3                   	ret    

ffff80000081389e <FAT32_getattr>:
FAT32_getattr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:678

long FAT32_getattr(struct dir_entry * dentry,unsigned long * attr)
{}
ffff80000081389e:	f3 0f 1e fa          	endbr64 
ffff8000008138a2:	55                   	push   rbp
ffff8000008138a3:	48 89 e5             	mov    rbp,rsp
ffff8000008138a6:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008138a6 <FAT32_getattr+0x8>
ffff8000008138ad:	49 bb 8a fc 10 00 00 	movabs r11,0x10fc8a
ffff8000008138b4:	00 00 00 
ffff8000008138b7:	4c 01 d8             	add    rax,r11
ffff8000008138ba:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff8000008138be:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff8000008138c2:	90                   	nop
ffff8000008138c3:	5d                   	pop    rbp
ffff8000008138c4:	c3                   	ret    

ffff8000008138c5 <FAT32_setattr>:
FAT32_setattr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:681

long FAT32_setattr(struct dir_entry * dentry,unsigned long * attr)
{}
ffff8000008138c5:	f3 0f 1e fa          	endbr64 
ffff8000008138c9:	55                   	push   rbp
ffff8000008138ca:	48 89 e5             	mov    rbp,rsp
ffff8000008138cd:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008138cd <FAT32_setattr+0x8>
ffff8000008138d4:	49 bb 63 fc 10 00 00 	movabs r11,0x10fc63
ffff8000008138db:	00 00 00 
ffff8000008138de:	4c 01 d8             	add    rax,r11
ffff8000008138e1:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff8000008138e5:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff8000008138e9:	90                   	nop
ffff8000008138ea:	5d                   	pop    rbp
ffff8000008138eb:	c3                   	ret    

ffff8000008138ec <FAT32_compare>:
FAT32_compare():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:696
	.setattr = FAT32_setattr,
};


//// these operation need cache and list
long FAT32_compare(struct dir_entry * parent_dentry,char * source_filename,char * destination_filename){}
ffff8000008138ec:	f3 0f 1e fa          	endbr64 
ffff8000008138f0:	55                   	push   rbp
ffff8000008138f1:	48 89 e5             	mov    rbp,rsp
ffff8000008138f4:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008138f4 <FAT32_compare+0x8>
ffff8000008138fb:	49 bb 3c fc 10 00 00 	movabs r11,0x10fc3c
ffff800000813902:	00 00 00 
ffff800000813905:	4c 01 d8             	add    rax,r11
ffff800000813908:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000081390c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000813910:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff800000813914:	90                   	nop
ffff800000813915:	5d                   	pop    rbp
ffff800000813916:	c3                   	ret    

ffff800000813917 <FAT32_hash>:
FAT32_hash():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:697
long FAT32_hash(struct dir_entry * dentry,char * filename){}
ffff800000813917:	f3 0f 1e fa          	endbr64 
ffff80000081391b:	55                   	push   rbp
ffff80000081391c:	48 89 e5             	mov    rbp,rsp
ffff80000081391f:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000081391f <FAT32_hash+0x8>
ffff800000813926:	49 bb 11 fc 10 00 00 	movabs r11,0x10fc11
ffff80000081392d:	00 00 00 
ffff800000813930:	4c 01 d8             	add    rax,r11
ffff800000813933:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000813937:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000081393b:	90                   	nop
ffff80000081393c:	5d                   	pop    rbp
ffff80000081393d:	c3                   	ret    

ffff80000081393e <FAT32_release>:
FAT32_release():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:698
long FAT32_release(struct dir_entry * dentry){}
ffff80000081393e:	f3 0f 1e fa          	endbr64 
ffff800000813942:	55                   	push   rbp
ffff800000813943:	48 89 e5             	mov    rbp,rsp
ffff800000813946:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000813946 <FAT32_release+0x8>
ffff80000081394d:	49 bb ea fb 10 00 00 	movabs r11,0x10fbea
ffff800000813954:	00 00 00 
ffff800000813957:	4c 01 d8             	add    rax,r11
ffff80000081395a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000081395e:	90                   	nop
ffff80000081395f:	5d                   	pop    rbp
ffff800000813960:	c3                   	ret    

ffff800000813961 <FAT32_iput>:
FAT32_iput():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:699
long FAT32_iput(struct dir_entry * dentry,struct index_node * inode){}
ffff800000813961:	f3 0f 1e fa          	endbr64 
ffff800000813965:	55                   	push   rbp
ffff800000813966:	48 89 e5             	mov    rbp,rsp
ffff800000813969:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000813969 <FAT32_iput+0x8>
ffff800000813970:	49 bb c7 fb 10 00 00 	movabs r11,0x10fbc7
ffff800000813977:	00 00 00 
ffff80000081397a:	4c 01 d8             	add    rax,r11
ffff80000081397d:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000813981:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000813985:	90                   	nop
ffff800000813986:	5d                   	pop    rbp
ffff800000813987:	c3                   	ret    

ffff800000813988 <fat32_write_superblock>:
fat32_write_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:711
	.release = FAT32_release,
	.iput = FAT32_iput,
};


void fat32_write_superblock(struct super_block * sb){}
ffff800000813988:	f3 0f 1e fa          	endbr64 
ffff80000081398c:	55                   	push   rbp
ffff80000081398d:	48 89 e5             	mov    rbp,rsp
ffff800000813990:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000813990 <fat32_write_superblock+0x8>
ffff800000813997:	49 bb a0 fb 10 00 00 	movabs r11,0x10fba0
ffff80000081399e:	00 00 00 
ffff8000008139a1:	4c 01 d8             	add    rax,r11
ffff8000008139a4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff8000008139a8:	90                   	nop
ffff8000008139a9:	5d                   	pop    rbp
ffff8000008139aa:	c3                   	ret    

ffff8000008139ab <fat32_put_superblock>:
fat32_put_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:714

void fat32_put_superblock(struct super_block * sb)
{
ffff8000008139ab:	f3 0f 1e fa          	endbr64 
ffff8000008139af:	55                   	push   rbp
ffff8000008139b0:	48 89 e5             	mov    rbp,rsp
ffff8000008139b3:	41 57                	push   r15
ffff8000008139b5:	53                   	push   rbx
ffff8000008139b6:	48 83 ec 10          	sub    rsp,0x10
ffff8000008139ba:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008139ba <fat32_put_superblock+0xf>
ffff8000008139c1:	49 bb 76 fb 10 00 00 	movabs r11,0x10fb76
ffff8000008139c8:	00 00 00 
ffff8000008139cb:	4c 01 db             	add    rbx,r11
ffff8000008139ce:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:715
    kmfree(sb->private_sb_info);
ffff8000008139d2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008139d6:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff8000008139da:	48 89 c7             	mov    rdi,rax
ffff8000008139dd:	49 89 df             	mov    r15,rbx
ffff8000008139e0:	48 b8 37 00 ee ff ff 	movabs rax,0xffffffffffee0037
ffff8000008139e7:	ff ff ff 
ffff8000008139ea:	48 01 d8             	add    rax,rbx
ffff8000008139ed:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:716
    kmfree(sb->root->dir_inode->private_index_info);
ffff8000008139ef:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008139f3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008139f6:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008139fa:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff8000008139fe:	48 89 c7             	mov    rdi,rax
ffff800000813a01:	49 89 df             	mov    r15,rbx
ffff800000813a04:	48 b8 37 00 ee ff ff 	movabs rax,0xffffffffffee0037
ffff800000813a0b:	ff ff ff 
ffff800000813a0e:	48 01 d8             	add    rax,rbx
ffff800000813a11:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:717
    kmfree(sb->root->dir_inode);
ffff800000813a13:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813a17:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000813a1a:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000813a1e:	48 89 c7             	mov    rdi,rax
ffff800000813a21:	49 89 df             	mov    r15,rbx
ffff800000813a24:	48 b8 37 00 ee ff ff 	movabs rax,0xffffffffffee0037
ffff800000813a2b:	ff ff ff 
ffff800000813a2e:	48 01 d8             	add    rax,rbx
ffff800000813a31:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:718
    kmfree(sb->root);
ffff800000813a33:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813a37:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000813a3a:	48 89 c7             	mov    rdi,rax
ffff800000813a3d:	49 89 df             	mov    r15,rbx
ffff800000813a40:	48 b8 37 00 ee ff ff 	movabs rax,0xffffffffffee0037
ffff800000813a47:	ff ff ff 
ffff800000813a4a:	48 01 d8             	add    rax,rbx
ffff800000813a4d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:719
    kmfree(sb);
ffff800000813a4f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813a53:	48 89 c7             	mov    rdi,rax
ffff800000813a56:	49 89 df             	mov    r15,rbx
ffff800000813a59:	48 b8 37 00 ee ff ff 	movabs rax,0xffffffffffee0037
ffff800000813a60:	ff ff ff 
ffff800000813a63:	48 01 d8             	add    rax,rbx
ffff800000813a66:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:720
}
ffff800000813a68:	90                   	nop
ffff800000813a69:	48 83 c4 10          	add    rsp,0x10
ffff800000813a6d:	5b                   	pop    rbx
ffff800000813a6e:	41 5f                	pop    r15
ffff800000813a70:	5d                   	pop    rbp
ffff800000813a71:	c3                   	ret    

ffff800000813a72 <fat32_write_inode>:
fat32_write_inode():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:723

void fat32_write_inode(struct index_node * inode)
{
ffff800000813a72:	f3 0f 1e fa          	endbr64 
ffff800000813a76:	55                   	push   rbp
ffff800000813a77:	48 89 e5             	mov    rbp,rsp
ffff800000813a7a:	41 57                	push   r15
ffff800000813a7c:	53                   	push   rbx
ffff800000813a7d:	48 83 ec 40          	sub    rsp,0x40
ffff800000813a81:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000813a81 <fat32_write_inode+0xf>
ffff800000813a88:	49 bb af fa 10 00 00 	movabs r11,0x10faaf
ffff800000813a8f:	00 00 00 
ffff800000813a92:	4c 01 db             	add    rbx,r11
ffff800000813a95:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:724
	struct FAT32_Directory * fdentry = NULL;
ffff800000813a99:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff800000813aa0:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:725
	struct FAT32_Directory * buf = NULL;
ffff800000813aa1:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff800000813aa8:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:726
	struct FAT32_inode_info * finode = inode->private_index_info;
ffff800000813aa9:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000813aad:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff800000813ab1:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:727
	struct FAT32_sb_info * fsbi = inode->sb->private_sb_info;
ffff800000813ab5:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000813ab9:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000813abd:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000813ac1:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:728
	unsigned long sector = 0;
ffff800000813ac5:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff800000813acc:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:730

	if(finode->dentry_location == 0)
ffff800000813acd:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000813ad1:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000813ad5:	48 85 c0             	test   rax,rax
ffff800000813ad8:	75 2d                	jne    ffff800000813b07 <fat32_write_inode+0x95>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:732
	{
		printf("FS ERROR:write root inode!\n");	
ffff800000813ada:	48 b8 44 d9 ff ff ff 	movabs rax,0xffffffffffffd944
ffff800000813ae1:	ff ff ff 
ffff800000813ae4:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000813ae8:	48 89 c7             	mov    rdi,rax
ffff800000813aeb:	49 89 df             	mov    r15,rbx
ffff800000813aee:	b8 00 00 00 00       	mov    eax,0x0
ffff800000813af3:	48 ba 91 e4 ed ff ff 	movabs rdx,0xffffffffffede491
ffff800000813afa:	ff ff ff 
ffff800000813afd:	48 01 da             	add    rdx,rbx
ffff800000813b00:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:733
		return ;
ffff800000813b02:	e9 89 01 00 00       	jmp    ffff800000813c90 <fat32_write_inode+0x21e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:736
	}

	sector = fsbi->Data_firstsector + (finode->dentry_location - 2) * fsbi->sector_per_cluster;
ffff800000813b07:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000813b0b:	48 8b 48 28          	mov    rcx,QWORD PTR [rax+0x28]
ffff800000813b0f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000813b13:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000813b17:	48 8d 50 fe          	lea    rdx,[rax-0x2]
ffff800000813b1b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000813b1f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000813b23:	48 0f af c2          	imul   rax,rdx
ffff800000813b27:	48 01 c8             	add    rax,rcx
ffff800000813b2a:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:737
	buf = (struct FAT32_Directory *) kmallocat(0,TO_MPGN(fsbi->bytes_per_cluster));
ffff800000813b2e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000813b32:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000813b36:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff800000813b3c:	48 8d 90 ff 0f 00 00 	lea    rdx,[rax+0xfff]
ffff800000813b43:	48 85 c0             	test   rax,rax
ffff800000813b46:	48 0f 48 c2          	cmovs  rax,rdx
ffff800000813b4a:	48 c1 f8 0c          	sar    rax,0xc
ffff800000813b4e:	89 c6                	mov    esi,eax
ffff800000813b50:	bf 00 00 00 00       	mov    edi,0x0
ffff800000813b55:	49 89 df             	mov    r15,rbx
ffff800000813b58:	48 b8 22 ee ed ff ff 	movabs rax,0xffffffffffedee22
ffff800000813b5f:	ff ff ff 
ffff800000813b62:	48 01 d8             	add    rax,rbx
ffff800000813b65:	ff d0                	call   rax
ffff800000813b67:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:738
	memset(buf,0,fsbi->bytes_per_cluster);
ffff800000813b6b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000813b6f:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000813b73:	89 c2                	mov    edx,eax
ffff800000813b75:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000813b79:	be 00 00 00 00       	mov    esi,0x0
ffff800000813b7e:	48 89 c7             	mov    rdi,rax
ffff800000813b81:	49 89 df             	mov    r15,rbx
ffff800000813b84:	48 b8 b1 1d ef ff ff 	movabs rax,0xffffffffffef1db1
ffff800000813b8b:	ff ff ff 
ffff800000813b8e:	48 01 d8             	add    rax,rbx
ffff800000813b91:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:739
	blkdev_read(inode->dev,sector*SECTOR_SIZE,fsbi->sector_per_cluster*SECTOR_SIZE,buf);
ffff800000813b93:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000813b97:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000813b9b:	48 c1 e0 09          	shl    rax,0x9
ffff800000813b9f:	48 89 c7             	mov    rdi,rax
ffff800000813ba2:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000813ba6:	48 c1 e0 09          	shl    rax,0x9
ffff800000813baa:	48 89 c6             	mov    rsi,rax
ffff800000813bad:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000813bb1:	0f b7 40 18          	movzx  eax,WORD PTR [rax+0x18]
ffff800000813bb5:	0f b7 c0             	movzx  eax,ax
ffff800000813bb8:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000813bbc:	48 89 d1             	mov    rcx,rdx
ffff800000813bbf:	48 89 fa             	mov    rdx,rdi
ffff800000813bc2:	89 c7                	mov    edi,eax
ffff800000813bc4:	49 89 df             	mov    r15,rbx
ffff800000813bc7:	48 b8 60 cb ee ff ff 	movabs rax,0xffffffffffeecb60
ffff800000813bce:	ff ff ff 
ffff800000813bd1:	48 01 d8             	add    rax,rbx
ffff800000813bd4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:740
    fdentry = buf+finode->dentry_position;
ffff800000813bd6:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000813bda:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000813bde:	48 c1 e0 05          	shl    rax,0x5
ffff800000813be2:	48 89 c2             	mov    rdx,rax
ffff800000813be5:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000813be9:	48 01 d0             	add    rax,rdx
ffff800000813bec:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:743

	////alert fat32 dentry data
	fdentry->DIR_FileSize = inode->file_size;
ffff800000813bf0:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000813bf4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000813bf7:	89 c2                	mov    edx,eax
ffff800000813bf9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813bfd:	89 50 1c             	mov    DWORD PTR [rax+0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:744
	fdentry->DIR_FstClusLO = finode->first_cluster & 0xffff;
ffff800000813c00:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000813c04:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000813c07:	89 c2                	mov    edx,eax
ffff800000813c09:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813c0d:	66 89 50 1a          	mov    WORD PTR [rax+0x1a],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:745
	fdentry->DIR_FstClusHI = (fdentry->DIR_FstClusHI & 0xf000) | (finode->first_cluster >> 16);
ffff800000813c11:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813c15:	0f b7 40 14          	movzx  eax,WORD PTR [rax+0x14]
ffff800000813c19:	66 25 00 f0          	and    ax,0xf000
ffff800000813c1d:	89 c2                	mov    edx,eax
ffff800000813c1f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000813c23:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000813c26:	48 c1 e8 10          	shr    rax,0x10
ffff800000813c2a:	09 c2                	or     edx,eax
ffff800000813c2c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813c30:	66 89 50 14          	mov    WORD PTR [rax+0x14],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:747
	
	blkdev_write(inode->dev,sector*SECTOR_SIZE,fsbi->sector_per_cluster*SECTOR_SIZE,buf);
ffff800000813c34:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000813c38:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000813c3c:	48 c1 e0 09          	shl    rax,0x9
ffff800000813c40:	48 89 c7             	mov    rdi,rax
ffff800000813c43:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000813c47:	48 c1 e0 09          	shl    rax,0x9
ffff800000813c4b:	48 89 c6             	mov    rsi,rax
ffff800000813c4e:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000813c52:	0f b7 40 18          	movzx  eax,WORD PTR [rax+0x18]
ffff800000813c56:	0f b7 c0             	movzx  eax,ax
ffff800000813c59:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000813c5d:	48 89 d1             	mov    rcx,rdx
ffff800000813c60:	48 89 fa             	mov    rdx,rdi
ffff800000813c63:	89 c7                	mov    edi,eax
ffff800000813c65:	49 89 df             	mov    r15,rbx
ffff800000813c68:	48 b8 bf cc ee ff ff 	movabs rax,0xffffffffffeeccbf
ffff800000813c6f:	ff ff ff 
ffff800000813c72:	48 01 d8             	add    rax,rbx
ffff800000813c75:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:748
    kmfree(buf);
ffff800000813c77:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000813c7b:	48 89 c7             	mov    rdi,rax
ffff800000813c7e:	49 89 df             	mov    r15,rbx
ffff800000813c81:	48 b8 37 00 ee ff ff 	movabs rax,0xffffffffffee0037
ffff800000813c88:	ff ff ff 
ffff800000813c8b:	48 01 d8             	add    rax,rbx
ffff800000813c8e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:749
}
ffff800000813c90:	48 83 c4 40          	add    rsp,0x40
ffff800000813c94:	5b                   	pop    rbx
ffff800000813c95:	41 5f                	pop    r15
ffff800000813c97:	5d                   	pop    rbp
ffff800000813c98:	c3                   	ret    

ffff800000813c99 <fat32_read_superblock>:
fat32_read_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:760

	.write_inode = fat32_write_inode,
};

struct super_block * fat32_read_superblock(struct Disk_Partition_Table_Entry * DPTE,void * buf)
{
ffff800000813c99:	f3 0f 1e fa          	endbr64 
ffff800000813c9d:	55                   	push   rbp
ffff800000813c9e:	48 89 e5             	mov    rbp,rsp
ffff800000813ca1:	41 57                	push   r15
ffff800000813ca3:	53                   	push   rbx
ffff800000813ca4:	48 83 ec 40          	sub    rsp,0x40
ffff800000813ca8:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000813ca8 <fat32_read_superblock+0xf>
ffff800000813caf:	49 bb 88 f8 10 00 00 	movabs r11,0x10f888
ffff800000813cb6:	00 00 00 
ffff800000813cb9:	4c 01 db             	add    rbx,r11
ffff800000813cbc:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
ffff800000813cc0:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:761
	struct super_block * sbp = NULL;
ffff800000813cc4:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff800000813ccb:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:762
	struct FAT32_inode_info * finode = NULL;
ffff800000813ccc:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff800000813cd3:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:763
	struct FAT32_BootSector * fbs = NULL;
ffff800000813cd4:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff800000813cdb:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:764
	struct FAT32_sb_info * fsbi = NULL;
ffff800000813cdc:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff800000813ce3:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:767

	////super block
	sbp = (struct super_block *) kmallocat(0,TO_MPGN(sizeof(struct super_block)));
ffff800000813ce4:	be 01 00 00 00       	mov    esi,0x1
ffff800000813ce9:	bf 00 00 00 00       	mov    edi,0x0
ffff800000813cee:	49 89 df             	mov    r15,rbx
ffff800000813cf1:	48 b8 22 ee ed ff ff 	movabs rax,0xffffffffffedee22
ffff800000813cf8:	ff ff ff 
ffff800000813cfb:	48 01 d8             	add    rax,rbx
ffff800000813cfe:	ff d0                	call   rax
ffff800000813d00:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:768
	memset(sbp,0,sizeof(struct super_block));
ffff800000813d04:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813d08:	ba 28 00 00 00       	mov    edx,0x28
ffff800000813d0d:	be 00 00 00 00       	mov    esi,0x0
ffff800000813d12:	48 89 c7             	mov    rdi,rax
ffff800000813d15:	49 89 df             	mov    r15,rbx
ffff800000813d18:	48 b8 b1 1d ef ff ff 	movabs rax,0xffffffffffef1db1
ffff800000813d1f:	ff ff ff 
ffff800000813d22:	48 01 d8             	add    rax,rbx
ffff800000813d25:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:770

	sbp->sb_ops = &FAT32_sb_ops;
ffff800000813d27:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813d2b:	48 ba 58 fe ff ff ff 	movabs rdx,0xfffffffffffffe58
ffff800000813d32:	ff ff ff 
ffff800000813d35:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000813d39:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:771
	sbp->private_sb_info = (struct FAT32_sb_info *) kmallocat(0,TO_MPGN(sizeof(struct FAT32_sb_info)));
ffff800000813d3d:	be 01 00 00 00       	mov    esi,0x1
ffff800000813d42:	bf 00 00 00 00       	mov    edi,0x0
ffff800000813d47:	49 89 df             	mov    r15,rbx
ffff800000813d4a:	48 b8 22 ee ed ff ff 	movabs rax,0xffffffffffedee22
ffff800000813d51:	ff ff ff 
ffff800000813d54:	48 01 d8             	add    rax,rbx
ffff800000813d57:	ff d0                	call   rax
ffff800000813d59:	48 89 c2             	mov    rdx,rax
ffff800000813d5c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813d60:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:772
	memset(sbp->private_sb_info,0,sizeof(struct FAT32_sb_info));
ffff800000813d64:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813d68:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000813d6c:	ba 60 00 00 00       	mov    edx,0x60
ffff800000813d71:	be 00 00 00 00       	mov    esi,0x0
ffff800000813d76:	48 89 c7             	mov    rdi,rax
ffff800000813d79:	49 89 df             	mov    r15,rbx
ffff800000813d7c:	48 b8 b1 1d ef ff ff 	movabs rax,0xffffffffffef1db1
ffff800000813d83:	ff ff ff 
ffff800000813d86:	48 01 d8             	add    rax,rbx
ffff800000813d89:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:775

	////fat32 boot sector
	fbs = (struct FAT32_BootSector *)buf;
ffff800000813d8b:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000813d8f:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:776
 	fsbi = sbp->private_sb_info;
ffff800000813d93:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813d97:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000813d9b:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:777
	fsbi->start_sector = DPTE->start_LBA;
ffff800000813d9f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000813da3:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000813da6:	89 c2                	mov    edx,eax
ffff800000813da8:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000813dac:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:778
	fsbi->sector_count = DPTE->sectors_limit;
ffff800000813daf:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000813db3:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff800000813db6:	89 c2                	mov    edx,eax
ffff800000813db8:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000813dbc:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:779
	fsbi->sector_per_cluster = fbs->BPB_SecPerClus;
ffff800000813dc0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000813dc4:	0f b6 40 0d          	movzx  eax,BYTE PTR [rax+0xd]
ffff800000813dc8:	0f b6 d0             	movzx  edx,al
ffff800000813dcb:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000813dcf:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:780
	fsbi->bytes_per_cluster = fbs->BPB_SecPerClus * fbs->BPB_BytesPerSec;
ffff800000813dd3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000813dd7:	0f b6 40 0d          	movzx  eax,BYTE PTR [rax+0xd]
ffff800000813ddb:	0f b6 d0             	movzx  edx,al
ffff800000813dde:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000813de2:	0f b7 40 0b          	movzx  eax,WORD PTR [rax+0xb]
ffff800000813de6:	0f b7 c0             	movzx  eax,ax
ffff800000813de9:	0f af c2             	imul   eax,edx
ffff800000813dec:	48 63 d0             	movsxd rdx,eax
ffff800000813def:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000813df3:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:781
	fsbi->bytes_per_sector = fbs->BPB_BytesPerSec;
ffff800000813df7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000813dfb:	0f b7 40 0b          	movzx  eax,WORD PTR [rax+0xb]
ffff800000813dff:	0f b7 d0             	movzx  edx,ax
ffff800000813e02:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000813e06:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:782
	fsbi->Data_firstsector = DPTE->start_LBA + fbs->BPB_RsvdSecCnt + fbs->BPB_FATSz32 * fbs->BPB_NumFATs;
ffff800000813e0a:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000813e0e:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffff800000813e11:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000813e15:	0f b7 40 0e          	movzx  eax,WORD PTR [rax+0xe]
ffff800000813e19:	0f b7 c0             	movzx  eax,ax
ffff800000813e1c:	8d 0c 02             	lea    ecx,[rdx+rax*1]
ffff800000813e1f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000813e23:	8b 50 24             	mov    edx,DWORD PTR [rax+0x24]
ffff800000813e26:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000813e2a:	0f b6 40 10          	movzx  eax,BYTE PTR [rax+0x10]
ffff800000813e2e:	0f b6 c0             	movzx  eax,al
ffff800000813e31:	0f af c2             	imul   eax,edx
ffff800000813e34:	01 c8                	add    eax,ecx
ffff800000813e36:	89 c2                	mov    edx,eax
ffff800000813e38:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000813e3c:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:783
	fsbi->FAT1_firstsector = DPTE->start_LBA + fbs->BPB_RsvdSecCnt;
ffff800000813e40:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000813e44:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffff800000813e47:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000813e4b:	0f b7 40 0e          	movzx  eax,WORD PTR [rax+0xe]
ffff800000813e4f:	0f b7 c0             	movzx  eax,ax
ffff800000813e52:	01 d0                	add    eax,edx
ffff800000813e54:	89 c2                	mov    edx,eax
ffff800000813e56:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000813e5a:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:784
	fsbi->sector_per_FAT = fbs->BPB_FATSz32;
ffff800000813e5e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000813e62:	8b 40 24             	mov    eax,DWORD PTR [rax+0x24]
ffff800000813e65:	89 c2                	mov    edx,eax
ffff800000813e67:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000813e6b:	48 89 50 38          	mov    QWORD PTR [rax+0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:785
	fsbi->NumFATs = fbs->BPB_NumFATs;
ffff800000813e6f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000813e73:	0f b6 40 10          	movzx  eax,BYTE PTR [rax+0x10]
ffff800000813e77:	0f b6 d0             	movzx  edx,al
ffff800000813e7a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000813e7e:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:786
	fsbi->fsinfo_sector_infat = fbs->BPB_FSInfo;
ffff800000813e82:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000813e86:	0f b7 40 30          	movzx  eax,WORD PTR [rax+0x30]
ffff800000813e8a:	0f b7 d0             	movzx  edx,ax
ffff800000813e8d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000813e91:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:787
	fsbi->bootsector_bk_infat = fbs->BPB_BkBootSec;	
ffff800000813e95:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000813e99:	0f b7 40 32          	movzx  eax,WORD PTR [rax+0x32]
ffff800000813e9d:	0f b7 d0             	movzx  edx,ax
ffff800000813ea0:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000813ea4:	48 89 50 50          	mov    QWORD PTR [rax+0x50],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:789
	
	printf("FAT32 Boot Sector\n\tBPB_FSInfo:%x\n\tBPB_BkBootSec:%x\n\tBPB_TotSec32:%x\n",fbs->BPB_FSInfo,fbs->BPB_BkBootSec,fbs->BPB_TotSec32);
ffff800000813ea8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000813eac:	8b 48 20             	mov    ecx,DWORD PTR [rax+0x20]
ffff800000813eaf:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000813eb3:	0f b7 40 32          	movzx  eax,WORD PTR [rax+0x32]
ffff800000813eb7:	0f b7 d0             	movzx  edx,ax
ffff800000813eba:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000813ebe:	0f b7 40 30          	movzx  eax,WORD PTR [rax+0x30]
ffff800000813ec2:	0f b7 c0             	movzx  eax,ax
ffff800000813ec5:	89 c6                	mov    esi,eax
ffff800000813ec7:	48 b8 60 d9 ff ff ff 	movabs rax,0xffffffffffffd960
ffff800000813ece:	ff ff ff 
ffff800000813ed1:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000813ed5:	48 89 c7             	mov    rdi,rax
ffff800000813ed8:	49 89 df             	mov    r15,rbx
ffff800000813edb:	b8 00 00 00 00       	mov    eax,0x0
ffff800000813ee0:	49 b8 91 e4 ed ff ff 	movabs r8,0xffffffffffede491
ffff800000813ee7:	ff ff ff 
ffff800000813eea:	49 01 d8             	add    r8,rbx
ffff800000813eed:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:792
	
	////fat32 fsinfo sector
	fsbi->fat_fsinfo = (struct FAT32_FSInfo *) kmallocat(0,TO_MPGN(sizeof(struct FAT32_FSInfo)));
ffff800000813ef0:	be 01 00 00 00       	mov    esi,0x1
ffff800000813ef5:	bf 00 00 00 00       	mov    edi,0x0
ffff800000813efa:	49 89 df             	mov    r15,rbx
ffff800000813efd:	48 b8 22 ee ed ff ff 	movabs rax,0xffffffffffedee22
ffff800000813f04:	ff ff ff 
ffff800000813f07:	48 01 d8             	add    rax,rbx
ffff800000813f0a:	ff d0                	call   rax
ffff800000813f0c:	48 89 c2             	mov    rdx,rax
ffff800000813f0f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000813f13:	48 89 50 58          	mov    QWORD PTR [rax+0x58],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:793
	memset(fsbi->fat_fsinfo,0,512);
ffff800000813f17:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000813f1b:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
ffff800000813f1f:	ba 00 02 00 00       	mov    edx,0x200
ffff800000813f24:	be 00 00 00 00       	mov    esi,0x0
ffff800000813f29:	48 89 c7             	mov    rdi,rax
ffff800000813f2c:	49 89 df             	mov    r15,rbx
ffff800000813f2f:	48 b8 b1 1d ef ff ff 	movabs rax,0xffffffffffef1db1
ffff800000813f36:	ff ff ff 
ffff800000813f39:	48 01 d8             	add    rax,rbx
ffff800000813f3c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:794
	blkdev_read(root_sb->dev,(DPTE->start_LBA + fbs->BPB_FSInfo)*SECTOR_SIZE,SECTOR_SIZE,(unsigned char *)fsbi->fat_fsinfo);
ffff800000813f3e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000813f42:	48 8b 50 58          	mov    rdx,QWORD PTR [rax+0x58]
ffff800000813f46:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000813f4a:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffff800000813f4d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000813f51:	0f b7 40 30          	movzx  eax,WORD PTR [rax+0x30]
ffff800000813f55:	0f b7 c0             	movzx  eax,ax
ffff800000813f58:	01 c8                	add    eax,ecx
ffff800000813f5a:	c1 e0 09             	shl    eax,0x9
ffff800000813f5d:	89 c6                	mov    esi,eax
ffff800000813f5f:	48 b8 90 fd ff ff ff 	movabs rax,0xfffffffffffffd90
ffff800000813f66:	ff ff ff 
ffff800000813f69:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000813f6d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000813f70:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff800000813f74:	0f b7 c0             	movzx  eax,ax
ffff800000813f77:	48 89 d1             	mov    rcx,rdx
ffff800000813f7a:	ba 00 02 00 00       	mov    edx,0x200
ffff800000813f7f:	89 c7                	mov    edi,eax
ffff800000813f81:	49 89 df             	mov    r15,rbx
ffff800000813f84:	48 b8 60 cb ee ff ff 	movabs rax,0xffffffffffeecb60
ffff800000813f8b:	ff ff ff 
ffff800000813f8e:	48 01 d8             	add    rax,rbx
ffff800000813f91:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:795
	printf("FAT32 FSInfo\n\tFSI_LeadSig:%x\n\tFSI_StrucSig:%x\n\tFSI_Free_Count:%x\n",fsbi->fat_fsinfo->FSI_LeadSig,fsbi->fat_fsinfo->FSI_StrucSig,fsbi->fat_fsinfo->FSI_Free_Count);
ffff800000813f93:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000813f97:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
ffff800000813f9b:	8b 88 e8 01 00 00    	mov    ecx,DWORD PTR [rax+0x1e8]
ffff800000813fa1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000813fa5:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
ffff800000813fa9:	8b 90 e4 01 00 00    	mov    edx,DWORD PTR [rax+0x1e4]
ffff800000813faf:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000813fb3:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
ffff800000813fb7:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000813fb9:	89 c6                	mov    esi,eax
ffff800000813fbb:	48 b8 a8 d9 ff ff ff 	movabs rax,0xffffffffffffd9a8
ffff800000813fc2:	ff ff ff 
ffff800000813fc5:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000813fc9:	48 89 c7             	mov    rdi,rax
ffff800000813fcc:	49 89 df             	mov    r15,rbx
ffff800000813fcf:	b8 00 00 00 00       	mov    eax,0x0
ffff800000813fd4:	49 b8 91 e4 ed ff ff 	movabs r8,0xffffffffffede491
ffff800000813fdb:	ff ff ff 
ffff800000813fde:	49 01 d8             	add    r8,rbx
ffff800000813fe1:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:798
	
	////directory entry
	sbp->root = (struct dir_entry *) kmallocat(0,TO_MPGN(sizeof(struct dir_entry)));
ffff800000813fe4:	be 01 00 00 00       	mov    esi,0x1
ffff800000813fe9:	bf 00 00 00 00       	mov    edi,0x0
ffff800000813fee:	49 89 df             	mov    r15,rbx
ffff800000813ff1:	48 b8 22 ee ed ff ff 	movabs rax,0xffffffffffedee22
ffff800000813ff8:	ff ff ff 
ffff800000813ffb:	48 01 d8             	add    rax,rbx
ffff800000813ffe:	ff d0                	call   rax
ffff800000814000:	48 89 c2             	mov    rdx,rax
ffff800000814003:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000814007:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:799
	memset(sbp->root,0,sizeof(struct dir_entry));
ffff80000081400a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081400e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000814011:	ba 68 00 00 00       	mov    edx,0x68
ffff800000814016:	be 00 00 00 00       	mov    esi,0x0
ffff80000081401b:	48 89 c7             	mov    rdi,rax
ffff80000081401e:	49 89 df             	mov    r15,rbx
ffff800000814021:	48 b8 b1 1d ef ff ff 	movabs rax,0xffffffffffef1db1
ffff800000814028:	ff ff ff 
ffff80000081402b:	48 01 d8             	add    rax,rbx
ffff80000081402e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:801

	list_init(&sbp->root->child_node);
ffff800000814030:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000814034:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000814037:	48 83 c0 10          	add    rax,0x10
ffff80000081403b:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff80000081403f:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000814043:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000081404a:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000081404e:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff800000814055:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff800000814056:	90                   	nop
fat32_read_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:802
	list_init(&sbp->root->subdirs_list);
ffff800000814057:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081405b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000081405e:	48 83 c0 28          	add    rax,0x28
ffff800000814062:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff800000814066:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000081406a:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff800000814071:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000814075:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000081407c:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000081407d:	90                   	nop
fat32_read_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:803
	sbp->root->parent = sbp->root;
ffff80000081407e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000814082:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000814085:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000814089:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000081408c:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:804
	sbp->root->dir_ops = &FAT32_dentry_ops;
ffff800000814090:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000814094:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000814097:	48 ba 00 ff ff ff ff 	movabs rdx,0xffffffffffffff00
ffff80000081409e:	ff ff ff 
ffff8000008140a1:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff8000008140a5:	48 89 50 60          	mov    QWORD PTR [rax+0x60],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:805
	sbp->root->name = (char *) kmallocat(0,TO_MPGN(2));
ffff8000008140a9:	be 01 00 00 00       	mov    esi,0x1
ffff8000008140ae:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008140b3:	49 89 df             	mov    r15,rbx
ffff8000008140b6:	48 b8 22 ee ed ff ff 	movabs rax,0xffffffffffedee22
ffff8000008140bd:	ff ff ff 
ffff8000008140c0:	48 01 d8             	add    rax,rbx
ffff8000008140c3:	ff d0                	call   rax
ffff8000008140c5:	48 89 c2             	mov    rdx,rax
ffff8000008140c8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008140cc:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008140cf:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:806
	sbp->root->name[0] = '/';
ffff8000008140d2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008140d6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008140d9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008140dc:	c6 00 2f             	mov    BYTE PTR [rax],0x2f
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:807
	sbp->root->name_length = 1;
ffff8000008140df:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008140e3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008140e6:	c7 40 08 01 00 00 00 	mov    DWORD PTR [rax+0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:810

	////index node
	sbp->root->dir_inode = (struct index_node *) kmallocat(0,TO_MPGN(sizeof(struct index_node)));
ffff8000008140ed:	be 01 00 00 00       	mov    esi,0x1
ffff8000008140f2:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008140f7:	49 89 df             	mov    r15,rbx
ffff8000008140fa:	48 b8 22 ee ed ff ff 	movabs rax,0xffffffffffedee22
ffff800000814101:	ff ff ff 
ffff800000814104:	48 01 d8             	add    rax,rbx
ffff800000814107:	ff d0                	call   rax
ffff800000814109:	48 89 c2             	mov    rdx,rax
ffff80000081410c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000814110:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000814113:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:811
	memset(sbp->root->dir_inode,0,sizeof(struct index_node));
ffff800000814117:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081411b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000081411e:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000814122:	ba 40 00 00 00       	mov    edx,0x40
ffff800000814127:	be 00 00 00 00       	mov    esi,0x0
ffff80000081412c:	48 89 c7             	mov    rdi,rax
ffff80000081412f:	49 89 df             	mov    r15,rbx
ffff800000814132:	48 b8 b1 1d ef ff ff 	movabs rax,0xffffffffffef1db1
ffff800000814139:	ff ff ff 
ffff80000081413c:	48 01 d8             	add    rax,rbx
ffff80000081413f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:812
	sbp->root->dir_inode->inode_ops = &FAT32_inode_ops;
ffff800000814141:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000814145:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000814148:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000081414c:	48 ba 18 ff ff ff ff 	movabs rdx,0xffffffffffffff18
ffff800000814153:	ff ff ff 
ffff800000814156:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000081415a:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:813
	sbp->root->dir_inode->f_ops = &FAT32_file_ops;
ffff80000081415e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000814162:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000814165:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000814169:	48 ba c0 fd ff ff ff 	movabs rdx,0xfffffffffffffdc0
ffff800000814170:	ff ff ff 
ffff800000814173:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000814177:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:814
	sbp->root->dir_inode->file_size = 0;
ffff80000081417b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081417f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000814182:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000814186:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:815
	sbp->root->dir_inode->blocks = (sbp->root->dir_inode->file_size + fsbi->bytes_per_cluster - 1)/fsbi->bytes_per_sector;
ffff80000081418d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000814191:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000814194:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000814198:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000081419b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081419f:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff8000008141a3:	48 01 d0             	add    rax,rdx
ffff8000008141a6:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff8000008141aa:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008141ae:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff8000008141b2:	48 89 c6             	mov    rsi,rax
ffff8000008141b5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008141b9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008141bc:	48 8b 48 40          	mov    rcx,QWORD PTR [rax+0x40]
ffff8000008141c0:	48 89 d0             	mov    rax,rdx
ffff8000008141c3:	ba 00 00 00 00       	mov    edx,0x0
ffff8000008141c8:	48 f7 f6             	div    rsi
ffff8000008141cb:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:816
	sbp->root->dir_inode->attribute = FS_ATTR_DIR;
ffff8000008141cf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008141d3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008141d6:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008141da:	48 c7 40 10 02 00 00 	mov    QWORD PTR [rax+0x10],0x2
ffff8000008141e1:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:817
	sbp->root->dir_inode->sb = sbp;
ffff8000008141e2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008141e6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008141e9:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008141ed:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff8000008141f1:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:820

	////fat32 root inode
	sbp->root->dir_inode->private_index_info = (struct FAT32_inode_info *) kmallocat(0,TO_MPGN(sizeof(struct FAT32_inode_info)));
ffff8000008141f5:	be 01 00 00 00       	mov    esi,0x1
ffff8000008141fa:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008141ff:	49 89 df             	mov    r15,rbx
ffff800000814202:	48 b8 22 ee ed ff ff 	movabs rax,0xffffffffffedee22
ffff800000814209:	ff ff ff 
ffff80000081420c:	48 01 d8             	add    rax,rbx
ffff80000081420f:	ff d0                	call   rax
ffff800000814211:	48 89 c2             	mov    rdx,rax
ffff800000814214:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000814218:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000081421b:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000081421f:	48 89 50 38          	mov    QWORD PTR [rax+0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:821
	memset(sbp->root->dir_inode->private_index_info,0,sizeof(struct FAT32_inode_info));
ffff800000814223:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000814227:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000081422a:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000081422e:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff800000814232:	ba 20 00 00 00       	mov    edx,0x20
ffff800000814237:	be 00 00 00 00       	mov    esi,0x0
ffff80000081423c:	48 89 c7             	mov    rdi,rax
ffff80000081423f:	49 89 df             	mov    r15,rbx
ffff800000814242:	48 b8 b1 1d ef ff ff 	movabs rax,0xffffffffffef1db1
ffff800000814249:	ff ff ff 
ffff80000081424c:	48 01 d8             	add    rax,rbx
ffff80000081424f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:822
	finode = (struct FAT32_inode_info *)sbp->root->dir_inode->private_index_info;
ffff800000814251:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000814255:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000814258:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000081425c:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff800000814260:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:823
	finode->first_cluster = fbs->BPB_RootClus;
ffff800000814264:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000814268:	8b 40 2c             	mov    eax,DWORD PTR [rax+0x2c]
ffff80000081426b:	89 c2                	mov    edx,eax
ffff80000081426d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000814271:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:824
	finode->dentry_location = 0;
ffff800000814274:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000814278:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
ffff80000081427f:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:825
	finode->dentry_position = 0; 
ffff800000814280:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000814284:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000081428b:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:826
	finode->create_date = 0;
ffff80000081428c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000814290:	66 c7 40 18 00 00    	mov    WORD PTR [rax+0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:827
	finode->create_time = 0;
ffff800000814296:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000081429a:	66 c7 40 1a 00 00    	mov    WORD PTR [rax+0x1a],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:828
	finode->write_date = 0;
ffff8000008142a0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008142a4:	66 c7 40 1c 00 00    	mov    WORD PTR [rax+0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:829
	finode->write_time = 0;
ffff8000008142aa:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008142ae:	66 c7 40 1e 00 00    	mov    WORD PTR [rax+0x1e],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:831

	return sbp;
ffff8000008142b4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:832
}
ffff8000008142b8:	48 83 c4 40          	add    rsp,0x40
ffff8000008142bc:	5b                   	pop    rbx
ffff8000008142bd:	41 5f                	pop    r15
ffff8000008142bf:	5d                   	pop    rbp
ffff8000008142c0:	c3                   	ret    

ffff8000008142c1 <DISK1_FAT32_FS_init>:
DISK1_FAT32_FS_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:844
	.read_superblock = fat32_read_superblock,
	.next = NULL,
};
//这个函数临时作为挂载根文件系统的函数。等硬盘驱动完成分区识别并注册分区设备之后会更改。
void DISK1_FAT32_FS_init()
{
ffff8000008142c1:	f3 0f 1e fa          	endbr64 
ffff8000008142c5:	55                   	push   rbp
ffff8000008142c6:	48 89 e5             	mov    rbp,rsp
ffff8000008142c9:	41 57                	push   r15
ffff8000008142cb:	53                   	push   rbx
ffff8000008142cc:	48 81 ec 10 04 00 00 	sub    rsp,0x410
ffff8000008142d3:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008142d3 <DISK1_FAT32_FS_init+0x12>
ffff8000008142da:	49 bb 5d f2 10 00 00 	movabs r11,0x10f25d
ffff8000008142e1:	00 00 00 
ffff8000008142e4:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:847
	int i;
	unsigned char buf[512];
	struct dir_entry * dentry = NULL;
ffff8000008142e7:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff8000008142ee:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:848
	struct Disk_Partition_Table DPT = {0};
ffff8000008142ef:	48 8d 95 e0 fb ff ff 	lea    rdx,[rbp-0x420]
ffff8000008142f6:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008142fb:	b9 40 00 00 00       	mov    ecx,0x40
ffff800000814300:	48 89 d7             	mov    rdi,rdx
ffff800000814303:	f3 48 ab             	rep stos QWORD PTR es:[rdi],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:850

	register_filesystem(&FAT32_fs_type);
ffff800000814306:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff80000081430d:	ff ff ff 
ffff800000814310:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000814314:	48 89 c7             	mov    rdi,rax
ffff800000814317:	49 89 df             	mov    r15,rbx
ffff80000081431a:	48 b8 50 9f ee ff ff 	movabs rax,0xffffffffffee9f50
ffff800000814321:	ff ff ff 
ffff800000814324:	48 01 d8             	add    rax,rbx
ffff800000814327:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:852
	
	memset(buf,0,512);
ffff800000814329:	48 8d 85 e0 fd ff ff 	lea    rax,[rbp-0x220]
ffff800000814330:	ba 00 02 00 00       	mov    edx,0x200
ffff800000814335:	be 00 00 00 00       	mov    esi,0x0
ffff80000081433a:	48 89 c7             	mov    rdi,rax
ffff80000081433d:	49 89 df             	mov    r15,rbx
ffff800000814340:	48 b8 b1 1d ef ff ff 	movabs rax,0xffffffffffef1db1
ffff800000814347:	ff ff ff 
ffff80000081434a:	48 01 d8             	add    rax,rbx
ffff80000081434d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:854

	blkdev_read(ROOT_DEV,0,512,buf);
ffff80000081434f:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff800000814356:	ff ff ff 
ffff800000814359:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000081435d:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000081435f:	0f b7 c0             	movzx  eax,ax
ffff800000814362:	48 8d 95 e0 fd ff ff 	lea    rdx,[rbp-0x220]
ffff800000814369:	48 89 d1             	mov    rcx,rdx
ffff80000081436c:	ba 00 02 00 00       	mov    edx,0x200
ffff800000814371:	be 00 00 00 00       	mov    esi,0x0
ffff800000814376:	89 c7                	mov    edi,eax
ffff800000814378:	49 89 df             	mov    r15,rbx
ffff80000081437b:	48 b8 60 cb ee ff ff 	movabs rax,0xffffffffffeecb60
ffff800000814382:	ff ff ff 
ffff800000814385:	48 01 d8             	add    rax,rbx
ffff800000814388:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:857
    // read_disk(DISK_MAJOR_MAJOR, 0, 1, buf);/*rint r= equest(DISK_MAJOR_MAJOR,DISKREQ_READ,0x0,1,(unsigned char *)buf);
    // chk_result(r);
    DPT = *(struct Disk_Partition_Table *)buf;
ffff80000081438a:	48 8d 95 e0 fd ff ff 	lea    rdx,[rbp-0x220]
ffff800000814391:	48 8d 85 e0 fb ff ff 	lea    rax,[rbp-0x420]
ffff800000814398:	48 89 d6             	mov    rsi,rdx
ffff80000081439b:	ba 40 00 00 00       	mov    edx,0x40
ffff8000008143a0:	48 89 c7             	mov    rdi,rax
ffff8000008143a3:	48 89 d1             	mov    rcx,rdx
ffff8000008143a6:	f3 48 a5             	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:858
	printf("DPTE[0] start_LBA:%x\ttype:%x\n",DPT.DPTE[0].start_LBA,DPT.DPTE[0].type);
ffff8000008143a9:	0f b6 85 a2 fd ff ff 	movzx  eax,BYTE PTR [rbp-0x25e]
ffff8000008143b0:	0f b6 d0             	movzx  edx,al
ffff8000008143b3:	8b 85 a6 fd ff ff    	mov    eax,DWORD PTR [rbp-0x25a]
ffff8000008143b9:	89 c6                	mov    esi,eax
ffff8000008143bb:	48 b8 f0 d9 ff ff ff 	movabs rax,0xffffffffffffd9f0
ffff8000008143c2:	ff ff ff 
ffff8000008143c5:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008143c9:	48 89 c7             	mov    rdi,rax
ffff8000008143cc:	49 89 df             	mov    r15,rbx
ffff8000008143cf:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008143d4:	48 b9 91 e4 ed ff ff 	movabs rcx,0xffffffffffede491
ffff8000008143db:	ff ff ff 
ffff8000008143de:	48 01 d9             	add    rcx,rbx
ffff8000008143e1:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:860

	memset(buf,0,512);
ffff8000008143e3:	48 8d 85 e0 fd ff ff 	lea    rax,[rbp-0x220]
ffff8000008143ea:	ba 00 02 00 00       	mov    edx,0x200
ffff8000008143ef:	be 00 00 00 00       	mov    esi,0x0
ffff8000008143f4:	48 89 c7             	mov    rdi,rax
ffff8000008143f7:	49 89 df             	mov    r15,rbx
ffff8000008143fa:	48 b8 b1 1d ef ff ff 	movabs rax,0xffffffffffef1db1
ffff800000814401:	ff ff ff 
ffff800000814404:	48 01 d8             	add    rax,rbx
ffff800000814407:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:861
	blkdev_read(ROOT_DEV,DPT.DPTE[0].start_LBA*512,512,buf);
ffff800000814409:	8b 85 a6 fd ff ff    	mov    eax,DWORD PTR [rbp-0x25a]
ffff80000081440f:	c1 e0 09             	shl    eax,0x9
ffff800000814412:	89 c6                	mov    esi,eax
ffff800000814414:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff80000081441b:	ff ff ff 
ffff80000081441e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000814422:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000814424:	0f b7 c0             	movzx  eax,ax
ffff800000814427:	48 8d 95 e0 fd ff ff 	lea    rdx,[rbp-0x220]
ffff80000081442e:	48 89 d1             	mov    rcx,rdx
ffff800000814431:	ba 00 02 00 00       	mov    edx,0x200
ffff800000814436:	89 c7                	mov    edi,eax
ffff800000814438:	49 89 df             	mov    r15,rbx
ffff80000081443b:	48 b8 60 cb ee ff ff 	movabs rax,0xffffffffffeecb60
ffff800000814442:	ff ff ff 
ffff800000814445:	48 01 d8             	add    rax,rbx
ffff800000814448:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:864

    //挂载新文件系统到/
	struct super_block *fat32_sb= mount_fs("FAT32",&DPT.DPTE[0],buf);	//not dev node
ffff80000081444a:	48 8d 85 e0 fd ff ff 	lea    rax,[rbp-0x220]
ffff800000814451:	48 8d 95 e0 fb ff ff 	lea    rdx,[rbp-0x420]
ffff800000814458:	48 8d 8a be 01 00 00 	lea    rcx,[rdx+0x1be]
ffff80000081445f:	48 89 c2             	mov    rdx,rax
ffff800000814462:	48 89 ce             	mov    rsi,rcx
ffff800000814465:	48 b8 ea d9 ff ff ff 	movabs rax,0xffffffffffffd9ea
ffff80000081446c:	ff ff ff 
ffff80000081446f:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000814473:	48 89 c7             	mov    rdi,rax
ffff800000814476:	49 89 df             	mov    r15,rbx
ffff800000814479:	48 b8 6b 9d ee ff ff 	movabs rax,0xffffffffffee9d6b
ffff800000814480:	ff ff ff 
ffff800000814483:	48 01 d8             	add    rax,rbx
ffff800000814486:	ff d0                	call   rax
ffff800000814488:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:866
	
	root_sb=fat32_sb;
ffff80000081448c:	48 b8 90 fd ff ff ff 	movabs rax,0xfffffffffffffd90
ffff800000814493:	ff ff ff 
ffff800000814496:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000081449a:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000081449e:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:867
	root_sb->dev=ROOT_DEV;
ffff8000008144a1:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff8000008144a8:	ff ff ff 
ffff8000008144ab:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008144af:	8b 10                	mov    edx,DWORD PTR [rax]
ffff8000008144b1:	48 b8 90 fd ff ff ff 	movabs rax,0xfffffffffffffd90
ffff8000008144b8:	ff ff ff 
ffff8000008144bb:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008144bf:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008144c2:	66 89 50 10          	mov    WORD PTR [rax+0x10],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:868
	root_sb->p_dev=&bd_ramdisk;
ffff8000008144c6:	48 b8 90 fd ff ff ff 	movabs rax,0xfffffffffffffd90
ffff8000008144cd:	ff ff ff 
ffff8000008144d0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008144d4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008144d7:	48 ba 80 ff ff ff ff 	movabs rdx,0xffffffffffffff80
ffff8000008144de:	ff ff ff 
ffff8000008144e1:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff8000008144e5:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:869
	mount_fs_on(droot,fat32_sb);//挂载到/上
ffff8000008144e9:	48 b8 48 fd ff ff ff 	movabs rax,0xfffffffffffffd48
ffff8000008144f0:	ff ff ff 
ffff8000008144f3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008144f7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008144fa:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008144fe:	48 89 d6             	mov    rsi,rdx
ffff800000814501:	48 89 c7             	mov    rdi,rax
ffff800000814504:	49 89 df             	mov    r15,rbx
ffff800000814507:	48 b8 18 9e ee ff ff 	movabs rax,0xffffffffffee9e18
ffff80000081450e:	ff ff ff 
ffff800000814511:	48 01 d8             	add    rax,rbx
ffff800000814514:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:870
}
ffff800000814516:	90                   	nop
ffff800000814517:	48 81 c4 10 04 00 00 	add    rsp,0x410
ffff80000081451e:	5b                   	pop    rbx
ffff80000081451f:	41 5f                	pop    r15
ffff800000814521:	5d                   	pop    rbp
ffff800000814522:	c3                   	ret    

ffff800000814523 <close_tty>:
close_tty():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:12
int stdd=0;
struct file_operations tty_fops={
        .open=init_tty, .close=close_tty,.write=write_tty,.read=read_tty,.ioctl=ioctl_tty
};

long close_tty(struct index_node * inode,struct file * filp){
ffff800000814523:	f3 0f 1e fa          	endbr64 
ffff800000814527:	55                   	push   rbp
ffff800000814528:	48 89 e5             	mov    rbp,rsp
ffff80000081452b:	41 57                	push   r15
ffff80000081452d:	53                   	push   rbx
ffff80000081452e:	48 83 ec 30          	sub    rsp,0x30
ffff800000814532:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000814532 <close_tty+0xf>
ffff800000814539:	49 bb fe ef 10 00 00 	movabs r11,0x10effe
ffff800000814540:	00 00 00 
ffff800000814543:	4c 01 db             	add    rbx,r11
ffff800000814546:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff80000081454a:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:13
    stdbuf_t * bi=&((tty_t*)filp->private_data)->stdin_buf;
ffff80000081454e:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000814552:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000814556:	48 83 c0 18          	add    rax,0x18
ffff80000081455a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:14
    stdbuf_t * bo=&((tty_t*)filp->private_data)->stdout_buf;
ffff80000081455e:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000814562:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000814566:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:15
    stdbuf_t * be=&((tty_t*)filp->private_data)->stderr_buf;
ffff80000081456a:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000081456e:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000814572:	48 83 c0 30          	add    rax,0x30
ffff800000814576:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:16
    kmfree((addr_t) bi);
ffff80000081457a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081457e:	48 89 c7             	mov    rdi,rax
ffff800000814581:	49 89 df             	mov    r15,rbx
ffff800000814584:	48 b8 37 00 ee ff ff 	movabs rax,0xffffffffffee0037
ffff80000081458b:	ff ff ff 
ffff80000081458e:	48 01 d8             	add    rax,rbx
ffff800000814591:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:17
    kmfree((addr_t) bo);
ffff800000814593:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000814597:	48 89 c7             	mov    rdi,rax
ffff80000081459a:	49 89 df             	mov    r15,rbx
ffff80000081459d:	48 b8 37 00 ee ff ff 	movabs rax,0xffffffffffee0037
ffff8000008145a4:	ff ff ff 
ffff8000008145a7:	48 01 d8             	add    rax,rbx
ffff8000008145aa:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:18
    kmfree((addr_t) be);
ffff8000008145ac:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008145b0:	48 89 c7             	mov    rdi,rax
ffff8000008145b3:	49 89 df             	mov    r15,rbx
ffff8000008145b6:	48 b8 37 00 ee ff ff 	movabs rax,0xffffffffffee0037
ffff8000008145bd:	ff ff ff 
ffff8000008145c0:	48 01 d8             	add    rax,rbx
ffff8000008145c3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:19
    kmfree((addr_t) filp->private_data);
ffff8000008145c5:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008145c9:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff8000008145cd:	48 89 c7             	mov    rdi,rax
ffff8000008145d0:	49 89 df             	mov    r15,rbx
ffff8000008145d3:	48 b8 37 00 ee ff ff 	movabs rax,0xffffffffffee0037
ffff8000008145da:	ff ff ff 
ffff8000008145dd:	48 01 d8             	add    rax,rbx
ffff8000008145e0:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:20
    return 0;
ffff8000008145e2:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:21
}
ffff8000008145e7:	48 83 c4 30          	add    rsp,0x30
ffff8000008145eb:	5b                   	pop    rbx
ffff8000008145ec:	41 5f                	pop    r15
ffff8000008145ee:	5d                   	pop    rbp
ffff8000008145ef:	c3                   	ret    

ffff8000008145f0 <init_tty>:
init_tty():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:24
//打开文件
long init_tty(struct index_node * inode,struct file * filp)
{
ffff8000008145f0:	f3 0f 1e fa          	endbr64 
ffff8000008145f4:	55                   	push   rbp
ffff8000008145f5:	48 89 e5             	mov    rbp,rsp
ffff8000008145f8:	41 57                	push   r15
ffff8000008145fa:	53                   	push   rbx
ffff8000008145fb:	48 83 ec 20          	sub    rsp,0x20
ffff8000008145ff:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008145ff <init_tty+0xf>
ffff800000814606:	49 bb 31 ef 10 00 00 	movabs r11,0x10ef31
ffff80000081460d:	00 00 00 
ffff800000814610:	4c 01 db             	add    rbx,r11
ffff800000814613:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000814617:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:25
    tty_t *ntty=(tty_t*) kmalloc(0,PAGE_4K_SIZE);
ffff80000081461b:	be 00 10 00 00       	mov    esi,0x1000
ffff800000814620:	bf 00 00 00 00       	mov    edi,0x0
ffff800000814625:	49 89 df             	mov    r15,rbx
ffff800000814628:	48 b8 96 fe ed ff ff 	movabs rax,0xffffffffffedfe96
ffff80000081462f:	ff ff ff 
ffff800000814632:	48 01 d8             	add    rax,rbx
ffff800000814635:	ff d0                	call   rax
ffff800000814637:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:27
    //创建三个缓冲区
    ntty->stdin_buf.data= (char*) kmalloc(0,PAGE_4K_SIZE);
ffff80000081463b:	be 00 10 00 00       	mov    esi,0x1000
ffff800000814640:	bf 00 00 00 00       	mov    edi,0x0
ffff800000814645:	49 89 df             	mov    r15,rbx
ffff800000814648:	48 b8 96 fe ed ff ff 	movabs rax,0xffffffffffedfe96
ffff80000081464f:	ff ff ff 
ffff800000814652:	48 01 d8             	add    rax,rbx
ffff800000814655:	ff d0                	call   rax
ffff800000814657:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000081465b:	48 89 42 18          	mov    QWORD PTR [rdx+0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:28
    ntty->stdout_buf.data=(char*) kmalloc(0,PAGE_4K_SIZE);
ffff80000081465f:	be 00 10 00 00       	mov    esi,0x1000
ffff800000814664:	bf 00 00 00 00       	mov    edi,0x0
ffff800000814669:	49 89 df             	mov    r15,rbx
ffff80000081466c:	48 b8 96 fe ed ff ff 	movabs rax,0xffffffffffedfe96
ffff800000814673:	ff ff ff 
ffff800000814676:	48 01 d8             	add    rax,rbx
ffff800000814679:	ff d0                	call   rax
ffff80000081467b:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000081467f:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:29
    ntty->stderr_buf.data=(char*) kmalloc(0,PAGE_4K_SIZE);
ffff800000814682:	be 00 10 00 00       	mov    esi,0x1000
ffff800000814687:	bf 00 00 00 00       	mov    edi,0x0
ffff80000081468c:	49 89 df             	mov    r15,rbx
ffff80000081468f:	48 b8 96 fe ed ff ff 	movabs rax,0xffffffffffedfe96
ffff800000814696:	ff ff ff 
ffff800000814699:	48 01 d8             	add    rax,rbx
ffff80000081469c:	ff d0                	call   rax
ffff80000081469e:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff8000008146a2:	48 89 42 30          	mov    QWORD PTR [rdx+0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:30
    ntty->stdin_buf. wptr= 0;
ffff8000008146a6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008146aa:	c7 40 20 00 00 00 00 	mov    DWORD PTR [rax+0x20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:31
    ntty->stdout_buf.wptr= 0;
ffff8000008146b1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008146b5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [rax+0x8],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:32
    ntty->stderr_buf.wptr= 0;
ffff8000008146bc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008146c0:	c7 40 38 00 00 00 00 	mov    DWORD PTR [rax+0x38],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:33
    ntty->stdin_buf. rptr= 0;
ffff8000008146c7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008146cb:	c7 40 24 00 00 00 00 	mov    DWORD PTR [rax+0x24],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:34
    ntty->stdout_buf.rptr= 0;
ffff8000008146d2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008146d6:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [rax+0xc],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:35
    ntty->stderr_buf.rptr= 0;
ffff8000008146dd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008146e1:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [rax+0x3c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:36
    ntty->stdin_buf.size= PAGE_4K_SIZE;
ffff8000008146e8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008146ec:	c7 40 28 00 10 00 00 	mov    DWORD PTR [rax+0x28],0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:37
    ntty->stdout_buf.size= PAGE_4K_SIZE;
ffff8000008146f3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008146f7:	c7 40 10 00 10 00 00 	mov    DWORD PTR [rax+0x10],0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:38
    ntty->stderr_buf.size= PAGE_4K_SIZE;
ffff8000008146fe:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000814702:	c7 40 40 00 10 00 00 	mov    DWORD PTR [rax+0x40],0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:40
    //设置inode文件操作方式为tty方式
    inode->f_ops=&tty_fops;
ffff800000814709:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081470d:	48 ba 70 fe ff ff ff 	movabs rdx,0xfffffffffffffe70
ffff800000814714:	ff ff ff 
ffff800000814717:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000081471b:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:41
    filp->f_ops=&tty_fops;
ffff80000081471f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000814723:	48 ba 70 fe ff ff ff 	movabs rdx,0xfffffffffffffe70
ffff80000081472a:	ff ff ff 
ffff80000081472d:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000814731:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:42
    filp->private_data=ntty;
ffff800000814735:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000814739:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000081473d:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:43
    return 0;
ffff800000814741:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:44
}
ffff800000814746:	48 83 c4 20          	add    rsp,0x20
ffff80000081474a:	5b                   	pop    rbx
ffff80000081474b:	41 5f                	pop    r15
ffff80000081474d:	5d                   	pop    rbp
ffff80000081474e:	c3                   	ret    

ffff80000081474f <read_tty>:
read_tty():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:47

long read_tty(struct file * filp,char * buf,unsigned long count,long * position)
{
ffff80000081474f:	f3 0f 1e fa          	endbr64 
ffff800000814753:	55                   	push   rbp
ffff800000814754:	48 89 e5             	mov    rbp,rsp
ffff800000814757:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000814757 <read_tty+0x8>
ffff80000081475e:	49 bb d9 ed 10 00 00 	movabs r11,0x10edd9
ffff800000814765:	00 00 00 
ffff800000814768:	4c 01 d8             	add    rax,r11
ffff80000081476b:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff80000081476f:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff800000814773:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffff800000814777:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:48
    stdbuf_t * b=&((tty_t*)filp->private_data)->stdin_buf;
ffff80000081477b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081477f:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000814783:	48 83 c0 18          	add    rax,0x18
ffff800000814787:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:49
    int i=0;
ffff80000081478b:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:50
    while (i<count){
ffff800000814792:	eb 6e                	jmp    ffff800000814802 <read_tty+0xb3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:51
        if(b->rptr==b->size)
ffff800000814794:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000814798:	8b 50 0c             	mov    edx,DWORD PTR [rax+0xc]
ffff80000081479b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000081479f:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff8000008147a2:	39 c2                	cmp    edx,eax
ffff8000008147a4:	75 0b                	jne    ffff8000008147b1 <read_tty+0x62>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:52
            b->rptr=0;
ffff8000008147a6:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008147aa:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [rax+0xc],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:53
        if(b->rptr==b->wptr)continue;
ffff8000008147b1:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008147b5:	8b 50 0c             	mov    edx,DWORD PTR [rax+0xc]
ffff8000008147b8:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008147bc:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff8000008147bf:	39 c2                	cmp    edx,eax
ffff8000008147c1:	75 02                	jne    ffff8000008147c5 <read_tty+0x76>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:53 (discriminator 1)
ffff8000008147c3:	eb 3d                	jmp    ffff800000814802 <read_tty+0xb3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:54
        buf[i++]=b->data[b->rptr];
ffff8000008147c5:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008147c9:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008147cc:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008147d0:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff8000008147d3:	48 98                	cdqe   
ffff8000008147d5:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
ffff8000008147d9:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008147dc:	8d 50 01             	lea    edx,[rax+0x1]
ffff8000008147df:	89 55 fc             	mov    DWORD PTR [rbp-0x4],edx
ffff8000008147e2:	48 63 d0             	movsxd rdx,eax
ffff8000008147e5:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008147e9:	48 01 c2             	add    rdx,rax
ffff8000008147ec:	0f b6 01             	movzx  eax,BYTE PTR [rcx]
ffff8000008147ef:	88 02                	mov    BYTE PTR [rdx],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:55
        b->rptr++;
ffff8000008147f1:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008147f5:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff8000008147f8:	8d 50 01             	lea    edx,[rax+0x1]
ffff8000008147fb:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008147ff:	89 50 0c             	mov    DWORD PTR [rax+0xc],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:50
    while (i<count){
ffff800000814802:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000814805:	48 98                	cdqe   
ffff800000814807:	48 39 45 d8          	cmp    QWORD PTR [rbp-0x28],rax
ffff80000081480b:	77 87                	ja     ffff800000814794 <read_tty+0x45>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:57
    }
}
ffff80000081480d:	90                   	nop
ffff80000081480e:	5d                   	pop    rbp
ffff80000081480f:	c3                   	ret    

ffff800000814810 <write_tty>:
write_tty():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:59
long write_tty(struct file * filp,char * buf,unsigned long count,long * position)
{
ffff800000814810:	f3 0f 1e fa          	endbr64 
ffff800000814814:	55                   	push   rbp
ffff800000814815:	48 89 e5             	mov    rbp,rsp
ffff800000814818:	41 57                	push   r15
ffff80000081481a:	48 83 ec 48          	sub    rsp,0x48
ffff80000081481e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000081481e <write_tty+0xe>
ffff800000814825:	49 bb 12 ed 10 00 00 	movabs r11,0x10ed12
ffff80000081482c:	00 00 00 
ffff80000081482f:	4c 01 d8             	add    rax,r11
ffff800000814832:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000814836:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffff80000081483a:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
ffff80000081483e:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:60
    stdbuf_t * b=&((tty_t*)filp->private_data)->stdout_buf;
ffff800000814842:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000814846:	48 8b 52 20          	mov    rdx,QWORD PTR [rdx+0x20]
ffff80000081484a:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:61
    int i=0;
ffff80000081484e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:62
    int saved_wptr=b->wptr;
ffff800000814855:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000814859:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff80000081485c:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:63
    while (i<count){
ffff80000081485f:	eb 5b                	jmp    ffff8000008148bc <write_tty+0xac>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:64
        if(b->wptr==b->size)
ffff800000814861:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000814865:	8b 4a 08             	mov    ecx,DWORD PTR [rdx+0x8]
ffff800000814868:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000081486c:	8b 52 10             	mov    edx,DWORD PTR [rdx+0x10]
ffff80000081486f:	39 d1                	cmp    ecx,edx
ffff800000814871:	75 0b                	jne    ffff80000081487e <write_tty+0x6e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:65
            b->wptr=0;
ffff800000814873:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000814877:	c7 42 08 00 00 00 00 	mov    DWORD PTR [rdx+0x8],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:66
        b->data[b->wptr]=buf[i++];
ffff80000081487e:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000814881:	8d 4a 01             	lea    ecx,[rdx+0x1]
ffff800000814884:	89 4d ec             	mov    DWORD PTR [rbp-0x14],ecx
ffff800000814887:	48 63 ca             	movsxd rcx,edx
ffff80000081488a:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff80000081488e:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff800000814892:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000814896:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000814899:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000081489d:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff8000008148a0:	48 63 d2             	movsxd rdx,edx
ffff8000008148a3:	48 01 d1             	add    rcx,rdx
ffff8000008148a6:	0f b6 16             	movzx  edx,BYTE PTR [rsi]
ffff8000008148a9:	88 11                	mov    BYTE PTR [rcx],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:67
        b->wptr++;
ffff8000008148ab:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008148af:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff8000008148b2:	8d 4a 01             	lea    ecx,[rdx+0x1]
ffff8000008148b5:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008148b9:	89 4a 08             	mov    DWORD PTR [rdx+0x8],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:63
    while (i<count){
ffff8000008148bc:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff8000008148bf:	48 63 d2             	movsxd rdx,edx
ffff8000008148c2:	48 39 55 b8          	cmp    QWORD PTR [rbp-0x48],rdx
ffff8000008148c6:	77 99                	ja     ffff800000814861 <write_tty+0x51>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:70
    }
    //刷新到framebuffer
    write_framebuffer(filp,b->data+saved_wptr,count,0);
ffff8000008148c8:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008148cc:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008148cf:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff8000008148d2:	48 63 d2             	movsxd rdx,edx
ffff8000008148d5:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff8000008148d9:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff8000008148dd:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
ffff8000008148e1:	b9 00 00 00 00       	mov    ecx,0x0
ffff8000008148e6:	49 89 c7             	mov    r15,rax
ffff8000008148e9:	49 b8 9c 94 ee ff ff 	movabs r8,0xffffffffffee949c
ffff8000008148f0:	ff ff ff 
ffff8000008148f3:	49 01 c0             	add    r8,rax
ffff8000008148f6:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:71
}
ffff8000008148f9:	90                   	nop
ffff8000008148fa:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff8000008148fe:	c9                   	leave  
ffff8000008148ff:	c3                   	ret    

ffff800000814900 <ioctl_tty>:
ioctl_tty():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:81
 * TTY_CONNECT:尝试连接到dev/console,这样会成为controlling terminal,里面的数据才能输出到屏幕上，
 * 因为除了特殊指定的进程都会有一个自己的天tty。
 * 成功返回0。
 * */
long ioctl_tty(struct index_node * inode, struct file * filp, unsigned long cmd, unsigned long arg)
{
ffff800000814900:	f3 0f 1e fa          	endbr64 
ffff800000814904:	55                   	push   rbp
ffff800000814905:	48 89 e5             	mov    rbp,rsp
ffff800000814908:	41 57                	push   r15
ffff80000081490a:	48 83 ec 58          	sub    rsp,0x58
ffff80000081490e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000081490e <ioctl_tty+0xe>
ffff800000814915:	49 bb 22 ec 10 00 00 	movabs r11,0x10ec22
ffff80000081491c:	00 00 00 
ffff80000081491f:	4c 01 d8             	add    rax,r11
ffff800000814922:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
ffff800000814926:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
ffff80000081492a:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
ffff80000081492e:	48 89 4d a0          	mov    QWORD PTR [rbp-0x60],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:82
    stdbuf_t * b=&((tty_t*)filp->private_data)->stderr_buf;
ffff800000814932:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffff800000814936:	48 8b 52 20          	mov    rdx,QWORD PTR [rdx+0x20]
ffff80000081493a:	48 83 c2 30          	add    rdx,0x30
ffff80000081493e:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:83
    stdbuf_t * ib=&((tty_t*)filp->private_data)->stdin_buf;
ffff800000814942:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffff800000814946:	48 8b 52 20          	mov    rdx,QWORD PTR [rdx+0x20]
ffff80000081494a:	48 83 c2 18          	add    rdx,0x18
ffff80000081494e:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:84
    int i=0;
ffff800000814952:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:85
    char* buf=*((char**)arg);
ffff800000814959:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
ffff80000081495d:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000814960:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:86
    unsigned long count=*((unsigned long*)(arg+8));
ffff800000814964:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
ffff800000814968:	48 83 c2 08          	add    rdx,0x8
ffff80000081496c:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000081496f:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:87
    int saved_wptr=b->wptr;
ffff800000814973:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000814977:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff80000081497a:	89 55 c4             	mov    DWORD PTR [rbp-0x3c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:88
    int fd=-1;
ffff80000081497d:	c7 45 c0 ff ff ff ff 	mov    DWORD PTR [rbp-0x40],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:89
    switch (cmd)
ffff800000814984:	48 83 7d a8 03       	cmp    QWORD PTR [rbp-0x58],0x3
ffff800000814989:	0f 84 b8 01 00 00    	je     ffff800000814b47 <ioctl_tty+0x247>
ffff80000081498f:	48 83 7d a8 03       	cmp    QWORD PTR [rbp-0x58],0x3
ffff800000814994:	0f 87 b8 01 00 00    	ja     ffff800000814b52 <ioctl_tty+0x252>
ffff80000081499a:	48 83 7d a8 02       	cmp    QWORD PTR [rbp-0x58],0x2
ffff80000081499f:	0f 84 0f 01 00 00    	je     ffff800000814ab4 <ioctl_tty+0x1b4>
ffff8000008149a5:	48 83 7d a8 02       	cmp    QWORD PTR [rbp-0x58],0x2
ffff8000008149aa:	0f 87 a2 01 00 00    	ja     ffff800000814b52 <ioctl_tty+0x252>
ffff8000008149b0:	48 83 7d a8 00       	cmp    QWORD PTR [rbp-0x58],0x0
ffff8000008149b5:	74 6b                	je     ffff800000814a22 <ioctl_tty+0x122>
ffff8000008149b7:	48 83 7d a8 01       	cmp    QWORD PTR [rbp-0x58],0x1
ffff8000008149bc:	0f 84 a2 00 00 00    	je     ffff800000814a64 <ioctl_tty+0x164>
ffff8000008149c2:	e9 8b 01 00 00       	jmp    ffff800000814b52 <ioctl_tty+0x252>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:93
    {
        case TTY_WSTDERR:
            while (i<count){
                if(b->wptr==b->size)
ffff8000008149c7:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008149cb:	8b 4a 08             	mov    ecx,DWORD PTR [rdx+0x8]
ffff8000008149ce:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008149d2:	8b 52 10             	mov    edx,DWORD PTR [rdx+0x10]
ffff8000008149d5:	39 d1                	cmp    ecx,edx
ffff8000008149d7:	75 0b                	jne    ffff8000008149e4 <ioctl_tty+0xe4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:94
                    b->wptr=0;
ffff8000008149d9:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008149dd:	c7 42 08 00 00 00 00 	mov    DWORD PTR [rdx+0x8],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:95
                b->data[b->wptr]=buf[i++];
ffff8000008149e4:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff8000008149e7:	8d 4a 01             	lea    ecx,[rdx+0x1]
ffff8000008149ea:	89 4d ec             	mov    DWORD PTR [rbp-0x14],ecx
ffff8000008149ed:	48 63 ca             	movsxd rcx,edx
ffff8000008149f0:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff8000008149f4:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff8000008149f8:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008149fc:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008149ff:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000814a03:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff800000814a06:	48 63 d2             	movsxd rdx,edx
ffff800000814a09:	48 01 d1             	add    rcx,rdx
ffff800000814a0c:	0f b6 16             	movzx  edx,BYTE PTR [rsi]
ffff800000814a0f:	88 11                	mov    BYTE PTR [rcx],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:96
                b->wptr++;
ffff800000814a11:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000814a15:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff800000814a18:	8d 4a 01             	lea    ecx,[rdx+0x1]
ffff800000814a1b:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000814a1f:	89 4a 08             	mov    DWORD PTR [rdx+0x8],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:92
            while (i<count){
ffff800000814a22:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000814a25:	48 63 d2             	movsxd rdx,edx
ffff800000814a28:	48 39 55 c8          	cmp    QWORD PTR [rbp-0x38],rdx
ffff800000814a2c:	77 99                	ja     ffff8000008149c7 <ioctl_tty+0xc7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:99
            }
            //刷新到framebuffer
            write_framebuffer(filp,b->data+saved_wptr,count,0);
ffff800000814a2e:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000814a32:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000814a35:	8b 55 c4             	mov    edx,DWORD PTR [rbp-0x3c]
ffff800000814a38:	48 63 d2             	movsxd rdx,edx
ffff800000814a3b:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff800000814a3f:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000814a43:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
ffff800000814a47:	b9 00 00 00 00       	mov    ecx,0x0
ffff800000814a4c:	49 89 c7             	mov    r15,rax
ffff800000814a4f:	49 b8 9c 94 ee ff ff 	movabs r8,0xffffffffffee949c
ffff800000814a56:	ff ff ff 
ffff800000814a59:	49 01 c0             	add    r8,rax
ffff800000814a5c:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:100
        break;
ffff800000814a5f:	e9 f7 00 00 00       	jmp    ffff800000814b5b <ioctl_tty+0x25b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:102
        case TTY_CONNECT:
            fd=sys_open("dev/console",O_WRONLY|O_CREAT|O_EXCL);
ffff800000814a64:	be c1 00 00 00       	mov    esi,0xc1
ffff800000814a69:	48 ba 0e da ff ff ff 	movabs rdx,0xffffffffffffda0e
ffff800000814a70:	ff ff ff 
ffff800000814a73:	48 8d 14 10          	lea    rdx,[rax+rdx*1]
ffff800000814a77:	48 89 d7             	mov    rdi,rdx
ffff800000814a7a:	49 89 c7             	mov    r15,rax
ffff800000814a7d:	48 ba 69 a3 ee ff ff 	movabs rdx,0xffffffffffeea369
ffff800000814a84:	ff ff ff 
ffff800000814a87:	48 01 c2             	add    rdx,rax
ffff800000814a8a:	ff d2                	call   rdx
ffff800000814a8c:	89 45 c0             	mov    DWORD PTR [rbp-0x40],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:103
            if(fd==-1)return -1;
ffff800000814a8f:	83 7d c0 ff          	cmp    DWORD PTR [rbp-0x40],0xffffffff
ffff800000814a93:	75 0c                	jne    ffff800000814aa1 <ioctl_tty+0x1a1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:103 (discriminator 1)
ffff800000814a95:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff800000814a9c:	e9 bf 00 00 00       	jmp    ffff800000814b60 <ioctl_tty+0x260>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:104
            ((tty_t*)filp->private_data)->console_fd=fd;
ffff800000814aa1:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000814aa5:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000814aa9:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
ffff800000814aac:	89 50 48             	mov    DWORD PTR [rax+0x48],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:105
            break;
ffff800000814aaf:	e9 a7 00 00 00       	jmp    ffff800000814b5b <ioctl_tty+0x25b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:107
        case TTY_DISCONNECT:
            fd=((tty_t*)filp->private_data)->console_fd;
ffff800000814ab4:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffff800000814ab8:	48 8b 52 20          	mov    rdx,QWORD PTR [rdx+0x20]
ffff800000814abc:	8b 52 48             	mov    edx,DWORD PTR [rdx+0x48]
ffff800000814abf:	89 55 c0             	mov    DWORD PTR [rbp-0x40],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:108
            if(fd==-1)return -1;
ffff800000814ac2:	83 7d c0 ff          	cmp    DWORD PTR [rbp-0x40],0xffffffff
ffff800000814ac6:	75 0c                	jne    ffff800000814ad4 <ioctl_tty+0x1d4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:108 (discriminator 1)
ffff800000814ac8:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff800000814acf:	e9 8c 00 00 00       	jmp    ffff800000814b60 <ioctl_tty+0x260>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:109
            sys_close(fd);
ffff800000814ad4:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
ffff800000814ad7:	89 d7                	mov    edi,edx
ffff800000814ad9:	49 89 c7             	mov    r15,rax
ffff800000814adc:	48 ba 9d a9 ee ff ff 	movabs rdx,0xffffffffffeea99d
ffff800000814ae3:	ff ff ff 
ffff800000814ae6:	48 01 c2             	add    rdx,rax
ffff800000814ae9:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:111
        case TTY_WSTDIN:
            while (i<count){
ffff800000814aeb:	eb 5a                	jmp    ffff800000814b47 <ioctl_tty+0x247>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:112
                if(ib->wptr==ib->size)
ffff800000814aed:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000814af1:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffff800000814af4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000814af8:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff800000814afb:	39 c2                	cmp    edx,eax
ffff800000814afd:	75 0b                	jne    ffff800000814b0a <ioctl_tty+0x20a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:113
                    ib->wptr=0;
ffff800000814aff:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000814b03:	c7 40 08 00 00 00 00 	mov    DWORD PTR [rax+0x8],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:114
                ib->data[ib->wptr]=buf[i++];
ffff800000814b0a:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000814b0d:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000814b10:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
ffff800000814b13:	48 63 d0             	movsxd rdx,eax
ffff800000814b16:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000814b1a:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
ffff800000814b1e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000814b22:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000814b25:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000814b29:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000814b2c:	48 98                	cdqe   
ffff800000814b2e:	48 01 c2             	add    rdx,rax
ffff800000814b31:	0f b6 01             	movzx  eax,BYTE PTR [rcx]
ffff800000814b34:	88 02                	mov    BYTE PTR [rdx],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:115
                ib->wptr++;
ffff800000814b36:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000814b3a:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000814b3d:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000814b40:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000814b44:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:111
            while (i<count){
ffff800000814b47:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000814b4a:	48 98                	cdqe   
ffff800000814b4c:	48 39 45 c8          	cmp    QWORD PTR [rbp-0x38],rax
ffff800000814b50:	77 9b                	ja     ffff800000814aed <ioctl_tty+0x1ed>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:117
            }
    default:return -1;
ffff800000814b52:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff800000814b59:	eb 05                	jmp    ffff800000814b60 <ioctl_tty+0x260>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:119
    }
    return 0;
ffff800000814b5b:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:120
}
ffff800000814b60:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000814b64:	c9                   	leave  
ffff800000814b65:	c3                   	ret    

ffff800000814b66 <init_com>:
init_com():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:12
#include "str.h"
#include "memory.h"
#include "mem.h"

char combuf[1024];
void init_com(int base_port){
ffff800000814b66:	f3 0f 1e fa          	endbr64 
ffff800000814b6a:	55                   	push   rbp
ffff800000814b6b:	48 89 e5             	mov    rbp,rsp
ffff800000814b6e:	41 57                	push   r15
ffff800000814b70:	53                   	push   rbx
ffff800000814b71:	48 83 ec 10          	sub    rsp,0x10
ffff800000814b75:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000814b75 <init_com+0xf>
ffff800000814b7c:	49 bb bb e9 10 00 00 	movabs r11,0x10e9bb
ffff800000814b83:	00 00 00 
ffff800000814b86:	4c 01 db             	add    rbx,r11
ffff800000814b89:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:14
    /* disable all interrupts */
    outb(base_port + COM_REG_IER, 0x00);
ffff800000814b8c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000814b8f:	83 c0 01             	add    eax,0x1
ffff800000814b92:	0f b7 c0             	movzx  eax,ax
ffff800000814b95:	be 00 00 00 00       	mov    esi,0x0
ffff800000814b9a:	89 c7                	mov    edi,eax
ffff800000814b9c:	49 89 df             	mov    r15,rbx
ffff800000814b9f:	48 b8 b0 62 ee ff ff 	movabs rax,0xffffffffffee62b0
ffff800000814ba6:	ff ff ff 
ffff800000814ba9:	48 01 d8             	add    rax,rbx
ffff800000814bac:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:17
    
    /* enable DLAB to set bound rate divisor */
    outb(base_port + COM_REG_LCR, 0x80);
ffff800000814bae:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000814bb1:	83 c0 03             	add    eax,0x3
ffff800000814bb4:	0f b7 c0             	movzx  eax,ax
ffff800000814bb7:	be 80 00 00 00       	mov    esi,0x80
ffff800000814bbc:	89 c7                	mov    edi,eax
ffff800000814bbe:	49 89 df             	mov    r15,rbx
ffff800000814bc1:	48 b8 b0 62 ee ff ff 	movabs rax,0xffffffffffee62b0
ffff800000814bc8:	ff ff ff 
ffff800000814bcb:	48 01 d8             	add    rax,rbx
ffff800000814bce:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:20
    
    /* set divisor to 38400 baud */
    outb(base_port + COM_REG_DLL, 0x03);
ffff800000814bd0:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000814bd3:	0f b7 c0             	movzx  eax,ax
ffff800000814bd6:	be 03 00 00 00       	mov    esi,0x3
ffff800000814bdb:	89 c7                	mov    edi,eax
ffff800000814bdd:	49 89 df             	mov    r15,rbx
ffff800000814be0:	48 b8 b0 62 ee ff ff 	movabs rax,0xffffffffffee62b0
ffff800000814be7:	ff ff ff 
ffff800000814bea:	48 01 d8             	add    rax,rbx
ffff800000814bed:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:21
    outb(base_port + COM_REG_DLM, 0x00);
ffff800000814bef:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000814bf2:	83 c0 01             	add    eax,0x1
ffff800000814bf5:	0f b7 c0             	movzx  eax,ax
ffff800000814bf8:	be 00 00 00 00       	mov    esi,0x0
ffff800000814bfd:	89 c7                	mov    edi,eax
ffff800000814bff:	49 89 df             	mov    r15,rbx
ffff800000814c02:	48 b8 b0 62 ee ff ff 	movabs rax,0xffffffffffee62b0
ffff800000814c09:	ff ff ff 
ffff800000814c0c:	48 01 d8             	add    rax,rbx
ffff800000814c0f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:24
    
    /* 8 data bits, parity off, 1 stop bit, DLAB latch off */
    outb(base_port + COM_REG_LCR, 0x03);
ffff800000814c11:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000814c14:	83 c0 03             	add    eax,0x3
ffff800000814c17:	0f b7 c0             	movzx  eax,ax
ffff800000814c1a:	be 03 00 00 00       	mov    esi,0x3
ffff800000814c1f:	89 c7                	mov    edi,eax
ffff800000814c21:	49 89 df             	mov    r15,rbx
ffff800000814c24:	48 b8 b0 62 ee ff ff 	movabs rax,0xffffffffffee62b0
ffff800000814c2b:	ff ff ff 
ffff800000814c2e:	48 01 d8             	add    rax,rbx
ffff800000814c31:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:27
    
    /* enable FIFO */
    outb(base_port + COM_REG_FCR, 0x87);//0xc7
ffff800000814c33:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000814c36:	83 c0 02             	add    eax,0x2
ffff800000814c39:	0f b7 c0             	movzx  eax,ax
ffff800000814c3c:	be 87 00 00 00       	mov    esi,0x87
ffff800000814c41:	89 c7                	mov    edi,eax
ffff800000814c43:	49 89 df             	mov    r15,rbx
ffff800000814c46:	48 b8 b0 62 ee ff ff 	movabs rax,0xffffffffffee62b0
ffff800000814c4d:	ff ff ff 
ffff800000814c50:	48 01 d8             	add    rax,rbx
ffff800000814c53:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:30

    /* enable IRQs, set RTS/DSR */
    outb(base_port + COM_REG_MCR, 0x0B);
ffff800000814c55:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000814c58:	83 c0 04             	add    eax,0x4
ffff800000814c5b:	0f b7 c0             	movzx  eax,ax
ffff800000814c5e:	be 0b 00 00 00       	mov    esi,0xb
ffff800000814c63:	89 c7                	mov    edi,eax
ffff800000814c65:	49 89 df             	mov    r15,rbx
ffff800000814c68:	48 b8 b0 62 ee ff ff 	movabs rax,0xffffffffffee62b0
ffff800000814c6f:	ff ff ff 
ffff800000814c72:	48 01 d8             	add    rax,rbx
ffff800000814c75:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:44
//    if (inb(base_port + COM_REG_RX) != 0xae) {
//        return;
//    }
    
    /* set in normal mode */
    outb(base_port + COM_REG_MCR, 0x0F);
ffff800000814c77:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000814c7a:	83 c0 04             	add    eax,0x4
ffff800000814c7d:	0f b7 c0             	movzx  eax,ax
ffff800000814c80:	be 0f 00 00 00       	mov    esi,0xf
ffff800000814c85:	89 c7                	mov    edi,eax
ffff800000814c87:	49 89 df             	mov    r15,rbx
ffff800000814c8a:	48 b8 b0 62 ee ff ff 	movabs rax,0xffffffffffee62b0
ffff800000814c91:	ff ff ff 
ffff800000814c94:	48 01 d8             	add    rax,rbx
ffff800000814c97:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:45
}
ffff800000814c99:	90                   	nop
ffff800000814c9a:	48 83 c4 10          	add    rsp,0x10
ffff800000814c9e:	5b                   	pop    rbx
ffff800000814c9f:	41 5f                	pop    r15
ffff800000814ca1:	5d                   	pop    rbp
ffff800000814ca2:	c3                   	ret    

ffff800000814ca3 <com_putchar>:
com_putchar():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:47
void com_putchar(unsigned short ch,int com_base)
{
ffff800000814ca3:	f3 0f 1e fa          	endbr64 
ffff800000814ca7:	55                   	push   rbp
ffff800000814ca8:	48 89 e5             	mov    rbp,rsp
ffff800000814cab:	41 57                	push   r15
ffff800000814cad:	53                   	push   rbx
ffff800000814cae:	48 83 ec 20          	sub    rsp,0x20
ffff800000814cb2:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000814cb2 <com_putchar+0xf>
ffff800000814cb9:	49 bb 7e e8 10 00 00 	movabs r11,0x10e87e
ffff800000814cc0:	00 00 00 
ffff800000814cc3:	4c 01 db             	add    rbx,r11
ffff800000814cc6:	89 f8                	mov    eax,edi
ffff800000814cc8:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff800000814ccb:	66 89 45 dc          	mov    WORD PTR [rbp-0x24],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:51 (discriminator 1)
    unsigned char res;
    /* wait for the port to be ready */
    do {
        res = inb(com_base + COM_REG_LSR);
ffff800000814ccf:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000814cd2:	83 c0 05             	add    eax,0x5
ffff800000814cd5:	0f b6 c0             	movzx  eax,al
ffff800000814cd8:	89 c7                	mov    edi,eax
ffff800000814cda:	49 89 df             	mov    r15,rbx
ffff800000814cdd:	48 b8 c9 62 ee ff ff 	movabs rax,0xffffffffffee62c9
ffff800000814ce4:	ff ff ff 
ffff800000814ce7:	48 01 d8             	add    rax,rbx
ffff800000814cea:	ff d0                	call   rax
ffff800000814cec:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:52 (discriminator 1)
        res &= 0x20;
ffff800000814cef:	80 65 ef 20          	and    BYTE PTR [rbp-0x11],0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:53 (discriminator 1)
    } while (res == 0);
ffff800000814cf3:	80 7d ef 00          	cmp    BYTE PTR [rbp-0x11],0x0
ffff800000814cf7:	74 d6                	je     ffff800000814ccf <com_putchar+0x2c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:54
    outb(com_base, ch);
ffff800000814cf9:	0f b7 45 dc          	movzx  eax,WORD PTR [rbp-0x24]
ffff800000814cfd:	0f b6 d0             	movzx  edx,al
ffff800000814d00:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000814d03:	0f b7 c0             	movzx  eax,ax
ffff800000814d06:	89 d6                	mov    esi,edx
ffff800000814d08:	89 c7                	mov    edi,eax
ffff800000814d0a:	49 89 df             	mov    r15,rbx
ffff800000814d0d:	48 b8 b0 62 ee ff ff 	movabs rax,0xffffffffffee62b0
ffff800000814d14:	ff ff ff 
ffff800000814d17:	48 01 d8             	add    rax,rbx
ffff800000814d1a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:55
}
ffff800000814d1c:	90                   	nop
ffff800000814d1d:	48 83 c4 20          	add    rsp,0x20
ffff800000814d21:	5b                   	pop    rbx
ffff800000814d22:	41 5f                	pop    r15
ffff800000814d24:	5d                   	pop    rbp
ffff800000814d25:	c3                   	ret    

ffff800000814d26 <com_puts>:
com_puts():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:57

void com_puts(char* s,int com_port){
ffff800000814d26:	f3 0f 1e fa          	endbr64 
ffff800000814d2a:	55                   	push   rbp
ffff800000814d2b:	48 89 e5             	mov    rbp,rsp
ffff800000814d2e:	41 57                	push   r15
ffff800000814d30:	53                   	push   rbx
ffff800000814d31:	48 83 ec 10          	sub    rsp,0x10
ffff800000814d35:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000814d35 <com_puts+0xf>
ffff800000814d3c:	49 bb fb e7 10 00 00 	movabs r11,0x10e7fb
ffff800000814d43:	00 00 00 
ffff800000814d46:	4c 01 db             	add    rbx,r11
ffff800000814d49:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000814d4d:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:58
    for(;*s;s++){
ffff800000814d50:	eb 2a                	jmp    ffff800000814d7c <com_puts+0x56>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:59 (discriminator 2)
        com_putchar(*s,com_port);
ffff800000814d52:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000814d56:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000814d59:	66 98                	cbw    
ffff800000814d5b:	0f b7 c0             	movzx  eax,ax
ffff800000814d5e:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffff800000814d61:	89 d6                	mov    esi,edx
ffff800000814d63:	89 c7                	mov    edi,eax
ffff800000814d65:	49 89 df             	mov    r15,rbx
ffff800000814d68:	48 b8 73 17 ef ff ff 	movabs rax,0xffffffffffef1773
ffff800000814d6f:	ff ff ff 
ffff800000814d72:	48 01 d8             	add    rax,rbx
ffff800000814d75:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:58 (discriminator 2)
    for(;*s;s++){
ffff800000814d77:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:58 (discriminator 1)
ffff800000814d7c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000814d80:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000814d83:	84 c0                	test   al,al
ffff800000814d85:	75 cb                	jne    ffff800000814d52 <com_puts+0x2c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:61
    }
}
ffff800000814d87:	90                   	nop
ffff800000814d88:	90                   	nop
ffff800000814d89:	48 83 c4 10          	add    rsp,0x10
ffff800000814d8d:	5b                   	pop    rbx
ffff800000814d8e:	41 5f                	pop    r15
ffff800000814d90:	5d                   	pop    rbp
ffff800000814d91:	c3                   	ret    

ffff800000814d92 <comprintf>:
comprintf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:63

void comprintf(char* fmt,...){
ffff800000814d92:	f3 0f 1e fa          	endbr64 
ffff800000814d96:	55                   	push   rbp
ffff800000814d97:	48 89 e5             	mov    rbp,rsp
ffff800000814d9a:	41 57                	push   r15
ffff800000814d9c:	53                   	push   rbx
ffff800000814d9d:	48 81 ec 10 01 00 00 	sub    rsp,0x110
ffff800000814da4:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000814da4 <comprintf+0x12>
ffff800000814dab:	49 bb 8c e7 10 00 00 	movabs r11,0x10e78c
ffff800000814db2:	00 00 00 
ffff800000814db5:	4c 01 db             	add    rbx,r11
ffff800000814db8:	48 89 bd e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rdi
ffff800000814dbf:	48 89 b5 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rsi
ffff800000814dc6:	48 89 95 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rdx
ffff800000814dcd:	48 89 8d 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rcx
ffff800000814dd4:	4c 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],r8
ffff800000814ddb:	4c 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],r9
ffff800000814de2:	84 c0                	test   al,al
ffff800000814de4:	74 23                	je     ffff800000814e09 <comprintf+0x77>
ffff800000814de6:	0f 29 85 70 ff ff ff 	movaps XMMWORD PTR [rbp-0x90],xmm0
ffff800000814ded:	0f 29 4d 80          	movaps XMMWORD PTR [rbp-0x80],xmm1
ffff800000814df1:	0f 29 55 90          	movaps XMMWORD PTR [rbp-0x70],xmm2
ffff800000814df5:	0f 29 5d a0          	movaps XMMWORD PTR [rbp-0x60],xmm3
ffff800000814df9:	0f 29 65 b0          	movaps XMMWORD PTR [rbp-0x50],xmm4
ffff800000814dfd:	0f 29 6d c0          	movaps XMMWORD PTR [rbp-0x40],xmm5
ffff800000814e01:	0f 29 75 d0          	movaps XMMWORD PTR [rbp-0x30],xmm6
ffff800000814e05:	0f 29 7d e0          	movaps XMMWORD PTR [rbp-0x20],xmm7
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:64
    if(strlen(fmt)>=1024)
ffff800000814e09:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
ffff800000814e10:	48 89 c7             	mov    rdi,rax
ffff800000814e13:	49 89 df             	mov    r15,rbx
ffff800000814e16:	48 b8 d3 20 ef ff ff 	movabs rax,0xffffffffffef20d3
ffff800000814e1d:	ff ff ff 
ffff800000814e20:	48 01 d8             	add    rax,rbx
ffff800000814e23:	ff d0                	call   rax
ffff800000814e25:	3d ff 03 00 00       	cmp    eax,0x3ff
ffff800000814e2a:	0f 8f f5 03 00 00    	jg     ffff800000815225 <comprintf+0x493>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:67
        return;//一次性输出不了太长
    //这里不使用kmalloc
    char* tmp=combuf;
ffff800000814e30:	48 b8 18 fd ff ff ff 	movabs rax,0xfffffffffffffd18
ffff800000814e37:	ff ff ff 
ffff800000814e3a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000814e3e:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:68
    memset(tmp,0, sizeof(combuf));
ffff800000814e45:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000814e4c:	ba 00 04 00 00       	mov    edx,0x400
ffff800000814e51:	be 00 00 00 00       	mov    esi,0x0
ffff800000814e56:	48 89 c7             	mov    rdi,rax
ffff800000814e59:	49 89 df             	mov    r15,rbx
ffff800000814e5c:	48 b8 b1 1d ef ff ff 	movabs rax,0xffffffffffef1db1
ffff800000814e63:	ff ff ff 
ffff800000814e66:	48 01 d8             	add    rax,rbx
ffff800000814e69:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:70
    //count num of args
    char *pstr=fmt;
ffff800000814e6b:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
ffff800000814e72:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:71
    char *prev=fmt;
ffff800000814e79:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
ffff800000814e80:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:74

    va_list vargs;
    va_start(vargs,fmt);
ffff800000814e87:	c7 85 f0 fe ff ff 08 	mov    DWORD PTR [rbp-0x110],0x8
ffff800000814e8e:	00 00 00 
ffff800000814e91:	c7 85 f4 fe ff ff 30 	mov    DWORD PTR [rbp-0x10c],0x30
ffff800000814e98:	00 00 00 
ffff800000814e9b:	48 8d 45 10          	lea    rax,[rbp+0x10]
ffff800000814e9f:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
ffff800000814ea6:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
ffff800000814ead:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:75
    pstr=fmt;
ffff800000814eb4:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
ffff800000814ebb:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:76
    for(;*pstr!='\0';pstr++){
ffff800000814ec2:	e9 29 03 00 00       	jmp    ffff8000008151f0 <comprintf+0x45e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:77
        if(*pstr=='%'&&*(pstr+1)!='\0'){
ffff800000814ec7:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000814ece:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000814ed1:	3c 25                	cmp    al,0x25
ffff800000814ed3:	0f 85 e4 02 00 00    	jne    ffff8000008151bd <comprintf+0x42b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:77 (discriminator 1)
ffff800000814ed9:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000814ee0:	48 83 c0 01          	add    rax,0x1
ffff800000814ee4:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000814ee7:	84 c0                	test   al,al
ffff800000814ee9:	0f 84 ce 02 00 00    	je     ffff8000008151bd <comprintf+0x42b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:78
            pstr++;
ffff800000814eef:	48 83 85 38 ff ff ff 	add    QWORD PTR [rbp-0xc8],0x1
ffff800000814ef6:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:79
            if(*pstr=='x'){
ffff800000814ef7:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000814efe:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000814f01:	3c 78                	cmp    al,0x78
ffff800000814f03:	75 70                	jne    ffff800000814f75 <comprintf+0x1e3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:80
                int v=va_arg(vargs,int);
ffff800000814f05:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x110]
ffff800000814f0b:	83 f8 2f             	cmp    eax,0x2f
ffff800000814f0e:	77 23                	ja     ffff800000814f33 <comprintf+0x1a1>
ffff800000814f10:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff800000814f17:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff800000814f1d:	89 d2                	mov    edx,edx
ffff800000814f1f:	48 01 d0             	add    rax,rdx
ffff800000814f22:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff800000814f28:	83 c2 08             	add    edx,0x8
ffff800000814f2b:	89 95 f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],edx
ffff800000814f31:	eb 12                	jmp    ffff800000814f45 <comprintf+0x1b3>
ffff800000814f33:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000814f3a:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000814f3e:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
ffff800000814f45:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000814f47:	89 85 24 ff ff ff    	mov    DWORD PTR [rbp-0xdc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:81
                sprint_hex(tmp,v);
ffff800000814f4d:	8b 85 24 ff ff ff    	mov    eax,DWORD PTR [rbp-0xdc]
ffff800000814f53:	48 63 d0             	movsxd rdx,eax
ffff800000814f56:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000814f5d:	48 89 d6             	mov    rsi,rdx
ffff800000814f60:	48 89 c7             	mov    rdi,rax
ffff800000814f63:	49 89 df             	mov    r15,rbx
ffff800000814f66:	48 b8 26 25 ef ff ff 	movabs rax,0xffffffffffef2526
ffff800000814f6d:	ff ff ff 
ffff800000814f70:	48 01 d8             	add    rax,rbx
ffff800000814f73:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:82
            }if(*pstr=='l'){
ffff800000814f75:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000814f7c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000814f7f:	3c 6c                	cmp    al,0x6c
ffff800000814f81:	75 75                	jne    ffff800000814ff8 <comprintf+0x266>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:83
                unsigned long long v=va_arg(vargs,unsigned long long);
ffff800000814f83:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x110]
ffff800000814f89:	83 f8 2f             	cmp    eax,0x2f
ffff800000814f8c:	77 23                	ja     ffff800000814fb1 <comprintf+0x21f>
ffff800000814f8e:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff800000814f95:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff800000814f9b:	89 d2                	mov    edx,edx
ffff800000814f9d:	48 01 d0             	add    rax,rdx
ffff800000814fa0:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff800000814fa6:	83 c2 08             	add    edx,0x8
ffff800000814fa9:	89 95 f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],edx
ffff800000814faf:	eb 12                	jmp    ffff800000814fc3 <comprintf+0x231>
ffff800000814fb1:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000814fb8:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000814fbc:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
ffff800000814fc3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000814fc6:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:84
                sprint_hex(tmp,v);
ffff800000814fcd:	48 8b 95 08 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf8]
ffff800000814fd4:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000814fdb:	48 89 d6             	mov    rsi,rdx
ffff800000814fde:	48 89 c7             	mov    rdi,rax
ffff800000814fe1:	49 89 df             	mov    r15,rbx
ffff800000814fe4:	48 b8 26 25 ef ff ff 	movabs rax,0xffffffffffef2526
ffff800000814feb:	ff ff ff 
ffff800000814fee:	48 01 d8             	add    rax,rbx
ffff800000814ff1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:82
            }if(*pstr=='l'){
ffff800000814ff3:	e9 f0 01 00 00       	jmp    ffff8000008151e8 <comprintf+0x456>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:85
            }else if(*pstr=='s'){
ffff800000814ff8:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000814fff:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000815002:	3c 73                	cmp    al,0x73
ffff800000815004:	75 75                	jne    ffff80000081507b <comprintf+0x2e9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:86
                char* v=va_arg(vargs,char*);
ffff800000815006:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x110]
ffff80000081500c:	83 f8 2f             	cmp    eax,0x2f
ffff80000081500f:	77 23                	ja     ffff800000815034 <comprintf+0x2a2>
ffff800000815011:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff800000815018:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff80000081501e:	89 d2                	mov    edx,edx
ffff800000815020:	48 01 d0             	add    rax,rdx
ffff800000815023:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff800000815029:	83 c2 08             	add    edx,0x8
ffff80000081502c:	89 95 f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],edx
ffff800000815032:	eb 12                	jmp    ffff800000815046 <comprintf+0x2b4>
ffff800000815034:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff80000081503b:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff80000081503f:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
ffff800000815046:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000815049:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:87
                sprintn(tmp,v);
ffff800000815050:	48 8b 95 10 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf0]
ffff800000815057:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff80000081505e:	48 89 d6             	mov    rsi,rdx
ffff800000815061:	48 89 c7             	mov    rdi,rax
ffff800000815064:	49 89 df             	mov    r15,rbx
ffff800000815067:	48 b8 b4 25 ef ff ff 	movabs rax,0xffffffffffef25b4
ffff80000081506e:	ff ff ff 
ffff800000815071:	48 01 d8             	add    rax,rbx
ffff800000815074:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:82
            }if(*pstr=='l'){
ffff800000815076:	e9 6d 01 00 00       	jmp    ffff8000008151e8 <comprintf+0x456>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:88
            }else if(*pstr=='d'){
ffff80000081507b:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000815082:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000815085:	3c 64                	cmp    al,0x64
ffff800000815087:	75 76                	jne    ffff8000008150ff <comprintf+0x36d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:89
                char* v=va_arg(vargs,char*);
ffff800000815089:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x110]
ffff80000081508f:	83 f8 2f             	cmp    eax,0x2f
ffff800000815092:	77 23                	ja     ffff8000008150b7 <comprintf+0x325>
ffff800000815094:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff80000081509b:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff8000008150a1:	89 d2                	mov    edx,edx
ffff8000008150a3:	48 01 d0             	add    rax,rdx
ffff8000008150a6:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff8000008150ac:	83 c2 08             	add    edx,0x8
ffff8000008150af:	89 95 f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],edx
ffff8000008150b5:	eb 12                	jmp    ffff8000008150c9 <comprintf+0x337>
ffff8000008150b7:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff8000008150be:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff8000008150c2:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
ffff8000008150c9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008150cc:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:90
                sprint_decimal(tmp,v);
ffff8000008150d3:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
ffff8000008150da:	89 c2                	mov    edx,eax
ffff8000008150dc:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff8000008150e3:	89 d6                	mov    esi,edx
ffff8000008150e5:	48 89 c7             	mov    rdi,rax
ffff8000008150e8:	49 89 df             	mov    r15,rbx
ffff8000008150eb:	48 b8 6b 24 ef ff ff 	movabs rax,0xffffffffffef246b
ffff8000008150f2:	ff ff ff 
ffff8000008150f5:	48 01 d8             	add    rax,rbx
ffff8000008150f8:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:82
            }if(*pstr=='l'){
ffff8000008150fa:	e9 e9 00 00 00       	jmp    ffff8000008151e8 <comprintf+0x456>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:91
            }else if(*pstr=='c'){
ffff8000008150ff:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000815106:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000815109:	3c 63                	cmp    al,0x63
ffff80000081510b:	75 02                	jne    ffff80000081510f <comprintf+0x37d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:92
                char v=va_arg(vargs,char);
ffff80000081510d:	0f 0b                	ud2    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:94
                sprintchar(tmp,v);
            }else if(*pstr=='p') {
ffff80000081510f:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000815116:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000815119:	3c 70                	cmp    al,0x70
ffff80000081511b:	75 73                	jne    ffff800000815190 <comprintf+0x3fe>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:95
                int v=va_arg(vargs,addr_t);
ffff80000081511d:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x110]
ffff800000815123:	83 f8 2f             	cmp    eax,0x2f
ffff800000815126:	77 23                	ja     ffff80000081514b <comprintf+0x3b9>
ffff800000815128:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff80000081512f:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff800000815135:	89 d2                	mov    edx,edx
ffff800000815137:	48 01 d0             	add    rax,rdx
ffff80000081513a:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff800000815140:	83 c2 08             	add    edx,0x8
ffff800000815143:	89 95 f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],edx
ffff800000815149:	eb 12                	jmp    ffff80000081515d <comprintf+0x3cb>
ffff80000081514b:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000815152:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000815156:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
ffff80000081515d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000815160:	89 85 20 ff ff ff    	mov    DWORD PTR [rbp-0xe0],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:96
                sprint_hex(tmp,v);
ffff800000815166:	8b 85 20 ff ff ff    	mov    eax,DWORD PTR [rbp-0xe0]
ffff80000081516c:	48 63 d0             	movsxd rdx,eax
ffff80000081516f:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000815176:	48 89 d6             	mov    rsi,rdx
ffff800000815179:	48 89 c7             	mov    rdi,rax
ffff80000081517c:	49 89 df             	mov    r15,rbx
ffff80000081517f:	48 b8 26 25 ef ff ff 	movabs rax,0xffffffffffef2526
ffff800000815186:	ff ff ff 
ffff800000815189:	48 01 d8             	add    rax,rbx
ffff80000081518c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:82
            }if(*pstr=='l'){
ffff80000081518e:	eb 58                	jmp    ffff8000008151e8 <comprintf+0x456>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:98
            }else{
                    sprintchar(tmp,*pstr);
ffff800000815190:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000815197:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081519a:	0f be d0             	movsx  edx,al
ffff80000081519d:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff8000008151a4:	89 d6                	mov    esi,edx
ffff8000008151a6:	48 89 c7             	mov    rdi,rax
ffff8000008151a9:	49 89 df             	mov    r15,rbx
ffff8000008151ac:	48 b8 2c 24 ef ff ff 	movabs rax,0xffffffffffef242c
ffff8000008151b3:	ff ff ff 
ffff8000008151b6:	48 01 d8             	add    rax,rbx
ffff8000008151b9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:82
            }if(*pstr=='l'){
ffff8000008151bb:	eb 2b                	jmp    ffff8000008151e8 <comprintf+0x456>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:101
                }
        }else{
            sprintchar(tmp,*pstr);
ffff8000008151bd:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff8000008151c4:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008151c7:	0f be d0             	movsx  edx,al
ffff8000008151ca:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff8000008151d1:	89 d6                	mov    esi,edx
ffff8000008151d3:	48 89 c7             	mov    rdi,rax
ffff8000008151d6:	49 89 df             	mov    r15,rbx
ffff8000008151d9:	48 b8 2c 24 ef ff ff 	movabs rax,0xffffffffffef242c
ffff8000008151e0:	ff ff ff 
ffff8000008151e3:	48 01 d8             	add    rax,rbx
ffff8000008151e6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:76
    for(;*pstr!='\0';pstr++){
ffff8000008151e8:	48 83 85 38 ff ff ff 	add    QWORD PTR [rbp-0xc8],0x1
ffff8000008151ef:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:76 (discriminator 1)
ffff8000008151f0:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff8000008151f7:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008151fa:	84 c0                	test   al,al
ffff8000008151fc:	0f 85 c5 fc ff ff    	jne    ffff800000814ec7 <comprintf+0x135>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:105
        }
    }
    va_end(vargs);
    com_puts(tmp,PORT_COM1);
ffff800000815202:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000815209:	be f8 03 00 00       	mov    esi,0x3f8
ffff80000081520e:	48 89 c7             	mov    rdi,rax
ffff800000815211:	49 89 df             	mov    r15,rbx
ffff800000815214:	48 b8 f6 17 ef ff ff 	movabs rax,0xffffffffffef17f6
ffff80000081521b:	ff ff ff 
ffff80000081521e:	48 01 d8             	add    rax,rbx
ffff800000815221:	ff d0                	call   rax
ffff800000815223:	eb 01                	jmp    ffff800000815226 <comprintf+0x494>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:65
        return;//一次性输出不了太长
ffff800000815225:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:106
ffff800000815226:	48 81 c4 10 01 00 00 	add    rsp,0x110
ffff80000081522d:	5b                   	pop    rbx
ffff80000081522e:	41 5f                	pop    r15
ffff800000815230:	5d                   	pop    rbp
ffff800000815231:	c3                   	ret    

ffff800000815232 <memcpy>:
memcpy():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:5
#include "mem.h"
#include "typename.h"
static u32 mem_end;
static u32 usr_mem_base;
void memcpy(u8* dest, u8 *src,u32 size){
ffff800000815232:	f3 0f 1e fa          	endbr64 
ffff800000815236:	55                   	push   rbp
ffff800000815237:	48 89 e5             	mov    rbp,rsp
ffff80000081523a:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff80000081523e:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff800000815242:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:6
    *dest=0xff;//如果页内存还没分配，这样就可以先激发缺页异常分配了，之后写数据就会完整不会少开头第一个字节。
ffff800000815245:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000815249:	c6 00 ff             	mov    BYTE PTR [rax],0xff
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:7
    for(int i=0;i<size;i++){
ffff80000081524c:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000815253:	eb 1b                	jmp    ffff800000815270 <memcpy+0x3e>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:8 (discriminator 3)
        *(dest)=*(src);
ffff800000815255:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000815259:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff80000081525c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000815260:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:9 (discriminator 3)
        dest++;
ffff800000815262:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:10 (discriminator 3)
        src++;
ffff800000815267:	48 83 45 e0 01       	add    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:7 (discriminator 3)
    for(int i=0;i<size;i++){
ffff80000081526c:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:7 (discriminator 1)
ffff800000815270:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000815273:	39 45 dc             	cmp    DWORD PTR [rbp-0x24],eax
ffff800000815276:	77 dd                	ja     ffff800000815255 <memcpy+0x23>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:12
    }
}
ffff800000815278:	90                   	nop
ffff800000815279:	90                   	nop
ffff80000081527a:	5d                   	pop    rbp
ffff80000081527b:	c3                   	ret    

ffff80000081527c <memcmp>:
memcmp():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:14
int memcmp(u8 *a,u8* b,int len)
{
ffff80000081527c:	f3 0f 1e fa          	endbr64 
ffff800000815280:	55                   	push   rbp
ffff800000815281:	48 89 e5             	mov    rbp,rsp
ffff800000815284:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000815288:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000081528c:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:15
    for(int i=0;i<len;i++)
ffff80000081528f:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000815296:	eb 3a                	jmp    ffff8000008152d2 <memcmp+0x56>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:17
    {
        if(*a!=*b)
ffff800000815298:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081529c:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff80000081529f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008152a3:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008152a6:	38 c2                	cmp    dl,al
ffff8000008152a8:	74 1a                	je     ffff8000008152c4 <memcmp+0x48>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:18
            return *a-*b;
ffff8000008152aa:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008152ae:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008152b1:	0f b6 d0             	movzx  edx,al
ffff8000008152b4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008152b8:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008152bb:	0f b6 c8             	movzx  ecx,al
ffff8000008152be:	89 d0                	mov    eax,edx
ffff8000008152c0:	29 c8                	sub    eax,ecx
ffff8000008152c2:	eb 1b                	jmp    ffff8000008152df <memcmp+0x63>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:19 (discriminator 2)
        a++;
ffff8000008152c4:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:20 (discriminator 2)
        b++;
ffff8000008152c9:	48 83 45 e0 01       	add    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:15 (discriminator 2)
    for(int i=0;i<len;i++)
ffff8000008152ce:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:15 (discriminator 1)
ffff8000008152d2:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008152d5:	3b 45 dc             	cmp    eax,DWORD PTR [rbp-0x24]
ffff8000008152d8:	7c be                	jl     ffff800000815298 <memcmp+0x1c>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:22
    }
    return 0;
ffff8000008152da:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:23
}
ffff8000008152df:	5d                   	pop    rbp
ffff8000008152e0:	c3                   	ret    

ffff8000008152e1 <memset>:
memset():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:24
void memset(u8 *buf,u8 value,u32 size){
ffff8000008152e1:	f3 0f 1e fa          	endbr64 
ffff8000008152e5:	55                   	push   rbp
ffff8000008152e6:	48 89 e5             	mov    rbp,rsp
ffff8000008152e9:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff8000008152ed:	89 f0                	mov    eax,esi
ffff8000008152ef:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
ffff8000008152f2:	88 45 e4             	mov    BYTE PTR [rbp-0x1c],al
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:25
    for(u32 i=0;i<size;i++){
ffff8000008152f5:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff8000008152fc:	eb 16                	jmp    ffff800000815314 <memset+0x33>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:26 (discriminator 3)
        *(buf++)=value;
ffff8000008152fe:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000815302:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffff800000815306:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000081530a:	0f b6 55 e4          	movzx  edx,BYTE PTR [rbp-0x1c]
ffff80000081530e:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:25 (discriminator 3)
    for(u32 i=0;i<size;i++){
ffff800000815310:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:25 (discriminator 1)
ffff800000815314:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000815317:	3b 45 e0             	cmp    eax,DWORD PTR [rbp-0x20]
ffff80000081531a:	72 e2                	jb     ffff8000008152fe <memset+0x1d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:28
    }
}
ffff80000081531c:	90                   	nop
ffff80000081531d:	90                   	nop
ffff80000081531e:	5d                   	pop    rbp
ffff80000081531f:	c3                   	ret    

ffff800000815320 <get_mem_size>:
get_mem_size():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:30

u32 get_mem_size(){
ffff800000815320:	f3 0f 1e fa          	endbr64 
ffff800000815324:	55                   	push   rbp
ffff800000815325:	48 89 e5             	mov    rbp,rsp
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:31
    return mem_end;
ffff800000815328:	48 b8 80 ad 41 00 00 	movabs rax,0xffff80000041ad80
ffff80000081532f:	80 ff ff 
ffff800000815332:	8b 00                	mov    eax,DWORD PTR [rax]
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:32
}
ffff800000815334:	5d                   	pop    rbp
ffff800000815335:	c3                   	ret    

ffff800000815336 <strcpy>:
strcpy():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:3
#include "str.h"
#include <stdarg.h>
void strcpy(unsigned char* dest, unsigned char *buf){
ffff800000815336:	f3 0f 1e fa          	endbr64 
ffff80000081533a:	55                   	push   rbp
ffff80000081533b:	48 89 e5             	mov    rbp,rsp
ffff80000081533e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000815342:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:4
    while(*buf!='\0'){
ffff800000815346:	eb 1d                	jmp    ffff800000815365 <strcpy+0x2f>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:5
        *(dest++)=*(buf++);
ffff800000815348:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000081534c:	48 8d 42 01          	lea    rax,[rdx+0x1]
ffff800000815350:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffff800000815354:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000815358:	48 8d 48 01          	lea    rcx,[rax+0x1]
ffff80000081535c:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
ffff800000815360:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff800000815363:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:4
    while(*buf!='\0'){
ffff800000815365:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000815369:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081536c:	84 c0                	test   al,al
ffff80000081536e:	75 d8                	jne    ffff800000815348 <strcpy+0x12>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:7
    }
    *dest='\0';
ffff800000815370:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000815374:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:8
}
ffff800000815377:	90                   	nop
ffff800000815378:	5d                   	pop    rbp
ffff800000815379:	c3                   	ret    

ffff80000081537a <strtok>:
strtok():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:12
static char strtokkee[512],*strtokkeeptr=strtokkee;
static int tokptr=0;
static char retbuf[512],*retbptr=retbuf;
char* strtok(char *str,char splitter){
ffff80000081537a:	f3 0f 1e fa          	endbr64 
ffff80000081537e:	55                   	push   rbp
ffff80000081537f:	48 89 e5             	mov    rbp,rsp
ffff800000815382:	48 83 ec 30          	sub    rsp,0x30
ffff800000815386:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff80000081538a:	89 f0                	mov    eax,esi
ffff80000081538c:	88 45 d4             	mov    BYTE PTR [rbp-0x2c],al
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:14
    //limit: cannot cut string longer than 512
    if(str!=(void*)0){
ffff80000081538f:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff800000815394:	0f 84 fa 00 00 00    	je     ffff800000815494 <strtok+0x11a>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:16
        //cut for the first time
        strcpy(strtokkee,str);
ffff80000081539a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081539e:	48 89 c6             	mov    rsi,rax
ffff8000008153a1:	48 b8 a0 ad 41 00 00 	movabs rax,0xffff80000041ada0
ffff8000008153a8:	80 ff ff 
ffff8000008153ab:	48 89 c7             	mov    rdi,rax
ffff8000008153ae:	48 b8 36 53 81 00 00 	movabs rax,0xffff800000815336
ffff8000008153b5:	80 ff ff 
ffff8000008153b8:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:17
        char* ptr=strtokkee;
ffff8000008153ba:	48 b8 a0 ad 41 00 00 	movabs rax,0xffff80000041ada0
ffff8000008153c1:	80 ff ff 
ffff8000008153c4:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:18
        for(tokptr=0;strtokkee[tokptr]!=splitter&&strtokkee[tokptr]!='\0';tokptr=(tokptr+1)%512);
ffff8000008153c8:	48 b8 a0 af 41 00 00 	movabs rax,0xffff80000041afa0
ffff8000008153cf:	80 ff ff 
ffff8000008153d2:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
ffff8000008153d8:	eb 2a                	jmp    ffff800000815404 <strtok+0x8a>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:18 (discriminator 4)
ffff8000008153da:	48 b8 a0 af 41 00 00 	movabs rax,0xffff80000041afa0
ffff8000008153e1:	80 ff ff 
ffff8000008153e4:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008153e6:	83 c0 01             	add    eax,0x1
ffff8000008153e9:	99                   	cdq    
ffff8000008153ea:	c1 ea 17             	shr    edx,0x17
ffff8000008153ed:	01 d0                	add    eax,edx
ffff8000008153ef:	25 ff 01 00 00       	and    eax,0x1ff
ffff8000008153f4:	29 d0                	sub    eax,edx
ffff8000008153f6:	89 c2                	mov    edx,eax
ffff8000008153f8:	48 b8 a0 af 41 00 00 	movabs rax,0xffff80000041afa0
ffff8000008153ff:	80 ff ff 
ffff800000815402:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:18 (discriminator 1)
ffff800000815404:	48 b8 a0 af 41 00 00 	movabs rax,0xffff80000041afa0
ffff80000081540b:	80 ff ff 
ffff80000081540e:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000815410:	48 ba a0 ad 41 00 00 	movabs rdx,0xffff80000041ada0
ffff800000815417:	80 ff ff 
ffff80000081541a:	48 98                	cdqe   
ffff80000081541c:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000815420:	38 45 d4             	cmp    BYTE PTR [rbp-0x2c],al
ffff800000815423:	74 20                	je     ffff800000815445 <strtok+0xcb>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:18 (discriminator 3)
ffff800000815425:	48 b8 a0 af 41 00 00 	movabs rax,0xffff80000041afa0
ffff80000081542c:	80 ff ff 
ffff80000081542f:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000815431:	48 ba a0 ad 41 00 00 	movabs rdx,0xffff80000041ada0
ffff800000815438:	80 ff ff 
ffff80000081543b:	48 98                	cdqe   
ffff80000081543d:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000815441:	84 c0                	test   al,al
ffff800000815443:	75 95                	jne    ffff8000008153da <strtok+0x60>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:19
        strtokkee[tokptr]='\0';
ffff800000815445:	48 b8 a0 af 41 00 00 	movabs rax,0xffff80000041afa0
ffff80000081544c:	80 ff ff 
ffff80000081544f:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000815451:	48 ba a0 ad 41 00 00 	movabs rdx,0xffff80000041ada0
ffff800000815458:	80 ff ff 
ffff80000081545b:	48 98                	cdqe   
ffff80000081545d:	c6 04 02 00          	mov    BYTE PTR [rdx+rax*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:20
        tokptr=(tokptr+1)%512;
ffff800000815461:	48 b8 a0 af 41 00 00 	movabs rax,0xffff80000041afa0
ffff800000815468:	80 ff ff 
ffff80000081546b:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000081546d:	83 c0 01             	add    eax,0x1
ffff800000815470:	99                   	cdq    
ffff800000815471:	c1 ea 17             	shr    edx,0x17
ffff800000815474:	01 d0                	add    eax,edx
ffff800000815476:	25 ff 01 00 00       	and    eax,0x1ff
ffff80000081547b:	29 d0                	sub    eax,edx
ffff80000081547d:	89 c2                	mov    edx,eax
ffff80000081547f:	48 b8 a0 af 41 00 00 	movabs rax,0xffff80000041afa0
ffff800000815486:	80 ff ff 
ffff800000815489:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:21
        return ptr;
ffff80000081548b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081548f:	e9 ee 00 00 00       	jmp    ffff800000815582 <strtok+0x208>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:24
    }
    //go on cutting
    int c=0;
ffff800000815494:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:25
    char* ptr=strtokkee+tokptr;
ffff80000081549b:	48 b8 a0 af 41 00 00 	movabs rax,0xffff80000041afa0
ffff8000008154a2:	80 ff ff 
ffff8000008154a5:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008154a7:	48 98                	cdqe   
ffff8000008154a9:	48 ba a0 ad 41 00 00 	movabs rdx,0xffff80000041ada0
ffff8000008154b0:	80 ff ff 
ffff8000008154b3:	48 01 d0             	add    rax,rdx
ffff8000008154b6:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:26
    for(;strtokkee[tokptr]!=splitter&&strtokkee[tokptr]!='\0';tokptr=(tokptr+1)%512,c++);
ffff8000008154ba:	eb 2e                	jmp    ffff8000008154ea <strtok+0x170>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:26 (discriminator 3)
ffff8000008154bc:	48 b8 a0 af 41 00 00 	movabs rax,0xffff80000041afa0
ffff8000008154c3:	80 ff ff 
ffff8000008154c6:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008154c8:	83 c0 01             	add    eax,0x1
ffff8000008154cb:	99                   	cdq    
ffff8000008154cc:	c1 ea 17             	shr    edx,0x17
ffff8000008154cf:	01 d0                	add    eax,edx
ffff8000008154d1:	25 ff 01 00 00       	and    eax,0x1ff
ffff8000008154d6:	29 d0                	sub    eax,edx
ffff8000008154d8:	89 c2                	mov    edx,eax
ffff8000008154da:	48 b8 a0 af 41 00 00 	movabs rax,0xffff80000041afa0
ffff8000008154e1:	80 ff ff 
ffff8000008154e4:	89 10                	mov    DWORD PTR [rax],edx
ffff8000008154e6:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:26 (discriminator 1)
ffff8000008154ea:	48 b8 a0 af 41 00 00 	movabs rax,0xffff80000041afa0
ffff8000008154f1:	80 ff ff 
ffff8000008154f4:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008154f6:	48 ba a0 ad 41 00 00 	movabs rdx,0xffff80000041ada0
ffff8000008154fd:	80 ff ff 
ffff800000815500:	48 98                	cdqe   
ffff800000815502:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000815506:	38 45 d4             	cmp    BYTE PTR [rbp-0x2c],al
ffff800000815509:	74 20                	je     ffff80000081552b <strtok+0x1b1>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:26 (discriminator 2)
ffff80000081550b:	48 b8 a0 af 41 00 00 	movabs rax,0xffff80000041afa0
ffff800000815512:	80 ff ff 
ffff800000815515:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000815517:	48 ba a0 ad 41 00 00 	movabs rdx,0xffff80000041ada0
ffff80000081551e:	80 ff ff 
ffff800000815521:	48 98                	cdqe   
ffff800000815523:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000815527:	84 c0                	test   al,al
ffff800000815529:	75 91                	jne    ffff8000008154bc <strtok+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:27
    strtokkee[tokptr]='\0';
ffff80000081552b:	48 b8 a0 af 41 00 00 	movabs rax,0xffff80000041afa0
ffff800000815532:	80 ff ff 
ffff800000815535:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000815537:	48 ba a0 ad 41 00 00 	movabs rdx,0xffff80000041ada0
ffff80000081553e:	80 ff ff 
ffff800000815541:	48 98                	cdqe   
ffff800000815543:	c6 04 02 00          	mov    BYTE PTR [rdx+rax*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:28
    tokptr=(tokptr+1)%512;
ffff800000815547:	48 b8 a0 af 41 00 00 	movabs rax,0xffff80000041afa0
ffff80000081554e:	80 ff ff 
ffff800000815551:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000815553:	83 c0 01             	add    eax,0x1
ffff800000815556:	99                   	cdq    
ffff800000815557:	c1 ea 17             	shr    edx,0x17
ffff80000081555a:	01 d0                	add    eax,edx
ffff80000081555c:	25 ff 01 00 00       	and    eax,0x1ff
ffff800000815561:	29 d0                	sub    eax,edx
ffff800000815563:	89 c2                	mov    edx,eax
ffff800000815565:	48 b8 a0 af 41 00 00 	movabs rax,0xffff80000041afa0
ffff80000081556c:	80 ff ff 
ffff80000081556f:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:29
    if(c)
ffff800000815571:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
ffff800000815575:	74 06                	je     ffff80000081557d <strtok+0x203>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:30
        return ptr;
ffff800000815577:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000081557b:	eb 05                	jmp    ffff800000815582 <strtok+0x208>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:32
    else
        return (void*)0;
ffff80000081557d:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:33
}
ffff800000815582:	c9                   	leave  
ffff800000815583:	c3                   	ret    

ffff800000815584 <strcmp>:
strcmp():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:35
int strcmp(char *s1,char *s2)
{
ffff800000815584:	f3 0f 1e fa          	endbr64 
ffff800000815588:	55                   	push   rbp
ffff800000815589:	48 89 e5             	mov    rbp,rsp
ffff80000081558c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000815590:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:36
	while(*s1!='\0'&&*s2!='\0'){
ffff800000815594:	eb 3c                	jmp    ffff8000008155d2 <strcmp+0x4e>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:37
		if(*s1>*s2)
ffff800000815596:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000081559a:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff80000081559d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008155a1:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008155a4:	38 c2                	cmp    dl,al
ffff8000008155a6:	7e 07                	jle    ffff8000008155af <strcmp+0x2b>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:38
			return 1;
ffff8000008155a8:	b8 01 00 00 00       	mov    eax,0x1
ffff8000008155ad:	eb 52                	jmp    ffff800000815601 <strcmp+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:39
		else if(*s1<*s2)
ffff8000008155af:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008155b3:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff8000008155b6:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008155ba:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008155bd:	38 c2                	cmp    dl,al
ffff8000008155bf:	7d 07                	jge    ffff8000008155c8 <strcmp+0x44>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:40
			return -1;
ffff8000008155c1:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff8000008155c6:	eb 39                	jmp    ffff800000815601 <strcmp+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:41
		s1++;
ffff8000008155c8:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:42
		s2++;
ffff8000008155cd:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:36
	while(*s1!='\0'&&*s2!='\0'){
ffff8000008155d2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008155d6:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008155d9:	84 c0                	test   al,al
ffff8000008155db:	74 0b                	je     ffff8000008155e8 <strcmp+0x64>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:36 (discriminator 1)
ffff8000008155dd:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008155e1:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008155e4:	84 c0                	test   al,al
ffff8000008155e6:	75 ae                	jne    ffff800000815596 <strcmp+0x12>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:44
	}
	if(*s1==*s2)
ffff8000008155e8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008155ec:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff8000008155ef:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008155f3:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008155f6:	38 c2                	cmp    dl,al
ffff8000008155f8:	75 07                	jne    ffff800000815601 <strcmp+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:45
		return 0;
ffff8000008155fa:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008155ff:	eb 00                	jmp    ffff800000815601 <strcmp+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:46
}
ffff800000815601:	5d                   	pop    rbp
ffff800000815602:	c3                   	ret    

ffff800000815603 <strlen>:
strlen():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:49

int strlen(char *str)
{
ffff800000815603:	f3 0f 1e fa          	endbr64 
ffff800000815607:	55                   	push   rbp
ffff800000815608:	48 89 e5             	mov    rbp,rsp
ffff80000081560b:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:50
    int l=0;
ffff80000081560f:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:51
    for(;*str!='\0';str++,l++);
ffff800000815616:	eb 09                	jmp    ffff800000815621 <strlen+0x1e>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:51 (discriminator 2)
ffff800000815618:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
ffff80000081561d:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:51 (discriminator 1)
ffff800000815621:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000815625:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000815628:	84 c0                	test   al,al
ffff80000081562a:	75 ec                	jne    ffff800000815618 <strlen+0x15>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:52
    return l;
ffff80000081562c:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:53
}
ffff80000081562f:	5d                   	pop    rbp
ffff800000815630:	c3                   	ret    

ffff800000815631 <sprintf>:
sprintf():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:56

void sprintf(char *dist, char *str,...)
{
ffff800000815631:	f3 0f 1e fa          	endbr64 
ffff800000815635:	55                   	push   rbp
ffff800000815636:	48 89 e5             	mov    rbp,rsp
ffff800000815639:	48 81 ec 10 01 00 00 	sub    rsp,0x110
ffff800000815640:	48 89 bd f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdi
ffff800000815647:	48 89 b5 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rsi
ffff80000081564e:	48 89 95 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdx
ffff800000815655:	48 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rcx
ffff80000081565c:	4c 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],r8
ffff800000815663:	4c 89 8d 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],r9
ffff80000081566a:	84 c0                	test   al,al
ffff80000081566c:	74 20                	je     ffff80000081568e <sprintf+0x5d>
ffff80000081566e:	0f 29 45 80          	movaps XMMWORD PTR [rbp-0x80],xmm0
ffff800000815672:	0f 29 4d 90          	movaps XMMWORD PTR [rbp-0x70],xmm1
ffff800000815676:	0f 29 55 a0          	movaps XMMWORD PTR [rbp-0x60],xmm2
ffff80000081567a:	0f 29 5d b0          	movaps XMMWORD PTR [rbp-0x50],xmm3
ffff80000081567e:	0f 29 65 c0          	movaps XMMWORD PTR [rbp-0x40],xmm4
ffff800000815682:	0f 29 6d d0          	movaps XMMWORD PTR [rbp-0x30],xmm5
ffff800000815686:	0f 29 75 e0          	movaps XMMWORD PTR [rbp-0x20],xmm6
ffff80000081568a:	0f 29 7d f0          	movaps XMMWORD PTR [rbp-0x10],xmm7
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:59

    //count num of args
    char *pstr=str;
ffff80000081568e:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff800000815695:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:60
    char *prev=str;
ffff80000081569c:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff8000008156a3:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:61
    int argnum=0;
ffff8000008156aa:	c7 85 3c ff ff ff 00 	mov    DWORD PTR [rbp-0xc4],0x0
ffff8000008156b1:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:62
    while (*pstr!='\n')
ffff8000008156b4:	eb 39                	jmp    ffff8000008156ef <sprintf+0xbe>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:64
    {
        if(*pstr=='%'&&*prev!='%')
ffff8000008156b6:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff8000008156bd:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008156c0:	3c 25                	cmp    al,0x25
ffff8000008156c2:	75 15                	jne    ffff8000008156d9 <sprintf+0xa8>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:64 (discriminator 1)
ffff8000008156c4:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
ffff8000008156cb:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008156ce:	3c 25                	cmp    al,0x25
ffff8000008156d0:	74 07                	je     ffff8000008156d9 <sprintf+0xa8>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:65
            argnum++;
ffff8000008156d2:	83 85 3c ff ff ff 01 	add    DWORD PTR [rbp-0xc4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:66
        prev=pstr;
ffff8000008156d9:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff8000008156e0:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:67
        pstr++;
ffff8000008156e7:	48 83 85 48 ff ff ff 	add    QWORD PTR [rbp-0xb8],0x1
ffff8000008156ee:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:62
    while (*pstr!='\n')
ffff8000008156ef:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff8000008156f6:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008156f9:	3c 0a                	cmp    al,0xa
ffff8000008156fb:	75 b9                	jne    ffff8000008156b6 <sprintf+0x85>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:71
    }

    va_list vargs;
    va_start(vargs,str);
ffff8000008156fd:	c7 85 08 ff ff ff 10 	mov    DWORD PTR [rbp-0xf8],0x10
ffff800000815704:	00 00 00 
ffff800000815707:	c7 85 0c ff ff ff 30 	mov    DWORD PTR [rbp-0xf4],0x30
ffff80000081570e:	00 00 00 
ffff800000815711:	48 8d 45 10          	lea    rax,[rbp+0x10]
ffff800000815715:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
ffff80000081571c:	48 8d 85 50 ff ff ff 	lea    rax,[rbp-0xb0]
ffff800000815723:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:72
    pstr=str;
ffff80000081572a:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff800000815731:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:73
    for(;*pstr!='\0';pstr++){
ffff800000815738:	e9 09 02 00 00       	jmp    ffff800000815946 <sprintf+0x315>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:74
        if(*pstr=='%'&&*(pstr+1)!='\0'){
ffff80000081573d:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000815744:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000815747:	3c 25                	cmp    al,0x25
ffff800000815749:	0f 85 ca 01 00 00    	jne    ffff800000815919 <sprintf+0x2e8>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:74 (discriminator 1)
ffff80000081574f:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000815756:	48 83 c0 01          	add    rax,0x1
ffff80000081575a:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081575d:	84 c0                	test   al,al
ffff80000081575f:	0f 84 b4 01 00 00    	je     ffff800000815919 <sprintf+0x2e8>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:75
            pstr++;
ffff800000815765:	48 83 85 48 ff ff ff 	add    QWORD PTR [rbp-0xb8],0x1
ffff80000081576c:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:76
            if(*pstr=='x'){
ffff80000081576d:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000815774:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000815777:	3c 78                	cmp    al,0x78
ffff800000815779:	75 6f                	jne    ffff8000008157ea <sprintf+0x1b9>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:77
                int v=va_arg(vargs,int);
ffff80000081577b:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
ffff800000815781:	83 f8 2f             	cmp    eax,0x2f
ffff800000815784:	77 23                	ja     ffff8000008157a9 <sprintf+0x178>
ffff800000815786:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
ffff80000081578d:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff800000815793:	89 d2                	mov    edx,edx
ffff800000815795:	48 01 d0             	add    rax,rdx
ffff800000815798:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff80000081579e:	83 c2 08             	add    edx,0x8
ffff8000008157a1:	89 95 08 ff ff ff    	mov    DWORD PTR [rbp-0xf8],edx
ffff8000008157a7:	eb 12                	jmp    ffff8000008157bb <sprintf+0x18a>
ffff8000008157a9:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff8000008157b0:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff8000008157b4:	48 89 95 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rdx
ffff8000008157bb:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008157bd:	89 85 24 ff ff ff    	mov    DWORD PTR [rbp-0xdc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:78
                sprint_hex(dist,v);
ffff8000008157c3:	8b 85 24 ff ff ff    	mov    eax,DWORD PTR [rbp-0xdc]
ffff8000008157c9:	48 63 d0             	movsxd rdx,eax
ffff8000008157cc:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff8000008157d3:	48 89 d6             	mov    rsi,rdx
ffff8000008157d6:	48 89 c7             	mov    rdi,rax
ffff8000008157d9:	48 b8 56 5a 81 00 00 	movabs rax,0xffff800000815a56
ffff8000008157e0:	80 ff ff 
ffff8000008157e3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:76
            if(*pstr=='x'){
ffff8000008157e5:	e9 54 01 00 00       	jmp    ffff80000081593e <sprintf+0x30d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:79
            }else if(*pstr=='s'){
ffff8000008157ea:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff8000008157f1:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008157f4:	3c 73                	cmp    al,0x73
ffff8000008157f6:	75 6f                	jne    ffff800000815867 <sprintf+0x236>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:80
                char* v=va_arg(vargs,char*);
ffff8000008157f8:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
ffff8000008157fe:	83 f8 2f             	cmp    eax,0x2f
ffff800000815801:	77 23                	ja     ffff800000815826 <sprintf+0x1f5>
ffff800000815803:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
ffff80000081580a:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff800000815810:	89 d2                	mov    edx,edx
ffff800000815812:	48 01 d0             	add    rax,rdx
ffff800000815815:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff80000081581b:	83 c2 08             	add    edx,0x8
ffff80000081581e:	89 95 08 ff ff ff    	mov    DWORD PTR [rbp-0xf8],edx
ffff800000815824:	eb 12                	jmp    ffff800000815838 <sprintf+0x207>
ffff800000815826:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff80000081582d:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000815831:	48 89 95 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rdx
ffff800000815838:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000081583b:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:81
                sprintn(dist,v);
ffff800000815842:	48 8b 95 28 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd8]
ffff800000815849:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000815850:	48 89 d6             	mov    rsi,rdx
ffff800000815853:	48 89 c7             	mov    rdi,rax
ffff800000815856:	48 b8 e4 5a 81 00 00 	movabs rax,0xffff800000815ae4
ffff80000081585d:	80 ff ff 
ffff800000815860:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:76
            if(*pstr=='x'){
ffff800000815862:	e9 d7 00 00 00       	jmp    ffff80000081593e <sprintf+0x30d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:82
            }else if(*pstr=='d'){
ffff800000815867:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff80000081586e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000815871:	3c 64                	cmp    al,0x64
ffff800000815873:	75 6d                	jne    ffff8000008158e2 <sprintf+0x2b1>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:83
                char* v=va_arg(vargs,char*);
ffff800000815875:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
ffff80000081587b:	83 f8 2f             	cmp    eax,0x2f
ffff80000081587e:	77 23                	ja     ffff8000008158a3 <sprintf+0x272>
ffff800000815880:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
ffff800000815887:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff80000081588d:	89 d2                	mov    edx,edx
ffff80000081588f:	48 01 d0             	add    rax,rdx
ffff800000815892:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff800000815898:	83 c2 08             	add    edx,0x8
ffff80000081589b:	89 95 08 ff ff ff    	mov    DWORD PTR [rbp-0xf8],edx
ffff8000008158a1:	eb 12                	jmp    ffff8000008158b5 <sprintf+0x284>
ffff8000008158a3:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff8000008158aa:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff8000008158ae:	48 89 95 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rdx
ffff8000008158b5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008158b8:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:84
                sprint_decimal(dist,v);
ffff8000008158bf:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff8000008158c6:	89 c2                	mov    edx,eax
ffff8000008158c8:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff8000008158cf:	89 d6                	mov    esi,edx
ffff8000008158d1:	48 89 c7             	mov    rdi,rax
ffff8000008158d4:	48 b8 9b 59 81 00 00 	movabs rax,0xffff80000081599b
ffff8000008158db:	80 ff ff 
ffff8000008158de:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:76
            if(*pstr=='x'){
ffff8000008158e0:	eb 5c                	jmp    ffff80000081593e <sprintf+0x30d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:85
            }else if(*pstr=='c'){
ffff8000008158e2:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff8000008158e9:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008158ec:	3c 63                	cmp    al,0x63
ffff8000008158ee:	75 02                	jne    ffff8000008158f2 <sprintf+0x2c1>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:86
                char v=va_arg(vargs,char);
ffff8000008158f0:	0f 0b                	ud2    
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:89
                sprintchar(dist,v);
            }else{
                sprintchar(dist,*pstr);
ffff8000008158f2:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff8000008158f9:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008158fc:	0f be d0             	movsx  edx,al
ffff8000008158ff:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000815906:	89 d6                	mov    esi,edx
ffff800000815908:	48 89 c7             	mov    rdi,rax
ffff80000081590b:	48 b8 5c 59 81 00 00 	movabs rax,0xffff80000081595c
ffff800000815912:	80 ff ff 
ffff800000815915:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:76
            if(*pstr=='x'){
ffff800000815917:	eb 25                	jmp    ffff80000081593e <sprintf+0x30d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:92
            }
        }else{
            sprintchar(dist,*pstr);
ffff800000815919:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000815920:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000815923:	0f be d0             	movsx  edx,al
ffff800000815926:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff80000081592d:	89 d6                	mov    esi,edx
ffff80000081592f:	48 89 c7             	mov    rdi,rax
ffff800000815932:	48 b8 5c 59 81 00 00 	movabs rax,0xffff80000081595c
ffff800000815939:	80 ff ff 
ffff80000081593c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:73
    for(;*pstr!='\0';pstr++){
ffff80000081593e:	48 83 85 48 ff ff ff 	add    QWORD PTR [rbp-0xb8],0x1
ffff800000815945:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:73 (discriminator 1)
ffff800000815946:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff80000081594d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000815950:	84 c0                	test   al,al
ffff800000815952:	0f 85 e5 fd ff ff    	jne    ffff80000081573d <sprintf+0x10c>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:96
        }
    }
    va_end(vargs);
}
ffff800000815958:	90                   	nop
ffff800000815959:	90                   	nop
ffff80000081595a:	c9                   	leave  
ffff80000081595b:	c3                   	ret    

ffff80000081595c <sprintchar>:
sprintchar():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:98
void sprintchar(char *dist,char c)
{
ffff80000081595c:	f3 0f 1e fa          	endbr64 
ffff800000815960:	55                   	push   rbp
ffff800000815961:	48 89 e5             	mov    rbp,rsp
ffff800000815964:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000815968:	89 f0                	mov    eax,esi
ffff80000081596a:	88 45 f4             	mov    BYTE PTR [rbp-0xc],al
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:99
    while(*dist!='\0')
ffff80000081596d:	eb 05                	jmp    ffff800000815974 <sprintchar+0x18>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:100
        dist++;
ffff80000081596f:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:99
    while(*dist!='\0')
ffff800000815974:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000815978:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081597b:	84 c0                	test   al,al
ffff80000081597d:	75 f0                	jne    ffff80000081596f <sprintchar+0x13>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:101
    *dist++=c;
ffff80000081597f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000815983:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffff800000815987:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffff80000081598b:	0f b6 55 f4          	movzx  edx,BYTE PTR [rbp-0xc]
ffff80000081598f:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:102
    *dist='\0';
ffff800000815991:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000815995:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:103
}
ffff800000815998:	90                   	nop
ffff800000815999:	5d                   	pop    rbp
ffff80000081599a:	c3                   	ret    

ffff80000081599b <sprint_decimal>:
sprint_decimal():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:105
void sprint_decimal(char *dist,int c)
{
ffff80000081599b:	f3 0f 1e fa          	endbr64 
ffff80000081599f:	55                   	push   rbp
ffff8000008159a0:	48 89 e5             	mov    rbp,rsp
ffff8000008159a3:	48 83 ec 30          	sub    rsp,0x30
ffff8000008159a7:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff8000008159ab:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:107
    unsigned char st[22];
    int p=0;
ffff8000008159ae:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:108
    while(p<sizeof(unsigned long)*2){
ffff8000008159b5:	eb 65                	jmp    ffff800000815a1c <sprint_decimal+0x81>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:109
        unsigned char a=c%10+'0';
ffff8000008159b7:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff8000008159ba:	48 63 c2             	movsxd rax,edx
ffff8000008159bd:	48 69 c0 67 66 66 66 	imul   rax,rax,0x66666667
ffff8000008159c4:	48 c1 e8 20          	shr    rax,0x20
ffff8000008159c8:	c1 f8 02             	sar    eax,0x2
ffff8000008159cb:	89 d6                	mov    esi,edx
ffff8000008159cd:	c1 fe 1f             	sar    esi,0x1f
ffff8000008159d0:	29 f0                	sub    eax,esi
ffff8000008159d2:	89 c1                	mov    ecx,eax
ffff8000008159d4:	89 c8                	mov    eax,ecx
ffff8000008159d6:	c1 e0 02             	shl    eax,0x2
ffff8000008159d9:	01 c8                	add    eax,ecx
ffff8000008159db:	01 c0                	add    eax,eax
ffff8000008159dd:	89 d1                	mov    ecx,edx
ffff8000008159df:	29 c1                	sub    ecx,eax
ffff8000008159e1:	89 c8                	mov    eax,ecx
ffff8000008159e3:	83 c0 30             	add    eax,0x30
ffff8000008159e6:	88 45 fb             	mov    BYTE PTR [rbp-0x5],al
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:110
        st[p++]=a;
ffff8000008159e9:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008159ec:	8d 50 01             	lea    edx,[rax+0x1]
ffff8000008159ef:	89 55 fc             	mov    DWORD PTR [rbp-0x4],edx
ffff8000008159f2:	48 98                	cdqe   
ffff8000008159f4:	0f b6 55 fb          	movzx  edx,BYTE PTR [rbp-0x5]
ffff8000008159f8:	88 54 05 e0          	mov    BYTE PTR [rbp+rax*1-0x20],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:111
        c/=10;
ffff8000008159fc:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff8000008159ff:	48 63 d0             	movsxd rdx,eax
ffff800000815a02:	48 69 d2 67 66 66 66 	imul   rdx,rdx,0x66666667
ffff800000815a09:	48 c1 ea 20          	shr    rdx,0x20
ffff800000815a0d:	c1 fa 02             	sar    edx,0x2
ffff800000815a10:	c1 f8 1f             	sar    eax,0x1f
ffff800000815a13:	89 c1                	mov    ecx,eax
ffff800000815a15:	89 d0                	mov    eax,edx
ffff800000815a17:	29 c8                	sub    eax,ecx
ffff800000815a19:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:108
    while(p<sizeof(unsigned long)*2){
ffff800000815a1c:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000815a1f:	83 f8 0f             	cmp    eax,0xf
ffff800000815a22:	76 93                	jbe    ffff8000008159b7 <sprint_decimal+0x1c>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:113
    }
    while(p>0)
ffff800000815a24:	eb 26                	jmp    ffff800000815a4c <sprint_decimal+0xb1>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:115
    {
        sprintchar(dist,st[--p]);
ffff800000815a26:	83 6d fc 01          	sub    DWORD PTR [rbp-0x4],0x1
ffff800000815a2a:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000815a2d:	48 98                	cdqe   
ffff800000815a2f:	0f b6 44 05 e0       	movzx  eax,BYTE PTR [rbp+rax*1-0x20]
ffff800000815a34:	0f be d0             	movsx  edx,al
ffff800000815a37:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000815a3b:	89 d6                	mov    esi,edx
ffff800000815a3d:	48 89 c7             	mov    rdi,rax
ffff800000815a40:	48 b8 5c 59 81 00 00 	movabs rax,0xffff80000081595c
ffff800000815a47:	80 ff ff 
ffff800000815a4a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:113
    while(p>0)
ffff800000815a4c:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
ffff800000815a50:	7f d4                	jg     ffff800000815a26 <sprint_decimal+0x8b>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:117
    }
}
ffff800000815a52:	90                   	nop
ffff800000815a53:	90                   	nop
ffff800000815a54:	c9                   	leave  
ffff800000815a55:	c3                   	ret    

ffff800000815a56 <sprint_hex>:
sprint_hex():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:119
void sprint_hex(char *dist,unsigned long long c)
{
ffff800000815a56:	f3 0f 1e fa          	endbr64 
ffff800000815a5a:	55                   	push   rbp
ffff800000815a5b:	48 89 e5             	mov    rbp,rsp
ffff800000815a5e:	48 83 ec 30          	sub    rsp,0x30
ffff800000815a62:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000815a66:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:121
    unsigned char st[17];
    int p=0;
ffff800000815a6a:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:122
    while(p<17){
ffff800000815a71:	eb 39                	jmp    ffff800000815aac <sprint_hex+0x56>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:123
        unsigned char a=c%16;
ffff800000815a73:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000815a77:	83 e0 0f             	and    eax,0xf
ffff800000815a7a:	88 45 fb             	mov    BYTE PTR [rbp-0x5],al
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:124
        if(a>9)a+='a'-10;
ffff800000815a7d:	80 7d fb 09          	cmp    BYTE PTR [rbp-0x5],0x9
ffff800000815a81:	76 06                	jbe    ffff800000815a89 <sprint_hex+0x33>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:124 (discriminator 1)
ffff800000815a83:	80 45 fb 57          	add    BYTE PTR [rbp-0x5],0x57
ffff800000815a87:	eb 04                	jmp    ffff800000815a8d <sprint_hex+0x37>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:125
        else a+='0';
ffff800000815a89:	80 45 fb 30          	add    BYTE PTR [rbp-0x5],0x30
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:126
        st[p++]=a;
ffff800000815a8d:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000815a90:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000815a93:	89 55 fc             	mov    DWORD PTR [rbp-0x4],edx
ffff800000815a96:	48 98                	cdqe   
ffff800000815a98:	0f b6 55 fb          	movzx  edx,BYTE PTR [rbp-0x5]
ffff800000815a9c:	88 54 05 e0          	mov    BYTE PTR [rbp+rax*1-0x20],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:127
        c/=16;
ffff800000815aa0:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000815aa4:	48 c1 e8 04          	shr    rax,0x4
ffff800000815aa8:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:122
    while(p<17){
ffff800000815aac:	83 7d fc 10          	cmp    DWORD PTR [rbp-0x4],0x10
ffff800000815ab0:	7e c1                	jle    ffff800000815a73 <sprint_hex+0x1d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:129
    }
    while(p>0)
ffff800000815ab2:	eb 26                	jmp    ffff800000815ada <sprint_hex+0x84>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:131
    {
        sprintchar(dist,st[--p]);
ffff800000815ab4:	83 6d fc 01          	sub    DWORD PTR [rbp-0x4],0x1
ffff800000815ab8:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000815abb:	48 98                	cdqe   
ffff800000815abd:	0f b6 44 05 e0       	movzx  eax,BYTE PTR [rbp+rax*1-0x20]
ffff800000815ac2:	0f be d0             	movsx  edx,al
ffff800000815ac5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000815ac9:	89 d6                	mov    esi,edx
ffff800000815acb:	48 89 c7             	mov    rdi,rax
ffff800000815ace:	48 b8 5c 59 81 00 00 	movabs rax,0xffff80000081595c
ffff800000815ad5:	80 ff ff 
ffff800000815ad8:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:129
    while(p>0)
ffff800000815ada:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
ffff800000815ade:	7f d4                	jg     ffff800000815ab4 <sprint_hex+0x5e>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:133
    }
}
ffff800000815ae0:	90                   	nop
ffff800000815ae1:	90                   	nop
ffff800000815ae2:	c9                   	leave  
ffff800000815ae3:	c3                   	ret    

ffff800000815ae4 <sprintn>:
sprintn():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:135
void sprintn(char *dist,char *str)
{
ffff800000815ae4:	f3 0f 1e fa          	endbr64 
ffff800000815ae8:	55                   	push   rbp
ffff800000815ae9:	48 89 e5             	mov    rbp,rsp
ffff800000815aec:	48 83 ec 10          	sub    rsp,0x10
ffff800000815af0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000815af4:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:136
    while(*str!='\0')
ffff800000815af8:	eb 27                	jmp    ffff800000815b21 <sprintn+0x3d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:138
    {
        sprintchar(dist,*str++);
ffff800000815afa:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000815afe:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffff800000815b02:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
ffff800000815b06:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000815b09:	0f be d0             	movsx  edx,al
ffff800000815b0c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000815b10:	89 d6                	mov    esi,edx
ffff800000815b12:	48 89 c7             	mov    rdi,rax
ffff800000815b15:	48 b8 5c 59 81 00 00 	movabs rax,0xffff80000081595c
ffff800000815b1c:	80 ff ff 
ffff800000815b1f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:136
    while(*str!='\0')
ffff800000815b21:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000815b25:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000815b28:	84 c0                	test   al,al
ffff800000815b2a:	75 ce                	jne    ffff800000815afa <sprintn+0x16>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:140
    }
ffff800000815b2c:	90                   	nop
ffff800000815b2d:	90                   	nop
ffff800000815b2e:	c9                   	leave  
ffff800000815b2f:	c3                   	ret    

ffff800000815b30 <create_zero>:
create_zero():
ffff800000815b30:	e8 b3 00 ff ff       	call   ffff800000805be8 <req_proc>
ffff800000815b35:	83 f8 ff             	cmp    eax,0xffffffff
ffff800000815b38:	74 0c                	je     ffff800000815b46 <create_zero.retu>
ffff800000815b3a:	e8 61 02 ff ff       	call   ffff800000805da0 <set_proc>
ffff800000815b3f:	67 8b 04 24          	mov    eax,DWORD PTR [esp]
ffff800000815b43:	83 c4 40             	add    esp,0x40

ffff800000815b46 <create_zero.retu>:
create_zero.retu():
ffff800000815b46:	c3                   	ret    

ffff800000815b47 <save_context>:
switch_proc_asm():
ffff800000815b47:	55                   	push   rbp
ffff800000815b48:	48 89 e6             	mov    rsi,rsp
ffff800000815b4b:	48 89 f7             	mov    rdi,rsi
ffff800000815b4e:	48 83 c7 18          	add    rdi,0x18
ffff800000815b52:	e8 ca 09 ff ff       	call   ffff800000806521 <save_context_c>
ffff800000815b57:	c3                   	ret    

ffff800000815b58 <discard_context>:
discard_context():
ffff800000815b58:	c3                   	ret    

ffff800000815b59 <desc>:
	...

ffff800000815b61 <ret_sys_call>:
ret_sys_call():
ffff800000815b61:	58                   	pop    rax
ffff800000815b62:	8e d8                	mov    ds,eax
ffff800000815b64:	58                   	pop    rax
ffff800000815b65:	8e c0                	mov    es,eax
ffff800000815b67:	41 5f                	pop    r15
ffff800000815b69:	41 5e                	pop    r14
ffff800000815b6b:	41 5d                	pop    r13
ffff800000815b6d:	41 5c                	pop    r12
ffff800000815b6f:	41 5b                	pop    r11
ffff800000815b71:	41 5a                	pop    r10
ffff800000815b73:	41 59                	pop    r9
ffff800000815b75:	41 58                	pop    r8
ffff800000815b77:	5e                   	pop    rsi
ffff800000815b78:	5f                   	pop    rdi
ffff800000815b79:	5a                   	pop    rdx
ffff800000815b7a:	59                   	pop    rcx
ffff800000815b7b:	5b                   	pop    rbx
ffff800000815b7c:	58                   	pop    rax

ffff800000815b7d <tmp>:
tmp():
ffff800000815b7d:	48 0f 07             	sysretq 

ffff800000815b80 <ret_normal_proc>:
ret_normal_proc():
ffff800000815b80:	58                   	pop    rax
ffff800000815b81:	8e d8                	mov    ds,eax
ffff800000815b83:	58                   	pop    rax
ffff800000815b84:	8e c0                	mov    es,eax
ffff800000815b86:	41 5f                	pop    r15
ffff800000815b88:	41 5e                	pop    r14
ffff800000815b8a:	41 5d                	pop    r13
ffff800000815b8c:	41 5c                	pop    r12
ffff800000815b8e:	41 5b                	pop    r11
ffff800000815b90:	41 5a                	pop    r10
ffff800000815b92:	41 59                	pop    r9
ffff800000815b94:	41 58                	pop    r8
ffff800000815b96:	5e                   	pop    rsi
ffff800000815b97:	5f                   	pop    rdi
ffff800000815b98:	5a                   	pop    rdx
ffff800000815b99:	59                   	pop    rcx
ffff800000815b9a:	5b                   	pop    rbx
ffff800000815b9b:	58                   	pop    rax
ffff800000815b9c:	c3                   	ret    

ffff800000815b9d <move_to_user_mode>:
move_to_user_mode():
ffff800000815b9d:	48 b9 ad 5b 81 00 00 	movabs rcx,0xffff800000815bad
ffff800000815ba4:	80 ff ff 
ffff800000815ba7:	9c                   	pushf  
ffff800000815ba8:	41 5b                	pop    r11
ffff800000815baa:	48 0f 07             	sysretq 

ffff800000815bad <move_to_user_mode.result>:
move_to_user_mode.result():
ffff800000815bad:	b8 2b 00 00 00       	mov    eax,0x2b
ffff800000815bb2:	8e c0                	mov    es,eax
ffff800000815bb4:	8e d8                	mov    ds,eax
ffff800000815bb6:	8e e0                	mov    fs,eax
ffff800000815bb8:	8e e8                	mov    gs,eax
ffff800000815bba:	c3                   	ret    
