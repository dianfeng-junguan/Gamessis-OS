
bin/gmsknl.elf:     file format elf64-x86-64


Disassembly of section .text:

ffff800000800000 <init_int>:
init_int():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:13
#include "kb.h"
#include "framebuffer.h"

gate *idt= (gate *) (KNL_BASE+IDT_ADDR);
extern int disk_int_handler();
void init_int(){
ffff800000800000:	f3 0f 1e fa          	endbr64 
ffff800000800004:	55                   	push   rbp
ffff800000800005:	48 89 e5             	mov    rbp,rsp
ffff800000800008:	41 57                	push   r15
ffff80000080000a:	53                   	push   rbx
ffff80000080000b:	48 83 ec 10          	sub    rsp,0x10
ffff80000080000f:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080000f <init_int+0xf>
ffff800000800016:	49 bb 09 c8 11 00 00 	movabs r11,0x11c809
ffff80000080001d:	00 00 00 
ffff800000800020:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:15
    //asm volatile("sidt %0"::"m"(idt));
    set_gate(0,(addr_t)divide_err,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800023:	48 b8 30 ff ff ff ff 	movabs rax,0xffffffffffffff30
ffff80000080002a:	ff ff ff 
ffff80000080002d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800031:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800036:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080003b:	48 89 c6             	mov    rsi,rax
ffff80000080003e:	bf 00 00 00 00       	mov    edi,0x0
ffff800000800043:	49 89 df             	mov    r15,rbx
ffff800000800046:	48 b8 ba 3d ee ff ff 	movabs rax,0xffffffffffee3dba
ffff80000080004d:	ff ff ff 
ffff800000800050:	48 01 d8             	add    rax,rbx
ffff800000800053:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:16
    set_gate(1,(addr_t)debug,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800055:	48 b8 e0 fd ff ff ff 	movabs rax,0xfffffffffffffde0
ffff80000080005c:	ff ff ff 
ffff80000080005f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800063:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800068:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080006d:	48 89 c6             	mov    rsi,rax
ffff800000800070:	bf 01 00 00 00       	mov    edi,0x1
ffff800000800075:	49 89 df             	mov    r15,rbx
ffff800000800078:	48 b8 ba 3d ee ff ff 	movabs rax,0xffffffffffee3dba
ffff80000080007f:	ff ff ff 
ffff800000800082:	48 01 d8             	add    rax,rbx
ffff800000800085:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:17
    set_gate(2,(addr_t)default_int_proc,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800087:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff80000080008e:	ff ff ff 
ffff800000800091:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800095:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff80000080009a:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080009f:	48 89 c6             	mov    rsi,rax
ffff8000008000a2:	bf 02 00 00 00       	mov    edi,0x2
ffff8000008000a7:	49 89 df             	mov    r15,rbx
ffff8000008000aa:	48 b8 ba 3d ee ff ff 	movabs rax,0xffffffffffee3dba
ffff8000008000b1:	ff ff ff 
ffff8000008000b4:	48 01 d8             	add    rax,rbx
ffff8000008000b7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:18
    set_gate(3,(addr_t)breakpoint,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff8000008000b9:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff8000008000c0:	ff ff ff 
ffff8000008000c3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008000c7:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008000cc:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008000d1:	48 89 c6             	mov    rsi,rax
ffff8000008000d4:	bf 03 00 00 00       	mov    edi,0x3
ffff8000008000d9:	49 89 df             	mov    r15,rbx
ffff8000008000dc:	48 b8 ba 3d ee ff ff 	movabs rax,0xffffffffffee3dba
ffff8000008000e3:	ff ff ff 
ffff8000008000e6:	48 01 d8             	add    rax,rbx
ffff8000008000e9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:19
    set_gate(4,(addr_t)overflow,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff8000008000eb:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff8000008000f2:	ff ff ff 
ffff8000008000f5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008000f9:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008000fe:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800103:	48 89 c6             	mov    rsi,rax
ffff800000800106:	bf 04 00 00 00       	mov    edi,0x4
ffff80000080010b:	49 89 df             	mov    r15,rbx
ffff80000080010e:	48 b8 ba 3d ee ff ff 	movabs rax,0xffffffffffee3dba
ffff800000800115:	ff ff ff 
ffff800000800118:	48 01 d8             	add    rax,rbx
ffff80000080011b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:20
    set_gate(5,(addr_t)bounds,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff80000080011d:	48 b8 e8 fd ff ff ff 	movabs rax,0xfffffffffffffde8
ffff800000800124:	ff ff ff 
ffff800000800127:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080012b:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800130:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800135:	48 89 c6             	mov    rsi,rax
ffff800000800138:	bf 05 00 00 00       	mov    edi,0x5
ffff80000080013d:	49 89 df             	mov    r15,rbx
ffff800000800140:	48 b8 ba 3d ee ff ff 	movabs rax,0xffffffffffee3dba
ffff800000800147:	ff ff ff 
ffff80000080014a:	48 01 d8             	add    rax,rbx
ffff80000080014d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:21
    set_gate(6,(addr_t)undefined_operator,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff80000080014f:	48 b8 60 ff ff ff ff 	movabs rax,0xffffffffffffff60
ffff800000800156:	ff ff ff 
ffff800000800159:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080015d:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800162:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800167:	48 89 c6             	mov    rsi,rax
ffff80000080016a:	bf 06 00 00 00       	mov    edi,0x6
ffff80000080016f:	49 89 df             	mov    r15,rbx
ffff800000800172:	48 b8 ba 3d ee ff ff 	movabs rax,0xffffffffffee3dba
ffff800000800179:	ff ff ff 
ffff80000080017c:	48 01 d8             	add    rax,rbx
ffff80000080017f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:22
    set_gate(7,(addr_t)coprocessor_notexist,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800181:	48 b8 f0 ff ff ff ff 	movabs rax,0xfffffffffffffff0
ffff800000800188:	ff ff ff 
ffff80000080018b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080018f:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800194:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800199:	48 89 c6             	mov    rsi,rax
ffff80000080019c:	bf 07 00 00 00       	mov    edi,0x7
ffff8000008001a1:	49 89 df             	mov    r15,rbx
ffff8000008001a4:	48 b8 ba 3d ee ff ff 	movabs rax,0xffffffffffee3dba
ffff8000008001ab:	ff ff ff 
ffff8000008001ae:	48 01 d8             	add    rax,rbx
ffff8000008001b1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:23
    set_gate(8,(addr_t)double_ints,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);//double_ints
ffff8000008001b3:	48 b8 70 fe ff ff ff 	movabs rax,0xfffffffffffffe70
ffff8000008001ba:	ff ff ff 
ffff8000008001bd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008001c1:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008001c6:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008001cb:	48 89 c6             	mov    rsi,rax
ffff8000008001ce:	bf 08 00 00 00       	mov    edi,0x8
ffff8000008001d3:	49 89 df             	mov    r15,rbx
ffff8000008001d6:	48 b8 ba 3d ee ff ff 	movabs rax,0xffffffffffee3dba
ffff8000008001dd:	ff ff ff 
ffff8000008001e0:	48 01 d8             	add    rax,rbx
ffff8000008001e3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:24
    set_gate(9,(addr_t)coprocessor_seg_overbound,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff8000008001e5:	48 b8 28 fe ff ff ff 	movabs rax,0xfffffffffffffe28
ffff8000008001ec:	ff ff ff 
ffff8000008001ef:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008001f3:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008001f8:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008001fd:	48 89 c6             	mov    rsi,rax
ffff800000800200:	bf 09 00 00 00       	mov    edi,0x9
ffff800000800205:	49 89 df             	mov    r15,rbx
ffff800000800208:	48 b8 ba 3d ee ff ff 	movabs rax,0xffffffffffee3dba
ffff80000080020f:	ff ff ff 
ffff800000800212:	48 01 d8             	add    rax,rbx
ffff800000800215:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:25
    set_gate(10,(addr_t)invalid_tss,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800217:	48 b8 d0 ff ff ff ff 	movabs rax,0xffffffffffffffd0
ffff80000080021e:	ff ff ff 
ffff800000800221:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800225:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff80000080022a:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080022f:	48 89 c6             	mov    rsi,rax
ffff800000800232:	bf 0a 00 00 00       	mov    edi,0xa
ffff800000800237:	49 89 df             	mov    r15,rbx
ffff80000080023a:	48 b8 ba 3d ee ff ff 	movabs rax,0xffffffffffee3dba
ffff800000800241:	ff ff ff 
ffff800000800244:	48 01 d8             	add    rax,rbx
ffff800000800247:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:26
    set_gate(11,(addr_t)segment_notexist,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800249:	48 b8 e0 ff ff ff ff 	movabs rax,0xffffffffffffffe0
ffff800000800250:	ff ff ff 
ffff800000800253:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800257:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff80000080025c:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800261:	48 89 c6             	mov    rsi,rax
ffff800000800264:	bf 0b 00 00 00       	mov    edi,0xb
ffff800000800269:	49 89 df             	mov    r15,rbx
ffff80000080026c:	48 b8 ba 3d ee ff ff 	movabs rax,0xffffffffffee3dba
ffff800000800273:	ff ff ff 
ffff800000800276:	48 01 d8             	add    rax,rbx
ffff800000800279:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:27
    set_gate(12,(addr_t)stackseg_overbound,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);//
ffff80000080027b:	48 b8 b8 ff ff ff ff 	movabs rax,0xffffffffffffffb8
ffff800000800282:	ff ff ff 
ffff800000800285:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800289:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff80000080028e:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800293:	48 89 c6             	mov    rsi,rax
ffff800000800296:	bf 0c 00 00 00       	mov    edi,0xc
ffff80000080029b:	49 89 df             	mov    r15,rbx
ffff80000080029e:	48 b8 ba 3d ee ff ff 	movabs rax,0xffffffffffee3dba
ffff8000008002a5:	ff ff ff 
ffff8000008002a8:	48 01 d8             	add    rax,rbx
ffff8000008002ab:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:28
    set_gate(13,(addr_t)general_protect,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff8000008002ad:	48 b8 78 ff ff ff ff 	movabs rax,0xffffffffffffff78
ffff8000008002b4:	ff ff ff 
ffff8000008002b7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008002bb:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008002c0:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008002c5:	48 89 c6             	mov    rsi,rax
ffff8000008002c8:	bf 0d 00 00 00       	mov    edi,0xd
ffff8000008002cd:	49 89 df             	mov    r15,rbx
ffff8000008002d0:	48 b8 ba 3d ee ff ff 	movabs rax,0xffffffffffee3dba
ffff8000008002d7:	ff ff ff 
ffff8000008002da:	48 01 d8             	add    rax,rbx
ffff8000008002dd:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:29
    set_gate(14,(addr_t)page_err,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff8000008002df:	48 b8 50 fd ff ff ff 	movabs rax,0xfffffffffffffd50
ffff8000008002e6:	ff ff ff 
ffff8000008002e9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008002ed:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008002f2:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008002f7:	48 89 c6             	mov    rsi,rax
ffff8000008002fa:	bf 0e 00 00 00       	mov    edi,0xe
ffff8000008002ff:	49 89 df             	mov    r15,rbx
ffff800000800302:	48 b8 ba 3d ee ff ff 	movabs rax,0xffffffffffee3dba
ffff800000800309:	ff ff ff 
ffff80000080030c:	48 01 d8             	add    rax,rbx
ffff80000080030f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:30
    set_gate(15,(addr_t)default_int_proc,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800311:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000800318:	ff ff ff 
ffff80000080031b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080031f:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800324:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800329:	48 89 c6             	mov    rsi,rax
ffff80000080032c:	bf 0f 00 00 00       	mov    edi,0xf
ffff800000800331:	49 89 df             	mov    r15,rbx
ffff800000800334:	48 b8 ba 3d ee ff ff 	movabs rax,0xffffffffffee3dba
ffff80000080033b:	ff ff ff 
ffff80000080033e:	48 01 d8             	add    rax,rbx
ffff800000800341:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:31
    set_gate(16,(addr_t)coprocessor_err,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800343:	48 b8 68 ff ff ff ff 	movabs rax,0xffffffffffffff68
ffff80000080034a:	ff ff ff 
ffff80000080034d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800351:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800356:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080035b:	48 89 c6             	mov    rsi,rax
ffff80000080035e:	bf 10 00 00 00       	mov    edi,0x10
ffff800000800363:	49 89 df             	mov    r15,rbx
ffff800000800366:	48 b8 ba 3d ee ff ff 	movabs rax,0xffffffffffee3dba
ffff80000080036d:	ff ff ff 
ffff800000800370:	48 01 d8             	add    rax,rbx
ffff800000800373:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:32
    for (int i=17;i<48;i++)
ffff800000800375:	c7 45 ec 11 00 00 00 	mov    DWORD PTR [rbp-0x14],0x11
ffff80000080037c:	eb 39                	jmp    ffff8000008003b7 <init_int+0x3b7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:33 (discriminator 3)
        set_gate(i,(addr_t)default_int_proc,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);
ffff80000080037e:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000800385:	ff ff ff 
ffff800000800388:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080038c:	48 89 c6             	mov    rsi,rax
ffff80000080038f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000800392:	0f b6 c0             	movzx  eax,al
ffff800000800395:	b9 00 8e 00 00       	mov    ecx,0x8e00
ffff80000080039a:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080039f:	89 c7                	mov    edi,eax
ffff8000008003a1:	49 89 df             	mov    r15,rbx
ffff8000008003a4:	48 b8 ba 3d ee ff ff 	movabs rax,0xffffffffffee3dba
ffff8000008003ab:	ff ff ff 
ffff8000008003ae:	48 01 d8             	add    rax,rbx
ffff8000008003b1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:32 (discriminator 3)
    for (int i=17;i<48;i++)
ffff8000008003b3:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:32 (discriminator 1)
ffff8000008003b7:	83 7d ec 2f          	cmp    DWORD PTR [rbp-0x14],0x2f
ffff8000008003bb:	7e c1                	jle    ffff80000080037e <init_int+0x37e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:34
	set_gate(0x21,(addr_t)key_proc,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);
ffff8000008003bd:	48 b8 68 fd ff ff ff 	movabs rax,0xfffffffffffffd68
ffff8000008003c4:	ff ff ff 
ffff8000008003c7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008003cb:	b9 00 8e 00 00       	mov    ecx,0x8e00
ffff8000008003d0:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008003d5:	48 89 c6             	mov    rsi,rax
ffff8000008003d8:	bf 21 00 00 00       	mov    edi,0x21
ffff8000008003dd:	49 89 df             	mov    r15,rbx
ffff8000008003e0:	48 b8 ba 3d ee ff ff 	movabs rax,0xffffffffffee3dba
ffff8000008003e7:	ff ff ff 
ffff8000008003ea:	48 01 d8             	add    rax,rbx
ffff8000008003ed:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:35
	set_gate(0x20,(addr_t)clock,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);
ffff8000008003ef:	48 b8 d8 ff ff ff ff 	movabs rax,0xffffffffffffffd8
ffff8000008003f6:	ff ff ff 
ffff8000008003f9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008003fd:	b9 00 8e 00 00       	mov    ecx,0x8e00
ffff800000800402:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800407:	48 89 c6             	mov    rsi,rax
ffff80000080040a:	bf 20 00 00 00       	mov    edi,0x20
ffff80000080040f:	49 89 df             	mov    r15,rbx
ffff800000800412:	48 b8 ba 3d ee ff ff 	movabs rax,0xffffffffffee3dba
ffff800000800419:	ff ff ff 
ffff80000080041c:	48 01 d8             	add    rax,rbx
ffff80000080041f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:36
	set_gate(0x2e,(addr_t)disk_int_handler,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);
ffff800000800421:	48 b8 f8 ff ff ff ff 	movabs rax,0xfffffffffffffff8
ffff800000800428:	ff ff ff 
ffff80000080042b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080042f:	b9 00 8e 00 00       	mov    ecx,0x8e00
ffff800000800434:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800439:	48 89 c6             	mov    rsi,rax
ffff80000080043c:	bf 2e 00 00 00       	mov    edi,0x2e
ffff800000800441:	49 89 df             	mov    r15,rbx
ffff800000800444:	48 b8 ba 3d ee ff ff 	movabs rax,0xffffffffffee3dba
ffff80000080044b:	ff ff ff 
ffff80000080044e:	48 01 d8             	add    rax,rbx
ffff800000800451:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:37
    set_gate(0x80,(addr_t)_syscall,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);//
ffff800000800453:	48 b8 88 fd ff ff ff 	movabs rax,0xfffffffffffffd88
ffff80000080045a:	ff ff ff 
ffff80000080045d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800461:	b9 00 8e 00 00       	mov    ecx,0x8e00
ffff800000800466:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080046b:	48 89 c6             	mov    rsi,rax
ffff80000080046e:	bf 80 00 00 00       	mov    edi,0x80
ffff800000800473:	49 89 df             	mov    r15,rbx
ffff800000800476:	48 b8 ba 3d ee ff ff 	movabs rax,0xffffffffffee3dba
ffff80000080047d:	ff ff ff 
ffff800000800480:	48 01 d8             	add    rax,rbx
ffff800000800483:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:42
    //set_gate(0x2c,mouse_proc,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);
    //启动8259A
    
	//ICW1
	outb(0x20,0x11);
ffff800000800485:	be 11 00 00 00       	mov    esi,0x11
ffff80000080048a:	bf 20 00 00 00       	mov    edi,0x20
ffff80000080048f:	49 89 df             	mov    r15,rbx
ffff800000800492:	48 b8 b8 b4 ee ff ff 	movabs rax,0xffffffffffeeb4b8
ffff800000800499:	ff ff ff 
ffff80000080049c:	48 01 d8             	add    rax,rbx
ffff80000080049f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:43
	outb(0xA0,0x11);
ffff8000008004a1:	be 11 00 00 00       	mov    esi,0x11
ffff8000008004a6:	bf a0 00 00 00       	mov    edi,0xa0
ffff8000008004ab:	49 89 df             	mov    r15,rbx
ffff8000008004ae:	48 b8 b8 b4 ee ff ff 	movabs rax,0xffffffffffeeb4b8
ffff8000008004b5:	ff ff ff 
ffff8000008004b8:	48 01 d8             	add    rax,rbx
ffff8000008004bb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:45
	//ICW2
	outb(0x21,0x20);//former 0x20,0x20
ffff8000008004bd:	be 20 00 00 00       	mov    esi,0x20
ffff8000008004c2:	bf 21 00 00 00       	mov    edi,0x21
ffff8000008004c7:	49 89 df             	mov    r15,rbx
ffff8000008004ca:	48 b8 b8 b4 ee ff ff 	movabs rax,0xffffffffffeeb4b8
ffff8000008004d1:	ff ff ff 
ffff8000008004d4:	48 01 d8             	add    rax,rbx
ffff8000008004d7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:46
	outb(0xA1,0x28);
ffff8000008004d9:	be 28 00 00 00       	mov    esi,0x28
ffff8000008004de:	bf a1 00 00 00       	mov    edi,0xa1
ffff8000008004e3:	49 89 df             	mov    r15,rbx
ffff8000008004e6:	48 b8 b8 b4 ee ff ff 	movabs rax,0xffffffffffeeb4b8
ffff8000008004ed:	ff ff ff 
ffff8000008004f0:	48 01 d8             	add    rax,rbx
ffff8000008004f3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:48
	//ICW3
	outb(0x21,0x04);
ffff8000008004f5:	be 04 00 00 00       	mov    esi,0x4
ffff8000008004fa:	bf 21 00 00 00       	mov    edi,0x21
ffff8000008004ff:	49 89 df             	mov    r15,rbx
ffff800000800502:	48 b8 b8 b4 ee ff ff 	movabs rax,0xffffffffffeeb4b8
ffff800000800509:	ff ff ff 
ffff80000080050c:	48 01 d8             	add    rax,rbx
ffff80000080050f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:49
	outb(0xA1,0x02);
ffff800000800511:	be 02 00 00 00       	mov    esi,0x2
ffff800000800516:	bf a1 00 00 00       	mov    edi,0xa1
ffff80000080051b:	49 89 df             	mov    r15,rbx
ffff80000080051e:	48 b8 b8 b4 ee ff ff 	movabs rax,0xffffffffffeeb4b8
ffff800000800525:	ff ff ff 
ffff800000800528:	48 01 d8             	add    rax,rbx
ffff80000080052b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:51
	//ICW4
	outb(0x21,0x01);
ffff80000080052d:	be 01 00 00 00       	mov    esi,0x1
ffff800000800532:	bf 21 00 00 00       	mov    edi,0x21
ffff800000800537:	49 89 df             	mov    r15,rbx
ffff80000080053a:	48 b8 b8 b4 ee ff ff 	movabs rax,0xffffffffffeeb4b8
ffff800000800541:	ff ff ff 
ffff800000800544:	48 01 d8             	add    rax,rbx
ffff800000800547:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:52
	outb(0xA1,0x01);
ffff800000800549:	be 01 00 00 00       	mov    esi,0x1
ffff80000080054e:	bf a1 00 00 00       	mov    edi,0xa1
ffff800000800553:	49 89 df             	mov    r15,rbx
ffff800000800556:	48 b8 b8 b4 ee ff ff 	movabs rax,0xffffffffffeeb4b8
ffff80000080055d:	ff ff ff 
ffff800000800560:	48 01 d8             	add    rax,rbx
ffff800000800563:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:54

    turn_on_int();
ffff800000800565:	49 89 df             	mov    r15,rbx
ffff800000800568:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080056d:	48 ba f2 b4 ee ff ff 	movabs rdx,0xffffffffffeeb4f2
ffff800000800574:	ff ff ff 
ffff800000800577:	48 01 da             	add    rdx,rbx
ffff80000080057a:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:58


    //设置IA32_LSTAR,为syscall做设置
    wrmsr(0xc0000082, _syscall);
ffff80000080057c:	48 b8 88 fd ff ff ff 	movabs rax,0xfffffffffffffd88
ffff800000800583:	ff ff ff 
ffff800000800586:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080058a:	48 89 c6             	mov    rsi,rax
ffff80000080058d:	b8 82 00 00 c0       	mov    eax,0xc0000082
ffff800000800592:	48 89 c7             	mov    rdi,rax
ffff800000800595:	49 89 df             	mov    r15,rbx
ffff800000800598:	48 b8 0a 46 ee ff ff 	movabs rax,0xffffffffffee460a
ffff80000080059f:	ff ff ff 
ffff8000008005a2:	48 01 d8             	add    rax,rbx
ffff8000008005a5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:60
    //设置IA32_FMASK,为syscall做设置
    wrmsr(0xc0000084, -1);
ffff8000008005a7:	48 c7 c6 ff ff ff ff 	mov    rsi,0xffffffffffffffff
ffff8000008005ae:	b8 84 00 00 c0       	mov    eax,0xc0000084
ffff8000008005b3:	48 89 c7             	mov    rdi,rax
ffff8000008005b6:	49 89 df             	mov    r15,rbx
ffff8000008005b9:	48 b8 0a 46 ee ff ff 	movabs rax,0xffffffffffee460a
ffff8000008005c0:	ff ff ff 
ffff8000008005c3:	48 01 d8             	add    rax,rbx
ffff8000008005c6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:61
}
ffff8000008005c8:	90                   	nop
ffff8000008005c9:	48 83 c4 10          	add    rsp,0x10
ffff8000008005cd:	5b                   	pop    rbx
ffff8000008005ce:	41 5f                	pop    r15
ffff8000008005d0:	5d                   	pop    rbp
ffff8000008005d1:	c3                   	ret    

ffff8000008005d2 <set_gate>:
set_gate():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:63
void set_gate(u8 index,addr_t offset,u16 selector,u16 attr)
{
ffff8000008005d2:	f3 0f 1e fa          	endbr64 
ffff8000008005d6:	55                   	push   rbp
ffff8000008005d7:	48 89 e5             	mov    rbp,rsp
ffff8000008005da:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008005da <set_gate+0x8>
ffff8000008005e1:	49 bb 3e c2 11 00 00 	movabs r11,0x11c23e
ffff8000008005e8:	00 00 00 
ffff8000008005eb:	4c 01 d8             	add    rax,r11
ffff8000008005ee:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff8000008005f2:	89 d6                	mov    esi,edx
ffff8000008005f4:	89 ca                	mov    edx,ecx
ffff8000008005f6:	89 f9                	mov    ecx,edi
ffff8000008005f8:	88 4d fc             	mov    BYTE PTR [rbp-0x4],cl
ffff8000008005fb:	89 f1                	mov    ecx,esi
ffff8000008005fd:	66 89 4d f8          	mov    WORD PTR [rbp-0x8],cx
ffff800000800601:	66 89 55 ec          	mov    WORD PTR [rbp-0x14],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:70
    idt[index].offset_low=offset&0xffffu;
    idt[index].offset_high=(offset>>16)&0xffffu;
    idt[index].attr=attr;
    idt[index].selector=selector;
#else
    offset|=KNL_BASE;//中断必须在内核空间
ffff800000800605:	48 ba 00 00 00 00 00 	movabs rdx,0xffff800000000000
ffff80000080060c:	80 ff ff 
ffff80000080060f:	48 09 55 f0          	or     QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:71
    idt[index].offset_low=offset&0xffff;
ffff800000800613:	48 ba 40 ff ff ff ff 	movabs rdx,0xffffffffffffff40
ffff80000080061a:	ff ff ff 
ffff80000080061d:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000800621:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000800624:	0f b6 55 fc          	movzx  edx,BYTE PTR [rbp-0x4]
ffff800000800628:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080062c:	48 01 ca             	add    rdx,rcx
ffff80000080062f:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff800000800633:	66 89 0a             	mov    WORD PTR [rdx],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:72
    idt[index].offset_mid=(offset>>16)&0xffff;
ffff800000800636:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080063a:	48 89 d1             	mov    rcx,rdx
ffff80000080063d:	48 c1 e9 10          	shr    rcx,0x10
ffff800000800641:	48 ba 40 ff ff ff ff 	movabs rdx,0xffffffffffffff40
ffff800000800648:	ff ff ff 
ffff80000080064b:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080064f:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff800000800652:	0f b6 55 fc          	movzx  edx,BYTE PTR [rbp-0x4]
ffff800000800656:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080065a:	48 01 f2             	add    rdx,rsi
ffff80000080065d:	66 89 4a 06          	mov    WORD PTR [rdx+0x6],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:73
    idt[index].offset_high=(offset>>32);//0x0000ffff;
ffff800000800661:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff800000800665:	48 89 d1             	mov    rcx,rdx
ffff800000800668:	48 c1 e9 20          	shr    rcx,0x20
ffff80000080066c:	48 ba 40 ff ff ff ff 	movabs rdx,0xffffffffffffff40
ffff800000800673:	ff ff ff 
ffff800000800676:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080067a:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff80000080067d:	0f b6 55 fc          	movzx  edx,BYTE PTR [rbp-0x4]
ffff800000800681:	48 c1 e2 04          	shl    rdx,0x4
ffff800000800685:	48 01 f2             	add    rdx,rsi
ffff800000800688:	89 4a 08             	mov    DWORD PTR [rdx+0x8],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:74
    idt[index].attr=attr|1;//1是ist索引
ffff80000080068b:	48 ba 40 ff ff ff ff 	movabs rdx,0xffffffffffffff40
ffff800000800692:	ff ff ff 
ffff800000800695:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000800699:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080069c:	0f b6 55 fc          	movzx  edx,BYTE PTR [rbp-0x4]
ffff8000008006a0:	48 c1 e2 04          	shl    rdx,0x4
ffff8000008006a4:	48 01 ca             	add    rdx,rcx
ffff8000008006a7:	0f b7 4d ec          	movzx  ecx,WORD PTR [rbp-0x14]
ffff8000008006ab:	83 c9 01             	or     ecx,0x1
ffff8000008006ae:	66 89 4a 04          	mov    WORD PTR [rdx+0x4],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:75
    idt[index].selector=selector;
ffff8000008006b2:	48 ba 40 ff ff ff ff 	movabs rdx,0xffffffffffffff40
ffff8000008006b9:	ff ff ff 
ffff8000008006bc:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008006c0:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008006c3:	0f b6 55 fc          	movzx  edx,BYTE PTR [rbp-0x4]
ffff8000008006c7:	48 c1 e2 04          	shl    rdx,0x4
ffff8000008006cb:	48 01 d1             	add    rcx,rdx
ffff8000008006ce:	0f b7 55 f8          	movzx  edx,WORD PTR [rbp-0x8]
ffff8000008006d2:	66 89 51 02          	mov    WORD PTR [rcx+0x2],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:76
    idt[index].rsvd=0;
ffff8000008006d6:	48 ba 40 ff ff ff ff 	movabs rdx,0xffffffffffffff40
ffff8000008006dd:	ff ff ff 
ffff8000008006e0:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff8000008006e4:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008006e7:	0f b6 45 fc          	movzx  eax,BYTE PTR [rbp-0x4]
ffff8000008006eb:	48 c1 e0 04          	shl    rax,0x4
ffff8000008006ef:	48 01 d0             	add    rax,rdx
ffff8000008006f2:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [rax+0xc],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:78
#endif
}
ffff8000008006f9:	90                   	nop
ffff8000008006fa:	5d                   	pop    rbp
ffff8000008006fb:	c3                   	ret    

ffff8000008006fc <divide_err>:
divide_err():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:80

void divide_err(){
ffff8000008006fc:	f3 0f 1e fa          	endbr64 
ffff800000800700:	55                   	push   rbp
ffff800000800701:	48 89 e5             	mov    rbp,rsp
ffff800000800704:	41 57                	push   r15
ffff800000800706:	48 83 ec 08          	sub    rsp,0x8
ffff80000080070a:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080070a <divide_err+0xe>
ffff800000800711:	49 bb 0e c1 11 00 00 	movabs r11,0x11c10e
ffff800000800718:	00 00 00 
ffff80000080071b:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:81
    asm("cli");
ffff80000080071e:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:83
    //puts("divide err");
    eoi();
ffff80000080071f:	49 89 d7             	mov    r15,rdx
ffff800000800722:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800727:	48 b9 e6 b4 ee ff ff 	movabs rcx,0xffffffffffeeb4e6
ffff80000080072e:	ff ff ff 
ffff800000800731:	48 01 d1             	add    rcx,rdx
ffff800000800734:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:84
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800736:	fb                   	sti    
ffff800000800737:	c9                   	leave  
ffff800000800738:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:85
}
ffff80000080073a:	90                   	nop
ffff80000080073b:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080073f:	c9                   	leave  
ffff800000800740:	c3                   	ret    

ffff800000800741 <debug>:
debug():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:87

void debug(){
ffff800000800741:	f3 0f 1e fa          	endbr64 
ffff800000800745:	55                   	push   rbp
ffff800000800746:	48 89 e5             	mov    rbp,rsp
ffff800000800749:	41 57                	push   r15
ffff80000080074b:	48 83 ec 08          	sub    rsp,0x8
ffff80000080074f:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080074f <debug+0xe>
ffff800000800756:	49 bb c9 c0 11 00 00 	movabs r11,0x11c0c9
ffff80000080075d:	00 00 00 
ffff800000800760:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:88
    asm("cli");
ffff800000800763:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:90
    //puts("debug");
    eoi();
ffff800000800764:	49 89 d7             	mov    r15,rdx
ffff800000800767:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080076c:	48 b9 e6 b4 ee ff ff 	movabs rcx,0xffffffffffeeb4e6
ffff800000800773:	ff ff ff 
ffff800000800776:	48 01 d1             	add    rcx,rdx
ffff800000800779:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:91
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff80000080077b:	fb                   	sti    
ffff80000080077c:	c9                   	leave  
ffff80000080077d:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:92
}
ffff80000080077f:	90                   	nop
ffff800000800780:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800784:	c9                   	leave  
ffff800000800785:	c3                   	ret    

ffff800000800786 <default_int_proc>:
default_int_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:93
void default_int_proc(){
ffff800000800786:	f3 0f 1e fa          	endbr64 
ffff80000080078a:	55                   	push   rbp
ffff80000080078b:	48 89 e5             	mov    rbp,rsp
ffff80000080078e:	41 57                	push   r15
ffff800000800790:	48 83 ec 08          	sub    rsp,0x8
ffff800000800794:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800794 <default_int_proc+0xe>
ffff80000080079b:	49 bb 84 c0 11 00 00 	movabs r11,0x11c084
ffff8000008007a2:	00 00 00 
ffff8000008007a5:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:94
    asm("cli");
ffff8000008007a8:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:96
    //puts("default_int_proc");
    eoi();
ffff8000008007a9:	49 89 d7             	mov    r15,rdx
ffff8000008007ac:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008007b1:	48 b9 e6 b4 ee ff ff 	movabs rcx,0xffffffffffeeb4e6
ffff8000008007b8:	ff ff ff 
ffff8000008007bb:	48 01 d1             	add    rcx,rdx
ffff8000008007be:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:97
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff8000008007c0:	fb                   	sti    
ffff8000008007c1:	c9                   	leave  
ffff8000008007c2:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:98
}
ffff8000008007c4:	90                   	nop
ffff8000008007c5:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff8000008007c9:	c9                   	leave  
ffff8000008007ca:	c3                   	ret    

ffff8000008007cb <breakpoint>:
breakpoint():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:99
void breakpoint(){
ffff8000008007cb:	f3 0f 1e fa          	endbr64 
ffff8000008007cf:	55                   	push   rbp
ffff8000008007d0:	48 89 e5             	mov    rbp,rsp
ffff8000008007d3:	41 57                	push   r15
ffff8000008007d5:	48 83 ec 08          	sub    rsp,0x8
ffff8000008007d9:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff8000008007d9 <breakpoint+0xe>
ffff8000008007e0:	49 bb 3f c0 11 00 00 	movabs r11,0x11c03f
ffff8000008007e7:	00 00 00 
ffff8000008007ea:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:100
    asm("cli");
ffff8000008007ed:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:102
    //puts("breakpoint");
    eoi();
ffff8000008007ee:	49 89 d7             	mov    r15,rdx
ffff8000008007f1:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008007f6:	48 b9 e6 b4 ee ff ff 	movabs rcx,0xffffffffffeeb4e6
ffff8000008007fd:	ff ff ff 
ffff800000800800:	48 01 d1             	add    rcx,rdx
ffff800000800803:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:103
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800805:	fb                   	sti    
ffff800000800806:	c9                   	leave  
ffff800000800807:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:104
}
ffff800000800809:	90                   	nop
ffff80000080080a:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080080e:	c9                   	leave  
ffff80000080080f:	c3                   	ret    

ffff800000800810 <overflow>:
overflow():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:105
void overflow(){
ffff800000800810:	f3 0f 1e fa          	endbr64 
ffff800000800814:	55                   	push   rbp
ffff800000800815:	48 89 e5             	mov    rbp,rsp
ffff800000800818:	41 57                	push   r15
ffff80000080081a:	48 83 ec 08          	sub    rsp,0x8
ffff80000080081e:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080081e <overflow+0xe>
ffff800000800825:	49 bb fa bf 11 00 00 	movabs r11,0x11bffa
ffff80000080082c:	00 00 00 
ffff80000080082f:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:106
    asm("cli");
ffff800000800832:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:108
    //puts("overflow");
    eoi();
ffff800000800833:	49 89 d7             	mov    r15,rdx
ffff800000800836:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080083b:	48 b9 e6 b4 ee ff ff 	movabs rcx,0xffffffffffeeb4e6
ffff800000800842:	ff ff ff 
ffff800000800845:	48 01 d1             	add    rcx,rdx
ffff800000800848:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:109
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff80000080084a:	fb                   	sti    
ffff80000080084b:	c9                   	leave  
ffff80000080084c:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:110
}
ffff80000080084e:	90                   	nop
ffff80000080084f:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800853:	c9                   	leave  
ffff800000800854:	c3                   	ret    

ffff800000800855 <bounds>:
bounds():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:111
void bounds(){
ffff800000800855:	f3 0f 1e fa          	endbr64 
ffff800000800859:	55                   	push   rbp
ffff80000080085a:	48 89 e5             	mov    rbp,rsp
ffff80000080085d:	41 57                	push   r15
ffff80000080085f:	48 83 ec 08          	sub    rsp,0x8
ffff800000800863:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800863 <bounds+0xe>
ffff80000080086a:	49 bb b5 bf 11 00 00 	movabs r11,0x11bfb5
ffff800000800871:	00 00 00 
ffff800000800874:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:112
    asm("cli");
ffff800000800877:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:114
    //puts("bounds");
    eoi();
ffff800000800878:	49 89 d7             	mov    r15,rdx
ffff80000080087b:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800880:	48 b9 e6 b4 ee ff ff 	movabs rcx,0xffffffffffeeb4e6
ffff800000800887:	ff ff ff 
ffff80000080088a:	48 01 d1             	add    rcx,rdx
ffff80000080088d:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:115
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff80000080088f:	fb                   	sti    
ffff800000800890:	c9                   	leave  
ffff800000800891:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:116
}
ffff800000800893:	90                   	nop
ffff800000800894:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800898:	c9                   	leave  
ffff800000800899:	c3                   	ret    

ffff80000080089a <undefined_operator>:
undefined_operator():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:117
void undefined_operator(){
ffff80000080089a:	f3 0f 1e fa          	endbr64 
ffff80000080089e:	55                   	push   rbp
ffff80000080089f:	48 89 e5             	mov    rbp,rsp
ffff8000008008a2:	41 57                	push   r15
ffff8000008008a4:	53                   	push   rbx
ffff8000008008a5:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008008a5 <undefined_operator+0xb>
ffff8000008008ac:	49 bb 73 bf 11 00 00 	movabs r11,0x11bf73
ffff8000008008b3:	00 00 00 
ffff8000008008b6:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:119
    //puts("undef operator");
    eoi();
ffff8000008008b9:	49 89 df             	mov    r15,rbx
ffff8000008008bc:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008008c1:	48 ba e6 b4 ee ff ff 	movabs rdx,0xffffffffffeeb4e6
ffff8000008008c8:	ff ff ff 
ffff8000008008cb:	48 01 da             	add    rdx,rbx
ffff8000008008ce:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:120
    report_back_trace_of_err();
ffff8000008008d0:	49 89 df             	mov    r15,rbx
ffff8000008008d3:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008008d8:	48 ba 16 b5 ee ff ff 	movabs rdx,0xffffffffffeeb516
ffff8000008008df:	ff ff ff 
ffff8000008008e2:	48 01 da             	add    rdx,rbx
ffff8000008008e5:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:121
    __asm__ volatile ("jmp .\r\n leave \r\n iretq");
ffff8000008008e7:	eb fe                	jmp    ffff8000008008e7 <undefined_operator+0x4d>
ffff8000008008e9:	c9                   	leave  
ffff8000008008ea:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:122
}
ffff8000008008ec:	90                   	nop
ffff8000008008ed:	5b                   	pop    rbx
ffff8000008008ee:	41 5f                	pop    r15
ffff8000008008f0:	5d                   	pop    rbp
ffff8000008008f1:	c3                   	ret    

ffff8000008008f2 <coprocessor_notexist>:
coprocessor_notexist():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:123
void coprocessor_notexist(){
ffff8000008008f2:	f3 0f 1e fa          	endbr64 
ffff8000008008f6:	55                   	push   rbp
ffff8000008008f7:	48 89 e5             	mov    rbp,rsp
ffff8000008008fa:	41 57                	push   r15
ffff8000008008fc:	48 83 ec 08          	sub    rsp,0x8
ffff800000800900:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800900 <coprocessor_notexist+0xe>
ffff800000800907:	49 bb 18 bf 11 00 00 	movabs r11,0x11bf18
ffff80000080090e:	00 00 00 
ffff800000800911:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:124
    asm("cli");
ffff800000800914:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:126
    //puts("coprocessor doesnt exist");
    eoi();
ffff800000800915:	49 89 d7             	mov    r15,rdx
ffff800000800918:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080091d:	48 b9 e6 b4 ee ff ff 	movabs rcx,0xffffffffffeeb4e6
ffff800000800924:	ff ff ff 
ffff800000800927:	48 01 d1             	add    rcx,rdx
ffff80000080092a:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:127
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff80000080092c:	fb                   	sti    
ffff80000080092d:	c9                   	leave  
ffff80000080092e:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:128
}
ffff800000800930:	90                   	nop
ffff800000800931:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800935:	c9                   	leave  
ffff800000800936:	c3                   	ret    

ffff800000800937 <double_ints>:
double_ints():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:129
void double_ints(){
ffff800000800937:	f3 0f 1e fa          	endbr64 
ffff80000080093b:	55                   	push   rbp
ffff80000080093c:	48 89 e5             	mov    rbp,rsp
ffff80000080093f:	41 57                	push   r15
ffff800000800941:	48 83 ec 08          	sub    rsp,0x8
ffff800000800945:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800945 <double_ints+0xe>
ffff80000080094c:	49 bb d3 be 11 00 00 	movabs r11,0x11bed3
ffff800000800953:	00 00 00 
ffff800000800956:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:130
    asm("cli");
ffff800000800959:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:132
    //puts("double interrupts");
    eoi();
ffff80000080095a:	49 89 d7             	mov    r15,rdx
ffff80000080095d:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800962:	48 b9 e6 b4 ee ff ff 	movabs rcx,0xffffffffffeeb4e6
ffff800000800969:	ff ff ff 
ffff80000080096c:	48 01 d1             	add    rcx,rdx
ffff80000080096f:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:133
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800971:	fb                   	sti    
ffff800000800972:	c9                   	leave  
ffff800000800973:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:134
}
ffff800000800975:	90                   	nop
ffff800000800976:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080097a:	c9                   	leave  
ffff80000080097b:	c3                   	ret    

ffff80000080097c <coprocessor_seg_overbound>:
coprocessor_seg_overbound():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:135
void coprocessor_seg_overbound(){
ffff80000080097c:	f3 0f 1e fa          	endbr64 
ffff800000800980:	55                   	push   rbp
ffff800000800981:	48 89 e5             	mov    rbp,rsp
ffff800000800984:	41 57                	push   r15
ffff800000800986:	48 83 ec 08          	sub    rsp,0x8
ffff80000080098a:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080098a <coprocessor_seg_overbound+0xe>
ffff800000800991:	49 bb 8e be 11 00 00 	movabs r11,0x11be8e
ffff800000800998:	00 00 00 
ffff80000080099b:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:137
    //puts("coprocessfor seg overdound");
    eoi();
ffff80000080099e:	49 89 d7             	mov    r15,rdx
ffff8000008009a1:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008009a6:	48 b9 e6 b4 ee ff ff 	movabs rcx,0xffffffffffeeb4e6
ffff8000008009ad:	ff ff ff 
ffff8000008009b0:	48 01 d1             	add    rcx,rdx
ffff8000008009b3:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:138
    __asm__ volatile ("leave \r\n iretq");
ffff8000008009b5:	c9                   	leave  
ffff8000008009b6:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:139
}
ffff8000008009b8:	90                   	nop
ffff8000008009b9:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff8000008009bd:	c9                   	leave  
ffff8000008009be:	c3                   	ret    

ffff8000008009bf <invalid_tss>:
invalid_tss():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:140
void invalid_tss(){
ffff8000008009bf:	f3 0f 1e fa          	endbr64 
ffff8000008009c3:	55                   	push   rbp
ffff8000008009c4:	48 89 e5             	mov    rbp,rsp
ffff8000008009c7:	41 57                	push   r15
ffff8000008009c9:	48 83 ec 08          	sub    rsp,0x8
ffff8000008009cd:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff8000008009cd <invalid_tss+0xe>
ffff8000008009d4:	49 bb 4b be 11 00 00 	movabs r11,0x11be4b
ffff8000008009db:	00 00 00 
ffff8000008009de:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:141
    asm("cli");
ffff8000008009e1:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:143
    //puts("invalid tss");
    eoi();
ffff8000008009e2:	49 89 d7             	mov    r15,rdx
ffff8000008009e5:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008009ea:	48 b9 e6 b4 ee ff ff 	movabs rcx,0xffffffffffeeb4e6
ffff8000008009f1:	ff ff ff 
ffff8000008009f4:	48 01 d1             	add    rcx,rdx
ffff8000008009f7:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:144
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff8000008009f9:	fb                   	sti    
ffff8000008009fa:	c9                   	leave  
ffff8000008009fb:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:145
}
ffff8000008009fd:	90                   	nop
ffff8000008009fe:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800a02:	c9                   	leave  
ffff800000800a03:	c3                   	ret    

ffff800000800a04 <segment_notexist>:
segment_notexist():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:146
void segment_notexist(){
ffff800000800a04:	f3 0f 1e fa          	endbr64 
ffff800000800a08:	55                   	push   rbp
ffff800000800a09:	48 89 e5             	mov    rbp,rsp
ffff800000800a0c:	41 57                	push   r15
ffff800000800a0e:	48 83 ec 08          	sub    rsp,0x8
ffff800000800a12:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800a12 <segment_notexist+0xe>
ffff800000800a19:	49 bb 06 be 11 00 00 	movabs r11,0x11be06
ffff800000800a20:	00 00 00 
ffff800000800a23:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:147
    asm("cli");
ffff800000800a26:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:149
    //puts("seg nonexistent");
    eoi();
ffff800000800a27:	49 89 d7             	mov    r15,rdx
ffff800000800a2a:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800a2f:	48 b9 e6 b4 ee ff ff 	movabs rcx,0xffffffffffeeb4e6
ffff800000800a36:	ff ff ff 
ffff800000800a39:	48 01 d1             	add    rcx,rdx
ffff800000800a3c:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:150
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800a3e:	fb                   	sti    
ffff800000800a3f:	c9                   	leave  
ffff800000800a40:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:151
}
ffff800000800a42:	90                   	nop
ffff800000800a43:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800a47:	c9                   	leave  
ffff800000800a48:	c3                   	ret    

ffff800000800a49 <stackseg_overbound>:
stackseg_overbound():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:152
void stackseg_overbound(){
ffff800000800a49:	f3 0f 1e fa          	endbr64 
ffff800000800a4d:	55                   	push   rbp
ffff800000800a4e:	48 89 e5             	mov    rbp,rsp
ffff800000800a51:	41 57                	push   r15
ffff800000800a53:	48 83 ec 08          	sub    rsp,0x8
ffff800000800a57:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800a57 <stackseg_overbound+0xe>
ffff800000800a5e:	49 bb c1 bd 11 00 00 	movabs r11,0x11bdc1
ffff800000800a65:	00 00 00 
ffff800000800a68:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:153
    asm("cli");
ffff800000800a6b:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:155
    //puts("stack seg overbound");
    eoi();
ffff800000800a6c:	49 89 d7             	mov    r15,rdx
ffff800000800a6f:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800a74:	48 b9 e6 b4 ee ff ff 	movabs rcx,0xffffffffffeeb4e6
ffff800000800a7b:	ff ff ff 
ffff800000800a7e:	48 01 d1             	add    rcx,rdx
ffff800000800a81:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:156
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800a83:	fb                   	sti    
ffff800000800a84:	c9                   	leave  
ffff800000800a85:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:157
}
ffff800000800a87:	90                   	nop
ffff800000800a88:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800a8c:	c9                   	leave  
ffff800000800a8d:	c3                   	ret    

ffff800000800a8e <general_protect>:
general_protect():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:158
void general_protect(){
ffff800000800a8e:	f3 0f 1e fa          	endbr64 
ffff800000800a92:	55                   	push   rbp
ffff800000800a93:	48 89 e5             	mov    rbp,rsp
ffff800000800a96:	41 57                	push   r15
ffff800000800a98:	48 83 ec 18          	sub    rsp,0x18
ffff800000800a9c:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800a9c <general_protect+0xe>
ffff800000800aa3:	49 bb 7c bd 11 00 00 	movabs r11,0x11bd7c
ffff800000800aaa:	00 00 00 
ffff800000800aad:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:160
    //print("general protect.");
    int err_code=0;
ffff800000800ab0:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:178
    //杀死问题进程
    del_proc(cur_proc);
    printf("killed the problem process.\n");
	printf("shell:>");
    switch_proc_tss(0); */
    eoi();
ffff800000800ab7:	49 89 d7             	mov    r15,rdx
ffff800000800aba:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800abf:	48 b9 e6 b4 ee ff ff 	movabs rcx,0xffffffffffeeb4e6
ffff800000800ac6:	ff ff ff 
ffff800000800ac9:	48 01 d1             	add    rcx,rdx
ffff800000800acc:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:179
    __asm__ volatile ("leave\r\n add $8,%rsp \r\n iretq");
ffff800000800ace:	c9                   	leave  
ffff800000800acf:	48 83 c4 08          	add    rsp,0x8
ffff800000800ad3:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:180
}
ffff800000800ad5:	90                   	nop
ffff800000800ad6:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800ada:	c9                   	leave  
ffff800000800adb:	c3                   	ret    

ffff800000800adc <coprocessor_err>:
coprocessor_err():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:182

void coprocessor_err(){
ffff800000800adc:	f3 0f 1e fa          	endbr64 
ffff800000800ae0:	55                   	push   rbp
ffff800000800ae1:	48 89 e5             	mov    rbp,rsp
ffff800000800ae4:	41 57                	push   r15
ffff800000800ae6:	48 83 ec 08          	sub    rsp,0x8
ffff800000800aea:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800aea <coprocessor_err+0xe>
ffff800000800af1:	49 bb 2e bd 11 00 00 	movabs r11,0x11bd2e
ffff800000800af8:	00 00 00 
ffff800000800afb:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:183
    asm("cli");
ffff800000800afe:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:185
    //puts("coprocessor err");
    eoi();
ffff800000800aff:	49 89 d7             	mov    r15,rdx
ffff800000800b02:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800b07:	48 b9 e6 b4 ee ff ff 	movabs rcx,0xffffffffffeeb4e6
ffff800000800b0e:	ff ff ff 
ffff800000800b11:	48 01 d1             	add    rcx,rdx
ffff800000800b14:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:186
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800b16:	fb                   	sti    
ffff800000800b17:	c9                   	leave  
ffff800000800b18:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:187
}
ffff800000800b1a:	90                   	nop
ffff800000800b1b:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800b1f:	c9                   	leave  
ffff800000800b20:	c3                   	ret    

ffff800000800b21 <syscall>:
syscall():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:206

xchg rcx to r10

*/
int syscall(long a, long b, long c, long d, long e, long f)
{
ffff800000800b21:	f3 0f 1e fa          	endbr64 
ffff800000800b25:	55                   	push   rbp
ffff800000800b26:	48 89 e5             	mov    rbp,rsp
ffff800000800b29:	41 57                	push   r15
ffff800000800b2b:	53                   	push   rbx
ffff800000800b2c:	48 83 ec 40          	sub    rsp,0x40
ffff800000800b30:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000800b30 <syscall+0xf>
ffff800000800b37:	49 bb e8 bc 11 00 00 	movabs r11,0x11bce8
ffff800000800b3e:	00 00 00 
ffff800000800b41:	4c 01 db             	add    rbx,r11
ffff800000800b44:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000800b48:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffff800000800b4c:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
ffff800000800b50:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
ffff800000800b54:	4c 89 45 b8          	mov    QWORD PTR [rbp-0x48],r8
ffff800000800b58:	4c 89 4d b0          	mov    QWORD PTR [rbp-0x50],r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:208
    unsigned long num;
    asm volatile("":"=a"(num));//这样rax中存的参数就到这了
ffff800000800b5c:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:209
    switch (num)
ffff800000800b60:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000800b64:	48 83 e8 05          	sub    rax,0x5
ffff800000800b68:	48 83 f8 5f          	cmp    rax,0x5f
ffff800000800b6c:	0f 87 a7 02 00 00    	ja     ffff800000800e19 <syscall+0x2f8>
ffff800000800b72:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000800b79:	00 
ffff800000800b7a:	48 8d 05 7f 90 11 00 	lea    rax,[rip+0x11907f]        # ffff800000919c00 <filesystem+0x20>
ffff800000800b81:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000800b85:	48 8d 15 74 90 11 00 	lea    rdx,[rip+0x119074]        # ffff800000919c00 <filesystem+0x20>
ffff800000800b8c:	48 01 d0             	add    rax,rdx
ffff800000800b8f:	3e ff e0             	notrack jmp rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:216
        // case 0:return reg_device(a);
        // case 1:return dispose_device(a);
        // case 2:return reg_driver(a);
        // case 3:return dispose_driver(a);
        // case 4:return call_drv_func(a,b,c);
        case 5:return req_page_at(a,b);
ffff800000800b92:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800b96:	89 c2                	mov    edx,eax
ffff800000800b98:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800b9c:	89 d6                	mov    esi,edx
ffff800000800b9e:	48 89 c7             	mov    rdi,rax
ffff800000800ba1:	49 89 df             	mov    r15,rbx
ffff800000800ba4:	48 b8 72 67 ee ff ff 	movabs rax,0xffffffffffee6772
ffff800000800bab:	ff ff ff 
ffff800000800bae:	48 01 d8             	add    rax,rbx
ffff800000800bb1:	ff d0                	call   rax
ffff800000800bb3:	e9 61 02 00 00       	jmp    ffff800000800e19 <syscall+0x2f8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:217
        case 6:return free_page(a);
ffff800000800bb8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800bbc:	48 89 c7             	mov    rdi,rax
ffff800000800bbf:	49 89 df             	mov    r15,rbx
ffff800000800bc2:	48 b8 66 64 ee ff ff 	movabs rax,0xffffffffffee6466
ffff800000800bc9:	ff ff ff 
ffff800000800bcc:	48 01 d8             	add    rax,rbx
ffff800000800bcf:	ff d0                	call   rax
ffff800000800bd1:	e9 43 02 00 00       	jmp    ffff800000800e19 <syscall+0x2f8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:218
        case 7:return reg_proc(a, b, c);
ffff800000800bd6:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000800bda:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffff800000800bde:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800be2:	48 89 ce             	mov    rsi,rcx
ffff800000800be5:	48 89 c7             	mov    rdi,rax
ffff800000800be8:	49 89 df             	mov    r15,rbx
ffff800000800beb:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800bf0:	48 b9 cb 93 ee ff ff 	movabs rcx,0xffffffffffee93cb
ffff800000800bf7:	ff ff ff 
ffff800000800bfa:	48 01 d9             	add    rcx,rbx
ffff800000800bfd:	ff d1                	call   rcx
ffff800000800bff:	e9 15 02 00 00       	jmp    ffff800000800e19 <syscall+0x2f8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:219
        case 8:del_proc(a);
ffff800000800c04:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800c08:	89 c7                	mov    edi,eax
ffff800000800c0a:	49 89 df             	mov    r15,rbx
ffff800000800c0d:	48 b8 7c 90 ee ff ff 	movabs rax,0xffffffffffee907c
ffff800000800c14:	ff ff ff 
ffff800000800c17:	48 01 d8             	add    rax,rbx
ffff800000800c1a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:220
        case 10:chk_vm(a,b);
ffff800000800c1c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800c20:	89 c2                	mov    edx,eax
ffff800000800c22:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800c26:	89 d6                	mov    esi,edx
ffff800000800c28:	89 c7                	mov    edi,eax
ffff800000800c2a:	49 89 df             	mov    r15,rbx
ffff800000800c2d:	48 b8 a4 68 ee ff ff 	movabs rax,0xffffffffffee68a4
ffff800000800c34:	ff ff ff 
ffff800000800c37:	48 01 d8             	add    rax,rbx
ffff800000800c3a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:221
        case 11:return sys_open(a,b);
ffff800000800c3c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800c40:	89 c2                	mov    edx,eax
ffff800000800c42:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800c46:	89 d6                	mov    esi,edx
ffff800000800c48:	48 89 c7             	mov    rdi,rax
ffff800000800c4b:	49 89 df             	mov    r15,rbx
ffff800000800c4e:	48 b8 53 e1 ee ff ff 	movabs rax,0xffffffffffeee153
ffff800000800c55:	ff ff ff 
ffff800000800c58:	48 01 d8             	add    rax,rbx
ffff800000800c5b:	ff d0                	call   rax
ffff800000800c5d:	e9 b7 01 00 00       	jmp    ffff800000800e19 <syscall+0x2f8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:222
        case 12:return sys_close(a);
ffff800000800c62:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800c66:	89 c7                	mov    edi,eax
ffff800000800c68:	49 89 df             	mov    r15,rbx
ffff800000800c6b:	48 b8 f3 e7 ee ff ff 	movabs rax,0xffffffffffeee7f3
ffff800000800c72:	ff ff ff 
ffff800000800c75:	48 01 d8             	add    rax,rbx
ffff800000800c78:	ff d0                	call   rax
ffff800000800c7a:	e9 9a 01 00 00       	jmp    ffff800000800e19 <syscall+0x2f8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:223
        case 13:return sys_read(a,b,c);
ffff800000800c7f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800c83:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000800c87:	89 d1                	mov    ecx,edx
ffff800000800c89:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000800c8d:	48 89 c6             	mov    rsi,rax
ffff800000800c90:	89 cf                	mov    edi,ecx
ffff800000800c92:	49 89 df             	mov    r15,rbx
ffff800000800c95:	48 b8 ea e8 ee ff ff 	movabs rax,0xffffffffffeee8ea
ffff800000800c9c:	ff ff ff 
ffff800000800c9f:	48 01 d8             	add    rax,rbx
ffff800000800ca2:	ff d0                	call   rax
ffff800000800ca4:	e9 70 01 00 00       	jmp    ffff800000800e19 <syscall+0x2f8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:224
        case 14:return sys_write(a,b,c);
ffff800000800ca9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800cad:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000800cb1:	89 d1                	mov    ecx,edx
ffff800000800cb3:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000800cb7:	48 89 c6             	mov    rsi,rax
ffff800000800cba:	89 cf                	mov    edi,ecx
ffff800000800cbc:	49 89 df             	mov    r15,rbx
ffff800000800cbf:	48 b8 b8 e9 ee ff ff 	movabs rax,0xffffffffffeee9b8
ffff800000800cc6:	ff ff ff 
ffff800000800cc9:	48 01 d8             	add    rax,rbx
ffff800000800ccc:	ff d0                	call   rax
ffff800000800cce:	e9 46 01 00 00       	jmp    ffff800000800e19 <syscall+0x2f8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:225
        case 15:return sys_lseek(a,b,c);
ffff800000800cd3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000800cd7:	89 c2                	mov    edx,eax
ffff800000800cd9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800cdd:	89 c1                	mov    ecx,eax
ffff800000800cdf:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800ce3:	48 89 c6             	mov    rsi,rax
ffff800000800ce6:	89 cf                	mov    edi,ecx
ffff800000800ce8:	49 89 df             	mov    r15,rbx
ffff800000800ceb:	48 b8 86 ea ee ff ff 	movabs rax,0xffffffffffeeea86
ffff800000800cf2:	ff ff ff 
ffff800000800cf5:	48 01 d8             	add    rax,rbx
ffff800000800cf8:	ff d0                	call   rax
ffff800000800cfa:	e9 1a 01 00 00       	jmp    ffff800000800e19 <syscall+0x2f8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:229
        // case 16:return sys_tell(a);
        // case 17:return reg_vol(a,b,c);
        // case 18:return free_vol(a);
        case 19:return execute(a, NULL);
ffff800000800cff:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800d03:	be 00 00 00 00       	mov    esi,0x0
ffff800000800d08:	48 89 c7             	mov    rdi,rax
ffff800000800d0b:	49 89 df             	mov    r15,rbx
ffff800000800d0e:	48 b8 5c b8 ee ff ff 	movabs rax,0xffffffffffeeb85c
ffff800000800d15:	ff ff ff 
ffff800000800d18:	48 01 d8             	add    rax,rbx
ffff800000800d1b:	ff d0                	call   rax
ffff800000800d1d:	e9 f7 00 00 00       	jmp    ffff800000800e19 <syscall+0x2f8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:230
        case SYSCALL_EXIT:return sys_exit(a);
ffff800000800d22:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800d26:	89 c7                	mov    edi,eax
ffff800000800d28:	49 89 df             	mov    r15,rbx
ffff800000800d2b:	48 b8 51 93 ee ff ff 	movabs rax,0xffffffffffee9351
ffff800000800d32:	ff ff ff 
ffff800000800d35:	48 01 d8             	add    rax,rbx
ffff800000800d38:	ff d0                	call   rax
ffff800000800d3a:	e9 da 00 00 00       	jmp    ffff800000800e19 <syscall+0x2f8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:231
        case SYSCALL_CALL:return exec_call(a);
ffff800000800d3f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800d43:	48 89 c7             	mov    rdi,rax
ffff800000800d46:	49 89 df             	mov    r15,rbx
ffff800000800d49:	48 b8 b9 bb ee ff ff 	movabs rax,0xffffffffffeebbb9
ffff800000800d50:	ff ff ff 
ffff800000800d53:	48 01 d8             	add    rax,rbx
ffff800000800d56:	ff d0                	call   rax
ffff800000800d58:	e9 bc 00 00 00       	jmp    ffff800000800e19 <syscall+0x2f8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:233
        // case SYSCALL_MKFIFO:return sys_mkfifo(a);
        case SYSCALL_MALLOC:return sys_malloc(a);
ffff800000800d5d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800d61:	89 c7                	mov    edi,eax
ffff800000800d63:	49 89 df             	mov    r15,rbx
ffff800000800d66:	48 b8 af 96 ee ff ff 	movabs rax,0xffffffffffee96af
ffff800000800d6d:	ff ff ff 
ffff800000800d70:	48 01 d8             	add    rax,rbx
ffff800000800d73:	ff d0                	call   rax
ffff800000800d75:	e9 9f 00 00 00       	jmp    ffff800000800e19 <syscall+0x2f8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:234
        case SYSCALL_FREE:return sys_free(a);
ffff800000800d7a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800d7e:	89 c7                	mov    edi,eax
ffff800000800d80:	49 89 df             	mov    r15,rbx
ffff800000800d83:	48 b8 ac 98 ee ff ff 	movabs rax,0xffffffffffee98ac
ffff800000800d8a:	ff ff ff 
ffff800000800d8d:	48 01 d8             	add    rax,rbx
ffff800000800d90:	ff d0                	call   rax
ffff800000800d92:	e9 82 00 00 00       	jmp    ffff800000800e19 <syscall+0x2f8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:235
        case SYSCALL_KB_READC:return sys_analyse_key();
ffff800000800d97:	49 89 df             	mov    r15,rbx
ffff800000800d9a:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800d9f:	48 ba 07 0b ef ff ff 	movabs rdx,0xffffffffffef0b07
ffff800000800da6:	ff ff ff 
ffff800000800da9:	48 01 da             	add    rdx,rbx
ffff800000800dac:	ff d2                	call   rdx
ffff800000800dae:	0f be c0             	movsx  eax,al
ffff800000800db1:	eb 66                	jmp    ffff800000800e19 <syscall+0x2f8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:237
        // case SYSCALL_FIND_DEV:return sys_find_dev(a);
        case SYSCALL_FORK:return sys_fork();
ffff800000800db3:	49 89 df             	mov    r15,rbx
ffff800000800db6:	48 b8 d3 9c ee ff ff 	movabs rax,0xffffffffffee9cd3
ffff800000800dbd:	ff ff ff 
ffff800000800dc0:	48 01 d8             	add    rax,rbx
ffff800000800dc3:	ff d0                	call   rax
ffff800000800dc5:	eb 52                	jmp    ffff800000800e19 <syscall+0x2f8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:238
        case SYSCALL_EXECVE:return sys_execve(a, b, c);
ffff800000800dc7:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000800dcb:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800dcf:	89 c1                	mov    ecx,eax
ffff800000800dd1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800dd5:	89 ce                	mov    esi,ecx
ffff800000800dd7:	48 89 c7             	mov    rdi,rax
ffff800000800dda:	49 89 df             	mov    r15,rbx
ffff800000800ddd:	48 b8 50 b9 ee ff ff 	movabs rax,0xffffffffffeeb950
ffff800000800de4:	ff ff ff 
ffff800000800de7:	48 01 d8             	add    rax,rbx
ffff800000800dea:	ff d0                	call   rax
ffff800000800dec:	eb 2b                	jmp    ffff800000800e19 <syscall+0x2f8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:240
        // case SYSCALL_OPERATE_DEV:return sys_operate_dev(a,b,c);
        case SYSCALL_WAIT:return sys_wait(a,b,c);
ffff800000800dee:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000800df2:	89 c6                	mov    esi,eax
ffff800000800df4:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800df8:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000800dfc:	89 d1                	mov    ecx,edx
ffff800000800dfe:	89 f2                	mov    edx,esi
ffff800000800e00:	48 89 c6             	mov    rsi,rax
ffff800000800e03:	89 cf                	mov    edi,ecx
ffff800000800e05:	49 89 df             	mov    r15,rbx
ffff800000800e08:	48 b8 cf eb ee ff ff 	movabs rax,0xffffffffffeeebcf
ffff800000800e0f:	ff ff ff 
ffff800000800e12:	48 01 d8             	add    rax,rbx
ffff800000800e15:	ff d0                	call   rax
ffff800000800e17:	eb 00                	jmp    ffff800000800e19 <syscall+0x2f8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:246
    }
    // __asm__ volatile("mov %0,%%eax\r\n mov %1,%%ebx\r\n mov %2,%%ecx\r\n mov %3,%%edx\r\n mov %4,%%esi\r\n mov %5,%%edi"\
    // ::"m"(func),"m"(a),"m"(b),"m"(c),"m"(d),"m"(e));
    // __asm__ volatile("int $0x80\r\n leave\r\n ret");

}
ffff800000800e19:	48 83 c4 40          	add    rsp,0x40
ffff800000800e1d:	5b                   	pop    rbx
ffff800000800e1e:	41 5f                	pop    r15
ffff800000800e20:	5d                   	pop    rbp
ffff800000800e21:	c3                   	ret    

ffff800000800e22 <wrmsr>:
wrmsr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:248
void wrmsr(unsigned long address,unsigned long value)
{
ffff800000800e22:	f3 0f 1e fa          	endbr64 
ffff800000800e26:	55                   	push   rbp
ffff800000800e27:	48 89 e5             	mov    rbp,rsp
ffff800000800e2a:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000800e2a <wrmsr+0x8>
ffff800000800e31:	49 bb ee b9 11 00 00 	movabs r11,0x11b9ee
ffff800000800e38:	00 00 00 
ffff800000800e3b:	4c 01 d8             	add    rax,r11
ffff800000800e3e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000800e42:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:249
    __asm__ __volatile__	("wrmsr	\n\t"::"d"(value >> 32),"a"(value & 0xffffffff),"c"(address):"memory");
ffff800000800e46:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000800e4a:	48 c1 e8 20          	shr    rax,0x20
ffff800000800e4e:	48 89 c2             	mov    rdx,rax
ffff800000800e51:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000800e55:	89 c0                	mov    eax,eax
ffff800000800e57:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
ffff800000800e5b:	0f 30                	wrmsr  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:250
ffff800000800e5d:	90                   	nop
ffff800000800e5e:	5d                   	pop    rbp
ffff800000800e5f:	c3                   	ret    

ffff800000800e60 <main>:
main():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:24
#include "ramdisk.h"
#include "ramfs.h"

int manage_proc_lock=1;
void main(unsigned int magic,void* addr)
{
ffff800000800e60:	f3 0f 1e fa          	endbr64 
ffff800000800e64:	55                   	push   rbp
ffff800000800e65:	48 89 e5             	mov    rbp,rsp
ffff800000800e68:	41 57                	push   r15
ffff800000800e6a:	53                   	push   rbx
ffff800000800e6b:	48 81 ec 00 01 00 00 	sub    rsp,0x100
ffff800000800e72:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000800e72 <main+0x12>
ffff800000800e79:	49 bb a6 b9 11 00 00 	movabs r11,0x11b9a6
ffff800000800e80:	00 00 00 
ffff800000800e83:	4c 01 db             	add    rbx,r11
ffff800000800e86:	89 bd fc fe ff ff    	mov    DWORD PTR [rbp-0x104],edi
ffff800000800e8c:	48 89 b5 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:26

    struct multiboot_header* mbi=0ul;
ffff800000800e93:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff800000800e9a:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:27
    mbi=(struct multiboot_header*)addr;
ffff800000800e9b:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff800000800ea2:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:28
    init_logging();
ffff800000800ea6:	49 89 df             	mov    r15,rbx
ffff800000800ea9:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800eae:	48 ba c9 4c ee ff ff 	movabs rdx,0xffffffffffee4cc9
ffff800000800eb5:	ff ff ff 
ffff800000800eb8:	48 01 da             	add    rdx,rbx
ffff800000800ebb:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:38
    }
    //获取tags
    struct multiboot_tag *tag;

    //先初始化串口，保证输出最基本的调试信息
    init_com(PORT_COM1);
ffff800000800ebd:	bf f8 03 00 00       	mov    edi,0x3f8
ffff800000800ec2:	49 89 df             	mov    r15,rbx
ffff800000800ec5:	48 b8 ef 4b ef ff ff 	movabs rax,0xffffffffffef4bef
ffff800000800ecc:	ff ff ff 
ffff800000800ecf:	48 01 d8             	add    rax,rbx
ffff800000800ed2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:39
    comprintf("\rgamessis os loaded.\r\n");
ffff800000800ed4:	48 b8 e8 d6 ff ff ff 	movabs rax,0xffffffffffffd6e8
ffff800000800edb:	ff ff ff 
ffff800000800ede:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000800ee2:	48 89 c7             	mov    rdi,rax
ffff800000800ee5:	49 89 df             	mov    r15,rbx
ffff800000800ee8:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800eed:	48 ba 1b 4e ef ff ff 	movabs rdx,0xffffffffffef4e1b
ffff800000800ef4:	ff ff ff 
ffff800000800ef7:	48 01 da             	add    rdx,rbx
ffff800000800efa:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:41
	unsigned size;
    size = *(unsigned long*)addr;
ffff800000800efc:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff800000800f03:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000800f06:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:43
//    //printf("Announced mbi size 0x%x\n", size);
	for (tag = (struct multiboot_tag *)(addr + 8);
ffff800000800f09:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff800000800f10:	48 83 c0 08          	add    rax,0x8
ffff800000800f14:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff800000800f18:	e9 93 02 00 00       	jmp    ffff8000008011b0 <main+0x350>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:48
		 tag->type != MULTIBOOT_TAG_TYPE_END;
		 tag = (struct multiboot_tag *)((u8 *)tag + ((tag->size + 7) & ~7)))
	{
		//printf("Tag 0x%x, Size 0x%x\n", tag->type, tag->size);
		switch (tag->type)
ffff800000800f1d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000800f21:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000800f23:	83 f8 08             	cmp    eax,0x8
ffff800000800f26:	0f 87 71 02 00 00    	ja     ffff80000080119d <main+0x33d>
ffff800000800f2c:	89 c0                	mov    eax,eax
ffff800000800f2e:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000800f35:	00 
ffff800000800f36:	48 8d 05 23 90 11 00 	lea    rax,[rip+0x119023]        # ffff800000919f60 <.LC4+0x11>
ffff800000800f3d:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000800f41:	48 8d 15 18 90 11 00 	lea    rdx,[rip+0x119018]        # ffff800000919f60 <.LC4+0x11>
ffff800000800f48:	48 01 d0             	add    rax,rdx
ffff800000800f4b:	3e ff e0             	notrack jmp rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:66
			break;
		case MULTIBOOT_TAG_TYPE_BASIC_MEMINFO:
			//printf("mem_lower = %uKB, mem_upper = %uKB\n",
//				   ((struct multiboot_tag_basic_meminfo *)tag)->mem_lower,
//				   ((struct multiboot_tag_basic_meminfo *)tag)->mem_upper);
			set_high_mem_base(((struct multiboot_tag_basic_meminfo *)tag)->mem_lower);
ffff800000800f4e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000800f52:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000800f55:	89 c7                	mov    edi,eax
ffff800000800f57:	49 89 df             	mov    r15,rbx
ffff800000800f5a:	48 b8 02 56 ee ff ff 	movabs rax,0xffffffffffee5602
ffff800000800f61:	ff ff ff 
ffff800000800f64:	48 01 d8             	add    rax,rbx
ffff800000800f67:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:67
			break;
ffff800000800f69:	e9 2f 02 00 00       	jmp    ffff80000080119d <main+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:80

			break;
		case MULTIBOOT_TAG_TYPE_MMAP:
		{
			//printf("mmap\n");
            for (multiboot_memory_map_t * mmap = ((struct multiboot_tag_mmap *)tag)->entries;
ffff800000800f6e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000800f72:	48 83 c0 10          	add    rax,0x10
ffff800000800f76:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffff800000800f7a:	eb 44                	jmp    ffff800000800fc0 <main+0x160>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:84
                    (multiboot_uint8_t *)mmap < (multiboot_uint8_t *)tag + tag->size;
                    mmap = (multiboot_memory_map_t *)((unsigned long)mmap + ((struct multiboot_tag_mmap *)tag)->entry_size))
            {
                set_mem_area(mmap->addr,mmap->len,mmap->type);
ffff800000800f7c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000800f80:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff800000800f83:	89 c2                	mov    edx,eax
ffff800000800f85:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000800f89:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
ffff800000800f8d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000800f91:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000800f94:	48 89 ce             	mov    rsi,rcx
ffff800000800f97:	48 89 c7             	mov    rdi,rax
ffff800000800f9a:	49 89 df             	mov    r15,rbx
ffff800000800f9d:	48 b8 37 56 ee ff ff 	movabs rax,0xffffffffffee5637
ffff800000800fa4:	ff ff ff 
ffff800000800fa7:	48 01 d8             	add    rax,rbx
ffff800000800faa:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:82
                    mmap = (multiboot_memory_map_t *)((unsigned long)mmap + ((struct multiboot_tag_mmap *)tag)->entry_size))
ffff800000800fac:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000800fb0:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000800fb3:	89 c2                	mov    edx,eax
ffff800000800fb5:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000800fb9:	48 01 d0             	add    rax,rdx
ffff800000800fbc:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:81
                    (multiboot_uint8_t *)mmap < (multiboot_uint8_t *)tag + tag->size;
ffff800000800fc0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000800fc4:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff800000800fc7:	89 c2                	mov    edx,eax
ffff800000800fc9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000800fcd:	48 01 d0             	add    rax,rdx
ffff800000800fd0:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
ffff800000800fd4:	72 a6                	jb     ffff800000800f7c <main+0x11c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:88
            }

		}
		break;
ffff800000800fd6:	e9 c2 01 00 00       	jmp    ffff80000080119d <main+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:93
		case MULTIBOOT_TAG_TYPE_FRAMEBUFFER:
		{
			multiboot_uint32_t color;
			unsigned i;
			struct multiboot_tag_framebuffer *tagfb = (struct multiboot_tag_framebuffer *)tag;
ffff800000800fdb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000800fdf:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:94
			void *fb = (void *) FRAMEBUFFER_ADDR;
ffff800000800fe3:	48 b8 00 00 00 40 00 	movabs rax,0xffff800040000000
ffff800000800fea:	80 ff ff 
ffff800000800fed:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:95
			set_framebuffer(*tagfb);
ffff800000800ff1:	48 83 ec 08          	sub    rsp,0x8
ffff800000800ff5:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000800ff9:	ff 70 20             	push   QWORD PTR [rax+0x20]
ffff800000800ffc:	ff 70 18             	push   QWORD PTR [rax+0x18]
ffff800000800fff:	ff 70 10             	push   QWORD PTR [rax+0x10]
ffff800000801002:	ff 70 08             	push   QWORD PTR [rax+0x8]
ffff800000801005:	ff 30                	push   QWORD PTR [rax]
ffff800000801007:	49 89 df             	mov    r15,rbx
ffff80000080100a:	48 b8 72 ce ee ff ff 	movabs rax,0xffffffffffeece72
ffff800000801011:	ff ff ff 
ffff800000801014:	48 01 d8             	add    rax,rbx
ffff800000801017:	ff d0                	call   rax
ffff800000801019:	48 83 c4 30          	add    rsp,0x30
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:97

			switch (tagfb->common.framebuffer_type)
ffff80000080101d:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801021:	0f b6 40 1d          	movzx  eax,BYTE PTR [rax+0x1d]
ffff800000801025:	0f b6 c0             	movzx  eax,al
ffff800000801028:	83 f8 02             	cmp    eax,0x2
ffff80000080102b:	0f 84 5a 01 00 00    	je     ffff80000080118b <main+0x32b>
ffff800000801031:	83 f8 02             	cmp    eax,0x2
ffff800000801034:	0f 8f 5a 01 00 00    	jg     ffff800000801194 <main+0x334>
ffff80000080103a:	85 c0                	test   eax,eax
ffff80000080103c:	74 0e                	je     ffff80000080104c <main+0x1ec>
ffff80000080103e:	83 f8 01             	cmp    eax,0x1
ffff800000801041:	0f 84 15 01 00 00    	je     ffff80000080115c <main+0x2fc>
ffff800000801047:	e9 48 01 00 00       	jmp    ffff800000801194 <main+0x334>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:104
			case MULTIBOOT_FRAMEBUFFER_TYPE_INDEXED:
			{
				unsigned best_distance, distance;
				struct multiboot_color *palette;

				palette = tagfb->framebuffer_palette;
ffff80000080104c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801050:	48 83 c0 22          	add    rax,0x22
ffff800000801054:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:106

				color = 0;
ffff800000801058:	c7 45 b4 00 00 00 00 	mov    DWORD PTR [rbp-0x4c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:107
				best_distance = 4 * 256 * 256;
ffff80000080105f:	c7 45 d8 00 00 04 00 	mov    DWORD PTR [rbp-0x28],0x40000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:109

				for (i = 0; i < tagfb->framebuffer_palette_num_colors; i++)
ffff800000801066:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
ffff80000080106d:	e9 d4 00 00 00       	jmp    ffff800000801146 <main+0x2e6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:111
				{
					distance = (0xff - palette[i].blue) * (0xff - palette[i].blue) + palette[i].red * palette[i].red + palette[i].green * palette[i].green;
ffff800000801072:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000801075:	48 89 d0             	mov    rax,rdx
ffff800000801078:	48 01 c0             	add    rax,rax
ffff80000080107b:	48 01 c2             	add    rdx,rax
ffff80000080107e:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000801082:	48 01 d0             	add    rax,rdx
ffff800000801085:	0f b6 40 02          	movzx  eax,BYTE PTR [rax+0x2]
ffff800000801089:	0f b6 c0             	movzx  eax,al
ffff80000080108c:	ba ff 00 00 00       	mov    edx,0xff
ffff800000801091:	89 d1                	mov    ecx,edx
ffff800000801093:	29 c1                	sub    ecx,eax
ffff800000801095:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000801098:	48 89 d0             	mov    rax,rdx
ffff80000080109b:	48 01 c0             	add    rax,rax
ffff80000080109e:	48 01 c2             	add    rdx,rax
ffff8000008010a1:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008010a5:	48 01 d0             	add    rax,rdx
ffff8000008010a8:	0f b6 40 02          	movzx  eax,BYTE PTR [rax+0x2]
ffff8000008010ac:	0f b6 d0             	movzx  edx,al
ffff8000008010af:	b8 ff 00 00 00       	mov    eax,0xff
ffff8000008010b4:	29 d0                	sub    eax,edx
ffff8000008010b6:	89 ce                	mov    esi,ecx
ffff8000008010b8:	0f af f0             	imul   esi,eax
ffff8000008010bb:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff8000008010be:	48 89 d0             	mov    rax,rdx
ffff8000008010c1:	48 01 c0             	add    rax,rax
ffff8000008010c4:	48 01 c2             	add    rdx,rax
ffff8000008010c7:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008010cb:	48 01 d0             	add    rax,rdx
ffff8000008010ce:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008010d1:	0f b6 c8             	movzx  ecx,al
ffff8000008010d4:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff8000008010d7:	48 89 d0             	mov    rax,rdx
ffff8000008010da:	48 01 c0             	add    rax,rax
ffff8000008010dd:	48 01 c2             	add    rdx,rax
ffff8000008010e0:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008010e4:	48 01 d0             	add    rax,rdx
ffff8000008010e7:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008010ea:	0f b6 c0             	movzx  eax,al
ffff8000008010ed:	0f af c1             	imul   eax,ecx
ffff8000008010f0:	01 c6                	add    esi,eax
ffff8000008010f2:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff8000008010f5:	48 89 d0             	mov    rax,rdx
ffff8000008010f8:	48 01 c0             	add    rax,rax
ffff8000008010fb:	48 01 c2             	add    rdx,rax
ffff8000008010fe:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000801102:	48 01 d0             	add    rax,rdx
ffff800000801105:	0f b6 40 01          	movzx  eax,BYTE PTR [rax+0x1]
ffff800000801109:	0f b6 c8             	movzx  ecx,al
ffff80000080110c:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080110f:	48 89 d0             	mov    rax,rdx
ffff800000801112:	48 01 c0             	add    rax,rax
ffff800000801115:	48 01 c2             	add    rdx,rax
ffff800000801118:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080111c:	48 01 d0             	add    rax,rdx
ffff80000080111f:	0f b6 40 01          	movzx  eax,BYTE PTR [rax+0x1]
ffff800000801123:	0f b6 c0             	movzx  eax,al
ffff800000801126:	0f af c1             	imul   eax,ecx
ffff800000801129:	01 f0                	add    eax,esi
ffff80000080112b:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:112
					if (distance < best_distance)
ffff80000080112e:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
ffff800000801131:	3b 45 d8             	cmp    eax,DWORD PTR [rbp-0x28]
ffff800000801134:	73 0c                	jae    ffff800000801142 <main+0x2e2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:114
					{
						color = i;
ffff800000801136:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000801139:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:115
						best_distance = distance;
ffff80000080113c:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
ffff80000080113f:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:109 (discriminator 2)
				for (i = 0; i < tagfb->framebuffer_palette_num_colors; i++)
ffff800000801142:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:109 (discriminator 1)
ffff800000801146:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080114a:	0f b7 40 20          	movzx  eax,WORD PTR [rax+0x20]
ffff80000080114e:	0f b7 c0             	movzx  eax,ax
ffff800000801151:	39 45 dc             	cmp    DWORD PTR [rbp-0x24],eax
ffff800000801154:	0f 82 18 ff ff ff    	jb     ffff800000801072 <main+0x212>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:119
					}
				}
			}
			break;
ffff80000080115a:	eb 40                	jmp    ffff80000080119c <main+0x33c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:122

			case MULTIBOOT_FRAMEBUFFER_TYPE_RGB:
				color = ((1 << tagfb->framebuffer_blue_mask_size) - 1) << tagfb->framebuffer_blue_field_position;
ffff80000080115c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801160:	0f b6 40 25          	movzx  eax,BYTE PTR [rax+0x25]
ffff800000801164:	0f b6 c0             	movzx  eax,al
ffff800000801167:	ba 01 00 00 00       	mov    edx,0x1
ffff80000080116c:	89 c1                	mov    ecx,eax
ffff80000080116e:	d3 e2                	shl    edx,cl
ffff800000801170:	89 d0                	mov    eax,edx
ffff800000801172:	8d 50 ff             	lea    edx,[rax-0x1]
ffff800000801175:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801179:	0f b6 40 24          	movzx  eax,BYTE PTR [rax+0x24]
ffff80000080117d:	0f b6 c0             	movzx  eax,al
ffff800000801180:	89 c1                	mov    ecx,eax
ffff800000801182:	d3 e2                	shl    edx,cl
ffff800000801184:	89 d0                	mov    eax,edx
ffff800000801186:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:123
				break;
ffff800000801189:	eb 11                	jmp    ffff80000080119c <main+0x33c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:126

			case MULTIBOOT_FRAMEBUFFER_TYPE_EGA_TEXT:
				color = '\\' | 0x0100;
ffff80000080118b:	c7 45 b4 5c 01 00 00 	mov    DWORD PTR [rbp-0x4c],0x15c
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:127
				break;
ffff800000801192:	eb 08                	jmp    ffff80000080119c <main+0x33c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:130

			default:
				color = 0xffffffff;
ffff800000801194:	c7 45 b4 ff ff ff ff 	mov    DWORD PTR [rbp-0x4c],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:131
				break;
ffff80000080119b:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:134 (discriminator 1)
			}

			break;
ffff80000080119c:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:45
		 tag = (struct multiboot_tag *)((u8 *)tag + ((tag->size + 7) & ~7)))
ffff80000080119d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008011a1:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff8000008011a4:	83 c0 07             	add    eax,0x7
ffff8000008011a7:	89 c0                	mov    eax,eax
ffff8000008011a9:	83 e0 f8             	and    eax,0xfffffff8
ffff8000008011ac:	48 01 45 e8          	add    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:44
		 tag->type != MULTIBOOT_TAG_TYPE_END;
ffff8000008011b0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008011b4:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008011b6:	85 c0                	test   eax,eax
ffff8000008011b8:	0f 85 5f fd ff ff    	jne    ffff800000800f1d <main+0xbd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:138
		}
		}
	}
	tag = (struct multiboot_tag *)((multiboot_uint8_t *)tag + ((tag->size + 7) & ~7));
ffff8000008011be:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008011c2:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff8000008011c5:	83 c0 07             	add    eax,0x7
ffff8000008011c8:	89 c0                	mov    eax,eax
ffff8000008011ca:	83 e0 f8             	and    eax,0xfffffff8
ffff8000008011cd:	48 01 45 e8          	add    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:139
    init_memory();
ffff8000008011d1:	49 89 df             	mov    r15,rbx
ffff8000008011d4:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008011d9:	48 ba 87 5d ee ff ff 	movabs rdx,0xffffffffffee5d87
ffff8000008011e0:	ff ff ff 
ffff8000008011e3:	48 01 da             	add    rdx,rbx
ffff8000008011e6:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:140
    init_framebuffer();
ffff8000008011e8:	49 89 df             	mov    r15,rbx
ffff8000008011eb:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008011f0:	48 ba 8c cb ee ff ff 	movabs rdx,0xffffffffffeecb8c
ffff8000008011f7:	ff ff ff 
ffff8000008011fa:	48 01 da             	add    rdx,rbx
ffff8000008011fd:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:142
	//printf("Total mbi size 0x%x\n", (unsigned)tag - addr);
	char disk_count=*(char*)0x475;
ffff8000008011ff:	b8 75 04 00 00       	mov    eax,0x475
ffff800000801204:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801207:	88 45 cb             	mov    BYTE PTR [rbp-0x35],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:144
	//printf("disk count:%d\n",disk_count);
    init_font();
ffff80000080120a:	49 89 df             	mov    r15,rbx
ffff80000080120d:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801212:	48 ba bd cc ee ff ff 	movabs rdx,0xffffffffffeeccbd
ffff800000801219:	ff ff ff 
ffff80000080121c:	48 01 da             	add    rdx,rbx
ffff80000080121f:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:147
    //初始化区域
    //fill_rect(0,0,100,100,255);
    print("gamessis os loaded.\nkernel:>");
ffff800000801221:	48 b8 ff d6 ff ff ff 	movabs rax,0xffffffffffffd6ff
ffff800000801228:	ff ff ff 
ffff80000080122b:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080122f:	48 89 c7             	mov    rdi,rax
ffff800000801232:	49 89 df             	mov    r15,rbx
ffff800000801235:	48 b8 d9 d3 ee ff ff 	movabs rax,0xffffffffffeed3d9
ffff80000080123c:	ff ff ff 
ffff80000080123f:	48 01 d8             	add    rax,rbx
ffff800000801242:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:148
    init_int();
ffff800000801244:	49 89 df             	mov    r15,rbx
ffff800000801247:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080124c:	48 ba e8 37 ee ff ff 	movabs rdx,0xffffffffffee37e8
ffff800000801253:	ff ff ff 
ffff800000801256:	48 01 da             	add    rdx,rbx
ffff800000801259:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:149
    print("int loaded.\n");
ffff80000080125b:	48 b8 1c d7 ff ff ff 	movabs rax,0xffffffffffffd71c
ffff800000801262:	ff ff ff 
ffff800000801265:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000801269:	48 89 c7             	mov    rdi,rax
ffff80000080126c:	49 89 df             	mov    r15,rbx
ffff80000080126f:	48 b8 d9 d3 ee ff ff 	movabs rax,0xffffffffffeed3d9
ffff800000801276:	ff ff ff 
ffff800000801279:	48 01 d8             	add    rax,rbx
ffff80000080127c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:151
//    set_tss(0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000);
	init_paging();
ffff80000080127e:	49 89 df             	mov    r15,rbx
ffff800000801281:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801286:	48 ba cb 55 ee ff ff 	movabs rdx,0xffffffffffee55cb
ffff80000080128d:	ff ff ff 
ffff800000801290:	48 01 da             	add    rdx,rbx
ffff800000801293:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:152
 	init_gdt();
ffff800000801295:	49 89 df             	mov    r15,rbx
ffff800000801298:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080129d:	48 ba 35 b5 ee ff ff 	movabs rdx,0xffffffffffeeb535
ffff8000008012a4:	ff ff ff 
ffff8000008012a7:	48 01 da             	add    rdx,rbx
ffff8000008012aa:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:154

	init_blkdev();
ffff8000008012ac:	49 89 df             	mov    r15,rbx
ffff8000008012af:	48 b8 18 fc ee ff ff 	movabs rax,0xffffffffffeefc18
ffff8000008012b6:	ff ff ff 
ffff8000008012b9:	48 01 d8             	add    rax,rbx
ffff8000008012bc:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:155
	init_blkbuf();
ffff8000008012be:	49 89 df             	mov    r15,rbx
ffff8000008012c1:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008012c6:	48 ba 6b fc ee ff ff 	movabs rdx,0xffffffffffeefc6b
ffff8000008012cd:	ff ff ff 
ffff8000008012d0:	48 01 da             	add    rdx,rbx
ffff8000008012d3:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:157
	// init_disk();
    init_ramdisk();
ffff8000008012d5:	49 89 df             	mov    r15,rbx
ffff8000008012d8:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008012dd:	48 ba d9 f6 ee ff ff 	movabs rdx,0xffffffffffeef6d9
ffff8000008012e4:	ff ff ff 
ffff8000008012e7:	48 01 da             	add    rdx,rbx
ffff8000008012ea:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:158
    init_rootfs();
ffff8000008012ec:	49 89 df             	mov    r15,rbx
ffff8000008012ef:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008012f4:	48 ba 6c de ee ff ff 	movabs rdx,0xffffffffffeede6c
ffff8000008012fb:	ff ff ff 
ffff8000008012fe:	48 01 da             	add    rdx,rbx
ffff800000801301:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:159
    init_devfs();
ffff800000801303:	49 89 df             	mov    r15,rbx
ffff800000801306:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080130b:	48 ba 57 6e ee ff ff 	movabs rdx,0xffffffffffee6e57
ffff800000801312:	ff ff ff 
ffff800000801315:	48 01 da             	add    rdx,rbx
ffff800000801318:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:161

    init_proc();
ffff80000080131a:	49 89 df             	mov    r15,rbx
ffff80000080131d:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801322:	48 ba 71 7b ee ff ff 	movabs rdx,0xffffffffffee7b71
ffff800000801329:	ff ff ff 
ffff80000080132c:	48 01 da             	add    rdx,rbx
ffff80000080132f:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:163
	// init_ramfs();
  	DISK1_FAT32_FS_init();
ffff800000801331:	49 89 df             	mov    r15,rbx
ffff800000801334:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801339:	48 ba bd 43 ef ff ff 	movabs rdx,0xffffffffffef43bd
ffff800000801340:	ff ff ff 
ffff800000801343:	48 01 da             	add    rdx,rbx
ffff800000801346:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:167

    //自带驱动
    //init_tty();
    init_kb();
ffff800000801348:	49 89 df             	mov    r15,rbx
ffff80000080134b:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801350:	48 ba a4 08 ef ff ff 	movabs rdx,0xffffffffffef08a4
ffff800000801357:	ff ff ff 
ffff80000080135a:	48 01 da             	add    rdx,rbx
ffff80000080135d:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:169
//    init_disk();
    sti();
ffff80000080135f:	fb                   	sti    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:170
    manage_proc_lock=0;
ffff800000801360:	48 b8 40 fd ff ff ff 	movabs rax,0xfffffffffffffd40
ffff800000801367:	ff ff ff 
ffff80000080136a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080136e:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:173


    move_to_user_mode();
ffff800000801374:	49 89 df             	mov    r15,rbx
ffff800000801377:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080137c:	48 ba 54 5c ef ff ff 	movabs rdx,0xffffffffffef5c54
ffff800000801383:	ff ff ff 
ffff800000801386:	48 01 da             	add    rdx,rbx
ffff800000801389:	ff d2                	call   rdx
ffff80000080138b:	48 c7 45 98 1b 00 00 	mov    QWORD PTR [rbp-0x68],0x1b
ffff800000801392:	00 
ffff800000801393:	48 c7 45 90 00 00 00 	mov    QWORD PTR [rbp-0x70],0x0
ffff80000080139a:	00 
ffff80000080139b:	48 c7 45 88 00 00 00 	mov    QWORD PTR [rbp-0x78],0x0
ffff8000008013a2:	00 
ffff8000008013a3:	48 c7 45 80 00 00 00 	mov    QWORD PTR [rbp-0x80],0x0
ffff8000008013aa:	00 
ffff8000008013ab:	48 c7 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],0x0
ffff8000008013b2:	00 00 00 00 
ffff8000008013b6:	48 c7 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],0x0
ffff8000008013bd:	00 00 00 00 
ffff8000008013c1:	48 c7 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],0x0
ffff8000008013c8:	00 00 00 00 
do_syscall():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:194
    unsigned int argv;
    unsigned int argc;
}proc_ret_stack;

__attribute__((__always_inline__))inline int do_syscall(long func,long a1,long a2,long a3,long a4,long a5,long a6){
        asm volatile(".byte 0x48\n"
ffff8000008013cc:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008013d0:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
ffff8000008013d4:	48 8b 75 88          	mov    rsi,QWORD PTR [rbp-0x78]
ffff8000008013d8:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
ffff8000008013dc:	48 8b 8d 78 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x88]
ffff8000008013e3:	4c 8b 85 70 ff ff ff 	mov    r8,QWORD PTR [rbp-0x90]
ffff8000008013ea:	4c 8b 8d 68 ff ff ff 	mov    r9,QWORD PTR [rbp-0x98]
ffff8000008013f1:	48 0f 05             	rex.W syscall 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:196
                 "syscall"::"a"(func),"D"(a1),"S"(a2),"d"(a3),"c"(a4),"r"(a5),"r"(a6));
        long ret=0;
ffff8000008013f4:	48 c7 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],0x0
ffff8000008013fb:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:197
        asm volatile("mov %%rax,%0"::"m"(ret));
ffff8000008013ff:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:198
        return ret;
ffff800000801406:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
main():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:174
    if(do_syscall(SYSCALL_FORK,0,0,0,0,0,0)==0){
ffff80000080140d:	85 c0                	test   eax,eax
ffff80000080140f:	0f 85 ca 00 00 00    	jne    ffff8000008014df <main+0x67f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:175
        char *argv[]={"/mnt/test.exe","gamessis os"};
ffff800000801415:	48 b8 29 d7 ff ff ff 	movabs rax,0xffffffffffffd729
ffff80000080141c:	ff ff ff 
ffff80000080141f:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000801423:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
ffff80000080142a:	48 b8 37 d7 ff ff ff 	movabs rax,0xffffffffffffd737
ffff800000801431:	ff ff ff 
ffff800000801434:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000801438:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:176
        do_syscall(SYSCALL_EXECVE, (long) "/mnt/test.exe", 2, (long) &argv[0], 0, 0, 0);
ffff80000080143f:	48 8d 85 10 ff ff ff 	lea    rax,[rbp-0xf0]
ffff800000801446:	48 ba 29 d7 ff ff ff 	movabs rdx,0xffffffffffffd729
ffff80000080144d:	ff ff ff 
ffff800000801450:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000801454:	48 c7 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],0x1c
ffff80000080145b:	1c 00 00 00 
ffff80000080145f:	48 89 95 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdx
ffff800000801466:	48 c7 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],0x2
ffff80000080146d:	02 00 00 00 
ffff800000801471:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
ffff800000801478:	48 c7 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],0x0
ffff80000080147f:	00 00 00 00 
ffff800000801483:	48 c7 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],0x0
ffff80000080148a:	00 00 00 00 
ffff80000080148e:	48 c7 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],0x0
ffff800000801495:	00 00 00 00 
do_syscall():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:194
        asm volatile(".byte 0x48\n"
ffff800000801499:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff8000008014a0:	48 8b bd 58 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xa8]
ffff8000008014a7:	48 8b b5 50 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xb0]
ffff8000008014ae:	48 8b 95 48 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb8]
ffff8000008014b5:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
ffff8000008014bc:	4c 8b 85 38 ff ff ff 	mov    r8,QWORD PTR [rbp-0xc8]
ffff8000008014c3:	4c 8b 8d 30 ff ff ff 	mov    r9,QWORD PTR [rbp-0xd0]
ffff8000008014ca:	48 0f 05             	rex.W syscall 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:196
        long ret=0;
ffff8000008014cd:	48 c7 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],0x0
ffff8000008014d4:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:197
        asm volatile("mov %%rax,%0"::"m"(ret));
ffff8000008014d8:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
main():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:187 (discriminator 3)
//    init_fat16();

//    extern device *dev_tree[];
//    blk_dev* p=dev_tree[DEVTREE_BLKDEVI];
//    mount_fs("fat16",p->par,vmalloc());
    while (1)
ffff8000008014df:	eb fe                	jmp    ffff8000008014df <main+0x67f>

ffff8000008014e1 <init_logging>:
init_logging():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:12
static unsigned char* video;
static int xpos,ypos;
/* 将整数 D 转换为字符串并保存在 BUF 中。如果 BASE 为 'd'，则 D 为十进制，如果 BASE 为 'x'，则 D 为十六进制。 */

int init_logging()
{
ffff8000008014e1:	f3 0f 1e fa          	endbr64 
ffff8000008014e5:	55                   	push   rbp
ffff8000008014e6:	48 89 e5             	mov    rbp,rsp
ffff8000008014e9:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008014e9 <init_logging+0x8>
ffff8000008014f0:	49 bb 2f b3 11 00 00 	movabs r11,0x11b32f
ffff8000008014f7:	00 00 00 
ffff8000008014fa:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:13
    video=0xb8000;
ffff8000008014fd:	48 ba e8 37 ae ff ff 	movabs rdx,0xffffffffffae37e8
ffff800000801504:	ff ff ff 
ffff800000801507:	48 c7 04 10 00 80 0b 	mov    QWORD PTR [rax+rdx*1],0xb8000
ffff80000080150e:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:14
    xpos=0;
ffff80000080150f:	48 ba f0 37 ae ff ff 	movabs rdx,0xffffffffffae37f0
ffff800000801516:	ff ff ff 
ffff800000801519:	c7 04 10 00 00 00 00 	mov    DWORD PTR [rax+rdx*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:15
    ypos=0;
ffff800000801520:	48 ba f4 37 ae ff ff 	movabs rdx,0xffffffffffae37f4
ffff800000801527:	ff ff ff 
ffff80000080152a:	c7 04 10 00 00 00 00 	mov    DWORD PTR [rax+rdx*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:16
}
ffff800000801531:	90                   	nop
ffff800000801532:	5d                   	pop    rbp
ffff800000801533:	c3                   	ret    

ffff800000801534 <itoa>:
itoa():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:19

void itoa (char *buf, int base, int d)
{
ffff800000801534:	f3 0f 1e fa          	endbr64 
ffff800000801538:	55                   	push   rbp
ffff800000801539:	48 89 e5             	mov    rbp,rsp
ffff80000080153c:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080153c <itoa+0x8>
ffff800000801543:	49 bb dc b2 11 00 00 	movabs r11,0x11b2dc
ffff80000080154a:	00 00 00 
ffff80000080154d:	4c 01 d8             	add    rax,r11
ffff800000801550:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000801554:	89 75 c4             	mov    DWORD PTR [rbp-0x3c],esi
ffff800000801557:	89 55 c0             	mov    DWORD PTR [rbp-0x40],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:20
    char *p = buf;
ffff80000080155a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080155e:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:22
    char *p1, *p2;
    unsigned long ud = d;
ffff800000801562:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
ffff800000801565:	48 98                	cdqe   
ffff800000801567:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:23
    int divisor = 10;
ffff80000080156b:	c7 45 dc 0a 00 00 00 	mov    DWORD PTR [rbp-0x24],0xa
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:26
 
    /* 如果指定了 %d 并且 D 是负数，在开始添上负号。 */
    if (base == 'd' && d < 0)
ffff800000801572:	83 7d c4 64          	cmp    DWORD PTR [rbp-0x3c],0x64
ffff800000801576:	75 27                	jne    ffff80000080159f <itoa+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:26 (discriminator 1)
ffff800000801578:	83 7d c0 00          	cmp    DWORD PTR [rbp-0x40],0x0
ffff80000080157c:	79 21                	jns    ffff80000080159f <itoa+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:28
    {
        *p++ = '-';
ffff80000080157e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000801582:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffff800000801586:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffff80000080158a:	c6 00 2d             	mov    BYTE PTR [rax],0x2d
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:29
        buf++;
ffff80000080158d:	48 83 45 c8 01       	add    QWORD PTR [rbp-0x38],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:30
        ud = -d;
ffff800000801592:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
ffff800000801595:	f7 d8                	neg    eax
ffff800000801597:	48 98                	cdqe   
ffff800000801599:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffff80000080159d:	eb 0d                	jmp    ffff8000008015ac <itoa+0x78>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:32
    }
    else if (base == 'x')
ffff80000080159f:	83 7d c4 78          	cmp    DWORD PTR [rbp-0x3c],0x78
ffff8000008015a3:	75 07                	jne    ffff8000008015ac <itoa+0x78>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:33
        divisor = 16;
ffff8000008015a5:	c7 45 dc 10 00 00 00 	mov    DWORD PTR [rbp-0x24],0x10
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:38
 
    /* 用 DIVISOR 去除 UD 直到 UD == 0。 */
    do
    {
        int remainder = ud % divisor;
ffff8000008015ac:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008015af:	48 63 c8             	movsxd rcx,eax
ffff8000008015b2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008015b6:	ba 00 00 00 00       	mov    edx,0x0
ffff8000008015bb:	48 f7 f1             	div    rcx
ffff8000008015be:	48 89 d0             	mov    rax,rdx
ffff8000008015c1:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:40
 
        *p++ = (remainder < 10) ? remainder + '0' : remainder + 'a' - 10;
ffff8000008015c4:	83 7d d8 09          	cmp    DWORD PTR [rbp-0x28],0x9
ffff8000008015c8:	7f 0a                	jg     ffff8000008015d4 <itoa+0xa0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:40 (discriminator 1)
ffff8000008015ca:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff8000008015cd:	83 c0 30             	add    eax,0x30
ffff8000008015d0:	89 c1                	mov    ecx,eax
ffff8000008015d2:	eb 08                	jmp    ffff8000008015dc <itoa+0xa8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:40 (discriminator 2)
ffff8000008015d4:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff8000008015d7:	83 c0 57             	add    eax,0x57
ffff8000008015da:	89 c1                	mov    ecx,eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:40 (discriminator 4)
ffff8000008015dc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008015e0:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffff8000008015e4:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffff8000008015e8:	88 08                	mov    BYTE PTR [rax],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:42 (discriminator 4)
    }
    while (ud /= divisor);
ffff8000008015ea:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008015ed:	48 63 f0             	movsxd rsi,eax
ffff8000008015f0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008015f4:	ba 00 00 00 00       	mov    edx,0x0
ffff8000008015f9:	48 f7 f6             	div    rsi
ffff8000008015fc:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffff800000801600:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
ffff800000801605:	75 a5                	jne    ffff8000008015ac <itoa+0x78>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:45
 
    /* 在字符串尾添上终结符。 */
    *p = 0;
ffff800000801607:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080160b:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:48
 
    /* 反转 BUF。 */
    p1 = buf;
ffff80000080160e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000801612:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:49
    p2 = p - 1;
ffff800000801616:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080161a:	48 83 e8 01          	sub    rax,0x1
ffff80000080161e:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:50
    while (p1 < p2)
ffff800000801622:	eb 2b                	jmp    ffff80000080164f <itoa+0x11b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:52
    {
        char tmp = *p1;
ffff800000801624:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000801628:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080162b:	88 45 d7             	mov    BYTE PTR [rbp-0x29],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:53
        *p1 = *p2;
ffff80000080162e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801632:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff800000801635:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000801639:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:54
        *p2 = tmp;
ffff80000080163b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080163f:	0f b6 55 d7          	movzx  edx,BYTE PTR [rbp-0x29]
ffff800000801643:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:55
        p1++;
ffff800000801645:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:56
        p2--;
ffff80000080164a:	48 83 6d e8 01       	sub    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:50
    while (p1 < p2)
ffff80000080164f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000801653:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000801657:	72 cb                	jb     ffff800000801624 <itoa+0xf0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:58
    }
}
ffff800000801659:	90                   	nop
ffff80000080165a:	90                   	nop
ffff80000080165b:	5d                   	pop    rbp
ffff80000080165c:	c3                   	ret    

ffff80000080165d <putchar>:
putchar():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:62
 
/* 在屏幕上输出字符 C 。 */
void putchar (char c)
{
ffff80000080165d:	f3 0f 1e fa          	endbr64 
ffff800000801661:	55                   	push   rbp
ffff800000801662:	48 89 e5             	mov    rbp,rsp
ffff800000801665:	41 57                	push   r15
ffff800000801667:	48 83 ec 28          	sub    rsp,0x28
ffff80000080166b:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080166b <putchar+0xe>
ffff800000801672:	49 bb ad b1 11 00 00 	movabs r11,0x11b1ad
ffff800000801679:	00 00 00 
ffff80000080167c:	4c 01 d8             	add    rax,r11
ffff80000080167f:	89 fa                	mov    edx,edi
ffff800000801681:	88 55 dc             	mov    BYTE PTR [rbp-0x24],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:63
    char s[2]={c,'\0'};
ffff800000801684:	0f b6 55 dc          	movzx  edx,BYTE PTR [rbp-0x24]
ffff800000801688:	88 55 ee             	mov    BYTE PTR [rbp-0x12],dl
ffff80000080168b:	c6 45 ef 00          	mov    BYTE PTR [rbp-0x11],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:64
    print(s);
ffff80000080168f:	48 8d 55 ee          	lea    rdx,[rbp-0x12]
ffff800000801693:	48 89 d7             	mov    rdi,rdx
ffff800000801696:	49 89 c7             	mov    r15,rax
ffff800000801699:	48 ba d9 d3 ee ff ff 	movabs rdx,0xffffffffffeed3d9
ffff8000008016a0:	ff ff ff 
ffff8000008016a3:	48 01 c2             	add    rdx,rax
ffff8000008016a6:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:82
    *(video + (xpos + ypos * COLUMNS) * 2 + 1) = ATTRIBUTE;
 
    xpos++;
    if (xpos >= COLUMNS)
        goto newline;
}
ffff8000008016a8:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff8000008016ac:	c9                   	leave  
ffff8000008016ad:	c3                   	ret    

ffff8000008016ae <printf>:
printf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:86
 
/* 格式化字符串并在屏幕上输出，就像 libc 函数 printf 一样。 */
void printf (const char *format,...)
{
ffff8000008016ae:	f3 0f 1e fa          	endbr64 
ffff8000008016b2:	55                   	push   rbp
ffff8000008016b3:	48 89 e5             	mov    rbp,rsp
ffff8000008016b6:	41 57                	push   r15
ffff8000008016b8:	53                   	push   rbx
ffff8000008016b9:	48 81 ec 00 01 00 00 	sub    rsp,0x100
ffff8000008016c0:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008016c0 <printf+0x12>
ffff8000008016c7:	49 bb 58 b1 11 00 00 	movabs r11,0x11b158
ffff8000008016ce:	00 00 00 
ffff8000008016d1:	4c 01 db             	add    rbx,r11
ffff8000008016d4:	48 89 bd f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdi
ffff8000008016db:	48 89 b5 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rsi
ffff8000008016e2:	48 89 95 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rdx
ffff8000008016e9:	48 89 8d 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rcx
ffff8000008016f0:	4c 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],r8
ffff8000008016f7:	4c 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],r9
ffff8000008016fe:	84 c0                	test   al,al
ffff800000801700:	74 23                	je     ffff800000801725 <printf+0x77>
ffff800000801702:	0f 29 85 70 ff ff ff 	movaps XMMWORD PTR [rbp-0x90],xmm0
ffff800000801709:	0f 29 4d 80          	movaps XMMWORD PTR [rbp-0x80],xmm1
ffff80000080170d:	0f 29 55 90          	movaps XMMWORD PTR [rbp-0x70],xmm2
ffff800000801711:	0f 29 5d a0          	movaps XMMWORD PTR [rbp-0x60],xmm3
ffff800000801715:	0f 29 65 b0          	movaps XMMWORD PTR [rbp-0x50],xmm4
ffff800000801719:	0f 29 6d c0          	movaps XMMWORD PTR [rbp-0x40],xmm5
ffff80000080171d:	0f 29 75 d0          	movaps XMMWORD PTR [rbp-0x30],xmm6
ffff800000801721:	0f 29 7d e0          	movaps XMMWORD PTR [rbp-0x20],xmm7
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:87
    if(strlen(format)>=1024)
ffff800000801725:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff80000080172c:	48 89 c7             	mov    rdi,rax
ffff80000080172f:	49 89 df             	mov    r15,rbx
ffff800000801732:	48 b8 8d 56 ef ff ff 	movabs rax,0xffffffffffef568d
ffff800000801739:	ff ff ff 
ffff80000080173c:	48 01 d8             	add    rax,rbx
ffff80000080173f:	ff d0                	call   rax
ffff800000801741:	3d ff 03 00 00       	cmp    eax,0x3ff
ffff800000801746:	0f 8f f2 02 00 00    	jg     ffff800000801a3e <printf+0x390>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:89
        return;//一次性输出不了太长
    char* tmp=(char*) kmalloc();
ffff80000080174c:	49 89 df             	mov    r15,rbx
ffff80000080174f:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801754:	48 ba 68 57 ee ff ff 	movabs rdx,0xffffffffffee5768
ffff80000080175b:	ff ff ff 
ffff80000080175e:	48 01 da             	add    rdx,rbx
ffff800000801761:	ff d2                	call   rdx
ffff800000801763:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:91
    va_list vargs;
    va_start(vargs,format);
ffff80000080176a:	c7 85 00 ff ff ff 08 	mov    DWORD PTR [rbp-0x100],0x8
ffff800000801771:	00 00 00 
ffff800000801774:	c7 85 04 ff ff ff 30 	mov    DWORD PTR [rbp-0xfc],0x30
ffff80000080177b:	00 00 00 
ffff80000080177e:	48 8d 45 10          	lea    rax,[rbp+0x10]
ffff800000801782:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
ffff800000801789:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
ffff800000801790:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:92
    char *pstr=format;
ffff800000801797:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff80000080179e:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:93
    for(;*pstr!='\0';pstr++){
ffff8000008017a5:	e9 27 02 00 00       	jmp    ffff8000008019d1 <printf+0x323>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:94
        if(*pstr=='%'&&*(pstr+1)!='\0'){
ffff8000008017aa:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff8000008017b1:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008017b4:	3c 25                	cmp    al,0x25
ffff8000008017b6:	0f 85 e2 01 00 00    	jne    ffff80000080199e <printf+0x2f0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:94 (discriminator 1)
ffff8000008017bc:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff8000008017c3:	48 83 c0 01          	add    rax,0x1
ffff8000008017c7:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008017ca:	84 c0                	test   al,al
ffff8000008017cc:	0f 84 cc 01 00 00    	je     ffff80000080199e <printf+0x2f0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:95
            pstr++;
ffff8000008017d2:	48 83 85 38 ff ff ff 	add    QWORD PTR [rbp-0xc8],0x1
ffff8000008017d9:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:96
            if(*pstr=='x'){
ffff8000008017da:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff8000008017e1:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008017e4:	3c 78                	cmp    al,0x78
ffff8000008017e6:	75 75                	jne    ffff80000080185d <printf+0x1af>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:97
                int v=va_arg(vargs,int);
ffff8000008017e8:	8b 85 00 ff ff ff    	mov    eax,DWORD PTR [rbp-0x100]
ffff8000008017ee:	83 f8 2f             	cmp    eax,0x2f
ffff8000008017f1:	77 23                	ja     ffff800000801816 <printf+0x168>
ffff8000008017f3:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff8000008017fa:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff800000801800:	89 d2                	mov    edx,edx
ffff800000801802:	48 01 d0             	add    rax,rdx
ffff800000801805:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff80000080180b:	83 c2 08             	add    edx,0x8
ffff80000080180e:	89 95 00 ff ff ff    	mov    DWORD PTR [rbp-0x100],edx
ffff800000801814:	eb 12                	jmp    ffff800000801828 <printf+0x17a>
ffff800000801816:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff80000080181d:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000801821:	48 89 95 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdx
ffff800000801828:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080182a:	89 85 1c ff ff ff    	mov    DWORD PTR [rbp-0xe4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:98
                sprint_hex(tmp,v);
ffff800000801830:	8b 85 1c ff ff ff    	mov    eax,DWORD PTR [rbp-0xe4]
ffff800000801836:	48 63 d0             	movsxd rdx,eax
ffff800000801839:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801840:	48 89 d6             	mov    rsi,rdx
ffff800000801843:	48 89 c7             	mov    rdi,rax
ffff800000801846:	49 89 df             	mov    r15,rbx
ffff800000801849:	48 b8 e0 5a ef ff ff 	movabs rax,0xffffffffffef5ae0
ffff800000801850:	ff ff ff 
ffff800000801853:	48 01 d8             	add    rax,rbx
ffff800000801856:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:96
            if(*pstr=='x'){
ffff800000801858:	e9 6c 01 00 00       	jmp    ffff8000008019c9 <printf+0x31b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:99
            }else if(*pstr=='s'){
ffff80000080185d:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000801864:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801867:	3c 73                	cmp    al,0x73
ffff800000801869:	75 75                	jne    ffff8000008018e0 <printf+0x232>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:100
                char* v=va_arg(vargs,char*);
ffff80000080186b:	8b 85 00 ff ff ff    	mov    eax,DWORD PTR [rbp-0x100]
ffff800000801871:	83 f8 2f             	cmp    eax,0x2f
ffff800000801874:	77 23                	ja     ffff800000801899 <printf+0x1eb>
ffff800000801876:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff80000080187d:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff800000801883:	89 d2                	mov    edx,edx
ffff800000801885:	48 01 d0             	add    rax,rdx
ffff800000801888:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff80000080188e:	83 c2 08             	add    edx,0x8
ffff800000801891:	89 95 00 ff ff ff    	mov    DWORD PTR [rbp-0x100],edx
ffff800000801897:	eb 12                	jmp    ffff8000008018ab <printf+0x1fd>
ffff800000801899:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff8000008018a0:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff8000008018a4:	48 89 95 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdx
ffff8000008018ab:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008018ae:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:101
                sprintn(tmp,v);
ffff8000008018b5:	48 8b 95 20 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe0]
ffff8000008018bc:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff8000008018c3:	48 89 d6             	mov    rsi,rdx
ffff8000008018c6:	48 89 c7             	mov    rdi,rax
ffff8000008018c9:	49 89 df             	mov    r15,rbx
ffff8000008018cc:	48 b8 6e 5b ef ff ff 	movabs rax,0xffffffffffef5b6e
ffff8000008018d3:	ff ff ff 
ffff8000008018d6:	48 01 d8             	add    rax,rbx
ffff8000008018d9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:96
            if(*pstr=='x'){
ffff8000008018db:	e9 e9 00 00 00       	jmp    ffff8000008019c9 <printf+0x31b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:102
            }else if(*pstr=='d'){
ffff8000008018e0:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff8000008018e7:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008018ea:	3c 64                	cmp    al,0x64
ffff8000008018ec:	75 73                	jne    ffff800000801961 <printf+0x2b3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:103
                char* v=va_arg(vargs,char*);
ffff8000008018ee:	8b 85 00 ff ff ff    	mov    eax,DWORD PTR [rbp-0x100]
ffff8000008018f4:	83 f8 2f             	cmp    eax,0x2f
ffff8000008018f7:	77 23                	ja     ffff80000080191c <printf+0x26e>
ffff8000008018f9:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff800000801900:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff800000801906:	89 d2                	mov    edx,edx
ffff800000801908:	48 01 d0             	add    rax,rdx
ffff80000080190b:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff800000801911:	83 c2 08             	add    edx,0x8
ffff800000801914:	89 95 00 ff ff ff    	mov    DWORD PTR [rbp-0x100],edx
ffff80000080191a:	eb 12                	jmp    ffff80000080192e <printf+0x280>
ffff80000080191c:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff800000801923:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000801927:	48 89 95 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdx
ffff80000080192e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801931:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:104
                sprint_decimal(tmp,v);
ffff800000801938:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
ffff80000080193f:	89 c2                	mov    edx,eax
ffff800000801941:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801948:	89 d6                	mov    esi,edx
ffff80000080194a:	48 89 c7             	mov    rdi,rax
ffff80000080194d:	49 89 df             	mov    r15,rbx
ffff800000801950:	48 b8 25 5a ef ff ff 	movabs rax,0xffffffffffef5a25
ffff800000801957:	ff ff ff 
ffff80000080195a:	48 01 d8             	add    rax,rbx
ffff80000080195d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:96
            if(*pstr=='x'){
ffff80000080195f:	eb 68                	jmp    ffff8000008019c9 <printf+0x31b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:105
            }else if(*pstr=='c'){
ffff800000801961:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000801968:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080196b:	3c 63                	cmp    al,0x63
ffff80000080196d:	75 02                	jne    ffff800000801971 <printf+0x2c3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:106
                char v=va_arg(vargs,char);
ffff80000080196f:	0f 0b                	ud2    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:109
                sprintchar(tmp,v);
            }else{
                sprintchar(tmp,*pstr);
ffff800000801971:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000801978:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080197b:	0f be d0             	movsx  edx,al
ffff80000080197e:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801985:	89 d6                	mov    esi,edx
ffff800000801987:	48 89 c7             	mov    rdi,rax
ffff80000080198a:	49 89 df             	mov    r15,rbx
ffff80000080198d:	48 b8 e6 59 ef ff ff 	movabs rax,0xffffffffffef59e6
ffff800000801994:	ff ff ff 
ffff800000801997:	48 01 d8             	add    rax,rbx
ffff80000080199a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:96
            if(*pstr=='x'){
ffff80000080199c:	eb 2b                	jmp    ffff8000008019c9 <printf+0x31b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:112
            }
        }else{
            sprintchar(tmp,*pstr);
ffff80000080199e:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff8000008019a5:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008019a8:	0f be d0             	movsx  edx,al
ffff8000008019ab:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff8000008019b2:	89 d6                	mov    esi,edx
ffff8000008019b4:	48 89 c7             	mov    rdi,rax
ffff8000008019b7:	49 89 df             	mov    r15,rbx
ffff8000008019ba:	48 b8 e6 59 ef ff ff 	movabs rax,0xffffffffffef59e6
ffff8000008019c1:	ff ff ff 
ffff8000008019c4:	48 01 d8             	add    rax,rbx
ffff8000008019c7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:93
    for(;*pstr!='\0';pstr++){
ffff8000008019c9:	48 83 85 38 ff ff ff 	add    QWORD PTR [rbp-0xc8],0x1
ffff8000008019d0:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:93 (discriminator 1)
ffff8000008019d1:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff8000008019d8:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008019db:	84 c0                	test   al,al
ffff8000008019dd:	0f 85 c7 fd ff ff    	jne    ffff8000008017aa <printf+0xfc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:116
        }
    }
    va_end(vargs);
    print(tmp);
ffff8000008019e3:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff8000008019ea:	48 89 c7             	mov    rdi,rax
ffff8000008019ed:	49 89 df             	mov    r15,rbx
ffff8000008019f0:	48 b8 d9 d3 ee ff ff 	movabs rax,0xffffffffffeed3d9
ffff8000008019f7:	ff ff ff 
ffff8000008019fa:	48 01 d8             	add    rax,rbx
ffff8000008019fd:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:117
    comprintf(tmp);
ffff8000008019ff:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801a06:	48 89 c7             	mov    rdi,rax
ffff800000801a09:	49 89 df             	mov    r15,rbx
ffff800000801a0c:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801a11:	48 ba 1b 4e ef ff ff 	movabs rdx,0xffffffffffef4e1b
ffff800000801a18:	ff ff ff 
ffff800000801a1b:	48 01 da             	add    rdx,rbx
ffff800000801a1e:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:118
    kmfree(tmp);
ffff800000801a20:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801a27:	48 89 c7             	mov    rdi,rax
ffff800000801a2a:	49 89 df             	mov    r15,rbx
ffff800000801a2d:	48 b8 d7 5a ee ff ff 	movabs rax,0xffffffffffee5ad7
ffff800000801a34:	ff ff ff 
ffff800000801a37:	48 01 d8             	add    rax,rbx
ffff800000801a3a:	ff d0                	call   rax
ffff800000801a3c:	eb 01                	jmp    ffff800000801a3f <printf+0x391>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:88
        return;//一次性输出不了太长
ffff800000801a3e:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:160
//                putchar (*((int *) arg++));
//                break;
//            }
//        }
//    }
}
ffff800000801a3f:	48 81 c4 00 01 00 00 	add    rsp,0x100
ffff800000801a46:	5b                   	pop    rbx
ffff800000801a47:	41 5f                	pop    r15
ffff800000801a49:	5d                   	pop    rbp
ffff800000801a4a:	c3                   	ret    

ffff800000801a4b <mmap>:
mmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:27
//以kb为单位
int high_mem_base=1024;
int mmap_t_i=0;

stat_t mmap(addr_t pa,addr_t la,u32 attr)
{
ffff800000801a4b:	f3 0f 1e fa          	endbr64 
ffff800000801a4f:	55                   	push   rbp
ffff800000801a50:	48 89 e5             	mov    rbp,rsp
ffff800000801a53:	41 57                	push   r15
ffff800000801a55:	48 83 ec 28          	sub    rsp,0x28
ffff800000801a59:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000801a59 <mmap+0xe>
ffff800000801a60:	49 bb bf ad 11 00 00 	movabs r11,0x11adbf
ffff800000801a67:	00 00 00 
ffff800000801a6a:	4c 01 d8             	add    rax,r11
ffff800000801a6d:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000801a71:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff800000801a75:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:28
    return smmap(pa,la,attr,current->pml4);
ffff800000801a78:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff800000801a7f:	ff ff ff 
ffff800000801a82:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000801a86:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000801a89:	48 8b 8a e0 00 00 00 	mov    rcx,QWORD PTR [rdx+0xe0]
ffff800000801a90:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000801a93:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff800000801a97:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
ffff800000801a9b:	49 89 c7             	mov    r15,rax
ffff800000801a9e:	49 b8 9c 52 ee ff ff 	movabs r8,0xffffffffffee529c
ffff800000801aa5:	ff ff ff 
ffff800000801aa8:	49 01 c0             	add    r8,rax
ffff800000801aab:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:58
    pt=(page_item*)((addr_t)pt & ~0xff);

    //在pt中找到la指向的page
    pt[la % PDE_SIZE / PAGE_SIZE]=pa|attr;//映射
    return NORMAL;*/
}
ffff800000801aae:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000801ab2:	c9                   	leave  
ffff800000801ab3:	c3                   	ret    

ffff800000801ab4 <smmap>:
smmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:60
stat_t smmap(addr_t pa,addr_t la,u32 attr,page_item* pml4p)
{
ffff800000801ab4:	f3 0f 1e fa          	endbr64 
ffff800000801ab8:	55                   	push   rbp
ffff800000801ab9:	48 89 e5             	mov    rbp,rsp
ffff800000801abc:	41 57                	push   r15
ffff800000801abe:	53                   	push   rbx
ffff800000801abf:	48 83 ec 40          	sub    rsp,0x40
ffff800000801ac3:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000801ac3 <smmap+0xf>
ffff800000801aca:	49 bb 55 ad 11 00 00 	movabs r11,0x11ad55
ffff800000801ad1:	00 00 00 
ffff800000801ad4:	4c 01 db             	add    rbx,r11
ffff800000801ad7:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000801adb:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffff800000801adf:	89 55 bc             	mov    DWORD PTR [rbp-0x44],edx
ffff800000801ae2:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:63
    //从pml4中找到la所属的pml4项目，即属于第几个512GB
    //canonical 高地址判断
    if(la>0x7ffffffffffful){
ffff800000801ae6:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffff
ffff800000801aed:	7f 00 00 
ffff800000801af0:	48 39 45 c0          	cmp    QWORD PTR [rbp-0x40],rax
ffff800000801af4:	76 0e                	jbe    ffff800000801b04 <smmap+0x50>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:64
        la&=~0xffff000000000000ul;
ffff800000801af6:	48 b8 ff ff ff ff ff 	movabs rax,0xffffffffffff
ffff800000801afd:	ff 00 00 
ffff800000801b00:	48 21 45 c0          	and    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:66
    }
    page_item *pdptp= (page_item *) (pml4p[la / PML4E_SIZE]);//指向的pdpt表
ffff800000801b04:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801b08:	48 c1 e8 27          	shr    rax,0x27
ffff800000801b0c:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000801b13:	00 
ffff800000801b14:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000801b18:	48 01 d0             	add    rax,rdx
ffff800000801b1b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801b1e:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:67
    int pml4i=la / PML4E_SIZE;
ffff800000801b22:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801b26:	48 c1 e8 27          	shr    rax,0x27
ffff800000801b2a:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:68
    if(!((unsigned long long)pdptp&PAGE_PRESENT))
ffff800000801b2d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801b31:	83 e0 01             	and    eax,0x1
ffff800000801b34:	48 85 c0             	test   rax,rax
ffff800000801b37:	75 6f                	jne    ffff800000801ba8 <smmap+0xf4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:70
    {
        pdptp=(page_item*) kmalloc();
ffff800000801b39:	49 89 df             	mov    r15,rbx
ffff800000801b3c:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801b41:	48 ba 68 57 ee ff ff 	movabs rdx,0xffffffffffee5768
ffff800000801b48:	ff ff ff 
ffff800000801b4b:	48 01 da             	add    rdx,rbx
ffff800000801b4e:	ff d2                	call   rdx
ffff800000801b50:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:71
        memset(pdptp,0,4096);
ffff800000801b54:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801b58:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000801b5d:	be 00 00 00 00       	mov    esi,0x0
ffff800000801b62:	48 89 c7             	mov    rdi,rax
ffff800000801b65:	49 89 df             	mov    r15,rbx
ffff800000801b68:	48 b8 6b 53 ef ff ff 	movabs rax,0xffffffffffef536b
ffff800000801b6f:	ff ff ff 
ffff800000801b72:	48 01 d8             	add    rax,rbx
ffff800000801b75:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:73
        //这里使用了狡猾的技巧：kmalloc的内存-KNL_BASE直接就是实际的物理地址
        pml4p[pml4i]=((addr_t)pdptp&~KNL_BASE)|attr;
ffff800000801b77:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801b7b:	48 ba ff ff ff ff ff 	movabs rdx,0x7fffffffffff
ffff800000801b82:	7f 00 00 
ffff800000801b85:	48 21 d0             	and    rax,rdx
ffff800000801b88:	48 89 c1             	mov    rcx,rax
ffff800000801b8b:	8b 55 bc             	mov    edx,DWORD PTR [rbp-0x44]
ffff800000801b8e:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000801b91:	48 98                	cdqe   
ffff800000801b93:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
ffff800000801b9a:	00 
ffff800000801b9b:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000801b9f:	48 01 f0             	add    rax,rsi
ffff800000801ba2:	48 09 ca             	or     rdx,rcx
ffff800000801ba5:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:75
    }
    pdptp=(page_item*)(((addr_t)pdptp&~0xff)|KNL_BASE);
ffff800000801ba8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801bac:	48 ba 00 ff ff ff ff 	movabs rdx,0x7fffffffff00
ffff800000801bb3:	7f 00 00 
ffff800000801bb6:	48 21 c2             	and    rdx,rax
ffff800000801bb9:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff800000801bc0:	80 ff ff 
ffff800000801bc3:	48 09 d0             	or     rax,rdx
ffff800000801bc6:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:78

    //在这个512GB（一张pdpt表）中找到la所属的pdpt项目，找到指向的pd
    int pdpti=la%PML4E_SIZE/PDPTE_SIZE;
ffff800000801bca:	48 b8 ff ff ff ff 7f 	movabs rax,0x7fffffffff
ffff800000801bd1:	00 00 00 
ffff800000801bd4:	48 23 45 c0          	and    rax,QWORD PTR [rbp-0x40]
ffff800000801bd8:	48 c1 e8 1e          	shr    rax,0x1e
ffff800000801bdc:	89 45 d0             	mov    DWORD PTR [rbp-0x30],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:79
    page_item* pdp= (page_item *) pdptp[pdpti];//指向的pd
ffff800000801bdf:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000801be2:	48 98                	cdqe   
ffff800000801be4:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000801beb:	00 
ffff800000801bec:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801bf0:	48 01 d0             	add    rax,rdx
ffff800000801bf3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801bf6:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:81
    //检查pdptp是否被占用
    if(!((unsigned long long)pdp&PAGE_PRESENT))
ffff800000801bfa:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801bfe:	83 e0 01             	and    eax,0x1
ffff800000801c01:	48 85 c0             	test   rax,rax
ffff800000801c04:	75 6f                	jne    ffff800000801c75 <smmap+0x1c1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:83
    {
        pdp=(page_item*) kmalloc();
ffff800000801c06:	49 89 df             	mov    r15,rbx
ffff800000801c09:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801c0e:	48 ba 68 57 ee ff ff 	movabs rdx,0xffffffffffee5768
ffff800000801c15:	ff ff ff 
ffff800000801c18:	48 01 da             	add    rdx,rbx
ffff800000801c1b:	ff d2                	call   rdx
ffff800000801c1d:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:84
        memset(pdp,0,4096);
ffff800000801c21:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801c25:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000801c2a:	be 00 00 00 00       	mov    esi,0x0
ffff800000801c2f:	48 89 c7             	mov    rdi,rax
ffff800000801c32:	49 89 df             	mov    r15,rbx
ffff800000801c35:	48 b8 6b 53 ef ff ff 	movabs rax,0xffffffffffef536b
ffff800000801c3c:	ff ff ff 
ffff800000801c3f:	48 01 d8             	add    rax,rbx
ffff800000801c42:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:85
        pdptp[pdpti]=((addr_t)pdp&~KNL_BASE)|attr;
ffff800000801c44:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801c48:	48 ba ff ff ff ff ff 	movabs rdx,0x7fffffffffff
ffff800000801c4f:	7f 00 00 
ffff800000801c52:	48 21 d0             	and    rax,rdx
ffff800000801c55:	48 89 c1             	mov    rcx,rax
ffff800000801c58:	8b 55 bc             	mov    edx,DWORD PTR [rbp-0x44]
ffff800000801c5b:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000801c5e:	48 98                	cdqe   
ffff800000801c60:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
ffff800000801c67:	00 
ffff800000801c68:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801c6c:	48 01 f0             	add    rax,rsi
ffff800000801c6f:	48 09 ca             	or     rdx,rcx
ffff800000801c72:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:87
    }
    pdp=(page_item*)(((addr_t)(pdp)&~0xff)|KNL_BASE);
ffff800000801c75:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801c79:	48 ba 00 ff ff ff ff 	movabs rdx,0x7fffffffff00
ffff800000801c80:	7f 00 00 
ffff800000801c83:	48 21 c2             	and    rdx,rax
ffff800000801c86:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff800000801c8d:	80 ff ff 
ffff800000801c90:	48 09 d0             	or     rax,rdx
ffff800000801c93:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:90

    //在pd中找到la指向的pt
    page_item* pt=(page_item*)pdp[la % PDPTE_SIZE / PDE_SIZE];
ffff800000801c97:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801c9b:	25 ff ff ff 3f       	and    eax,0x3fffffff
ffff800000801ca0:	48 c1 e8 15          	shr    rax,0x15
ffff800000801ca4:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000801cab:	00 
ffff800000801cac:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801cb0:	48 01 d0             	add    rax,rdx
ffff800000801cb3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801cb6:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:91
    if(!((unsigned long long)pt & PAGE_PRESENT))
ffff800000801cba:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000801cbe:	83 e0 01             	and    eax,0x1
ffff800000801cc1:	48 85 c0             	test   rax,rax
ffff800000801cc4:	75 77                	jne    ffff800000801d3d <smmap+0x289>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:93
    {
        pt=(page_item*) kmalloc();
ffff800000801cc6:	49 89 df             	mov    r15,rbx
ffff800000801cc9:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801cce:	48 ba 68 57 ee ff ff 	movabs rdx,0xffffffffffee5768
ffff800000801cd5:	ff ff ff 
ffff800000801cd8:	48 01 da             	add    rdx,rbx
ffff800000801cdb:	ff d2                	call   rdx
ffff800000801cdd:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:94
        memset(pt,0,4096);
ffff800000801ce1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000801ce5:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000801cea:	be 00 00 00 00       	mov    esi,0x0
ffff800000801cef:	48 89 c7             	mov    rdi,rax
ffff800000801cf2:	49 89 df             	mov    r15,rbx
ffff800000801cf5:	48 b8 6b 53 ef ff ff 	movabs rax,0xffffffffffef536b
ffff800000801cfc:	ff ff ff 
ffff800000801cff:	48 01 d8             	add    rax,rbx
ffff800000801d02:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:95
        pdp[la%PDPTE_SIZE/PDE_SIZE]= ((addr_t)pt&~KNL_BASE) | attr;
ffff800000801d04:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000801d08:	48 ba ff ff ff ff ff 	movabs rdx,0x7fffffffffff
ffff800000801d0f:	7f 00 00 
ffff800000801d12:	48 21 d0             	and    rax,rdx
ffff800000801d15:	48 89 c1             	mov    rcx,rax
ffff800000801d18:	8b 55 bc             	mov    edx,DWORD PTR [rbp-0x44]
ffff800000801d1b:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801d1f:	25 ff ff ff 3f       	and    eax,0x3fffffff
ffff800000801d24:	48 c1 e8 15          	shr    rax,0x15
ffff800000801d28:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
ffff800000801d2f:	00 
ffff800000801d30:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801d34:	48 01 f0             	add    rax,rsi
ffff800000801d37:	48 09 ca             	or     rdx,rcx
ffff800000801d3a:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:97
    }
    pt=(page_item*)(((addr_t)pt & ~0xff)|KNL_BASE);
ffff800000801d3d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000801d41:	48 ba 00 ff ff ff ff 	movabs rdx,0x7fffffffff00
ffff800000801d48:	7f 00 00 
ffff800000801d4b:	48 21 c2             	and    rdx,rax
ffff800000801d4e:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff800000801d55:	80 ff ff 
ffff800000801d58:	48 09 d0             	or     rax,rdx
ffff800000801d5b:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:100

    //在pt中找到la指向的page
    pt[la % PDE_SIZE / PAGE_4K_SIZE]=pa|attr;//映射
ffff800000801d5f:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
ffff800000801d62:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000801d66:	81 e2 ff ff 1f 00    	and    edx,0x1fffff
ffff800000801d6c:	48 c1 ea 0c          	shr    rdx,0xc
ffff800000801d70:	48 8d 0c d5 00 00 00 	lea    rcx,[rdx*8+0x0]
ffff800000801d77:	00 
ffff800000801d78:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000801d7c:	48 01 ca             	add    rdx,rcx
ffff800000801d7f:	48 0b 45 c8          	or     rax,QWORD PTR [rbp-0x38]
ffff800000801d83:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:101
    return NORMAL;
ffff800000801d86:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:102
}
ffff800000801d8b:	48 83 c4 40          	add    rsp,0x40
ffff800000801d8f:	5b                   	pop    rbx
ffff800000801d90:	41 5f                	pop    r15
ffff800000801d92:	5d                   	pop    rbp
ffff800000801d93:	c3                   	ret    

ffff800000801d94 <mdemap>:
mdemap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:105

stat_t mdemap(addr_t la)
{
ffff800000801d94:	f3 0f 1e fa          	endbr64 
ffff800000801d98:	55                   	push   rbp
ffff800000801d99:	48 89 e5             	mov    rbp,rsp
ffff800000801d9c:	41 57                	push   r15
ffff800000801d9e:	48 83 ec 18          	sub    rsp,0x18
ffff800000801da2:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000801da2 <mdemap+0xe>
ffff800000801da9:	49 bb 76 aa 11 00 00 	movabs r11,0x11aa76
ffff800000801db0:	00 00 00 
ffff800000801db3:	4c 01 d8             	add    rax,r11
ffff800000801db6:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:106
    return mmap(0l,la,0);
ffff800000801dba:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff800000801dbe:	ba 00 00 00 00       	mov    edx,0x0
ffff800000801dc3:	48 89 ce             	mov    rsi,rcx
ffff800000801dc6:	bf 00 00 00 00       	mov    edi,0x0
ffff800000801dcb:	49 89 c7             	mov    r15,rax
ffff800000801dce:	48 b9 33 52 ee ff ff 	movabs rcx,0xffffffffffee5233
ffff800000801dd5:	ff ff ff 
ffff800000801dd8:	48 01 c1             	add    rcx,rax
ffff800000801ddb:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:107
}
ffff800000801ddd:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000801de1:	c9                   	leave  
ffff800000801de2:	c3                   	ret    

ffff800000801de3 <init_paging>:
init_paging():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:109
int init_paging()
{
ffff800000801de3:	f3 0f 1e fa          	endbr64 
ffff800000801de7:	55                   	push   rbp
ffff800000801de8:	48 89 e5             	mov    rbp,rsp
ffff800000801deb:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000801deb <init_paging+0x8>
ffff800000801df2:	49 bb 2d aa 11 00 00 	movabs r11,0x11aa2d
ffff800000801df9:	00 00 00 
ffff800000801dfc:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:142
//    set_page_item(pml4,PDPT_ADDR,PAGE_PRESENT|PAGE_FOR_ALL|PAGE_RWX);
    //设置第一项pdpte，也就是内核空间
//    set_1gb_pdpt(pdpt,0,PAGE_RWX);//设置PDPT0x40000000ul
//    set_page_item(pdpt+1,PD_ADDR,PAGE_PRESENT|PAGE_FOR_ALL|PAGE_RWX);
    //把低512GB的空间取消映射，留给用户
    pml4[0]=0;
ffff800000801dff:	48 ba b0 ff ff ff ff 	movabs rdx,0xffffffffffffffb0
ffff800000801e06:	ff ff ff 
ffff800000801e09:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000801e0d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801e10:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:144
    #endif
}
ffff800000801e17:	90                   	nop
ffff800000801e18:	5d                   	pop    rbp
ffff800000801e19:	c3                   	ret    

ffff800000801e1a <set_high_mem_base>:
set_high_mem_base():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:146
void set_high_mem_base(int base)
{
ffff800000801e1a:	f3 0f 1e fa          	endbr64 
ffff800000801e1e:	55                   	push   rbp
ffff800000801e1f:	48 89 e5             	mov    rbp,rsp
ffff800000801e22:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000801e22 <set_high_mem_base+0x8>
ffff800000801e29:	49 bb f6 a9 11 00 00 	movabs r11,0x11a9f6
ffff800000801e30:	00 00 00 
ffff800000801e33:	4c 01 d8             	add    rax,r11
ffff800000801e36:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:147
    high_mem_base=base;
ffff800000801e39:	48 ba 00 fe ff ff ff 	movabs rdx,0xfffffffffffffe00
ffff800000801e40:	ff ff ff 
ffff800000801e43:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000801e47:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000801e4a:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:148
}
ffff800000801e4c:	90                   	nop
ffff800000801e4d:	5d                   	pop    rbp
ffff800000801e4e:	c3                   	ret    

ffff800000801e4f <set_mem_area>:
set_mem_area():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:150
void set_mem_area(unsigned long base, unsigned long len, unsigned long type)
{
ffff800000801e4f:	f3 0f 1e fa          	endbr64 
ffff800000801e53:	55                   	push   rbp
ffff800000801e54:	48 89 e5             	mov    rbp,rsp
ffff800000801e57:	41 57                	push   r15
ffff800000801e59:	48 83 ec 28          	sub    rsp,0x28
ffff800000801e5d:	4c 8d 05 f9 ff ff ff 	lea    r8,[rip+0xfffffffffffffff9]        # ffff800000801e5d <set_mem_area+0xe>
ffff800000801e64:	49 bb bb a9 11 00 00 	movabs r11,0x11a9bb
ffff800000801e6b:	00 00 00 
ffff800000801e6e:	4d 01 d8             	add    r8,r11
ffff800000801e71:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000801e75:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff800000801e79:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:151
    mmap_struct[mmap_t_i].base=base;
ffff800000801e7d:	48 b8 90 fe ff ff ff 	movabs rax,0xfffffffffffffe90
ffff800000801e84:	ff ff ff 
ffff800000801e87:	49 8b 04 00          	mov    rax,QWORD PTR [r8+rax*1]
ffff800000801e8b:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000801e8d:	48 ba a8 fd ff ff ff 	movabs rdx,0xfffffffffffffda8
ffff800000801e94:	ff ff ff 
ffff800000801e97:	49 8b 0c 10          	mov    rcx,QWORD PTR [r8+rdx*1]
ffff800000801e9b:	48 63 d0             	movsxd rdx,eax
ffff800000801e9e:	48 89 d0             	mov    rax,rdx
ffff800000801ea1:	48 01 c0             	add    rax,rax
ffff800000801ea4:	48 01 d0             	add    rax,rdx
ffff800000801ea7:	48 c1 e0 03          	shl    rax,0x3
ffff800000801eab:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
ffff800000801eaf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801eb3:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:152
    mmap_struct[mmap_t_i].len=len;
ffff800000801eb6:	48 b8 90 fe ff ff ff 	movabs rax,0xfffffffffffffe90
ffff800000801ebd:	ff ff ff 
ffff800000801ec0:	49 8b 04 00          	mov    rax,QWORD PTR [r8+rax*1]
ffff800000801ec4:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000801ec6:	48 ba a8 fd ff ff ff 	movabs rdx,0xfffffffffffffda8
ffff800000801ecd:	ff ff ff 
ffff800000801ed0:	49 8b 0c 10          	mov    rcx,QWORD PTR [r8+rdx*1]
ffff800000801ed4:	48 63 d0             	movsxd rdx,eax
ffff800000801ed7:	48 89 d0             	mov    rax,rdx
ffff800000801eda:	48 01 c0             	add    rax,rax
ffff800000801edd:	48 01 d0             	add    rax,rdx
ffff800000801ee0:	48 c1 e0 03          	shl    rax,0x3
ffff800000801ee4:	48 01 c8             	add    rax,rcx
ffff800000801ee7:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000801eeb:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801eef:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:153
    mmap_struct[mmap_t_i++].type=type;
ffff800000801ef2:	48 b8 90 fe ff ff ff 	movabs rax,0xfffffffffffffe90
ffff800000801ef9:	ff ff ff 
ffff800000801efc:	49 8b 04 00          	mov    rax,QWORD PTR [r8+rax*1]
ffff800000801f00:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000801f02:	8d 48 01             	lea    ecx,[rax+0x1]
ffff800000801f05:	48 ba 90 fe ff ff ff 	movabs rdx,0xfffffffffffffe90
ffff800000801f0c:	ff ff ff 
ffff800000801f0f:	49 8b 14 10          	mov    rdx,QWORD PTR [r8+rdx*1]
ffff800000801f13:	89 0a                	mov    DWORD PTR [rdx],ecx
ffff800000801f15:	48 ba a8 fd ff ff ff 	movabs rdx,0xfffffffffffffda8
ffff800000801f1c:	ff ff ff 
ffff800000801f1f:	49 8b 0c 10          	mov    rcx,QWORD PTR [r8+rdx*1]
ffff800000801f23:	48 63 d0             	movsxd rdx,eax
ffff800000801f26:	48 89 d0             	mov    rax,rdx
ffff800000801f29:	48 01 c0             	add    rax,rax
ffff800000801f2c:	48 01 d0             	add    rax,rdx
ffff800000801f2f:	48 c1 e0 03          	shl    rax,0x3
ffff800000801f33:	48 01 c8             	add    rax,rcx
ffff800000801f36:	48 8d 50 10          	lea    rdx,[rax+0x10]
ffff800000801f3a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000801f3e:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:154
    comprintf("mem info:base=0x%l,len=0x%l,type=%d\n",base,len,type);
ffff800000801f41:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff800000801f45:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000801f49:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801f4d:	48 89 c6             	mov    rsi,rax
ffff800000801f50:	48 b8 90 d7 ff ff ff 	movabs rax,0xffffffffffffd790
ffff800000801f57:	ff ff ff 
ffff800000801f5a:	49 8d 04 00          	lea    rax,[r8+rax*1]
ffff800000801f5e:	48 89 c7             	mov    rdi,rax
ffff800000801f61:	4d 89 c7             	mov    r15,r8
ffff800000801f64:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801f69:	49 b9 1b 4e ef ff ff 	movabs r9,0xffffffffffef4e1b
ffff800000801f70:	ff ff ff 
ffff800000801f73:	4d 01 c1             	add    r9,r8
ffff800000801f76:	41 ff d1             	call   r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:155
}
ffff800000801f79:	90                   	nop
ffff800000801f7a:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000801f7e:	c9                   	leave  
ffff800000801f7f:	c3                   	ret    

ffff800000801f80 <kmalloc>:
kmalloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:157
addr_t kmalloc()
{
ffff800000801f80:	f3 0f 1e fa          	endbr64 
ffff800000801f84:	55                   	push   rbp
ffff800000801f85:	48 89 e5             	mov    rbp,rsp
ffff800000801f88:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000801f88 <kmalloc+0x8>
ffff800000801f8f:	49 bb 90 a8 11 00 00 	movabs r11,0x11a890
ffff800000801f96:	00 00 00 
ffff800000801f99:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:158
    for(int i=0;i<VMALLOC_PGN/32;i++)
ffff800000801f9c:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000801fa3:	e9 c6 00 00 00       	jmp    ffff80000080206e <kmalloc+0xee>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:160
    {
        for(int j=0;j<32;j++)
ffff800000801fa8:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
ffff800000801faf:	e9 ac 00 00 00       	jmp    ffff800000802060 <kmalloc+0xe0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:162
        {
            if(!(vmalloc_map[i]&(1<<j)))
ffff800000801fb4:	48 ba 70 fd ff ff ff 	movabs rdx,0xfffffffffffffd70
ffff800000801fbb:	ff ff ff 
ffff800000801fbe:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000801fc2:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000801fc5:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000801fc8:	48 63 d2             	movsxd rdx,edx
ffff800000801fcb:	48 c1 e2 02          	shl    rdx,0x2
ffff800000801fcf:	48 01 ca             	add    rdx,rcx
ffff800000801fd2:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff800000801fd4:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff800000801fd7:	bf 01 00 00 00       	mov    edi,0x1
ffff800000801fdc:	89 d1                	mov    ecx,edx
ffff800000801fde:	d3 e7                	shl    edi,cl
ffff800000801fe0:	89 fa                	mov    edx,edi
ffff800000801fe2:	21 f2                	and    edx,esi
ffff800000801fe4:	85 d2                	test   edx,edx
ffff800000801fe6:	75 74                	jne    ffff80000080205c <kmalloc+0xdc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:164
            {
                vmalloc_map[i]|=(1<<j);
ffff800000801fe8:	48 ba 70 fd ff ff ff 	movabs rdx,0xfffffffffffffd70
ffff800000801fef:	ff ff ff 
ffff800000801ff2:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000801ff6:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000801ff9:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000801ffc:	48 63 d2             	movsxd rdx,edx
ffff800000801fff:	48 c1 e2 02          	shl    rdx,0x2
ffff800000802003:	48 01 ca             	add    rdx,rcx
ffff800000802006:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff800000802008:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff80000080200b:	bf 01 00 00 00       	mov    edi,0x1
ffff800000802010:	89 d1                	mov    ecx,edx
ffff800000802012:	d3 e7                	shl    edi,cl
ffff800000802014:	89 fa                	mov    edx,edi
ffff800000802016:	89 d1                	mov    ecx,edx
ffff800000802018:	48 ba 70 fd ff ff ff 	movabs rdx,0xfffffffffffffd70
ffff80000080201f:	ff ff ff 
ffff800000802022:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000802026:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802029:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000080202c:	48 98                	cdqe   
ffff80000080202e:	48 c1 e0 02          	shl    rax,0x2
ffff800000802032:	48 01 d0             	add    rax,rdx
ffff800000802035:	09 ce                	or     esi,ecx
ffff800000802037:	89 f2                	mov    edx,esi
ffff800000802039:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:165
                return VMALLOC_BASE+(i*32+j)*0x1000;
ffff80000080203b:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000080203e:	c1 e0 05             	shl    eax,0x5
ffff800000802041:	89 c2                	mov    edx,eax
ffff800000802043:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff800000802046:	01 d0                	add    eax,edx
ffff800000802048:	c1 e0 0c             	shl    eax,0xc
ffff80000080204b:	48 98                	cdqe   
ffff80000080204d:	48 ba 00 00 00 02 00 	movabs rdx,0xffff800002000000
ffff800000802054:	80 ff ff 
ffff800000802057:	48 01 d0             	add    rax,rdx
ffff80000080205a:	eb 1c                	jmp    ffff800000802078 <kmalloc+0xf8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:160 (discriminator 2)
        for(int j=0;j<32;j++)
ffff80000080205c:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:160 (discriminator 1)
ffff800000802060:	83 7d f8 1f          	cmp    DWORD PTR [rbp-0x8],0x1f
ffff800000802064:	0f 8e 4a ff ff ff    	jle    ffff800000801fb4 <kmalloc+0x34>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:158 (discriminator 2)
    for(int i=0;i<VMALLOC_PGN/32;i++)
ffff80000080206a:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:158 (discriminator 1)
ffff80000080206e:	83 7d fc 7f          	cmp    DWORD PTR [rbp-0x4],0x7f
ffff800000802072:	0f 8e 30 ff ff ff    	jle    ffff800000801fa8 <kmalloc+0x28>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:169
            }
        }
    }
}
ffff800000802078:	5d                   	pop    rbp
ffff800000802079:	c3                   	ret    

ffff80000080207a <kmallocat>:
kmallocat():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:171
addr_t kmallocat(addr_t addr,int pgc)
{
ffff80000080207a:	f3 0f 1e fa          	endbr64 
ffff80000080207e:	55                   	push   rbp
ffff80000080207f:	48 89 e5             	mov    rbp,rsp
ffff800000802082:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000802082 <kmallocat+0x8>
ffff800000802089:	49 bb 96 a7 11 00 00 	movabs r11,0x11a796
ffff800000802090:	00 00 00 
ffff800000802093:	4c 01 d8             	add    rax,r11
ffff800000802096:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff80000080209a:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:172
    int pi=(addr-VMALLOC_BASE)/PAGE_4K_SIZE;
ffff80000080209d:	48 b9 00 00 00 fe ff 	movabs rcx,0x7ffffe000000
ffff8000008020a4:	7f 00 00 
ffff8000008020a7:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff8000008020ab:	48 01 ca             	add    rdx,rcx
ffff8000008020ae:	48 c1 ea 0c          	shr    rdx,0xc
ffff8000008020b2:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:173
    if(addr==0){
ffff8000008020b5:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff8000008020ba:	0f 85 3f 01 00 00    	jne    ffff8000008021ff <kmallocat+0x185>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:174
        int l=0,p=0;
ffff8000008020c0:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff8000008020c7:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:175
        for(int i=0;i<kmalloc_pgc;i++){
ffff8000008020ce:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
ffff8000008020d5:	eb 63                	jmp    ffff80000080213a <kmallocat+0xc0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:176
            if(!(vmalloc_map[i/32]&(1u<<(i%32)))){
ffff8000008020d7:	48 ba 70 fd ff ff ff 	movabs rdx,0xfffffffffffffd70
ffff8000008020de:	ff ff ff 
ffff8000008020e1:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008020e5:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff8000008020e8:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff8000008020eb:	8d 4a 1f             	lea    ecx,[rdx+0x1f]
ffff8000008020ee:	85 d2                	test   edx,edx
ffff8000008020f0:	0f 48 d1             	cmovs  edx,ecx
ffff8000008020f3:	c1 fa 05             	sar    edx,0x5
ffff8000008020f6:	48 63 d2             	movsxd rdx,edx
ffff8000008020f9:	48 c1 e2 02          	shl    rdx,0x2
ffff8000008020fd:	48 01 f2             	add    rdx,rsi
ffff800000802100:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff800000802102:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff800000802105:	83 e2 1f             	and    edx,0x1f
ffff800000802108:	89 d1                	mov    ecx,edx
ffff80000080210a:	d3 ee                	shr    esi,cl
ffff80000080210c:	89 f2                	mov    edx,esi
ffff80000080210e:	83 e2 01             	and    edx,0x1
ffff800000802111:	85 d2                	test   edx,edx
ffff800000802113:	75 12                	jne    ffff800000802127 <kmallocat+0xad>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:177
                if(l==0)
ffff800000802115:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
ffff800000802119:	75 06                	jne    ffff800000802121 <kmallocat+0xa7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:178
                    p=i;//开头空页
ffff80000080211b:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff80000080211e:	89 55 f8             	mov    DWORD PTR [rbp-0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:179
                l++;
ffff800000802121:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
ffff800000802125:	eb 07                	jmp    ffff80000080212e <kmallocat+0xb4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:181
            } else
                l=0;
ffff800000802127:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:182
            if(l==pgc)break;
ffff80000080212e:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000802131:	3b 55 d4             	cmp    edx,DWORD PTR [rbp-0x2c]
ffff800000802134:	74 1b                	je     ffff800000802151 <kmallocat+0xd7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:175 (discriminator 2)
        for(int i=0;i<kmalloc_pgc;i++){
ffff800000802136:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:175 (discriminator 1)
ffff80000080213a:	48 ba 58 ff ff ff ff 	movabs rdx,0xffffffffffffff58
ffff800000802141:	ff ff ff 
ffff800000802144:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000802148:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff80000080214a:	39 55 f4             	cmp    DWORD PTR [rbp-0xc],edx
ffff80000080214d:	7c 88                	jl     ffff8000008020d7 <kmallocat+0x5d>
ffff80000080214f:	eb 01                	jmp    ffff800000802152 <kmallocat+0xd8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:182
            if(l==pgc)break;
ffff800000802151:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:184
        }
        if(l<pgc)return -1;
ffff800000802152:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000802155:	3b 55 d4             	cmp    edx,DWORD PTR [rbp-0x2c]
ffff800000802158:	7d 0c                	jge    ffff800000802166 <kmallocat+0xec>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:184 (discriminator 1)
ffff80000080215a:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff800000802161:	e9 87 01 00 00       	jmp    ffff8000008022ed <kmallocat+0x273>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:186
        //开始占用
        for(int i=0;i<pgc;i++){
ffff800000802166:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [rbp-0x10],0x0
ffff80000080216d:	eb 6e                	jmp    ffff8000008021dd <kmallocat+0x163>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:187 (discriminator 3)
            vmalloc_map[(p+i)/32]|=1u<<((p+i)%32);
ffff80000080216f:	48 ba 70 fd ff ff ff 	movabs rdx,0xfffffffffffffd70
ffff800000802176:	ff ff ff 
ffff800000802179:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080217d:	48 8b 3a             	mov    rdi,QWORD PTR [rdx]
ffff800000802180:	8b 4d f8             	mov    ecx,DWORD PTR [rbp-0x8]
ffff800000802183:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
ffff800000802186:	01 ca                	add    edx,ecx
ffff800000802188:	8d 4a 1f             	lea    ecx,[rdx+0x1f]
ffff80000080218b:	85 d2                	test   edx,edx
ffff80000080218d:	0f 48 d1             	cmovs  edx,ecx
ffff800000802190:	c1 fa 05             	sar    edx,0x5
ffff800000802193:	89 d6                	mov    esi,edx
ffff800000802195:	48 63 d6             	movsxd rdx,esi
ffff800000802198:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080219c:	48 01 fa             	add    rdx,rdi
ffff80000080219f:	8b 3a                	mov    edi,DWORD PTR [rdx]
ffff8000008021a1:	8b 4d f8             	mov    ecx,DWORD PTR [rbp-0x8]
ffff8000008021a4:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
ffff8000008021a7:	01 ca                	add    edx,ecx
ffff8000008021a9:	83 e2 1f             	and    edx,0x1f
ffff8000008021ac:	41 b8 01 00 00 00    	mov    r8d,0x1
ffff8000008021b2:	89 d1                	mov    ecx,edx
ffff8000008021b4:	41 d3 e0             	shl    r8d,cl
ffff8000008021b7:	48 ba 70 fd ff ff ff 	movabs rdx,0xfffffffffffffd70
ffff8000008021be:	ff ff ff 
ffff8000008021c1:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008021c5:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008021c8:	48 63 d6             	movsxd rdx,esi
ffff8000008021cb:	48 c1 e2 02          	shl    rdx,0x2
ffff8000008021cf:	48 01 ca             	add    rdx,rcx
ffff8000008021d2:	44 09 c7             	or     edi,r8d
ffff8000008021d5:	89 f9                	mov    ecx,edi
ffff8000008021d7:	89 0a                	mov    DWORD PTR [rdx],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:186 (discriminator 3)
        for(int i=0;i<pgc;i++){
ffff8000008021d9:	83 45 f0 01          	add    DWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:186 (discriminator 1)
ffff8000008021dd:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
ffff8000008021e0:	3b 55 d4             	cmp    edx,DWORD PTR [rbp-0x2c]
ffff8000008021e3:	7c 8a                	jl     ffff80000080216f <kmallocat+0xf5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:189
        }
        return VMALLOC_BASE+PAGE_4K_SIZE*p;
ffff8000008021e5:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff8000008021e8:	c1 e0 0c             	shl    eax,0xc
ffff8000008021eb:	48 98                	cdqe   
ffff8000008021ed:	48 ba 00 00 00 02 00 	movabs rdx,0xffff800002000000
ffff8000008021f4:	80 ff ff 
ffff8000008021f7:	48 01 d0             	add    rax,rdx
ffff8000008021fa:	e9 ee 00 00 00       	jmp    ffff8000008022ed <kmallocat+0x273>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:191
    }
    for(int i=0;i<pgc;i++){
ffff8000008021ff:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000802206:	eb 5c                	jmp    ffff800000802264 <kmallocat+0x1ea>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:192
        if(vmalloc_map[(pi+i)/32]&(1<<((pi+i)%32)))
ffff800000802208:	48 ba 70 fd ff ff ff 	movabs rdx,0xfffffffffffffd70
ffff80000080220f:	ff ff ff 
ffff800000802212:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000802216:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff800000802219:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
ffff80000080221c:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080221f:	01 ca                	add    edx,ecx
ffff800000802221:	8d 4a 1f             	lea    ecx,[rdx+0x1f]
ffff800000802224:	85 d2                	test   edx,edx
ffff800000802226:	0f 48 d1             	cmovs  edx,ecx
ffff800000802229:	c1 fa 05             	sar    edx,0x5
ffff80000080222c:	48 63 d2             	movsxd rdx,edx
ffff80000080222f:	48 c1 e2 02          	shl    rdx,0x2
ffff800000802233:	48 01 f2             	add    rdx,rsi
ffff800000802236:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff800000802238:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
ffff80000080223b:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080223e:	01 ca                	add    edx,ecx
ffff800000802240:	83 e2 1f             	and    edx,0x1f
ffff800000802243:	bf 01 00 00 00       	mov    edi,0x1
ffff800000802248:	89 d1                	mov    ecx,edx
ffff80000080224a:	d3 e7                	shl    edi,cl
ffff80000080224c:	89 fa                	mov    edx,edi
ffff80000080224e:	21 f2                	and    edx,esi
ffff800000802250:	85 d2                	test   edx,edx
ffff800000802252:	74 0c                	je     ffff800000802260 <kmallocat+0x1e6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:193
            return -1;
ffff800000802254:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff80000080225b:	e9 8d 00 00 00       	jmp    ffff8000008022ed <kmallocat+0x273>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:191 (discriminator 2)
    for(int i=0;i<pgc;i++){
ffff800000802260:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:191 (discriminator 1)
ffff800000802264:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000802267:	3b 55 d4             	cmp    edx,DWORD PTR [rbp-0x2c]
ffff80000080226a:	7c 9c                	jl     ffff800000802208 <kmallocat+0x18e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:196
    }
    //
    for(int i=0;i<pgc;i++){
ffff80000080226c:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff800000802273:	eb 6c                	jmp    ffff8000008022e1 <kmallocat+0x267>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:197 (discriminator 3)
        vmalloc_map[(pi+i)]|=(1<<((pi+i)%32));
ffff800000802275:	48 ba 70 fd ff ff ff 	movabs rdx,0xfffffffffffffd70
ffff80000080227c:	ff ff ff 
ffff80000080227f:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000802283:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000802286:	8b 75 e4             	mov    esi,DWORD PTR [rbp-0x1c]
ffff800000802289:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff80000080228c:	01 f2                	add    edx,esi
ffff80000080228e:	48 63 d2             	movsxd rdx,edx
ffff800000802291:	48 c1 e2 02          	shl    rdx,0x2
ffff800000802295:	48 01 ca             	add    rdx,rcx
ffff800000802298:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff80000080229a:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
ffff80000080229d:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff8000008022a0:	01 ca                	add    edx,ecx
ffff8000008022a2:	83 e2 1f             	and    edx,0x1f
ffff8000008022a5:	bf 01 00 00 00       	mov    edi,0x1
ffff8000008022aa:	89 d1                	mov    ecx,edx
ffff8000008022ac:	d3 e7                	shl    edi,cl
ffff8000008022ae:	89 fa                	mov    edx,edi
ffff8000008022b0:	41 89 d0             	mov    r8d,edx
ffff8000008022b3:	48 ba 70 fd ff ff ff 	movabs rdx,0xfffffffffffffd70
ffff8000008022ba:	ff ff ff 
ffff8000008022bd:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008022c1:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008022c4:	8b 7d e4             	mov    edi,DWORD PTR [rbp-0x1c]
ffff8000008022c7:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff8000008022ca:	01 fa                	add    edx,edi
ffff8000008022cc:	48 63 d2             	movsxd rdx,edx
ffff8000008022cf:	48 c1 e2 02          	shl    rdx,0x2
ffff8000008022d3:	48 01 ca             	add    rdx,rcx
ffff8000008022d6:	44 09 c6             	or     esi,r8d
ffff8000008022d9:	89 f1                	mov    ecx,esi
ffff8000008022db:	89 0a                	mov    DWORD PTR [rdx],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:196 (discriminator 3)
    for(int i=0;i<pgc;i++){
ffff8000008022dd:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:196 (discriminator 1)
ffff8000008022e1:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff8000008022e4:	3b 55 d4             	cmp    edx,DWORD PTR [rbp-0x2c]
ffff8000008022e7:	7c 8c                	jl     ffff800000802275 <kmallocat+0x1fb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:199
    }
    return addr;
ffff8000008022e9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:201

}
ffff8000008022ed:	5d                   	pop    rbp
ffff8000008022ee:	c3                   	ret    

ffff8000008022ef <kmfree>:
kmfree():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:204

int kmfree(addr_t ptr)
{
ffff8000008022ef:	f3 0f 1e fa          	endbr64 
ffff8000008022f3:	55                   	push   rbp
ffff8000008022f4:	48 89 e5             	mov    rbp,rsp
ffff8000008022f7:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff8000008022f7 <kmfree+0x8>
ffff8000008022fe:	49 bb 21 a5 11 00 00 	movabs r11,0x11a521
ffff800000802305:	00 00 00 
ffff800000802308:	4c 01 da             	add    rdx,r11
ffff80000080230b:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:205
    int num=ptr/PAGE_SIZE;
ffff80000080230f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802313:	48 c1 e8 0c          	shr    rax,0xc
ffff800000802317:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:206
    int n=num/32;
ffff80000080231a:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000080231d:	8d 48 1f             	lea    ecx,[rax+0x1f]
ffff800000802320:	85 c0                	test   eax,eax
ffff800000802322:	0f 48 c1             	cmovs  eax,ecx
ffff800000802325:	c1 f8 05             	sar    eax,0x5
ffff800000802328:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:207
    int r=num%32;
ffff80000080232b:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000080232e:	89 c1                	mov    ecx,eax
ffff800000802330:	c1 f9 1f             	sar    ecx,0x1f
ffff800000802333:	c1 e9 1b             	shr    ecx,0x1b
ffff800000802336:	01 c8                	add    eax,ecx
ffff800000802338:	83 e0 1f             	and    eax,0x1f
ffff80000080233b:	29 c8                	sub    eax,ecx
ffff80000080233d:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:208
    vmalloc_map[n]=vmalloc_map[n]&~(unsigned int)(1<<r);
ffff800000802340:	48 b8 70 fd ff ff ff 	movabs rax,0xfffffffffffffd70
ffff800000802347:	ff ff ff 
ffff80000080234a:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff80000080234e:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000802351:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff800000802354:	48 98                	cdqe   
ffff800000802356:	48 c1 e0 02          	shl    rax,0x2
ffff80000080235a:	48 01 c8             	add    rax,rcx
ffff80000080235d:	8b 30                	mov    esi,DWORD PTR [rax]
ffff80000080235f:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffff800000802362:	bf 01 00 00 00       	mov    edi,0x1
ffff800000802367:	89 c1                	mov    ecx,eax
ffff800000802369:	d3 e7                	shl    edi,cl
ffff80000080236b:	89 f8                	mov    eax,edi
ffff80000080236d:	f7 d0                	not    eax
ffff80000080236f:	89 c1                	mov    ecx,eax
ffff800000802371:	48 b8 70 fd ff ff ff 	movabs rax,0xfffffffffffffd70
ffff800000802378:	ff ff ff 
ffff80000080237b:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff80000080237f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802382:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff800000802385:	48 98                	cdqe   
ffff800000802387:	48 c1 e0 02          	shl    rax,0x2
ffff80000080238b:	48 01 d0             	add    rax,rdx
ffff80000080238e:	21 ce                	and    esi,ecx
ffff800000802390:	89 f2                	mov    edx,esi
ffff800000802392:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:209
}
ffff800000802394:	90                   	nop
ffff800000802395:	5d                   	pop    rbp
ffff800000802396:	c3                   	ret    

ffff800000802397 <page_err>:
page_err():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:210
void page_err(){
ffff800000802397:	f3 0f 1e fa          	endbr64 
ffff80000080239b:	55                   	push   rbp
ffff80000080239c:	48 89 e5             	mov    rbp,rsp
ffff80000080239f:	41 57                	push   r15
ffff8000008023a1:	41 55                	push   r13
ffff8000008023a3:	41 54                	push   r12
ffff8000008023a5:	53                   	push   rbx
ffff8000008023a6:	48 83 ec 20          	sub    rsp,0x20
ffff8000008023aa:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008023aa <page_err+0x13>
ffff8000008023b1:	49 bb 6e a4 11 00 00 	movabs r11,0x11a46e
ffff8000008023b8:	00 00 00 
ffff8000008023bb:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:211
    asm("cli");
ffff8000008023be:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:212
    printf("page err\n");
ffff8000008023bf:	48 b8 b5 d7 ff ff ff 	movabs rax,0xffffffffffffd7b5
ffff8000008023c6:	ff ff ff 
ffff8000008023c9:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008023cd:	48 89 c7             	mov    rdi,rax
ffff8000008023d0:	49 89 df             	mov    r15,rbx
ffff8000008023d3:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008023d8:	48 ba 96 4e ee ff ff 	movabs rdx,0xffffffffffee4e96
ffff8000008023df:	ff ff ff 
ffff8000008023e2:	48 01 da             	add    rdx,rbx
ffff8000008023e5:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:213
    unsigned long err_code=0,l_addr=0;
ffff8000008023e7:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff8000008023ee:	00 
ffff8000008023ef:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff8000008023f6:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:214
    asm volatile("mov 0(%%rbp),%0":"=r"(err_code));
ffff8000008023f7:	48 8b 45 00          	mov    rax,QWORD PTR [rbp+0x0]
ffff8000008023fb:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:215
    asm volatile("mov %%cr2,%0":"=r"(l_addr));//试图访问的地址
ffff8000008023ff:	0f 20 d0             	mov    rax,cr2
ffff800000802402:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:216
    int p=err_code&1;
ffff800000802406:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080240a:	83 e0 01             	and    eax,0x1
ffff80000080240d:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:218

    if(!p)
ffff800000802410:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
ffff800000802414:	75 72                	jne    ffff800000802488 <page_err+0xf1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:225
        //accessing non-existent page
        //检查地址合法性
        if(l_addr>=MEM_END)
            ;
        //在进程的页表中申请新页
        smmap(get_phyaddr(req_a_page()),l_addr&~0xfff,PAGE_PRESENT|PAGE_RWX|PAGE_FOR_ALL,current->pml4);
ffff800000802416:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff80000080241d:	ff ff ff 
ffff800000802420:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802424:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000802427:	4c 8b a0 e0 00 00 00 	mov    r12,QWORD PTR [rax+0xe0]
ffff80000080242e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000802432:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
ffff800000802438:	49 89 c5             	mov    r13,rax
ffff80000080243b:	49 89 df             	mov    r15,rbx
ffff80000080243e:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802443:	48 ba 13 62 ee ff ff 	movabs rdx,0xffffffffffee6213
ffff80000080244a:	ff ff ff 
ffff80000080244d:	48 01 da             	add    rdx,rbx
ffff800000802450:	ff d2                	call   rdx
ffff800000802452:	89 c7                	mov    edi,eax
ffff800000802454:	49 89 df             	mov    r15,rbx
ffff800000802457:	48 b8 00 66 ee ff ff 	movabs rax,0xffffffffffee6600
ffff80000080245e:	ff ff ff 
ffff800000802461:	48 01 d8             	add    rax,rbx
ffff800000802464:	ff d0                	call   rax
ffff800000802466:	48 98                	cdqe   
ffff800000802468:	4c 89 e1             	mov    rcx,r12
ffff80000080246b:	ba 07 00 00 00       	mov    edx,0x7
ffff800000802470:	4c 89 ee             	mov    rsi,r13
ffff800000802473:	48 89 c7             	mov    rdi,rax
ffff800000802476:	49 89 df             	mov    r15,rbx
ffff800000802479:	48 b8 9c 52 ee ff ff 	movabs rax,0xffffffffffee529c
ffff800000802480:	ff ff ff 
ffff800000802483:	48 01 d8             	add    rax,rbx
ffff800000802486:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:243
    }
    else
    {
        //page level protection
    }
    p=err_code&2;
ffff800000802488:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080248c:	83 e0 02             	and    eax,0x2
ffff80000080248f:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:244
    if(p)printf("when writing\n");else //puts("when reading");
ffff800000802492:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
ffff800000802496:	74 2a                	je     ffff8000008024c2 <page_err+0x12b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:244 (discriminator 1)
ffff800000802498:	48 b8 bf d7 ff ff ff 	movabs rax,0xffffffffffffd7bf
ffff80000080249f:	ff ff ff 
ffff8000008024a2:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008024a6:	48 89 c7             	mov    rdi,rax
ffff8000008024a9:	49 89 df             	mov    r15,rbx
ffff8000008024ac:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008024b1:	48 ba 96 4e ee ff ff 	movabs rdx,0xffffffffffee4e96
ffff8000008024b8:	ff ff ff 
ffff8000008024bb:	48 01 da             	add    rdx,rbx
ffff8000008024be:	ff d2                	call   rdx
ffff8000008024c0:	eb 0a                	jmp    ffff8000008024cc <page_err+0x135>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:245
    p=err_code&4;
ffff8000008024c2:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008024c6:	83 e0 04             	and    eax,0x4
ffff8000008024c9:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:246
    if(!p)printf("supervisor mode\n");else //puts("user mode");
ffff8000008024cc:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
ffff8000008024d0:	75 2a                	jne    ffff8000008024fc <page_err+0x165>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:246 (discriminator 1)
ffff8000008024d2:	48 b8 cd d7 ff ff ff 	movabs rax,0xffffffffffffd7cd
ffff8000008024d9:	ff ff ff 
ffff8000008024dc:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008024e0:	48 89 c7             	mov    rdi,rax
ffff8000008024e3:	49 89 df             	mov    r15,rbx
ffff8000008024e6:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008024eb:	48 ba 96 4e ee ff ff 	movabs rdx,0xffffffffffee4e96
ffff8000008024f2:	ff ff ff 
ffff8000008024f5:	48 01 da             	add    rdx,rbx
ffff8000008024f8:	ff d2                	call   rdx
ffff8000008024fa:	eb 0a                	jmp    ffff800000802506 <page_err+0x16f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:247
    p=err_code&16;
ffff8000008024fc:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000802500:	83 e0 10             	and    eax,0x10
ffff800000802503:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:248
    if(p)printf("an instruction tries to fetch\n");
ffff800000802506:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
ffff80000080250a:	74 28                	je     ffff800000802534 <page_err+0x19d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:248 (discriminator 1)
ffff80000080250c:	48 b8 e0 d7 ff ff ff 	movabs rax,0xffffffffffffd7e0
ffff800000802513:	ff ff ff 
ffff800000802516:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080251a:	48 89 c7             	mov    rdi,rax
ffff80000080251d:	49 89 df             	mov    r15,rbx
ffff800000802520:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802525:	48 ba 96 4e ee ff ff 	movabs rdx,0xffffffffffee4e96
ffff80000080252c:	ff ff ff 
ffff80000080252f:	48 01 da             	add    rdx,rbx
ffff800000802532:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:249
    unsigned int addr=0;
ffff800000802534:	c7 45 c4 00 00 00 00 	mov    DWORD PTR [rbp-0x3c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:250
    asm volatile("mov 8(%%rbp),%0":"=r"(addr));
ffff80000080253b:	8b 45 08             	mov    eax,DWORD PTR [rbp+0x8]
ffff80000080253e:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:251
    printf("occurred at %x(paddr), %x(laddr)\n",addr,l_addr);
ffff800000802541:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000802545:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff800000802548:	89 c6                	mov    esi,eax
ffff80000080254a:	48 b8 00 d8 ff ff ff 	movabs rax,0xffffffffffffd800
ffff800000802551:	ff ff ff 
ffff800000802554:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000802558:	48 89 c7             	mov    rdi,rax
ffff80000080255b:	49 89 df             	mov    r15,rbx
ffff80000080255e:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802563:	48 b9 96 4e ee ff ff 	movabs rcx,0xffffffffffee4e96
ffff80000080256a:	ff ff ff 
ffff80000080256d:	48 01 d9             	add    rcx,rbx
ffff800000802570:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:263
    }*/
    //杀死问题进程
//    del_proc(cur_proc);
    // printf("killed the problem process.\n");
    // printf("shell:>");
    eoi();
ffff800000802572:	49 89 df             	mov    r15,rbx
ffff800000802575:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080257a:	48 ba e6 b4 ee ff ff 	movabs rdx,0xffffffffffeeb4e6
ffff800000802581:	ff ff ff 
ffff800000802584:	48 01 da             	add    rdx,rbx
ffff800000802587:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:265
    //这里对esp的加法是必要的，因为page fault多push了一个错误码，但是iret识别不了
    __asm__ volatile ("sti \r\n  leave\n add $8,%rsp \n iretq");
ffff800000802589:	fb                   	sti    
ffff80000080258a:	c9                   	leave  
ffff80000080258b:	48 83 c4 08          	add    rsp,0x8
ffff80000080258f:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:266
}
ffff800000802591:	90                   	nop
ffff800000802592:	48 83 c4 20          	add    rsp,0x20
ffff800000802596:	5b                   	pop    rbx
ffff800000802597:	41 5c                	pop    r12
ffff800000802599:	41 5d                	pop    r13
ffff80000080259b:	41 5f                	pop    r15
ffff80000080259d:	5d                   	pop    rbp
ffff80000080259e:	c3                   	ret    

ffff80000080259f <init_memory>:
init_memory():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:268
void init_memory()
{
ffff80000080259f:	f3 0f 1e fa          	endbr64 
ffff8000008025a3:	55                   	push   rbp
ffff8000008025a4:	48 89 e5             	mov    rbp,rsp
ffff8000008025a7:	41 57                	push   r15
ffff8000008025a9:	53                   	push   rbx
ffff8000008025aa:	48 83 ec 60          	sub    rsp,0x60
ffff8000008025ae:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008025ae <init_memory+0xf>
ffff8000008025b5:	49 bb 6a a2 11 00 00 	movabs r11,0x11a26a
ffff8000008025bc:	00 00 00 
ffff8000008025bf:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:271
    extern addr_t _knl_end,_knl_start;//lds中声明的内核的结尾地址，放置位图
    //获取可用内存大小mem_size
    size_t tot_mem_size=mmap_struct[mmap_t_i-1].base+mmap_struct[mmap_t_i-1].len,mem_size=0;
ffff8000008025c2:	48 b8 90 fe ff ff ff 	movabs rax,0xfffffffffffffe90
ffff8000008025c9:	ff ff ff 
ffff8000008025cc:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008025d0:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008025d2:	8d 50 ff             	lea    edx,[rax-0x1]
ffff8000008025d5:	48 b8 a8 fd ff ff ff 	movabs rax,0xfffffffffffffda8
ffff8000008025dc:	ff ff ff 
ffff8000008025df:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff8000008025e3:	48 63 d2             	movsxd rdx,edx
ffff8000008025e6:	48 89 d0             	mov    rax,rdx
ffff8000008025e9:	48 01 c0             	add    rax,rax
ffff8000008025ec:	48 01 d0             	add    rax,rdx
ffff8000008025ef:	48 c1 e0 03          	shl    rax,0x3
ffff8000008025f3:	48 01 c8             	add    rax,rcx
ffff8000008025f6:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008025f9:	48 b8 90 fe ff ff ff 	movabs rax,0xfffffffffffffe90
ffff800000802600:	ff ff ff 
ffff800000802603:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802607:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000802609:	8d 50 ff             	lea    edx,[rax-0x1]
ffff80000080260c:	48 b8 a8 fd ff ff ff 	movabs rax,0xfffffffffffffda8
ffff800000802613:	ff ff ff 
ffff800000802616:	48 8b 34 03          	mov    rsi,QWORD PTR [rbx+rax*1]
ffff80000080261a:	48 63 d2             	movsxd rdx,edx
ffff80000080261d:	48 89 d0             	mov    rax,rdx
ffff800000802620:	48 01 c0             	add    rax,rax
ffff800000802623:	48 01 d0             	add    rax,rdx
ffff800000802626:	48 c1 e0 03          	shl    rax,0x3
ffff80000080262a:	48 01 f0             	add    rax,rsi
ffff80000080262d:	48 83 c0 08          	add    rax,0x8
ffff800000802631:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000802634:	48 01 c8             	add    rax,rcx
ffff800000802637:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
ffff80000080263b:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff800000802642:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:272
    for(int i=0;i<mmap_t_i;i++)
ffff800000802643:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff80000080264a:	eb 64                	jmp    ffff8000008026b0 <init_memory+0x111>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:274
    {
        if(mmap_struct[i].type==MULTIBOOT_MEMORY_AVAILABLE)
ffff80000080264c:	48 b8 a8 fd ff ff ff 	movabs rax,0xfffffffffffffda8
ffff800000802653:	ff ff ff 
ffff800000802656:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff80000080265a:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080265d:	48 63 d0             	movsxd rdx,eax
ffff800000802660:	48 89 d0             	mov    rax,rdx
ffff800000802663:	48 01 c0             	add    rax,rax
ffff800000802666:	48 01 d0             	add    rax,rdx
ffff800000802669:	48 c1 e0 03          	shl    rax,0x3
ffff80000080266d:	48 01 c8             	add    rax,rcx
ffff800000802670:	48 83 c0 10          	add    rax,0x10
ffff800000802674:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000802677:	48 83 f8 01          	cmp    rax,0x1
ffff80000080267b:	75 2f                	jne    ffff8000008026ac <init_memory+0x10d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:275
            mem_size+=mmap_struct[i].len;
ffff80000080267d:	48 b8 a8 fd ff ff ff 	movabs rax,0xfffffffffffffda8
ffff800000802684:	ff ff ff 
ffff800000802687:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff80000080268b:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080268e:	48 63 d0             	movsxd rdx,eax
ffff800000802691:	48 89 d0             	mov    rax,rdx
ffff800000802694:	48 01 c0             	add    rax,rax
ffff800000802697:	48 01 d0             	add    rax,rdx
ffff80000080269a:	48 c1 e0 03          	shl    rax,0x3
ffff80000080269e:	48 01 c8             	add    rax,rcx
ffff8000008026a1:	48 83 c0 08          	add    rax,0x8
ffff8000008026a5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008026a8:	48 01 45 e8          	add    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:272 (discriminator 2)
    for(int i=0;i<mmap_t_i;i++)
ffff8000008026ac:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:272 (discriminator 1)
ffff8000008026b0:	48 b8 90 fe ff ff ff 	movabs rax,0xfffffffffffffe90
ffff8000008026b7:	ff ff ff 
ffff8000008026ba:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008026be:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008026c0:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff8000008026c3:	7c 87                	jl     ffff80000080264c <init_memory+0xad>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:277
    }
    usr_mem_pa=PAGE_4K_ALIGN(mem_size/2);
ffff8000008026c5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008026c9:	48 d1 e8             	shr    rax,1
ffff8000008026cc:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff8000008026d2:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
ffff8000008026d8:	48 89 c2             	mov    rdx,rax
ffff8000008026db:	48 b8 30 fd ff ff ff 	movabs rax,0xfffffffffffffd30
ffff8000008026e2:	ff ff ff 
ffff8000008026e5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008026e9:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:284
    /*
     * 注：物理内存的一半会分给内核。
     * 前半部分是计算内存大小使多少个页，在位图中，一页表示为一位，所以除以后面部分，
     * 即一页位图可以有多少位。
     * */
    pmalloc_entc= tot_mem_size / PAGE_4K_SIZE/32;
ffff8000008026ec:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008026f0:	48 c1 e8 11          	shr    rax,0x11
ffff8000008026f4:	89 c2                	mov    edx,eax
ffff8000008026f6:	48 b8 28 ff ff ff ff 	movabs rax,0xffffffffffffff28
ffff8000008026fd:	ff ff ff 
ffff800000802700:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802704:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:285
    int pgc=(tot_mem_size/PAGE_4K_SIZE)/(PAGE_4K_SIZE*8);
ffff800000802706:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080270a:	48 c1 e8 1b          	shr    rax,0x1b
ffff80000080270e:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:287
    //计算出位图所需的字节数
    int pg_bytes=pgc>>5;//=/32
ffff800000802711:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffff800000802714:	c1 f8 05             	sar    eax,0x5
ffff800000802717:	89 45 b0             	mov    DWORD PTR [rbp-0x50],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:290
    //初始化vmalloc内存位图
    //计算位图需要多少个int
    size_t vmec= (mem_size/2-0x1000000)/PAGE_4K_SIZE/32;//去掉内核代码16M
ffff80000080271a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080271e:	48 d1 e8             	shr    rax,1
ffff800000802721:	48 2d 00 00 00 01    	sub    rax,0x1000000
ffff800000802727:	48 c1 e8 11          	shr    rax,0x11
ffff80000080272b:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:291
    size_t vmms=vmec*4/PAGE_4K_SIZE;//位图自己需要多少页
ffff80000080272f:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000802733:	48 c1 e0 02          	shl    rax,0x2
ffff800000802737:	48 c1 e8 0c          	shr    rax,0xc
ffff80000080273b:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:292
    comprintf("tot memsize:0x%l,available size 0x%l,kmalloc pages count:%d,kmalloc bitmap taking 0x%d pages\n", tot_mem_size,mem_size,vmec,vmms);
ffff80000080273f:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
ffff800000802743:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
ffff800000802747:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080274b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080274f:	49 89 f0             	mov    r8,rsi
ffff800000802752:	48 89 c6             	mov    rsi,rax
ffff800000802755:	48 b8 28 d8 ff ff ff 	movabs rax,0xffffffffffffd828
ffff80000080275c:	ff ff ff 
ffff80000080275f:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000802763:	48 89 c7             	mov    rdi,rax
ffff800000802766:	49 89 df             	mov    r15,rbx
ffff800000802769:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080276e:	49 b9 1b 4e ef ff ff 	movabs r9,0xffffffffffef4e1b
ffff800000802775:	ff ff ff 
ffff800000802778:	49 01 d9             	add    r9,rbx
ffff80000080277b:	41 ff d1             	call   r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:293
    if(vmec*4%PAGE_4K_SIZE)
ffff80000080277e:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000802782:	48 c1 e0 02          	shl    rax,0x2
ffff800000802786:	25 fc 0f 00 00       	and    eax,0xffc
ffff80000080278b:	48 85 c0             	test   rax,rax
ffff80000080278e:	74 05                	je     ffff800000802795 <init_memory+0x1f6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:294
        vmms++;
ffff800000802790:	48 83 45 d8 01       	add    QWORD PTR [rbp-0x28],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:295
    for(int i=0;i<vmec;i++){
ffff800000802795:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x0
ffff80000080279c:	eb 27                	jmp    ffff8000008027c5 <init_memory+0x226>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:296 (discriminator 3)
        vmalloc_map[i]=0;
ffff80000080279e:	48 b8 70 fd ff ff ff 	movabs rax,0xfffffffffffffd70
ffff8000008027a5:	ff ff ff 
ffff8000008027a8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008027ac:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008027af:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff8000008027b2:	48 98                	cdqe   
ffff8000008027b4:	48 c1 e0 02          	shl    rax,0x2
ffff8000008027b8:	48 01 d0             	add    rax,rdx
ffff8000008027bb:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:295 (discriminator 3)
    for(int i=0;i<vmec;i++){
ffff8000008027c1:	83 45 d4 01          	add    DWORD PTR [rbp-0x2c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:295 (discriminator 1)
ffff8000008027c5:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff8000008027c8:	48 98                	cdqe   
ffff8000008027ca:	48 39 45 a8          	cmp    QWORD PTR [rbp-0x58],rax
ffff8000008027ce:	77 ce                	ja     ffff80000080279e <init_memory+0x1ff>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:299
    }
    //位图占用前几页
    for(int i=0,j=0;j*32+i<vmms;i++)
ffff8000008027d0:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
ffff8000008027d7:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
ffff8000008027de:	eb 61                	jmp    ffff800000802841 <init_memory+0x2a2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:301
    {
        if(i==32)
ffff8000008027e0:	83 7d d0 20          	cmp    DWORD PTR [rbp-0x30],0x20
ffff8000008027e4:	75 0b                	jne    ffff8000008027f1 <init_memory+0x252>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:303
        {
            i=0;
ffff8000008027e6:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:304
            j++;
ffff8000008027ed:	83 45 cc 01          	add    DWORD PTR [rbp-0x34],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:306 (discriminator 2)
        }
        vmalloc_map[j]|=1u<<i;
ffff8000008027f1:	48 b8 70 fd ff ff ff 	movabs rax,0xfffffffffffffd70
ffff8000008027f8:	ff ff ff 
ffff8000008027fb:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008027ff:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802802:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000802805:	48 98                	cdqe   
ffff800000802807:	48 c1 e0 02          	shl    rax,0x2
ffff80000080280b:	48 01 d0             	add    rax,rdx
ffff80000080280e:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000802810:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000802813:	be 01 00 00 00       	mov    esi,0x1
ffff800000802818:	89 c1                	mov    ecx,eax
ffff80000080281a:	d3 e6                	shl    esi,cl
ffff80000080281c:	48 b8 70 fd ff ff ff 	movabs rax,0xfffffffffffffd70
ffff800000802823:	ff ff ff 
ffff800000802826:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080282a:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080282d:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000802830:	48 98                	cdqe   
ffff800000802832:	48 c1 e0 02          	shl    rax,0x2
ffff800000802836:	48 01 c8             	add    rax,rcx
ffff800000802839:	09 f2                	or     edx,esi
ffff80000080283b:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:299 (discriminator 2)
    for(int i=0,j=0;j*32+i<vmms;i++)
ffff80000080283d:	83 45 d0 01          	add    DWORD PTR [rbp-0x30],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:299 (discriminator 1)
ffff800000802841:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000802844:	c1 e0 05             	shl    eax,0x5
ffff800000802847:	89 c2                	mov    edx,eax
ffff800000802849:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff80000080284c:	01 d0                	add    eax,edx
ffff80000080284e:	48 98                	cdqe   
ffff800000802850:	48 39 45 d8          	cmp    QWORD PTR [rbp-0x28],rax
ffff800000802854:	77 8a                	ja     ffff8000008027e0 <init_memory+0x241>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:309
    }
    //kmalloc连续的内存
    page_map=kmallocat(0,pgc);//(unsigned int*)PAGE_4K_ALIGN(0xc00000);
ffff800000802856:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffff800000802859:	89 c6                	mov    esi,eax
ffff80000080285b:	bf 00 00 00 00       	mov    edi,0x0
ffff800000802860:	49 89 df             	mov    r15,rbx
ffff800000802863:	48 b8 62 58 ee ff ff 	movabs rax,0xffffffffffee5862
ffff80000080286a:	ff ff ff 
ffff80000080286d:	48 01 d8             	add    rax,rbx
ffff800000802870:	ff d0                	call   rax
ffff800000802872:	48 89 c2             	mov    rdx,rax
ffff800000802875:	48 b8 b0 fe ff ff ff 	movabs rax,0xfffffffffffffeb0
ffff80000080287c:	ff ff ff 
ffff80000080287f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802883:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:310
    int* p=page_map;
ffff800000802886:	48 b8 b0 fe ff ff ff 	movabs rax,0xfffffffffffffeb0
ffff80000080288d:	ff ff ff 
ffff800000802890:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802894:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000802897:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:311
    addr_t curp=0;
ffff80000080289b:	48 c7 45 98 00 00 00 	mov    QWORD PTR [rbp-0x68],0x0
ffff8000008028a2:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:313
    //不能使用的内存提前占用掉
    for(int i=0;i<mmap_t_i;i++){
ffff8000008028a3:	c7 45 c8 00 00 00 00 	mov    DWORD PTR [rbp-0x38],0x0
ffff8000008028aa:	e9 1f 01 00 00       	jmp    ffff8000008029ce <init_memory+0x42f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:314
        if(mmap_struct[i].type==MULTIBOOT_MEMORY_AVAILABLE)
ffff8000008028af:	48 b8 a8 fd ff ff ff 	movabs rax,0xfffffffffffffda8
ffff8000008028b6:	ff ff ff 
ffff8000008028b9:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff8000008028bd:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
ffff8000008028c0:	48 63 d0             	movsxd rdx,eax
ffff8000008028c3:	48 89 d0             	mov    rax,rdx
ffff8000008028c6:	48 01 c0             	add    rax,rax
ffff8000008028c9:	48 01 d0             	add    rax,rdx
ffff8000008028cc:	48 c1 e0 03          	shl    rax,0x3
ffff8000008028d0:	48 01 c8             	add    rax,rcx
ffff8000008028d3:	48 83 c0 10          	add    rax,0x10
ffff8000008028d7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008028da:	48 83 f8 01          	cmp    rax,0x1
ffff8000008028de:	0f 84 e5 00 00 00    	je     ffff8000008029c9 <init_memory+0x42a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:316
            continue;
        int b=(mmap_struct[i].base-usr_mem_pa)/PAGE_4K_SIZE;
ffff8000008028e4:	48 b8 a8 fd ff ff ff 	movabs rax,0xfffffffffffffda8
ffff8000008028eb:	ff ff ff 
ffff8000008028ee:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff8000008028f2:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
ffff8000008028f5:	48 63 d0             	movsxd rdx,eax
ffff8000008028f8:	48 89 d0             	mov    rax,rdx
ffff8000008028fb:	48 01 c0             	add    rax,rax
ffff8000008028fe:	48 01 d0             	add    rax,rdx
ffff800000802901:	48 c1 e0 03          	shl    rax,0x3
ffff800000802905:	48 01 c8             	add    rax,rcx
ffff800000802908:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080290b:	48 b8 30 fd ff ff ff 	movabs rax,0xfffffffffffffd30
ffff800000802912:	ff ff ff 
ffff800000802915:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802919:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080291c:	48 89 d0             	mov    rax,rdx
ffff80000080291f:	48 29 c8             	sub    rax,rcx
ffff800000802922:	48 c1 e8 0c          	shr    rax,0xc
ffff800000802926:	89 45 94             	mov    DWORD PTR [rbp-0x6c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:317
        int l=mmap_struct[i].len/PAGE_4K_SIZE;
ffff800000802929:	48 b8 a8 fd ff ff ff 	movabs rax,0xfffffffffffffda8
ffff800000802930:	ff ff ff 
ffff800000802933:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000802937:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
ffff80000080293a:	48 63 d0             	movsxd rdx,eax
ffff80000080293d:	48 89 d0             	mov    rax,rdx
ffff800000802940:	48 01 c0             	add    rax,rax
ffff800000802943:	48 01 d0             	add    rax,rdx
ffff800000802946:	48 c1 e0 03          	shl    rax,0x3
ffff80000080294a:	48 01 c8             	add    rax,rcx
ffff80000080294d:	48 83 c0 08          	add    rax,0x8
ffff800000802951:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000802954:	48 c1 e8 0c          	shr    rax,0xc
ffff800000802958:	89 45 90             	mov    DWORD PTR [rbp-0x70],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:318
        for(int j=0;j<l;j++){
ffff80000080295b:	c7 45 c4 00 00 00 00 	mov    DWORD PTR [rbp-0x3c],0x0
ffff800000802962:	eb 5b                	jmp    ffff8000008029bf <init_memory+0x420>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:319 (discriminator 3)
            p[b+j/32]|=1u<<(j%32);
ffff800000802964:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff800000802967:	8d 50 1f             	lea    edx,[rax+0x1f]
ffff80000080296a:	85 c0                	test   eax,eax
ffff80000080296c:	0f 48 c2             	cmovs  eax,edx
ffff80000080296f:	c1 f8 05             	sar    eax,0x5
ffff800000802972:	89 c6                	mov    esi,eax
ffff800000802974:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
ffff800000802977:	01 f0                	add    eax,esi
ffff800000802979:	48 98                	cdqe   
ffff80000080297b:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff800000802982:	00 
ffff800000802983:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000802987:	48 01 d0             	add    rax,rdx
ffff80000080298a:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080298c:	89 c7                	mov    edi,eax
ffff80000080298e:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff800000802991:	83 e0 1f             	and    eax,0x1f
ffff800000802994:	ba 01 00 00 00       	mov    edx,0x1
ffff800000802999:	89 c1                	mov    ecx,eax
ffff80000080299b:	d3 e2                	shl    edx,cl
ffff80000080299d:	89 d0                	mov    eax,edx
ffff80000080299f:	09 c7                	or     edi,eax
ffff8000008029a1:	89 fa                	mov    edx,edi
ffff8000008029a3:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
ffff8000008029a6:	01 f0                	add    eax,esi
ffff8000008029a8:	48 98                	cdqe   
ffff8000008029aa:	48 8d 0c 85 00 00 00 	lea    rcx,[rax*4+0x0]
ffff8000008029b1:	00 
ffff8000008029b2:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff8000008029b6:	48 01 c8             	add    rax,rcx
ffff8000008029b9:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:318 (discriminator 3)
        for(int j=0;j<l;j++){
ffff8000008029bb:	83 45 c4 01          	add    DWORD PTR [rbp-0x3c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:318 (discriminator 1)
ffff8000008029bf:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff8000008029c2:	3b 45 90             	cmp    eax,DWORD PTR [rbp-0x70]
ffff8000008029c5:	7c 9d                	jl     ffff800000802964 <init_memory+0x3c5>
ffff8000008029c7:	eb 01                	jmp    ffff8000008029ca <init_memory+0x42b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:315
            continue;
ffff8000008029c9:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:313 (discriminator 2)
    for(int i=0;i<mmap_t_i;i++){
ffff8000008029ca:	83 45 c8 01          	add    DWORD PTR [rbp-0x38],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:313 (discriminator 1)
ffff8000008029ce:	48 b8 90 fe ff ff ff 	movabs rax,0xfffffffffffffe90
ffff8000008029d5:	ff ff ff 
ffff8000008029d8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008029dc:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008029de:	39 45 c8             	cmp    DWORD PTR [rbp-0x38],eax
ffff8000008029e1:	0f 8c c8 fe ff ff    	jl     ffff8000008028af <init_memory+0x310>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:323
        }
    }
    //低1gb提前占用掉 knl
    for(int j=0;j<0x2000;j++){
ffff8000008029e7:	c7 45 c0 00 00 00 00 	mov    DWORD PTR [rbp-0x40],0x0
ffff8000008029ee:	eb 27                	jmp    ffff800000802a17 <init_memory+0x478>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:324 (discriminator 3)
        page_map[j]=-1;
ffff8000008029f0:	48 b8 b0 fe ff ff ff 	movabs rax,0xfffffffffffffeb0
ffff8000008029f7:	ff ff ff 
ffff8000008029fa:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008029fe:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802a01:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
ffff800000802a04:	48 98                	cdqe   
ffff800000802a06:	48 c1 e0 02          	shl    rax,0x2
ffff800000802a0a:	48 01 d0             	add    rax,rdx
ffff800000802a0d:	c7 00 ff ff ff ff    	mov    DWORD PTR [rax],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:323 (discriminator 3)
    for(int j=0;j<0x2000;j++){
ffff800000802a13:	83 45 c0 01          	add    DWORD PTR [rbp-0x40],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:323 (discriminator 1)
ffff800000802a17:	81 7d c0 ff 1f 00 00 	cmp    DWORD PTR [rbp-0x40],0x1fff
ffff800000802a1e:	7e d0                	jle    ffff8000008029f0 <init_memory+0x451>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:354
        pd[i+mapai]=ptpm|PAGE_PRESENT|PAGE_RWX;
    }
    page_item *pdpt=(addr_t)pml4[256]&PAGE_4K_MASK+KNL_BASE;
    pdpt[0]=pdpm|PAGE_PRESENT|PAGE_RWX;*/

}
ffff800000802a20:	90                   	nop
ffff800000802a21:	90                   	nop
ffff800000802a22:	48 83 c4 60          	add    rsp,0x60
ffff800000802a26:	5b                   	pop    rbx
ffff800000802a27:	41 5f                	pop    r15
ffff800000802a29:	5d                   	pop    rbp
ffff800000802a2a:	c3                   	ret    

ffff800000802a2b <req_a_page>:
req_a_page():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:360
/*
page_map存储方式:
0x00000000
little end
*/
addr_t req_a_page(){
ffff800000802a2b:	f3 0f 1e fa          	endbr64 
ffff800000802a2f:	55                   	push   rbp
ffff800000802a30:	48 89 e5             	mov    rbp,rsp
ffff800000802a33:	41 57                	push   r15
ffff800000802a35:	53                   	push   rbx
ffff800000802a36:	48 83 ec 10          	sub    rsp,0x10
ffff800000802a3a:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000802a3a <req_a_page+0xf>
ffff800000802a41:	49 bb de 9d 11 00 00 	movabs r11,0x119dde
ffff800000802a48:	00 00 00 
ffff800000802a4b:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:361
    for(int i=0; i < pmalloc_entc; i++){
ffff800000802a4e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000802a55:	e9 6b 01 00 00       	jmp    ffff800000802bc5 <req_a_page+0x19a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:362
        for(int j=0;j<32;j++){
ffff800000802a5a:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff800000802a61:	e9 51 01 00 00       	jmp    ffff800000802bb7 <req_a_page+0x18c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:363
            unsigned int bit=page_map[i]&(1<<j);
ffff800000802a66:	48 b8 b0 fe ff ff ff 	movabs rax,0xfffffffffffffeb0
ffff800000802a6d:	ff ff ff 
ffff800000802a70:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802a74:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802a77:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802a7a:	48 98                	cdqe   
ffff800000802a7c:	48 c1 e0 02          	shl    rax,0x2
ffff800000802a80:	48 01 d0             	add    rax,rdx
ffff800000802a83:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000802a85:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000802a88:	be 01 00 00 00       	mov    esi,0x1
ffff800000802a8d:	89 c1                	mov    ecx,eax
ffff800000802a8f:	d3 e6                	shl    esi,cl
ffff800000802a91:	89 f0                	mov    eax,esi
ffff800000802a93:	21 d0                	and    eax,edx
ffff800000802a95:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:364
            if((i*32+j)*4096>=0x100000&&(bit==0u))
ffff800000802a98:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802a9b:	c1 e0 05             	shl    eax,0x5
ffff800000802a9e:	89 c2                	mov    edx,eax
ffff800000802aa0:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000802aa3:	01 d0                	add    eax,edx
ffff800000802aa5:	c1 e0 0c             	shl    eax,0xc
ffff800000802aa8:	3d ff ff 0f 00       	cmp    eax,0xfffff
ffff800000802aad:	0f 8e 00 01 00 00    	jle    ffff800000802bb3 <req_a_page+0x188>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:364 (discriminator 1)
ffff800000802ab3:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
ffff800000802ab7:	0f 85 f6 00 00 00    	jne    ffff800000802bb3 <req_a_page+0x188>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:366
            {
                comprintf("req_a_page:before:page_map[%d]=0x%x,",i,page_map[i]);
ffff800000802abd:	48 b8 b0 fe ff ff ff 	movabs rax,0xfffffffffffffeb0
ffff800000802ac4:	ff ff ff 
ffff800000802ac7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802acb:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802ace:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802ad1:	48 98                	cdqe   
ffff800000802ad3:	48 c1 e0 02          	shl    rax,0x2
ffff800000802ad7:	48 01 d0             	add    rax,rdx
ffff800000802ada:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000802adc:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802adf:	89 c6                	mov    esi,eax
ffff800000802ae1:	48 b8 88 d8 ff ff ff 	movabs rax,0xffffffffffffd888
ffff800000802ae8:	ff ff ff 
ffff800000802aeb:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000802aef:	48 89 c7             	mov    rdi,rax
ffff800000802af2:	49 89 df             	mov    r15,rbx
ffff800000802af5:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802afa:	48 b9 1b 4e ef ff ff 	movabs rcx,0xffffffffffef4e1b
ffff800000802b01:	ff ff ff 
ffff800000802b04:	48 01 d9             	add    rcx,rbx
ffff800000802b07:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:367
                page_map[i]=page_map[i]|(1<<j);
ffff800000802b09:	48 b8 b0 fe ff ff ff 	movabs rax,0xfffffffffffffeb0
ffff800000802b10:	ff ff ff 
ffff800000802b13:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802b17:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802b1a:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802b1d:	48 98                	cdqe   
ffff800000802b1f:	48 c1 e0 02          	shl    rax,0x2
ffff800000802b23:	48 01 d0             	add    rax,rdx
ffff800000802b26:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000802b28:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000802b2b:	be 01 00 00 00       	mov    esi,0x1
ffff800000802b30:	89 c1                	mov    ecx,eax
ffff800000802b32:	d3 e6                	shl    esi,cl
ffff800000802b34:	89 f0                	mov    eax,esi
ffff800000802b36:	89 c6                	mov    esi,eax
ffff800000802b38:	48 b8 b0 fe ff ff ff 	movabs rax,0xfffffffffffffeb0
ffff800000802b3f:	ff ff ff 
ffff800000802b42:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802b46:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000802b49:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802b4c:	48 98                	cdqe   
ffff800000802b4e:	48 c1 e0 02          	shl    rax,0x2
ffff800000802b52:	48 01 c8             	add    rax,rcx
ffff800000802b55:	09 f2                	or     edx,esi
ffff800000802b57:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:368
                comprintf("now = 0x%x",page_map[i]);
ffff800000802b59:	48 b8 b0 fe ff ff ff 	movabs rax,0xfffffffffffffeb0
ffff800000802b60:	ff ff ff 
ffff800000802b63:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802b67:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802b6a:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802b6d:	48 98                	cdqe   
ffff800000802b6f:	48 c1 e0 02          	shl    rax,0x2
ffff800000802b73:	48 01 d0             	add    rax,rdx
ffff800000802b76:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000802b78:	89 c6                	mov    esi,eax
ffff800000802b7a:	48 b8 ad d8 ff ff ff 	movabs rax,0xffffffffffffd8ad
ffff800000802b81:	ff ff ff 
ffff800000802b84:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000802b88:	48 89 c7             	mov    rdi,rax
ffff800000802b8b:	49 89 df             	mov    r15,rbx
ffff800000802b8e:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802b93:	48 ba 1b 4e ef ff ff 	movabs rdx,0xffffffffffef4e1b
ffff800000802b9a:	ff ff ff 
ffff800000802b9d:	48 01 da             	add    rdx,rbx
ffff800000802ba0:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:369
                return i*32+j;//num of page
ffff800000802ba2:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802ba5:	c1 e0 05             	shl    eax,0x5
ffff800000802ba8:	89 c2                	mov    edx,eax
ffff800000802baa:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000802bad:	01 d0                	add    eax,edx
ffff800000802baf:	48 98                	cdqe   
ffff800000802bb1:	eb 32                	jmp    ffff800000802be5 <req_a_page+0x1ba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:362 (discriminator 2)
        for(int j=0;j<32;j++){
ffff800000802bb3:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:362 (discriminator 1)
ffff800000802bb7:	83 7d e8 1f          	cmp    DWORD PTR [rbp-0x18],0x1f
ffff800000802bbb:	0f 8e a5 fe ff ff    	jle    ffff800000802a66 <req_a_page+0x3b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:361 (discriminator 2)
    for(int i=0; i < pmalloc_entc; i++){
ffff800000802bc1:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:361 (discriminator 1)
ffff800000802bc5:	48 b8 28 ff ff ff ff 	movabs rax,0xffffffffffffff28
ffff800000802bcc:	ff ff ff 
ffff800000802bcf:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802bd3:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000802bd5:	39 45 ec             	cmp    DWORD PTR [rbp-0x14],eax
ffff800000802bd8:	0f 8c 7c fe ff ff    	jl     ffff800000802a5a <req_a_page+0x2f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:374

            }
        }
    }
    return -1;
ffff800000802bde:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:375
}
ffff800000802be5:	48 83 c4 10          	add    rsp,0x10
ffff800000802be9:	5b                   	pop    rbx
ffff800000802bea:	41 5f                	pop    r15
ffff800000802bec:	5d                   	pop    rbp
ffff800000802bed:	c3                   	ret    

ffff800000802bee <pmalloc>:
pmalloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:377

void * pmalloc(){
ffff800000802bee:	f3 0f 1e fa          	endbr64 
ffff800000802bf2:	55                   	push   rbp
ffff800000802bf3:	48 89 e5             	mov    rbp,rsp
ffff800000802bf6:	41 57                	push   r15
ffff800000802bf8:	53                   	push   rbx
ffff800000802bf9:	48 83 ec 10          	sub    rsp,0x10
ffff800000802bfd:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000802bfd <pmalloc+0xf>
ffff800000802c04:	49 bb 1b 9c 11 00 00 	movabs r11,0x119c1b
ffff800000802c0b:	00 00 00 
ffff800000802c0e:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:378
    void *ret=(void*)(get_phyaddr(req_a_page()));
ffff800000802c11:	49 89 df             	mov    r15,rbx
ffff800000802c14:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802c19:	48 ba 13 62 ee ff ff 	movabs rdx,0xffffffffffee6213
ffff800000802c20:	ff ff ff 
ffff800000802c23:	48 01 da             	add    rdx,rbx
ffff800000802c26:	ff d2                	call   rdx
ffff800000802c28:	89 c7                	mov    edi,eax
ffff800000802c2a:	49 89 df             	mov    r15,rbx
ffff800000802c2d:	48 b8 00 66 ee ff ff 	movabs rax,0xffffffffffee6600
ffff800000802c34:	ff ff ff 
ffff800000802c37:	48 01 d8             	add    rax,rbx
ffff800000802c3a:	ff d0                	call   rax
ffff800000802c3c:	48 98                	cdqe   
ffff800000802c3e:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:379
    comprintf("pmalloc():%l\n",ret);
ffff800000802c42:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802c46:	48 89 c6             	mov    rsi,rax
ffff800000802c49:	48 b8 b8 d8 ff ff ff 	movabs rax,0xffffffffffffd8b8
ffff800000802c50:	ff ff ff 
ffff800000802c53:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000802c57:	48 89 c7             	mov    rdi,rax
ffff800000802c5a:	49 89 df             	mov    r15,rbx
ffff800000802c5d:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802c62:	48 ba 1b 4e ef ff ff 	movabs rdx,0xffffffffffef4e1b
ffff800000802c69:	ff ff ff 
ffff800000802c6c:	48 01 da             	add    rdx,rbx
ffff800000802c6f:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:380
    return ret;
ffff800000802c71:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:381
}
ffff800000802c75:	48 83 c4 10          	add    rsp,0x10
ffff800000802c79:	5b                   	pop    rbx
ffff800000802c7a:	41 5f                	pop    r15
ffff800000802c7c:	5d                   	pop    rbp
ffff800000802c7d:	c3                   	ret    

ffff800000802c7e <free_page>:
free_page():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:382
int free_page(char *paddr){
ffff800000802c7e:	f3 0f 1e fa          	endbr64 
ffff800000802c82:	55                   	push   rbp
ffff800000802c83:	48 89 e5             	mov    rbp,rsp
ffff800000802c86:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000802c86 <free_page+0x8>
ffff800000802c8d:	49 bb 92 9b 11 00 00 	movabs r11,0x119b92
ffff800000802c94:	00 00 00 
ffff800000802c97:	4c 01 da             	add    rdx,r11
ffff800000802c9a:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:383
    int num=(int)paddr/4096;
ffff800000802c9e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802ca2:	8d 88 ff 0f 00 00    	lea    ecx,[rax+0xfff]
ffff800000802ca8:	85 c0                	test   eax,eax
ffff800000802caa:	0f 48 c1             	cmovs  eax,ecx
ffff800000802cad:	c1 f8 0c             	sar    eax,0xc
ffff800000802cb0:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:384
    int n=num/32;
ffff800000802cb3:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802cb6:	8d 48 1f             	lea    ecx,[rax+0x1f]
ffff800000802cb9:	85 c0                	test   eax,eax
ffff800000802cbb:	0f 48 c1             	cmovs  eax,ecx
ffff800000802cbe:	c1 f8 05             	sar    eax,0x5
ffff800000802cc1:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:385
    int r=num%32;
ffff800000802cc4:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802cc7:	89 c1                	mov    ecx,eax
ffff800000802cc9:	c1 f9 1f             	sar    ecx,0x1f
ffff800000802ccc:	c1 e9 1b             	shr    ecx,0x1b
ffff800000802ccf:	01 c8                	add    eax,ecx
ffff800000802cd1:	83 e0 1f             	and    eax,0x1f
ffff800000802cd4:	29 c8                	sub    eax,ecx
ffff800000802cd6:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:386
    page_map[n]=page_map[n]&~(unsigned int)(1<<r);
ffff800000802cd9:	48 b8 b0 fe ff ff ff 	movabs rax,0xfffffffffffffeb0
ffff800000802ce0:	ff ff ff 
ffff800000802ce3:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000802ce7:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000802cea:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff800000802ced:	48 98                	cdqe   
ffff800000802cef:	48 c1 e0 02          	shl    rax,0x2
ffff800000802cf3:	48 01 c8             	add    rax,rcx
ffff800000802cf6:	8b 30                	mov    esi,DWORD PTR [rax]
ffff800000802cf8:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffff800000802cfb:	bf 01 00 00 00       	mov    edi,0x1
ffff800000802d00:	89 c1                	mov    ecx,eax
ffff800000802d02:	d3 e7                	shl    edi,cl
ffff800000802d04:	89 f8                	mov    eax,edi
ffff800000802d06:	f7 d0                	not    eax
ffff800000802d08:	89 c1                	mov    ecx,eax
ffff800000802d0a:	48 b8 b0 fe ff ff ff 	movabs rax,0xfffffffffffffeb0
ffff800000802d11:	ff ff ff 
ffff800000802d14:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000802d18:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802d1b:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff800000802d1e:	48 98                	cdqe   
ffff800000802d20:	48 c1 e0 02          	shl    rax,0x2
ffff800000802d24:	48 01 d0             	add    rax,rdx
ffff800000802d27:	21 ce                	and    esi,ecx
ffff800000802d29:	89 f2                	mov    edx,esi
ffff800000802d2b:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:387
}
ffff800000802d2d:	90                   	nop
ffff800000802d2e:	5d                   	pop    rbp
ffff800000802d2f:	c3                   	ret    

ffff800000802d30 <free_pages_at>:
free_pages_at():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:389

int free_pages_at(int base,int pgn){
ffff800000802d30:	f3 0f 1e fa          	endbr64 
ffff800000802d34:	55                   	push   rbp
ffff800000802d35:	48 89 e5             	mov    rbp,rsp
ffff800000802d38:	41 57                	push   r15
ffff800000802d3a:	53                   	push   rbx
ffff800000802d3b:	48 83 ec 20          	sub    rsp,0x20
ffff800000802d3f:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000802d3f <free_pages_at+0xf>
ffff800000802d46:	49 bb d9 9a 11 00 00 	movabs r11,0x119ad9
ffff800000802d4d:	00 00 00 
ffff800000802d50:	4c 01 db             	add    rbx,r11
ffff800000802d53:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff800000802d56:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:390
    for(int i=0;i<pgn;i++){
ffff800000802d59:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000802d60:	eb 28                	jmp    ffff800000802d8a <free_pages_at+0x5a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:391 (discriminator 3)
        free_page(base+i*PAGE_4K_SIZE);
ffff800000802d62:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802d65:	c1 e0 0c             	shl    eax,0xc
ffff800000802d68:	89 c2                	mov    edx,eax
ffff800000802d6a:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000802d6d:	01 d0                	add    eax,edx
ffff800000802d6f:	48 98                	cdqe   
ffff800000802d71:	48 89 c7             	mov    rdi,rax
ffff800000802d74:	49 89 df             	mov    r15,rbx
ffff800000802d77:	48 b8 66 64 ee ff ff 	movabs rax,0xffffffffffee6466
ffff800000802d7e:	ff ff ff 
ffff800000802d81:	48 01 d8             	add    rax,rbx
ffff800000802d84:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:390 (discriminator 3)
    for(int i=0;i<pgn;i++){
ffff800000802d86:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:390 (discriminator 1)
ffff800000802d8a:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802d8d:	3b 45 d8             	cmp    eax,DWORD PTR [rbp-0x28]
ffff800000802d90:	7c d0                	jl     ffff800000802d62 <free_pages_at+0x32>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:393
    }
}
ffff800000802d92:	90                   	nop
ffff800000802d93:	48 83 c4 20          	add    rsp,0x20
ffff800000802d97:	5b                   	pop    rbx
ffff800000802d98:	41 5f                	pop    r15
ffff800000802d9a:	5d                   	pop    rbp
ffff800000802d9b:	c3                   	ret    

ffff800000802d9c <check_page>:
check_page():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:394
int check_page(int num){
ffff800000802d9c:	f3 0f 1e fa          	endbr64 
ffff800000802da0:	55                   	push   rbp
ffff800000802da1:	48 89 e5             	mov    rbp,rsp
ffff800000802da4:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000802da4 <check_page+0x8>
ffff800000802dab:	49 bb 74 9a 11 00 00 	movabs r11,0x119a74
ffff800000802db2:	00 00 00 
ffff800000802db5:	4c 01 da             	add    rdx,r11
ffff800000802db8:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:395
    int n=num/32;
ffff800000802dbb:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802dbe:	8d 48 1f             	lea    ecx,[rax+0x1f]
ffff800000802dc1:	85 c0                	test   eax,eax
ffff800000802dc3:	0f 48 c1             	cmovs  eax,ecx
ffff800000802dc6:	c1 f8 05             	sar    eax,0x5
ffff800000802dc9:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:396
    int r=num%32;
ffff800000802dcc:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802dcf:	89 c1                	mov    ecx,eax
ffff800000802dd1:	c1 f9 1f             	sar    ecx,0x1f
ffff800000802dd4:	c1 e9 1b             	shr    ecx,0x1b
ffff800000802dd7:	01 c8                	add    eax,ecx
ffff800000802dd9:	83 e0 1f             	and    eax,0x1f
ffff800000802ddc:	29 c8                	sub    eax,ecx
ffff800000802dde:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:397
    int bit=page_map[n]&(1<<r);
ffff800000802de1:	48 b8 b0 fe ff ff ff 	movabs rax,0xfffffffffffffeb0
ffff800000802de8:	ff ff ff 
ffff800000802deb:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000802def:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802df2:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802df5:	48 98                	cdqe   
ffff800000802df7:	48 c1 e0 02          	shl    rax,0x2
ffff800000802dfb:	48 01 d0             	add    rax,rdx
ffff800000802dfe:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000802e00:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff800000802e03:	be 01 00 00 00       	mov    esi,0x1
ffff800000802e08:	89 c1                	mov    ecx,eax
ffff800000802e0a:	d3 e6                	shl    esi,cl
ffff800000802e0c:	89 f0                	mov    eax,esi
ffff800000802e0e:	21 d0                	and    eax,edx
ffff800000802e10:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:398
    return bit;
ffff800000802e13:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:399
}
ffff800000802e16:	5d                   	pop    rbp
ffff800000802e17:	c3                   	ret    

ffff800000802e18 <get_phyaddr>:
get_phyaddr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:403
/*
 * 获得这个页对应的物理内存地址
 * */
int get_phyaddr(int num){
ffff800000802e18:	f3 0f 1e fa          	endbr64 
ffff800000802e1c:	55                   	push   rbp
ffff800000802e1d:	48 89 e5             	mov    rbp,rsp
ffff800000802e20:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000802e20 <get_phyaddr+0x8>
ffff800000802e27:	49 bb f8 99 11 00 00 	movabs r11,0x1199f8
ffff800000802e2e:	00 00 00 
ffff800000802e31:	4c 01 d8             	add    rax,r11
ffff800000802e34:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:404
    if(num==-1)return -1;
ffff800000802e37:	83 7d fc ff          	cmp    DWORD PTR [rbp-0x4],0xffffffff
ffff800000802e3b:	75 07                	jne    ffff800000802e44 <get_phyaddr+0x2c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:404 (discriminator 1)
ffff800000802e3d:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000802e42:	eb 06                	jmp    ffff800000802e4a <get_phyaddr+0x32>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:405
    return num*0x1000;
ffff800000802e44:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802e47:	c1 e0 0c             	shl    eax,0xc
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:406
}
ffff800000802e4a:	5d                   	pop    rbp
ffff800000802e4b:	c3                   	ret    

ffff800000802e4c <set_page_item>:
set_page_item():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:409

void set_page_item(page_item *item_addr,int phy_addr,int attr)
{
ffff800000802e4c:	f3 0f 1e fa          	endbr64 
ffff800000802e50:	55                   	push   rbp
ffff800000802e51:	48 89 e5             	mov    rbp,rsp
ffff800000802e54:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000802e54 <set_page_item+0x8>
ffff800000802e5b:	49 bb c4 99 11 00 00 	movabs r11,0x1199c4
ffff800000802e62:	00 00 00 
ffff800000802e65:	4c 01 d8             	add    rax,r11
ffff800000802e68:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000802e6c:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
ffff800000802e6f:	89 55 f0             	mov    DWORD PTR [rbp-0x10],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:410
    *item_addr=0;
ffff800000802e72:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000802e76:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:411
    *item_addr|=phy_addr&0xfffff000;
ffff800000802e7d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000802e81:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802e84:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffff800000802e87:	89 c0                	mov    eax,eax
ffff800000802e89:	25 00 f0 ff ff       	and    eax,0xfffff000
ffff800000802e8e:	48 09 c2             	or     rdx,rax
ffff800000802e91:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000802e95:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:412
    *item_addr|=attr;
ffff800000802e98:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000802e9c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802e9f:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
ffff800000802ea2:	48 98                	cdqe   
ffff800000802ea4:	48 09 c2             	or     rdx,rax
ffff800000802ea7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000802eab:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:413
}
ffff800000802eae:	90                   	nop
ffff800000802eaf:	5d                   	pop    rbp
ffff800000802eb0:	c3                   	ret    

ffff800000802eb1 <set_1gb_pdpt>:
set_1gb_pdpt():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:415
void set_1gb_pdpt(page_item* ppdpt,int pa,unsigned int extra_attr)
{
ffff800000802eb1:	f3 0f 1e fa          	endbr64 
ffff800000802eb5:	55                   	push   rbp
ffff800000802eb6:	48 89 e5             	mov    rbp,rsp
ffff800000802eb9:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000802eb9 <set_1gb_pdpt+0x8>
ffff800000802ec0:	49 bb 5f 99 11 00 00 	movabs r11,0x11995f
ffff800000802ec7:	00 00 00 
ffff800000802eca:	4c 01 d8             	add    rax,r11
ffff800000802ecd:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000802ed1:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
ffff800000802ed4:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:416
    *ppdpt=0;
ffff800000802ed7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802edb:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:417
    *ppdpt|=PAGE_PRESENT|PDPTE_1GB|extra_attr;
ffff800000802ee2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802ee6:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802ee9:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000802eec:	0c 81                	or     al,0x81
ffff800000802eee:	89 c0                	mov    eax,eax
ffff800000802ef0:	48 09 c2             	or     rdx,rax
ffff800000802ef3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802ef7:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:418
    unsigned int hipa=pa&0xffffc0000000ul;
ffff800000802efa:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000802efd:	25 00 00 00 c0       	and    eax,0xc0000000
ffff800000802f02:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:419
    *ppdpt|=hipa;
ffff800000802f05:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802f09:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802f0c:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802f0f:	48 09 c2             	or     rdx,rax
ffff800000802f12:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802f16:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:420
}
ffff800000802f19:	90                   	nop
ffff800000802f1a:	5d                   	pop    rbp
ffff800000802f1b:	c3                   	ret    

ffff800000802f1c <set_2mb_pde>:
set_2mb_pde():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:422
void set_2mb_pde(page_item *pde, int pa, int extra_attr)
{
ffff800000802f1c:	f3 0f 1e fa          	endbr64 
ffff800000802f20:	55                   	push   rbp
ffff800000802f21:	48 89 e5             	mov    rbp,rsp
ffff800000802f24:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000802f24 <set_2mb_pde+0x8>
ffff800000802f2b:	49 bb f4 98 11 00 00 	movabs r11,0x1198f4
ffff800000802f32:	00 00 00 
ffff800000802f35:	4c 01 d8             	add    rax,r11
ffff800000802f38:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000802f3c:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
ffff800000802f3f:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:423
    *pde=0;
ffff800000802f42:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802f46:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:424
    *pde|=PAGE_PRESENT|PAGE_4MB_PAGE|PDE_4MB_PAT|extra_attr;
ffff800000802f4d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802f51:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802f54:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000802f57:	0d 81 10 00 00       	or     eax,0x1081
ffff800000802f5c:	48 98                	cdqe   
ffff800000802f5e:	48 09 c2             	or     rdx,rax
ffff800000802f61:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802f65:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:425
    unsigned int hipa=pa&0xffc00000;
ffff800000802f68:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000802f6b:	25 00 00 c0 ff       	and    eax,0xffc00000
ffff800000802f70:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:426
    *pde|=hipa;
ffff800000802f73:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802f77:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802f7a:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802f7d:	48 09 c2             	or     rdx,rax
ffff800000802f80:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802f84:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:427
}
ffff800000802f87:	90                   	nop
ffff800000802f88:	5d                   	pop    rbp
ffff800000802f89:	c3                   	ret    

ffff800000802f8a <req_page_at>:
req_page_at():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:448
        page_map[i]&=(u32)(1<<j);
    return ret;
} */
//在bitmap申请指定的页面,base默认0x1000对齐
addr_t req_page_at(addr_t base,int pgn)
{
ffff800000802f8a:	f3 0f 1e fa          	endbr64 
ffff800000802f8e:	55                   	push   rbp
ffff800000802f8f:	48 89 e5             	mov    rbp,rsp
ffff800000802f92:	41 57                	push   r15
ffff800000802f94:	53                   	push   rbx
ffff800000802f95:	48 83 ec 20          	sub    rsp,0x20
ffff800000802f99:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000802f99 <req_page_at+0xf>
ffff800000802fa0:	49 bb 7f 98 11 00 00 	movabs r11,0x11987f
ffff800000802fa7:	00 00 00 
ffff800000802faa:	4c 01 db             	add    rbx,r11
ffff800000802fad:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000802fb1:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:449
    if(base==0)//不指定地址
ffff800000802fb4:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff800000802fb9:	75 32                	jne    ffff800000802fed <req_page_at+0x63>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:451
    {
        return get_phyaddr(req_a_page());
ffff800000802fbb:	49 89 df             	mov    r15,rbx
ffff800000802fbe:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802fc3:	48 ba 13 62 ee ff ff 	movabs rdx,0xffffffffffee6213
ffff800000802fca:	ff ff ff 
ffff800000802fcd:	48 01 da             	add    rdx,rbx
ffff800000802fd0:	ff d2                	call   rdx
ffff800000802fd2:	89 c7                	mov    edi,eax
ffff800000802fd4:	49 89 df             	mov    r15,rbx
ffff800000802fd7:	48 b8 00 66 ee ff ff 	movabs rax,0xffffffffffee6600
ffff800000802fde:	ff ff ff 
ffff800000802fe1:	48 01 d8             	add    rax,rbx
ffff800000802fe4:	ff d0                	call   rax
ffff800000802fe6:	48 98                	cdqe   
ffff800000802fe8:	e9 c6 00 00 00       	jmp    ffff8000008030b3 <req_page_at+0x129>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:453
    }
    if(!is_pgs_ava(base,pgn))return -1;//先检查
ffff800000802fed:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000802ff1:	89 c2                	mov    edx,eax
ffff800000802ff3:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000802ff6:	89 c6                	mov    esi,eax
ffff800000802ff8:	89 d7                	mov    edi,edx
ffff800000802ffa:	49 89 df             	mov    r15,rbx
ffff800000802ffd:	48 b8 75 69 ee ff ff 	movabs rax,0xffffffffffee6975
ffff800000803004:	ff ff ff 
ffff800000803007:	48 01 d8             	add    rax,rbx
ffff80000080300a:	ff d0                	call   rax
ffff80000080300c:	85 c0                	test   eax,eax
ffff80000080300e:	75 0c                	jne    ffff80000080301c <req_page_at+0x92>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:453 (discriminator 1)
ffff800000803010:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff800000803017:	e9 97 00 00 00       	jmp    ffff8000008030b3 <req_page_at+0x129>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:454
    int pgni=base/4096;
ffff80000080301c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000803020:	48 c1 e8 0c          	shr    rax,0xc
ffff800000803024:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:455
    int pgi=pgni/32;
ffff800000803027:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080302a:	8d 50 1f             	lea    edx,[rax+0x1f]
ffff80000080302d:	85 c0                	test   eax,eax
ffff80000080302f:	0f 48 c2             	cmovs  eax,edx
ffff800000803032:	c1 f8 05             	sar    eax,0x5
ffff800000803035:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:456
    int pgj=pgni%32;
ffff800000803038:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080303b:	99                   	cdq    
ffff80000080303c:	c1 ea 1b             	shr    edx,0x1b
ffff80000080303f:	01 d0                	add    eax,edx
ffff800000803041:	83 e0 1f             	and    eax,0x1f
ffff800000803044:	29 d0                	sub    eax,edx
ffff800000803046:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:457
    for(int i=0;i<pgn;i++)
ffff800000803049:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000803050:	eb 54                	jmp    ffff8000008030a6 <req_page_at+0x11c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:459 (discriminator 3)
    {
        page_map[i]|=(1<<pgj);
ffff800000803052:	48 b8 b0 fe ff ff ff 	movabs rax,0xfffffffffffffeb0
ffff800000803059:	ff ff ff 
ffff80000080305c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803060:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803063:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803066:	48 98                	cdqe   
ffff800000803068:	48 c1 e0 02          	shl    rax,0x2
ffff80000080306c:	48 01 d0             	add    rax,rdx
ffff80000080306f:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000803071:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000803074:	be 01 00 00 00       	mov    esi,0x1
ffff800000803079:	89 c1                	mov    ecx,eax
ffff80000080307b:	d3 e6                	shl    esi,cl
ffff80000080307d:	89 f0                	mov    eax,esi
ffff80000080307f:	89 c6                	mov    esi,eax
ffff800000803081:	48 b8 b0 fe ff ff ff 	movabs rax,0xfffffffffffffeb0
ffff800000803088:	ff ff ff 
ffff80000080308b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080308f:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000803092:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803095:	48 98                	cdqe   
ffff800000803097:	48 c1 e0 02          	shl    rax,0x2
ffff80000080309b:	48 01 c8             	add    rax,rcx
ffff80000080309e:	09 f2                	or     edx,esi
ffff8000008030a0:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:457 (discriminator 3)
    for(int i=0;i<pgn;i++)
ffff8000008030a2:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:457 (discriminator 1)
ffff8000008030a6:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008030a9:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
ffff8000008030ac:	7c a4                	jl     ffff800000803052 <req_page_at+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:461
    }
    return 0;
ffff8000008030ae:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:463

}
ffff8000008030b3:	48 83 c4 20          	add    rsp,0x20
ffff8000008030b7:	5b                   	pop    rbx
ffff8000008030b8:	41 5f                	pop    r15
ffff8000008030ba:	5d                   	pop    rbp
ffff8000008030bb:	c3                   	ret    

ffff8000008030bc <chk_vm>:
chk_vm():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:465
int chk_vm(int base, int pgn)
{
ffff8000008030bc:	f3 0f 1e fa          	endbr64 
ffff8000008030c0:	55                   	push   rbp
ffff8000008030c1:	48 89 e5             	mov    rbp,rsp
ffff8000008030c4:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008030c4 <chk_vm+0x8>
ffff8000008030cb:	49 bb 54 97 11 00 00 	movabs r11,0x119754
ffff8000008030d2:	00 00 00 
ffff8000008030d5:	4c 01 d8             	add    rax,r11
ffff8000008030d8:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff8000008030db:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:466
    int *pdet=0;
ffff8000008030de:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff8000008030e5:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:467
    asm volatile("mov %%cr3,%0":"=r"(pdet));
ffff8000008030e6:	0f 20 d8             	mov    rax,cr3
ffff8000008030e9:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:468
    int *pt=pdet[base/PAGE_INDEX_SIZE]&0xfffff000;
ffff8000008030ed:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008030f0:	8d 90 ff ff 1f 00    	lea    edx,[rax+0x1fffff]
ffff8000008030f6:	85 c0                	test   eax,eax
ffff8000008030f8:	0f 48 c2             	cmovs  eax,edx
ffff8000008030fb:	c1 f8 15             	sar    eax,0x15
ffff8000008030fe:	48 98                	cdqe   
ffff800000803100:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff800000803107:	00 
ffff800000803108:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080310c:	48 01 d0             	add    rax,rdx
ffff80000080310f:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000803111:	89 c0                	mov    eax,eax
ffff800000803113:	25 00 f0 ff ff       	and    eax,0xfffff000
ffff800000803118:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:469
    if(!(pdet[base/PAGE_INDEX_SIZE]&PAGE_PRESENT)||\
ffff80000080311c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080311f:	8d 90 ff ff 1f 00    	lea    edx,[rax+0x1fffff]
ffff800000803125:	85 c0                	test   eax,eax
ffff800000803127:	0f 48 c2             	cmovs  eax,edx
ffff80000080312a:	c1 f8 15             	sar    eax,0x15
ffff80000080312d:	48 98                	cdqe   
ffff80000080312f:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff800000803136:	00 
ffff800000803137:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080313b:	48 01 d0             	add    rax,rdx
ffff80000080313e:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000803140:	83 e0 01             	and    eax,0x1
ffff800000803143:	85 c0                	test   eax,eax
ffff800000803145:	74 38                	je     ffff80000080317f <chk_vm+0xc3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:470 (discriminator 1)
    !(pt[base%PAGE_INDEX_SIZE/PAGE_SIZE]&PAGE_PRESENT))
ffff800000803147:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080314a:	99                   	cdq    
ffff80000080314b:	c1 ea 0b             	shr    edx,0xb
ffff80000080314e:	01 d0                	add    eax,edx
ffff800000803150:	25 ff ff 1f 00       	and    eax,0x1fffff
ffff800000803155:	29 d0                	sub    eax,edx
ffff800000803157:	8d 90 ff 0f 00 00    	lea    edx,[rax+0xfff]
ffff80000080315d:	85 c0                	test   eax,eax
ffff80000080315f:	0f 48 c2             	cmovs  eax,edx
ffff800000803162:	c1 f8 0c             	sar    eax,0xc
ffff800000803165:	48 98                	cdqe   
ffff800000803167:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff80000080316e:	00 
ffff80000080316f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000803173:	48 01 d0             	add    rax,rdx
ffff800000803176:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000803178:	83 e0 01             	and    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:469 (discriminator 1)
    if(!(pdet[base/PAGE_INDEX_SIZE]&PAGE_PRESENT)||\
ffff80000080317b:	85 c0                	test   eax,eax
ffff80000080317d:	75 07                	jne    ffff800000803186 <chk_vm+0xca>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:472
    {
        return -1;
ffff80000080317f:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000803184:	eb 05                	jmp    ffff80000080318b <chk_vm+0xcf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:474
    }
    return 0;
ffff800000803186:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:475
}
ffff80000080318b:	5d                   	pop    rbp
ffff80000080318c:	c3                   	ret    

ffff80000080318d <is_pgs_ava>:
is_pgs_ava():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:478
//查看指定区域的页内存是否可用
int is_pgs_ava(int base,int pgn)
{
ffff80000080318d:	f3 0f 1e fa          	endbr64 
ffff800000803191:	55                   	push   rbp
ffff800000803192:	48 89 e5             	mov    rbp,rsp
ffff800000803195:	41 57                	push   r15
ffff800000803197:	53                   	push   rbx
ffff800000803198:	48 83 ec 20          	sub    rsp,0x20
ffff80000080319c:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080319c <is_pgs_ava+0xf>
ffff8000008031a3:	49 bb 7c 96 11 00 00 	movabs r11,0x11967c
ffff8000008031aa:	00 00 00 
ffff8000008031ad:	4c 01 db             	add    rbx,r11
ffff8000008031b0:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff8000008031b3:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:479
    int pgi=base/4096;
ffff8000008031b6:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008031b9:	8d 90 ff 0f 00 00    	lea    edx,[rax+0xfff]
ffff8000008031bf:	85 c0                	test   eax,eax
ffff8000008031c1:	0f 48 c2             	cmovs  eax,edx
ffff8000008031c4:	c1 f8 0c             	sar    eax,0xc
ffff8000008031c7:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:480
    for(int i=0;i<pgn;i++)
ffff8000008031ca:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff8000008031d1:	eb 2b                	jmp    ffff8000008031fe <is_pgs_ava+0x71>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:482
    {
        if(check_page(pgi+i)!=0)return 0;
ffff8000008031d3:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff8000008031d6:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008031d9:	01 d0                	add    eax,edx
ffff8000008031db:	89 c7                	mov    edi,eax
ffff8000008031dd:	49 89 df             	mov    r15,rbx
ffff8000008031e0:	48 b8 84 65 ee ff ff 	movabs rax,0xffffffffffee6584
ffff8000008031e7:	ff ff ff 
ffff8000008031ea:	48 01 d8             	add    rax,rbx
ffff8000008031ed:	ff d0                	call   rax
ffff8000008031ef:	85 c0                	test   eax,eax
ffff8000008031f1:	74 07                	je     ffff8000008031fa <is_pgs_ava+0x6d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:482 (discriminator 1)
ffff8000008031f3:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008031f8:	eb 11                	jmp    ffff80000080320b <is_pgs_ava+0x7e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:480 (discriminator 2)
    for(int i=0;i<pgn;i++)
ffff8000008031fa:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:480 (discriminator 1)
ffff8000008031fe:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803201:	3b 45 d8             	cmp    eax,DWORD PTR [rbp-0x28]
ffff800000803204:	7c cd                	jl     ffff8000008031d3 <is_pgs_ava+0x46>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:484
    }
    return 1;
ffff800000803206:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:486

}
ffff80000080320b:	48 83 c4 20          	add    rsp,0x20
ffff80000080320f:	5b                   	pop    rbx
ffff800000803210:	41 5f                	pop    r15
ffff800000803212:	5d                   	pop    rbp
ffff800000803213:	c3                   	ret    

ffff800000803214 <make_dentry>:
make_dentry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:24
};
struct dir_entry_operations dev_dir_dops={

};
static int devd_fd=-1;
void make_dentry(struct dir_entry* d,char* name,int namelen,struct dir_entry* parent,struct dir_entry_operations* dops){
ffff800000803214:	f3 0f 1e fa          	endbr64 
ffff800000803218:	55                   	push   rbp
ffff800000803219:	48 89 e5             	mov    rbp,rsp
ffff80000080321c:	41 57                	push   r15
ffff80000080321e:	48 81 ec 88 00 00 00 	sub    rsp,0x88
ffff800000803225:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000803225 <make_dentry+0x11>
ffff80000080322c:	49 bb f3 95 11 00 00 	movabs r11,0x1195f3
ffff800000803233:	00 00 00 
ffff800000803236:	4c 01 d8             	add    rax,r11
ffff800000803239:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
ffff80000080323d:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
ffff800000803241:	89 55 8c             	mov    DWORD PTR [rbp-0x74],edx
ffff800000803244:	48 89 4d 80          	mov    QWORD PTR [rbp-0x80],rcx
ffff800000803248:	4c 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:25
    strcpy(d->name,name);
ffff80000080324f:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
ffff800000803253:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000803256:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
ffff80000080325a:	48 89 ce             	mov    rsi,rcx
ffff80000080325d:	48 89 d7             	mov    rdi,rdx
ffff800000803260:	49 89 c7             	mov    r15,rax
ffff800000803263:	48 ba c0 53 ef ff ff 	movabs rdx,0xffffffffffef53c0
ffff80000080326a:	ff ff ff 
ffff80000080326d:	48 01 c2             	add    rdx,rax
ffff800000803270:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:26
    d->name_length=namelen;
ffff800000803272:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000803276:	8b 55 8c             	mov    edx,DWORD PTR [rbp-0x74]
ffff800000803279:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:28
    //添加dentry的操作方法，这样能够查找设备
    d->dir_ops=dops;
ffff80000080327c:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000803280:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
ffff800000803287:	48 89 50 50          	mov    QWORD PTR [rax+0x50],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:29
    list_init(&d->subdirs_list);
ffff80000080328b:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080328f:	48 83 c0 28          	add    rax,0x28
ffff800000803293:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    struct List * next;
};

__attribute__((always_inline)) inline void list_init(struct List * list)
{
    list->prev = NULL;
ffff800000803297:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080329b:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff8000008032a2:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008032a6:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff8000008032ad:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff8000008032ae:	90                   	nop
make_dentry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:30
    list_init(&d->child_node);
ffff8000008032af:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008032b3:	48 83 c0 10          	add    rax,0x10
ffff8000008032b7:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff8000008032bb:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff8000008032bf:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff8000008032c6:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff8000008032ca:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff8000008032d1:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff8000008032d2:	90                   	nop
make_dentry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:31
    d->child_node.data=d;
ffff8000008032d3:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008032d7:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
ffff8000008032db:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:32
    d->parent=parent;
ffff8000008032df:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008032e3:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
ffff8000008032e7:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:33
    list_add(&parent->subdirs_list,&d->child_node);
ffff8000008032eb:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008032ef:	48 83 c0 10          	add    rax,0x10
ffff8000008032f3:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
ffff8000008032f7:	48 83 c2 28          	add    rdx,0x28
ffff8000008032fb:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff8000008032ff:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:33
        new->next->prev = new;
    // entry->next = new;
}
__attribute__((always_inline)) inline void list_add(struct List * entry,struct List * new)	////add to the tail of the link
{
    if(entry->next==NULL)
ffff800000803303:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803307:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080330b:	48 85 c0             	test   rax,rax
ffff80000080330e:	75 50                	jne    ffff800000803360 <make_dentry+0x14c>
ffff800000803310:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803314:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffff800000803318:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080331c:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff800000803320:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000803324:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff800000803328:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080332c:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff800000803330:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000803334:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000803338:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff80000080333b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080333f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000803343:	48 85 c0             	test   rax,rax
ffff800000803346:	0f 84 a3 00 00 00    	je     ffff8000008033ef <make_dentry+0x1db>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff80000080334c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000803350:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000803354:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000803358:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff80000080335b:	e9 8f 00 00 00       	jmp    ffff8000008033ef <make_dentry+0x1db>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:36
        list_add_to_behind(entry,new);
    else{
        struct List* p=entry;
ffff800000803360:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803364:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff800000803368:	eb 21                	jmp    ffff80000080338b <make_dentry+0x177>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:38
            if(p->data==new->data)
ffff80000080336a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080336e:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff800000803372:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803376:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080337a:	48 39 c2             	cmp    rdx,rax
ffff80000080337d:	74 73                	je     ffff8000008033f2 <make_dentry+0x1de>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff80000080337f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803383:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000803387:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
ffff80000080338b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080338f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000803393:	48 85 c0             	test   rax,rax
ffff800000803396:	74 0e                	je     ffff8000008033a6 <make_dentry+0x192>
ffff800000803398:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080339c:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008033a0:	48 39 45 c8          	cmp    QWORD PTR [rbp-0x38],rax
ffff8000008033a4:	75 c4                	jne    ffff80000080336a <make_dentry+0x156>
ffff8000008033a6:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008033aa:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
ffff8000008033ae:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008033b2:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff8000008033b6:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008033ba:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff8000008033be:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008033c2:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff8000008033c6:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008033ca:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff8000008033ce:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff8000008033d1:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008033d5:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008033d9:	48 85 c0             	test   rax,rax
ffff8000008033dc:	74 17                	je     ffff8000008033f5 <make_dentry+0x1e1>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff8000008033de:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008033e2:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008033e6:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff8000008033ea:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff8000008033ed:	eb 06                	jmp    ffff8000008033f5 <make_dentry+0x1e1>
ffff8000008033ef:	90                   	nop
ffff8000008033f0:	eb 04                	jmp    ffff8000008033f6 <make_dentry+0x1e2>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:39
                return;
ffff8000008033f2:	90                   	nop
ffff8000008033f3:	eb 01                	jmp    ffff8000008033f6 <make_dentry+0x1e2>
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff8000008033f5:	90                   	nop
make_dentry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:34
}
ffff8000008033f6:	90                   	nop
ffff8000008033f7:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff8000008033fb:	c9                   	leave  
ffff8000008033fc:	c3                   	ret    

ffff8000008033fd <make_inode>:
make_inode():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:35
void make_inode(struct index_node* i,struct index_node_operations* iops,struct file_operations* fops,unsigned long attr,struct super_block* sb){
ffff8000008033fd:	f3 0f 1e fa          	endbr64 
ffff800000803401:	55                   	push   rbp
ffff800000803402:	48 89 e5             	mov    rbp,rsp
ffff800000803405:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000803405 <make_inode+0x8>
ffff80000080340c:	49 bb 13 94 11 00 00 	movabs r11,0x119413
ffff800000803413:	00 00 00 
ffff800000803416:	4c 01 d8             	add    rax,r11
ffff800000803419:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080341d:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000803421:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff800000803425:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
ffff800000803429:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:36
    i->f_ops=fops;
ffff80000080342d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803431:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000803435:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:37
    i->attribute=attr;
ffff800000803439:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080343d:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000803441:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:38
    i->sb=sb;
ffff800000803445:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803449:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080344d:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:39
    i->file_size=0;
ffff800000803451:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803455:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:40
    i->inode_ops=iops;
ffff80000080345c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803460:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff800000803464:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:41
}
ffff800000803468:	90                   	nop
ffff800000803469:	5d                   	pop    rbp
ffff80000080346a:	c3                   	ret    

ffff80000080346b <make_devf>:
make_devf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:42
void make_devf(struct dir_entry* d,struct index_node* i,char* name,struct dir_entry* ddev,struct file_operations* fops){
ffff80000080346b:	f3 0f 1e fa          	endbr64 
ffff80000080346f:	55                   	push   rbp
ffff800000803470:	48 89 e5             	mov    rbp,rsp
ffff800000803473:	41 57                	push   r15
ffff800000803475:	41 54                	push   r12
ffff800000803477:	53                   	push   rbx
ffff800000803478:	48 83 ec 78          	sub    rsp,0x78
ffff80000080347c:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080347c <make_devf+0x11>
ffff800000803483:	49 bb 9c 93 11 00 00 	movabs r11,0x11939c
ffff80000080348a:	00 00 00 
ffff80000080348d:	4c 01 db             	add    rbx,r11
ffff800000803490:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
ffff800000803494:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
ffff800000803498:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
ffff80000080349c:	48 89 4d 80          	mov    QWORD PTR [rbp-0x80],rcx
ffff8000008034a0:	4c 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:43
    make_dentry(d,name, strlen(name),root_sb->root,&dev_dir_dops);
ffff8000008034a7:	48 b8 10 fe ff ff ff 	movabs rax,0xfffffffffffffe10
ffff8000008034ae:	ff ff ff 
ffff8000008034b1:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008034b5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008034b8:	4c 8b 20             	mov    r12,QWORD PTR [rax]
ffff8000008034bb:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff8000008034bf:	48 89 c7             	mov    rdi,rax
ffff8000008034c2:	49 89 df             	mov    r15,rbx
ffff8000008034c5:	48 b8 8d 56 ef ff ff 	movabs rax,0xffffffffffef568d
ffff8000008034cc:	ff ff ff 
ffff8000008034cf:	48 01 d8             	add    rax,rbx
ffff8000008034d2:	ff d0                	call   rax
ffff8000008034d4:	89 c2                	mov    edx,eax
ffff8000008034d6:	48 8b 75 88          	mov    rsi,QWORD PTR [rbp-0x78]
ffff8000008034da:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008034de:	48 b9 c0 ff ff ff ff 	movabs rcx,0xffffffffffffffc0
ffff8000008034e5:	ff ff ff 
ffff8000008034e8:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff8000008034ec:	49 89 c8             	mov    r8,rcx
ffff8000008034ef:	4c 89 e1             	mov    rcx,r12
ffff8000008034f2:	48 89 c7             	mov    rdi,rax
ffff8000008034f5:	49 89 df             	mov    r15,rbx
ffff8000008034f8:	48 b8 fc 69 ee ff ff 	movabs rax,0xffffffffffee69fc
ffff8000008034ff:	ff ff ff 
ffff800000803502:	48 01 d8             	add    rax,rbx
ffff800000803505:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:44
    d->dir_inode=i;
ffff800000803507:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080350b:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
ffff80000080350f:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:45
    make_inode(i,ddev->dir_inode->inode_ops,fops,FS_ATTR_DEVICE,root_sb);
ffff800000803513:	48 b8 10 fe ff ff ff 	movabs rax,0xfffffffffffffe10
ffff80000080351a:	ff ff ff 
ffff80000080351d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803521:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000803524:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000803528:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080352c:	48 8b 70 30          	mov    rsi,QWORD PTR [rax+0x30]
ffff800000803530:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
ffff800000803537:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080353b:	49 89 c8             	mov    r8,rcx
ffff80000080353e:	b9 04 00 00 00       	mov    ecx,0x4
ffff800000803543:	48 89 c7             	mov    rdi,rax
ffff800000803546:	49 89 df             	mov    r15,rbx
ffff800000803549:	48 b8 e5 6b ee ff ff 	movabs rax,0xffffffffffee6be5
ffff800000803550:	ff ff ff 
ffff800000803553:	48 01 d8             	add    rax,rbx
ffff800000803556:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:46
    list_add(&ddev->subdirs_list,&d->child_node);//添加到/dev下
ffff800000803558:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080355c:	48 83 c0 10          	add    rax,0x10
ffff800000803560:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
ffff800000803564:	48 83 c2 28          	add    rdx,0x28
ffff800000803568:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffff80000080356c:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:33
    if(entry->next==NULL)
ffff800000803570:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000803574:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000803578:	48 85 c0             	test   rax,rax
ffff80000080357b:	75 50                	jne    ffff8000008035cd <make_devf+0x162>
ffff80000080357d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000803581:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
ffff800000803585:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000803589:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff80000080358d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803591:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff800000803595:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000803599:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff80000080359d:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008035a1:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff8000008035a5:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff8000008035a8:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008035ac:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008035b0:	48 85 c0             	test   rax,rax
ffff8000008035b3:	0f 84 a3 00 00 00    	je     ffff80000080365c <make_devf+0x1f1>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff8000008035b9:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008035bd:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008035c1:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff8000008035c5:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff8000008035c8:	e9 8f 00 00 00       	jmp    ffff80000080365c <make_devf+0x1f1>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:36
        struct List* p=entry;
ffff8000008035cd:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008035d1:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff8000008035d5:	eb 21                	jmp    ffff8000008035f8 <make_devf+0x18d>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:38
            if(p->data==new->data)
ffff8000008035d7:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008035db:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff8000008035df:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008035e3:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff8000008035e7:	48 39 c2             	cmp    rdx,rax
ffff8000008035ea:	74 73                	je     ffff80000080365f <make_devf+0x1f4>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff8000008035ec:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008035f0:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008035f4:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
ffff8000008035f8:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008035fc:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000803600:	48 85 c0             	test   rax,rax
ffff800000803603:	74 0e                	je     ffff800000803613 <make_devf+0x1a8>
ffff800000803605:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000803609:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080360d:	48 39 45 b8          	cmp    QWORD PTR [rbp-0x48],rax
ffff800000803611:	75 c4                	jne    ffff8000008035d7 <make_devf+0x16c>
ffff800000803613:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000803617:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
ffff80000080361b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080361f:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff800000803623:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000803627:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080362b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080362f:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff800000803633:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000803637:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffff80000080363b:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff80000080363e:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000803642:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000803646:	48 85 c0             	test   rax,rax
ffff800000803649:	74 17                	je     ffff800000803662 <make_devf+0x1f7>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff80000080364b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080364f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000803653:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff800000803657:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff80000080365a:	eb 06                	jmp    ffff800000803662 <make_devf+0x1f7>
ffff80000080365c:	90                   	nop
ffff80000080365d:	eb 04                	jmp    ffff800000803663 <make_devf+0x1f8>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:39
                return;
ffff80000080365f:	90                   	nop
ffff800000803660:	eb 01                	jmp    ffff800000803663 <make_devf+0x1f8>
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff800000803662:	90                   	nop
make_devf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:47
}
ffff800000803663:	90                   	nop
ffff800000803664:	48 83 c4 78          	add    rsp,0x78
ffff800000803668:	5b                   	pop    rbx
ffff800000803669:	41 5c                	pop    r12
ffff80000080366b:	41 5f                	pop    r15
ffff80000080366d:	5d                   	pop    rbp
ffff80000080366e:	c3                   	ret    

ffff80000080366f <init_devfs>:
init_devfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:55
 * 这个/dev文件夹的dentry和inode等数据由devman管理，根文件系统切换时，这个文件夹会跟着挂载到新文件系统的根目录下。
 * */
struct dir_entry* ddev=NULL,*dmnt,*dconsole,*dhd0,*dtty,*dramdisk;
struct file ftty;
int init_devfs()
{
ffff80000080366f:	f3 0f 1e fa          	endbr64 
ffff800000803673:	55                   	push   rbp
ffff800000803674:	48 89 e5             	mov    rbp,rsp
ffff800000803677:	41 57                	push   r15
ffff800000803679:	53                   	push   rbx
ffff80000080367a:	48 83 ec 30          	sub    rsp,0x30
ffff80000080367e:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080367e <init_devfs+0xf>
ffff800000803685:	49 bb 9a 91 11 00 00 	movabs r11,0x11919a
ffff80000080368c:	00 00 00 
ffff80000080368f:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:57
    //创建dev文件夹
    ddev=(struct dir_entry*) kmalloc();
ffff800000803692:	49 89 df             	mov    r15,rbx
ffff800000803695:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080369a:	48 ba 68 57 ee ff ff 	movabs rdx,0xffffffffffee5768
ffff8000008036a1:	ff ff ff 
ffff8000008036a4:	48 01 da             	add    rdx,rbx
ffff8000008036a7:	ff d2                	call   rdx
ffff8000008036a9:	48 89 c2             	mov    rdx,rax
ffff8000008036ac:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff8000008036b3:	ff ff ff 
ffff8000008036b6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008036ba:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:58
    struct index_node* idev=ddev+1;
ffff8000008036bd:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff8000008036c4:	ff ff ff 
ffff8000008036c7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008036cb:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008036ce:	48 83 c0 58          	add    rax,0x58
ffff8000008036d2:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:59
    ddev->name=idev+1;
ffff8000008036d6:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff8000008036dd:	ff ff ff 
ffff8000008036e0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008036e4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008036e7:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff8000008036eb:	48 83 c2 40          	add    rdx,0x40
ffff8000008036ef:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:60
    make_dentry(ddev,"dev",3,root_sb->root,root_sb->root->dir_ops);
ffff8000008036f2:	48 b8 10 fe ff ff ff 	movabs rax,0xfffffffffffffe10
ffff8000008036f9:	ff ff ff 
ffff8000008036fc:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803700:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803703:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803706:	48 8b 48 50          	mov    rcx,QWORD PTR [rax+0x50]
ffff80000080370a:	48 b8 10 fe ff ff ff 	movabs rax,0xfffffffffffffe10
ffff800000803711:	ff ff ff 
ffff800000803714:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803718:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080371b:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080371e:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff800000803725:	ff ff ff 
ffff800000803728:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080372c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080372f:	49 89 c8             	mov    r8,rcx
ffff800000803732:	48 89 d1             	mov    rcx,rdx
ffff800000803735:	ba 03 00 00 00       	mov    edx,0x3
ffff80000080373a:	48 be c6 d8 ff ff ff 	movabs rsi,0xffffffffffffd8c6
ffff800000803741:	ff ff ff 
ffff800000803744:	48 8d 34 33          	lea    rsi,[rbx+rsi*1]
ffff800000803748:	48 89 c7             	mov    rdi,rax
ffff80000080374b:	49 89 df             	mov    r15,rbx
ffff80000080374e:	48 b8 fc 69 ee ff ff 	movabs rax,0xffffffffffee69fc
ffff800000803755:	ff ff ff 
ffff800000803758:	48 01 d8             	add    rax,rbx
ffff80000080375b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:61
    ddev->dir_inode=idev;
ffff80000080375d:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff800000803764:	ff ff ff 
ffff800000803767:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080376b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080376e:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000803772:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:62
    make_inode(idev,root_sb->root->dir_inode->inode_ops,root_sb->root->dir_inode->f_ops,FS_ATTR_DIR,root_sb);
ffff800000803776:	48 b8 10 fe ff ff ff 	movabs rax,0xfffffffffffffe10
ffff80000080377d:	ff ff ff 
ffff800000803780:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803784:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000803787:	48 b8 10 fe ff ff ff 	movabs rax,0xfffffffffffffe10
ffff80000080378e:	ff ff ff 
ffff800000803791:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803795:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803798:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080379b:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080379f:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
ffff8000008037a3:	48 b8 10 fe ff ff ff 	movabs rax,0xfffffffffffffe10
ffff8000008037aa:	ff ff ff 
ffff8000008037ad:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008037b1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008037b4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008037b7:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008037bb:	48 8b 70 30          	mov    rsi,QWORD PTR [rax+0x30]
ffff8000008037bf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008037c3:	49 89 c8             	mov    r8,rcx
ffff8000008037c6:	b9 02 00 00 00       	mov    ecx,0x2
ffff8000008037cb:	48 89 c7             	mov    rdi,rax
ffff8000008037ce:	49 89 df             	mov    r15,rbx
ffff8000008037d1:	48 b8 e5 6b ee ff ff 	movabs rax,0xffffffffffee6be5
ffff8000008037d8:	ff ff ff 
ffff8000008037db:	48 01 d8             	add    rax,rbx
ffff8000008037de:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:63
    idev->private_index_info=ddev;
ffff8000008037e0:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff8000008037e7:	ff ff ff 
ffff8000008037ea:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008037ee:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008037f1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008037f5:	48 89 50 38          	mov    QWORD PTR [rax+0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:66

    //创建mnt文件夹
    dmnt=(struct dir_entry*) kmalloc();
ffff8000008037f9:	49 89 df             	mov    r15,rbx
ffff8000008037fc:	b8 00 00 00 00       	mov    eax,0x0
ffff800000803801:	48 ba 68 57 ee ff ff 	movabs rdx,0xffffffffffee5768
ffff800000803808:	ff ff ff 
ffff80000080380b:	48 01 da             	add    rdx,rbx
ffff80000080380e:	ff d2                	call   rdx
ffff800000803810:	48 89 c2             	mov    rdx,rax
ffff800000803813:	48 b8 e8 fe ff ff ff 	movabs rax,0xfffffffffffffee8
ffff80000080381a:	ff ff ff 
ffff80000080381d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803821:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:67
    struct index_node* imnt=dmnt+1;
ffff800000803824:	48 b8 e8 fe ff ff ff 	movabs rax,0xfffffffffffffee8
ffff80000080382b:	ff ff ff 
ffff80000080382e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803832:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803835:	48 83 c0 58          	add    rax,0x58
ffff800000803839:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:68
    dmnt->name=imnt+1;
ffff80000080383d:	48 b8 e8 fe ff ff ff 	movabs rax,0xfffffffffffffee8
ffff800000803844:	ff ff ff 
ffff800000803847:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080384b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080384e:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000803852:	48 83 c2 40          	add    rdx,0x40
ffff800000803856:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:69
    make_dentry(dmnt,"mnt",3,root_sb->root,root_sb->root->dir_ops);
ffff800000803859:	48 b8 10 fe ff ff ff 	movabs rax,0xfffffffffffffe10
ffff800000803860:	ff ff ff 
ffff800000803863:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803867:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080386a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080386d:	48 8b 48 50          	mov    rcx,QWORD PTR [rax+0x50]
ffff800000803871:	48 b8 10 fe ff ff ff 	movabs rax,0xfffffffffffffe10
ffff800000803878:	ff ff ff 
ffff80000080387b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080387f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803882:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803885:	48 b8 e8 fe ff ff ff 	movabs rax,0xfffffffffffffee8
ffff80000080388c:	ff ff ff 
ffff80000080388f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803893:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803896:	49 89 c8             	mov    r8,rcx
ffff800000803899:	48 89 d1             	mov    rcx,rdx
ffff80000080389c:	ba 03 00 00 00       	mov    edx,0x3
ffff8000008038a1:	48 be ca d8 ff ff ff 	movabs rsi,0xffffffffffffd8ca
ffff8000008038a8:	ff ff ff 
ffff8000008038ab:	48 8d 34 33          	lea    rsi,[rbx+rsi*1]
ffff8000008038af:	48 89 c7             	mov    rdi,rax
ffff8000008038b2:	49 89 df             	mov    r15,rbx
ffff8000008038b5:	48 b8 fc 69 ee ff ff 	movabs rax,0xffffffffffee69fc
ffff8000008038bc:	ff ff ff 
ffff8000008038bf:	48 01 d8             	add    rax,rbx
ffff8000008038c2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:70
    dmnt->dir_inode=imnt;
ffff8000008038c4:	48 b8 e8 fe ff ff ff 	movabs rax,0xfffffffffffffee8
ffff8000008038cb:	ff ff ff 
ffff8000008038ce:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008038d2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008038d5:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008038d9:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:71
    make_inode(imnt,root_sb->root->dir_inode->inode_ops,root_sb->root->dir_inode->f_ops,FS_ATTR_DIR,root_sb);
ffff8000008038dd:	48 b8 10 fe ff ff ff 	movabs rax,0xfffffffffffffe10
ffff8000008038e4:	ff ff ff 
ffff8000008038e7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008038eb:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008038ee:	48 b8 10 fe ff ff ff 	movabs rax,0xfffffffffffffe10
ffff8000008038f5:	ff ff ff 
ffff8000008038f8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008038fc:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008038ff:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803902:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000803906:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
ffff80000080390a:	48 b8 10 fe ff ff ff 	movabs rax,0xfffffffffffffe10
ffff800000803911:	ff ff ff 
ffff800000803914:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803918:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080391b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080391e:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000803922:	48 8b 70 30          	mov    rsi,QWORD PTR [rax+0x30]
ffff800000803926:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080392a:	49 89 c8             	mov    r8,rcx
ffff80000080392d:	b9 02 00 00 00       	mov    ecx,0x2
ffff800000803932:	48 89 c7             	mov    rdi,rax
ffff800000803935:	49 89 df             	mov    r15,rbx
ffff800000803938:	48 b8 e5 6b ee ff ff 	movabs rax,0xffffffffffee6be5
ffff80000080393f:	ff ff ff 
ffff800000803942:	48 01 d8             	add    rax,rbx
ffff800000803945:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:72
    imnt->private_index_info=dmnt;
ffff800000803947:	48 b8 e8 fe ff ff ff 	movabs rax,0xfffffffffffffee8
ffff80000080394e:	ff ff ff 
ffff800000803951:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803955:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803958:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080395c:	48 89 50 38          	mov    QWORD PTR [rax+0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:77


    //创建几个设备文件
    //console-framebuffer.c
    dconsole= (struct dir_entry *) kmalloc();
ffff800000803960:	49 89 df             	mov    r15,rbx
ffff800000803963:	b8 00 00 00 00       	mov    eax,0x0
ffff800000803968:	48 ba 68 57 ee ff ff 	movabs rdx,0xffffffffffee5768
ffff80000080396f:	ff ff ff 
ffff800000803972:	48 01 da             	add    rdx,rbx
ffff800000803975:	ff d2                	call   rdx
ffff800000803977:	48 89 c2             	mov    rdx,rax
ffff80000080397a:	48 b8 00 ff ff ff ff 	movabs rax,0xffffffffffffff00
ffff800000803981:	ff ff ff 
ffff800000803984:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803988:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:78
    struct index_node* iconsole=dconsole+1;
ffff80000080398b:	48 b8 00 ff ff ff ff 	movabs rax,0xffffffffffffff00
ffff800000803992:	ff ff ff 
ffff800000803995:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803999:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080399c:	48 83 c0 58          	add    rax,0x58
ffff8000008039a0:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:79
    dconsole->name=iconsole+1;
ffff8000008039a4:	48 b8 00 ff ff ff ff 	movabs rax,0xffffffffffffff00
ffff8000008039ab:	ff ff ff 
ffff8000008039ae:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008039b2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008039b5:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff8000008039b9:	48 83 c2 40          	add    rdx,0x40
ffff8000008039bd:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:80
    make_devf(dconsole,iconsole,"console",ddev,&devfs_fops);
ffff8000008039c0:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff8000008039c7:	ff ff ff 
ffff8000008039ca:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008039ce:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008039d1:	48 b8 00 ff ff ff ff 	movabs rax,0xffffffffffffff00
ffff8000008039d8:	ff ff ff 
ffff8000008039db:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008039df:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008039e2:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
ffff8000008039e6:	48 b9 f8 fd ff ff ff 	movabs rcx,0xfffffffffffffdf8
ffff8000008039ed:	ff ff ff 
ffff8000008039f0:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff8000008039f4:	49 89 c8             	mov    r8,rcx
ffff8000008039f7:	48 89 d1             	mov    rcx,rdx
ffff8000008039fa:	48 ba ce d8 ff ff ff 	movabs rdx,0xffffffffffffd8ce
ffff800000803a01:	ff ff ff 
ffff800000803a04:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000803a08:	48 89 c7             	mov    rdi,rax
ffff800000803a0b:	49 89 df             	mov    r15,rbx
ffff800000803a0e:	48 b8 53 6c ee ff ff 	movabs rax,0xffffffffffee6c53
ffff800000803a15:	ff ff ff 
ffff800000803a18:	48 01 d8             	add    rax,rbx
ffff800000803a1b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:82
    //hd0-disk.c
    dhd0= (struct dir_entry *) kmalloc();
ffff800000803a1d:	49 89 df             	mov    r15,rbx
ffff800000803a20:	b8 00 00 00 00       	mov    eax,0x0
ffff800000803a25:	48 ba 68 57 ee ff ff 	movabs rdx,0xffffffffffee5768
ffff800000803a2c:	ff ff ff 
ffff800000803a2f:	48 01 da             	add    rdx,rbx
ffff800000803a32:	ff d2                	call   rdx
ffff800000803a34:	48 89 c2             	mov    rdx,rax
ffff800000803a37:	48 b8 f0 fe ff ff ff 	movabs rax,0xfffffffffffffef0
ffff800000803a3e:	ff ff ff 
ffff800000803a41:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803a45:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:83
    struct index_node* ihd0=dhd0+1;
ffff800000803a48:	48 b8 f0 fe ff ff ff 	movabs rax,0xfffffffffffffef0
ffff800000803a4f:	ff ff ff 
ffff800000803a52:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803a56:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803a59:	48 83 c0 58          	add    rax,0x58
ffff800000803a5d:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:84
    dhd0->name=ihd0+1;
ffff800000803a61:	48 b8 f0 fe ff ff ff 	movabs rax,0xfffffffffffffef0
ffff800000803a68:	ff ff ff 
ffff800000803a6b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803a6f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803a72:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000803a76:	48 83 c2 40          	add    rdx,0x40
ffff800000803a7a:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:85
    make_devf(dhd0,ihd0,"hd0",ddev,&devfs_fops);
ffff800000803a7d:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff800000803a84:	ff ff ff 
ffff800000803a87:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803a8b:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803a8e:	48 b8 f0 fe ff ff ff 	movabs rax,0xfffffffffffffef0
ffff800000803a95:	ff ff ff 
ffff800000803a98:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803a9c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803a9f:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff800000803aa3:	48 b9 f8 fd ff ff ff 	movabs rcx,0xfffffffffffffdf8
ffff800000803aaa:	ff ff ff 
ffff800000803aad:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff800000803ab1:	49 89 c8             	mov    r8,rcx
ffff800000803ab4:	48 89 d1             	mov    rcx,rdx
ffff800000803ab7:	48 ba d6 d8 ff ff ff 	movabs rdx,0xffffffffffffd8d6
ffff800000803abe:	ff ff ff 
ffff800000803ac1:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000803ac5:	48 89 c7             	mov    rdi,rax
ffff800000803ac8:	49 89 df             	mov    r15,rbx
ffff800000803acb:	48 b8 53 6c ee ff ff 	movabs rax,0xffffffffffee6c53
ffff800000803ad2:	ff ff ff 
ffff800000803ad5:	48 01 d8             	add    rax,rbx
ffff800000803ad8:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:87
    //tty-tty.c
    dtty= (struct dir_entry *) kmalloc();
ffff800000803ada:	49 89 df             	mov    r15,rbx
ffff800000803add:	b8 00 00 00 00       	mov    eax,0x0
ffff800000803ae2:	48 ba 68 57 ee ff ff 	movabs rdx,0xffffffffffee5768
ffff800000803ae9:	ff ff ff 
ffff800000803aec:	48 01 da             	add    rdx,rbx
ffff800000803aef:	ff d2                	call   rdx
ffff800000803af1:	48 89 c2             	mov    rdx,rax
ffff800000803af4:	48 b8 80 fd ff ff ff 	movabs rax,0xfffffffffffffd80
ffff800000803afb:	ff ff ff 
ffff800000803afe:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803b02:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:88
    struct index_node* itty=dtty+1;
ffff800000803b05:	48 b8 80 fd ff ff ff 	movabs rax,0xfffffffffffffd80
ffff800000803b0c:	ff ff ff 
ffff800000803b0f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803b13:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803b16:	48 83 c0 58          	add    rax,0x58
ffff800000803b1a:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:89
    dtty->name=itty+1;
ffff800000803b1e:	48 b8 80 fd ff ff ff 	movabs rax,0xfffffffffffffd80
ffff800000803b25:	ff ff ff 
ffff800000803b28:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803b2c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803b2f:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000803b33:	48 83 c2 40          	add    rdx,0x40
ffff800000803b37:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:90
    make_devf(dtty,itty,"tty",ddev,&devfs_fops);
ffff800000803b3a:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff800000803b41:	ff ff ff 
ffff800000803b44:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803b48:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803b4b:	48 b8 80 fd ff ff ff 	movabs rax,0xfffffffffffffd80
ffff800000803b52:	ff ff ff 
ffff800000803b55:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803b59:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803b5c:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
ffff800000803b60:	48 b9 f8 fd ff ff ff 	movabs rcx,0xfffffffffffffdf8
ffff800000803b67:	ff ff ff 
ffff800000803b6a:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff800000803b6e:	49 89 c8             	mov    r8,rcx
ffff800000803b71:	48 89 d1             	mov    rcx,rdx
ffff800000803b74:	48 ba da d8 ff ff ff 	movabs rdx,0xffffffffffffd8da
ffff800000803b7b:	ff ff ff 
ffff800000803b7e:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000803b82:	48 89 c7             	mov    rdi,rax
ffff800000803b85:	49 89 df             	mov    r15,rbx
ffff800000803b88:	48 b8 53 6c ee ff ff 	movabs rax,0xffffffffffee6c53
ffff800000803b8f:	ff ff ff 
ffff800000803b92:	48 01 d8             	add    rax,rbx
ffff800000803b95:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:92
    //初始化一下
    tty_fops.open(itty,&ftty);
ffff800000803b97:	48 b8 c8 fe ff ff ff 	movabs rax,0xfffffffffffffec8
ffff800000803b9e:	ff ff ff 
ffff800000803ba1:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803ba5:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803ba8:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803bac:	48 b9 48 fe ff ff ff 	movabs rcx,0xfffffffffffffe48
ffff800000803bb3:	ff ff ff 
ffff800000803bb6:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff800000803bba:	48 89 ce             	mov    rsi,rcx
ffff800000803bbd:	48 89 c7             	mov    rdi,rax
ffff800000803bc0:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:95

    //ramdisk- ramdisk.c
    dramdisk= (struct dir_entry *) kmalloc();
ffff800000803bc2:	49 89 df             	mov    r15,rbx
ffff800000803bc5:	b8 00 00 00 00       	mov    eax,0x0
ffff800000803bca:	48 ba 68 57 ee ff ff 	movabs rdx,0xffffffffffee5768
ffff800000803bd1:	ff ff ff 
ffff800000803bd4:	48 01 da             	add    rdx,rbx
ffff800000803bd7:	ff d2                	call   rdx
ffff800000803bd9:	48 89 c2             	mov    rdx,rax
ffff800000803bdc:	48 b8 88 ff ff ff ff 	movabs rax,0xffffffffffffff88
ffff800000803be3:	ff ff ff 
ffff800000803be6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803bea:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:96
    struct index_node* iramdisk=dramdisk+1;
ffff800000803bed:	48 b8 88 ff ff ff ff 	movabs rax,0xffffffffffffff88
ffff800000803bf4:	ff ff ff 
ffff800000803bf7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803bfb:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803bfe:	48 83 c0 58          	add    rax,0x58
ffff800000803c02:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:97
    dramdisk->name=iramdisk+1;
ffff800000803c06:	48 b8 88 ff ff ff ff 	movabs rax,0xffffffffffffff88
ffff800000803c0d:	ff ff ff 
ffff800000803c10:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803c14:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803c17:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000803c1b:	48 83 c2 40          	add    rdx,0x40
ffff800000803c1f:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:98
    make_devf(dramdisk,iramdisk,"ram",ddev,&devfs_fops);
ffff800000803c22:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff800000803c29:	ff ff ff 
ffff800000803c2c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803c30:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803c33:	48 b8 88 ff ff ff ff 	movabs rax,0xffffffffffffff88
ffff800000803c3a:	ff ff ff 
ffff800000803c3d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803c41:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803c44:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
ffff800000803c48:	48 b9 f8 fd ff ff ff 	movabs rcx,0xfffffffffffffdf8
ffff800000803c4f:	ff ff ff 
ffff800000803c52:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff800000803c56:	49 89 c8             	mov    r8,rcx
ffff800000803c59:	48 89 d1             	mov    rcx,rdx
ffff800000803c5c:	48 ba de d8 ff ff ff 	movabs rdx,0xffffffffffffd8de
ffff800000803c63:	ff ff ff 
ffff800000803c66:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000803c6a:	48 89 c7             	mov    rdi,rax
ffff800000803c6d:	49 89 df             	mov    r15,rbx
ffff800000803c70:	48 b8 53 6c ee ff ff 	movabs rax,0xffffffffffee6c53
ffff800000803c77:	ff ff ff 
ffff800000803c7a:	48 01 d8             	add    rax,rbx
ffff800000803c7d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:100

}
ffff800000803c7f:	90                   	nop
ffff800000803c80:	48 83 c4 30          	add    rsp,0x30
ffff800000803c84:	5b                   	pop    rbx
ffff800000803c85:	41 5f                	pop    r15
ffff800000803c87:	5d                   	pop    rbp
ffff800000803c88:	c3                   	ret    

ffff800000803c89 <open_dev>:
open_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:102
//
long open_dev(struct index_node * inode,struct file * filp){
ffff800000803c89:	f3 0f 1e fa          	endbr64 
ffff800000803c8d:	55                   	push   rbp
ffff800000803c8e:	48 89 e5             	mov    rbp,rsp
ffff800000803c91:	41 57                	push   r15
ffff800000803c93:	53                   	push   rbx
ffff800000803c94:	48 83 ec 20          	sub    rsp,0x20
ffff800000803c98:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000803c98 <open_dev+0xf>
ffff800000803c9f:	49 bb 80 8b 11 00 00 	movabs r11,0x118b80
ffff800000803ca6:	00 00 00 
ffff800000803ca9:	4c 01 db             	add    rbx,r11
ffff800000803cac:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000803cb0:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:104
    //查看文件名
    char* name=filp->dentry->name;
ffff800000803cb4:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000803cb8:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000803cbc:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803cbf:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:105
    char* p=name+ strlen(name)-1;
ffff800000803cc3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803cc7:	48 89 c7             	mov    rdi,rax
ffff800000803cca:	49 89 df             	mov    r15,rbx
ffff800000803ccd:	48 b8 8d 56 ef ff ff 	movabs rax,0xffffffffffef568d
ffff800000803cd4:	ff ff ff 
ffff800000803cd7:	48 01 d8             	add    rax,rbx
ffff800000803cda:	ff d0                	call   rax
ffff800000803cdc:	48 98                	cdqe   
ffff800000803cde:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff800000803ce2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803ce6:	48 01 d0             	add    rax,rdx
ffff800000803ce9:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:106
    for(;*p!='/'&&p>=name;p--);
ffff800000803ced:	eb 05                	jmp    ffff800000803cf4 <open_dev+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:106 (discriminator 3)
ffff800000803cef:	48 83 6d e0 01       	sub    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:106 (discriminator 1)
ffff800000803cf4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803cf8:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000803cfb:	3c 2f                	cmp    al,0x2f
ffff800000803cfd:	74 0a                	je     ffff800000803d09 <open_dev+0x80>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:106 (discriminator 2)
ffff800000803cff:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803d03:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000803d07:	73 e6                	jae    ffff800000803cef <open_dev+0x66>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:107
    if(p>=name)
ffff800000803d09:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803d0d:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000803d11:	72 0c                	jb     ffff800000803d1f <open_dev+0x96>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:108
        name=p+1;
ffff800000803d13:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803d17:	48 83 c0 01          	add    rax,0x1
ffff800000803d1b:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:109
    if(memcmp(name,"tty",3)==0){
ffff800000803d1f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803d23:	ba 03 00 00 00       	mov    edx,0x3
ffff800000803d28:	48 b9 da d8 ff ff ff 	movabs rcx,0xffffffffffffd8da
ffff800000803d2f:	ff ff ff 
ffff800000803d32:	48 8d 0c 0b          	lea    rcx,[rbx+rcx*1]
ffff800000803d36:	48 89 ce             	mov    rsi,rcx
ffff800000803d39:	48 89 c7             	mov    rdi,rax
ffff800000803d3c:	49 89 df             	mov    r15,rbx
ffff800000803d3f:	48 b8 06 53 ef ff ff 	movabs rax,0xffffffffffef5306
ffff800000803d46:	ff ff ff 
ffff800000803d49:	48 01 d8             	add    rax,rbx
ffff800000803d4c:	ff d0                	call   rax
ffff800000803d4e:	85 c0                	test   eax,eax
ffff800000803d50:	75 22                	jne    ffff800000803d74 <open_dev+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:110
        return init_tty(inode,filp);
ffff800000803d52:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000803d56:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000803d5a:	48 89 d6             	mov    rsi,rdx
ffff800000803d5d:	48 89 c7             	mov    rdi,rax
ffff800000803d60:	49 89 df             	mov    r15,rbx
ffff800000803d63:	48 b8 84 46 ef ff ff 	movabs rax,0xffffffffffef4684
ffff800000803d6a:	ff ff ff 
ffff800000803d6d:	48 01 d8             	add    rax,rbx
ffff800000803d70:	ff d0                	call   rax
ffff800000803d72:	eb 57                	jmp    ffff800000803dcb <open_dev+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:111
    }else if(strcmp(name,"console")==0){
ffff800000803d74:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803d78:	48 ba ce d8 ff ff ff 	movabs rdx,0xffffffffffffd8ce
ffff800000803d7f:	ff ff ff 
ffff800000803d82:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000803d86:	48 89 d6             	mov    rsi,rdx
ffff800000803d89:	48 89 c7             	mov    rdi,rax
ffff800000803d8c:	49 89 df             	mov    r15,rbx
ffff800000803d8f:	48 b8 0e 56 ef ff ff 	movabs rax,0xffffffffffef560e
ffff800000803d96:	ff ff ff 
ffff800000803d99:	48 01 d8             	add    rax,rbx
ffff800000803d9c:	ff d0                	call   rax
ffff800000803d9e:	85 c0                	test   eax,eax
ffff800000803da0:	75 22                	jne    ffff800000803dc4 <open_dev+0x13b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:112
        return open_framebuffer(inode,filp);
ffff800000803da2:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000803da6:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000803daa:	48 89 d6             	mov    rsi,rdx
ffff800000803dad:	48 89 c7             	mov    rdi,rax
ffff800000803db0:	49 89 df             	mov    r15,rbx
ffff800000803db3:	48 b8 74 d5 ee ff ff 	movabs rax,0xffffffffffeed574
ffff800000803dba:	ff ff ff 
ffff800000803dbd:	48 01 d8             	add    rax,rbx
ffff800000803dc0:	ff d0                	call   rax
ffff800000803dc2:	eb 07                	jmp    ffff800000803dcb <open_dev+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:114
    }
    return -1;
ffff800000803dc4:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:115
}
ffff800000803dcb:	48 83 c4 20          	add    rsp,0x20
ffff800000803dcf:	5b                   	pop    rbx
ffff800000803dd0:	41 5f                	pop    r15
ffff800000803dd2:	5d                   	pop    rbp
ffff800000803dd3:	c3                   	ret    

ffff800000803dd4 <close_dev>:
close_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:116
long close_dev(struct index_node * inode,struct file * filp){
ffff800000803dd4:	f3 0f 1e fa          	endbr64 
ffff800000803dd8:	55                   	push   rbp
ffff800000803dd9:	48 89 e5             	mov    rbp,rsp
ffff800000803ddc:	41 57                	push   r15
ffff800000803dde:	53                   	push   rbx
ffff800000803ddf:	48 83 ec 20          	sub    rsp,0x20
ffff800000803de3:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000803de3 <close_dev+0xf>
ffff800000803dea:	49 bb 35 8a 11 00 00 	movabs r11,0x118a35
ffff800000803df1:	00 00 00 
ffff800000803df4:	4c 01 db             	add    rbx,r11
ffff800000803df7:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000803dfb:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:118
    //查看文件名
    char* name=filp->dentry->name;
ffff800000803dff:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000803e03:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000803e07:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803e0a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:119
    char* p=name+ strlen(name)-1;
ffff800000803e0e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803e12:	48 89 c7             	mov    rdi,rax
ffff800000803e15:	49 89 df             	mov    r15,rbx
ffff800000803e18:	48 b8 8d 56 ef ff ff 	movabs rax,0xffffffffffef568d
ffff800000803e1f:	ff ff ff 
ffff800000803e22:	48 01 d8             	add    rax,rbx
ffff800000803e25:	ff d0                	call   rax
ffff800000803e27:	48 98                	cdqe   
ffff800000803e29:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff800000803e2d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803e31:	48 01 d0             	add    rax,rdx
ffff800000803e34:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:120
    for(;*p!='/'&&p>=name;p--);
ffff800000803e38:	eb 05                	jmp    ffff800000803e3f <close_dev+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:120 (discriminator 3)
ffff800000803e3a:	48 83 6d e0 01       	sub    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:120 (discriminator 1)
ffff800000803e3f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803e43:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000803e46:	3c 2f                	cmp    al,0x2f
ffff800000803e48:	74 0a                	je     ffff800000803e54 <close_dev+0x80>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:120 (discriminator 2)
ffff800000803e4a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803e4e:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000803e52:	73 e6                	jae    ffff800000803e3a <close_dev+0x66>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:121
    if(p>=name)
ffff800000803e54:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803e58:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000803e5c:	72 0c                	jb     ffff800000803e6a <close_dev+0x96>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:122
        name=p+1;
ffff800000803e5e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803e62:	48 83 c0 01          	add    rax,0x1
ffff800000803e66:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:123
    if(memcmp(name,"tty",3)==0){
ffff800000803e6a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803e6e:	ba 03 00 00 00       	mov    edx,0x3
ffff800000803e73:	48 b9 da d8 ff ff ff 	movabs rcx,0xffffffffffffd8da
ffff800000803e7a:	ff ff ff 
ffff800000803e7d:	48 8d 0c 0b          	lea    rcx,[rbx+rcx*1]
ffff800000803e81:	48 89 ce             	mov    rsi,rcx
ffff800000803e84:	48 89 c7             	mov    rdi,rax
ffff800000803e87:	49 89 df             	mov    r15,rbx
ffff800000803e8a:	48 b8 06 53 ef ff ff 	movabs rax,0xffffffffffef5306
ffff800000803e91:	ff ff ff 
ffff800000803e94:	48 01 d8             	add    rax,rbx
ffff800000803e97:	ff d0                	call   rax
ffff800000803e99:	85 c0                	test   eax,eax
ffff800000803e9b:	75 22                	jne    ffff800000803ebf <close_dev+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:124
        return close_tty(inode,filp);
ffff800000803e9d:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000803ea1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000803ea5:	48 89 d6             	mov    rsi,rdx
ffff800000803ea8:	48 89 c7             	mov    rdi,rax
ffff800000803eab:	49 89 df             	mov    r15,rbx
ffff800000803eae:	48 b8 b7 45 ef ff ff 	movabs rax,0xffffffffffef45b7
ffff800000803eb5:	ff ff ff 
ffff800000803eb8:	48 01 d8             	add    rax,rbx
ffff800000803ebb:	ff d0                	call   rax
ffff800000803ebd:	eb 57                	jmp    ffff800000803f16 <close_dev+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:125
    }else if(strcmp(name,"console")==0){
ffff800000803ebf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803ec3:	48 ba ce d8 ff ff ff 	movabs rdx,0xffffffffffffd8ce
ffff800000803eca:	ff ff ff 
ffff800000803ecd:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000803ed1:	48 89 d6             	mov    rsi,rdx
ffff800000803ed4:	48 89 c7             	mov    rdi,rax
ffff800000803ed7:	49 89 df             	mov    r15,rbx
ffff800000803eda:	48 b8 0e 56 ef ff ff 	movabs rax,0xffffffffffef560e
ffff800000803ee1:	ff ff ff 
ffff800000803ee4:	48 01 d8             	add    rax,rbx
ffff800000803ee7:	ff d0                	call   rax
ffff800000803ee9:	85 c0                	test   eax,eax
ffff800000803eeb:	75 22                	jne    ffff800000803f0f <close_dev+0x13b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:126
        return close_framebuffer(inode,filp);
ffff800000803eed:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000803ef1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000803ef5:	48 89 d6             	mov    rsi,rdx
ffff800000803ef8:	48 89 c7             	mov    rdi,rax
ffff800000803efb:	49 89 df             	mov    r15,rbx
ffff800000803efe:	48 b8 cb d5 ee ff ff 	movabs rax,0xffffffffffeed5cb
ffff800000803f05:	ff ff ff 
ffff800000803f08:	48 01 d8             	add    rax,rbx
ffff800000803f0b:	ff d0                	call   rax
ffff800000803f0d:	eb 07                	jmp    ffff800000803f16 <close_dev+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:128
    }
    return -1;
ffff800000803f0f:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:130

}
ffff800000803f16:	48 83 c4 20          	add    rsp,0x20
ffff800000803f1a:	5b                   	pop    rbx
ffff800000803f1b:	41 5f                	pop    r15
ffff800000803f1d:	5d                   	pop    rbp
ffff800000803f1e:	c3                   	ret    

ffff800000803f1f <read_dev>:
read_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:131
long read_dev(struct file * filp,char * buf,unsigned long count,long * position){
ffff800000803f1f:	f3 0f 1e fa          	endbr64 
ffff800000803f23:	55                   	push   rbp
ffff800000803f24:	48 89 e5             	mov    rbp,rsp
ffff800000803f27:	41 57                	push   r15
ffff800000803f29:	53                   	push   rbx
ffff800000803f2a:	48 83 ec 40          	sub    rsp,0x40
ffff800000803f2e:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000803f2e <read_dev+0xf>
ffff800000803f35:	49 bb ea 88 11 00 00 	movabs r11,0x1188ea
ffff800000803f3c:	00 00 00 
ffff800000803f3f:	4c 01 db             	add    rbx,r11
ffff800000803f42:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000803f46:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffff800000803f4a:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
ffff800000803f4e:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:133
    //判断是不是块设备文件
    struct index_node* i_dev=filp->dentry->dir_inode;
ffff800000803f52:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803f56:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000803f5a:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000803f5e:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:140
        //这里需要调用缓冲区层的函数读取块设备
        return blkdev_read(i_dev->dev,*position,count,buf);
    }
    
    //查看文件名
    char* name=filp->dentry->name;
ffff800000803f62:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803f66:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000803f6a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803f6d:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:141
    char* p=name+ strlen(name)-1;
ffff800000803f71:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803f75:	48 89 c7             	mov    rdi,rax
ffff800000803f78:	49 89 df             	mov    r15,rbx
ffff800000803f7b:	48 b8 8d 56 ef ff ff 	movabs rax,0xffffffffffef568d
ffff800000803f82:	ff ff ff 
ffff800000803f85:	48 01 d8             	add    rax,rbx
ffff800000803f88:	ff d0                	call   rax
ffff800000803f8a:	48 98                	cdqe   
ffff800000803f8c:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff800000803f90:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803f94:	48 01 d0             	add    rax,rdx
ffff800000803f97:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:142
    for(;*p!='/'&&p>=name;p--);
ffff800000803f9b:	eb 05                	jmp    ffff800000803fa2 <read_dev+0x83>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:142 (discriminator 3)
ffff800000803f9d:	48 83 6d e0 01       	sub    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:142 (discriminator 1)
ffff800000803fa2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803fa6:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000803fa9:	3c 2f                	cmp    al,0x2f
ffff800000803fab:	74 0a                	je     ffff800000803fb7 <read_dev+0x98>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:142 (discriminator 2)
ffff800000803fad:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803fb1:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000803fb5:	73 e6                	jae    ffff800000803f9d <read_dev+0x7e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:143
    if(p>=name)
ffff800000803fb7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803fbb:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000803fbf:	72 0c                	jb     ffff800000803fcd <read_dev+0xae>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:144
        name=p+1;
ffff800000803fc1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803fc5:	48 83 c0 01          	add    rax,0x1
ffff800000803fc9:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:145
    if(memcmp(name,"tty",3)==0){
ffff800000803fcd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803fd1:	ba 03 00 00 00       	mov    edx,0x3
ffff800000803fd6:	48 b9 da d8 ff ff ff 	movabs rcx,0xffffffffffffd8da
ffff800000803fdd:	ff ff ff 
ffff800000803fe0:	48 8d 0c 0b          	lea    rcx,[rbx+rcx*1]
ffff800000803fe4:	48 89 ce             	mov    rsi,rcx
ffff800000803fe7:	48 89 c7             	mov    rdi,rax
ffff800000803fea:	49 89 df             	mov    r15,rbx
ffff800000803fed:	48 b8 06 53 ef ff ff 	movabs rax,0xffffffffffef5306
ffff800000803ff4:	ff ff ff 
ffff800000803ff7:	48 01 d8             	add    rax,rbx
ffff800000803ffa:	ff d0                	call   rax
ffff800000803ffc:	85 c0                	test   eax,eax
ffff800000803ffe:	75 27                	jne    ffff800000804027 <read_dev+0x108>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:146
        return read_tty(filp,buf,count,position);
ffff800000804000:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
ffff800000804004:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff800000804008:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
ffff80000080400c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000804010:	48 89 c7             	mov    rdi,rax
ffff800000804013:	49 89 df             	mov    r15,rbx
ffff800000804016:	48 b8 d8 47 ef ff ff 	movabs rax,0xffffffffffef47d8
ffff80000080401d:	ff ff ff 
ffff800000804020:	48 01 d8             	add    rax,rbx
ffff800000804023:	ff d0                	call   rax
ffff800000804025:	eb 5c                	jmp    ffff800000804083 <read_dev+0x164>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:147
    }else if(strcmp(name,"console")==0){
ffff800000804027:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080402b:	48 ba ce d8 ff ff ff 	movabs rdx,0xffffffffffffd8ce
ffff800000804032:	ff ff ff 
ffff800000804035:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000804039:	48 89 d6             	mov    rsi,rdx
ffff80000080403c:	48 89 c7             	mov    rdi,rax
ffff80000080403f:	49 89 df             	mov    r15,rbx
ffff800000804042:	48 b8 0e 56 ef ff ff 	movabs rax,0xffffffffffef560e
ffff800000804049:	ff ff ff 
ffff80000080404c:	48 01 d8             	add    rax,rbx
ffff80000080404f:	ff d0                	call   rax
ffff800000804051:	85 c0                	test   eax,eax
ffff800000804053:	75 27                	jne    ffff80000080407c <read_dev+0x15d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:148
        return read_framebuffer(filp,buf,count,position);
ffff800000804055:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
ffff800000804059:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000080405d:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
ffff800000804061:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000804065:	48 89 c7             	mov    rdi,rax
ffff800000804068:	49 89 df             	mov    r15,rbx
ffff80000080406b:	48 b8 f2 d5 ee ff ff 	movabs rax,0xffffffffffeed5f2
ffff800000804072:	ff ff ff 
ffff800000804075:	48 01 d8             	add    rax,rbx
ffff800000804078:	ff d0                	call   rax
ffff80000080407a:	eb 07                	jmp    ffff800000804083 <read_dev+0x164>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:150
    }
    return -1;
ffff80000080407c:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:152

}
ffff800000804083:	48 83 c4 40          	add    rsp,0x40
ffff800000804087:	5b                   	pop    rbx
ffff800000804088:	41 5f                	pop    r15
ffff80000080408a:	5d                   	pop    rbp
ffff80000080408b:	c3                   	ret    

ffff80000080408c <write_dev>:
write_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:153
long write_dev(struct file * filp,char * buf,unsigned long count,long * position){
ffff80000080408c:	f3 0f 1e fa          	endbr64 
ffff800000804090:	55                   	push   rbp
ffff800000804091:	48 89 e5             	mov    rbp,rsp
ffff800000804094:	41 57                	push   r15
ffff800000804096:	53                   	push   rbx
ffff800000804097:	48 83 ec 40          	sub    rsp,0x40
ffff80000080409b:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080409b <write_dev+0xf>
ffff8000008040a2:	49 bb 7d 87 11 00 00 	movabs r11,0x11877d
ffff8000008040a9:	00 00 00 
ffff8000008040ac:	4c 01 db             	add    rbx,r11
ffff8000008040af:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff8000008040b3:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffff8000008040b7:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
ffff8000008040bb:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:155
    //判断是不是块设备文件
    struct index_node* idev=filp->dentry->dir_inode;
ffff8000008040bf:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008040c3:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008040c7:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008040cb:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:162
        //这里需要调用缓冲区层的函数写块设备
        return blkdev_write(idev->dev,*position,count,buf);
    }

    //查看文件名
    char* name=filp->dentry->name;
ffff8000008040cf:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008040d3:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008040d7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008040da:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:163
    char* p=name+ strlen(name)-1;
ffff8000008040de:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008040e2:	48 89 c7             	mov    rdi,rax
ffff8000008040e5:	49 89 df             	mov    r15,rbx
ffff8000008040e8:	48 b8 8d 56 ef ff ff 	movabs rax,0xffffffffffef568d
ffff8000008040ef:	ff ff ff 
ffff8000008040f2:	48 01 d8             	add    rax,rbx
ffff8000008040f5:	ff d0                	call   rax
ffff8000008040f7:	48 98                	cdqe   
ffff8000008040f9:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff8000008040fd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804101:	48 01 d0             	add    rax,rdx
ffff800000804104:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:164
    for(;*p!='/'&&p>=name;p--);
ffff800000804108:	eb 05                	jmp    ffff80000080410f <write_dev+0x83>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:164 (discriminator 3)
ffff80000080410a:	48 83 6d e0 01       	sub    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:164 (discriminator 1)
ffff80000080410f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804113:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000804116:	3c 2f                	cmp    al,0x2f
ffff800000804118:	74 0a                	je     ffff800000804124 <write_dev+0x98>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:164 (discriminator 2)
ffff80000080411a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080411e:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000804122:	73 e6                	jae    ffff80000080410a <write_dev+0x7e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:165
    if(p>=name)
ffff800000804124:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804128:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff80000080412c:	72 0c                	jb     ffff80000080413a <write_dev+0xae>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:166
        name=p+1;
ffff80000080412e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804132:	48 83 c0 01          	add    rax,0x1
ffff800000804136:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:167
    if(memcmp(name,"tty",3)==0){
ffff80000080413a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080413e:	ba 03 00 00 00       	mov    edx,0x3
ffff800000804143:	48 b9 da d8 ff ff ff 	movabs rcx,0xffffffffffffd8da
ffff80000080414a:	ff ff ff 
ffff80000080414d:	48 8d 0c 0b          	lea    rcx,[rbx+rcx*1]
ffff800000804151:	48 89 ce             	mov    rsi,rcx
ffff800000804154:	48 89 c7             	mov    rdi,rax
ffff800000804157:	49 89 df             	mov    r15,rbx
ffff80000080415a:	48 b8 06 53 ef ff ff 	movabs rax,0xffffffffffef5306
ffff800000804161:	ff ff ff 
ffff800000804164:	48 01 d8             	add    rax,rbx
ffff800000804167:	ff d0                	call   rax
ffff800000804169:	85 c0                	test   eax,eax
ffff80000080416b:	75 27                	jne    ffff800000804194 <write_dev+0x108>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:168
        return write_tty(filp,buf,count,position);
ffff80000080416d:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
ffff800000804171:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff800000804175:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
ffff800000804179:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080417d:	48 89 c7             	mov    rdi,rax
ffff800000804180:	49 89 df             	mov    r15,rbx
ffff800000804183:	48 b8 99 48 ef ff ff 	movabs rax,0xffffffffffef4899
ffff80000080418a:	ff ff ff 
ffff80000080418d:	48 01 d8             	add    rax,rbx
ffff800000804190:	ff d0                	call   rax
ffff800000804192:	eb 5c                	jmp    ffff8000008041f0 <write_dev+0x164>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:169
    }else if(strcmp(name,"console")==0){
ffff800000804194:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804198:	48 ba ce d8 ff ff ff 	movabs rdx,0xffffffffffffd8ce
ffff80000080419f:	ff ff ff 
ffff8000008041a2:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff8000008041a6:	48 89 d6             	mov    rsi,rdx
ffff8000008041a9:	48 89 c7             	mov    rdi,rax
ffff8000008041ac:	49 89 df             	mov    r15,rbx
ffff8000008041af:	48 b8 0e 56 ef ff ff 	movabs rax,0xffffffffffef560e
ffff8000008041b6:	ff ff ff 
ffff8000008041b9:	48 01 d8             	add    rax,rbx
ffff8000008041bc:	ff d0                	call   rax
ffff8000008041be:	85 c0                	test   eax,eax
ffff8000008041c0:	75 27                	jne    ffff8000008041e9 <write_dev+0x15d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:170
        return write_framebuffer(filp,buf,count,position);
ffff8000008041c2:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
ffff8000008041c6:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff8000008041ca:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
ffff8000008041ce:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008041d2:	48 89 c7             	mov    rdi,rax
ffff8000008041d5:	49 89 df             	mov    r15,rbx
ffff8000008041d8:	48 b8 21 d6 ee ff ff 	movabs rax,0xffffffffffeed621
ffff8000008041df:	ff ff ff 
ffff8000008041e2:	48 01 d8             	add    rax,rbx
ffff8000008041e5:	ff d0                	call   rax
ffff8000008041e7:	eb 07                	jmp    ffff8000008041f0 <write_dev+0x164>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:172
    }
    return -1;
ffff8000008041e9:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:174

}
ffff8000008041f0:	48 83 c4 40          	add    rsp,0x40
ffff8000008041f4:	5b                   	pop    rbx
ffff8000008041f5:	41 5f                	pop    r15
ffff8000008041f7:	5d                   	pop    rbp
ffff8000008041f8:	c3                   	ret    

ffff8000008041f9 <ioctl_dev>:
ioctl_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:175
long ioctl_dev(struct index_node * inode,struct file * filp,unsigned long cmd,unsigned long arg){
ffff8000008041f9:	f3 0f 1e fa          	endbr64 
ffff8000008041fd:	55                   	push   rbp
ffff8000008041fe:	48 89 e5             	mov    rbp,rsp
ffff800000804201:	41 57                	push   r15
ffff800000804203:	53                   	push   rbx
ffff800000804204:	48 83 ec 40          	sub    rsp,0x40
ffff800000804208:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000804208 <ioctl_dev+0xf>
ffff80000080420f:	49 bb 10 86 11 00 00 	movabs r11,0x118610
ffff800000804216:	00 00 00 
ffff800000804219:	4c 01 db             	add    rbx,r11
ffff80000080421c:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000804220:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffff800000804224:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
ffff800000804228:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:177
    //判断是不是块设备文件
    struct index_node* idev=filp->dentry->dir_inode;
ffff80000080422c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000804230:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000804234:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000804238:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:183
    if(IS_BLKDEV(idev->dev)){
        //这里需要调用缓冲区层的函数ioctl块设备
        return 1;
    }
    //查看文件名
    char* name=filp->dentry->name;
ffff80000080423c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000804240:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000804244:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804247:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:184
    char* p=name+ strlen(name)-1;
ffff80000080424b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080424f:	48 89 c7             	mov    rdi,rax
ffff800000804252:	49 89 df             	mov    r15,rbx
ffff800000804255:	48 b8 8d 56 ef ff ff 	movabs rax,0xffffffffffef568d
ffff80000080425c:	ff ff ff 
ffff80000080425f:	48 01 d8             	add    rax,rbx
ffff800000804262:	ff d0                	call   rax
ffff800000804264:	48 98                	cdqe   
ffff800000804266:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff80000080426a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080426e:	48 01 d0             	add    rax,rdx
ffff800000804271:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:185
    for(;*p!='/'&&p>=name;p--);
ffff800000804275:	eb 05                	jmp    ffff80000080427c <ioctl_dev+0x83>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:185 (discriminator 3)
ffff800000804277:	48 83 6d e0 01       	sub    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:185 (discriminator 1)
ffff80000080427c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804280:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000804283:	3c 2f                	cmp    al,0x2f
ffff800000804285:	74 0a                	je     ffff800000804291 <ioctl_dev+0x98>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:185 (discriminator 2)
ffff800000804287:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080428b:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff80000080428f:	73 e6                	jae    ffff800000804277 <ioctl_dev+0x7e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:186
    if(p>=name)
ffff800000804291:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804295:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000804299:	72 0c                	jb     ffff8000008042a7 <ioctl_dev+0xae>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:187
        name=p+1;
ffff80000080429b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080429f:	48 83 c0 01          	add    rax,0x1
ffff8000008042a3:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:188
    if(memcmp(name,"tty",3)==0){
ffff8000008042a7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008042ab:	ba 03 00 00 00       	mov    edx,0x3
ffff8000008042b0:	48 b9 da d8 ff ff ff 	movabs rcx,0xffffffffffffd8da
ffff8000008042b7:	ff ff ff 
ffff8000008042ba:	48 8d 0c 0b          	lea    rcx,[rbx+rcx*1]
ffff8000008042be:	48 89 ce             	mov    rsi,rcx
ffff8000008042c1:	48 89 c7             	mov    rdi,rax
ffff8000008042c4:	49 89 df             	mov    r15,rbx
ffff8000008042c7:	48 b8 06 53 ef ff ff 	movabs rax,0xffffffffffef5306
ffff8000008042ce:	ff ff ff 
ffff8000008042d1:	48 01 d8             	add    rax,rbx
ffff8000008042d4:	ff d0                	call   rax
ffff8000008042d6:	85 c0                	test   eax,eax
ffff8000008042d8:	75 27                	jne    ffff800000804301 <ioctl_dev+0x108>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:189
        return ioctl_tty(inode, filp, cmd, arg);
ffff8000008042da:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
ffff8000008042de:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff8000008042e2:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
ffff8000008042e6:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008042ea:	48 89 c7             	mov    rdi,rax
ffff8000008042ed:	49 89 df             	mov    r15,rbx
ffff8000008042f0:	48 b8 89 49 ef ff ff 	movabs rax,0xffffffffffef4989
ffff8000008042f7:	ff ff ff 
ffff8000008042fa:	48 01 d8             	add    rax,rbx
ffff8000008042fd:	ff d0                	call   rax
ffff8000008042ff:	eb 5c                	jmp    ffff80000080435d <ioctl_dev+0x164>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:190
    }else if(strcmp(name,"console")==0){
ffff800000804301:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804305:	48 ba ce d8 ff ff ff 	movabs rdx,0xffffffffffffd8ce
ffff80000080430c:	ff ff ff 
ffff80000080430f:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000804313:	48 89 d6             	mov    rsi,rdx
ffff800000804316:	48 89 c7             	mov    rdi,rax
ffff800000804319:	49 89 df             	mov    r15,rbx
ffff80000080431c:	48 b8 0e 56 ef ff ff 	movabs rax,0xffffffffffef560e
ffff800000804323:	ff ff ff 
ffff800000804326:	48 01 d8             	add    rax,rbx
ffff800000804329:	ff d0                	call   rax
ffff80000080432b:	85 c0                	test   eax,eax
ffff80000080432d:	75 27                	jne    ffff800000804356 <ioctl_dev+0x15d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:191
        return ioctl_framebuffer(inode,filp,cmd,arg);
ffff80000080432f:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
ffff800000804333:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff800000804337:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
ffff80000080433b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080433f:	48 89 c7             	mov    rdi,rax
ffff800000804342:	49 89 df             	mov    r15,rbx
ffff800000804345:	48 b8 42 d7 ee ff ff 	movabs rax,0xffffffffffeed742
ffff80000080434c:	ff ff ff 
ffff80000080434f:	48 01 d8             	add    rax,rbx
ffff800000804352:	ff d0                	call   rax
ffff800000804354:	eb 07                	jmp    ffff80000080435d <ioctl_dev+0x164>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:193
    }
    return -1;
ffff800000804356:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:195

}
ffff80000080435d:	48 83 c4 40          	add    rsp,0x40
ffff800000804361:	5b                   	pop    rbx
ffff800000804362:	41 5f                	pop    r15
ffff800000804364:	5d                   	pop    rbp
ffff800000804365:	c3                   	ret    

ffff800000804366 <load_driver>:
load_driver():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:197
int load_driver(char *path)
{
ffff800000804366:	f3 0f 1e fa          	endbr64 
ffff80000080436a:	55                   	push   rbp
ffff80000080436b:	48 89 e5             	mov    rbp,rsp
ffff80000080436e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080436e <load_driver+0x8>
ffff800000804375:	49 bb aa 84 11 00 00 	movabs r11,0x1184aa
ffff80000080437c:	00 00 00 
ffff80000080437f:	4c 01 d8             	add    rax,r11
ffff800000804382:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:199
    
}
ffff800000804386:	90                   	nop
ffff800000804387:	5d                   	pop    rbp
ffff800000804388:	c3                   	ret    

ffff800000804389 <init_proc>:
init_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:26
TSS *tss=0xffff800000108000ul;
int cur_proc=0;
int pidd=0;
int palloc_paddr=0;
static pid_t sidd=0;
void init_proc(){
ffff800000804389:	f3 0f 1e fa          	endbr64 
ffff80000080438d:	55                   	push   rbp
ffff80000080438e:	48 89 e5             	mov    rbp,rsp
ffff800000804391:	41 57                	push   r15
ffff800000804393:	53                   	push   rbx
ffff800000804394:	48 83 ec 10          	sub    rsp,0x10
ffff800000804398:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000804398 <init_proc+0xf>
ffff80000080439f:	49 bb 80 84 11 00 00 	movabs r11,0x118480
ffff8000008043a6:	00 00 00 
ffff8000008043a9:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:28
    //task=(struct process*)get_global_var(TASK_PCBS_ADDR);//[MAX_TASKS];;
    task=(struct process*)kmallocat(0,13);
ffff8000008043ac:	be 0d 00 00 00       	mov    esi,0xd
ffff8000008043b1:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008043b6:	49 89 df             	mov    r15,rbx
ffff8000008043b9:	48 b8 62 58 ee ff ff 	movabs rax,0xffffffffffee5862
ffff8000008043c0:	ff ff ff 
ffff8000008043c3:	48 01 d8             	add    rax,rbx
ffff8000008043c6:	ff d0                	call   rax
ffff8000008043c8:	48 89 c2             	mov    rdx,rax
ffff8000008043cb:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff8000008043d2:	ff ff ff 
ffff8000008043d5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008043d9:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:29
    for(int i=0;i<MAX_PROC_COUNT;i++){
ffff8000008043dc:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff8000008043e3:	eb 7b                	jmp    ffff800000804460 <init_proc+0xd7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:30 (discriminator 3)
        task[i].pid=-1;
ffff8000008043e5:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff8000008043ec:	ff ff ff 
ffff8000008043ef:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008043f3:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008043f6:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008043f9:	48 98                	cdqe   
ffff8000008043fb:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000804402:	48 01 d0             	add    rax,rdx
ffff800000804405:	c7 00 ff ff ff ff    	mov    DWORD PTR [rax],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:31 (discriminator 3)
        task[i].stat=TASK_EMPTY;
ffff80000080440b:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000804412:	ff ff ff 
ffff800000804415:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804419:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080441c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080441f:	48 98                	cdqe   
ffff800000804421:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000804428:	48 01 d0             	add    rax,rdx
ffff80000080442b:	c7 40 18 00 00 00 00 	mov    DWORD PTR [rax+0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:32 (discriminator 3)
        task[i].parent_pid=-1;
ffff800000804432:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000804439:	ff ff ff 
ffff80000080443c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804440:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804443:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000804446:	48 98                	cdqe   
ffff800000804448:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff80000080444f:	48 01 d0             	add    rax,rdx
ffff800000804452:	c7 80 bc 00 00 00 ff 	mov    DWORD PTR [rax+0xbc],0xffffffff
ffff800000804459:	ff ff ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:29 (discriminator 3)
    for(int i=0;i<MAX_PROC_COUNT;i++){
ffff80000080445c:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:29 (discriminator 1)
ffff800000804460:	83 7d ec 3f          	cmp    DWORD PTR [rbp-0x14],0x3f
ffff800000804464:	0f 8e 7b ff ff ff    	jle    ffff8000008043e5 <init_proc+0x5c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:34
    }
    cur_proc=0;//proc zero
ffff80000080446a:	48 b8 50 fe ff ff ff 	movabs rax,0xfffffffffffffe50
ffff800000804471:	ff ff ff 
ffff800000804474:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804478:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:35
    current=task;
ffff80000080447e:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000804485:	ff ff ff 
ffff800000804488:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080448c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080448f:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000804496:	ff ff ff 
ffff800000804499:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080449d:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:36
    pidd=1;
ffff8000008044a0:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff8000008044a7:	ff ff ff 
ffff8000008044aa:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008044ae:	c7 00 01 00 00 00    	mov    DWORD PTR [rax],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:41


    //asm volatile("lldt %0"::"m"(xi));
    //asm volatile("ltr %0"::"m"(zi));
    set_tss(0x400000+KNL_BASE,0x400000+KNL_BASE,0x400000+KNL_BASE\
ffff8000008044b4:	68 00 00 80 00       	push   0x800000
ffff8000008044b9:	c7 44 24 04 00 80 ff 	mov    DWORD PTR [rsp+0x4],0xffff8000
ffff8000008044c0:	ff 
ffff8000008044c1:	68 00 00 80 00       	push   0x800000
ffff8000008044c6:	c7 44 24 04 00 80 ff 	mov    DWORD PTR [rsp+0x4],0xffff8000
ffff8000008044cd:	ff 
ffff8000008044ce:	68 00 00 80 00       	push   0x800000
ffff8000008044d3:	c7 44 24 04 00 80 ff 	mov    DWORD PTR [rsp+0x4],0xffff8000
ffff8000008044da:	ff 
ffff8000008044db:	68 00 00 80 00       	push   0x800000
ffff8000008044e0:	c7 44 24 04 00 80 ff 	mov    DWORD PTR [rsp+0x4],0xffff8000
ffff8000008044e7:	ff 
ffff8000008044e8:	49 b9 00 00 80 00 00 	movabs r9,0xffff800000800000
ffff8000008044ef:	80 ff ff 
ffff8000008044f2:	49 b8 00 00 80 00 00 	movabs r8,0xffff800000800000
ffff8000008044f9:	80 ff ff 
ffff8000008044fc:	48 b8 00 00 80 00 00 	movabs rax,0xffff800000800000
ffff800000804503:	80 ff ff 
ffff800000804506:	48 89 c1             	mov    rcx,rax
ffff800000804509:	48 b8 00 00 40 00 00 	movabs rax,0xffff800000400000
ffff800000804510:	80 ff ff 
ffff800000804513:	48 89 c2             	mov    rdx,rax
ffff800000804516:	48 b8 00 00 40 00 00 	movabs rax,0xffff800000400000
ffff80000080451d:	80 ff ff 
ffff800000804520:	48 89 c6             	mov    rsi,rax
ffff800000804523:	48 b8 00 00 40 00 00 	movabs rax,0xffff800000400000
ffff80000080452a:	80 ff ff 
ffff80000080452d:	48 89 c7             	mov    rdi,rax
ffff800000804530:	49 89 df             	mov    r15,rbx
ffff800000804533:	48 b8 7f 9b ee ff ff 	movabs rax,0xffffffffffee9b7f
ffff80000080453a:	ff ff ff 
ffff80000080453d:	48 01 d8             	add    rax,rbx
ffff800000804540:	ff d0                	call   rax
ffff800000804542:	48 83 c4 20          	add    rsp,0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:46
    ,0x800000+KNL_BASE,0x800000+KNL_BASE,0x800000+KNL_BASE,0x800000+KNL_BASE\
    ,0x800000+KNL_BASE,0x800000+KNL_BASE,0x800000+KNL_BASE);

    //===============创建0号进程======================
    int zi= init_proc0();
ffff800000804546:	49 89 df             	mov    r15,rbx
ffff800000804549:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080454e:	48 ba 00 81 ee ff ff 	movabs rdx,0xffffffffffee8100
ffff800000804555:	ff ff ff 
ffff800000804558:	48 01 da             	add    rdx,rbx
ffff80000080455b:	ff d2                	call   rdx
ffff80000080455d:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:47
    task[zi].stat=TASK_READY;
ffff800000804560:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000804567:	ff ff ff 
ffff80000080456a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080456e:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804571:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000804574:	48 98                	cdqe   
ffff800000804576:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff80000080457d:	48 01 d0             	add    rax,rdx
ffff800000804580:	c7 40 18 02 00 00 00 	mov    DWORD PTR [rax+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:49
    //IA32_INTERRUPT_SSP_TABLE_ADDR，准备IST
    wrmsr(0x6a8,tss->rsvd2);
ffff800000804587:	48 b8 30 fe ff ff ff 	movabs rax,0xfffffffffffffe30
ffff80000080458e:	ff ff ff 
ffff800000804591:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804595:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804598:	48 8b 40 1c          	mov    rax,QWORD PTR [rax+0x1c]
ffff80000080459c:	48 89 c6             	mov    rsi,rax
ffff80000080459f:	bf a8 06 00 00       	mov    edi,0x6a8
ffff8000008045a4:	49 89 df             	mov    r15,rbx
ffff8000008045a7:	48 b8 0a 46 ee ff ff 	movabs rax,0xffffffffffee460a
ffff8000008045ae:	ff ff ff 
ffff8000008045b1:	48 01 d8             	add    rax,rbx
ffff8000008045b4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:51
    //把内核代码段选择子写到MSR寄存器中准备用于特权级转换(sysexit，现在没用)
    wrmsr(0x174,0x8);
ffff8000008045b6:	be 08 00 00 00       	mov    esi,0x8
ffff8000008045bb:	bf 74 01 00 00       	mov    edi,0x174
ffff8000008045c0:	49 89 df             	mov    r15,rbx
ffff8000008045c3:	48 b8 0a 46 ee ff ff 	movabs rax,0xffffffffffee460a
ffff8000008045ca:	ff ff ff 
ffff8000008045cd:	48 01 d8             	add    rax,rbx
ffff8000008045d0:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:53
    //准备用于特权级转换(sysret，正在使用)
    wrmsr(0xc0000081,0x0020000800000000ul);
ffff8000008045d2:	48 b8 00 00 00 00 08 	movabs rax,0x20000800000000
ffff8000008045d9:	00 20 00 
ffff8000008045dc:	48 89 c6             	mov    rsi,rax
ffff8000008045df:	b8 81 00 00 c0       	mov    eax,0xc0000081
ffff8000008045e4:	48 89 c7             	mov    rdi,rax
ffff8000008045e7:	49 89 df             	mov    r15,rbx
ffff8000008045ea:	48 b8 0a 46 ee ff ff 	movabs rax,0xffffffffffee460a
ffff8000008045f1:	ff ff ff 
ffff8000008045f4:	48 01 d8             	add    rax,rbx
ffff8000008045f7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:55

    comprintf("proc init set.\r\ntss.ist=0x%p\r\n",tss->ists[0]);
ffff8000008045f9:	48 b8 30 fe ff ff ff 	movabs rax,0xfffffffffffffe30
ffff800000804600:	ff ff ff 
ffff800000804603:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804607:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080460a:	48 8b 40 24          	mov    rax,QWORD PTR [rax+0x24]
ffff80000080460e:	48 89 c6             	mov    rsi,rax
ffff800000804611:	48 b8 e8 d8 ff ff ff 	movabs rax,0xffffffffffffd8e8
ffff800000804618:	ff ff ff 
ffff80000080461b:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080461f:	48 89 c7             	mov    rdi,rax
ffff800000804622:	49 89 df             	mov    r15,rbx
ffff800000804625:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080462a:	48 ba 1b 4e ef ff ff 	movabs rdx,0xffffffffffef4e1b
ffff800000804631:	ff ff ff 
ffff800000804634:	48 01 da             	add    rdx,rbx
ffff800000804637:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:58
    //创建一个测试进程
//    create_test_proc();
}
ffff800000804639:	90                   	nop
ffff80000080463a:	48 8d 65 f0          	lea    rsp,[rbp-0x10]
ffff80000080463e:	5b                   	pop    rbx
ffff80000080463f:	41 5f                	pop    r15
ffff800000804641:	5d                   	pop    rbp
ffff800000804642:	c3                   	ret    

ffff800000804643 <create_test_proc>:
create_test_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:59
void create_test_proc(){
ffff800000804643:	f3 0f 1e fa          	endbr64 
ffff800000804647:	55                   	push   rbp
ffff800000804648:	48 89 e5             	mov    rbp,rsp
ffff80000080464b:	41 57                	push   r15
ffff80000080464d:	53                   	push   rbx
ffff80000080464e:	48 83 ec 20          	sub    rsp,0x20
ffff800000804652:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000804652 <create_test_proc+0xf>
ffff800000804659:	49 bb c6 81 11 00 00 	movabs r11,0x1181c6
ffff800000804660:	00 00 00 
ffff800000804663:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:61

    int index=req_proc();
ffff800000804666:	49 89 df             	mov    r15,rbx
ffff800000804669:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080466e:	48 ba 42 83 ee ff ff 	movabs rdx,0xffffffffffee8342
ffff800000804675:	ff ff ff 
ffff800000804678:	48 01 da             	add    rdx,rbx
ffff80000080467b:	ff d2                	call   rdx
ffff80000080467d:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:62
    task[index].stat=TASK_READY;
ffff800000804680:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000804687:	ff ff ff 
ffff80000080468a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080468e:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804691:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000804694:	48 98                	cdqe   
ffff800000804696:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff80000080469d:	48 01 d0             	add    rax,rdx
ffff8000008046a0:	c7 40 18 02 00 00 00 	mov    DWORD PTR [rax+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:63
    int currsp=0x9fc00-1;
ffff8000008046a7:	c7 45 dc ff fb 09 00 	mov    DWORD PTR [rbp-0x24],0x9fbff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:64
    asm volatile("mov %%rsp,%0":"=m"(currsp));
ffff8000008046ae:	48 89 65 dc          	mov    QWORD PTR [rbp-0x24],rsp
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:65
    set_proc(0, 0, 0, 0, 0x10, 0x8, 0x10, 0x10, 0x10, 0x10,
ffff8000008046b2:	48 b8 18 fe ff ff ff 	movabs rax,0xfffffffffffffe18
ffff8000008046b9:	ff ff ff 
ffff8000008046bc:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008046c0:	48 89 c2             	mov    rdx,rax
ffff8000008046c3:	48 83 ec 08          	sub    rsp,0x8
ffff8000008046c7:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008046ca:	50                   	push   rax
ffff8000008046cb:	6a 00                	push   0x0
ffff8000008046cd:	52                   	push   rdx
ffff8000008046ce:	6a 00                	push   0x0
ffff8000008046d0:	6a 00                	push   0x0
ffff8000008046d2:	6a 00                	push   0x0
ffff8000008046d4:	68 58 7d 00 00       	push   0x7d58
ffff8000008046d9:	6a 10                	push   0x10
ffff8000008046db:	6a 10                	push   0x10
ffff8000008046dd:	6a 10                	push   0x10
ffff8000008046df:	6a 10                	push   0x10
ffff8000008046e1:	41 b9 08 00 00 00    	mov    r9d,0x8
ffff8000008046e7:	41 b8 10 00 00 00    	mov    r8d,0x10
ffff8000008046ed:	b9 00 00 00 00       	mov    ecx,0x0
ffff8000008046f2:	ba 00 00 00 00       	mov    edx,0x0
ffff8000008046f7:	be 00 00 00 00       	mov    esi,0x0
ffff8000008046fc:	bf 00 00 00 00       	mov    edi,0x0
ffff800000804701:	49 89 df             	mov    r15,rbx
ffff800000804704:	48 b8 93 84 ee ff ff 	movabs rax,0xffffffffffee8493
ffff80000080470b:	ff ff ff 
ffff80000080470e:	48 01 d8             	add    rax,rbx
ffff800000804711:	ff d0                	call   rax
ffff800000804713:	48 83 c4 60          	add    rsp,0x60
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:67
             0x7e00- sizeof(stack_store_regs), 0, 0, 0, (long)_syscall_sysret, 0, index);
    task[index].tss.rsp0=0x400000;
ffff800000804717:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff80000080471e:	ff ff ff 
ffff800000804721:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804725:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804728:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080472b:	48 98                	cdqe   
ffff80000080472d:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000804734:	48 01 d0             	add    rax,rdx
ffff800000804737:	48 c7 80 fc 01 00 00 	mov    QWORD PTR [rax+0x1fc],0x400000
ffff80000080473e:	00 00 40 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:68
    task[index].mem_struct.stack_top=0x7e00;
ffff800000804742:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000804749:	ff ff ff 
ffff80000080474c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804750:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804753:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000804756:	48 98                	cdqe   
ffff800000804758:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff80000080475f:	48 01 d0             	add    rax,rdx
ffff800000804762:	48 c7 40 40 00 7e 00 	mov    QWORD PTR [rax+0x40],0x7e00
ffff800000804769:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:69
    task[index].mem_struct.stack_bottom=0x6e00;
ffff80000080476a:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000804771:	ff ff ff 
ffff800000804774:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804778:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080477b:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080477e:	48 98                	cdqe   
ffff800000804780:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000804787:	48 01 d0             	add    rax,rdx
ffff80000080478a:	48 c7 40 38 00 6e 00 	mov    QWORD PTR [rax+0x38],0x6e00
ffff800000804791:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:70
    task[index].mem_struct.heap_top=0x1101000;
ffff800000804792:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000804799:	ff ff ff 
ffff80000080479c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008047a0:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008047a3:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008047a6:	48 98                	cdqe   
ffff8000008047a8:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff8000008047af:	48 01 d0             	add    rax,rdx
ffff8000008047b2:	48 c7 40 30 00 10 10 	mov    QWORD PTR [rax+0x30],0x1101000
ffff8000008047b9:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:71
    task[index].mem_struct.heap_base=0x1100000;
ffff8000008047ba:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff8000008047c1:	ff ff ff 
ffff8000008047c4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008047c8:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008047cb:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008047ce:	48 98                	cdqe   
ffff8000008047d0:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff8000008047d7:	48 01 d0             	add    rax,rdx
ffff8000008047da:	48 c7 40 28 00 00 10 	mov    QWORD PTR [rax+0x28],0x1100000
ffff8000008047e1:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:74

    //把还原现场时用到的堆栈设置好
    stack_store_regs *str= (stack_store_regs *) (0x7e00 - sizeof(stack_store_regs));
ffff8000008047e2:	48 c7 45 e0 58 7d 00 	mov    QWORD PTR [rbp-0x20],0x7d58
ffff8000008047e9:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:75
    str->rax=0;
ffff8000008047ea:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008047ee:	48 c7 40 78 00 00 00 	mov    QWORD PTR [rax+0x78],0x0
ffff8000008047f5:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:76
    str->rbx=0;
ffff8000008047f6:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008047fa:	48 c7 40 70 00 00 00 	mov    QWORD PTR [rax+0x70],0x0
ffff800000804801:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:77
    str->rcx=proc_zero;//sysret采用的返回地址
ffff800000804802:	48 b8 20 ff ff ff ff 	movabs rax,0xffffffffffffff20
ffff800000804809:	ff ff ff 
ffff80000080480c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804810:	48 89 c2             	mov    rdx,rax
ffff800000804813:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804817:	48 89 50 68          	mov    QWORD PTR [rax+0x68],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:78
    str->rdx=0;
ffff80000080481b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080481f:	48 c7 40 60 00 00 00 	mov    QWORD PTR [rax+0x60],0x0
ffff800000804826:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:79
    str->rsi=0;
ffff800000804827:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080482b:	48 c7 40 50 00 00 00 	mov    QWORD PTR [rax+0x50],0x0
ffff800000804832:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:80
    str->rdi=0;
ffff800000804833:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804837:	48 c7 40 58 00 00 00 	mov    QWORD PTR [rax+0x58],0x0
ffff80000080483e:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:81
    str->r15=0;
ffff80000080483f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804843:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000080484a:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:82
    str->r14=0;
ffff80000080484b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080484f:	48 c7 40 18 00 00 00 	mov    QWORD PTR [rax+0x18],0x0
ffff800000804856:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:83
    str->r13=0;
ffff800000804857:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080485b:	48 c7 40 20 00 00 00 	mov    QWORD PTR [rax+0x20],0x0
ffff800000804862:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:84
    str->r12=0;
ffff800000804863:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804867:	48 c7 40 28 00 00 00 	mov    QWORD PTR [rax+0x28],0x0
ffff80000080486e:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:85
    str->r11=0x200;
ffff80000080486f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804873:	48 c7 40 30 00 02 00 	mov    QWORD PTR [rax+0x30],0x200
ffff80000080487a:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:86
    str->r10=0;
ffff80000080487b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080487f:	48 c7 40 38 00 00 00 	mov    QWORD PTR [rax+0x38],0x0
ffff800000804886:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:87
    str->r9=0;
ffff800000804887:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080488b:	48 c7 40 40 00 00 00 	mov    QWORD PTR [rax+0x40],0x0
ffff800000804892:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:88
    str->r8=0;
ffff800000804893:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804897:	48 c7 40 48 00 00 00 	mov    QWORD PTR [rax+0x48],0x0
ffff80000080489e:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:89
    str->rip=proc_zero;
ffff80000080489f:	48 b8 20 ff ff ff ff 	movabs rax,0xffffffffffffff20
ffff8000008048a6:	ff ff ff 
ffff8000008048a9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008048ad:	48 89 c2             	mov    rdx,rax
ffff8000008048b0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008048b4:	48 89 90 80 00 00 00 	mov    QWORD PTR [rax+0x80],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:90
    str->cs=0x8;
ffff8000008048bb:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008048bf:	48 c7 80 88 00 00 00 	mov    QWORD PTR [rax+0x88],0x8
ffff8000008048c6:	08 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:91
    str->rflags=0x00200206;
ffff8000008048ca:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008048ce:	48 c7 80 90 00 00 00 	mov    QWORD PTR [rax+0x90],0x200206
ffff8000008048d5:	06 02 20 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:92
    str->rsp=0x7e00;
ffff8000008048d9:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008048dd:	48 c7 80 98 00 00 00 	mov    QWORD PTR [rax+0x98],0x7e00
ffff8000008048e4:	00 7e 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:93
    str->ss=0x2b;
ffff8000008048e8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008048ec:	48 c7 80 a0 00 00 00 	mov    QWORD PTR [rax+0xa0],0x2b
ffff8000008048f3:	2b 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:94
    str->ds=0x2b;
ffff8000008048f7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008048fb:	48 c7 00 2b 00 00 00 	mov    QWORD PTR [rax],0x2b
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:95
    str->es=0x2b;
ffff800000804902:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804906:	48 c7 40 08 2b 00 00 	mov    QWORD PTR [rax+0x8],0x2b
ffff80000080490d:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:97

}
ffff80000080490e:	90                   	nop
ffff80000080490f:	48 8d 65 f0          	lea    rsp,[rbp-0x10]
ffff800000804913:	5b                   	pop    rbx
ffff800000804914:	41 5f                	pop    r15
ffff800000804916:	5d                   	pop    rbp
ffff800000804917:	c3                   	ret    

ffff800000804918 <init_proc0>:
init_proc0():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:99
int init_proc0()
{
ffff800000804918:	f3 0f 1e fa          	endbr64 
ffff80000080491c:	55                   	push   rbp
ffff80000080491d:	48 89 e5             	mov    rbp,rsp
ffff800000804920:	41 57                	push   r15
ffff800000804922:	53                   	push   rbx
ffff800000804923:	48 83 ec 10          	sub    rsp,0x10
ffff800000804927:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000804927 <init_proc0+0xf>
ffff80000080492e:	49 bb f1 7e 11 00 00 	movabs r11,0x117ef1
ffff800000804935:	00 00 00 
ffff800000804938:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:101

    task[0].pid=pidd++;
ffff80000080493b:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff800000804942:	ff ff ff 
ffff800000804945:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804949:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080494b:	8d 48 01             	lea    ecx,[rax+0x1]
ffff80000080494e:	48 ba 78 fe ff ff ff 	movabs rdx,0xfffffffffffffe78
ffff800000804955:	ff ff ff 
ffff800000804958:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080495c:	89 0a                	mov    DWORD PTR [rdx],ecx
ffff80000080495e:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff800000804965:	ff ff ff 
ffff800000804968:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080496c:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080496f:	89 02                	mov    DWORD PTR [rdx],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:102
    task[0].stat=TASK_RUNNING;
ffff800000804971:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000804978:	ff ff ff 
ffff80000080497b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080497f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804982:	c7 40 18 01 00 00 00 	mov    DWORD PTR [rax+0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:103
    task[0].utime=0;
ffff800000804989:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000804990:	ff ff ff 
ffff800000804993:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804997:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080499a:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [rax+0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:104
    task[0].priority=0;
ffff8000008049a1:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff8000008049a8:	ff ff ff 
ffff8000008049ab:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008049af:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008049b2:	c7 40 20 00 00 00 00 	mov    DWORD PTR [rax+0x20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:106

    struct process *pz=task;
ffff8000008049b9:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff8000008049c0:	ff ff ff 
ffff8000008049c3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008049c7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008049ca:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:115
//    task[index].tss.eip=(long)proc_zero;
    extern struct dir_entry* dtty;
    //stdin stdout stderr
    //这里绕开了sys open，这样是为了尽量快
    extern struct file ftty;
    pz->openf[0]=(struct file*)&ftty;
ffff8000008049ce:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008049d2:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff8000008049d9:	ff ff ff 
ffff8000008049dc:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff8000008049e0:	48 89 90 f8 00 00 00 	mov    QWORD PTR [rax+0xf8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:116
    pz->openf[1]=(struct file*)&ftty;
ffff8000008049e7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008049eb:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff8000008049f2:	ff ff ff 
ffff8000008049f5:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff8000008049f9:	48 89 90 00 01 00 00 	mov    QWORD PTR [rax+0x100],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:117
    pz->openf[2]=(struct file*)&ftty;
ffff800000804a00:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804a04:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000804a0b:	ff ff ff 
ffff800000804a0e:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000804a12:	48 89 90 08 01 00 00 	mov    QWORD PTR [rax+0x108],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:119

    pz->mem_struct.stack_top=STACK_TOP;
ffff800000804a19:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804a1d:	48 be 00 f0 ff ff ff 	movabs rsi,0x7ffffffff000
ffff800000804a24:	7f 00 00 
ffff800000804a27:	48 89 70 40          	mov    QWORD PTR [rax+0x40],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:120
    pz->mem_struct.stack_bottom=STACK_TOP;
ffff800000804a2b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804a2f:	48 89 70 38          	mov    QWORD PTR [rax+0x38],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:121
    pz->mem_struct.heap_top=HEAP_BASE;
ffff800000804a33:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804a37:	48 c7 40 30 00 00 00 	mov    QWORD PTR [rax+0x30],0x1000000
ffff800000804a3e:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:122
    pz->mem_struct.heap_base=HEAP_BASE;
ffff800000804a3f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804a43:	48 c7 40 28 00 00 00 	mov    QWORD PTR [rax+0x28],0x1000000
ffff800000804a4a:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:123
    memcpy(&pz->tss,tss, sizeof(TSS));
ffff800000804a4b:	48 b8 30 fe ff ff ff 	movabs rax,0xfffffffffffffe30
ffff800000804a52:	ff ff ff 
ffff800000804a55:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804a59:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804a5c:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000804a60:	48 8d 8a f8 01 00 00 	lea    rcx,[rdx+0x1f8]
ffff800000804a67:	ba 6c 00 00 00       	mov    edx,0x6c
ffff800000804a6c:	48 89 c6             	mov    rsi,rax
ffff800000804a6f:	48 89 cf             	mov    rdi,rcx
ffff800000804a72:	49 89 df             	mov    r15,rbx
ffff800000804a75:	48 b8 bc 52 ef ff ff 	movabs rax,0xffffffffffef52bc
ffff800000804a7c:	ff ff ff 
ffff800000804a7f:	48 01 d8             	add    rax,rbx
ffff800000804a82:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:125

    pz->child_procs=NULL;
ffff800000804a84:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804a88:	48 c7 80 4c 03 00 00 	mov    QWORD PTR [rax+0x34c],0x0
ffff800000804a8f:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:128

    //这个是进程切换的时候要读取的值
    pz->regs.cr3=PML4_ADDR&~KNL_BASE;
ffff800000804a93:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804a97:	48 c7 80 64 02 00 00 	mov    QWORD PTR [rax+0x264],0x101000
ffff800000804a9e:	00 10 10 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:129
    pz->pml4=PML4_ADDR;
ffff800000804aa2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804aa6:	48 bf 00 10 10 00 00 	movabs rdi,0xffff800000101000
ffff800000804aad:	80 ff ff 
ffff800000804ab0:	48 89 b8 e0 00 00 00 	mov    QWORD PTR [rax+0xe0],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:130
    pz->cwd=root_sb->root;
ffff800000804ab7:	48 b8 10 fe ff ff ff 	movabs rax,0xfffffffffffffe10
ffff800000804abe:	ff ff ff 
ffff800000804ac1:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804ac5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804ac8:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804acb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804acf:	48 89 90 e8 00 00 00 	mov    QWORD PTR [rax+0xe8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:131
    pz->exef=NULL;
ffff800000804ad6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804ada:	48 c7 80 f0 00 00 00 	mov    QWORD PTR [rax+0xf0],0x0
ffff800000804ae1:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:132
    list_init(&pz->node);
ffff800000804ae5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804ae9:	48 05 34 03 00 00    	add    rax,0x334
ffff800000804aef:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff800000804af3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804af7:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff800000804afe:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804b02:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff800000804b09:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff800000804b0a:	90                   	nop
init_proc0():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:133
    pz->node.data=pz;
ffff800000804b0b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804b0f:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000804b13:	48 89 90 3c 03 00 00 	mov    QWORD PTR [rax+0x33c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:135
    
    pz->gpid=pz->pid;
ffff800000804b1a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804b1e:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000804b20:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804b24:	89 50 04             	mov    DWORD PTR [rax+0x4],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:136
    pz->sid=pz->pid;
ffff800000804b27:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804b2b:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000804b2d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804b31:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:137
    pz->fg_pgid=pz->pid;
ffff800000804b34:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804b38:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000804b3a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804b3e:	89 50 0c             	mov    DWORD PTR [rax+0xc],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:138
    pz->in_bgpg=0;
ffff800000804b41:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804b45:	c7 40 10 00 00 00 00 	mov    DWORD PTR [rax+0x10],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:139
    return 0;
ffff800000804b4c:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:140
}
ffff800000804b51:	48 83 c4 10          	add    rsp,0x10
ffff800000804b55:	5b                   	pop    rbx
ffff800000804b56:	41 5f                	pop    r15
ffff800000804b58:	5d                   	pop    rbp
ffff800000804b59:	c3                   	ret    

ffff800000804b5a <req_proc>:
req_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:141
int req_proc(){
ffff800000804b5a:	f3 0f 1e fa          	endbr64 
ffff800000804b5e:	55                   	push   rbp
ffff800000804b5f:	48 89 e5             	mov    rbp,rsp
ffff800000804b62:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000804b62 <req_proc+0x8>
ffff800000804b69:	49 bb b6 7c 11 00 00 	movabs r11,0x117cb6
ffff800000804b70:	00 00 00 
ffff800000804b73:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:142
    int num=0;
ffff800000804b76:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:143
    while(task[num].pid!=-1 && task[num].stat != TASK_EMPTY && \
ffff800000804b7d:	eb 04                	jmp    ffff800000804b83 <req_proc+0x29>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:145
    num<=MAX_PROC_COUNT){
        num++;
ffff800000804b7f:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:143
    while(task[num].pid!=-1 && task[num].stat != TASK_EMPTY && \
ffff800000804b83:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff800000804b8a:	ff ff ff 
ffff800000804b8d:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804b91:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000804b94:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000804b97:	48 63 d2             	movsxd rdx,edx
ffff800000804b9a:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff800000804ba1:	48 01 ca             	add    rdx,rcx
ffff800000804ba4:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000804ba6:	83 fa ff             	cmp    edx,0xffffffff
ffff800000804ba9:	74 2e                	je     ffff800000804bd9 <req_proc+0x7f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:143 (discriminator 1)
ffff800000804bab:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff800000804bb2:	ff ff ff 
ffff800000804bb5:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804bb9:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000804bbc:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000804bbf:	48 63 d2             	movsxd rdx,edx
ffff800000804bc2:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff800000804bc9:	48 01 ca             	add    rdx,rcx
ffff800000804bcc:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff800000804bcf:	85 d2                	test   edx,edx
ffff800000804bd1:	74 06                	je     ffff800000804bd9 <req_proc+0x7f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:143 (discriminator 2)
ffff800000804bd3:	83 7d fc 40          	cmp    DWORD PTR [rbp-0x4],0x40
ffff800000804bd7:	7e a6                	jle    ffff800000804b7f <req_proc+0x25>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:147
    }
    if(num>=MAX_PROC_COUNT)
ffff800000804bd9:	83 7d fc 3f          	cmp    DWORD PTR [rbp-0x4],0x3f
ffff800000804bdd:	7e 0a                	jle    ffff800000804be9 <req_proc+0x8f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:148
        return -1;
ffff800000804bdf:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000804be4:	e9 c0 00 00 00       	jmp    ffff800000804ca9 <req_proc+0x14f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:149
    task[num].pid=pidd++;
ffff800000804be9:	48 ba 78 fe ff ff ff 	movabs rdx,0xfffffffffffffe78
ffff800000804bf0:	ff ff ff 
ffff800000804bf3:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804bf7:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000804bf9:	8d 72 01             	lea    esi,[rdx+0x1]
ffff800000804bfc:	48 b9 78 fe ff ff ff 	movabs rcx,0xfffffffffffffe78
ffff800000804c03:	ff ff ff 
ffff800000804c06:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff800000804c0a:	89 31                	mov    DWORD PTR [rcx],esi
ffff800000804c0c:	48 b9 c0 fe ff ff ff 	movabs rcx,0xfffffffffffffec0
ffff800000804c13:	ff ff ff 
ffff800000804c16:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff800000804c1a:	48 8b 31             	mov    rsi,QWORD PTR [rcx]
ffff800000804c1d:	8b 4d fc             	mov    ecx,DWORD PTR [rbp-0x4]
ffff800000804c20:	48 63 c9             	movsxd rcx,ecx
ffff800000804c23:	48 69 c9 54 03 00 00 	imul   rcx,rcx,0x354
ffff800000804c2a:	48 01 f1             	add    rcx,rsi
ffff800000804c2d:	89 11                	mov    DWORD PTR [rcx],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:150
    task[num].stat=TASK_ZOMBIE;
ffff800000804c2f:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff800000804c36:	ff ff ff 
ffff800000804c39:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804c3d:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000804c40:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000804c43:	48 63 d2             	movsxd rdx,edx
ffff800000804c46:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff800000804c4d:	48 01 ca             	add    rdx,rcx
ffff800000804c50:	c7 42 18 04 00 00 00 	mov    DWORD PTR [rdx+0x18],0x4
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:151
    task[num].utime=0;
ffff800000804c57:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff800000804c5e:	ff ff ff 
ffff800000804c61:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804c65:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000804c68:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000804c6b:	48 63 d2             	movsxd rdx,edx
ffff800000804c6e:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff800000804c75:	48 01 ca             	add    rdx,rcx
ffff800000804c78:	c7 42 1c 00 00 00 00 	mov    DWORD PTR [rdx+0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:152
    task[num].priority=0;
ffff800000804c7f:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff800000804c86:	ff ff ff 
ffff800000804c89:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000804c8d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804c90:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000804c93:	48 98                	cdqe   
ffff800000804c95:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000804c9c:	48 01 d0             	add    rax,rdx
ffff800000804c9f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [rax+0x20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:153
    return num;
ffff800000804ca6:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:154
}
ffff800000804ca9:	5d                   	pop    rbp
ffff800000804caa:	c3                   	ret    

ffff800000804cab <set_proc>:
set_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:156
void set_proc(long rax, long rbx, long rcx, long rdx, long es, long cs, long ss, long ds, long fs, long gs, long rsp,
              long rbp, long rsi, long rdi, long rip, long rflags, int proc_nr) {
ffff800000804cab:	f3 0f 1e fa          	endbr64 
ffff800000804caf:	55                   	push   rbp
ffff800000804cb0:	48 89 e5             	mov    rbp,rsp
ffff800000804cb3:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000804cb3 <set_proc+0x8>
ffff800000804cba:	49 bb 65 7b 11 00 00 	movabs r11,0x117b65
ffff800000804cc1:	00 00 00 
ffff800000804cc4:	4c 01 d8             	add    rax,r11
ffff800000804cc7:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000804ccb:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff800000804ccf:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffff800000804cd3:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
ffff800000804cd7:	4c 89 45 c8          	mov    QWORD PTR [rbp-0x38],r8
ffff800000804cdb:	4c 89 4d c0          	mov    QWORD PTR [rbp-0x40],r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:157
    struct process* proc=&task[proc_nr];
ffff800000804cdf:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff800000804ce6:	ff ff ff 
ffff800000804ce9:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000804ced:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804cf0:	8b 45 60             	mov    eax,DWORD PTR [rbp+0x60]
ffff800000804cf3:	48 98                	cdqe   
ffff800000804cf5:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000804cfc:	48 01 d0             	add    rax,rdx
ffff800000804cff:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:158
    proc->regs.rax=rax;
ffff800000804d03:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804d07:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000804d0b:	48 89 90 7c 02 00 00 	mov    QWORD PTR [rax+0x27c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:159
    proc->regs.rbx=rbx;
ffff800000804d12:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804d16:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000804d1a:	48 89 90 94 02 00 00 	mov    QWORD PTR [rax+0x294],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:160
    proc->regs.rcx=rcx;
ffff800000804d21:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804d25:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000804d29:	48 89 90 84 02 00 00 	mov    QWORD PTR [rax+0x284],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:161
    proc->regs.rdx=rdx;
ffff800000804d30:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804d34:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000804d38:	48 89 90 8c 02 00 00 	mov    QWORD PTR [rax+0x28c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:162
    proc->regs.es=es;
ffff800000804d3f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804d43:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000804d47:	48 89 90 bc 02 00 00 	mov    QWORD PTR [rax+0x2bc],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:163
    proc->regs.cs=cs;
ffff800000804d4e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804d52:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000804d56:	48 89 90 c4 02 00 00 	mov    QWORD PTR [rax+0x2c4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:164
    proc->regs.ss=ss;
ffff800000804d5d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804d61:	48 8b 55 10          	mov    rdx,QWORD PTR [rbp+0x10]
ffff800000804d65:	48 89 90 cc 02 00 00 	mov    QWORD PTR [rax+0x2cc],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:165
    proc->regs.ds=ds;
ffff800000804d6c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804d70:	48 8b 55 18          	mov    rdx,QWORD PTR [rbp+0x18]
ffff800000804d74:	48 89 90 d4 02 00 00 	mov    QWORD PTR [rax+0x2d4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:166
    proc->regs.fs=fs;
ffff800000804d7b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804d7f:	48 8b 55 20          	mov    rdx,QWORD PTR [rbp+0x20]
ffff800000804d83:	48 89 90 dc 02 00 00 	mov    QWORD PTR [rax+0x2dc],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:167
    proc->regs.gs=gs;
ffff800000804d8a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804d8e:	48 8b 55 28          	mov    rdx,QWORD PTR [rbp+0x28]
ffff800000804d92:	48 89 90 e4 02 00 00 	mov    QWORD PTR [rax+0x2e4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:168
    proc->regs.rsp=rsp;
ffff800000804d99:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804d9d:	48 8b 55 30          	mov    rdx,QWORD PTR [rbp+0x30]
ffff800000804da1:	48 89 90 9c 02 00 00 	mov    QWORD PTR [rax+0x29c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:169
    proc->regs.rbp=rbp;
ffff800000804da8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804dac:	48 8b 55 38          	mov    rdx,QWORD PTR [rbp+0x38]
ffff800000804db0:	48 89 90 a4 02 00 00 	mov    QWORD PTR [rax+0x2a4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:170
    proc->regs.rsi=rsi;
ffff800000804db7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804dbb:	48 8b 55 40          	mov    rdx,QWORD PTR [rbp+0x40]
ffff800000804dbf:	48 89 90 ac 02 00 00 	mov    QWORD PTR [rax+0x2ac],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:171
    proc->regs.rdi=rdi;
ffff800000804dc6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804dca:	48 8b 55 48          	mov    rdx,QWORD PTR [rbp+0x48]
ffff800000804dce:	48 89 90 b4 02 00 00 	mov    QWORD PTR [rax+0x2b4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:172
    proc->regs.rflags=0x202;//设置为默认值:0b 0010 0000 0010
ffff800000804dd5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804dd9:	48 c7 80 74 02 00 00 	mov    QWORD PTR [rax+0x274],0x202
ffff800000804de0:	02 02 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:174
    //能接受中断
    proc->regs.rip=rip;
ffff800000804de4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804de8:	48 8b 55 50          	mov    rdx,QWORD PTR [rbp+0x50]
ffff800000804dec:	48 89 90 6c 02 00 00 	mov    QWORD PTR [rax+0x26c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:176

    proc->regs.cs=cs;
ffff800000804df3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804df7:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000804dfb:	48 89 90 c4 02 00 00 	mov    QWORD PTR [rax+0x2c4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:177
    proc->regs.ds=ds;
ffff800000804e02:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804e06:	48 8b 55 18          	mov    rdx,QWORD PTR [rbp+0x18]
ffff800000804e0a:	48 89 90 d4 02 00 00 	mov    QWORD PTR [rax+0x2d4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:178
    proc->regs.es=es;
ffff800000804e11:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804e15:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000804e19:	48 89 90 bc 02 00 00 	mov    QWORD PTR [rax+0x2bc],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:179
    proc->regs.cr3=PML4_ADDR;//get_phyaddr(n1);//暂时先搞成全局
ffff800000804e20:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804e24:	48 b9 00 10 10 00 00 	movabs rcx,0xffff800000101000
ffff800000804e2b:	80 ff ff 
ffff800000804e2e:	48 89 88 64 02 00 00 	mov    QWORD PTR [rax+0x264],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:180
    proc->pml4=PML4_ADDR;
ffff800000804e35:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000804e39:	48 89 88 e0 00 00 00 	mov    QWORD PTR [rax+0xe0],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:183


}
ffff800000804e40:	90                   	nop
ffff800000804e41:	5d                   	pop    rbp
ffff800000804e42:	c3                   	ret    

ffff800000804e43 <proc_zero>:
proc_zero():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:185
void proc_zero()
{
ffff800000804e43:	f3 0f 1e fa          	endbr64 
ffff800000804e47:	55                   	push   rbp
ffff800000804e48:	48 89 e5             	mov    rbp,rsp
ffff800000804e4b:	41 57                	push   r15
ffff800000804e4d:	53                   	push   rbx
ffff800000804e4e:	48 83 ec 10          	sub    rsp,0x10
ffff800000804e52:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000804e52 <proc_zero+0xf>
ffff800000804e59:	49 bb c6 79 11 00 00 	movabs r11,0x1179c6
ffff800000804e60:	00 00 00 
ffff800000804e63:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:198 (discriminator 1)
//    }else{
//        printf("parent proc ret:%d\n",rax);
//    }
    while (1)
    {
        char c= sys_analyse_key();
ffff800000804e66:	49 89 df             	mov    r15,rbx
ffff800000804e69:	b8 00 00 00 00       	mov    eax,0x0
ffff800000804e6e:	48 ba 07 0b ef ff ff 	movabs rdx,0xffffffffffef0b07
ffff800000804e75:	ff ff ff 
ffff800000804e78:	48 01 da             	add    rdx,rbx
ffff800000804e7b:	ff d2                	call   rdx
ffff800000804e7d:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:199 (discriminator 1)
        putchar(c);
ffff800000804e80:	0f be 45 ef          	movsx  eax,BYTE PTR [rbp-0x11]
ffff800000804e84:	89 c7                	mov    edi,eax
ffff800000804e86:	49 89 df             	mov    r15,rbx
ffff800000804e89:	48 b8 45 4e ee ff ff 	movabs rax,0xffffffffffee4e45
ffff800000804e90:	ff ff ff 
ffff800000804e93:	48 01 d8             	add    rax,rbx
ffff800000804e96:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:197 (discriminator 1)
    {
ffff800000804e98:	eb cc                	jmp    ffff800000804e66 <proc_zero+0x23>

ffff800000804e9a <save_rsp>:
save_rsp():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:202
    }
}
void save_rsp(){
ffff800000804e9a:	f3 0f 1e fa          	endbr64 
ffff800000804e9e:	55                   	push   rbp
ffff800000804e9f:	48 89 e5             	mov    rbp,rsp
ffff800000804ea2:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000804ea2 <save_rsp+0x8>
ffff800000804ea9:	49 bb 76 79 11 00 00 	movabs r11,0x117976
ffff800000804eb0:	00 00 00 
ffff800000804eb3:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:204
    //在时钟中断context下
    addr_t * p=INT_STACK_TOP-16;
ffff800000804eb6:	48 be f0 ff 7f 00 00 	movabs rsi,0xffff8000007ffff0
ffff800000804ebd:	80 ff ff 
ffff800000804ec0:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:205
    current->regs.rsp=*p;
ffff800000804ec4:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000804ec8:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000804ecb:	48 b9 a8 fe ff ff ff 	movabs rcx,0xfffffffffffffea8
ffff800000804ed2:	ff ff ff 
ffff800000804ed5:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff800000804ed9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804edc:	48 89 90 9c 02 00 00 	mov    QWORD PTR [rax+0x29c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:206
}
ffff800000804ee3:	90                   	nop
ffff800000804ee4:	5d                   	pop    rbp
ffff800000804ee5:	c3                   	ret    

ffff800000804ee6 <manage_proc>:
manage_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:207
void manage_proc(){
ffff800000804ee6:	f3 0f 1e fa          	endbr64 
ffff800000804eea:	55                   	push   rbp
ffff800000804eeb:	48 89 e5             	mov    rbp,rsp
ffff800000804eee:	41 57                	push   r15
ffff800000804ef0:	48 83 ec 18          	sub    rsp,0x18
ffff800000804ef4:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000804ef4 <manage_proc+0xe>
ffff800000804efb:	49 bb 24 79 11 00 00 	movabs r11,0x117924
ffff800000804f02:	00 00 00 
ffff800000804f05:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:208
    if(cur_proc!=-1)
ffff800000804f08:	48 ba 50 fe ff ff ff 	movabs rdx,0xfffffffffffffe50
ffff800000804f0f:	ff ff ff 
ffff800000804f12:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804f16:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000804f18:	83 fa ff             	cmp    edx,0xffffffff
ffff800000804f1b:	74 37                	je     ffff800000804f54 <manage_proc+0x6e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:209
        task[cur_proc].utime++;
ffff800000804f1d:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff800000804f24:	ff ff ff 
ffff800000804f27:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804f2b:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000804f2e:	48 ba 50 fe ff ff ff 	movabs rdx,0xfffffffffffffe50
ffff800000804f35:	ff ff ff 
ffff800000804f38:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804f3c:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000804f3e:	48 63 d2             	movsxd rdx,edx
ffff800000804f41:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff800000804f48:	48 01 ca             	add    rdx,rcx
ffff800000804f4b:	8b 4a 1c             	mov    ecx,DWORD PTR [rdx+0x1c]
ffff800000804f4e:	83 c1 01             	add    ecx,0x1
ffff800000804f51:	89 4a 1c             	mov    DWORD PTR [rdx+0x1c],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:210
    if(cur_proc==-1||task[cur_proc].utime>MAX_UTIME||\
ffff800000804f54:	48 ba 50 fe ff ff ff 	movabs rdx,0xfffffffffffffe50
ffff800000804f5b:	ff ff ff 
ffff800000804f5e:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804f62:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000804f64:	83 fa ff             	cmp    edx,0xffffffff
ffff800000804f67:	74 70                	je     ffff800000804fd9 <manage_proc+0xf3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:210 (discriminator 1)
ffff800000804f69:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff800000804f70:	ff ff ff 
ffff800000804f73:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804f77:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000804f7a:	48 ba 50 fe ff ff ff 	movabs rdx,0xfffffffffffffe50
ffff800000804f81:	ff ff ff 
ffff800000804f84:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804f88:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000804f8a:	48 63 d2             	movsxd rdx,edx
ffff800000804f8d:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff800000804f94:	48 01 ca             	add    rdx,rcx
ffff800000804f97:	8b 52 1c             	mov    edx,DWORD PTR [rdx+0x1c]
ffff800000804f9a:	83 fa 0a             	cmp    edx,0xa
ffff800000804f9d:	77 3a                	ja     ffff800000804fd9 <manage_proc+0xf3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:211 (discriminator 2)
    task[cur_proc].stat != TASK_READY){
ffff800000804f9f:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff800000804fa6:	ff ff ff 
ffff800000804fa9:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804fad:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000804fb0:	48 ba 50 fe ff ff ff 	movabs rdx,0xfffffffffffffe50
ffff800000804fb7:	ff ff ff 
ffff800000804fba:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804fbe:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000804fc0:	48 63 d2             	movsxd rdx,edx
ffff800000804fc3:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff800000804fca:	48 01 ca             	add    rdx,rcx
ffff800000804fcd:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:210 (discriminator 2)
    if(cur_proc==-1||task[cur_proc].utime>MAX_UTIME||\
ffff800000804fd0:	83 fa 02             	cmp    edx,0x2
ffff800000804fd3:	0f 84 bf 01 00 00    	je     ffff800000805198 <manage_proc+0x2b2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:212
        if(cur_proc!=-1)
ffff800000804fd9:	48 ba 50 fe ff ff ff 	movabs rdx,0xfffffffffffffe50
ffff800000804fe0:	ff ff ff 
ffff800000804fe3:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804fe7:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000804fe9:	83 fa ff             	cmp    edx,0xffffffff
ffff800000804fec:	74 35                	je     ffff800000805023 <manage_proc+0x13d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:213
            task[cur_proc].utime=0;
ffff800000804fee:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff800000804ff5:	ff ff ff 
ffff800000804ff8:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000804ffc:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000804fff:	48 ba 50 fe ff ff ff 	movabs rdx,0xfffffffffffffe50
ffff800000805006:	ff ff ff 
ffff800000805009:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080500d:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff80000080500f:	48 63 d2             	movsxd rdx,edx
ffff800000805012:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff800000805019:	48 01 ca             	add    rdx,rcx
ffff80000080501c:	c7 42 1c 00 00 00 00 	mov    DWORD PTR [rdx+0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:215
        //find
        int i=cur_proc+1;
ffff800000805023:	48 ba 50 fe ff ff ff 	movabs rdx,0xfffffffffffffe50
ffff80000080502a:	ff ff ff 
ffff80000080502d:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805031:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000805033:	83 c2 01             	add    edx,0x1
ffff800000805036:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:216
        int times=0;
ffff800000805039:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:218
        //轮询，直到有一个符合条件
        while(times<10){
ffff800000805040:	eb 7b                	jmp    ffff8000008050bd <manage_proc+0x1d7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:219
            if(task[i].pid!=-1 && task[i].stat == TASK_READY && i != cur_proc){
ffff800000805042:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff800000805049:	ff ff ff 
ffff80000080504c:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805050:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000805053:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000805056:	48 63 d2             	movsxd rdx,edx
ffff800000805059:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff800000805060:	48 01 ca             	add    rdx,rcx
ffff800000805063:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000805065:	83 fa ff             	cmp    edx,0xffffffff
ffff800000805068:	74 3e                	je     ffff8000008050a8 <manage_proc+0x1c2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:219 (discriminator 1)
ffff80000080506a:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff800000805071:	ff ff ff 
ffff800000805074:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805078:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080507b:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080507e:	48 63 d2             	movsxd rdx,edx
ffff800000805081:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff800000805088:	48 01 ca             	add    rdx,rcx
ffff80000080508b:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff80000080508e:	83 fa 02             	cmp    edx,0x2
ffff800000805091:	75 15                	jne    ffff8000008050a8 <manage_proc+0x1c2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:219 (discriminator 2)
ffff800000805093:	48 ba 50 fe ff ff ff 	movabs rdx,0xfffffffffffffe50
ffff80000080509a:	ff ff ff 
ffff80000080509d:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008050a1:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff8000008050a3:	39 55 ec             	cmp    DWORD PTR [rbp-0x14],edx
ffff8000008050a6:	75 21                	jne    ffff8000008050c9 <manage_proc+0x1e3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:222
                break;
            }
            i++;
ffff8000008050a8:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:223
            if(i>=MAX_TASKS){
ffff8000008050ac:	83 7d ec 1f          	cmp    DWORD PTR [rbp-0x14],0x1f
ffff8000008050b0:	7e 0b                	jle    ffff8000008050bd <manage_proc+0x1d7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:224
                times++;
ffff8000008050b2:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:225
                i=0;
ffff8000008050b6:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:218
        while(times<10){
ffff8000008050bd:	83 7d e8 09          	cmp    DWORD PTR [rbp-0x18],0x9
ffff8000008050c1:	0f 8e 7b ff ff ff    	jle    ffff800000805042 <manage_proc+0x15c>
ffff8000008050c7:	eb 01                	jmp    ffff8000008050ca <manage_proc+0x1e4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:220
                break;
ffff8000008050c9:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:228
            }
        }
        if(times==10)return;//超过十次尝试都没有，暂时不切换
ffff8000008050ca:	83 7d e8 0a          	cmp    DWORD PTR [rbp-0x18],0xa
ffff8000008050ce:	0f 84 c7 00 00 00    	je     ffff80000080519b <manage_proc+0x2b5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:230
        //switch
        task[cur_proc].stat=TASK_READY;
ffff8000008050d4:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff8000008050db:	ff ff ff 
ffff8000008050de:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008050e2:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008050e5:	48 ba 50 fe ff ff ff 	movabs rdx,0xfffffffffffffe50
ffff8000008050ec:	ff ff ff 
ffff8000008050ef:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008050f3:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff8000008050f5:	48 63 d2             	movsxd rdx,edx
ffff8000008050f8:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff8000008050ff:	48 01 ca             	add    rdx,rcx
ffff800000805102:	c7 42 18 02 00 00 00 	mov    DWORD PTR [rdx+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:231
        task[i].stat=TASK_RUNNING;
ffff800000805109:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff800000805110:	ff ff ff 
ffff800000805113:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805117:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080511a:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080511d:	48 63 d2             	movsxd rdx,edx
ffff800000805120:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff800000805127:	48 01 ca             	add    rdx,rcx
ffff80000080512a:	c7 42 18 01 00 00 00 	mov    DWORD PTR [rdx+0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:232
        switch_to(&task[cur_proc], &task[i]);
ffff800000805131:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff800000805138:	ff ff ff 
ffff80000080513b:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080513f:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000805142:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000805145:	48 63 d2             	movsxd rdx,edx
ffff800000805148:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff80000080514f:	48 01 d1             	add    rcx,rdx
ffff800000805152:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff800000805159:	ff ff ff 
ffff80000080515c:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805160:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff800000805163:	48 ba 50 fe ff ff ff 	movabs rdx,0xfffffffffffffe50
ffff80000080516a:	ff ff ff 
ffff80000080516d:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805171:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000805173:	48 63 d2             	movsxd rdx,edx
ffff800000805176:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff80000080517d:	48 01 f2             	add    rdx,rsi
ffff800000805180:	48 89 ce             	mov    rsi,rcx
ffff800000805183:	48 89 d7             	mov    rdi,rdx
ffff800000805186:	49 89 c7             	mov    r15,rax
ffff800000805189:	48 ba 77 99 ee ff ff 	movabs rdx,0xffffffffffee9977
ffff800000805190:	ff ff ff 
ffff800000805193:	48 01 c2             	add    rdx,rax
ffff800000805196:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:234
    }
    return;
ffff800000805198:	90                   	nop
ffff800000805199:	eb 01                	jmp    ffff80000080519c <manage_proc+0x2b6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:228
        if(times==10)return;//超过十次尝试都没有，暂时不切换
ffff80000080519b:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:235
}
ffff80000080519c:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff8000008051a0:	c9                   	leave  
ffff8000008051a1:	c3                   	ret    

ffff8000008051a2 <switch_proc_tss>:
switch_proc_tss():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:238

void switch_proc_tss(int pnr)
{
ffff8000008051a2:	f3 0f 1e fa          	endbr64 
ffff8000008051a6:	55                   	push   rbp
ffff8000008051a7:	48 89 e5             	mov    rbp,rsp
ffff8000008051aa:	41 57                	push   r15
ffff8000008051ac:	48 83 ec 28          	sub    rsp,0x28
ffff8000008051b0:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008051b0 <switch_proc_tss+0xe>
ffff8000008051b7:	49 bb 68 76 11 00 00 	movabs r11,0x117668
ffff8000008051be:	00 00 00 
ffff8000008051c1:	4c 01 d8             	add    rax,r11
ffff8000008051c4:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:239
    int sel=_TSS_IND(pnr)*8;
ffff8000008051c7:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff8000008051ca:	01 d2                	add    edx,edx
ffff8000008051cc:	83 c2 05             	add    edx,0x5
ffff8000008051cf:	c1 e2 03             	shl    edx,0x3
ffff8000008051d2:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:240
    cur_proc=pnr;
ffff8000008051d5:	48 ba 50 fe ff ff ff 	movabs rdx,0xfffffffffffffe50
ffff8000008051dc:	ff ff ff 
ffff8000008051df:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008051e3:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
ffff8000008051e6:	89 0a                	mov    DWORD PTR [rdx],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:241
    switch_proc_asm(sel);
ffff8000008051e8:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff8000008051eb:	89 d7                	mov    edi,edx
ffff8000008051ed:	49 89 c7             	mov    r15,rax
ffff8000008051f0:	48 ba df 5b ef ff ff 	movabs rdx,0xffffffffffef5bdf
ffff8000008051f7:	ff ff ff 
ffff8000008051fa:	48 01 c2             	add    rdx,rax
ffff8000008051fd:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:242
}
ffff8000008051ff:	90                   	nop
ffff800000805200:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000805204:	c9                   	leave  
ffff800000805205:	c3                   	ret    

ffff800000805206 <switch_proc>:
switch_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:243
void switch_proc(int pnr){
ffff800000805206:	f3 0f 1e fa          	endbr64 
ffff80000080520a:	55                   	push   rbp
ffff80000080520b:	48 89 e5             	mov    rbp,rsp
ffff80000080520e:	41 57                	push   r15
ffff800000805210:	53                   	push   rbx
ffff800000805211:	48 81 ec 70 03 00 00 	sub    rsp,0x370
ffff800000805218:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000805218 <switch_proc+0x12>
ffff80000080521f:	49 bb 00 76 11 00 00 	movabs r11,0x117600
ffff800000805226:	00 00 00 
ffff800000805229:	4c 01 db             	add    rbx,r11
ffff80000080522c:	89 bd 8c fc ff ff    	mov    DWORD PTR [rbp-0x374],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:246
    //printf("switching proc to %d\n",pnr);
    //printf("eip:%x\n",task[pnr].tss.eip);
    struct process p=task[pnr];
ffff800000805232:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000805239:	ff ff ff 
ffff80000080523c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805240:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805243:	8b 85 8c fc ff ff    	mov    eax,DWORD PTR [rbp-0x374]
ffff800000805249:	48 98                	cdqe   
ffff80000080524b:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000805252:	48 01 c2             	add    rdx,rax
ffff800000805255:	48 8d 85 90 fc ff ff 	lea    rax,[rbp-0x370]
ffff80000080525c:	b9 6a 00 00 00       	mov    ecx,0x6a
ffff800000805261:	48 89 c7             	mov    rdi,rax
ffff800000805264:	48 89 d6             	mov    rsi,rdx
ffff800000805267:	f3 48 a5             	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
ffff80000080526a:	48 89 f2             	mov    rdx,rsi
ffff80000080526d:	48 89 f8             	mov    rax,rdi
ffff800000805270:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff800000805272:	89 08                	mov    DWORD PTR [rax],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:247
    save_context(&task[cur_proc].tss);
ffff800000805274:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff80000080527b:	ff ff ff 
ffff80000080527e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805282:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805285:	48 b8 50 fe ff ff ff 	movabs rax,0xfffffffffffffe50
ffff80000080528c:	ff ff ff 
ffff80000080528f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805293:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000805295:	48 98                	cdqe   
ffff800000805297:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff80000080529e:	48 01 d0             	add    rax,rdx
ffff8000008052a1:	48 05 f8 01 00 00    	add    rax,0x1f8
ffff8000008052a7:	48 89 c7             	mov    rdi,rax
ffff8000008052aa:	49 89 df             	mov    r15,rbx
ffff8000008052ad:	48 b8 1b 8b ee ff ff 	movabs rax,0xffffffffffee8b1b
ffff8000008052b4:	ff ff ff 
ffff8000008052b7:	48 01 d8             	add    rax,rbx
ffff8000008052ba:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:252
//    //重新设置0号进程
//    task[0].tss.eip=proc_zero;
//    task[0].tss.cr3=PAGE_INDEX_ADDR;
//    task[0].tss.eflags=0x202;
    cur_proc=pnr;
ffff8000008052bc:	48 b8 50 fe ff ff ff 	movabs rax,0xfffffffffffffe50
ffff8000008052c3:	ff ff ff 
ffff8000008052c6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008052ca:	8b 95 8c fc ff ff    	mov    edx,DWORD PTR [rbp-0x374]
ffff8000008052d0:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:253
    int sel=_TSS_IND(pnr)*8;
ffff8000008052d2:	8b 85 8c fc ff ff    	mov    eax,DWORD PTR [rbp-0x374]
ffff8000008052d8:	01 c0                	add    eax,eax
ffff8000008052da:	83 c0 05             	add    eax,0x5
ffff8000008052dd:	c1 e0 03             	shl    eax,0x3
ffff8000008052e0:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:254
    switch_to(NULL, &task[pnr].tss);
ffff8000008052e3:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff8000008052ea:	ff ff ff 
ffff8000008052ed:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008052f1:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008052f4:	8b 85 8c fc ff ff    	mov    eax,DWORD PTR [rbp-0x374]
ffff8000008052fa:	48 98                	cdqe   
ffff8000008052fc:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000805303:	48 01 d0             	add    rax,rdx
ffff800000805306:	48 05 f8 01 00 00    	add    rax,0x1f8
ffff80000080530c:	48 89 c6             	mov    rsi,rax
ffff80000080530f:	bf 00 00 00 00       	mov    edi,0x0
ffff800000805314:	49 89 df             	mov    r15,rbx
ffff800000805317:	48 b8 77 99 ee ff ff 	movabs rax,0xffffffffffee9977
ffff80000080531e:	ff ff ff 
ffff800000805321:	48 01 d8             	add    rax,rbx
ffff800000805324:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:257
    //asm volatile("push %0":"=r"(task[pnr].tss.eip));
    //switch_proc_asm(pnr*8+0x8*3);
}
ffff800000805326:	90                   	nop
ffff800000805327:	48 81 c4 70 03 00 00 	add    rsp,0x370
ffff80000080532e:	5b                   	pop    rbx
ffff80000080532f:	41 5f                	pop    r15
ffff800000805331:	5d                   	pop    rbp
ffff800000805332:	c3                   	ret    

ffff800000805333 <save_context>:
save_context():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:259
void save_context(TSS *tss)
{
ffff800000805333:	f3 0f 1e fa          	endbr64 
ffff800000805337:	55                   	push   rbp
ffff800000805338:	48 89 e5             	mov    rbp,rsp
ffff80000080533b:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080533b <save_context+0x8>
ffff800000805342:	49 bb dd 74 11 00 00 	movabs r11,0x1174dd
ffff800000805349:	00 00 00 
ffff80000080534c:	4c 01 d8             	add    rax,r11
ffff80000080534f:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:270
//    tss->esi=scene_saver.esi;
//    tss->edi=scene_saver.edi;
//    tss->eflags=scene_saver.eflags;
//    tss->esp=scene_saver.esp;
//    tss->ebp=scene_saver.ebp;
}
ffff800000805353:	90                   	nop
ffff800000805354:	5d                   	pop    rbp
ffff800000805355:	c3                   	ret    

ffff800000805356 <palloc>:
palloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:431
    task[index].stat=TASK_READY;
    return index;
} */
//为指定进程申请新的内存，并返回这块内存的线性地址。
void* palloc(int proc_index,int size)
{
ffff800000805356:	f3 0f 1e fa          	endbr64 
ffff80000080535a:	55                   	push   rbp
ffff80000080535b:	48 89 e5             	mov    rbp,rsp
ffff80000080535e:	41 57                	push   r15
ffff800000805360:	53                   	push   rbx
ffff800000805361:	48 83 ec 60          	sub    rsp,0x60
ffff800000805365:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000805365 <palloc+0xf>
ffff80000080536c:	49 bb b3 74 11 00 00 	movabs r11,0x1174b3
ffff800000805373:	00 00 00 
ffff800000805376:	4c 01 db             	add    rbx,r11
ffff800000805379:	89 7d 9c             	mov    DWORD PTR [rbp-0x64],edi
ffff80000080537c:	89 75 98             	mov    DWORD PTR [rbp-0x68],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:432
    int page_c=size/4096+size%4096?1:0;
ffff80000080537f:	8b 45 98             	mov    eax,DWORD PTR [rbp-0x68]
ffff800000805382:	8d 90 ff 0f 00 00    	lea    edx,[rax+0xfff]
ffff800000805388:	85 c0                	test   eax,eax
ffff80000080538a:	0f 48 c2             	cmovs  eax,edx
ffff80000080538d:	c1 f8 0c             	sar    eax,0xc
ffff800000805390:	89 c1                	mov    ecx,eax
ffff800000805392:	8b 45 98             	mov    eax,DWORD PTR [rbp-0x68]
ffff800000805395:	99                   	cdq    
ffff800000805396:	c1 ea 14             	shr    edx,0x14
ffff800000805399:	01 d0                	add    eax,edx
ffff80000080539b:	25 ff 0f 00 00       	and    eax,0xfff
ffff8000008053a0:	29 d0                	sub    eax,edx
ffff8000008053a2:	01 c8                	add    eax,ecx
ffff8000008053a4:	85 c0                	test   eax,eax
ffff8000008053a6:	0f 95 c0             	setne  al
ffff8000008053a9:	0f b6 c0             	movzx  eax,al
ffff8000008053ac:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:433
    int c=0;
ffff8000008053af:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:434
    void *ptr=NULL;
ffff8000008053b6:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
ffff8000008053bd:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:435
    page_item *pgind=NULL;//task[proc_index].tss.cr3;
ffff8000008053be:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff8000008053c5:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:436
    pgind++;
ffff8000008053c6:	48 83 45 e0 08       	add    QWORD PTR [rbp-0x20],0x8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:437
    for(int i=1;i<1024;i++)
ffff8000008053cb:	c7 45 dc 01 00 00 00 	mov    DWORD PTR [rbp-0x24],0x1
ffff8000008053d2:	e9 07 03 00 00       	jmp    ffff8000008056de <palloc+0x388>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:439
    {
        page_item* tblp=*pgind&0xfffff000;
ffff8000008053d7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008053db:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008053de:	25 00 f0 ff ff       	and    eax,0xfffff000
ffff8000008053e3:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:440
        for(int j=0;j<1024;j++)
ffff8000008053e7:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
ffff8000008053ee:	e9 d5 02 00 00       	jmp    ffff8000008056c8 <palloc+0x372>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:442
        {
            int v=*tblp&PAGE_PRESENT;
ffff8000008053f3:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008053f7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008053fa:	83 e0 01             	and    eax,0x1
ffff8000008053fd:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:443
            if(!v)
ffff800000805400:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
ffff800000805404:	0f 85 b5 02 00 00    	jne    ffff8000008056bf <palloc+0x369>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:445
            {
                int new_pg=req_a_page();
ffff80000080540a:	49 89 df             	mov    r15,rbx
ffff80000080540d:	b8 00 00 00 00       	mov    eax,0x0
ffff800000805412:	48 ba 13 62 ee ff ff 	movabs rdx,0xffffffffffee6213
ffff800000805419:	ff ff ff 
ffff80000080541c:	48 01 da             	add    rdx,rbx
ffff80000080541f:	ff d2                	call   rdx
ffff800000805421:	89 45 b8             	mov    DWORD PTR [rbp-0x48],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:446
                if(new_pg==-1)
ffff800000805424:	83 7d b8 ff          	cmp    DWORD PTR [rbp-0x48],0xffffffff
ffff800000805428:	0f 85 0c 01 00 00    	jne    ffff80000080553a <palloc+0x1e4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:449
                {
                    //修改ldt,增加数据空间
                    unsigned int size=task[proc_index].ldt[2].limit_lo16;
ffff80000080542e:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000805435:	ff ff ff 
ffff800000805438:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080543c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080543f:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff800000805442:	48 98                	cdqe   
ffff800000805444:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff80000080544b:	48 01 d0             	add    rax,rdx
ffff80000080544e:	0f b7 80 88 00 00 00 	movzx  eax,WORD PTR [rax+0x88]
ffff800000805455:	0f b7 c0             	movzx  eax,ax
ffff800000805458:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:450
                    size+=(task[proc_index].ldt[2].attr&0xf)<<16;
ffff80000080545b:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000805462:	ff ff ff 
ffff800000805465:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805469:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080546c:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff80000080546f:	48 98                	cdqe   
ffff800000805471:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000805478:	48 01 d0             	add    rax,rdx
ffff80000080547b:	0f b7 80 8d 00 00 00 	movzx  eax,WORD PTR [rax+0x8d]
ffff800000805482:	0f b7 c0             	movzx  eax,ax
ffff800000805485:	c1 e0 10             	shl    eax,0x10
ffff800000805488:	25 00 00 0f 00       	and    eax,0xf0000
ffff80000080548d:	01 45 a4             	add    DWORD PTR [rbp-0x5c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:451
                    size+=c;
ffff800000805490:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000805493:	01 45 a4             	add    DWORD PTR [rbp-0x5c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:452
                    task[proc_index].ldt[2].limit_lo16=size&0xffff;
ffff800000805496:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff80000080549d:	ff ff ff 
ffff8000008054a0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008054a4:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008054a7:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff8000008054aa:	48 98                	cdqe   
ffff8000008054ac:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff8000008054b3:	48 01 d0             	add    rax,rdx
ffff8000008054b6:	8b 55 a4             	mov    edx,DWORD PTR [rbp-0x5c]
ffff8000008054b9:	66 89 90 88 00 00 00 	mov    WORD PTR [rax+0x88],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:453
                    int tmp_attr=task[proc_index].ldt[2].attr;
ffff8000008054c0:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff8000008054c7:	ff ff ff 
ffff8000008054ca:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008054ce:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008054d1:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff8000008054d4:	48 98                	cdqe   
ffff8000008054d6:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff8000008054dd:	48 01 d0             	add    rax,rdx
ffff8000008054e0:	0f b7 80 8d 00 00 00 	movzx  eax,WORD PTR [rax+0x8d]
ffff8000008054e7:	0f b7 c0             	movzx  eax,ax
ffff8000008054ea:	89 45 a0             	mov    DWORD PTR [rbp-0x60],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:454
                    tmp_attr&=0xfff0;
ffff8000008054ed:	81 65 a0 f0 ff 00 00 	and    DWORD PTR [rbp-0x60],0xfff0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:455
                    tmp_attr+=(size>>16)&0xf;
ffff8000008054f4:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
ffff8000008054f7:	c1 e8 10             	shr    eax,0x10
ffff8000008054fa:	83 e0 0f             	and    eax,0xf
ffff8000008054fd:	89 c2                	mov    edx,eax
ffff8000008054ff:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
ffff800000805502:	01 d0                	add    eax,edx
ffff800000805504:	89 45 a0             	mov    DWORD PTR [rbp-0x60],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:456
                    task[proc_index].ldt[2].attr=tmp_attr;
ffff800000805507:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff80000080550e:	ff ff ff 
ffff800000805511:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805515:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805518:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff80000080551b:	48 98                	cdqe   
ffff80000080551d:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000805524:	48 01 d0             	add    rax,rdx
ffff800000805527:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
ffff80000080552a:	66 89 90 8d 00 00 00 	mov    WORD PTR [rax+0x8d],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:457
                    return ptr;//失败了，只能申请一部分的内存或者返回NULL
ffff800000805531:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000805535:	e9 b6 01 00 00       	jmp    ffff8000008056f0 <palloc+0x39a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:459
                }
                int addr=get_phyaddr(new_pg);
ffff80000080553a:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
ffff80000080553d:	89 c7                	mov    edi,eax
ffff80000080553f:	49 89 df             	mov    r15,rbx
ffff800000805542:	48 b8 00 66 ee ff ff 	movabs rax,0xffffffffffee6600
ffff800000805549:	ff ff ff 
ffff80000080554c:	48 01 d8             	add    rax,rbx
ffff80000080554f:	ff d0                	call   rax
ffff800000805551:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:460
                set_page_item(tblp,addr,PAGE_PRESENT|\
ffff800000805554:	8b 4d b4             	mov    ecx,DWORD PTR [rbp-0x4c]
ffff800000805557:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080555b:	ba 07 00 00 00       	mov    edx,0x7
ffff800000805560:	89 ce                	mov    esi,ecx
ffff800000805562:	48 89 c7             	mov    rdi,rax
ffff800000805565:	49 89 df             	mov    r15,rbx
ffff800000805568:	48 b8 34 66 ee ff ff 	movabs rax,0xffffffffffee6634
ffff80000080556f:	ff ff ff 
ffff800000805572:	48 01 d8             	add    rax,rbx
ffff800000805575:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:462
                PAGE_RWX|PAGE_FOR_ALL);
                int laddr=i*0x400000+j*0x1000;//线性地址
ffff800000805577:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080557a:	c1 e0 0a             	shl    eax,0xa
ffff80000080557d:	89 c2                	mov    edx,eax
ffff80000080557f:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000805582:	01 d0                	add    eax,edx
ffff800000805584:	c1 e0 0c             	shl    eax,0xc
ffff800000805587:	89 45 b0             	mov    DWORD PTR [rbp-0x50],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:463
                if(ptr==NULL)
ffff80000080558a:	48 83 7d c0 00       	cmp    QWORD PTR [rbp-0x40],0x0
ffff80000080558f:	75 13                	jne    ffff8000008055a4 <palloc+0x24e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:466
                {
                   // ptr=laddr;
                    palloc_paddr=addr;
ffff800000805591:	48 b8 78 fd ff ff ff 	movabs rax,0xfffffffffffffd78
ffff800000805598:	ff ff ff 
ffff80000080559b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080559f:	8b 55 b4             	mov    edx,DWORD PTR [rbp-0x4c]
ffff8000008055a2:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:468
                }
                page_c--;
ffff8000008055a4:	83 6d ec 01          	sub    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:469
                c++;
ffff8000008055a8:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:470
                if(page_c==0)
ffff8000008055ac:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff8000008055b0:	0f 85 09 01 00 00    	jne    ffff8000008056bf <palloc+0x369>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:473
                {
                    //修改ldt,增加数据空间
                    unsigned int size=task[proc_index].ldt[2].limit_lo16;
ffff8000008055b6:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff8000008055bd:	ff ff ff 
ffff8000008055c0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008055c4:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008055c7:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff8000008055ca:	48 98                	cdqe   
ffff8000008055cc:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff8000008055d3:	48 01 d0             	add    rax,rdx
ffff8000008055d6:	0f b7 80 88 00 00 00 	movzx  eax,WORD PTR [rax+0x88]
ffff8000008055dd:	0f b7 c0             	movzx  eax,ax
ffff8000008055e0:	89 45 ac             	mov    DWORD PTR [rbp-0x54],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:474
                    size+=(task[proc_index].ldt[2].attr&0xf)<<16;
ffff8000008055e3:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff8000008055ea:	ff ff ff 
ffff8000008055ed:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008055f1:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008055f4:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff8000008055f7:	48 98                	cdqe   
ffff8000008055f9:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000805600:	48 01 d0             	add    rax,rdx
ffff800000805603:	0f b7 80 8d 00 00 00 	movzx  eax,WORD PTR [rax+0x8d]
ffff80000080560a:	0f b7 c0             	movzx  eax,ax
ffff80000080560d:	c1 e0 10             	shl    eax,0x10
ffff800000805610:	25 00 00 0f 00       	and    eax,0xf0000
ffff800000805615:	01 45 ac             	add    DWORD PTR [rbp-0x54],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:475
                    size+=c;
ffff800000805618:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080561b:	01 45 ac             	add    DWORD PTR [rbp-0x54],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:476
                    task[proc_index].ldt[2].limit_lo16=size&0xffff;
ffff80000080561e:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000805625:	ff ff ff 
ffff800000805628:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080562c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080562f:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff800000805632:	48 98                	cdqe   
ffff800000805634:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff80000080563b:	48 01 d0             	add    rax,rdx
ffff80000080563e:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
ffff800000805641:	66 89 90 88 00 00 00 	mov    WORD PTR [rax+0x88],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:477
                    int tmp_attr=task[proc_index].ldt[2].attr;
ffff800000805648:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff80000080564f:	ff ff ff 
ffff800000805652:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805656:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805659:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff80000080565c:	48 98                	cdqe   
ffff80000080565e:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000805665:	48 01 d0             	add    rax,rdx
ffff800000805668:	0f b7 80 8d 00 00 00 	movzx  eax,WORD PTR [rax+0x8d]
ffff80000080566f:	0f b7 c0             	movzx  eax,ax
ffff800000805672:	89 45 a8             	mov    DWORD PTR [rbp-0x58],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:478
                    tmp_attr&=0xfff0;
ffff800000805675:	81 65 a8 f0 ff 00 00 	and    DWORD PTR [rbp-0x58],0xfff0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:479
                    tmp_attr+=(size>>16)&0xf;
ffff80000080567c:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
ffff80000080567f:	c1 e8 10             	shr    eax,0x10
ffff800000805682:	83 e0 0f             	and    eax,0xf
ffff800000805685:	89 c2                	mov    edx,eax
ffff800000805687:	8b 45 a8             	mov    eax,DWORD PTR [rbp-0x58]
ffff80000080568a:	01 d0                	add    eax,edx
ffff80000080568c:	89 45 a8             	mov    DWORD PTR [rbp-0x58],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:480
                    task[proc_index].ldt[2].attr=tmp_attr;
ffff80000080568f:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000805696:	ff ff ff 
ffff800000805699:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080569d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008056a0:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff8000008056a3:	48 98                	cdqe   
ffff8000008056a5:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff8000008056ac:	48 01 d0             	add    rax,rdx
ffff8000008056af:	8b 55 a8             	mov    edx,DWORD PTR [rbp-0x58]
ffff8000008056b2:	66 89 90 8d 00 00 00 	mov    WORD PTR [rax+0x8d],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:481
                    return ptr;
ffff8000008056b9:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008056bd:	eb 31                	jmp    ffff8000008056f0 <palloc+0x39a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:484 (discriminator 2)
                }
            }
            tblp++;
ffff8000008056bf:	48 83 45 d0 08       	add    QWORD PTR [rbp-0x30],0x8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:440 (discriminator 2)
        for(int j=0;j<1024;j++)
ffff8000008056c4:	83 45 cc 01          	add    DWORD PTR [rbp-0x34],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:440 (discriminator 1)
ffff8000008056c8:	81 7d cc ff 03 00 00 	cmp    DWORD PTR [rbp-0x34],0x3ff
ffff8000008056cf:	0f 8e 1e fd ff ff    	jle    ffff8000008053f3 <palloc+0x9d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:486 (discriminator 2)
        }
        pgind++;
ffff8000008056d5:	48 83 45 e0 08       	add    QWORD PTR [rbp-0x20],0x8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:437 (discriminator 2)
    for(int i=1;i<1024;i++)
ffff8000008056da:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:437 (discriminator 1)
ffff8000008056de:	81 7d dc ff 03 00 00 	cmp    DWORD PTR [rbp-0x24],0x3ff
ffff8000008056e5:	0f 8e ec fc ff ff    	jle    ffff8000008053d7 <palloc+0x81>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:488
    }
    return NULL;
ffff8000008056eb:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:489
}
ffff8000008056f0:	48 83 c4 60          	add    rsp,0x60
ffff8000008056f4:	5b                   	pop    rbx
ffff8000008056f5:	41 5f                	pop    r15
ffff8000008056f7:	5d                   	pop    rbp
ffff8000008056f8:	c3                   	ret    

ffff8000008056f9 <malloc>:
malloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:492
//为当前进程申请新的内存，并返回这块内存的线性地址。
void* malloc(int size)
{
ffff8000008056f9:	f3 0f 1e fa          	endbr64 
ffff8000008056fd:	55                   	push   rbp
ffff8000008056fe:	48 89 e5             	mov    rbp,rsp
ffff800000805701:	41 57                	push   r15
ffff800000805703:	48 83 ec 18          	sub    rsp,0x18
ffff800000805707:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000805707 <malloc+0xe>
ffff80000080570e:	49 bb 11 71 11 00 00 	movabs r11,0x117111
ffff800000805715:	00 00 00 
ffff800000805718:	4c 01 d8             	add    rax,r11
ffff80000080571b:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:493
    return palloc(cur_proc,size);
ffff80000080571e:	48 ba 50 fe ff ff ff 	movabs rdx,0xfffffffffffffe50
ffff800000805725:	ff ff ff 
ffff800000805728:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080572c:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff80000080572e:	8b 4d ec             	mov    ecx,DWORD PTR [rbp-0x14]
ffff800000805731:	89 ce                	mov    esi,ecx
ffff800000805733:	89 d7                	mov    edi,edx
ffff800000805735:	49 89 c7             	mov    r15,rax
ffff800000805738:	48 ba 3e 8b ee ff ff 	movabs rdx,0xffffffffffee8b3e
ffff80000080573f:	ff ff ff 
ffff800000805742:	48 01 c2             	add    rdx,rax
ffff800000805745:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:494
}
ffff800000805747:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080574b:	c9                   	leave  
ffff80000080574c:	c3                   	ret    

ffff80000080574d <proc_end>:
proc_end():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:496
void proc_end()
{
ffff80000080574d:	f3 0f 1e fa          	endbr64 
ffff800000805751:	55                   	push   rbp
ffff800000805752:	48 89 e5             	mov    rbp,rsp
ffff800000805755:	41 57                	push   r15
ffff800000805757:	53                   	push   rbx
ffff800000805758:	48 83 ec 10          	sub    rsp,0x10
ffff80000080575c:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080575c <proc_end+0xf>
ffff800000805763:	49 bb bc 70 11 00 00 	movabs r11,0x1170bc
ffff80000080576a:	00 00 00 
ffff80000080576d:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:498
    int ret;
    asm volatile("mov %%eax,%0":"=m"(ret));
ffff800000805770:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:502
    //printf("proc #%d ended with retv %d.\n",cur_proc,ret);
    //切换堆栈
    //asm volatile("mov %0,%%rsp"::"r"(task[0].tss.esp));
    del_proc(cur_proc);
ffff800000805773:	48 b8 50 fe ff ff ff 	movabs rax,0xfffffffffffffe50
ffff80000080577a:	ff ff ff 
ffff80000080577d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805781:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000805783:	89 c7                	mov    edi,eax
ffff800000805785:	49 89 df             	mov    r15,rbx
ffff800000805788:	48 b8 7c 90 ee ff ff 	movabs rax,0xffffffffffee907c
ffff80000080578f:	ff ff ff 
ffff800000805792:	48 01 d8             	add    rax,rbx
ffff800000805795:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:503
    if(task[cur_proc].parent_pid!=-1){
ffff800000805797:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff80000080579e:	ff ff ff 
ffff8000008057a1:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008057a5:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008057a8:	48 b8 50 fe ff ff ff 	movabs rax,0xfffffffffffffe50
ffff8000008057af:	ff ff ff 
ffff8000008057b2:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008057b6:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008057b8:	48 98                	cdqe   
ffff8000008057ba:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff8000008057c1:	48 01 d0             	add    rax,rdx
ffff8000008057c4:	8b 80 bc 00 00 00    	mov    eax,DWORD PTR [rax+0xbc]
ffff8000008057ca:	83 f8 ff             	cmp    eax,0xffffffff
ffff8000008057cd:	0f 84 a0 00 00 00    	je     ffff800000805873 <proc_end+0x126>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:504
        task[task[cur_proc].parent_pid].stat=TASK_READY;
ffff8000008057d3:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff8000008057da:	ff ff ff 
ffff8000008057dd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008057e1:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008057e4:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff8000008057eb:	ff ff ff 
ffff8000008057ee:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008057f2:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008057f5:	48 b8 50 fe ff ff ff 	movabs rax,0xfffffffffffffe50
ffff8000008057fc:	ff ff ff 
ffff8000008057ff:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805803:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000805805:	48 98                	cdqe   
ffff800000805807:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff80000080580e:	48 01 c8             	add    rax,rcx
ffff800000805811:	8b 80 bc 00 00 00    	mov    eax,DWORD PTR [rax+0xbc]
ffff800000805817:	89 c0                	mov    eax,eax
ffff800000805819:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000805820:	48 01 d0             	add    rax,rdx
ffff800000805823:	c7 40 18 02 00 00 00 	mov    DWORD PTR [rax+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:505
        switch_proc_tss(task[cur_proc].parent_pid);
ffff80000080582a:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000805831:	ff ff ff 
ffff800000805834:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805838:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080583b:	48 b8 50 fe ff ff ff 	movabs rax,0xfffffffffffffe50
ffff800000805842:	ff ff ff 
ffff800000805845:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805849:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080584b:	48 98                	cdqe   
ffff80000080584d:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000805854:	48 01 d0             	add    rax,rdx
ffff800000805857:	8b 80 bc 00 00 00    	mov    eax,DWORD PTR [rax+0xbc]
ffff80000080585d:	89 c7                	mov    edi,eax
ffff80000080585f:	49 89 df             	mov    r15,rbx
ffff800000805862:	48 b8 8a 89 ee ff ff 	movabs rax,0xffffffffffee898a
ffff800000805869:	ff ff ff 
ffff80000080586c:	48 01 d8             	add    rax,rbx
ffff80000080586f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:510
    }
    else
        switch_proc_tss(0);
    //syscall(SYSCALL_DEL_PROC,cur_proc,0,0,0,0);
}
ffff800000805871:	eb 17                	jmp    ffff80000080588a <proc_end+0x13d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:508
        switch_proc_tss(0);
ffff800000805873:	bf 00 00 00 00       	mov    edi,0x0
ffff800000805878:	49 89 df             	mov    r15,rbx
ffff80000080587b:	48 b8 8a 89 ee ff ff 	movabs rax,0xffffffffffee898a
ffff800000805882:	ff ff ff 
ffff800000805885:	48 01 d8             	add    rax,rbx
ffff800000805888:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:510
}
ffff80000080588a:	90                   	nop
ffff80000080588b:	48 83 c4 10          	add    rsp,0x10
ffff80000080588f:	5b                   	pop    rbx
ffff800000805890:	41 5f                	pop    r15
ffff800000805892:	5d                   	pop    rbp
ffff800000805893:	c3                   	ret    

ffff800000805894 <del_proc>:
del_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:512
void del_proc(int pnr)
{
ffff800000805894:	f3 0f 1e fa          	endbr64 
ffff800000805898:	55                   	push   rbp
ffff800000805899:	48 89 e5             	mov    rbp,rsp
ffff80000080589c:	41 57                	push   r15
ffff80000080589e:	53                   	push   rbx
ffff80000080589f:	48 83 ec 20          	sub    rsp,0x20
ffff8000008058a3:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008058a3 <del_proc+0xf>
ffff8000008058aa:	49 bb 75 6f 11 00 00 	movabs r11,0x116f75
ffff8000008058b1:	00 00 00 
ffff8000008058b4:	4c 01 db             	add    rbx,r11
ffff8000008058b7:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:513
    task[pnr].stat=TASK_ZOMBIE;
ffff8000008058ba:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff8000008058c1:	ff ff ff 
ffff8000008058c4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008058c8:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008058cb:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008058ce:	48 98                	cdqe   
ffff8000008058d0:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff8000008058d7:	48 01 d0             	add    rax,rdx
ffff8000008058da:	c7 40 18 04 00 00 00 	mov    DWORD PTR [rax+0x18],0x4
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:516
//    task[pnr].pid=-1;
    //释放申请的页面
    release_mmap(&task[pnr]);
ffff8000008058e1:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff8000008058e8:	ff ff ff 
ffff8000008058eb:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008058ef:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008058f2:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008058f5:	48 98                	cdqe   
ffff8000008058f7:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff8000008058fe:	48 01 d0             	add    rax,rdx
ffff800000805901:	48 89 c7             	mov    rdi,rax
ffff800000805904:	49 89 df             	mov    r15,rbx
ffff800000805907:	48 b8 6e a7 ee ff ff 	movabs rax,0xffffffffffeea76e
ffff80000080590e:	ff ff ff 
ffff800000805911:	48 01 d8             	add    rax,rbx
ffff800000805914:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:518
    //释放存放页目录的页面
    kmfree(task[pnr].pml4);
ffff800000805916:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff80000080591d:	ff ff ff 
ffff800000805920:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805924:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805927:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080592a:	48 98                	cdqe   
ffff80000080592c:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000805933:	48 01 d0             	add    rax,rdx
ffff800000805936:	48 8b 80 e0 00 00 00 	mov    rax,QWORD PTR [rax+0xe0]
ffff80000080593d:	48 89 c7             	mov    rdi,rax
ffff800000805940:	49 89 df             	mov    r15,rbx
ffff800000805943:	48 b8 d7 5a ee ff ff 	movabs rax,0xffffffffffee5ad7
ffff80000080594a:	ff ff ff 
ffff80000080594d:	48 01 d8             	add    rax,rbx
ffff800000805950:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:520
    //关闭打开的文件
    for(int i=3;i<MAX_PROC_OPENF;i++){
ffff800000805952:	c7 45 ec 03 00 00 00 	mov    DWORD PTR [rbp-0x14],0x3
ffff800000805959:	eb 4f                	jmp    ffff8000008059aa <del_proc+0x116>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:521
        if(task[pnr].openf[i]){
ffff80000080595b:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000805962:	ff ff ff 
ffff800000805965:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805969:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080596c:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080596f:	48 98                	cdqe   
ffff800000805971:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000805978:	48 01 d0             	add    rax,rdx
ffff80000080597b:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080597e:	48 63 d2             	movsxd rdx,edx
ffff800000805981:	48 83 c2 1e          	add    rdx,0x1e
ffff800000805985:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff80000080598a:	48 85 c0             	test   rax,rax
ffff80000080598d:	74 17                	je     ffff8000008059a6 <del_proc+0x112>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:522
            sys_close(i);
ffff80000080598f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000805992:	89 c7                	mov    edi,eax
ffff800000805994:	49 89 df             	mov    r15,rbx
ffff800000805997:	48 b8 f3 e7 ee ff ff 	movabs rax,0xffffffffffeee7f3
ffff80000080599e:	ff ff ff 
ffff8000008059a1:	48 01 d8             	add    rax,rbx
ffff8000008059a4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:520 (discriminator 2)
    for(int i=3;i<MAX_PROC_OPENF;i++){
ffff8000008059a6:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:520 (discriminator 1)
ffff8000008059aa:	83 7d ec 1f          	cmp    DWORD PTR [rbp-0x14],0x1f
ffff8000008059ae:	7e ab                	jle    ffff80000080595b <del_proc+0xc7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:526
        }
    }
    //三个std判断一下是否是会话leader，是的话再关闭
    if(task[pnr].sid==task[pnr].pid){
ffff8000008059b0:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff8000008059b7:	ff ff ff 
ffff8000008059ba:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008059be:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008059c1:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008059c4:	48 98                	cdqe   
ffff8000008059c6:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff8000008059cd:	48 01 d0             	add    rax,rdx
ffff8000008059d0:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffff8000008059d3:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff8000008059da:	ff ff ff 
ffff8000008059dd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008059e1:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008059e4:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008059e7:	48 98                	cdqe   
ffff8000008059e9:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff8000008059f0:	48 01 c8             	add    rax,rcx
ffff8000008059f3:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008059f5:	39 c2                	cmp    edx,eax
ffff8000008059f7:	75 79                	jne    ffff800000805a72 <del_proc+0x1de>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:528
        //tty和console断联
        sys_ioctl(0,TTY_DISCONNECT,0);
ffff8000008059f9:	ba 00 00 00 00       	mov    edx,0x0
ffff8000008059fe:	be 02 00 00 00       	mov    esi,0x2
ffff800000805a03:	bf 00 00 00 00       	mov    edi,0x0
ffff800000805a08:	49 89 df             	mov    r15,rbx
ffff800000805a0b:	48 b8 0b b4 ee ff ff 	movabs rax,0xffffffffffeeb40b
ffff800000805a12:	ff ff ff 
ffff800000805a15:	48 01 d8             	add    rax,rbx
ffff800000805a18:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:529
        sys_close(0);
ffff800000805a1a:	bf 00 00 00 00       	mov    edi,0x0
ffff800000805a1f:	49 89 df             	mov    r15,rbx
ffff800000805a22:	48 b8 f3 e7 ee ff ff 	movabs rax,0xffffffffffeee7f3
ffff800000805a29:	ff ff ff 
ffff800000805a2c:	48 01 d8             	add    rax,rbx
ffff800000805a2f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:530
        sys_close(1);
ffff800000805a31:	bf 01 00 00 00       	mov    edi,0x1
ffff800000805a36:	49 89 df             	mov    r15,rbx
ffff800000805a39:	48 b8 f3 e7 ee ff ff 	movabs rax,0xffffffffffeee7f3
ffff800000805a40:	ff ff ff 
ffff800000805a43:	48 01 d8             	add    rax,rbx
ffff800000805a46:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:531
        sys_close(2);
ffff800000805a48:	bf 02 00 00 00       	mov    edi,0x2
ffff800000805a4d:	49 89 df             	mov    r15,rbx
ffff800000805a50:	48 b8 f3 e7 ee ff ff 	movabs rax,0xffffffffffeee7f3
ffff800000805a57:	ff ff ff 
ffff800000805a5a:	48 01 d8             	add    rax,rbx
ffff800000805a5d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:533
        //然后,关闭所有前台进程组的进程
        for(int i=0;i<MAX_TASKS;i++){
ffff800000805a5f:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff800000805a66:	eb 04                	jmp    ffff800000805a6c <del_proc+0x1d8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:533 (discriminator 3)
ffff800000805a68:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:533 (discriminator 1)
ffff800000805a6c:	83 7d e8 1f          	cmp    DWORD PTR [rbp-0x18],0x1f
ffff800000805a70:	7e f6                	jle    ffff800000805a68 <del_proc+0x1d4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:543
    }
    //TODO 给子进程发送SIGHUP信号结束他们
    //
    //从进程中解除cr3,tss和ldt
    //switch_proc_tss(task[pnr]);
}
ffff800000805a72:	90                   	nop
ffff800000805a73:	48 83 c4 20          	add    rsp,0x20
ffff800000805a77:	5b                   	pop    rbx
ffff800000805a78:	41 5f                	pop    r15
ffff800000805a7a:	5d                   	pop    rbp
ffff800000805a7b:	c3                   	ret    

ffff800000805a7c <set_proc_stat>:
set_proc_stat():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:546

int set_proc_stat(int pid,int stat)
{
ffff800000805a7c:	f3 0f 1e fa          	endbr64 
ffff800000805a80:	55                   	push   rbp
ffff800000805a81:	48 89 e5             	mov    rbp,rsp
ffff800000805a84:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000805a84 <set_proc_stat+0x8>
ffff800000805a8b:	49 bb 94 6d 11 00 00 	movabs r11,0x116d94
ffff800000805a92:	00 00 00 
ffff800000805a95:	4c 01 d8             	add    rax,r11
ffff800000805a98:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff800000805a9b:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:547
    if(pid==-1)return -1;
ffff800000805a9e:	83 7d ec ff          	cmp    DWORD PTR [rbp-0x14],0xffffffff
ffff800000805aa2:	75 0a                	jne    ffff800000805aae <set_proc_stat+0x32>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:547 (discriminator 1)
ffff800000805aa4:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000805aa9:	e9 b9 00 00 00       	jmp    ffff800000805b67 <set_proc_stat+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:548
    int i=0;
ffff800000805aae:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:549
    for(;task[i].pid!=pid;i++);
ffff800000805ab5:	eb 04                	jmp    ffff800000805abb <set_proc_stat+0x3f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:549 (discriminator 2)
ffff800000805ab7:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:549 (discriminator 1)
ffff800000805abb:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff800000805ac2:	ff ff ff 
ffff800000805ac5:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805ac9:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000805acc:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000805acf:	48 63 d2             	movsxd rdx,edx
ffff800000805ad2:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff800000805ad9:	48 01 ca             	add    rdx,rcx
ffff800000805adc:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff800000805ade:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000805ae1:	39 d1                	cmp    ecx,edx
ffff800000805ae3:	75 d2                	jne    ffff800000805ab7 <set_proc_stat+0x3b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:550
    if(i==MAX_PROC_COUNT)return -1;
ffff800000805ae5:	83 7d fc 40          	cmp    DWORD PTR [rbp-0x4],0x40
ffff800000805ae9:	75 07                	jne    ffff800000805af2 <set_proc_stat+0x76>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:550 (discriminator 1)
ffff800000805aeb:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000805af0:	eb 75                	jmp    ffff800000805b67 <set_proc_stat+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:551
    task[i].stat=stat;
ffff800000805af2:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff800000805af9:	ff ff ff 
ffff800000805afc:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805b00:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000805b03:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000805b06:	48 63 d2             	movsxd rdx,edx
ffff800000805b09:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff800000805b10:	48 01 d1             	add    rcx,rdx
ffff800000805b13:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000805b16:	89 51 18             	mov    DWORD PTR [rcx+0x18],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:553
    //如果这就是正在运行的进程，那么马上停止
    if(cur_proc==i)
ffff800000805b19:	48 ba 50 fe ff ff ff 	movabs rdx,0xfffffffffffffe50
ffff800000805b20:	ff ff ff 
ffff800000805b23:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805b27:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000805b29:	39 55 fc             	cmp    DWORD PTR [rbp-0x4],edx
ffff800000805b2c:	75 34                	jne    ffff800000805b62 <set_proc_stat+0xe6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:554
        task[cur_proc].utime=MAX_UTIME;
ffff800000805b2e:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff800000805b35:	ff ff ff 
ffff800000805b38:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805b3c:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000805b3f:	48 ba 50 fe ff ff ff 	movabs rdx,0xfffffffffffffe50
ffff800000805b46:	ff ff ff 
ffff800000805b49:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000805b4d:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000805b4f:	48 98                	cdqe   
ffff800000805b51:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000805b58:	48 01 c8             	add    rax,rcx
ffff800000805b5b:	c7 40 1c 0a 00 00 00 	mov    DWORD PTR [rax+0x1c],0xa
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:555
    return 0;
ffff800000805b62:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:556
}
ffff800000805b67:	5d                   	pop    rbp
ffff800000805b68:	c3                   	ret    

ffff800000805b69 <sys_exit>:
sys_exit():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:588
//}
/*
 * 进程结束。
 * */
int sys_exit(int code)
{
ffff800000805b69:	f3 0f 1e fa          	endbr64 
ffff800000805b6d:	55                   	push   rbp
ffff800000805b6e:	48 89 e5             	mov    rbp,rsp
ffff800000805b71:	41 57                	push   r15
ffff800000805b73:	53                   	push   rbx
ffff800000805b74:	48 83 ec 10          	sub    rsp,0x10
ffff800000805b78:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000805b78 <sys_exit+0xf>
ffff800000805b7f:	49 bb a0 6c 11 00 00 	movabs r11,0x116ca0
ffff800000805b86:	00 00 00 
ffff800000805b89:	4c 01 db             	add    rbx,r11
ffff800000805b8c:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:589
    current->exit_code=code;
ffff800000805b8f:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000805b96:	ff ff ff 
ffff800000805b99:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805b9d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000805ba0:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000805ba3:	89 50 24             	mov    DWORD PTR [rax+0x24],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:590
    del_proc(cur_proc);
ffff800000805ba6:	48 b8 50 fe ff ff ff 	movabs rax,0xfffffffffffffe50
ffff800000805bad:	ff ff ff 
ffff800000805bb0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805bb4:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000805bb6:	89 c7                	mov    edi,eax
ffff800000805bb8:	49 89 df             	mov    r15,rbx
ffff800000805bbb:	48 b8 7c 90 ee ff ff 	movabs rax,0xffffffffffee907c
ffff800000805bc2:	ff ff ff 
ffff800000805bc5:	48 01 d8             	add    rax,rbx
ffff800000805bc8:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:592 (discriminator 1)
    while(1)
        manage_proc();
ffff800000805bca:	49 89 df             	mov    r15,rbx
ffff800000805bcd:	b8 00 00 00 00       	mov    eax,0x0
ffff800000805bd2:	48 ba ce 86 ee ff ff 	movabs rdx,0xffffffffffee86ce
ffff800000805bd9:	ff ff ff 
ffff800000805bdc:	48 01 da             	add    rdx,rbx
ffff800000805bdf:	ff d2                	call   rdx
ffff800000805be1:	eb e7                	jmp    ffff800000805bca <sys_exit+0x61>

ffff800000805be3 <reg_proc>:
reg_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:648
    dllmain(NULL,0,NULL);
    
}*/

int reg_proc(addr_t entry, struct index_node *cwd, struct index_node *exef)
{
ffff800000805be3:	f3 0f 1e fa          	endbr64 
ffff800000805be7:	55                   	push   rbp
ffff800000805be8:	48 89 e5             	mov    rbp,rsp
ffff800000805beb:	41 57                	push   r15
ffff800000805bed:	41 54                	push   r12
ffff800000805bef:	53                   	push   rbx
ffff800000805bf0:	48 83 ec 48          	sub    rsp,0x48
ffff800000805bf4:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000805bf4 <reg_proc+0x11>
ffff800000805bfb:	49 bb 24 6c 11 00 00 	movabs r11,0x116c24
ffff800000805c02:	00 00 00 
ffff800000805c05:	4c 01 db             	add    rbx,r11
ffff800000805c08:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
ffff800000805c0c:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
ffff800000805c10:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:650
    
    int i=req_proc();
ffff800000805c14:	49 89 df             	mov    r15,rbx
ffff800000805c17:	b8 00 00 00 00       	mov    eax,0x0
ffff800000805c1c:	48 ba 42 83 ee ff ff 	movabs rdx,0xffffffffffee8342
ffff800000805c23:	ff ff ff 
ffff800000805c26:	48 01 da             	add    rdx,rbx
ffff800000805c29:	ff d2                	call   rdx
ffff800000805c2b:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:651
    if(i==-1)return -1;
ffff800000805c2e:	83 7d dc ff          	cmp    DWORD PTR [rbp-0x24],0xffffffff
ffff800000805c32:	75 0a                	jne    ffff800000805c3e <reg_proc+0x5b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:651 (discriminator 1)
ffff800000805c34:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000805c39:	e9 7e 02 00 00       	jmp    ffff800000805ebc <reg_proc+0x2d9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:654

    //栈顶设置在了4G处
    set_proc(0, 0, 0, 0, DS_USER, CS_USER, DS_USER, DS_USER\
ffff800000805c3e:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000805c42:	48 83 ec 08          	sub    rsp,0x8
ffff800000805c46:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000805c49:	52                   	push   rdx
ffff800000805c4a:	6a 00                	push   0x0
ffff800000805c4c:	50                   	push   rax
ffff800000805c4d:	6a 00                	push   0x0
ffff800000805c4f:	6a 00                	push   0x0
ffff800000805c51:	6a 00                	push   0x0
ffff800000805c53:	68 00 f0 ff ff       	push   0xfffffffffffff000
ffff800000805c58:	c7 44 24 04 ff 7f 00 	mov    DWORD PTR [rsp+0x4],0x7fff
ffff800000805c5f:	00 
ffff800000805c60:	6a 28                	push   0x28
ffff800000805c62:	6a 28                	push   0x28
ffff800000805c64:	6a 28                	push   0x28
ffff800000805c66:	6a 28                	push   0x28
ffff800000805c68:	41 b9 30 00 00 00    	mov    r9d,0x30
ffff800000805c6e:	41 b8 28 00 00 00    	mov    r8d,0x28
ffff800000805c74:	b9 00 00 00 00       	mov    ecx,0x0
ffff800000805c79:	ba 00 00 00 00       	mov    edx,0x0
ffff800000805c7e:	be 00 00 00 00       	mov    esi,0x0
ffff800000805c83:	bf 00 00 00 00       	mov    edi,0x0
ffff800000805c88:	49 89 df             	mov    r15,rbx
ffff800000805c8b:	48 b8 93 84 ee ff ff 	movabs rax,0xffffffffffee8493
ffff800000805c92:	ff ff ff 
ffff800000805c95:	48 01 d8             	add    rax,rbx
ffff800000805c98:	ff d0                	call   rax
ffff800000805c9a:	48 83 c4 60          	add    rsp,0x60
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:656
, DS_USER, DS_USER, STACK_TOP, 0, 0, 0, entry, 0, i);
    task[i].pml4= kmalloc();
ffff800000805c9e:	49 89 df             	mov    r15,rbx
ffff800000805ca1:	b8 00 00 00 00       	mov    eax,0x0
ffff800000805ca6:	48 ba 68 57 ee ff ff 	movabs rdx,0xffffffffffee5768
ffff800000805cad:	ff ff ff 
ffff800000805cb0:	48 01 da             	add    rdx,rbx
ffff800000805cb3:	ff d2                	call   rdx
ffff800000805cb5:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff800000805cbc:	ff ff ff 
ffff800000805cbf:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000805cc3:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000805cc6:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000805cc9:	48 63 d2             	movsxd rdx,edx
ffff800000805ccc:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff800000805cd3:	48 01 ca             	add    rdx,rcx
ffff800000805cd6:	48 89 82 e0 00 00 00 	mov    QWORD PTR [rdx+0xe0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:657
    task[i].pml4[0]= kmalloc();
ffff800000805cdd:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000805ce4:	ff ff ff 
ffff800000805ce7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805ceb:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805cee:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000805cf1:	48 98                	cdqe   
ffff800000805cf3:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000805cfa:	48 01 d0             	add    rax,rdx
ffff800000805cfd:	4c 8b a0 e0 00 00 00 	mov    r12,QWORD PTR [rax+0xe0]
ffff800000805d04:	49 89 df             	mov    r15,rbx
ffff800000805d07:	b8 00 00 00 00       	mov    eax,0x0
ffff800000805d0c:	48 ba 68 57 ee ff ff 	movabs rdx,0xffffffffffee5768
ffff800000805d13:	ff ff ff 
ffff800000805d16:	48 01 da             	add    rdx,rbx
ffff800000805d19:	ff d2                	call   rdx
ffff800000805d1b:	49 89 04 24          	mov    QWORD PTR [r12],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:658
    unsigned long *pdpt=task[i].pml4;
ffff800000805d1f:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000805d26:	ff ff ff 
ffff800000805d29:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805d2d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805d30:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000805d33:	48 98                	cdqe   
ffff800000805d35:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000805d3c:	48 01 d0             	add    rax,rdx
ffff800000805d3f:	48 8b 80 e0 00 00 00 	mov    rax,QWORD PTR [rax+0xe0]
ffff800000805d46:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:660
    //pdpt第一项(0-1GB)设置为内核空间，这样才能访问中断
    set_1gb_pdpt(pdpt,0,PAGE_PRESENT|PAGE_RWX);
ffff800000805d4a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000805d4e:	ba 03 00 00 00       	mov    edx,0x3
ffff800000805d53:	be 00 00 00 00       	mov    esi,0x0
ffff800000805d58:	48 89 c7             	mov    rdi,rax
ffff800000805d5b:	49 89 df             	mov    r15,rbx
ffff800000805d5e:	48 b8 99 66 ee ff ff 	movabs rax,0xffffffffffee6699
ffff800000805d65:	ff ff ff 
ffff800000805d68:	48 01 d8             	add    rax,rbx
ffff800000805d6b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:663

    //申请一项pd,里面申请一2mb页用于堆栈
    addr_t *stackb= kmalloc();
ffff800000805d6d:	49 89 df             	mov    r15,rbx
ffff800000805d70:	b8 00 00 00 00       	mov    eax,0x0
ffff800000805d75:	48 ba 68 57 ee ff ff 	movabs rdx,0xffffffffffee5768
ffff800000805d7c:	ff ff ff 
ffff800000805d7f:	48 01 da             	add    rdx,rbx
ffff800000805d82:	ff d2                	call   rdx
ffff800000805d84:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:664
    pdpt[3]=(unsigned long)stackb|PAGE_PRESENT|PAGE_FOR_ALL|PAGE_RWX;//3-4G分配栈空间
ffff800000805d88:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000805d8c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000805d90:	48 83 c0 18          	add    rax,0x18
ffff800000805d94:	48 83 ca 07          	or     rdx,0x7
ffff800000805d98:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:665
    set_2mb_pde(stackb + 511, get_phyaddr(req_a_page()), PAGE_FOR_ALL|PAGE_RWX);
ffff800000805d9b:	49 89 df             	mov    r15,rbx
ffff800000805d9e:	b8 00 00 00 00       	mov    eax,0x0
ffff800000805da3:	48 ba 13 62 ee ff ff 	movabs rdx,0xffffffffffee6213
ffff800000805daa:	ff ff ff 
ffff800000805dad:	48 01 da             	add    rdx,rbx
ffff800000805db0:	ff d2                	call   rdx
ffff800000805db2:	89 c7                	mov    edi,eax
ffff800000805db4:	49 89 df             	mov    r15,rbx
ffff800000805db7:	48 b8 00 66 ee ff ff 	movabs rax,0xffffffffffee6600
ffff800000805dbe:	ff ff ff 
ffff800000805dc1:	48 01 d8             	add    rax,rbx
ffff800000805dc4:	ff d0                	call   rax
ffff800000805dc6:	89 c1                	mov    ecx,eax
ffff800000805dc8:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000805dcc:	48 05 f8 0f 00 00    	add    rax,0xff8
ffff800000805dd2:	ba 06 00 00 00       	mov    edx,0x6
ffff800000805dd7:	89 ce                	mov    esi,ecx
ffff800000805dd9:	48 89 c7             	mov    rdi,rax
ffff800000805ddc:	49 89 df             	mov    r15,rbx
ffff800000805ddf:	48 b8 04 67 ee ff ff 	movabs rax,0xffffffffffee6704
ffff800000805de6:	ff ff ff 
ffff800000805de9:	48 01 d8             	add    rax,rbx
ffff800000805dec:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:666
    task[i].regs.cr3=task[i].pml4;
ffff800000805dee:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000805df5:	ff ff ff 
ffff800000805df8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805dfc:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805dff:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000805e02:	48 98                	cdqe   
ffff800000805e04:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000805e0b:	48 01 d0             	add    rax,rdx
ffff800000805e0e:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff800000805e15:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000805e1c:	ff ff ff 
ffff800000805e1f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805e23:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000805e26:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000805e29:	48 98                	cdqe   
ffff800000805e2b:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000805e32:	48 01 c8             	add    rax,rcx
ffff800000805e35:	48 89 90 64 02 00 00 	mov    QWORD PTR [rax+0x264],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:668

    task[i].stat=TASK_READY;
ffff800000805e3c:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000805e43:	ff ff ff 
ffff800000805e46:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805e4a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805e4d:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000805e50:	48 98                	cdqe   
ffff800000805e52:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000805e59:	48 01 d0             	add    rax,rdx
ffff800000805e5c:	c7 40 18 02 00 00 00 	mov    DWORD PTR [rax+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:669
    task[i].cwd=cwd;
ffff800000805e63:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000805e6a:	ff ff ff 
ffff800000805e6d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805e71:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805e74:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000805e77:	48 98                	cdqe   
ffff800000805e79:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000805e80:	48 01 c2             	add    rdx,rax
ffff800000805e83:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000805e87:	48 89 82 e8 00 00 00 	mov    QWORD PTR [rdx+0xe8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:670
    task[i].exef=exef;
ffff800000805e8e:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000805e95:	ff ff ff 
ffff800000805e98:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805e9c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805e9f:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000805ea2:	48 98                	cdqe   
ffff800000805ea4:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000805eab:	48 01 c2             	add    rdx,rax
ffff800000805eae:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000805eb2:	48 89 82 f0 00 00 00 	mov    QWORD PTR [rdx+0xf0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:672

    return i;
ffff800000805eb9:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:727
    proc_ret_stack *pstack=stack_paddr+stack_size-12;
    pstack->argc=0;
    pstack->argv=0;
    pstack->proc_end_addr=proc_end;
    int *pptr=pstack;*/
}
ffff800000805ebc:	48 8d 65 e8          	lea    rsp,[rbp-0x18]
ffff800000805ec0:	5b                   	pop    rbx
ffff800000805ec1:	41 5c                	pop    r12
ffff800000805ec3:	41 5f                	pop    r15
ffff800000805ec5:	5d                   	pop    rbp
ffff800000805ec6:	c3                   	ret    

ffff800000805ec7 <sys_malloc>:
sys_malloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:730

void * sys_malloc(int size)
{
ffff800000805ec7:	f3 0f 1e fa          	endbr64 
ffff800000805ecb:	55                   	push   rbp
ffff800000805ecc:	48 89 e5             	mov    rbp,rsp
ffff800000805ecf:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000805ecf <sys_malloc+0x8>
ffff800000805ed6:	49 bb 49 69 11 00 00 	movabs r11,0x116949
ffff800000805edd:	00 00 00 
ffff800000805ee0:	4c 01 d8             	add    rax,r11
ffff800000805ee3:	89 7d cc             	mov    DWORD PTR [rbp-0x34],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:732
    //
    int n=size/CHUNK_SIZE+size%CHUNK_SIZE?1:0;
ffff800000805ee6:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff800000805ee9:	8d 8a ff 0f 00 00    	lea    ecx,[rdx+0xfff]
ffff800000805eef:	85 d2                	test   edx,edx
ffff800000805ef1:	0f 48 d1             	cmovs  edx,ecx
ffff800000805ef4:	c1 fa 0c             	sar    edx,0xc
ffff800000805ef7:	89 d6                	mov    esi,edx
ffff800000805ef9:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff800000805efc:	89 d1                	mov    ecx,edx
ffff800000805efe:	c1 f9 1f             	sar    ecx,0x1f
ffff800000805f01:	c1 e9 14             	shr    ecx,0x14
ffff800000805f04:	01 ca                	add    edx,ecx
ffff800000805f06:	81 e2 ff 0f 00 00    	and    edx,0xfff
ffff800000805f0c:	29 ca                	sub    edx,ecx
ffff800000805f0e:	01 f2                	add    edx,esi
ffff800000805f10:	85 d2                	test   edx,edx
ffff800000805f12:	0f 95 c2             	setne  dl
ffff800000805f15:	0f b6 d2             	movzx  edx,dl
ffff800000805f18:	89 55 e8             	mov    DWORD PTR [rbp-0x18],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:733
    chunk_header *hp=(chunk_header*)task[cur_proc].mem_struct.heap_base;
ffff800000805f1b:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff800000805f22:	ff ff ff 
ffff800000805f25:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805f29:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000805f2c:	48 ba 50 fe ff ff ff 	movabs rdx,0xfffffffffffffe50
ffff800000805f33:	ff ff ff 
ffff800000805f36:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805f3a:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000805f3c:	48 63 d2             	movsxd rdx,edx
ffff800000805f3f:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff800000805f46:	48 01 ca             	add    rdx,rcx
ffff800000805f49:	48 8b 52 28          	mov    rdx,QWORD PTR [rdx+0x28]
ffff800000805f4d:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:734
    while (hp->next!=NULL&&hp->alloc==0&&hp->pgn>=n)
ffff800000805f51:	eb 0c                	jmp    ffff800000805f5f <sys_malloc+0x98>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:735
        hp=hp->next;
ffff800000805f53:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000805f57:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff800000805f5b:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:734
    while (hp->next!=NULL&&hp->alloc==0&&hp->pgn>=n)
ffff800000805f5f:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000805f63:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff800000805f67:	48 85 d2             	test   rdx,rdx
ffff800000805f6a:	74 16                	je     ffff800000805f82 <sys_malloc+0xbb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:734 (discriminator 1)
ffff800000805f6c:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000805f70:	8b 52 04             	mov    edx,DWORD PTR [rdx+0x4]
ffff800000805f73:	85 d2                	test   edx,edx
ffff800000805f75:	75 0b                	jne    ffff800000805f82 <sys_malloc+0xbb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:734 (discriminator 2)
ffff800000805f77:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000805f7b:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000805f7d:	39 55 e8             	cmp    DWORD PTR [rbp-0x18],edx
ffff800000805f80:	7e d1                	jle    ffff800000805f53 <sys_malloc+0x8c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:736
    if(hp->pgn<n)
ffff800000805f82:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000805f86:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000805f88:	39 55 e8             	cmp    DWORD PTR [rbp-0x18],edx
ffff800000805f8b:	0f 8e b8 00 00 00    	jle    ffff800000806049 <sys_malloc+0x182>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:739
    {
        //上抬heap top
        if(task[cur_proc].mem_struct.heap_top+CHUNK_SIZE*n>=HEAP_MAXTOP)
ffff800000805f91:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff800000805f98:	ff ff ff 
ffff800000805f9b:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805f9f:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000805fa2:	48 ba 50 fe ff ff ff 	movabs rdx,0xfffffffffffffe50
ffff800000805fa9:	ff ff ff 
ffff800000805fac:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805fb0:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000805fb2:	48 63 d2             	movsxd rdx,edx
ffff800000805fb5:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff800000805fbc:	48 01 ca             	add    rdx,rcx
ffff800000805fbf:	48 8b 4a 30          	mov    rcx,QWORD PTR [rdx+0x30]
ffff800000805fc3:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000805fc6:	c1 e2 0c             	shl    edx,0xc
ffff800000805fc9:	48 63 d2             	movsxd rdx,edx
ffff800000805fcc:	48 01 ca             	add    rdx,rcx
ffff800000805fcf:	48 81 fa ff ff ef 01 	cmp    rdx,0x1efffff
ffff800000805fd6:	76 0a                	jbe    ffff800000805fe2 <sys_malloc+0x11b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:742
        {
            //超过顶部
            return NULL;
ffff800000805fd8:	b8 00 00 00 00       	mov    eax,0x0
ffff800000805fdd:	e9 e0 00 00 00       	jmp    ffff8000008060c2 <sys_malloc+0x1fb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:744
        }
        int needed=n-hp->pgn;
ffff800000805fe2:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000805fe6:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff800000805fe8:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000805feb:	29 ca                	sub    edx,ecx
ffff800000805fed:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:745
        char* p=task[cur_proc].mem_struct.heap_top;
ffff800000805ff0:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff800000805ff7:	ff ff ff 
ffff800000805ffa:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805ffe:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000806001:	48 ba 50 fe ff ff ff 	movabs rdx,0xfffffffffffffe50
ffff800000806008:	ff ff ff 
ffff80000080600b:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080600f:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000806011:	48 98                	cdqe   
ffff800000806013:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff80000080601a:	48 01 c8             	add    rax,rcx
ffff80000080601d:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff800000806021:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:746
        for(int i=0;i<needed*CHUNK_SIZE/PAGE_SIZE;i++)
ffff800000806025:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff80000080602c:	eb 13                	jmp    ffff800000806041 <sys_malloc+0x17a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:748 (discriminator 3)
        {
            *p=0;//触发缺页中断
ffff80000080602e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000806032:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:749 (discriminator 3)
            p+=PAGE_SIZE;
ffff800000806035:	48 81 45 f0 00 10 00 	add    QWORD PTR [rbp-0x10],0x1000
ffff80000080603c:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:746 (discriminator 3)
        for(int i=0;i<needed*CHUNK_SIZE/PAGE_SIZE;i++)
ffff80000080603d:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:746 (discriminator 1)
ffff800000806041:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000806044:	3b 45 e4             	cmp    eax,DWORD PTR [rbp-0x1c]
ffff800000806047:	7c e5                	jl     ffff80000080602e <sys_malloc+0x167>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:752
        }
    }
    if(hp->pgn>n)
ffff800000806049:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080604d:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080604f:	39 45 e8             	cmp    DWORD PTR [rbp-0x18],eax
ffff800000806052:	7d 59                	jge    ffff8000008060ad <sys_malloc+0x1e6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:755
    {
        //在后面新建一个头
        char *p=hp;
ffff800000806054:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000806058:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:756
        p+=(n+1)*CHUNK_SIZE;//算上存储头一个
ffff80000080605c:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080605f:	83 c0 01             	add    eax,0x1
ffff800000806062:	c1 e0 0c             	shl    eax,0xc
ffff800000806065:	48 98                	cdqe   
ffff800000806067:	48 01 45 d8          	add    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:757
        chunk_header *np=p;
ffff80000080606b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080606f:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:758
        np->pgn=hp->pgn-n-1;
ffff800000806073:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000806077:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000806079:	2b 45 e8             	sub    eax,DWORD PTR [rbp-0x18]
ffff80000080607c:	8d 50 ff             	lea    edx,[rax-0x1]
ffff80000080607f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000806083:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:759
        np->next=hp->next;
ffff800000806085:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000806089:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff80000080608d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000806091:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:760
        np->prev=hp;
ffff800000806095:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000806099:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080609d:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:761
        hp->next=np;
ffff8000008060a1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008060a5:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff8000008060a9:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:763
    }
    hp->alloc=1;//分配完毕
ffff8000008060ad:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008060b1:	c7 40 04 01 00 00 00 	mov    DWORD PTR [rax+0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:764
    return (char*)hp+CHUNK_SIZE;//返回后边的第一个数据块地址
ffff8000008060b8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008060bc:	48 05 00 10 00 00    	add    rax,0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:765
}
ffff8000008060c2:	5d                   	pop    rbp
ffff8000008060c3:	c3                   	ret    

ffff8000008060c4 <sys_free>:
sys_free():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:767
int sys_free(int ptr)
{
ffff8000008060c4:	f3 0f 1e fa          	endbr64 
ffff8000008060c8:	55                   	push   rbp
ffff8000008060c9:	48 89 e5             	mov    rbp,rsp
ffff8000008060cc:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008060cc <sys_free+0x8>
ffff8000008060d3:	49 bb 4c 67 11 00 00 	movabs r11,0x11674c
ffff8000008060da:	00 00 00 
ffff8000008060dd:	4c 01 d8             	add    rax,r11
ffff8000008060e0:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:768
    chunk_header *hp=ptr-CHUNK_SIZE;//回退到头
ffff8000008060e3:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008060e6:	2d 00 10 00 00       	sub    eax,0x1000
ffff8000008060eb:	48 98                	cdqe   
ffff8000008060ed:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:769
    hp->alloc=0;    //合并
ffff8000008060f1:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008060f5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [rax+0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:771
    //向后合并
    chunk_header *p=hp->next;
ffff8000008060fc:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000806100:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000806104:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:772
    while(p!=NULL)
ffff800000806108:	eb 2e                	jmp    ffff800000806138 <sys_free+0x74>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:774
    {
        if(p->alloc==0)
ffff80000080610a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080610e:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff800000806111:	85 c0                	test   eax,eax
ffff800000806113:	75 2c                	jne    ffff800000806141 <sys_free+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:776
        {
            hp->pgn+=p->pgn+1;//把区域合并
ffff800000806115:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000806119:	8b 10                	mov    edx,DWORD PTR [rax]
ffff80000080611b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080611f:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000806121:	83 c0 01             	add    eax,0x1
ffff800000806124:	01 c2                	add    edx,eax
ffff800000806126:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080612a:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:779
        }else
            break;
        p=p->next;
ffff80000080612c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000806130:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000806134:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:772
    while(p!=NULL)
ffff800000806138:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffff80000080613d:	75 cb                	jne    ffff80000080610a <sys_free+0x46>
ffff80000080613f:	eb 01                	jmp    ffff800000806142 <sys_free+0x7e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:778
            break;
ffff800000806141:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:782
    }
    //向前合并
    p=hp->prev;
ffff800000806142:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000806146:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080614a:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:783
    while(p!=NULL)
ffff80000080614e:	eb 2e                	jmp    ffff80000080617e <sys_free+0xba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:785
    {
        if(p->alloc==0)
ffff800000806150:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000806154:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff800000806157:	85 c0                	test   eax,eax
ffff800000806159:	75 2c                	jne    ffff800000806187 <sys_free+0xc3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:787
        {
            p->pgn+=hp->pgn+1;//把区域合并
ffff80000080615b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080615f:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000806161:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000806165:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000806167:	83 c0 01             	add    eax,0x1
ffff80000080616a:	01 c2                	add    edx,eax
ffff80000080616c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000806170:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:790
        }else
            break;
        p=p->prev;
ffff800000806172:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000806176:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080617a:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:783
    while(p!=NULL)
ffff80000080617e:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffff800000806183:	75 cb                	jne    ffff800000806150 <sys_free+0x8c>
ffff800000806185:	eb 01                	jmp    ffff800000806188 <sys_free+0xc4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:789
            break;
ffff800000806187:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:793
    }
    //合并完成
    return 0;
ffff800000806188:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:794
}
ffff80000080618d:	5d                   	pop    rbp
ffff80000080618e:	c3                   	ret    

ffff80000080618f <switch_to>:
switch_to():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:796

void switch_to(struct process *from, struct process *to) {
ffff80000080618f:	f3 0f 1e fa          	endbr64 
ffff800000806193:	55                   	push   rbp
ffff800000806194:	48 89 e5             	mov    rbp,rsp
ffff800000806197:	53                   	push   rbx
ffff800000806198:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000806198 <switch_to+0x9>
ffff80000080619f:	49 bb 80 66 11 00 00 	movabs r11,0x116680
ffff8000008061a6:	00 00 00 
ffff8000008061a9:	4c 01 d8             	add    rax,r11
ffff8000008061ac:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
ffff8000008061b0:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:797
    cur_proc=to-task;
ffff8000008061b4:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff8000008061bb:	ff ff ff 
ffff8000008061be:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008061c2:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008061c5:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff8000008061c9:	48 29 ca             	sub    rdx,rcx
ffff8000008061cc:	48 89 d1             	mov    rcx,rdx
ffff8000008061cf:	48 c1 f9 02          	sar    rcx,0x2
ffff8000008061d3:	48 ba 7d 38 0d a1 92 	movabs rdx,0xb3146e92a10d387d
ffff8000008061da:	6e 14 b3 
ffff8000008061dd:	48 0f af d1          	imul   rdx,rcx
ffff8000008061e1:	89 d1                	mov    ecx,edx
ffff8000008061e3:	48 ba 50 fe ff ff ff 	movabs rdx,0xfffffffffffffe50
ffff8000008061ea:	ff ff ff 
ffff8000008061ed:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008061f1:	89 0a                	mov    DWORD PTR [rdx],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:798
    current=&task[cur_proc];
ffff8000008061f3:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff8000008061fa:	ff ff ff 
ffff8000008061fd:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806201:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000806204:	48 ba 50 fe ff ff ff 	movabs rdx,0xfffffffffffffe50
ffff80000080620b:	ff ff ff 
ffff80000080620e:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806212:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000806214:	48 63 d2             	movsxd rdx,edx
ffff800000806217:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff80000080621e:	48 01 ca             	add    rdx,rcx
ffff800000806221:	48 b9 a8 fe ff ff ff 	movabs rcx,0xfffffffffffffea8
ffff800000806228:	ff ff ff 
ffff80000080622b:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff80000080622f:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:800
    //cr3需要物理地址,regs.cr3里面填的就是物理地址
    asm volatile("mov %0,%%rax\n"
ffff800000806232:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806236:	48 8b 80 64 02 00 00 	mov    rax,QWORD PTR [rax+0x264]
ffff80000080623d:	0f 22 d8             	mov    cr3,rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:802
                 "mov %%rax,%%cr3\n":"=m"(to->regs.cr3));
    asm volatile("mov %%rsp,%0\r\n"
ffff800000806240:	4c 8b 4d f0          	mov    r9,QWORD PTR [rbp-0x10]
ffff800000806244:	4c 8b 55 f0          	mov    r10,QWORD PTR [rbp-0x10]
ffff800000806248:	4c 8b 5d f0          	mov    r11,QWORD PTR [rbp-0x10]
ffff80000080624c:	48 8b 5d f0          	mov    rbx,QWORD PTR [rbp-0x10]
ffff800000806250:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806254:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000806258:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff80000080625c:	4c 8b 45 e8          	mov    r8,QWORD PTR [rbp-0x18]
ffff800000806260:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
ffff800000806264:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
ffff800000806268:	49 89 a1 9c 02 00 00 	mov    QWORD PTR [r9+0x29c],rsp
ffff80000080626f:	48 8d 05 24 00 00 00 	lea    rax,[rip+0x24]        # ffff80000080629a <done>
ffff800000806276:	49 89 82 6c 02 00 00 	mov    QWORD PTR [r10+0x26c],rax
ffff80000080627d:	41 8c a3 dc 02 00 00 	mov    WORD PTR [r11+0x2dc],fs
ffff800000806284:	8c ab e4 02 00 00    	mov    WORD PTR [rbx+0x2e4],gs
ffff80000080628a:	48 8b a1 9c 02 00 00 	mov    rsp,QWORD PTR [rcx+0x29c]
ffff800000806291:	41 ff b0 6c 02 00 00 	push   QWORD PTR [r8+0x26c]
ffff800000806298:	eb 08                	jmp    ffff8000008062a2 <__switch_to>

ffff80000080629a <done>:
ffff80000080629a:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:816
                 "nop":"=m"(from->regs.rsp),"=m"(from->regs.rip),
                 "=m"(from->regs.fs),"=m"(from->regs.gs):
                "m"(to->regs.fs),"m"(to->regs.gs),"m"(to->regs.rsp),"m"(to->regs.rip),
                "D"(from),"S"(to));

}
ffff80000080629b:	90                   	nop
ffff80000080629c:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
ffff8000008062a0:	c9                   	leave  
ffff8000008062a1:	c3                   	ret    

ffff8000008062a2 <__switch_to>:
__switch_to():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:817
void __switch_to(struct process *from, struct process *to) {
ffff8000008062a2:	f3 0f 1e fa          	endbr64 
ffff8000008062a6:	55                   	push   rbp
ffff8000008062a7:	48 89 e5             	mov    rbp,rsp
ffff8000008062aa:	41 57                	push   r15
ffff8000008062ac:	41 54                	push   r12
ffff8000008062ae:	53                   	push   rbx
ffff8000008062af:	48 83 ec 18          	sub    rsp,0x18
ffff8000008062b3:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008062b3 <__switch_to+0x11>
ffff8000008062ba:	49 bb 65 65 11 00 00 	movabs r11,0x116565
ffff8000008062c1:	00 00 00 
ffff8000008062c4:	4c 01 d8             	add    rax,r11
ffff8000008062c7:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff8000008062cb:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:818
    set_tss(to->tss.rsp0,to->tss.rsp1,to->tss.rsp2,to->tss.ists[0],to->tss.ists[1],
ffff8000008062cf:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff8000008062d3:	4c 8b 9a 4c 02 00 00 	mov    r11,QWORD PTR [rdx+0x24c]
ffff8000008062da:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff8000008062de:	4c 8b 92 44 02 00 00 	mov    r10,QWORD PTR [rdx+0x244]
ffff8000008062e5:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff8000008062e9:	4c 8b 8a 3c 02 00 00 	mov    r9,QWORD PTR [rdx+0x23c]
ffff8000008062f0:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff8000008062f4:	4c 8b 82 34 02 00 00 	mov    r8,QWORD PTR [rdx+0x234]
ffff8000008062fb:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff8000008062ff:	4c 8b a2 2c 02 00 00 	mov    r12,QWORD PTR [rdx+0x22c]
ffff800000806306:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000080630a:	48 8b 9a 24 02 00 00 	mov    rbx,QWORD PTR [rdx+0x224]
ffff800000806311:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000806315:	48 8b 8a 1c 02 00 00 	mov    rcx,QWORD PTR [rdx+0x21c]
ffff80000080631c:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000806320:	48 8b 92 0c 02 00 00 	mov    rdx,QWORD PTR [rdx+0x20c]
ffff800000806327:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff80000080632b:	48 8b b6 04 02 00 00 	mov    rsi,QWORD PTR [rsi+0x204]
ffff800000806332:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffff800000806336:	48 8b bf fc 01 00 00 	mov    rdi,QWORD PTR [rdi+0x1fc]
ffff80000080633d:	41 53                	push   r11
ffff80000080633f:	41 52                	push   r10
ffff800000806341:	41 51                	push   r9
ffff800000806343:	41 50                	push   r8
ffff800000806345:	4d 89 e1             	mov    r9,r12
ffff800000806348:	49 89 d8             	mov    r8,rbx
ffff80000080634b:	49 89 c7             	mov    r15,rax
ffff80000080634e:	49 ba 7f 9b ee ff ff 	movabs r10,0xffffffffffee9b7f
ffff800000806355:	ff ff ff 
ffff800000806358:	49 01 c2             	add    r10,rax
ffff80000080635b:	41 ff d2             	call   r10
ffff80000080635e:	48 83 c4 20          	add    rsp,0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:820
            to->tss.ists[2],to->tss.ists[3],to->tss.ists[4],to->tss.ists[5],to->tss.ists[6]);
    asm volatile("mov %%fs,%0\r\n"
ffff800000806362:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000806366:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff80000080636a:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080636e:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff800000806372:	8c a0 dc 02 00 00    	mov    WORD PTR [rax+0x2dc],fs
ffff800000806378:	8c ae e4 02 00 00    	mov    WORD PTR [rsi+0x2e4],gs
ffff80000080637e:	8e a2 dc 02 00 00    	mov    fs,WORD PTR [rdx+0x2dc]
ffff800000806384:	8e a9 e4 02 00 00    	mov    gs,WORD PTR [rcx+0x2e4]
ffff80000080638a:	fb                   	sti    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:826
                 "mov %%gs,%1\r\n"
                 "mov %2,%%fs\r\n"
                 "mov %3,%%gs\r\n"
                 "sti":"=m"(to->regs.fs),"=m"(to->regs.gs):
                 "m"(from->regs.fs),"m"(from->regs.gs));
}
ffff80000080638b:	90                   	nop
ffff80000080638c:	48 8d 65 e8          	lea    rsp,[rbp-0x18]
ffff800000806390:	5b                   	pop    rbx
ffff800000806391:	41 5c                	pop    r12
ffff800000806393:	41 5f                	pop    r15
ffff800000806395:	5d                   	pop    rbp
ffff800000806396:	c3                   	ret    

ffff800000806397 <set_tss>:
set_tss():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:828

void set_tss(u64 rsp0,u64 rsp1,u64 rsp2,u64 ist0,u64 ist1,u64 ist2,u64 ist3,u64 ist4,u64 ist5,u64 ist6){
ffff800000806397:	f3 0f 1e fa          	endbr64 
ffff80000080639b:	55                   	push   rbp
ffff80000080639c:	48 89 e5             	mov    rbp,rsp
ffff80000080639f:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080639f <set_tss+0x8>
ffff8000008063a6:	49 bb 79 64 11 00 00 	movabs r11,0x116479
ffff8000008063ad:	00 00 00 
ffff8000008063b0:	4c 01 d8             	add    rax,r11
ffff8000008063b3:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff8000008063b7:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff8000008063bb:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff8000008063bf:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
ffff8000008063c3:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
ffff8000008063c7:	4c 89 4d d0          	mov    QWORD PTR [rbp-0x30],r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:829
    tss->rsp0=rsp0;
ffff8000008063cb:	48 ba 30 fe ff ff ff 	movabs rdx,0xfffffffffffffe30
ffff8000008063d2:	ff ff ff 
ffff8000008063d5:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008063d9:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008063dc:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
ffff8000008063e0:	48 89 4a 04          	mov    QWORD PTR [rdx+0x4],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:830
    tss->rsp1=rsp1;
ffff8000008063e4:	48 ba 30 fe ff ff ff 	movabs rdx,0xfffffffffffffe30
ffff8000008063eb:	ff ff ff 
ffff8000008063ee:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008063f2:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008063f5:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff8000008063f9:	48 89 4a 0c          	mov    QWORD PTR [rdx+0xc],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:831
    tss->rsp2=rsp2;
ffff8000008063fd:	48 ba 30 fe ff ff ff 	movabs rdx,0xfffffffffffffe30
ffff800000806404:	ff ff ff 
ffff800000806407:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080640b:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080640e:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff800000806412:	48 89 4a 14          	mov    QWORD PTR [rdx+0x14],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:832
    tss->ists[0]=ist0;
ffff800000806416:	48 ba 30 fe ff ff ff 	movabs rdx,0xfffffffffffffe30
ffff80000080641d:	ff ff ff 
ffff800000806420:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806424:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000806427:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
ffff80000080642b:	48 89 4a 24          	mov    QWORD PTR [rdx+0x24],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:833
    tss->ists[1]=ist1;
ffff80000080642f:	48 ba 30 fe ff ff ff 	movabs rdx,0xfffffffffffffe30
ffff800000806436:	ff ff ff 
ffff800000806439:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080643d:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000806440:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff800000806444:	48 89 4a 2c          	mov    QWORD PTR [rdx+0x2c],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:834
    tss->ists[2]=ist2;
ffff800000806448:	48 ba 30 fe ff ff ff 	movabs rdx,0xfffffffffffffe30
ffff80000080644f:	ff ff ff 
ffff800000806452:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806456:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000806459:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffff80000080645d:	48 89 4a 34          	mov    QWORD PTR [rdx+0x34],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:835
    tss->ists[3]=ist3;
ffff800000806461:	48 ba 30 fe ff ff ff 	movabs rdx,0xfffffffffffffe30
ffff800000806468:	ff ff ff 
ffff80000080646b:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080646f:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000806472:	48 8b 4d 10          	mov    rcx,QWORD PTR [rbp+0x10]
ffff800000806476:	48 89 4a 3c          	mov    QWORD PTR [rdx+0x3c],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:836
    tss->ists[4]=ist4;
ffff80000080647a:	48 ba 30 fe ff ff ff 	movabs rdx,0xfffffffffffffe30
ffff800000806481:	ff ff ff 
ffff800000806484:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806488:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080648b:	48 8b 4d 18          	mov    rcx,QWORD PTR [rbp+0x18]
ffff80000080648f:	48 89 4a 44          	mov    QWORD PTR [rdx+0x44],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:837
    tss->ists[5]=ist5;
ffff800000806493:	48 ba 30 fe ff ff ff 	movabs rdx,0xfffffffffffffe30
ffff80000080649a:	ff ff ff 
ffff80000080649d:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008064a1:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008064a4:	48 8b 4d 20          	mov    rcx,QWORD PTR [rbp+0x20]
ffff8000008064a8:	48 89 4a 4c          	mov    QWORD PTR [rdx+0x4c],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:838
    tss->ists[6]=ist6;
ffff8000008064ac:	48 ba 30 fe ff ff ff 	movabs rdx,0xfffffffffffffe30
ffff8000008064b3:	ff ff ff 
ffff8000008064b6:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff8000008064ba:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008064bd:	48 8b 55 28          	mov    rdx,QWORD PTR [rbp+0x28]
ffff8000008064c1:	48 89 50 54          	mov    QWORD PTR [rax+0x54],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:839
}
ffff8000008064c5:	90                   	nop
ffff8000008064c6:	5d                   	pop    rbp
ffff8000008064c7:	c3                   	ret    

ffff8000008064c8 <fork_child_ret>:
fork_child_ret():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:841

int fork_child_ret(){
ffff8000008064c8:	f3 0f 1e fa          	endbr64 
ffff8000008064cc:	55                   	push   rbp
ffff8000008064cd:	48 89 e5             	mov    rbp,rsp
ffff8000008064d0:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008064d0 <fork_child_ret+0x8>
ffff8000008064d7:	49 bb 48 63 11 00 00 	movabs r11,0x116348
ffff8000008064de:	00 00 00 
ffff8000008064e1:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:842
    return 0;
ffff8000008064e4:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:844

}
ffff8000008064e9:	5d                   	pop    rbp
ffff8000008064ea:	c3                   	ret    

ffff8000008064eb <sys_fork>:
sys_fork():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:846

int sys_fork(void){
ffff8000008064eb:	f3 0f 1e fa          	endbr64 
ffff8000008064ef:	55                   	push   rbp
ffff8000008064f0:	48 89 e5             	mov    rbp,rsp
ffff8000008064f3:	41 57                	push   r15
ffff8000008064f5:	53                   	push   rbx
ffff8000008064f6:	48 81 ec 90 00 00 00 	sub    rsp,0x90
ffff8000008064fd:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008064fd <sys_fork+0x12>
ffff800000806504:	49 bb 1b 63 11 00 00 	movabs r11,0x11631b
ffff80000080650b:	00 00 00 
ffff80000080650e:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:847
    cli();
ffff800000806511:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:848
    int pid=req_proc();
ffff800000806512:	49 89 df             	mov    r15,rbx
ffff800000806515:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080651a:	48 ba 42 83 ee ff ff 	movabs rdx,0xffffffffffee8342
ffff800000806521:	ff ff ff 
ffff800000806524:	48 01 da             	add    rdx,rbx
ffff800000806527:	ff d2                	call   rdx
ffff800000806529:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:849
    int pids=task[pid].pid;
ffff80000080652c:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000806533:	ff ff ff 
ffff800000806536:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080653a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080653d:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806540:	48 98                	cdqe   
ffff800000806542:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000806549:	48 01 d0             	add    rax,rdx
ffff80000080654c:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080654e:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:850
    if(pid==-1)return -1;
ffff800000806551:	83 7d dc ff          	cmp    DWORD PTR [rbp-0x24],0xffffffff
ffff800000806555:	75 0a                	jne    ffff800000806561 <sys_fork+0x76>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:850 (discriminator 1)
ffff800000806557:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080655c:	e9 19 0a 00 00       	jmp    ffff800000806f7a <sys_fork+0xa8f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:852
    //首先完全复制
    task[pid]=*current;
ffff800000806561:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000806568:	ff ff ff 
ffff80000080656b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080656f:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000806572:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000806579:	ff ff ff 
ffff80000080657c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806580:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806583:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806586:	48 98                	cdqe   
ffff800000806588:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff80000080658f:	48 01 d0             	add    rax,rdx
ffff800000806592:	48 89 c2             	mov    rdx,rax
ffff800000806595:	48 89 c8             	mov    rax,rcx
ffff800000806598:	b9 54 03 00 00       	mov    ecx,0x354
ffff80000080659d:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff8000008065a0:	48 89 32             	mov    QWORD PTR [rdx],rsi
ffff8000008065a3:	89 ce                	mov    esi,ecx
ffff8000008065a5:	48 01 d6             	add    rsi,rdx
ffff8000008065a8:	48 8d 7e 08          	lea    rdi,[rsi+0x8]
ffff8000008065ac:	89 ce                	mov    esi,ecx
ffff8000008065ae:	48 01 c6             	add    rsi,rax
ffff8000008065b1:	48 83 c6 08          	add    rsi,0x8
ffff8000008065b5:	48 8b 76 f0          	mov    rsi,QWORD PTR [rsi-0x10]
ffff8000008065b9:	48 89 77 f0          	mov    QWORD PTR [rdi-0x10],rsi
ffff8000008065bd:	48 8d 7a 08          	lea    rdi,[rdx+0x8]
ffff8000008065c1:	48 83 e7 f8          	and    rdi,0xfffffffffffffff8
ffff8000008065c5:	48 29 fa             	sub    rdx,rdi
ffff8000008065c8:	48 29 d0             	sub    rax,rdx
ffff8000008065cb:	01 d1                	add    ecx,edx
ffff8000008065cd:	83 e1 f8             	and    ecx,0xfffffff8
ffff8000008065d0:	c1 e9 03             	shr    ecx,0x3
ffff8000008065d3:	89 ca                	mov    edx,ecx
ffff8000008065d5:	89 d2                	mov    edx,edx
ffff8000008065d7:	48 89 c6             	mov    rsi,rax
ffff8000008065da:	48 89 d1             	mov    rcx,rdx
ffff8000008065dd:	f3 48 a5             	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:853
    task[pid].pid=pids;
ffff8000008065e0:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff8000008065e7:	ff ff ff 
ffff8000008065ea:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008065ee:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008065f1:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008065f4:	48 98                	cdqe   
ffff8000008065f6:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff8000008065fd:	48 01 c2             	add    rdx,rax
ffff800000806600:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000806603:	89 02                	mov    DWORD PTR [rdx],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:854
    task[pid].stat=TASK_ZOMBIE;
ffff800000806605:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff80000080660c:	ff ff ff 
ffff80000080660f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806613:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806616:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806619:	48 98                	cdqe   
ffff80000080661b:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000806622:	48 01 d0             	add    rax,rdx
ffff800000806625:	c7 40 18 04 00 00 00 	mov    DWORD PTR [rax+0x18],0x4
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:861

//    asm volatile("mov %%r10,%0"::"m"(r->rip));
    // r->rip=current->regs.rip;

    // memcpy(&task[pid].tss,tss, sizeof(TSS));
    task[pid].parent_pid=current->pid;
ffff80000080662c:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000806633:	ff ff ff 
ffff800000806636:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080663a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080663d:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff800000806644:	ff ff ff 
ffff800000806647:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080664b:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080664e:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000806651:	48 63 d2             	movsxd rdx,edx
ffff800000806654:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff80000080665b:	48 01 ca             	add    rdx,rcx
ffff80000080665e:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000806660:	89 82 bc 00 00 00    	mov    DWORD PTR [rdx+0xbc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:863
    //设置父子关系以及初始化子进程的的list节点
    list_init(&task[pid].node);
ffff800000806666:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff80000080666d:	ff ff ff 
ffff800000806670:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806674:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806677:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080667a:	48 98                	cdqe   
ffff80000080667c:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000806683:	48 01 d0             	add    rax,rdx
ffff800000806686:	48 05 34 03 00 00    	add    rax,0x334
ffff80000080668c:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff800000806690:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000806694:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000080669b:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080669f:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff8000008066a6:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff8000008066a7:	90                   	nop
sys_fork():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:864
    task[pid].child_procs=NULL;
ffff8000008066a8:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff8000008066af:	ff ff ff 
ffff8000008066b2:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008066b6:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008066b9:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008066bc:	48 98                	cdqe   
ffff8000008066be:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff8000008066c5:	48 01 d0             	add    rax,rdx
ffff8000008066c8:	48 c7 80 4c 03 00 00 	mov    QWORD PTR [rax+0x34c],0x0
ffff8000008066cf:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:865
    task[pid].node.data=&task[pid];
ffff8000008066d3:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff8000008066da:	ff ff ff 
ffff8000008066dd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008066e1:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008066e4:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008066e7:	48 98                	cdqe   
ffff8000008066e9:	48 69 d0 54 03 00 00 	imul   rdx,rax,0x354
ffff8000008066f0:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff8000008066f7:	ff ff ff 
ffff8000008066fa:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008066fe:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff800000806701:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806704:	48 98                	cdqe   
ffff800000806706:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff80000080670d:	48 01 f0             	add    rax,rsi
ffff800000806710:	48 01 ca             	add    rdx,rcx
ffff800000806713:	48 89 90 3c 03 00 00 	mov    QWORD PTR [rax+0x33c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:866
    if(!current->child_procs)
ffff80000080671a:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000806721:	ff ff ff 
ffff800000806724:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806728:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080672b:	48 8b 80 4c 03 00 00 	mov    rax,QWORD PTR [rax+0x34c]
ffff800000806732:	48 85 c0             	test   rax,rax
ffff800000806735:	75 44                	jne    ffff80000080677b <sys_fork+0x290>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:867
        current->child_procs=&task[pid].node;
ffff800000806737:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff80000080673e:	ff ff ff 
ffff800000806741:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806745:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806748:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080674b:	48 98                	cdqe   
ffff80000080674d:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000806754:	48 01 c2             	add    rdx,rax
ffff800000806757:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff80000080675e:	ff ff ff 
ffff800000806761:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806765:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806768:	48 81 c2 34 03 00 00 	add    rdx,0x334
ffff80000080676f:	48 89 90 4c 03 00 00 	mov    QWORD PTR [rax+0x34c],rdx
ffff800000806776:	e9 71 01 00 00       	jmp    ffff8000008068ec <sys_fork+0x401>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:869
    else
        list_add(current->child_procs,&task[pid].node);
ffff80000080677b:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000806782:	ff ff ff 
ffff800000806785:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806789:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080678c:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080678f:	48 98                	cdqe   
ffff800000806791:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000806798:	48 01 d0             	add    rax,rdx
ffff80000080679b:	48 8d 90 34 03 00 00 	lea    rdx,[rax+0x334]
ffff8000008067a2:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff8000008067a9:	ff ff ff 
ffff8000008067ac:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008067b0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008067b3:	48 8b 80 4c 03 00 00 	mov    rax,QWORD PTR [rax+0x34c]
ffff8000008067ba:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
ffff8000008067be:	48 89 55 90          	mov    QWORD PTR [rbp-0x70],rdx
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:33
    if(entry->next==NULL)
ffff8000008067c2:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008067c6:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008067ca:	48 85 c0             	test   rax,rax
ffff8000008067cd:	75 50                	jne    ffff80000080681f <sys_fork+0x334>
ffff8000008067cf:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008067d3:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
ffff8000008067d7:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008067db:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff8000008067df:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff8000008067e3:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff8000008067e7:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff8000008067eb:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff8000008067ef:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff8000008067f3:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
ffff8000008067f7:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff8000008067fa:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff8000008067fe:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000806802:	48 85 c0             	test   rax,rax
ffff800000806805:	0f 84 da 00 00 00    	je     ffff8000008068e5 <sys_fork+0x3fa>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff80000080680b:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080680f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000806813:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
ffff800000806817:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff80000080681a:	e9 c6 00 00 00       	jmp    ffff8000008068e5 <sys_fork+0x3fa>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:36
        struct List* p=entry;
ffff80000080681f:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000806823:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff80000080682a:	eb 2e                	jmp    ffff80000080685a <sys_fork+0x36f>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:38
            if(p->data==new->data)
ffff80000080682c:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000806833:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff800000806837:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080683b:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080683f:	48 39 c2             	cmp    rdx,rax
ffff800000806842:	0f 84 a0 00 00 00    	je     ffff8000008068e8 <sys_fork+0x3fd>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff800000806848:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff80000080684f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000806853:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
ffff80000080685a:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000806861:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000806865:	48 85 c0             	test   rax,rax
ffff800000806868:	74 14                	je     ffff80000080687e <sys_fork+0x393>
ffff80000080686a:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000806871:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000806875:	48 39 85 78 ff ff ff 	cmp    QWORD PTR [rbp-0x88],rax
ffff80000080687c:	75 ae                	jne    ffff80000080682c <sys_fork+0x341>
ffff80000080687e:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000806885:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
ffff80000080688c:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000806890:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff800000806897:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080689e:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff8000008068a2:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff8000008068a9:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff8000008068ad:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff8000008068b4:	48 8b 95 70 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x90]
ffff8000008068bb:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff8000008068be:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff8000008068c5:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008068c9:	48 85 c0             	test   rax,rax
ffff8000008068cc:	74 1d                	je     ffff8000008068eb <sys_fork+0x400>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff8000008068ce:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff8000008068d5:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008068d9:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
ffff8000008068e0:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff8000008068e3:	eb 06                	jmp    ffff8000008068eb <sys_fork+0x400>
ffff8000008068e5:	90                   	nop
ffff8000008068e6:	eb 04                	jmp    ffff8000008068ec <sys_fork+0x401>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:39
                return;
ffff8000008068e8:	90                   	nop
ffff8000008068e9:	eb 01                	jmp    ffff8000008068ec <sys_fork+0x401>
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff8000008068eb:	90                   	nop
sys_fork():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:871

    task[pid].utime=0;
ffff8000008068ec:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff8000008068f3:	ff ff ff 
ffff8000008068f6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008068fa:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008068fd:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806900:	48 98                	cdqe   
ffff800000806902:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000806909:	48 01 d0             	add    rax,rdx
ffff80000080690c:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [rax+0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:874

    //复制父进程的内存映射到子进程，然后重新映射并复制子进程的堆栈和数据段
    copy_mmap(current,&task[pid]);
ffff800000806913:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff80000080691a:	ff ff ff 
ffff80000080691d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806921:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806924:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806927:	48 98                	cdqe   
ffff800000806929:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000806930:	48 01 c2             	add    rdx,rax
ffff800000806933:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff80000080693a:	ff ff ff 
ffff80000080693d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806941:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806944:	48 89 d6             	mov    rsi,rdx
ffff800000806947:	48 89 c7             	mov    rdi,rax
ffff80000080694a:	49 89 df             	mov    r15,rbx
ffff80000080694d:	48 b8 10 ab ee ff ff 	movabs rax,0xffffffffffeeab10
ffff800000806954:	ff ff ff 
ffff800000806957:	48 01 d8             	add    rax,rbx
ffff80000080695a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:879
    
    //复制完毕，开始更改堆栈
    //栈
    //首先获取物理内存，然后临时映射到一个地方，然后拷贝数据，再解除映射，再映射到目标进程的页表。
    addr_t stk=task[pid].mem_struct.stack_top-PAGE_4K_SIZE;
ffff80000080695c:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000806963:	ff ff ff 
ffff800000806966:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080696a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080696d:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806970:	48 98                	cdqe   
ffff800000806972:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000806979:	48 01 d0             	add    rax,rdx
ffff80000080697c:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000806980:	48 2d 00 10 00 00    	sub    rax,0x1000
ffff800000806986:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:880
    addr_t tmpla=KNL_BASE+0x80000000;
ffff80000080698a:	48 b8 00 00 00 80 00 	movabs rax,0xffff800080000000
ffff800000806991:	80 ff ff 
ffff800000806994:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:881
    for(;stk>=task[pid].mem_struct.stack_bottom;stk-=PAGE_4K_SIZE){
ffff800000806998:	e9 d1 00 00 00       	jmp    ffff800000806a6e <sys_fork+0x583>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:882 (discriminator 2)
        addr_t new_stkpg= pmalloc();
ffff80000080699d:	49 89 df             	mov    r15,rbx
ffff8000008069a0:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008069a5:	48 ba d6 63 ee ff ff 	movabs rdx,0xffffffffffee63d6
ffff8000008069ac:	ff ff ff 
ffff8000008069af:	48 01 da             	add    rdx,rbx
ffff8000008069b2:	ff d2                	call   rdx
ffff8000008069b4:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:883 (discriminator 2)
        smmap(new_stkpg,tmpla,PAGE_PRESENT|PAGE_RWX,current->pml4);
ffff8000008069b8:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff8000008069bf:	ff ff ff 
ffff8000008069c2:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008069c6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008069c9:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff8000008069d0:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff8000008069d4:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008069d8:	48 89 d1             	mov    rcx,rdx
ffff8000008069db:	ba 03 00 00 00       	mov    edx,0x3
ffff8000008069e0:	48 89 c7             	mov    rdi,rax
ffff8000008069e3:	49 89 df             	mov    r15,rbx
ffff8000008069e6:	48 b8 9c 52 ee ff ff 	movabs rax,0xffffffffffee529c
ffff8000008069ed:	ff ff ff 
ffff8000008069f0:	48 01 d8             	add    rax,rbx
ffff8000008069f3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:884 (discriminator 2)
        memcpy(tmpla,stk,PAGE_4K_SIZE);//把当前进程的栈空间复制到新栈里面
ffff8000008069f5:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff8000008069f9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008069fd:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000806a02:	48 89 ce             	mov    rsi,rcx
ffff800000806a05:	48 89 c7             	mov    rdi,rax
ffff800000806a08:	49 89 df             	mov    r15,rbx
ffff800000806a0b:	48 b8 bc 52 ef ff ff 	movabs rax,0xffffffffffef52bc
ffff800000806a12:	ff ff ff 
ffff800000806a15:	48 01 d8             	add    rax,rbx
ffff800000806a18:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:887 (discriminator 2)
        
        //把新的页面映射到进程页表里
        smmap(new_stkpg,stk,PAGE_PRESENT|PAGE_RWX|PAGE_FOR_ALL,task[pid].pml4);
ffff800000806a1a:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000806a21:	ff ff ff 
ffff800000806a24:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806a28:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806a2b:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806a2e:	48 98                	cdqe   
ffff800000806a30:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000806a37:	48 01 d0             	add    rax,rdx
ffff800000806a3a:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff800000806a41:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
ffff800000806a45:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000806a49:	48 89 d1             	mov    rcx,rdx
ffff800000806a4c:	ba 07 00 00 00       	mov    edx,0x7
ffff800000806a51:	48 89 c7             	mov    rdi,rax
ffff800000806a54:	49 89 df             	mov    r15,rbx
ffff800000806a57:	48 b8 9c 52 ee ff ff 	movabs rax,0xffffffffffee529c
ffff800000806a5e:	ff ff ff 
ffff800000806a61:	48 01 d8             	add    rax,rbx
ffff800000806a64:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:881 (discriminator 2)
    for(;stk>=task[pid].mem_struct.stack_bottom;stk-=PAGE_4K_SIZE){
ffff800000806a66:	48 81 6d e8 00 10 00 	sub    QWORD PTR [rbp-0x18],0x1000
ffff800000806a6d:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:881 (discriminator 1)
ffff800000806a6e:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000806a75:	ff ff ff 
ffff800000806a78:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806a7c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806a7f:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806a82:	48 98                	cdqe   
ffff800000806a84:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000806a8b:	48 01 d0             	add    rax,rdx
ffff800000806a8e:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff800000806a92:	48 39 45 e8          	cmp    QWORD PTR [rbp-0x18],rax
ffff800000806a96:	0f 83 01 ff ff ff    	jae    ffff80000080699d <sys_fork+0x4b2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:889
    }
    if(task[pid].mem_struct.stack_top<=task[pid].mem_struct.stack_bottom){
ffff800000806a9c:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000806aa3:	ff ff ff 
ffff800000806aa6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806aaa:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806aad:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806ab0:	48 98                	cdqe   
ffff800000806ab2:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000806ab9:	48 01 d0             	add    rax,rdx
ffff800000806abc:	48 8b 50 40          	mov    rdx,QWORD PTR [rax+0x40]
ffff800000806ac0:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000806ac7:	ff ff ff 
ffff800000806aca:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806ace:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000806ad1:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806ad4:	48 98                	cdqe   
ffff800000806ad6:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000806add:	48 01 c8             	add    rax,rcx
ffff800000806ae0:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff800000806ae4:	48 39 c2             	cmp    rdx,rax
ffff800000806ae7:	0f 87 bd 00 00 00    	ja     ffff800000806baa <sys_fork+0x6bf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:892
        //父进程没有栈空间（一般是不可能的，这个几乎就是为了内核进程fork而写）
        //开辟一页空栈。
        addr_t new_stkpg= (addr_t) pmalloc();
ffff800000806aed:	49 89 df             	mov    r15,rbx
ffff800000806af0:	b8 00 00 00 00       	mov    eax,0x0
ffff800000806af5:	48 ba d6 63 ee ff ff 	movabs rdx,0xffffffffffee63d6
ffff800000806afc:	ff ff ff 
ffff800000806aff:	48 01 da             	add    rdx,rbx
ffff800000806b02:	ff d2                	call   rdx
ffff800000806b04:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:893
        stk=task[pid].mem_struct.stack_top-PAGE_4K_SIZE;
ffff800000806b08:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000806b0f:	ff ff ff 
ffff800000806b12:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806b16:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806b19:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806b1c:	48 98                	cdqe   
ffff800000806b1e:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000806b25:	48 01 d0             	add    rax,rdx
ffff800000806b28:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000806b2c:	48 2d 00 10 00 00    	sub    rax,0x1000
ffff800000806b32:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:895
        //把新的页面映射到进程页表里
        smmap(new_stkpg,stk,PAGE_PRESENT|PAGE_RWX|PAGE_FOR_ALL,task[pid].pml4);
ffff800000806b36:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000806b3d:	ff ff ff 
ffff800000806b40:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806b44:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806b47:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806b4a:	48 98                	cdqe   
ffff800000806b4c:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000806b53:	48 01 d0             	add    rax,rdx
ffff800000806b56:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff800000806b5d:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
ffff800000806b61:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000806b65:	48 89 d1             	mov    rcx,rdx
ffff800000806b68:	ba 07 00 00 00       	mov    edx,0x7
ffff800000806b6d:	48 89 c7             	mov    rdi,rax
ffff800000806b70:	49 89 df             	mov    r15,rbx
ffff800000806b73:	48 b8 9c 52 ee ff ff 	movabs rax,0xffffffffffee529c
ffff800000806b7a:	ff ff ff 
ffff800000806b7d:	48 01 d8             	add    rax,rbx
ffff800000806b80:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:897
        //给新进程分配一页栈
        task[pid].mem_struct.stack_bottom=stk;
ffff800000806b82:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000806b89:	ff ff ff 
ffff800000806b8c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806b90:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806b93:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806b96:	48 98                	cdqe   
ffff800000806b98:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000806b9f:	48 01 c2             	add    rdx,rax
ffff800000806ba2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806ba6:	48 89 42 38          	mov    QWORD PTR [rdx+0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:903
        //给这页新的栈填上恢复上下文需要的内容
        
    }
    //中断使用的栈空间
    //ist一页就够
    addr_t new_stkpg= kmalloc();
ffff800000806baa:	49 89 df             	mov    r15,rbx
ffff800000806bad:	b8 00 00 00 00       	mov    eax,0x0
ffff800000806bb2:	48 ba 68 57 ee ff ff 	movabs rdx,0xffffffffffee5768
ffff800000806bb9:	ff ff ff 
ffff800000806bbc:	48 01 da             	add    rdx,rbx
ffff800000806bbf:	ff d2                	call   rdx
ffff800000806bc1:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:904
    memcpy(new_stkpg,current->tss.ists[0]-PAGE_4K_SIZE,PAGE_4K_SIZE);//把当前进程的栈空间复制到新栈里面
ffff800000806bc5:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000806bcc:	ff ff ff 
ffff800000806bcf:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806bd3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806bd6:	48 8b 80 1c 02 00 00 	mov    rax,QWORD PTR [rax+0x21c]
ffff800000806bdd:	48 2d 00 10 00 00    	sub    rax,0x1000
ffff800000806be3:	48 89 c1             	mov    rcx,rax
ffff800000806be6:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000806bea:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000806bef:	48 89 ce             	mov    rsi,rcx
ffff800000806bf2:	48 89 c7             	mov    rdi,rax
ffff800000806bf5:	49 89 df             	mov    r15,rbx
ffff800000806bf8:	48 b8 bc 52 ef ff ff 	movabs rax,0xffffffffffef52bc
ffff800000806bff:	ff ff ff 
ffff800000806c02:	48 01 d8             	add    rax,rbx
ffff800000806c05:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:905
    stack_store_regs* ctx_dup=new_stkpg+PAGE_4K_SIZE-sizeof(stack_store_regs);//拷贝的上下文
ffff800000806c07:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000806c0b:	48 05 58 0f 00 00    	add    rax,0xf58
ffff800000806c11:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:906
    ctx_dup->rax=0;//这样进程切换到子进程的done标签，从时钟中断返回弹出堆栈的时候rax弹出来的就是0，成为返回值。
ffff800000806c15:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000806c19:	48 c7 40 78 00 00 00 	mov    QWORD PTR [rax+0x78],0x0
ffff800000806c20:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:907
    task[pid].regs.rip=clock_ret;
ffff800000806c21:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000806c28:	ff ff ff 
ffff800000806c2b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806c2f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806c32:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806c35:	48 98                	cdqe   
ffff800000806c37:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000806c3e:	48 01 d0             	add    rax,rdx
ffff800000806c41:	48 ba c8 ff ff ff ff 	movabs rdx,0xffffffffffffffc8
ffff800000806c48:	ff ff ff 
ffff800000806c4b:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000806c4f:	48 89 90 6c 02 00 00 	mov    QWORD PTR [rax+0x26c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:908
    task[pid].regs.rsp=ctx_dup;
ffff800000806c56:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000806c5d:	ff ff ff 
ffff800000806c60:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806c64:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806c67:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806c6a:	48 98                	cdqe   
ffff800000806c6c:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000806c73:	48 01 c2             	add    rdx,rax
ffff800000806c76:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000806c7a:	48 89 82 9c 02 00 00 	mov    QWORD PTR [rdx+0x29c],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:909
    task[pid].tss.ists[0]=new_stkpg+PAGE_4K_SIZE;
ffff800000806c81:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000806c88:	ff ff ff 
ffff800000806c8b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806c8f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806c92:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806c95:	48 98                	cdqe   
ffff800000806c97:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000806c9e:	48 01 d0             	add    rax,rdx
ffff800000806ca1:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000806ca5:	48 81 c2 00 10 00 00 	add    rdx,0x1000
ffff800000806cac:	48 89 90 1c 02 00 00 	mov    QWORD PTR [rax+0x21c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:910
    task[pid].tss.ists[1]=new_stkpg+PAGE_4K_SIZE;
ffff800000806cb3:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000806cba:	ff ff ff 
ffff800000806cbd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806cc1:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806cc4:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806cc7:	48 98                	cdqe   
ffff800000806cc9:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000806cd0:	48 01 d0             	add    rax,rdx
ffff800000806cd3:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000806cd7:	48 81 c2 00 10 00 00 	add    rdx,0x1000
ffff800000806cde:	48 89 90 24 02 00 00 	mov    QWORD PTR [rax+0x224],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:911
    task[pid].tss.ists[2]=new_stkpg+PAGE_4K_SIZE;
ffff800000806ce5:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000806cec:	ff ff ff 
ffff800000806cef:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806cf3:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806cf6:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806cf9:	48 98                	cdqe   
ffff800000806cfb:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000806d02:	48 01 d0             	add    rax,rdx
ffff800000806d05:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000806d09:	48 81 c2 00 10 00 00 	add    rdx,0x1000
ffff800000806d10:	48 89 90 2c 02 00 00 	mov    QWORD PTR [rax+0x22c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:912
    task[pid].tss.ists[3]=new_stkpg+PAGE_4K_SIZE;
ffff800000806d17:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000806d1e:	ff ff ff 
ffff800000806d21:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806d25:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806d28:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806d2b:	48 98                	cdqe   
ffff800000806d2d:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000806d34:	48 01 d0             	add    rax,rdx
ffff800000806d37:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000806d3b:	48 81 c2 00 10 00 00 	add    rdx,0x1000
ffff800000806d42:	48 89 90 34 02 00 00 	mov    QWORD PTR [rax+0x234],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:913
    task[pid].tss.ists[4]=new_stkpg+PAGE_4K_SIZE;
ffff800000806d49:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000806d50:	ff ff ff 
ffff800000806d53:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806d57:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806d5a:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806d5d:	48 98                	cdqe   
ffff800000806d5f:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000806d66:	48 01 d0             	add    rax,rdx
ffff800000806d69:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000806d6d:	48 81 c2 00 10 00 00 	add    rdx,0x1000
ffff800000806d74:	48 89 90 3c 02 00 00 	mov    QWORD PTR [rax+0x23c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:914
    task[pid].tss.ists[5]=new_stkpg+PAGE_4K_SIZE;
ffff800000806d7b:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000806d82:	ff ff ff 
ffff800000806d85:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806d89:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806d8c:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806d8f:	48 98                	cdqe   
ffff800000806d91:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000806d98:	48 01 d0             	add    rax,rdx
ffff800000806d9b:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000806d9f:	48 81 c2 00 10 00 00 	add    rdx,0x1000
ffff800000806da6:	48 89 90 44 02 00 00 	mov    QWORD PTR [rax+0x244],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:915
    task[pid].tss.ists[6]=new_stkpg+PAGE_4K_SIZE;
ffff800000806dad:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000806db4:	ff ff ff 
ffff800000806db7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806dbb:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806dbe:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806dc1:	48 98                	cdqe   
ffff800000806dc3:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000806dca:	48 01 d0             	add    rax,rdx
ffff800000806dcd:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000806dd1:	48 81 c2 00 10 00 00 	add    rdx,0x1000
ffff800000806dd8:	48 89 90 4c 02 00 00 	mov    QWORD PTR [rax+0x24c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:918

    //堆
    addr_t hp=task[pid].mem_struct.heap_top-PAGE_4K_SIZE;
ffff800000806ddf:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000806de6:	ff ff ff 
ffff800000806de9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806ded:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806df0:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806df3:	48 98                	cdqe   
ffff800000806df5:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000806dfc:	48 01 d0             	add    rax,rdx
ffff800000806dff:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff800000806e03:	48 2d 00 10 00 00    	sub    rax,0x1000
ffff800000806e09:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:919
    for(;hp>=task[pid].mem_struct.heap_base;hp-=PAGE_4K_SIZE){
ffff800000806e0d:	e9 d1 00 00 00       	jmp    ffff800000806ee3 <sys_fork+0x9f8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:920 (discriminator 2)
        addr_t new_hppg= pmalloc();
ffff800000806e12:	49 89 df             	mov    r15,rbx
ffff800000806e15:	b8 00 00 00 00       	mov    eax,0x0
ffff800000806e1a:	48 ba d6 63 ee ff ff 	movabs rdx,0xffffffffffee63d6
ffff800000806e21:	ff ff ff 
ffff800000806e24:	48 01 da             	add    rdx,rbx
ffff800000806e27:	ff d2                	call   rdx
ffff800000806e29:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:921 (discriminator 2)
        smmap(new_hppg,tmpla,PAGE_PRESENT|PAGE_RWX,current->pml4);
ffff800000806e2d:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000806e34:	ff ff ff 
ffff800000806e37:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806e3b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806e3e:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff800000806e45:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff800000806e49:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000806e4d:	48 89 d1             	mov    rcx,rdx
ffff800000806e50:	ba 03 00 00 00       	mov    edx,0x3
ffff800000806e55:	48 89 c7             	mov    rdi,rax
ffff800000806e58:	49 89 df             	mov    r15,rbx
ffff800000806e5b:	48 b8 9c 52 ee ff ff 	movabs rax,0xffffffffffee529c
ffff800000806e62:	ff ff ff 
ffff800000806e65:	48 01 d8             	add    rax,rbx
ffff800000806e68:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:922 (discriminator 2)
        memcpy(tmpla,hp,PAGE_4K_SIZE);//把当前进程的栈空间复制到新栈里面
ffff800000806e6a:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
ffff800000806e6e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000806e72:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000806e77:	48 89 ce             	mov    rsi,rcx
ffff800000806e7a:	48 89 c7             	mov    rdi,rax
ffff800000806e7d:	49 89 df             	mov    r15,rbx
ffff800000806e80:	48 b8 bc 52 ef ff ff 	movabs rax,0xffffffffffef52bc
ffff800000806e87:	ff ff ff 
ffff800000806e8a:	48 01 d8             	add    rax,rbx
ffff800000806e8d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:924 (discriminator 2)
        //把新的页面映射到进程页表里
        smmap(new_hppg,hp,PAGE_PRESENT|PAGE_RWX|PAGE_FOR_ALL,task[pid].pml4);
ffff800000806e8f:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000806e96:	ff ff ff 
ffff800000806e99:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806e9d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806ea0:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806ea3:	48 98                	cdqe   
ffff800000806ea5:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000806eac:	48 01 d0             	add    rax,rdx
ffff800000806eaf:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff800000806eb6:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff800000806eba:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000806ebe:	48 89 d1             	mov    rcx,rdx
ffff800000806ec1:	ba 07 00 00 00       	mov    edx,0x7
ffff800000806ec6:	48 89 c7             	mov    rdi,rax
ffff800000806ec9:	49 89 df             	mov    r15,rbx
ffff800000806ecc:	48 b8 9c 52 ee ff ff 	movabs rax,0xffffffffffee529c
ffff800000806ed3:	ff ff ff 
ffff800000806ed6:	48 01 d8             	add    rax,rbx
ffff800000806ed9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:919 (discriminator 2)
    for(;hp>=task[pid].mem_struct.heap_base;hp-=PAGE_4K_SIZE){
ffff800000806edb:	48 81 6d e0 00 10 00 	sub    QWORD PTR [rbp-0x20],0x1000
ffff800000806ee2:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:919 (discriminator 1)
ffff800000806ee3:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000806eea:	ff ff ff 
ffff800000806eed:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806ef1:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806ef4:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806ef7:	48 98                	cdqe   
ffff800000806ef9:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000806f00:	48 01 d0             	add    rax,rdx
ffff800000806f03:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff800000806f07:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
ffff800000806f0b:	0f 83 01 ff ff ff    	jae    ffff800000806e12 <sys_fork+0x927>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:926
    }
    smmap(0,tmpla,0,current->pml4);//解除映射
ffff800000806f11:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000806f18:	ff ff ff 
ffff800000806f1b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806f1f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806f22:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff800000806f29:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000806f2d:	48 89 d1             	mov    rcx,rdx
ffff800000806f30:	ba 00 00 00 00       	mov    edx,0x0
ffff800000806f35:	48 89 c6             	mov    rsi,rax
ffff800000806f38:	bf 00 00 00 00       	mov    edi,0x0
ffff800000806f3d:	49 89 df             	mov    r15,rbx
ffff800000806f40:	48 b8 9c 52 ee ff ff 	movabs rax,0xffffffffffee529c
ffff800000806f47:	ff ff ff 
ffff800000806f4a:	48 01 d8             	add    rax,rbx
ffff800000806f4d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:927
    task[pid].stat=TASK_READY;
ffff800000806f4f:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000806f56:	ff ff ff 
ffff800000806f59:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806f5d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806f60:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806f63:	48 98                	cdqe   
ffff800000806f65:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000806f6c:	48 01 d0             	add    rax,rdx
ffff800000806f6f:	c7 40 18 02 00 00 00 	mov    DWORD PTR [rax+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:930
    

    sti();
ffff800000806f76:	fb                   	sti    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:933
    //如果父进程没有堆，不开辟。留给load_xx函数。
    //父进程运行到这里
    return pid;
ffff800000806f77:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:934
}
ffff800000806f7a:	48 81 c4 90 00 00 00 	add    rsp,0x90
ffff800000806f81:	5b                   	pop    rbx
ffff800000806f82:	41 5f                	pop    r15
ffff800000806f84:	5d                   	pop    rbp
ffff800000806f85:	c3                   	ret    

ffff800000806f86 <release_mmap>:
release_mmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:936
//释放进程页表映射的内存，内核空间除外。
void release_mmap(struct process* p){
ffff800000806f86:	f3 0f 1e fa          	endbr64 
ffff800000806f8a:	55                   	push   rbp
ffff800000806f8b:	48 89 e5             	mov    rbp,rsp
ffff800000806f8e:	41 57                	push   r15
ffff800000806f90:	53                   	push   rbx
ffff800000806f91:	48 83 ec 50          	sub    rsp,0x50
ffff800000806f95:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000806f95 <release_mmap+0xf>
ffff800000806f9c:	49 bb 83 58 11 00 00 	movabs r11,0x115883
ffff800000806fa3:	00 00 00 
ffff800000806fa6:	4c 01 db             	add    rbx,r11
ffff800000806fa9:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:937
    page_item * pml4p=p->pml4;
ffff800000806fad:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000806fb1:	48 8b 80 e0 00 00 00 	mov    rax,QWORD PTR [rax+0xe0]
ffff800000806fb8:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:939
    //复制pdpt
    page_item *pml4e= pml4p;
ffff800000806fbc:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000806fc0:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:940
    for(int i=0;i<256;i++)//高地址不释放（内核空间）
ffff800000806fc4:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000806fcb:	e9 40 03 00 00       	jmp    ffff800000807310 <release_mmap+0x38a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:942
    {
        if(pml4e[i]&PAGE_PRESENT){
ffff800000806fd0:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000806fd3:	48 98                	cdqe   
ffff800000806fd5:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000806fdc:	00 
ffff800000806fdd:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000806fe1:	48 01 d0             	add    rax,rdx
ffff800000806fe4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806fe7:	83 e0 01             	and    eax,0x1
ffff800000806fea:	48 85 c0             	test   rax,rax
ffff800000806fed:	0f 84 19 03 00 00    	je     ffff80000080730c <release_mmap+0x386>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:943
            page_item *pdpte=pml4e[i]&PAGE_4K_MASK|KNL_BASE;
ffff800000806ff3:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000806ff6:	48 98                	cdqe   
ffff800000806ff8:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000806fff:	00 
ffff800000807000:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000807004:	48 01 d0             	add    rax,rdx
ffff800000807007:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080700a:	48 ba 00 f0 ff ff ff 	movabs rdx,0x7ffffffff000
ffff800000807011:	7f 00 00 
ffff800000807014:	48 21 c2             	and    rdx,rax
ffff800000807017:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff80000080701e:	80 ff ff 
ffff800000807021:	48 09 d0             	or     rax,rdx
ffff800000807024:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:944
            for(int j=0;j<512;j++)
ffff800000807028:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff80000080702f:	e9 85 02 00 00       	jmp    ffff8000008072b9 <release_mmap+0x333>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:946
            {
                if(pdpte[j]&PAGE_PRESENT&&!(pdpte[j]&PDPTE_1GB)){
ffff800000807034:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000807037:	48 98                	cdqe   
ffff800000807039:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807040:	00 
ffff800000807041:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000807045:	48 01 d0             	add    rax,rdx
ffff800000807048:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080704b:	83 e0 01             	and    eax,0x1
ffff80000080704e:	48 85 c0             	test   rax,rax
ffff800000807051:	0f 84 5e 02 00 00    	je     ffff8000008072b5 <release_mmap+0x32f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:946 (discriminator 1)
ffff800000807057:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080705a:	48 98                	cdqe   
ffff80000080705c:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807063:	00 
ffff800000807064:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000807068:	48 01 d0             	add    rax,rdx
ffff80000080706b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080706e:	25 80 00 00 00       	and    eax,0x80
ffff800000807073:	48 85 c0             	test   rax,rax
ffff800000807076:	0f 85 39 02 00 00    	jne    ffff8000008072b5 <release_mmap+0x32f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:947
                    page_item *pde=pdpte[j]&PAGE_4K_MASK|KNL_BASE;
ffff80000080707c:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080707f:	48 98                	cdqe   
ffff800000807081:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807088:	00 
ffff800000807089:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080708d:	48 01 d0             	add    rax,rdx
ffff800000807090:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807093:	48 ba 00 f0 ff ff ff 	movabs rdx,0x7ffffffff000
ffff80000080709a:	7f 00 00 
ffff80000080709d:	48 21 c2             	and    rdx,rax
ffff8000008070a0:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff8000008070a7:	80 ff ff 
ffff8000008070aa:	48 09 d0             	or     rax,rdx
ffff8000008070ad:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:948
                    for(int k=0;k<512;k++)
ffff8000008070b1:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff8000008070b8:	e9 a5 01 00 00       	jmp    ffff800000807262 <release_mmap+0x2dc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:950
                    {
                        if(pde[k]&PAGE_PRESENT&&!(pde[k] & PDE_2MB)){
ffff8000008070bd:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008070c0:	48 98                	cdqe   
ffff8000008070c2:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008070c9:	00 
ffff8000008070ca:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008070ce:	48 01 d0             	add    rax,rdx
ffff8000008070d1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008070d4:	83 e0 01             	and    eax,0x1
ffff8000008070d7:	48 85 c0             	test   rax,rax
ffff8000008070da:	0f 84 09 01 00 00    	je     ffff8000008071e9 <release_mmap+0x263>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:950 (discriminator 1)
ffff8000008070e0:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008070e3:	48 98                	cdqe   
ffff8000008070e5:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008070ec:	00 
ffff8000008070ed:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008070f1:	48 01 d0             	add    rax,rdx
ffff8000008070f4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008070f7:	25 80 00 00 00       	and    eax,0x80
ffff8000008070fc:	48 85 c0             	test   rax,rax
ffff8000008070ff:	0f 85 e4 00 00 00    	jne    ffff8000008071e9 <release_mmap+0x263>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:951
                            page_item *pte=pde[k]&PAGE_4K_MASK|KNL_BASE;
ffff800000807105:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000807108:	48 98                	cdqe   
ffff80000080710a:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807111:	00 
ffff800000807112:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000807116:	48 01 d0             	add    rax,rdx
ffff800000807119:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080711c:	48 ba 00 f0 ff ff ff 	movabs rdx,0x7ffffffff000
ffff800000807123:	7f 00 00 
ffff800000807126:	48 21 c2             	and    rdx,rax
ffff800000807129:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff800000807130:	80 ff ff 
ffff800000807133:	48 09 d0             	or     rax,rdx
ffff800000807136:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:952
                            for(int l=0;l<512;l++){
ffff80000080713a:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff800000807141:	eb 55                	jmp    ffff800000807198 <release_mmap+0x212>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:953
                                if(pte[l]&PAGE_PRESENT){
ffff800000807143:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000807146:	48 98                	cdqe   
ffff800000807148:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080714f:	00 
ffff800000807150:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000807154:	48 01 d0             	add    rax,rdx
ffff800000807157:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080715a:	83 e0 01             	and    eax,0x1
ffff80000080715d:	48 85 c0             	test   rax,rax
ffff800000807160:	74 32                	je     ffff800000807194 <release_mmap+0x20e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:956
                                    //释放申请的物理内存
                                    //TODO:这里有一个问题：目前fork时候堆栈空间使用的是vmalloc内存，这样的话free_page是释放不了的。
                                    free_page(pte[l]&PAGE_4K_MASK);
ffff800000807162:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000807165:	48 98                	cdqe   
ffff800000807167:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080716e:	00 
ffff80000080716f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000807173:	48 01 d0             	add    rax,rdx
ffff800000807176:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807179:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
ffff80000080717f:	48 89 c7             	mov    rdi,rax
ffff800000807182:	49 89 df             	mov    r15,rbx
ffff800000807185:	48 b8 66 64 ee ff ff 	movabs rax,0xffffffffffee6466
ffff80000080718c:	ff ff ff 
ffff80000080718f:	48 01 d8             	add    rax,rbx
ffff800000807192:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:952 (discriminator 2)
                            for(int l=0;l<512;l++){
ffff800000807194:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:952 (discriminator 1)
ffff800000807198:	81 7d e0 ff 01 00 00 	cmp    DWORD PTR [rbp-0x20],0x1ff
ffff80000080719f:	7e a2                	jle    ffff800000807143 <release_mmap+0x1bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:960
                                }
                            }
                            //里面的项释放完了，这一项指向的vmalloc内存可以释放了
                            kmfree(pde[k] & PAGE_4K_MASK|KNL_BASE);
ffff8000008071a1:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008071a4:	48 98                	cdqe   
ffff8000008071a6:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008071ad:	00 
ffff8000008071ae:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008071b2:	48 01 d0             	add    rax,rdx
ffff8000008071b5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008071b8:	48 ba 00 f0 ff ff ff 	movabs rdx,0x7ffffffff000
ffff8000008071bf:	7f 00 00 
ffff8000008071c2:	48 21 c2             	and    rdx,rax
ffff8000008071c5:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff8000008071cc:	80 ff ff 
ffff8000008071cf:	48 09 d0             	or     rax,rdx
ffff8000008071d2:	48 89 c7             	mov    rdi,rax
ffff8000008071d5:	49 89 df             	mov    r15,rbx
ffff8000008071d8:	48 b8 d7 5a ee ff ff 	movabs rax,0xffffffffffee5ad7
ffff8000008071df:	ff ff ff 
ffff8000008071e2:	48 01 d8             	add    rax,rbx
ffff8000008071e5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:950
                        if(pde[k]&PAGE_PRESENT&&!(pde[k] & PDE_2MB)){
ffff8000008071e7:	eb 75                	jmp    ffff80000080725e <release_mmap+0x2d8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:961
                        }else if((pde[k]&PAGE_PRESENT)&&(pde[k] & PDE_2MB)){
ffff8000008071e9:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008071ec:	48 98                	cdqe   
ffff8000008071ee:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008071f5:	00 
ffff8000008071f6:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008071fa:	48 01 d0             	add    rax,rdx
ffff8000008071fd:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807200:	83 e0 01             	and    eax,0x1
ffff800000807203:	48 85 c0             	test   rax,rax
ffff800000807206:	74 56                	je     ffff80000080725e <release_mmap+0x2d8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:961 (discriminator 1)
ffff800000807208:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080720b:	48 98                	cdqe   
ffff80000080720d:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807214:	00 
ffff800000807215:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000807219:	48 01 d0             	add    rax,rdx
ffff80000080721c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080721f:	25 80 00 00 00       	and    eax,0x80
ffff800000807224:	48 85 c0             	test   rax,rax
ffff800000807227:	74 35                	je     ffff80000080725e <release_mmap+0x2d8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:963
                            //释放2MB页
                            free_pages_at(pde[k]&PAGE_4K_MASK,512);
ffff800000807229:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080722c:	48 98                	cdqe   
ffff80000080722e:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807235:	00 
ffff800000807236:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080723a:	48 01 d0             	add    rax,rdx
ffff80000080723d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807240:	25 00 f0 ff ff       	and    eax,0xfffff000
ffff800000807245:	be 00 02 00 00       	mov    esi,0x200
ffff80000080724a:	89 c7                	mov    edi,eax
ffff80000080724c:	49 89 df             	mov    r15,rbx
ffff80000080724f:	48 b8 18 65 ee ff ff 	movabs rax,0xffffffffffee6518
ffff800000807256:	ff ff ff 
ffff800000807259:	48 01 d8             	add    rax,rbx
ffff80000080725c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:948 (discriminator 2)
                    for(int k=0;k<512;k++)
ffff80000080725e:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:948 (discriminator 1)
ffff800000807262:	81 7d e4 ff 01 00 00 	cmp    DWORD PTR [rbp-0x1c],0x1ff
ffff800000807269:	0f 8e 4e fe ff ff    	jle    ffff8000008070bd <release_mmap+0x137>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:967
                        }
                    }
                    //这一页pde的内容释放完了，这一项指向的vmalloc可以释放了
                    kmfree(pdpte[j] & PAGE_4K_MASK|KNL_BASE);
ffff80000080726f:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000807272:	48 98                	cdqe   
ffff800000807274:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080727b:	00 
ffff80000080727c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000807280:	48 01 d0             	add    rax,rdx
ffff800000807283:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807286:	48 ba 00 f0 ff ff ff 	movabs rdx,0x7ffffffff000
ffff80000080728d:	7f 00 00 
ffff800000807290:	48 21 c2             	and    rdx,rax
ffff800000807293:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff80000080729a:	80 ff ff 
ffff80000080729d:	48 09 d0             	or     rax,rdx
ffff8000008072a0:	48 89 c7             	mov    rdi,rax
ffff8000008072a3:	49 89 df             	mov    r15,rbx
ffff8000008072a6:	48 b8 d7 5a ee ff ff 	movabs rax,0xffffffffffee5ad7
ffff8000008072ad:	ff ff ff 
ffff8000008072b0:	48 01 d8             	add    rax,rbx
ffff8000008072b3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:944 (discriminator 2)
            for(int j=0;j<512;j++)
ffff8000008072b5:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:944 (discriminator 1)
ffff8000008072b9:	81 7d e8 ff 01 00 00 	cmp    DWORD PTR [rbp-0x18],0x1ff
ffff8000008072c0:	0f 8e 6e fd ff ff    	jle    ffff800000807034 <release_mmap+0xae>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:972
                }//1GB先不写，目前还没有初始化之后动态申请1GB页的

            }
            //这一页pdpte的内容释放完了，这一项指向的vmalloc可以释放了
            kmfree(pml4e[i] & PAGE_4K_MASK|KNL_BASE);
ffff8000008072c6:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008072c9:	48 98                	cdqe   
ffff8000008072cb:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008072d2:	00 
ffff8000008072d3:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008072d7:	48 01 d0             	add    rax,rdx
ffff8000008072da:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008072dd:	48 ba 00 f0 ff ff ff 	movabs rdx,0x7ffffffff000
ffff8000008072e4:	7f 00 00 
ffff8000008072e7:	48 21 c2             	and    rdx,rax
ffff8000008072ea:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff8000008072f1:	80 ff ff 
ffff8000008072f4:	48 09 d0             	or     rax,rdx
ffff8000008072f7:	48 89 c7             	mov    rdi,rax
ffff8000008072fa:	49 89 df             	mov    r15,rbx
ffff8000008072fd:	48 b8 d7 5a ee ff ff 	movabs rax,0xffffffffffee5ad7
ffff800000807304:	ff ff ff 
ffff800000807307:	48 01 d8             	add    rax,rbx
ffff80000080730a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:940 (discriminator 2)
    for(int i=0;i<256;i++)//高地址不释放（内核空间）
ffff80000080730c:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:940 (discriminator 1)
ffff800000807310:	81 7d ec ff 00 00 00 	cmp    DWORD PTR [rbp-0x14],0xff
ffff800000807317:	0f 8e b3 fc ff ff    	jle    ffff800000806fd0 <release_mmap+0x4a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:975
        }
    }
}
ffff80000080731d:	90                   	nop
ffff80000080731e:	90                   	nop
ffff80000080731f:	48 83 c4 50          	add    rsp,0x50
ffff800000807323:	5b                   	pop    rbx
ffff800000807324:	41 5f                	pop    r15
ffff800000807326:	5d                   	pop    rbp
ffff800000807327:	c3                   	ret    

ffff800000807328 <copy_mmap>:
copy_mmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:976
void copy_mmap(struct process* from, struct process *to){
ffff800000807328:	f3 0f 1e fa          	endbr64 
ffff80000080732c:	55                   	push   rbp
ffff80000080732d:	48 89 e5             	mov    rbp,rsp
ffff800000807330:	41 57                	push   r15
ffff800000807332:	53                   	push   rbx
ffff800000807333:	48 83 ec 70          	sub    rsp,0x70
ffff800000807337:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000807337 <copy_mmap+0xf>
ffff80000080733e:	49 bb e1 54 11 00 00 	movabs r11,0x1154e1
ffff800000807345:	00 00 00 
ffff800000807348:	4c 01 db             	add    rbx,r11
ffff80000080734b:	48 89 7d 88          	mov    QWORD PTR [rbp-0x78],rdi
ffff80000080734f:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:977
    page_item * pml4p= kmalloc();
ffff800000807353:	49 89 df             	mov    r15,rbx
ffff800000807356:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080735b:	48 ba 68 57 ee ff ff 	movabs rdx,0xffffffffffee5768
ffff800000807362:	ff ff ff 
ffff800000807365:	48 01 da             	add    rdx,rbx
ffff800000807368:	ff d2                	call   rdx
ffff80000080736a:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:978
    memcpy(pml4p, (unsigned char *) from->pml4, PAGE_4K_SIZE);//复制pml4
ffff80000080736e:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000807372:	48 8b 88 e0 00 00 00 	mov    rcx,QWORD PTR [rax+0xe0]
ffff800000807379:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080737d:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000807382:	48 89 ce             	mov    rsi,rcx
ffff800000807385:	48 89 c7             	mov    rdi,rax
ffff800000807388:	49 89 df             	mov    r15,rbx
ffff80000080738b:	48 b8 bc 52 ef ff ff 	movabs rax,0xffffffffffef52bc
ffff800000807392:	ff ff ff 
ffff800000807395:	48 01 d8             	add    rax,rbx
ffff800000807398:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:979
    to->regs.cr3=(unsigned long)pml4p&~KNL_BASE;
ffff80000080739a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080739e:	48 ba ff ff ff ff ff 	movabs rdx,0x7fffffffffff
ffff8000008073a5:	7f 00 00 
ffff8000008073a8:	48 21 c2             	and    rdx,rax
ffff8000008073ab:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff8000008073af:	48 89 90 64 02 00 00 	mov    QWORD PTR [rax+0x264],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:980
    to->pml4=pml4p;
ffff8000008073b6:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff8000008073ba:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff8000008073be:	48 89 90 e0 00 00 00 	mov    QWORD PTR [rax+0xe0],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:983
    //复制pdpt

    page_item *pml4e= pml4p;
ffff8000008073c5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008073c9:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:984
    for(int i=0;i<512;i++)
ffff8000008073cd:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff8000008073d4:	e9 0e 03 00 00       	jmp    ffff8000008076e7 <copy_mmap+0x3bf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:986
    {
        if((pml4e[i]&PAGE_PRESENT)==0)
ffff8000008073d9:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008073dc:	48 98                	cdqe   
ffff8000008073de:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008073e5:	00 
ffff8000008073e6:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008073ea:	48 01 d0             	add    rax,rdx
ffff8000008073ed:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008073f0:	83 e0 01             	and    eax,0x1
ffff8000008073f3:	48 85 c0             	test   rax,rax
ffff8000008073f6:	0f 84 e6 02 00 00    	je     ffff8000008076e2 <copy_mmap+0x3ba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:988
            continue;
        addr_t old_data=pml4e[i];//旧的数据，里面保存了属性和要拷贝的数据的地址
ffff8000008073fc:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008073ff:	48 98                	cdqe   
ffff800000807401:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807408:	00 
ffff800000807409:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080740d:	48 01 d0             	add    rax,rdx
ffff800000807410:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807413:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:989
        addr_t m4=kmalloc();
ffff800000807417:	49 89 df             	mov    r15,rbx
ffff80000080741a:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080741f:	48 ba 68 57 ee ff ff 	movabs rdx,0xffffffffffee5768
ffff800000807426:	ff ff ff 
ffff800000807429:	48 01 da             	add    rdx,rbx
ffff80000080742c:	ff d2                	call   rdx
ffff80000080742e:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:990
        pml4e[i]= (m4&~KNL_BASE) | (old_data & ~PAGE_4K_MASK);
ffff800000807432:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffff
ffff800000807439:	7f 00 00 
ffff80000080743c:	48 23 45 c0          	and    rax,QWORD PTR [rbp-0x40]
ffff800000807440:	48 89 c2             	mov    rdx,rax
ffff800000807443:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000807447:	25 ff 0f 00 00       	and    eax,0xfff
ffff80000080744c:	48 89 c1             	mov    rcx,rax
ffff80000080744f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000807452:	48 98                	cdqe   
ffff800000807454:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
ffff80000080745b:	00 
ffff80000080745c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000807460:	48 01 f0             	add    rax,rsi
ffff800000807463:	48 09 ca             	or     rdx,rcx
ffff800000807466:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:991
        memcpy((unsigned char *) m4, old_data & PAGE_4K_MASK | KNL_BASE, PAGE_4K_SIZE);//把老的数据拷贝到新的页面里
ffff800000807469:	48 b8 00 f0 ff ff ff 	movabs rax,0x7ffffffff000
ffff800000807470:	7f 00 00 
ffff800000807473:	48 23 45 c8          	and    rax,QWORD PTR [rbp-0x38]
ffff800000807477:	48 ba 00 00 00 00 00 	movabs rdx,0xffff800000000000
ffff80000080747e:	80 ff ff 
ffff800000807481:	48 09 d0             	or     rax,rdx
ffff800000807484:	48 89 c1             	mov    rcx,rax
ffff800000807487:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080748b:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000807490:	48 89 ce             	mov    rsi,rcx
ffff800000807493:	48 89 c7             	mov    rdi,rax
ffff800000807496:	49 89 df             	mov    r15,rbx
ffff800000807499:	48 b8 bc 52 ef ff ff 	movabs rax,0xffffffffffef52bc
ffff8000008074a0:	ff ff ff 
ffff8000008074a3:	48 01 d8             	add    rax,rbx
ffff8000008074a6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:992
        page_item *pdpte= (page_item *) m4;
ffff8000008074a8:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008074ac:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:993
        for(int j=0;j<512;j++)
ffff8000008074b0:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff8000008074b7:	e9 17 02 00 00       	jmp    ffff8000008076d3 <copy_mmap+0x3ab>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:995
        {
            if((pdpte[j]&PAGE_PRESENT)==0||(pdpte[j]&PDPTE_1GB)!=0)
ffff8000008074bc:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff8000008074bf:	48 98                	cdqe   
ffff8000008074c1:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008074c8:	00 
ffff8000008074c9:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008074cd:	48 01 d0             	add    rax,rdx
ffff8000008074d0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008074d3:	83 e0 01             	and    eax,0x1
ffff8000008074d6:	48 85 c0             	test   rax,rax
ffff8000008074d9:	0f 84 ef 01 00 00    	je     ffff8000008076ce <copy_mmap+0x3a6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:995 (discriminator 2)
ffff8000008074df:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff8000008074e2:	48 98                	cdqe   
ffff8000008074e4:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008074eb:	00 
ffff8000008074ec:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008074f0:	48 01 d0             	add    rax,rdx
ffff8000008074f3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008074f6:	25 80 00 00 00       	and    eax,0x80
ffff8000008074fb:	48 85 c0             	test   rax,rax
ffff8000008074fe:	0f 85 ca 01 00 00    	jne    ffff8000008076ce <copy_mmap+0x3a6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:997
                continue;
            addr_t old_data2=pdpte[j];//旧的数据，里面保存了属性和要拷贝的数据的地址
ffff800000807504:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000807507:	48 98                	cdqe   
ffff800000807509:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807510:	00 
ffff800000807511:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000807515:	48 01 d0             	add    rax,rdx
ffff800000807518:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080751b:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:998
            addr_t m3=kmalloc();
ffff80000080751f:	49 89 df             	mov    r15,rbx
ffff800000807522:	b8 00 00 00 00       	mov    eax,0x0
ffff800000807527:	48 ba 68 57 ee ff ff 	movabs rdx,0xffffffffffee5768
ffff80000080752e:	ff ff ff 
ffff800000807531:	48 01 da             	add    rdx,rbx
ffff800000807534:	ff d2                	call   rdx
ffff800000807536:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:999
            pdpte[j]= (m3&~KNL_BASE) | (old_data2 & ~PAGE_4K_MASK);
ffff80000080753a:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffff
ffff800000807541:	7f 00 00 
ffff800000807544:	48 23 45 a8          	and    rax,QWORD PTR [rbp-0x58]
ffff800000807548:	48 89 c2             	mov    rdx,rax
ffff80000080754b:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080754f:	25 ff 0f 00 00       	and    eax,0xfff
ffff800000807554:	48 89 c1             	mov    rcx,rax
ffff800000807557:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080755a:	48 98                	cdqe   
ffff80000080755c:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
ffff800000807563:	00 
ffff800000807564:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000807568:	48 01 f0             	add    rax,rsi
ffff80000080756b:	48 09 ca             	or     rdx,rcx
ffff80000080756e:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1000
            memcpy((unsigned char *) m3, old_data2 & PAGE_4K_MASK | KNL_BASE, PAGE_4K_SIZE);//把老的数据拷贝到新的页面里
ffff800000807571:	48 b8 00 f0 ff ff ff 	movabs rax,0x7ffffffff000
ffff800000807578:	7f 00 00 
ffff80000080757b:	48 23 45 b0          	and    rax,QWORD PTR [rbp-0x50]
ffff80000080757f:	48 ba 00 00 00 00 00 	movabs rdx,0xffff800000000000
ffff800000807586:	80 ff ff 
ffff800000807589:	48 09 d0             	or     rax,rdx
ffff80000080758c:	48 89 c1             	mov    rcx,rax
ffff80000080758f:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000807593:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000807598:	48 89 ce             	mov    rsi,rcx
ffff80000080759b:	48 89 c7             	mov    rdi,rax
ffff80000080759e:	49 89 df             	mov    r15,rbx
ffff8000008075a1:	48 b8 bc 52 ef ff ff 	movabs rax,0xffffffffffef52bc
ffff8000008075a8:	ff ff ff 
ffff8000008075ab:	48 01 d8             	add    rax,rbx
ffff8000008075ae:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1001
            page_item *pde= (page_item *) m3;
ffff8000008075b0:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008075b4:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1002
            for(int k=0;k<512;k++)
ffff8000008075b8:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff8000008075bf:	e9 fb 00 00 00       	jmp    ffff8000008076bf <copy_mmap+0x397>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1004
            {
                if((pde[j]&PAGE_PRESENT)==0||(pde[j]&PDE_2MB)!=0)
ffff8000008075c4:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff8000008075c7:	48 98                	cdqe   
ffff8000008075c9:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008075d0:	00 
ffff8000008075d1:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff8000008075d5:	48 01 d0             	add    rax,rdx
ffff8000008075d8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008075db:	83 e0 01             	and    eax,0x1
ffff8000008075de:	48 85 c0             	test   rax,rax
ffff8000008075e1:	0f 84 d3 00 00 00    	je     ffff8000008076ba <copy_mmap+0x392>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1004 (discriminator 2)
ffff8000008075e7:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff8000008075ea:	48 98                	cdqe   
ffff8000008075ec:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008075f3:	00 
ffff8000008075f4:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff8000008075f8:	48 01 d0             	add    rax,rdx
ffff8000008075fb:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008075fe:	25 80 00 00 00       	and    eax,0x80
ffff800000807603:	48 85 c0             	test   rax,rax
ffff800000807606:	0f 85 ae 00 00 00    	jne    ffff8000008076ba <copy_mmap+0x392>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1006
                    continue;
                addr_t old_data3=pde[k];//旧的数据，里面保存了属性和要拷贝的数据的地址
ffff80000080760c:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080760f:	48 98                	cdqe   
ffff800000807611:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807618:	00 
ffff800000807619:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080761d:	48 01 d0             	add    rax,rdx
ffff800000807620:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807623:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1007
                addr_t m2=kmalloc();
ffff800000807627:	49 89 df             	mov    r15,rbx
ffff80000080762a:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080762f:	48 ba 68 57 ee ff ff 	movabs rdx,0xffffffffffee5768
ffff800000807636:	ff ff ff 
ffff800000807639:	48 01 da             	add    rdx,rbx
ffff80000080763c:	ff d2                	call   rdx
ffff80000080763e:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1008
                pde[k]= (m2&~KNL_BASE) | (old_data3 & ~PAGE_4K_MASK);
ffff800000807642:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffff
ffff800000807649:	7f 00 00 
ffff80000080764c:	48 23 45 90          	and    rax,QWORD PTR [rbp-0x70]
ffff800000807650:	48 89 c2             	mov    rdx,rax
ffff800000807653:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000807657:	25 ff 0f 00 00       	and    eax,0xfff
ffff80000080765c:	48 89 c1             	mov    rcx,rax
ffff80000080765f:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000807662:	48 98                	cdqe   
ffff800000807664:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
ffff80000080766b:	00 
ffff80000080766c:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000807670:	48 01 f0             	add    rax,rsi
ffff800000807673:	48 09 ca             	or     rdx,rcx
ffff800000807676:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1009
                memcpy((unsigned char *) m2, old_data3 & PAGE_4K_MASK | KNL_BASE, PAGE_4K_SIZE);//把老的数据拷贝到新的页面里
ffff800000807679:	48 b8 00 f0 ff ff ff 	movabs rax,0x7ffffffff000
ffff800000807680:	7f 00 00 
ffff800000807683:	48 23 45 98          	and    rax,QWORD PTR [rbp-0x68]
ffff800000807687:	48 ba 00 00 00 00 00 	movabs rdx,0xffff800000000000
ffff80000080768e:	80 ff ff 
ffff800000807691:	48 09 d0             	or     rax,rdx
ffff800000807694:	48 89 c1             	mov    rcx,rax
ffff800000807697:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080769b:	ba 00 10 00 00       	mov    edx,0x1000
ffff8000008076a0:	48 89 ce             	mov    rsi,rcx
ffff8000008076a3:	48 89 c7             	mov    rdi,rax
ffff8000008076a6:	49 89 df             	mov    r15,rbx
ffff8000008076a9:	48 b8 bc 52 ef ff ff 	movabs rax,0xffffffffffef52bc
ffff8000008076b0:	ff ff ff 
ffff8000008076b3:	48 01 d8             	add    rax,rbx
ffff8000008076b6:	ff d0                	call   rax
ffff8000008076b8:	eb 01                	jmp    ffff8000008076bb <copy_mmap+0x393>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1005
                    continue;
ffff8000008076ba:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1002 (discriminator 2)
            for(int k=0;k<512;k++)
ffff8000008076bb:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1002 (discriminator 1)
ffff8000008076bf:	81 7d e4 ff 01 00 00 	cmp    DWORD PTR [rbp-0x1c],0x1ff
ffff8000008076c6:	0f 8e f8 fe ff ff    	jle    ffff8000008075c4 <copy_mmap+0x29c>
ffff8000008076cc:	eb 01                	jmp    ffff8000008076cf <copy_mmap+0x3a7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:996
                continue;
ffff8000008076ce:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:993 (discriminator 2)
        for(int j=0;j<512;j++)
ffff8000008076cf:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:993 (discriminator 1)
ffff8000008076d3:	81 7d e8 ff 01 00 00 	cmp    DWORD PTR [rbp-0x18],0x1ff
ffff8000008076da:	0f 8e dc fd ff ff    	jle    ffff8000008074bc <copy_mmap+0x194>
ffff8000008076e0:	eb 01                	jmp    ffff8000008076e3 <copy_mmap+0x3bb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:987
            continue;
ffff8000008076e2:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:984 (discriminator 2)
    for(int i=0;i<512;i++)
ffff8000008076e3:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:984 (discriminator 1)
ffff8000008076e7:	81 7d ec ff 01 00 00 	cmp    DWORD PTR [rbp-0x14],0x1ff
ffff8000008076ee:	0f 8e e5 fc ff ff    	jle    ffff8000008073d9 <copy_mmap+0xb1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1016
            }

        }

    }
}
ffff8000008076f4:	90                   	nop
ffff8000008076f5:	90                   	nop
ffff8000008076f6:	48 83 c4 70          	add    rsp,0x70
ffff8000008076fa:	5b                   	pop    rbx
ffff8000008076fb:	41 5f                	pop    r15
ffff8000008076fd:	5d                   	pop    rbp
ffff8000008076fe:	c3                   	ret    

ffff8000008076ff <sys_getpgrp>:
sys_getpgrp():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1018

pid_t sys_getpgrp(void){
ffff8000008076ff:	f3 0f 1e fa          	endbr64 
ffff800000807703:	55                   	push   rbp
ffff800000807704:	48 89 e5             	mov    rbp,rsp
ffff800000807707:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807707 <sys_getpgrp+0x8>
ffff80000080770e:	49 bb 11 51 11 00 00 	movabs r11,0x115111
ffff800000807715:	00 00 00 
ffff800000807718:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1019
    return current->gpid;
ffff80000080771b:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff800000807722:	ff ff ff 
ffff800000807725:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000807729:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080772c:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1020
}
ffff80000080772f:	5d                   	pop    rbp
ffff800000807730:	c3                   	ret    

ffff800000807731 <sys_getpgid>:
sys_getpgid():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1022

int sys_getpgid(pid_t pid,gid_t gid){
ffff800000807731:	f3 0f 1e fa          	endbr64 
ffff800000807735:	55                   	push   rbp
ffff800000807736:	48 89 e5             	mov    rbp,rsp
ffff800000807739:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807739 <sys_getpgid+0x8>
ffff800000807740:	49 bb df 50 11 00 00 	movabs r11,0x1150df
ffff800000807747:	00 00 00 
ffff80000080774a:	4c 01 d8             	add    rax,r11
ffff80000080774d:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff800000807750:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1023
    if(pid==0)
ffff800000807753:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff800000807757:	75 16                	jne    ffff80000080776f <sys_getpgid+0x3e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1024
        return current->gpid;
ffff800000807759:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff800000807760:	ff ff ff 
ffff800000807763:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000807767:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080776a:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff80000080776d:	eb 67                	jmp    ffff8000008077d6 <sys_getpgid+0xa5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1025
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff80000080776f:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000807776:	eb 53                	jmp    ffff8000008077cb <sys_getpgid+0x9a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1026
        if(task[i].pid==pid)
ffff800000807778:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff80000080777f:	ff ff ff 
ffff800000807782:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807786:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000807789:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080778c:	48 63 d2             	movsxd rdx,edx
ffff80000080778f:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff800000807796:	48 01 ca             	add    rdx,rcx
ffff800000807799:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff80000080779b:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080779e:	39 d1                	cmp    ecx,edx
ffff8000008077a0:	75 25                	jne    ffff8000008077c7 <sys_getpgid+0x96>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1027
            return task[i].gpid;
ffff8000008077a2:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff8000008077a9:	ff ff ff 
ffff8000008077ac:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff8000008077b0:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008077b3:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008077b6:	48 98                	cdqe   
ffff8000008077b8:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff8000008077bf:	48 01 d0             	add    rax,rdx
ffff8000008077c2:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff8000008077c5:	eb 0f                	jmp    ffff8000008077d6 <sys_getpgid+0xa5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1025 (discriminator 2)
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff8000008077c7:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1025 (discriminator 1)
ffff8000008077cb:	83 7d fc 1f          	cmp    DWORD PTR [rbp-0x4],0x1f
ffff8000008077cf:	7e a7                	jle    ffff800000807778 <sys_getpgid+0x47>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1029
    }
    return -1;
ffff8000008077d1:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1030
}
ffff8000008077d6:	5d                   	pop    rbp
ffff8000008077d7:	c3                   	ret    

ffff8000008077d8 <sys_setpgid>:
sys_setpgid():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1031
int sys_setpgid(pid_t pid,gid_t gid){
ffff8000008077d8:	f3 0f 1e fa          	endbr64 
ffff8000008077dc:	55                   	push   rbp
ffff8000008077dd:	48 89 e5             	mov    rbp,rsp
ffff8000008077e0:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008077e0 <sys_setpgid+0x8>
ffff8000008077e7:	49 bb 38 50 11 00 00 	movabs r11,0x115038
ffff8000008077ee:	00 00 00 
ffff8000008077f1:	4c 01 d8             	add    rax,r11
ffff8000008077f4:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff8000008077f7:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1032
    if(pid==0)
ffff8000008077fa:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff8000008077fe:	75 56                	jne    ffff800000807856 <sys_setpgid+0x7e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1034
    {
        if(current->sid==current->pid)
ffff800000807800:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff800000807807:	ff ff ff 
ffff80000080780a:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080780e:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000807811:	8b 4a 08             	mov    ecx,DWORD PTR [rdx+0x8]
ffff800000807814:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff80000080781b:	ff ff ff 
ffff80000080781e:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807822:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000807825:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000807827:	39 d1                	cmp    ecx,edx
ffff800000807829:	75 0a                	jne    ffff800000807835 <sys_setpgid+0x5d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1035
            return -1;
ffff80000080782b:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000807830:	e9 e9 00 00 00       	jmp    ffff80000080791e <sys_setpgid+0x146>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1036
        current->gpid=gid;
ffff800000807835:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff80000080783c:	ff ff ff 
ffff80000080783f:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000807843:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807846:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000807849:	89 50 04             	mov    DWORD PTR [rax+0x4],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1037
        return 0;
ffff80000080784c:	b8 00 00 00 00       	mov    eax,0x0
ffff800000807851:	e9 c8 00 00 00       	jmp    ffff80000080791e <sys_setpgid+0x146>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1039
    }
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000807856:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff80000080785d:	e9 ad 00 00 00       	jmp    ffff80000080790f <sys_setpgid+0x137>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1040
        if(task[i].pid==pid)
ffff800000807862:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff800000807869:	ff ff ff 
ffff80000080786c:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807870:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000807873:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000807876:	48 63 d2             	movsxd rdx,edx
ffff800000807879:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff800000807880:	48 01 ca             	add    rdx,rcx
ffff800000807883:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff800000807885:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000807888:	39 d1                	cmp    ecx,edx
ffff80000080788a:	75 7f                	jne    ffff80000080790b <sys_setpgid+0x133>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1042
        {
            if(task[i].sid==task[i].pid)
ffff80000080788c:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff800000807893:	ff ff ff 
ffff800000807896:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080789a:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080789d:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff8000008078a0:	48 63 d2             	movsxd rdx,edx
ffff8000008078a3:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff8000008078aa:	48 01 ca             	add    rdx,rcx
ffff8000008078ad:	8b 4a 08             	mov    ecx,DWORD PTR [rdx+0x8]
ffff8000008078b0:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff8000008078b7:	ff ff ff 
ffff8000008078ba:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008078be:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff8000008078c1:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff8000008078c4:	48 63 d2             	movsxd rdx,edx
ffff8000008078c7:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff8000008078ce:	48 01 f2             	add    rdx,rsi
ffff8000008078d1:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff8000008078d3:	39 d1                	cmp    ecx,edx
ffff8000008078d5:	75 07                	jne    ffff8000008078de <sys_setpgid+0x106>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1043
                return -1;
ffff8000008078d7:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff8000008078dc:	eb 40                	jmp    ffff80000080791e <sys_setpgid+0x146>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1044
            task[i].gpid=gid;
ffff8000008078de:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff8000008078e5:	ff ff ff 
ffff8000008078e8:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff8000008078ec:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008078ef:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008078f2:	48 98                	cdqe   
ffff8000008078f4:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff8000008078fb:	48 01 c2             	add    rdx,rax
ffff8000008078fe:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000807901:	89 42 04             	mov    DWORD PTR [rdx+0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1045
            return 0;
ffff800000807904:	b8 00 00 00 00       	mov    eax,0x0
ffff800000807909:	eb 13                	jmp    ffff80000080791e <sys_setpgid+0x146>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1039 (discriminator 2)
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff80000080790b:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1039 (discriminator 1)
ffff80000080790f:	83 7d fc 1f          	cmp    DWORD PTR [rbp-0x4],0x1f
ffff800000807913:	0f 8e 49 ff ff ff    	jle    ffff800000807862 <sys_setpgid+0x8a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1048
        }
    }
    return -1;
ffff800000807919:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1049
}
ffff80000080791e:	5d                   	pop    rbp
ffff80000080791f:	c3                   	ret    

ffff800000807920 <sys_setsid>:
sys_setsid():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1051

pid_t sys_setsid(void){
ffff800000807920:	f3 0f 1e fa          	endbr64 
ffff800000807924:	55                   	push   rbp
ffff800000807925:	48 89 e5             	mov    rbp,rsp
ffff800000807928:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807928 <sys_setsid+0x8>
ffff80000080792f:	49 bb f0 4e 11 00 00 	movabs r11,0x114ef0
ffff800000807936:	00 00 00 
ffff800000807939:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1052
    current->sid=current->pid;
ffff80000080793c:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff800000807943:	ff ff ff 
ffff800000807946:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080794a:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080794d:	48 b9 a8 fe ff ff ff 	movabs rcx,0xfffffffffffffea8
ffff800000807954:	ff ff ff 
ffff800000807957:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff80000080795b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080795e:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000807960:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1053
}
ffff800000807963:	90                   	nop
ffff800000807964:	5d                   	pop    rbp
ffff800000807965:	c3                   	ret    

ffff800000807966 <sys_getsid>:
sys_getsid():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1054
pid_t sys_getsid(pid_t pid){
ffff800000807966:	f3 0f 1e fa          	endbr64 
ffff80000080796a:	55                   	push   rbp
ffff80000080796b:	48 89 e5             	mov    rbp,rsp
ffff80000080796e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080796e <sys_getsid+0x8>
ffff800000807975:	49 bb aa 4e 11 00 00 	movabs r11,0x114eaa
ffff80000080797c:	00 00 00 
ffff80000080797f:	4c 01 d8             	add    rax,r11
ffff800000807982:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1055
    if(pid==0)
ffff800000807985:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff800000807989:	75 16                	jne    ffff8000008079a1 <sys_getsid+0x3b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1056
        return current->sid;
ffff80000080798b:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff800000807992:	ff ff ff 
ffff800000807995:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000807999:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080799c:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080799f:	eb 67                	jmp    ffff800000807a08 <sys_getsid+0xa2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1057
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff8000008079a1:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff8000008079a8:	eb 53                	jmp    ffff8000008079fd <sys_getsid+0x97>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1058
        if(task[i].pid==pid)
ffff8000008079aa:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff8000008079b1:	ff ff ff 
ffff8000008079b4:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008079b8:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008079bb:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff8000008079be:	48 63 d2             	movsxd rdx,edx
ffff8000008079c1:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff8000008079c8:	48 01 ca             	add    rdx,rcx
ffff8000008079cb:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff8000008079cd:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff8000008079d0:	39 d1                	cmp    ecx,edx
ffff8000008079d2:	75 25                	jne    ffff8000008079f9 <sys_getsid+0x93>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1059
            return task[i].sid;
ffff8000008079d4:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff8000008079db:	ff ff ff 
ffff8000008079de:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff8000008079e2:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008079e5:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008079e8:	48 98                	cdqe   
ffff8000008079ea:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff8000008079f1:	48 01 d0             	add    rax,rdx
ffff8000008079f4:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff8000008079f7:	eb 0f                	jmp    ffff800000807a08 <sys_getsid+0xa2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1057 (discriminator 2)
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff8000008079f9:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1057 (discriminator 1)
ffff8000008079fd:	83 7d fc 1f          	cmp    DWORD PTR [rbp-0x4],0x1f
ffff800000807a01:	7e a7                	jle    ffff8000008079aa <sys_getsid+0x44>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1061
    }
    return -1;
ffff800000807a03:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1062
}
ffff800000807a08:	5d                   	pop    rbp
ffff800000807a09:	c3                   	ret    

ffff800000807a0a <sys_tcsetpgrp>:
sys_tcsetpgrp():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1063
int sys_tcsetpgrp(int fildes,pid_t pgid_id){
ffff800000807a0a:	f3 0f 1e fa          	endbr64 
ffff800000807a0e:	55                   	push   rbp
ffff800000807a0f:	48 89 e5             	mov    rbp,rsp
ffff800000807a12:	41 57                	push   r15
ffff800000807a14:	53                   	push   rbx
ffff800000807a15:	48 83 ec 20          	sub    rsp,0x20
ffff800000807a19:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000807a19 <sys_tcsetpgrp+0xf>
ffff800000807a20:	49 bb ff 4d 11 00 00 	movabs r11,0x114dff
ffff800000807a27:	00 00 00 
ffff800000807a2a:	4c 01 db             	add    rbx,r11
ffff800000807a2d:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff800000807a30:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1065
    //当前controlling terminal断联
    sys_ioctl(fildes,TTY_DISCONNECT,0);
ffff800000807a33:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000807a36:	ba 00 00 00 00       	mov    edx,0x0
ffff800000807a3b:	be 02 00 00 00       	mov    esi,0x2
ffff800000807a40:	89 c7                	mov    edi,eax
ffff800000807a42:	49 89 df             	mov    r15,rbx
ffff800000807a45:	48 b8 0b b4 ee ff ff 	movabs rax,0xffffffffffeeb40b
ffff800000807a4c:	ff ff ff 
ffff800000807a4f:	48 01 d8             	add    rax,rbx
ffff800000807a52:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1066
    int sid= sys_getsid(0);//获取session id
ffff800000807a54:	bf 00 00 00 00       	mov    edi,0x0
ffff800000807a59:	49 89 df             	mov    r15,rbx
ffff800000807a5c:	48 b8 4e b1 ee ff ff 	movabs rax,0xffffffffffeeb14e
ffff800000807a63:	ff ff ff 
ffff800000807a66:	48 01 d8             	add    rax,rbx
ffff800000807a69:	ff d0                	call   rax
ffff800000807a6b:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1067
    struct process* new_fgl=NULL;
ffff800000807a6e:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff800000807a75:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1068
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000807a76:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff800000807a7d:	e9 fb 00 00 00       	jmp    ffff800000807b7d <sys_tcsetpgrp+0x173>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1069
        if(task[i].stat == TASK_ZOMBIE||task[i].stat == TASK_EMPTY)continue;
ffff800000807a82:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000807a89:	ff ff ff 
ffff800000807a8c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807a90:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807a93:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000807a96:	48 98                	cdqe   
ffff800000807a98:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000807a9f:	48 01 d0             	add    rax,rdx
ffff800000807aa2:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff800000807aa5:	83 f8 04             	cmp    eax,0x4
ffff800000807aa8:	0f 84 ca 00 00 00    	je     ffff800000807b78 <sys_tcsetpgrp+0x16e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1069 (discriminator 2)
ffff800000807aae:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000807ab5:	ff ff ff 
ffff800000807ab8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807abc:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807abf:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000807ac2:	48 98                	cdqe   
ffff800000807ac4:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000807acb:	48 01 d0             	add    rax,rdx
ffff800000807ace:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff800000807ad1:	85 c0                	test   eax,eax
ffff800000807ad3:	0f 84 9f 00 00 00    	je     ffff800000807b78 <sys_tcsetpgrp+0x16e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1070
        if(task[i].sid==sid){
ffff800000807ad9:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000807ae0:	ff ff ff 
ffff800000807ae3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807ae7:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807aea:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000807aed:	48 98                	cdqe   
ffff800000807aef:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000807af6:	48 01 d0             	add    rax,rdx
ffff800000807af9:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffff800000807afc:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000807aff:	39 c2                	cmp    edx,eax
ffff800000807b01:	75 76                	jne    ffff800000807b79 <sys_tcsetpgrp+0x16f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1071
            task[i].fg_pgid=pgid_id;
ffff800000807b03:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000807b0a:	ff ff ff 
ffff800000807b0d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807b11:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807b14:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000807b17:	48 98                	cdqe   
ffff800000807b19:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000807b20:	48 01 c2             	add    rdx,rax
ffff800000807b23:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000807b26:	89 42 0c             	mov    DWORD PTR [rdx+0xc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1072
            if(task[i].pid==pgid_id){
ffff800000807b29:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000807b30:	ff ff ff 
ffff800000807b33:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807b37:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807b3a:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000807b3d:	48 98                	cdqe   
ffff800000807b3f:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000807b46:	48 01 d0             	add    rax,rdx
ffff800000807b49:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000807b4b:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000807b4e:	39 c2                	cmp    edx,eax
ffff800000807b50:	75 27                	jne    ffff800000807b79 <sys_tcsetpgrp+0x16f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1074
                //这是新前台进程组的leader
                new_fgl=&task[i];
ffff800000807b52:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000807b59:	ff ff ff 
ffff800000807b5c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807b60:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807b63:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000807b66:	48 98                	cdqe   
ffff800000807b68:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000807b6f:	48 01 d0             	add    rax,rdx
ffff800000807b72:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff800000807b76:	eb 01                	jmp    ffff800000807b79 <sys_tcsetpgrp+0x16f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1069
        if(task[i].stat == TASK_ZOMBIE||task[i].stat == TASK_EMPTY)continue;
ffff800000807b78:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1068 (discriminator 2)
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000807b79:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1068 (discriminator 1)
ffff800000807b7d:	83 7d e4 1f          	cmp    DWORD PTR [rbp-0x1c],0x1f
ffff800000807b81:	0f 8e fb fe ff ff    	jle    ffff800000807a82 <sys_tcsetpgrp+0x78>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1079
            }
        }
    }
    //新leader把tty连接
    new_fgl->openf[new_fgl->tty_fd]->f_ops->ioctl(new_fgl->openf[fildes]->dentry->dir_inode,new_fgl->openf[fildes]\
ffff800000807b87:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000807b8b:	8b 50 14             	mov    edx,DWORD PTR [rax+0x14]
ffff800000807b8e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000807b92:	48 63 d2             	movsxd rdx,edx
ffff800000807b95:	48 83 c2 1e          	add    rdx,0x1e
ffff800000807b99:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff800000807b9e:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000807ba2:	4c 8b 40 28          	mov    r8,QWORD PTR [rax+0x28]
ffff800000807ba6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000807baa:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000807bad:	48 63 d2             	movsxd rdx,edx
ffff800000807bb0:	48 83 c2 1e          	add    rdx,0x1e
ffff800000807bb4:	48 8b 74 d0 08       	mov    rsi,QWORD PTR [rax+rdx*8+0x8]
ffff800000807bb9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000807bbd:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000807bc0:	48 63 d2             	movsxd rdx,edx
ffff800000807bc3:	48 83 c2 1e          	add    rdx,0x1e
ffff800000807bc7:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff800000807bcc:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000807bd0:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000807bd4:	b9 00 00 00 00       	mov    ecx,0x0
ffff800000807bd9:	ba 01 00 00 00       	mov    edx,0x1
ffff800000807bde:	48 89 c7             	mov    rdi,rax
ffff800000807be1:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1081
    ,TTY_CONNECT,0);
}
ffff800000807be4:	90                   	nop
ffff800000807be5:	48 83 c4 20          	add    rsp,0x20
ffff800000807be9:	5b                   	pop    rbx
ffff800000807bea:	41 5f                	pop    r15
ffff800000807bec:	5d                   	pop    rbp
ffff800000807bed:	c3                   	ret    

ffff800000807bee <sys_tcgetpgrp>:
sys_tcgetpgrp():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1082
pid_t sys_tcgetpgrp(int fildes){
ffff800000807bee:	f3 0f 1e fa          	endbr64 
ffff800000807bf2:	55                   	push   rbp
ffff800000807bf3:	48 89 e5             	mov    rbp,rsp
ffff800000807bf6:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807bf6 <sys_tcgetpgrp+0x8>
ffff800000807bfd:	49 bb 22 4c 11 00 00 	movabs r11,0x114c22
ffff800000807c04:	00 00 00 
ffff800000807c07:	4c 01 d8             	add    rax,r11
ffff800000807c0a:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1083
    return current->fg_pgid;
ffff800000807c0d:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff800000807c14:	ff ff ff 
ffff800000807c17:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000807c1b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807c1e:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1084
}
ffff800000807c21:	5d                   	pop    rbp
ffff800000807c22:	c3                   	ret    

ffff800000807c23 <sys_ioctl>:
sys_ioctl():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1087
//===============

int sys_ioctl(int fildes, int request, unsigned long args){
ffff800000807c23:	f3 0f 1e fa          	endbr64 
ffff800000807c27:	55                   	push   rbp
ffff800000807c28:	48 89 e5             	mov    rbp,rsp
ffff800000807c2b:	48 83 ec 10          	sub    rsp,0x10
ffff800000807c2f:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807c2f <sys_ioctl+0xc>
ffff800000807c36:	49 bb e9 4b 11 00 00 	movabs r11,0x114be9
ffff800000807c3d:	00 00 00 
ffff800000807c40:	4c 01 d8             	add    rax,r11
ffff800000807c43:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffff800000807c46:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
ffff800000807c49:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1088
    current->openf[fildes]->f_ops->ioctl(current->openf[fildes]->dentry->dir_inode,current->openf[fildes]\
ffff800000807c4d:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff800000807c54:	ff ff ff 
ffff800000807c57:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807c5b:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000807c5e:	8b 4d fc             	mov    ecx,DWORD PTR [rbp-0x4]
ffff800000807c61:	48 63 c9             	movsxd rcx,ecx
ffff800000807c64:	48 83 c1 1e          	add    rcx,0x1e
ffff800000807c68:	48 8b 54 ca 08       	mov    rdx,QWORD PTR [rdx+rcx*8+0x8]
ffff800000807c6d:	48 8b 52 18          	mov    rdx,QWORD PTR [rdx+0x18]
ffff800000807c71:	4c 8b 42 28          	mov    r8,QWORD PTR [rdx+0x28]
ffff800000807c75:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff800000807c78:	48 63 d2             	movsxd rdx,edx
ffff800000807c7b:	48 b9 a8 fe ff ff ff 	movabs rcx,0xfffffffffffffea8
ffff800000807c82:	ff ff ff 
ffff800000807c85:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff800000807c89:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
ffff800000807c8c:	8b 75 fc             	mov    esi,DWORD PTR [rbp-0x4]
ffff800000807c8f:	48 63 f6             	movsxd rsi,esi
ffff800000807c92:	48 83 c6 1e          	add    rsi,0x1e
ffff800000807c96:	48 8b 74 f1 08       	mov    rsi,QWORD PTR [rcx+rsi*8+0x8]
ffff800000807c9b:	48 b9 a8 fe ff ff ff 	movabs rcx,0xfffffffffffffea8
ffff800000807ca2:	ff ff ff 
ffff800000807ca5:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff800000807ca9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807cac:	8b 4d fc             	mov    ecx,DWORD PTR [rbp-0x4]
ffff800000807caf:	48 63 c9             	movsxd rcx,ecx
ffff800000807cb2:	48 83 c1 1e          	add    rcx,0x1e
ffff800000807cb6:	48 8b 44 c8 08       	mov    rax,QWORD PTR [rax+rcx*8+0x8]
ffff800000807cbb:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000807cbf:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000807cc3:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff800000807cc7:	48 89 c7             	mov    rdi,rax
ffff800000807cca:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1090
    ,request,args);
ffff800000807ccd:	90                   	nop
ffff800000807cce:	c9                   	leave  
ffff800000807ccf:	c3                   	ret    

ffff800000807cd0 <outb>:
outb():
ffff800000807cd0:	66 89 fa             	mov    dx,di
ffff800000807cd3:	66 89 f0             	mov    ax,si
ffff800000807cd6:	ee                   	out    dx,al
ffff800000807cd7:	e8 29 00 00 00       	call   ffff800000807d05 <io_delay>
ffff800000807cdc:	c3                   	ret    

ffff800000807cdd <outw>:
outw():
ffff800000807cdd:	66 89 fa             	mov    dx,di
ffff800000807ce0:	66 89 f0             	mov    ax,si
ffff800000807ce3:	66 ef                	out    dx,ax
ffff800000807ce5:	90                   	nop
ffff800000807ce6:	90                   	nop
ffff800000807ce7:	90                   	nop
ffff800000807ce8:	c3                   	ret    

ffff800000807ce9 <inb>:
inb():
ffff800000807ce9:	31 c0                	xor    eax,eax
ffff800000807ceb:	66 89 fa             	mov    dx,di
ffff800000807cee:	ec                   	in     al,dx
ffff800000807cef:	90                   	nop
ffff800000807cf0:	90                   	nop
ffff800000807cf1:	90                   	nop
ffff800000807cf2:	c3                   	ret    

ffff800000807cf3 <inw>:
inw():
ffff800000807cf3:	31 c0                	xor    eax,eax
ffff800000807cf5:	66 89 fa             	mov    dx,di
ffff800000807cf8:	66 ed                	in     ax,dx
ffff800000807cfa:	90                   	nop
ffff800000807cfb:	90                   	nop
ffff800000807cfc:	90                   	nop
ffff800000807cfd:	c3                   	ret    

ffff800000807cfe <eoi>:
eoi():
ffff800000807cfe:	b0 20                	mov    al,0x20
ffff800000807d00:	e6 a0                	out    0xa0,al
ffff800000807d02:	e6 20                	out    0x20,al
ffff800000807d04:	c3                   	ret    

ffff800000807d05 <io_delay>:
io_delay():
ffff800000807d05:	90                   	nop
ffff800000807d06:	90                   	nop
ffff800000807d07:	90                   	nop
ffff800000807d08:	90                   	nop
ffff800000807d09:	c3                   	ret    

ffff800000807d0a <turn_on_int>:
turn_on_int():
ffff800000807d0a:	b0 f8                	mov    al,0xf8
ffff800000807d0c:	e6 21                	out    0x21,al
ffff800000807d0e:	e8 f2 ff ff ff       	call   ffff800000807d05 <io_delay>
ffff800000807d13:	b0 af                	mov    al,0xaf
ffff800000807d15:	e6 a1                	out    0xa1,al
ffff800000807d17:	e8 e9 ff ff ff       	call   ffff800000807d05 <io_delay>
ffff800000807d1c:	48 b8 00 70 10 00 00 	movabs rax,0xffff800000107000
ffff800000807d23:	80 ff ff 
ffff800000807d26:	0f 01 18             	lidt   [rax]
ffff800000807d29:	90                   	nop
ffff800000807d2a:	90                   	nop
ffff800000807d2b:	90                   	nop
ffff800000807d2c:	90                   	nop
ffff800000807d2d:	c3                   	ret    

ffff800000807d2e <report_back_trace_of_err>:
report_back_trace_of_err():
ffff800000807d2e:	67 8b 44 24 04       	mov    eax,DWORD PTR [esp+0x4]
ffff800000807d33:	50                   	push   rax
ffff800000807d34:	83 c4 08             	add    esp,0x8
ffff800000807d37:	c3                   	ret    

ffff800000807d38 <bt_msg>:
bt_msg():
ffff800000807d38:	65 72 72             	gs jb  ffff800000807dad <fill_desc+0x3a>
ffff800000807d3b:	6f                   	outs   dx,DWORD PTR ds:[rsi]
ffff800000807d3c:	72 20                	jb     ffff800000807d5e <init_gdt+0x11>
ffff800000807d3e:	6f                   	outs   dx,DWORD PTR ds:[rsi]
ffff800000807d3f:	63 63 75             	movsxd esp,DWORD PTR [rbx+0x75]
ffff800000807d42:	72 73                	jb     ffff800000807db7 <fill_desc+0x44>
ffff800000807d44:	20 61 74             	and    BYTE PTR [rcx+0x74],ah
ffff800000807d47:	3a 25 78 5c 6e 00    	cmp    ah,BYTE PTR [rip+0x6e5c78]        # ffff800000eed9c5 <_knl_end+0x2ed9c5>

ffff800000807d4d <init_gdt>:
init_gdt():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:9
#include "proc.h"

descriptor *gdt=GDT_ADDR+KNL_BASE;
extern char *gdtptr;
int init_gdt()
{
ffff800000807d4d:	f3 0f 1e fa          	endbr64 
ffff800000807d51:	55                   	push   rbp
ffff800000807d52:	48 89 e5             	mov    rbp,rsp
ffff800000807d55:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807d55 <init_gdt+0x8>
ffff800000807d5c:	49 bb c3 4a 11 00 00 	movabs r11,0x114ac3
ffff800000807d63:	00 00 00 
ffff800000807d66:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:11
//    fill_desc(0x108000,108,SEG_SYS_TSS|SEG_PRESENT,4);
    asm volatile("mov $0x48,%ax\r\n"
ffff800000807d69:	66 b8 48 00          	mov    ax,0x48
ffff800000807d6d:	0f 00 d8             	ltr    ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:13
                 "ltr %ax");  
}
ffff800000807d70:	90                   	nop
ffff800000807d71:	5d                   	pop    rbp
ffff800000807d72:	c3                   	ret    

ffff800000807d73 <fill_desc>:
fill_desc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:15
void fill_desc(u64 base, u64 limit, u16 attr, u32 index)
{
ffff800000807d73:	f3 0f 1e fa          	endbr64 
ffff800000807d77:	55                   	push   rbp
ffff800000807d78:	48 89 e5             	mov    rbp,rsp
ffff800000807d7b:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807d7b <fill_desc+0x8>
ffff800000807d82:	49 bb 9d 4a 11 00 00 	movabs r11,0x114a9d
ffff800000807d89:	00 00 00 
ffff800000807d8c:	4c 01 d8             	add    rax,r11
ffff800000807d8f:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000807d93:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000807d97:	89 4d e8             	mov    DWORD PTR [rbp-0x18],ecx
ffff800000807d9a:	66 89 55 ec          	mov    WORD PTR [rbp-0x14],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:16
    gdt[index].base_12=base&0xffff;
ffff800000807d9e:	48 ba c8 fd ff ff ff 	movabs rdx,0xfffffffffffffdc8
ffff800000807da5:	ff ff ff 
ffff800000807da8:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807dac:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000807daf:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000807db2:	48 c1 e2 04          	shl    rdx,0x4
ffff800000807db6:	48 01 ca             	add    rdx,rcx
ffff800000807db9:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
ffff800000807dbd:	66 89 4a 02          	mov    WORD PTR [rdx+0x2],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:17
    gdt[index].base_3=(base>>16)&0xff;
ffff800000807dc1:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000807dc5:	48 89 d6             	mov    rsi,rdx
ffff800000807dc8:	48 c1 ee 10          	shr    rsi,0x10
ffff800000807dcc:	48 ba c8 fd ff ff ff 	movabs rdx,0xfffffffffffffdc8
ffff800000807dd3:	ff ff ff 
ffff800000807dd6:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807dda:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000807ddd:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000807de0:	48 c1 e2 04          	shl    rdx,0x4
ffff800000807de4:	48 01 ca             	add    rdx,rcx
ffff800000807de7:	89 f1                	mov    ecx,esi
ffff800000807de9:	88 4a 04             	mov    BYTE PTR [rdx+0x4],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:18
    gdt[index].base_4=(base>>24)&0xff;
ffff800000807dec:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000807df0:	48 89 d6             	mov    rsi,rdx
ffff800000807df3:	48 c1 ee 18          	shr    rsi,0x18
ffff800000807df7:	48 ba c8 fd ff ff ff 	movabs rdx,0xfffffffffffffdc8
ffff800000807dfe:	ff ff ff 
ffff800000807e01:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807e05:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000807e08:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000807e0b:	48 c1 e2 04          	shl    rdx,0x4
ffff800000807e0f:	48 01 ca             	add    rdx,rcx
ffff800000807e12:	89 f1                	mov    ecx,esi
ffff800000807e14:	88 4a 07             	mov    BYTE PTR [rdx+0x7],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:19
    gdt[index].base_5678=(base>>32)&0xffffffff;
ffff800000807e17:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000807e1b:	48 89 d1             	mov    rcx,rdx
ffff800000807e1e:	48 c1 e9 20          	shr    rcx,0x20
ffff800000807e22:	48 ba c8 fd ff ff ff 	movabs rdx,0xfffffffffffffdc8
ffff800000807e29:	ff ff ff 
ffff800000807e2c:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807e30:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff800000807e33:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000807e36:	48 c1 e2 04          	shl    rdx,0x4
ffff800000807e3a:	48 01 f2             	add    rdx,rsi
ffff800000807e3d:	89 4a 08             	mov    DWORD PTR [rdx+0x8],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:20
    gdt[index].limit_lo16=limit&0xffff;
ffff800000807e40:	48 ba c8 fd ff ff ff 	movabs rdx,0xfffffffffffffdc8
ffff800000807e47:	ff ff ff 
ffff800000807e4a:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807e4e:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000807e51:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000807e54:	48 c1 e2 04          	shl    rdx,0x4
ffff800000807e58:	48 01 ca             	add    rdx,rcx
ffff800000807e5b:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff800000807e5f:	66 89 0a             	mov    WORD PTR [rdx],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:21
    gdt[index].attr=attr|((limit>>8)&0xf0);
ffff800000807e62:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff800000807e66:	48 c1 ea 08          	shr    rdx,0x8
ffff800000807e6a:	89 d1                	mov    ecx,edx
ffff800000807e6c:	66 81 e1 f0 00       	and    cx,0xf0
ffff800000807e71:	48 ba c8 fd ff ff ff 	movabs rdx,0xfffffffffffffdc8
ffff800000807e78:	ff ff ff 
ffff800000807e7b:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000807e7f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807e82:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000807e85:	48 c1 e0 04          	shl    rax,0x4
ffff800000807e89:	48 01 c2             	add    rdx,rax
ffff800000807e8c:	89 c8                	mov    eax,ecx
ffff800000807e8e:	66 0b 45 ec          	or     ax,WORD PTR [rbp-0x14]
ffff800000807e92:	66 89 42 05          	mov    WORD PTR [rdx+0x5],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:23

}
ffff800000807e96:	90                   	nop
ffff800000807e97:	5d                   	pop    rbp
ffff800000807e98:	c3                   	ret    

ffff800000807e99 <fill_gate>:
fill_gate():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:26

void fill_gate(u32 index,u32 offset,u16 selector,u16 attr)
{
ffff800000807e99:	f3 0f 1e fa          	endbr64 
ffff800000807e9d:	55                   	push   rbp
ffff800000807e9e:	48 89 e5             	mov    rbp,rsp
ffff800000807ea1:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807ea1 <fill_gate+0x8>
ffff800000807ea8:	49 bb 77 49 11 00 00 	movabs r11,0x114977
ffff800000807eaf:	00 00 00 
ffff800000807eb2:	4c 01 d8             	add    rax,r11
ffff800000807eb5:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff800000807eb8:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
ffff800000807ebb:	89 d6                	mov    esi,edx
ffff800000807ebd:	89 ca                	mov    edx,ecx
ffff800000807ebf:	89 f1                	mov    ecx,esi
ffff800000807ec1:	66 89 4d e4          	mov    WORD PTR [rbp-0x1c],cx
ffff800000807ec5:	66 89 55 e0          	mov    WORD PTR [rbp-0x20],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:27
    gate* ptr=gdt;
ffff800000807ec9:	48 ba c8 fd ff ff ff 	movabs rdx,0xfffffffffffffdc8
ffff800000807ed0:	ff ff ff 
ffff800000807ed3:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000807ed7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807eda:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:28
    ptr[index].offset_low=offset&0xffff;
ffff800000807ede:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000807ee1:	48 c1 e0 04          	shl    rax,0x4
ffff800000807ee5:	48 89 c2             	mov    rdx,rax
ffff800000807ee8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000807eec:	48 01 d0             	add    rax,rdx
ffff800000807eef:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000807ef2:	66 89 10             	mov    WORD PTR [rax],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:29
    ptr[index].offset_high=(offset>>16)&0xffff;
ffff800000807ef5:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000807ef8:	48 c1 e0 04          	shl    rax,0x4
ffff800000807efc:	48 89 c2             	mov    rdx,rax
ffff800000807eff:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000807f03:	48 01 d0             	add    rax,rdx
ffff800000807f06:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000807f09:	c1 ea 10             	shr    edx,0x10
ffff800000807f0c:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:30
    ptr[index].selector=selector;
ffff800000807f0f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000807f12:	48 c1 e0 04          	shl    rax,0x4
ffff800000807f16:	48 89 c2             	mov    rdx,rax
ffff800000807f19:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000807f1d:	48 01 c2             	add    rdx,rax
ffff800000807f20:	0f b7 45 e4          	movzx  eax,WORD PTR [rbp-0x1c]
ffff800000807f24:	66 89 42 02          	mov    WORD PTR [rdx+0x2],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:31
    ptr[index].attr=attr;
ffff800000807f28:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000807f2b:	48 c1 e0 04          	shl    rax,0x4
ffff800000807f2f:	48 89 c2             	mov    rdx,rax
ffff800000807f32:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000807f36:	48 01 c2             	add    rdx,rax
ffff800000807f39:	0f b7 45 e0          	movzx  eax,WORD PTR [rbp-0x20]
ffff800000807f3d:	66 89 42 04          	mov    WORD PTR [rdx+0x4],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:32
}
ffff800000807f41:	90                   	nop
ffff800000807f42:	5d                   	pop    rbp
ffff800000807f43:	c3                   	ret    

ffff800000807f44 <fill_ldt_desc>:
fill_ldt_desc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:35

void fill_ldt_desc(u32 base, u32 limit,u16 attr,descriptor *desc)
{
ffff800000807f44:	f3 0f 1e fa          	endbr64 
ffff800000807f48:	55                   	push   rbp
ffff800000807f49:	48 89 e5             	mov    rbp,rsp
ffff800000807f4c:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807f4c <fill_ldt_desc+0x8>
ffff800000807f53:	49 bb cc 48 11 00 00 	movabs r11,0x1148cc
ffff800000807f5a:	00 00 00 
ffff800000807f5d:	4c 01 d8             	add    rax,r11
ffff800000807f60:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffff800000807f63:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
ffff800000807f66:	89 d0                	mov    eax,edx
ffff800000807f68:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
ffff800000807f6c:	66 89 45 f4          	mov    WORD PTR [rbp-0xc],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:41
//    desc->base_lo16=base&0xffff;
//    desc->base_mid8=(base>>16)&0xff;
//    desc->base_hi8=(base>>24)&0xff;
//    desc->limit_lo16=limit&0xffff;
//    desc->attr=attr|(limit>>16&0xf)<<8;
ffff800000807f70:	90                   	nop
ffff800000807f71:	5d                   	pop    rbp
ffff800000807f72:	c3                   	ret    
ffff800000807f73:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffff800000807f7a:	00 00 00 
ffff800000807f7d:	0f 1f 00             	nop    DWORD PTR [rax]

ffff800000807f80 <fill_desc>:
fill_desc():
ffff800000807f80:	67 8b 44 24 04       	mov    eax,DWORD PTR [esp+0x4]
ffff800000807f85:	67 8b 5c 24 08       	mov    ebx,DWORD PTR [esp+0x8]
ffff800000807f8a:	67 8b 4c 24 0c       	mov    ecx,DWORD PTR [esp+0xc]
ffff800000807f8f:	67 8b 54 24 10       	mov    edx,DWORD PTR [esp+0x10]
ffff800000807f94:	be 00 60 00 00       	mov    esi,0x6000
ffff800000807f99:	c1 e2 03             	shl    edx,0x3
ffff800000807f9c:	01 d6                	add    esi,edx
ffff800000807f9e:	66 67 89 1e          	mov    WORD PTR [esi],bx
ffff800000807fa2:	66 67 89 46 02       	mov    WORD PTR [esi+0x2],ax
ffff800000807fa7:	c1 e8 10             	shr    eax,0x10
ffff800000807faa:	67 88 46 04          	mov    BYTE PTR [esi+0x4],al
ffff800000807fae:	c1 eb 10             	shr    ebx,0x10
ffff800000807fb1:	67 88 5e 06          	mov    BYTE PTR [esi+0x6],bl
ffff800000807fb5:	67 88 66 07          	mov    BYTE PTR [esi+0x7],ah
ffff800000807fb9:	67 09 4e 05          	or     DWORD PTR [esi+0x5],ecx
ffff800000807fbd:	c3                   	ret    

ffff800000807fbe <clock_c>:
clock_c():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/clock.c:9
#include <devman.h>
#include <disk.h>
extern int manage_proc_lock;
extern int cur_proc;
extern struct process *task;
void clock_c(){
ffff800000807fbe:	f3 0f 1e fa          	endbr64 
ffff800000807fc2:	55                   	push   rbp
ffff800000807fc3:	48 89 e5             	mov    rbp,rsp
ffff800000807fc6:	41 57                	push   r15
ffff800000807fc8:	48 83 ec 08          	sub    rsp,0x8
ffff800000807fcc:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000807fcc <clock_c+0xe>
ffff800000807fd3:	49 bb 4c 48 11 00 00 	movabs r11,0x11484c
ffff800000807fda:	00 00 00 
ffff800000807fdd:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/clock.c:11
    //refresh_wnds();
    if(!manage_proc_lock)
ffff800000807fe0:	48 b8 40 fd ff ff ff 	movabs rax,0xfffffffffffffd40
ffff800000807fe7:	ff ff ff 
ffff800000807fea:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000807fee:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000807ff0:	85 c0                	test   eax,eax
ffff800000807ff2:	75 17                	jne    ffff80000080800b <clock_c+0x4d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/clock.c:13
    {
        manage_proc();
ffff800000807ff4:	49 89 d7             	mov    r15,rdx
ffff800000807ff7:	b8 00 00 00 00       	mov    eax,0x0
ffff800000807ffc:	48 b9 ce 86 ee ff ff 	movabs rcx,0xffffffffffee86ce
ffff800000808003:	ff ff ff 
ffff800000808006:	48 01 d1             	add    rcx,rdx
ffff800000808009:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/clock.c:16
    }
    //puts("1 disk req executed.");
ffff80000080800b:	90                   	nop
ffff80000080800c:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000808010:	c9                   	leave  
ffff800000808011:	c3                   	ret    
ffff800000808012:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffff800000808019:	00 00 00 
ffff80000080801c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

ffff800000808020 <clock>:
clock():
ffff800000808020:	50                   	push   rax
ffff800000808021:	53                   	push   rbx
ffff800000808022:	51                   	push   rcx
ffff800000808023:	52                   	push   rdx
ffff800000808024:	57                   	push   rdi
ffff800000808025:	56                   	push   rsi
ffff800000808026:	41 50                	push   r8
ffff800000808028:	41 51                	push   r9
ffff80000080802a:	41 52                	push   r10
ffff80000080802c:	41 53                	push   r11
ffff80000080802e:	41 54                	push   r12
ffff800000808030:	41 55                	push   r13
ffff800000808032:	41 56                	push   r14
ffff800000808034:	41 57                	push   r15
ffff800000808036:	e8 5f ce ff ff       	call   ffff800000804e9a <save_rsp>
ffff80000080803b:	66 8c c0             	mov    ax,es
ffff80000080803e:	50                   	push   rax
ffff80000080803f:	66 8c d8             	mov    ax,ds
ffff800000808042:	50                   	push   rax
ffff800000808043:	66 b8 10 00          	mov    ax,0x10
ffff800000808047:	8e c0                	mov    es,eax
ffff800000808049:	8e d8                	mov    ds,eax

ffff80000080804b <clock.normal_part>:
clock.normal_part():
ffff80000080804b:	b0 20                	mov    al,0x20
ffff80000080804d:	e6 a0                	out    0xa0,al
ffff80000080804f:	e6 20                	out    0x20,al
ffff800000808051:	e8 68 ff ff ff       	call   ffff800000807fbe <clock_c>

ffff800000808056 <clock_ret>:
clock_ret():
ffff800000808056:	58                   	pop    rax
ffff800000808057:	8e d8                	mov    ds,eax
ffff800000808059:	58                   	pop    rax
ffff80000080805a:	8e c0                	mov    es,eax
ffff80000080805c:	41 5f                	pop    r15
ffff80000080805e:	41 5e                	pop    r14
ffff800000808060:	41 5d                	pop    r13
ffff800000808062:	41 5c                	pop    r12
ffff800000808064:	41 5b                	pop    r11
ffff800000808066:	41 5a                	pop    r10
ffff800000808068:	41 59                	pop    r9
ffff80000080806a:	41 58                	pop    r8
ffff80000080806c:	5e                   	pop    rsi
ffff80000080806d:	5f                   	pop    rdi
ffff80000080806e:	5a                   	pop    rdx
ffff80000080806f:	59                   	pop    rcx
ffff800000808070:	5b                   	pop    rbx
ffff800000808071:	58                   	pop    rax
ffff800000808072:	48 cf                	iretq  

ffff800000808074 <execute>:
execute():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:118
    return ind;
}
*/

int execute(char *path, char **argv)
{
ffff800000808074:	f3 0f 1e fa          	endbr64 
ffff800000808078:	55                   	push   rbp
ffff800000808079:	48 89 e5             	mov    rbp,rsp
ffff80000080807c:	41 57                	push   r15
ffff80000080807e:	53                   	push   rbx
ffff80000080807f:	48 83 ec 20          	sub    rsp,0x20
ffff800000808083:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000808083 <execute+0xf>
ffff80000080808a:	49 bb 95 47 11 00 00 	movabs r11,0x114795
ffff800000808091:	00 00 00 
ffff800000808094:	4c 01 db             	add    rbx,r11
ffff800000808097:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff80000080809b:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:121
    //尚未切换到目标进程
    //syscall(SYSCALL_REG_PROC, load_pe,0,0,0,0);
    int fno=-1,cwd_fno=-1;
ffff80000080809f:	c7 45 e4 ff ff ff ff 	mov    DWORD PTR [rbp-0x1c],0xffffffff
ffff8000008080a6:	c7 45 e0 ff ff ff ff 	mov    DWORD PTR [rbp-0x20],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:122
    if((fno=sys_open(path, O_EXEC)) <0)return -1;
ffff8000008080ad:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008080b1:	be 00 10 00 00       	mov    esi,0x1000
ffff8000008080b6:	48 89 c7             	mov    rdi,rax
ffff8000008080b9:	49 89 df             	mov    r15,rbx
ffff8000008080bc:	48 b8 53 e1 ee ff ff 	movabs rax,0xffffffffffeee153
ffff8000008080c3:	ff ff ff 
ffff8000008080c6:	48 01 d8             	add    rax,rbx
ffff8000008080c9:	ff d0                	call   rax
ffff8000008080cb:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
ffff8000008080ce:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
ffff8000008080d2:	79 0a                	jns    ffff8000008080de <execute+0x6a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:122 (discriminator 1)
ffff8000008080d4:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff8000008080d9:	e9 81 00 00 00       	jmp    ffff80000080815f <execute+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:124
    //
    char *p=path;
ffff8000008080de:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008080e2:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:125
    for(;*p!='\0';p++);
ffff8000008080e6:	eb 05                	jmp    ffff8000008080ed <execute+0x79>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:125 (discriminator 2)
ffff8000008080e8:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:125 (discriminator 1)
ffff8000008080ed:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008080f1:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008080f4:	84 c0                	test   al,al
ffff8000008080f6:	75 f0                	jne    ffff8000008080e8 <execute+0x74>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:126
    for(;*p!='/'&&p>path;p--);
ffff8000008080f8:	eb 05                	jmp    ffff8000008080ff <execute+0x8b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:126 (discriminator 3)
ffff8000008080fa:	48 83 6d e8 01       	sub    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:126 (discriminator 1)
ffff8000008080ff:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000808103:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000808106:	3c 2f                	cmp    al,0x2f
ffff800000808108:	74 0a                	je     ffff800000808114 <execute+0xa0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:126 (discriminator 2)
ffff80000080810a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080810e:	48 3b 45 d8          	cmp    rax,QWORD PTR [rbp-0x28]
ffff800000808112:	77 e6                	ja     ffff8000008080fa <execute+0x86>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:127
    if(p>path)
ffff800000808114:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000808118:	48 3b 45 d8          	cmp    rax,QWORD PTR [rbp-0x28]
ffff80000080811c:	76 3c                	jbe    ffff80000080815a <execute+0xe6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:129
    {
        *p='\0';
ffff80000080811e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000808122:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:130
        if((cwd_fno=sys_open(path, O_DIRECTORY)) <0)return -1;
ffff800000808125:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000808129:	be 00 40 00 00       	mov    esi,0x4000
ffff80000080812e:	48 89 c7             	mov    rdi,rax
ffff800000808131:	49 89 df             	mov    r15,rbx
ffff800000808134:	48 b8 53 e1 ee ff ff 	movabs rax,0xffffffffffeee153
ffff80000080813b:	ff ff ff 
ffff80000080813e:	48 01 d8             	add    rax,rbx
ffff800000808141:	ff d0                	call   rax
ffff800000808143:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
ffff800000808146:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
ffff80000080814a:	79 07                	jns    ffff800000808153 <execute+0xdf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:130 (discriminator 1)
ffff80000080814c:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000808151:	eb 0c                	jmp    ffff80000080815f <execute+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:131
        *p='/';
ffff800000808153:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000808157:	c6 00 2f             	mov    BYTE PTR [rax],0x2f
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:136
    }
    // extern struct file opened[];
    extern struct process task[];
    // int pi= reg_proc(proc_start, &opened[cwd_fno], &opened[fno]);
    return 0;
ffff80000080815a:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:137
}
ffff80000080815f:	48 83 c4 20          	add    rsp,0x20
ffff800000808163:	5b                   	pop    rbx
ffff800000808164:	41 5f                	pop    r15
ffff800000808166:	5d                   	pop    rbp
ffff800000808167:	c3                   	ret    

ffff800000808168 <sys_execve>:
sys_execve():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:139

int sys_execve(char *path, int argc, char **argv) {
ffff800000808168:	f3 0f 1e fa          	endbr64 
ffff80000080816c:	55                   	push   rbp
ffff80000080816d:	48 89 e5             	mov    rbp,rsp
ffff800000808170:	41 57                	push   r15
ffff800000808172:	53                   	push   rbx
ffff800000808173:	48 83 ec 50          	sub    rsp,0x50
ffff800000808177:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000808177 <sys_execve+0xf>
ffff80000080817e:	49 bb a1 46 11 00 00 	movabs r11,0x1146a1
ffff800000808185:	00 00 00 
ffff800000808188:	4c 01 db             	add    rbx,r11
ffff80000080818b:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
ffff80000080818f:	89 75 b4             	mov    DWORD PTR [rbp-0x4c],esi
ffff800000808192:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:140
    int fno=-1,cwd_fno=-1;
ffff800000808196:	c7 45 e0 ff ff ff ff 	mov    DWORD PTR [rbp-0x20],0xffffffff
ffff80000080819d:	c7 45 dc ff ff ff ff 	mov    DWORD PTR [rbp-0x24],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:141
    if((fno=sys_open(path, O_EXEC)) <0)return -ENOENT;
ffff8000008081a4:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008081a8:	be 00 10 00 00       	mov    esi,0x1000
ffff8000008081ad:	48 89 c7             	mov    rdi,rax
ffff8000008081b0:	49 89 df             	mov    r15,rbx
ffff8000008081b3:	48 b8 53 e1 ee ff ff 	movabs rax,0xffffffffffeee153
ffff8000008081ba:	ff ff ff 
ffff8000008081bd:	48 01 d8             	add    rax,rbx
ffff8000008081c0:	ff d0                	call   rax
ffff8000008081c2:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
ffff8000008081c5:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
ffff8000008081c9:	79 0a                	jns    ffff8000008081d5 <sys_execve+0x6d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:141 (discriminator 1)
ffff8000008081cb:	b8 d3 ff ff ff       	mov    eax,0xffffffd3
ffff8000008081d0:	e9 f3 01 00 00       	jmp    ffff8000008083c8 <sys_execve+0x260>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:145

    //重新设置进程数据
    //清空原来的页表
    release_mmap(current);
ffff8000008081d5:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff8000008081dc:	ff ff ff 
ffff8000008081df:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008081e3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008081e6:	48 89 c7             	mov    rdi,rax
ffff8000008081e9:	49 89 df             	mov    r15,rbx
ffff8000008081ec:	48 b8 6e a7 ee ff ff 	movabs rax,0xffffffffffeea76e
ffff8000008081f3:	ff ff ff 
ffff8000008081f6:	48 01 d8             	add    rax,rbx
ffff8000008081f9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:149
    // current->regs.rsp=STACK_TOP;//清空栈
    extern TSS* tss;

    current->exef=current->openf[fno];//改变执行文件
ffff8000008081fb:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000808202:	ff ff ff 
ffff800000808205:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808209:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080820c:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000808213:	ff ff ff 
ffff800000808216:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080821a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080821d:	8b 4d e0             	mov    ecx,DWORD PTR [rbp-0x20]
ffff800000808220:	48 63 c9             	movsxd rcx,ecx
ffff800000808223:	48 83 c1 1e          	add    rcx,0x1e
ffff800000808227:	48 8b 54 ca 08       	mov    rdx,QWORD PTR [rdx+rcx*8+0x8]
ffff80000080822c:	48 89 90 f0 00 00 00 	mov    QWORD PTR [rax+0xf0],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:150
    addr_t entry= load_elf(current->exef);
ffff800000808233:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff80000080823a:	ff ff ff 
ffff80000080823d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808241:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808244:	48 8b 80 f0 00 00 00 	mov    rax,QWORD PTR [rax+0xf0]
ffff80000080824b:	48 89 c7             	mov    rdi,rax
ffff80000080824e:	49 89 df             	mov    r15,rbx
ffff800000808251:	48 b8 e6 c6 ee ff ff 	movabs rax,0xffffffffffeec6e6
ffff800000808258:	ff ff ff 
ffff80000080825b:	48 01 d8             	add    rax,rbx
ffff80000080825e:	ff d0                	call   rax
ffff800000808260:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:151
    if(entry==-1)
ffff800000808264:	48 83 7d d0 ff       	cmp    QWORD PTR [rbp-0x30],0xffffffffffffffff
ffff800000808269:	75 4d                	jne    ffff8000008082b8 <sys_execve+0x150>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:153
    {
        comprintf("failed execve, errcode:%d\n",current->regs.errcode);
ffff80000080826b:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000808272:	ff ff ff 
ffff800000808275:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808279:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080827c:	48 8b 80 2c 03 00 00 	mov    rax,QWORD PTR [rax+0x32c]
ffff800000808283:	48 89 c6             	mov    rsi,rax
ffff800000808286:	48 b8 07 d9 ff ff ff 	movabs rax,0xffffffffffffd907
ffff80000080828d:	ff ff ff 
ffff800000808290:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000808294:	48 89 c7             	mov    rdi,rax
ffff800000808297:	49 89 df             	mov    r15,rbx
ffff80000080829a:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080829f:	48 ba 1b 4e ef ff ff 	movabs rdx,0xffffffffffef4e1b
ffff8000008082a6:	ff ff ff 
ffff8000008082a9:	48 01 da             	add    rdx,rbx
ffff8000008082ac:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:154
        return -1;
ffff8000008082ae:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff8000008082b3:	e9 10 01 00 00       	jmp    ffff8000008083c8 <sys_execve+0x260>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:156
    }
    if(sys_close(fno)<0)return -1;
ffff8000008082b8:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff8000008082bb:	89 c7                	mov    edi,eax
ffff8000008082bd:	49 89 df             	mov    r15,rbx
ffff8000008082c0:	48 b8 f3 e7 ee ff ff 	movabs rax,0xffffffffffeee7f3
ffff8000008082c7:	ff ff ff 
ffff8000008082ca:	48 01 d8             	add    rax,rbx
ffff8000008082cd:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:159

    //sysret直接返回到新程序的main
    void *retp= (void *) entry;
ffff8000008082cf:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008082d3:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:160
    stack_store_regs *rs= (stack_store_regs *) (tss->ists[0] - sizeof(stack_store_regs));
ffff8000008082d7:	48 b8 30 fe ff ff ff 	movabs rax,0xfffffffffffffe30
ffff8000008082de:	ff ff ff 
ffff8000008082e1:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008082e5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008082e8:	48 8b 40 24          	mov    rax,QWORD PTR [rax+0x24]
ffff8000008082ec:	48 2d a8 00 00 00    	sub    rax,0xa8
ffff8000008082f2:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:161
    rs->rcx= (unsigned long) retp;
ffff8000008082f6:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff8000008082fa:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008082fe:	48 89 50 68          	mov    QWORD PTR [rax+0x68],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:163
    //第一个参数argc
    rs->rsi=argc;
ffff800000808302:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffff800000808305:	48 63 d0             	movsxd rdx,eax
ffff800000808308:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080830c:	48 89 50 50          	mov    QWORD PTR [rax+0x50],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:165
    //第二个参数argv需要把内容从内核空间拷贝到用户堆里面
    char* p= (char *) current->mem_struct.heap_base;
ffff800000808310:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000808317:	ff ff ff 
ffff80000080831a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080831e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808321:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff800000808325:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:166
    for(int i=0;i<argc;i++){
ffff800000808329:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff800000808330:	eb 6c                	jmp    ffff80000080839e <sys_execve+0x236>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:167 (discriminator 3)
        strcpy(p,argv[i]);
ffff800000808332:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000808335:	48 98                	cdqe   
ffff800000808337:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080833e:	00 
ffff80000080833f:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000808343:	48 01 d0             	add    rax,rdx
ffff800000808346:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808349:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080834d:	48 89 d6             	mov    rsi,rdx
ffff800000808350:	48 89 c7             	mov    rdi,rax
ffff800000808353:	49 89 df             	mov    r15,rbx
ffff800000808356:	48 b8 c0 53 ef ff ff 	movabs rax,0xffffffffffef53c0
ffff80000080835d:	ff ff ff 
ffff800000808360:	48 01 d8             	add    rax,rbx
ffff800000808363:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:168 (discriminator 3)
        p+= strlen(argv[i])+1;
ffff800000808365:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000808368:	48 98                	cdqe   
ffff80000080836a:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000808371:	00 
ffff800000808372:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000808376:	48 01 d0             	add    rax,rdx
ffff800000808379:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080837c:	48 89 c7             	mov    rdi,rax
ffff80000080837f:	49 89 df             	mov    r15,rbx
ffff800000808382:	48 b8 8d 56 ef ff ff 	movabs rax,0xffffffffffef568d
ffff800000808389:	ff ff ff 
ffff80000080838c:	48 01 d8             	add    rax,rbx
ffff80000080838f:	ff d0                	call   rax
ffff800000808391:	83 c0 01             	add    eax,0x1
ffff800000808394:	48 98                	cdqe   
ffff800000808396:	48 01 45 e8          	add    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:166 (discriminator 3)
    for(int i=0;i<argc;i++){
ffff80000080839a:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:166 (discriminator 1)
ffff80000080839e:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008083a1:	3b 45 b4             	cmp    eax,DWORD PTR [rbp-0x4c]
ffff8000008083a4:	7c 8c                	jl     ffff800000808332 <sys_execve+0x1ca>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:170
    }
    rs->rdi=current->mem_struct.heap_base;
ffff8000008083a6:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff8000008083ad:	ff ff ff 
ffff8000008083b0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008083b4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008083b7:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
ffff8000008083bb:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008083bf:	48 89 50 58          	mov    QWORD PTR [rax+0x58],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:174
    //以下部分是临时测试代码
//    int (*pmain)(int argc,char **argv)=(int (*)(int, char **)) entry;
//    pmain(argc, (char **) rs->rdi);
    return 0;
ffff8000008083c3:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:175
}
ffff8000008083c8:	48 83 c4 50          	add    rsp,0x50
ffff8000008083cc:	5b                   	pop    rbx
ffff8000008083cd:	41 5f                	pop    r15
ffff8000008083cf:	5d                   	pop    rbp
ffff8000008083d0:	c3                   	ret    

ffff8000008083d1 <exec_call>:
exec_call():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:177
int exec_call(char *path)
{
ffff8000008083d1:	f3 0f 1e fa          	endbr64 
ffff8000008083d5:	55                   	push   rbp
ffff8000008083d6:	48 89 e5             	mov    rbp,rsp
ffff8000008083d9:	41 57                	push   r15
ffff8000008083db:	53                   	push   rbx
ffff8000008083dc:	48 83 ec 20          	sub    rsp,0x20
ffff8000008083e0:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008083e0 <exec_call+0xf>
ffff8000008083e7:	49 bb 38 44 11 00 00 	movabs r11,0x114438
ffff8000008083ee:	00 00 00 
ffff8000008083f1:	4c 01 db             	add    rbx,r11
ffff8000008083f4:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:178
    int pi= execute(path, NULL);
ffff8000008083f8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008083fc:	be 00 00 00 00       	mov    esi,0x0
ffff800000808401:	48 89 c7             	mov    rdi,rax
ffff800000808404:	49 89 df             	mov    r15,rbx
ffff800000808407:	48 b8 5c b8 ee ff ff 	movabs rax,0xffffffffffeeb85c
ffff80000080840e:	ff ff ff 
ffff800000808411:	48 01 d8             	add    rax,rbx
ffff800000808414:	ff d0                	call   rax
ffff800000808416:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:179
    int tss= _TSS_IND(pi)*8;
ffff800000808419:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080841c:	01 c0                	add    eax,eax
ffff80000080841e:	83 c0 05             	add    eax,0x5
ffff800000808421:	c1 e0 03             	shl    eax,0x3
ffff800000808424:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:182
    extern struct process task[];
    extern int cur_proc;
    switch_proc_tss(pi);
ffff800000808427:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080842a:	89 c7                	mov    edi,eax
ffff80000080842c:	49 89 df             	mov    r15,rbx
ffff80000080842f:	48 b8 8a 89 ee ff ff 	movabs rax,0xffffffffffee898a
ffff800000808436:	ff ff ff 
ffff800000808439:	48 01 d8             	add    rax,rbx
ffff80000080843c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:183
    while(task[pi].stat != TASK_ZOMBIE);
ffff80000080843e:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:183 (discriminator 1)
ffff80000080843f:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000808446:	ff ff ff 
ffff800000808449:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff80000080844d:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000808450:	48 98                	cdqe   
ffff800000808452:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000808459:	48 01 d0             	add    rax,rdx
ffff80000080845c:	48 83 c0 10          	add    rax,0x10
ffff800000808460:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000808463:	83 f8 04             	cmp    eax,0x4
ffff800000808466:	75 d7                	jne    ffff80000080843f <exec_call+0x6e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:184
    return task[pi].exit_code;
ffff800000808468:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff80000080846f:	ff ff ff 
ffff800000808472:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff800000808476:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000808479:	48 98                	cdqe   
ffff80000080847b:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000808482:	48 01 d0             	add    rax,rdx
ffff800000808485:	48 83 c0 20          	add    rax,0x20
ffff800000808489:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:185
}
ffff80000080848c:	48 83 c4 20          	add    rsp,0x20
ffff800000808490:	5b                   	pop    rbx
ffff800000808491:	41 5f                	pop    r15
ffff800000808493:	5d                   	pop    rbp
ffff800000808494:	c3                   	ret    

ffff800000808495 <proc_start>:
proc_start():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:187
int proc_start()
{
ffff800000808495:	f3 0f 1e fa          	endbr64 
ffff800000808499:	55                   	push   rbp
ffff80000080849a:	48 89 e5             	mov    rbp,rsp
ffff80000080849d:	41 57                	push   r15
ffff80000080849f:	53                   	push   rbx
ffff8000008084a0:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008084a0 <proc_start+0xb>
ffff8000008084a7:	49 bb 78 43 11 00 00 	movabs r11,0x114378
ffff8000008084ae:	00 00 00 
ffff8000008084b1:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:190
    extern struct process task[];
    extern int cur_proc;
    load_pe(&task[cur_proc]);
ffff8000008084b4:	48 b8 50 fe ff ff ff 	movabs rax,0xfffffffffffffe50
ffff8000008084bb:	ff ff ff 
ffff8000008084be:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008084c2:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008084c4:	48 98                	cdqe   
ffff8000008084c6:	48 69 d0 54 03 00 00 	imul   rdx,rax,0x354
ffff8000008084cd:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff8000008084d4:	ff ff ff 
ffff8000008084d7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008084db:	48 01 d0             	add    rax,rdx
ffff8000008084de:	48 89 c7             	mov    rdi,rax
ffff8000008084e1:	49 89 df             	mov    r15,rbx
ffff8000008084e4:	48 b8 f8 bc ee ff ff 	movabs rax,0xffffffffffeebcf8
ffff8000008084eb:	ff ff ff 
ffff8000008084ee:	48 01 d8             	add    rax,rbx
ffff8000008084f1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:192
    //释放进程资源
    sys_exit(0);
ffff8000008084f3:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008084f8:	49 89 df             	mov    r15,rbx
ffff8000008084fb:	48 b8 51 93 ee ff ff 	movabs rax,0xffffffffffee9351
ffff800000808502:	ff ff ff 
ffff800000808505:	48 01 d8             	add    rax,rbx
ffff800000808508:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:193
}
ffff80000080850a:	90                   	nop
ffff80000080850b:	5b                   	pop    rbx
ffff80000080850c:	41 5f                	pop    r15
ffff80000080850e:	5d                   	pop    rbp
ffff80000080850f:	c3                   	ret    

ffff800000808510 <load_pe>:
load_pe():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:196
//在cr3切换到目标进程下的加载程序
int load_pe(struct process *proc)
{
ffff800000808510:	f3 0f 1e fa          	endbr64 
ffff800000808514:	55                   	push   rbp
ffff800000808515:	48 89 e5             	mov    rbp,rsp
ffff800000808518:	41 57                	push   r15
ffff80000080851a:	53                   	push   rbx
ffff80000080851b:	48 81 ec 10 03 00 00 	sub    rsp,0x310
ffff800000808522:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000808522 <load_pe+0x12>
ffff800000808529:	49 bb f6 42 11 00 00 	movabs r11,0x1142f6
ffff800000808530:	00 00 00 
ffff800000808533:	4c 01 db             	add    rbx,r11
ffff800000808536:	48 89 bd e8 fc ff ff 	mov    QWORD PTR [rbp-0x318],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:198
    // 读取文件头
    struct file *f=proc->exef;
ffff80000080853d:	48 8b 85 e8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x318]
ffff800000808544:	48 8b 80 f0 00 00 00 	mov    rax,QWORD PTR [rax+0xf0]
ffff80000080854b:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:199
    int exefno=-1;
ffff80000080854f:	c7 45 ec ff ff ff ff 	mov    DWORD PTR [rbp-0x14],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:200
    for(int i=0;i<MAX_PROC_OPENF;i++)
ffff800000808556:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff80000080855d:	eb 32                	jmp    ffff800000808591 <load_pe+0x81>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:201
        if(current->openf[i]==f)
ffff80000080855f:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000808566:	ff ff ff 
ffff800000808569:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080856d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808570:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000808573:	48 63 d2             	movsxd rdx,edx
ffff800000808576:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080857a:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff80000080857f:	48 39 45 88          	cmp    QWORD PTR [rbp-0x78],rax
ffff800000808583:	75 08                	jne    ffff80000080858d <load_pe+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:203
        {
            exefno=i;
ffff800000808585:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000808588:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:204
            break;
ffff80000080858b:	eb 0a                	jmp    ffff800000808597 <load_pe+0x87>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:200 (discriminator 2)
    for(int i=0;i<MAX_PROC_OPENF;i++)
ffff80000080858d:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:200 (discriminator 1)
ffff800000808591:	83 7d e8 1f          	cmp    DWORD PTR [rbp-0x18],0x1f
ffff800000808595:	7e c8                	jle    ffff80000080855f <load_pe+0x4f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:206
        }
    if(exefno==-1)return ERR;
ffff800000808597:	83 7d ec ff          	cmp    DWORD PTR [rbp-0x14],0xffffffff
ffff80000080859b:	75 0a                	jne    ffff8000008085a7 <load_pe+0x97>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:206 (discriminator 1)
ffff80000080859d:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff8000008085a2:	e9 6a 08 00 00       	jmp    ffff800000808e11 <load_pe+0x901>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:210

    IMAGE_DOS_HEADER tdh;
    IMAGE_NT_HEADERS32 tnth;
    sys_read(exefno, &tdh, sizeof(tdh));
ffff8000008085a7:	48 8d 8d 30 fe ff ff 	lea    rcx,[rbp-0x1d0]
ffff8000008085ae:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008085b1:	ba 44 00 00 00       	mov    edx,0x44
ffff8000008085b6:	48 89 ce             	mov    rsi,rcx
ffff8000008085b9:	89 c7                	mov    edi,eax
ffff8000008085bb:	49 89 df             	mov    r15,rbx
ffff8000008085be:	48 b8 ea e8 ee ff ff 	movabs rax,0xffffffffffeee8ea
ffff8000008085c5:	ff ff ff 
ffff8000008085c8:	48 01 d8             	add    rax,rbx
ffff8000008085cb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:211
    sys_lseek(exefno,tdh.e_lfanew,SEEK_SET);
ffff8000008085cd:	48 8b 85 6c fe ff ff 	mov    rax,QWORD PTR [rbp-0x194]
ffff8000008085d4:	48 89 c1             	mov    rcx,rax
ffff8000008085d7:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008085da:	ba 00 00 00 00       	mov    edx,0x0
ffff8000008085df:	48 89 ce             	mov    rsi,rcx
ffff8000008085e2:	89 c7                	mov    edi,eax
ffff8000008085e4:	49 89 df             	mov    r15,rbx
ffff8000008085e7:	48 b8 86 ea ee ff ff 	movabs rax,0xffffffffffeeea86
ffff8000008085ee:	ff ff ff 
ffff8000008085f1:	48 01 d8             	add    rax,rbx
ffff8000008085f4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:212
    sys_read(exefno, &tnth, sizeof(tnth));
ffff8000008085f6:	48 8d 8d 20 fd ff ff 	lea    rcx,[rbp-0x2e0]
ffff8000008085fd:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000808600:	ba 0c 01 00 00       	mov    edx,0x10c
ffff800000808605:	48 89 ce             	mov    rsi,rcx
ffff800000808608:	89 c7                	mov    edi,eax
ffff80000080860a:	49 89 df             	mov    r15,rbx
ffff80000080860d:	48 b8 ea e8 ee ff ff 	movabs rax,0xffffffffffeee8ea
ffff800000808614:	ff ff ff 
ffff800000808617:	48 01 d8             	add    rax,rbx
ffff80000080861a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:215

    //是否需要移动base(先不检查)
    addr_t nbase=tnth.OptionalHeader.ImageBase;
ffff80000080861c:	48 8b 85 54 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2ac]
ffff800000808623:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:216
    int pgn=tnth.OptionalHeader.SizeOfImage/PAGE_SIZE;
ffff800000808627:	8b 85 74 fd ff ff    	mov    eax,DWORD PTR [rbp-0x28c]
ffff80000080862d:	c1 e8 0c             	shr    eax,0xc
ffff800000808630:	89 85 7c ff ff ff    	mov    DWORD PTR [rbp-0x84],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:241
//        break;
//    }

    //proc->tss.eip=tnth.OptionalHeader.AddressOfEntryPoint+nbase;
    //存放文件头
    sys_lseek(exefno,0,SEEK_SET);
ffff800000808636:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000808639:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080863e:	be 00 00 00 00       	mov    esi,0x0
ffff800000808643:	89 c7                	mov    edi,eax
ffff800000808645:	49 89 df             	mov    r15,rbx
ffff800000808648:	48 b8 86 ea ee ff ff 	movabs rax,0xffffffffffeeea86
ffff80000080864f:	ff ff ff 
ffff800000808652:	48 01 d8             	add    rax,rbx
ffff800000808655:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:242
    sys_read(exefno, nbase, PAGE_SIZE);
ffff800000808657:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
ffff80000080865b:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080865e:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000808663:	48 89 ce             	mov    rsi,rcx
ffff800000808666:	89 c7                	mov    edi,eax
ffff800000808668:	49 89 df             	mov    r15,rbx
ffff80000080866b:	48 b8 ea e8 ee ff ff 	movabs rax,0xffffffffffeee8ea
ffff800000808672:	ff ff ff 
ffff800000808675:	48 01 d8             	add    rax,rbx
ffff800000808678:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:244
    //dos头
    PIMAGE_DOS_HEADER dosh=nbase;
ffff80000080867a:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080867e:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:245
    PIMAGE_NT_HEADERS64 nth=nbase+dosh->e_lfanew;
ffff800000808685:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080868c:	48 8b 50 3c          	mov    rdx,QWORD PTR [rax+0x3c]
ffff800000808690:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000808694:	48 01 d0             	add    rax,rdx
ffff800000808697:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:246
    PIMAGE_FILE_HEADER fh=&nth->FileHeader;
ffff80000080869e:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff8000008086a5:	48 83 c0 04          	add    rax,0x4
ffff8000008086a9:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:249
    //为新进程分配内存页
    //计算所需的页
    int prog_size=nth->OptionalHeader.SizeOfImage;
ffff8000008086b0:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff8000008086b7:	8b 40 50             	mov    eax,DWORD PTR [rax+0x50]
ffff8000008086ba:	89 85 5c ff ff ff    	mov    DWORD PTR [rbp-0xa4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:250
    int page_count=prog_size/4096;
ffff8000008086c0:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
ffff8000008086c6:	8d 90 ff 0f 00 00    	lea    edx,[rax+0xfff]
ffff8000008086cc:	85 c0                	test   eax,eax
ffff8000008086ce:	0f 48 c2             	cmovs  eax,edx
ffff8000008086d1:	c1 f8 0c             	sar    eax,0xc
ffff8000008086d4:	89 85 58 ff ff ff    	mov    DWORD PTR [rbp-0xa8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:252

    addr_t shell_addr=nth->OptionalHeader.AddressOfEntryPoint+nbase;
ffff8000008086da:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff8000008086e1:	8b 40 28             	mov    eax,DWORD PTR [rax+0x28]
ffff8000008086e4:	89 c2                	mov    edx,eax
ffff8000008086e6:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff8000008086ea:	48 01 d0             	add    rax,rdx
ffff8000008086ed:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:253
    int page_index_item_count=page_count/1024+page_count%1024==0?0:1;
ffff8000008086f4:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
ffff8000008086fa:	8d 90 ff 03 00 00    	lea    edx,[rax+0x3ff]
ffff800000808700:	85 c0                	test   eax,eax
ffff800000808702:	0f 48 c2             	cmovs  eax,edx
ffff800000808705:	c1 f8 0a             	sar    eax,0xa
ffff800000808708:	89 c1                	mov    ecx,eax
ffff80000080870a:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
ffff800000808710:	99                   	cdq    
ffff800000808711:	c1 ea 16             	shr    edx,0x16
ffff800000808714:	01 d0                	add    eax,edx
ffff800000808716:	25 ff 03 00 00       	and    eax,0x3ff
ffff80000080871b:	29 d0                	sub    eax,edx
ffff80000080871d:	01 c8                	add    eax,ecx
ffff80000080871f:	85 c0                	test   eax,eax
ffff800000808721:	0f 95 c0             	setne  al
ffff800000808724:	0f b6 c0             	movzx  eax,al
ffff800000808727:	89 85 4c ff ff ff    	mov    DWORD PTR [rbp-0xb4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:254
    int start_pgind_item=shell_addr/PAGE_INDEX_SIZE;
ffff80000080872d:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
ffff800000808734:	48 c1 e8 15          	shr    rax,0x15
ffff800000808738:	89 85 48 ff ff ff    	mov    DWORD PTR [rbp-0xb8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:257

    //sys_read sections
    PIMAGE_SECTION_HEADER psec=(u32)nth+sizeof(IMAGE_NT_HEADERS32);
ffff80000080873e:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff800000808745:	89 c0                	mov    eax,eax
ffff800000808747:	48 05 0c 01 00 00    	add    rax,0x10c
ffff80000080874d:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:259
    int data_start=sizeof(IMAGE_DOS_HEADER)+sizeof(IMAGE_NT_HEADERS32)+\
    nth->FileHeader.NumberOfSections*sizeof(IMAGE_SECTION_HEADER);
ffff800000808751:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff800000808758:	0f b7 40 06          	movzx  eax,WORD PTR [rax+0x6]
ffff80000080875c:	0f b7 d0             	movzx  edx,ax
ffff80000080875f:	89 d0                	mov    eax,edx
ffff800000808761:	c1 e0 02             	shl    eax,0x2
ffff800000808764:	01 d0                	add    eax,edx
ffff800000808766:	c1 e0 03             	shl    eax,0x3
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:258
    int data_start=sizeof(IMAGE_DOS_HEADER)+sizeof(IMAGE_NT_HEADERS32)+\
ffff800000808769:	05 50 01 00 00       	add    eax,0x150
ffff80000080876e:	89 85 44 ff ff ff    	mov    DWORD PTR [rbp-0xbc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:260
    int align=nth->OptionalHeader.FileAlignment;
ffff800000808774:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080877b:	8b 40 3c             	mov    eax,DWORD PTR [rax+0x3c]
ffff80000080877e:	89 85 40 ff ff ff    	mov    DWORD PTR [rbp-0xc0],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:261
    data_start=data_start%align?data_start-data_start%align+align:data_start;
ffff800000808784:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
ffff80000080878a:	99                   	cdq    
ffff80000080878b:	f7 bd 40 ff ff ff    	idiv   DWORD PTR [rbp-0xc0]
ffff800000808791:	89 d0                	mov    eax,edx
ffff800000808793:	85 c0                	test   eax,eax
ffff800000808795:	74 23                	je     ffff8000008087ba <load_pe+0x2aa>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:261 (discriminator 1)
ffff800000808797:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
ffff80000080879d:	99                   	cdq    
ffff80000080879e:	f7 bd 40 ff ff ff    	idiv   DWORD PTR [rbp-0xc0]
ffff8000008087a4:	89 d1                	mov    ecx,edx
ffff8000008087a6:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
ffff8000008087ac:	29 c8                	sub    eax,ecx
ffff8000008087ae:	89 c2                	mov    edx,eax
ffff8000008087b0:	8b 85 40 ff ff ff    	mov    eax,DWORD PTR [rbp-0xc0]
ffff8000008087b6:	01 d0                	add    eax,edx
ffff8000008087b8:	eb 06                	jmp    ffff8000008087c0 <load_pe+0x2b0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:261 (discriminator 2)
ffff8000008087ba:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:261 (discriminator 4)
ffff8000008087c0:	89 85 44 ff ff ff    	mov    DWORD PTR [rbp-0xbc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:262 (discriminator 4)
    for(int i=0;i<nth->FileHeader.NumberOfSections;i++,psec++)
ffff8000008087c6:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
ffff8000008087cd:	e9 85 00 00 00       	jmp    ffff800000808857 <load_pe+0x347>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:264
    {
        int disca=psec->Characteristics&IMAGE_SCN_MEM_DISCARDABLE;
ffff8000008087d2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008087d6:	8b 40 24             	mov    eax,DWORD PTR [rax+0x24]
ffff8000008087d9:	25 00 00 00 02       	and    eax,0x2000000
ffff8000008087de:	89 85 b0 fe ff ff    	mov    DWORD PTR [rbp-0x150],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:265
        if(disca)
ffff8000008087e4:	83 bd b0 fe ff ff 00 	cmp    DWORD PTR [rbp-0x150],0x0
ffff8000008087eb:	75 60                	jne    ffff80000080884d <load_pe+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:268
            continue;
        //直接读，缺页内核解决
        sys_lseek(exefno,psec->PointerToRawData,SEEK_SET);
ffff8000008087ed:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008087f1:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
ffff8000008087f4:	89 c1                	mov    ecx,eax
ffff8000008087f6:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008087f9:	ba 00 00 00 00       	mov    edx,0x0
ffff8000008087fe:	48 89 ce             	mov    rsi,rcx
ffff800000808801:	89 c7                	mov    edi,eax
ffff800000808803:	49 89 df             	mov    r15,rbx
ffff800000808806:	48 b8 86 ea ee ff ff 	movabs rax,0xffffffffffeeea86
ffff80000080880d:	ff ff ff 
ffff800000808810:	48 01 d8             	add    rax,rbx
ffff800000808813:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:269
        sys_read(exefno, psec->VirtualAddress + nbase,  psec->SizeOfRawData);
ffff800000808815:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000808819:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff80000080881c:	89 c2                	mov    edx,eax
ffff80000080881e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000808822:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff800000808825:	89 c1                	mov    ecx,eax
ffff800000808827:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080882b:	48 01 c8             	add    rax,rcx
ffff80000080882e:	48 89 c1             	mov    rcx,rax
ffff800000808831:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000808834:	48 89 ce             	mov    rsi,rcx
ffff800000808837:	89 c7                	mov    edi,eax
ffff800000808839:	49 89 df             	mov    r15,rbx
ffff80000080883c:	48 b8 ea e8 ee ff ff 	movabs rax,0xffffffffffeee8ea
ffff800000808843:	ff ff ff 
ffff800000808846:	48 01 d8             	add    rax,rbx
ffff800000808849:	ff d0                	call   rax
ffff80000080884b:	eb 01                	jmp    ffff80000080884e <load_pe+0x33e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:266
            continue;
ffff80000080884d:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:262 (discriminator 2)
    for(int i=0;i<nth->FileHeader.NumberOfSections;i++,psec++)
ffff80000080884e:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
ffff800000808852:	48 83 45 e0 28       	add    QWORD PTR [rbp-0x20],0x28
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:262 (discriminator 1)
ffff800000808857:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080885e:	0f b7 40 06          	movzx  eax,WORD PTR [rax+0x6]
ffff800000808862:	0f b7 c0             	movzx  eax,ax
ffff800000808865:	39 45 dc             	cmp    DWORD PTR [rbp-0x24],eax
ffff800000808868:	0f 8c 64 ff ff ff    	jl     ffff8000008087d2 <load_pe+0x2c2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:274

    }

    //通过导入表加载需要的dll
    PIMAGE_DATA_DIRECTORY impd=&nth->OptionalHeader.DataDirectory[1];
ffff80000080886e:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff800000808875:	48 05 90 00 00 00    	add    rax,0x90
ffff80000080887b:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:275
    if(impd->Size>0)
ffff800000808882:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000808889:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff80000080888c:	85 c0                	test   eax,eax
ffff80000080888e:	0f 84 bc 02 00 00    	je     ffff800000808b50 <load_pe+0x640>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:277
    {
        int tmpi=impd->VirtualAddress+nbase;
ffff800000808894:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff80000080889b:	8b 10                	mov    edx,DWORD PTR [rax]
ffff80000080889d:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff8000008088a1:	01 d0                	add    eax,edx
ffff8000008088a3:	89 85 34 ff ff ff    	mov    DWORD PTR [rbp-0xcc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:278
        PIMAGE_IMPORT_DESCRIPTOR impdes=tmpi;
ffff8000008088a9:	8b 85 34 ff ff ff    	mov    eax,DWORD PTR [rbp-0xcc]
ffff8000008088af:	48 98                	cdqe   
ffff8000008088b1:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:280
        int dllp;
        while (impdes->Characteristics)
ffff8000008088b5:	e9 88 02 00 00       	jmp    ffff800000808b42 <load_pe+0x632>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:283
        {
            //加载dll
            char *dllname=impdes->Name+nbase;
ffff8000008088ba:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008088be:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff8000008088c1:	89 c2                	mov    edx,eax
ffff8000008088c3:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff8000008088c7:	48 01 d0             	add    rax,rdx
ffff8000008088ca:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:286
            //此处应有加载dll代码
            int dlli;
            if(strcmp(dllname,"sys.dll")==0)//加载系统dll的部分由内核已经完成
ffff8000008088d1:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
ffff8000008088d8:	48 ba 22 d9 ff ff ff 	movabs rdx,0xffffffffffffd922
ffff8000008088df:	ff ff ff 
ffff8000008088e2:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff8000008088e6:	48 89 d6             	mov    rsi,rdx
ffff8000008088e9:	48 89 c7             	mov    rdi,rax
ffff8000008088ec:	49 89 df             	mov    r15,rbx
ffff8000008088ef:	48 b8 0e 56 ef ff ff 	movabs rax,0xffffffffffef560e
ffff8000008088f6:	ff ff ff 
ffff8000008088f9:	48 01 d8             	add    rax,rbx
ffff8000008088fc:	ff d0                	call   rax
ffff8000008088fe:	85 c0                	test   eax,eax
ffff800000808900:	75 09                	jne    ffff80000080890b <load_pe+0x3fb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:288
            {
                dllp=0x1c00000;
ffff800000808902:	c7 45 cc 00 00 c0 01 	mov    DWORD PTR [rbp-0x34],0x1c00000
ffff800000808909:	eb 3d                	jmp    ffff800000808948 <load_pe+0x438>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:291
            }else{
                //load_pe要记录module的加载
                dlli= load_pe(proc);
ffff80000080890b:	48 8b 85 e8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x318]
ffff800000808912:	48 89 c7             	mov    rdi,rax
ffff800000808915:	48 b8 f8 bc ee ff ff 	movabs rax,0xffffffffffeebcf8
ffff80000080891c:	ff ff ff 
ffff80000080891f:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000808923:	ff d0                	call   rax
ffff800000808925:	89 85 24 ff ff ff    	mov    DWORD PTR [rbp-0xdc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:294
                //dlli=load_library(dllname);
                //这个是线性地址
                dllp=get_module_addr(dlli);
ffff80000080892b:	8b 85 24 ff ff ff    	mov    eax,DWORD PTR [rbp-0xdc]
ffff800000808931:	89 c7                	mov    edi,eax
ffff800000808933:	49 89 df             	mov    r15,rbx
ffff800000808936:	48 b8 05 c6 ee ff ff 	movabs rax,0xffffffffffeec605
ffff80000080893d:	ff ff ff 
ffff800000808940:	48 01 d8             	add    rax,rbx
ffff800000808943:	ff d0                	call   rax
ffff800000808945:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:297
            }
            //从线性地址查页表找到物理地址
            PIMAGE_DOS_HEADER dlldos=dllp;
ffff800000808948:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080894b:	48 98                	cdqe   
ffff80000080894d:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:298
            PIMAGE_NT_HEADERS32 dllnth=dllp+dlldos->e_lfanew;
ffff800000808954:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000808957:	48 63 d0             	movsxd rdx,eax
ffff80000080895a:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
ffff800000808961:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff800000808965:	48 01 d0             	add    rax,rdx
ffff800000808968:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:299
            PIMAGE_EXPORT_DIRECTORY dllexp=(dllnth->OptionalHeader.DataDirectory[0].VirtualAddress+dllp);
ffff80000080896f:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff800000808976:	8b 90 8c 00 00 00    	mov    edx,DWORD PTR [rax+0x8c]
ffff80000080897c:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080897f:	01 d0                	add    eax,edx
ffff800000808981:	89 c0                	mov    eax,eax
ffff800000808983:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:300
            int funcn=dllexp->NumberOfNames;
ffff80000080898a:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff800000808991:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff800000808994:	89 85 04 ff ff ff    	mov    DWORD PTR [rbp-0xfc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:301
            char **fnames=dllexp->AddressOfNames+dllp;
ffff80000080899a:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff8000008089a1:	8b 50 20             	mov    edx,DWORD PTR [rax+0x20]
ffff8000008089a4:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff8000008089a7:	01 d0                	add    eax,edx
ffff8000008089a9:	89 c0                	mov    eax,eax
ffff8000008089ab:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:302
            int *funcaddrs=dllexp->AddressOfFunctions+dllp;
ffff8000008089b2:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff8000008089b9:	8b 50 1c             	mov    edx,DWORD PTR [rax+0x1c]
ffff8000008089bc:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff8000008089bf:	01 d0                	add    eax,edx
ffff8000008089c1:	89 c0                	mov    eax,eax
ffff8000008089c3:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:303
            short *funcords=dllexp->AddressOfNameOrdinals+dllp;
ffff8000008089ca:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff8000008089d1:	8b 50 24             	mov    edx,DWORD PTR [rax+0x24]
ffff8000008089d4:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff8000008089d7:	01 d0                	add    eax,edx
ffff8000008089d9:	89 c0                	mov    eax,eax
ffff8000008089db:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:305
            //寻找nameordinal的base（最小值），里面的数据加上base才是真正的序号
            unsigned int ord_base=dllexp->Base;
ffff8000008089e2:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff8000008089e9:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff8000008089ec:	89 85 e4 fe ff ff    	mov    DWORD PTR [rbp-0x11c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:307
            //开始将导入表IAT的内容更新为函数地址
            unsigned int *iataddrs=impdes->FirstThunk+nbase;//IAT和INT内容一样，只用IAT
ffff8000008089f2:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008089f6:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff8000008089f9:	89 c2                	mov    edx,eax
ffff8000008089fb:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff8000008089ff:	48 01 d0             	add    rax,rdx
ffff800000808a02:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:308
            char **siataddrs=impdes->FirstThunk+nbase;
ffff800000808a06:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000808a0a:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff800000808a0d:	89 c2                	mov    edx,eax
ffff800000808a0f:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000808a13:	48 01 d0             	add    rax,rdx
ffff800000808a16:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:309
            while (*iataddrs)
ffff800000808a1a:	e9 10 01 00 00       	jmp    ffff800000808b2f <load_pe+0x61f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:312
            {
                //判断是序号导入还是名称导入
                if(((unsigned)*iataddrs)&0x80000000)
ffff800000808a1f:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000808a23:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808a25:	85 c0                	test   eax,eax
ffff800000808a27:	79 43                	jns    ffff800000808a6c <load_pe+0x55c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:315
                {
                    //序号导入
                    unsigned int ord=((*iataddrs)&0x7fffffff)-ord_base;
ffff800000808a29:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000808a2d:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808a2f:	25 ff ff ff 7f       	and    eax,0x7fffffff
ffff800000808a34:	2b 85 e4 fe ff ff    	sub    eax,DWORD PTR [rbp-0x11c]
ffff800000808a3a:	89 85 d0 fe ff ff    	mov    DWORD PTR [rbp-0x130],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:316
                    *iataddrs=funcaddrs[ord]+dllp;
ffff800000808a40:	8b 85 d0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x130]
ffff800000808a46:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff800000808a4d:	00 
ffff800000808a4e:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff800000808a55:	48 01 d0             	add    rax,rdx
ffff800000808a58:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000808a5a:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000808a5d:	01 d0                	add    eax,edx
ffff800000808a5f:	89 c2                	mov    edx,eax
ffff800000808a61:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000808a65:	89 10                	mov    DWORD PTR [rax],edx
ffff800000808a67:	e9 b9 00 00 00       	jmp    ffff800000808b25 <load_pe+0x615>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:320
                }else
                {
                    //名称导入
                    char *import_by_name_p=*iataddrs;//指向IMPORT_BY_NAME
ffff800000808a6c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000808a70:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808a72:	89 c0                	mov    eax,eax
ffff800000808a74:	48 89 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:321
                    import_by_name_p+=2;//跳过开头两字节序号
ffff800000808a7b:	48 83 85 d8 fe ff ff 	add    QWORD PTR [rbp-0x128],0x2
ffff800000808a82:	02 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:322
                    int i=0;
ffff800000808a83:	c7 45 b4 00 00 00 00 	mov    DWORD PTR [rbp-0x4c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:323
                    for(;i<funcn;i++)
ffff800000808a8a:	e9 87 00 00 00       	jmp    ffff800000808b16 <load_pe+0x606>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:325
                    {
                        if(strcmp(import_by_name_p,fnames[i])==0)
ffff800000808a8f:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffff800000808a92:	48 98                	cdqe   
ffff800000808a94:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000808a9b:	00 
ffff800000808a9c:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000808aa3:	48 01 d0             	add    rax,rdx
ffff800000808aa6:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808aa9:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
ffff800000808ab0:	48 89 d6             	mov    rsi,rdx
ffff800000808ab3:	48 89 c7             	mov    rdi,rax
ffff800000808ab6:	49 89 df             	mov    r15,rbx
ffff800000808ab9:	48 b8 0e 56 ef ff ff 	movabs rax,0xffffffffffef560e
ffff800000808ac0:	ff ff ff 
ffff800000808ac3:	48 01 d8             	add    rax,rbx
ffff800000808ac6:	ff d0                	call   rax
ffff800000808ac8:	85 c0                	test   eax,eax
ffff800000808aca:	75 46                	jne    ffff800000808b12 <load_pe+0x602>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:327
                        {
                            int ordi=funcords[i];
ffff800000808acc:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffff800000808acf:	48 98                	cdqe   
ffff800000808ad1:	48 8d 14 00          	lea    rdx,[rax+rax*1]
ffff800000808ad5:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
ffff800000808adc:	48 01 d0             	add    rax,rdx
ffff800000808adf:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff800000808ae2:	98                   	cwde   
ffff800000808ae3:	89 85 d4 fe ff ff    	mov    DWORD PTR [rbp-0x12c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:328
                            *iataddrs=funcaddrs[ordi]+dllp;//导入表中的IAT内容修改成地址
ffff800000808ae9:	8b 85 d4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x12c]
ffff800000808aef:	48 98                	cdqe   
ffff800000808af1:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff800000808af8:	00 
ffff800000808af9:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff800000808b00:	48 01 d0             	add    rax,rdx
ffff800000808b03:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000808b05:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000808b08:	01 d0                	add    eax,edx
ffff800000808b0a:	89 c2                	mov    edx,eax
ffff800000808b0c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000808b10:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:323
                    for(;i<funcn;i++)
ffff800000808b12:	83 45 b4 01          	add    DWORD PTR [rbp-0x4c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:323 (discriminator 1)
ffff800000808b16:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffff800000808b19:	3b 85 04 ff ff ff    	cmp    eax,DWORD PTR [rbp-0xfc]
ffff800000808b1f:	0f 8c 6a ff ff ff    	jl     ffff800000808a8f <load_pe+0x57f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:332
                        }
                    }
                }
                iataddrs++;
ffff800000808b25:	48 83 45 c0 04       	add    QWORD PTR [rbp-0x40],0x4
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:333
                siataddrs++;
ffff800000808b2a:	48 83 45 b8 08       	add    QWORD PTR [rbp-0x48],0x8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:309
            while (*iataddrs)
ffff800000808b2f:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000808b33:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808b35:	85 c0                	test   eax,eax
ffff800000808b37:	0f 85 e2 fe ff ff    	jne    ffff800000808a1f <load_pe+0x50f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:335
            }
            impdes++;
ffff800000808b3d:	48 83 45 d0 14       	add    QWORD PTR [rbp-0x30],0x14
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:280
        while (impdes->Characteristics)
ffff800000808b42:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000808b46:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808b48:	85 c0                	test   eax,eax
ffff800000808b4a:	0f 85 6a fd ff ff    	jne    ffff8000008088ba <load_pe+0x3aa>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:342
        }
    }


    //开始重定位
    PIMAGE_BASE_RELOCATION relp=0;
ffff800000808b50:	48 c7 45 a8 00 00 00 	mov    QWORD PTR [rbp-0x58],0x0
ffff800000808b57:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:343
    if(nth->OptionalHeader.DataDirectory[5].Size>0)
ffff800000808b58:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff800000808b5f:	8b 80 b4 00 00 00    	mov    eax,DWORD PTR [rax+0xb4]
ffff800000808b65:	85 c0                	test   eax,eax
ffff800000808b67:	0f 84 ec 00 00 00    	je     ffff800000808c59 <load_pe+0x749>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:345
    {
        relp=(u32)(nth->OptionalHeader.DataDirectory[5].VirtualAddress\
ffff800000808b6d:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff800000808b74:	8b 90 b0 00 00 00    	mov    edx,DWORD PTR [rax+0xb0]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:346
                                +(u32)nbase);
ffff800000808b7a:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:345
        relp=(u32)(nth->OptionalHeader.DataDirectory[5].VirtualAddress\
ffff800000808b7e:	01 d0                	add    eax,edx
ffff800000808b80:	89 c0                	mov    eax,eax
ffff800000808b82:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:347
        u16 *reloc=relp+sizeof(IMAGE_BASE_RELOCATION);
ffff800000808b86:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000808b8a:	48 83 c0 40          	add    rax,0x40
ffff800000808b8e:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:348
        u16 *rtype=reloc+1;
ffff800000808b92:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000808b96:	48 83 c0 02          	add    rax,0x2
ffff800000808b9a:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:349
        int old_base=nth->OptionalHeader.ImageBase;
ffff800000808b9e:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff800000808ba5:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff800000808ba9:	89 85 cc fe ff ff    	mov    DWORD PTR [rbp-0x134],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:350
        while(relp->VirtualAddress){
ffff800000808baf:	e9 97 00 00 00       	jmp    ffff800000808c4b <load_pe+0x73b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:351
            int pgva=relp->VirtualAddress+nbase;
ffff800000808bb4:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000808bb8:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000808bba:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000808bbe:	01 d0                	add    eax,edx
ffff800000808bc0:	89 85 c8 fe ff ff    	mov    DWORD PTR [rbp-0x138],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:352
            for(int i=0;i<relp->SizeOfBlock/4;i++)
ffff800000808bc6:	c7 45 94 00 00 00 00 	mov    DWORD PTR [rbp-0x6c],0x0
ffff800000808bcd:	eb 5a                	jmp    ffff800000808c29 <load_pe+0x719>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:354
            {
                if(*rtype==IMAGE_REL_BASED_ABSOLUTE)continue;//不用重定位
ffff800000808bcf:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000808bd3:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff800000808bd6:	66 85 c0             	test   ax,ax
ffff800000808bd9:	74 49                	je     ffff800000808c24 <load_pe+0x714>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:355
                int *at=*reloc+pgva;//要重定位的数据的地址
ffff800000808bdb:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000808bdf:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff800000808be2:	0f b7 d0             	movzx  edx,ax
ffff800000808be5:	8b 85 c8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x138]
ffff800000808beb:	01 d0                	add    eax,edx
ffff800000808bed:	48 98                	cdqe   
ffff800000808bef:	48 89 85 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:356
                *at=*at-old_base+nbase;
ffff800000808bf6:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
ffff800000808bfd:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808bff:	2b 85 cc fe ff ff    	sub    eax,DWORD PTR [rbp-0x134]
ffff800000808c05:	89 c2                	mov    edx,eax
ffff800000808c07:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000808c0b:	01 d0                	add    eax,edx
ffff800000808c0d:	89 c2                	mov    edx,eax
ffff800000808c0f:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
ffff800000808c16:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:358
                //下一个
                reloc+=2;
ffff800000808c18:	48 83 45 a0 04       	add    QWORD PTR [rbp-0x60],0x4
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:359
                rtype+=2;
ffff800000808c1d:	48 83 45 98 04       	add    QWORD PTR [rbp-0x68],0x4
ffff800000808c22:	eb 01                	jmp    ffff800000808c25 <load_pe+0x715>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:354
                if(*rtype==IMAGE_REL_BASED_ABSOLUTE)continue;//不用重定位
ffff800000808c24:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:352 (discriminator 2)
            for(int i=0;i<relp->SizeOfBlock/4;i++)
ffff800000808c25:	83 45 94 01          	add    DWORD PTR [rbp-0x6c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:352 (discriminator 1)
ffff800000808c29:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000808c2d:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff800000808c30:	c1 e8 02             	shr    eax,0x2
ffff800000808c33:	89 c2                	mov    edx,eax
ffff800000808c35:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
ffff800000808c38:	39 c2                	cmp    edx,eax
ffff800000808c3a:	77 93                	ja     ffff800000808bcf <load_pe+0x6bf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:361
            }
            relp=(int)relp+0x1000;
ffff800000808c3c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000808c40:	05 00 10 00 00       	add    eax,0x1000
ffff800000808c45:	48 98                	cdqe   
ffff800000808c47:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:350
        while(relp->VirtualAddress){
ffff800000808c4b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000808c4f:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808c51:	85 c0                	test   eax,eax
ffff800000808c53:	0f 85 5b ff ff ff    	jne    ffff800000808bb4 <load_pe+0x6a4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:367
        }
    }
    extern struct process task[];
    extern int cur_proc;
    //初始化堆
    chunk_header hdrtmp={
ffff800000808c59:	c7 85 00 fd ff ff 00 	mov    DWORD PTR [rbp-0x300],0x0
ffff800000808c60:	00 00 00 
ffff800000808c63:	c7 85 04 fd ff ff 00 	mov    DWORD PTR [rbp-0x2fc],0x0
ffff800000808c6a:	00 00 00 
ffff800000808c6d:	48 c7 85 08 fd ff ff 	mov    QWORD PTR [rbp-0x2f8],0x0
ffff800000808c74:	00 00 00 00 
ffff800000808c78:	48 c7 85 10 fd ff ff 	mov    QWORD PTR [rbp-0x2f0],0x0
ffff800000808c7f:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:374
            .next=NULL,
            .pgn=0,
            .prev=NULL
    };//空堆
    //拷贝触发页中断然后分配
    memcpy((chunk_header*)HEAP_BASE,&hdrtmp,sizeof(hdrtmp));
ffff800000808c83:	48 8d 85 00 fd ff ff 	lea    rax,[rbp-0x300]
ffff800000808c8a:	ba 18 00 00 00       	mov    edx,0x18
ffff800000808c8f:	48 89 c6             	mov    rsi,rax
ffff800000808c92:	bf 00 00 00 01       	mov    edi,0x1000000
ffff800000808c97:	49 89 df             	mov    r15,rbx
ffff800000808c9a:	48 b8 bc 52 ef ff ff 	movabs rax,0xffffffffffef52bc
ffff800000808ca1:	ff ff ff 
ffff800000808ca4:	48 01 d8             	add    rax,rbx
ffff800000808ca7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:375
    task[cur_proc].mem_struct.heap_base=HEAP_BASE;
ffff800000808ca9:	48 b8 50 fe ff ff ff 	movabs rax,0xfffffffffffffe50
ffff800000808cb0:	ff ff ff 
ffff800000808cb3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808cb7:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808cb9:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff800000808cc0:	ff ff ff 
ffff800000808cc3:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000808cc7:	48 98                	cdqe   
ffff800000808cc9:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000808cd0:	48 01 d0             	add    rax,rdx
ffff800000808cd3:	48 83 c0 20          	add    rax,0x20
ffff800000808cd7:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x1000000
ffff800000808cde:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:376
    task[cur_proc].mem_struct.heap_top=HEAP_BASE+CHUNK_SIZE;
ffff800000808cdf:	48 b8 50 fe ff ff ff 	movabs rax,0xfffffffffffffe50
ffff800000808ce6:	ff ff ff 
ffff800000808ce9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808ced:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808cef:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff800000808cf6:	ff ff ff 
ffff800000808cf9:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000808cfd:	48 98                	cdqe   
ffff800000808cff:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000808d06:	48 01 d0             	add    rax,rdx
ffff800000808d09:	48 83 c0 20          	add    rax,0x20
ffff800000808d0d:	48 c7 40 10 00 10 00 	mov    QWORD PTR [rax+0x10],0x1001000
ffff800000808d14:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:378
    //设置栈
    task[cur_proc].mem_struct.stack_top=STACK_TOP;
ffff800000808d15:	48 b8 50 fe ff ff ff 	movabs rax,0xfffffffffffffe50
ffff800000808d1c:	ff ff ff 
ffff800000808d1f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808d23:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808d25:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff800000808d2c:	ff ff ff 
ffff800000808d2f:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000808d33:	48 98                	cdqe   
ffff800000808d35:	48 69 c0 54 03 00 00 	imul   rax,rax,0x354
ffff800000808d3c:	48 01 d0             	add    rax,rdx
ffff800000808d3f:	48 83 c0 30          	add    rax,0x30
ffff800000808d43:	48 be 00 f0 ff ff ff 	movabs rsi,0x7ffffffff000
ffff800000808d4a:	7f 00 00 
ffff800000808d4d:	48 89 70 10          	mov    QWORD PTR [rax+0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:385


    //完毕,调用入口函数
    //重定位完毕，准备调用DllMain
    typedef int (*Main)(int,void*);
    Main main=shell_addr;
ffff800000808d51:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
ffff800000808d58:	48 89 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:386
    int ecode=main(0,NULL);
ffff800000808d5f:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
ffff800000808d66:	be 00 00 00 00       	mov    esi,0x0
ffff800000808d6b:	bf 00 00 00 00       	mov    edi,0x0
ffff800000808d70:	ff d0                	call   rax
ffff800000808d72:	89 85 b4 fe ff ff    	mov    DWORD PTR [rbp-0x14c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:387
    do_syscall(SYSCALL_EXIT,ecode,0,0,0,0,0);
ffff800000808d78:	8b 85 b4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x14c]
ffff800000808d7e:	48 98                	cdqe   
ffff800000808d80:	48 c7 85 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],0x14
ffff800000808d87:	14 00 00 00 
ffff800000808d8b:	48 89 85 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rax
ffff800000808d92:	48 c7 85 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],0x0
ffff800000808d99:	00 00 00 00 
ffff800000808d9d:	48 c7 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],0x0
ffff800000808da4:	00 00 00 00 
ffff800000808da8:	48 c7 85 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],0x0
ffff800000808daf:	00 00 00 00 
ffff800000808db3:	48 c7 85 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],0x0
ffff800000808dba:	00 00 00 00 
ffff800000808dbe:	48 c7 85 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],0x0
ffff800000808dc5:	00 00 00 00 
do_syscall():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:194
        asm volatile(".byte 0x48\n"
ffff800000808dc9:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
ffff800000808dd0:	48 8b bd a0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x160]
ffff800000808dd7:	48 8b b5 98 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x168]
ffff800000808dde:	48 8b 95 90 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x170]
ffff800000808de5:	48 8b 8d 88 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x178]
ffff800000808dec:	4c 8b 85 80 fe ff ff 	mov    r8,QWORD PTR [rbp-0x180]
ffff800000808df3:	4c 8b 8d 78 fe ff ff 	mov    r9,QWORD PTR [rbp-0x188]
ffff800000808dfa:	48 0f 05             	rex.W syscall 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:196
        long ret=0;
ffff800000808dfd:	48 c7 85 f8 fc ff ff 	mov    QWORD PTR [rbp-0x308],0x0
ffff800000808e04:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:197
        asm volatile("mov %%rax,%0"::"m"(ret));
ffff800000808e08:	48 89 85 f8 fc ff ff 	mov    QWORD PTR [rbp-0x308],rax
load_pe():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:390 (discriminator 1)
    //
    //不应该执行到这
    while(1);
ffff800000808e0f:	eb fe                	jmp    ffff800000808e0f <load_pe+0x8ff>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:392 (discriminator 2)
    return task[cur_proc].exit_code;
}
ffff800000808e11:	48 81 c4 10 03 00 00 	add    rsp,0x310
ffff800000808e18:	5b                   	pop    rbx
ffff800000808e19:	41 5f                	pop    r15
ffff800000808e1b:	5d                   	pop    rbp
ffff800000808e1c:	c3                   	ret    

ffff800000808e1d <get_module_addr>:
get_module_addr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:395

int get_module_addr(int mi)
{
ffff800000808e1d:	f3 0f 1e fa          	endbr64 
ffff800000808e21:	55                   	push   rbp
ffff800000808e22:	48 89 e5             	mov    rbp,rsp
ffff800000808e25:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000808e25 <get_module_addr+0x8>
ffff800000808e2c:	49 bb f3 39 11 00 00 	movabs r11,0x1139f3
ffff800000808e33:	00 00 00 
ffff800000808e36:	4c 01 d8             	add    rax,r11
ffff800000808e39:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:396
    return modules[mi].base;
ffff800000808e3c:	48 ba 20 fe ff ff ff 	movabs rdx,0xfffffffffffffe20
ffff800000808e43:	ff ff ff 
ffff800000808e46:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000808e4a:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000808e4d:	48 63 d2             	movsxd rdx,edx
ffff800000808e50:	8b 04 d0             	mov    eax,DWORD PTR [rax+rdx*8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:397
}
ffff800000808e53:	5d                   	pop    rbp
ffff800000808e54:	c3                   	ret    

ffff800000808e55 <dispose_library>:
dispose_library():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:399
int dispose_library(int dlln)
{
ffff800000808e55:	f3 0f 1e fa          	endbr64 
ffff800000808e59:	55                   	push   rbp
ffff800000808e5a:	48 89 e5             	mov    rbp,rsp
ffff800000808e5d:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000808e5d <dispose_library+0x8>
ffff800000808e64:	49 bb bb 39 11 00 00 	movabs r11,0x1139bb
ffff800000808e6b:	00 00 00 
ffff800000808e6e:	4c 01 d8             	add    rax,r11
ffff800000808e71:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:400
    if(dlln<0||dlln>=MAX_DLLS)return -1;
ffff800000808e74:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
ffff800000808e78:	78 09                	js     ffff800000808e83 <dispose_library+0x2e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:400 (discriminator 2)
ffff800000808e7a:	81 7d fc ff 00 00 00 	cmp    DWORD PTR [rbp-0x4],0xff
ffff800000808e81:	7e 07                	jle    ffff800000808e8a <dispose_library+0x35>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:400 (discriminator 3)
ffff800000808e83:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000808e88:	eb 2c                	jmp    ffff800000808eb6 <dispose_library+0x61>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:405
    //空间不够，释放之前申请的
    // for(int j=0;j<dlls[dlln].page_used;j++)
    //     dispose_page(get_phyaddr(dlls[dlln].page_num[j]));
    //释放dll
    dlls[dlln].flag=DLL_STAT_EMPTY;
ffff800000808e8a:	48 ba 10 ff ff ff ff 	movabs rdx,0xffffffffffffff10
ffff800000808e91:	ff ff ff 
ffff800000808e94:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000808e98:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000808e9b:	48 98                	cdqe   
ffff800000808e9d:	48 69 c0 2c 01 00 00 	imul   rax,rax,0x12c
ffff800000808ea4:	48 01 d0             	add    rax,rdx
ffff800000808ea7:	48 83 c0 08          	add    rax,0x8
ffff800000808eab:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:406
    return 0;
ffff800000808eb1:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:407
}
ffff800000808eb6:	5d                   	pop    rbp
ffff800000808eb7:	c3                   	ret    

ffff800000808eb8 <sys_insmod>:
sys_insmod():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:455

    return 0;
} */

int sys_insmod(char *path)
{
ffff800000808eb8:	f3 0f 1e fa          	endbr64 
ffff800000808ebc:	55                   	push   rbp
ffff800000808ebd:	48 89 e5             	mov    rbp,rsp
ffff800000808ec0:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000808ec0 <sys_insmod+0x8>
ffff800000808ec7:	49 bb 58 39 11 00 00 	movabs r11,0x113958
ffff800000808ece:	00 00 00 
ffff800000808ed1:	4c 01 d8             	add    rax,r11
ffff800000808ed4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:457

}
ffff800000808ed8:	90                   	nop
ffff800000808ed9:	5d                   	pop    rbp
ffff800000808eda:	c3                   	ret    

ffff800000808edb <sys_rmmod>:
sys_rmmod():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:459
int sys_rmmod(char *name)
{
ffff800000808edb:	f3 0f 1e fa          	endbr64 
ffff800000808edf:	55                   	push   rbp
ffff800000808ee0:	48 89 e5             	mov    rbp,rsp
ffff800000808ee3:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000808ee3 <sys_rmmod+0x8>
ffff800000808eea:	49 bb 35 39 11 00 00 	movabs r11,0x113935
ffff800000808ef1:	00 00 00 
ffff800000808ef4:	4c 01 d8             	add    rax,r11
ffff800000808ef7:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:461

}
ffff800000808efb:	90                   	nop
ffff800000808efc:	5d                   	pop    rbp
ffff800000808efd:	c3                   	ret    

ffff800000808efe <load_elf>:
load_elf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:463
//切换进程前,在execve系统调用中
addr_t load_elf(struct file *elf) {
ffff800000808efe:	f3 0f 1e fa          	endbr64 
ffff800000808f02:	55                   	push   rbp
ffff800000808f03:	48 89 e5             	mov    rbp,rsp
ffff800000808f06:	41 57                	push   r15
ffff800000808f08:	53                   	push   rbx
ffff800000808f09:	48 81 ec b0 00 00 00 	sub    rsp,0xb0
ffff800000808f10:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000808f10 <load_elf+0x12>
ffff800000808f17:	49 bb 08 39 11 00 00 	movabs r11,0x113908
ffff800000808f1e:	00 00 00 
ffff800000808f21:	4c 01 db             	add    rbx,r11
ffff800000808f24:	48 89 bd 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:466
    // 读取文件头

    addr_t tmpla=KNL_BASE+0x80000000;
ffff800000808f2b:	48 b8 00 00 00 80 00 	movabs rax,0xffff800080000000
ffff800000808f32:	80 ff ff 
ffff800000808f35:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:468
    //读取文件头，当前就是要加载程序的进程，所以不用搞临时映射
    addr_t pma= (addr_t) pmalloc();
ffff800000808f39:	49 89 df             	mov    r15,rbx
ffff800000808f3c:	b8 00 00 00 00       	mov    eax,0x0
ffff800000808f41:	48 ba d6 63 ee ff ff 	movabs rdx,0xffffffffffee63d6
ffff800000808f48:	ff ff ff 
ffff800000808f4b:	48 01 da             	add    rdx,rbx
ffff800000808f4e:	ff d2                	call   rdx
ffff800000808f50:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:469
    if(pma==-1)
ffff800000808f54:	48 83 7d c8 ff       	cmp    QWORD PTR [rbp-0x38],0xffffffffffffffff
ffff800000808f59:	75 28                	jne    ffff800000808f83 <load_elf+0x85>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:471
    {
        current->regs.errcode=-ENOMEM;
ffff800000808f5b:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000808f62:	ff ff ff 
ffff800000808f65:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808f69:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808f6c:	48 c7 80 2c 03 00 00 	mov    QWORD PTR [rax+0x32c],0xffffffffffffffcf
ffff800000808f73:	cf ff ff ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:472
        return -1;
ffff800000808f77:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff800000808f7e:	e9 7e 03 00 00       	jmp    ffff800000809301 <load_elf+0x403>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:474
    }
    smmap(pma , 0x400000, PAGE_PRESENT | PAGE_RWX | PAGE_FOR_ALL, current->pml4);
ffff800000808f83:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000808f8a:	ff ff ff 
ffff800000808f8d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808f91:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808f94:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff800000808f9b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000808f9f:	48 89 d1             	mov    rcx,rdx
ffff800000808fa2:	ba 07 00 00 00       	mov    edx,0x7
ffff800000808fa7:	be 00 00 40 00       	mov    esi,0x400000
ffff800000808fac:	48 89 c7             	mov    rdi,rax
ffff800000808faf:	49 89 df             	mov    r15,rbx
ffff800000808fb2:	48 b8 9c 52 ee ff ff 	movabs rax,0xffffffffffee529c
ffff800000808fb9:	ff ff ff 
ffff800000808fbc:	48 01 d8             	add    rax,rbx
ffff800000808fbf:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:475
    elf->position=0;
ffff800000808fc1:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000808fc8:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:477
    //读取文件头
    elf->f_ops->read(elf, (char *) 0x400000, PAGE_4K_SIZE, &elf->position);
ffff800000808fcf:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000808fd6:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000808fda:	4c 8b 40 10          	mov    r8,QWORD PTR [rax+0x10]
ffff800000808fde:	48 8b 95 48 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb8]
ffff800000808fe5:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000808fec:	48 89 d1             	mov    rcx,rdx
ffff800000808fef:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000808ff4:	be 00 00 40 00       	mov    esi,0x400000
ffff800000808ff9:	48 89 c7             	mov    rdi,rax
ffff800000808ffc:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:479

    unsigned long bin= (unsigned long) 0x400000;
ffff800000808fff:	48 c7 45 c0 00 00 40 	mov    QWORD PTR [rbp-0x40],0x400000
ffff800000809006:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:480
    Elf64_Ehdr *ehdr=(Elf64_Phdr*)bin;
ffff800000809007:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080900b:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:481
    u16 entn=ehdr->e_phnum;
ffff80000080900f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000809013:	0f b7 40 38          	movzx  eax,WORD PTR [rax+0x38]
ffff800000809017:	66 89 45 b6          	mov    WORD PTR [rbp-0x4a],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:482
    u16 ents=ehdr->e_phentsize;
ffff80000080901b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080901f:	0f b7 40 36          	movzx  eax,WORD PTR [rax+0x36]
ffff800000809023:	66 89 45 b4          	mov    WORD PTR [rbp-0x4c],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:483
    struct Elf64_Shdr* sh= (struct Elf64_Shdr *) (bin + ehdr->e_shoff);
ffff800000809027:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080902b:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
ffff80000080902f:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000809033:	48 01 d0             	add    rax,rdx
ffff800000809036:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:484
    Elf64_Phdr *ph= (Elf64_Phdr *) (bin + ehdr->e_phoff);
ffff80000080903a:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080903e:	48 8b 50 20          	mov    rdx,QWORD PTR [rax+0x20]
ffff800000809042:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000809046:	48 01 d0             	add    rax,rdx
ffff800000809049:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:485
    for(int i=0;i<entn;i++){
ffff80000080904d:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff800000809054:	e9 67 01 00 00       	jmp    ffff8000008091c0 <load_elf+0x2c2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:488
        //加载节
        if((ph->p_type|PT_LOAD)!=0){
            unsigned long off=ph->p_offset;
ffff800000809059:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080905d:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000809061:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:489
            unsigned long fs=ph->p_filesz;
ffff800000809065:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000809069:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000080906d:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:490
            char* vptr= (char *) ph->p_vaddr;
ffff800000809071:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000809075:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000809079:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:491
            elf->position=off;
ffff80000080907d:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
ffff800000809081:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000809088:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:494

            //先映射好内存
            int attr=PAGE_PRESENT|PAGE_FOR_ALL;
ffff80000080908b:	c7 85 7c ff ff ff 05 	mov    DWORD PTR [rbp-0x84],0x5
ffff800000809092:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:496
            if((ph->p_flags|PF_X)!=0||(ph->p_flags|PF_W)!=0)
                attr|=PAGE_RWX;
ffff800000809095:	83 8d 7c ff ff ff 02 	or     DWORD PTR [rbp-0x84],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:497
            int pgc=fs/PAGE_4K_SIZE;
ffff80000080909c:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff8000008090a0:	48 c1 e8 0c          	shr    rax,0xc
ffff8000008090a4:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:498
            if(!pgc)pgc=1;
ffff8000008090a7:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
ffff8000008090ab:	75 07                	jne    ffff8000008090b4 <load_elf+0x1b6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:498 (discriminator 1)
ffff8000008090ad:	c7 45 e0 01 00 00 00 	mov    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:499
            for(int j=0;j<pgc;j++){
ffff8000008090b4:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
ffff8000008090bb:	e9 c0 00 00 00       	jmp    ffff800000809180 <load_elf+0x282>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:500
                addr_t dest=(addr_t) (vptr + j * PAGE_4K_SIZE);
ffff8000008090c0:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008090c3:	c1 e0 0c             	shl    eax,0xc
ffff8000008090c6:	48 63 d0             	movsxd rdx,eax
ffff8000008090c9:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff8000008090cd:	48 01 d0             	add    rax,rdx
ffff8000008090d0:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:501
                if(dest==0x400000)continue;
ffff8000008090d7:	48 81 bd 70 ff ff ff 	cmp    QWORD PTR [rbp-0x90],0x400000
ffff8000008090de:	00 00 40 00 
ffff8000008090e2:	0f 84 93 00 00 00    	je     ffff80000080917b <load_elf+0x27d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:502
                addr_t lma=pmalloc();
ffff8000008090e8:	49 89 df             	mov    r15,rbx
ffff8000008090eb:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008090f0:	48 ba d6 63 ee ff ff 	movabs rdx,0xffffffffffee63d6
ffff8000008090f7:	ff ff ff 
ffff8000008090fa:	48 01 da             	add    rdx,rbx
ffff8000008090fd:	ff d2                	call   rdx
ffff8000008090ff:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:503
                if(lma==-1)
ffff800000809106:	48 83 bd 68 ff ff ff 	cmp    QWORD PTR [rbp-0x98],0xffffffffffffffff
ffff80000080910d:	ff 
ffff80000080910e:	75 28                	jne    ffff800000809138 <load_elf+0x23a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:505
                {
                    current->regs.errcode=-ENOMEM;
ffff800000809110:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000809117:	ff ff ff 
ffff80000080911a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080911e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809121:	48 c7 80 2c 03 00 00 	mov    QWORD PTR [rax+0x32c],0xffffffffffffffcf
ffff800000809128:	cf ff ff ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:506
                    return -1;
ffff80000080912c:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff800000809133:	e9 c9 01 00 00       	jmp    ffff800000809301 <load_elf+0x403>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:508
                }
                smmap(lma , dest, attr, current->pml4);
ffff800000809138:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff80000080913f:	ff ff ff 
ffff800000809142:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809146:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809149:	48 8b 88 e0 00 00 00 	mov    rcx,QWORD PTR [rax+0xe0]
ffff800000809150:	8b 95 7c ff ff ff    	mov    edx,DWORD PTR [rbp-0x84]
ffff800000809156:	48 8b b5 70 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x90]
ffff80000080915d:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff800000809164:	48 89 c7             	mov    rdi,rax
ffff800000809167:	49 89 df             	mov    r15,rbx
ffff80000080916a:	48 b8 9c 52 ee ff ff 	movabs rax,0xffffffffffee529c
ffff800000809171:	ff ff ff 
ffff800000809174:	48 01 d8             	add    rax,rbx
ffff800000809177:	ff d0                	call   rax
ffff800000809179:	eb 01                	jmp    ffff80000080917c <load_elf+0x27e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:501
                if(dest==0x400000)continue;
ffff80000080917b:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:499 (discriminator 2)
            for(int j=0;j<pgc;j++){
ffff80000080917c:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:499 (discriminator 1)
ffff800000809180:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000809183:	3b 45 e0             	cmp    eax,DWORD PTR [rbp-0x20]
ffff800000809186:	0f 8c 34 ff ff ff    	jl     ffff8000008090c0 <load_elf+0x1c2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:511
            }
            //读取
            elf->f_ops->read(elf,vptr,fs,&elf->position);
ffff80000080918c:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000809193:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000809197:	4c 8b 40 10          	mov    r8,QWORD PTR [rax+0x10]
ffff80000080919b:	48 8b 8d 48 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb8]
ffff8000008091a2:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
ffff8000008091a6:	48 8b 75 80          	mov    rsi,QWORD PTR [rbp-0x80]
ffff8000008091aa:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff8000008091b1:	48 89 c7             	mov    rdi,rax
ffff8000008091b4:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:514

        }
        ph++;
ffff8000008091b7:	48 83 45 e8 38       	add    QWORD PTR [rbp-0x18],0x38
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:485
    for(int i=0;i<entn;i++){
ffff8000008091bc:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:485 (discriminator 1)
ffff8000008091c0:	0f b7 45 b6          	movzx  eax,WORD PTR [rbp-0x4a]
ffff8000008091c4:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff8000008091c7:	0f 8c 8c fe ff ff    	jl     ffff800000809059 <load_elf+0x15b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:517
    }
    //初始化堆
    chunk_header hdrtmp={
ffff8000008091cd:	c7 85 50 ff ff ff 00 	mov    DWORD PTR [rbp-0xb0],0x0
ffff8000008091d4:	00 00 00 
ffff8000008091d7:	c7 85 54 ff ff ff 00 	mov    DWORD PTR [rbp-0xac],0x0
ffff8000008091de:	00 00 00 
ffff8000008091e1:	48 c7 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],0x0
ffff8000008091e8:	00 00 00 00 
ffff8000008091ec:	48 c7 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],0x0
ffff8000008091f3:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:525
            .pgn=0,
            .prev=NULL
    };
    //空堆
    //分配堆
    addr_t lma=pmalloc();
ffff8000008091f7:	49 89 df             	mov    r15,rbx
ffff8000008091fa:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008091ff:	48 ba d6 63 ee ff ff 	movabs rdx,0xffffffffffee63d6
ffff800000809206:	ff ff ff 
ffff800000809209:	48 01 da             	add    rdx,rbx
ffff80000080920c:	ff d2                	call   rdx
ffff80000080920e:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:526
    if(lma==-1)
ffff800000809212:	48 83 7d a0 ff       	cmp    QWORD PTR [rbp-0x60],0xffffffffffffffff
ffff800000809217:	75 28                	jne    ffff800000809241 <load_elf+0x343>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:528
    {
        current->regs.errcode=-ENOMEM;
ffff800000809219:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000809220:	ff ff ff 
ffff800000809223:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809227:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080922a:	48 c7 80 2c 03 00 00 	mov    QWORD PTR [rax+0x32c],0xffffffffffffffcf
ffff800000809231:	cf ff ff ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:529
        return -1;
ffff800000809235:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff80000080923c:	e9 c0 00 00 00       	jmp    ffff800000809301 <load_elf+0x403>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:531
    }
    smmap(lma, HEAP_BASE, PAGE_PRESENT | PAGE_FOR_ALL | PAGE_RWX, current->pml4);
ffff800000809241:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff800000809248:	ff ff ff 
ffff80000080924b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080924f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809252:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff800000809259:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080925d:	48 89 d1             	mov    rcx,rdx
ffff800000809260:	ba 07 00 00 00       	mov    edx,0x7
ffff800000809265:	be 00 00 00 01       	mov    esi,0x1000000
ffff80000080926a:	48 89 c7             	mov    rdi,rax
ffff80000080926d:	49 89 df             	mov    r15,rbx
ffff800000809270:	48 b8 9c 52 ee ff ff 	movabs rax,0xffffffffffee529c
ffff800000809277:	ff ff ff 
ffff80000080927a:	48 01 d8             	add    rax,rbx
ffff80000080927d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:532
    memset((unsigned char *) HEAP_BASE, 0, CHUNK_SIZE);
ffff80000080927f:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000809284:	be 00 00 00 00       	mov    esi,0x0
ffff800000809289:	bf 00 00 00 01       	mov    edi,0x1000000
ffff80000080928e:	49 89 df             	mov    r15,rbx
ffff800000809291:	48 b8 6b 53 ef ff ff 	movabs rax,0xffffffffffef536b
ffff800000809298:	ff ff ff 
ffff80000080929b:	48 01 d8             	add    rax,rbx
ffff80000080929e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:533
    current->mem_struct.heap_base=HEAP_BASE;
ffff8000008092a0:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff8000008092a7:	ff ff ff 
ffff8000008092aa:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008092ae:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008092b1:	48 c7 40 28 00 00 00 	mov    QWORD PTR [rax+0x28],0x1000000
ffff8000008092b8:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:534
    current->mem_struct.heap_top=HEAP_BASE+CHUNK_SIZE;
ffff8000008092b9:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff8000008092c0:	ff ff ff 
ffff8000008092c3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008092c7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008092ca:	48 c7 40 30 00 10 00 	mov    QWORD PTR [rax+0x30],0x1001000
ffff8000008092d1:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:536
    //设置栈
    current->mem_struct.stack_top=STACK_TOP;
ffff8000008092d2:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff8000008092d9:	ff ff ff 
ffff8000008092dc:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008092e0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008092e3:	48 bf 00 f0 ff ff ff 	movabs rdi,0x7ffffffff000
ffff8000008092ea:	7f 00 00 
ffff8000008092ed:	48 89 78 40          	mov    QWORD PTR [rax+0x40],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:537
    addr_t entry=ehdr->e_entry;
ffff8000008092f1:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008092f5:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff8000008092f9:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:539
    //从系统调用返回
    return entry;
ffff8000008092fd:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:540 (discriminator 1)
ffff800000809301:	48 81 c4 b0 00 00 00 	add    rsp,0xb0
ffff800000809308:	5b                   	pop    rbx
ffff800000809309:	41 5f                	pop    r15
ffff80000080930b:	5d                   	pop    rbp
ffff80000080930c:	c3                   	ret    
ffff80000080930d:	0f 1f 00             	nop    DWORD PTR [rax]

ffff800000809310 <_syscall>:
_syscall():
ffff800000809310:	55                   	push   rbp
ffff800000809311:	48 bd 00 80 10 00 00 	movabs rbp,0xffff800000108000
ffff800000809318:	80 ff ff 
ffff80000080931b:	48 89 65 14          	mov    QWORD PTR [rbp+0x14],rsp
ffff80000080931f:	48 8b 65 24          	mov    rsp,QWORD PTR [rbp+0x24]
ffff800000809323:	6a 2b                	push   0x2b
ffff800000809325:	54                   	push   rsp
ffff800000809326:	9c                   	pushf  
ffff800000809327:	6a 33                	push   0x33
ffff800000809329:	51                   	push   rcx
ffff80000080932a:	50                   	push   rax
ffff80000080932b:	53                   	push   rbx
ffff80000080932c:	51                   	push   rcx
ffff80000080932d:	52                   	push   rdx
ffff80000080932e:	57                   	push   rdi
ffff80000080932f:	56                   	push   rsi
ffff800000809330:	41 50                	push   r8
ffff800000809332:	41 51                	push   r9
ffff800000809334:	41 52                	push   r10
ffff800000809336:	41 53                	push   r11
ffff800000809338:	41 54                	push   r12
ffff80000080933a:	41 55                	push   r13
ffff80000080933c:	41 56                	push   r14
ffff80000080933e:	41 57                	push   r15
ffff800000809340:	66 8c c0             	mov    ax,es
ffff800000809343:	50                   	push   rax
ffff800000809344:	66 8c d8             	mov    ax,ds
ffff800000809347:	50                   	push   rax
ffff800000809348:	66 b8 10 00          	mov    ax,0x10
ffff80000080934c:	8e c0                	mov    es,eax
ffff80000080934e:	8e d8                	mov    ds,eax
ffff800000809350:	48 8b 44 24 78       	mov    rax,QWORD PTR [rsp+0x78]
ffff800000809355:	41 53                	push   r11
ffff800000809357:	51                   	push   rcx
ffff800000809358:	49 87 ca             	xchg   r10,rcx
ffff80000080935b:	57                   	push   rdi
ffff80000080935c:	48 bf e8 02 40 00 00 	movabs rdi,0xffff8000004002e8
ffff800000809363:	80 ff ff 
ffff800000809366:	48 8b 3f             	mov    rdi,QWORD PTR [rdi]
ffff800000809369:	4c 89 97 6c 02 00 00 	mov    QWORD PTR [rdi+0x26c],r10
ffff800000809370:	5f                   	pop    rdi
ffff800000809371:	e8 ab 77 ff ff       	call   ffff800000800b21 <syscall>

ffff800000809376 <_syscall_sysret>:
_syscall_sysret():
ffff800000809376:	4c 87 d1             	xchg   rcx,r10
ffff800000809379:	59                   	pop    rcx
ffff80000080937a:	41 5b                	pop    r11
ffff80000080937c:	58                   	pop    rax
ffff80000080937d:	8e d8                	mov    ds,eax
ffff80000080937f:	58                   	pop    rax
ffff800000809380:	8e c0                	mov    es,eax
ffff800000809382:	41 5f                	pop    r15
ffff800000809384:	41 5e                	pop    r14
ffff800000809386:	41 5d                	pop    r13
ffff800000809388:	41 5c                	pop    r12
ffff80000080938a:	41 5b                	pop    r11
ffff80000080938c:	41 5a                	pop    r10
ffff80000080938e:	41 59                	pop    r9
ffff800000809390:	41 58                	pop    r8
ffff800000809392:	5e                   	pop    rsi
ffff800000809393:	5f                   	pop    rdi
ffff800000809394:	5a                   	pop    rdx
ffff800000809395:	59                   	pop    rcx
ffff800000809396:	5b                   	pop    rbx
ffff800000809397:	48 83 c4 08          	add    rsp,0x8
ffff80000080939b:	48 8b 65 14          	mov    rsp,QWORD PTR [rbp+0x14]
ffff80000080939f:	5d                   	pop    rbp
ffff8000008093a0:	fb                   	sti    
ffff8000008093a1:	48 0f 07             	sysretq 

ffff8000008093a4 <init_framebuffer>:
init_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:27
static u32 font_width_bytes;
static u8 *glyph_table;
static u32 bytes_per_glyph, glyph_nr;
int font_size=1;
void init_framebuffer()
{
ffff8000008093a4:	f3 0f 1e fa          	endbr64 
ffff8000008093a8:	55                   	push   rbp
ffff8000008093a9:	48 89 e5             	mov    rbp,rsp
ffff8000008093ac:	41 57                	push   r15
ffff8000008093ae:	53                   	push   rbx
ffff8000008093af:	48 83 ec 50          	sub    rsp,0x50
ffff8000008093b3:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008093b3 <init_framebuffer+0xf>
ffff8000008093ba:	49 bb 65 34 11 00 00 	movabs r11,0x113465
ffff8000008093c1:	00 00 00 
ffff8000008093c4:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:29
    //映射页帧内存
    size_t w=framebuffer.common.framebuffer_width;
ffff8000008093c7:	48 b8 f8 fe ff ff ff 	movabs rax,0xfffffffffffffef8
ffff8000008093ce:	ff ff ff 
ffff8000008093d1:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008093d5:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
ffff8000008093d8:	89 c0                	mov    eax,eax
ffff8000008093da:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:30
    size_t h=framebuffer.common.framebuffer_height;
ffff8000008093de:	48 b8 f8 fe ff ff ff 	movabs rax,0xfffffffffffffef8
ffff8000008093e5:	ff ff ff 
ffff8000008093e8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008093ec:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff8000008093ef:	89 c0                	mov    eax,eax
ffff8000008093f1:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:31
    size_t bypp=framebuffer.common.framebuffer_bpp/8;
ffff8000008093f5:	48 b8 f8 fe ff ff ff 	movabs rax,0xfffffffffffffef8
ffff8000008093fc:	ff ff ff 
ffff8000008093ff:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809403:	0f b6 40 1c          	movzx  eax,BYTE PTR [rax+0x1c]
ffff800000809407:	c0 e8 03             	shr    al,0x3
ffff80000080940a:	0f b6 c0             	movzx  eax,al
ffff80000080940d:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:32
    size_t inter=framebuffer.common.framebuffer_pitch;
ffff800000809411:	48 b8 f8 fe ff ff ff 	movabs rax,0xfffffffffffffef8
ffff800000809418:	ff ff ff 
ffff80000080941b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080941f:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff800000809422:	89 c0                	mov    eax,eax
ffff800000809424:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:33
    size_t pc=w*h;
ffff800000809428:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080942c:	48 0f af 45 c8       	imul   rax,QWORD PTR [rbp-0x38]
ffff800000809431:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:34
    size_t size=h*inter;
ffff800000809435:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000809439:	48 0f af 45 b8       	imul   rax,QWORD PTR [rbp-0x48]
ffff80000080943e:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:35
    int pgc=size/PAGE_SIZE;
ffff800000809442:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000809446:	48 c1 e8 0c          	shr    rax,0xc
ffff80000080944a:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:36
    addr_t p=FRAMEBUFFER_ADDR;
ffff80000080944d:	48 b8 00 00 00 40 00 	movabs rax,0xffff800040000000
ffff800000809454:	80 ff ff 
ffff800000809457:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:37
    addr_t pp=framebuffer.common.framebuffer_addr;
ffff80000080945b:	48 b8 f8 fe ff ff ff 	movabs rax,0xfffffffffffffef8
ffff800000809462:	ff ff ff 
ffff800000809465:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809469:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080946d:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:38
    for (size_t i = 0; i < pgc; i++)
ffff800000809471:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff800000809478:	00 
ffff800000809479:	eb 44                	jmp    ffff8000008094bf <init_framebuffer+0x11b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:40 (discriminator 3)
    {
        smmap(pp,p,PAGE_PRESENT|PAGE_RWX|PAGE_FOR_ALL,PML4_ADDR);
ffff80000080947b:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
ffff80000080947f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000809483:	48 ba 00 10 10 00 00 	movabs rdx,0xffff800000101000
ffff80000080948a:	80 ff ff 
ffff80000080948d:	48 89 d1             	mov    rcx,rdx
ffff800000809490:	ba 07 00 00 00       	mov    edx,0x7
ffff800000809495:	48 89 c7             	mov    rdi,rax
ffff800000809498:	49 89 df             	mov    r15,rbx
ffff80000080949b:	48 b8 9c 52 ee ff ff 	movabs rax,0xffffffffffee529c
ffff8000008094a2:	ff ff ff 
ffff8000008094a5:	48 01 d8             	add    rax,rbx
ffff8000008094a8:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:41 (discriminator 3)
        pp+=PAGE_SIZE;
ffff8000008094aa:	48 81 45 e0 00 10 00 	add    QWORD PTR [rbp-0x20],0x1000
ffff8000008094b1:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:42 (discriminator 3)
        p+=PAGE_SIZE;
ffff8000008094b2:	48 81 45 e8 00 10 00 	add    QWORD PTR [rbp-0x18],0x1000
ffff8000008094b9:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:38 (discriminator 3)
    for (size_t i = 0; i < pgc; i++)
ffff8000008094ba:	48 83 45 d8 01       	add    QWORD PTR [rbp-0x28],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:38 (discriminator 1)
ffff8000008094bf:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
ffff8000008094c2:	48 98                	cdqe   
ffff8000008094c4:	48 39 45 d8          	cmp    QWORD PTR [rbp-0x28],rax
ffff8000008094c8:	72 b1                	jb     ffff80000080947b <init_framebuffer+0xd7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:46
    }
    
    
}
ffff8000008094ca:	90                   	nop
ffff8000008094cb:	90                   	nop
ffff8000008094cc:	48 83 c4 50          	add    rsp,0x50
ffff8000008094d0:	5b                   	pop    rbx
ffff8000008094d1:	41 5f                	pop    r15
ffff8000008094d3:	5d                   	pop    rbp
ffff8000008094d4:	c3                   	ret    

ffff8000008094d5 <init_font>:
init_font():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:47
void init_font(){
ffff8000008094d5:	f3 0f 1e fa          	endbr64 
ffff8000008094d9:	55                   	push   rbp
ffff8000008094da:	48 89 e5             	mov    rbp,rsp
ffff8000008094dd:	48 8d 0d f9 ff ff ff 	lea    rcx,[rip+0xfffffffffffffff9]        # ffff8000008094dd <init_font+0x8>
ffff8000008094e4:	49 bb 3b 33 11 00 00 	movabs r11,0x11333b
ffff8000008094eb:	00 00 00 
ffff8000008094ee:	4c 01 d9             	add    rcx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:48
    boot_font = (struct psf2_header*) (_binary_res_font_psf_start);
ffff8000008094f1:	48 b8 a8 6b af ff ff 	movabs rax,0xffffffffffaf6ba8
ffff8000008094f8:	ff ff ff 
ffff8000008094fb:	48 ba c0 fd ff ff ff 	movabs rdx,0xfffffffffffffdc0
ffff800000809502:	ff ff ff 
ffff800000809505:	48 8b 14 11          	mov    rdx,QWORD PTR [rcx+rdx*1]
ffff800000809509:	48 89 14 01          	mov    QWORD PTR [rcx+rax*1],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:50

    font_width_bytes = (boot_font->width + 7) / 8;
ffff80000080950d:	48 b8 a8 6b af ff ff 	movabs rax,0xffffffffffaf6ba8
ffff800000809514:	ff ff ff 
ffff800000809517:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080951b:	8b 40 1c             	mov    eax,DWORD PTR [rax+0x1c]
ffff80000080951e:	83 c0 07             	add    eax,0x7
ffff800000809521:	c1 e8 03             	shr    eax,0x3
ffff800000809524:	89 c2                	mov    edx,eax
ffff800000809526:	48 b8 b8 6b af ff ff 	movabs rax,0xffffffffffaf6bb8
ffff80000080952d:	ff ff ff 
ffff800000809530:	89 14 01             	mov    DWORD PTR [rcx+rax*1],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:51
    font_width = font_width_bytes * 8;
ffff800000809533:	48 b8 b8 6b af ff ff 	movabs rax,0xffffffffffaf6bb8
ffff80000080953a:	ff ff ff 
ffff80000080953d:	8b 04 01             	mov    eax,DWORD PTR [rcx+rax*1]
ffff800000809540:	8d 14 c5 00 00 00 00 	lea    edx,[rax*8+0x0]
ffff800000809547:	48 b8 b0 6b af ff ff 	movabs rax,0xffffffffffaf6bb0
ffff80000080954e:	ff ff ff 
ffff800000809551:	89 14 01             	mov    DWORD PTR [rcx+rax*1],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:52
    font_height = boot_font->height;
ffff800000809554:	48 b8 a8 6b af ff ff 	movabs rax,0xffffffffffaf6ba8
ffff80000080955b:	ff ff ff 
ffff80000080955e:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff800000809562:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff800000809565:	48 ba b4 6b af ff ff 	movabs rdx,0xffffffffffaf6bb4
ffff80000080956c:	ff ff ff 
ffff80000080956f:	89 04 11             	mov    DWORD PTR [rcx+rdx*1],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:54

    glyph_table = (u8*)(_binary_res_font_psf_start)+boot_font->header_size;
ffff800000809572:	48 b8 a8 6b af ff ff 	movabs rax,0xffffffffffaf6ba8
ffff800000809579:	ff ff ff 
ffff80000080957c:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff800000809580:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000809583:	89 c2                	mov    edx,eax
ffff800000809585:	48 b8 c0 fd ff ff ff 	movabs rax,0xfffffffffffffdc0
ffff80000080958c:	ff ff ff 
ffff80000080958f:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff800000809593:	48 01 c2             	add    rdx,rax
ffff800000809596:	48 b8 c0 6b af ff ff 	movabs rax,0xffffffffffaf6bc0
ffff80000080959d:	ff ff ff 
ffff8000008095a0:	48 89 14 01          	mov    QWORD PTR [rcx+rax*1],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:55
    glyph_nr = boot_font->glyph_nr;
ffff8000008095a4:	48 b8 a8 6b af ff ff 	movabs rax,0xffffffffffaf6ba8
ffff8000008095ab:	ff ff ff 
ffff8000008095ae:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff8000008095b2:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff8000008095b5:	48 ba cc 6b af ff ff 	movabs rdx,0xffffffffffaf6bcc
ffff8000008095bc:	ff ff ff 
ffff8000008095bf:	89 04 11             	mov    DWORD PTR [rcx+rdx*1],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:56
    bytes_per_glyph = boot_font->bytes_per_glyph;
ffff8000008095c2:	48 b8 a8 6b af ff ff 	movabs rax,0xffffffffffaf6ba8
ffff8000008095c9:	ff ff ff 
ffff8000008095cc:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff8000008095d0:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
ffff8000008095d3:	48 ba c8 6b af ff ff 	movabs rdx,0xffffffffffaf6bc8
ffff8000008095da:	ff ff ff 
ffff8000008095dd:	89 04 11             	mov    DWORD PTR [rcx+rdx*1],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:58

    fb_cursor_x = fb_cursor_y = 0;
ffff8000008095e0:	48 b8 98 6b af ff ff 	movabs rax,0xffffffffffaf6b98
ffff8000008095e7:	ff ff ff 
ffff8000008095ea:	c7 04 01 00 00 00 00 	mov    DWORD PTR [rcx+rax*1],0x0
ffff8000008095f1:	48 b8 98 6b af ff ff 	movabs rax,0xffffffffffaf6b98
ffff8000008095f8:	ff ff ff 
ffff8000008095fb:	8b 04 01             	mov    eax,DWORD PTR [rcx+rax*1]
ffff8000008095fe:	48 ba 94 6b af ff ff 	movabs rdx,0xffffffffffaf6b94
ffff800000809605:	ff ff ff 
ffff800000809608:	89 04 11             	mov    DWORD PTR [rcx+rdx*1],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:59
    max_ch_nr_x = framebuffer.common.framebuffer_width / font_width;
ffff80000080960b:	48 b8 f8 fe ff ff ff 	movabs rax,0xfffffffffffffef8
ffff800000809612:	ff ff ff 
ffff800000809615:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff800000809619:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
ffff80000080961c:	48 ba b0 6b af ff ff 	movabs rdx,0xffffffffffaf6bb0
ffff800000809623:	ff ff ff 
ffff800000809626:	8b 34 11             	mov    esi,DWORD PTR [rcx+rdx*1]
ffff800000809629:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080962e:	f7 f6                	div    esi
ffff800000809630:	89 c2                	mov    edx,eax
ffff800000809632:	48 b8 9c 6b af ff ff 	movabs rax,0xffffffffffaf6b9c
ffff800000809639:	ff ff ff 
ffff80000080963c:	89 14 01             	mov    DWORD PTR [rcx+rax*1],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:60
    max_ch_nr_y = framebuffer.common.framebuffer_height / font_height;
ffff80000080963f:	48 b8 f8 fe ff ff ff 	movabs rax,0xfffffffffffffef8
ffff800000809646:	ff ff ff 
ffff800000809649:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080964d:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff800000809650:	48 ba b4 6b af ff ff 	movabs rdx,0xffffffffffaf6bb4
ffff800000809657:	ff ff ff 
ffff80000080965a:	8b 3c 11             	mov    edi,DWORD PTR [rcx+rdx*1]
ffff80000080965d:	ba 00 00 00 00       	mov    edx,0x0
ffff800000809662:	f7 f7                	div    edi
ffff800000809664:	89 c2                	mov    edx,eax
ffff800000809666:	48 b8 a0 6b af ff ff 	movabs rax,0xffffffffffaf6ba0
ffff80000080966d:	ff ff ff 
ffff800000809670:	89 14 01             	mov    DWORD PTR [rcx+rax*1],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:61
    font_size=1;
ffff800000809673:	48 b8 40 fe ff ff ff 	movabs rax,0xfffffffffffffe40
ffff80000080967a:	ff ff ff 
ffff80000080967d:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff800000809681:	c7 00 01 00 00 00    	mov    DWORD PTR [rax],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:62
}
ffff800000809687:	90                   	nop
ffff800000809688:	5d                   	pop    rbp
ffff800000809689:	c3                   	ret    

ffff80000080968a <set_framebuffer>:
set_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:64
void set_framebuffer(struct multiboot_tag_framebuffer tag)
{
ffff80000080968a:	f3 0f 1e fa          	endbr64 
ffff80000080968e:	55                   	push   rbp
ffff80000080968f:	48 89 e5             	mov    rbp,rsp
ffff800000809692:	53                   	push   rbx
ffff800000809693:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000809693 <set_framebuffer+0x9>
ffff80000080969a:	49 bb 85 31 11 00 00 	movabs r11,0x113185
ffff8000008096a1:	00 00 00 
ffff8000008096a4:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:65
    framebuffer=tag;
ffff8000008096a7:	48 ba f8 fe ff ff ff 	movabs rdx,0xfffffffffffffef8
ffff8000008096ae:	ff ff ff 
ffff8000008096b1:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff8000008096b5:	48 8b 4d 10          	mov    rcx,QWORD PTR [rbp+0x10]
ffff8000008096b9:	48 8b 5d 18          	mov    rbx,QWORD PTR [rbp+0x18]
ffff8000008096bd:	48 89 08             	mov    QWORD PTR [rax],rcx
ffff8000008096c0:	48 89 58 08          	mov    QWORD PTR [rax+0x8],rbx
ffff8000008096c4:	48 8b 4d 20          	mov    rcx,QWORD PTR [rbp+0x20]
ffff8000008096c8:	48 8b 5d 28          	mov    rbx,QWORD PTR [rbp+0x28]
ffff8000008096cc:	48 89 48 10          	mov    QWORD PTR [rax+0x10],rcx
ffff8000008096d0:	48 89 58 18          	mov    QWORD PTR [rax+0x18],rbx
ffff8000008096d4:	48 8b 55 30          	mov    rdx,QWORD PTR [rbp+0x30]
ffff8000008096d8:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:66
}
ffff8000008096dc:	90                   	nop
ffff8000008096dd:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
ffff8000008096e1:	c9                   	leave  
ffff8000008096e2:	c3                   	ret    

ffff8000008096e3 <fill_rect>:
fill_rect():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:68

void fill_rect(int x,int y,int w,int h,unsigned int color){
ffff8000008096e3:	f3 0f 1e fa          	endbr64 
ffff8000008096e7:	55                   	push   rbp
ffff8000008096e8:	48 89 e5             	mov    rbp,rsp
ffff8000008096eb:	4c 8d 0d f9 ff ff ff 	lea    r9,[rip+0xfffffffffffffff9]        # ffff8000008096eb <fill_rect+0x8>
ffff8000008096f2:	49 bb 2d 31 11 00 00 	movabs r11,0x11312d
ffff8000008096f9:	00 00 00 
ffff8000008096fc:	4d 01 d9             	add    r9,r11
ffff8000008096ff:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff800000809702:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff800000809705:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff800000809708:	89 4d d0             	mov    DWORD PTR [rbp-0x30],ecx
ffff80000080970b:	44 89 45 cc          	mov    DWORD PTR [rbp-0x34],r8d
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:69
    unsigned int* fb= (unsigned int*) FRAMEBUFFER_ADDR;
ffff80000080970f:	48 b8 00 00 00 40 00 	movabs rax,0xffff800040000000
ffff800000809716:	80 ff ff 
ffff800000809719:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:71
    //目前只写32bpp
    for(int py=x;py<h+x;py++){
ffff80000080971d:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000809720:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffff800000809723:	e9 82 00 00 00       	jmp    ffff8000008097aa <fill_rect+0xc7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:72
        for(int px=y;px<w+y;px++){
ffff800000809728:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080972b:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffff80000080972e:	eb 69                	jmp    ffff800000809799 <fill_rect+0xb6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:73 (discriminator 3)
            addr_t ptr=FRAMEBUFFER_ADDR+py*framebuffer.common.framebuffer_pitch
ffff800000809730:	48 b8 f8 fe ff ff ff 	movabs rax,0xfffffffffffffef8
ffff800000809737:	ff ff ff 
ffff80000080973a:	49 8b 04 01          	mov    rax,QWORD PTR [r9+rax*1]
ffff80000080973e:	8b 50 10             	mov    edx,DWORD PTR [rax+0x10]
ffff800000809741:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000809744:	0f af c2             	imul   eax,edx
ffff800000809747:	89 c1                	mov    ecx,eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:74 (discriminator 3)
                       +px*framebuffer.common.framebuffer_bpp/8;
ffff800000809749:	48 b8 f8 fe ff ff ff 	movabs rax,0xfffffffffffffef8
ffff800000809750:	ff ff ff 
ffff800000809753:	49 8b 04 01          	mov    rax,QWORD PTR [r9+rax*1]
ffff800000809757:	0f b6 40 1c          	movzx  eax,BYTE PTR [rax+0x1c]
ffff80000080975b:	0f b6 c0             	movzx  eax,al
ffff80000080975e:	0f af 45 f8          	imul   eax,DWORD PTR [rbp-0x8]
ffff800000809762:	8d 50 07             	lea    edx,[rax+0x7]
ffff800000809765:	85 c0                	test   eax,eax
ffff800000809767:	0f 48 c2             	cmovs  eax,edx
ffff80000080976a:	c1 f8 03             	sar    eax,0x3
ffff80000080976d:	48 98                	cdqe   
ffff80000080976f:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:73 (discriminator 3)
            addr_t ptr=FRAMEBUFFER_ADDR+py*framebuffer.common.framebuffer_pitch
ffff800000809773:	48 b8 00 00 00 40 00 	movabs rax,0xffff800040000000
ffff80000080977a:	80 ff ff 
ffff80000080977d:	48 01 d0             	add    rax,rdx
ffff800000809780:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:75 (discriminator 3)
            fb=(unsigned int*)ptr;
ffff800000809784:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000809788:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:76 (discriminator 3)
            *fb=color;
ffff80000080978c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000809790:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff800000809793:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:72 (discriminator 3)
        for(int px=y;px<w+y;px++){
ffff800000809795:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:72 (discriminator 1)
ffff800000809799:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff80000080979c:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080979f:	01 d0                	add    eax,edx
ffff8000008097a1:	39 45 f8             	cmp    DWORD PTR [rbp-0x8],eax
ffff8000008097a4:	7c 8a                	jl     ffff800000809730 <fill_rect+0x4d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:71 (discriminator 2)
    for(int py=x;py<h+x;py++){
ffff8000008097a6:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:71 (discriminator 1)
ffff8000008097aa:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
ffff8000008097ad:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008097b0:	01 d0                	add    eax,edx
ffff8000008097b2:	39 45 fc             	cmp    DWORD PTR [rbp-0x4],eax
ffff8000008097b5:	0f 8c 6d ff ff ff    	jl     ffff800000809728 <fill_rect+0x45>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:79
        }
    }
}
ffff8000008097bb:	90                   	nop
ffff8000008097bc:	90                   	nop
ffff8000008097bd:	5d                   	pop    rbp
ffff8000008097be:	c3                   	ret    

ffff8000008097bf <draw_text>:
draw_text():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:82
unsigned char letters[];
void draw_text(int x, int y, int size, char *str)
{
ffff8000008097bf:	f3 0f 1e fa          	endbr64 
ffff8000008097c3:	55                   	push   rbp
ffff8000008097c4:	48 89 e5             	mov    rbp,rsp
ffff8000008097c7:	41 57                	push   r15
ffff8000008097c9:	53                   	push   rbx
ffff8000008097ca:	48 83 ec 30          	sub    rsp,0x30
ffff8000008097ce:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008097ce <draw_text+0xf>
ffff8000008097d5:	49 bb 4a 30 11 00 00 	movabs r11,0x11304a
ffff8000008097dc:	00 00 00 
ffff8000008097df:	4c 01 db             	add    rbx,r11
ffff8000008097e2:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff8000008097e5:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff8000008097e8:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff8000008097eb:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:83
    int tx=x;
ffff8000008097ef:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008097f2:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:84
    while(*str!='\0')
ffff8000008097f5:	eb 75                	jmp    ffff80000080986c <draw_text+0xad>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:86
    {
        if(*str=='\n')
ffff8000008097f7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008097fb:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008097fe:	3c 0a                	cmp    al,0xa
ffff800000809800:	75 23                	jne    ffff800000809825 <draw_text+0x66>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:88
        {
            y+=font_height*size;
ffff800000809802:	48 b8 b4 6b af ff ff 	movabs rax,0xffffffffffaf6bb4
ffff800000809809:	ff ff ff 
ffff80000080980c:	8b 14 03             	mov    edx,DWORD PTR [rbx+rax*1]
ffff80000080980f:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000809812:	0f af d0             	imul   edx,eax
ffff800000809815:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000809818:	01 d0                	add    eax,edx
ffff80000080981a:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:89
            tx=x;
ffff80000080981d:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000809820:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
ffff800000809823:	eb 42                	jmp    ffff800000809867 <draw_text+0xa8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:93
        }
        else
        {
            draw_letter(tx,y,size,*str);
ffff800000809825:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000809829:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080982c:	0f be c8             	movsx  ecx,al
ffff80000080982f:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff800000809832:	8b 75 d8             	mov    esi,DWORD PTR [rbp-0x28]
ffff800000809835:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000809838:	89 c7                	mov    edi,eax
ffff80000080983a:	49 89 df             	mov    r15,rbx
ffff80000080983d:	48 b8 6a d0 ee ff ff 	movabs rax,0xffffffffffeed06a
ffff800000809844:	ff ff ff 
ffff800000809847:	48 01 d8             	add    rax,rbx
ffff80000080984a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:94
            tx+=size*font_width;
ffff80000080984c:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff80000080984f:	48 b8 b0 6b af ff ff 	movabs rax,0xffffffffffaf6bb0
ffff800000809856:	ff ff ff 
ffff800000809859:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080985c:	0f af d0             	imul   edx,eax
ffff80000080985f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000809862:	01 d0                	add    eax,edx
ffff800000809864:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:96
        }
        str++;
ffff800000809867:	48 83 45 c8 01       	add    QWORD PTR [rbp-0x38],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:84
    while(*str!='\0')
ffff80000080986c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000809870:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000809873:	84 c0                	test   al,al
ffff800000809875:	75 80                	jne    ffff8000008097f7 <draw_text+0x38>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:98
    }
}
ffff800000809877:	90                   	nop
ffff800000809878:	90                   	nop
ffff800000809879:	48 83 c4 30          	add    rsp,0x30
ffff80000080987d:	5b                   	pop    rbx
ffff80000080987e:	41 5f                	pop    r15
ffff800000809880:	5d                   	pop    rbp
ffff800000809881:	c3                   	ret    

ffff800000809882 <draw_letter>:
draw_letter():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:99
void draw_letter(int x, volatile int y, int size, char c) {
ffff800000809882:	f3 0f 1e fa          	endbr64 
ffff800000809886:	55                   	push   rbp
ffff800000809887:	48 89 e5             	mov    rbp,rsp
ffff80000080988a:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080988a <draw_letter+0x8>
ffff800000809891:	49 bb 8e 2f 11 00 00 	movabs r11,0x112f8e
ffff800000809898:	00 00 00 
ffff80000080989b:	4c 01 d8             	add    rax,r11
ffff80000080989e:	89 7d cc             	mov    DWORD PTR [rbp-0x34],edi
ffff8000008098a1:	89 75 c8             	mov    DWORD PTR [rbp-0x38],esi
ffff8000008098a4:	89 55 c4             	mov    DWORD PTR [rbp-0x3c],edx
ffff8000008098a7:	89 ca                	mov    edx,ecx
ffff8000008098a9:	88 55 c0             	mov    BYTE PTR [rbp-0x40],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:100
    u8 *glyph = glyph_table;
ffff8000008098ac:	48 ba c0 6b af ff ff 	movabs rdx,0xffffffffffaf6bc0
ffff8000008098b3:	ff ff ff 
ffff8000008098b6:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008098ba:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:101
    if (c < glyph_nr) {
ffff8000008098be:	0f be 4d c0          	movsx  ecx,BYTE PTR [rbp-0x40]
ffff8000008098c2:	48 ba cc 6b af ff ff 	movabs rdx,0xffffffffffaf6bcc
ffff8000008098c9:	ff ff ff 
ffff8000008098cc:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff8000008098cf:	39 d1                	cmp    ecx,edx
ffff8000008098d1:	73 1a                	jae    ffff8000008098ed <draw_letter+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:102
        glyph += c * bytes_per_glyph;
ffff8000008098d3:	0f be 4d c0          	movsx  ecx,BYTE PTR [rbp-0x40]
ffff8000008098d7:	48 ba c8 6b af ff ff 	movabs rdx,0xffffffffffaf6bc8
ffff8000008098de:	ff ff ff 
ffff8000008098e1:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff8000008098e4:	0f af d1             	imul   edx,ecx
ffff8000008098e7:	89 d2                	mov    edx,edx
ffff8000008098e9:	48 01 55 f8          	add    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:105
    }
    /* output the font to frame buffer */
    for (u32 ch_y = 0; ch_y < font_height; ch_y++) {
ffff8000008098ed:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
ffff8000008098f4:	e9 f8 00 00 00       	jmp    ffff8000008099f1 <draw_letter+0x16f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:106
        u8 mask = 1 << 7;
ffff8000008098f9:	c6 45 f3 80          	mov    BYTE PTR [rbp-0xd],0x80
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:108

        for (u32 ch_x = 0; ch_x < font_width; ch_x++) {
ffff8000008098fd:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000809904:	e9 bb 00 00 00       	jmp    ffff8000008099c4 <draw_letter+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:109
            int px=x+ch_x*size;
ffff800000809909:	8b 55 c4             	mov    edx,DWORD PTR [rbp-0x3c]
ffff80000080990c:	89 d1                	mov    ecx,edx
ffff80000080990e:	0f af 4d ec          	imul   ecx,DWORD PTR [rbp-0x14]
ffff800000809912:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff800000809915:	01 ca                	add    edx,ecx
ffff800000809917:	89 55 e8             	mov    DWORD PTR [rbp-0x18],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:110
            int py=y+ch_y*size;
ffff80000080991a:	8b 55 c4             	mov    edx,DWORD PTR [rbp-0x3c]
ffff80000080991d:	89 d1                	mov    ecx,edx
ffff80000080991f:	0f af 4d f4          	imul   ecx,DWORD PTR [rbp-0xc]
ffff800000809923:	8b 55 c8             	mov    edx,DWORD PTR [rbp-0x38]
ffff800000809926:	01 ca                	add    edx,ecx
ffff800000809928:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:111
            int* ptr=FRAMEBUFFER_ADDR+py*framebuffer.common.framebuffer_pitch
ffff80000080992b:	48 ba f8 fe ff ff ff 	movabs rdx,0xfffffffffffffef8
ffff800000809932:	ff ff ff 
ffff800000809935:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000809939:	8b 4a 10             	mov    ecx,DWORD PTR [rdx+0x10]
ffff80000080993c:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffff80000080993f:	0f af d1             	imul   edx,ecx
ffff800000809942:	89 d6                	mov    esi,edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:112
                     +px*framebuffer.common.framebuffer_bpp/8;
ffff800000809944:	48 ba f8 fe ff ff ff 	movabs rdx,0xfffffffffffffef8
ffff80000080994b:	ff ff ff 
ffff80000080994e:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000809952:	0f b6 52 1c          	movzx  edx,BYTE PTR [rdx+0x1c]
ffff800000809956:	0f b6 d2             	movzx  edx,dl
ffff800000809959:	0f af 55 e8          	imul   edx,DWORD PTR [rbp-0x18]
ffff80000080995d:	8d 4a 07             	lea    ecx,[rdx+0x7]
ffff800000809960:	85 d2                	test   edx,edx
ffff800000809962:	0f 48 d1             	cmovs  edx,ecx
ffff800000809965:	c1 fa 03             	sar    edx,0x3
ffff800000809968:	48 63 d2             	movsxd rdx,edx
ffff80000080996b:	48 8d 0c 16          	lea    rcx,[rsi+rdx*1]
ffff80000080996f:	48 ba 00 00 00 40 00 	movabs rdx,0xffff800040000000
ffff800000809976:	80 ff ff 
ffff800000809979:	48 01 ca             	add    rdx,rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:111
            int* ptr=FRAMEBUFFER_ADDR+py*framebuffer.common.framebuffer_pitch
ffff80000080997c:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:113
            if ((*(glyph + ch_x / 8) & mask) != 0) {
ffff800000809980:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000809983:	c1 ea 03             	shr    edx,0x3
ffff800000809986:	89 d1                	mov    ecx,edx
ffff800000809988:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080998c:	48 01 ca             	add    rdx,rcx
ffff80000080998f:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff800000809992:	22 55 f3             	and    dl,BYTE PTR [rbp-0xd]
ffff800000809995:	84 d2                	test   dl,dl
ffff800000809997:	74 0c                	je     ffff8000008099a5 <draw_letter+0x123>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:114
                *ptr=-1;
ffff800000809999:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080999d:	c7 02 ff ff ff ff    	mov    DWORD PTR [rdx],0xffffffff
ffff8000008099a3:	eb 0a                	jmp    ffff8000008099af <draw_letter+0x12d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:116
            } else {
                *ptr=0;
ffff8000008099a5:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff8000008099a9:	c7 02 00 00 00 00    	mov    DWORD PTR [rdx],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:119
            }

            mask >>= 1;
ffff8000008099af:	d0 6d f3             	shr    BYTE PTR [rbp-0xd],1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:120
            if (ch_x % 8 == 0) {
ffff8000008099b2:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff8000008099b5:	83 e2 07             	and    edx,0x7
ffff8000008099b8:	85 d2                	test   edx,edx
ffff8000008099ba:	75 04                	jne    ffff8000008099c0 <draw_letter+0x13e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:121
                mask = 1 << 7;
ffff8000008099bc:	c6 45 f3 80          	mov    BYTE PTR [rbp-0xd],0x80
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:108 (discriminator 2)
        for (u32 ch_x = 0; ch_x < font_width; ch_x++) {
ffff8000008099c0:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:108 (discriminator 1)
ffff8000008099c4:	48 ba b0 6b af ff ff 	movabs rdx,0xffffffffffaf6bb0
ffff8000008099cb:	ff ff ff 
ffff8000008099ce:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff8000008099d1:	39 55 ec             	cmp    DWORD PTR [rbp-0x14],edx
ffff8000008099d4:	0f 82 2f ff ff ff    	jb     ffff800000809909 <draw_letter+0x87>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:125 (discriminator 2)
            }
        }

        glyph += font_width_bytes;
ffff8000008099da:	48 ba b8 6b af ff ff 	movabs rdx,0xffffffffffaf6bb8
ffff8000008099e1:	ff ff ff 
ffff8000008099e4:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff8000008099e7:	89 d2                	mov    edx,edx
ffff8000008099e9:	48 01 55 f8          	add    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:105 (discriminator 2)
    for (u32 ch_y = 0; ch_y < font_height; ch_y++) {
ffff8000008099ed:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:105 (discriminator 1)
ffff8000008099f1:	48 ba b4 6b af ff ff 	movabs rdx,0xffffffffffaf6bb4
ffff8000008099f8:	ff ff ff 
ffff8000008099fb:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff8000008099fe:	39 55 f4             	cmp    DWORD PTR [rbp-0xc],edx
ffff800000809a01:	0f 82 f2 fe ff ff    	jb     ffff8000008098f9 <draw_letter+0x77>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:127
    }
}
ffff800000809a07:	90                   	nop
ffff800000809a08:	90                   	nop
ffff800000809a09:	5d                   	pop    rbp
ffff800000809a0a:	c3                   	ret    

ffff800000809a0b <scr_up>:
scr_up():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:129
//向上滚动一个像素
void scr_up(){
ffff800000809a0b:	f3 0f 1e fa          	endbr64 
ffff800000809a0f:	55                   	push   rbp
ffff800000809a10:	48 89 e5             	mov    rbp,rsp
ffff800000809a13:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000809a13 <scr_up+0x8>
ffff800000809a1a:	49 bb 05 2e 11 00 00 	movabs r11,0x112e05
ffff800000809a21:	00 00 00 
ffff800000809a24:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:130
    for(int dy=0;dy<framebuffer.common.framebuffer_height-1;dy++){
ffff800000809a27:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000809a2e:	e9 ad 00 00 00       	jmp    ffff800000809ae0 <scr_up+0xd5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:131
        for(int dx=0;dx<framebuffer.common.framebuffer_width;dx++){
ffff800000809a33:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
ffff800000809a3a:	e9 81 00 00 00       	jmp    ffff800000809ac0 <scr_up+0xb5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:133 (discriminator 3)
            char *p=(char*)(FRAMEBUFFER_ADDR+
                    dy*framebuffer.common.framebuffer_pitch
ffff800000809a3f:	48 ba f8 fe ff ff ff 	movabs rdx,0xfffffffffffffef8
ffff800000809a46:	ff ff ff 
ffff800000809a49:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000809a4d:	8b 4a 10             	mov    ecx,DWORD PTR [rdx+0x10]
ffff800000809a50:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000809a53:	0f af d1             	imul   edx,ecx
ffff800000809a56:	89 d6                	mov    esi,edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:134 (discriminator 3)
                    +dx*framebuffer.common.framebuffer_bpp/8);
ffff800000809a58:	48 ba f8 fe ff ff ff 	movabs rdx,0xfffffffffffffef8
ffff800000809a5f:	ff ff ff 
ffff800000809a62:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000809a66:	0f b6 52 1c          	movzx  edx,BYTE PTR [rdx+0x1c]
ffff800000809a6a:	0f b6 d2             	movzx  edx,dl
ffff800000809a6d:	0f af 55 f8          	imul   edx,DWORD PTR [rbp-0x8]
ffff800000809a71:	8d 4a 07             	lea    ecx,[rdx+0x7]
ffff800000809a74:	85 d2                	test   edx,edx
ffff800000809a76:	0f 48 d1             	cmovs  edx,ecx
ffff800000809a79:	c1 fa 03             	sar    edx,0x3
ffff800000809a7c:	48 63 d2             	movsxd rdx,edx
ffff800000809a7f:	48 8d 0c 16          	lea    rcx,[rsi+rdx*1]
ffff800000809a83:	48 ba 00 00 00 40 00 	movabs rdx,0xffff800040000000
ffff800000809a8a:	80 ff ff 
ffff800000809a8d:	48 01 ca             	add    rdx,rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:132 (discriminator 3)
            char *p=(char*)(FRAMEBUFFER_ADDR+
ffff800000809a90:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:135 (discriminator 3)
            *p=*(p+framebuffer.common.framebuffer_pitch);
ffff800000809a94:	48 ba f8 fe ff ff ff 	movabs rdx,0xfffffffffffffef8
ffff800000809a9b:	ff ff ff 
ffff800000809a9e:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000809aa2:	8b 52 10             	mov    edx,DWORD PTR [rdx+0x10]
ffff800000809aa5:	89 d1                	mov    ecx,edx
ffff800000809aa7:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff800000809aab:	48 01 ca             	add    rdx,rcx
ffff800000809aae:	0f b6 0a             	movzx  ecx,BYTE PTR [rdx]
ffff800000809ab1:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff800000809ab5:	88 0a                	mov    BYTE PTR [rdx],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:136 (discriminator 3)
            p++;
ffff800000809ab7:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:131 (discriminator 3)
        for(int dx=0;dx<framebuffer.common.framebuffer_width;dx++){
ffff800000809abc:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:131 (discriminator 1)
ffff800000809ac0:	48 ba f8 fe ff ff ff 	movabs rdx,0xfffffffffffffef8
ffff800000809ac7:	ff ff ff 
ffff800000809aca:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000809ace:	8b 4a 14             	mov    ecx,DWORD PTR [rdx+0x14]
ffff800000809ad1:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff800000809ad4:	39 d1                	cmp    ecx,edx
ffff800000809ad6:	0f 87 63 ff ff ff    	ja     ffff800000809a3f <scr_up+0x34>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:130 (discriminator 2)
    for(int dy=0;dy<framebuffer.common.framebuffer_height-1;dy++){
ffff800000809adc:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:130 (discriminator 1)
ffff800000809ae0:	48 ba f8 fe ff ff ff 	movabs rdx,0xfffffffffffffef8
ffff800000809ae7:	ff ff ff 
ffff800000809aea:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000809aee:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff800000809af1:	8d 4a ff             	lea    ecx,[rdx-0x1]
ffff800000809af4:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000809af7:	39 d1                	cmp    ecx,edx
ffff800000809af9:	0f 87 34 ff ff ff    	ja     ffff800000809a33 <scr_up+0x28>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:142
        }

    }
//    for(int i=0;i< framebuffer.common.framebuffer_width*framebuffer.common.framebuffer_bpp/8;i++)
//        *(p++)=0;
}
ffff800000809aff:	90                   	nop
ffff800000809b00:	90                   	nop
ffff800000809b01:	5d                   	pop    rbp
ffff800000809b02:	c3                   	ret    

ffff800000809b03 <scr_down>:
scr_down():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:143
void scr_down(){
ffff800000809b03:	f3 0f 1e fa          	endbr64 
ffff800000809b07:	55                   	push   rbp
ffff800000809b08:	48 89 e5             	mov    rbp,rsp
ffff800000809b0b:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000809b0b <scr_down+0x8>
ffff800000809b12:	49 bb 0d 2d 11 00 00 	movabs r11,0x112d0d
ffff800000809b19:	00 00 00 
ffff800000809b1c:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:144
    for(int dy=1;dy<max_ch_nr_y;dy++){
ffff800000809b1f:	c7 45 fc 01 00 00 00 	mov    DWORD PTR [rbp-0x4],0x1
ffff800000809b26:	e9 aa 00 00 00       	jmp    ffff800000809bd5 <scr_down+0xd2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:145
        for(int dx=0;dx<max_ch_nr_x;dx++){
ffff800000809b2b:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
ffff800000809b32:	e9 82 00 00 00       	jmp    ffff800000809bb9 <scr_down+0xb6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:146 (discriminator 3)
            char *p=(char*)(FRAMEBUFFER_ADDR+dy*framebuffer.common.framebuffer_pitch
ffff800000809b37:	48 ba f8 fe ff ff ff 	movabs rdx,0xfffffffffffffef8
ffff800000809b3e:	ff ff ff 
ffff800000809b41:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000809b45:	8b 4a 10             	mov    ecx,DWORD PTR [rdx+0x10]
ffff800000809b48:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000809b4b:	0f af d1             	imul   edx,ecx
ffff800000809b4e:	89 d6                	mov    esi,edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:147 (discriminator 3)
                            +dx*framebuffer.common.framebuffer_bpp/8);
ffff800000809b50:	48 ba f8 fe ff ff ff 	movabs rdx,0xfffffffffffffef8
ffff800000809b57:	ff ff ff 
ffff800000809b5a:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000809b5e:	0f b6 52 1c          	movzx  edx,BYTE PTR [rdx+0x1c]
ffff800000809b62:	0f b6 d2             	movzx  edx,dl
ffff800000809b65:	0f af 55 f8          	imul   edx,DWORD PTR [rbp-0x8]
ffff800000809b69:	8d 4a 07             	lea    ecx,[rdx+0x7]
ffff800000809b6c:	85 d2                	test   edx,edx
ffff800000809b6e:	0f 48 d1             	cmovs  edx,ecx
ffff800000809b71:	c1 fa 03             	sar    edx,0x3
ffff800000809b74:	48 63 d2             	movsxd rdx,edx
ffff800000809b77:	48 8d 0c 16          	lea    rcx,[rsi+rdx*1]
ffff800000809b7b:	48 ba 00 00 00 40 00 	movabs rdx,0xffff800040000000
ffff800000809b82:	80 ff ff 
ffff800000809b85:	48 01 ca             	add    rdx,rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:146 (discriminator 3)
            char *p=(char*)(FRAMEBUFFER_ADDR+dy*framebuffer.common.framebuffer_pitch
ffff800000809b88:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:148 (discriminator 3)
            *p=*(p-framebuffer.common.framebuffer_pitch);
ffff800000809b8c:	48 ba f8 fe ff ff ff 	movabs rdx,0xfffffffffffffef8
ffff800000809b93:	ff ff ff 
ffff800000809b96:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000809b9a:	8b 52 10             	mov    edx,DWORD PTR [rdx+0x10]
ffff800000809b9d:	89 d2                	mov    edx,edx
ffff800000809b9f:	48 89 d1             	mov    rcx,rdx
ffff800000809ba2:	48 f7 d9             	neg    rcx
ffff800000809ba5:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff800000809ba9:	48 01 ca             	add    rdx,rcx
ffff800000809bac:	0f b6 0a             	movzx  ecx,BYTE PTR [rdx]
ffff800000809baf:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff800000809bb3:	88 0a                	mov    BYTE PTR [rdx],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:145 (discriminator 3)
        for(int dx=0;dx<max_ch_nr_x;dx++){
ffff800000809bb5:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:145 (discriminator 1)
ffff800000809bb9:	8b 4d f8             	mov    ecx,DWORD PTR [rbp-0x8]
ffff800000809bbc:	48 ba 9c 6b af ff ff 	movabs rdx,0xffffffffffaf6b9c
ffff800000809bc3:	ff ff ff 
ffff800000809bc6:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff800000809bc9:	39 d1                	cmp    ecx,edx
ffff800000809bcb:	0f 82 66 ff ff ff    	jb     ffff800000809b37 <scr_down+0x34>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:144 (discriminator 2)
    for(int dy=1;dy<max_ch_nr_y;dy++){
ffff800000809bd1:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:144 (discriminator 1)
ffff800000809bd5:	8b 4d fc             	mov    ecx,DWORD PTR [rbp-0x4]
ffff800000809bd8:	48 ba a0 6b af ff ff 	movabs rdx,0xffffffffffaf6ba0
ffff800000809bdf:	ff ff ff 
ffff800000809be2:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff800000809be5:	39 d1                	cmp    ecx,edx
ffff800000809be7:	0f 82 3e ff ff ff    	jb     ffff800000809b2b <scr_down+0x28>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:152
        }

    }
}
ffff800000809bed:	90                   	nop
ffff800000809bee:	90                   	nop
ffff800000809bef:	5d                   	pop    rbp
ffff800000809bf0:	c3                   	ret    

ffff800000809bf1 <print>:
print():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:153
void print(char* s){
ffff800000809bf1:	f3 0f 1e fa          	endbr64 
ffff800000809bf5:	55                   	push   rbp
ffff800000809bf6:	48 89 e5             	mov    rbp,rsp
ffff800000809bf9:	41 57                	push   r15
ffff800000809bfb:	53                   	push   rbx
ffff800000809bfc:	48 83 ec 10          	sub    rsp,0x10
ffff800000809c00:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000809c00 <print+0xf>
ffff800000809c07:	49 bb 18 2c 11 00 00 	movabs r11,0x112c18
ffff800000809c0e:	00 00 00 
ffff800000809c11:	4c 01 db             	add    rbx,r11
ffff800000809c14:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:154
    for(;*s;s++){
ffff800000809c18:	e9 55 01 00 00       	jmp    ffff800000809d72 <print+0x181>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:155
        if(fb_cursor_x>max_ch_nr_x||*s=='\n')
ffff800000809c1d:	48 b8 94 6b af ff ff 	movabs rax,0xffffffffffaf6b94
ffff800000809c24:	ff ff ff 
ffff800000809c27:	8b 14 03             	mov    edx,DWORD PTR [rbx+rax*1]
ffff800000809c2a:	48 b8 9c 6b af ff ff 	movabs rax,0xffffffffffaf6b9c
ffff800000809c31:	ff ff ff 
ffff800000809c34:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff800000809c37:	39 c2                	cmp    edx,eax
ffff800000809c39:	77 0b                	ja     ffff800000809c46 <print+0x55>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:155 (discriminator 1)
ffff800000809c3b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000809c3f:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000809c42:	3c 0a                	cmp    al,0xa
ffff800000809c44:	75 2e                	jne    ffff800000809c74 <print+0x83>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:157
        {
            fb_cursor_y+=1;
ffff800000809c46:	48 b8 98 6b af ff ff 	movabs rax,0xffffffffffaf6b98
ffff800000809c4d:	ff ff ff 
ffff800000809c50:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff800000809c53:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000809c56:	48 b8 98 6b af ff ff 	movabs rax,0xffffffffffaf6b98
ffff800000809c5d:	ff ff ff 
ffff800000809c60:	89 14 03             	mov    DWORD PTR [rbx+rax*1],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:158
            fb_cursor_x=0;
ffff800000809c63:	48 b8 94 6b af ff ff 	movabs rax,0xffffffffffaf6b94
ffff800000809c6a:	ff ff ff 
ffff800000809c6d:	c7 04 03 00 00 00 00 	mov    DWORD PTR [rbx+rax*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:160
        }
        if(*s=='\n')continue;
ffff800000809c74:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000809c78:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000809c7b:	3c 0a                	cmp    al,0xa
ffff800000809c7d:	0f 84 e9 00 00 00    	je     ffff800000809d6c <print+0x17b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:161
        if(fb_cursor_y>=max_ch_nr_y-1){
ffff800000809c83:	48 b8 a0 6b af ff ff 	movabs rax,0xffffffffffaf6ba0
ffff800000809c8a:	ff ff ff 
ffff800000809c8d:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff800000809c90:	8d 50 ff             	lea    edx,[rax-0x1]
ffff800000809c93:	48 b8 98 6b af ff ff 	movabs rax,0xffffffffffaf6b98
ffff800000809c9a:	ff ff ff 
ffff800000809c9d:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff800000809ca0:	39 c2                	cmp    edx,eax
ffff800000809ca2:	77 11                	ja     ffff800000809cb5 <print+0xc4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:165
//            for(int i=0;i<font_height*font_size;i++)
////                scr_up();
////            fb_cursor_y=max_ch_nr_y-1;
            fb_cursor_y=0;
ffff800000809ca4:	48 b8 98 6b af ff ff 	movabs rax,0xffffffffffaf6b98
ffff800000809cab:	ff ff ff 
ffff800000809cae:	c7 04 03 00 00 00 00 	mov    DWORD PTR [rbx+rax*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:167
        }
        draw_letter(fb_cursor_x*font_width*font_size,fb_cursor_y*font_height*font_size,font_size,*s);
ffff800000809cb5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000809cb9:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000809cbc:	0f be d0             	movsx  edx,al
ffff800000809cbf:	48 b8 40 fe ff ff ff 	movabs rax,0xfffffffffffffe40
ffff800000809cc6:	ff ff ff 
ffff800000809cc9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809ccd:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000809ccf:	48 b9 98 6b af ff ff 	movabs rcx,0xffffffffffaf6b98
ffff800000809cd6:	ff ff ff 
ffff800000809cd9:	8b 34 0b             	mov    esi,DWORD PTR [rbx+rcx*1]
ffff800000809cdc:	48 b9 b4 6b af ff ff 	movabs rcx,0xffffffffffaf6bb4
ffff800000809ce3:	ff ff ff 
ffff800000809ce6:	8b 0c 0b             	mov    ecx,DWORD PTR [rbx+rcx*1]
ffff800000809ce9:	0f af f1             	imul   esi,ecx
ffff800000809cec:	48 b9 40 fe ff ff ff 	movabs rcx,0xfffffffffffffe40
ffff800000809cf3:	ff ff ff 
ffff800000809cf6:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff800000809cfa:	8b 09                	mov    ecx,DWORD PTR [rcx]
ffff800000809cfc:	0f af ce             	imul   ecx,esi
ffff800000809cff:	41 89 c8             	mov    r8d,ecx
ffff800000809d02:	48 b9 94 6b af ff ff 	movabs rcx,0xffffffffffaf6b94
ffff800000809d09:	ff ff ff 
ffff800000809d0c:	8b 34 0b             	mov    esi,DWORD PTR [rbx+rcx*1]
ffff800000809d0f:	48 b9 b0 6b af ff ff 	movabs rcx,0xffffffffffaf6bb0
ffff800000809d16:	ff ff ff 
ffff800000809d19:	8b 0c 0b             	mov    ecx,DWORD PTR [rbx+rcx*1]
ffff800000809d1c:	0f af f1             	imul   esi,ecx
ffff800000809d1f:	48 b9 40 fe ff ff ff 	movabs rcx,0xfffffffffffffe40
ffff800000809d26:	ff ff ff 
ffff800000809d29:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff800000809d2d:	8b 09                	mov    ecx,DWORD PTR [rcx]
ffff800000809d2f:	0f af ce             	imul   ecx,esi
ffff800000809d32:	89 cf                	mov    edi,ecx
ffff800000809d34:	89 d1                	mov    ecx,edx
ffff800000809d36:	89 c2                	mov    edx,eax
ffff800000809d38:	44 89 c6             	mov    esi,r8d
ffff800000809d3b:	49 89 df             	mov    r15,rbx
ffff800000809d3e:	48 b8 6a d0 ee ff ff 	movabs rax,0xffffffffffeed06a
ffff800000809d45:	ff ff ff 
ffff800000809d48:	48 01 d8             	add    rax,rbx
ffff800000809d4b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:168
        fb_cursor_x+=1;
ffff800000809d4d:	48 b8 94 6b af ff ff 	movabs rax,0xffffffffffaf6b94
ffff800000809d54:	ff ff ff 
ffff800000809d57:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff800000809d5a:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000809d5d:	48 b8 94 6b af ff ff 	movabs rax,0xffffffffffaf6b94
ffff800000809d64:	ff ff ff 
ffff800000809d67:	89 14 03             	mov    DWORD PTR [rbx+rax*1],edx
ffff800000809d6a:	eb 01                	jmp    ffff800000809d6d <print+0x17c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:160
        if(*s=='\n')continue;
ffff800000809d6c:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:154
    for(;*s;s++){
ffff800000809d6d:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:154 (discriminator 1)
ffff800000809d72:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000809d76:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000809d79:	84 c0                	test   al,al
ffff800000809d7b:	0f 85 9c fe ff ff    	jne    ffff800000809c1d <print+0x2c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:170
    }
}
ffff800000809d81:	90                   	nop
ffff800000809d82:	90                   	nop
ffff800000809d83:	48 83 c4 10          	add    rsp,0x10
ffff800000809d87:	5b                   	pop    rbx
ffff800000809d88:	41 5f                	pop    r15
ffff800000809d8a:	5d                   	pop    rbp
ffff800000809d8b:	c3                   	ret    

ffff800000809d8c <open_framebuffer>:
open_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:175
struct file_operations framebuffer_fops={
        .open=open_framebuffer,.close=close_framebuffer,.read=read_framebuffer,.write=write_framebuffer,
        .ioctl=ioctl_framebuffer
};
long open_framebuffer(struct index_node * inode,struct file * filp){
ffff800000809d8c:	f3 0f 1e fa          	endbr64 
ffff800000809d90:	55                   	push   rbp
ffff800000809d91:	48 89 e5             	mov    rbp,rsp
ffff800000809d94:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000809d94 <open_framebuffer+0x8>
ffff800000809d9b:	49 bb 84 2a 11 00 00 	movabs r11,0x112a84
ffff800000809da2:	00 00 00 
ffff800000809da5:	4c 01 d8             	add    rax,r11
ffff800000809da8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000809dac:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:176
    inode->f_ops=&framebuffer_fops;
ffff800000809db0:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000809db4:	48 b9 58 fe ff ff ff 	movabs rcx,0xfffffffffffffe58
ffff800000809dbb:	ff ff ff 
ffff800000809dbe:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff800000809dc2:	48 89 4a 28          	mov    QWORD PTR [rdx+0x28],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:177
    filp->f_ops=&framebuffer_fops;
ffff800000809dc6:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff800000809dca:	48 b9 58 fe ff ff ff 	movabs rcx,0xfffffffffffffe58
ffff800000809dd1:	ff ff ff 
ffff800000809dd4:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff800000809dd8:	48 89 42 18          	mov    QWORD PTR [rdx+0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:178
    return 1;
ffff800000809ddc:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:179
}
ffff800000809de1:	5d                   	pop    rbp
ffff800000809de2:	c3                   	ret    

ffff800000809de3 <close_framebuffer>:
close_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:180
long close_framebuffer(struct index_node * inode,struct file * filp){
ffff800000809de3:	f3 0f 1e fa          	endbr64 
ffff800000809de7:	55                   	push   rbp
ffff800000809de8:	48 89 e5             	mov    rbp,rsp
ffff800000809deb:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000809deb <close_framebuffer+0x8>
ffff800000809df2:	49 bb 2d 2a 11 00 00 	movabs r11,0x112a2d
ffff800000809df9:	00 00 00 
ffff800000809dfc:	4c 01 d8             	add    rax,r11
ffff800000809dff:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000809e03:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:182

}
ffff800000809e07:	90                   	nop
ffff800000809e08:	5d                   	pop    rbp
ffff800000809e09:	c3                   	ret    

ffff800000809e0a <read_framebuffer>:
read_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:183
long read_framebuffer(struct file * filp,char * buf,unsigned long count,long * position){
ffff800000809e0a:	f3 0f 1e fa          	endbr64 
ffff800000809e0e:	55                   	push   rbp
ffff800000809e0f:	48 89 e5             	mov    rbp,rsp
ffff800000809e12:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000809e12 <read_framebuffer+0x8>
ffff800000809e19:	49 bb 06 2a 11 00 00 	movabs r11,0x112a06
ffff800000809e20:	00 00 00 
ffff800000809e23:	4c 01 d8             	add    rax,r11
ffff800000809e26:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000809e2a:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000809e2e:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff800000809e32:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:185

}
ffff800000809e36:	90                   	nop
ffff800000809e37:	5d                   	pop    rbp
ffff800000809e38:	c3                   	ret    

ffff800000809e39 <write_framebuffer>:
write_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:186
long write_framebuffer(struct file * filp,char * buf,unsigned long count,long * position){
ffff800000809e39:	f3 0f 1e fa          	endbr64 
ffff800000809e3d:	55                   	push   rbp
ffff800000809e3e:	48 89 e5             	mov    rbp,rsp
ffff800000809e41:	41 57                	push   r15
ffff800000809e43:	53                   	push   rbx
ffff800000809e44:	48 83 ec 40          	sub    rsp,0x40
ffff800000809e48:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000809e48 <write_framebuffer+0xf>
ffff800000809e4f:	49 bb d0 29 11 00 00 	movabs r11,0x1129d0
ffff800000809e56:	00 00 00 
ffff800000809e59:	4c 01 db             	add    rbx,r11
ffff800000809e5c:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000809e60:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffff800000809e64:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
ffff800000809e68:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:187
    char *tmp= (char*) kmalloc();
ffff800000809e6c:	49 89 df             	mov    r15,rbx
ffff800000809e6f:	b8 00 00 00 00       	mov    eax,0x0
ffff800000809e74:	48 ba 68 57 ee ff ff 	movabs rdx,0xffffffffffee5768
ffff800000809e7b:	ff ff ff 
ffff800000809e7e:	48 01 da             	add    rdx,rbx
ffff800000809e81:	ff d2                	call   rdx
ffff800000809e83:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:188
    int c=count/(PAGE_4K_SIZE-1),p=0;
ffff800000809e87:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
ffff800000809e8b:	48 ba 11 00 01 10 00 	movabs rdx,0x10010010010011
ffff800000809e92:	01 10 00 
ffff800000809e95:	48 89 c8             	mov    rax,rcx
ffff800000809e98:	48 f7 e2             	mul    rdx
ffff800000809e9b:	48 89 c8             	mov    rax,rcx
ffff800000809e9e:	48 29 d0             	sub    rax,rdx
ffff800000809ea1:	48 d1 e8             	shr    rax,1
ffff800000809ea4:	48 01 d0             	add    rax,rdx
ffff800000809ea7:	48 c1 e8 0b          	shr    rax,0xb
ffff800000809eab:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
ffff800000809eae:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190
    //一块一块输出
    for(int i=0;i<(c?c:1);i++){
ffff800000809eb5:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff800000809ebc:	eb 60                	jmp    ffff800000809f1e <write_framebuffer+0xe5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:191 (discriminator 7)
        memcpy(tmp,buf+p,PAGE_4K_SIZE-1);
ffff800000809ebe:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000809ec1:	48 63 d0             	movsxd rdx,eax
ffff800000809ec4:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000809ec8:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
ffff800000809ecc:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000809ed0:	ba ff 0f 00 00       	mov    edx,0xfff
ffff800000809ed5:	48 89 ce             	mov    rsi,rcx
ffff800000809ed8:	48 89 c7             	mov    rdi,rax
ffff800000809edb:	49 89 df             	mov    r15,rbx
ffff800000809ede:	48 b8 bc 52 ef ff ff 	movabs rax,0xffffffffffef52bc
ffff800000809ee5:	ff ff ff 
ffff800000809ee8:	48 01 d8             	add    rax,rbx
ffff800000809eeb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:192 (discriminator 7)
        tmp[PAGE_4K_SIZE-1]=0;
ffff800000809eed:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000809ef1:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff800000809ef7:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:193 (discriminator 7)
        print(tmp);
ffff800000809efa:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000809efe:	48 89 c7             	mov    rdi,rax
ffff800000809f01:	49 89 df             	mov    r15,rbx
ffff800000809f04:	48 b8 d9 d3 ee ff ff 	movabs rax,0xffffffffffeed3d9
ffff800000809f0b:	ff ff ff 
ffff800000809f0e:	48 01 d8             	add    rax,rbx
ffff800000809f11:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:194 (discriminator 7)
        p+=PAGE_4K_SIZE-1;
ffff800000809f13:	81 45 ec ff 0f 00 00 	add    DWORD PTR [rbp-0x14],0xfff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190 (discriminator 7)
    for(int i=0;i<(c?c:1);i++){
ffff800000809f1a:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190 (discriminator 1)
ffff800000809f1e:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
ffff800000809f22:	74 05                	je     ffff800000809f29 <write_framebuffer+0xf0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190 (discriminator 3)
ffff800000809f24:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000809f27:	eb 05                	jmp    ffff800000809f2e <write_framebuffer+0xf5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190 (discriminator 4)
ffff800000809f29:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190 (discriminator 6)
ffff800000809f2e:	3b 45 e8             	cmp    eax,DWORD PTR [rbp-0x18]
ffff800000809f31:	7f 8b                	jg     ffff800000809ebe <write_framebuffer+0x85>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:196
    }
    kmfree(tmp);
ffff800000809f33:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000809f37:	48 89 c7             	mov    rdi,rax
ffff800000809f3a:	49 89 df             	mov    r15,rbx
ffff800000809f3d:	48 b8 d7 5a ee ff ff 	movabs rax,0xffffffffffee5ad7
ffff800000809f44:	ff ff ff 
ffff800000809f47:	48 01 d8             	add    rax,rbx
ffff800000809f4a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:197
    return 0;
ffff800000809f4c:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:198
}
ffff800000809f51:	48 83 c4 40          	add    rsp,0x40
ffff800000809f55:	5b                   	pop    rbx
ffff800000809f56:	41 5f                	pop    r15
ffff800000809f58:	5d                   	pop    rbp
ffff800000809f59:	c3                   	ret    

ffff800000809f5a <ioctl_framebuffer>:
ioctl_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:199
long ioctl_framebuffer(struct index_node * inode,struct file * filp,unsigned long cmd,unsigned long arg){
ffff800000809f5a:	f3 0f 1e fa          	endbr64 
ffff800000809f5e:	55                   	push   rbp
ffff800000809f5f:	48 89 e5             	mov    rbp,rsp
ffff800000809f62:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000809f62 <ioctl_framebuffer+0x8>
ffff800000809f69:	49 bb b6 28 11 00 00 	movabs r11,0x1128b6
ffff800000809f70:	00 00 00 
ffff800000809f73:	4c 01 d8             	add    rax,r11
ffff800000809f76:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000809f7a:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000809f7e:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff800000809f82:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:201

}
ffff800000809f86:	90                   	nop
ffff800000809f87:	5d                   	pop    rbp
ffff800000809f88:	c3                   	ret    

ffff800000809f89 <path_walk>:
path_walk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:14
#include "mem.h"
#include "str.h"
#include <ramdisk.h>

struct dir_entry * path_walk(char * name,unsigned long flags)
{
ffff800000809f89:	f3 0f 1e fa          	endbr64 
ffff800000809f8d:	55                   	push   rbp
ffff800000809f8e:	48 89 e5             	mov    rbp,rsp
ffff800000809f91:	41 57                	push   r15
ffff800000809f93:	53                   	push   rbx
ffff800000809f94:	48 83 ec 70          	sub    rsp,0x70
ffff800000809f98:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000809f98 <path_walk+0xf>
ffff800000809f9f:	49 bb 80 28 11 00 00 	movabs r11,0x112880
ffff800000809fa6:	00 00 00 
ffff800000809fa9:	4c 01 db             	add    rbx,r11
ffff800000809fac:	48 89 7d 88          	mov    QWORD PTR [rbp-0x78],rdi
ffff800000809fb0:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:15
    char * tmpname = NULL;
ffff800000809fb4:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff800000809fbb:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:16
    int tmpnamelen = 0;
ffff800000809fbc:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:17
    struct dir_entry * parent = root_sb->root;
ffff800000809fc3:	48 b8 10 fe ff ff ff 	movabs rax,0xfffffffffffffe10
ffff800000809fca:	ff ff ff 
ffff800000809fcd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809fd1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809fd4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809fd7:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:18
    struct dir_entry * path = NULL;
ffff800000809fdb:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff800000809fe2:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:20

    while(*name == '/')
ffff800000809fe3:	eb 05                	jmp    ffff800000809fea <path_walk+0x61>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:21
        name++;
ffff800000809fe5:	48 83 45 88 01       	add    QWORD PTR [rbp-0x78],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:20
    while(*name == '/')
ffff800000809fea:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000809fee:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000809ff1:	3c 2f                	cmp    al,0x2f
ffff800000809ff3:	74 f0                	je     ffff800000809fe5 <path_walk+0x5c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:23

    if(!*name)
ffff800000809ff5:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000809ff9:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000809ffc:	84 c0                	test   al,al
ffff800000809ffe:	75 09                	jne    ffff80000080a009 <path_walk+0x80>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:25
    {
        return parent;
ffff80000080a000:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080a004:	e9 f8 02 00 00       	jmp    ffff80000080a301 <path_walk+0x378>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:30
    }

    for(;;)
    {
        tmpname = name;
ffff80000080a009:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080a00d:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:31
        while(*name && (*name != '/'))
ffff80000080a011:	eb 05                	jmp    ffff80000080a018 <path_walk+0x8f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:32
            name++;
ffff80000080a013:	48 83 45 88 01       	add    QWORD PTR [rbp-0x78],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:31
        while(*name && (*name != '/'))
ffff80000080a018:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080a01c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080a01f:	84 c0                	test   al,al
ffff80000080a021:	74 0b                	je     ffff80000080a02e <path_walk+0xa5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:31 (discriminator 1)
ffff80000080a023:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080a027:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080a02a:	3c 2f                	cmp    al,0x2f
ffff80000080a02c:	75 e5                	jne    ffff80000080a013 <path_walk+0x8a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:33
        tmpnamelen = name - tmpname;
ffff80000080a02e:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080a032:	48 2b 45 e0          	sub    rax,QWORD PTR [rbp-0x20]
ffff80000080a036:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:35

        path = (struct dir_entry *) kmalloc(sizeof(struct dir_entry), 0);
ffff80000080a039:	be 00 00 00 00       	mov    esi,0x0
ffff80000080a03e:	bf 58 00 00 00       	mov    edi,0x58
ffff80000080a043:	49 89 df             	mov    r15,rbx
ffff80000080a046:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080a04b:	48 ba 68 57 ee ff ff 	movabs rdx,0xffffffffffee5768
ffff80000080a052:	ff ff ff 
ffff80000080a055:	48 01 da             	add    rdx,rbx
ffff80000080a058:	ff d2                	call   rdx
ffff80000080a05a:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:36
        memset(path,0,sizeof(struct dir_entry));
ffff80000080a05e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080a062:	ba 58 00 00 00       	mov    edx,0x58
ffff80000080a067:	be 00 00 00 00       	mov    esi,0x0
ffff80000080a06c:	48 89 c7             	mov    rdi,rax
ffff80000080a06f:	49 89 df             	mov    r15,rbx
ffff80000080a072:	48 b8 6b 53 ef ff ff 	movabs rax,0xffffffffffef536b
ffff80000080a079:	ff ff ff 
ffff80000080a07c:	48 01 d8             	add    rax,rbx
ffff80000080a07f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:38

        path->name = kmalloc();
ffff80000080a081:	49 89 df             	mov    r15,rbx
ffff80000080a084:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080a089:	48 ba 68 57 ee ff ff 	movabs rdx,0xffffffffffee5768
ffff80000080a090:	ff ff ff 
ffff80000080a093:	48 01 da             	add    rdx,rbx
ffff80000080a096:	ff d2                	call   rdx
ffff80000080a098:	48 89 c2             	mov    rdx,rax
ffff80000080a09b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080a09f:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:39
        memset(path->name,0,tmpnamelen+1);
ffff80000080a0a2:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080a0a5:	83 c0 01             	add    eax,0x1
ffff80000080a0a8:	89 c2                	mov    edx,eax
ffff80000080a0aa:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080a0ae:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a0b1:	be 00 00 00 00       	mov    esi,0x0
ffff80000080a0b6:	48 89 c7             	mov    rdi,rax
ffff80000080a0b9:	49 89 df             	mov    r15,rbx
ffff80000080a0bc:	48 b8 6b 53 ef ff ff 	movabs rax,0xffffffffffef536b
ffff80000080a0c3:	ff ff ff 
ffff80000080a0c6:	48 01 d8             	add    rax,rbx
ffff80000080a0c9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:40
        memcpy(path->name,tmpname,tmpnamelen);
ffff80000080a0cb:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080a0ce:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080a0d2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a0d5:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
ffff80000080a0d9:	48 89 ce             	mov    rsi,rcx
ffff80000080a0dc:	48 89 c7             	mov    rdi,rax
ffff80000080a0df:	49 89 df             	mov    r15,rbx
ffff80000080a0e2:	48 b8 bc 52 ef ff ff 	movabs rax,0xffffffffffef52bc
ffff80000080a0e9:	ff ff ff 
ffff80000080a0ec:	48 01 d8             	add    rax,rbx
ffff80000080a0ef:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:41
        path->name_length = tmpnamelen;
ffff80000080a0f1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080a0f5:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080a0f8:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:43

        path=parent->dir_inode->inode_ops->lookup(parent->dir_inode,path);
ffff80000080a0fb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080a0ff:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080a103:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff80000080a107:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
ffff80000080a10b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080a10f:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080a113:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000080a117:	48 89 d6             	mov    rsi,rdx
ffff80000080a11a:	48 89 c7             	mov    rdi,rax
ffff80000080a11d:	ff d1                	call   rcx
ffff80000080a11f:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:44
        if(path == NULL)
ffff80000080a123:	48 83 7d d0 00       	cmp    QWORD PTR [rbp-0x30],0x0
ffff80000080a128:	75 71                	jne    ffff80000080a19b <path_walk+0x212>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:46
        {
            printf("can not find file or dir:%s\n",path->name);
ffff80000080a12a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080a12e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a131:	48 89 c6             	mov    rsi,rax
ffff80000080a134:	48 b8 2a d9 ff ff ff 	movabs rax,0xffffffffffffd92a
ffff80000080a13b:	ff ff ff 
ffff80000080a13e:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080a142:	48 89 c7             	mov    rdi,rax
ffff80000080a145:	49 89 df             	mov    r15,rbx
ffff80000080a148:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080a14d:	48 ba 96 4e ee ff ff 	movabs rdx,0xffffffffffee4e96
ffff80000080a154:	ff ff ff 
ffff80000080a157:	48 01 da             	add    rdx,rbx
ffff80000080a15a:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:47
            kmfree(path->name);
ffff80000080a15c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080a160:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a163:	48 89 c7             	mov    rdi,rax
ffff80000080a166:	49 89 df             	mov    r15,rbx
ffff80000080a169:	48 b8 d7 5a ee ff ff 	movabs rax,0xffffffffffee5ad7
ffff80000080a170:	ff ff ff 
ffff80000080a173:	48 01 d8             	add    rax,rbx
ffff80000080a176:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:48
            kmfree(path);
ffff80000080a178:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080a17c:	48 89 c7             	mov    rdi,rax
ffff80000080a17f:	49 89 df             	mov    r15,rbx
ffff80000080a182:	48 b8 d7 5a ee ff ff 	movabs rax,0xffffffffffee5ad7
ffff80000080a189:	ff ff ff 
ffff80000080a18c:	48 01 d8             	add    rax,rbx
ffff80000080a18f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:49
            return NULL;
ffff80000080a191:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080a196:	e9 66 01 00 00       	jmp    ffff80000080a301 <path_walk+0x378>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:54
        }

//        list_init(&path->child_node);
//        list_init(&path->subdirs_list);
        path->parent = parent;
ffff80000080a19b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080a19f:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080a1a3:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:57
        //list_add会查重，如果链表里面已经有了data指针值相同的项，就不添加。
        //对于/dev这样的文件夹，lookup返回的就是链表里的dentry，data会一样
        list_add(&parent->subdirs_list,&path->child_node);
ffff80000080a1a7:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080a1ab:	48 83 c0 10          	add    rax,0x10
ffff80000080a1af:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080a1b3:	48 83 c2 28          	add    rdx,0x28
ffff80000080a1b7:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
ffff80000080a1bb:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:33
    if(entry->next==NULL)
ffff80000080a1bf:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080a1c3:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080a1c7:	48 85 c0             	test   rax,rax
ffff80000080a1ca:	75 50                	jne    ffff80000080a21c <path_walk+0x293>
ffff80000080a1cc:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080a1d0:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
ffff80000080a1d4:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080a1d8:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff80000080a1dc:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080a1e0:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080a1e4:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080a1e8:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff80000080a1ec:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080a1f0:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000080a1f4:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff80000080a1f7:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080a1fb:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080a1ff:	48 85 c0             	test   rax,rax
ffff80000080a202:	0f 84 a3 00 00 00    	je     ffff80000080a2ab <path_walk+0x322>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff80000080a208:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080a20c:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080a210:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffff80000080a214:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff80000080a217:	e9 8f 00 00 00       	jmp    ffff80000080a2ab <path_walk+0x322>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:36
        struct List* p=entry;
ffff80000080a21c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080a220:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff80000080a224:	eb 21                	jmp    ffff80000080a247 <path_walk+0x2be>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:38
            if(p->data==new->data)
ffff80000080a226:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080a22a:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff80000080a22e:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080a232:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080a236:	48 39 c2             	cmp    rdx,rax
ffff80000080a239:	74 73                	je     ffff80000080a2ae <path_walk+0x325>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff80000080a23b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080a23f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080a243:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
ffff80000080a247:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080a24b:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080a24f:	48 85 c0             	test   rax,rax
ffff80000080a252:	74 0e                	je     ffff80000080a262 <path_walk+0x2d9>
ffff80000080a254:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080a258:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080a25c:	48 39 45 a8          	cmp    QWORD PTR [rbp-0x58],rax
ffff80000080a260:	75 c4                	jne    ffff80000080a226 <path_walk+0x29d>
ffff80000080a262:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080a266:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
ffff80000080a26a:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080a26e:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff80000080a272:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080a276:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080a27a:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080a27e:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff80000080a282:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080a286:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
ffff80000080a28a:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff80000080a28d:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080a291:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080a295:	48 85 c0             	test   rax,rax
ffff80000080a298:	74 17                	je     ffff80000080a2b1 <path_walk+0x328>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff80000080a29a:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080a29e:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080a2a2:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
ffff80000080a2a6:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff80000080a2a9:	eb 06                	jmp    ffff80000080a2b1 <path_walk+0x328>
ffff80000080a2ab:	90                   	nop
ffff80000080a2ac:	eb 04                	jmp    ffff80000080a2b2 <path_walk+0x329>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:39
                return;
ffff80000080a2ae:	90                   	nop
ffff80000080a2af:	eb 01                	jmp    ffff80000080a2b2 <path_walk+0x329>
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff80000080a2b1:	90                   	nop
path_walk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:59

        if(!*name)
ffff80000080a2b2:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080a2b6:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080a2b9:	84 c0                	test   al,al
ffff80000080a2bb:	74 2a                	je     ffff80000080a2e7 <path_walk+0x35e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:61
            goto last_component;
        while(*name == '/')
ffff80000080a2bd:	eb 05                	jmp    ffff80000080a2c4 <path_walk+0x33b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:62
            name++;
ffff80000080a2bf:	48 83 45 88 01       	add    QWORD PTR [rbp-0x78],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:61
        while(*name == '/')
ffff80000080a2c4:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080a2c8:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080a2cb:	3c 2f                	cmp    al,0x2f
ffff80000080a2cd:	74 f0                	je     ffff80000080a2bf <path_walk+0x336>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:63
        if(!*name)
ffff80000080a2cf:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080a2d3:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080a2d6:	84 c0                	test   al,al
ffff80000080a2d8:	74 10                	je     ffff80000080a2ea <path_walk+0x361>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:66
            goto last_slash;

        parent = path;
ffff80000080a2da:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080a2de:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:30
        tmpname = name;
ffff80000080a2e2:	e9 22 fd ff ff       	jmp    ffff80000080a009 <path_walk+0x80>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:60
            goto last_component;
ffff80000080a2e7:	90                   	nop
ffff80000080a2e8:	eb 01                	jmp    ffff80000080a2eb <path_walk+0x362>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:64
            goto last_slash;
ffff80000080a2ea:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:72
    }

    last_slash:
    last_component:

    if(flags & 1)
ffff80000080a2eb:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080a2ef:	83 e0 01             	and    eax,0x1
ffff80000080a2f2:	48 85 c0             	test   rax,rax
ffff80000080a2f5:	74 06                	je     ffff80000080a2fd <path_walk+0x374>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:74
    {
        return parent;
ffff80000080a2f7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080a2fb:	eb 04                	jmp    ffff80000080a301 <path_walk+0x378>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:77
    }

    return path;
ffff80000080a2fd:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:78
}
ffff80000080a301:	48 83 c4 70          	add    rsp,0x70
ffff80000080a305:	5b                   	pop    rbx
ffff80000080a306:	41 5f                	pop    r15
ffff80000080a308:	5d                   	pop    rbp
ffff80000080a309:	c3                   	ret    

ffff80000080a30a <fill_dentry>:
fill_dentry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:82


int fill_dentry(void *buf,char *name, long namelen,long type,long offset)
{
ffff80000080a30a:	f3 0f 1e fa          	endbr64 
ffff80000080a30e:	55                   	push   rbp
ffff80000080a30f:	48 89 e5             	mov    rbp,rsp
ffff80000080a312:	41 57                	push   r15
ffff80000080a314:	48 83 ec 48          	sub    rsp,0x48
ffff80000080a318:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080a318 <fill_dentry+0xe>
ffff80000080a31f:	49 bb 00 25 11 00 00 	movabs r11,0x112500
ffff80000080a326:	00 00 00 
ffff80000080a329:	4c 01 d8             	add    rax,r11
ffff80000080a32c:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff80000080a330:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffff80000080a334:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
ffff80000080a338:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
ffff80000080a33c:	4c 89 45 b8          	mov    QWORD PTR [rbp-0x48],r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:83
    struct dirent* dent = (struct dirent*)buf;
ffff80000080a340:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080a344:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:85

    if((unsigned long)buf < PAGE_4K_SIZE)
ffff80000080a348:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080a34c:	48 81 fa ff 0f 00 00 	cmp    rdx,0xfff
ffff80000080a353:	77 07                	ja     ffff80000080a35c <fill_dentry+0x52>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:86
        return -EFAULT;
ffff80000080a355:	b8 eb ff ff ff       	mov    eax,0xffffffeb
ffff80000080a35a:	eb 53                	jmp    ffff80000080a3af <fill_dentry+0xa5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:88

    memcpy(name,dent->d_name,namelen);
ffff80000080a35c:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080a360:	89 d7                	mov    edi,edx
ffff80000080a362:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080a366:	48 8d 72 18          	lea    rsi,[rdx+0x18]
ffff80000080a36a:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffff80000080a36e:	89 fa                	mov    edx,edi
ffff80000080a370:	48 89 cf             	mov    rdi,rcx
ffff80000080a373:	49 89 c7             	mov    r15,rax
ffff80000080a376:	48 b9 bc 52 ef ff ff 	movabs rcx,0xffffffffffef52bc
ffff80000080a37d:	ff ff ff 
ffff80000080a380:	48 01 c1             	add    rcx,rax
ffff80000080a383:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:89
    dent->d_namelen = namelen;
ffff80000080a385:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080a389:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080a38d:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:90
    dent->d_type = type;
ffff80000080a391:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080a395:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff80000080a399:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:91
    dent->d_offset = offset;
ffff80000080a39d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080a3a1:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000080a3a5:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:92
    return sizeof(struct dirent) + namelen;
ffff80000080a3a8:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080a3ac:	83 c0 18             	add    eax,0x18
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:93
}
ffff80000080a3af:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080a3b3:	c9                   	leave  
ffff80000080a3b4:	c3                   	ret    

ffff80000080a3b5 <mount_fs>:
mount_fs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:100
//function mount_root
struct super_block * root_sb = NULL;
struct file_system_type filesystem = {"filesystem",0};

struct super_block* mount_fs(char * name,struct Disk_Partition_Table_Entry * DPTE,void * buf)
{
ffff80000080a3b5:	f3 0f 1e fa          	endbr64 
ffff80000080a3b9:	55                   	push   rbp
ffff80000080a3ba:	48 89 e5             	mov    rbp,rsp
ffff80000080a3bd:	41 57                	push   r15
ffff80000080a3bf:	53                   	push   rbx
ffff80000080a3c0:	48 83 ec 30          	sub    rsp,0x30
ffff80000080a3c4:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080a3c4 <mount_fs+0xf>
ffff80000080a3cb:	49 bb 54 24 11 00 00 	movabs r11,0x112454
ffff80000080a3d2:	00 00 00 
ffff80000080a3d5:	4c 01 db             	add    rbx,r11
ffff80000080a3d8:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff80000080a3dc:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffff80000080a3e0:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:101
    struct file_system_type * p = NULL;
ffff80000080a3e4:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000080a3eb:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:103

    for(p = &filesystem;p;p = p->next)
ffff80000080a3ec:	48 b8 50 ff ff ff ff 	movabs rax,0xffffffffffffff50
ffff80000080a3f3:	ff ff ff 
ffff80000080a3f6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a3fa:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff80000080a3fe:	eb 4d                	jmp    ffff80000080a44d <mount_fs+0x98>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:104
        if(!strcmp(p->name,name))
ffff80000080a400:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080a404:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a407:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080a40b:	48 89 d6             	mov    rsi,rdx
ffff80000080a40e:	48 89 c7             	mov    rdi,rax
ffff80000080a411:	49 89 df             	mov    r15,rbx
ffff80000080a414:	48 b8 0e 56 ef ff ff 	movabs rax,0xffffffffffef560e
ffff80000080a41b:	ff ff ff 
ffff80000080a41e:	48 01 d8             	add    rax,rbx
ffff80000080a421:	ff d0                	call   rax
ffff80000080a423:	85 c0                	test   eax,eax
ffff80000080a425:	75 1a                	jne    ffff80000080a441 <mount_fs+0x8c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:106
        {
            return p->read_superblock(DPTE,buf);
ffff80000080a427:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080a42b:	48 8b 48 10          	mov    rcx,QWORD PTR [rax+0x10]
ffff80000080a42f:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080a433:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080a437:	48 89 d6             	mov    rsi,rdx
ffff80000080a43a:	48 89 c7             	mov    rdi,rax
ffff80000080a43d:	ff d1                	call   rcx
ffff80000080a43f:	eb 18                	jmp    ffff80000080a459 <mount_fs+0xa4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:103 (discriminator 2)
    for(p = &filesystem;p;p = p->next)
ffff80000080a441:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080a445:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080a449:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:103 (discriminator 1)
ffff80000080a44d:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080a452:	75 ac                	jne    ffff80000080a400 <mount_fs+0x4b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:108
        }
    return 0;
ffff80000080a454:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:109
}
ffff80000080a459:	48 83 c4 30          	add    rsp,0x30
ffff80000080a45d:	5b                   	pop    rbx
ffff80000080a45e:	41 5f                	pop    r15
ffff80000080a460:	5d                   	pop    rbp
ffff80000080a461:	c3                   	ret    

ffff80000080a462 <register_filesystem>:
register_filesystem():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:112

unsigned long register_filesystem(struct file_system_type * fs)
{
ffff80000080a462:	f3 0f 1e fa          	endbr64 
ffff80000080a466:	55                   	push   rbp
ffff80000080a467:	48 89 e5             	mov    rbp,rsp
ffff80000080a46a:	41 57                	push   r15
ffff80000080a46c:	53                   	push   rbx
ffff80000080a46d:	48 83 ec 20          	sub    rsp,0x20
ffff80000080a471:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080a471 <register_filesystem+0xf>
ffff80000080a478:	49 bb a7 23 11 00 00 	movabs r11,0x1123a7
ffff80000080a47f:	00 00 00 
ffff80000080a482:	4c 01 db             	add    rbx,r11
ffff80000080a485:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:113
    struct file_system_type * p = NULL;
ffff80000080a489:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000080a490:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:115

    for(p = &filesystem;p;p = p->next)
ffff80000080a491:	48 b8 50 ff ff ff ff 	movabs rax,0xffffffffffffff50
ffff80000080a498:	ff ff ff 
ffff80000080a49b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a49f:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff80000080a4a3:	eb 3d                	jmp    ffff80000080a4e2 <register_filesystem+0x80>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:116
        if(!strcmp(fs->name,p->name))
ffff80000080a4a5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080a4a9:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080a4ac:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a4b0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a4b3:	48 89 d6             	mov    rsi,rdx
ffff80000080a4b6:	48 89 c7             	mov    rdi,rax
ffff80000080a4b9:	49 89 df             	mov    r15,rbx
ffff80000080a4bc:	48 b8 0e 56 ef ff ff 	movabs rax,0xffffffffffef560e
ffff80000080a4c3:	ff ff ff 
ffff80000080a4c6:	48 01 d8             	add    rax,rbx
ffff80000080a4c9:	ff d0                	call   rax
ffff80000080a4cb:	85 c0                	test   eax,eax
ffff80000080a4cd:	75 07                	jne    ffff80000080a4d6 <register_filesystem+0x74>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:117
            return 0;
ffff80000080a4cf:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080a4d4:	eb 48                	jmp    ffff80000080a51e <register_filesystem+0xbc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:115 (discriminator 2)
    for(p = &filesystem;p;p = p->next)
ffff80000080a4d6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080a4da:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080a4de:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:115 (discriminator 1)
ffff80000080a4e2:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080a4e7:	75 bc                	jne    ffff80000080a4a5 <register_filesystem+0x43>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:119

    fs->next = filesystem.next;
ffff80000080a4e9:	48 b8 50 ff ff ff ff 	movabs rax,0xffffffffffffff50
ffff80000080a4f0:	ff ff ff 
ffff80000080a4f3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a4f7:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
ffff80000080a4fb:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a4ff:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:120
    filesystem.next = fs;
ffff80000080a503:	48 b8 50 ff ff ff ff 	movabs rax,0xffffffffffffff50
ffff80000080a50a:	ff ff ff 
ffff80000080a50d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a511:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080a515:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:122

    return 1;
ffff80000080a519:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:123
}
ffff80000080a51e:	48 83 c4 20          	add    rsp,0x20
ffff80000080a522:	5b                   	pop    rbx
ffff80000080a523:	41 5f                	pop    r15
ffff80000080a525:	5d                   	pop    rbp
ffff80000080a526:	c3                   	ret    

ffff80000080a527 <unregister_filesystem>:
unregister_filesystem():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:126

unsigned long unregister_filesystem(struct file_system_type * fs)
{
ffff80000080a527:	f3 0f 1e fa          	endbr64 
ffff80000080a52b:	55                   	push   rbp
ffff80000080a52c:	48 89 e5             	mov    rbp,rsp
ffff80000080a52f:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080a52f <unregister_filesystem+0x8>
ffff80000080a536:	49 bb e9 22 11 00 00 	movabs r11,0x1122e9
ffff80000080a53d:	00 00 00 
ffff80000080a540:	4c 01 d8             	add    rax,r11
ffff80000080a543:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:127
    struct file_system_type * p = &filesystem;
ffff80000080a547:	48 ba 50 ff ff ff ff 	movabs rdx,0xffffffffffffff50
ffff80000080a54e:	ff ff ff 
ffff80000080a551:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080a555:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:129

    while(p->next)
ffff80000080a559:	eb 41                	jmp    ffff80000080a59c <unregister_filesystem+0x75>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:130
        if(p->next == fs)
ffff80000080a55b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080a55f:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080a563:	48 39 45 e8          	cmp    QWORD PTR [rbp-0x18],rax
ffff80000080a567:	75 27                	jne    ffff80000080a590 <unregister_filesystem+0x69>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:132
        {
            p->next = p->next->next;
ffff80000080a569:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080a56d:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080a571:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
ffff80000080a575:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080a579:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:133
            fs->next = NULL;
ffff80000080a57d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080a581:	48 c7 40 18 00 00 00 	mov    QWORD PTR [rax+0x18],0x0
ffff80000080a588:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:134
            return 1;
ffff80000080a589:	b8 01 00 00 00       	mov    eax,0x1
ffff80000080a58e:	eb 1e                	jmp    ffff80000080a5ae <unregister_filesystem+0x87>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:137
        }
        else
            p = p->next;
ffff80000080a590:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080a594:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080a598:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:129
    while(p->next)
ffff80000080a59c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080a5a0:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080a5a4:	48 85 c0             	test   rax,rax
ffff80000080a5a7:	75 b2                	jne    ffff80000080a55b <unregister_filesystem+0x34>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:138
    return 0;
ffff80000080a5a9:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:139
}
ffff80000080a5ae:	5d                   	pop    rbp
ffff80000080a5af:	c3                   	ret    

ffff80000080a5b0 <root_lookup>:
root_lookup():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:141
//在parent inode下查找dest dentry
struct dir_entry* root_lookup(struct index_node * parent_inode,struct dir_entry * dest_dentry){
ffff80000080a5b0:	f3 0f 1e fa          	endbr64 
ffff80000080a5b4:	55                   	push   rbp
ffff80000080a5b5:	48 89 e5             	mov    rbp,rsp
ffff80000080a5b8:	41 57                	push   r15
ffff80000080a5ba:	53                   	push   rbx
ffff80000080a5bb:	48 83 ec 30          	sub    rsp,0x30
ffff80000080a5bf:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080a5bf <root_lookup+0xf>
ffff80000080a5c6:	49 bb 59 22 11 00 00 	movabs r11,0x112259
ffff80000080a5cd:	00 00 00 
ffff80000080a5d0:	4c 01 db             	add    rbx,r11
ffff80000080a5d3:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff80000080a5d7:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:142
    struct dir_entry* tmp= (struct dir_entry *) parent_inode->private_index_info;
ffff80000080a5db:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080a5df:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff80000080a5e3:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:143
    struct List* p= tmp->subdirs_list.next;
ffff80000080a5e7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080a5eb:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff80000080a5ef:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:144
    while (p){
ffff80000080a5f3:	eb 61                	jmp    ffff80000080a656 <root_lookup+0xa6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:145
        struct dir_entry* dp=p->data;
ffff80000080a5f5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080a5f9:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080a5fd:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:146
        if(strcmp(dp->name,dest_dentry->name)==0){
ffff80000080a601:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080a605:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080a608:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a60c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a60f:	48 89 d6             	mov    rsi,rdx
ffff80000080a612:	48 89 c7             	mov    rdi,rax
ffff80000080a615:	49 89 df             	mov    r15,rbx
ffff80000080a618:	48 b8 0e 56 ef ff ff 	movabs rax,0xffffffffffef560e
ffff80000080a61f:	ff ff ff 
ffff80000080a622:	48 01 d8             	add    rax,rbx
ffff80000080a625:	ff d0                	call   rax
ffff80000080a627:	85 c0                	test   eax,eax
ffff80000080a629:	75 1f                	jne    ffff80000080a64a <root_lookup+0x9a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:147
            kmfree(dest_dentry);
ffff80000080a62b:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080a62f:	48 89 c7             	mov    rdi,rax
ffff80000080a632:	49 89 df             	mov    r15,rbx
ffff80000080a635:	48 b8 d7 5a ee ff ff 	movabs rax,0xffffffffffee5ad7
ffff80000080a63c:	ff ff ff 
ffff80000080a63f:	48 01 d8             	add    rax,rbx
ffff80000080a642:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:148
            return dp;
ffff80000080a644:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a648:	eb 31                	jmp    ffff80000080a67b <root_lookup+0xcb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:150
        }
        p=p->next;
ffff80000080a64a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080a64e:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080a652:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:144
    while (p){
ffff80000080a656:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080a65b:	75 98                	jne    ffff80000080a5f5 <root_lookup+0x45>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:152
    }
    kmfree(dest_dentry);
ffff80000080a65d:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080a661:	48 89 c7             	mov    rdi,rax
ffff80000080a664:	49 89 df             	mov    r15,rbx
ffff80000080a667:	48 b8 d7 5a ee ff ff 	movabs rax,0xffffffffffee5ad7
ffff80000080a66e:	ff ff ff 
ffff80000080a671:	48 01 d8             	add    rax,rbx
ffff80000080a674:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:153
    return NULL;
ffff80000080a676:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:154
}
ffff80000080a67b:	48 83 c4 30          	add    rsp,0x30
ffff80000080a67f:	5b                   	pop    rbx
ffff80000080a680:	41 5f                	pop    r15
ffff80000080a682:	5d                   	pop    rbp
ffff80000080a683:	c3                   	ret    

ffff80000080a684 <init_rootfs>:
init_rootfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:158
struct index_node_operations root_iops={
    .lookup=root_lookup
};
void init_rootfs(){
ffff80000080a684:	f3 0f 1e fa          	endbr64 
ffff80000080a688:	55                   	push   rbp
ffff80000080a689:	48 89 e5             	mov    rbp,rsp
ffff80000080a68c:	41 57                	push   r15
ffff80000080a68e:	53                   	push   rbx
ffff80000080a68f:	48 83 ec 20          	sub    rsp,0x20
ffff80000080a693:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080a693 <init_rootfs+0xf>
ffff80000080a69a:	49 bb 85 21 11 00 00 	movabs r11,0x112185
ffff80000080a6a1:	00 00 00 
ffff80000080a6a4:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:159
    root_sb=(struct super_block*) kmalloc();
ffff80000080a6a7:	49 89 df             	mov    r15,rbx
ffff80000080a6aa:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080a6af:	48 ba 68 57 ee ff ff 	movabs rdx,0xffffffffffee5768
ffff80000080a6b6:	ff ff ff 
ffff80000080a6b9:	48 01 da             	add    rdx,rbx
ffff80000080a6bc:	ff d2                	call   rdx
ffff80000080a6be:	48 89 c2             	mov    rdx,rax
ffff80000080a6c1:	48 b8 10 fe ff ff ff 	movabs rax,0xfffffffffffffe10
ffff80000080a6c8:	ff ff ff 
ffff80000080a6cb:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a6cf:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:160
    root_sb->root=root_sb+1;//紧凑跟在后面
ffff80000080a6d2:	48 b8 10 fe ff ff ff 	movabs rax,0xfffffffffffffe10
ffff80000080a6d9:	ff ff ff 
ffff80000080a6dc:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a6e0:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080a6e3:	48 b8 10 fe ff ff ff 	movabs rax,0xfffffffffffffe10
ffff80000080a6ea:	ff ff ff 
ffff80000080a6ed:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a6f1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a6f4:	48 83 c2 28          	add    rdx,0x28
ffff80000080a6f8:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:161
    root_sb->sb_ops=NULL;
ffff80000080a6fb:	48 b8 10 fe ff ff ff 	movabs rax,0xfffffffffffffe10
ffff80000080a702:	ff ff ff 
ffff80000080a705:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a709:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a70c:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
ffff80000080a713:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:163
    
    struct index_node* ir=root_sb->root+1;
ffff80000080a714:	48 b8 10 fe ff ff ff 	movabs rax,0xfffffffffffffe10
ffff80000080a71b:	ff ff ff 
ffff80000080a71e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a722:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a725:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a728:	48 83 c0 58          	add    rax,0x58
ffff80000080a72c:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:164
    root_sb->root->dir_inode=ir;
ffff80000080a730:	48 b8 10 fe ff ff ff 	movabs rax,0xfffffffffffffe10
ffff80000080a737:	ff ff ff 
ffff80000080a73a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a73e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a741:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a744:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080a748:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:165
    ir->sb=root_sb;
ffff80000080a74c:	48 b8 10 fe ff ff ff 	movabs rax,0xfffffffffffffe10
ffff80000080a753:	ff ff ff 
ffff80000080a756:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a75a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080a75d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080a761:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:166
    ir->attribute=FS_ATTR_DIR;
ffff80000080a765:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080a769:	48 c7 40 10 02 00 00 	mov    QWORD PTR [rax+0x10],0x2
ffff80000080a770:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:167
    ir->file_size=0;
ffff80000080a771:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080a775:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:168
    ir->inode_ops=&root_iops;//lookup函数是必要的
ffff80000080a77c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080a780:	48 ba 58 fd ff ff ff 	movabs rdx,0xfffffffffffffd58
ffff80000080a787:	ff ff ff 
ffff80000080a78a:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080a78e:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:169
    ir->f_ops=NULL;
ffff80000080a792:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080a796:	48 c7 40 28 00 00 00 	mov    QWORD PTR [rax+0x28],0x0
ffff80000080a79d:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:170
    ir->private_index_info=root_sb->root;
ffff80000080a79e:	48 b8 10 fe ff ff ff 	movabs rax,0xfffffffffffffe10
ffff80000080a7a5:	ff ff ff 
ffff80000080a7a8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a7ac:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a7af:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080a7b2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080a7b6:	48 89 50 38          	mov    QWORD PTR [rax+0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:172

    root_sb->root->name=ir+1;//紧凑跟在后面
ffff80000080a7ba:	48 b8 10 fe ff ff ff 	movabs rax,0xfffffffffffffe10
ffff80000080a7c1:	ff ff ff 
ffff80000080a7c4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a7c8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a7cb:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a7ce:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080a7d2:	48 83 c2 40          	add    rdx,0x40
ffff80000080a7d6:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:173
    strcpy(root_sb->root->name,"/");
ffff80000080a7d9:	48 b8 10 fe ff ff ff 	movabs rax,0xfffffffffffffe10
ffff80000080a7e0:	ff ff ff 
ffff80000080a7e3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a7e7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a7ea:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a7ed:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a7f0:	48 ba 52 d9 ff ff ff 	movabs rdx,0xffffffffffffd952
ffff80000080a7f7:	ff ff ff 
ffff80000080a7fa:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff80000080a7fe:	48 89 d6             	mov    rsi,rdx
ffff80000080a801:	48 89 c7             	mov    rdi,rax
ffff80000080a804:	49 89 df             	mov    r15,rbx
ffff80000080a807:	48 b8 c0 53 ef ff ff 	movabs rax,0xffffffffffef53c0
ffff80000080a80e:	ff ff ff 
ffff80000080a811:	48 01 d8             	add    rax,rbx
ffff80000080a814:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:174
    root_sb->root->name_length=1;
ffff80000080a816:	48 b8 10 fe ff ff ff 	movabs rax,0xfffffffffffffe10
ffff80000080a81d:	ff ff ff 
ffff80000080a820:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a824:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a827:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a82a:	c7 40 08 01 00 00 00 	mov    DWORD PTR [rax+0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:175
    root_sb->root->parent=root_sb->root;
ffff80000080a831:	48 b8 10 fe ff ff ff 	movabs rax,0xfffffffffffffe10
ffff80000080a838:	ff ff ff 
ffff80000080a83b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a83f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080a842:	48 b8 10 fe ff ff ff 	movabs rax,0xfffffffffffffe10
ffff80000080a849:	ff ff ff 
ffff80000080a84c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a850:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a853:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a856:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080a859:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:176
    list_init(&root_sb->root->subdirs_list);
ffff80000080a85d:	48 b8 10 fe ff ff ff 	movabs rax,0xfffffffffffffe10
ffff80000080a864:	ff ff ff 
ffff80000080a867:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a86b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a86e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a871:	48 83 c0 28          	add    rax,0x28
ffff80000080a875:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff80000080a879:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a87d:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000080a884:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a888:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000080a88f:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000080a890:	90                   	nop
init_rootfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:177
    list_init(&root_sb->root->child_node);
ffff80000080a891:	48 b8 10 fe ff ff ff 	movabs rax,0xfffffffffffffe10
ffff80000080a898:	ff ff ff 
ffff80000080a89b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a89f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a8a2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a8a5:	48 83 c0 10          	add    rax,0x10
ffff80000080a8a9:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff80000080a8ad:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080a8b1:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000080a8b8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080a8bc:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000080a8c3:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000080a8c4:	90                   	nop
init_rootfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:179

    root_sb->dev=dev_ramdisk<<8;
ffff80000080a8c5:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080a8cc:	ff ff ff 
ffff80000080a8cf:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a8d3:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080a8d5:	89 c2                	mov    edx,eax
ffff80000080a8d7:	48 b8 10 fe ff ff ff 	movabs rax,0xfffffffffffffe10
ffff80000080a8de:	ff ff ff 
ffff80000080a8e1:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a8e5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a8e8:	c1 e2 08             	shl    edx,0x8
ffff80000080a8eb:	66 89 50 10          	mov    WORD PTR [rax+0x10],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:180
    root_sb->p_dev=&bd_ramdisk;
ffff80000080a8ef:	48 b8 10 fe ff ff ff 	movabs rax,0xfffffffffffffe10
ffff80000080a8f6:	ff ff ff 
ffff80000080a8f9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a8fd:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a900:	48 ba a8 ff ff ff ff 	movabs rdx,0xffffffffffffffa8
ffff80000080a907:	ff ff ff 
ffff80000080a90a:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080a90e:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:181
}
ffff80000080a912:	90                   	nop
ffff80000080a913:	48 83 c4 20          	add    rsp,0x20
ffff80000080a917:	5b                   	pop    rbx
ffff80000080a918:	41 5f                	pop    r15
ffff80000080a91a:	5d                   	pop    rbp
ffff80000080a91b:	c3                   	ret    

ffff80000080a91c <sys_putstring>:
sys_putstring():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:20
#include "syscall.h"
#include "int.h"


unsigned long sys_putstring(char *string)
{
ffff80000080a91c:	f3 0f 1e fa          	endbr64 
ffff80000080a920:	55                   	push   rbp
ffff80000080a921:	48 89 e5             	mov    rbp,rsp
ffff80000080a924:	41 57                	push   r15
ffff80000080a926:	48 83 ec 18          	sub    rsp,0x18
ffff80000080a92a:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080a92a <sys_putstring+0xe>
ffff80000080a931:	49 bb ee 1e 11 00 00 	movabs r11,0x111eee
ffff80000080a938:	00 00 00 
ffff80000080a93b:	4c 01 da             	add    rdx,r11
ffff80000080a93e:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:21
    printf(string);
ffff80000080a942:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080a946:	48 89 c7             	mov    rdi,rax
ffff80000080a949:	49 89 d7             	mov    r15,rdx
ffff80000080a94c:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080a951:	48 b9 96 4e ee ff ff 	movabs rcx,0xffffffffffee4e96
ffff80000080a958:	ff ff ff 
ffff80000080a95b:	48 01 d1             	add    rcx,rdx
ffff80000080a95e:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:22
    return 0;
ffff80000080a960:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:23
}
ffff80000080a965:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080a969:	c9                   	leave  
ffff80000080a96a:	c3                   	ret    

ffff80000080a96b <sys_open>:
sys_open():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:26

unsigned long sys_open(char *filename,int flags)
{
ffff80000080a96b:	f3 0f 1e fa          	endbr64 
ffff80000080a96f:	55                   	push   rbp
ffff80000080a970:	48 89 e5             	mov    rbp,rsp
ffff80000080a973:	41 57                	push   r15
ffff80000080a975:	53                   	push   rbx
ffff80000080a976:	48 81 ec a0 00 00 00 	sub    rsp,0xa0
ffff80000080a97d:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080a97d <sys_open+0x12>
ffff80000080a984:	49 bb 9b 1e 11 00 00 	movabs r11,0x111e9b
ffff80000080a98b:	00 00 00 
ffff80000080a98e:	4c 01 db             	add    rbx,r11
ffff80000080a991:	48 89 bd 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdi
ffff80000080a998:	89 b5 54 ff ff ff    	mov    DWORD PTR [rbp-0xac],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:27
    char * path = NULL;
ffff80000080a99e:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff80000080a9a5:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:28
    long pathlen = 0;
ffff80000080a9a6:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
ffff80000080a9ad:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:29
    long error = 0;
ffff80000080a9ae:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000080a9b5:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:30
    struct dir_entry * dentry = NULL;
ffff80000080a9b6:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff80000080a9bd:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:31
    struct file * filp = NULL;
ffff80000080a9be:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffff80000080a9c5:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:32
    struct file ** f = NULL;
ffff80000080a9c6:	48 c7 45 b0 00 00 00 	mov    QWORD PTR [rbp-0x50],0x0
ffff80000080a9cd:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:33
    int fd = -1;
ffff80000080a9ce:	c7 45 dc ff ff ff ff 	mov    DWORD PTR [rbp-0x24],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:37
    int i;

//	printf("sys_open\n");
    path = (char *) kmalloc();
ffff80000080a9d5:	49 89 df             	mov    r15,rbx
ffff80000080a9d8:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080a9dd:	48 ba 68 57 ee ff ff 	movabs rdx,0xffffffffffee5768
ffff80000080a9e4:	ff ff ff 
ffff80000080a9e7:	48 01 da             	add    rdx,rbx
ffff80000080a9ea:	ff d2                	call   rdx
ffff80000080a9ec:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:38
    if(path == NULL)
ffff80000080a9f0:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffff80000080a9f5:	75 0c                	jne    ffff80000080aa03 <sys_open+0x98>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:39
        return -ENOMEM;
ffff80000080a9f7:	48 c7 c0 cf ff ff ff 	mov    rax,0xffffffffffffffcf
ffff80000080a9fe:	e9 fc 05 00 00       	jmp    ffff80000080afff <sys_open+0x694>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:40
    memset(path,0,PAGE_4K_SIZE);
ffff80000080aa03:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080aa07:	ba 00 10 00 00       	mov    edx,0x1000
ffff80000080aa0c:	be 00 00 00 00       	mov    esi,0x0
ffff80000080aa11:	48 89 c7             	mov    rdi,rax
ffff80000080aa14:	49 89 df             	mov    r15,rbx
ffff80000080aa17:	48 b8 6b 53 ef ff ff 	movabs rax,0xffffffffffef536b
ffff80000080aa1e:	ff ff ff 
ffff80000080aa21:	48 01 d8             	add    rax,rbx
ffff80000080aa24:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:41
    pathlen = strlen(filename);
ffff80000080aa26:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
ffff80000080aa2d:	48 89 c7             	mov    rdi,rax
ffff80000080aa30:	49 89 df             	mov    r15,rbx
ffff80000080aa33:	48 b8 8d 56 ef ff ff 	movabs rax,0xffffffffffef568d
ffff80000080aa3a:	ff ff ff 
ffff80000080aa3d:	48 01 d8             	add    rax,rbx
ffff80000080aa40:	ff d0                	call   rax
ffff80000080aa42:	48 98                	cdqe   
ffff80000080aa44:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:42
    if(pathlen <= 0)
ffff80000080aa48:	48 83 7d c0 00       	cmp    QWORD PTR [rbp-0x40],0x0
ffff80000080aa4d:	7f 25                	jg     ffff80000080aa74 <sys_open+0x109>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:44
    {
        kmfree(path);
ffff80000080aa4f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080aa53:	48 89 c7             	mov    rdi,rax
ffff80000080aa56:	49 89 df             	mov    r15,rbx
ffff80000080aa59:	48 b8 d7 5a ee ff ff 	movabs rax,0xffffffffffee5ad7
ffff80000080aa60:	ff ff ff 
ffff80000080aa63:	48 01 d8             	add    rax,rbx
ffff80000080aa66:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:45
        return -EFAULT;
ffff80000080aa68:	48 c7 c0 eb ff ff ff 	mov    rax,0xffffffffffffffeb
ffff80000080aa6f:	e9 8b 05 00 00       	jmp    ffff80000080afff <sys_open+0x694>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:47
    }
    else if(pathlen >= PAGE_4K_SIZE)
ffff80000080aa74:	48 81 7d c0 ff 0f 00 	cmp    QWORD PTR [rbp-0x40],0xfff
ffff80000080aa7b:	00 
ffff80000080aa7c:	7e 25                	jle    ffff80000080aaa3 <sys_open+0x138>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:49
    {
        kmfree(path);
ffff80000080aa7e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080aa82:	48 89 c7             	mov    rdi,rax
ffff80000080aa85:	49 89 df             	mov    r15,rbx
ffff80000080aa88:	48 b8 d7 5a ee ff ff 	movabs rax,0xffffffffffee5ad7
ffff80000080aa8f:	ff ff ff 
ffff80000080aa92:	48 01 d8             	add    rax,rbx
ffff80000080aa95:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:50
        return -ENAMETOOLONG;
ffff80000080aa97:	48 c7 c0 db ff ff ff 	mov    rax,0xffffffffffffffdb
ffff80000080aa9e:	e9 5c 05 00 00       	jmp    ffff80000080afff <sys_open+0x694>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:52
    }
    strcpy(path,filename);
ffff80000080aaa3:	48 8b 95 58 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa8]
ffff80000080aaaa:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080aaae:	48 89 d6             	mov    rsi,rdx
ffff80000080aab1:	48 89 c7             	mov    rdi,rax
ffff80000080aab4:	49 89 df             	mov    r15,rbx
ffff80000080aab7:	48 b8 c0 53 ef ff ff 	movabs rax,0xffffffffffef53c0
ffff80000080aabe:	ff ff ff 
ffff80000080aac1:	48 01 d8             	add    rax,rbx
ffff80000080aac4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:54

    dentry = path_walk(path,0);
ffff80000080aac6:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080aaca:	be 00 00 00 00       	mov    esi,0x0
ffff80000080aacf:	48 89 c7             	mov    rdi,rax
ffff80000080aad2:	49 89 df             	mov    r15,rbx
ffff80000080aad5:	48 b8 71 d7 ee ff ff 	movabs rax,0xffffffffffeed771
ffff80000080aadc:	ff ff ff 
ffff80000080aadf:	48 01 d8             	add    rax,rbx
ffff80000080aae2:	ff d0                	call   rax
ffff80000080aae4:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:56

    if(dentry == NULL){
ffff80000080aae8:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
ffff80000080aaed:	0f 85 a8 02 00 00    	jne    ffff80000080ad9b <sys_open+0x430>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:61
        if(!flags&O_CREAT)
            return -ENOENT;
        //创建文件
        //找到上一级目录
        char* p=path+strlen(path)-1;
ffff80000080aaf3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080aaf7:	48 89 c7             	mov    rdi,rax
ffff80000080aafa:	49 89 df             	mov    r15,rbx
ffff80000080aafd:	48 b8 8d 56 ef ff ff 	movabs rax,0xffffffffffef568d
ffff80000080ab04:	ff ff ff 
ffff80000080ab07:	48 01 d8             	add    rax,rbx
ffff80000080ab0a:	ff d0                	call   rax
ffff80000080ab0c:	48 98                	cdqe   
ffff80000080ab0e:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff80000080ab12:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080ab16:	48 01 d0             	add    rax,rdx
ffff80000080ab19:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:62
        for(;*p!='/'&&p>path;p--);
ffff80000080ab1d:	eb 05                	jmp    ffff80000080ab24 <sys_open+0x1b9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:62 (discriminator 3)
ffff80000080ab1f:	48 83 6d d0 01       	sub    QWORD PTR [rbp-0x30],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:62 (discriminator 1)
ffff80000080ab24:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080ab28:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080ab2b:	3c 2f                	cmp    al,0x2f
ffff80000080ab2d:	74 0a                	je     ffff80000080ab39 <sys_open+0x1ce>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:62 (discriminator 2)
ffff80000080ab2f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080ab33:	48 3b 45 c8          	cmp    rax,QWORD PTR [rbp-0x38]
ffff80000080ab37:	77 e6                	ja     ffff80000080ab1f <sys_open+0x1b4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:63
        *p='\0';
ffff80000080ab39:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080ab3d:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:64
        struct dir_entry *parent= path_walk(path,O_DIRECTORY);
ffff80000080ab40:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080ab44:	be 00 40 00 00       	mov    esi,0x4000
ffff80000080ab49:	48 89 c7             	mov    rdi,rax
ffff80000080ab4c:	49 89 df             	mov    r15,rbx
ffff80000080ab4f:	48 b8 71 d7 ee ff ff 	movabs rax,0xffffffffffeed771
ffff80000080ab56:	ff ff ff 
ffff80000080ab59:	48 01 d8             	add    rax,rbx
ffff80000080ab5c:	ff d0                	call   rax
ffff80000080ab5e:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:65
        if(parent==NULL)
ffff80000080ab62:	48 83 7d a8 00       	cmp    QWORD PTR [rbp-0x58],0x0
ffff80000080ab67:	75 0c                	jne    ffff80000080ab75 <sys_open+0x20a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:66
            return -ENOENT;//上级目录也不在
ffff80000080ab69:	48 c7 c0 d3 ff ff ff 	mov    rax,0xffffffffffffffd3
ffff80000080ab70:	e9 8a 04 00 00       	jmp    ffff80000080afff <sys_open+0x694>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:68
        //创建新的文件
        dentry=(struct dir_entry*) kmalloc();
ffff80000080ab75:	49 89 df             	mov    r15,rbx
ffff80000080ab78:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080ab7d:	48 ba 68 57 ee ff ff 	movabs rdx,0xffffffffffee5768
ffff80000080ab84:	ff ff ff 
ffff80000080ab87:	48 01 da             	add    rdx,rbx
ffff80000080ab8a:	ff d2                	call   rdx
ffff80000080ab8c:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:69
        list_init(&dentry->subdirs_list);
ffff80000080ab90:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ab94:	48 83 c0 28          	add    rax,0x28
ffff80000080ab98:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff80000080ab9f:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff80000080aba6:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000080abad:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff80000080abb4:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000080abbb:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000080abbc:	90                   	nop
sys_open():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:70
        list_init(&dentry->child_node);
ffff80000080abbd:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080abc1:	48 83 c0 10          	add    rax,0x10
ffff80000080abc5:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff80000080abcc:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080abd3:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000080abda:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080abe1:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000080abe8:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000080abe9:	90                   	nop
sys_open():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:71
        dentry->child_node.data=dentry;
ffff80000080abea:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080abee:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080abf2:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:72
        list_add(&parent->subdirs_list,&dentry->child_node);
ffff80000080abf6:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080abfa:	48 83 c0 10          	add    rax,0x10
ffff80000080abfe:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff80000080ac02:	48 83 c2 28          	add    rdx,0x28
ffff80000080ac06:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
ffff80000080ac0a:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:33
    if(entry->next==NULL)
ffff80000080ac0e:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080ac12:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080ac16:	48 85 c0             	test   rax,rax
ffff80000080ac19:	75 50                	jne    ffff80000080ac6b <sys_open+0x300>
ffff80000080ac1b:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080ac1f:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
ffff80000080ac23:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080ac27:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff80000080ac2b:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080ac2f:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080ac33:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080ac37:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff80000080ac3b:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080ac3f:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
ffff80000080ac43:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff80000080ac46:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080ac4a:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080ac4e:	48 85 c0             	test   rax,rax
ffff80000080ac51:	0f 84 c2 00 00 00    	je     ffff80000080ad19 <sys_open+0x3ae>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff80000080ac57:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080ac5b:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080ac5f:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
ffff80000080ac63:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff80000080ac66:	e9 ae 00 00 00       	jmp    ffff80000080ad19 <sys_open+0x3ae>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:36
        struct List* p=entry;
ffff80000080ac6b:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080ac6f:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff80000080ac73:	eb 25                	jmp    ffff80000080ac9a <sys_open+0x32f>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:38
            if(p->data==new->data)
ffff80000080ac75:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080ac79:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff80000080ac7d:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080ac81:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080ac85:	48 39 c2             	cmp    rdx,rax
ffff80000080ac88:	0f 84 8e 00 00 00    	je     ffff80000080ad1c <sys_open+0x3b1>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff80000080ac8e:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080ac92:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080ac96:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
ffff80000080ac9a:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080ac9e:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080aca2:	48 85 c0             	test   rax,rax
ffff80000080aca5:	74 0e                	je     ffff80000080acb5 <sys_open+0x34a>
ffff80000080aca7:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080acab:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080acaf:	48 39 45 80          	cmp    QWORD PTR [rbp-0x80],rax
ffff80000080acb3:	75 c0                	jne    ffff80000080ac75 <sys_open+0x30a>
ffff80000080acb5:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080acb9:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
ffff80000080acc0:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080acc4:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff80000080accb:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff80000080acd2:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080acd6:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080acdd:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff80000080ace1:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080ace8:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
ffff80000080acef:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff80000080acf2:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080acf9:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080acfd:	48 85 c0             	test   rax,rax
ffff80000080ad00:	74 1d                	je     ffff80000080ad1f <sys_open+0x3b4>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff80000080ad02:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080ad09:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080ad0d:	48 8b 95 70 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x90]
ffff80000080ad14:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff80000080ad17:	eb 06                	jmp    ffff80000080ad1f <sys_open+0x3b4>
ffff80000080ad19:	90                   	nop
ffff80000080ad1a:	eb 04                	jmp    ffff80000080ad20 <sys_open+0x3b5>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:39
                return;
ffff80000080ad1c:	90                   	nop
ffff80000080ad1d:	eb 01                	jmp    ffff80000080ad20 <sys_open+0x3b5>
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff80000080ad1f:	90                   	nop
sys_open():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:73
        dentry->parent=parent;
ffff80000080ad20:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ad24:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff80000080ad28:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:74
        dentry->dir_inode=dentry+1;//放在后面
ffff80000080ad2c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ad30:	48 8d 50 58          	lea    rdx,[rax+0x58]
ffff80000080ad34:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ad38:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:75
        dentry->dir_inode->file_size=0;
ffff80000080ad3c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ad40:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080ad44:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:77
        //继承操作方法
        dentry->dir_inode->f_ops=parent->dir_inode->f_ops;
ffff80000080ad4b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080ad4f:	48 8b 50 40          	mov    rdx,QWORD PTR [rax+0x40]
ffff80000080ad53:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ad57:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080ad5b:	48 8b 52 28          	mov    rdx,QWORD PTR [rdx+0x28]
ffff80000080ad5f:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:78
        dentry->dir_inode->inode_ops=parent->dir_inode->inode_ops;
ffff80000080ad63:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080ad67:	48 8b 50 40          	mov    rdx,QWORD PTR [rax+0x40]
ffff80000080ad6b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ad6f:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080ad73:	48 8b 52 30          	mov    rdx,QWORD PTR [rdx+0x30]
ffff80000080ad77:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:79
        dentry->dir_ops=parent->dir_ops;
ffff80000080ad7b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080ad7f:	48 8b 50 50          	mov    rdx,QWORD PTR [rax+0x50]
ffff80000080ad83:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ad87:	48 89 50 50          	mov    QWORD PTR [rax+0x50],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:81
        //这样的创建文件只能创建普通文件，设备文件要通过devman创建
        dentry->dir_inode->attribute=FS_ATTR_FILE;
ffff80000080ad8b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ad8f:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080ad93:	48 c7 40 10 01 00 00 	mov    QWORD PTR [rax+0x10],0x1
ffff80000080ad9a:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:83
    }
    kmfree(path);
ffff80000080ad9b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080ad9f:	48 89 c7             	mov    rdi,rax
ffff80000080ada2:	49 89 df             	mov    r15,rbx
ffff80000080ada5:	48 b8 d7 5a ee ff ff 	movabs rax,0xffffffffffee5ad7
ffff80000080adac:	ff ff ff 
ffff80000080adaf:	48 01 d8             	add    rax,rbx
ffff80000080adb2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:85

    if((flags & O_DIRECTORY) && (dentry->dir_inode->attribute != FS_ATTR_DIR))
ffff80000080adb4:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
ffff80000080adba:	25 00 40 00 00       	and    eax,0x4000
ffff80000080adbf:	85 c0                	test   eax,eax
ffff80000080adc1:	74 1e                	je     ffff80000080ade1 <sys_open+0x476>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:85 (discriminator 1)
ffff80000080adc3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080adc7:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080adcb:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080adcf:	48 83 f8 02          	cmp    rax,0x2
ffff80000080add3:	74 0c                	je     ffff80000080ade1 <sys_open+0x476>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:86
        return -ENOTDIR;
ffff80000080add5:	48 c7 c0 c7 ff ff ff 	mov    rax,0xffffffffffffffc7
ffff80000080addc:	e9 1e 02 00 00       	jmp    ffff80000080afff <sys_open+0x694>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:87
    if(!(flags & O_DIRECTORY) && (dentry->dir_inode->attribute == FS_ATTR_DIR))
ffff80000080ade1:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
ffff80000080ade7:	25 00 40 00 00       	and    eax,0x4000
ffff80000080adec:	85 c0                	test   eax,eax
ffff80000080adee:	75 1e                	jne    ffff80000080ae0e <sys_open+0x4a3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:87 (discriminator 1)
ffff80000080adf0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080adf4:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080adf8:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080adfc:	48 83 f8 02          	cmp    rax,0x2
ffff80000080ae00:	75 0c                	jne    ffff80000080ae0e <sys_open+0x4a3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:88
        return -EISDIR;
ffff80000080ae02:	48 c7 c0 e1 ff ff ff 	mov    rax,0xffffffffffffffe1
ffff80000080ae09:	e9 f1 01 00 00       	jmp    ffff80000080afff <sys_open+0x694>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:90

    filp = (struct file *) kmalloc();
ffff80000080ae0e:	49 89 df             	mov    r15,rbx
ffff80000080ae11:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080ae16:	48 ba 68 57 ee ff ff 	movabs rdx,0xffffffffffee5768
ffff80000080ae1d:	ff ff ff 
ffff80000080ae20:	48 01 da             	add    rdx,rbx
ffff80000080ae23:	ff d2                	call   rdx
ffff80000080ae25:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:91
    memset(filp,0,sizeof(struct file));
ffff80000080ae29:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080ae2d:	ba 28 00 00 00       	mov    edx,0x28
ffff80000080ae32:	be 00 00 00 00       	mov    esi,0x0
ffff80000080ae37:	48 89 c7             	mov    rdi,rax
ffff80000080ae3a:	49 89 df             	mov    r15,rbx
ffff80000080ae3d:	48 b8 6b 53 ef ff ff 	movabs rax,0xffffffffffef536b
ffff80000080ae44:	ff ff ff 
ffff80000080ae47:	48 01 d8             	add    rax,rbx
ffff80000080ae4a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:92
    filp->dentry = dentry;
ffff80000080ae4c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080ae50:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080ae54:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:93
    filp->mode = flags;
ffff80000080ae58:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
ffff80000080ae5e:	48 63 d0             	movsxd rdx,eax
ffff80000080ae61:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080ae65:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:95

    if(dentry->dir_inode->attribute & FS_ATTR_DEVICE){
ffff80000080ae69:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ae6d:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080ae71:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080ae75:	83 e0 04             	and    eax,0x4
ffff80000080ae78:	48 85 c0             	test   rax,rax
ffff80000080ae7b:	74 18                	je     ffff80000080ae95 <sys_open+0x52a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:97
        extern struct file_operations devfs_fops;
        filp->f_ops = &devfs_fops;	//////	find device file operation function
ffff80000080ae7d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080ae81:	48 ba f8 fd ff ff ff 	movabs rdx,0xfffffffffffffdf8
ffff80000080ae88:	ff ff ff 
ffff80000080ae8b:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080ae8f:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
ffff80000080ae93:	eb 14                	jmp    ffff80000080aea9 <sys_open+0x53e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:100
    }
    else
        filp->f_ops = dentry->dir_inode->f_ops;
ffff80000080ae95:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ae99:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080ae9d:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
ffff80000080aea1:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080aea5:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:101
    if(filp->f_ops && filp->f_ops->open)
ffff80000080aea9:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080aead:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080aeb1:	48 85 c0             	test   rax,rax
ffff80000080aeb4:	74 33                	je     ffff80000080aee9 <sys_open+0x57e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:101 (discriminator 1)
ffff80000080aeb6:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080aeba:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080aebe:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080aec1:	48 85 c0             	test   rax,rax
ffff80000080aec4:	74 23                	je     ffff80000080aee9 <sys_open+0x57e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:102
        error = filp->f_ops->open(dentry->dir_inode,filp);
ffff80000080aec6:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080aeca:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080aece:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080aed1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080aed5:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080aed9:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000080aedd:	48 89 d6             	mov    rsi,rdx
ffff80000080aee0:	48 89 c7             	mov    rdi,rax
ffff80000080aee3:	ff d1                	call   rcx
ffff80000080aee5:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:103
    if(error != 1)
ffff80000080aee9:	48 83 7d e8 01       	cmp    QWORD PTR [rbp-0x18],0x1
ffff80000080aeee:	74 25                	je     ffff80000080af15 <sys_open+0x5aa>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:105
    {
        kmfree(filp);
ffff80000080aef0:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080aef4:	48 89 c7             	mov    rdi,rax
ffff80000080aef7:	49 89 df             	mov    r15,rbx
ffff80000080aefa:	48 b8 d7 5a ee ff ff 	movabs rax,0xffffffffffee5ad7
ffff80000080af01:	ff ff ff 
ffff80000080af04:	48 01 d8             	add    rax,rbx
ffff80000080af07:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:106
        return -EFAULT;
ffff80000080af09:	48 c7 c0 eb ff ff ff 	mov    rax,0xffffffffffffffeb
ffff80000080af10:	e9 ea 00 00 00       	jmp    ffff80000080afff <sys_open+0x694>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:109
    }

    if(filp->mode & O_TRUNC)
ffff80000080af15:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080af19:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080af1d:	25 00 02 00 00       	and    eax,0x200
ffff80000080af22:	48 85 c0             	test   rax,rax
ffff80000080af25:	74 13                	je     ffff80000080af3a <sys_open+0x5cf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:111
    {
        filp->dentry->dir_inode->file_size = 0;
ffff80000080af27:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080af2b:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080af2f:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080af33:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:113
    }
    if(filp->mode & O_APPEND)
ffff80000080af3a:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080af3e:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080af42:	25 00 04 00 00       	and    eax,0x400
ffff80000080af47:	48 85 c0             	test   rax,rax
ffff80000080af4a:	74 19                	je     ffff80000080af65 <sys_open+0x5fa>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:115
    {
        filp->position = filp->dentry->dir_inode->file_size;
ffff80000080af4c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080af50:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080af54:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080af58:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080af5b:	48 89 c2             	mov    rdx,rax
ffff80000080af5e:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080af62:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:118
    }

    f = current->openf;
ffff80000080af65:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff80000080af6c:	ff ff ff 
ffff80000080af6f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080af73:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080af76:	48 05 f8 00 00 00    	add    rax,0xf8
ffff80000080af7c:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:119
    for(i = 0;i < MAX_TASKS;i++)
ffff80000080af80:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [rbp-0x28],0x0
ffff80000080af87:	eb 28                	jmp    ffff80000080afb1 <sys_open+0x646>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:120
        if(f[i] == NULL)
ffff80000080af89:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080af8c:	48 98                	cdqe   
ffff80000080af8e:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080af95:	00 
ffff80000080af96:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080af9a:	48 01 d0             	add    rax,rdx
ffff80000080af9d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080afa0:	48 85 c0             	test   rax,rax
ffff80000080afa3:	75 08                	jne    ffff80000080afad <sys_open+0x642>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:122
        {
            fd = i;
ffff80000080afa5:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080afa8:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:123
            break;
ffff80000080afab:	eb 0a                	jmp    ffff80000080afb7 <sys_open+0x64c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:119 (discriminator 2)
    for(i = 0;i < MAX_TASKS;i++)
ffff80000080afad:	83 45 d8 01          	add    DWORD PTR [rbp-0x28],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:119 (discriminator 1)
ffff80000080afb1:	83 7d d8 1f          	cmp    DWORD PTR [rbp-0x28],0x1f
ffff80000080afb5:	7e d2                	jle    ffff80000080af89 <sys_open+0x61e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:125
        }
    if(i == MAX_TASKS)
ffff80000080afb7:	83 7d d8 20          	cmp    DWORD PTR [rbp-0x28],0x20
ffff80000080afbb:	75 22                	jne    ffff80000080afdf <sys_open+0x674>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:127
    {
        kmfree(filp);
ffff80000080afbd:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080afc1:	48 89 c7             	mov    rdi,rax
ffff80000080afc4:	49 89 df             	mov    r15,rbx
ffff80000080afc7:	48 b8 d7 5a ee ff ff 	movabs rax,0xffffffffffee5ad7
ffff80000080afce:	ff ff ff 
ffff80000080afd1:	48 01 d8             	add    rax,rbx
ffff80000080afd4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:129
        //// reclaim struct index_node & struct dir_entry
        return -EMFILE;
ffff80000080afd6:	48 c7 c0 df ff ff ff 	mov    rax,0xffffffffffffffdf
ffff80000080afdd:	eb 20                	jmp    ffff80000080afff <sys_open+0x694>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:131
    }
    f[fd] = filp;
ffff80000080afdf:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080afe2:	48 98                	cdqe   
ffff80000080afe4:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080afeb:	00 
ffff80000080afec:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080aff0:	48 01 c2             	add    rdx,rax
ffff80000080aff3:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080aff7:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:133

    return fd;
ffff80000080affa:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080affd:	48 98                	cdqe   
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:134
}
ffff80000080afff:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
ffff80000080b006:	5b                   	pop    rbx
ffff80000080b007:	41 5f                	pop    r15
ffff80000080b009:	5d                   	pop    rbp
ffff80000080b00a:	c3                   	ret    

ffff80000080b00b <sys_close>:
sys_close():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:137

unsigned long sys_close(int fd)
{
ffff80000080b00b:	f3 0f 1e fa          	endbr64 
ffff80000080b00f:	55                   	push   rbp
ffff80000080b010:	48 89 e5             	mov    rbp,rsp
ffff80000080b013:	41 57                	push   r15
ffff80000080b015:	53                   	push   rbx
ffff80000080b016:	48 83 ec 20          	sub    rsp,0x20
ffff80000080b01a:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080b01a <sys_close+0xf>
ffff80000080b021:	49 bb fe 17 11 00 00 	movabs r11,0x1117fe
ffff80000080b028:	00 00 00 
ffff80000080b02b:	4c 01 db             	add    rbx,r11
ffff80000080b02e:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:138
    struct file * filp = NULL;
ffff80000080b031:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000080b038:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:141

//	printf("sys_close:%d\n",fd);
    if(fd < 0 || fd >= MAX_TASKS)
ffff80000080b039:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
ffff80000080b03d:	78 06                	js     ffff80000080b045 <sys_close+0x3a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:141 (discriminator 1)
ffff80000080b03f:	83 7d dc 1f          	cmp    DWORD PTR [rbp-0x24],0x1f
ffff80000080b043:	7e 0c                	jle    ffff80000080b051 <sys_close+0x46>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:142
        return -EBADF;
ffff80000080b045:	48 c7 c0 f8 ff ff ff 	mov    rax,0xfffffffffffffff8
ffff80000080b04c:	e9 a8 00 00 00       	jmp    ffff80000080b0f9 <sys_close+0xee>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:144

    filp = current->openf[fd];
ffff80000080b051:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff80000080b058:	ff ff ff 
ffff80000080b05b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b05f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b062:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080b065:	48 63 d2             	movsxd rdx,edx
ffff80000080b068:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080b06c:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff80000080b071:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:145
    if(filp->f_ops && filp->f_ops->close)
ffff80000080b075:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b079:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080b07d:	48 85 c0             	test   rax,rax
ffff80000080b080:	74 35                	je     ffff80000080b0b7 <sys_close+0xac>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:145 (discriminator 1)
ffff80000080b082:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b086:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080b08a:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080b08e:	48 85 c0             	test   rax,rax
ffff80000080b091:	74 24                	je     ffff80000080b0b7 <sys_close+0xac>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:146
        filp->f_ops->close(filp->dentry->dir_inode,filp);
ffff80000080b093:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b097:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080b09b:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
ffff80000080b09f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b0a3:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080b0a7:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080b0ab:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080b0af:	48 89 d6             	mov    rsi,rdx
ffff80000080b0b2:	48 89 c7             	mov    rdi,rax
ffff80000080b0b5:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:148

    kmfree(filp);
ffff80000080b0b7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b0bb:	48 89 c7             	mov    rdi,rax
ffff80000080b0be:	49 89 df             	mov    r15,rbx
ffff80000080b0c1:	48 b8 d7 5a ee ff ff 	movabs rax,0xffffffffffee5ad7
ffff80000080b0c8:	ff ff ff 
ffff80000080b0cb:	48 01 d8             	add    rax,rbx
ffff80000080b0ce:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:149
    current->openf[fd] = NULL;
ffff80000080b0d0:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff80000080b0d7:	ff ff ff 
ffff80000080b0da:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b0de:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b0e1:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080b0e4:	48 63 d2             	movsxd rdx,edx
ffff80000080b0e7:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080b0eb:	48 c7 44 d0 08 00 00 	mov    QWORD PTR [rax+rdx*8+0x8],0x0
ffff80000080b0f2:	00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:151

    return 0;
ffff80000080b0f4:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:152
}
ffff80000080b0f9:	48 83 c4 20          	add    rsp,0x20
ffff80000080b0fd:	5b                   	pop    rbx
ffff80000080b0fe:	41 5f                	pop    r15
ffff80000080b100:	5d                   	pop    rbp
ffff80000080b101:	c3                   	ret    

ffff80000080b102 <sys_read>:
sys_read():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:155

unsigned long sys_read(int fd,void * buf,long count)
{
ffff80000080b102:	f3 0f 1e fa          	endbr64 
ffff80000080b106:	55                   	push   rbp
ffff80000080b107:	48 89 e5             	mov    rbp,rsp
ffff80000080b10a:	48 83 ec 30          	sub    rsp,0x30
ffff80000080b10e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080b10e <sys_read+0xc>
ffff80000080b115:	49 bb 0a 17 11 00 00 	movabs r11,0x11170a
ffff80000080b11c:	00 00 00 
ffff80000080b11f:	4c 01 d8             	add    rax,r11
ffff80000080b122:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff80000080b125:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080b129:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:156
    struct file * filp = NULL;
ffff80000080b12d:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffff80000080b134:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:157
    unsigned long ret = 0;
ffff80000080b135:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080b13c:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:160

//	printf("sys_read:%d\n",fd);
    if(fd < 0 || fd >= MAX_TASKS)
ffff80000080b13d:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff80000080b141:	78 06                	js     ffff80000080b149 <sys_read+0x47>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:160 (discriminator 1)
ffff80000080b143:	83 7d ec 1f          	cmp    DWORD PTR [rbp-0x14],0x1f
ffff80000080b147:	7e 09                	jle    ffff80000080b152 <sys_read+0x50>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:161
        return -EBADF;
ffff80000080b149:	48 c7 c0 f8 ff ff ff 	mov    rax,0xfffffffffffffff8
ffff80000080b150:	eb 7c                	jmp    ffff80000080b1ce <sys_read+0xcc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:162
    if(count < 0)
ffff80000080b152:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff80000080b157:	79 09                	jns    ffff80000080b162 <sys_read+0x60>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:163
        return -EINVAL;
ffff80000080b159:	48 c7 c0 e4 ff ff ff 	mov    rax,0xffffffffffffffe4
ffff80000080b160:	eb 6c                	jmp    ffff80000080b1ce <sys_read+0xcc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:165

    filp = current->openf[fd];
ffff80000080b162:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff80000080b169:	ff ff ff 
ffff80000080b16c:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080b170:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b173:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080b176:	48 63 d2             	movsxd rdx,edx
ffff80000080b179:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080b17d:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff80000080b182:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:166
    if(filp->f_ops && filp->f_ops->read)
ffff80000080b186:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080b18a:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080b18e:	48 85 c0             	test   rax,rax
ffff80000080b191:	74 37                	je     ffff80000080b1ca <sys_read+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:166 (discriminator 1)
ffff80000080b193:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080b197:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080b19b:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080b19f:	48 85 c0             	test   rax,rax
ffff80000080b1a2:	74 26                	je     ffff80000080b1ca <sys_read+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:167
        ret = filp->f_ops->read(filp,buf,count,&filp->position);
ffff80000080b1a4:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080b1a8:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080b1ac:	4c 8b 40 10          	mov    r8,QWORD PTR [rax+0x10]
ffff80000080b1b0:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff80000080b1b4:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080b1b8:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff80000080b1bc:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080b1c0:	48 89 c7             	mov    rdi,rax
ffff80000080b1c3:	41 ff d0             	call   r8
ffff80000080b1c6:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:168
    return ret;
ffff80000080b1ca:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:169
}
ffff80000080b1ce:	c9                   	leave  
ffff80000080b1cf:	c3                   	ret    

ffff80000080b1d0 <sys_write>:
sys_write():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:172

unsigned long sys_write(int fd,void * buf,long count)
{
ffff80000080b1d0:	f3 0f 1e fa          	endbr64 
ffff80000080b1d4:	55                   	push   rbp
ffff80000080b1d5:	48 89 e5             	mov    rbp,rsp
ffff80000080b1d8:	48 83 ec 30          	sub    rsp,0x30
ffff80000080b1dc:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080b1dc <sys_write+0xc>
ffff80000080b1e3:	49 bb 3c 16 11 00 00 	movabs r11,0x11163c
ffff80000080b1ea:	00 00 00 
ffff80000080b1ed:	4c 01 d8             	add    rax,r11
ffff80000080b1f0:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff80000080b1f3:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080b1f7:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:173
    struct file * filp = NULL;
ffff80000080b1fb:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffff80000080b202:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:174
    unsigned long ret = 0;
ffff80000080b203:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080b20a:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:177

//	printf("sys_write:%d\n",fd);
    if(fd < 0 || fd >= MAX_TASKS)
ffff80000080b20b:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff80000080b20f:	78 06                	js     ffff80000080b217 <sys_write+0x47>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:177 (discriminator 1)
ffff80000080b211:	83 7d ec 1f          	cmp    DWORD PTR [rbp-0x14],0x1f
ffff80000080b215:	7e 09                	jle    ffff80000080b220 <sys_write+0x50>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:178
        return -EBADF;
ffff80000080b217:	48 c7 c0 f8 ff ff ff 	mov    rax,0xfffffffffffffff8
ffff80000080b21e:	eb 7c                	jmp    ffff80000080b29c <sys_write+0xcc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:179
    if(count < 0)
ffff80000080b220:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff80000080b225:	79 09                	jns    ffff80000080b230 <sys_write+0x60>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:180
        return -EINVAL;
ffff80000080b227:	48 c7 c0 e4 ff ff ff 	mov    rax,0xffffffffffffffe4
ffff80000080b22e:	eb 6c                	jmp    ffff80000080b29c <sys_write+0xcc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:182

    filp = current->openf[fd];
ffff80000080b230:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff80000080b237:	ff ff ff 
ffff80000080b23a:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080b23e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b241:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080b244:	48 63 d2             	movsxd rdx,edx
ffff80000080b247:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080b24b:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff80000080b250:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:183
    if(filp->f_ops && filp->f_ops->write)
ffff80000080b254:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080b258:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080b25c:	48 85 c0             	test   rax,rax
ffff80000080b25f:	74 37                	je     ffff80000080b298 <sys_write+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:183 (discriminator 1)
ffff80000080b261:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080b265:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080b269:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080b26d:	48 85 c0             	test   rax,rax
ffff80000080b270:	74 26                	je     ffff80000080b298 <sys_write+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:184
        ret = filp->f_ops->write(filp,buf,count,&filp->position);
ffff80000080b272:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080b276:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080b27a:	4c 8b 40 18          	mov    r8,QWORD PTR [rax+0x18]
ffff80000080b27e:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff80000080b282:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080b286:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff80000080b28a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080b28e:	48 89 c7             	mov    rdi,rax
ffff80000080b291:	41 ff d0             	call   r8
ffff80000080b294:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:185
    return ret;
ffff80000080b298:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:186
}
ffff80000080b29c:	c9                   	leave  
ffff80000080b29d:	c3                   	ret    

ffff80000080b29e <sys_lseek>:
sys_lseek():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:190


unsigned long sys_lseek(int filds,long offset,int whence)
{
ffff80000080b29e:	f3 0f 1e fa          	endbr64 
ffff80000080b2a2:	55                   	push   rbp
ffff80000080b2a3:	48 89 e5             	mov    rbp,rsp
ffff80000080b2a6:	48 83 ec 20          	sub    rsp,0x20
ffff80000080b2aa:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080b2aa <sys_lseek+0xc>
ffff80000080b2b1:	49 bb 6e 15 11 00 00 	movabs r11,0x11156e
ffff80000080b2b8:	00 00 00 
ffff80000080b2bb:	4c 01 d8             	add    rax,r11
ffff80000080b2be:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff80000080b2c1:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080b2c5:	89 55 e8             	mov    DWORD PTR [rbp-0x18],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:191
    struct file * filp = NULL;
ffff80000080b2c8:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffff80000080b2cf:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:192
    unsigned long ret = 0;
ffff80000080b2d0:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080b2d7:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:195

//	printf("sys_lseek:%d\n",filds);
    if(filds < 0 || filds >= MAX_TASKS)
ffff80000080b2d8:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff80000080b2dc:	78 06                	js     ffff80000080b2e4 <sys_lseek+0x46>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:195 (discriminator 1)
ffff80000080b2de:	83 7d ec 1f          	cmp    DWORD PTR [rbp-0x14],0x1f
ffff80000080b2e2:	7e 0c                	jle    ffff80000080b2f0 <sys_lseek+0x52>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:196
        return -EBADF;
ffff80000080b2e4:	48 c7 c0 f8 ff ff ff 	mov    rax,0xfffffffffffffff8
ffff80000080b2eb:	e9 82 00 00 00       	jmp    ffff80000080b372 <sys_lseek+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:197
    if(whence < 0 || whence >= SEEK_MAX)
ffff80000080b2f0:	83 7d e8 00          	cmp    DWORD PTR [rbp-0x18],0x0
ffff80000080b2f4:	78 06                	js     ffff80000080b2fc <sys_lseek+0x5e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:197 (discriminator 1)
ffff80000080b2f6:	83 7d e8 02          	cmp    DWORD PTR [rbp-0x18],0x2
ffff80000080b2fa:	7e 09                	jle    ffff80000080b305 <sys_lseek+0x67>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:198
        return -EINVAL;
ffff80000080b2fc:	48 c7 c0 e4 ff ff ff 	mov    rax,0xffffffffffffffe4
ffff80000080b303:	eb 6d                	jmp    ffff80000080b372 <sys_lseek+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:200

    filp = current->openf[filds];
ffff80000080b305:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff80000080b30c:	ff ff ff 
ffff80000080b30f:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080b313:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b316:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080b319:	48 63 d2             	movsxd rdx,edx
ffff80000080b31c:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080b320:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff80000080b325:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:201
    if(filp->f_ops && filp->f_ops->lseek)
ffff80000080b329:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080b32d:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080b331:	48 85 c0             	test   rax,rax
ffff80000080b334:	74 38                	je     ffff80000080b36e <sys_lseek+0xd0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:201 (discriminator 1)
ffff80000080b336:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080b33a:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080b33e:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000080b342:	48 85 c0             	test   rax,rax
ffff80000080b345:	74 27                	je     ffff80000080b36e <sys_lseek+0xd0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:202
        ret = filp->f_ops->lseek(filp,offset,whence);
ffff80000080b347:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080b34b:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080b34f:	4c 8b 40 20          	mov    r8,QWORD PTR [rax+0x20]
ffff80000080b353:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080b356:	48 63 d0             	movsxd rdx,eax
ffff80000080b359:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
ffff80000080b35d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080b361:	48 89 ce             	mov    rsi,rcx
ffff80000080b364:	48 89 c7             	mov    rdi,rax
ffff80000080b367:	41 ff d0             	call   r8
ffff80000080b36a:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:203
    return ret;
ffff80000080b36e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:204
}
ffff80000080b372:	c9                   	leave  
ffff80000080b373:	c3                   	ret    

ffff80000080b374 <sys_vfork>:
sys_vfork():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:214
//    printf("sys_fork\n");
//    //return do_fork(regs,0,regs->rsp,0);
//}

unsigned long sys_vfork()
{
ffff80000080b374:	f3 0f 1e fa          	endbr64 
ffff80000080b378:	55                   	push   rbp
ffff80000080b379:	48 89 e5             	mov    rbp,rsp
ffff80000080b37c:	41 57                	push   r15
ffff80000080b37e:	48 83 ec 18          	sub    rsp,0x18
ffff80000080b382:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080b382 <sys_vfork+0xe>
ffff80000080b389:	49 bb 96 14 11 00 00 	movabs r11,0x111496
ffff80000080b390:	00 00 00 
ffff80000080b393:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:215
    regs_t *regs = (regs_t *)current->tss.rsp0 -1;
ffff80000080b396:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff80000080b39d:	ff ff ff 
ffff80000080b3a0:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff80000080b3a4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b3a7:	48 8b 80 fc 01 00 00 	mov    rax,QWORD PTR [rax+0x1fc]
ffff80000080b3ae:	48 2d d0 00 00 00    	sub    rax,0xd0
ffff80000080b3b4:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:216
    printf("sys_vfork\n");
ffff80000080b3b8:	48 b8 58 d9 ff ff ff 	movabs rax,0xffffffffffffd958
ffff80000080b3bf:	ff ff ff 
ffff80000080b3c2:	48 8d 04 02          	lea    rax,[rdx+rax*1]
ffff80000080b3c6:	48 89 c7             	mov    rdi,rax
ffff80000080b3c9:	49 89 d7             	mov    r15,rdx
ffff80000080b3cc:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080b3d1:	48 b9 96 4e ee ff ff 	movabs rcx,0xffffffffffee4e96
ffff80000080b3d8:	ff ff ff 
ffff80000080b3db:	48 01 d1             	add    rcx,rdx
ffff80000080b3de:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:218
    //return do_fork(regs,CLONE_VM | CLONE_FS | CLONE_SIGNAL,regs->rsp,0);
}
ffff80000080b3e0:	90                   	nop
ffff80000080b3e1:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080b3e5:	c9                   	leave  
ffff80000080b3e6:	c3                   	ret    

ffff80000080b3e7 <sys_wait>:
sys_wait():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:261

/*
	rusage reserved
*/

unsigned long sys_wait(pid_t pid, int *stat_loc, int options){
ffff80000080b3e7:	f3 0f 1e fa          	endbr64 
ffff80000080b3eb:	55                   	push   rbp
ffff80000080b3ec:	48 89 e5             	mov    rbp,rsp
ffff80000080b3ef:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080b3ef <sys_wait+0x8>
ffff80000080b3f6:	49 bb 29 14 11 00 00 	movabs r11,0x111429
ffff80000080b3fd:	00 00 00 
ffff80000080b400:	4c 01 d8             	add    rax,r11
ffff80000080b403:	89 7d bc             	mov    DWORD PTR [rbp-0x44],edi
ffff80000080b406:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
ffff80000080b40a:	89 55 b8             	mov    DWORD PTR [rbp-0x48],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:262
    struct process* waitee=NULL;
ffff80000080b40d:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080b414:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:264
    extern struct process task[];
    if(!current->child_procs)
ffff80000080b415:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff80000080b41c:	ff ff ff 
ffff80000080b41f:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080b423:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080b426:	48 8b 92 4c 03 00 00 	mov    rdx,QWORD PTR [rdx+0x34c]
ffff80000080b42d:	48 85 d2             	test   rdx,rdx
ffff80000080b430:	75 0c                	jne    ffff80000080b43e <sys_wait+0x57>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:265
        return -ECHILD;//没有子进程可以等
ffff80000080b432:	48 c7 c0 f4 ff ff ff 	mov    rax,0xfffffffffffffff4
ffff80000080b439:	e9 ef 01 00 00       	jmp    ffff80000080b62d <sys_wait+0x246>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:266
    if(pid==-1){
ffff80000080b43e:	83 7d bc ff          	cmp    DWORD PTR [rbp-0x44],0xffffffff
ffff80000080b442:	75 58                	jne    ffff80000080b49c <sys_wait+0xb5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:269
        //任意一个子进程
        while (1) {
            for(struct List* l=current->child_procs;l;l=l->next) {
ffff80000080b444:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff80000080b44b:	ff ff ff 
ffff80000080b44e:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080b452:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080b455:	48 8b 92 4c 03 00 00 	mov    rdx,QWORD PTR [rdx+0x34c]
ffff80000080b45c:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
ffff80000080b460:	eb 31                	jmp    ffff80000080b493 <sys_wait+0xac>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:270
                struct process* p=l->data;
ffff80000080b462:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080b466:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff80000080b46a:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:271
                if(p->stat == TASK_ZOMBIE) {
ffff80000080b46e:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000080b472:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff80000080b475:	83 fa 04             	cmp    edx,0x4
ffff80000080b478:	75 0d                	jne    ffff80000080b487 <sys_wait+0xa0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:272
                    waitee=p;
ffff80000080b47a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080b47e:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:273
                    goto done;
ffff80000080b482:	e9 46 01 00 00       	jmp    ffff80000080b5cd <sys_wait+0x1e6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:269 (discriminator 2)
            for(struct List* l=current->child_procs;l;l=l->next) {
ffff80000080b487:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080b48b:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
ffff80000080b48f:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:269 (discriminator 1)
ffff80000080b493:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
ffff80000080b498:	75 c8                	jne    ffff80000080b462 <sys_wait+0x7b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:269
ffff80000080b49a:	eb a8                	jmp    ffff80000080b444 <sys_wait+0x5d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:278
                }
            }
        }

    }else if(pid==0) {
ffff80000080b49c:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
ffff80000080b4a0:	75 77                	jne    ffff80000080b519 <sys_wait+0x132>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:281
        //等待任意一个和父进程同一个进程组的子进程
        while (1) {
            for(struct List* l=current->child_procs;l;l=l->next) {
ffff80000080b4a2:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff80000080b4a9:	ff ff ff 
ffff80000080b4ac:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080b4b0:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080b4b3:	48 8b 92 4c 03 00 00 	mov    rdx,QWORD PTR [rdx+0x34c]
ffff80000080b4ba:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080b4be:	eb 50                	jmp    ffff80000080b510 <sys_wait+0x129>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:282
                struct process* p=l->data;
ffff80000080b4c0:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080b4c4:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff80000080b4c8:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:283
                if(p->gpid==current->gpid&& p->stat == TASK_ZOMBIE) {
ffff80000080b4cc:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080b4d0:	8b 4a 04             	mov    ecx,DWORD PTR [rdx+0x4]
ffff80000080b4d3:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff80000080b4da:	ff ff ff 
ffff80000080b4dd:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080b4e1:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080b4e4:	8b 52 04             	mov    edx,DWORD PTR [rdx+0x4]
ffff80000080b4e7:	39 d1                	cmp    ecx,edx
ffff80000080b4e9:	75 19                	jne    ffff80000080b504 <sys_wait+0x11d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:283 (discriminator 1)
ffff80000080b4eb:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080b4ef:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff80000080b4f2:	83 fa 04             	cmp    edx,0x4
ffff80000080b4f5:	75 0d                	jne    ffff80000080b504 <sys_wait+0x11d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:284
                    waitee=p;
ffff80000080b4f7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080b4fb:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:285
                    goto done;
ffff80000080b4ff:	e9 c9 00 00 00       	jmp    ffff80000080b5cd <sys_wait+0x1e6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:281 (discriminator 2)
            for(struct List* l=current->child_procs;l;l=l->next) {
ffff80000080b504:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080b508:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
ffff80000080b50c:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:281 (discriminator 1)
ffff80000080b510:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080b515:	75 a9                	jne    ffff80000080b4c0 <sys_wait+0xd9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:281
ffff80000080b517:	eb 89                	jmp    ffff80000080b4a2 <sys_wait+0xbb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:290
                }
            }
        }
    }else{
        if(pid<0)pid=-pid;
ffff80000080b519:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
ffff80000080b51d:	79 03                	jns    ffff80000080b522 <sys_wait+0x13b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:290 (discriminator 1)
ffff80000080b51f:	f7 5d bc             	neg    DWORD PTR [rbp-0x44]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:292
        //检查是不是本进程的子进程
        for(int i=0;i<MAX_TASKS;i++){
ffff80000080b522:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff80000080b529:	eb 4f                	jmp    ffff80000080b57a <sys_wait+0x193>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:293
            if(task[i].pid==pid){
ffff80000080b52b:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff80000080b532:	ff ff ff 
ffff80000080b535:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080b539:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffff80000080b53c:	48 63 d2             	movsxd rdx,edx
ffff80000080b53f:	48 69 d2 54 03 00 00 	imul   rdx,rdx,0x354
ffff80000080b546:	48 01 ca             	add    rdx,rcx
ffff80000080b549:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff80000080b54b:	8b 55 bc             	mov    edx,DWORD PTR [rbp-0x44]
ffff80000080b54e:	39 d1                	cmp    ecx,edx
ffff80000080b550:	75 24                	jne    ffff80000080b576 <sys_wait+0x18f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:294
                waitee=&task[i];
ffff80000080b552:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffff80000080b555:	48 63 d2             	movsxd rdx,edx
ffff80000080b558:	48 69 ca 54 03 00 00 	imul   rcx,rdx,0x354
ffff80000080b55f:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff80000080b566:	ff ff ff 
ffff80000080b569:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080b56d:	48 01 ca             	add    rdx,rcx
ffff80000080b570:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:295
                break;
ffff80000080b574:	eb 0a                	jmp    ffff80000080b580 <sys_wait+0x199>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:292 (discriminator 2)
        for(int i=0;i<MAX_TASKS;i++){
ffff80000080b576:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:292 (discriminator 1)
ffff80000080b57a:	83 7d e4 1f          	cmp    DWORD PTR [rbp-0x1c],0x1f
ffff80000080b57e:	7e ab                	jle    ffff80000080b52b <sys_wait+0x144>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:298
            }
        }
        if(waitee==NULL||waitee->parent_pid!=current->pid)
ffff80000080b580:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffff80000080b585:	74 21                	je     ffff80000080b5a8 <sys_wait+0x1c1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:298 (discriminator 1)
ffff80000080b587:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080b58b:	8b 92 bc 00 00 00    	mov    edx,DWORD PTR [rdx+0xbc]
ffff80000080b591:	48 b9 a8 fe ff ff ff 	movabs rcx,0xfffffffffffffea8
ffff80000080b598:	ff ff ff 
ffff80000080b59b:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff80000080b59f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b5a2:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080b5a4:	39 c2                	cmp    edx,eax
ffff80000080b5a6:	74 09                	je     ffff80000080b5b1 <sys_wait+0x1ca>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:299
            return -ECHILD;//没有这个进程或者不是子进程
ffff80000080b5a8:	48 c7 c0 f4 ff ff ff 	mov    rax,0xfffffffffffffff4
ffff80000080b5af:	eb 7c                	jmp    ffff80000080b62d <sys_wait+0x246>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:301
        //TODO 等待结束以及等待信号
        while (waitee->stat != TASK_ZOMBIE);
ffff80000080b5b1:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:301 (discriminator 1)
ffff80000080b5b2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080b5b6:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff80000080b5b9:	83 f8 04             	cmp    eax,0x4
ffff80000080b5bc:	75 f4                	jne    ffff80000080b5b2 <sys_wait+0x1cb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:302
        *stat_loc=waitee->exit_code;
ffff80000080b5be:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080b5c2:	8b 40 24             	mov    eax,DWORD PTR [rax+0x24]
ffff80000080b5c5:	89 c2                	mov    edx,eax
ffff80000080b5c7:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080b5cb:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:306
    }
    done:
    //清除子进程
    waitee->stat=TASK_EMPTY;
ffff80000080b5cd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080b5d1:	c7 40 18 00 00 00 00 	mov    DWORD PTR [rax+0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:308
    //从链表中删除，不再是子进程
    list_drop(&waitee->node);
ffff80000080b5d8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080b5dc:	48 05 34 03 00 00    	add    rax,0x334
ffff80000080b5e2:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
list_drop():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:47
    }
}
__attribute__((always_inline)) inline void list_drop(struct List * entry)
{
    //从链表中删除
    if(entry->prev)
ffff80000080b5e6:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b5ea:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b5ed:	48 85 c0             	test   rax,rax
ffff80000080b5f0:	74 13                	je     ffff80000080b605 <sys_wait+0x21e>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:48
        entry->prev->next=entry->next;
ffff80000080b5f2:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b5f6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b5f9:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080b5fd:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
ffff80000080b601:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:49
    if(entry->next)
ffff80000080b605:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b609:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080b60d:	48 85 c0             	test   rax,rax
ffff80000080b610:	74 12                	je     ffff80000080b624 <sys_wait+0x23d>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:50
        entry->next->prev=entry->prev;
ffff80000080b612:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b616:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080b61a:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080b61e:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080b621:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:51
}
ffff80000080b624:	90                   	nop
sys_wait():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:310
    //TODO 被信号中断时返回-1
    return waitee->pid;
ffff80000080b625:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080b629:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080b62b:	89 c0                	mov    eax,eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:311
}
ffff80000080b62d:	5d                   	pop    rbp
ffff80000080b62e:	c3                   	ret    

ffff80000080b62f <sys_wait4>:
sys_wait4():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:313
unsigned long sys_wait4(unsigned long pid,int *status,int options,void *rusage)
{
ffff80000080b62f:	f3 0f 1e fa          	endbr64 
ffff80000080b633:	55                   	push   rbp
ffff80000080b634:	48 89 e5             	mov    rbp,rsp
ffff80000080b637:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080b637 <sys_wait4+0x8>
ffff80000080b63e:	49 bb e1 11 11 00 00 	movabs r11,0x1111e1
ffff80000080b645:	00 00 00 
ffff80000080b648:	4c 01 d8             	add    rax,r11
ffff80000080b64b:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080b64f:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080b653:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
ffff80000080b656:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:349
//    copy_to_user(&child->exit_code,status,sizeof(long));
//    tsk->next = child->next;
//    exit_mm(child);
//    vmfree(child);
//    return retval;
}
ffff80000080b65a:	90                   	nop
ffff80000080b65b:	5d                   	pop    rbp
ffff80000080b65c:	c3                   	ret    

ffff80000080b65d <sys_brk>:
sys_brk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:352

unsigned long sys_brk(unsigned long brk)
{
ffff80000080b65d:	f3 0f 1e fa          	endbr64 
ffff80000080b661:	55                   	push   rbp
ffff80000080b662:	48 89 e5             	mov    rbp,rsp
ffff80000080b665:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080b665 <sys_brk+0x8>
ffff80000080b66c:	49 bb b3 11 11 00 00 	movabs r11,0x1111b3
ffff80000080b673:	00 00 00 
ffff80000080b676:	4c 01 d8             	add    rax,r11
ffff80000080b679:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:366
//
//    new_brk = do_brk(current->mm->end_brk,new_brk - current->mm->end_brk);	//expand brk space
//
//    current->mm->end_brk = new_brk;
//    return new_brk;
}
ffff80000080b67d:	90                   	nop
ffff80000080b67e:	5d                   	pop    rbp
ffff80000080b67f:	c3                   	ret    

ffff80000080b680 <sys_reboot>:
sys_reboot():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:369

unsigned long sys_reboot(unsigned long cmd,void * arg)
{
ffff80000080b680:	f3 0f 1e fa          	endbr64 
ffff80000080b684:	55                   	push   rbp
ffff80000080b685:	48 89 e5             	mov    rbp,rsp
ffff80000080b688:	41 57                	push   r15
ffff80000080b68a:	53                   	push   rbx
ffff80000080b68b:	48 83 ec 10          	sub    rsp,0x10
ffff80000080b68f:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080b68f <sys_reboot+0xf>
ffff80000080b696:	49 bb 89 11 11 00 00 	movabs r11,0x111189
ffff80000080b69d:	00 00 00 
ffff80000080b6a0:	4c 01 db             	add    rbx,r11
ffff80000080b6a3:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff80000080b6a7:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:370
    printf("sys_reboot\n");
ffff80000080b6ab:	48 b8 63 d9 ff ff ff 	movabs rax,0xffffffffffffd963
ffff80000080b6b2:	ff ff ff 
ffff80000080b6b5:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080b6b9:	48 89 c7             	mov    rdi,rax
ffff80000080b6bc:	49 89 df             	mov    r15,rbx
ffff80000080b6bf:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080b6c4:	48 ba 96 4e ee ff ff 	movabs rdx,0xffffffffffee4e96
ffff80000080b6cb:	ff ff ff 
ffff80000080b6ce:	48 01 da             	add    rdx,rbx
ffff80000080b6d1:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:371
    switch(cmd)
ffff80000080b6d3:	48 83 7d e8 01       	cmp    QWORD PTR [rbp-0x18],0x1
ffff80000080b6d8:	74 09                	je     ffff80000080b6e3 <sys_reboot+0x63>
ffff80000080b6da:	48 83 7d e8 02       	cmp    QWORD PTR [rbp-0x18],0x2
ffff80000080b6df:	74 20                	je     ffff80000080b701 <sys_reboot+0x81>
ffff80000080b6e1:	eb 48                	jmp    ffff80000080b72b <sys_reboot+0xab>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:374
    {
        case SYSTEM_REBOOT:
            outb(0x64,0xFE);
ffff80000080b6e3:	be fe 00 00 00       	mov    esi,0xfe
ffff80000080b6e8:	bf 64 00 00 00       	mov    edi,0x64
ffff80000080b6ed:	49 89 df             	mov    r15,rbx
ffff80000080b6f0:	48 b8 b8 b4 ee ff ff 	movabs rax,0xffffffffffeeb4b8
ffff80000080b6f7:	ff ff ff 
ffff80000080b6fa:	48 01 d8             	add    rax,rbx
ffff80000080b6fd:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:375
            break;
ffff80000080b6ff:	eb 53                	jmp    ffff80000080b754 <sys_reboot+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:378

        case SYSTEM_POWEROFF:
            printf("sys_reboot cmd SYSTEM_POWEROFF\n");
ffff80000080b701:	48 b8 70 d9 ff ff ff 	movabs rax,0xffffffffffffd970
ffff80000080b708:	ff ff ff 
ffff80000080b70b:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080b70f:	48 89 c7             	mov    rdi,rax
ffff80000080b712:	49 89 df             	mov    r15,rbx
ffff80000080b715:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080b71a:	48 ba 96 4e ee ff ff 	movabs rdx,0xffffffffffee4e96
ffff80000080b721:	ff ff ff 
ffff80000080b724:	48 01 da             	add    rdx,rbx
ffff80000080b727:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:379
            break;
ffff80000080b729:	eb 29                	jmp    ffff80000080b754 <sys_reboot+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:382

        default:
            printf("sys_reboot cmd ERROR!\n");
ffff80000080b72b:	48 b8 90 d9 ff ff ff 	movabs rax,0xffffffffffffd990
ffff80000080b732:	ff ff ff 
ffff80000080b735:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080b739:	48 89 c7             	mov    rdi,rax
ffff80000080b73c:	49 89 df             	mov    r15,rbx
ffff80000080b73f:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080b744:	48 ba 96 4e ee ff ff 	movabs rdx,0xffffffffffee4e96
ffff80000080b74b:	ff ff ff 
ffff80000080b74e:	48 01 da             	add    rdx,rbx
ffff80000080b751:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:383
            break;
ffff80000080b753:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:385
    }
    return 0;
ffff80000080b754:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:386
}
ffff80000080b759:	48 83 c4 10          	add    rsp,0x10
ffff80000080b75d:	5b                   	pop    rbx
ffff80000080b75e:	41 5f                	pop    r15
ffff80000080b760:	5d                   	pop    rbp
ffff80000080b761:	c3                   	ret    

ffff80000080b762 <sys_chdir>:
sys_chdir():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:390


unsigned long sys_chdir(char *filename)
{
ffff80000080b762:	f3 0f 1e fa          	endbr64 
ffff80000080b766:	55                   	push   rbp
ffff80000080b767:	48 89 e5             	mov    rbp,rsp
ffff80000080b76a:	41 57                	push   r15
ffff80000080b76c:	53                   	push   rbx
ffff80000080b76d:	48 83 ec 30          	sub    rsp,0x30
ffff80000080b771:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080b771 <sys_chdir+0xf>
ffff80000080b778:	49 bb a7 10 11 00 00 	movabs r11,0x1110a7
ffff80000080b77f:	00 00 00 
ffff80000080b782:	4c 01 db             	add    rbx,r11
ffff80000080b785:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:391
    char * path = NULL;
ffff80000080b789:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000080b790:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:392
    long pathlen = 0;
ffff80000080b791:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff80000080b798:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:393
    struct dir_entry * dentry = NULL;
ffff80000080b799:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff80000080b7a0:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:395

    printf("sys_chdir\n");
ffff80000080b7a1:	48 b8 a7 d9 ff ff ff 	movabs rax,0xffffffffffffd9a7
ffff80000080b7a8:	ff ff ff 
ffff80000080b7ab:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080b7af:	48 89 c7             	mov    rdi,rax
ffff80000080b7b2:	49 89 df             	mov    r15,rbx
ffff80000080b7b5:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080b7ba:	48 ba 96 4e ee ff ff 	movabs rdx,0xffffffffffee4e96
ffff80000080b7c1:	ff ff ff 
ffff80000080b7c4:	48 01 da             	add    rdx,rbx
ffff80000080b7c7:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:396
    path = (char *) kmalloc();
ffff80000080b7c9:	49 89 df             	mov    r15,rbx
ffff80000080b7cc:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080b7d1:	48 ba 68 57 ee ff ff 	movabs rdx,0xffffffffffee5768
ffff80000080b7d8:	ff ff ff 
ffff80000080b7db:	48 01 da             	add    rdx,rbx
ffff80000080b7de:	ff d2                	call   rdx
ffff80000080b7e0:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:398

    if(path == NULL)
ffff80000080b7e4:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080b7e9:	75 0c                	jne    ffff80000080b7f7 <sys_chdir+0x95>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:399
        return -ENOMEM;
ffff80000080b7eb:	48 c7 c0 cf ff ff ff 	mov    rax,0xffffffffffffffcf
ffff80000080b7f2:	e9 28 01 00 00       	jmp    ffff80000080b91f <sys_chdir+0x1bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:400
    memset(path,0,PAGE_4K_SIZE);
ffff80000080b7f7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b7fb:	ba 00 10 00 00       	mov    edx,0x1000
ffff80000080b800:	be 00 00 00 00       	mov    esi,0x0
ffff80000080b805:	48 89 c7             	mov    rdi,rax
ffff80000080b808:	49 89 df             	mov    r15,rbx
ffff80000080b80b:	48 b8 6b 53 ef ff ff 	movabs rax,0xffffffffffef536b
ffff80000080b812:	ff ff ff 
ffff80000080b815:	48 01 d8             	add    rax,rbx
ffff80000080b818:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:401
    pathlen = strlen(filename);
ffff80000080b81a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b81e:	48 89 c7             	mov    rdi,rax
ffff80000080b821:	49 89 df             	mov    r15,rbx
ffff80000080b824:	48 b8 8d 56 ef ff ff 	movabs rax,0xffffffffffef568d
ffff80000080b82b:	ff ff ff 
ffff80000080b82e:	48 01 d8             	add    rax,rbx
ffff80000080b831:	ff d0                	call   rax
ffff80000080b833:	48 98                	cdqe   
ffff80000080b835:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:402
    if(pathlen <= 0)
ffff80000080b839:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
ffff80000080b83e:	7f 25                	jg     ffff80000080b865 <sys_chdir+0x103>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:404
    {
        kmfree(path);
ffff80000080b840:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b844:	48 89 c7             	mov    rdi,rax
ffff80000080b847:	49 89 df             	mov    r15,rbx
ffff80000080b84a:	48 b8 d7 5a ee ff ff 	movabs rax,0xffffffffffee5ad7
ffff80000080b851:	ff ff ff 
ffff80000080b854:	48 01 d8             	add    rax,rbx
ffff80000080b857:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:405
        return -EFAULT;
ffff80000080b859:	48 c7 c0 eb ff ff ff 	mov    rax,0xffffffffffffffeb
ffff80000080b860:	e9 ba 00 00 00       	jmp    ffff80000080b91f <sys_chdir+0x1bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:407
    }
    else if(pathlen >= PAGE_4K_SIZE)
ffff80000080b865:	48 81 7d e0 ff 0f 00 	cmp    QWORD PTR [rbp-0x20],0xfff
ffff80000080b86c:	00 
ffff80000080b86d:	7e 25                	jle    ffff80000080b894 <sys_chdir+0x132>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:409
    {
        kmfree(path);
ffff80000080b86f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b873:	48 89 c7             	mov    rdi,rax
ffff80000080b876:	49 89 df             	mov    r15,rbx
ffff80000080b879:	48 b8 d7 5a ee ff ff 	movabs rax,0xffffffffffee5ad7
ffff80000080b880:	ff ff ff 
ffff80000080b883:	48 01 d8             	add    rax,rbx
ffff80000080b886:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:410
        return -ENAMETOOLONG;
ffff80000080b888:	48 c7 c0 db ff ff ff 	mov    rax,0xffffffffffffffdb
ffff80000080b88f:	e9 8b 00 00 00       	jmp    ffff80000080b91f <sys_chdir+0x1bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:412
    }
    strcpy(filename,path);
ffff80000080b894:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080b898:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b89c:	48 89 d6             	mov    rsi,rdx
ffff80000080b89f:	48 89 c7             	mov    rdi,rax
ffff80000080b8a2:	49 89 df             	mov    r15,rbx
ffff80000080b8a5:	48 b8 c0 53 ef ff ff 	movabs rax,0xffffffffffef53c0
ffff80000080b8ac:	ff ff ff 
ffff80000080b8af:	48 01 d8             	add    rax,rbx
ffff80000080b8b2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:414

    dentry = path_walk(path,0);
ffff80000080b8b4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b8b8:	be 00 00 00 00       	mov    esi,0x0
ffff80000080b8bd:	48 89 c7             	mov    rdi,rax
ffff80000080b8c0:	49 89 df             	mov    r15,rbx
ffff80000080b8c3:	48 b8 71 d7 ee ff ff 	movabs rax,0xffffffffffeed771
ffff80000080b8ca:	ff ff ff 
ffff80000080b8cd:	48 01 d8             	add    rax,rbx
ffff80000080b8d0:	ff d0                	call   rax
ffff80000080b8d2:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:415
    kmfree(path);
ffff80000080b8d6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b8da:	48 89 c7             	mov    rdi,rax
ffff80000080b8dd:	49 89 df             	mov    r15,rbx
ffff80000080b8e0:	48 b8 d7 5a ee ff ff 	movabs rax,0xffffffffffee5ad7
ffff80000080b8e7:	ff ff ff 
ffff80000080b8ea:	48 01 d8             	add    rax,rbx
ffff80000080b8ed:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:417

    if(dentry == NULL)
ffff80000080b8ef:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff80000080b8f4:	75 09                	jne    ffff80000080b8ff <sys_chdir+0x19d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:418
        return -ENOENT;
ffff80000080b8f6:	48 c7 c0 d3 ff ff ff 	mov    rax,0xffffffffffffffd3
ffff80000080b8fd:	eb 20                	jmp    ffff80000080b91f <sys_chdir+0x1bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:419
    if(dentry->dir_inode->attribute != FS_ATTR_DIR)
ffff80000080b8ff:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080b903:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080b907:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080b90b:	48 83 f8 02          	cmp    rax,0x2
ffff80000080b90f:	74 09                	je     ffff80000080b91a <sys_chdir+0x1b8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:420
        return -ENOTDIR;
ffff80000080b911:	48 c7 c0 c7 ff ff ff 	mov    rax,0xffffffffffffffc7
ffff80000080b918:	eb 05                	jmp    ffff80000080b91f <sys_chdir+0x1bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:421
    return 0;
ffff80000080b91a:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:422
}
ffff80000080b91f:	48 83 c4 30          	add    rsp,0x30
ffff80000080b923:	5b                   	pop    rbx
ffff80000080b924:	41 5f                	pop    r15
ffff80000080b926:	5d                   	pop    rbp
ffff80000080b927:	c3                   	ret    

ffff80000080b928 <sys_getdents>:
sys_getdents():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:425

unsigned long sys_getdents(int fd, void * dirent, long count)
{
ffff80000080b928:	f3 0f 1e fa          	endbr64 
ffff80000080b92c:	55                   	push   rbp
ffff80000080b92d:	48 89 e5             	mov    rbp,rsp
ffff80000080b930:	48 83 ec 30          	sub    rsp,0x30
ffff80000080b934:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080b934 <sys_getdents+0xc>
ffff80000080b93b:	49 bb e4 0e 11 00 00 	movabs r11,0x110ee4
ffff80000080b942:	00 00 00 
ffff80000080b945:	4c 01 d8             	add    rax,r11
ffff80000080b948:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff80000080b94b:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080b94f:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:426
    struct file * filp = NULL;
ffff80000080b953:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffff80000080b95a:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:427
    unsigned long ret = 0;
ffff80000080b95b:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080b962:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:430

//	printf("sys_getdents:%d\n",fd);
    if(fd < 0 || fd > MAX_TASKS)
ffff80000080b963:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff80000080b967:	78 06                	js     ffff80000080b96f <sys_getdents+0x47>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:430 (discriminator 1)
ffff80000080b969:	83 7d ec 20          	cmp    DWORD PTR [rbp-0x14],0x20
ffff80000080b96d:	7e 0c                	jle    ffff80000080b97b <sys_getdents+0x53>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:431
        return -EBADF;
ffff80000080b96f:	48 c7 c0 f8 ff ff ff 	mov    rax,0xfffffffffffffff8
ffff80000080b976:	e9 85 00 00 00       	jmp    ffff80000080ba00 <sys_getdents+0xd8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:432
    if(count < 0)
ffff80000080b97b:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff80000080b980:	79 09                	jns    ffff80000080b98b <sys_getdents+0x63>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:433
        return -EINVAL;
ffff80000080b982:	48 c7 c0 e4 ff ff ff 	mov    rax,0xffffffffffffffe4
ffff80000080b989:	eb 75                	jmp    ffff80000080ba00 <sys_getdents+0xd8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:435

    filp = current->openf[fd];
ffff80000080b98b:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff80000080b992:	ff ff ff 
ffff80000080b995:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080b999:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080b99c:	8b 4d ec             	mov    ecx,DWORD PTR [rbp-0x14]
ffff80000080b99f:	48 63 c9             	movsxd rcx,ecx
ffff80000080b9a2:	48 83 c1 1e          	add    rcx,0x1e
ffff80000080b9a6:	48 8b 54 ca 08       	mov    rdx,QWORD PTR [rdx+rcx*8+0x8]
ffff80000080b9ab:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:436
    if(filp->f_ops && filp->f_ops->readdir)
ffff80000080b9af:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080b9b3:	48 8b 52 18          	mov    rdx,QWORD PTR [rdx+0x18]
ffff80000080b9b7:	48 85 d2             	test   rdx,rdx
ffff80000080b9ba:	74 40                	je     ffff80000080b9fc <sys_getdents+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:436 (discriminator 1)
ffff80000080b9bc:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080b9c0:	48 8b 52 18          	mov    rdx,QWORD PTR [rdx+0x18]
ffff80000080b9c4:	48 8b 52 30          	mov    rdx,QWORD PTR [rdx+0x30]
ffff80000080b9c8:	48 85 d2             	test   rdx,rdx
ffff80000080b9cb:	74 2f                	je     ffff80000080b9fc <sys_getdents+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:437
        ret = filp->f_ops->readdir(filp,dirent,&fill_dentry);
ffff80000080b9cd:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080b9d1:	48 8b 52 18          	mov    rdx,QWORD PTR [rdx+0x18]
ffff80000080b9d5:	4c 8b 42 30          	mov    r8,QWORD PTR [rdx+0x30]
ffff80000080b9d9:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff80000080b9dd:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff80000080b9e1:	48 ba 80 ff ff ff ff 	movabs rdx,0xffffffffffffff80
ffff80000080b9e8:	ff ff ff 
ffff80000080b9eb:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080b9ef:	48 89 c2             	mov    rdx,rax
ffff80000080b9f2:	48 89 cf             	mov    rdi,rcx
ffff80000080b9f5:	41 ff d0             	call   r8
ffff80000080b9f8:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:438
    return ret;
ffff80000080b9fc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:439
}
ffff80000080ba00:	c9                   	leave  
ffff80000080ba01:	c3                   	ret    

ffff80000080ba02 <init_ramfs>:
init_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:28
};
struct index_node_operations ramfs_iops={
        .lookup=lookup_inode_ramfs,.create=create_inode_ramfs
};
struct index_node* test;
void init_ramfs(){
ffff80000080ba02:	f3 0f 1e fa          	endbr64 
ffff80000080ba06:	55                   	push   rbp
ffff80000080ba07:	48 89 e5             	mov    rbp,rsp
ffff80000080ba0a:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080ba0a <init_ramfs+0x8>
ffff80000080ba11:	49 bb 0e 0e 11 00 00 	movabs r11,0x110e0e
ffff80000080ba18:	00 00 00 
ffff80000080ba1b:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:31
    //挂载新文件系统到/mnt,设备为/dev/ram

    ramfs_sb.sb_ops=&ramfs_fops;
ffff80000080ba1e:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff80000080ba25:	ff ff ff 
ffff80000080ba28:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080ba2c:	48 b9 48 fd ff ff ff 	movabs rcx,0xfffffffffffffd48
ffff80000080ba33:	ff ff ff 
ffff80000080ba36:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080ba3a:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:32
    ramfs_sb.root=dmnt;
ffff80000080ba3e:	48 ba e8 fe ff ff ff 	movabs rdx,0xfffffffffffffee8
ffff80000080ba45:	ff ff ff 
ffff80000080ba48:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080ba4c:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080ba4f:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff80000080ba56:	ff ff ff 
ffff80000080ba59:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080ba5d:	48 89 0a             	mov    QWORD PTR [rdx],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:33
    ramfs_sb.p_dev=&bd_ramdisk;
ffff80000080ba60:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff80000080ba67:	ff ff ff 
ffff80000080ba6a:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080ba6e:	48 b9 a8 ff ff ff ff 	movabs rcx,0xffffffffffffffa8
ffff80000080ba75:	ff ff ff 
ffff80000080ba78:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080ba7c:	48 89 4a 18          	mov    QWORD PTR [rdx+0x18],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:34
    ramfs_sb.dev=dev_ramdisk;
ffff80000080ba80:	48 ba d0 fe ff ff ff 	movabs rdx,0xfffffffffffffed0
ffff80000080ba87:	ff ff ff 
ffff80000080ba8a:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080ba8e:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff80000080ba90:	89 d1                	mov    ecx,edx
ffff80000080ba92:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff80000080ba99:	ff ff ff 
ffff80000080ba9c:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080baa0:	66 89 48 10          	mov    WORD PTR [rax+0x10],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:45
    // test->sb=&ramfs_sb;
    // test->attribute=FS_ATTR_FILE;
    // test->inode_ops=&ramfs_iops;
    //设置一下dmnt的inode的操作，查找的时候会用到
    // dmnt->dir_inode->inode_ops=&ramfs_iops;
}
ffff80000080baa4:	90                   	nop
ffff80000080baa5:	5d                   	pop    rbp
ffff80000080baa6:	c3                   	ret    

ffff80000080baa7 <create_inode_ramfs>:
create_inode_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:47

long create_inode_ramfs(struct index_node * inode,struct dir_entry * dentry,int mode){}
ffff80000080baa7:	f3 0f 1e fa          	endbr64 
ffff80000080baab:	55                   	push   rbp
ffff80000080baac:	48 89 e5             	mov    rbp,rsp
ffff80000080baaf:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080baaf <create_inode_ramfs+0x8>
ffff80000080bab6:	49 bb 69 0d 11 00 00 	movabs r11,0x110d69
ffff80000080babd:	00 00 00 
ffff80000080bac0:	4c 01 d8             	add    rax,r11
ffff80000080bac3:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080bac7:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080bacb:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
ffff80000080bace:	90                   	nop
ffff80000080bacf:	5d                   	pop    rbp
ffff80000080bad0:	c3                   	ret    

ffff80000080bad1 <lookup_inode_ramfs>:
lookup_inode_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:48
struct dir_entry* lookup_inode_ramfs(struct index_node * parent_inode,struct dir_entry * dest_dentry){
ffff80000080bad1:	f3 0f 1e fa          	endbr64 
ffff80000080bad5:	55                   	push   rbp
ffff80000080bad6:	48 89 e5             	mov    rbp,rsp
ffff80000080bad9:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080bad9 <lookup_inode_ramfs+0x8>
ffff80000080bae0:	49 bb 3f 0d 11 00 00 	movabs r11,0x110d3f
ffff80000080bae7:	00 00 00 
ffff80000080baea:	4c 01 d8             	add    rax,r11
ffff80000080baed:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff80000080baf1:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:49
    list_init(&dest_dentry->subdirs_list);
ffff80000080baf5:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080baf9:	48 83 c2 28          	add    rdx,0x28
ffff80000080bafd:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff80000080bb01:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080bb05:	48 c7 02 00 00 00 00 	mov    QWORD PTR [rdx],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000080bb0c:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080bb10:	48 c7 42 10 00 00 00 	mov    QWORD PTR [rdx+0x10],0x0
ffff80000080bb17:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000080bb18:	90                   	nop
lookup_inode_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:50
    list_init(&dest_dentry->child_node);
ffff80000080bb19:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080bb1d:	48 83 c2 10          	add    rdx,0x10
ffff80000080bb21:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff80000080bb25:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080bb29:	48 c7 02 00 00 00 00 	mov    QWORD PTR [rdx],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000080bb30:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080bb34:	48 c7 42 10 00 00 00 	mov    QWORD PTR [rdx+0x10],0x0
ffff80000080bb3b:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000080bb3c:	90                   	nop
lookup_inode_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:51
    dest_dentry->dir_inode=test;
ffff80000080bb3d:	48 ba 80 fe ff ff ff 	movabs rdx,0xfffffffffffffe80
ffff80000080bb44:	ff ff ff 
ffff80000080bb47:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080bb4b:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080bb4e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bb52:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:52
    dest_dentry->child_node.data=dest_dentry;
ffff80000080bb56:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bb5a:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080bb5e:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:53
    return dest_dentry;
ffff80000080bb62:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:54
}
ffff80000080bb66:	5d                   	pop    rbp
ffff80000080bb67:	c3                   	ret    

ffff80000080bb68 <open_ramfs>:
open_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:55
long open_ramfs(struct index_node * inode,struct file * filp){
ffff80000080bb68:	f3 0f 1e fa          	endbr64 
ffff80000080bb6c:	55                   	push   rbp
ffff80000080bb6d:	48 89 e5             	mov    rbp,rsp
ffff80000080bb70:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080bb70 <open_ramfs+0x8>
ffff80000080bb77:	49 bb a8 0c 11 00 00 	movabs r11,0x110ca8
ffff80000080bb7e:	00 00 00 
ffff80000080bb81:	4c 01 d8             	add    rax,r11
ffff80000080bb84:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080bb88:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:56
    filp->f_ops=inode->f_ops;
ffff80000080bb8c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080bb90:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
ffff80000080bb94:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080bb98:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:57
    filp->position=0;
ffff80000080bb9c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080bba0:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:58
    return 1;
ffff80000080bba7:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:59
}
ffff80000080bbac:	5d                   	pop    rbp
ffff80000080bbad:	c3                   	ret    

ffff80000080bbae <close_ramfs>:
close_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:61

long close_ramfs(struct index_node * inode,struct file * filp){
ffff80000080bbae:	f3 0f 1e fa          	endbr64 
ffff80000080bbb2:	55                   	push   rbp
ffff80000080bbb3:	48 89 e5             	mov    rbp,rsp
ffff80000080bbb6:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080bbb6 <close_ramfs+0x8>
ffff80000080bbbd:	49 bb 62 0c 11 00 00 	movabs r11,0x110c62
ffff80000080bbc4:	00 00 00 
ffff80000080bbc7:	4c 01 d8             	add    rax,r11
ffff80000080bbca:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080bbce:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:62
    return 0;
ffff80000080bbd2:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:63
}
ffff80000080bbd7:	5d                   	pop    rbp
ffff80000080bbd8:	c3                   	ret    

ffff80000080bbd9 <read_ramfs>:
read_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:65
//注意一下:position是指针
long read_ramfs(struct file * filp,char * buf,unsigned long count,long * position){
ffff80000080bbd9:	f3 0f 1e fa          	endbr64 
ffff80000080bbdd:	55                   	push   rbp
ffff80000080bbde:	48 89 e5             	mov    rbp,rsp
ffff80000080bbe1:	41 57                	push   r15
ffff80000080bbe3:	48 83 ec 28          	sub    rsp,0x28
ffff80000080bbe7:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080bbe7 <read_ramfs+0xe>
ffff80000080bbee:	49 bb 31 0c 11 00 00 	movabs r11,0x110c31
ffff80000080bbf5:	00 00 00 
ffff80000080bbf8:	4c 01 d8             	add    rax,r11
ffff80000080bbfb:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff80000080bbff:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080bc03:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffff80000080bc07:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:66
    blkdev_read(filp->dentry->dir_inode->dev,*position,count,buf);
ffff80000080bc0b:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000080bc0f:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080bc12:	89 d6                	mov    esi,edx
ffff80000080bc14:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080bc18:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
ffff80000080bc1c:	48 8b 52 40          	mov    rdx,QWORD PTR [rdx+0x40]
ffff80000080bc20:	0f b7 52 18          	movzx  edx,WORD PTR [rdx+0x18]
ffff80000080bc24:	0f b7 fa             	movzx  edi,dx
ffff80000080bc27:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
ffff80000080bc2b:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080bc2f:	49 89 c7             	mov    r15,rax
ffff80000080bc32:	49 b8 7c 02 ef ff ff 	movabs r8,0xffffffffffef027c
ffff80000080bc39:	ff ff ff 
ffff80000080bc3c:	49 01 c0             	add    r8,rax
ffff80000080bc3f:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:73
    if(len>count)len=count;
    for(int i=0;i<len;i++){
        buf[i]=_binary_bin_test_elf_start[i + *position];
    }
    *position+=len; */
    return 0;
ffff80000080bc42:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:74
}
ffff80000080bc47:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080bc4b:	c9                   	leave  
ffff80000080bc4c:	c3                   	ret    

ffff80000080bc4d <write_ramfs>:
write_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:75
long write_ramfs(struct file * filp,char * buf,unsigned long count,long * position){
ffff80000080bc4d:	f3 0f 1e fa          	endbr64 
ffff80000080bc51:	55                   	push   rbp
ffff80000080bc52:	48 89 e5             	mov    rbp,rsp
ffff80000080bc55:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080bc55 <write_ramfs+0x8>
ffff80000080bc5c:	49 bb c3 0b 11 00 00 	movabs r11,0x110bc3
ffff80000080bc63:	00 00 00 
ffff80000080bc66:	4c 01 d8             	add    rax,r11
ffff80000080bc69:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080bc6d:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080bc71:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080bc75:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:76
    return 0;
ffff80000080bc79:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:77
}
ffff80000080bc7e:	5d                   	pop    rbp
ffff80000080bc7f:	c3                   	ret    

ffff80000080bc80 <ioctl_ramfs>:
ioctl_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:78
long ioctl_ramfs(struct index_node * inode,struct file * filp,unsigned long cmd,unsigned long arg){
ffff80000080bc80:	f3 0f 1e fa          	endbr64 
ffff80000080bc84:	55                   	push   rbp
ffff80000080bc85:	48 89 e5             	mov    rbp,rsp
ffff80000080bc88:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080bc88 <ioctl_ramfs+0x8>
ffff80000080bc8f:	49 bb 90 0b 11 00 00 	movabs r11,0x110b90
ffff80000080bc96:	00 00 00 
ffff80000080bc99:	4c 01 d8             	add    rax,r11
ffff80000080bc9c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080bca0:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080bca4:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080bca8:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:79
    return 0;
ffff80000080bcac:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:80
ffff80000080bcb1:	5d                   	pop    rbp
ffff80000080bcb2:	c3                   	ret    

ffff80000080bcb3 <ramdisk_do_req>:
ramdisk_do_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:22
long ramdisk_size;
int dev_ramdisk=-1;
struct blk_dev bd_ramdisk={
    .do_request=ramdisk_do_req
};
void ramdisk_do_req(struct request* req){
ffff80000080bcb3:	f3 0f 1e fa          	endbr64 
ffff80000080bcb7:	55                   	push   rbp
ffff80000080bcb8:	48 89 e5             	mov    rbp,rsp
ffff80000080bcbb:	48 83 ec 40          	sub    rsp,0x40
ffff80000080bcbf:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080bcbf <ramdisk_do_req+0xc>
ffff80000080bcc6:	49 bb 59 0b 11 00 00 	movabs r11,0x110b59
ffff80000080bccd:	00 00 00 
ffff80000080bcd0:	4c 01 d8             	add    rax,r11
ffff80000080bcd3:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:23
    if(!req)
ffff80000080bcd7:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffff80000080bcdc:	0f 84 0c 02 00 00    	je     ffff80000080beee <ramdisk_do_req+0x23b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:25
        return;
    start_request(req->dev);
ffff80000080bce2:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080bce6:	0f b7 12             	movzx  edx,WORD PTR [rdx]
ffff80000080bce9:	0f b7 d2             	movzx  edx,dx
ffff80000080bcec:	66 89 55 e6          	mov    WORD PTR [rbp-0x1a],dx
start_request():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:69
    int major=BLKDEV_MAJOR(dev);
    blk_devs[major].current_request->dev=-1;
    blk_devs[major].current_request=blk_devs[major].current_request->next;
}
__attribute__((__always_inline__))inline void start_request(unsigned short dev){
    wait_on_req(blk_devs[BLKDEV_MAJOR(dev)].current_request->waiting);
ffff80000080bcf0:	0f b7 55 e6          	movzx  edx,WORD PTR [rbp-0x1a]
ffff80000080bcf4:	c1 fa 04             	sar    edx,0x4
ffff80000080bcf7:	89 d1                	mov    ecx,edx
ffff80000080bcf9:	83 e1 0f             	and    ecx,0xf
ffff80000080bcfc:	48 ba 98 ff ff ff ff 	movabs rdx,0xffffffffffffff98
ffff80000080bd03:	ff ff ff 
ffff80000080bd06:	48 8b 34 10          	mov    rsi,QWORD PTR [rax+rdx*1]
ffff80000080bd0a:	48 63 d1             	movsxd rdx,ecx
ffff80000080bd0d:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080bd11:	48 01 f2             	add    rdx,rsi
ffff80000080bd14:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff80000080bd18:	48 8b 52 2a          	mov    rdx,QWORD PTR [rdx+0x2a]
ffff80000080bd1c:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
wait_on_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:201
}
__attribute__((__always_inline__))inline void wait_on_req(struct process* p){
        if(p->stat==TASK_READY||p->stat==TASK_RUNNING)
ffff80000080bd20:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080bd24:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff80000080bd27:	83 fa 02             	cmp    edx,0x2
ffff80000080bd2a:	74 0c                	je     ffff80000080bd38 <ramdisk_do_req+0x85>
ffff80000080bd2c:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080bd30:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff80000080bd33:	83 fa 01             	cmp    edx,0x1
ffff80000080bd36:	75 0b                	jne    ffff80000080bd43 <ramdisk_do_req+0x90>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:202
            p->stat=TASK_SUSPENDED;
ffff80000080bd38:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080bd3c:	c7 42 18 03 00 00 00 	mov    DWORD PTR [rdx+0x18],0x3
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:203
}
ffff80000080bd43:	90                   	nop
start_request():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:70
ffff80000080bd44:	90                   	nop
ramdisk_do_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:26
    switch (req->cmd)
ffff80000080bd45:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080bd49:	8b 52 02             	mov    edx,DWORD PTR [rdx+0x2]
ffff80000080bd4c:	85 d2                	test   edx,edx
ffff80000080bd4e:	74 0a                	je     ffff80000080bd5a <ramdisk_do_req+0xa7>
ffff80000080bd50:	83 fa 01             	cmp    edx,0x1
ffff80000080bd53:	74 6e                	je     ffff80000080bdc3 <ramdisk_do_req+0x110>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:43
        for(int i=0;i<lenw;i++){
            ramdisk_base[i + basew]=req->buffer[i];
        }
        break;
    default:
        break;
ffff80000080bd55:	e9 d1 00 00 00       	jmp    ffff80000080be2b <ramdisk_do_req+0x178>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:29
        int len= req->nr_sectors*SECTOR_SIZE;
ffff80000080bd5a:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080bd5e:	48 8b 52 12          	mov    rdx,QWORD PTR [rdx+0x12]
ffff80000080bd62:	c1 e2 09             	shl    edx,0x9
ffff80000080bd65:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:30
        int base=req->sector*SECTOR_SIZE;
ffff80000080bd68:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080bd6c:	48 8b 52 0a          	mov    rdx,QWORD PTR [rdx+0xa]
ffff80000080bd70:	c1 e2 09             	shl    edx,0x9
ffff80000080bd73:	89 55 e8             	mov    DWORD PTR [rbp-0x18],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:31
        for(int i=0;i<len;i++){
ffff80000080bd76:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff80000080bd7d:	eb 3a                	jmp    ffff80000080bdb9 <ramdisk_do_req+0x106>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:32 (discriminator 3)
            req->buffer[i]=ramdisk_base[i + base];
ffff80000080bd7f:	48 ba e8 ff ff ff ff 	movabs rdx,0xffffffffffffffe8
ffff80000080bd86:	ff ff ff 
ffff80000080bd89:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080bd8d:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080bd90:	8b 75 fc             	mov    esi,DWORD PTR [rbp-0x4]
ffff80000080bd93:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff80000080bd96:	01 f2                	add    edx,esi
ffff80000080bd98:	48 63 d2             	movsxd rdx,edx
ffff80000080bd9b:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff80000080bd9f:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080bda3:	48 8b 4a 22          	mov    rcx,QWORD PTR [rdx+0x22]
ffff80000080bda7:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080bdaa:	48 63 d2             	movsxd rdx,edx
ffff80000080bdad:	48 01 d1             	add    rcx,rdx
ffff80000080bdb0:	0f b6 16             	movzx  edx,BYTE PTR [rsi]
ffff80000080bdb3:	88 11                	mov    BYTE PTR [rcx],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:31 (discriminator 3)
        for(int i=0;i<len;i++){
ffff80000080bdb5:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:31 (discriminator 1)
ffff80000080bdb9:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080bdbc:	3b 55 ec             	cmp    edx,DWORD PTR [rbp-0x14]
ffff80000080bdbf:	7c be                	jl     ffff80000080bd7f <ramdisk_do_req+0xcc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:34
        break;
ffff80000080bdc1:	eb 68                	jmp    ffff80000080be2b <ramdisk_do_req+0x178>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:36
        int lenw= req->nr_sectors*BLOCK_SIZE;
ffff80000080bdc3:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080bdc7:	48 8b 52 12          	mov    rdx,QWORD PTR [rdx+0x12]
ffff80000080bdcb:	c1 e2 0c             	shl    edx,0xc
ffff80000080bdce:	89 55 f4             	mov    DWORD PTR [rbp-0xc],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:37
        int basew=req->sector*BLOCK_SIZE;
ffff80000080bdd1:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080bdd5:	48 8b 52 0a          	mov    rdx,QWORD PTR [rdx+0xa]
ffff80000080bdd9:	c1 e2 0c             	shl    edx,0xc
ffff80000080bddc:	89 55 f0             	mov    DWORD PTR [rbp-0x10],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:38
        for(int i=0;i<lenw;i++){
ffff80000080bddf:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
ffff80000080bde6:	eb 3a                	jmp    ffff80000080be22 <ramdisk_do_req+0x16f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:39 (discriminator 3)
            ramdisk_base[i + basew]=req->buffer[i];
ffff80000080bde8:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080bdec:	48 8b 4a 22          	mov    rcx,QWORD PTR [rdx+0x22]
ffff80000080bdf0:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff80000080bdf3:	48 63 d2             	movsxd rdx,edx
ffff80000080bdf6:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff80000080bdfa:	48 ba e8 ff ff ff ff 	movabs rdx,0xffffffffffffffe8
ffff80000080be01:	ff ff ff 
ffff80000080be04:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080be08:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080be0b:	8b 7d f8             	mov    edi,DWORD PTR [rbp-0x8]
ffff80000080be0e:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
ffff80000080be11:	01 fa                	add    edx,edi
ffff80000080be13:	48 63 d2             	movsxd rdx,edx
ffff80000080be16:	48 01 d1             	add    rcx,rdx
ffff80000080be19:	0f b6 16             	movzx  edx,BYTE PTR [rsi]
ffff80000080be1c:	88 11                	mov    BYTE PTR [rcx],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:38 (discriminator 3)
        for(int i=0;i<lenw;i++){
ffff80000080be1e:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:38 (discriminator 1)
ffff80000080be22:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff80000080be25:	3b 55 f4             	cmp    edx,DWORD PTR [rbp-0xc]
ffff80000080be28:	7c be                	jl     ffff80000080bde8 <ramdisk_do_req+0x135>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:41
        break;
ffff80000080be2a:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:45
    }
    end_request(req->dev);
ffff80000080be2b:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080be2f:	0f b7 12             	movzx  edx,WORD PTR [rdx]
ffff80000080be32:	0f b7 d2             	movzx  edx,dx
ffff80000080be35:	66 89 55 d6          	mov    WORD PTR [rbp-0x2a],dx
end_request():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:64
    int major=BLKDEV_MAJOR(dev);
ffff80000080be39:	0f b7 55 d6          	movzx  edx,WORD PTR [rbp-0x2a]
ffff80000080be3d:	c1 fa 04             	sar    edx,0x4
ffff80000080be40:	83 e2 0f             	and    edx,0xf
ffff80000080be43:	89 55 d0             	mov    DWORD PTR [rbp-0x30],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:65
    blk_devs[major].current_request->dev=-1;
ffff80000080be46:	48 ba 98 ff ff ff ff 	movabs rdx,0xffffffffffffff98
ffff80000080be4d:	ff ff ff 
ffff80000080be50:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080be54:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
ffff80000080be57:	48 63 d2             	movsxd rdx,edx
ffff80000080be5a:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080be5e:	48 01 ca             	add    rdx,rcx
ffff80000080be61:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff80000080be65:	66 c7 02 ff ff       	mov    WORD PTR [rdx],0xffff
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:66
    blk_devs[major].current_request=blk_devs[major].current_request->next;
ffff80000080be6a:	48 ba 98 ff ff ff ff 	movabs rdx,0xffffffffffffff98
ffff80000080be71:	ff ff ff 
ffff80000080be74:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080be78:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
ffff80000080be7b:	48 63 d2             	movsxd rdx,edx
ffff80000080be7e:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080be82:	48 01 ca             	add    rdx,rcx
ffff80000080be85:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff80000080be89:	48 8b 52 32          	mov    rdx,QWORD PTR [rdx+0x32]
ffff80000080be8d:	48 b9 98 ff ff ff ff 	movabs rcx,0xffffffffffffff98
ffff80000080be94:	ff ff ff 
ffff80000080be97:	48 8b 34 08          	mov    rsi,QWORD PTR [rax+rcx*1]
ffff80000080be9b:	8b 4d d0             	mov    ecx,DWORD PTR [rbp-0x30]
ffff80000080be9e:	48 63 c9             	movsxd rcx,ecx
ffff80000080bea1:	48 c1 e1 04          	shl    rcx,0x4
ffff80000080bea5:	48 01 f1             	add    rcx,rsi
ffff80000080bea8:	48 89 51 08          	mov    QWORD PTR [rcx+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:67
}
ffff80000080beac:	90                   	nop
ramdisk_do_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:46
    ramdisk_do_req(blk_devs[dev_ramdisk].current_request);
ffff80000080bead:	48 ba d0 fe ff ff ff 	movabs rdx,0xfffffffffffffed0
ffff80000080beb4:	ff ff ff 
ffff80000080beb7:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080bebb:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff80000080bebd:	48 b9 98 ff ff ff ff 	movabs rcx,0xffffffffffffff98
ffff80000080bec4:	ff ff ff 
ffff80000080bec7:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080becb:	48 63 d2             	movsxd rdx,edx
ffff80000080bece:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080bed2:	48 01 ca             	add    rdx,rcx
ffff80000080bed5:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff80000080bed9:	48 89 d7             	mov    rdi,rdx
ffff80000080bedc:	48 ba 9b f4 ee ff ff 	movabs rdx,0xffffffffffeef49b
ffff80000080bee3:	ff ff ff 
ffff80000080bee6:	48 8d 04 10          	lea    rax,[rax+rdx*1]
ffff80000080beea:	ff d0                	call   rax
ffff80000080beec:	eb 01                	jmp    ffff80000080beef <ramdisk_do_req+0x23c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:24
        return;
ffff80000080beee:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:47
}
ffff80000080beef:	c9                   	leave  
ffff80000080bef0:	c3                   	ret    

ffff80000080bef1 <init_ramdisk>:
init_ramdisk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:48
void init_ramdisk(){
ffff80000080bef1:	f3 0f 1e fa          	endbr64 
ffff80000080bef5:	55                   	push   rbp
ffff80000080bef6:	48 89 e5             	mov    rbp,rsp
ffff80000080bef9:	41 57                	push   r15
ffff80000080befb:	41 54                	push   r12
ffff80000080befd:	53                   	push   rbx
ffff80000080befe:	48 83 ec 18          	sub    rsp,0x18
ffff80000080bf02:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080bf02 <init_ramdisk+0x11>
ffff80000080bf09:	49 bb 16 09 11 00 00 	movabs r11,0x110916
ffff80000080bf10:	00 00 00 
ffff80000080bf13:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:50
    //初始化ramdisk，在/dev下创建一个ram
    ramdisk_base= KNL_BASE+0x81000000;//(char *) kmallocat(0, 100);
ffff80000080bf16:	48 b8 e8 ff ff ff ff 	movabs rax,0xffffffffffffffe8
ffff80000080bf1d:	ff ff ff 
ffff80000080bf20:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080bf24:	48 be 00 00 00 81 00 	movabs rsi,0xffff800081000000
ffff80000080bf2b:	80 ff ff 
ffff80000080bf2e:	48 89 30             	mov    QWORD PTR [rax],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:51
    if(ramdisk_base==-1){
ffff80000080bf31:	48 b8 e8 ff ff ff ff 	movabs rax,0xffffffffffffffe8
ffff80000080bf38:	ff ff ff 
ffff80000080bf3b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080bf3f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080bf42:	48 83 f8 ff          	cmp    rax,0xffffffffffffffff
ffff80000080bf46:	75 2d                	jne    ffff80000080bf75 <init_ramdisk+0x84>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:52
        comprintf("failed to init ramdisk.\n");
ffff80000080bf48:	48 b8 b2 d9 ff ff ff 	movabs rax,0xffffffffffffd9b2
ffff80000080bf4f:	ff ff ff 
ffff80000080bf52:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080bf56:	48 89 c7             	mov    rdi,rax
ffff80000080bf59:	49 89 df             	mov    r15,rbx
ffff80000080bf5c:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080bf61:	48 ba 1b 4e ef ff ff 	movabs rdx,0xffffffffffef4e1b
ffff80000080bf68:	ff ff ff 
ffff80000080bf6b:	48 01 da             	add    rdx,rbx
ffff80000080bf6e:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:53
        return;
ffff80000080bf70:	e9 a3 01 00 00       	jmp    ffff80000080c118 <init_ramdisk+0x227>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:55
    }
    ramdisk_size= (char*)_binary_rd_img_end - (char*)_binary_rd_img_start;//PAGE_4K_SIZE*100;
ffff80000080bf75:	48 b8 b0 fd ff ff ff 	movabs rax,0xfffffffffffffdb0
ffff80000080bf7c:	ff ff ff 
ffff80000080bf7f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080bf83:	48 89 c2             	mov    rdx,rax
ffff80000080bf86:	48 b8 68 fe ff ff ff 	movabs rax,0xfffffffffffffe68
ffff80000080bf8d:	ff ff ff 
ffff80000080bf90:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080bf94:	48 29 c2             	sub    rdx,rax
ffff80000080bf97:	48 b8 d0 fd ff ff ff 	movabs rax,0xfffffffffffffdd0
ffff80000080bf9e:	ff ff ff 
ffff80000080bfa1:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080bfa5:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:56
    if((dev_ramdisk=reg_blkdev(&bd_ramdisk))<0){
ffff80000080bfa8:	48 b8 a8 ff ff ff ff 	movabs rax,0xffffffffffffffa8
ffff80000080bfaf:	ff ff ff 
ffff80000080bfb2:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080bfb6:	48 89 c7             	mov    rdi,rax
ffff80000080bfb9:	49 89 df             	mov    r15,rbx
ffff80000080bfbc:	48 b8 0b f9 ee ff ff 	movabs rax,0xffffffffffeef90b
ffff80000080bfc3:	ff ff ff 
ffff80000080bfc6:	48 01 d8             	add    rax,rbx
ffff80000080bfc9:	ff d0                	call   rax
ffff80000080bfcb:	48 ba d0 fe ff ff ff 	movabs rdx,0xfffffffffffffed0
ffff80000080bfd2:	ff ff ff 
ffff80000080bfd5:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080bfd9:	89 02                	mov    DWORD PTR [rdx],eax
ffff80000080bfdb:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080bfe2:	ff ff ff 
ffff80000080bfe5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080bfe9:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080bfeb:	85 c0                	test   eax,eax
ffff80000080bfed:	79 2d                	jns    ffff80000080c01c <init_ramdisk+0x12b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:57
        comprintf("no place for more blkdev.\n");
ffff80000080bfef:	48 b8 cb d9 ff ff ff 	movabs rax,0xffffffffffffd9cb
ffff80000080bff6:	ff ff ff 
ffff80000080bff9:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080bffd:	48 89 c7             	mov    rdi,rax
ffff80000080c000:	49 89 df             	mov    r15,rbx
ffff80000080c003:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080c008:	48 ba 1b 4e ef ff ff 	movabs rdx,0xffffffffffef4e1b
ffff80000080c00f:	ff ff ff 
ffff80000080c012:	48 01 da             	add    rdx,rbx
ffff80000080c015:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:58
        return;
ffff80000080c017:	e9 fc 00 00 00       	jmp    ffff80000080c118 <init_ramdisk+0x227>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:60
    }
    for(int i=0;i<(ramdisk_size+PAGE_4K_SIZE-1)/PAGE_4K_SIZE;i++){
ffff80000080c01c:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
ffff80000080c023:	e9 b8 00 00 00       	jmp    ffff80000080c0e0 <init_ramdisk+0x1ef>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:61 (discriminator 3)
        smmap(pmalloc(),ramdisk_base+i*PAGE_4K_SIZE,PAGE_PRESENT|PAGE_RWX,PML4_ADDR);
ffff80000080c028:	48 b8 e8 ff ff ff ff 	movabs rax,0xffffffffffffffe8
ffff80000080c02f:	ff ff ff 
ffff80000080c032:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080c036:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080c039:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080c03c:	c1 e0 0c             	shl    eax,0xc
ffff80000080c03f:	48 98                	cdqe   
ffff80000080c041:	48 01 d0             	add    rax,rdx
ffff80000080c044:	49 89 c4             	mov    r12,rax
ffff80000080c047:	49 89 df             	mov    r15,rbx
ffff80000080c04a:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080c04f:	48 ba d6 63 ee ff ff 	movabs rdx,0xffffffffffee63d6
ffff80000080c056:	ff ff ff 
ffff80000080c059:	48 01 da             	add    rdx,rbx
ffff80000080c05c:	ff d2                	call   rdx
ffff80000080c05e:	48 89 c7             	mov    rdi,rax
ffff80000080c061:	48 b8 00 10 10 00 00 	movabs rax,0xffff800000101000
ffff80000080c068:	80 ff ff 
ffff80000080c06b:	48 89 c1             	mov    rcx,rax
ffff80000080c06e:	ba 03 00 00 00       	mov    edx,0x3
ffff80000080c073:	4c 89 e6             	mov    rsi,r12
ffff80000080c076:	49 89 df             	mov    r15,rbx
ffff80000080c079:	48 b8 9c 52 ee ff ff 	movabs rax,0xffffffffffee529c
ffff80000080c080:	ff ff ff 
ffff80000080c083:	48 01 d8             	add    rax,rbx
ffff80000080c086:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:63 (discriminator 3)
        //解压img里面的test程序
        memcpy(ramdisk_base+i*PAGE_4K_SIZE, _binary_rd_img_start+i*PAGE_4K_SIZE,PAGE_4K_SIZE);
ffff80000080c088:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080c08b:	c1 e0 0c             	shl    eax,0xc
ffff80000080c08e:	48 63 d0             	movsxd rdx,eax
ffff80000080c091:	48 b8 68 fe ff ff ff 	movabs rax,0xfffffffffffffe68
ffff80000080c098:	ff ff ff 
ffff80000080c09b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080c09f:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
ffff80000080c0a3:	48 b8 e8 ff ff ff ff 	movabs rax,0xffffffffffffffe8
ffff80000080c0aa:	ff ff ff 
ffff80000080c0ad:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080c0b1:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080c0b4:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080c0b7:	c1 e0 0c             	shl    eax,0xc
ffff80000080c0ba:	48 98                	cdqe   
ffff80000080c0bc:	48 01 d0             	add    rax,rdx
ffff80000080c0bf:	ba 00 10 00 00       	mov    edx,0x1000
ffff80000080c0c4:	48 89 ce             	mov    rsi,rcx
ffff80000080c0c7:	48 89 c7             	mov    rdi,rax
ffff80000080c0ca:	49 89 df             	mov    r15,rbx
ffff80000080c0cd:	48 b8 bc 52 ef ff ff 	movabs rax,0xffffffffffef52bc
ffff80000080c0d4:	ff ff ff 
ffff80000080c0d7:	48 01 d8             	add    rax,rbx
ffff80000080c0da:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:60 (discriminator 3)
    for(int i=0;i<(ramdisk_size+PAGE_4K_SIZE-1)/PAGE_4K_SIZE;i++){
ffff80000080c0dc:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:60 (discriminator 1)
ffff80000080c0e0:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080c0e3:	48 63 d0             	movsxd rdx,eax
ffff80000080c0e6:	48 b8 d0 fd ff ff ff 	movabs rax,0xfffffffffffffdd0
ffff80000080c0ed:	ff ff ff 
ffff80000080c0f0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080c0f4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c0f7:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff80000080c0fd:	48 8d 88 ff 0f 00 00 	lea    rcx,[rax+0xfff]
ffff80000080c104:	48 85 c0             	test   rax,rax
ffff80000080c107:	48 0f 48 c1          	cmovs  rax,rcx
ffff80000080c10b:	48 c1 f8 0c          	sar    rax,0xc
ffff80000080c10f:	48 39 c2             	cmp    rdx,rax
ffff80000080c112:	0f 8c 10 ff ff ff    	jl     ffff80000080c028 <init_ramdisk+0x137>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:68

    }

    
}
ffff80000080c118:	48 83 c4 18          	add    rsp,0x18
ffff80000080c11c:	5b                   	pop    rbx
ffff80000080c11d:	41 5c                	pop    r12
ffff80000080c11f:	41 5f                	pop    r15
ffff80000080c121:	5d                   	pop    rbp
ffff80000080c122:	c3                   	ret    

ffff80000080c123 <reg_blkdev>:
reg_blkdev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:5
#include <blk_dev.h>
#include <errno.h>
struct blk_dev blk_devs[MAX_BLKDEVS];
struct request requests[MAX_REQUESTS];
int reg_blkdev(struct blk_dev* dev){
ffff80000080c123:	f3 0f 1e fa          	endbr64 
ffff80000080c127:	55                   	push   rbp
ffff80000080c128:	48 89 e5             	mov    rbp,rsp
ffff80000080c12b:	53                   	push   rbx
ffff80000080c12c:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080c12c <reg_blkdev+0x9>
ffff80000080c133:	49 bb ec 06 11 00 00 	movabs r11,0x1106ec
ffff80000080c13a:	00 00 00 
ffff80000080c13d:	4c 01 d8             	add    rax,r11
ffff80000080c140:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:6
    for(int i=0;i<MAX_BLKDEVS;i++){
ffff80000080c144:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
ffff80000080c14b:	e9 80 00 00 00       	jmp    ffff80000080c1d0 <reg_blkdev+0xad>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:7
        if(blk_devs[i].do_request)continue;
ffff80000080c150:	48 ba 98 ff ff ff ff 	movabs rdx,0xffffffffffffff98
ffff80000080c157:	ff ff ff 
ffff80000080c15a:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080c15e:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff80000080c161:	48 63 d2             	movsxd rdx,edx
ffff80000080c164:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080c168:	48 01 ca             	add    rdx,rcx
ffff80000080c16b:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080c16e:	48 85 d2             	test   rdx,rdx
ffff80000080c171:	75 58                	jne    ffff80000080c1cb <reg_blkdev+0xa8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:8
        blk_devs[i]=*dev;
ffff80000080c173:	48 ba 98 ff ff ff ff 	movabs rdx,0xffffffffffffff98
ffff80000080c17a:	ff ff ff 
ffff80000080c17d:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080c181:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff80000080c184:	48 63 d2             	movsxd rdx,edx
ffff80000080c187:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080c18b:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff80000080c18f:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080c193:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080c196:	48 8b 5a 08          	mov    rbx,QWORD PTR [rdx+0x8]
ffff80000080c19a:	48 89 0e             	mov    QWORD PTR [rsi],rcx
ffff80000080c19d:	48 89 5e 08          	mov    QWORD PTR [rsi+0x8],rbx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:9
        blk_devs[i].current_request=NULL;
ffff80000080c1a1:	48 ba 98 ff ff ff ff 	movabs rdx,0xffffffffffffff98
ffff80000080c1a8:	ff ff ff 
ffff80000080c1ab:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080c1af:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffff80000080c1b2:	48 98                	cdqe   
ffff80000080c1b4:	48 c1 e0 04          	shl    rax,0x4
ffff80000080c1b8:	48 01 d0             	add    rax,rdx
ffff80000080c1bb:	48 83 c0 08          	add    rax,0x8
ffff80000080c1bf:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:10
        return i;
ffff80000080c1c6:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffff80000080c1c9:	eb 14                	jmp    ffff80000080c1df <reg_blkdev+0xbc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:7
        if(blk_devs[i].do_request)continue;
ffff80000080c1cb:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:6
    for(int i=0;i<MAX_BLKDEVS;i++){
ffff80000080c1cc:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:6 (discriminator 1)
ffff80000080c1d0:	83 7d f4 0b          	cmp    DWORD PTR [rbp-0xc],0xb
ffff80000080c1d4:	0f 8e 76 ff ff ff    	jle    ffff80000080c150 <reg_blkdev+0x2d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:12
    }
    return -ENOMEM;
ffff80000080c1da:	b8 cf ff ff ff       	mov    eax,0xffffffcf
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:13
}
ffff80000080c1df:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
ffff80000080c1e3:	c9                   	leave  
ffff80000080c1e4:	c3                   	ret    

ffff80000080c1e5 <unreg_blkdev>:
unreg_blkdev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:14
int unreg_blkdev(unsigned short dev){
ffff80000080c1e5:	f3 0f 1e fa          	endbr64 
ffff80000080c1e9:	55                   	push   rbp
ffff80000080c1ea:	48 89 e5             	mov    rbp,rsp
ffff80000080c1ed:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080c1ed <unreg_blkdev+0x8>
ffff80000080c1f4:	49 bb 2b 06 11 00 00 	movabs r11,0x11062b
ffff80000080c1fb:	00 00 00 
ffff80000080c1fe:	4c 01 d8             	add    rax,r11
ffff80000080c201:	89 fa                	mov    edx,edi
ffff80000080c203:	66 89 55 fc          	mov    WORD PTR [rbp-0x4],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:15
    if(blk_devs[dev].current_request)
ffff80000080c207:	0f b7 55 fc          	movzx  edx,WORD PTR [rbp-0x4]
ffff80000080c20b:	48 b9 98 ff ff ff ff 	movabs rcx,0xffffffffffffff98
ffff80000080c212:	ff ff ff 
ffff80000080c215:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080c219:	48 63 d2             	movsxd rdx,edx
ffff80000080c21c:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080c220:	48 01 ca             	add    rdx,rcx
ffff80000080c223:	48 83 c2 08          	add    rdx,0x8
ffff80000080c227:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080c22a:	48 85 d2             	test   rdx,rdx
ffff80000080c22d:	74 07                	je     ffff80000080c236 <unreg_blkdev+0x51>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:16
        return -EBUSY;//设备还有没完成的请求
ffff80000080c22f:	b8 f6 ff ff ff       	mov    eax,0xfffffff6
ffff80000080c234:	eb 23                	jmp    ffff80000080c259 <unreg_blkdev+0x74>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:17
    blk_devs[dev].do_request=0;//清除
ffff80000080c236:	0f b7 55 fc          	movzx  edx,WORD PTR [rbp-0x4]
ffff80000080c23a:	48 b9 98 ff ff ff ff 	movabs rcx,0xffffffffffffff98
ffff80000080c241:	ff ff ff 
ffff80000080c244:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080c248:	48 63 c2             	movsxd rax,edx
ffff80000080c24b:	48 c1 e0 04          	shl    rax,0x4
ffff80000080c24f:	48 01 c8             	add    rax,rcx
ffff80000080c252:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:18
}
ffff80000080c259:	5d                   	pop    rbp
ffff80000080c25a:	c3                   	ret    

ffff80000080c25b <make_request>:
make_request():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:19
int make_request(unsigned short dev,int cmd,unsigned long sector, unsigned long count,char * buffer){
ffff80000080c25b:	f3 0f 1e fa          	endbr64 
ffff80000080c25f:	55                   	push   rbp
ffff80000080c260:	48 89 e5             	mov    rbp,rsp
ffff80000080c263:	48 83 ec 40          	sub    rsp,0x40
ffff80000080c267:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080c267 <make_request+0xc>
ffff80000080c26e:	49 bb b1 05 11 00 00 	movabs r11,0x1105b1
ffff80000080c275:	00 00 00 
ffff80000080c278:	4c 01 d8             	add    rax,r11
ffff80000080c27b:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080c27e:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
ffff80000080c282:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
ffff80000080c286:	4c 89 45 c0          	mov    QWORD PTR [rbp-0x40],r8
ffff80000080c28a:	89 fa                	mov    edx,edi
ffff80000080c28c:	66 89 55 dc          	mov    WORD PTR [rbp-0x24],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:20
    struct blk_dev* d=&blk_devs[BLKDEV_MAJOR(dev)];
ffff80000080c290:	0f b7 55 dc          	movzx  edx,WORD PTR [rbp-0x24]
ffff80000080c294:	c1 fa 04             	sar    edx,0x4
ffff80000080c297:	83 e2 0f             	and    edx,0xf
ffff80000080c29a:	48 63 d2             	movsxd rdx,edx
ffff80000080c29d:	48 89 d1             	mov    rcx,rdx
ffff80000080c2a0:	48 c1 e1 04          	shl    rcx,0x4
ffff80000080c2a4:	48 ba 98 ff ff ff ff 	movabs rdx,0xffffffffffffff98
ffff80000080c2ab:	ff ff ff 
ffff80000080c2ae:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080c2b2:	48 01 ca             	add    rdx,rcx
ffff80000080c2b5:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:21
    if(!d->do_request)
ffff80000080c2b9:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080c2bd:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080c2c0:	48 85 d2             	test   rdx,rdx
ffff80000080c2c3:	75 0a                	jne    ffff80000080c2cf <make_request+0x74>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:22
        return -ENODEV;//没有这个设备
ffff80000080c2c5:	b8 d4 ff ff ff       	mov    eax,0xffffffd4
ffff80000080c2ca:	e9 5f 01 00 00       	jmp    ffff80000080c42e <make_request+0x1d3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:24
    //找一个空的请求
    struct request* req=NULL;
ffff80000080c2cf:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080c2d6:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:25
    for(int i=0;i<MAX_REQUESTS;i++){
ffff80000080c2d7:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
ffff80000080c2de:	eb 49                	jmp    ffff80000080c329 <make_request+0xce>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:26
        if(requests[i].dev==(unsigned short)-1){
ffff80000080c2e0:	48 ba 08 fe ff ff ff 	movabs rdx,0xfffffffffffffe08
ffff80000080c2e7:	ff ff ff 
ffff80000080c2ea:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080c2ee:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff80000080c2f1:	48 63 d2             	movsxd rdx,edx
ffff80000080c2f4:	48 6b d2 3a          	imul   rdx,rdx,0x3a
ffff80000080c2f8:	48 01 ca             	add    rdx,rcx
ffff80000080c2fb:	0f b7 12             	movzx  edx,WORD PTR [rdx]
ffff80000080c2fe:	66 83 fa ff          	cmp    dx,0xffff
ffff80000080c302:	75 21                	jne    ffff80000080c325 <make_request+0xca>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:27
            req=requests+i;
ffff80000080c304:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff80000080c307:	48 63 d2             	movsxd rdx,edx
ffff80000080c30a:	48 6b ca 3a          	imul   rcx,rdx,0x3a
ffff80000080c30e:	48 ba 08 fe ff ff ff 	movabs rdx,0xfffffffffffffe08
ffff80000080c315:	ff ff ff 
ffff80000080c318:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080c31c:	48 01 ca             	add    rdx,rcx
ffff80000080c31f:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:28
            break;
ffff80000080c323:	eb 0a                	jmp    ffff80000080c32f <make_request+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:25 (discriminator 2)
    for(int i=0;i<MAX_REQUESTS;i++){
ffff80000080c325:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:25 (discriminator 1)
ffff80000080c329:	83 7d f4 3f          	cmp    DWORD PTR [rbp-0xc],0x3f
ffff80000080c32d:	7e b1                	jle    ffff80000080c2e0 <make_request+0x85>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:32
        }
    }
    //下面的处理不太好。感觉最好是等到有空位置为止。
    if(!req)
ffff80000080c32f:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffff80000080c334:	75 0a                	jne    ffff80000080c340 <make_request+0xe5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:33
        return -ENOMEM;//没有空的请求位置。
ffff80000080c336:	b8 cf ff ff ff       	mov    eax,0xffffffcf
ffff80000080c33b:	e9 ee 00 00 00       	jmp    ffff80000080c42e <make_request+0x1d3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:38
    /*
    检查有没有请求正在运行，有的话接到后面，没有的话直接接上去，前面请求完成之后顺着链表下一个，
    这样就能保证所有请求都可以被访问到。
    */
    req->dev=dev;
ffff80000080c340:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080c344:	0f b7 4d dc          	movzx  ecx,WORD PTR [rbp-0x24]
ffff80000080c348:	66 89 0a             	mov    WORD PTR [rdx],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:39
    req->cmd=cmd;
ffff80000080c34b:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080c34f:	8b 4d d8             	mov    ecx,DWORD PTR [rbp-0x28]
ffff80000080c352:	89 4a 02             	mov    DWORD PTR [rdx+0x2],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:40
    req->buffer=buffer;
ffff80000080c355:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080c359:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
ffff80000080c35d:	48 89 4a 22          	mov    QWORD PTR [rdx+0x22],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:41
    req->count=count;
ffff80000080c361:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080c365:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
ffff80000080c369:	48 89 4a 1a          	mov    QWORD PTR [rdx+0x1a],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:42
    req->next=NULL;
ffff80000080c36d:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080c371:	48 c7 42 32 00 00 00 	mov    QWORD PTR [rdx+0x32],0x0
ffff80000080c378:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:43
    req->nr_sectors=TO_BLKN(count);
ffff80000080c379:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080c37d:	48 89 d1             	mov    rcx,rdx
ffff80000080c380:	48 c1 e9 0c          	shr    rcx,0xc
ffff80000080c384:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080c388:	81 e2 ff 0f 00 00    	and    edx,0xfff
ffff80000080c38e:	48 01 ca             	add    rdx,rcx
ffff80000080c391:	48 85 d2             	test   rdx,rdx
ffff80000080c394:	0f 95 c2             	setne  dl
ffff80000080c397:	0f b6 ca             	movzx  ecx,dl
ffff80000080c39a:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080c39e:	48 89 4a 12          	mov    QWORD PTR [rdx+0x12],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:44
    req->sector=sector;
ffff80000080c3a2:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080c3a6:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffff80000080c3aa:	48 89 4a 0a          	mov    QWORD PTR [rdx+0xa],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:45
    req->waiting=current;
ffff80000080c3ae:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff80000080c3b5:	ff ff ff 
ffff80000080c3b8:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080c3bc:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080c3bf:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080c3c3:	48 89 50 2a          	mov    QWORD PTR [rax+0x2a],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:47
    //这里可能不需要阻塞进程，有的设备不需要阻塞。    
    if(!d->current_request)
ffff80000080c3c7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080c3cb:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080c3cf:	48 85 c0             	test   rax,rax
ffff80000080c3d2:	75 22                	jne    ffff80000080c3f6 <make_request+0x19b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:49
    {
        d->current_request=req;
ffff80000080c3d4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080c3d8:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080c3dc:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:50
        d->do_request(d->current_request);
ffff80000080c3e0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080c3e4:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080c3e7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080c3eb:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080c3ef:	48 89 c7             	mov    rdi,rax
ffff80000080c3f2:	ff d2                	call   rdx
ffff80000080c3f4:	eb 33                	jmp    ffff80000080c429 <make_request+0x1ce>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:52
    }else{
        struct request* rp=d->current_request;
ffff80000080c3f6:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080c3fa:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080c3fe:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:53
        for(;rp->next;rp=rp->next);
ffff80000080c402:	eb 0c                	jmp    ffff80000080c410 <make_request+0x1b5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:53 (discriminator 2)
ffff80000080c404:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c408:	48 8b 40 32          	mov    rax,QWORD PTR [rax+0x32]
ffff80000080c40c:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:53 (discriminator 1)
ffff80000080c410:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c414:	48 8b 40 32          	mov    rax,QWORD PTR [rax+0x32]
ffff80000080c418:	48 85 c0             	test   rax,rax
ffff80000080c41b:	75 e7                	jne    ffff80000080c404 <make_request+0x1a9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:54
        rp->next=req;
ffff80000080c41d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c421:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080c425:	48 89 50 32          	mov    QWORD PTR [rax+0x32],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:56
    }
    return 1;
ffff80000080c429:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:57
}
ffff80000080c42e:	c9                   	leave  
ffff80000080c42f:	c3                   	ret    

ffff80000080c430 <init_blkdev>:
init_blkdev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:58
void init_blkdev(void){
ffff80000080c430:	f3 0f 1e fa          	endbr64 
ffff80000080c434:	55                   	push   rbp
ffff80000080c435:	48 89 e5             	mov    rbp,rsp
ffff80000080c438:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080c438 <init_blkdev+0x8>
ffff80000080c43f:	49 bb e0 03 11 00 00 	movabs r11,0x1103e0
ffff80000080c446:	00 00 00 
ffff80000080c449:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:59
    for(int i=0;i<MAX_REQUESTS;i++){
ffff80000080c44c:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff80000080c453:	eb 24                	jmp    ffff80000080c479 <init_blkdev+0x49>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:60 (discriminator 3)
        requests[i].dev=-1;
ffff80000080c455:	48 ba 08 fe ff ff ff 	movabs rdx,0xfffffffffffffe08
ffff80000080c45c:	ff ff ff 
ffff80000080c45f:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080c463:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080c466:	48 63 d2             	movsxd rdx,edx
ffff80000080c469:	48 6b d2 3a          	imul   rdx,rdx,0x3a
ffff80000080c46d:	48 01 ca             	add    rdx,rcx
ffff80000080c470:	66 c7 02 ff ff       	mov    WORD PTR [rdx],0xffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:59 (discriminator 3)
    for(int i=0;i<MAX_REQUESTS;i++){
ffff80000080c475:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:59 (discriminator 1)
ffff80000080c479:	83 7d fc 3f          	cmp    DWORD PTR [rbp-0x4],0x3f
ffff80000080c47d:	7e d6                	jle    ffff80000080c455 <init_blkdev+0x25>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:62
    }
ffff80000080c47f:	90                   	nop
ffff80000080c480:	90                   	nop
ffff80000080c481:	5d                   	pop    rbp
ffff80000080c482:	c3                   	ret    

ffff80000080c483 <init_blkbuf>:
init_blkbuf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:9
#include <errno.h>
#include <memory.h>
buffer_head l_buffer_heads[MAX_BUFFERHEADS];
//这个存储的是各个块设备映射的缓冲区链表中的头
buffer_head* l_blk_bh_heads[MAX_BLKDEVS];
void init_blkbuf(){
ffff80000080c483:	f3 0f 1e fa          	endbr64 
ffff80000080c487:	55                   	push   rbp
ffff80000080c488:	48 89 e5             	mov    rbp,rsp
ffff80000080c48b:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080c48b <init_blkbuf+0x8>
ffff80000080c492:	49 bb 8d 03 11 00 00 	movabs r11,0x11038d
ffff80000080c499:	00 00 00 
ffff80000080c49c:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:10
    for(int i=0;i<MAX_BUFFERHEADS;i++){
ffff80000080c49f:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff80000080c4a6:	eb 44                	jmp    ffff80000080c4ec <init_blkbuf+0x69>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:11 (discriminator 3)
        l_buffer_heads[i].dev=-1;
ffff80000080c4a8:	48 ba f0 fd ff ff ff 	movabs rdx,0xfffffffffffffdf0
ffff80000080c4af:	ff ff ff 
ffff80000080c4b2:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080c4b6:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080c4b9:	48 63 d2             	movsxd rdx,edx
ffff80000080c4bc:	48 c1 e2 06          	shl    rdx,0x6
ffff80000080c4c0:	48 01 ca             	add    rdx,rcx
ffff80000080c4c3:	48 83 c2 10          	add    rdx,0x10
ffff80000080c4c7:	66 c7 02 ff ff       	mov    WORD PTR [rdx],0xffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:12 (discriminator 3)
        l_blk_bh_heads[i]=NULL;
ffff80000080c4cc:	48 ba e0 fe ff ff ff 	movabs rdx,0xfffffffffffffee0
ffff80000080c4d3:	ff ff ff 
ffff80000080c4d6:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080c4da:	8b 4d fc             	mov    ecx,DWORD PTR [rbp-0x4]
ffff80000080c4dd:	48 63 c9             	movsxd rcx,ecx
ffff80000080c4e0:	48 c7 04 ca 00 00 00 	mov    QWORD PTR [rdx+rcx*8],0x0
ffff80000080c4e7:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:10 (discriminator 3)
    for(int i=0;i<MAX_BUFFERHEADS;i++){
ffff80000080c4e8:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:10 (discriminator 1)
ffff80000080c4ec:	83 7d fc 7f          	cmp    DWORD PTR [rbp-0x4],0x7f
ffff80000080c4f0:	7e b6                	jle    ffff80000080c4a8 <init_blkbuf+0x25>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:14
    }
}
ffff80000080c4f2:	90                   	nop
ffff80000080c4f3:	90                   	nop
ffff80000080c4f4:	5d                   	pop    rbp
ffff80000080c4f5:	c3                   	ret    

ffff80000080c4f6 <bget>:
bget():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:15
buffer_head *bget(){
ffff80000080c4f6:	f3 0f 1e fa          	endbr64 
ffff80000080c4fa:	55                   	push   rbp
ffff80000080c4fb:	48 89 e5             	mov    rbp,rsp
ffff80000080c4fe:	41 57                	push   r15
ffff80000080c500:	53                   	push   rbx
ffff80000080c501:	48 83 ec 10          	sub    rsp,0x10
ffff80000080c505:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080c505 <bget+0xf>
ffff80000080c50c:	49 bb 13 03 11 00 00 	movabs r11,0x110313
ffff80000080c513:	00 00 00 
ffff80000080c516:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:16
    for(int i=0;i<MAX_BUFFERHEADS;i++){
ffff80000080c519:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff80000080c520:	e9 a2 00 00 00       	jmp    ffff80000080c5c7 <bget+0xd1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:17
        if(l_buffer_heads[i].dev==(unsigned short)-1)
ffff80000080c525:	48 b8 f0 fd ff ff ff 	movabs rax,0xfffffffffffffdf0
ffff80000080c52c:	ff ff ff 
ffff80000080c52f:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff80000080c533:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080c536:	48 98                	cdqe   
ffff80000080c538:	48 c1 e0 06          	shl    rax,0x6
ffff80000080c53c:	48 01 d0             	add    rax,rdx
ffff80000080c53f:	48 83 c0 10          	add    rax,0x10
ffff80000080c543:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff80000080c546:	66 83 f8 ff          	cmp    ax,0xffff
ffff80000080c54a:	75 77                	jne    ffff80000080c5c3 <bget+0xcd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:19
        {
            l_buffer_heads[i].data=kmalloc();
ffff80000080c54c:	49 89 df             	mov    r15,rbx
ffff80000080c54f:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080c554:	48 ba 68 57 ee ff ff 	movabs rdx,0xffffffffffee5768
ffff80000080c55b:	ff ff ff 
ffff80000080c55e:	48 01 da             	add    rdx,rbx
ffff80000080c561:	ff d2                	call   rdx
ffff80000080c563:	48 89 c2             	mov    rdx,rax
ffff80000080c566:	48 b8 f0 fd ff ff ff 	movabs rax,0xfffffffffffffdf0
ffff80000080c56d:	ff ff ff 
ffff80000080c570:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff80000080c574:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080c577:	48 98                	cdqe   
ffff80000080c579:	48 c1 e0 06          	shl    rax,0x6
ffff80000080c57d:	48 01 c8             	add    rax,rcx
ffff80000080c580:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:20
            l_buffer_heads[i].count=0;
ffff80000080c583:	48 b8 f0 fd ff ff ff 	movabs rax,0xfffffffffffffdf0
ffff80000080c58a:	ff ff ff 
ffff80000080c58d:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff80000080c591:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080c594:	48 98                	cdqe   
ffff80000080c596:	48 c1 e0 06          	shl    rax,0x6
ffff80000080c59a:	48 01 d0             	add    rax,rdx
ffff80000080c59d:	48 83 c0 14          	add    rax,0x14
ffff80000080c5a1:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:21
            return l_buffer_heads+i;
ffff80000080c5a4:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080c5a7:	48 98                	cdqe   
ffff80000080c5a9:	48 c1 e0 06          	shl    rax,0x6
ffff80000080c5ad:	48 89 c2             	mov    rdx,rax
ffff80000080c5b0:	48 b8 f0 fd ff ff ff 	movabs rax,0xfffffffffffffdf0
ffff80000080c5b7:	ff ff ff 
ffff80000080c5ba:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080c5be:	48 01 d0             	add    rax,rdx
ffff80000080c5c1:	eb 13                	jmp    ffff80000080c5d6 <bget+0xe0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:16 (discriminator 2)
    for(int i=0;i<MAX_BUFFERHEADS;i++){
ffff80000080c5c3:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:16 (discriminator 1)
ffff80000080c5c7:	83 7d ec 7f          	cmp    DWORD PTR [rbp-0x14],0x7f
ffff80000080c5cb:	0f 8e 54 ff ff ff    	jle    ffff80000080c525 <bget+0x2f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:25
        }
    }
    //errno = -ENOBUF
    return NULL;
ffff80000080c5d1:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:26
}
ffff80000080c5d6:	48 83 c4 10          	add    rsp,0x10
ffff80000080c5da:	5b                   	pop    rbx
ffff80000080c5db:	41 5f                	pop    r15
ffff80000080c5dd:	5d                   	pop    rbp
ffff80000080c5de:	c3                   	ret    

ffff80000080c5df <get_block>:
get_block():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:28

buffer_head *get_block(unsigned short dev,int blocknr){
ffff80000080c5df:	f3 0f 1e fa          	endbr64 
ffff80000080c5e3:	55                   	push   rbp
ffff80000080c5e4:	48 89 e5             	mov    rbp,rsp
ffff80000080c5e7:	41 57                	push   r15
ffff80000080c5e9:	53                   	push   rbx
ffff80000080c5ea:	48 83 ec 20          	sub    rsp,0x20
ffff80000080c5ee:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080c5ee <get_block+0xf>
ffff80000080c5f5:	49 bb 2a 02 11 00 00 	movabs r11,0x11022a
ffff80000080c5fc:	00 00 00 
ffff80000080c5ff:	4c 01 db             	add    rbx,r11
ffff80000080c602:	89 f8                	mov    eax,edi
ffff80000080c604:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080c607:	66 89 45 dc          	mov    WORD PTR [rbp-0x24],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:29
    buffer_head *bh=l_blk_bh_heads[BLKDEV_MAJOR(dev)];
ffff80000080c60b:	0f b7 45 dc          	movzx  eax,WORD PTR [rbp-0x24]
ffff80000080c60f:	c1 f8 04             	sar    eax,0x4
ffff80000080c612:	83 e0 0f             	and    eax,0xf
ffff80000080c615:	89 c2                	mov    edx,eax
ffff80000080c617:	48 b8 e0 fe ff ff ff 	movabs rax,0xfffffffffffffee0
ffff80000080c61e:	ff ff ff 
ffff80000080c621:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080c625:	48 63 d2             	movsxd rdx,edx
ffff80000080c628:	48 8b 04 d0          	mov    rax,QWORD PTR [rax+rdx*8]
ffff80000080c62c:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:30
    if(!bh){
ffff80000080c630:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080c635:	75 7c                	jne    ffff80000080c6b3 <get_block+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:32
        //这个设备没有任何的缓冲区
        bh=bget();
ffff80000080c637:	49 89 df             	mov    r15,rbx
ffff80000080c63a:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080c63f:	48 ba de fc ee ff ff 	movabs rdx,0xffffffffffeefcde
ffff80000080c646:	ff ff ff 
ffff80000080c649:	48 01 da             	add    rdx,rbx
ffff80000080c64c:	ff d2                	call   rdx
ffff80000080c64e:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:33
        if(!bh){
ffff80000080c652:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080c657:	75 0a                	jne    ffff80000080c663 <get_block+0x84>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:35
            //errno=-ENOBUFS
            return NULL;
ffff80000080c659:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080c65e:	e9 f0 00 00 00       	jmp    ffff80000080c753 <get_block+0x174>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:37
        }
        bh->dev=dev;
ffff80000080c663:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c667:	0f b7 55 dc          	movzx  edx,WORD PTR [rbp-0x24]
ffff80000080c66b:	66 89 50 10          	mov    WORD PTR [rax+0x10],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:38
        bh->blocknr=blocknr;
ffff80000080c66f:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080c672:	48 63 d0             	movsxd rdx,eax
ffff80000080c675:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c679:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:39
        l_blk_bh_heads[BLKDEV_MAJOR(dev)]=bh;
ffff80000080c67d:	0f b7 45 dc          	movzx  eax,WORD PTR [rbp-0x24]
ffff80000080c681:	c1 f8 04             	sar    eax,0x4
ffff80000080c684:	83 e0 0f             	and    eax,0xf
ffff80000080c687:	89 c2                	mov    edx,eax
ffff80000080c689:	48 b8 e0 fe ff ff ff 	movabs rax,0xfffffffffffffee0
ffff80000080c690:	ff ff ff 
ffff80000080c693:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080c697:	48 63 d2             	movsxd rdx,edx
ffff80000080c69a:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff80000080c69e:	48 89 0c d0          	mov    QWORD PTR [rax+rdx*8],rcx
ffff80000080c6a2:	e9 96 00 00 00       	jmp    ffff80000080c73d <get_block+0x15e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:41 (discriminator 3)
    }else{
        for(;bh->next&&bh->blocknr!=blocknr;bh=bh->next);
ffff80000080c6a7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c6ab:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080c6af:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:41 (discriminator 1)
ffff80000080c6b3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c6b7:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080c6bb:	48 85 c0             	test   rax,rax
ffff80000080c6be:	74 12                	je     ffff80000080c6d2 <get_block+0xf3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:41 (discriminator 2)
ffff80000080c6c0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c6c4:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff80000080c6c8:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080c6cb:	48 98                	cdqe   
ffff80000080c6cd:	48 39 c2             	cmp    rdx,rax
ffff80000080c6d0:	75 d5                	jne    ffff80000080c6a7 <get_block+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:42
        if(bh->blocknr!=blocknr)
ffff80000080c6d2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c6d6:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff80000080c6da:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080c6dd:	48 98                	cdqe   
ffff80000080c6df:	48 39 c2             	cmp    rdx,rax
ffff80000080c6e2:	74 59                	je     ffff80000080c73d <get_block+0x15e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:46
        {
            //这块数据没有缓冲
            //这个时候肯定处于链表最后一个了
            bh->next=bget();
ffff80000080c6e4:	49 89 df             	mov    r15,rbx
ffff80000080c6e7:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080c6ec:	48 ba de fc ee ff ff 	movabs rdx,0xffffffffffeefcde
ffff80000080c6f3:	ff ff ff 
ffff80000080c6f6:	48 01 da             	add    rdx,rbx
ffff80000080c6f9:	ff d2                	call   rdx
ffff80000080c6fb:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080c6ff:	48 89 42 28          	mov    QWORD PTR [rdx+0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:47
            buffer_head *bhn=bh->next;
ffff80000080c703:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c707:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080c70b:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:48
            bhn->prev=bh;
ffff80000080c70f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080c713:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080c717:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:49
            bh=bhn;
ffff80000080c71b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080c71f:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:50
            bh->dev=dev;
ffff80000080c723:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c727:	0f b7 55 dc          	movzx  edx,WORD PTR [rbp-0x24]
ffff80000080c72b:	66 89 50 10          	mov    WORD PTR [rax+0x10],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:51
            bh->blocknr=blocknr;
ffff80000080c72f:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080c732:	48 63 d0             	movsxd rdx,eax
ffff80000080c735:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c739:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:55
        }
    }
    //TODO 等待缓冲解锁
    bh->count++;
ffff80000080c73d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c741:	0f b6 40 14          	movzx  eax,BYTE PTR [rax+0x14]
ffff80000080c745:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080c748:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c74c:	88 50 14             	mov    BYTE PTR [rax+0x14],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:56
    return bh;
ffff80000080c74f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:57
}
ffff80000080c753:	48 83 c4 20          	add    rsp,0x20
ffff80000080c757:	5b                   	pop    rbx
ffff80000080c758:	41 5f                	pop    r15
ffff80000080c75a:	5d                   	pop    rbp
ffff80000080c75b:	c3                   	ret    

ffff80000080c75c <bread>:
bread():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:59
//从指定的块设备中读取一块数据，然后返回这块数据。
buffer_head* bread(unsigned short dev,int blkn){
ffff80000080c75c:	f3 0f 1e fa          	endbr64 
ffff80000080c760:	55                   	push   rbp
ffff80000080c761:	48 89 e5             	mov    rbp,rsp
ffff80000080c764:	41 57                	push   r15
ffff80000080c766:	53                   	push   rbx
ffff80000080c767:	48 83 ec 20          	sub    rsp,0x20
ffff80000080c76b:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080c76b <bread+0xf>
ffff80000080c772:	49 bb ad 00 11 00 00 	movabs r11,0x1100ad
ffff80000080c779:	00 00 00 
ffff80000080c77c:	4c 01 db             	add    rbx,r11
ffff80000080c77f:	89 f8                	mov    eax,edi
ffff80000080c781:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080c784:	66 89 45 dc          	mov    WORD PTR [rbp-0x24],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:60
    if(!blk_devs[BLKDEV_MAJOR(dev)].do_request)
ffff80000080c788:	0f b7 45 dc          	movzx  eax,WORD PTR [rbp-0x24]
ffff80000080c78c:	c1 f8 04             	sar    eax,0x4
ffff80000080c78f:	83 e0 0f             	and    eax,0xf
ffff80000080c792:	89 c2                	mov    edx,eax
ffff80000080c794:	48 b8 98 ff ff ff ff 	movabs rax,0xffffffffffffff98
ffff80000080c79b:	ff ff ff 
ffff80000080c79e:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff80000080c7a2:	48 63 c2             	movsxd rax,edx
ffff80000080c7a5:	48 c1 e0 04          	shl    rax,0x4
ffff80000080c7a9:	48 01 c8             	add    rax,rcx
ffff80000080c7ac:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c7af:	48 85 c0             	test   rax,rax
ffff80000080c7b2:	75 07                	jne    ffff80000080c7bb <bread+0x5f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:61
        return NULL;
ffff80000080c7b4:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080c7b9:	eb 7a                	jmp    ffff80000080c835 <bread+0xd9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:62
    buffer_head *bh=get_block(dev,blkn);
ffff80000080c7bb:	0f b7 45 dc          	movzx  eax,WORD PTR [rbp-0x24]
ffff80000080c7bf:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
ffff80000080c7c2:	89 d6                	mov    esi,edx
ffff80000080c7c4:	89 c7                	mov    edi,eax
ffff80000080c7c6:	49 89 df             	mov    r15,rbx
ffff80000080c7c9:	48 b8 c7 fd ee ff ff 	movabs rax,0xffffffffffeefdc7
ffff80000080c7d0:	ff ff ff 
ffff80000080c7d3:	48 01 d8             	add    rax,rbx
ffff80000080c7d6:	ff d0                	call   rax
ffff80000080c7d8:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:63
    if(!bh)
ffff80000080c7dc:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080c7e1:	75 07                	jne    ffff80000080c7ea <bread+0x8e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:64
        return NULL;
ffff80000080c7e3:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080c7e8:	eb 4b                	jmp    ffff80000080c835 <bread+0xd9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:65
    if(bh->uptodate)
ffff80000080c7ea:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c7ee:	0f b6 40 12          	movzx  eax,BYTE PTR [rax+0x12]
ffff80000080c7f2:	84 c0                	test   al,al
ffff80000080c7f4:	74 06                	je     ffff80000080c7fc <bread+0xa0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:66
        return bh;//数据没变，可以直接返回
ffff80000080c7f6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c7fa:	eb 39                	jmp    ffff80000080c835 <bread+0xd9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:69
    //这里的疑点是，可以直接返回吗？
    //应该要等数据准备完毕之后再返回的
    make_request(dev,BLKDEV_REQ_READ,blkn*BLOCK_SIZE/SECTOR_SIZE,BLOCK_SIZE/SECTOR_SIZE,bh->data);
ffff80000080c7fc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c800:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080c803:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080c806:	c1 e0 03             	shl    eax,0x3
ffff80000080c809:	48 63 d0             	movsxd rdx,eax
ffff80000080c80c:	0f b7 45 dc          	movzx  eax,WORD PTR [rbp-0x24]
ffff80000080c810:	49 89 c8             	mov    r8,rcx
ffff80000080c813:	b9 08 00 00 00       	mov    ecx,0x8
ffff80000080c818:	be 00 00 00 00       	mov    esi,0x0
ffff80000080c81d:	89 c7                	mov    edi,eax
ffff80000080c81f:	49 89 df             	mov    r15,rbx
ffff80000080c822:	48 b8 43 fa ee ff ff 	movabs rax,0xffffffffffeefa43
ffff80000080c829:	ff ff ff 
ffff80000080c82c:	48 01 d8             	add    rax,rbx
ffff80000080c82f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:71
    //TODO 等待读取完成
    return bh;
ffff80000080c831:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:72
}
ffff80000080c835:	48 83 c4 20          	add    rsp,0x20
ffff80000080c839:	5b                   	pop    rbx
ffff80000080c83a:	41 5f                	pop    r15
ffff80000080c83c:	5d                   	pop    rbp
ffff80000080c83d:	c3                   	ret    

ffff80000080c83e <bwrite>:
bwrite():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:77
/*
向缓冲区写入数据。注意缓冲区的大小固定BLOCK_SIZE。
这会使得dirty置位。
*/
int bwrite(buffer_head* bh,char* src,int pos,int count){
ffff80000080c83e:	f3 0f 1e fa          	endbr64 
ffff80000080c842:	55                   	push   rbp
ffff80000080c843:	48 89 e5             	mov    rbp,rsp
ffff80000080c846:	41 57                	push   r15
ffff80000080c848:	48 83 ec 28          	sub    rsp,0x28
ffff80000080c84c:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080c84c <bwrite+0xe>
ffff80000080c853:	49 bb cc ff 10 00 00 	movabs r11,0x10ffcc
ffff80000080c85a:	00 00 00 
ffff80000080c85d:	4c 01 d8             	add    rax,r11
ffff80000080c860:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff80000080c864:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080c868:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff80000080c86b:	89 4d d8             	mov    DWORD PTR [rbp-0x28],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:78
    if(!bh)
ffff80000080c86e:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080c873:	75 07                	jne    ffff80000080c87c <bwrite+0x3e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:79
        return -ENOBUFS;
ffff80000080c875:	b8 d6 ff ff ff       	mov    eax,0xffffffd6
ffff80000080c87a:	eb 5d                	jmp    ffff80000080c8d9 <bwrite+0x9b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:80
    if (count+pos>BLOCK_SIZE)
ffff80000080c87c:	8b 4d d8             	mov    ecx,DWORD PTR [rbp-0x28]
ffff80000080c87f:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080c882:	01 ca                	add    edx,ecx
ffff80000080c884:	81 fa 00 10 00 00    	cmp    edx,0x1000
ffff80000080c88a:	7e 0b                	jle    ffff80000080c897 <bwrite+0x59>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:81
        count=BLOCK_SIZE-pos;//truncate
ffff80000080c88c:	ba 00 10 00 00       	mov    edx,0x1000
ffff80000080c891:	2b 55 dc             	sub    edx,DWORD PTR [rbp-0x24]
ffff80000080c894:	89 55 d8             	mov    DWORD PTR [rbp-0x28],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:82
    memcpy(bh->data+pos,src,count);
ffff80000080c897:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
ffff80000080c89a:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff80000080c89e:	48 8b 31             	mov    rsi,QWORD PTR [rcx]
ffff80000080c8a1:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
ffff80000080c8a4:	48 63 c9             	movsxd rcx,ecx
ffff80000080c8a7:	48 8d 3c 0e          	lea    rdi,[rsi+rcx*1]
ffff80000080c8ab:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
ffff80000080c8af:	48 89 ce             	mov    rsi,rcx
ffff80000080c8b2:	49 89 c7             	mov    r15,rax
ffff80000080c8b5:	48 b9 bc 52 ef ff ff 	movabs rcx,0xffffffffffef52bc
ffff80000080c8bc:	ff ff ff 
ffff80000080c8bf:	48 01 c1             	add    rcx,rax
ffff80000080c8c2:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:83
    bh->dirt=1;
ffff80000080c8c4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c8c8:	c6 40 13 01          	mov    BYTE PTR [rax+0x13],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:84
    bh->uptodate=0;
ffff80000080c8cc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c8d0:	c6 40 12 00          	mov    BYTE PTR [rax+0x12],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:85
    return 1;
ffff80000080c8d4:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:86
}
ffff80000080c8d9:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080c8dd:	c9                   	leave  
ffff80000080c8de:	c3                   	ret    

ffff80000080c8df <bflush>:
bflush():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:90
/*
立即把缓冲区里面的更新应用到块设备上。
*/
int bflush(buffer_head* bh){
ffff80000080c8df:	f3 0f 1e fa          	endbr64 
ffff80000080c8e3:	55                   	push   rbp
ffff80000080c8e4:	48 89 e5             	mov    rbp,rsp
ffff80000080c8e7:	41 57                	push   r15
ffff80000080c8e9:	48 83 ec 18          	sub    rsp,0x18
ffff80000080c8ed:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080c8ed <bflush+0xe>
ffff80000080c8f4:	49 bb 2b ff 10 00 00 	movabs r11,0x10ff2b
ffff80000080c8fb:	00 00 00 
ffff80000080c8fe:	4c 01 d8             	add    rax,r11
ffff80000080c901:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:91
    if(!blk_devs[bh->dev].do_request)
ffff80000080c905:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080c909:	0f b7 52 10          	movzx  edx,WORD PTR [rdx+0x10]
ffff80000080c90d:	0f b7 d2             	movzx  edx,dx
ffff80000080c910:	48 b9 98 ff ff ff ff 	movabs rcx,0xffffffffffffff98
ffff80000080c917:	ff ff ff 
ffff80000080c91a:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080c91e:	48 63 d2             	movsxd rdx,edx
ffff80000080c921:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080c925:	48 01 ca             	add    rdx,rcx
ffff80000080c928:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080c92b:	48 85 d2             	test   rdx,rdx
ffff80000080c92e:	75 07                	jne    ffff80000080c937 <bflush+0x58>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:92
        return -ENODEV;
ffff80000080c930:	b8 d4 ff ff ff       	mov    eax,0xffffffd4
ffff80000080c935:	eb 5a                	jmp    ffff80000080c991 <bflush+0xb2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:93
    if(!bh->dirt)
ffff80000080c937:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080c93b:	0f b6 52 13          	movzx  edx,BYTE PTR [rdx+0x13]
ffff80000080c93f:	84 d2                	test   dl,dl
ffff80000080c941:	75 07                	jne    ffff80000080c94a <bflush+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:94
        return 1;
ffff80000080c943:	b8 01 00 00 00       	mov    eax,0x1
ffff80000080c948:	eb 47                	jmp    ffff80000080c991 <bflush+0xb2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:95
    make_request(bh->dev,BLKDEV_REQ_WRITE,bh->blocknr*BLOCK_SIZE/SECTOR_SIZE,BLOCK_SIZE/SECTOR_SIZE,bh->data);
ffff80000080c94a:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080c94e:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff80000080c951:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080c955:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff80000080c959:	48 c1 e2 0c          	shl    rdx,0xc
ffff80000080c95d:	48 c1 ea 09          	shr    rdx,0x9
ffff80000080c961:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff80000080c965:	0f b7 49 10          	movzx  ecx,WORD PTR [rcx+0x10]
ffff80000080c969:	0f b7 f9             	movzx  edi,cx
ffff80000080c96c:	49 89 f0             	mov    r8,rsi
ffff80000080c96f:	b9 08 00 00 00       	mov    ecx,0x8
ffff80000080c974:	be 01 00 00 00       	mov    esi,0x1
ffff80000080c979:	49 89 c7             	mov    r15,rax
ffff80000080c97c:	49 b9 43 fa ee ff ff 	movabs r9,0xffffffffffeefa43
ffff80000080c983:	ff ff ff 
ffff80000080c986:	49 01 c1             	add    r9,rax
ffff80000080c989:	41 ff d1             	call   r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:97
    //这个不用等
    return 1;
ffff80000080c98c:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:98
}
ffff80000080c991:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080c995:	c9                   	leave  
ffff80000080c996:	c3                   	ret    

ffff80000080c997 <bdiscard>:
bdiscard():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:100
//丢弃更改。
int bdiscard(buffer_head *bh){
ffff80000080c997:	f3 0f 1e fa          	endbr64 
ffff80000080c99b:	55                   	push   rbp
ffff80000080c99c:	48 89 e5             	mov    rbp,rsp
ffff80000080c99f:	41 57                	push   r15
ffff80000080c9a1:	48 83 ec 18          	sub    rsp,0x18
ffff80000080c9a5:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080c9a5 <bdiscard+0xe>
ffff80000080c9ac:	49 bb 73 fe 10 00 00 	movabs r11,0x10fe73
ffff80000080c9b3:	00 00 00 
ffff80000080c9b6:	4c 01 d8             	add    rax,r11
ffff80000080c9b9:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:101
    if(bh->dev==-1||!blk_devs[bh->dev].do_request)
ffff80000080c9bd:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080c9c1:	0f b7 52 10          	movzx  edx,WORD PTR [rdx+0x10]
ffff80000080c9c5:	0f b7 d2             	movzx  edx,dx
ffff80000080c9c8:	48 b9 98 ff ff ff ff 	movabs rcx,0xffffffffffffff98
ffff80000080c9cf:	ff ff ff 
ffff80000080c9d2:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080c9d6:	48 63 d2             	movsxd rdx,edx
ffff80000080c9d9:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080c9dd:	48 01 ca             	add    rdx,rcx
ffff80000080c9e0:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080c9e3:	48 85 d2             	test   rdx,rdx
ffff80000080c9e6:	75 07                	jne    ffff80000080c9ef <bdiscard+0x58>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:102
        return -ENODEV;
ffff80000080c9e8:	b8 d4 ff ff ff       	mov    eax,0xffffffd4
ffff80000080c9ed:	eb 5a                	jmp    ffff80000080ca49 <bdiscard+0xb2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:104
    
    if(bh->uptodate)
ffff80000080c9ef:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080c9f3:	0f b6 52 12          	movzx  edx,BYTE PTR [rdx+0x12]
ffff80000080c9f7:	84 d2                	test   dl,dl
ffff80000080c9f9:	74 07                	je     ffff80000080ca02 <bdiscard+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:105
        return 1;//数据没变，可以直接返回
ffff80000080c9fb:	b8 01 00 00 00       	mov    eax,0x1
ffff80000080ca00:	eb 47                	jmp    ffff80000080ca49 <bdiscard+0xb2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:108
    //这里的疑点是，可以直接返回吗？
    //应该要等数据准备完毕之后再返回的
    make_request(bh->dev,BLKDEV_REQ_READ,bh->blocknr*BLOCK_SIZE/SECTOR_SIZE,BLOCK_SIZE/SECTOR_SIZE,bh->data);
ffff80000080ca02:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080ca06:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff80000080ca09:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080ca0d:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff80000080ca11:	48 c1 e2 0c          	shl    rdx,0xc
ffff80000080ca15:	48 c1 ea 09          	shr    rdx,0x9
ffff80000080ca19:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff80000080ca1d:	0f b7 49 10          	movzx  ecx,WORD PTR [rcx+0x10]
ffff80000080ca21:	0f b7 f9             	movzx  edi,cx
ffff80000080ca24:	49 89 f0             	mov    r8,rsi
ffff80000080ca27:	b9 08 00 00 00       	mov    ecx,0x8
ffff80000080ca2c:	be 00 00 00 00       	mov    esi,0x0
ffff80000080ca31:	49 89 c7             	mov    r15,rax
ffff80000080ca34:	49 b9 43 fa ee ff ff 	movabs r9,0xffffffffffeefa43
ffff80000080ca3b:	ff ff ff 
ffff80000080ca3e:	49 01 c1             	add    r9,rax
ffff80000080ca41:	41 ff d1             	call   r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:110
    //TODO 等待读取完成
    return 1;
ffff80000080ca44:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:111
}
ffff80000080ca49:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080ca4d:	c9                   	leave  
ffff80000080ca4e:	c3                   	ret    

ffff80000080ca4f <bupdate>:
bupdate():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:113

int bupdate(buffer_head *bh){
ffff80000080ca4f:	f3 0f 1e fa          	endbr64 
ffff80000080ca53:	55                   	push   rbp
ffff80000080ca54:	48 89 e5             	mov    rbp,rsp
ffff80000080ca57:	41 57                	push   r15
ffff80000080ca59:	48 83 ec 18          	sub    rsp,0x18
ffff80000080ca5d:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080ca5d <bupdate+0xe>
ffff80000080ca64:	49 bb bb fd 10 00 00 	movabs r11,0x10fdbb
ffff80000080ca6b:	00 00 00 
ffff80000080ca6e:	4c 01 d8             	add    rax,r11
ffff80000080ca71:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:114
    return bdiscard(bh);
ffff80000080ca75:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080ca79:	48 89 d7             	mov    rdi,rdx
ffff80000080ca7c:	49 89 c7             	mov    r15,rax
ffff80000080ca7f:	48 ba 7f 01 ef ff ff 	movabs rdx,0xffffffffffef017f
ffff80000080ca86:	ff ff ff 
ffff80000080ca89:	48 01 c2             	add    rdx,rax
ffff80000080ca8c:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:115
}
ffff80000080ca8e:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080ca92:	c9                   	leave  
ffff80000080ca93:	c3                   	ret    

ffff80000080ca94 <blkdev_read>:
blkdev_read():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:119
/*
bread的更高级封装，可以不以块为单位读取到buf。
*/
int blkdev_read(unsigned short dev,off_t offset, size_t count, char *buf){
ffff80000080ca94:	f3 0f 1e fa          	endbr64 
ffff80000080ca98:	55                   	push   rbp
ffff80000080ca99:	48 89 e5             	mov    rbp,rsp
ffff80000080ca9c:	41 57                	push   r15
ffff80000080ca9e:	53                   	push   rbx
ffff80000080ca9f:	48 83 ec 50          	sub    rsp,0x50
ffff80000080caa3:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080caa3 <blkdev_read+0xf>
ffff80000080caaa:	49 bb 75 fd 10 00 00 	movabs r11,0x10fd75
ffff80000080cab1:	00 00 00 
ffff80000080cab4:	4c 01 db             	add    rbx,r11
ffff80000080cab7:	89 f8                	mov    eax,edi
ffff80000080cab9:	89 75 b8             	mov    DWORD PTR [rbp-0x48],esi
ffff80000080cabc:	48 89 55 b0          	mov    QWORD PTR [rbp-0x50],rdx
ffff80000080cac0:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
ffff80000080cac4:	66 89 45 bc          	mov    WORD PTR [rbp-0x44],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:120
    int n=TO_BLKN(count);
ffff80000080cac8:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080cacc:	48 c1 e8 0c          	shr    rax,0xc
ffff80000080cad0:	48 89 c2             	mov    rdx,rax
ffff80000080cad3:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080cad7:	25 ff 0f 00 00       	and    eax,0xfff
ffff80000080cadc:	48 01 d0             	add    rax,rdx
ffff80000080cadf:	48 85 c0             	test   rax,rax
ffff80000080cae2:	0f 95 c0             	setne  al
ffff80000080cae5:	0f b6 c0             	movzx  eax,al
ffff80000080cae8:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:121
    off_t blkn=BLOCK_FLOOR(offset);
ffff80000080caeb:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
ffff80000080caee:	99                   	cdq    
ffff80000080caef:	c1 ea 14             	shr    edx,0x14
ffff80000080caf2:	01 d0                	add    eax,edx
ffff80000080caf4:	25 ff 0f 00 00       	and    eax,0xfff
ffff80000080caf9:	29 d0                	sub    eax,edx
ffff80000080cafb:	89 c2                	mov    edx,eax
ffff80000080cafd:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
ffff80000080cb00:	29 d0                	sub    eax,edx
ffff80000080cb02:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:122
    off_t first_off=offset%BLOCK_SIZE;
ffff80000080cb05:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
ffff80000080cb08:	99                   	cdq    
ffff80000080cb09:	c1 ea 14             	shr    edx,0x14
ffff80000080cb0c:	01 d0                	add    eax,edx
ffff80000080cb0e:	25 ff 0f 00 00       	and    eax,0xfff
ffff80000080cb13:	29 d0                	sub    eax,edx
ffff80000080cb15:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:123
    char* p=buf;
ffff80000080cb18:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080cb1c:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:124
    size_t mod_count=count%BLOCK_SIZE;
ffff80000080cb20:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080cb24:	25 ff 0f 00 00       	and    eax,0xfff
ffff80000080cb29:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:125
    int len=BLOCK_SIZE-first_off;
ffff80000080cb2d:	b8 00 10 00 00       	mov    eax,0x1000
ffff80000080cb32:	2b 45 e8             	sub    eax,DWORD PTR [rbp-0x18]
ffff80000080cb35:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:126
    for(int i=0;i<n;i++){
ffff80000080cb38:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [rbp-0x28],0x0
ffff80000080cb3f:	e9 b1 00 00 00       	jmp    ffff80000080cbf5 <blkdev_read+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:127
        buffer_head *bh=bread(dev,blkn);
ffff80000080cb44:	0f b7 45 bc          	movzx  eax,WORD PTR [rbp-0x44]
ffff80000080cb48:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080cb4b:	89 d6                	mov    esi,edx
ffff80000080cb4d:	89 c7                	mov    edi,eax
ffff80000080cb4f:	49 89 df             	mov    r15,rbx
ffff80000080cb52:	48 b8 44 ff ee ff ff 	movabs rax,0xffffffffffeeff44
ffff80000080cb59:	ff ff ff 
ffff80000080cb5c:	48 01 d8             	add    rax,rbx
ffff80000080cb5f:	ff d0                	call   rax
ffff80000080cb61:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:128
        if(!bh)
ffff80000080cb65:	48 83 7d c0 00       	cmp    QWORD PTR [rbp-0x40],0x0
ffff80000080cb6a:	75 0a                	jne    ffff80000080cb76 <blkdev_read+0xe2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:129
            return -ENOBUFS;//buffer不够了
ffff80000080cb6c:	b8 d6 ff ff ff       	mov    eax,0xffffffd6
ffff80000080cb71:	e9 90 00 00 00       	jmp    ffff80000080cc06 <blkdev_read+0x172>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:130
        if(i==n-1)
ffff80000080cb76:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080cb79:	83 e8 01             	sub    eax,0x1
ffff80000080cb7c:	39 45 d8             	cmp    DWORD PTR [rbp-0x28],eax
ffff80000080cb7f:	75 09                	jne    ffff80000080cb8a <blkdev_read+0xf6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:131
            len=mod_count;
ffff80000080cb81:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080cb85:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
ffff80000080cb88:	eb 0d                	jmp    ffff80000080cb97 <blkdev_read+0x103>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:132
        else if(i==2)
ffff80000080cb8a:	83 7d d8 02          	cmp    DWORD PTR [rbp-0x28],0x2
ffff80000080cb8e:	75 07                	jne    ffff80000080cb97 <blkdev_read+0x103>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:133
            len=BLOCK_SIZE;
ffff80000080cb90:	c7 45 dc 00 10 00 00 	mov    DWORD PTR [rbp-0x24],0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:134 (discriminator 2)
        memcpy(p,bh->data+first_off,len);
ffff80000080cb97:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080cb9a:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080cb9e:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080cba1:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080cba4:	48 98                	cdqe   
ffff80000080cba6:	48 01 c1             	add    rcx,rax
ffff80000080cba9:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080cbad:	48 89 ce             	mov    rsi,rcx
ffff80000080cbb0:	48 89 c7             	mov    rdi,rax
ffff80000080cbb3:	49 89 df             	mov    r15,rbx
ffff80000080cbb6:	48 b8 bc 52 ef ff ff 	movabs rax,0xffffffffffef52bc
ffff80000080cbbd:	ff ff ff 
ffff80000080cbc0:	48 01 d8             	add    rax,rbx
ffff80000080cbc3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:135 (discriminator 2)
        brelse(bh);
ffff80000080cbc5:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080cbc9:	48 89 c7             	mov    rdi,rax
ffff80000080cbcc:	49 89 df             	mov    r15,rbx
ffff80000080cbcf:	48 b8 72 05 ef ff ff 	movabs rax,0xffffffffffef0572
ffff80000080cbd6:	ff ff ff 
ffff80000080cbd9:	48 01 d8             	add    rax,rbx
ffff80000080cbdc:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:136 (discriminator 2)
        blkn++;
ffff80000080cbde:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:137 (discriminator 2)
        p+=BLOCK_SIZE;
ffff80000080cbe2:	48 81 45 e0 00 10 00 	add    QWORD PTR [rbp-0x20],0x1000
ffff80000080cbe9:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:138 (discriminator 2)
        first_off=0;
ffff80000080cbea:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:126 (discriminator 2)
    for(int i=0;i<n;i++){
ffff80000080cbf1:	83 45 d8 01          	add    DWORD PTR [rbp-0x28],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:126 (discriminator 1)
ffff80000080cbf5:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080cbf8:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
ffff80000080cbfb:	0f 8c 43 ff ff ff    	jl     ffff80000080cb44 <blkdev_read+0xb0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:140
    }
    return 1;
ffff80000080cc01:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:141
}
ffff80000080cc06:	48 83 c4 50          	add    rsp,0x50
ffff80000080cc0a:	5b                   	pop    rbx
ffff80000080cc0b:	41 5f                	pop    r15
ffff80000080cc0d:	5d                   	pop    rbp
ffff80000080cc0e:	c3                   	ret    

ffff80000080cc0f <blkdev_write>:
blkdev_write():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:143

int blkdev_write(unsigned short dev,off_t offset, size_t count, char *buf){
ffff80000080cc0f:	f3 0f 1e fa          	endbr64 
ffff80000080cc13:	55                   	push   rbp
ffff80000080cc14:	48 89 e5             	mov    rbp,rsp
ffff80000080cc17:	41 57                	push   r15
ffff80000080cc19:	53                   	push   rbx
ffff80000080cc1a:	48 83 ec 50          	sub    rsp,0x50
ffff80000080cc1e:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080cc1e <blkdev_write+0xf>
ffff80000080cc25:	49 bb fa fb 10 00 00 	movabs r11,0x10fbfa
ffff80000080cc2c:	00 00 00 
ffff80000080cc2f:	4c 01 db             	add    rbx,r11
ffff80000080cc32:	89 f8                	mov    eax,edi
ffff80000080cc34:	89 75 b8             	mov    DWORD PTR [rbp-0x48],esi
ffff80000080cc37:	48 89 55 b0          	mov    QWORD PTR [rbp-0x50],rdx
ffff80000080cc3b:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
ffff80000080cc3f:	66 89 45 bc          	mov    WORD PTR [rbp-0x44],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:144
    int n=TO_BLKN(count);
ffff80000080cc43:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080cc47:	48 c1 e8 0c          	shr    rax,0xc
ffff80000080cc4b:	48 89 c2             	mov    rdx,rax
ffff80000080cc4e:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080cc52:	25 ff 0f 00 00       	and    eax,0xfff
ffff80000080cc57:	48 01 d0             	add    rax,rdx
ffff80000080cc5a:	48 85 c0             	test   rax,rax
ffff80000080cc5d:	0f 95 c0             	setne  al
ffff80000080cc60:	0f b6 c0             	movzx  eax,al
ffff80000080cc63:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:145
    off_t blkn=BLOCK_FLOOR(offset);
ffff80000080cc66:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
ffff80000080cc69:	99                   	cdq    
ffff80000080cc6a:	c1 ea 14             	shr    edx,0x14
ffff80000080cc6d:	01 d0                	add    eax,edx
ffff80000080cc6f:	25 ff 0f 00 00       	and    eax,0xfff
ffff80000080cc74:	29 d0                	sub    eax,edx
ffff80000080cc76:	89 c2                	mov    edx,eax
ffff80000080cc78:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
ffff80000080cc7b:	29 d0                	sub    eax,edx
ffff80000080cc7d:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:146
    off_t first_off=offset%BLOCK_SIZE;
ffff80000080cc80:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
ffff80000080cc83:	99                   	cdq    
ffff80000080cc84:	c1 ea 14             	shr    edx,0x14
ffff80000080cc87:	01 d0                	add    eax,edx
ffff80000080cc89:	25 ff 0f 00 00       	and    eax,0xfff
ffff80000080cc8e:	29 d0                	sub    eax,edx
ffff80000080cc90:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:147
    char* p=buf;
ffff80000080cc93:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080cc97:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:148
    size_t mod_count=count%BLOCK_SIZE;
ffff80000080cc9b:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080cc9f:	25 ff 0f 00 00       	and    eax,0xfff
ffff80000080cca4:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:149
    int len=BLOCK_SIZE-first_off;
ffff80000080cca8:	b8 00 10 00 00       	mov    eax,0x1000
ffff80000080ccad:	2b 45 e8             	sub    eax,DWORD PTR [rbp-0x18]
ffff80000080ccb0:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:150
    for(int i=0;i<n;i++){
ffff80000080ccb3:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [rbp-0x28],0x0
ffff80000080ccba:	e9 b1 00 00 00       	jmp    ffff80000080cd70 <blkdev_write+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:151
        buffer_head *bh=get_block(dev,blkn);
ffff80000080ccbf:	0f b7 45 bc          	movzx  eax,WORD PTR [rbp-0x44]
ffff80000080ccc3:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080ccc6:	89 d6                	mov    esi,edx
ffff80000080ccc8:	89 c7                	mov    edi,eax
ffff80000080ccca:	49 89 df             	mov    r15,rbx
ffff80000080cccd:	48 b8 c7 fd ee ff ff 	movabs rax,0xffffffffffeefdc7
ffff80000080ccd4:	ff ff ff 
ffff80000080ccd7:	48 01 d8             	add    rax,rbx
ffff80000080ccda:	ff d0                	call   rax
ffff80000080ccdc:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:152
        if(!bh)
ffff80000080cce0:	48 83 7d c0 00       	cmp    QWORD PTR [rbp-0x40],0x0
ffff80000080cce5:	75 0a                	jne    ffff80000080ccf1 <blkdev_write+0xe2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:153
            return -ENOBUFS;//buffer不够了
ffff80000080cce7:	b8 d6 ff ff ff       	mov    eax,0xffffffd6
ffff80000080ccec:	e9 90 00 00 00       	jmp    ffff80000080cd81 <blkdev_write+0x172>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:154
        if(i==n-1)
ffff80000080ccf1:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080ccf4:	83 e8 01             	sub    eax,0x1
ffff80000080ccf7:	39 45 d8             	cmp    DWORD PTR [rbp-0x28],eax
ffff80000080ccfa:	75 09                	jne    ffff80000080cd05 <blkdev_write+0xf6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:155
            len=mod_count;
ffff80000080ccfc:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080cd00:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
ffff80000080cd03:	eb 0d                	jmp    ffff80000080cd12 <blkdev_write+0x103>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:156
        else if(i==2)
ffff80000080cd05:	83 7d d8 02          	cmp    DWORD PTR [rbp-0x28],0x2
ffff80000080cd09:	75 07                	jne    ffff80000080cd12 <blkdev_write+0x103>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:157
            len=BLOCK_SIZE;
ffff80000080cd0b:	c7 45 dc 00 10 00 00 	mov    DWORD PTR [rbp-0x24],0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:158 (discriminator 2)
        memcpy(bh->data+first_off,p,len);
ffff80000080cd12:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080cd15:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080cd19:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080cd1c:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080cd1f:	48 98                	cdqe   
ffff80000080cd21:	48 01 c1             	add    rcx,rax
ffff80000080cd24:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080cd28:	48 89 c6             	mov    rsi,rax
ffff80000080cd2b:	48 89 cf             	mov    rdi,rcx
ffff80000080cd2e:	49 89 df             	mov    r15,rbx
ffff80000080cd31:	48 b8 bc 52 ef ff ff 	movabs rax,0xffffffffffef52bc
ffff80000080cd38:	ff ff ff 
ffff80000080cd3b:	48 01 d8             	add    rax,rbx
ffff80000080cd3e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:159 (discriminator 2)
        brelse(bh);
ffff80000080cd40:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080cd44:	48 89 c7             	mov    rdi,rax
ffff80000080cd47:	49 89 df             	mov    r15,rbx
ffff80000080cd4a:	48 b8 72 05 ef ff ff 	movabs rax,0xffffffffffef0572
ffff80000080cd51:	ff ff ff 
ffff80000080cd54:	48 01 d8             	add    rax,rbx
ffff80000080cd57:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:160 (discriminator 2)
        blkn++;
ffff80000080cd59:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:161 (discriminator 2)
        p+=BLOCK_SIZE;
ffff80000080cd5d:	48 81 45 e0 00 10 00 	add    QWORD PTR [rbp-0x20],0x1000
ffff80000080cd64:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:162 (discriminator 2)
        first_off=0;
ffff80000080cd65:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:150 (discriminator 2)
    for(int i=0;i<n;i++){
ffff80000080cd6c:	83 45 d8 01          	add    DWORD PTR [rbp-0x28],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:150 (discriminator 1)
ffff80000080cd70:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080cd73:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
ffff80000080cd76:	0f 8c 43 ff ff ff    	jl     ffff80000080ccbf <blkdev_write+0xb0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:164
    }
    return 1;
ffff80000080cd7c:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:166

}
ffff80000080cd81:	48 83 c4 50          	add    rsp,0x50
ffff80000080cd85:	5b                   	pop    rbx
ffff80000080cd86:	41 5f                	pop    r15
ffff80000080cd88:	5d                   	pop    rbp
ffff80000080cd89:	c3                   	ret    

ffff80000080cd8a <brelse>:
brelse():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:167
int brelse(buffer_head *bh){
ffff80000080cd8a:	f3 0f 1e fa          	endbr64 
ffff80000080cd8e:	55                   	push   rbp
ffff80000080cd8f:	48 89 e5             	mov    rbp,rsp
ffff80000080cd92:	41 57                	push   r15
ffff80000080cd94:	53                   	push   rbx
ffff80000080cd95:	48 83 ec 10          	sub    rsp,0x10
ffff80000080cd99:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080cd99 <brelse+0xf>
ffff80000080cda0:	49 bb 7f fa 10 00 00 	movabs r11,0x10fa7f
ffff80000080cda7:	00 00 00 
ffff80000080cdaa:	4c 01 db             	add    rbx,r11
ffff80000080cdad:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:168
    if(bh->dev==-1||!blk_devs[bh->dev].do_request)
ffff80000080cdb1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080cdb5:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff80000080cdb9:	0f b7 c0             	movzx  eax,ax
ffff80000080cdbc:	48 ba 98 ff ff ff ff 	movabs rdx,0xffffffffffffff98
ffff80000080cdc3:	ff ff ff 
ffff80000080cdc6:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080cdca:	48 98                	cdqe   
ffff80000080cdcc:	48 c1 e0 04          	shl    rax,0x4
ffff80000080cdd0:	48 01 d0             	add    rax,rdx
ffff80000080cdd3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080cdd6:	48 85 c0             	test   rax,rax
ffff80000080cdd9:	75 0a                	jne    ffff80000080cde5 <brelse+0x5b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:169
        return -ENODEV;
ffff80000080cddb:	b8 d4 ff ff ff       	mov    eax,0xffffffd4
ffff80000080cde0:	e9 96 00 00 00       	jmp    ffff80000080ce7b <brelse+0xf1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:170
    if(bh->dirt)
ffff80000080cde5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080cde9:	0f b6 40 13          	movzx  eax,BYTE PTR [rax+0x13]
ffff80000080cded:	84 c0                	test   al,al
ffff80000080cdef:	74 19                	je     ffff80000080ce0a <brelse+0x80>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:171
        bflush(bh);
ffff80000080cdf1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080cdf5:	48 89 c7             	mov    rdi,rax
ffff80000080cdf8:	49 89 df             	mov    r15,rbx
ffff80000080cdfb:	48 b8 c7 00 ef ff ff 	movabs rax,0xffffffffffef00c7
ffff80000080ce02:	ff ff ff 
ffff80000080ce05:	48 01 d8             	add    rax,rbx
ffff80000080ce08:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:172
    bh->count--;
ffff80000080ce0a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080ce0e:	0f b6 40 14          	movzx  eax,BYTE PTR [rax+0x14]
ffff80000080ce12:	8d 50 ff             	lea    edx,[rax-0x1]
ffff80000080ce15:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080ce19:	88 50 14             	mov    BYTE PTR [rax+0x14],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:173
    if(bh->count==0)
ffff80000080ce1c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080ce20:	0f b6 40 14          	movzx  eax,BYTE PTR [rax+0x14]
ffff80000080ce24:	84 c0                	test   al,al
ffff80000080ce26:	75 4e                	jne    ffff80000080ce76 <brelse+0xec>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:175
    {
        bh->prev->next=bh->next;
ffff80000080ce28:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080ce2c:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000080ce30:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080ce34:	48 8b 52 28          	mov    rdx,QWORD PTR [rdx+0x28]
ffff80000080ce38:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:176
        bh->next->prev=bh->prev;
ffff80000080ce3c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080ce40:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080ce44:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080ce48:	48 8b 52 20          	mov    rdx,QWORD PTR [rdx+0x20]
ffff80000080ce4c:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:177
        bh->dev=-1;
ffff80000080ce50:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080ce54:	66 c7 40 10 ff ff    	mov    WORD PTR [rax+0x10],0xffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:178
        kmfree(bh->data);
ffff80000080ce5a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080ce5e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ce61:	48 89 c7             	mov    rdi,rax
ffff80000080ce64:	49 89 df             	mov    r15,rbx
ffff80000080ce67:	48 b8 d7 5a ee ff ff 	movabs rax,0xffffffffffee5ad7
ffff80000080ce6e:	ff ff ff 
ffff80000080ce71:	48 01 d8             	add    rax,rbx
ffff80000080ce74:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:180
    }
    return 1;
ffff80000080ce76:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:181
ffff80000080ce7b:	48 83 c4 10          	add    rsp,0x10
ffff80000080ce7f:	5b                   	pop    rbx
ffff80000080ce80:	41 5f                	pop    r15
ffff80000080ce82:	5d                   	pop    rbp
ffff80000080ce83:	c3                   	ret    

ffff80000080ce84 <shift>:
shift():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:123
/* 0x5D - Apps      */ {  0,        0,       0x5D,      0x5D }
        };
char k_shift=0,k_ctrl=0,k_capslock=0;

void shift()
{
ffff80000080ce84:	f3 0f 1e fa          	endbr64 
ffff80000080ce88:	55                   	push   rbp
ffff80000080ce89:	48 89 e5             	mov    rbp,rsp
ffff80000080ce8c:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080ce8c <shift+0x8>
ffff80000080ce93:	49 bb 8c f9 10 00 00 	movabs r11,0x10f98c
ffff80000080ce9a:	00 00 00 
ffff80000080ce9d:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:124
    k_shift=!k_shift;
ffff80000080cea0:	48 ba 70 ff ff ff ff 	movabs rdx,0xffffffffffffff70
ffff80000080cea7:	ff ff ff 
ffff80000080ceaa:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080ceae:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080ceb1:	84 d2                	test   dl,dl
ffff80000080ceb3:	0f 94 c2             	sete   dl
ffff80000080ceb6:	89 d1                	mov    ecx,edx
ffff80000080ceb8:	48 ba 70 ff ff ff ff 	movabs rdx,0xffffffffffffff70
ffff80000080cebf:	ff ff ff 
ffff80000080cec2:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080cec6:	88 08                	mov    BYTE PTR [rax],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:125
}
ffff80000080cec8:	90                   	nop
ffff80000080cec9:	5d                   	pop    rbp
ffff80000080ceca:	c3                   	ret    

ffff80000080cecb <ctrl>:
ctrl():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:127
void ctrl()
{
ffff80000080cecb:	f3 0f 1e fa          	endbr64 
ffff80000080cecf:	55                   	push   rbp
ffff80000080ced0:	48 89 e5             	mov    rbp,rsp
ffff80000080ced3:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080ced3 <ctrl+0x8>
ffff80000080ceda:	49 bb 45 f9 10 00 00 	movabs r11,0x10f945
ffff80000080cee1:	00 00 00 
ffff80000080cee4:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:128
    k_ctrl=!k_ctrl;
ffff80000080cee7:	48 ba 38 fd ff ff ff 	movabs rdx,0xfffffffffffffd38
ffff80000080ceee:	ff ff ff 
ffff80000080cef1:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080cef5:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080cef8:	84 d2                	test   dl,dl
ffff80000080cefa:	0f 94 c2             	sete   dl
ffff80000080cefd:	89 d1                	mov    ecx,edx
ffff80000080ceff:	48 ba 38 fd ff ff ff 	movabs rdx,0xfffffffffffffd38
ffff80000080cf06:	ff ff ff 
ffff80000080cf09:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080cf0d:	88 08                	mov    BYTE PTR [rax],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:129
}
ffff80000080cf0f:	90                   	nop
ffff80000080cf10:	5d                   	pop    rbp
ffff80000080cf11:	c3                   	ret    

ffff80000080cf12 <capslock>:
capslock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:131
void capslock()
{
ffff80000080cf12:	f3 0f 1e fa          	endbr64 
ffff80000080cf16:	55                   	push   rbp
ffff80000080cf17:	48 89 e5             	mov    rbp,rsp
ffff80000080cf1a:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080cf1a <capslock+0x8>
ffff80000080cf21:	49 bb fe f8 10 00 00 	movabs r11,0x10f8fe
ffff80000080cf28:	00 00 00 
ffff80000080cf2b:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:132
    k_capslock=k_capslock==0?1:0;
ffff80000080cf2e:	48 ba 98 fe ff ff ff 	movabs rdx,0xfffffffffffffe98
ffff80000080cf35:	ff ff ff 
ffff80000080cf38:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080cf3c:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080cf3f:	84 d2                	test   dl,dl
ffff80000080cf41:	0f 94 c2             	sete   dl
ffff80000080cf44:	89 d1                	mov    ecx,edx
ffff80000080cf46:	48 ba 98 fe ff ff ff 	movabs rdx,0xfffffffffffffe98
ffff80000080cf4d:	ff ff ff 
ffff80000080cf50:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080cf54:	88 08                	mov    BYTE PTR [rax],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:133
}
ffff80000080cf56:	90                   	nop
ffff80000080cf57:	5d                   	pop    rbp
ffff80000080cf58:	c3                   	ret    

ffff80000080cf59 <to_ascii>:
to_ascii():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:135
char to_ascii(char scan_code)
{
ffff80000080cf59:	f3 0f 1e fa          	endbr64 
ffff80000080cf5d:	55                   	push   rbp
ffff80000080cf5e:	48 89 e5             	mov    rbp,rsp
ffff80000080cf61:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080cf61 <to_ascii+0x8>
ffff80000080cf68:	49 bb b7 f8 10 00 00 	movabs r11,0x10f8b7
ffff80000080cf6f:	00 00 00 
ffff80000080cf72:	4c 01 d8             	add    rax,r11
ffff80000080cf75:	89 fa                	mov    edx,edi
ffff80000080cf77:	88 55 ec             	mov    BYTE PTR [rbp-0x14],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:136
    for(int i=0;i<0x5e;i++)//sizeof(key_map)/sizeof(key_code)
ffff80000080cf7a:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff80000080cf81:	e9 25 01 00 00       	jmp    ffff80000080d0ab <to_ascii+0x152>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:137
        if(key_map[i].scan_code==scan_code)
ffff80000080cf86:	48 be e8 d9 ff ff ff 	movabs rsi,0xffffffffffffd9e8
ffff80000080cf8d:	ff ff ff 
ffff80000080cf90:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080cf93:	48 63 ca             	movsxd rcx,edx
ffff80000080cf96:	48 89 ca             	mov    rdx,rcx
ffff80000080cf99:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080cf9d:	48 01 ca             	add    rdx,rcx
ffff80000080cfa0:	48 01 c2             	add    rdx,rax
ffff80000080cfa3:	48 01 f2             	add    rdx,rsi
ffff80000080cfa6:	48 83 c2 02          	add    rdx,0x2
ffff80000080cfaa:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080cfad:	38 55 ec             	cmp    BYTE PTR [rbp-0x14],dl
ffff80000080cfb0:	0f 85 f1 00 00 00    	jne    ffff80000080d0a7 <to_ascii+0x14e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:139
        {
            if(k_capslock&&key_map[i].ascii>='a'&&key_map[i].ascii<='z')return key_map[i].ascii_shift;
ffff80000080cfb6:	48 ba 98 fe ff ff ff 	movabs rdx,0xfffffffffffffe98
ffff80000080cfbd:	ff ff ff 
ffff80000080cfc0:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080cfc4:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080cfc7:	84 d2                	test   dl,dl
ffff80000080cfc9:	74 79                	je     ffff80000080d044 <to_ascii+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:139 (discriminator 1)
ffff80000080cfcb:	48 be e8 d9 ff ff ff 	movabs rsi,0xffffffffffffd9e8
ffff80000080cfd2:	ff ff ff 
ffff80000080cfd5:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080cfd8:	48 63 ca             	movsxd rcx,edx
ffff80000080cfdb:	48 01 c6             	add    rsi,rax
ffff80000080cfde:	48 89 ca             	mov    rdx,rcx
ffff80000080cfe1:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080cfe5:	48 01 ca             	add    rdx,rcx
ffff80000080cfe8:	48 01 f2             	add    rdx,rsi
ffff80000080cfeb:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080cfee:	80 fa 60             	cmp    dl,0x60
ffff80000080cff1:	7e 51                	jle    ffff80000080d044 <to_ascii+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:139 (discriminator 2)
ffff80000080cff3:	48 be e8 d9 ff ff ff 	movabs rsi,0xffffffffffffd9e8
ffff80000080cffa:	ff ff ff 
ffff80000080cffd:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080d000:	48 63 ca             	movsxd rcx,edx
ffff80000080d003:	48 01 c6             	add    rsi,rax
ffff80000080d006:	48 89 ca             	mov    rdx,rcx
ffff80000080d009:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080d00d:	48 01 ca             	add    rdx,rcx
ffff80000080d010:	48 01 f2             	add    rdx,rsi
ffff80000080d013:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080d016:	80 fa 7a             	cmp    dl,0x7a
ffff80000080d019:	7f 29                	jg     ffff80000080d044 <to_ascii+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:139 (discriminator 3)
ffff80000080d01b:	48 be e8 d9 ff ff ff 	movabs rsi,0xffffffffffffd9e8
ffff80000080d022:	ff ff ff 
ffff80000080d025:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080d028:	48 63 ca             	movsxd rcx,edx
ffff80000080d02b:	48 89 ca             	mov    rdx,rcx
ffff80000080d02e:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080d032:	48 01 ca             	add    rdx,rcx
ffff80000080d035:	48 01 d0             	add    rax,rdx
ffff80000080d038:	48 01 f0             	add    rax,rsi
ffff80000080d03b:	48 83 c0 01          	add    rax,0x1
ffff80000080d03f:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080d042:	eb 76                	jmp    ffff80000080d0ba <to_ascii+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:140
            else if(k_shift)return key_map[i].ascii_shift;
ffff80000080d044:	48 ba 70 ff ff ff ff 	movabs rdx,0xffffffffffffff70
ffff80000080d04b:	ff ff ff 
ffff80000080d04e:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080d052:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080d055:	84 d2                	test   dl,dl
ffff80000080d057:	74 29                	je     ffff80000080d082 <to_ascii+0x129>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:140 (discriminator 1)
ffff80000080d059:	48 be e8 d9 ff ff ff 	movabs rsi,0xffffffffffffd9e8
ffff80000080d060:	ff ff ff 
ffff80000080d063:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080d066:	48 63 ca             	movsxd rcx,edx
ffff80000080d069:	48 89 ca             	mov    rdx,rcx
ffff80000080d06c:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080d070:	48 01 ca             	add    rdx,rcx
ffff80000080d073:	48 01 d0             	add    rax,rdx
ffff80000080d076:	48 01 f0             	add    rax,rsi
ffff80000080d079:	48 83 c0 01          	add    rax,0x1
ffff80000080d07d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080d080:	eb 38                	jmp    ffff80000080d0ba <to_ascii+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:141
            else return key_map[i].ascii;
ffff80000080d082:	48 b9 e8 d9 ff ff ff 	movabs rcx,0xffffffffffffd9e8
ffff80000080d089:	ff ff ff 
ffff80000080d08c:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080d08f:	48 63 d2             	movsxd rdx,edx
ffff80000080d092:	48 01 c1             	add    rcx,rax
ffff80000080d095:	48 89 d0             	mov    rax,rdx
ffff80000080d098:	48 c1 e0 02          	shl    rax,0x2
ffff80000080d09c:	48 01 d0             	add    rax,rdx
ffff80000080d09f:	48 01 c8             	add    rax,rcx
ffff80000080d0a2:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080d0a5:	eb 13                	jmp    ffff80000080d0ba <to_ascii+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:136 (discriminator 2)
    for(int i=0;i<0x5e;i++)//sizeof(key_map)/sizeof(key_code)
ffff80000080d0a7:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:136 (discriminator 1)
ffff80000080d0ab:	83 7d fc 5d          	cmp    DWORD PTR [rbp-0x4],0x5d
ffff80000080d0af:	0f 8e d1 fe ff ff    	jle    ffff80000080cf86 <to_ascii+0x2d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:144
        }

    return '\0';
ffff80000080d0b5:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:145
}
ffff80000080d0ba:	5d                   	pop    rbp
ffff80000080d0bb:	c3                   	ret    

ffff80000080d0bc <init_kb>:
init_kb():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:147
int init_kb()
{
ffff80000080d0bc:	f3 0f 1e fa          	endbr64 
ffff80000080d0c0:	55                   	push   rbp
ffff80000080d0c1:	48 89 e5             	mov    rbp,rsp
ffff80000080d0c4:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d0c4 <init_kb+0x8>
ffff80000080d0cb:	49 bb 54 f7 10 00 00 	movabs r11,0x10f754
ffff80000080d0d2:	00 00 00 
ffff80000080d0d5:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:148
}
ffff80000080d0d8:	90                   	nop
ffff80000080d0d9:	5d                   	pop    rbp
ffff80000080d0da:	c3                   	ret    

ffff80000080d0db <key_proc>:
key_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:150
int key_proc()
{
ffff80000080d0db:	f3 0f 1e fa          	endbr64 
ffff80000080d0df:	55                   	push   rbp
ffff80000080d0e0:	48 89 e5             	mov    rbp,rsp
ffff80000080d0e3:	41 57                	push   r15
ffff80000080d0e5:	53                   	push   rbx
ffff80000080d0e6:	48 83 ec 20          	sub    rsp,0x20
ffff80000080d0ea:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080d0ea <key_proc+0xf>
ffff80000080d0f1:	49 bb 2e f7 10 00 00 	movabs r11,0x10f72e
ffff80000080d0f8:	00 00 00 
ffff80000080d0fb:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:151
    asm volatile("cli");
ffff80000080d0fe:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:153
    //获取完整的扫描码
    u8 scan1=0,scan2=0,ch=0;
ffff80000080d0ff:	c6 45 ef 00          	mov    BYTE PTR [rbp-0x11],0x0
ffff80000080d103:	c6 45 ee 00          	mov    BYTE PTR [rbp-0x12],0x0
ffff80000080d107:	c6 45 ed 00          	mov    BYTE PTR [rbp-0x13],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:155
    key_code tmpc;
    scan1=inb(0x60);
ffff80000080d10b:	bf 60 00 00 00       	mov    edi,0x60
ffff80000080d110:	49 89 df             	mov    r15,rbx
ffff80000080d113:	48 b8 d1 b4 ee ff ff 	movabs rax,0xffffffffffeeb4d1
ffff80000080d11a:	ff ff ff 
ffff80000080d11d:	48 01 d8             	add    rax,rbx
ffff80000080d120:	ff d0                	call   rax
ffff80000080d122:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:167
//    tmpc.scan_code2=scan2;
//    tmpc.ascii= ch;


//    ENQUEUE(key_bufq,tmpc)
    if((key_bufq.tail+1)%key_bufq.size!=key_bufq.head)
ffff80000080d125:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080d12c:	ff ff ff 
ffff80000080d12f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d133:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff80000080d136:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080d139:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080d140:	ff ff ff 
ffff80000080d143:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d147:	8b 48 10             	mov    ecx,DWORD PTR [rax+0x10]
ffff80000080d14a:	89 d0                	mov    eax,edx
ffff80000080d14c:	99                   	cdq    
ffff80000080d14d:	f7 f9                	idiv   ecx
ffff80000080d14f:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080d156:	ff ff ff 
ffff80000080d159:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d15d:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080d160:	39 c2                	cmp    edx,eax
ffff80000080d162:	74 68                	je     ffff80000080d1cc <key_proc+0xf1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:169
    {
        key_bufq.data[key_bufq.tail]=scan1;
ffff80000080d164:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080d16b:	ff ff ff 
ffff80000080d16e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d172:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080d175:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080d17c:	ff ff ff 
ffff80000080d17f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d183:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff80000080d186:	48 98                	cdqe   
ffff80000080d188:	48 01 c2             	add    rdx,rax
ffff80000080d18b:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
ffff80000080d18f:	88 02                	mov    BYTE PTR [rdx],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:170
        key_bufq.tail=(key_bufq.tail+1)%key_bufq.size;
ffff80000080d191:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080d198:	ff ff ff 
ffff80000080d19b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d19f:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff80000080d1a2:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080d1a5:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080d1ac:	ff ff ff 
ffff80000080d1af:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d1b3:	8b 48 10             	mov    ecx,DWORD PTR [rax+0x10]
ffff80000080d1b6:	89 d0                	mov    eax,edx
ffff80000080d1b8:	99                   	cdq    
ffff80000080d1b9:	f7 f9                	idiv   ecx
ffff80000080d1bb:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080d1c2:	ff ff ff 
ffff80000080d1c5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d1c9:	89 50 0c             	mov    DWORD PTR [rax+0xc],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:173
    }

    if(scan1==0x48)
ffff80000080d1cc:	80 7d ef 48          	cmp    BYTE PTR [rbp-0x11],0x48
ffff80000080d1d0:	75 17                	jne    ffff80000080d1e9 <key_proc+0x10e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:174
        scr_up();
ffff80000080d1d2:	49 89 df             	mov    r15,rbx
ffff80000080d1d5:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080d1da:	48 ba f3 d1 ee ff ff 	movabs rdx,0xffffffffffeed1f3
ffff80000080d1e1:	ff ff ff 
ffff80000080d1e4:	48 01 da             	add    rdx,rbx
ffff80000080d1e7:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:175
    if(scan1==0x50)
ffff80000080d1e9:	80 7d ef 50          	cmp    BYTE PTR [rbp-0x11],0x50
ffff80000080d1ed:	75 17                	jne    ffff80000080d206 <key_proc+0x12b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:176
        scr_down();
ffff80000080d1ef:	49 89 df             	mov    r15,rbx
ffff80000080d1f2:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080d1f7:	48 ba eb d2 ee ff ff 	movabs rdx,0xffffffffffeed2eb
ffff80000080d1fe:	ff ff ff 
ffff80000080d201:	48 01 da             	add    rdx,rbx
ffff80000080d204:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:177
    switch (scan1)
ffff80000080d206:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
ffff80000080d20a:	3d b6 00 00 00       	cmp    eax,0xb6
ffff80000080d20f:	74 45                	je     ffff80000080d256 <key_proc+0x17b>
ffff80000080d211:	3d b6 00 00 00       	cmp    eax,0xb6
ffff80000080d216:	0f 8f 85 00 00 00    	jg     ffff80000080d2a1 <key_proc+0x1c6>
ffff80000080d21c:	3d aa 00 00 00       	cmp    eax,0xaa
ffff80000080d221:	74 33                	je     ffff80000080d256 <key_proc+0x17b>
ffff80000080d223:	3d aa 00 00 00       	cmp    eax,0xaa
ffff80000080d228:	7f 77                	jg     ffff80000080d2a1 <key_proc+0x1c6>
ffff80000080d22a:	3d 9d 00 00 00       	cmp    eax,0x9d
ffff80000080d22f:	74 3e                	je     ffff80000080d26f <key_proc+0x194>
ffff80000080d231:	3d 9d 00 00 00       	cmp    eax,0x9d
ffff80000080d236:	7f 69                	jg     ffff80000080d2a1 <key_proc+0x1c6>
ffff80000080d238:	83 f8 3a             	cmp    eax,0x3a
ffff80000080d23b:	74 4b                	je     ffff80000080d288 <key_proc+0x1ad>
ffff80000080d23d:	83 f8 3a             	cmp    eax,0x3a
ffff80000080d240:	7f 5f                	jg     ffff80000080d2a1 <key_proc+0x1c6>
ffff80000080d242:	83 f8 36             	cmp    eax,0x36
ffff80000080d245:	74 0f                	je     ffff80000080d256 <key_proc+0x17b>
ffff80000080d247:	83 f8 36             	cmp    eax,0x36
ffff80000080d24a:	7f 55                	jg     ffff80000080d2a1 <key_proc+0x1c6>
ffff80000080d24c:	83 f8 1d             	cmp    eax,0x1d
ffff80000080d24f:	74 1e                	je     ffff80000080d26f <key_proc+0x194>
ffff80000080d251:	83 f8 2a             	cmp    eax,0x2a
ffff80000080d254:	75 4b                	jne    ffff80000080d2a1 <key_proc+0x1c6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:183
    {
        case 0x36:
        case 0x2a:
        case 0xaa:
        case 0xb6:
            shift();
ffff80000080d256:	49 89 df             	mov    r15,rbx
ffff80000080d259:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080d25e:	48 ba 6c 06 ef ff ff 	movabs rdx,0xffffffffffef066c
ffff80000080d265:	ff ff ff 
ffff80000080d268:	48 01 da             	add    rdx,rbx
ffff80000080d26b:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:184
            break;
ffff80000080d26d:	eb 33                	jmp    ffff80000080d2a2 <key_proc+0x1c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:187
        case 0x1d:
        case 0x9d:
            ctrl();
ffff80000080d26f:	49 89 df             	mov    r15,rbx
ffff80000080d272:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080d277:	48 ba b3 06 ef ff ff 	movabs rdx,0xffffffffffef06b3
ffff80000080d27e:	ff ff ff 
ffff80000080d281:	48 01 da             	add    rdx,rbx
ffff80000080d284:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:188
            break;
ffff80000080d286:	eb 1a                	jmp    ffff80000080d2a2 <key_proc+0x1c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:190
        case 0x3a:
            capslock();
ffff80000080d288:	49 89 df             	mov    r15,rbx
ffff80000080d28b:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080d290:	48 ba fa 06 ef ff ff 	movabs rdx,0xffffffffffef06fa
ffff80000080d297:	ff ff ff 
ffff80000080d29a:	48 01 da             	add    rdx,rbx
ffff80000080d29d:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:191
            break;
ffff80000080d29f:	eb 01                	jmp    ffff80000080d2a2 <key_proc+0x1c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:193
        default:
            break;
ffff80000080d2a1:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:196
    }
    //发送到std
    if(!(scan1&FLAG_BREAK)){
ffff80000080d2a2:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
ffff80000080d2a6:	84 c0                	test   al,al
ffff80000080d2a8:	78 51                	js     ffff80000080d2fb <key_proc+0x220>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:197
        char ch= to_ascii(scan1);
ffff80000080d2aa:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
ffff80000080d2ae:	0f be c0             	movsx  eax,al
ffff80000080d2b1:	89 c7                	mov    edi,eax
ffff80000080d2b3:	49 89 df             	mov    r15,rbx
ffff80000080d2b6:	48 b8 41 07 ef ff ff 	movabs rax,0xffffffffffef0741
ffff80000080d2bd:	ff ff ff 
ffff80000080d2c0:	48 01 d8             	add    rax,rbx
ffff80000080d2c3:	ff d0                	call   rax
ffff80000080d2c5:	88 45 e7             	mov    BYTE PTR [rbp-0x19],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:198
        unsigned long args[]={(unsigned long) &ch, 1};
ffff80000080d2c8:	48 8d 45 e7          	lea    rax,[rbp-0x19]
ffff80000080d2cc:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
ffff80000080d2d0:	48 c7 45 d8 01 00 00 	mov    QWORD PTR [rbp-0x28],0x1
ffff80000080d2d7:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:200
        //写入stdin
        sys_ioctl(0,TTY_WSTDIN,(unsigned long)args);
ffff80000080d2d8:	48 8d 45 d0          	lea    rax,[rbp-0x30]
ffff80000080d2dc:	48 89 c2             	mov    rdx,rax
ffff80000080d2df:	be 03 00 00 00       	mov    esi,0x3
ffff80000080d2e4:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080d2e9:	49 89 df             	mov    r15,rbx
ffff80000080d2ec:	48 b8 0b b4 ee ff ff 	movabs rax,0xffffffffffeeb40b
ffff80000080d2f3:	ff ff ff 
ffff80000080d2f6:	48 01 d8             	add    rax,rbx
ffff80000080d2f9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:219
//        //logf("%x\n",stdin.w_ptr);
//        //print_stdin();
//        //printchar(ch);
//        //flush_screen(0);*/
//    }
    eoi();
ffff80000080d2fb:	49 89 df             	mov    r15,rbx
ffff80000080d2fe:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080d303:	48 ba e6 b4 ee ff ff 	movabs rdx,0xffffffffffeeb4e6
ffff80000080d30a:	ff ff ff 
ffff80000080d30d:	48 01 da             	add    rdx,rbx
ffff80000080d310:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:220
    asm volatile("leave\r\n iretq");
ffff80000080d312:	c9                   	leave  
ffff80000080d313:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:221
}
ffff80000080d315:	90                   	nop
ffff80000080d316:	48 83 c4 20          	add    rsp,0x20
ffff80000080d31a:	5b                   	pop    rbx
ffff80000080d31b:	41 5f                	pop    r15
ffff80000080d31d:	5d                   	pop    rbp
ffff80000080d31e:	c3                   	ret    

ffff80000080d31f <sys_analyse_key>:
sys_analyse_key():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:224

char sys_analyse_key()
{
ffff80000080d31f:	f3 0f 1e fa          	endbr64 
ffff80000080d323:	55                   	push   rbp
ffff80000080d324:	48 89 e5             	mov    rbp,rsp
ffff80000080d327:	41 57                	push   r15
ffff80000080d329:	53                   	push   rbx
ffff80000080d32a:	48 83 ec 30          	sub    rsp,0x30
ffff80000080d32e:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080d32e <sys_analyse_key+0xf>
ffff80000080d335:	49 bb ea f4 10 00 00 	movabs r11,0x10f4ea
ffff80000080d33c:	00 00 00 
ffff80000080d33f:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:225
    if(key_bufq.tail==key_bufq.head)return -1;
ffff80000080d342:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080d349:	ff ff ff 
ffff80000080d34c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d350:	8b 50 0c             	mov    edx,DWORD PTR [rax+0xc]
ffff80000080d353:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080d35a:	ff ff ff 
ffff80000080d35d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d361:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080d364:	39 c2                	cmp    edx,eax
ffff80000080d366:	75 0a                	jne    ffff80000080d372 <sys_analyse_key+0x53>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:225 (discriminator 1)
ffff80000080d368:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080d36d:	e9 b1 01 00 00       	jmp    ffff80000080d523 <sys_analyse_key+0x204>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:226
    char c=key_buf[key_bufq.head];
ffff80000080d372:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080d379:	ff ff ff 
ffff80000080d37c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d380:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080d383:	48 ba 90 fd ff ff ff 	movabs rdx,0xfffffffffffffd90
ffff80000080d38a:	ff ff ff 
ffff80000080d38d:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080d391:	48 98                	cdqe   
ffff80000080d393:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff80000080d397:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:227
    key_bufq.head=(key_bufq.head+1)%key_bufq.size;
ffff80000080d39a:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080d3a1:	ff ff ff 
ffff80000080d3a4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d3a8:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080d3ab:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080d3ae:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080d3b5:	ff ff ff 
ffff80000080d3b8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d3bc:	8b 48 10             	mov    ecx,DWORD PTR [rax+0x10]
ffff80000080d3bf:	89 d0                	mov    eax,edx
ffff80000080d3c1:	99                   	cdq    
ffff80000080d3c2:	f7 f9                	idiv   ecx
ffff80000080d3c4:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff80000080d3cb:	ff ff ff 
ffff80000080d3ce:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d3d2:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:229
//    QHEAD(key_bufq)=(QHEAD(key_bufq)+1)%QSIZE(key_bufq);
    printf("scan code:");
ffff80000080d3d5:	48 b8 be db ff ff ff 	movabs rax,0xffffffffffffdbbe
ffff80000080d3dc:	ff ff ff 
ffff80000080d3df:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080d3e3:	48 89 c7             	mov    rdi,rax
ffff80000080d3e6:	49 89 df             	mov    r15,rbx
ffff80000080d3e9:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080d3ee:	48 ba 96 4e ee ff ff 	movabs rdx,0xffffffffffee4e96
ffff80000080d3f5:	ff ff ff 
ffff80000080d3f8:	48 01 da             	add    rdx,rbx
ffff80000080d3fb:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:230
    char res[33]={0};
ffff80000080d3fd:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
ffff80000080d404:	00 
ffff80000080d405:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff80000080d40c:	00 
ffff80000080d40d:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff80000080d414:	00 
ffff80000080d415:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff80000080d41c:	00 
ffff80000080d41d:	c6 45 e0 00          	mov    BYTE PTR [rbp-0x20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:231
    itoa(res,16,c);
ffff80000080d421:	0f be 55 ef          	movsx  edx,BYTE PTR [rbp-0x11]
ffff80000080d425:	48 8d 45 c0          	lea    rax,[rbp-0x40]
ffff80000080d429:	be 10 00 00 00       	mov    esi,0x10
ffff80000080d42e:	48 89 c7             	mov    rdi,rax
ffff80000080d431:	49 89 df             	mov    r15,rbx
ffff80000080d434:	48 b8 1c 4d ee ff ff 	movabs rax,0xffffffffffee4d1c
ffff80000080d43b:	ff ff ff 
ffff80000080d43e:	48 01 d8             	add    rax,rbx
ffff80000080d441:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:232
    printf(res);
ffff80000080d443:	48 8d 45 c0          	lea    rax,[rbp-0x40]
ffff80000080d447:	48 89 c7             	mov    rdi,rax
ffff80000080d44a:	49 89 df             	mov    r15,rbx
ffff80000080d44d:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080d452:	48 ba 96 4e ee ff ff 	movabs rdx,0xffffffffffee4e96
ffff80000080d459:	ff ff ff 
ffff80000080d45c:	48 01 da             	add    rdx,rbx
ffff80000080d45f:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:233
    if(c&FLAG_BREAK){
ffff80000080d461:	80 7d ef 00          	cmp    BYTE PTR [rbp-0x11],0x0
ffff80000080d465:	79 32                	jns    ffff80000080d499 <sys_analyse_key+0x17a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:234
        printf("\n");
ffff80000080d467:	48 b8 c9 db ff ff ff 	movabs rax,0xffffffffffffdbc9
ffff80000080d46e:	ff ff ff 
ffff80000080d471:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080d475:	48 89 c7             	mov    rdi,rax
ffff80000080d478:	49 89 df             	mov    r15,rbx
ffff80000080d47b:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080d480:	48 ba 96 4e ee ff ff 	movabs rdx,0xffffffffffee4e96
ffff80000080d487:	ff ff ff 
ffff80000080d48a:	48 01 da             	add    rdx,rbx
ffff80000080d48d:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:235
        return -1;
ffff80000080d48f:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080d494:	e9 8a 00 00 00       	jmp    ffff80000080d523 <sys_analyse_key+0x204>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:237
    }
    c= to_ascii(c&0x7f);
ffff80000080d499:	0f be 45 ef          	movsx  eax,BYTE PTR [rbp-0x11]
ffff80000080d49d:	83 e0 7f             	and    eax,0x7f
ffff80000080d4a0:	89 c7                	mov    edi,eax
ffff80000080d4a2:	49 89 df             	mov    r15,rbx
ffff80000080d4a5:	48 b8 41 07 ef ff ff 	movabs rax,0xffffffffffef0741
ffff80000080d4ac:	ff ff ff 
ffff80000080d4af:	48 01 d8             	add    rax,rbx
ffff80000080d4b2:	ff d0                	call   rax
ffff80000080d4b4:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:238
    printf(" char:");
ffff80000080d4b7:	48 b8 cb db ff ff ff 	movabs rax,0xffffffffffffdbcb
ffff80000080d4be:	ff ff ff 
ffff80000080d4c1:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080d4c5:	48 89 c7             	mov    rdi,rax
ffff80000080d4c8:	49 89 df             	mov    r15,rbx
ffff80000080d4cb:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080d4d0:	48 ba 96 4e ee ff ff 	movabs rdx,0xffffffffffee4e96
ffff80000080d4d7:	ff ff ff 
ffff80000080d4da:	48 01 da             	add    rdx,rbx
ffff80000080d4dd:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:239
    putchar(c);
ffff80000080d4df:	0f be 45 ef          	movsx  eax,BYTE PTR [rbp-0x11]
ffff80000080d4e3:	89 c7                	mov    edi,eax
ffff80000080d4e5:	49 89 df             	mov    r15,rbx
ffff80000080d4e8:	48 b8 45 4e ee ff ff 	movabs rax,0xffffffffffee4e45
ffff80000080d4ef:	ff ff ff 
ffff80000080d4f2:	48 01 d8             	add    rax,rbx
ffff80000080d4f5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:240
    printf("\n");
ffff80000080d4f7:	48 b8 c9 db ff ff ff 	movabs rax,0xffffffffffffdbc9
ffff80000080d4fe:	ff ff ff 
ffff80000080d501:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080d505:	48 89 c7             	mov    rdi,rax
ffff80000080d508:	49 89 df             	mov    r15,rbx
ffff80000080d50b:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080d510:	48 ba 96 4e ee ff ff 	movabs rdx,0xffffffffffee4e96
ffff80000080d517:	ff ff ff 
ffff80000080d51a:	48 01 da             	add    rdx,rbx
ffff80000080d51d:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:241
    return c;
ffff80000080d51f:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:242 (discriminator 1)
ffff80000080d523:	48 83 c4 30          	add    rsp,0x30
ffff80000080d527:	5b                   	pop    rbx
ffff80000080d528:	41 5f                	pop    r15
ffff80000080d52a:	5d                   	pop    rbp
ffff80000080d52b:	c3                   	ret    

ffff80000080d52c <init_disk>:
init_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:20
struct blk_dev bd_hd={
    .do_request=hd_do_req
};
int dev_hd=-1,last_chk_res=0;
int init_disk()
{
ffff80000080d52c:	f3 0f 1e fa          	endbr64 
ffff80000080d530:	55                   	push   rbp
ffff80000080d531:	48 89 e5             	mov    rbp,rsp
ffff80000080d534:	41 57                	push   r15
ffff80000080d536:	53                   	push   rbx
ffff80000080d537:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080d537 <init_disk+0xb>
ffff80000080d53e:	49 bb e1 f2 10 00 00 	movabs r11,0x10f2e1
ffff80000080d545:	00 00 00 
ffff80000080d548:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:21
    if((dev_hd= reg_blkdev(&bd_hd))<0)
ffff80000080d54b:	48 b8 a0 fd ff ff ff 	movabs rax,0xfffffffffffffda0
ffff80000080d552:	ff ff ff 
ffff80000080d555:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d559:	48 89 c7             	mov    rdi,rax
ffff80000080d55c:	49 89 df             	mov    r15,rbx
ffff80000080d55f:	48 b8 0b f9 ee ff ff 	movabs rax,0xffffffffffeef90b
ffff80000080d566:	ff ff ff 
ffff80000080d569:	48 01 d8             	add    rax,rbx
ffff80000080d56c:	ff d0                	call   rax
ffff80000080d56e:	48 ba 18 ff ff ff ff 	movabs rdx,0xffffffffffffff18
ffff80000080d575:	ff ff ff 
ffff80000080d578:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080d57c:	89 02                	mov    DWORD PTR [rdx],eax
ffff80000080d57e:	48 b8 18 ff ff ff ff 	movabs rax,0xffffffffffffff18
ffff80000080d585:	ff ff ff 
ffff80000080d588:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d58c:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080d58e:	85 c0                	test   eax,eax
ffff80000080d590:	79 07                	jns    ffff80000080d599 <init_disk+0x6d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:22
        return -1;
ffff80000080d592:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080d597:	eb 05                	jmp    ffff80000080d59e <init_disk+0x72>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:27
    //disk_devi= reg_device(&dev_disk);
    //disk_drvi= reg_driver(&drv_disk);
    //dev_disk.drv=&drv_disk;
    // hd_iterate();
    return 0;
ffff80000080d599:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:28
}
ffff80000080d59e:	5b                   	pop    rbx
ffff80000080d59f:	41 5f                	pop    r15
ffff80000080d5a1:	5d                   	pop    rbp
ffff80000080d5a2:	c3                   	ret    

ffff80000080d5a3 <disk_int_handler_c>:
disk_int_handler_c():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:31

int disk_int_handler_c()
{
ffff80000080d5a3:	f3 0f 1e fa          	endbr64 
ffff80000080d5a7:	55                   	push   rbp
ffff80000080d5a8:	48 89 e5             	mov    rbp,rsp
ffff80000080d5ab:	41 57                	push   r15
ffff80000080d5ad:	53                   	push   rbx
ffff80000080d5ae:	48 83 ec 30          	sub    rsp,0x30
ffff80000080d5b2:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080d5b2 <disk_int_handler_c+0xf>
ffff80000080d5b9:	49 bb 66 f2 10 00 00 	movabs r11,0x10f266
ffff80000080d5c0:	00 00 00 
ffff80000080d5c3:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:32
    if(r_running==NULL)
ffff80000080d5c6:	48 b8 60 fd ff ff ff 	movabs rax,0xfffffffffffffd60
ffff80000080d5cd:	ff ff ff 
ffff80000080d5d0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d5d4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d5d7:	48 85 c0             	test   rax,rax
ffff80000080d5da:	75 32                	jne    ffff80000080d60e <disk_int_handler_c+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:34
    {
        comprintf("err:null running dreq\n");
ffff80000080d5dc:	48 b8 d2 db ff ff ff 	movabs rax,0xffffffffffffdbd2
ffff80000080d5e3:	ff ff ff 
ffff80000080d5e6:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080d5ea:	48 89 c7             	mov    rdi,rax
ffff80000080d5ed:	49 89 df             	mov    r15,rbx
ffff80000080d5f0:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080d5f5:	48 ba 1b 4e ef ff ff 	movabs rdx,0xffffffffffef4e1b
ffff80000080d5fc:	ff ff ff 
ffff80000080d5ff:	48 01 da             	add    rdx,rbx
ffff80000080d602:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:35
        return 1;//同步读写硬盘
ffff80000080d604:	b8 01 00 00 00       	mov    eax,0x1
ffff80000080d609:	e9 14 03 00 00       	jmp    ffff80000080d922 <disk_int_handler_c+0x37f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:37
    }
    short *p=r_running->buffer;
ffff80000080d60e:	48 b8 60 fd ff ff ff 	movabs rax,0xfffffffffffffd60
ffff80000080d615:	ff ff ff 
ffff80000080d618:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d61c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d61f:	48 8b 40 22          	mov    rax,QWORD PTR [rax+0x22]
ffff80000080d623:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:38
    int port=PORT_DISK_MAJOR;
ffff80000080d627:	c7 45 e4 f0 01 00 00 	mov    DWORD PTR [rbp-0x1c],0x1f0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:39
    if(BLKDEV_MINOR(r_running->dev)==DISK_SLAVE_MAJOR||\
ffff80000080d62e:	48 b8 60 fd ff ff ff 	movabs rax,0xfffffffffffffd60
ffff80000080d635:	ff ff ff 
ffff80000080d638:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d63c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d63f:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff80000080d642:	0f b7 c0             	movzx  eax,ax
ffff80000080d645:	83 e0 0f             	and    eax,0xf
ffff80000080d648:	83 f8 02             	cmp    eax,0x2
ffff80000080d64b:	74 1f                	je     ffff80000080d66c <disk_int_handler_c+0xc9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:40 (discriminator 1)
    BLKDEV_MINOR(r_running->dev)==DISK_SLAVE_SLAVE)
ffff80000080d64d:	48 b8 60 fd ff ff ff 	movabs rax,0xfffffffffffffd60
ffff80000080d654:	ff ff ff 
ffff80000080d657:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d65b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d65e:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff80000080d661:	0f b7 c0             	movzx  eax,ax
ffff80000080d664:	83 e0 0f             	and    eax,0xf
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:39 (discriminator 1)
    if(BLKDEV_MINOR(r_running->dev)==DISK_SLAVE_MAJOR||\
ffff80000080d667:	83 f8 03             	cmp    eax,0x3
ffff80000080d66a:	75 07                	jne    ffff80000080d673 <disk_int_handler_c+0xd0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:41
        port=PORT_DISK_SLAVE;
ffff80000080d66c:	c7 45 e4 70 01 00 00 	mov    DWORD PTR [rbp-0x1c],0x170
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:42
    if(r_running->cmd==BLKDEV_REQ_READ)
ffff80000080d673:	48 b8 60 fd ff ff ff 	movabs rax,0xfffffffffffffd60
ffff80000080d67a:	ff ff ff 
ffff80000080d67d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d681:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d684:	8b 40 02             	mov    eax,DWORD PTR [rax+0x2]
ffff80000080d687:	85 c0                	test   eax,eax
ffff80000080d689:	75 61                	jne    ffff80000080d6ec <disk_int_handler_c+0x149>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:46
    {
        ////printf("sys_read dist:%x\n",p);
        //读取
        for(int i=0;i<r_running->nr_sectors*256;i++)
ffff80000080d68b:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff80000080d692:	eb 2f                	jmp    ffff80000080d6c3 <disk_int_handler_c+0x120>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:48 (discriminator 3)
        {
            *p++=inw(port);
ffff80000080d694:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080d697:	0f b7 c0             	movzx  eax,ax
ffff80000080d69a:	89 c7                	mov    edi,eax
ffff80000080d69c:	49 89 df             	mov    r15,rbx
ffff80000080d69f:	48 b8 db b4 ee ff ff 	movabs rax,0xffffffffffeeb4db
ffff80000080d6a6:	ff ff ff 
ffff80000080d6a9:	48 01 d8             	add    rax,rbx
ffff80000080d6ac:	ff d0                	call   rax
ffff80000080d6ae:	89 c2                	mov    edx,eax
ffff80000080d6b0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d6b4:	48 8d 48 02          	lea    rcx,[rax+0x2]
ffff80000080d6b8:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
ffff80000080d6bc:	66 89 10             	mov    WORD PTR [rax],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:46 (discriminator 3)
        for(int i=0;i<r_running->nr_sectors*256;i++)
ffff80000080d6bf:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:46 (discriminator 1)
ffff80000080d6c3:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff80000080d6c6:	48 63 d0             	movsxd rdx,eax
ffff80000080d6c9:	48 b8 60 fd ff ff ff 	movabs rax,0xfffffffffffffd60
ffff80000080d6d0:	ff ff ff 
ffff80000080d6d3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d6d7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d6da:	48 8b 40 12          	mov    rax,QWORD PTR [rax+0x12]
ffff80000080d6de:	48 c1 e0 08          	shl    rax,0x8
ffff80000080d6e2:	48 39 c2             	cmp    rdx,rax
ffff80000080d6e5:	72 ad                	jb     ffff80000080d694 <disk_int_handler_c+0xf1>
ffff80000080d6e7:	e9 53 01 00 00       	jmp    ffff80000080d83f <disk_int_handler_c+0x29c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:50
        }
    }else if(r_running->cmd==BLKDEV_REQ_WRITE)
ffff80000080d6ec:	48 b8 60 fd ff ff ff 	movabs rax,0xfffffffffffffd60
ffff80000080d6f3:	ff ff ff 
ffff80000080d6f6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d6fa:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d6fd:	8b 40 02             	mov    eax,DWORD PTR [rax+0x2]
ffff80000080d700:	83 f8 01             	cmp    eax,0x1
ffff80000080d703:	75 64                	jne    ffff80000080d769 <disk_int_handler_c+0x1c6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:52
    {
        for(int i=0;i<r_running->nr_sectors*256;i++)
ffff80000080d705:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
ffff80000080d70c:	eb 32                	jmp    ffff80000080d740 <disk_int_handler_c+0x19d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:53 (discriminator 3)
            outw(port,*p++);
ffff80000080d70e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d712:	48 8d 50 02          	lea    rdx,[rax+0x2]
ffff80000080d716:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080d71a:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff80000080d71d:	0f b7 d0             	movzx  edx,ax
ffff80000080d720:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080d723:	0f b7 c0             	movzx  eax,ax
ffff80000080d726:	89 d6                	mov    esi,edx
ffff80000080d728:	89 c7                	mov    edi,eax
ffff80000080d72a:	49 89 df             	mov    r15,rbx
ffff80000080d72d:	48 b8 c5 b4 ee ff ff 	movabs rax,0xffffffffffeeb4c5
ffff80000080d734:	ff ff ff 
ffff80000080d737:	48 01 d8             	add    rax,rbx
ffff80000080d73a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:52 (discriminator 3)
        for(int i=0;i<r_running->nr_sectors*256;i++)
ffff80000080d73c:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:52 (discriminator 1)
ffff80000080d740:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080d743:	48 63 d0             	movsxd rdx,eax
ffff80000080d746:	48 b8 60 fd ff ff ff 	movabs rax,0xfffffffffffffd60
ffff80000080d74d:	ff ff ff 
ffff80000080d750:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d754:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d757:	48 8b 40 12          	mov    rax,QWORD PTR [rax+0x12]
ffff80000080d75b:	48 c1 e0 08          	shl    rax,0x8
ffff80000080d75f:	48 39 c2             	cmp    rdx,rax
ffff80000080d762:	72 aa                	jb     ffff80000080d70e <disk_int_handler_c+0x16b>
ffff80000080d764:	e9 d6 00 00 00       	jmp    ffff80000080d83f <disk_int_handler_c+0x29c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:54
    }else if(r_running->cmd==DISKREQ_CHECK)
ffff80000080d769:	48 b8 60 fd ff ff ff 	movabs rax,0xfffffffffffffd60
ffff80000080d770:	ff ff ff 
ffff80000080d773:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d777:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d77a:	8b 40 02             	mov    eax,DWORD PTR [rax+0x2]
ffff80000080d77d:	83 f8 02             	cmp    eax,0x2
ffff80000080d780:	75 54                	jne    ffff80000080d7d6 <disk_int_handler_c+0x233>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:56
    {
        char stat=inb(port+7);
ffff80000080d782:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080d785:	83 c0 07             	add    eax,0x7
ffff80000080d788:	0f b6 c0             	movzx  eax,al
ffff80000080d78b:	89 c7                	mov    edi,eax
ffff80000080d78d:	49 89 df             	mov    r15,rbx
ffff80000080d790:	48 b8 d1 b4 ee ff ff 	movabs rax,0xffffffffffeeb4d1
ffff80000080d797:	ff ff ff 
ffff80000080d79a:	48 01 d8             	add    rax,rbx
ffff80000080d79d:	ff d0                	call   rax
ffff80000080d79f:	88 45 d7             	mov    BYTE PTR [rbp-0x29],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:57
        short dat=inw(port);
ffff80000080d7a2:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080d7a5:	0f b7 c0             	movzx  eax,ax
ffff80000080d7a8:	89 c7                	mov    edi,eax
ffff80000080d7aa:	49 89 df             	mov    r15,rbx
ffff80000080d7ad:	48 b8 db b4 ee ff ff 	movabs rax,0xffffffffffeeb4db
ffff80000080d7b4:	ff ff ff 
ffff80000080d7b7:	48 01 d8             	add    rax,rbx
ffff80000080d7ba:	ff d0                	call   rax
ffff80000080d7bc:	66 89 45 d4          	mov    WORD PTR [rbp-0x2c],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:60
        if(1)
        {
            last_chk_res=DISK_CHK_OK;
ffff80000080d7c0:	48 b8 b8 fd ff ff ff 	movabs rax,0xfffffffffffffdb8
ffff80000080d7c7:	ff ff ff 
ffff80000080d7ca:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d7ce:	c7 00 01 00 00 00    	mov    DWORD PTR [rax],0x1
ffff80000080d7d4:	eb 69                	jmp    ffff80000080d83f <disk_int_handler_c+0x29c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:67
        {
            char err=inb(port+1);//错误原因
            printf("checking disk err:%x\nresetting hd\n",err);
            last_chk_res=DISK_CHK_ERR;
        }
    }else if(r_running->cmd==DISKREQ_RESET)
ffff80000080d7d6:	48 b8 60 fd ff ff ff 	movabs rax,0xfffffffffffffd60
ffff80000080d7dd:	ff ff ff 
ffff80000080d7e0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d7e4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d7e7:	8b 40 02             	mov    eax,DWORD PTR [rax+0x2]
ffff80000080d7ea:	83 f8 03             	cmp    eax,0x3
ffff80000080d7ed:	75 50                	jne    ffff80000080d83f <disk_int_handler_c+0x29c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:69
    {
        int stat=inb(port+7);
ffff80000080d7ef:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080d7f2:	83 c0 07             	add    eax,0x7
ffff80000080d7f5:	0f b6 c0             	movzx  eax,al
ffff80000080d7f8:	89 c7                	mov    edi,eax
ffff80000080d7fa:	49 89 df             	mov    r15,rbx
ffff80000080d7fd:	48 b8 d1 b4 ee ff ff 	movabs rax,0xffffffffffeeb4d1
ffff80000080d804:	ff ff ff 
ffff80000080d807:	48 01 d8             	add    rax,rbx
ffff80000080d80a:	ff d0                	call   rax
ffff80000080d80c:	0f b6 c0             	movzx  eax,al
ffff80000080d80f:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:70
        printf("reset disk done.\nstat now:%x\n",stat);
ffff80000080d812:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080d815:	89 c6                	mov    esi,eax
ffff80000080d817:	48 b8 e9 db ff ff ff 	movabs rax,0xffffffffffffdbe9
ffff80000080d81e:	ff ff ff 
ffff80000080d821:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080d825:	48 89 c7             	mov    rdi,rax
ffff80000080d828:	49 89 df             	mov    r15,rbx
ffff80000080d82b:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080d830:	48 ba 96 4e ee ff ff 	movabs rdx,0xffffffffffee4e96
ffff80000080d837:	ff ff ff 
ffff80000080d83a:	48 01 da             	add    rdx,rbx
ffff80000080d83d:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:73
    }
    
    r_running=NULL;
ffff80000080d83f:	48 b8 60 fd ff ff ff 	movabs rax,0xfffffffffffffd60
ffff80000080d846:	ff ff ff 
ffff80000080d849:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d84d:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:74
    end_request(dev_hd);
ffff80000080d854:	48 b8 18 ff ff ff ff 	movabs rax,0xffffffffffffff18
ffff80000080d85b:	ff ff ff 
ffff80000080d85e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d862:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080d864:	0f b7 c0             	movzx  eax,ax
ffff80000080d867:	66 89 45 d2          	mov    WORD PTR [rbp-0x2e],ax
end_request():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:64
    int major=BLKDEV_MAJOR(dev);
ffff80000080d86b:	0f b7 45 d2          	movzx  eax,WORD PTR [rbp-0x2e]
ffff80000080d86f:	c1 f8 04             	sar    eax,0x4
ffff80000080d872:	83 e0 0f             	and    eax,0xf
ffff80000080d875:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:65
    blk_devs[major].current_request->dev=-1;
ffff80000080d878:	48 b8 98 ff ff ff ff 	movabs rax,0xffffffffffffff98
ffff80000080d87f:	ff ff ff 
ffff80000080d882:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff80000080d886:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080d889:	48 98                	cdqe   
ffff80000080d88b:	48 c1 e0 04          	shl    rax,0x4
ffff80000080d88f:	48 01 d0             	add    rax,rdx
ffff80000080d892:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080d896:	66 c7 00 ff ff       	mov    WORD PTR [rax],0xffff
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:66
    blk_devs[major].current_request=blk_devs[major].current_request->next;
ffff80000080d89b:	48 b8 98 ff ff ff ff 	movabs rax,0xffffffffffffff98
ffff80000080d8a2:	ff ff ff 
ffff80000080d8a5:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff80000080d8a9:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080d8ac:	48 98                	cdqe   
ffff80000080d8ae:	48 c1 e0 04          	shl    rax,0x4
ffff80000080d8b2:	48 01 d0             	add    rax,rdx
ffff80000080d8b5:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080d8b9:	48 8b 40 32          	mov    rax,QWORD PTR [rax+0x32]
ffff80000080d8bd:	48 ba 98 ff ff ff ff 	movabs rdx,0xffffffffffffff98
ffff80000080d8c4:	ff ff ff 
ffff80000080d8c7:	48 8b 0c 13          	mov    rcx,QWORD PTR [rbx+rdx*1]
ffff80000080d8cb:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000080d8ce:	48 63 d2             	movsxd rdx,edx
ffff80000080d8d1:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080d8d5:	48 01 ca             	add    rdx,rcx
ffff80000080d8d8:	48 89 42 08          	mov    QWORD PTR [rdx+0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:67
}
ffff80000080d8dc:	90                   	nop
disk_int_handler_c():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:76
    //执行下一个请求
    hd_do_req(blk_devs[dev_hd].current_request);
ffff80000080d8dd:	48 b8 18 ff ff ff ff 	movabs rax,0xffffffffffffff18
ffff80000080d8e4:	ff ff ff 
ffff80000080d8e7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d8eb:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080d8ed:	48 ba 98 ff ff ff ff 	movabs rdx,0xffffffffffffff98
ffff80000080d8f4:	ff ff ff 
ffff80000080d8f7:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080d8fb:	48 98                	cdqe   
ffff80000080d8fd:	48 c1 e0 04          	shl    rax,0x4
ffff80000080d901:	48 01 d0             	add    rax,rdx
ffff80000080d904:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080d908:	48 89 c7             	mov    rdi,rax
ffff80000080d90b:	49 89 df             	mov    r15,rbx
ffff80000080d90e:	48 b8 c7 16 ef ff ff 	movabs rax,0xffffffffffef16c7
ffff80000080d915:	ff ff ff 
ffff80000080d918:	48 01 d8             	add    rax,rbx
ffff80000080d91b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:77
    return 0;
ffff80000080d91d:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:78
}
ffff80000080d922:	48 83 c4 30          	add    rsp,0x30
ffff80000080d926:	5b                   	pop    rbx
ffff80000080d927:	41 5f                	pop    r15
ffff80000080d929:	5d                   	pop    rbp
ffff80000080d92a:	c3                   	ret    

ffff80000080d92b <async_reset_disk>:
async_reset_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:80
int async_reset_disk(int disk)
{
ffff80000080d92b:	f3 0f 1e fa          	endbr64 
ffff80000080d92f:	55                   	push   rbp
ffff80000080d930:	48 89 e5             	mov    rbp,rsp
ffff80000080d933:	41 57                	push   r15
ffff80000080d935:	48 83 ec 18          	sub    rsp,0x18
ffff80000080d939:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d939 <async_reset_disk+0xe>
ffff80000080d940:	49 bb df ee 10 00 00 	movabs r11,0x10eedf
ffff80000080d947:	00 00 00 
ffff80000080d94a:	4c 01 d8             	add    rax,r11
ffff80000080d94d:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:81
    outb(PORT_DISK_CONTROL,DISK_CMD_RESET);
ffff80000080d950:	be 0c 00 00 00       	mov    esi,0xc
ffff80000080d955:	bf f6 03 00 00       	mov    edi,0x3f6
ffff80000080d95a:	49 89 c7             	mov    r15,rax
ffff80000080d95d:	48 ba b8 b4 ee ff ff 	movabs rdx,0xffffffffffeeb4b8
ffff80000080d964:	ff ff ff 
ffff80000080d967:	48 01 c2             	add    rdx,rax
ffff80000080d96a:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:82
    return 0;
ffff80000080d96c:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:83
}
ffff80000080d971:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080d975:	c9                   	leave  
ffff80000080d976:	c3                   	ret    

ffff80000080d977 <async_read_disk>:
async_read_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:85
int async_read_disk(int disk,unsigned int lba,int sec_n,char* mem_addr)
{
ffff80000080d977:	f3 0f 1e fa          	endbr64 
ffff80000080d97b:	55                   	push   rbp
ffff80000080d97c:	48 89 e5             	mov    rbp,rsp
ffff80000080d97f:	41 57                	push   r15
ffff80000080d981:	53                   	push   rbx
ffff80000080d982:	48 83 ec 30          	sub    rsp,0x30
ffff80000080d986:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080d986 <async_read_disk+0xf>
ffff80000080d98d:	49 bb 92 ee 10 00 00 	movabs r11,0x10ee92
ffff80000080d994:	00 00 00 
ffff80000080d997:	4c 01 db             	add    rbx,r11
ffff80000080d99a:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff80000080d99d:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080d9a0:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff80000080d9a3:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:86
    unsigned short port=PORT_DISK_MAJOR;
ffff80000080d9a7:	66 c7 45 ee f0 01    	mov    WORD PTR [rbp-0x12],0x1f0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:87
    int slave_disk=0;
ffff80000080d9ad:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:88
    if(disk==DISK_SLAVE_MAJOR||disk==DISK_SLAVE_SLAVE)
ffff80000080d9b4:	83 7d dc 02          	cmp    DWORD PTR [rbp-0x24],0x2
ffff80000080d9b8:	74 06                	je     ffff80000080d9c0 <async_read_disk+0x49>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:88 (discriminator 1)
ffff80000080d9ba:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff80000080d9be:	75 06                	jne    ffff80000080d9c6 <async_read_disk+0x4f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:89
        port=PORT_DISK_SLAVE;
ffff80000080d9c0:	66 c7 45 ee 70 01    	mov    WORD PTR [rbp-0x12],0x170
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:90
    if(disk==DISK_SLAVE_SLAVE||disk==DISK_MAJOR_SLAVE)
ffff80000080d9c6:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff80000080d9ca:	74 06                	je     ffff80000080d9d2 <async_read_disk+0x5b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:90 (discriminator 1)
ffff80000080d9cc:	83 7d dc 01          	cmp    DWORD PTR [rbp-0x24],0x1
ffff80000080d9d0:	75 07                	jne    ffff80000080d9d9 <async_read_disk+0x62>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:91
        slave_disk=1;
ffff80000080d9d2:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:92
    outb(port+2,sec_n);
ffff80000080d9d9:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080d9dc:	0f b6 d0             	movzx  edx,al
ffff80000080d9df:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080d9e3:	83 c0 02             	add    eax,0x2
ffff80000080d9e6:	0f b7 c0             	movzx  eax,ax
ffff80000080d9e9:	89 d6                	mov    esi,edx
ffff80000080d9eb:	89 c7                	mov    edi,eax
ffff80000080d9ed:	49 89 df             	mov    r15,rbx
ffff80000080d9f0:	48 b8 b8 b4 ee ff ff 	movabs rax,0xffffffffffeeb4b8
ffff80000080d9f7:	ff ff ff 
ffff80000080d9fa:	48 01 d8             	add    rax,rbx
ffff80000080d9fd:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:93
    outb(port+3,lba&0xff);
ffff80000080d9ff:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080da02:	0f b6 d0             	movzx  edx,al
ffff80000080da05:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080da09:	83 c0 03             	add    eax,0x3
ffff80000080da0c:	0f b7 c0             	movzx  eax,ax
ffff80000080da0f:	89 d6                	mov    esi,edx
ffff80000080da11:	89 c7                	mov    edi,eax
ffff80000080da13:	49 89 df             	mov    r15,rbx
ffff80000080da16:	48 b8 b8 b4 ee ff ff 	movabs rax,0xffffffffffeeb4b8
ffff80000080da1d:	ff ff ff 
ffff80000080da20:	48 01 d8             	add    rax,rbx
ffff80000080da23:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:94
    outb(port+4,(lba>>8)&0xff);
ffff80000080da25:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080da28:	c1 e8 08             	shr    eax,0x8
ffff80000080da2b:	0f b6 d0             	movzx  edx,al
ffff80000080da2e:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080da32:	83 c0 04             	add    eax,0x4
ffff80000080da35:	0f b7 c0             	movzx  eax,ax
ffff80000080da38:	89 d6                	mov    esi,edx
ffff80000080da3a:	89 c7                	mov    edi,eax
ffff80000080da3c:	49 89 df             	mov    r15,rbx
ffff80000080da3f:	48 b8 b8 b4 ee ff ff 	movabs rax,0xffffffffffeeb4b8
ffff80000080da46:	ff ff ff 
ffff80000080da49:	48 01 d8             	add    rax,rbx
ffff80000080da4c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:95
    outb(port+5,(lba>>16)&0xff);
ffff80000080da4e:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080da51:	c1 e8 10             	shr    eax,0x10
ffff80000080da54:	0f b6 d0             	movzx  edx,al
ffff80000080da57:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080da5b:	83 c0 05             	add    eax,0x5
ffff80000080da5e:	0f b7 c0             	movzx  eax,ax
ffff80000080da61:	89 d6                	mov    esi,edx
ffff80000080da63:	89 c7                	mov    edi,eax
ffff80000080da65:	49 89 df             	mov    r15,rbx
ffff80000080da68:	48 b8 b8 b4 ee ff ff 	movabs rax,0xffffffffffeeb4b8
ffff80000080da6f:	ff ff ff 
ffff80000080da72:	48 01 d8             	add    rax,rbx
ffff80000080da75:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:96
    char drv=slave_disk?0x10:0;
ffff80000080da77:	83 7d e8 00          	cmp    DWORD PTR [rbp-0x18],0x0
ffff80000080da7b:	74 07                	je     ffff80000080da84 <async_read_disk+0x10d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:96 (discriminator 1)
ffff80000080da7d:	b8 10 00 00 00       	mov    eax,0x10
ffff80000080da82:	eb 05                	jmp    ffff80000080da89 <async_read_disk+0x112>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:96 (discriminator 2)
ffff80000080da84:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:96 (discriminator 4)
ffff80000080da89:	88 45 e7             	mov    BYTE PTR [rbp-0x19],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:97 (discriminator 4)
    char lba_hi=(lba>>24)&0xf|drv|0xe0;
ffff80000080da8c:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080da8f:	c1 e8 18             	shr    eax,0x18
ffff80000080da92:	83 e0 0f             	and    eax,0xf
ffff80000080da95:	89 c2                	mov    edx,eax
ffff80000080da97:	0f b6 45 e7          	movzx  eax,BYTE PTR [rbp-0x19]
ffff80000080da9b:	09 d0                	or     eax,edx
ffff80000080da9d:	83 c8 e0             	or     eax,0xffffffe0
ffff80000080daa0:	88 45 e6             	mov    BYTE PTR [rbp-0x1a],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:98 (discriminator 4)
    outb(port+6,lba_hi);
ffff80000080daa3:	0f b6 45 e6          	movzx  eax,BYTE PTR [rbp-0x1a]
ffff80000080daa7:	0f b6 d0             	movzx  edx,al
ffff80000080daaa:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080daae:	83 c0 06             	add    eax,0x6
ffff80000080dab1:	0f b7 c0             	movzx  eax,ax
ffff80000080dab4:	89 d6                	mov    esi,edx
ffff80000080dab6:	89 c7                	mov    edi,eax
ffff80000080dab8:	49 89 df             	mov    r15,rbx
ffff80000080dabb:	48 b8 b8 b4 ee ff ff 	movabs rax,0xffffffffffeeb4b8
ffff80000080dac2:	ff ff ff 
ffff80000080dac5:	48 01 d8             	add    rax,rbx
ffff80000080dac8:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:99 (discriminator 4)
    outb(port+7,DISK_CMD_READ);
ffff80000080daca:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080dace:	83 c0 07             	add    eax,0x7
ffff80000080dad1:	0f b7 c0             	movzx  eax,ax
ffff80000080dad4:	be 20 00 00 00       	mov    esi,0x20
ffff80000080dad9:	89 c7                	mov    edi,eax
ffff80000080dadb:	49 89 df             	mov    r15,rbx
ffff80000080dade:	48 b8 b8 b4 ee ff ff 	movabs rax,0xffffffffffeeb4b8
ffff80000080dae5:	ff ff ff 
ffff80000080dae8:	48 01 d8             	add    rax,rbx
ffff80000080daeb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:119 (discriminator 4)
    // }
    // for(int i=0;i<running_req->sec_n*256;i++)
    // {
    //     *mem_addr++=inw(port);
    // }
    return 0;
ffff80000080daed:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:120 (discriminator 4)
}
ffff80000080daf2:	48 83 c4 30          	add    rsp,0x30
ffff80000080daf6:	5b                   	pop    rbx
ffff80000080daf7:	41 5f                	pop    r15
ffff80000080daf9:	5d                   	pop    rbp
ffff80000080dafa:	c3                   	ret    

ffff80000080dafb <async_write_disk>:
async_write_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:122
int async_write_disk(int disk,unsigned int lba, int sec_n, char* mem_ptr)
{
ffff80000080dafb:	f3 0f 1e fa          	endbr64 
ffff80000080daff:	55                   	push   rbp
ffff80000080db00:	48 89 e5             	mov    rbp,rsp
ffff80000080db03:	41 57                	push   r15
ffff80000080db05:	53                   	push   rbx
ffff80000080db06:	48 83 ec 30          	sub    rsp,0x30
ffff80000080db0a:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080db0a <async_write_disk+0xf>
ffff80000080db11:	49 bb 0e ed 10 00 00 	movabs r11,0x10ed0e
ffff80000080db18:	00 00 00 
ffff80000080db1b:	4c 01 db             	add    rbx,r11
ffff80000080db1e:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff80000080db21:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080db24:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff80000080db27:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:123
    unsigned short port=PORT_DISK_MAJOR;
ffff80000080db2b:	66 c7 45 ee f0 01    	mov    WORD PTR [rbp-0x12],0x1f0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:124
    int slave_disk=0;
ffff80000080db31:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:125
    if(disk==DISK_SLAVE_MAJOR||disk==DISK_SLAVE_SLAVE)
ffff80000080db38:	83 7d dc 02          	cmp    DWORD PTR [rbp-0x24],0x2
ffff80000080db3c:	74 06                	je     ffff80000080db44 <async_write_disk+0x49>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:125 (discriminator 1)
ffff80000080db3e:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff80000080db42:	75 06                	jne    ffff80000080db4a <async_write_disk+0x4f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:126
        port=PORT_DISK_SLAVE;
ffff80000080db44:	66 c7 45 ee 70 01    	mov    WORD PTR [rbp-0x12],0x170
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:127
    if(disk==DISK_SLAVE_SLAVE||disk==DISK_MAJOR_SLAVE)
ffff80000080db4a:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff80000080db4e:	74 06                	je     ffff80000080db56 <async_write_disk+0x5b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:127 (discriminator 1)
ffff80000080db50:	83 7d dc 01          	cmp    DWORD PTR [rbp-0x24],0x1
ffff80000080db54:	75 07                	jne    ffff80000080db5d <async_write_disk+0x62>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:128
        slave_disk=1;
ffff80000080db56:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:131
    while (1)
    {
        byte t=inb(0x1f7);
ffff80000080db5d:	bf f7 00 00 00       	mov    edi,0xf7
ffff80000080db62:	49 89 df             	mov    r15,rbx
ffff80000080db65:	48 b8 d1 b4 ee ff ff 	movabs rax,0xffffffffffeeb4d1
ffff80000080db6c:	ff ff ff 
ffff80000080db6f:	48 01 d8             	add    rax,rbx
ffff80000080db72:	ff d0                	call   rax
ffff80000080db74:	88 45 e7             	mov    BYTE PTR [rbp-0x19],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:133
        //logf("istat:%x",t);
        byte err=t&1;
ffff80000080db77:	0f b6 45 e7          	movzx  eax,BYTE PTR [rbp-0x19]
ffff80000080db7b:	83 e0 01             	and    eax,0x1
ffff80000080db7e:	88 45 e6             	mov    BYTE PTR [rbp-0x1a],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:134
        if(err!=0)
ffff80000080db81:	80 7d e6 00          	cmp    BYTE PTR [rbp-0x1a],0x0
ffff80000080db85:	74 0a                	je     ffff80000080db91 <async_write_disk+0x96>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:137
        {
            //printf("ERR iwriting disk\n");
            return -1;
ffff80000080db87:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080db8c:	e9 23 01 00 00       	jmp    ffff80000080dcb4 <async_write_disk+0x1b9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:139
        }
        t&=0x88;
ffff80000080db91:	80 65 e7 88          	and    BYTE PTR [rbp-0x19],0x88
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:140
        if(t==0x8)break;
ffff80000080db95:	80 7d e7 08          	cmp    BYTE PTR [rbp-0x19],0x8
ffff80000080db99:	74 02                	je     ffff80000080db9d <async_write_disk+0xa2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:130
    {
ffff80000080db9b:	eb c0                	jmp    ffff80000080db5d <async_write_disk+0x62>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:140
        if(t==0x8)break;
ffff80000080db9d:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:142
    }
    outb(port+2,sec_n);
ffff80000080db9e:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080dba1:	0f b6 d0             	movzx  edx,al
ffff80000080dba4:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080dba8:	83 c0 02             	add    eax,0x2
ffff80000080dbab:	0f b7 c0             	movzx  eax,ax
ffff80000080dbae:	89 d6                	mov    esi,edx
ffff80000080dbb0:	89 c7                	mov    edi,eax
ffff80000080dbb2:	49 89 df             	mov    r15,rbx
ffff80000080dbb5:	48 b8 b8 b4 ee ff ff 	movabs rax,0xffffffffffeeb4b8
ffff80000080dbbc:	ff ff ff 
ffff80000080dbbf:	48 01 d8             	add    rax,rbx
ffff80000080dbc2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:143
    outb(port+3,lba&0xff);
ffff80000080dbc4:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080dbc7:	0f b6 d0             	movzx  edx,al
ffff80000080dbca:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080dbce:	83 c0 03             	add    eax,0x3
ffff80000080dbd1:	0f b7 c0             	movzx  eax,ax
ffff80000080dbd4:	89 d6                	mov    esi,edx
ffff80000080dbd6:	89 c7                	mov    edi,eax
ffff80000080dbd8:	49 89 df             	mov    r15,rbx
ffff80000080dbdb:	48 b8 b8 b4 ee ff ff 	movabs rax,0xffffffffffeeb4b8
ffff80000080dbe2:	ff ff ff 
ffff80000080dbe5:	48 01 d8             	add    rax,rbx
ffff80000080dbe8:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:144
    outb(port+4,(lba>>8)&0xff);
ffff80000080dbea:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080dbed:	c1 e8 08             	shr    eax,0x8
ffff80000080dbf0:	0f b6 d0             	movzx  edx,al
ffff80000080dbf3:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080dbf7:	83 c0 04             	add    eax,0x4
ffff80000080dbfa:	0f b7 c0             	movzx  eax,ax
ffff80000080dbfd:	89 d6                	mov    esi,edx
ffff80000080dbff:	89 c7                	mov    edi,eax
ffff80000080dc01:	49 89 df             	mov    r15,rbx
ffff80000080dc04:	48 b8 b8 b4 ee ff ff 	movabs rax,0xffffffffffeeb4b8
ffff80000080dc0b:	ff ff ff 
ffff80000080dc0e:	48 01 d8             	add    rax,rbx
ffff80000080dc11:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:145
    outb(port+5,(lba>>16)&0xff);
ffff80000080dc13:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080dc16:	c1 e8 10             	shr    eax,0x10
ffff80000080dc19:	0f b6 d0             	movzx  edx,al
ffff80000080dc1c:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080dc20:	83 c0 05             	add    eax,0x5
ffff80000080dc23:	0f b7 c0             	movzx  eax,ax
ffff80000080dc26:	89 d6                	mov    esi,edx
ffff80000080dc28:	89 c7                	mov    edi,eax
ffff80000080dc2a:	49 89 df             	mov    r15,rbx
ffff80000080dc2d:	48 b8 b8 b4 ee ff ff 	movabs rax,0xffffffffffeeb4b8
ffff80000080dc34:	ff ff ff 
ffff80000080dc37:	48 01 d8             	add    rax,rbx
ffff80000080dc3a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:146
    char drv=slave_disk?0x10:0;
ffff80000080dc3c:	83 7d e8 00          	cmp    DWORD PTR [rbp-0x18],0x0
ffff80000080dc40:	74 07                	je     ffff80000080dc49 <async_write_disk+0x14e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:146 (discriminator 1)
ffff80000080dc42:	b8 10 00 00 00       	mov    eax,0x10
ffff80000080dc47:	eb 05                	jmp    ffff80000080dc4e <async_write_disk+0x153>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:146 (discriminator 2)
ffff80000080dc49:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:146 (discriminator 4)
ffff80000080dc4e:	88 45 e5             	mov    BYTE PTR [rbp-0x1b],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:147 (discriminator 4)
    unsigned char lba_hi=(lba>>24)&0xf|drv|0xe0;
ffff80000080dc51:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080dc54:	c1 e8 18             	shr    eax,0x18
ffff80000080dc57:	83 e0 0f             	and    eax,0xf
ffff80000080dc5a:	89 c2                	mov    edx,eax
ffff80000080dc5c:	0f b6 45 e5          	movzx  eax,BYTE PTR [rbp-0x1b]
ffff80000080dc60:	09 d0                	or     eax,edx
ffff80000080dc62:	83 c8 e0             	or     eax,0xffffffe0
ffff80000080dc65:	88 45 e4             	mov    BYTE PTR [rbp-0x1c],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:148 (discriminator 4)
    outb(port+6,lba_hi);
ffff80000080dc68:	0f b6 55 e4          	movzx  edx,BYTE PTR [rbp-0x1c]
ffff80000080dc6c:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080dc70:	83 c0 06             	add    eax,0x6
ffff80000080dc73:	0f b7 c0             	movzx  eax,ax
ffff80000080dc76:	89 d6                	mov    esi,edx
ffff80000080dc78:	89 c7                	mov    edi,eax
ffff80000080dc7a:	49 89 df             	mov    r15,rbx
ffff80000080dc7d:	48 b8 b8 b4 ee ff ff 	movabs rax,0xffffffffffeeb4b8
ffff80000080dc84:	ff ff ff 
ffff80000080dc87:	48 01 d8             	add    rax,rbx
ffff80000080dc8a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:149 (discriminator 4)
    outb(port+7,DISK_CMD_WRITE);
ffff80000080dc8c:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080dc90:	83 c0 07             	add    eax,0x7
ffff80000080dc93:	0f b7 c0             	movzx  eax,ax
ffff80000080dc96:	be 30 00 00 00       	mov    esi,0x30
ffff80000080dc9b:	89 c7                	mov    edi,eax
ffff80000080dc9d:	49 89 df             	mov    r15,rbx
ffff80000080dca0:	48 b8 b8 b4 ee ff ff 	movabs rax,0xffffffffffeeb4b8
ffff80000080dca7:	ff ff ff 
ffff80000080dcaa:	48 01 d8             	add    rax,rbx
ffff80000080dcad:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:166 (discriminator 4)
    //     if(t==0x8)break;
    // }
    // short *p=mem_ptr;
    // for(int i=0;i<running_req->sec_n*256;i++)
    //         outw(port,*p++);
    return 0;
ffff80000080dcaf:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:167
}
ffff80000080dcb4:	48 83 c4 30          	add    rsp,0x30
ffff80000080dcb8:	5b                   	pop    rbx
ffff80000080dcb9:	41 5f                	pop    r15
ffff80000080dcbb:	5d                   	pop    rbp
ffff80000080dcbc:	c3                   	ret    

ffff80000080dcbd <read_disk>:
read_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:169
int read_disk(int disk, int lba, int secn, char *dest)
{
ffff80000080dcbd:	f3 0f 1e fa          	endbr64 
ffff80000080dcc1:	55                   	push   rbp
ffff80000080dcc2:	48 89 e5             	mov    rbp,rsp
ffff80000080dcc5:	41 57                	push   r15
ffff80000080dcc7:	53                   	push   rbx
ffff80000080dcc8:	48 83 ec 30          	sub    rsp,0x30
ffff80000080dccc:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080dccc <read_disk+0xf>
ffff80000080dcd3:	49 bb 4c eb 10 00 00 	movabs r11,0x10eb4c
ffff80000080dcda:	00 00 00 
ffff80000080dcdd:	4c 01 db             	add    rbx,r11
ffff80000080dce0:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff80000080dce3:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080dce6:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff80000080dce9:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:171
    // request(disk,DISKREQ_READ,lba,secn,dest);
    int ret=read_disk_asm(lba,secn,dest);
ffff80000080dced:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080dcf1:	8b 4d d4             	mov    ecx,DWORD PTR [rbp-0x2c]
ffff80000080dcf4:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080dcf7:	89 ce                	mov    esi,ecx
ffff80000080dcf9:	89 c7                	mov    edi,eax
ffff80000080dcfb:	49 89 df             	mov    r15,rbx
ffff80000080dcfe:	48 b8 54 18 ef ff ff 	movabs rax,0xffffffffffef1854
ffff80000080dd05:	ff ff ff 
ffff80000080dd08:	48 01 d8             	add    rax,rbx
ffff80000080dd0b:	ff d0                	call   rax
ffff80000080dd0d:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:179

        // running_req->stat=REQ_STAT_DONE;
        // running_req->args->stat=REQ_STAT_EMPTY;
    }
    //set_proc_stat(running_req->pid,TASK_READY);
    running_req=NULL;
ffff80000080dd10:	48 b8 d8 fe ff ff ff 	movabs rax,0xfffffffffffffed8
ffff80000080dd17:	ff ff ff 
ffff80000080dd1a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080dd1e:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:180
    return ret;
ffff80000080dd25:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:181
}
ffff80000080dd28:	48 83 c4 30          	add    rsp,0x30
ffff80000080dd2c:	5b                   	pop    rbx
ffff80000080dd2d:	41 5f                	pop    r15
ffff80000080dd2f:	5d                   	pop    rbp
ffff80000080dd30:	c3                   	ret    

ffff80000080dd31 <write_disk>:
write_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:183
int write_disk(int disk, int lba, int secn, char *src)
{
ffff80000080dd31:	f3 0f 1e fa          	endbr64 
ffff80000080dd35:	55                   	push   rbp
ffff80000080dd36:	48 89 e5             	mov    rbp,rsp
ffff80000080dd39:	41 57                	push   r15
ffff80000080dd3b:	53                   	push   rbx
ffff80000080dd3c:	48 83 ec 30          	sub    rsp,0x30
ffff80000080dd40:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080dd40 <write_disk+0xf>
ffff80000080dd47:	49 bb d8 ea 10 00 00 	movabs r11,0x10ead8
ffff80000080dd4e:	00 00 00 
ffff80000080dd51:	4c 01 db             	add    rbx,r11
ffff80000080dd54:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff80000080dd57:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080dd5a:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff80000080dd5d:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:185
    // request(disk,DISKREQ_WRITE,lba,secn,src);
    int ret=write_disk_asm(lba,secn,src);
ffff80000080dd61:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080dd65:	8b 4d d4             	mov    ecx,DWORD PTR [rbp-0x2c]
ffff80000080dd68:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080dd6b:	89 ce                	mov    esi,ecx
ffff80000080dd6d:	89 c7                	mov    edi,eax
ffff80000080dd6f:	49 89 df             	mov    r15,rbx
ffff80000080dd72:	48 b8 c8 18 ef ff ff 	movabs rax,0xffffffffffef18c8
ffff80000080dd79:	ff ff ff 
ffff80000080dd7c:	48 01 d8             	add    rax,rbx
ffff80000080dd7f:	ff d0                	call   rax
ffff80000080dd81:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:192
    if(running_req){

        // running_req->stat=REQ_STAT_DONE;
        // running_req->args->stat=REQ_STAT_EMPTY;
    }
    running_req=NULL;
ffff80000080dd84:	48 b8 d8 fe ff ff ff 	movabs rax,0xfffffffffffffed8
ffff80000080dd8b:	ff ff ff 
ffff80000080dd8e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080dd92:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:193
    return ret;
ffff80000080dd99:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:194
}
ffff80000080dd9c:	48 83 c4 30          	add    rsp,0x30
ffff80000080dda0:	5b                   	pop    rbx
ffff80000080dda1:	41 5f                	pop    r15
ffff80000080dda3:	5d                   	pop    rbp
ffff80000080dda4:	c3                   	ret    

ffff80000080dda5 <async_check_disk>:
async_check_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:198


int async_check_disk(int disk)
{
ffff80000080dda5:	f3 0f 1e fa          	endbr64 
ffff80000080dda9:	55                   	push   rbp
ffff80000080ddaa:	48 89 e5             	mov    rbp,rsp
ffff80000080ddad:	41 57                	push   r15
ffff80000080ddaf:	53                   	push   rbx
ffff80000080ddb0:	48 83 ec 20          	sub    rsp,0x20
ffff80000080ddb4:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080ddb4 <async_check_disk+0xf>
ffff80000080ddbb:	49 bb 64 ea 10 00 00 	movabs r11,0x10ea64
ffff80000080ddc2:	00 00 00 
ffff80000080ddc5:	4c 01 db             	add    rbx,r11
ffff80000080ddc8:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:199
    unsigned short disknr=PORT_DISK_MAJOR;
ffff80000080ddcb:	66 c7 45 ee f0 01    	mov    WORD PTR [rbp-0x12],0x1f0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:200
    unsigned short chkcmd=0xe0;
ffff80000080ddd1:	66 c7 45 ec e0 00    	mov    WORD PTR [rbp-0x14],0xe0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:201
    if(disk==DISK_SLAVE_MAJOR||disk==DISK_SLAVE_SLAVE)
ffff80000080ddd7:	83 7d dc 02          	cmp    DWORD PTR [rbp-0x24],0x2
ffff80000080dddb:	74 06                	je     ffff80000080dde3 <async_check_disk+0x3e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:201 (discriminator 1)
ffff80000080dddd:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff80000080dde1:	75 06                	jne    ffff80000080dde9 <async_check_disk+0x44>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:202
        disknr=PORT_DISK_SLAVE;
ffff80000080dde3:	66 c7 45 ee 70 01    	mov    WORD PTR [rbp-0x12],0x170
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:203
    if(disk==DISK_MAJOR_SLAVE||disk==DISK_SLAVE_SLAVE)
ffff80000080dde9:	83 7d dc 01          	cmp    DWORD PTR [rbp-0x24],0x1
ffff80000080dded:	74 06                	je     ffff80000080ddf5 <async_check_disk+0x50>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:203 (discriminator 1)
ffff80000080ddef:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff80000080ddf3:	75 06                	jne    ffff80000080ddfb <async_check_disk+0x56>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:204
        chkcmd=0xf0;
ffff80000080ddf5:	66 c7 45 ec f0 00    	mov    WORD PTR [rbp-0x14],0xf0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:205
    outb(disknr+2,1);
ffff80000080ddfb:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080ddff:	83 c0 02             	add    eax,0x2
ffff80000080de02:	0f b7 c0             	movzx  eax,ax
ffff80000080de05:	be 01 00 00 00       	mov    esi,0x1
ffff80000080de0a:	89 c7                	mov    edi,eax
ffff80000080de0c:	49 89 df             	mov    r15,rbx
ffff80000080de0f:	48 b8 b8 b4 ee ff ff 	movabs rax,0xffffffffffeeb4b8
ffff80000080de16:	ff ff ff 
ffff80000080de19:	48 01 d8             	add    rax,rbx
ffff80000080de1c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:206
    outb(disknr+3,0);
ffff80000080de1e:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080de22:	83 c0 03             	add    eax,0x3
ffff80000080de25:	0f b7 c0             	movzx  eax,ax
ffff80000080de28:	be 00 00 00 00       	mov    esi,0x0
ffff80000080de2d:	89 c7                	mov    edi,eax
ffff80000080de2f:	49 89 df             	mov    r15,rbx
ffff80000080de32:	48 b8 b8 b4 ee ff ff 	movabs rax,0xffffffffffeeb4b8
ffff80000080de39:	ff ff ff 
ffff80000080de3c:	48 01 d8             	add    rax,rbx
ffff80000080de3f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:207
    outb(disknr+4,0);
ffff80000080de41:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080de45:	83 c0 04             	add    eax,0x4
ffff80000080de48:	0f b7 c0             	movzx  eax,ax
ffff80000080de4b:	be 00 00 00 00       	mov    esi,0x0
ffff80000080de50:	89 c7                	mov    edi,eax
ffff80000080de52:	49 89 df             	mov    r15,rbx
ffff80000080de55:	48 b8 b8 b4 ee ff ff 	movabs rax,0xffffffffffeeb4b8
ffff80000080de5c:	ff ff ff 
ffff80000080de5f:	48 01 d8             	add    rax,rbx
ffff80000080de62:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:208
    outb(disknr+5,0);
ffff80000080de64:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080de68:	83 c0 05             	add    eax,0x5
ffff80000080de6b:	0f b7 c0             	movzx  eax,ax
ffff80000080de6e:	be 00 00 00 00       	mov    esi,0x0
ffff80000080de73:	89 c7                	mov    edi,eax
ffff80000080de75:	49 89 df             	mov    r15,rbx
ffff80000080de78:	48 b8 b8 b4 ee ff ff 	movabs rax,0xffffffffffeeb4b8
ffff80000080de7f:	ff ff ff 
ffff80000080de82:	48 01 d8             	add    rax,rbx
ffff80000080de85:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:209
    outb(disknr+6,chkcmd);//主硬盘
ffff80000080de87:	0f b7 45 ec          	movzx  eax,WORD PTR [rbp-0x14]
ffff80000080de8b:	0f b6 d0             	movzx  edx,al
ffff80000080de8e:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080de92:	83 c0 06             	add    eax,0x6
ffff80000080de95:	0f b7 c0             	movzx  eax,ax
ffff80000080de98:	89 d6                	mov    esi,edx
ffff80000080de9a:	89 c7                	mov    edi,eax
ffff80000080de9c:	49 89 df             	mov    r15,rbx
ffff80000080de9f:	48 b8 b8 b4 ee ff ff 	movabs rax,0xffffffffffeeb4b8
ffff80000080dea6:	ff ff ff 
ffff80000080dea9:	48 01 d8             	add    rax,rbx
ffff80000080deac:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:210
    outb(disknr+7,DISK_CMD_CHECK);
ffff80000080deae:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080deb2:	83 c0 07             	add    eax,0x7
ffff80000080deb5:	0f b7 c0             	movzx  eax,ax
ffff80000080deb8:	be 90 00 00 00       	mov    esi,0x90
ffff80000080debd:	89 c7                	mov    edi,eax
ffff80000080debf:	49 89 df             	mov    r15,rbx
ffff80000080dec2:	48 b8 b8 b4 ee ff ff 	movabs rax,0xffffffffffeeb4b8
ffff80000080dec9:	ff ff ff 
ffff80000080decc:	48 01 d8             	add    rax,rbx
ffff80000080decf:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:221
    //     // {
    //     //     printf("DISK ERR\n");
    //     //     return -1;
    //     // }
    // }
    return 0;
ffff80000080ded1:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:222
}
ffff80000080ded6:	48 83 c4 20          	add    rsp,0x20
ffff80000080deda:	5b                   	pop    rbx
ffff80000080dedb:	41 5f                	pop    r15
ffff80000080dedd:	5d                   	pop    rbp
ffff80000080dede:	c3                   	ret    

ffff80000080dedf <hd_do_req>:
hd_do_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:226

//接口函数：负责接收VFS的请求然后执行
int hd_do_req(struct request* req)
{
ffff80000080dedf:	f3 0f 1e fa          	endbr64 
ffff80000080dee3:	55                   	push   rbp
ffff80000080dee4:	48 89 e5             	mov    rbp,rsp
ffff80000080dee7:	41 57                	push   r15
ffff80000080dee9:	48 83 ec 28          	sub    rsp,0x28
ffff80000080deed:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080deed <hd_do_req+0xe>
ffff80000080def4:	49 bb 2b e9 10 00 00 	movabs r11,0x10e92b
ffff80000080defb:	00 00 00 
ffff80000080defe:	4c 01 d8             	add    rax,r11
ffff80000080df01:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:227
    if(!req)
ffff80000080df05:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff80000080df0a:	75 0a                	jne    ffff80000080df16 <hd_do_req+0x37>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:228
        return -1;
ffff80000080df0c:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080df11:	e9 35 01 00 00       	jmp    ffff80000080e04b <hd_do_req+0x16c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:229
    start_request(req->dev);
ffff80000080df16:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080df1a:	0f b7 12             	movzx  edx,WORD PTR [rdx]
ffff80000080df1d:	0f b7 d2             	movzx  edx,dx
ffff80000080df20:	66 89 55 ea          	mov    WORD PTR [rbp-0x16],dx
start_request():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:69
    wait_on_req(blk_devs[BLKDEV_MAJOR(dev)].current_request->waiting);
ffff80000080df24:	0f b7 55 ea          	movzx  edx,WORD PTR [rbp-0x16]
ffff80000080df28:	c1 fa 04             	sar    edx,0x4
ffff80000080df2b:	89 d1                	mov    ecx,edx
ffff80000080df2d:	83 e1 0f             	and    ecx,0xf
ffff80000080df30:	48 ba 98 ff ff ff ff 	movabs rdx,0xffffffffffffff98
ffff80000080df37:	ff ff ff 
ffff80000080df3a:	48 8b 34 10          	mov    rsi,QWORD PTR [rax+rdx*1]
ffff80000080df3e:	48 63 d1             	movsxd rdx,ecx
ffff80000080df41:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080df45:	48 01 f2             	add    rdx,rsi
ffff80000080df48:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff80000080df4c:	48 8b 52 2a          	mov    rdx,QWORD PTR [rdx+0x2a]
ffff80000080df50:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
wait_on_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:201
        if(p->stat==TASK_READY||p->stat==TASK_RUNNING)
ffff80000080df54:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080df58:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff80000080df5b:	83 fa 02             	cmp    edx,0x2
ffff80000080df5e:	74 0c                	je     ffff80000080df6c <hd_do_req+0x8d>
ffff80000080df60:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080df64:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff80000080df67:	83 fa 01             	cmp    edx,0x1
ffff80000080df6a:	75 0b                	jne    ffff80000080df77 <hd_do_req+0x98>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:202
            p->stat=TASK_SUSPENDED;
ffff80000080df6c:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080df70:	c7 42 18 03 00 00 00 	mov    DWORD PTR [rdx+0x18],0x3
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:203
}
ffff80000080df77:	90                   	nop
start_request():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:70
ffff80000080df78:	90                   	nop
hd_do_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:230
    int diski=BLKDEV_MINOR(req->dev);
ffff80000080df79:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080df7d:	0f b7 12             	movzx  edx,WORD PTR [rdx]
ffff80000080df80:	0f b7 d2             	movzx  edx,dx
ffff80000080df83:	83 e2 0f             	and    edx,0xf
ffff80000080df86:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:233
    // for(;disks[diski]!=args->dev;diski++);

    switch (req->cmd)
ffff80000080df89:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080df8d:	8b 52 02             	mov    edx,DWORD PTR [rdx+0x2]
ffff80000080df90:	83 fa 04             	cmp    edx,0x4
ffff80000080df93:	0f 84 8d 00 00 00    	je     ffff80000080e026 <hd_do_req+0x147>
ffff80000080df99:	83 fa 04             	cmp    edx,0x4
ffff80000080df9c:	0f 8f 9d 00 00 00    	jg     ffff80000080e03f <hd_do_req+0x160>
ffff80000080dfa2:	85 d2                	test   edx,edx
ffff80000080dfa4:	74 0a                	je     ffff80000080dfb0 <hd_do_req+0xd1>
ffff80000080dfa6:	83 fa 01             	cmp    edx,0x1
ffff80000080dfa9:	74 40                	je     ffff80000080dfeb <hd_do_req+0x10c>
ffff80000080dfab:	e9 8f 00 00 00       	jmp    ffff80000080e03f <hd_do_req+0x160>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:236
    {
    case BLKDEV_REQ_READ:
        async_read_disk(diski,req->sector,req->nr_sectors,req->buffer);
ffff80000080dfb0:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080dfb4:	48 8b 52 22          	mov    rdx,QWORD PTR [rdx+0x22]
ffff80000080dfb8:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff80000080dfbc:	48 8b 49 12          	mov    rcx,QWORD PTR [rcx+0x12]
ffff80000080dfc0:	41 89 c8             	mov    r8d,ecx
ffff80000080dfc3:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff80000080dfc7:	48 8b 49 0a          	mov    rcx,QWORD PTR [rcx+0xa]
ffff80000080dfcb:	89 ce                	mov    esi,ecx
ffff80000080dfcd:	8b 7d ec             	mov    edi,DWORD PTR [rbp-0x14]
ffff80000080dfd0:	48 89 d1             	mov    rcx,rdx
ffff80000080dfd3:	44 89 c2             	mov    edx,r8d
ffff80000080dfd6:	49 89 c7             	mov    r15,rax
ffff80000080dfd9:	49 b8 5f 11 ef ff ff 	movabs r8,0xffffffffffef115f
ffff80000080dfe0:	ff ff ff 
ffff80000080dfe3:	49 01 c0             	add    r8,rax
ffff80000080dfe6:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:237
        break;
ffff80000080dfe9:	eb 5b                	jmp    ffff80000080e046 <hd_do_req+0x167>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:239
    case BLKDEV_REQ_WRITE:
        async_write_disk(diski,req->sector,req->nr_sectors,req->buffer);
ffff80000080dfeb:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080dfef:	48 8b 52 22          	mov    rdx,QWORD PTR [rdx+0x22]
ffff80000080dff3:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff80000080dff7:	48 8b 49 12          	mov    rcx,QWORD PTR [rcx+0x12]
ffff80000080dffb:	41 89 c8             	mov    r8d,ecx
ffff80000080dffe:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff80000080e002:	48 8b 49 0a          	mov    rcx,QWORD PTR [rcx+0xa]
ffff80000080e006:	89 ce                	mov    esi,ecx
ffff80000080e008:	8b 7d ec             	mov    edi,DWORD PTR [rbp-0x14]
ffff80000080e00b:	48 89 d1             	mov    rcx,rdx
ffff80000080e00e:	44 89 c2             	mov    edx,r8d
ffff80000080e011:	49 89 c7             	mov    r15,rax
ffff80000080e014:	49 b8 e3 12 ef ff ff 	movabs r8,0xffffffffffef12e3
ffff80000080e01b:	ff ff ff 
ffff80000080e01e:	49 01 c0             	add    r8,rax
ffff80000080e021:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:240
        break;
ffff80000080e024:	eb 20                	jmp    ffff80000080e046 <hd_do_req+0x167>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:242
    case DRVF_CHK:
        async_check_disk(diski);
ffff80000080e026:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080e029:	89 d7                	mov    edi,edx
ffff80000080e02b:	49 89 c7             	mov    r15,rax
ffff80000080e02e:	48 ba 8d 15 ef ff ff 	movabs rdx,0xffffffffffef158d
ffff80000080e035:	ff ff ff 
ffff80000080e038:	48 01 c2             	add    rdx,rax
ffff80000080e03b:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:243
        break;
ffff80000080e03d:	eb 07                	jmp    ffff80000080e046 <hd_do_req+0x167>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:244
    default:return -1;
ffff80000080e03f:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080e044:	eb 05                	jmp    ffff80000080e04b <hd_do_req+0x16c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:246
    }
    return 0;
ffff80000080e046:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:247
ffff80000080e04b:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080e04f:	c9                   	leave  
ffff80000080e050:	c3                   	ret    
ffff80000080e051:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffff80000080e058:	00 00 00 
ffff80000080e05b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

ffff80000080e060 <disk_int_handler>:
disk_int_handler():
ffff80000080e060:	e8 99 9c ff ff       	call   ffff800000807cfe <eoi>
ffff80000080e065:	e8 39 f5 ff ff       	call   ffff80000080d5a3 <disk_int_handler_c>
ffff80000080e06a:	48 cf                	iretq  

ffff80000080e06c <read_disk_asm>:
read_disk_asm():
ffff80000080e06c:	55                   	push   rbp
ffff80000080e06d:	48 89 e5             	mov    rbp,rsp
ffff80000080e070:	66 ba f7 01          	mov    dx,0x1f7
ffff80000080e074:	31 c9                	xor    ecx,ecx
ffff80000080e076:	48 89 f8             	mov    rax,rdi
ffff80000080e079:	48 89 f1             	mov    rcx,rsi
ffff80000080e07c:	48 89 d3             	mov    rbx,rdx
ffff80000080e07f:	48 89 c6             	mov    rsi,rax
ffff80000080e082:	66 ba f2 01          	mov    dx,0x1f2
ffff80000080e086:	88 c8                	mov    al,cl
ffff80000080e088:	ee                   	out    dx,al
ffff80000080e089:	66 ba f3 01          	mov    dx,0x1f3
ffff80000080e08d:	89 f0                	mov    eax,esi
ffff80000080e08f:	ee                   	out    dx,al
ffff80000080e090:	66 ff c2             	inc    dx
ffff80000080e093:	c1 e8 08             	shr    eax,0x8
ffff80000080e096:	ee                   	out    dx,al
ffff80000080e097:	66 ff c2             	inc    dx
ffff80000080e09a:	c1 e8 08             	shr    eax,0x8
ffff80000080e09d:	ee                   	out    dx,al
ffff80000080e09e:	66 ff c2             	inc    dx
ffff80000080e0a1:	66 c1 e8 08          	shr    ax,0x8
ffff80000080e0a5:	24 0f                	and    al,0xf
ffff80000080e0a7:	0c e0                	or     al,0xe0
ffff80000080e0a9:	ee                   	out    dx,al
ffff80000080e0aa:	66 ff c2             	inc    dx
ffff80000080e0ad:	b0 20                	mov    al,0x20
ffff80000080e0af:	ee                   	out    dx,al

ffff80000080e0b0 <read_disk_asm.wait>:
read_disk_asm.wait():
ffff80000080e0b0:	90                   	nop
ffff80000080e0b1:	ec                   	in     al,dx
ffff80000080e0b2:	24 88                	and    al,0x88
ffff80000080e0b4:	3c 08                	cmp    al,0x8
ffff80000080e0b6:	75 f8                	jne    ffff80000080e0b0 <read_disk_asm.wait>
ffff80000080e0b8:	66 89 d7             	mov    di,dx
ffff80000080e0bb:	48 c1 e1 08          	shl    rcx,0x8
ffff80000080e0bf:	66 ba f0 01          	mov    dx,0x1f0

ffff80000080e0c3 <read_disk_asm.read>:
read_disk_asm.read():
ffff80000080e0c3:	66 ed                	in     ax,dx
ffff80000080e0c5:	66 89 03             	mov    WORD PTR [rbx],ax
ffff80000080e0c8:	48 83 c3 02          	add    rbx,0x2
ffff80000080e0cc:	e2 f5                	loop   ffff80000080e0c3 <read_disk_asm.read>
ffff80000080e0ce:	c9                   	leave  
ffff80000080e0cf:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e0d4:	c3                   	ret    

ffff80000080e0d5 <read_disk_asm.err_disk_reading>:
read_disk_asm.err_disk_reading():
ffff80000080e0d5:	66 ba f1 01          	mov    dx,0x1f1
ffff80000080e0d9:	48 31 c0             	xor    rax,rax
ffff80000080e0dc:	66 ed                	in     ax,dx
ffff80000080e0de:	c9                   	leave  
ffff80000080e0df:	c3                   	ret    

ffff80000080e0e0 <write_disk_asm>:
write_disk_asm():
ffff80000080e0e0:	55                   	push   rbp
ffff80000080e0e1:	48 89 e5             	mov    rbp,rsp
ffff80000080e0e4:	48 89 f8             	mov    rax,rdi
ffff80000080e0e7:	48 89 f1             	mov    rcx,rsi
ffff80000080e0ea:	48 89 d3             	mov    rbx,rdx
ffff80000080e0ed:	50                   	push   rax
ffff80000080e0ee:	66 ba f2 01          	mov    dx,0x1f2
ffff80000080e0f2:	88 c8                	mov    al,cl
ffff80000080e0f4:	ee                   	out    dx,al
ffff80000080e0f5:	58                   	pop    rax
ffff80000080e0f6:	66 ba f3 01          	mov    dx,0x1f3
ffff80000080e0fa:	ee                   	out    dx,al
ffff80000080e0fb:	c1 e8 08             	shr    eax,0x8
ffff80000080e0fe:	66 ba f4 01          	mov    dx,0x1f4
ffff80000080e102:	ee                   	out    dx,al
ffff80000080e103:	c1 e8 08             	shr    eax,0x8
ffff80000080e106:	66 ba f5 01          	mov    dx,0x1f5
ffff80000080e10a:	ee                   	out    dx,al
ffff80000080e10b:	c1 e8 08             	shr    eax,0x8
ffff80000080e10e:	24 0f                	and    al,0xf
ffff80000080e110:	0c e0                	or     al,0xe0
ffff80000080e112:	66 ba f6 01          	mov    dx,0x1f6
ffff80000080e116:	ee                   	out    dx,al
ffff80000080e117:	66 ba f7 01          	mov    dx,0x1f7
ffff80000080e11b:	b0 30                	mov    al,0x30
ffff80000080e11d:	ee                   	out    dx,al

ffff80000080e11e <write_disk_asm.not_ready2>:
write_disk_asm.not_ready2():
ffff80000080e11e:	90                   	nop
ffff80000080e11f:	ec                   	in     al,dx
ffff80000080e120:	24 88                	and    al,0x88
ffff80000080e122:	3c 08                	cmp    al,0x8
ffff80000080e124:	75 f8                	jne    ffff80000080e11e <write_disk_asm.not_ready2>
ffff80000080e126:	48 c1 e1 08          	shl    rcx,0x8
ffff80000080e12a:	66 ba f0 01          	mov    dx,0x1f0

ffff80000080e12e <write_disk_asm.go_on_write>:
write_disk_asm.go_on_write():
ffff80000080e12e:	66 8b 03             	mov    ax,WORD PTR [rbx]
ffff80000080e131:	66 ef                	out    dx,ax
ffff80000080e133:	83 c3 02             	add    ebx,0x2
ffff80000080e136:	e2 f6                	loop   ffff80000080e12e <write_disk_asm.go_on_write>
ffff80000080e138:	c9                   	leave  
ffff80000080e139:	c3                   	ret    

ffff80000080e13a <DISK1_FAT32_read_FAT_Entry>:
DISK1_FAT32_read_FAT_Entry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:15
#include "proc.h"
#include "devman.h"
#include <sys/unistd.h>

unsigned int DISK1_FAT32_read_FAT_Entry(struct FAT32_sb_info * fsbi,unsigned int fat_entry)
{
ffff80000080e13a:	f3 0f 1e fa          	endbr64 
ffff80000080e13e:	55                   	push   rbp
ffff80000080e13f:	48 89 e5             	mov    rbp,rsp
ffff80000080e142:	41 57                	push   r15
ffff80000080e144:	53                   	push   rbx
ffff80000080e145:	48 83 ec 20          	sub    rsp,0x20
ffff80000080e149:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080e149 <DISK1_FAT32_read_FAT_Entry+0xf>
ffff80000080e150:	49 bb cf e6 10 00 00 	movabs r11,0x10e6cf
ffff80000080e157:	00 00 00 
ffff80000080e15a:	4c 01 db             	add    rbx,r11
ffff80000080e15d:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff80000080e161:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:17
	unsigned int *buf;
	buffer_head *bh=bread(root_sb->dev,fsbi->FAT1_firstsector + (fat_entry >> 7));
ffff80000080e164:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080e168:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff80000080e16c:	89 c2                	mov    edx,eax
ffff80000080e16e:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080e171:	c1 e8 07             	shr    eax,0x7
ffff80000080e174:	01 d0                	add    eax,edx
ffff80000080e176:	89 c2                	mov    edx,eax
ffff80000080e178:	48 b8 10 fe ff ff ff 	movabs rax,0xfffffffffffffe10
ffff80000080e17f:	ff ff ff 
ffff80000080e182:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e186:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e189:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff80000080e18d:	0f b7 c0             	movzx  eax,ax
ffff80000080e190:	89 d6                	mov    esi,edx
ffff80000080e192:	89 c7                	mov    edi,eax
ffff80000080e194:	49 89 df             	mov    r15,rbx
ffff80000080e197:	48 b8 44 ff ee ff ff 	movabs rax,0xffffffffffeeff44
ffff80000080e19e:	ff ff ff 
ffff80000080e1a1:	48 01 d8             	add    rax,rbx
ffff80000080e1a4:	ff d0                	call   rax
ffff80000080e1a6:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:18
	buf=bh->data;
ffff80000080e1aa:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080e1ae:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e1b1:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:19
    printf("DISK1_FAT32_read_FAT_Entry fat_entry:%x,%#010x\n",fat_entry,buf[fat_entry & 0x7f]);
ffff80000080e1b5:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080e1b8:	83 e0 7f             	and    eax,0x7f
ffff80000080e1bb:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff80000080e1c2:	00 
ffff80000080e1c3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080e1c7:	48 01 d0             	add    rax,rdx
ffff80000080e1ca:	8b 10                	mov    edx,DWORD PTR [rax]
ffff80000080e1cc:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080e1cf:	89 c6                	mov    esi,eax
ffff80000080e1d1:	48 b8 08 dc ff ff ff 	movabs rax,0xffffffffffffdc08
ffff80000080e1d8:	ff ff ff 
ffff80000080e1db:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080e1df:	48 89 c7             	mov    rdi,rax
ffff80000080e1e2:	49 89 df             	mov    r15,rbx
ffff80000080e1e5:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e1ea:	48 b9 96 4e ee ff ff 	movabs rcx,0xffffffffffee4e96
ffff80000080e1f1:	ff ff ff 
ffff80000080e1f4:	48 01 d9             	add    rcx,rbx
ffff80000080e1f7:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:20
	brelse(bh);
ffff80000080e1f9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080e1fd:	48 89 c7             	mov    rdi,rax
ffff80000080e200:	49 89 df             	mov    r15,rbx
ffff80000080e203:	48 b8 72 05 ef ff ff 	movabs rax,0xffffffffffef0572
ffff80000080e20a:	ff ff ff 
ffff80000080e20d:	48 01 d8             	add    rax,rbx
ffff80000080e210:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:21
	return buf[fat_entry & 0x7f] & 0x0fffffff;
ffff80000080e212:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080e215:	83 e0 7f             	and    eax,0x7f
ffff80000080e218:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff80000080e21f:	00 
ffff80000080e220:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080e224:	48 01 d0             	add    rax,rdx
ffff80000080e227:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080e229:	25 ff ff ff 0f       	and    eax,0xfffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:22
}
ffff80000080e22e:	48 83 c4 20          	add    rsp,0x20
ffff80000080e232:	5b                   	pop    rbx
ffff80000080e233:	41 5f                	pop    r15
ffff80000080e235:	5d                   	pop    rbp
ffff80000080e236:	c3                   	ret    

ffff80000080e237 <DISK1_FAT32_write_FAT_Entry>:
DISK1_FAT32_write_FAT_Entry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:26


unsigned long DISK1_FAT32_write_FAT_Entry(struct FAT32_sb_info * fsbi,unsigned int fat_entry,unsigned int value)
{
ffff80000080e237:	f3 0f 1e fa          	endbr64 
ffff80000080e23b:	55                   	push   rbp
ffff80000080e23c:	48 89 e5             	mov    rbp,rsp
ffff80000080e23f:	41 57                	push   r15
ffff80000080e241:	53                   	push   rbx
ffff80000080e242:	48 83 ec 30          	sub    rsp,0x30
ffff80000080e246:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080e246 <DISK1_FAT32_write_FAT_Entry+0xf>
ffff80000080e24d:	49 bb d2 e5 10 00 00 	movabs r11,0x10e5d2
ffff80000080e254:	00 00 00 
ffff80000080e257:	4c 01 db             	add    rbx,r11
ffff80000080e25a:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff80000080e25e:	89 75 c4             	mov    DWORD PTR [rbp-0x3c],esi
ffff80000080e261:	89 55 c0             	mov    DWORD PTR [rbp-0x40],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:30
	unsigned int *buf;
	int i;

	buffer_head *bh=bread(root_sb->dev,fsbi->FAT1_firstsector + (fat_entry >> 7));
ffff80000080e264:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080e268:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff80000080e26c:	89 c2                	mov    edx,eax
ffff80000080e26e:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080e271:	c1 e8 07             	shr    eax,0x7
ffff80000080e274:	01 d0                	add    eax,edx
ffff80000080e276:	89 c2                	mov    edx,eax
ffff80000080e278:	48 b8 10 fe ff ff ff 	movabs rax,0xfffffffffffffe10
ffff80000080e27f:	ff ff ff 
ffff80000080e282:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e286:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e289:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff80000080e28d:	0f b7 c0             	movzx  eax,ax
ffff80000080e290:	89 d6                	mov    esi,edx
ffff80000080e292:	89 c7                	mov    edi,eax
ffff80000080e294:	49 89 df             	mov    r15,rbx
ffff80000080e297:	48 b8 44 ff ee ff ff 	movabs rax,0xffffffffffeeff44
ffff80000080e29e:	ff ff ff 
ffff80000080e2a1:	48 01 d8             	add    rax,rbx
ffff80000080e2a4:	ff d0                	call   rax
ffff80000080e2a6:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:31
	buf=bh->data;
ffff80000080e2aa:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080e2ae:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e2b1:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:32
    buf[fat_entry & 0x7f] = (buf[fat_entry & 0x7f] & 0xf0000000) | (value & 0x0fffffff);
ffff80000080e2b5:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080e2b8:	83 e0 7f             	and    eax,0x7f
ffff80000080e2bb:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff80000080e2c2:	00 
ffff80000080e2c3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080e2c7:	48 01 d0             	add    rax,rdx
ffff80000080e2ca:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080e2cc:	25 00 00 00 f0       	and    eax,0xf0000000
ffff80000080e2d1:	89 c1                	mov    ecx,eax
ffff80000080e2d3:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
ffff80000080e2d6:	25 ff ff ff 0f       	and    eax,0xfffffff
ffff80000080e2db:	89 c2                	mov    edx,eax
ffff80000080e2dd:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080e2e0:	83 e0 7f             	and    eax,0x7f
ffff80000080e2e3:	48 8d 34 85 00 00 00 	lea    rsi,[rax*4+0x0]
ffff80000080e2ea:	00 
ffff80000080e2eb:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080e2ef:	48 01 f0             	add    rax,rsi
ffff80000080e2f2:	09 ca                	or     edx,ecx
ffff80000080e2f4:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:34

	for(i = 0;i < fsbi->NumFATs;i++){
ffff80000080e2f6:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff80000080e2fd:	eb 6d                	jmp    ffff80000080e36c <DISK1_FAT32_write_FAT_Entry+0x135>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:35 (discriminator 3)
		off_t off=(fsbi->FAT1_firstsector + fsbi->sector_per_FAT * i + (fat_entry >> 7))*SECTOR_SIZE;
ffff80000080e2ff:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080e303:	48 8b 48 30          	mov    rcx,QWORD PTR [rax+0x30]
ffff80000080e307:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080e30b:	48 8b 50 38          	mov    rdx,QWORD PTR [rax+0x38]
ffff80000080e30f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080e312:	48 98                	cdqe   
ffff80000080e314:	48 0f af c2          	imul   rax,rdx
ffff80000080e318:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
ffff80000080e31c:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080e31f:	c1 e8 07             	shr    eax,0x7
ffff80000080e322:	89 c0                	mov    eax,eax
ffff80000080e324:	48 01 d0             	add    rax,rdx
ffff80000080e327:	c1 e0 09             	shl    eax,0x9
ffff80000080e32a:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:36 (discriminator 3)
		blkdev_write(root_sb->dev,off,SECTOR_SIZE,buf);
ffff80000080e32d:	48 b8 10 fe ff ff ff 	movabs rax,0xfffffffffffffe10
ffff80000080e334:	ff ff ff 
ffff80000080e337:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e33b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e33e:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff80000080e342:	0f b7 c0             	movzx  eax,ax
ffff80000080e345:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080e349:	8b 75 d4             	mov    esi,DWORD PTR [rbp-0x2c]
ffff80000080e34c:	48 89 d1             	mov    rcx,rdx
ffff80000080e34f:	ba 00 02 00 00       	mov    edx,0x200
ffff80000080e354:	89 c7                	mov    edi,eax
ffff80000080e356:	49 89 df             	mov    r15,rbx
ffff80000080e359:	48 b8 f7 03 ef ff ff 	movabs rax,0xffffffffffef03f7
ffff80000080e360:	ff ff ff 
ffff80000080e363:	48 01 d8             	add    rax,rbx
ffff80000080e366:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:34 (discriminator 3)
	for(i = 0;i < fsbi->NumFATs;i++){
ffff80000080e368:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:34 (discriminator 1)
ffff80000080e36c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080e36f:	48 63 d0             	movsxd rdx,eax
ffff80000080e372:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080e376:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080e37a:	48 39 c2             	cmp    rdx,rax
ffff80000080e37d:	72 80                	jb     ffff80000080e2ff <DISK1_FAT32_write_FAT_Entry+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:38
    }
	brelse(bh);
ffff80000080e37f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080e383:	48 89 c7             	mov    rdi,rax
ffff80000080e386:	49 89 df             	mov    r15,rbx
ffff80000080e389:	48 b8 72 05 ef ff ff 	movabs rax,0xffffffffffef0572
ffff80000080e390:	ff ff ff 
ffff80000080e393:	48 01 d8             	add    rax,rbx
ffff80000080e396:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:39
	return 1;
ffff80000080e398:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:40
}
ffff80000080e39d:	48 83 c4 30          	add    rsp,0x30
ffff80000080e3a1:	5b                   	pop    rbx
ffff80000080e3a2:	41 5f                	pop    r15
ffff80000080e3a4:	5d                   	pop    rbp
ffff80000080e3a5:	c3                   	ret    

ffff80000080e3a6 <FAT32_open>:
FAT32_open():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:44


long FAT32_open(struct index_node * inode,struct file * filp)
{
ffff80000080e3a6:	f3 0f 1e fa          	endbr64 
ffff80000080e3aa:	55                   	push   rbp
ffff80000080e3ab:	48 89 e5             	mov    rbp,rsp
ffff80000080e3ae:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080e3ae <FAT32_open+0x8>
ffff80000080e3b5:	49 bb 6a e4 10 00 00 	movabs r11,0x10e46a
ffff80000080e3bc:	00 00 00 
ffff80000080e3bf:	4c 01 d8             	add    rax,r11
ffff80000080e3c2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080e3c6:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:45
	return 1;
ffff80000080e3ca:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:46
}
ffff80000080e3cf:	5d                   	pop    rbp
ffff80000080e3d0:	c3                   	ret    

ffff80000080e3d1 <FAT32_close>:
FAT32_close():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:50


long FAT32_close(struct index_node * inode,struct file * filp)
{
ffff80000080e3d1:	f3 0f 1e fa          	endbr64 
ffff80000080e3d5:	55                   	push   rbp
ffff80000080e3d6:	48 89 e5             	mov    rbp,rsp
ffff80000080e3d9:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080e3d9 <FAT32_close+0x8>
ffff80000080e3e0:	49 bb 3f e4 10 00 00 	movabs r11,0x10e43f
ffff80000080e3e7:	00 00 00 
ffff80000080e3ea:	4c 01 d8             	add    rax,r11
ffff80000080e3ed:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080e3f1:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:51
	return 1;
ffff80000080e3f5:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:52
}
ffff80000080e3fa:	5d                   	pop    rbp
ffff80000080e3fb:	c3                   	ret    

ffff80000080e3fc <FAT32_read>:
FAT32_read():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:56


long FAT32_read(struct file * filp,char * buf,unsigned long count,long * position)
{
ffff80000080e3fc:	f3 0f 1e fa          	endbr64 
ffff80000080e400:	55                   	push   rbp
ffff80000080e401:	48 89 e5             	mov    rbp,rsp
ffff80000080e404:	41 57                	push   r15
ffff80000080e406:	53                   	push   rbx
ffff80000080e407:	48 83 ec 70          	sub    rsp,0x70
ffff80000080e40b:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080e40b <FAT32_read+0xf>
ffff80000080e412:	49 bb 0d e4 10 00 00 	movabs r11,0x10e40d
ffff80000080e419:	00 00 00 
ffff80000080e41c:	4c 01 db             	add    rbx,r11
ffff80000080e41f:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
ffff80000080e423:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
ffff80000080e427:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
ffff80000080e42b:	48 89 4d 80          	mov    QWORD PTR [rbp-0x80],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:57
	struct FAT32_inode_info * finode = filp->dentry->dir_inode->private_index_info;
ffff80000080e42f:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080e433:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080e437:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff80000080e43b:	48 8b 40 32          	mov    rax,QWORD PTR [rax+0x32]
ffff80000080e43f:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:58
	struct FAT32_sb_info * fsbi = filp->dentry->dir_inode->sb->private_sb_info;
ffff80000080e443:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080e447:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080e44b:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff80000080e44f:	48 8b 40 1a          	mov    rax,QWORD PTR [rax+0x1a]
ffff80000080e453:	48 8b 40 1a          	mov    rax,QWORD PTR [rax+0x1a]
ffff80000080e457:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:60

	unsigned long cluster = finode->first_cluster;
ffff80000080e45b:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080e45f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e462:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:61
	unsigned long sector = 0;
ffff80000080e466:	48 c7 45 b0 00 00 00 	mov    QWORD PTR [rbp-0x50],0x0
ffff80000080e46d:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:62
	int i,length = 0;
ffff80000080e46e:	c7 45 ac 00 00 00 00 	mov    DWORD PTR [rbp-0x54],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:63
	long retval = 0;
ffff80000080e475:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff80000080e47c:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:64
	int index = *position / fsbi->bytes_per_cluster;
ffff80000080e47d:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080e481:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e484:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000080e488:	48 8b 72 18          	mov    rsi,QWORD PTR [rdx+0x18]
ffff80000080e48c:	48 99                	cqo    
ffff80000080e48e:	48 f7 fe             	idiv   rsi
ffff80000080e491:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:65
	long offset = *position % fsbi->bytes_per_cluster;
ffff80000080e494:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080e498:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e49b:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000080e49f:	48 8b 4a 18          	mov    rcx,QWORD PTR [rdx+0x18]
ffff80000080e4a3:	48 99                	cqo    
ffff80000080e4a5:	48 f7 f9             	idiv   rcx
ffff80000080e4a8:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:66
	char * buffer = (char *) kmallocat(0,(fsbi->bytes_per_cluster+PAGE_4K_SIZE-1)/PAGE_4K_SIZE);
ffff80000080e4ac:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080e4b0:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080e4b4:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff80000080e4ba:	48 8d 90 ff 0f 00 00 	lea    rdx,[rax+0xfff]
ffff80000080e4c1:	48 85 c0             	test   rax,rax
ffff80000080e4c4:	48 0f 48 c2          	cmovs  rax,rdx
ffff80000080e4c8:	48 c1 f8 0c          	sar    rax,0xc
ffff80000080e4cc:	89 c6                	mov    esi,eax
ffff80000080e4ce:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080e4d3:	49 89 df             	mov    r15,rbx
ffff80000080e4d6:	48 b8 62 58 ee ff ff 	movabs rax,0xffffffffffee5862
ffff80000080e4dd:	ff ff ff 
ffff80000080e4e0:	48 01 d8             	add    rax,rbx
ffff80000080e4e3:	ff d0                	call   rax
ffff80000080e4e5:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:68

	if(!cluster)
ffff80000080e4e9:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080e4ee:	75 0c                	jne    ffff80000080e4fc <FAT32_read+0x100>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:69
		return -EFAULT;
ffff80000080e4f0:	48 c7 c0 eb ff ff ff 	mov    rax,0xffffffffffffffeb
ffff80000080e4f7:	e9 6d 02 00 00       	jmp    ffff80000080e769 <FAT32_read+0x36d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:70
	for(i = 0;i < index;i++)
ffff80000080e4fc:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff80000080e503:	eb 2b                	jmp    ffff80000080e530 <FAT32_read+0x134>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:71 (discriminator 3)
		cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff80000080e505:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080e509:	89 c2                	mov    edx,eax
ffff80000080e50b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080e50f:	89 d6                	mov    esi,edx
ffff80000080e511:	48 89 c7             	mov    rdi,rax
ffff80000080e514:	49 89 df             	mov    r15,rbx
ffff80000080e517:	48 b8 22 19 ef ff ff 	movabs rax,0xffffffffffef1922
ffff80000080e51e:	ff ff ff 
ffff80000080e521:	48 01 d8             	add    rax,rbx
ffff80000080e524:	ff d0                	call   rax
ffff80000080e526:	89 c0                	mov    eax,eax
ffff80000080e528:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:70 (discriminator 3)
	for(i = 0;i < index;i++)
ffff80000080e52c:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:70 (discriminator 1)
ffff80000080e530:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080e533:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
ffff80000080e536:	7c cd                	jl     ffff80000080e505 <FAT32_read+0x109>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:73

	if(*position + count > filp->dentry->dir_inode->file_size)
ffff80000080e538:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080e53c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e53f:	48 89 c2             	mov    rdx,rax
ffff80000080e542:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080e546:	48 01 c2             	add    rdx,rax
ffff80000080e549:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080e54d:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080e551:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff80000080e555:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e558:	48 39 c2             	cmp    rdx,rax
ffff80000080e55b:	76 2c                	jbe    ffff80000080e589 <FAT32_read+0x18d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:74
		index = count = filp->dentry->dir_inode->file_size - *position;
ffff80000080e55d:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080e561:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080e565:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff80000080e569:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080e56c:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080e570:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e573:	48 89 c1             	mov    rcx,rax
ffff80000080e576:	48 89 d0             	mov    rax,rdx
ffff80000080e579:	48 29 c8             	sub    rax,rcx
ffff80000080e57c:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
ffff80000080e580:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080e584:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
ffff80000080e587:	eb 07                	jmp    ffff80000080e590 <FAT32_read+0x194>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:76
	else
		index = count;
ffff80000080e589:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080e58d:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:82

//	printf("FAT32_read first_cluster:%d,size:%d,preempt_count:%d\n",finode->first_cluster,filp->dentry->dir_inode->file_size,current->preempt_count);

	do
	{
		memset(buffer,0,fsbi->bytes_per_cluster);
ffff80000080e590:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080e594:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080e598:	89 c2                	mov    edx,eax
ffff80000080e59a:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080e59e:	be 00 00 00 00       	mov    esi,0x0
ffff80000080e5a3:	48 89 c7             	mov    rdi,rax
ffff80000080e5a6:	49 89 df             	mov    r15,rbx
ffff80000080e5a9:	48 b8 6b 53 ef ff ff 	movabs rax,0xffffffffffef536b
ffff80000080e5b0:	ff ff ff 
ffff80000080e5b3:	48 01 d8             	add    rax,rbx
ffff80000080e5b6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:83
		sector = fsbi->Data_firstsector + (cluster - 2) * fsbi->sector_per_cluster;
ffff80000080e5b8:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080e5bc:	48 8b 48 28          	mov    rcx,QWORD PTR [rax+0x28]
ffff80000080e5c0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080e5c4:	48 8d 50 fe          	lea    rdx,[rax-0x2]
ffff80000080e5c8:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080e5cc:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080e5d0:	48 0f af c2          	imul   rax,rdx
ffff80000080e5d4:	48 01 c8             	add    rax,rcx
ffff80000080e5d7:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:84
		if(blkdev_read(filp->dentry->dir_inode->dev,sector*SECTOR_SIZE,fsbi->sector_per_cluster*SECTOR_SIZE,buffer)<0)
ffff80000080e5db:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080e5df:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080e5e3:	48 c1 e0 09          	shl    rax,0x9
ffff80000080e5e7:	48 89 c7             	mov    rdi,rax
ffff80000080e5ea:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080e5ee:	c1 e0 09             	shl    eax,0x9
ffff80000080e5f1:	89 c6                	mov    esi,eax
ffff80000080e5f3:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080e5f7:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080e5fb:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff80000080e5ff:	0f b7 40 18          	movzx  eax,WORD PTR [rax+0x18]
ffff80000080e603:	0f b7 c0             	movzx  eax,ax
ffff80000080e606:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
ffff80000080e60a:	48 89 d1             	mov    rcx,rdx
ffff80000080e60d:	48 89 fa             	mov    rdx,rdi
ffff80000080e610:	89 c7                	mov    edi,eax
ffff80000080e612:	49 89 df             	mov    r15,rbx
ffff80000080e615:	48 b8 7c 02 ef ff ff 	movabs rax,0xffffffffffef027c
ffff80000080e61c:	ff ff ff 
ffff80000080e61f:	48 01 d8             	add    rax,rbx
ffff80000080e622:	ff d0                	call   rax
ffff80000080e624:	85 c0                	test   eax,eax
ffff80000080e626:	79 35                	jns    ffff80000080e65d <FAT32_read+0x261>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:86
		{
			printf("FAT32 FS(read) read disk ERROR!!!!!!!!!!\n");
ffff80000080e628:	48 b8 38 dc ff ff ff 	movabs rax,0xffffffffffffdc38
ffff80000080e62f:	ff ff ff 
ffff80000080e632:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080e636:	48 89 c7             	mov    rdi,rax
ffff80000080e639:	49 89 df             	mov    r15,rbx
ffff80000080e63c:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e641:	48 ba 96 4e ee ff ff 	movabs rdx,0xffffffffffee4e96
ffff80000080e648:	ff ff ff 
ffff80000080e64b:	48 01 da             	add    rdx,rbx
ffff80000080e64e:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:87
			retval = -EIO;
ffff80000080e650:	48 c7 45 d8 e3 ff ff 	mov    QWORD PTR [rbp-0x28],0xffffffffffffffe3
ffff80000080e657:	ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:88
			break;
ffff80000080e658:	e9 e1 00 00 00       	jmp    ffff80000080e73e <FAT32_read+0x342>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:91
		}

		length = index <= fsbi->bytes_per_cluster - offset ? index : fsbi->bytes_per_cluster - offset;
ffff80000080e65d:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080e660:	48 63 d0             	movsxd rdx,eax
ffff80000080e663:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080e667:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080e66b:	48 2b 45 c8          	sub    rax,QWORD PTR [rbp-0x38]
ffff80000080e66f:	48 39 c2             	cmp    rdx,rax
ffff80000080e672:	48 0f 4e c2          	cmovle rax,rdx
ffff80000080e676:	89 45 ac             	mov    DWORD PTR [rbp-0x54],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:93

		if((unsigned long)buf < MAX_TASKS)
ffff80000080e679:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080e67d:	48 83 f8 1f          	cmp    rax,0x1f
ffff80000080e681:	77 2c                	ja     ffff80000080e6af <FAT32_read+0x2b3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:94
			memcpy(buffer + offset,buf,length);
ffff80000080e683:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
ffff80000080e686:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
ffff80000080e68a:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080e68e:	48 01 c1             	add    rcx,rax
ffff80000080e691:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080e695:	48 89 c6             	mov    rsi,rax
ffff80000080e698:	48 89 cf             	mov    rdi,rcx
ffff80000080e69b:	49 89 df             	mov    r15,rbx
ffff80000080e69e:	48 b8 bc 52 ef ff ff 	movabs rax,0xffffffffffef52bc
ffff80000080e6a5:	ff ff ff 
ffff80000080e6a8:	48 01 d8             	add    rax,rbx
ffff80000080e6ab:	ff d0                	call   rax
ffff80000080e6ad:	eb 2a                	jmp    ffff80000080e6d9 <FAT32_read+0x2dd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:96
		else
			memcpy(buffer + offset,buf,length);
ffff80000080e6af:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
ffff80000080e6b2:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
ffff80000080e6b6:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080e6ba:	48 01 c1             	add    rcx,rax
ffff80000080e6bd:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080e6c1:	48 89 c6             	mov    rsi,rax
ffff80000080e6c4:	48 89 cf             	mov    rdi,rcx
ffff80000080e6c7:	49 89 df             	mov    r15,rbx
ffff80000080e6ca:	48 b8 bc 52 ef ff ff 	movabs rax,0xffffffffffef52bc
ffff80000080e6d1:	ff ff ff 
ffff80000080e6d4:	48 01 d8             	add    rax,rbx
ffff80000080e6d7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:98

		index -= length;
ffff80000080e6d9:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
ffff80000080e6dc:	29 45 d4             	sub    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:99
		buf += length;
ffff80000080e6df:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
ffff80000080e6e2:	48 98                	cdqe   
ffff80000080e6e4:	48 01 45 90          	add    QWORD PTR [rbp-0x70],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:100
		offset -= offset;
ffff80000080e6e8:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff80000080e6ef:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:101
		*position += length;
ffff80000080e6f0:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080e6f4:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080e6f7:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
ffff80000080e6fa:	48 98                	cdqe   
ffff80000080e6fc:	48 01 c2             	add    rdx,rax
ffff80000080e6ff:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080e703:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:102
	}while(index && (cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster)));
ffff80000080e706:	83 7d d4 00          	cmp    DWORD PTR [rbp-0x2c],0x0
ffff80000080e70a:	74 32                	je     ffff80000080e73e <FAT32_read+0x342>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:102 (discriminator 1)
ffff80000080e70c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080e710:	89 c2                	mov    edx,eax
ffff80000080e712:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080e716:	89 d6                	mov    esi,edx
ffff80000080e718:	48 89 c7             	mov    rdi,rax
ffff80000080e71b:	49 89 df             	mov    r15,rbx
ffff80000080e71e:	48 b8 22 19 ef ff ff 	movabs rax,0xffffffffffef1922
ffff80000080e725:	ff ff ff 
ffff80000080e728:	48 01 d8             	add    rax,rbx
ffff80000080e72b:	ff d0                	call   rax
ffff80000080e72d:	89 c0                	mov    eax,eax
ffff80000080e72f:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff80000080e733:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080e738:	0f 85 52 fe ff ff    	jne    ffff80000080e590 <FAT32_read+0x194>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:104

    kmfree(buffer);
ffff80000080e73e:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080e742:	48 89 c7             	mov    rdi,rax
ffff80000080e745:	49 89 df             	mov    r15,rbx
ffff80000080e748:	48 b8 d7 5a ee ff ff 	movabs rax,0xffffffffffee5ad7
ffff80000080e74f:	ff ff ff 
ffff80000080e752:	48 01 d8             	add    rax,rbx
ffff80000080e755:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:105
	if(!index)
ffff80000080e757:	83 7d d4 00          	cmp    DWORD PTR [rbp-0x2c],0x0
ffff80000080e75b:	75 08                	jne    ffff80000080e765 <FAT32_read+0x369>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:106
		retval = count;
ffff80000080e75d:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080e761:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:107
	return retval;
ffff80000080e765:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:108
}
ffff80000080e769:	48 83 c4 70          	add    rsp,0x70
ffff80000080e76d:	5b                   	pop    rbx
ffff80000080e76e:	41 5f                	pop    r15
ffff80000080e770:	5d                   	pop    rbp
ffff80000080e771:	c3                   	ret    

ffff80000080e772 <FAT32_find_available_cluster>:
FAT32_find_available_cluster():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:112


unsigned long FAT32_find_available_cluster(struct FAT32_sb_info * fsbi)
{
ffff80000080e772:	f3 0f 1e fa          	endbr64 
ffff80000080e776:	55                   	push   rbp
ffff80000080e777:	48 89 e5             	mov    rbp,rsp
ffff80000080e77a:	41 57                	push   r15
ffff80000080e77c:	53                   	push   rbx
ffff80000080e77d:	48 81 ec 20 02 00 00 	sub    rsp,0x220
ffff80000080e784:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080e784 <FAT32_find_available_cluster+0x12>
ffff80000080e78b:	49 bb 94 e0 10 00 00 	movabs r11,0x10e094
ffff80000080e792:	00 00 00 
ffff80000080e795:	4c 01 db             	add    rbx,r11
ffff80000080e798:	48 89 bd d8 fd ff ff 	mov    QWORD PTR [rbp-0x228],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:115
	int i,j;
	int fat_entry;
	unsigned long sector_per_fat = fsbi->sector_per_FAT;
ffff80000080e79f:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffff80000080e7a6:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff80000080e7aa:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:120
	unsigned int buf[128];

//	fsbi->fat_fsinfo->FSI_Free_Count & fsbi->fat_fsinfo->FSI_Nxt_Free not exactly,so unuse

	for(i = 0;i < sector_per_fat;i++)
ffff80000080e7ae:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff80000080e7b5:	e9 b6 00 00 00       	jmp    ffff80000080e870 <FAT32_find_available_cluster+0xfe>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:122
	{
		memset(buf,0,512);
ffff80000080e7ba:	48 8d 85 e0 fd ff ff 	lea    rax,[rbp-0x220]
ffff80000080e7c1:	ba 00 02 00 00       	mov    edx,0x200
ffff80000080e7c6:	be 00 00 00 00       	mov    esi,0x0
ffff80000080e7cb:	48 89 c7             	mov    rdi,rax
ffff80000080e7ce:	49 89 df             	mov    r15,rbx
ffff80000080e7d1:	48 b8 6b 53 ef ff ff 	movabs rax,0xffffffffffef536b
ffff80000080e7d8:	ff ff ff 
ffff80000080e7db:	48 01 d8             	add    rax,rbx
ffff80000080e7de:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:123
		blkdev_read(root_sb->dev,(fsbi->FAT1_firstsector + i)*SECTOR_SIZE,SECTOR_SIZE,buf);
ffff80000080e7e0:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffff80000080e7e7:	48 8b 50 30          	mov    rdx,QWORD PTR [rax+0x30]
ffff80000080e7eb:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080e7ee:	48 98                	cdqe   
ffff80000080e7f0:	48 01 d0             	add    rax,rdx
ffff80000080e7f3:	c1 e0 09             	shl    eax,0x9
ffff80000080e7f6:	89 c6                	mov    esi,eax
ffff80000080e7f8:	48 b8 10 fe ff ff ff 	movabs rax,0xfffffffffffffe10
ffff80000080e7ff:	ff ff ff 
ffff80000080e802:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e806:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e809:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff80000080e80d:	0f b7 c0             	movzx  eax,ax
ffff80000080e810:	48 8d 95 e0 fd ff ff 	lea    rdx,[rbp-0x220]
ffff80000080e817:	48 89 d1             	mov    rcx,rdx
ffff80000080e81a:	ba 00 02 00 00       	mov    edx,0x200
ffff80000080e81f:	89 c7                	mov    edi,eax
ffff80000080e821:	49 89 df             	mov    r15,rbx
ffff80000080e824:	48 b8 7c 02 ef ff ff 	movabs rax,0xffffffffffef027c
ffff80000080e82b:	ff ff ff 
ffff80000080e82e:	48 01 d8             	add    rax,rbx
ffff80000080e831:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:125

		for(j = 0;j < 128;j++)
ffff80000080e833:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff80000080e83a:	eb 2a                	jmp    ffff80000080e866 <FAT32_find_available_cluster+0xf4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:127
		{
			if((buf[j] & 0x0fffffff) == 0)
ffff80000080e83c:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080e83f:	48 98                	cdqe   
ffff80000080e841:	8b 84 85 e0 fd ff ff 	mov    eax,DWORD PTR [rbp+rax*4-0x220]
ffff80000080e848:	25 ff ff ff 0f       	and    eax,0xfffffff
ffff80000080e84d:	85 c0                	test   eax,eax
ffff80000080e84f:	75 11                	jne    ffff80000080e862 <FAT32_find_available_cluster+0xf0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:128
				return (i << 7) + j;
ffff80000080e851:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080e854:	c1 e0 07             	shl    eax,0x7
ffff80000080e857:	89 c2                	mov    edx,eax
ffff80000080e859:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080e85c:	01 d0                	add    eax,edx
ffff80000080e85e:	48 98                	cdqe   
ffff80000080e860:	eb 22                	jmp    ffff80000080e884 <FAT32_find_available_cluster+0x112>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:125 (discriminator 2)
		for(j = 0;j < 128;j++)
ffff80000080e862:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:125 (discriminator 1)
ffff80000080e866:	83 7d e8 7f          	cmp    DWORD PTR [rbp-0x18],0x7f
ffff80000080e86a:	7e d0                	jle    ffff80000080e83c <FAT32_find_available_cluster+0xca>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:120 (discriminator 2)
	for(i = 0;i < sector_per_fat;i++)
ffff80000080e86c:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:120 (discriminator 1)
ffff80000080e870:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080e873:	48 98                	cdqe   
ffff80000080e875:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
ffff80000080e879:	0f 87 3b ff ff ff    	ja     ffff80000080e7ba <FAT32_find_available_cluster+0x48>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:131
		}
	}
	return 0;
ffff80000080e87f:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:132 (discriminator 1)
}
ffff80000080e884:	48 81 c4 20 02 00 00 	add    rsp,0x220
ffff80000080e88b:	5b                   	pop    rbx
ffff80000080e88c:	41 5f                	pop    r15
ffff80000080e88e:	5d                   	pop    rbp
ffff80000080e88f:	c3                   	ret    

ffff80000080e890 <FAT32_write>:
FAT32_write():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:136


long FAT32_write(struct file * filp,char * buf,unsigned long count,long * position)
{
ffff80000080e890:	f3 0f 1e fa          	endbr64 
ffff80000080e894:	55                   	push   rbp
ffff80000080e895:	48 89 e5             	mov    rbp,rsp
ffff80000080e898:	41 57                	push   r15
ffff80000080e89a:	53                   	push   rbx
ffff80000080e89b:	48 83 c4 80          	add    rsp,0xffffffffffffff80
ffff80000080e89f:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080e89f <FAT32_write+0xf>
ffff80000080e8a6:	49 bb 79 df 10 00 00 	movabs r11,0x10df79
ffff80000080e8ad:	00 00 00 
ffff80000080e8b0:	4c 01 db             	add    rbx,r11
ffff80000080e8b3:	48 89 7d 88          	mov    QWORD PTR [rbp-0x78],rdi
ffff80000080e8b7:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
ffff80000080e8bb:	48 89 95 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdx
ffff80000080e8c2:	48 89 8d 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:137
	struct FAT32_inode_info * finode = filp->dentry->dir_inode->private_index_info;
ffff80000080e8c9:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080e8cd:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080e8d1:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff80000080e8d5:	48 8b 40 32          	mov    rax,QWORD PTR [rax+0x32]
ffff80000080e8d9:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:138
	struct FAT32_sb_info * fsbi = filp->dentry->dir_inode->sb->private_sb_info;
ffff80000080e8dd:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080e8e1:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080e8e5:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff80000080e8e9:	48 8b 40 1a          	mov    rax,QWORD PTR [rax+0x1a]
ffff80000080e8ed:	48 8b 40 1a          	mov    rax,QWORD PTR [rax+0x1a]
ffff80000080e8f1:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:140

	unsigned long cluster = finode->first_cluster;
ffff80000080e8f5:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080e8f9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e8fc:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:141
	unsigned long next_cluster = 0;
ffff80000080e900:	48 c7 45 a0 00 00 00 	mov    QWORD PTR [rbp-0x60],0x0
ffff80000080e907:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:142
	unsigned long sector = 0;
ffff80000080e908:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff80000080e90f:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:143
	int i,length = 0;
ffff80000080e910:	c7 45 9c 00 00 00 00 	mov    DWORD PTR [rbp-0x64],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:144
	long retval = 0;
ffff80000080e917:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff80000080e91e:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:145
	long flags = 0;
ffff80000080e91f:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff80000080e926:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:146
	int index = *position / fsbi->bytes_per_cluster;
ffff80000080e927:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080e92e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e931:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff80000080e935:	48 8b 72 18          	mov    rsi,QWORD PTR [rdx+0x18]
ffff80000080e939:	48 99                	cqo    
ffff80000080e93b:	48 f7 fe             	idiv   rsi
ffff80000080e93e:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:147
	long offset = *position % fsbi->bytes_per_cluster;
ffff80000080e941:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080e948:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e94b:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff80000080e94f:	48 8b 4a 18          	mov    rcx,QWORD PTR [rdx+0x18]
ffff80000080e953:	48 99                	cqo    
ffff80000080e955:	48 f7 f9             	idiv   rcx
ffff80000080e958:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:148
	char * buffer = (char *) kmalloc(fsbi->bytes_per_cluster, 0);
ffff80000080e95c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080e960:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080e964:	be 00 00 00 00       	mov    esi,0x0
ffff80000080e969:	48 89 c7             	mov    rdi,rax
ffff80000080e96c:	49 89 df             	mov    r15,rbx
ffff80000080e96f:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e974:	48 ba 68 57 ee ff ff 	movabs rdx,0xffffffffffee5768
ffff80000080e97b:	ff ff ff 
ffff80000080e97e:	48 01 da             	add    rdx,rbx
ffff80000080e981:	ff d2                	call   rdx
ffff80000080e983:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:150

	if(!cluster)
ffff80000080e987:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080e98c:	75 27                	jne    ffff80000080e9b5 <FAT32_write+0x125>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:152
	{
		cluster = FAT32_find_available_cluster(fsbi);
ffff80000080e98e:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080e992:	48 89 c7             	mov    rdi,rax
ffff80000080e995:	49 89 df             	mov    r15,rbx
ffff80000080e998:	48 b8 5a 1f ef ff ff 	movabs rax,0xffffffffffef1f5a
ffff80000080e99f:	ff ff ff 
ffff80000080e9a2:	48 01 d8             	add    rax,rbx
ffff80000080e9a5:	ff d0                	call   rax
ffff80000080e9a7:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:153
		flags = 1;
ffff80000080e9ab:	48 c7 45 c8 01 00 00 	mov    QWORD PTR [rbp-0x38],0x1
ffff80000080e9b2:	00 
ffff80000080e9b3:	eb 3c                	jmp    ffff80000080e9f1 <FAT32_write+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:156
	}
	else
		for(i = 0;i < index;i++)
ffff80000080e9b5:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
ffff80000080e9bc:	eb 2b                	jmp    ffff80000080e9e9 <FAT32_write+0x159>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:157 (discriminator 3)
			cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff80000080e9be:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080e9c2:	89 c2                	mov    edx,eax
ffff80000080e9c4:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080e9c8:	89 d6                	mov    esi,edx
ffff80000080e9ca:	48 89 c7             	mov    rdi,rax
ffff80000080e9cd:	49 89 df             	mov    r15,rbx
ffff80000080e9d0:	48 b8 22 19 ef ff ff 	movabs rax,0xffffffffffef1922
ffff80000080e9d7:	ff ff ff 
ffff80000080e9da:	48 01 d8             	add    rax,rbx
ffff80000080e9dd:	ff d0                	call   rax
ffff80000080e9df:	89 c0                	mov    eax,eax
ffff80000080e9e1:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:156 (discriminator 3)
		for(i = 0;i < index;i++)
ffff80000080e9e5:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:156 (discriminator 1)
ffff80000080e9e9:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080e9ec:	3b 45 c4             	cmp    eax,DWORD PTR [rbp-0x3c]
ffff80000080e9ef:	7c cd                	jl     ffff80000080e9be <FAT32_write+0x12e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:159

	if(!cluster)
ffff80000080e9f1:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080e9f6:	75 25                	jne    ffff80000080ea1d <FAT32_write+0x18d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:161
	{
        kmfree(buffer);
ffff80000080e9f8:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080e9fc:	48 89 c7             	mov    rdi,rax
ffff80000080e9ff:	49 89 df             	mov    r15,rbx
ffff80000080ea02:	48 b8 d7 5a ee ff ff 	movabs rax,0xffffffffffee5ad7
ffff80000080ea09:	ff ff ff 
ffff80000080ea0c:	48 01 d8             	add    rax,rbx
ffff80000080ea0f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:162
		return -ENOSPC;
ffff80000080ea11:	48 c7 c0 cc ff ff ff 	mov    rax,0xffffffffffffffcc
ffff80000080ea18:	e9 f7 03 00 00       	jmp    ffff80000080ee14 <FAT32_write+0x584>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:165
	}

	if(flags)
ffff80000080ea1d:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffff80000080ea22:	74 5a                	je     ffff80000080ea7e <FAT32_write+0x1ee>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:167
	{
		finode->first_cluster = cluster;
ffff80000080ea24:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080ea28:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080ea2c:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:168
		filp->dentry->dir_inode->sb->sb_ops->write_inode(filp->dentry->dir_inode);
ffff80000080ea2f:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080ea33:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080ea37:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff80000080ea3b:	48 8b 40 1a          	mov    rax,QWORD PTR [rax+0x1a]
ffff80000080ea3f:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080ea43:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080ea47:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080ea4b:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080ea4f:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff80000080ea53:	48 89 c7             	mov    rdi,rax
ffff80000080ea56:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:169
		DISK1_FAT32_write_FAT_Entry(fsbi,cluster,0x0ffffff8);
ffff80000080ea58:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080ea5c:	89 c1                	mov    ecx,eax
ffff80000080ea5e:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080ea62:	ba f8 ff ff 0f       	mov    edx,0xffffff8
ffff80000080ea67:	89 ce                	mov    esi,ecx
ffff80000080ea69:	48 89 c7             	mov    rdi,rax
ffff80000080ea6c:	49 89 df             	mov    r15,rbx
ffff80000080ea6f:	48 b8 1f 1a ef ff ff 	movabs rax,0xffffffffffef1a1f
ffff80000080ea76:	ff ff ff 
ffff80000080ea79:	48 01 d8             	add    rax,rbx
ffff80000080ea7c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:172
	}

	index = count;
ffff80000080ea7e:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff80000080ea85:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:176

	do
	{
		if(!flags)
ffff80000080ea88:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffff80000080ea8d:	0f 85 cd 00 00 00    	jne    ffff80000080eb60 <FAT32_write+0x2d0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:178
		{
			memset(buffer,0,fsbi->bytes_per_cluster);
ffff80000080ea93:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080ea97:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080ea9b:	89 c2                	mov    edx,eax
ffff80000080ea9d:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080eaa1:	be 00 00 00 00       	mov    esi,0x0
ffff80000080eaa6:	48 89 c7             	mov    rdi,rax
ffff80000080eaa9:	49 89 df             	mov    r15,rbx
ffff80000080eaac:	48 b8 6b 53 ef ff ff 	movabs rax,0xffffffffffef536b
ffff80000080eab3:	ff ff ff 
ffff80000080eab6:	48 01 d8             	add    rax,rbx
ffff80000080eab9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:179
			sector = fsbi->Data_firstsector + (cluster - 2) * fsbi->sector_per_cluster;
ffff80000080eabb:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080eabf:	48 8b 48 28          	mov    rcx,QWORD PTR [rax+0x28]
ffff80000080eac3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080eac7:	48 8d 50 fe          	lea    rdx,[rax-0x2]
ffff80000080eacb:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080eacf:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080ead3:	48 0f af c2          	imul   rax,rdx
ffff80000080ead7:	48 01 c8             	add    rax,rcx
ffff80000080eada:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:181
			
			if(blkdev_read(filp->dentry->dir_inode->dev,sector*SECTOR_SIZE,fsbi->sector_per_cluster*SECTOR_SIZE,buffer)<0)
ffff80000080eade:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080eae2:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080eae6:	48 c1 e0 09          	shl    rax,0x9
ffff80000080eaea:	48 89 c7             	mov    rdi,rax
ffff80000080eaed:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080eaf1:	c1 e0 09             	shl    eax,0x9
ffff80000080eaf4:	89 c6                	mov    esi,eax
ffff80000080eaf6:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080eafa:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080eafe:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff80000080eb02:	0f b7 40 18          	movzx  eax,WORD PTR [rax+0x18]
ffff80000080eb06:	0f b7 c0             	movzx  eax,ax
ffff80000080eb09:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
ffff80000080eb0d:	48 89 d1             	mov    rcx,rdx
ffff80000080eb10:	48 89 fa             	mov    rdx,rdi
ffff80000080eb13:	89 c7                	mov    edi,eax
ffff80000080eb15:	49 89 df             	mov    r15,rbx
ffff80000080eb18:	48 b8 7c 02 ef ff ff 	movabs rax,0xffffffffffef027c
ffff80000080eb1f:	ff ff ff 
ffff80000080eb22:	48 01 d8             	add    rax,rbx
ffff80000080eb25:	ff d0                	call   rax
ffff80000080eb27:	85 c0                	test   eax,eax
ffff80000080eb29:	79 35                	jns    ffff80000080eb60 <FAT32_write+0x2d0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:183
			{
				printf("FAT32 FS(write) read disk ERROR!!!!!!!!!!\n");
ffff80000080eb2b:	48 b8 68 dc ff ff ff 	movabs rax,0xffffffffffffdc68
ffff80000080eb32:	ff ff ff 
ffff80000080eb35:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080eb39:	48 89 c7             	mov    rdi,rax
ffff80000080eb3c:	49 89 df             	mov    r15,rbx
ffff80000080eb3f:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080eb44:	48 ba 96 4e ee ff ff 	movabs rdx,0xffffffffffee4e96
ffff80000080eb4b:	ff ff ff 
ffff80000080eb4e:	48 01 da             	add    rdx,rbx
ffff80000080eb51:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:184
				retval = -EIO;
ffff80000080eb53:	48 c7 45 d0 e3 ff ff 	mov    QWORD PTR [rbp-0x30],0xffffffffffffffe3
ffff80000080eb5a:	ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:185
				break;
ffff80000080eb5b:	e9 23 02 00 00       	jmp    ffff80000080ed83 <FAT32_write+0x4f3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:189
			}
		}

		length = index <= fsbi->bytes_per_cluster - offset ? index : fsbi->bytes_per_cluster - offset;
ffff80000080eb60:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080eb63:	48 63 d0             	movsxd rdx,eax
ffff80000080eb66:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080eb6a:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080eb6e:	48 2b 45 b8          	sub    rax,QWORD PTR [rbp-0x48]
ffff80000080eb72:	48 39 c2             	cmp    rdx,rax
ffff80000080eb75:	48 0f 4e c2          	cmovle rax,rdx
ffff80000080eb79:	89 45 9c             	mov    DWORD PTR [rbp-0x64],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:191

		if((unsigned long)buf < MAX_TASKS)
ffff80000080eb7c:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080eb80:	48 83 f8 1f          	cmp    rax,0x1f
ffff80000080eb84:	77 2c                	ja     ffff80000080ebb2 <FAT32_write+0x322>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:192
			memcpy(buf,buffer + offset,length);
ffff80000080eb86:	8b 55 9c             	mov    edx,DWORD PTR [rbp-0x64]
ffff80000080eb89:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
ffff80000080eb8d:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080eb91:	48 01 c1             	add    rcx,rax
ffff80000080eb94:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080eb98:	48 89 ce             	mov    rsi,rcx
ffff80000080eb9b:	48 89 c7             	mov    rdi,rax
ffff80000080eb9e:	49 89 df             	mov    r15,rbx
ffff80000080eba1:	48 b8 bc 52 ef ff ff 	movabs rax,0xffffffffffef52bc
ffff80000080eba8:	ff ff ff 
ffff80000080ebab:	48 01 d8             	add    rax,rbx
ffff80000080ebae:	ff d0                	call   rax
ffff80000080ebb0:	eb 2a                	jmp    ffff80000080ebdc <FAT32_write+0x34c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:194
		else
			memcpy(buf,buffer + offset,length);
ffff80000080ebb2:	8b 55 9c             	mov    edx,DWORD PTR [rbp-0x64]
ffff80000080ebb5:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
ffff80000080ebb9:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080ebbd:	48 01 c1             	add    rcx,rax
ffff80000080ebc0:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080ebc4:	48 89 ce             	mov    rsi,rcx
ffff80000080ebc7:	48 89 c7             	mov    rdi,rax
ffff80000080ebca:	49 89 df             	mov    r15,rbx
ffff80000080ebcd:	48 b8 bc 52 ef ff ff 	movabs rax,0xffffffffffef52bc
ffff80000080ebd4:	ff ff ff 
ffff80000080ebd7:	48 01 d8             	add    rax,rbx
ffff80000080ebda:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:195
        if(blkdev_write(filp->dentry->dir_inode->dev,sector*SECTOR_SIZE,fsbi->sector_per_cluster*SECTOR_SIZE,buffer)<0)
ffff80000080ebdc:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080ebe0:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080ebe4:	48 c1 e0 09          	shl    rax,0x9
ffff80000080ebe8:	48 89 c7             	mov    rdi,rax
ffff80000080ebeb:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ebef:	c1 e0 09             	shl    eax,0x9
ffff80000080ebf2:	89 c6                	mov    esi,eax
ffff80000080ebf4:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080ebf8:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080ebfc:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff80000080ec00:	0f b7 40 18          	movzx  eax,WORD PTR [rax+0x18]
ffff80000080ec04:	0f b7 c0             	movzx  eax,ax
ffff80000080ec07:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
ffff80000080ec0b:	48 89 d1             	mov    rcx,rdx
ffff80000080ec0e:	48 89 fa             	mov    rdx,rdi
ffff80000080ec11:	89 c7                	mov    edi,eax
ffff80000080ec13:	49 89 df             	mov    r15,rbx
ffff80000080ec16:	48 b8 f7 03 ef ff ff 	movabs rax,0xffffffffffef03f7
ffff80000080ec1d:	ff ff ff 
ffff80000080ec20:	48 01 d8             	add    rax,rbx
ffff80000080ec23:	ff d0                	call   rax
ffff80000080ec25:	85 c0                	test   eax,eax
ffff80000080ec27:	79 35                	jns    ffff80000080ec5e <FAT32_write+0x3ce>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:197
		{
			printf("FAT32 FS(write) write disk ERROR!!!!!!!!!!\n");
ffff80000080ec29:	48 b8 98 dc ff ff ff 	movabs rax,0xffffffffffffdc98
ffff80000080ec30:	ff ff ff 
ffff80000080ec33:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080ec37:	48 89 c7             	mov    rdi,rax
ffff80000080ec3a:	49 89 df             	mov    r15,rbx
ffff80000080ec3d:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080ec42:	48 ba 96 4e ee ff ff 	movabs rdx,0xffffffffffee4e96
ffff80000080ec49:	ff ff ff 
ffff80000080ec4c:	48 01 da             	add    rdx,rbx
ffff80000080ec4f:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:198
			retval = -EIO;
ffff80000080ec51:	48 c7 45 d0 e3 ff ff 	mov    QWORD PTR [rbp-0x30],0xffffffffffffffe3
ffff80000080ec58:	ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:199
			break;
ffff80000080ec59:	e9 25 01 00 00       	jmp    ffff80000080ed83 <FAT32_write+0x4f3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:202
		}

		index -= length;
ffff80000080ec5e:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff80000080ec61:	29 45 c4             	sub    DWORD PTR [rbp-0x3c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:203
		buf += length;
ffff80000080ec64:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff80000080ec67:	48 98                	cdqe   
ffff80000080ec69:	48 01 45 80          	add    QWORD PTR [rbp-0x80],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:204
		offset -= offset;
ffff80000080ec6d:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffff80000080ec74:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:205
		*position += length;
ffff80000080ec75:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080ec7c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080ec7f:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff80000080ec82:	48 98                	cdqe   
ffff80000080ec84:	48 01 c2             	add    rdx,rax
ffff80000080ec87:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080ec8e:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:207

		if(index)
ffff80000080ec91:	83 7d c4 00          	cmp    DWORD PTR [rbp-0x3c],0x0
ffff80000080ec95:	0f 84 e7 00 00 00    	je     ffff80000080ed82 <FAT32_write+0x4f2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:208
			next_cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff80000080ec9b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080ec9f:	89 c2                	mov    edx,eax
ffff80000080eca1:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080eca5:	89 d6                	mov    esi,edx
ffff80000080eca7:	48 89 c7             	mov    rdi,rax
ffff80000080ecaa:	49 89 df             	mov    r15,rbx
ffff80000080ecad:	48 b8 22 19 ef ff ff 	movabs rax,0xffffffffffef1922
ffff80000080ecb4:	ff ff ff 
ffff80000080ecb7:	48 01 d8             	add    rax,rbx
ffff80000080ecba:	ff d0                	call   rax
ffff80000080ecbc:	89 c0                	mov    eax,eax
ffff80000080ecbe:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:212
		else
			break;

		if(next_cluster >= 0x0ffffff8)
ffff80000080ecc2:	48 81 7d a0 f7 ff ff 	cmp    QWORD PTR [rbp-0x60],0xffffff7
ffff80000080ecc9:	0f 
ffff80000080ecca:	0f 86 a6 00 00 00    	jbe    ffff80000080ed76 <FAT32_write+0x4e6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:214
		{
			next_cluster = FAT32_find_available_cluster(fsbi);
ffff80000080ecd0:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080ecd4:	48 89 c7             	mov    rdi,rax
ffff80000080ecd7:	49 89 df             	mov    r15,rbx
ffff80000080ecda:	48 b8 5a 1f ef ff ff 	movabs rax,0xffffffffffef1f5a
ffff80000080ece1:	ff ff ff 
ffff80000080ece4:	48 01 d8             	add    rax,rbx
ffff80000080ece7:	ff d0                	call   rax
ffff80000080ece9:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:215
			if(!next_cluster)
ffff80000080eced:	48 83 7d a0 00       	cmp    QWORD PTR [rbp-0x60],0x0
ffff80000080ecf2:	75 25                	jne    ffff80000080ed19 <FAT32_write+0x489>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:217
			{
                kmfree(buffer);
ffff80000080ecf4:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080ecf8:	48 89 c7             	mov    rdi,rax
ffff80000080ecfb:	49 89 df             	mov    r15,rbx
ffff80000080ecfe:	48 b8 d7 5a ee ff ff 	movabs rax,0xffffffffffee5ad7
ffff80000080ed05:	ff ff ff 
ffff80000080ed08:	48 01 d8             	add    rax,rbx
ffff80000080ed0b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:218
				return -ENOSPC;
ffff80000080ed0d:	48 c7 c0 cc ff ff ff 	mov    rax,0xffffffffffffffcc
ffff80000080ed14:	e9 fb 00 00 00       	jmp    ffff80000080ee14 <FAT32_write+0x584>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:221
			}			
				
			DISK1_FAT32_write_FAT_Entry(fsbi,cluster,next_cluster);
ffff80000080ed19:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080ed1d:	89 c2                	mov    edx,eax
ffff80000080ed1f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080ed23:	89 c1                	mov    ecx,eax
ffff80000080ed25:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080ed29:	89 ce                	mov    esi,ecx
ffff80000080ed2b:	48 89 c7             	mov    rdi,rax
ffff80000080ed2e:	49 89 df             	mov    r15,rbx
ffff80000080ed31:	48 b8 1f 1a ef ff ff 	movabs rax,0xffffffffffef1a1f
ffff80000080ed38:	ff ff ff 
ffff80000080ed3b:	48 01 d8             	add    rax,rbx
ffff80000080ed3e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:222
			DISK1_FAT32_write_FAT_Entry(fsbi,next_cluster,0x0ffffff8);
ffff80000080ed40:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080ed44:	89 c1                	mov    ecx,eax
ffff80000080ed46:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080ed4a:	ba f8 ff ff 0f       	mov    edx,0xffffff8
ffff80000080ed4f:	89 ce                	mov    esi,ecx
ffff80000080ed51:	48 89 c7             	mov    rdi,rax
ffff80000080ed54:	49 89 df             	mov    r15,rbx
ffff80000080ed57:	48 b8 1f 1a ef ff ff 	movabs rax,0xffffffffffef1a1f
ffff80000080ed5e:	ff ff ff 
ffff80000080ed61:	48 01 d8             	add    rax,rbx
ffff80000080ed64:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:223
			cluster = next_cluster;
ffff80000080ed66:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080ed6a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:224
			flags = 1;
ffff80000080ed6e:	48 c7 45 c8 01 00 00 	mov    QWORD PTR [rbp-0x38],0x1
ffff80000080ed75:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:227
		}

	}while(index);
ffff80000080ed76:	83 7d c4 00          	cmp    DWORD PTR [rbp-0x3c],0x0
ffff80000080ed7a:	0f 85 08 fd ff ff    	jne    ffff80000080ea88 <FAT32_write+0x1f8>
ffff80000080ed80:	eb 01                	jmp    ffff80000080ed83 <FAT32_write+0x4f3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:210
			break;
ffff80000080ed82:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:229

	if(*position > filp->dentry->dir_inode->file_size)
ffff80000080ed83:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080ed8a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ed8d:	48 89 c2             	mov    rdx,rax
ffff80000080ed90:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080ed94:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080ed98:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff80000080ed9c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ed9f:	48 39 c2             	cmp    rdx,rax
ffff80000080eda2:	76 42                	jbe    ffff80000080ede6 <FAT32_write+0x556>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:231
	{
		filp->dentry->dir_inode->file_size = *position;
ffff80000080eda4:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080edab:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080edae:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080edb2:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080edb6:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff80000080edba:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:232
		filp->dentry->dir_inode->sb->sb_ops->write_inode(filp->dentry->dir_inode);
ffff80000080edbd:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080edc1:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080edc5:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff80000080edc9:	48 8b 40 1a          	mov    rax,QWORD PTR [rax+0x1a]
ffff80000080edcd:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080edd1:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080edd5:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080edd9:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080eddd:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff80000080ede1:	48 89 c7             	mov    rdi,rax
ffff80000080ede4:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:235
	}

    kmfree(buffer);
ffff80000080ede6:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080edea:	48 89 c7             	mov    rdi,rax
ffff80000080eded:	49 89 df             	mov    r15,rbx
ffff80000080edf0:	48 b8 d7 5a ee ff ff 	movabs rax,0xffffffffffee5ad7
ffff80000080edf7:	ff ff ff 
ffff80000080edfa:	48 01 d8             	add    rax,rbx
ffff80000080edfd:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:236
	if(!index)
ffff80000080edff:	83 7d c4 00          	cmp    DWORD PTR [rbp-0x3c],0x0
ffff80000080ee03:	75 0b                	jne    ffff80000080ee10 <FAT32_write+0x580>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:237
		retval = count;
ffff80000080ee05:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff80000080ee0c:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:238
	return retval;
ffff80000080ee10:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:239
}
ffff80000080ee14:	48 83 ec 80          	sub    rsp,0xffffffffffffff80
ffff80000080ee18:	5b                   	pop    rbx
ffff80000080ee19:	41 5f                	pop    r15
ffff80000080ee1b:	5d                   	pop    rbp
ffff80000080ee1c:	c3                   	ret    

ffff80000080ee1d <FAT32_lseek>:
FAT32_lseek():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:243


long FAT32_lseek(struct file * filp,long offset,long origin)
{
ffff80000080ee1d:	f3 0f 1e fa          	endbr64 
ffff80000080ee21:	55                   	push   rbp
ffff80000080ee22:	48 89 e5             	mov    rbp,rsp
ffff80000080ee25:	41 57                	push   r15
ffff80000080ee27:	48 83 ec 38          	sub    rsp,0x38
ffff80000080ee2b:	48 8d 0d f9 ff ff ff 	lea    rcx,[rip+0xfffffffffffffff9]        # ffff80000080ee2b <FAT32_lseek+0xe>
ffff80000080ee32:	49 bb ed d9 10 00 00 	movabs r11,0x10d9ed
ffff80000080ee39:	00 00 00 
ffff80000080ee3c:	4c 01 d9             	add    rcx,r11
ffff80000080ee3f:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff80000080ee43:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffff80000080ee47:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:244
	struct index_node *inode = filp->dentry->dir_inode;
ffff80000080ee4b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080ee4f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080ee53:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff80000080ee57:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:245
	long pos = 0;
ffff80000080ee5b:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000080ee62:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:247

	switch(origin)
ffff80000080ee63:	48 83 7d c8 02       	cmp    QWORD PTR [rbp-0x38],0x2
ffff80000080ee68:	74 21                	je     ffff80000080ee8b <FAT32_lseek+0x6e>
ffff80000080ee6a:	48 83 7d c8 02       	cmp    QWORD PTR [rbp-0x38],0x2
ffff80000080ee6f:	7f 4a                	jg     ffff80000080eebb <FAT32_lseek+0x9e>
ffff80000080ee71:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffff80000080ee76:	74 09                	je     ffff80000080ee81 <FAT32_lseek+0x64>
ffff80000080ee78:	48 83 7d c8 01       	cmp    QWORD PTR [rbp-0x38],0x1
ffff80000080ee7d:	74 20                	je     ffff80000080ee9f <FAT32_lseek+0x82>
ffff80000080ee7f:	eb 3a                	jmp    ffff80000080eebb <FAT32_lseek+0x9e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:250
	{
		case SEEK_SET:
				pos = offset;
ffff80000080ee81:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080ee85:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:251
			break;
ffff80000080ee89:	eb 39                	jmp    ffff80000080eec4 <FAT32_lseek+0xa7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:254

		case SEEK_CUR:
				pos =  filp->position + offset;
ffff80000080ee8b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080ee8f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080ee92:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080ee96:	48 01 d0             	add    rax,rdx
ffff80000080ee99:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:255
			break;
ffff80000080ee9d:	eb 25                	jmp    ffff80000080eec4 <FAT32_lseek+0xa7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:258

		case SEEK_END:
				pos = filp->dentry->dir_inode->file_size + offset;
ffff80000080ee9f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080eea3:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080eea7:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff80000080eeab:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080eeae:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080eeb2:	48 01 d0             	add    rax,rdx
ffff80000080eeb5:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:259
			break;
ffff80000080eeb9:	eb 09                	jmp    ffff80000080eec4 <FAT32_lseek+0xa7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:262

		default:
			return -EINVAL;
ffff80000080eebb:	48 c7 c0 e4 ff ff ff 	mov    rax,0xffffffffffffffe4
ffff80000080eec2:	eb 69                	jmp    ffff80000080ef2d <FAT32_lseek+0x110>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:266
			break;
	}

	if(pos < 0 || pos > filp->dentry->dir_inode->file_size)
ffff80000080eec4:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080eec9:	78 18                	js     ffff80000080eee3 <FAT32_lseek+0xc6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:266 (discriminator 1)
ffff80000080eecb:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080eecf:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080eed3:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff80000080eed7:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080eeda:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080eede:	48 39 c2             	cmp    rdx,rax
ffff80000080eee1:	73 09                	jae    ffff80000080eeec <FAT32_lseek+0xcf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:267
		return -EOVERFLOW;
ffff80000080eee3:	48 c7 c0 bf ff ff ff 	mov    rax,0xffffffffffffffbf
ffff80000080eeea:	eb 41                	jmp    ffff80000080ef2d <FAT32_lseek+0x110>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:269

	filp->position = pos;
ffff80000080eeec:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080eef0:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080eef4:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:270
	printf("FAT32 FS(lseek) alert position:%d\n",filp->position);
ffff80000080eef7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080eefb:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080eefe:	48 89 c6             	mov    rsi,rax
ffff80000080ef01:	48 b8 c8 dc ff ff ff 	movabs rax,0xffffffffffffdcc8
ffff80000080ef08:	ff ff ff 
ffff80000080ef0b:	48 8d 04 01          	lea    rax,[rcx+rax*1]
ffff80000080ef0f:	48 89 c7             	mov    rdi,rax
ffff80000080ef12:	49 89 cf             	mov    r15,rcx
ffff80000080ef15:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080ef1a:	48 ba 96 4e ee ff ff 	movabs rdx,0xffffffffffee4e96
ffff80000080ef21:	ff ff ff 
ffff80000080ef24:	48 01 ca             	add    rdx,rcx
ffff80000080ef27:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:272

	return pos;
ffff80000080ef29:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:273
}
ffff80000080ef2d:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080ef31:	c9                   	leave  
ffff80000080ef32:	c3                   	ret    

ffff80000080ef33 <FAT32_ioctl>:
FAT32_ioctl():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:277


long FAT32_ioctl(struct index_node * inode,struct file * filp,unsigned long cmd,unsigned long arg)
{}
ffff80000080ef33:	f3 0f 1e fa          	endbr64 
ffff80000080ef37:	55                   	push   rbp
ffff80000080ef38:	48 89 e5             	mov    rbp,rsp
ffff80000080ef3b:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080ef3b <FAT32_ioctl+0x8>
ffff80000080ef42:	49 bb dd d8 10 00 00 	movabs r11,0x10d8dd
ffff80000080ef49:	00 00 00 
ffff80000080ef4c:	4c 01 d8             	add    rax,r11
ffff80000080ef4f:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080ef53:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080ef57:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080ef5b:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
ffff80000080ef5f:	90                   	nop
ffff80000080ef60:	5d                   	pop    rbp
ffff80000080ef61:	c3                   	ret    

ffff80000080ef62 <FAT32_readdir>:
FAT32_readdir():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:280

long FAT32_readdir(struct file * filp,void * dirent,filldir_t filler)
{
ffff80000080ef62:	f3 0f 1e fa          	endbr64 
ffff80000080ef66:	55                   	push   rbp
ffff80000080ef67:	48 89 e5             	mov    rbp,rsp
ffff80000080ef6a:	41 57                	push   r15
ffff80000080ef6c:	53                   	push   rbx
ffff80000080ef6d:	48 83 c4 80          	add    rsp,0xffffffffffffff80
ffff80000080ef71:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080ef71 <FAT32_readdir+0xf>
ffff80000080ef78:	49 bb a7 d8 10 00 00 	movabs r11,0x10d8a7
ffff80000080ef7f:	00 00 00 
ffff80000080ef82:	4c 01 db             	add    rbx,r11
ffff80000080ef85:	48 89 7d 88          	mov    QWORD PTR [rbp-0x78],rdi
ffff80000080ef89:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
ffff80000080ef8d:	48 89 95 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:281
	struct FAT32_inode_info * finode = filp->dentry->dir_inode->private_index_info;
ffff80000080ef94:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080ef98:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080ef9c:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff80000080efa0:	48 8b 40 32          	mov    rax,QWORD PTR [rax+0x32]
ffff80000080efa4:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:282
	struct FAT32_sb_info * fsbi = filp->dentry->dir_inode->sb->private_sb_info;
ffff80000080efa8:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080efac:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080efb0:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff80000080efb4:	48 8b 40 1a          	mov    rax,QWORD PTR [rax+0x1a]
ffff80000080efb8:	48 8b 40 1a          	mov    rax,QWORD PTR [rax+0x1a]
ffff80000080efbc:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:284

	unsigned int cluster = 0;
ffff80000080efc0:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:285
	unsigned long sector = 0;
ffff80000080efc7:	48 c7 45 a0 00 00 00 	mov    QWORD PTR [rbp-0x60],0x0
ffff80000080efce:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:286
	unsigned char * buf =NULL; 
ffff80000080efcf:	48 c7 45 98 00 00 00 	mov    QWORD PTR [rbp-0x68],0x0
ffff80000080efd6:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:287
	char *name = NULL;
ffff80000080efd7:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff80000080efde:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:288
	int namelen = 0;
ffff80000080efdf:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:289
	int i = 0,j = 0,x = 0,y = 0;
ffff80000080efe6:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [rbp-0x28],0x0
ffff80000080efed:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x0
ffff80000080eff4:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
ffff80000080effb:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:290
	struct FAT32_Directory * tmpdentry = NULL;
ffff80000080f002:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
ffff80000080f009:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:291
	struct FAT32_LongDirectory * tmpldentry = NULL;
ffff80000080f00a:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffff80000080f011:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:293

	buf = kmalloc(fsbi->bytes_per_cluster, 0);
ffff80000080f012:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080f016:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080f01a:	be 00 00 00 00       	mov    esi,0x0
ffff80000080f01f:	48 89 c7             	mov    rdi,rax
ffff80000080f022:	49 89 df             	mov    r15,rbx
ffff80000080f025:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080f02a:	48 ba 68 57 ee ff ff 	movabs rdx,0xffffffffffee5768
ffff80000080f031:	ff ff ff 
ffff80000080f034:	48 01 da             	add    rdx,rbx
ffff80000080f037:	ff d2                	call   rdx
ffff80000080f039:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:295

	cluster = finode->first_cluster;
ffff80000080f03d:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080f041:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f044:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:297

	j = filp->position/fsbi->bytes_per_cluster;
ffff80000080f047:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080f04b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f04e:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff80000080f052:	48 8b 72 18          	mov    rsi,QWORD PTR [rdx+0x18]
ffff80000080f056:	48 99                	cqo    
ffff80000080f058:	48 f7 fe             	idiv   rsi
ffff80000080f05b:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:299
	
	for(i = 0;i<j;i++)
ffff80000080f05e:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [rbp-0x28],0x0
ffff80000080f065:	eb 60                	jmp    ffff80000080f0c7 <FAT32_readdir+0x165>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:301
	{
		cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff80000080f067:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080f06a:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080f06e:	89 d6                	mov    esi,edx
ffff80000080f070:	48 89 c7             	mov    rdi,rax
ffff80000080f073:	49 89 df             	mov    r15,rbx
ffff80000080f076:	48 b8 22 19 ef ff ff 	movabs rax,0xffffffffffef1922
ffff80000080f07d:	ff ff ff 
ffff80000080f080:	48 01 d8             	add    rax,rbx
ffff80000080f083:	ff d0                	call   rax
ffff80000080f085:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:302
		if(cluster > 0x0ffffff7)
ffff80000080f088:	81 7d ec f7 ff ff 0f 	cmp    DWORD PTR [rbp-0x14],0xffffff7
ffff80000080f08f:	76 32                	jbe    ffff80000080f0c3 <FAT32_readdir+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:304
		{
			printf("FAT32 FS(readdir) cluster didn`t exist\n");
ffff80000080f091:	48 b8 f0 dc ff ff ff 	movabs rax,0xffffffffffffdcf0
ffff80000080f098:	ff ff ff 
ffff80000080f09b:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080f09f:	48 89 c7             	mov    rdi,rax
ffff80000080f0a2:	49 89 df             	mov    r15,rbx
ffff80000080f0a5:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080f0aa:	48 ba 96 4e ee ff ff 	movabs rdx,0xffffffffffee4e96
ffff80000080f0b1:	ff ff ff 
ffff80000080f0b4:	48 01 da             	add    rdx,rbx
ffff80000080f0b7:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:305
			return NULL;
ffff80000080f0b9:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080f0be:	e9 16 06 00 00       	jmp    ffff80000080f6d9 <FAT32_readdir+0x777>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:299 (discriminator 2)
	for(i = 0;i<j;i++)
ffff80000080f0c3:	83 45 d8 01          	add    DWORD PTR [rbp-0x28],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:299 (discriminator 1)
ffff80000080f0c7:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080f0ca:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
ffff80000080f0cd:	7c 98                	jl     ffff80000080f067 <FAT32_readdir+0x105>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:309
		}
	}

next_cluster:
ffff80000080f0cf:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:310
	sector = fsbi->Data_firstsector + (cluster - 2) * fsbi->sector_per_cluster;
ffff80000080f0d0:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080f0d4:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
ffff80000080f0d8:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080f0db:	83 e8 02             	sub    eax,0x2
ffff80000080f0de:	89 c1                	mov    ecx,eax
ffff80000080f0e0:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080f0e4:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080f0e8:	48 0f af c1          	imul   rax,rcx
ffff80000080f0ec:	48 01 d0             	add    rax,rdx
ffff80000080f0ef:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:311
    if(blkdev_read(filp->dentry->dir_inode->dev,sector*SECTOR_SIZE,fsbi->sector_per_cluster*SECTOR_SIZE,buf)<0)
ffff80000080f0f3:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080f0f7:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080f0fb:	48 c1 e0 09          	shl    rax,0x9
ffff80000080f0ff:	48 89 c7             	mov    rdi,rax
ffff80000080f102:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080f106:	c1 e0 09             	shl    eax,0x9
ffff80000080f109:	89 c6                	mov    esi,eax
ffff80000080f10b:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080f10f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080f113:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff80000080f117:	0f b7 40 18          	movzx  eax,WORD PTR [rax+0x18]
ffff80000080f11b:	0f b7 c0             	movzx  eax,ax
ffff80000080f11e:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
ffff80000080f122:	48 89 d1             	mov    rcx,rdx
ffff80000080f125:	48 89 fa             	mov    rdx,rdi
ffff80000080f128:	89 c7                	mov    edi,eax
ffff80000080f12a:	49 89 df             	mov    r15,rbx
ffff80000080f12d:	48 b8 7c 02 ef ff ff 	movabs rax,0xffffffffffef027c
ffff80000080f134:	ff ff ff 
ffff80000080f137:	48 01 d8             	add    rax,rbx
ffff80000080f13a:	ff d0                	call   rax
ffff80000080f13c:	85 c0                	test   eax,eax
ffff80000080f13e:	79 4b                	jns    ffff80000080f18b <FAT32_readdir+0x229>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:313
	{
		printf("FAT32 FS(readdir) read disk ERROR!!!!!!!!!!\n");
ffff80000080f140:	48 b8 18 dd ff ff ff 	movabs rax,0xffffffffffffdd18
ffff80000080f147:	ff ff ff 
ffff80000080f14a:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080f14e:	48 89 c7             	mov    rdi,rax
ffff80000080f151:	49 89 df             	mov    r15,rbx
ffff80000080f154:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080f159:	48 ba 96 4e ee ff ff 	movabs rdx,0xffffffffffee4e96
ffff80000080f160:	ff ff ff 
ffff80000080f163:	48 01 da             	add    rdx,rbx
ffff80000080f166:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:314
        kmfree(buf);
ffff80000080f168:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080f16c:	48 89 c7             	mov    rdi,rax
ffff80000080f16f:	49 89 df             	mov    r15,rbx
ffff80000080f172:	48 b8 d7 5a ee ff ff 	movabs rax,0xffffffffffee5ad7
ffff80000080f179:	ff ff ff 
ffff80000080f17c:	48 01 d8             	add    rax,rbx
ffff80000080f17f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:315
		return NULL;
ffff80000080f181:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080f186:	e9 4e 05 00 00       	jmp    ffff80000080f6d9 <FAT32_readdir+0x777>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:318
	}

	tmpdentry = (struct FAT32_Directory *)(buf + filp->position%fsbi->bytes_per_cluster);
ffff80000080f18b:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080f18f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f192:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff80000080f196:	48 8b 4a 18          	mov    rcx,QWORD PTR [rdx+0x18]
ffff80000080f19a:	48 99                	cqo    
ffff80000080f19c:	48 f7 f9             	idiv   rcx
ffff80000080f19f:	48 89 d0             	mov    rax,rdx
ffff80000080f1a2:	48 89 c2             	mov    rdx,rax
ffff80000080f1a5:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080f1a9:	48 01 d0             	add    rax,rdx
ffff80000080f1ac:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:320

	for(i = filp->position%fsbi->bytes_per_cluster;i < fsbi->bytes_per_cluster;i += 32,tmpdentry++,filp->position += 32)
ffff80000080f1b0:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080f1b4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f1b7:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff80000080f1bb:	48 8b 4a 18          	mov    rcx,QWORD PTR [rdx+0x18]
ffff80000080f1bf:	48 99                	cqo    
ffff80000080f1c1:	48 f7 f9             	idiv   rcx
ffff80000080f1c4:	48 89 d0             	mov    rax,rdx
ffff80000080f1c7:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
ffff80000080f1ca:	e9 66 04 00 00       	jmp    ffff80000080f635 <FAT32_readdir+0x6d3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:322
	{
		if(tmpdentry->DIR_Attr == ATTR_LONG_NAME)
ffff80000080f1cf:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080f1d3:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff80000080f1d7:	3c 0f                	cmp    al,0xf
ffff80000080f1d9:	0f 84 37 04 00 00    	je     ffff80000080f616 <FAT32_readdir+0x6b4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:324
			continue;
		if(tmpdentry->DIR_Name[0] == 0xe5 || tmpdentry->DIR_Name[0] == 0x00 || tmpdentry->DIR_Name[0] == 0x05)
ffff80000080f1df:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080f1e3:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080f1e6:	3c e5                	cmp    al,0xe5
ffff80000080f1e8:	0f 84 2b 04 00 00    	je     ffff80000080f619 <FAT32_readdir+0x6b7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:324 (discriminator 2)
ffff80000080f1ee:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080f1f2:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080f1f5:	84 c0                	test   al,al
ffff80000080f1f7:	0f 84 1c 04 00 00    	je     ffff80000080f619 <FAT32_readdir+0x6b7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:324 (discriminator 4)
ffff80000080f1fd:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080f201:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080f204:	3c 05                	cmp    al,0x5
ffff80000080f206:	0f 84 0d 04 00 00    	je     ffff80000080f619 <FAT32_readdir+0x6b7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:327
			continue;

		namelen = 0;
ffff80000080f20c:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:328
		tmpldentry = (struct FAT32_LongDirectory *)tmpdentry-1;
ffff80000080f213:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080f217:	48 83 e8 20          	sub    rax,0x20
ffff80000080f21b:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:330

		if(tmpldentry->LDIR_Attr == ATTR_LONG_NAME && tmpldentry->LDIR_Ord != 0xe5 && tmpldentry->LDIR_Ord != 0x00 && tmpldentry->LDIR_Ord != 0x05)
ffff80000080f21f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080f223:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff80000080f227:	3c 0f                	cmp    al,0xf
ffff80000080f229:	0f 85 44 02 00 00    	jne    ffff80000080f473 <FAT32_readdir+0x511>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:330 (discriminator 1)
ffff80000080f22f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080f233:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080f236:	3c e5                	cmp    al,0xe5
ffff80000080f238:	0f 84 35 02 00 00    	je     ffff80000080f473 <FAT32_readdir+0x511>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:330 (discriminator 2)
ffff80000080f23e:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080f242:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080f245:	84 c0                	test   al,al
ffff80000080f247:	0f 84 26 02 00 00    	je     ffff80000080f473 <FAT32_readdir+0x511>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:330 (discriminator 3)
ffff80000080f24d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080f251:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080f254:	3c 05                	cmp    al,0x5
ffff80000080f256:	0f 84 17 02 00 00    	je     ffff80000080f473 <FAT32_readdir+0x511>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:332
		{
			j = 0;
ffff80000080f25c:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:334
			//long file/dir name read
			while(tmpldentry->LDIR_Attr == ATTR_LONG_NAME  && tmpldentry->LDIR_Ord != 0xe5 && tmpldentry->LDIR_Ord != 0x00 && tmpldentry->LDIR_Ord != 0x05)
ffff80000080f263:	eb 1a                	jmp    ffff80000080f27f <FAT32_readdir+0x31d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:336
			{
				j++;
ffff80000080f265:	83 45 d4 01          	add    DWORD PTR [rbp-0x2c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:337
				if(tmpldentry->LDIR_Ord & 0x40)
ffff80000080f269:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080f26d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080f270:	0f b6 c0             	movzx  eax,al
ffff80000080f273:	83 e0 40             	and    eax,0x40
ffff80000080f276:	85 c0                	test   eax,eax
ffff80000080f278:	75 34                	jne    ffff80000080f2ae <FAT32_readdir+0x34c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:339
					break;
				tmpldentry --;
ffff80000080f27a:	48 83 6d b8 20       	sub    QWORD PTR [rbp-0x48],0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:334
			while(tmpldentry->LDIR_Attr == ATTR_LONG_NAME  && tmpldentry->LDIR_Ord != 0xe5 && tmpldentry->LDIR_Ord != 0x00 && tmpldentry->LDIR_Ord != 0x05)
ffff80000080f27f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080f283:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff80000080f287:	3c 0f                	cmp    al,0xf
ffff80000080f289:	75 24                	jne    ffff80000080f2af <FAT32_readdir+0x34d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:334 (discriminator 1)
ffff80000080f28b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080f28f:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080f292:	3c e5                	cmp    al,0xe5
ffff80000080f294:	74 19                	je     ffff80000080f2af <FAT32_readdir+0x34d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:334 (discriminator 2)
ffff80000080f296:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080f29a:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080f29d:	84 c0                	test   al,al
ffff80000080f29f:	74 0e                	je     ffff80000080f2af <FAT32_readdir+0x34d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:334 (discriminator 3)
ffff80000080f2a1:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080f2a5:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080f2a8:	3c 05                	cmp    al,0x5
ffff80000080f2aa:	75 b9                	jne    ffff80000080f265 <FAT32_readdir+0x303>
ffff80000080f2ac:	eb 01                	jmp    ffff80000080f2af <FAT32_readdir+0x34d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:338
					break;
ffff80000080f2ae:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:342
			}

			name = kmalloc(j * 13 + 1, 0);
ffff80000080f2af:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff80000080f2b2:	89 d0                	mov    eax,edx
ffff80000080f2b4:	01 c0                	add    eax,eax
ffff80000080f2b6:	01 d0                	add    eax,edx
ffff80000080f2b8:	c1 e0 02             	shl    eax,0x2
ffff80000080f2bb:	01 d0                	add    eax,edx
ffff80000080f2bd:	83 c0 01             	add    eax,0x1
ffff80000080f2c0:	be 00 00 00 00       	mov    esi,0x0
ffff80000080f2c5:	89 c7                	mov    edi,eax
ffff80000080f2c7:	49 89 df             	mov    r15,rbx
ffff80000080f2ca:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080f2cf:	48 ba 68 57 ee ff ff 	movabs rdx,0xffffffffffee5768
ffff80000080f2d6:	ff ff ff 
ffff80000080f2d9:	48 01 da             	add    rdx,rbx
ffff80000080f2dc:	ff d2                	call   rdx
ffff80000080f2de:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:343
			memset(name,0,j*13+1);
ffff80000080f2e2:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff80000080f2e5:	89 d0                	mov    eax,edx
ffff80000080f2e7:	01 c0                	add    eax,eax
ffff80000080f2e9:	01 d0                	add    eax,edx
ffff80000080f2eb:	c1 e0 02             	shl    eax,0x2
ffff80000080f2ee:	01 d0                	add    eax,edx
ffff80000080f2f0:	83 c0 01             	add    eax,0x1
ffff80000080f2f3:	89 c2                	mov    edx,eax
ffff80000080f2f5:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080f2f9:	be 00 00 00 00       	mov    esi,0x0
ffff80000080f2fe:	48 89 c7             	mov    rdi,rax
ffff80000080f301:	49 89 df             	mov    r15,rbx
ffff80000080f304:	48 b8 6b 53 ef ff ff 	movabs rax,0xffffffffffef536b
ffff80000080f30b:	ff ff ff 
ffff80000080f30e:	48 01 d8             	add    rax,rbx
ffff80000080f311:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:344
			tmpldentry = (struct FAT32_LongDirectory *)tmpdentry-1;
ffff80000080f313:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080f317:	48 83 e8 20          	sub    rax,0x20
ffff80000080f31b:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:346

			for(x = 0;x<j;x++,tmpldentry --)
ffff80000080f31f:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
ffff80000080f326:	e9 37 01 00 00       	jmp    ffff80000080f462 <FAT32_readdir+0x500>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:348
			{
				for(y = 0;y<5;y++)
ffff80000080f32b:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
ffff80000080f332:	eb 53                	jmp    ffff80000080f387 <FAT32_readdir+0x425>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:349
					if(tmpldentry->LDIR_Name1[y] != 0xffff && tmpldentry->LDIR_Name1[y] != 0x0000)
ffff80000080f334:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080f338:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000080f33b:	48 63 d2             	movsxd rdx,edx
ffff80000080f33e:	0f b7 44 50 01       	movzx  eax,WORD PTR [rax+rdx*2+0x1]
ffff80000080f343:	66 83 f8 ff          	cmp    ax,0xffff
ffff80000080f347:	74 3a                	je     ffff80000080f383 <FAT32_readdir+0x421>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:349 (discriminator 1)
ffff80000080f349:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080f34d:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000080f350:	48 63 d2             	movsxd rdx,edx
ffff80000080f353:	0f b7 44 50 01       	movzx  eax,WORD PTR [rax+rdx*2+0x1]
ffff80000080f358:	66 85 c0             	test   ax,ax
ffff80000080f35b:	74 26                	je     ffff80000080f383 <FAT32_readdir+0x421>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:350
						name[namelen++] = (char)tmpldentry->LDIR_Name1[y];
ffff80000080f35d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080f361:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000080f364:	48 63 d2             	movsxd rdx,edx
ffff80000080f367:	0f b7 4c 50 01       	movzx  ecx,WORD PTR [rax+rdx*2+0x1]
ffff80000080f36c:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080f36f:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080f372:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff80000080f375:	48 63 d0             	movsxd rdx,eax
ffff80000080f378:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080f37c:	48 01 d0             	add    rax,rdx
ffff80000080f37f:	89 ca                	mov    edx,ecx
ffff80000080f381:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:348 (discriminator 2)
				for(y = 0;y<5;y++)
ffff80000080f383:	83 45 cc 01          	add    DWORD PTR [rbp-0x34],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:348 (discriminator 1)
ffff80000080f387:	83 7d cc 04          	cmp    DWORD PTR [rbp-0x34],0x4
ffff80000080f38b:	7e a7                	jle    ffff80000080f334 <FAT32_readdir+0x3d2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:352

				for(y = 0;y<6;y++)
ffff80000080f38d:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
ffff80000080f394:	eb 53                	jmp    ffff80000080f3e9 <FAT32_readdir+0x487>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:353
					if(tmpldentry->LDIR_Name2[y] != 0xffff && tmpldentry->LDIR_Name1[y] != 0x0000)
ffff80000080f396:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080f39a:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000080f39d:	48 63 d2             	movsxd rdx,edx
ffff80000080f3a0:	0f b7 44 50 0e       	movzx  eax,WORD PTR [rax+rdx*2+0xe]
ffff80000080f3a5:	66 83 f8 ff          	cmp    ax,0xffff
ffff80000080f3a9:	74 3a                	je     ffff80000080f3e5 <FAT32_readdir+0x483>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:353 (discriminator 1)
ffff80000080f3ab:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080f3af:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000080f3b2:	48 63 d2             	movsxd rdx,edx
ffff80000080f3b5:	0f b7 44 50 01       	movzx  eax,WORD PTR [rax+rdx*2+0x1]
ffff80000080f3ba:	66 85 c0             	test   ax,ax
ffff80000080f3bd:	74 26                	je     ffff80000080f3e5 <FAT32_readdir+0x483>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:354
						name[namelen++] = (char)tmpldentry->LDIR_Name2[y];
ffff80000080f3bf:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080f3c3:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000080f3c6:	48 63 d2             	movsxd rdx,edx
ffff80000080f3c9:	0f b7 4c 50 0e       	movzx  ecx,WORD PTR [rax+rdx*2+0xe]
ffff80000080f3ce:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080f3d1:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080f3d4:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff80000080f3d7:	48 63 d0             	movsxd rdx,eax
ffff80000080f3da:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080f3de:	48 01 d0             	add    rax,rdx
ffff80000080f3e1:	89 ca                	mov    edx,ecx
ffff80000080f3e3:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:352 (discriminator 2)
				for(y = 0;y<6;y++)
ffff80000080f3e5:	83 45 cc 01          	add    DWORD PTR [rbp-0x34],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:352 (discriminator 1)
ffff80000080f3e9:	83 7d cc 05          	cmp    DWORD PTR [rbp-0x34],0x5
ffff80000080f3ed:	7e a7                	jle    ffff80000080f396 <FAT32_readdir+0x434>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:356

				for(y = 0;y<2;y++)
ffff80000080f3ef:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
ffff80000080f3f6:	eb 5b                	jmp    ffff80000080f453 <FAT32_readdir+0x4f1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:357
					if(tmpldentry->LDIR_Name3[y] != 0xffff && tmpldentry->LDIR_Name1[y] != 0x0000)
ffff80000080f3f8:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080f3fc:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000080f3ff:	48 63 d2             	movsxd rdx,edx
ffff80000080f402:	48 83 c2 08          	add    rdx,0x8
ffff80000080f406:	0f b7 44 50 0c       	movzx  eax,WORD PTR [rax+rdx*2+0xc]
ffff80000080f40b:	66 83 f8 ff          	cmp    ax,0xffff
ffff80000080f40f:	74 3e                	je     ffff80000080f44f <FAT32_readdir+0x4ed>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:357 (discriminator 1)
ffff80000080f411:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080f415:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000080f418:	48 63 d2             	movsxd rdx,edx
ffff80000080f41b:	0f b7 44 50 01       	movzx  eax,WORD PTR [rax+rdx*2+0x1]
ffff80000080f420:	66 85 c0             	test   ax,ax
ffff80000080f423:	74 2a                	je     ffff80000080f44f <FAT32_readdir+0x4ed>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:358
						name[namelen++] = (char)tmpldentry->LDIR_Name3[y];
ffff80000080f425:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080f429:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000080f42c:	48 63 d2             	movsxd rdx,edx
ffff80000080f42f:	48 83 c2 08          	add    rdx,0x8
ffff80000080f433:	0f b7 4c 50 0c       	movzx  ecx,WORD PTR [rax+rdx*2+0xc]
ffff80000080f438:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080f43b:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080f43e:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff80000080f441:	48 63 d0             	movsxd rdx,eax
ffff80000080f444:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080f448:	48 01 d0             	add    rax,rdx
ffff80000080f44b:	89 ca                	mov    edx,ecx
ffff80000080f44d:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:356 (discriminator 2)
				for(y = 0;y<2;y++)
ffff80000080f44f:	83 45 cc 01          	add    DWORD PTR [rbp-0x34],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:356 (discriminator 1)
ffff80000080f453:	83 7d cc 01          	cmp    DWORD PTR [rbp-0x34],0x1
ffff80000080f457:	7e 9f                	jle    ffff80000080f3f8 <FAT32_readdir+0x496>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:346 (discriminator 2)
			for(x = 0;x<j;x++,tmpldentry --)
ffff80000080f459:	83 45 d0 01          	add    DWORD PTR [rbp-0x30],0x1
ffff80000080f45d:	48 83 6d b8 20       	sub    QWORD PTR [rbp-0x48],0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:346 (discriminator 1)
ffff80000080f462:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff80000080f465:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
ffff80000080f468:	0f 8c bd fe ff ff    	jl     ffff80000080f32b <FAT32_readdir+0x3c9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:360
			}
			goto find_lookup_success;
ffff80000080f46e:	e9 2c 02 00 00       	jmp    ffff80000080f69f <FAT32_readdir+0x73d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:363
		}

		name = kmalloc(15, 0);
ffff80000080f473:	be 00 00 00 00       	mov    esi,0x0
ffff80000080f478:	bf 0f 00 00 00       	mov    edi,0xf
ffff80000080f47d:	49 89 df             	mov    r15,rbx
ffff80000080f480:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080f485:	48 ba 68 57 ee ff ff 	movabs rdx,0xffffffffffee5768
ffff80000080f48c:	ff ff ff 
ffff80000080f48f:	48 01 da             	add    rdx,rbx
ffff80000080f492:	ff d2                	call   rdx
ffff80000080f494:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:364
		memset(name,0,15);
ffff80000080f498:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080f49c:	ba 0f 00 00 00       	mov    edx,0xf
ffff80000080f4a1:	be 00 00 00 00       	mov    esi,0x0
ffff80000080f4a6:	48 89 c7             	mov    rdi,rax
ffff80000080f4a9:	49 89 df             	mov    r15,rbx
ffff80000080f4ac:	48 b8 6b 53 ef ff ff 	movabs rax,0xffffffffffef536b
ffff80000080f4b3:	ff ff ff 
ffff80000080f4b6:	48 01 d8             	add    rax,rbx
ffff80000080f4b9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:366
		//short file/dir base name compare
		for(x=0;x<8;x++)
ffff80000080f4bb:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
ffff80000080f4c2:	eb 74                	jmp    ffff80000080f538 <FAT32_readdir+0x5d6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:368
		{
			if(tmpdentry->DIR_Name[x] == ' ')
ffff80000080f4c4:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff80000080f4c8:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff80000080f4cb:	48 98                	cdqe   
ffff80000080f4cd:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff80000080f4d1:	3c 20                	cmp    al,0x20
ffff80000080f4d3:	74 6b                	je     ffff80000080f540 <FAT32_readdir+0x5de>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:370
				break;
			if(tmpdentry->DIR_NTRes & LOWERCASE_BASE)
ffff80000080f4d5:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080f4d9:	0f b6 40 0c          	movzx  eax,BYTE PTR [rax+0xc]
ffff80000080f4dd:	0f b6 c0             	movzx  eax,al
ffff80000080f4e0:	83 e0 08             	and    eax,0x8
ffff80000080f4e3:	85 c0                	test   eax,eax
ffff80000080f4e5:	74 29                	je     ffff80000080f510 <FAT32_readdir+0x5ae>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:371
				name[namelen++] = tmpdentry->DIR_Name[x] + 32;
ffff80000080f4e7:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff80000080f4eb:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff80000080f4ee:	48 98                	cdqe   
ffff80000080f4f0:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff80000080f4f4:	8d 48 20             	lea    ecx,[rax+0x20]
ffff80000080f4f7:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080f4fa:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080f4fd:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff80000080f500:	48 63 d0             	movsxd rdx,eax
ffff80000080f503:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080f507:	48 01 d0             	add    rax,rdx
ffff80000080f50a:	89 ca                	mov    edx,ecx
ffff80000080f50c:	88 10                	mov    BYTE PTR [rax],dl
ffff80000080f50e:	eb 24                	jmp    ffff80000080f534 <FAT32_readdir+0x5d2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:373
			else
				name[namelen++] = tmpdentry->DIR_Name[x];
ffff80000080f510:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff80000080f514:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff80000080f517:	48 98                	cdqe   
ffff80000080f519:	0f b6 0c 02          	movzx  ecx,BYTE PTR [rdx+rax*1]
ffff80000080f51d:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080f520:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080f523:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff80000080f526:	48 63 d0             	movsxd rdx,eax
ffff80000080f529:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080f52d:	48 01 d0             	add    rax,rdx
ffff80000080f530:	89 ca                	mov    edx,ecx
ffff80000080f532:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:366 (discriminator 2)
		for(x=0;x<8;x++)
ffff80000080f534:	83 45 d0 01          	add    DWORD PTR [rbp-0x30],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:366 (discriminator 1)
ffff80000080f538:	83 7d d0 07          	cmp    DWORD PTR [rbp-0x30],0x7
ffff80000080f53c:	7e 86                	jle    ffff80000080f4c4 <FAT32_readdir+0x562>
ffff80000080f53e:	eb 01                	jmp    ffff80000080f541 <FAT32_readdir+0x5df>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:369
				break;
ffff80000080f540:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:376
		}

		if(tmpdentry->DIR_Attr & ATTR_DIRECTORY)
ffff80000080f541:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080f545:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff80000080f549:	0f b6 c0             	movzx  eax,al
ffff80000080f54c:	83 e0 10             	and    eax,0x10
ffff80000080f54f:	85 c0                	test   eax,eax
ffff80000080f551:	0f 85 44 01 00 00    	jne    ffff80000080f69b <FAT32_readdir+0x739>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:379
			goto find_lookup_success;

		name[namelen++] = '.';
ffff80000080f557:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080f55a:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080f55d:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff80000080f560:	48 63 d0             	movsxd rdx,eax
ffff80000080f563:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080f567:	48 01 d0             	add    rax,rdx
ffff80000080f56a:	c6 00 2e             	mov    BYTE PTR [rax],0x2e
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:382

		//short file ext name compare
		for(x=8;x<11;x++)
ffff80000080f56d:	c7 45 d0 08 00 00 00 	mov    DWORD PTR [rbp-0x30],0x8
ffff80000080f574:	eb 74                	jmp    ffff80000080f5ea <FAT32_readdir+0x688>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:384
		{
			if(tmpdentry->DIR_Name[x] == ' ')
ffff80000080f576:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff80000080f57a:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff80000080f57d:	48 98                	cdqe   
ffff80000080f57f:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff80000080f583:	3c 20                	cmp    al,0x20
ffff80000080f585:	74 6b                	je     ffff80000080f5f2 <FAT32_readdir+0x690>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:386
				break;
			if(tmpdentry->DIR_NTRes & LOWERCASE_EXT)
ffff80000080f587:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080f58b:	0f b6 40 0c          	movzx  eax,BYTE PTR [rax+0xc]
ffff80000080f58f:	0f b6 c0             	movzx  eax,al
ffff80000080f592:	83 e0 10             	and    eax,0x10
ffff80000080f595:	85 c0                	test   eax,eax
ffff80000080f597:	74 29                	je     ffff80000080f5c2 <FAT32_readdir+0x660>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:387
				name[namelen++] = tmpdentry->DIR_Name[x] + 32;
ffff80000080f599:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff80000080f59d:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff80000080f5a0:	48 98                	cdqe   
ffff80000080f5a2:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff80000080f5a6:	8d 48 20             	lea    ecx,[rax+0x20]
ffff80000080f5a9:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080f5ac:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080f5af:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff80000080f5b2:	48 63 d0             	movsxd rdx,eax
ffff80000080f5b5:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080f5b9:	48 01 d0             	add    rax,rdx
ffff80000080f5bc:	89 ca                	mov    edx,ecx
ffff80000080f5be:	88 10                	mov    BYTE PTR [rax],dl
ffff80000080f5c0:	eb 24                	jmp    ffff80000080f5e6 <FAT32_readdir+0x684>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:389
			else
				name[namelen++] = tmpdentry->DIR_Name[x];
ffff80000080f5c2:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff80000080f5c6:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff80000080f5c9:	48 98                	cdqe   
ffff80000080f5cb:	0f b6 0c 02          	movzx  ecx,BYTE PTR [rdx+rax*1]
ffff80000080f5cf:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080f5d2:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080f5d5:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff80000080f5d8:	48 63 d0             	movsxd rdx,eax
ffff80000080f5db:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080f5df:	48 01 d0             	add    rax,rdx
ffff80000080f5e2:	89 ca                	mov    edx,ecx
ffff80000080f5e4:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:382 (discriminator 2)
		for(x=8;x<11;x++)
ffff80000080f5e6:	83 45 d0 01          	add    DWORD PTR [rbp-0x30],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:382 (discriminator 1)
ffff80000080f5ea:	83 7d d0 0a          	cmp    DWORD PTR [rbp-0x30],0xa
ffff80000080f5ee:	7e 86                	jle    ffff80000080f576 <FAT32_readdir+0x614>
ffff80000080f5f0:	eb 01                	jmp    ffff80000080f5f3 <FAT32_readdir+0x691>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:385
				break;
ffff80000080f5f2:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:391
		}
		if(x == 8)
ffff80000080f5f3:	83 7d d0 08          	cmp    DWORD PTR [rbp-0x30],0x8
ffff80000080f5f7:	0f 85 a1 00 00 00    	jne    ffff80000080f69e <FAT32_readdir+0x73c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:392
			name[--namelen] = 0;
ffff80000080f5fd:	83 6d dc 01          	sub    DWORD PTR [rbp-0x24],0x1
ffff80000080f601:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080f604:	48 63 d0             	movsxd rdx,eax
ffff80000080f607:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080f60b:	48 01 d0             	add    rax,rdx
ffff80000080f60e:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:393
		goto find_lookup_success;
ffff80000080f611:	e9 88 00 00 00       	jmp    ffff80000080f69e <FAT32_readdir+0x73c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:323
			continue;
ffff80000080f616:	90                   	nop
ffff80000080f617:	eb 01                	jmp    ffff80000080f61a <FAT32_readdir+0x6b8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:325
			continue;
ffff80000080f619:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:320 (discriminator 2)
	for(i = filp->position%fsbi->bytes_per_cluster;i < fsbi->bytes_per_cluster;i += 32,tmpdentry++,filp->position += 32)
ffff80000080f61a:	83 45 d8 20          	add    DWORD PTR [rbp-0x28],0x20
ffff80000080f61e:	48 83 45 c0 20       	add    QWORD PTR [rbp-0x40],0x20
ffff80000080f623:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080f627:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f62a:	48 8d 50 20          	lea    rdx,[rax+0x20]
ffff80000080f62e:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080f632:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:320 (discriminator 1)
ffff80000080f635:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080f638:	48 63 d0             	movsxd rdx,eax
ffff80000080f63b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080f63f:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080f643:	48 39 c2             	cmp    rdx,rax
ffff80000080f646:	0f 8c 83 fb ff ff    	jl     ffff80000080f1cf <FAT32_readdir+0x26d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:396
	}
	
	cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff80000080f64c:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080f64f:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080f653:	89 d6                	mov    esi,edx
ffff80000080f655:	48 89 c7             	mov    rdi,rax
ffff80000080f658:	49 89 df             	mov    r15,rbx
ffff80000080f65b:	48 b8 22 19 ef ff ff 	movabs rax,0xffffffffffef1922
ffff80000080f662:	ff ff ff 
ffff80000080f665:	48 01 d8             	add    rax,rbx
ffff80000080f668:	ff d0                	call   rax
ffff80000080f66a:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:397
	if(cluster < 0x0ffffff7)
ffff80000080f66d:	81 7d ec f6 ff ff 0f 	cmp    DWORD PTR [rbp-0x14],0xffffff6
ffff80000080f674:	77 05                	ja     ffff80000080f67b <FAT32_readdir+0x719>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:398
		goto next_cluster;
ffff80000080f676:	e9 55 fa ff ff       	jmp    ffff80000080f0d0 <FAT32_readdir+0x16e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:400

    kmfree(buf);
ffff80000080f67b:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080f67f:	48 89 c7             	mov    rdi,rax
ffff80000080f682:	49 89 df             	mov    r15,rbx
ffff80000080f685:	48 b8 d7 5a ee ff ff 	movabs rax,0xffffffffffee5ad7
ffff80000080f68c:	ff ff ff 
ffff80000080f68f:	48 01 d8             	add    rax,rbx
ffff80000080f692:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:401
	return NULL;
ffff80000080f694:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080f699:	eb 3e                	jmp    ffff80000080f6d9 <FAT32_readdir+0x777>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:377
			goto find_lookup_success;
ffff80000080f69b:	90                   	nop
ffff80000080f69c:	eb 01                	jmp    ffff80000080f69f <FAT32_readdir+0x73d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:393
		goto find_lookup_success;
ffff80000080f69e:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:405

find_lookup_success:

	filp->position += 32;
ffff80000080f69f:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080f6a3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f6a6:	48 8d 50 20          	lea    rdx,[rax+0x20]
ffff80000080f6aa:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080f6ae:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:406
	return filler(dirent,name,namelen,0,0);
ffff80000080f6b1:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080f6b4:	48 63 d0             	movsxd rdx,eax
ffff80000080f6b7:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff80000080f6bb:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080f6bf:	4c 8b 8d 78 ff ff ff 	mov    r9,QWORD PTR [rbp-0x88]
ffff80000080f6c6:	41 b8 00 00 00 00    	mov    r8d,0x0
ffff80000080f6cc:	b9 00 00 00 00       	mov    ecx,0x0
ffff80000080f6d1:	48 89 c7             	mov    rdi,rax
ffff80000080f6d4:	41 ff d1             	call   r9
ffff80000080f6d7:	48 98                	cdqe   
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:407
}
ffff80000080f6d9:	48 83 ec 80          	sub    rsp,0xffffffffffffff80
ffff80000080f6dd:	5b                   	pop    rbx
ffff80000080f6de:	41 5f                	pop    r15
ffff80000080f6e0:	5d                   	pop    rbp
ffff80000080f6e1:	c3                   	ret    

ffff80000080f6e2 <FAT32_create>:
FAT32_create():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:424
	.readdir = FAT32_readdir,
};


long FAT32_create(struct index_node * inode,struct dir_entry * dentry,int mode)
{}
ffff80000080f6e2:	f3 0f 1e fa          	endbr64 
ffff80000080f6e6:	55                   	push   rbp
ffff80000080f6e7:	48 89 e5             	mov    rbp,rsp
ffff80000080f6ea:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080f6ea <FAT32_create+0x8>
ffff80000080f6f1:	49 bb 2e d1 10 00 00 	movabs r11,0x10d12e
ffff80000080f6f8:	00 00 00 
ffff80000080f6fb:	4c 01 d8             	add    rax,r11
ffff80000080f6fe:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080f702:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080f706:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
ffff80000080f709:	90                   	nop
ffff80000080f70a:	5d                   	pop    rbp
ffff80000080f70b:	c3                   	ret    

ffff80000080f70c <FAT32_lookup>:
FAT32_lookup():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:428


struct dir_entry * FAT32_lookup(struct index_node * parent_inode,struct dir_entry * dest_dentry)
{
ffff80000080f70c:	f3 0f 1e fa          	endbr64 
ffff80000080f710:	55                   	push   rbp
ffff80000080f711:	48 89 e5             	mov    rbp,rsp
ffff80000080f714:	41 57                	push   r15
ffff80000080f716:	53                   	push   rbx
ffff80000080f717:	48 83 ec 60          	sub    rsp,0x60
ffff80000080f71b:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080f71b <FAT32_lookup+0xf>
ffff80000080f722:	49 bb fd d0 10 00 00 	movabs r11,0x10d0fd
ffff80000080f729:	00 00 00 
ffff80000080f72c:	4c 01 db             	add    rbx,r11
ffff80000080f72f:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
ffff80000080f733:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:429
	struct FAT32_inode_info * finode = parent_inode->private_index_info;
ffff80000080f737:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080f73b:	48 8b 40 32          	mov    rax,QWORD PTR [rax+0x32]
ffff80000080f73f:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:430
	struct FAT32_sb_info * fsbi = parent_inode->sb->private_sb_info;
ffff80000080f743:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080f747:	48 8b 40 1a          	mov    rax,QWORD PTR [rax+0x1a]
ffff80000080f74b:	48 8b 40 1a          	mov    rax,QWORD PTR [rax+0x1a]
ffff80000080f74f:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:432

	unsigned int cluster = 0;
ffff80000080f753:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:433
	unsigned long sector = 0;
ffff80000080f75a:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffff80000080f761:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:434
	unsigned char * buf =NULL; 
ffff80000080f762:	48 c7 45 b0 00 00 00 	mov    QWORD PTR [rbp-0x50],0x0
ffff80000080f769:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:435
	int i = 0,j = 0,x = 0;
ffff80000080f76a:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff80000080f771:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff80000080f778:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:436
	struct FAT32_Directory * tmpdentry = NULL;
ffff80000080f77f:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff80000080f786:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:437
	struct FAT32_LongDirectory * tmpldentry = NULL;
ffff80000080f787:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff80000080f78e:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:438
	struct index_node * p = NULL;
ffff80000080f78f:	48 c7 45 a8 00 00 00 	mov    QWORD PTR [rbp-0x58],0x0
ffff80000080f796:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:440

	buf = kmalloc(fsbi->bytes_per_cluster, 0);
ffff80000080f797:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080f79b:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080f79f:	be 00 00 00 00       	mov    esi,0x0
ffff80000080f7a4:	48 89 c7             	mov    rdi,rax
ffff80000080f7a7:	49 89 df             	mov    r15,rbx
ffff80000080f7aa:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080f7af:	48 ba 68 57 ee ff ff 	movabs rdx,0xffffffffffee5768
ffff80000080f7b6:	ff ff ff 
ffff80000080f7b9:	48 01 da             	add    rdx,rbx
ffff80000080f7bc:	ff d2                	call   rdx
ffff80000080f7be:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:442

	cluster = finode->first_cluster;
ffff80000080f7c2:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080f7c6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f7c9:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:445

next_cluster:
	sector = fsbi->Data_firstsector + (cluster - 2) * fsbi->sector_per_cluster;
ffff80000080f7cc:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080f7d0:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
ffff80000080f7d4:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080f7d7:	83 e8 02             	sub    eax,0x2
ffff80000080f7da:	89 c1                	mov    ecx,eax
ffff80000080f7dc:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080f7e0:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080f7e4:	48 0f af c1          	imul   rax,rcx
ffff80000080f7e8:	48 01 d0             	add    rax,rdx
ffff80000080f7eb:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:446
	printf("lookup cluster:0x%x,sector:0x%x\r\n",cluster,sector);
ffff80000080f7ef:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000080f7f3:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080f7f6:	89 c6                	mov    esi,eax
ffff80000080f7f8:	48 b8 48 dd ff ff ff 	movabs rax,0xffffffffffffdd48
ffff80000080f7ff:	ff ff ff 
ffff80000080f802:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080f806:	48 89 c7             	mov    rdi,rax
ffff80000080f809:	49 89 df             	mov    r15,rbx
ffff80000080f80c:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080f811:	48 b9 96 4e ee ff ff 	movabs rcx,0xffffffffffee4e96
ffff80000080f818:	ff ff ff 
ffff80000080f81b:	48 01 d9             	add    rcx,rbx
ffff80000080f81e:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:447
    if(blkdev_read(root_sb->dev,sector*SECTOR_SIZE,fsbi->sector_per_cluster*SECTOR_SIZE,buf)<0)
ffff80000080f820:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080f824:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080f828:	48 c1 e0 09          	shl    rax,0x9
ffff80000080f82c:	48 89 c7             	mov    rdi,rax
ffff80000080f82f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080f833:	c1 e0 09             	shl    eax,0x9
ffff80000080f836:	89 c6                	mov    esi,eax
ffff80000080f838:	48 b8 10 fe ff ff ff 	movabs rax,0xfffffffffffffe10
ffff80000080f83f:	ff ff ff 
ffff80000080f842:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080f846:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f849:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff80000080f84d:	0f b7 c0             	movzx  eax,ax
ffff80000080f850:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffff80000080f854:	48 89 d1             	mov    rcx,rdx
ffff80000080f857:	48 89 fa             	mov    rdx,rdi
ffff80000080f85a:	89 c7                	mov    edi,eax
ffff80000080f85c:	49 89 df             	mov    r15,rbx
ffff80000080f85f:	48 b8 7c 02 ef ff ff 	movabs rax,0xffffffffffef027c
ffff80000080f866:	ff ff ff 
ffff80000080f869:	48 01 d8             	add    rax,rbx
ffff80000080f86c:	ff d0                	call   rax
ffff80000080f86e:	85 c0                	test   eax,eax
ffff80000080f870:	79 4b                	jns    ffff80000080f8bd <FAT32_lookup+0x1b1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:449
	{
		printf("FAT32 FS(lookup) read disk ERROR!!!!!!!!!!\n");
ffff80000080f872:	48 b8 70 dd ff ff ff 	movabs rax,0xffffffffffffdd70
ffff80000080f879:	ff ff ff 
ffff80000080f87c:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080f880:	48 89 c7             	mov    rdi,rax
ffff80000080f883:	49 89 df             	mov    r15,rbx
ffff80000080f886:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080f88b:	48 ba 96 4e ee ff ff 	movabs rdx,0xffffffffffee4e96
ffff80000080f892:	ff ff ff 
ffff80000080f895:	48 01 da             	add    rdx,rbx
ffff80000080f898:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:450
        kmfree(buf);
ffff80000080f89a:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080f89e:	48 89 c7             	mov    rdi,rax
ffff80000080f8a1:	49 89 df             	mov    r15,rbx
ffff80000080f8a4:	48 b8 d7 5a ee ff ff 	movabs rax,0xffffffffffee5ad7
ffff80000080f8ab:	ff ff ff 
ffff80000080f8ae:	48 01 d8             	add    rax,rbx
ffff80000080f8b1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:451
		return NULL;
ffff80000080f8b3:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080f8b8:	e9 5f 08 00 00       	jmp    ffff80000081011c <FAT32_lookup+0xa10>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:454
	}

	tmpdentry = (struct FAT32_Directory *)buf;
ffff80000080f8bd:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080f8c1:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:456

	for(i = 0;i < fsbi->bytes_per_cluster;i+= 32,tmpdentry++)
ffff80000080f8c5:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff80000080f8cc:	e9 9d 05 00 00       	jmp    ffff80000080fe6e <FAT32_lookup+0x762>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:458
	{
		if(tmpdentry->DIR_Attr == ATTR_LONG_NAME)
ffff80000080f8d1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080f8d5:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff80000080f8d9:	3c 0f                	cmp    al,0xf
ffff80000080f8db:	0f 84 59 05 00 00    	je     ffff80000080fe3a <FAT32_lookup+0x72e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:460
			continue;
		if(tmpdentry->DIR_Name[0] == 0xe5 || tmpdentry->DIR_Name[0] == 0x00 || tmpdentry->DIR_Name[0] == 0x05)
ffff80000080f8e1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080f8e5:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080f8e8:	3c e5                	cmp    al,0xe5
ffff80000080f8ea:	0f 84 4d 05 00 00    	je     ffff80000080fe3d <FAT32_lookup+0x731>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:460 (discriminator 2)
ffff80000080f8f0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080f8f4:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080f8f7:	84 c0                	test   al,al
ffff80000080f8f9:	0f 84 3e 05 00 00    	je     ffff80000080fe3d <FAT32_lookup+0x731>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:460 (discriminator 4)
ffff80000080f8ff:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080f903:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080f906:	3c 05                	cmp    al,0x5
ffff80000080f908:	0f 84 2f 05 00 00    	je     ffff80000080fe3d <FAT32_lookup+0x731>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:463
			continue;

		tmpldentry = (struct FAT32_LongDirectory *)tmpdentry-1;
ffff80000080f90e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080f912:	48 83 e8 20          	sub    rax,0x20
ffff80000080f916:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:464
		j = 0;
ffff80000080f91a:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:467

		//long file/dir name compare
		while(tmpldentry->LDIR_Attr == ATTR_LONG_NAME && tmpldentry->LDIR_Ord != 0xe5)
ffff80000080f921:	e9 88 01 00 00       	jmp    ffff80000080faae <FAT32_lookup+0x3a2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:469
		{
			for(x=0;x<5;x++)
ffff80000080f926:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff80000080f92d:	eb 6a                	jmp    ffff80000080f999 <FAT32_lookup+0x28d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:471
			{
				if(j>dest_dentry->name_length && tmpldentry->LDIR_Name1[x] == 0xffff)
ffff80000080f92f:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080f933:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080f936:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff80000080f939:	7e 15                	jle    ffff80000080f950 <FAT32_lookup+0x244>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:471 (discriminator 1)
ffff80000080f93b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080f93f:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff80000080f942:	48 63 d2             	movsxd rdx,edx
ffff80000080f945:	0f b7 44 50 01       	movzx  eax,WORD PTR [rax+rdx*2+0x1]
ffff80000080f94a:	66 83 f8 ff          	cmp    ax,0xffff
ffff80000080f94e:	74 44                	je     ffff80000080f994 <FAT32_lookup+0x288>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:473
					continue;
				else if(j>dest_dentry->name_length || tmpldentry->LDIR_Name1[x] != (unsigned short)(dest_dentry->name[j++]))
ffff80000080f950:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080f954:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080f957:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff80000080f95a:	0f 8f e0 04 00 00    	jg     ffff80000080fe40 <FAT32_lookup+0x734>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:473 (discriminator 1)
ffff80000080f960:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080f964:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff80000080f967:	48 63 d2             	movsxd rdx,edx
ffff80000080f96a:	0f b7 4c 50 01       	movzx  ecx,WORD PTR [rax+rdx*2+0x1]
ffff80000080f96f:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080f973:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff80000080f976:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080f979:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080f97c:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
ffff80000080f97f:	48 98                	cdqe   
ffff80000080f981:	48 01 f0             	add    rax,rsi
ffff80000080f984:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080f987:	66 98                	cbw    
ffff80000080f989:	66 39 c1             	cmp    cx,ax
ffff80000080f98c:	0f 85 ae 04 00 00    	jne    ffff80000080fe40 <FAT32_lookup+0x734>
ffff80000080f992:	eb 01                	jmp    ffff80000080f995 <FAT32_lookup+0x289>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:472
					continue;
ffff80000080f994:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:469 (discriminator 2)
			for(x=0;x<5;x++)
ffff80000080f995:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:469 (discriminator 1)
ffff80000080f999:	83 7d e0 04          	cmp    DWORD PTR [rbp-0x20],0x4
ffff80000080f99d:	7e 90                	jle    ffff80000080f92f <FAT32_lookup+0x223>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:476
					goto continue_cmp_fail;
			}
			for(x=0;x<6;x++)
ffff80000080f99f:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff80000080f9a6:	eb 6a                	jmp    ffff80000080fa12 <FAT32_lookup+0x306>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:478
			{
				if(j>dest_dentry->name_length && tmpldentry->LDIR_Name2[x] == 0xffff)
ffff80000080f9a8:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080f9ac:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080f9af:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff80000080f9b2:	7e 15                	jle    ffff80000080f9c9 <FAT32_lookup+0x2bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:478 (discriminator 1)
ffff80000080f9b4:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080f9b8:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff80000080f9bb:	48 63 d2             	movsxd rdx,edx
ffff80000080f9be:	0f b7 44 50 0e       	movzx  eax,WORD PTR [rax+rdx*2+0xe]
ffff80000080f9c3:	66 83 f8 ff          	cmp    ax,0xffff
ffff80000080f9c7:	74 44                	je     ffff80000080fa0d <FAT32_lookup+0x301>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:480
					continue;
				else if(j>dest_dentry->name_length || tmpldentry->LDIR_Name2[x] != (unsigned short)(dest_dentry->name[j++]))
ffff80000080f9c9:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080f9cd:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080f9d0:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff80000080f9d3:	0f 8f 6a 04 00 00    	jg     ffff80000080fe43 <FAT32_lookup+0x737>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:480 (discriminator 1)
ffff80000080f9d9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080f9dd:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff80000080f9e0:	48 63 d2             	movsxd rdx,edx
ffff80000080f9e3:	0f b7 4c 50 0e       	movzx  ecx,WORD PTR [rax+rdx*2+0xe]
ffff80000080f9e8:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080f9ec:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff80000080f9ef:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080f9f2:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080f9f5:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
ffff80000080f9f8:	48 98                	cdqe   
ffff80000080f9fa:	48 01 f0             	add    rax,rsi
ffff80000080f9fd:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080fa00:	66 98                	cbw    
ffff80000080fa02:	66 39 c1             	cmp    cx,ax
ffff80000080fa05:	0f 85 38 04 00 00    	jne    ffff80000080fe43 <FAT32_lookup+0x737>
ffff80000080fa0b:	eb 01                	jmp    ffff80000080fa0e <FAT32_lookup+0x302>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:479
					continue;
ffff80000080fa0d:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:476 (discriminator 2)
			for(x=0;x<6;x++)
ffff80000080fa0e:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:476 (discriminator 1)
ffff80000080fa12:	83 7d e0 05          	cmp    DWORD PTR [rbp-0x20],0x5
ffff80000080fa16:	7e 90                	jle    ffff80000080f9a8 <FAT32_lookup+0x29c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:483
					goto continue_cmp_fail;
			}
			for(x=0;x<2;x++)
ffff80000080fa18:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff80000080fa1f:	eb 72                	jmp    ffff80000080fa93 <FAT32_lookup+0x387>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:485
			{
				if(j>dest_dentry->name_length && tmpldentry->LDIR_Name3[x] == 0xffff)
ffff80000080fa21:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080fa25:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080fa28:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff80000080fa2b:	7e 19                	jle    ffff80000080fa46 <FAT32_lookup+0x33a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:485 (discriminator 1)
ffff80000080fa2d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080fa31:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff80000080fa34:	48 63 d2             	movsxd rdx,edx
ffff80000080fa37:	48 83 c2 08          	add    rdx,0x8
ffff80000080fa3b:	0f b7 44 50 0c       	movzx  eax,WORD PTR [rax+rdx*2+0xc]
ffff80000080fa40:	66 83 f8 ff          	cmp    ax,0xffff
ffff80000080fa44:	74 48                	je     ffff80000080fa8e <FAT32_lookup+0x382>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:487
					continue;
				else if(j>dest_dentry->name_length || tmpldentry->LDIR_Name3[x] != (unsigned short)(dest_dentry->name[j++]))
ffff80000080fa46:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080fa4a:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080fa4d:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff80000080fa50:	0f 8f f0 03 00 00    	jg     ffff80000080fe46 <FAT32_lookup+0x73a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:487 (discriminator 1)
ffff80000080fa56:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080fa5a:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff80000080fa5d:	48 63 d2             	movsxd rdx,edx
ffff80000080fa60:	48 83 c2 08          	add    rdx,0x8
ffff80000080fa64:	0f b7 4c 50 0c       	movzx  ecx,WORD PTR [rax+rdx*2+0xc]
ffff80000080fa69:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080fa6d:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff80000080fa70:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080fa73:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080fa76:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
ffff80000080fa79:	48 98                	cdqe   
ffff80000080fa7b:	48 01 f0             	add    rax,rsi
ffff80000080fa7e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080fa81:	66 98                	cbw    
ffff80000080fa83:	66 39 c1             	cmp    cx,ax
ffff80000080fa86:	0f 85 ba 03 00 00    	jne    ffff80000080fe46 <FAT32_lookup+0x73a>
ffff80000080fa8c:	eb 01                	jmp    ffff80000080fa8f <FAT32_lookup+0x383>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:486
					continue;
ffff80000080fa8e:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:483 (discriminator 2)
			for(x=0;x<2;x++)
ffff80000080fa8f:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:483 (discriminator 1)
ffff80000080fa93:	83 7d e0 01          	cmp    DWORD PTR [rbp-0x20],0x1
ffff80000080fa97:	7e 88                	jle    ffff80000080fa21 <FAT32_lookup+0x315>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:491
					goto continue_cmp_fail;
			}

			if(j >= dest_dentry->name_length)
ffff80000080fa99:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080fa9d:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080faa0:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff80000080faa3:	0f 8d 2e 04 00 00    	jge    ffff80000080fed7 <FAT32_lookup+0x7cb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:496
			{
				goto find_lookup_success;
			}

			tmpldentry --;
ffff80000080faa9:	48 83 6d d0 20       	sub    QWORD PTR [rbp-0x30],0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:467
		while(tmpldentry->LDIR_Attr == ATTR_LONG_NAME && tmpldentry->LDIR_Ord != 0xe5)
ffff80000080faae:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080fab2:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff80000080fab6:	3c 0f                	cmp    al,0xf
ffff80000080fab8:	75 0f                	jne    ffff80000080fac9 <FAT32_lookup+0x3bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:467 (discriminator 1)
ffff80000080faba:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080fabe:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080fac1:	3c e5                	cmp    al,0xe5
ffff80000080fac3:	0f 85 5d fe ff ff    	jne    ffff80000080f926 <FAT32_lookup+0x21a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:500
		}

		//short file/dir base name compare
		j = 0;
ffff80000080fac9:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:501
		for(x=0;x<8;x++)
ffff80000080fad0:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff80000080fad7:	e9 f4 01 00 00       	jmp    ffff80000080fcd0 <FAT32_lookup+0x5c4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:503
		{
			switch(tmpdentry->DIR_Name[x])
ffff80000080fadc:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080fae0:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff80000080fae3:	48 98                	cdqe   
ffff80000080fae5:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff80000080fae9:	0f b6 c0             	movzx  eax,al
ffff80000080faec:	83 f8 7a             	cmp    eax,0x7a
ffff80000080faef:	0f 8f d0 01 00 00    	jg     ffff80000080fcc5 <FAT32_lookup+0x5b9>
ffff80000080faf5:	83 f8 61             	cmp    eax,0x61
ffff80000080faf8:	0f 8d e6 00 00 00    	jge    ffff80000080fbe4 <FAT32_lookup+0x4d8>
ffff80000080fafe:	83 f8 5a             	cmp    eax,0x5a
ffff80000080fb01:	0f 8f be 01 00 00    	jg     ffff80000080fcc5 <FAT32_lookup+0x5b9>
ffff80000080fb07:	83 f8 41             	cmp    eax,0x41
ffff80000080fb0a:	0f 8d d4 00 00 00    	jge    ffff80000080fbe4 <FAT32_lookup+0x4d8>
ffff80000080fb10:	83 f8 20             	cmp    eax,0x20
ffff80000080fb13:	74 1a                	je     ffff80000080fb2f <FAT32_lookup+0x423>
ffff80000080fb15:	83 f8 20             	cmp    eax,0x20
ffff80000080fb18:	0f 8c a7 01 00 00    	jl     ffff80000080fcc5 <FAT32_lookup+0x5b9>
ffff80000080fb1e:	83 e8 30             	sub    eax,0x30
ffff80000080fb21:	83 f8 09             	cmp    eax,0x9
ffff80000080fb24:	0f 87 9b 01 00 00    	ja     ffff80000080fcc5 <FAT32_lookup+0x5b9>
ffff80000080fb2a:	e9 53 01 00 00       	jmp    ffff80000080fc82 <FAT32_lookup+0x576>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:506
			{
				case ' ':
					if(!(tmpdentry->DIR_Attr & ATTR_DIRECTORY))
ffff80000080fb2f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080fb33:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff80000080fb37:	0f b6 c0             	movzx  eax,al
ffff80000080fb3a:	83 e0 10             	and    eax,0x10
ffff80000080fb3d:	85 c0                	test   eax,eax
ffff80000080fb3f:	75 50                	jne    ffff80000080fb91 <FAT32_lookup+0x485>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:508
					{
						if(dest_dentry->name[j]=='.')
ffff80000080fb41:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080fb45:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080fb48:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080fb4b:	48 98                	cdqe   
ffff80000080fb4d:	48 01 d0             	add    rax,rdx
ffff80000080fb50:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080fb53:	3c 2e                	cmp    al,0x2e
ffff80000080fb55:	0f 84 70 01 00 00    	je     ffff80000080fccb <FAT32_lookup+0x5bf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:510
							continue;
						else if(tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff80000080fb5b:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080fb5f:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff80000080fb62:	48 98                	cdqe   
ffff80000080fb64:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff80000080fb68:	0f b6 d0             	movzx  edx,al
ffff80000080fb6b:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080fb6f:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080fb72:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080fb75:	48 98                	cdqe   
ffff80000080fb77:	48 01 c8             	add    rax,rcx
ffff80000080fb7a:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080fb7d:	0f be c0             	movsx  eax,al
ffff80000080fb80:	39 c2                	cmp    edx,eax
ffff80000080fb82:	0f 85 c1 02 00 00    	jne    ffff80000080fe49 <FAT32_lookup+0x73d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:512
						{
							j++;
ffff80000080fb88:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:513
							break;
ffff80000080fb8c:	e9 3b 01 00 00       	jmp    ffff80000080fccc <FAT32_lookup+0x5c0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:520
						else
							goto continue_cmp_fail;
					}
					else
					{
						if(j < dest_dentry->name_length && tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff80000080fb91:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080fb95:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080fb98:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff80000080fb9b:	7d 32                	jge    ffff80000080fbcf <FAT32_lookup+0x4c3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:520 (discriminator 1)
ffff80000080fb9d:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080fba1:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff80000080fba4:	48 98                	cdqe   
ffff80000080fba6:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff80000080fbaa:	0f b6 d0             	movzx  edx,al
ffff80000080fbad:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080fbb1:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080fbb4:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080fbb7:	48 98                	cdqe   
ffff80000080fbb9:	48 01 c8             	add    rax,rcx
ffff80000080fbbc:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080fbbf:	0f be c0             	movsx  eax,al
ffff80000080fbc2:	39 c2                	cmp    edx,eax
ffff80000080fbc4:	75 09                	jne    ffff80000080fbcf <FAT32_lookup+0x4c3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:522
						{
							j++;
ffff80000080fbc6:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:523
							break;
ffff80000080fbca:	e9 fd 00 00 00       	jmp    ffff80000080fccc <FAT32_lookup+0x5c0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:525
						}
						else if(j == dest_dentry->name_length)
ffff80000080fbcf:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080fbd3:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080fbd6:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff80000080fbd9:	0f 85 6d 02 00 00    	jne    ffff80000080fe4c <FAT32_lookup+0x740>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:526
							continue;
ffff80000080fbdf:	e9 e8 00 00 00       	jmp    ffff80000080fccc <FAT32_lookup+0x5c0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:533
							goto continue_cmp_fail;
					}

				case 'A' ... 'Z':
				case 'a' ... 'z':
					if(tmpdentry->DIR_NTRes & LOWERCASE_BASE)
ffff80000080fbe4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080fbe8:	0f b6 40 0c          	movzx  eax,BYTE PTR [rax+0xc]
ffff80000080fbec:	0f b6 c0             	movzx  eax,al
ffff80000080fbef:	83 e0 08             	and    eax,0x8
ffff80000080fbf2:	85 c0                	test   eax,eax
ffff80000080fbf4:	74 49                	je     ffff80000080fc3f <FAT32_lookup+0x533>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:534
						if(j < dest_dentry->name_length && tmpdentry->DIR_Name[x] + 32 == dest_dentry->name[j])
ffff80000080fbf6:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080fbfa:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080fbfd:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff80000080fc00:	0f 8d 49 02 00 00    	jge    ffff80000080fe4f <FAT32_lookup+0x743>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:534 (discriminator 1)
ffff80000080fc06:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080fc0a:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff80000080fc0d:	48 98                	cdqe   
ffff80000080fc0f:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff80000080fc13:	0f b6 c0             	movzx  eax,al
ffff80000080fc16:	8d 50 20             	lea    edx,[rax+0x20]
ffff80000080fc19:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080fc1d:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080fc20:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080fc23:	48 98                	cdqe   
ffff80000080fc25:	48 01 c8             	add    rax,rcx
ffff80000080fc28:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080fc2b:	0f be c0             	movsx  eax,al
ffff80000080fc2e:	39 c2                	cmp    edx,eax
ffff80000080fc30:	0f 85 19 02 00 00    	jne    ffff80000080fe4f <FAT32_lookup+0x743>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:536
						{
							j++;
ffff80000080fc36:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:537
							break;
ffff80000080fc3a:	e9 8d 00 00 00       	jmp    ffff80000080fccc <FAT32_lookup+0x5c0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:543
						}
						else
							goto continue_cmp_fail;
					else
					{
						if(j < dest_dentry->name_length && tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff80000080fc3f:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080fc43:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080fc46:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff80000080fc49:	0f 8d 03 02 00 00    	jge    ffff80000080fe52 <FAT32_lookup+0x746>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:543 (discriminator 1)
ffff80000080fc4f:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080fc53:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff80000080fc56:	48 98                	cdqe   
ffff80000080fc58:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff80000080fc5c:	0f b6 d0             	movzx  edx,al
ffff80000080fc5f:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080fc63:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080fc66:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080fc69:	48 98                	cdqe   
ffff80000080fc6b:	48 01 c8             	add    rax,rcx
ffff80000080fc6e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080fc71:	0f be c0             	movsx  eax,al
ffff80000080fc74:	39 c2                	cmp    edx,eax
ffff80000080fc76:	0f 85 d6 01 00 00    	jne    ffff80000080fe52 <FAT32_lookup+0x746>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:545
						{
							j++;
ffff80000080fc7c:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:546
							break;
ffff80000080fc80:	eb 4a                	jmp    ffff80000080fccc <FAT32_lookup+0x5c0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:553
						else
							goto continue_cmp_fail;
					}

				case '0' ... '9':
					if(j < dest_dentry->name_length && tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff80000080fc82:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080fc86:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080fc89:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff80000080fc8c:	0f 8d c3 01 00 00    	jge    ffff80000080fe55 <FAT32_lookup+0x749>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:553 (discriminator 1)
ffff80000080fc92:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080fc96:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff80000080fc99:	48 98                	cdqe   
ffff80000080fc9b:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff80000080fc9f:	0f b6 d0             	movzx  edx,al
ffff80000080fca2:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080fca6:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080fca9:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080fcac:	48 98                	cdqe   
ffff80000080fcae:	48 01 c8             	add    rax,rcx
ffff80000080fcb1:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080fcb4:	0f be c0             	movsx  eax,al
ffff80000080fcb7:	39 c2                	cmp    edx,eax
ffff80000080fcb9:	0f 85 96 01 00 00    	jne    ffff80000080fe55 <FAT32_lookup+0x749>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:555
					{
						j++;
ffff80000080fcbf:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:556
						break;
ffff80000080fcc3:	eb 07                	jmp    ffff80000080fccc <FAT32_lookup+0x5c0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:562
					}
					else
						goto continue_cmp_fail;

				default :
					j++;
ffff80000080fcc5:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:563
					break;
ffff80000080fcc9:	eb 01                	jmp    ffff80000080fccc <FAT32_lookup+0x5c0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:509
							continue;
ffff80000080fccb:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:501 (discriminator 2)
		for(x=0;x<8;x++)
ffff80000080fccc:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:501 (discriminator 1)
ffff80000080fcd0:	83 7d e0 07          	cmp    DWORD PTR [rbp-0x20],0x7
ffff80000080fcd4:	0f 8e 02 fe ff ff    	jle    ffff80000080fadc <FAT32_lookup+0x3d0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:567
			}
		}
		//short file ext name compare
		if(!(tmpdentry->DIR_Attr & ATTR_DIRECTORY))
ffff80000080fcda:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080fcde:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff80000080fce2:	0f b6 c0             	movzx  eax,al
ffff80000080fce5:	83 e0 10             	and    eax,0x10
ffff80000080fce8:	85 c0                	test   eax,eax
ffff80000080fcea:	0f 85 ea 01 00 00    	jne    ffff80000080feda <FAT32_lookup+0x7ce>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:569
		{
			j++;
ffff80000080fcf0:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:570
			for(x=8;x<11;x++)
ffff80000080fcf4:	c7 45 e0 08 00 00 00 	mov    DWORD PTR [rbp-0x20],0x8
ffff80000080fcfb:	e9 2b 01 00 00       	jmp    ffff80000080fe2b <FAT32_lookup+0x71f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:572
			{
				switch(tmpdentry->DIR_Name[x])
ffff80000080fd00:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080fd04:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff80000080fd07:	48 98                	cdqe   
ffff80000080fd09:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff80000080fd0d:	0f b6 c0             	movzx  eax,al
ffff80000080fd10:	83 f8 7a             	cmp    eax,0x7a
ffff80000080fd13:	0f 8f 3f 01 00 00    	jg     ffff80000080fe58 <FAT32_lookup+0x74c>
ffff80000080fd19:	83 f8 61             	cmp    eax,0x61
ffff80000080fd1c:	7d 2e                	jge    ffff80000080fd4c <FAT32_lookup+0x640>
ffff80000080fd1e:	83 f8 5a             	cmp    eax,0x5a
ffff80000080fd21:	0f 8f 31 01 00 00    	jg     ffff80000080fe58 <FAT32_lookup+0x74c>
ffff80000080fd27:	83 f8 41             	cmp    eax,0x41
ffff80000080fd2a:	7d 20                	jge    ffff80000080fd4c <FAT32_lookup+0x640>
ffff80000080fd2c:	83 f8 20             	cmp    eax,0x20
ffff80000080fd2f:	0f 84 c4 00 00 00    	je     ffff80000080fdf9 <FAT32_lookup+0x6ed>
ffff80000080fd35:	83 f8 20             	cmp    eax,0x20
ffff80000080fd38:	0f 8c 1a 01 00 00    	jl     ffff80000080fe58 <FAT32_lookup+0x74c>
ffff80000080fd3e:	83 e8 30             	sub    eax,0x30
ffff80000080fd41:	83 f8 09             	cmp    eax,0x9
ffff80000080fd44:	0f 87 0e 01 00 00    	ja     ffff80000080fe58 <FAT32_lookup+0x74c>
ffff80000080fd4a:	eb 7e                	jmp    ffff80000080fdca <FAT32_lookup+0x6be>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:576
				{
					case 'A' ... 'Z':
					case 'a' ... 'z':
						if(tmpdentry->DIR_NTRes & LOWERCASE_EXT)
ffff80000080fd4c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080fd50:	0f b6 40 0c          	movzx  eax,BYTE PTR [rax+0xc]
ffff80000080fd54:	0f b6 c0             	movzx  eax,al
ffff80000080fd57:	83 e0 10             	and    eax,0x10
ffff80000080fd5a:	85 c0                	test   eax,eax
ffff80000080fd5c:	74 39                	je     ffff80000080fd97 <FAT32_lookup+0x68b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:577
							if(tmpdentry->DIR_Name[x] + 32 == dest_dentry->name[j])
ffff80000080fd5e:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080fd62:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff80000080fd65:	48 98                	cdqe   
ffff80000080fd67:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff80000080fd6b:	0f b6 c0             	movzx  eax,al
ffff80000080fd6e:	8d 50 20             	lea    edx,[rax+0x20]
ffff80000080fd71:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080fd75:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080fd78:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080fd7b:	48 98                	cdqe   
ffff80000080fd7d:	48 01 c8             	add    rax,rcx
ffff80000080fd80:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080fd83:	0f be c0             	movsx  eax,al
ffff80000080fd86:	39 c2                	cmp    edx,eax
ffff80000080fd88:	0f 85 cd 00 00 00    	jne    ffff80000080fe5b <FAT32_lookup+0x74f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:579
							{
								j++;
ffff80000080fd8e:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:580
								break;
ffff80000080fd92:	e9 90 00 00 00       	jmp    ffff80000080fe27 <FAT32_lookup+0x71b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:586
							}
							else
								goto continue_cmp_fail;
						else
						{
							if(tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff80000080fd97:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080fd9b:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff80000080fd9e:	48 98                	cdqe   
ffff80000080fda0:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff80000080fda4:	0f b6 d0             	movzx  edx,al
ffff80000080fda7:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080fdab:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080fdae:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080fdb1:	48 98                	cdqe   
ffff80000080fdb3:	48 01 c8             	add    rax,rcx
ffff80000080fdb6:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080fdb9:	0f be c0             	movsx  eax,al
ffff80000080fdbc:	39 c2                	cmp    edx,eax
ffff80000080fdbe:	0f 85 9a 00 00 00    	jne    ffff80000080fe5e <FAT32_lookup+0x752>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:588
							{
								j++;
ffff80000080fdc4:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:589
								break;
ffff80000080fdc8:	eb 5d                	jmp    ffff80000080fe27 <FAT32_lookup+0x71b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:596
							else
								goto continue_cmp_fail;
						}

					case '0' ... '9':
						if(tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff80000080fdca:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080fdce:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff80000080fdd1:	48 98                	cdqe   
ffff80000080fdd3:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff80000080fdd7:	0f b6 d0             	movzx  edx,al
ffff80000080fdda:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080fdde:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080fde1:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080fde4:	48 98                	cdqe   
ffff80000080fde6:	48 01 c8             	add    rax,rcx
ffff80000080fde9:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080fdec:	0f be c0             	movsx  eax,al
ffff80000080fdef:	39 c2                	cmp    edx,eax
ffff80000080fdf1:	75 6e                	jne    ffff80000080fe61 <FAT32_lookup+0x755>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:598
						{
							j++;
ffff80000080fdf3:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:599
							break;
ffff80000080fdf7:	eb 2e                	jmp    ffff80000080fe27 <FAT32_lookup+0x71b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:605
						}
						else
							goto continue_cmp_fail;

					case ' ':
						if(tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff80000080fdf9:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080fdfd:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff80000080fe00:	48 98                	cdqe   
ffff80000080fe02:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff80000080fe06:	0f b6 d0             	movzx  edx,al
ffff80000080fe09:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080fe0d:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080fe10:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080fe13:	48 98                	cdqe   
ffff80000080fe15:	48 01 c8             	add    rax,rcx
ffff80000080fe18:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080fe1b:	0f be c0             	movsx  eax,al
ffff80000080fe1e:	39 c2                	cmp    edx,eax
ffff80000080fe20:	75 42                	jne    ffff80000080fe64 <FAT32_lookup+0x758>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:607
						{
							j++;
ffff80000080fe22:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:608
							break;
ffff80000080fe26:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:570 (discriminator 2)
			for(x=8;x<11;x++)
ffff80000080fe27:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:570 (discriminator 1)
ffff80000080fe2b:	83 7d e0 0a          	cmp    DWORD PTR [rbp-0x20],0xa
ffff80000080fe2f:	0f 8e cb fe ff ff    	jle    ffff80000080fd00 <FAT32_lookup+0x5f4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:618
					default :
						goto continue_cmp_fail;
				}
			}
		}
		goto find_lookup_success;
ffff80000080fe35:	e9 a0 00 00 00       	jmp    ffff80000080feda <FAT32_lookup+0x7ce>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:459
			continue;
ffff80000080fe3a:	90                   	nop
ffff80000080fe3b:	eb 28                	jmp    ffff80000080fe65 <FAT32_lookup+0x759>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:461
			continue;
ffff80000080fe3d:	90                   	nop
ffff80000080fe3e:	eb 25                	jmp    ffff80000080fe65 <FAT32_lookup+0x759>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:474
					goto continue_cmp_fail;
ffff80000080fe40:	90                   	nop
ffff80000080fe41:	eb 22                	jmp    ffff80000080fe65 <FAT32_lookup+0x759>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:481
					goto continue_cmp_fail;
ffff80000080fe43:	90                   	nop
ffff80000080fe44:	eb 1f                	jmp    ffff80000080fe65 <FAT32_lookup+0x759>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:488
					goto continue_cmp_fail;
ffff80000080fe46:	90                   	nop
ffff80000080fe47:	eb 1c                	jmp    ffff80000080fe65 <FAT32_lookup+0x759>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:516
							goto continue_cmp_fail;
ffff80000080fe49:	90                   	nop
ffff80000080fe4a:	eb 19                	jmp    ffff80000080fe65 <FAT32_lookup+0x759>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:528
							goto continue_cmp_fail;
ffff80000080fe4c:	90                   	nop
ffff80000080fe4d:	eb 16                	jmp    ffff80000080fe65 <FAT32_lookup+0x759>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:540
							goto continue_cmp_fail;
ffff80000080fe4f:	90                   	nop
ffff80000080fe50:	eb 13                	jmp    ffff80000080fe65 <FAT32_lookup+0x759>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:549
							goto continue_cmp_fail;
ffff80000080fe52:	90                   	nop
ffff80000080fe53:	eb 10                	jmp    ffff80000080fe65 <FAT32_lookup+0x759>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:559
						goto continue_cmp_fail;
ffff80000080fe55:	90                   	nop
ffff80000080fe56:	eb 0d                	jmp    ffff80000080fe65 <FAT32_lookup+0x759>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:614
						goto continue_cmp_fail;
ffff80000080fe58:	90                   	nop
ffff80000080fe59:	eb 0a                	jmp    ffff80000080fe65 <FAT32_lookup+0x759>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:583
								goto continue_cmp_fail;
ffff80000080fe5b:	90                   	nop
ffff80000080fe5c:	eb 07                	jmp    ffff80000080fe65 <FAT32_lookup+0x759>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:592
								goto continue_cmp_fail;
ffff80000080fe5e:	90                   	nop
ffff80000080fe5f:	eb 04                	jmp    ffff80000080fe65 <FAT32_lookup+0x759>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:602
							goto continue_cmp_fail;
ffff80000080fe61:	90                   	nop
ffff80000080fe62:	eb 01                	jmp    ffff80000080fe65 <FAT32_lookup+0x759>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:611
							goto continue_cmp_fail;
ffff80000080fe64:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:456 (discriminator 2)
	for(i = 0;i < fsbi->bytes_per_cluster;i+= 32,tmpdentry++)
ffff80000080fe65:	83 45 e8 20          	add    DWORD PTR [rbp-0x18],0x20
ffff80000080fe69:	48 83 45 d8 20       	add    QWORD PTR [rbp-0x28],0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:456 (discriminator 1)
ffff80000080fe6e:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080fe71:	48 63 d0             	movsxd rdx,eax
ffff80000080fe74:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080fe78:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080fe7c:	48 39 c2             	cmp    rdx,rax
ffff80000080fe7f:	0f 8c 4c fa ff ff    	jl     ffff80000080f8d1 <FAT32_lookup+0x1c5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:623

continue_cmp_fail:;
	}
	
	cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff80000080fe85:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080fe88:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080fe8c:	89 d6                	mov    esi,edx
ffff80000080fe8e:	48 89 c7             	mov    rdi,rax
ffff80000080fe91:	49 89 df             	mov    r15,rbx
ffff80000080fe94:	48 b8 22 19 ef ff ff 	movabs rax,0xffffffffffef1922
ffff80000080fe9b:	ff ff ff 
ffff80000080fe9e:	48 01 d8             	add    rax,rbx
ffff80000080fea1:	ff d0                	call   rax
ffff80000080fea3:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:624
	if(cluster < 0x0ffffff7)
ffff80000080fea6:	81 7d ec f6 ff ff 0f 	cmp    DWORD PTR [rbp-0x14],0xffffff6
ffff80000080fead:	77 05                	ja     ffff80000080feb4 <FAT32_lookup+0x7a8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:625
		goto next_cluster;
ffff80000080feaf:	e9 18 f9 ff ff       	jmp    ffff80000080f7cc <FAT32_lookup+0xc0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:627

    kmfree(buf);
ffff80000080feb4:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080feb8:	48 89 c7             	mov    rdi,rax
ffff80000080febb:	49 89 df             	mov    r15,rbx
ffff80000080febe:	48 b8 d7 5a ee ff ff 	movabs rax,0xffffffffffee5ad7
ffff80000080fec5:	ff ff ff 
ffff80000080fec8:	48 01 d8             	add    rax,rbx
ffff80000080fecb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:628
	return NULL;
ffff80000080fecd:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080fed2:	e9 45 02 00 00       	jmp    ffff80000081011c <FAT32_lookup+0xa10>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:493
				goto find_lookup_success;
ffff80000080fed7:	90                   	nop
ffff80000080fed8:	eb 01                	jmp    ffff80000080fedb <FAT32_lookup+0x7cf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:618
		goto find_lookup_success;
ffff80000080feda:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:631

find_lookup_success:
	p = (struct index_node *) kmalloc(sizeof(struct index_node), 0);
ffff80000080fedb:	be 00 00 00 00       	mov    esi,0x0
ffff80000080fee0:	bf 3a 00 00 00       	mov    edi,0x3a
ffff80000080fee5:	49 89 df             	mov    r15,rbx
ffff80000080fee8:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080feed:	48 ba 68 57 ee ff ff 	movabs rdx,0xffffffffffee5768
ffff80000080fef4:	ff ff ff 
ffff80000080fef7:	48 01 da             	add    rdx,rbx
ffff80000080fefa:	ff d2                	call   rdx
ffff80000080fefc:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:632
	memset(p,0,sizeof(struct index_node));
ffff80000080ff00:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080ff04:	ba 3a 00 00 00       	mov    edx,0x3a
ffff80000080ff09:	be 00 00 00 00       	mov    esi,0x0
ffff80000080ff0e:	48 89 c7             	mov    rdi,rax
ffff80000080ff11:	49 89 df             	mov    r15,rbx
ffff80000080ff14:	48 b8 6b 53 ef ff ff 	movabs rax,0xffffffffffef536b
ffff80000080ff1b:	ff ff ff 
ffff80000080ff1e:	48 01 d8             	add    rax,rbx
ffff80000080ff21:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:633
	p->file_size = tmpdentry->DIR_FileSize;
ffff80000080ff23:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080ff27:	8b 40 1c             	mov    eax,DWORD PTR [rax+0x1c]
ffff80000080ff2a:	89 c2                	mov    edx,eax
ffff80000080ff2c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080ff30:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:634
	p->blocks = (p->file_size + fsbi->bytes_per_cluster - 1)/fsbi->bytes_per_sector;
ffff80000080ff33:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080ff37:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080ff3a:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080ff3e:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080ff42:	48 01 d0             	add    rax,rdx
ffff80000080ff45:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff80000080ff49:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080ff4d:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000080ff51:	48 89 c1             	mov    rcx,rax
ffff80000080ff54:	48 89 d0             	mov    rax,rdx
ffff80000080ff57:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080ff5c:	48 f7 f1             	div    rcx
ffff80000080ff5f:	48 89 c2             	mov    rdx,rax
ffff80000080ff62:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080ff66:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:635
	p->attribute = (tmpdentry->DIR_Attr & ATTR_DIRECTORY) ? FS_ATTR_DIR : FS_ATTR_FILE;
ffff80000080ff6a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080ff6e:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff80000080ff72:	0f b6 c0             	movzx  eax,al
ffff80000080ff75:	83 e0 10             	and    eax,0x10
ffff80000080ff78:	85 c0                	test   eax,eax
ffff80000080ff7a:	74 07                	je     ffff80000080ff83 <FAT32_lookup+0x877>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:635 (discriminator 1)
ffff80000080ff7c:	ba 02 00 00 00       	mov    edx,0x2
ffff80000080ff81:	eb 05                	jmp    ffff80000080ff88 <FAT32_lookup+0x87c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:635 (discriminator 2)
ffff80000080ff83:	ba 01 00 00 00       	mov    edx,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:635 (discriminator 4)
ffff80000080ff88:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080ff8c:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:636 (discriminator 4)
	p->sb = parent_inode->sb;
ffff80000080ff90:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080ff94:	48 8b 50 1a          	mov    rdx,QWORD PTR [rax+0x1a]
ffff80000080ff98:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080ff9c:	48 89 50 1a          	mov    QWORD PTR [rax+0x1a],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:637 (discriminator 4)
	p->f_ops = &FAT32_file_ops;
ffff80000080ffa0:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080ffa4:	48 ba 38 fe ff ff ff 	movabs rdx,0xfffffffffffffe38
ffff80000080ffab:	ff ff ff 
ffff80000080ffae:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080ffb2:	48 89 50 22          	mov    QWORD PTR [rax+0x22],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:638 (discriminator 4)
	p->inode_ops = &FAT32_inode_ops;
ffff80000080ffb6:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080ffba:	48 ba 48 ff ff ff ff 	movabs rdx,0xffffffffffffff48
ffff80000080ffc1:	ff ff ff 
ffff80000080ffc4:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080ffc8:	48 89 50 2a          	mov    QWORD PTR [rax+0x2a],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:640 (discriminator 4)

	p->private_index_info = (struct FAT32_inode_info *) kmalloc(sizeof(struct FAT32_inode_info), 0);
ffff80000080ffcc:	be 00 00 00 00       	mov    esi,0x0
ffff80000080ffd1:	bf 20 00 00 00       	mov    edi,0x20
ffff80000080ffd6:	49 89 df             	mov    r15,rbx
ffff80000080ffd9:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080ffde:	48 ba 68 57 ee ff ff 	movabs rdx,0xffffffffffee5768
ffff80000080ffe5:	ff ff ff 
ffff80000080ffe8:	48 01 da             	add    rdx,rbx
ffff80000080ffeb:	ff d2                	call   rdx
ffff80000080ffed:	48 89 c2             	mov    rdx,rax
ffff80000080fff0:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080fff4:	48 89 50 32          	mov    QWORD PTR [rax+0x32],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:641 (discriminator 4)
	memset(p->private_index_info,0,sizeof(struct FAT32_inode_info));
ffff80000080fff8:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080fffc:	48 8b 40 32          	mov    rax,QWORD PTR [rax+0x32]
ffff800000810000:	ba 20 00 00 00       	mov    edx,0x20
ffff800000810005:	be 00 00 00 00       	mov    esi,0x0
ffff80000081000a:	48 89 c7             	mov    rdi,rax
ffff80000081000d:	49 89 df             	mov    r15,rbx
ffff800000810010:	48 b8 6b 53 ef ff ff 	movabs rax,0xffffffffffef536b
ffff800000810017:	ff ff ff 
ffff80000081001a:	48 01 d8             	add    rax,rbx
ffff80000081001d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:642 (discriminator 4)
	finode = p->private_index_info;
ffff80000081001f:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810023:	48 8b 40 32          	mov    rax,QWORD PTR [rax+0x32]
ffff800000810027:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:644 (discriminator 4)

	finode->first_cluster = (tmpdentry->DIR_FstClusHI<< 16 | tmpdentry->DIR_FstClusLO) & 0x0fffffff;
ffff80000081002b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081002f:	0f b7 40 14          	movzx  eax,WORD PTR [rax+0x14]
ffff800000810033:	0f b7 c0             	movzx  eax,ax
ffff800000810036:	c1 e0 10             	shl    eax,0x10
ffff800000810039:	89 c2                	mov    edx,eax
ffff80000081003b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081003f:	0f b7 40 1a          	movzx  eax,WORD PTR [rax+0x1a]
ffff800000810043:	0f b7 c0             	movzx  eax,ax
ffff800000810046:	09 d0                	or     eax,edx
ffff800000810048:	48 98                	cdqe   
ffff80000081004a:	25 ff ff ff 0f       	and    eax,0xfffffff
ffff80000081004f:	48 89 c2             	mov    rdx,rax
ffff800000810052:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000810056:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:645 (discriminator 4)
	finode->dentry_location = cluster;
ffff800000810059:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000081005c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000810060:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:646 (discriminator 4)
	finode->dentry_position = tmpdentry - (struct FAT32_Directory *)buf;
ffff800000810064:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810068:	48 2b 45 b0          	sub    rax,QWORD PTR [rbp-0x50]
ffff80000081006c:	48 c1 f8 05          	sar    rax,0x5
ffff800000810070:	48 89 c2             	mov    rdx,rax
ffff800000810073:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000810077:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:647 (discriminator 4)
	finode->create_date = tmpdentry->DIR_CrtTime;
ffff80000081007b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081007f:	0f b7 50 0e          	movzx  edx,WORD PTR [rax+0xe]
ffff800000810083:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000810087:	66 89 50 18          	mov    WORD PTR [rax+0x18],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:648 (discriminator 4)
	finode->create_time = tmpdentry->DIR_CrtDate;
ffff80000081008b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081008f:	0f b7 50 10          	movzx  edx,WORD PTR [rax+0x10]
ffff800000810093:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000810097:	66 89 50 1a          	mov    WORD PTR [rax+0x1a],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:649 (discriminator 4)
	finode->write_date = tmpdentry->DIR_WrtTime;
ffff80000081009b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081009f:	0f b7 50 16          	movzx  edx,WORD PTR [rax+0x16]
ffff8000008100a3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008100a7:	66 89 50 1c          	mov    WORD PTR [rax+0x1c],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:650 (discriminator 4)
	finode->write_time = tmpdentry->DIR_WrtDate;
ffff8000008100ab:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008100af:	0f b7 50 18          	movzx  edx,WORD PTR [rax+0x18]
ffff8000008100b3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008100b7:	66 89 50 1e          	mov    WORD PTR [rax+0x1e],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:652 (discriminator 4)

	if((tmpdentry->DIR_FstClusHI >> 12) && (p->attribute & FS_ATTR_FILE))
ffff8000008100bb:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008100bf:	0f b7 40 14          	movzx  eax,WORD PTR [rax+0x14]
ffff8000008100c3:	66 c1 e8 0c          	shr    ax,0xc
ffff8000008100c7:	66 85 c0             	test   ax,ax
ffff8000008100ca:	74 27                	je     ffff8000008100f3 <FAT32_lookup+0x9e7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:652 (discriminator 1)
ffff8000008100cc:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008100d0:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008100d4:	83 e0 01             	and    eax,0x1
ffff8000008100d7:	48 85 c0             	test   rax,rax
ffff8000008100da:	74 17                	je     ffff8000008100f3 <FAT32_lookup+0x9e7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:654
	{
		p->attribute |= FS_ATTR_DEVICE;
ffff8000008100dc:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008100e0:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008100e4:	48 83 c8 04          	or     rax,0x4
ffff8000008100e8:	48 89 c2             	mov    rdx,rax
ffff8000008100eb:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008100ef:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:657
	}

	dest_dentry->dir_inode = p;
ffff8000008100f3:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008100f7:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff8000008100fb:	48 89 50 3c          	mov    QWORD PTR [rax+0x3c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:658
    kmfree(buf);
ffff8000008100ff:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000810103:	48 89 c7             	mov    rdi,rax
ffff800000810106:	49 89 df             	mov    r15,rbx
ffff800000810109:	48 b8 d7 5a ee ff ff 	movabs rax,0xffffffffffee5ad7
ffff800000810110:	ff ff ff 
ffff800000810113:	48 01 d8             	add    rax,rbx
ffff800000810116:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:659
	return dest_dentry;	
ffff800000810118:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:660
}
ffff80000081011c:	48 83 c4 60          	add    rsp,0x60
ffff800000810120:	5b                   	pop    rbx
ffff800000810121:	41 5f                	pop    r15
ffff800000810123:	5d                   	pop    rbp
ffff800000810124:	c3                   	ret    

ffff800000810125 <FAT32_mkdir>:
FAT32_mkdir():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:664


long FAT32_mkdir(struct index_node * inode,struct dir_entry * dentry,int mode)
{}
ffff800000810125:	f3 0f 1e fa          	endbr64 
ffff800000810129:	55                   	push   rbp
ffff80000081012a:	48 89 e5             	mov    rbp,rsp
ffff80000081012d:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000081012d <FAT32_mkdir+0x8>
ffff800000810134:	49 bb eb c6 10 00 00 	movabs r11,0x10c6eb
ffff80000081013b:	00 00 00 
ffff80000081013e:	4c 01 d8             	add    rax,r11
ffff800000810141:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000810145:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000810149:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
ffff80000081014c:	90                   	nop
ffff80000081014d:	5d                   	pop    rbp
ffff80000081014e:	c3                   	ret    

ffff80000081014f <FAT32_rmdir>:
FAT32_rmdir():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:668


long FAT32_rmdir(struct index_node * inode,struct dir_entry * dentry)
{}
ffff80000081014f:	f3 0f 1e fa          	endbr64 
ffff800000810153:	55                   	push   rbp
ffff800000810154:	48 89 e5             	mov    rbp,rsp
ffff800000810157:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000810157 <FAT32_rmdir+0x8>
ffff80000081015e:	49 bb c1 c6 10 00 00 	movabs r11,0x10c6c1
ffff800000810165:	00 00 00 
ffff800000810168:	4c 01 d8             	add    rax,r11
ffff80000081016b:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000081016f:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000810173:	90                   	nop
ffff800000810174:	5d                   	pop    rbp
ffff800000810175:	c3                   	ret    

ffff800000810176 <FAT32_rename>:
FAT32_rename():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:671

long FAT32_rename(struct index_node * old_inode,struct dir_entry * old_dentry,struct index_node * new_inode,struct dir_entry * new_dentry)
{}
ffff800000810176:	f3 0f 1e fa          	endbr64 
ffff80000081017a:	55                   	push   rbp
ffff80000081017b:	48 89 e5             	mov    rbp,rsp
ffff80000081017e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000081017e <FAT32_rename+0x8>
ffff800000810185:	49 bb 9a c6 10 00 00 	movabs r11,0x10c69a
ffff80000081018c:	00 00 00 
ffff80000081018f:	4c 01 d8             	add    rax,r11
ffff800000810192:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000810196:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000081019a:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000081019e:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
ffff8000008101a2:	90                   	nop
ffff8000008101a3:	5d                   	pop    rbp
ffff8000008101a4:	c3                   	ret    

ffff8000008101a5 <FAT32_getattr>:
FAT32_getattr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:674

long FAT32_getattr(struct dir_entry * dentry,unsigned long * attr)
{}
ffff8000008101a5:	f3 0f 1e fa          	endbr64 
ffff8000008101a9:	55                   	push   rbp
ffff8000008101aa:	48 89 e5             	mov    rbp,rsp
ffff8000008101ad:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008101ad <FAT32_getattr+0x8>
ffff8000008101b4:	49 bb 6b c6 10 00 00 	movabs r11,0x10c66b
ffff8000008101bb:	00 00 00 
ffff8000008101be:	4c 01 d8             	add    rax,r11
ffff8000008101c1:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff8000008101c5:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff8000008101c9:	90                   	nop
ffff8000008101ca:	5d                   	pop    rbp
ffff8000008101cb:	c3                   	ret    

ffff8000008101cc <FAT32_setattr>:
FAT32_setattr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:677

long FAT32_setattr(struct dir_entry * dentry,unsigned long * attr)
{}
ffff8000008101cc:	f3 0f 1e fa          	endbr64 
ffff8000008101d0:	55                   	push   rbp
ffff8000008101d1:	48 89 e5             	mov    rbp,rsp
ffff8000008101d4:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008101d4 <FAT32_setattr+0x8>
ffff8000008101db:	49 bb 44 c6 10 00 00 	movabs r11,0x10c644
ffff8000008101e2:	00 00 00 
ffff8000008101e5:	4c 01 d8             	add    rax,r11
ffff8000008101e8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff8000008101ec:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff8000008101f0:	90                   	nop
ffff8000008101f1:	5d                   	pop    rbp
ffff8000008101f2:	c3                   	ret    

ffff8000008101f3 <FAT32_compare>:
FAT32_compare():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:692
	.setattr = FAT32_setattr,
};


//// these operation need cache and list
long FAT32_compare(struct dir_entry * parent_dentry,char * source_filename,char * destination_filename){}
ffff8000008101f3:	f3 0f 1e fa          	endbr64 
ffff8000008101f7:	55                   	push   rbp
ffff8000008101f8:	48 89 e5             	mov    rbp,rsp
ffff8000008101fb:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008101fb <FAT32_compare+0x8>
ffff800000810202:	49 bb 1d c6 10 00 00 	movabs r11,0x10c61d
ffff800000810209:	00 00 00 
ffff80000081020c:	4c 01 d8             	add    rax,r11
ffff80000081020f:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000810213:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000810217:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000081021b:	90                   	nop
ffff80000081021c:	5d                   	pop    rbp
ffff80000081021d:	c3                   	ret    

ffff80000081021e <FAT32_hash>:
FAT32_hash():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:693
long FAT32_hash(struct dir_entry * dentry,char * filename){}
ffff80000081021e:	f3 0f 1e fa          	endbr64 
ffff800000810222:	55                   	push   rbp
ffff800000810223:	48 89 e5             	mov    rbp,rsp
ffff800000810226:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000810226 <FAT32_hash+0x8>
ffff80000081022d:	49 bb f2 c5 10 00 00 	movabs r11,0x10c5f2
ffff800000810234:	00 00 00 
ffff800000810237:	4c 01 d8             	add    rax,r11
ffff80000081023a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000081023e:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000810242:	90                   	nop
ffff800000810243:	5d                   	pop    rbp
ffff800000810244:	c3                   	ret    

ffff800000810245 <FAT32_release>:
FAT32_release():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:694
long FAT32_release(struct dir_entry * dentry){}
ffff800000810245:	f3 0f 1e fa          	endbr64 
ffff800000810249:	55                   	push   rbp
ffff80000081024a:	48 89 e5             	mov    rbp,rsp
ffff80000081024d:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000081024d <FAT32_release+0x8>
ffff800000810254:	49 bb cb c5 10 00 00 	movabs r11,0x10c5cb
ffff80000081025b:	00 00 00 
ffff80000081025e:	4c 01 d8             	add    rax,r11
ffff800000810261:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000810265:	90                   	nop
ffff800000810266:	5d                   	pop    rbp
ffff800000810267:	c3                   	ret    

ffff800000810268 <FAT32_iput>:
FAT32_iput():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:695
long FAT32_iput(struct dir_entry * dentry,struct index_node * inode){}
ffff800000810268:	f3 0f 1e fa          	endbr64 
ffff80000081026c:	55                   	push   rbp
ffff80000081026d:	48 89 e5             	mov    rbp,rsp
ffff800000810270:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000810270 <FAT32_iput+0x8>
ffff800000810277:	49 bb a8 c5 10 00 00 	movabs r11,0x10c5a8
ffff80000081027e:	00 00 00 
ffff800000810281:	4c 01 d8             	add    rax,r11
ffff800000810284:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000810288:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000081028c:	90                   	nop
ffff80000081028d:	5d                   	pop    rbp
ffff80000081028e:	c3                   	ret    

ffff80000081028f <fat32_write_superblock>:
fat32_write_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:707
	.release = FAT32_release,
	.iput = FAT32_iput,
};


void fat32_write_superblock(struct super_block * sb){}
ffff80000081028f:	f3 0f 1e fa          	endbr64 
ffff800000810293:	55                   	push   rbp
ffff800000810294:	48 89 e5             	mov    rbp,rsp
ffff800000810297:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000810297 <fat32_write_superblock+0x8>
ffff80000081029e:	49 bb 81 c5 10 00 00 	movabs r11,0x10c581
ffff8000008102a5:	00 00 00 
ffff8000008102a8:	4c 01 d8             	add    rax,r11
ffff8000008102ab:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff8000008102af:	90                   	nop
ffff8000008102b0:	5d                   	pop    rbp
ffff8000008102b1:	c3                   	ret    

ffff8000008102b2 <fat32_put_superblock>:
fat32_put_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:710

void fat32_put_superblock(struct super_block * sb)
{
ffff8000008102b2:	f3 0f 1e fa          	endbr64 
ffff8000008102b6:	55                   	push   rbp
ffff8000008102b7:	48 89 e5             	mov    rbp,rsp
ffff8000008102ba:	41 57                	push   r15
ffff8000008102bc:	53                   	push   rbx
ffff8000008102bd:	48 83 ec 10          	sub    rsp,0x10
ffff8000008102c1:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008102c1 <fat32_put_superblock+0xf>
ffff8000008102c8:	49 bb 57 c5 10 00 00 	movabs r11,0x10c557
ffff8000008102cf:	00 00 00 
ffff8000008102d2:	4c 01 db             	add    rbx,r11
ffff8000008102d5:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:711
    kmfree(sb->private_sb_info);
ffff8000008102d9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008102dd:	48 8b 40 1a          	mov    rax,QWORD PTR [rax+0x1a]
ffff8000008102e1:	48 89 c7             	mov    rdi,rax
ffff8000008102e4:	49 89 df             	mov    r15,rbx
ffff8000008102e7:	48 b8 d7 5a ee ff ff 	movabs rax,0xffffffffffee5ad7
ffff8000008102ee:	ff ff ff 
ffff8000008102f1:	48 01 d8             	add    rax,rbx
ffff8000008102f4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:712
    kmfree(sb->root->dir_inode->private_index_info);
ffff8000008102f6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008102fa:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008102fd:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff800000810301:	48 8b 40 32          	mov    rax,QWORD PTR [rax+0x32]
ffff800000810305:	48 89 c7             	mov    rdi,rax
ffff800000810308:	49 89 df             	mov    r15,rbx
ffff80000081030b:	48 b8 d7 5a ee ff ff 	movabs rax,0xffffffffffee5ad7
ffff800000810312:	ff ff ff 
ffff800000810315:	48 01 d8             	add    rax,rbx
ffff800000810318:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:713
    kmfree(sb->root->dir_inode);
ffff80000081031a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081031e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810321:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff800000810325:	48 89 c7             	mov    rdi,rax
ffff800000810328:	49 89 df             	mov    r15,rbx
ffff80000081032b:	48 b8 d7 5a ee ff ff 	movabs rax,0xffffffffffee5ad7
ffff800000810332:	ff ff ff 
ffff800000810335:	48 01 d8             	add    rax,rbx
ffff800000810338:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:714
    kmfree(sb->root);
ffff80000081033a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081033e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810341:	48 89 c7             	mov    rdi,rax
ffff800000810344:	49 89 df             	mov    r15,rbx
ffff800000810347:	48 b8 d7 5a ee ff ff 	movabs rax,0xffffffffffee5ad7
ffff80000081034e:	ff ff ff 
ffff800000810351:	48 01 d8             	add    rax,rbx
ffff800000810354:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:715
    kmfree(sb);
ffff800000810356:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081035a:	48 89 c7             	mov    rdi,rax
ffff80000081035d:	49 89 df             	mov    r15,rbx
ffff800000810360:	48 b8 d7 5a ee ff ff 	movabs rax,0xffffffffffee5ad7
ffff800000810367:	ff ff ff 
ffff80000081036a:	48 01 d8             	add    rax,rbx
ffff80000081036d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:716
}
ffff80000081036f:	90                   	nop
ffff800000810370:	48 83 c4 10          	add    rsp,0x10
ffff800000810374:	5b                   	pop    rbx
ffff800000810375:	41 5f                	pop    r15
ffff800000810377:	5d                   	pop    rbp
ffff800000810378:	c3                   	ret    

ffff800000810379 <fat32_write_inode>:
fat32_write_inode():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:719

void fat32_write_inode(struct index_node * inode)
{
ffff800000810379:	f3 0f 1e fa          	endbr64 
ffff80000081037d:	55                   	push   rbp
ffff80000081037e:	48 89 e5             	mov    rbp,rsp
ffff800000810381:	41 57                	push   r15
ffff800000810383:	53                   	push   rbx
ffff800000810384:	48 83 ec 40          	sub    rsp,0x40
ffff800000810388:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000810388 <fat32_write_inode+0xf>
ffff80000081038f:	49 bb 90 c4 10 00 00 	movabs r11,0x10c490
ffff800000810396:	00 00 00 
ffff800000810399:	4c 01 db             	add    rbx,r11
ffff80000081039c:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:720
	struct FAT32_Directory * fdentry = NULL;
ffff8000008103a0:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff8000008103a7:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:721
	struct FAT32_Directory * buf = NULL;
ffff8000008103a8:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff8000008103af:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:722
	struct FAT32_inode_info * finode = inode->private_index_info;
ffff8000008103b0:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008103b4:	48 8b 40 32          	mov    rax,QWORD PTR [rax+0x32]
ffff8000008103b8:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:723
	struct FAT32_sb_info * fsbi = inode->sb->private_sb_info;
ffff8000008103bc:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008103c0:	48 8b 40 1a          	mov    rax,QWORD PTR [rax+0x1a]
ffff8000008103c4:	48 8b 40 1a          	mov    rax,QWORD PTR [rax+0x1a]
ffff8000008103c8:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:724
	unsigned long sector = 0;
ffff8000008103cc:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff8000008103d3:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:726

	if(finode->dentry_location == 0)
ffff8000008103d4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008103d8:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff8000008103dc:	48 85 c0             	test   rax,rax
ffff8000008103df:	75 2d                	jne    ffff80000081040e <fat32_write_inode+0x95>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:728
	{
		printf("FS ERROR:write root inode!\n");	
ffff8000008103e1:	48 b8 9c dd ff ff ff 	movabs rax,0xffffffffffffdd9c
ffff8000008103e8:	ff ff ff 
ffff8000008103eb:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008103ef:	48 89 c7             	mov    rdi,rax
ffff8000008103f2:	49 89 df             	mov    r15,rbx
ffff8000008103f5:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008103fa:	48 ba 96 4e ee ff ff 	movabs rdx,0xffffffffffee4e96
ffff800000810401:	ff ff ff 
ffff800000810404:	48 01 da             	add    rdx,rbx
ffff800000810407:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:729
		return ;
ffff800000810409:	e9 73 01 00 00       	jmp    ffff800000810581 <fat32_write_inode+0x208>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:732
	}

	sector = fsbi->Data_firstsector + (finode->dentry_location - 2) * fsbi->sector_per_cluster;
ffff80000081040e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000810412:	48 8b 48 28          	mov    rcx,QWORD PTR [rax+0x28]
ffff800000810416:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081041a:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000081041e:	48 8d 50 fe          	lea    rdx,[rax-0x2]
ffff800000810422:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000810426:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000081042a:	48 0f af c2          	imul   rax,rdx
ffff80000081042e:	48 01 c8             	add    rax,rcx
ffff800000810431:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:733
	buf = (struct FAT32_Directory *) kmalloc(fsbi->bytes_per_cluster, 0);
ffff800000810435:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000810439:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000081043d:	be 00 00 00 00       	mov    esi,0x0
ffff800000810442:	48 89 c7             	mov    rdi,rax
ffff800000810445:	49 89 df             	mov    r15,rbx
ffff800000810448:	b8 00 00 00 00       	mov    eax,0x0
ffff80000081044d:	48 ba 68 57 ee ff ff 	movabs rdx,0xffffffffffee5768
ffff800000810454:	ff ff ff 
ffff800000810457:	48 01 da             	add    rdx,rbx
ffff80000081045a:	ff d2                	call   rdx
ffff80000081045c:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:734
	memset(buf,0,fsbi->bytes_per_cluster);
ffff800000810460:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000810464:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000810468:	89 c2                	mov    edx,eax
ffff80000081046a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000081046e:	be 00 00 00 00       	mov    esi,0x0
ffff800000810473:	48 89 c7             	mov    rdi,rax
ffff800000810476:	49 89 df             	mov    r15,rbx
ffff800000810479:	48 b8 6b 53 ef ff ff 	movabs rax,0xffffffffffef536b
ffff800000810480:	ff ff ff 
ffff800000810483:	48 01 d8             	add    rax,rbx
ffff800000810486:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:735
	blkdev_read(inode->dev,sector*SECTOR_SIZE,fsbi->sector_per_cluster*SECTOR_SIZE,buf);
ffff800000810488:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081048c:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000810490:	48 c1 e0 09          	shl    rax,0x9
ffff800000810494:	48 89 c7             	mov    rdi,rax
ffff800000810497:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000081049b:	c1 e0 09             	shl    eax,0x9
ffff80000081049e:	89 c6                	mov    esi,eax
ffff8000008104a0:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008104a4:	0f b7 40 18          	movzx  eax,WORD PTR [rax+0x18]
ffff8000008104a8:	0f b7 c0             	movzx  eax,ax
ffff8000008104ab:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008104af:	48 89 d1             	mov    rcx,rdx
ffff8000008104b2:	48 89 fa             	mov    rdx,rdi
ffff8000008104b5:	89 c7                	mov    edi,eax
ffff8000008104b7:	49 89 df             	mov    r15,rbx
ffff8000008104ba:	48 b8 7c 02 ef ff ff 	movabs rax,0xffffffffffef027c
ffff8000008104c1:	ff ff ff 
ffff8000008104c4:	48 01 d8             	add    rax,rbx
ffff8000008104c7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:736
    fdentry = buf+finode->dentry_position;
ffff8000008104c9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008104cd:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008104d1:	48 c1 e0 05          	shl    rax,0x5
ffff8000008104d5:	48 89 c2             	mov    rdx,rax
ffff8000008104d8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008104dc:	48 01 d0             	add    rax,rdx
ffff8000008104df:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:739

	////alert fat32 dentry data
	fdentry->DIR_FileSize = inode->file_size;
ffff8000008104e3:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008104e7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008104ea:	89 c2                	mov    edx,eax
ffff8000008104ec:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008104f0:	89 50 1c             	mov    DWORD PTR [rax+0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:740
	fdentry->DIR_FstClusLO = finode->first_cluster & 0xffff;
ffff8000008104f3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008104f7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008104fa:	89 c2                	mov    edx,eax
ffff8000008104fc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000810500:	66 89 50 1a          	mov    WORD PTR [rax+0x1a],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:741
	fdentry->DIR_FstClusHI = (fdentry->DIR_FstClusHI & 0xf000) | (finode->first_cluster >> 16);
ffff800000810504:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000810508:	0f b7 40 14          	movzx  eax,WORD PTR [rax+0x14]
ffff80000081050c:	66 25 00 f0          	and    ax,0xf000
ffff800000810510:	89 c2                	mov    edx,eax
ffff800000810512:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810516:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810519:	48 c1 e8 10          	shr    rax,0x10
ffff80000081051d:	09 c2                	or     edx,eax
ffff80000081051f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000810523:	66 89 50 14          	mov    WORD PTR [rax+0x14],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:743
	
	blkdev_write(inode->dev,sector*SECTOR_SIZE,fsbi->sector_per_cluster*SECTOR_SIZE,buf);
ffff800000810527:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081052b:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000081052f:	48 c1 e0 09          	shl    rax,0x9
ffff800000810533:	48 89 c7             	mov    rdi,rax
ffff800000810536:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000081053a:	c1 e0 09             	shl    eax,0x9
ffff80000081053d:	89 c6                	mov    esi,eax
ffff80000081053f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810543:	0f b7 40 18          	movzx  eax,WORD PTR [rax+0x18]
ffff800000810547:	0f b7 c0             	movzx  eax,ax
ffff80000081054a:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000081054e:	48 89 d1             	mov    rcx,rdx
ffff800000810551:	48 89 fa             	mov    rdx,rdi
ffff800000810554:	89 c7                	mov    edi,eax
ffff800000810556:	49 89 df             	mov    r15,rbx
ffff800000810559:	48 b8 f7 03 ef ff ff 	movabs rax,0xffffffffffef03f7
ffff800000810560:	ff ff ff 
ffff800000810563:	48 01 d8             	add    rax,rbx
ffff800000810566:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:744
    kmfree(buf);
ffff800000810568:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000081056c:	48 89 c7             	mov    rdi,rax
ffff80000081056f:	49 89 df             	mov    r15,rbx
ffff800000810572:	48 b8 d7 5a ee ff ff 	movabs rax,0xffffffffffee5ad7
ffff800000810579:	ff ff ff 
ffff80000081057c:	48 01 d8             	add    rax,rbx
ffff80000081057f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:745
}
ffff800000810581:	48 83 c4 40          	add    rsp,0x40
ffff800000810585:	5b                   	pop    rbx
ffff800000810586:	41 5f                	pop    r15
ffff800000810588:	5d                   	pop    rbp
ffff800000810589:	c3                   	ret    

ffff80000081058a <fat32_read_superblock>:
fat32_read_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:756

	.write_inode = fat32_write_inode,
};

struct super_block * fat32_read_superblock(struct Disk_Partition_Table_Entry * DPTE,void * buf)
{
ffff80000081058a:	f3 0f 1e fa          	endbr64 
ffff80000081058e:	55                   	push   rbp
ffff80000081058f:	48 89 e5             	mov    rbp,rsp
ffff800000810592:	41 57                	push   r15
ffff800000810594:	53                   	push   rbx
ffff800000810595:	48 83 ec 40          	sub    rsp,0x40
ffff800000810599:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000810599 <fat32_read_superblock+0xf>
ffff8000008105a0:	49 bb 7f c2 10 00 00 	movabs r11,0x10c27f
ffff8000008105a7:	00 00 00 
ffff8000008105aa:	4c 01 db             	add    rbx,r11
ffff8000008105ad:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
ffff8000008105b1:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:757
	struct super_block * sbp = NULL;
ffff8000008105b5:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff8000008105bc:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:758
	struct FAT32_inode_info * finode = NULL;
ffff8000008105bd:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff8000008105c4:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:759
	struct FAT32_BootSector * fbs = NULL;
ffff8000008105c5:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff8000008105cc:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:760
	struct FAT32_sb_info * fsbi = NULL;
ffff8000008105cd:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff8000008105d4:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:763

	////super block
	sbp = (struct super_block *) kmalloc(sizeof(struct super_block), 0);
ffff8000008105d5:	be 00 00 00 00       	mov    esi,0x0
ffff8000008105da:	bf 22 00 00 00       	mov    edi,0x22
ffff8000008105df:	49 89 df             	mov    r15,rbx
ffff8000008105e2:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008105e7:	48 ba 68 57 ee ff ff 	movabs rdx,0xffffffffffee5768
ffff8000008105ee:	ff ff ff 
ffff8000008105f1:	48 01 da             	add    rdx,rbx
ffff8000008105f4:	ff d2                	call   rdx
ffff8000008105f6:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:764
	memset(sbp,0,sizeof(struct super_block));
ffff8000008105fa:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008105fe:	ba 22 00 00 00       	mov    edx,0x22
ffff800000810603:	be 00 00 00 00       	mov    esi,0x0
ffff800000810608:	48 89 c7             	mov    rdi,rax
ffff80000081060b:	49 89 df             	mov    r15,rbx
ffff80000081060e:	48 b8 6b 53 ef ff ff 	movabs rax,0xffffffffffef536b
ffff800000810615:	ff ff ff 
ffff800000810618:	48 01 d8             	add    rax,rbx
ffff80000081061b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:766

	sbp->sb_ops = &FAT32_sb_ops;
ffff80000081061d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000810621:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000810628:	ff ff ff 
ffff80000081062b:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000081062f:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:767
	sbp->private_sb_info = (struct FAT32_sb_info *) kmalloc(sizeof(struct FAT32_sb_info), 0);
ffff800000810633:	be 00 00 00 00       	mov    esi,0x0
ffff800000810638:	bf 60 00 00 00       	mov    edi,0x60
ffff80000081063d:	49 89 df             	mov    r15,rbx
ffff800000810640:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810645:	48 ba 68 57 ee ff ff 	movabs rdx,0xffffffffffee5768
ffff80000081064c:	ff ff ff 
ffff80000081064f:	48 01 da             	add    rdx,rbx
ffff800000810652:	ff d2                	call   rdx
ffff800000810654:	48 89 c2             	mov    rdx,rax
ffff800000810657:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081065b:	48 89 50 1a          	mov    QWORD PTR [rax+0x1a],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:768
	memset(sbp->private_sb_info,0,sizeof(struct FAT32_sb_info));
ffff80000081065f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000810663:	48 8b 40 1a          	mov    rax,QWORD PTR [rax+0x1a]
ffff800000810667:	ba 60 00 00 00       	mov    edx,0x60
ffff80000081066c:	be 00 00 00 00       	mov    esi,0x0
ffff800000810671:	48 89 c7             	mov    rdi,rax
ffff800000810674:	49 89 df             	mov    r15,rbx
ffff800000810677:	48 b8 6b 53 ef ff ff 	movabs rax,0xffffffffffef536b
ffff80000081067e:	ff ff ff 
ffff800000810681:	48 01 d8             	add    rax,rbx
ffff800000810684:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:771

	////fat32 boot sector
	fbs = (struct FAT32_BootSector *)buf;
ffff800000810686:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000081068a:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:772
 	fsbi = sbp->private_sb_info;
ffff80000081068e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000810692:	48 8b 40 1a          	mov    rax,QWORD PTR [rax+0x1a]
ffff800000810696:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:773
	fsbi->start_sector = DPTE->start_LBA;
ffff80000081069a:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081069e:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff8000008106a1:	89 c2                	mov    edx,eax
ffff8000008106a3:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008106a7:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:774
	fsbi->sector_count = DPTE->sectors_limit;
ffff8000008106aa:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008106ae:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff8000008106b1:	89 c2                	mov    edx,eax
ffff8000008106b3:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008106b7:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:775
	fsbi->sector_per_cluster = fbs->BPB_SecPerClus;
ffff8000008106bb:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008106bf:	0f b6 40 0d          	movzx  eax,BYTE PTR [rax+0xd]
ffff8000008106c3:	0f b6 d0             	movzx  edx,al
ffff8000008106c6:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008106ca:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:776
	fsbi->bytes_per_cluster = fbs->BPB_SecPerClus * fbs->BPB_BytesPerSec;
ffff8000008106ce:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008106d2:	0f b6 40 0d          	movzx  eax,BYTE PTR [rax+0xd]
ffff8000008106d6:	0f b6 d0             	movzx  edx,al
ffff8000008106d9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008106dd:	0f b7 40 0b          	movzx  eax,WORD PTR [rax+0xb]
ffff8000008106e1:	0f b7 c0             	movzx  eax,ax
ffff8000008106e4:	0f af c2             	imul   eax,edx
ffff8000008106e7:	48 63 d0             	movsxd rdx,eax
ffff8000008106ea:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008106ee:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:777
	fsbi->bytes_per_sector = fbs->BPB_BytesPerSec;
ffff8000008106f2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008106f6:	0f b7 40 0b          	movzx  eax,WORD PTR [rax+0xb]
ffff8000008106fa:	0f b7 d0             	movzx  edx,ax
ffff8000008106fd:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000810701:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:778
	fsbi->Data_firstsector = DPTE->start_LBA + fbs->BPB_RsvdSecCnt + fbs->BPB_FATSz32 * fbs->BPB_NumFATs;
ffff800000810705:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810709:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffff80000081070c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810710:	0f b7 40 0e          	movzx  eax,WORD PTR [rax+0xe]
ffff800000810714:	0f b7 c0             	movzx  eax,ax
ffff800000810717:	8d 0c 02             	lea    ecx,[rdx+rax*1]
ffff80000081071a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081071e:	8b 50 24             	mov    edx,DWORD PTR [rax+0x24]
ffff800000810721:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810725:	0f b6 40 10          	movzx  eax,BYTE PTR [rax+0x10]
ffff800000810729:	0f b6 c0             	movzx  eax,al
ffff80000081072c:	0f af c2             	imul   eax,edx
ffff80000081072f:	01 c8                	add    eax,ecx
ffff800000810731:	89 c2                	mov    edx,eax
ffff800000810733:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000810737:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:779
	fsbi->FAT1_firstsector = DPTE->start_LBA + fbs->BPB_RsvdSecCnt;
ffff80000081073b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081073f:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffff800000810742:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810746:	0f b7 40 0e          	movzx  eax,WORD PTR [rax+0xe]
ffff80000081074a:	0f b7 c0             	movzx  eax,ax
ffff80000081074d:	01 d0                	add    eax,edx
ffff80000081074f:	89 c2                	mov    edx,eax
ffff800000810751:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000810755:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:780
	fsbi->sector_per_FAT = fbs->BPB_FATSz32;
ffff800000810759:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081075d:	8b 40 24             	mov    eax,DWORD PTR [rax+0x24]
ffff800000810760:	89 c2                	mov    edx,eax
ffff800000810762:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000810766:	48 89 50 38          	mov    QWORD PTR [rax+0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:781
	fsbi->NumFATs = fbs->BPB_NumFATs;
ffff80000081076a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081076e:	0f b6 40 10          	movzx  eax,BYTE PTR [rax+0x10]
ffff800000810772:	0f b6 d0             	movzx  edx,al
ffff800000810775:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000810779:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:782
	fsbi->fsinfo_sector_infat = fbs->BPB_FSInfo;
ffff80000081077d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810781:	0f b7 40 30          	movzx  eax,WORD PTR [rax+0x30]
ffff800000810785:	0f b7 d0             	movzx  edx,ax
ffff800000810788:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081078c:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:783
	fsbi->bootsector_bk_infat = fbs->BPB_BkBootSec;	
ffff800000810790:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810794:	0f b7 40 32          	movzx  eax,WORD PTR [rax+0x32]
ffff800000810798:	0f b7 d0             	movzx  edx,ax
ffff80000081079b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081079f:	48 89 50 50          	mov    QWORD PTR [rax+0x50],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:785
	
	printf("FAT32 Boot Sector\n\tBPB_FSInfo:%x\n\tBPB_BkBootSec:%x\n\tBPB_TotSec32:%x\n",fbs->BPB_FSInfo,fbs->BPB_BkBootSec,fbs->BPB_TotSec32);
ffff8000008107a3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008107a7:	8b 48 20             	mov    ecx,DWORD PTR [rax+0x20]
ffff8000008107aa:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008107ae:	0f b7 40 32          	movzx  eax,WORD PTR [rax+0x32]
ffff8000008107b2:	0f b7 d0             	movzx  edx,ax
ffff8000008107b5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008107b9:	0f b7 40 30          	movzx  eax,WORD PTR [rax+0x30]
ffff8000008107bd:	0f b7 c0             	movzx  eax,ax
ffff8000008107c0:	89 c6                	mov    esi,eax
ffff8000008107c2:	48 b8 b8 dd ff ff ff 	movabs rax,0xffffffffffffddb8
ffff8000008107c9:	ff ff ff 
ffff8000008107cc:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008107d0:	48 89 c7             	mov    rdi,rax
ffff8000008107d3:	49 89 df             	mov    r15,rbx
ffff8000008107d6:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008107db:	49 b8 96 4e ee ff ff 	movabs r8,0xffffffffffee4e96
ffff8000008107e2:	ff ff ff 
ffff8000008107e5:	49 01 d8             	add    r8,rbx
ffff8000008107e8:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:788
	
	////fat32 fsinfo sector
	fsbi->fat_fsinfo = (struct FAT32_FSInfo *) kmalloc(sizeof(struct FAT32_FSInfo), 0);
ffff8000008107eb:	be 00 00 00 00       	mov    esi,0x0
ffff8000008107f0:	bf 00 02 00 00       	mov    edi,0x200
ffff8000008107f5:	49 89 df             	mov    r15,rbx
ffff8000008107f8:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008107fd:	48 ba 68 57 ee ff ff 	movabs rdx,0xffffffffffee5768
ffff800000810804:	ff ff ff 
ffff800000810807:	48 01 da             	add    rdx,rbx
ffff80000081080a:	ff d2                	call   rdx
ffff80000081080c:	48 89 c2             	mov    rdx,rax
ffff80000081080f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000810813:	48 89 50 58          	mov    QWORD PTR [rax+0x58],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:789
	memset(fsbi->fat_fsinfo,0,512);
ffff800000810817:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081081b:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
ffff80000081081f:	ba 00 02 00 00       	mov    edx,0x200
ffff800000810824:	be 00 00 00 00       	mov    esi,0x0
ffff800000810829:	48 89 c7             	mov    rdi,rax
ffff80000081082c:	49 89 df             	mov    r15,rbx
ffff80000081082f:	48 b8 6b 53 ef ff ff 	movabs rax,0xffffffffffef536b
ffff800000810836:	ff ff ff 
ffff800000810839:	48 01 d8             	add    rax,rbx
ffff80000081083c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:790
	blkdev_read(root_sb->dev,(DPTE->start_LBA + fbs->BPB_FSInfo)*SECTOR_SIZE,SECTOR_SIZE,(unsigned char *)fsbi->fat_fsinfo);
ffff80000081083e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000810842:	48 8b 50 58          	mov    rdx,QWORD PTR [rax+0x58]
ffff800000810846:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081084a:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffff80000081084d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810851:	0f b7 40 30          	movzx  eax,WORD PTR [rax+0x30]
ffff800000810855:	0f b7 c0             	movzx  eax,ax
ffff800000810858:	01 c8                	add    eax,ecx
ffff80000081085a:	c1 e0 09             	shl    eax,0x9
ffff80000081085d:	89 c6                	mov    esi,eax
ffff80000081085f:	48 b8 10 fe ff ff ff 	movabs rax,0xfffffffffffffe10
ffff800000810866:	ff ff ff 
ffff800000810869:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000081086d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810870:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff800000810874:	0f b7 c0             	movzx  eax,ax
ffff800000810877:	48 89 d1             	mov    rcx,rdx
ffff80000081087a:	ba 00 02 00 00       	mov    edx,0x200
ffff80000081087f:	89 c7                	mov    edi,eax
ffff800000810881:	49 89 df             	mov    r15,rbx
ffff800000810884:	48 b8 7c 02 ef ff ff 	movabs rax,0xffffffffffef027c
ffff80000081088b:	ff ff ff 
ffff80000081088e:	48 01 d8             	add    rax,rbx
ffff800000810891:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:791
	printf("FAT32 FSInfo\n\tFSI_LeadSig:%x\n\tFSI_StrucSig:%x\n\tFSI_Free_Count:%x\n",fsbi->fat_fsinfo->FSI_LeadSig,fsbi->fat_fsinfo->FSI_StrucSig,fsbi->fat_fsinfo->FSI_Free_Count);
ffff800000810893:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000810897:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
ffff80000081089b:	8b 88 e8 01 00 00    	mov    ecx,DWORD PTR [rax+0x1e8]
ffff8000008108a1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008108a5:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
ffff8000008108a9:	8b 90 e4 01 00 00    	mov    edx,DWORD PTR [rax+0x1e4]
ffff8000008108af:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008108b3:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
ffff8000008108b7:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008108b9:	89 c6                	mov    esi,eax
ffff8000008108bb:	48 b8 00 de ff ff ff 	movabs rax,0xffffffffffffde00
ffff8000008108c2:	ff ff ff 
ffff8000008108c5:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008108c9:	48 89 c7             	mov    rdi,rax
ffff8000008108cc:	49 89 df             	mov    r15,rbx
ffff8000008108cf:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008108d4:	49 b8 96 4e ee ff ff 	movabs r8,0xffffffffffee4e96
ffff8000008108db:	ff ff ff 
ffff8000008108de:	49 01 d8             	add    r8,rbx
ffff8000008108e1:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:794
	
	////directory entry
	sbp->root = (struct dir_entry *) kmalloc(sizeof(struct dir_entry), 0);
ffff8000008108e4:	be 00 00 00 00       	mov    esi,0x0
ffff8000008108e9:	bf 54 00 00 00       	mov    edi,0x54
ffff8000008108ee:	49 89 df             	mov    r15,rbx
ffff8000008108f1:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008108f6:	48 ba 68 57 ee ff ff 	movabs rdx,0xffffffffffee5768
ffff8000008108fd:	ff ff ff 
ffff800000810900:	48 01 da             	add    rdx,rbx
ffff800000810903:	ff d2                	call   rdx
ffff800000810905:	48 89 c2             	mov    rdx,rax
ffff800000810908:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081090c:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:795
	memset(sbp->root,0,sizeof(struct dir_entry));
ffff80000081090f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000810913:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810916:	ba 54 00 00 00       	mov    edx,0x54
ffff80000081091b:	be 00 00 00 00       	mov    esi,0x0
ffff800000810920:	48 89 c7             	mov    rdi,rax
ffff800000810923:	49 89 df             	mov    r15,rbx
ffff800000810926:	48 b8 6b 53 ef ff ff 	movabs rax,0xffffffffffef536b
ffff80000081092d:	ff ff ff 
ffff800000810930:	48 01 d8             	add    rax,rbx
ffff800000810933:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:797

	list_init(&sbp->root->child_node);
ffff800000810935:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000810939:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000081093c:	48 83 c0 0c          	add    rax,0xc
ffff800000810940:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff800000810944:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000810948:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000081094f:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000810953:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000081095a:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000081095b:	90                   	nop
fat32_read_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:798
	list_init(&sbp->root->subdirs_list);
ffff80000081095c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000810960:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810963:	48 83 c0 24          	add    rax,0x24
ffff800000810967:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff80000081096b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000081096f:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff800000810976:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000081097a:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff800000810981:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff800000810982:	90                   	nop
fat32_read_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:799
	sbp->root->parent = sbp->root;
ffff800000810983:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000810987:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000081098a:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000081098e:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000810991:	48 89 50 44          	mov    QWORD PTR [rax+0x44],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:800
	sbp->root->dir_ops = &FAT32_dentry_ops;
ffff800000810995:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000810999:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000081099c:	48 ba 38 ff ff ff ff 	movabs rdx,0xffffffffffffff38
ffff8000008109a3:	ff ff ff 
ffff8000008109a6:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff8000008109aa:	48 89 50 4c          	mov    QWORD PTR [rax+0x4c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:801
	sbp->root->name = (char *) kmalloc(2, 0);
ffff8000008109ae:	be 00 00 00 00       	mov    esi,0x0
ffff8000008109b3:	bf 02 00 00 00       	mov    edi,0x2
ffff8000008109b8:	49 89 df             	mov    r15,rbx
ffff8000008109bb:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008109c0:	48 ba 68 57 ee ff ff 	movabs rdx,0xffffffffffee5768
ffff8000008109c7:	ff ff ff 
ffff8000008109ca:	48 01 da             	add    rdx,rbx
ffff8000008109cd:	ff d2                	call   rdx
ffff8000008109cf:	48 89 c2             	mov    rdx,rax
ffff8000008109d2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008109d6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008109d9:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:802
	sbp->root->name[0] = '/';
ffff8000008109dc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008109e0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008109e3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008109e6:	c6 00 2f             	mov    BYTE PTR [rax],0x2f
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:803
	sbp->root->name_length = 1;
ffff8000008109e9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008109ed:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008109f0:	c7 40 08 01 00 00 00 	mov    DWORD PTR [rax+0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:806

	////index node
	sbp->root->dir_inode = (struct index_node *) kmalloc(sizeof(struct index_node), 0);
ffff8000008109f7:	be 00 00 00 00       	mov    esi,0x0
ffff8000008109fc:	bf 3a 00 00 00       	mov    edi,0x3a
ffff800000810a01:	49 89 df             	mov    r15,rbx
ffff800000810a04:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810a09:	48 ba 68 57 ee ff ff 	movabs rdx,0xffffffffffee5768
ffff800000810a10:	ff ff ff 
ffff800000810a13:	48 01 da             	add    rdx,rbx
ffff800000810a16:	ff d2                	call   rdx
ffff800000810a18:	48 89 c2             	mov    rdx,rax
ffff800000810a1b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000810a1f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810a22:	48 89 50 3c          	mov    QWORD PTR [rax+0x3c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:807
	memset(sbp->root->dir_inode,0,sizeof(struct index_node));
ffff800000810a26:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000810a2a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810a2d:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff800000810a31:	ba 3a 00 00 00       	mov    edx,0x3a
ffff800000810a36:	be 00 00 00 00       	mov    esi,0x0
ffff800000810a3b:	48 89 c7             	mov    rdi,rax
ffff800000810a3e:	49 89 df             	mov    r15,rbx
ffff800000810a41:	48 b8 6b 53 ef ff ff 	movabs rax,0xffffffffffef536b
ffff800000810a48:	ff ff ff 
ffff800000810a4b:	48 01 d8             	add    rax,rbx
ffff800000810a4e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:808
	sbp->root->dir_inode->inode_ops = &FAT32_inode_ops;
ffff800000810a50:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000810a54:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810a57:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff800000810a5b:	48 ba 48 ff ff ff ff 	movabs rdx,0xffffffffffffff48
ffff800000810a62:	ff ff ff 
ffff800000810a65:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000810a69:	48 89 50 2a          	mov    QWORD PTR [rax+0x2a],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:809
	sbp->root->dir_inode->f_ops = &FAT32_file_ops;
ffff800000810a6d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000810a71:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810a74:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff800000810a78:	48 ba 38 fe ff ff ff 	movabs rdx,0xfffffffffffffe38
ffff800000810a7f:	ff ff ff 
ffff800000810a82:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000810a86:	48 89 50 22          	mov    QWORD PTR [rax+0x22],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:810
	sbp->root->dir_inode->file_size = 0;
ffff800000810a8a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000810a8e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810a91:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff800000810a95:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:811
	sbp->root->dir_inode->blocks = (sbp->root->dir_inode->file_size + fsbi->bytes_per_cluster - 1)/fsbi->bytes_per_sector;
ffff800000810a9c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000810aa0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810aa3:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff800000810aa7:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000810aaa:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000810aae:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000810ab2:	48 01 d0             	add    rax,rdx
ffff800000810ab5:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff800000810ab9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000810abd:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000810ac1:	48 89 c6             	mov    rsi,rax
ffff800000810ac4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000810ac8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810acb:	48 8b 48 3c          	mov    rcx,QWORD PTR [rax+0x3c]
ffff800000810acf:	48 89 d0             	mov    rax,rdx
ffff800000810ad2:	ba 00 00 00 00       	mov    edx,0x0
ffff800000810ad7:	48 f7 f6             	div    rsi
ffff800000810ada:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:812
	sbp->root->dir_inode->attribute = FS_ATTR_DIR;
ffff800000810ade:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000810ae2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810ae5:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff800000810ae9:	48 c7 40 10 02 00 00 	mov    QWORD PTR [rax+0x10],0x2
ffff800000810af0:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:813
	sbp->root->dir_inode->sb = sbp;
ffff800000810af1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000810af5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810af8:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff800000810afc:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000810b00:	48 89 50 1a          	mov    QWORD PTR [rax+0x1a],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:816

	////fat32 root inode
	sbp->root->dir_inode->private_index_info = (struct FAT32_inode_info *) kmalloc(sizeof(struct FAT32_inode_info), 0);
ffff800000810b04:	be 00 00 00 00       	mov    esi,0x0
ffff800000810b09:	bf 20 00 00 00       	mov    edi,0x20
ffff800000810b0e:	49 89 df             	mov    r15,rbx
ffff800000810b11:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810b16:	48 ba 68 57 ee ff ff 	movabs rdx,0xffffffffffee5768
ffff800000810b1d:	ff ff ff 
ffff800000810b20:	48 01 da             	add    rdx,rbx
ffff800000810b23:	ff d2                	call   rdx
ffff800000810b25:	48 89 c2             	mov    rdx,rax
ffff800000810b28:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000810b2c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810b2f:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff800000810b33:	48 89 50 32          	mov    QWORD PTR [rax+0x32],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:817
	memset(sbp->root->dir_inode->private_index_info,0,sizeof(struct FAT32_inode_info));
ffff800000810b37:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000810b3b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810b3e:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff800000810b42:	48 8b 40 32          	mov    rax,QWORD PTR [rax+0x32]
ffff800000810b46:	ba 20 00 00 00       	mov    edx,0x20
ffff800000810b4b:	be 00 00 00 00       	mov    esi,0x0
ffff800000810b50:	48 89 c7             	mov    rdi,rax
ffff800000810b53:	49 89 df             	mov    r15,rbx
ffff800000810b56:	48 b8 6b 53 ef ff ff 	movabs rax,0xffffffffffef536b
ffff800000810b5d:	ff ff ff 
ffff800000810b60:	48 01 d8             	add    rax,rbx
ffff800000810b63:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:818
	finode = (struct FAT32_inode_info *)sbp->root->dir_inode->private_index_info;
ffff800000810b65:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000810b69:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810b6c:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff800000810b70:	48 8b 40 32          	mov    rax,QWORD PTR [rax+0x32]
ffff800000810b74:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:819
	finode->first_cluster = fbs->BPB_RootClus;
ffff800000810b78:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810b7c:	8b 40 2c             	mov    eax,DWORD PTR [rax+0x2c]
ffff800000810b7f:	89 c2                	mov    edx,eax
ffff800000810b81:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000810b85:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:820
	finode->dentry_location = 0;
ffff800000810b88:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000810b8c:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
ffff800000810b93:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:821
	finode->dentry_position = 0; 
ffff800000810b94:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000810b98:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff800000810b9f:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:822
	finode->create_date = 0;
ffff800000810ba0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000810ba4:	66 c7 40 18 00 00    	mov    WORD PTR [rax+0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:823
	finode->create_time = 0;
ffff800000810baa:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000810bae:	66 c7 40 1a 00 00    	mov    WORD PTR [rax+0x1a],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:824
	finode->write_date = 0;
ffff800000810bb4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000810bb8:	66 c7 40 1c 00 00    	mov    WORD PTR [rax+0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:825
	finode->write_time = 0;
ffff800000810bbe:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000810bc2:	66 c7 40 1e 00 00    	mov    WORD PTR [rax+0x1e],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:827

	return sbp;
ffff800000810bc8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:828
}
ffff800000810bcc:	48 83 c4 40          	add    rsp,0x40
ffff800000810bd0:	5b                   	pop    rbx
ffff800000810bd1:	41 5f                	pop    r15
ffff800000810bd3:	5d                   	pop    rbp
ffff800000810bd4:	c3                   	ret    

ffff800000810bd5 <DISK1_FAT32_FS_init>:
DISK1_FAT32_FS_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:840
	.read_superblock = fat32_read_superblock,
	.next = NULL,
};

void DISK1_FAT32_FS_init()
{
ffff800000810bd5:	f3 0f 1e fa          	endbr64 
ffff800000810bd9:	55                   	push   rbp
ffff800000810bda:	48 89 e5             	mov    rbp,rsp
ffff800000810bdd:	41 57                	push   r15
ffff800000810bdf:	53                   	push   rbx
ffff800000810be0:	48 81 ec 10 04 00 00 	sub    rsp,0x410
ffff800000810be7:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000810be7 <DISK1_FAT32_FS_init+0x12>
ffff800000810bee:	49 bb 31 bc 10 00 00 	movabs r11,0x10bc31
ffff800000810bf5:	00 00 00 
ffff800000810bf8:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:843
	int i;
	unsigned char buf[512];
	struct dir_entry * dentry = NULL;
ffff800000810bfb:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff800000810c02:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:844
	struct Disk_Partition_Table DPT = {0};
ffff800000810c03:	48 8d 95 e0 fb ff ff 	lea    rdx,[rbp-0x420]
ffff800000810c0a:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810c0f:	b9 40 00 00 00       	mov    ecx,0x40
ffff800000810c14:	48 89 d7             	mov    rdi,rdx
ffff800000810c17:	f3 48 ab             	rep stos QWORD PTR es:[rdi],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:846

	register_filesystem(&FAT32_fs_type);
ffff800000810c1a:	48 b8 08 ff ff ff ff 	movabs rax,0xffffffffffffff08
ffff800000810c21:	ff ff ff 
ffff800000810c24:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000810c28:	48 89 c7             	mov    rdi,rax
ffff800000810c2b:	49 89 df             	mov    r15,rbx
ffff800000810c2e:	48 b8 4a dc ee ff ff 	movabs rax,0xffffffffffeedc4a
ffff800000810c35:	ff ff ff 
ffff800000810c38:	48 01 d8             	add    rax,rbx
ffff800000810c3b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:848
	
	memset(buf,0,512);
ffff800000810c3d:	48 8d 85 e0 fd ff ff 	lea    rax,[rbp-0x220]
ffff800000810c44:	ba 00 02 00 00       	mov    edx,0x200
ffff800000810c49:	be 00 00 00 00       	mov    esi,0x0
ffff800000810c4e:	48 89 c7             	mov    rdi,rax
ffff800000810c51:	49 89 df             	mov    r15,rbx
ffff800000810c54:	48 b8 6b 53 ef ff ff 	movabs rax,0xffffffffffef536b
ffff800000810c5b:	ff ff ff 
ffff800000810c5e:	48 01 d8             	add    rax,rbx
ffff800000810c61:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:850

	blkdev_read(root_sb->dev,0,512,buf);
ffff800000810c63:	48 b8 10 fe ff ff ff 	movabs rax,0xfffffffffffffe10
ffff800000810c6a:	ff ff ff 
ffff800000810c6d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000810c71:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810c74:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff800000810c78:	0f b7 c0             	movzx  eax,ax
ffff800000810c7b:	48 8d 95 e0 fd ff ff 	lea    rdx,[rbp-0x220]
ffff800000810c82:	48 89 d1             	mov    rcx,rdx
ffff800000810c85:	ba 00 02 00 00       	mov    edx,0x200
ffff800000810c8a:	be 00 00 00 00       	mov    esi,0x0
ffff800000810c8f:	89 c7                	mov    edi,eax
ffff800000810c91:	49 89 df             	mov    r15,rbx
ffff800000810c94:	48 b8 7c 02 ef ff ff 	movabs rax,0xffffffffffef027c
ffff800000810c9b:	ff ff ff 
ffff800000810c9e:	48 01 d8             	add    rax,rbx
ffff800000810ca1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:853
    // read_disk(DISK_MAJOR_MAJOR, 0, 1, buf);/*rint r= equest(DISK_MAJOR_MAJOR,DISKREQ_READ,0x0,1,(unsigned char *)buf);
    // chk_result(r);
    DPT = *(struct Disk_Partition_Table *)buf;
ffff800000810ca3:	48 8d 95 e0 fd ff ff 	lea    rdx,[rbp-0x220]
ffff800000810caa:	48 8d 85 e0 fb ff ff 	lea    rax,[rbp-0x420]
ffff800000810cb1:	48 89 d6             	mov    rsi,rdx
ffff800000810cb4:	ba 40 00 00 00       	mov    edx,0x40
ffff800000810cb9:	48 89 c7             	mov    rdi,rax
ffff800000810cbc:	48 89 d1             	mov    rcx,rdx
ffff800000810cbf:	f3 48 a5             	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:854
	printf("DPTE[0] start_LBA:%x\ttype:%x\n",DPT.DPTE[0].start_LBA,DPT.DPTE[0].type);
ffff800000810cc2:	0f b6 85 a2 fd ff ff 	movzx  eax,BYTE PTR [rbp-0x25e]
ffff800000810cc9:	0f b6 d0             	movzx  edx,al
ffff800000810ccc:	8b 85 a6 fd ff ff    	mov    eax,DWORD PTR [rbp-0x25a]
ffff800000810cd2:	89 c6                	mov    esi,eax
ffff800000810cd4:	48 b8 48 de ff ff ff 	movabs rax,0xffffffffffffde48
ffff800000810cdb:	ff ff ff 
ffff800000810cde:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000810ce2:	48 89 c7             	mov    rdi,rax
ffff800000810ce5:	49 89 df             	mov    r15,rbx
ffff800000810ce8:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810ced:	48 b9 96 4e ee ff ff 	movabs rcx,0xffffffffffee4e96
ffff800000810cf4:	ff ff ff 
ffff800000810cf7:	48 01 d9             	add    rcx,rbx
ffff800000810cfa:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:856

	memset(buf,0,512);
ffff800000810cfc:	48 8d 85 e0 fd ff ff 	lea    rax,[rbp-0x220]
ffff800000810d03:	ba 00 02 00 00       	mov    edx,0x200
ffff800000810d08:	be 00 00 00 00       	mov    esi,0x0
ffff800000810d0d:	48 89 c7             	mov    rdi,rax
ffff800000810d10:	49 89 df             	mov    r15,rbx
ffff800000810d13:	48 b8 6b 53 ef ff ff 	movabs rax,0xffffffffffef536b
ffff800000810d1a:	ff ff ff 
ffff800000810d1d:	48 01 d8             	add    rax,rbx
ffff800000810d20:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:857
	blkdev_read(root_sb->dev,DPT.DPTE[0].start_LBA*512,512,buf);
ffff800000810d22:	8b 85 a6 fd ff ff    	mov    eax,DWORD PTR [rbp-0x25a]
ffff800000810d28:	c1 e0 09             	shl    eax,0x9
ffff800000810d2b:	89 c6                	mov    esi,eax
ffff800000810d2d:	48 b8 10 fe ff ff ff 	movabs rax,0xfffffffffffffe10
ffff800000810d34:	ff ff ff 
ffff800000810d37:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000810d3b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810d3e:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff800000810d42:	0f b7 c0             	movzx  eax,ax
ffff800000810d45:	48 8d 95 e0 fd ff ff 	lea    rdx,[rbp-0x220]
ffff800000810d4c:	48 89 d1             	mov    rcx,rdx
ffff800000810d4f:	ba 00 02 00 00       	mov    edx,0x200
ffff800000810d54:	89 c7                	mov    edi,eax
ffff800000810d56:	49 89 df             	mov    r15,rbx
ffff800000810d59:	48 b8 7c 02 ef ff ff 	movabs rax,0xffffffffffef027c
ffff800000810d60:	ff ff ff 
ffff800000810d63:	48 01 d8             	add    rax,rbx
ffff800000810d66:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:860

    //挂载新文件系统到/mnt
	struct super_block *fat32_sb= mount_fs("FAT32",&DPT.DPTE[0],buf);	//not dev node
ffff800000810d68:	48 8d 85 e0 fd ff ff 	lea    rax,[rbp-0x220]
ffff800000810d6f:	48 8d 95 e0 fb ff ff 	lea    rdx,[rbp-0x420]
ffff800000810d76:	48 8d 8a be 01 00 00 	lea    rcx,[rdx+0x1be]
ffff800000810d7d:	48 89 c2             	mov    rdx,rax
ffff800000810d80:	48 89 ce             	mov    rsi,rcx
ffff800000810d83:	48 b8 42 de ff ff ff 	movabs rax,0xffffffffffffde42
ffff800000810d8a:	ff ff ff 
ffff800000810d8d:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000810d91:	48 89 c7             	mov    rdi,rax
ffff800000810d94:	49 89 df             	mov    r15,rbx
ffff800000810d97:	48 b8 9d db ee ff ff 	movabs rax,0xffffffffffeedb9d
ffff800000810d9e:	ff ff ff 
ffff800000810da1:	48 01 d8             	add    rax,rbx
ffff800000810da4:	ff d0                	call   rax
ffff800000810da6:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:861
    fat32_sb->root=dmnt;
ffff800000810daa:	48 b8 e8 fe ff ff ff 	movabs rax,0xfffffffffffffee8
ffff800000810db1:	ff ff ff 
ffff800000810db4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000810db8:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000810dbb:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000810dbf:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:863
//    list_add_to_behind(&root_sb->root->subdirs_list,ddev);//把dev文件夹挂到新的rfs下
}
ffff800000810dc2:	90                   	nop
ffff800000810dc3:	48 81 c4 10 04 00 00 	add    rsp,0x410
ffff800000810dca:	5b                   	pop    rbx
ffff800000810dcb:	41 5f                	pop    r15
ffff800000810dcd:	5d                   	pop    rbp
ffff800000810dce:	c3                   	ret    

ffff800000810dcf <close_tty>:
close_tty():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:12
int stdd=0;
struct file_operations tty_fops={
        .open=init_tty, .close=close_tty,.write=write_tty,.read=read_tty,.ioctl=ioctl_tty
};

long close_tty(struct index_node * inode,struct file * filp){
ffff800000810dcf:	f3 0f 1e fa          	endbr64 
ffff800000810dd3:	55                   	push   rbp
ffff800000810dd4:	48 89 e5             	mov    rbp,rsp
ffff800000810dd7:	41 57                	push   r15
ffff800000810dd9:	53                   	push   rbx
ffff800000810dda:	48 83 ec 30          	sub    rsp,0x30
ffff800000810dde:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000810dde <close_tty+0xf>
ffff800000810de5:	49 bb 3a ba 10 00 00 	movabs r11,0x10ba3a
ffff800000810dec:	00 00 00 
ffff800000810def:	4c 01 db             	add    rbx,r11
ffff800000810df2:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000810df6:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:13
    stdbuf_t * bi=&((tty_t*)filp->private_data)->stdin_buf;
ffff800000810dfa:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000810dfe:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000810e02:	48 83 c0 18          	add    rax,0x18
ffff800000810e06:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:14
    stdbuf_t * bo=&((tty_t*)filp->private_data)->stdout_buf;
ffff800000810e0a:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000810e0e:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000810e12:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:15
    stdbuf_t * be=&((tty_t*)filp->private_data)->stderr_buf;
ffff800000810e16:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000810e1a:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000810e1e:	48 83 c0 30          	add    rax,0x30
ffff800000810e22:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:16
    kmfree((addr_t) bi);
ffff800000810e26:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000810e2a:	48 89 c7             	mov    rdi,rax
ffff800000810e2d:	49 89 df             	mov    r15,rbx
ffff800000810e30:	48 b8 d7 5a ee ff ff 	movabs rax,0xffffffffffee5ad7
ffff800000810e37:	ff ff ff 
ffff800000810e3a:	48 01 d8             	add    rax,rbx
ffff800000810e3d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:17
    kmfree((addr_t) bo);
ffff800000810e3f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000810e43:	48 89 c7             	mov    rdi,rax
ffff800000810e46:	49 89 df             	mov    r15,rbx
ffff800000810e49:	48 b8 d7 5a ee ff ff 	movabs rax,0xffffffffffee5ad7
ffff800000810e50:	ff ff ff 
ffff800000810e53:	48 01 d8             	add    rax,rbx
ffff800000810e56:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:18
    kmfree((addr_t) be);
ffff800000810e58:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810e5c:	48 89 c7             	mov    rdi,rax
ffff800000810e5f:	49 89 df             	mov    r15,rbx
ffff800000810e62:	48 b8 d7 5a ee ff ff 	movabs rax,0xffffffffffee5ad7
ffff800000810e69:	ff ff ff 
ffff800000810e6c:	48 01 d8             	add    rax,rbx
ffff800000810e6f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:19
    kmfree((addr_t) filp->private_data);
ffff800000810e71:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000810e75:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000810e79:	48 89 c7             	mov    rdi,rax
ffff800000810e7c:	49 89 df             	mov    r15,rbx
ffff800000810e7f:	48 b8 d7 5a ee ff ff 	movabs rax,0xffffffffffee5ad7
ffff800000810e86:	ff ff ff 
ffff800000810e89:	48 01 d8             	add    rax,rbx
ffff800000810e8c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:20
    return 0;
ffff800000810e8e:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:21
}
ffff800000810e93:	48 83 c4 30          	add    rsp,0x30
ffff800000810e97:	5b                   	pop    rbx
ffff800000810e98:	41 5f                	pop    r15
ffff800000810e9a:	5d                   	pop    rbp
ffff800000810e9b:	c3                   	ret    

ffff800000810e9c <init_tty>:
init_tty():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:24
//打开文件
long init_tty(struct index_node * inode,struct file * filp)
{
ffff800000810e9c:	f3 0f 1e fa          	endbr64 
ffff800000810ea0:	55                   	push   rbp
ffff800000810ea1:	48 89 e5             	mov    rbp,rsp
ffff800000810ea4:	41 57                	push   r15
ffff800000810ea6:	53                   	push   rbx
ffff800000810ea7:	48 83 ec 20          	sub    rsp,0x20
ffff800000810eab:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000810eab <init_tty+0xf>
ffff800000810eb2:	49 bb 6d b9 10 00 00 	movabs r11,0x10b96d
ffff800000810eb9:	00 00 00 
ffff800000810ebc:	4c 01 db             	add    rbx,r11
ffff800000810ebf:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000810ec3:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:25
    tty_t *ntty=(tty_t*) kmalloc();
ffff800000810ec7:	49 89 df             	mov    r15,rbx
ffff800000810eca:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810ecf:	48 ba 68 57 ee ff ff 	movabs rdx,0xffffffffffee5768
ffff800000810ed6:	ff ff ff 
ffff800000810ed9:	48 01 da             	add    rdx,rbx
ffff800000810edc:	ff d2                	call   rdx
ffff800000810ede:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:27
    //创建三个缓冲区
    ntty->stdin_buf.data= (char*) kmalloc();
ffff800000810ee2:	49 89 df             	mov    r15,rbx
ffff800000810ee5:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810eea:	48 ba 68 57 ee ff ff 	movabs rdx,0xffffffffffee5768
ffff800000810ef1:	ff ff ff 
ffff800000810ef4:	48 01 da             	add    rdx,rbx
ffff800000810ef7:	ff d2                	call   rdx
ffff800000810ef9:	48 89 c2             	mov    rdx,rax
ffff800000810efc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000810f00:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:28
    ntty->stdout_buf.data=(char*) kmalloc();
ffff800000810f04:	49 89 df             	mov    r15,rbx
ffff800000810f07:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810f0c:	48 ba 68 57 ee ff ff 	movabs rdx,0xffffffffffee5768
ffff800000810f13:	ff ff ff 
ffff800000810f16:	48 01 da             	add    rdx,rbx
ffff800000810f19:	ff d2                	call   rdx
ffff800000810f1b:	48 89 c2             	mov    rdx,rax
ffff800000810f1e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000810f22:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:29
    ntty->stderr_buf.data=(char*) kmalloc();
ffff800000810f25:	49 89 df             	mov    r15,rbx
ffff800000810f28:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810f2d:	48 ba 68 57 ee ff ff 	movabs rdx,0xffffffffffee5768
ffff800000810f34:	ff ff ff 
ffff800000810f37:	48 01 da             	add    rdx,rbx
ffff800000810f3a:	ff d2                	call   rdx
ffff800000810f3c:	48 89 c2             	mov    rdx,rax
ffff800000810f3f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000810f43:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:30
    ntty->stdin_buf. wptr= 0;
ffff800000810f47:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000810f4b:	c7 40 20 00 00 00 00 	mov    DWORD PTR [rax+0x20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:31
    ntty->stdout_buf.wptr= 0;
ffff800000810f52:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000810f56:	c7 40 08 00 00 00 00 	mov    DWORD PTR [rax+0x8],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:32
    ntty->stderr_buf.wptr= 0;
ffff800000810f5d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000810f61:	c7 40 38 00 00 00 00 	mov    DWORD PTR [rax+0x38],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:33
    ntty->stdin_buf. rptr= 0;
ffff800000810f68:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000810f6c:	c7 40 24 00 00 00 00 	mov    DWORD PTR [rax+0x24],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:34
    ntty->stdout_buf.rptr= 0;
ffff800000810f73:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000810f77:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [rax+0xc],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:35
    ntty->stderr_buf.rptr= 0;
ffff800000810f7e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000810f82:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [rax+0x3c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:36
    ntty->stdin_buf.size= PAGE_4K_SIZE;
ffff800000810f89:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000810f8d:	c7 40 28 00 10 00 00 	mov    DWORD PTR [rax+0x28],0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:37
    ntty->stdout_buf.size= PAGE_4K_SIZE;
ffff800000810f94:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000810f98:	c7 40 10 00 10 00 00 	mov    DWORD PTR [rax+0x10],0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:38
    ntty->stderr_buf.size= PAGE_4K_SIZE;
ffff800000810f9f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000810fa3:	c7 40 40 00 10 00 00 	mov    DWORD PTR [rax+0x40],0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:40
    //设置inode文件操作方式为tty方式
    inode->f_ops=&tty_fops;
ffff800000810faa:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810fae:	48 ba c8 fe ff ff ff 	movabs rdx,0xfffffffffffffec8
ffff800000810fb5:	ff ff ff 
ffff800000810fb8:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000810fbc:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:41
    filp->f_ops=&tty_fops;
ffff800000810fc0:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000810fc4:	48 ba c8 fe ff ff ff 	movabs rdx,0xfffffffffffffec8
ffff800000810fcb:	ff ff ff 
ffff800000810fce:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000810fd2:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:42
    filp->private_data=ntty;
ffff800000810fd6:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000810fda:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000810fde:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:43
    return 0;
ffff800000810fe2:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:44
}
ffff800000810fe7:	48 83 c4 20          	add    rsp,0x20
ffff800000810feb:	5b                   	pop    rbx
ffff800000810fec:	41 5f                	pop    r15
ffff800000810fee:	5d                   	pop    rbp
ffff800000810fef:	c3                   	ret    

ffff800000810ff0 <read_tty>:
read_tty():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:47

long read_tty(struct file * filp,char * buf,unsigned long count,long * position)
{
ffff800000810ff0:	f3 0f 1e fa          	endbr64 
ffff800000810ff4:	55                   	push   rbp
ffff800000810ff5:	48 89 e5             	mov    rbp,rsp
ffff800000810ff8:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000810ff8 <read_tty+0x8>
ffff800000810fff:	49 bb 20 b8 10 00 00 	movabs r11,0x10b820
ffff800000811006:	00 00 00 
ffff800000811009:	4c 01 d8             	add    rax,r11
ffff80000081100c:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000811010:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff800000811014:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffff800000811018:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:48
    stdbuf_t * b=&((tty_t*)filp->private_data)->stdin_buf;
ffff80000081101c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811020:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000811024:	48 83 c0 18          	add    rax,0x18
ffff800000811028:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:49
    int i=0;
ffff80000081102c:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:50
    while (i<count){
ffff800000811033:	eb 6e                	jmp    ffff8000008110a3 <read_tty+0xb3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:51
        if(b->rptr==b->size)
ffff800000811035:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000811039:	8b 50 0c             	mov    edx,DWORD PTR [rax+0xc]
ffff80000081103c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000811040:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff800000811043:	39 c2                	cmp    edx,eax
ffff800000811045:	75 0b                	jne    ffff800000811052 <read_tty+0x62>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:52
            b->rptr=0;
ffff800000811047:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000081104b:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [rax+0xc],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:53
        if(b->rptr==b->wptr)continue;
ffff800000811052:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000811056:	8b 50 0c             	mov    edx,DWORD PTR [rax+0xc]
ffff800000811059:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000081105d:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000811060:	39 c2                	cmp    edx,eax
ffff800000811062:	75 02                	jne    ffff800000811066 <read_tty+0x76>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:53 (discriminator 1)
ffff800000811064:	eb 3d                	jmp    ffff8000008110a3 <read_tty+0xb3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:54
        buf[i++]=b->data[b->rptr];
ffff800000811066:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000081106a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000081106d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000811071:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff800000811074:	48 98                	cdqe   
ffff800000811076:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
ffff80000081107a:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000081107d:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000811080:	89 55 fc             	mov    DWORD PTR [rbp-0x4],edx
ffff800000811083:	48 63 d0             	movsxd rdx,eax
ffff800000811086:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000081108a:	48 01 c2             	add    rdx,rax
ffff80000081108d:	0f b6 01             	movzx  eax,BYTE PTR [rcx]
ffff800000811090:	88 02                	mov    BYTE PTR [rdx],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:55
        b->rptr++;
ffff800000811092:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000811096:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff800000811099:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000081109c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008110a0:	89 50 0c             	mov    DWORD PTR [rax+0xc],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:50
    while (i<count){
ffff8000008110a3:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008110a6:	48 98                	cdqe   
ffff8000008110a8:	48 39 45 d8          	cmp    QWORD PTR [rbp-0x28],rax
ffff8000008110ac:	77 87                	ja     ffff800000811035 <read_tty+0x45>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:57
    }
}
ffff8000008110ae:	90                   	nop
ffff8000008110af:	5d                   	pop    rbp
ffff8000008110b0:	c3                   	ret    

ffff8000008110b1 <write_tty>:
write_tty():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:59
long write_tty(struct file * filp,char * buf,unsigned long count,long * position)
{
ffff8000008110b1:	f3 0f 1e fa          	endbr64 
ffff8000008110b5:	55                   	push   rbp
ffff8000008110b6:	48 89 e5             	mov    rbp,rsp
ffff8000008110b9:	41 57                	push   r15
ffff8000008110bb:	48 83 ec 48          	sub    rsp,0x48
ffff8000008110bf:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008110bf <write_tty+0xe>
ffff8000008110c6:	49 bb 59 b7 10 00 00 	movabs r11,0x10b759
ffff8000008110cd:	00 00 00 
ffff8000008110d0:	4c 01 d8             	add    rax,r11
ffff8000008110d3:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff8000008110d7:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffff8000008110db:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
ffff8000008110df:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:60
    stdbuf_t * b=&((tty_t*)filp->private_data)->stdout_buf;
ffff8000008110e3:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff8000008110e7:	48 8b 52 20          	mov    rdx,QWORD PTR [rdx+0x20]
ffff8000008110eb:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:61
    int i=0;
ffff8000008110ef:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:62
    int saved_wptr=b->wptr;
ffff8000008110f6:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008110fa:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff8000008110fd:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:63
    while (i<count){
ffff800000811100:	eb 5b                	jmp    ffff80000081115d <write_tty+0xac>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:64
        if(b->wptr==b->size)
ffff800000811102:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000811106:	8b 4a 08             	mov    ecx,DWORD PTR [rdx+0x8]
ffff800000811109:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000081110d:	8b 52 10             	mov    edx,DWORD PTR [rdx+0x10]
ffff800000811110:	39 d1                	cmp    ecx,edx
ffff800000811112:	75 0b                	jne    ffff80000081111f <write_tty+0x6e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:65
            b->wptr=0;
ffff800000811114:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000811118:	c7 42 08 00 00 00 00 	mov    DWORD PTR [rdx+0x8],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:66
        b->data[b->wptr]=buf[i++];
ffff80000081111f:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000811122:	8d 4a 01             	lea    ecx,[rdx+0x1]
ffff800000811125:	89 4d ec             	mov    DWORD PTR [rbp-0x14],ecx
ffff800000811128:	48 63 ca             	movsxd rcx,edx
ffff80000081112b:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff80000081112f:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff800000811133:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000811137:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000081113a:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000081113e:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff800000811141:	48 63 d2             	movsxd rdx,edx
ffff800000811144:	48 01 d1             	add    rcx,rdx
ffff800000811147:	0f b6 16             	movzx  edx,BYTE PTR [rsi]
ffff80000081114a:	88 11                	mov    BYTE PTR [rcx],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:67
        b->wptr++;
ffff80000081114c:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000811150:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff800000811153:	8d 4a 01             	lea    ecx,[rdx+0x1]
ffff800000811156:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000081115a:	89 4a 08             	mov    DWORD PTR [rdx+0x8],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:63
    while (i<count){
ffff80000081115d:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000811160:	48 63 d2             	movsxd rdx,edx
ffff800000811163:	48 39 55 b8          	cmp    QWORD PTR [rbp-0x48],rdx
ffff800000811167:	77 99                	ja     ffff800000811102 <write_tty+0x51>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:70
    }
    //刷新到framebuffer
    write_framebuffer(filp,b->data+saved_wptr,count,0);
ffff800000811169:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000081116d:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000811170:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000811173:	48 63 d2             	movsxd rdx,edx
ffff800000811176:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff80000081117a:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000081117e:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
ffff800000811182:	b9 00 00 00 00       	mov    ecx,0x0
ffff800000811187:	49 89 c7             	mov    r15,rax
ffff80000081118a:	49 b8 21 d6 ee ff ff 	movabs r8,0xffffffffffeed621
ffff800000811191:	ff ff ff 
ffff800000811194:	49 01 c0             	add    r8,rax
ffff800000811197:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:71
}
ffff80000081119a:	90                   	nop
ffff80000081119b:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000081119f:	c9                   	leave  
ffff8000008111a0:	c3                   	ret    

ffff8000008111a1 <ioctl_tty>:
ioctl_tty():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:81
 * TTY_CONNECT:尝试连接到dev/console,这样会成为controlling terminal,里面的数据才能输出到屏幕上，
 * 因为除了特殊指定的进程都会有一个自己的天tty。
 * 成功返回0。
 * */
long ioctl_tty(struct index_node * inode, struct file * filp, unsigned long cmd, unsigned long arg)
{
ffff8000008111a1:	f3 0f 1e fa          	endbr64 
ffff8000008111a5:	55                   	push   rbp
ffff8000008111a6:	48 89 e5             	mov    rbp,rsp
ffff8000008111a9:	41 57                	push   r15
ffff8000008111ab:	48 83 ec 58          	sub    rsp,0x58
ffff8000008111af:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008111af <ioctl_tty+0xe>
ffff8000008111b6:	49 bb 69 b6 10 00 00 	movabs r11,0x10b669
ffff8000008111bd:	00 00 00 
ffff8000008111c0:	4c 01 d8             	add    rax,r11
ffff8000008111c3:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
ffff8000008111c7:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
ffff8000008111cb:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
ffff8000008111cf:	48 89 4d a0          	mov    QWORD PTR [rbp-0x60],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:82
    stdbuf_t * b=&((tty_t*)filp->private_data)->stderr_buf;
ffff8000008111d3:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffff8000008111d7:	48 8b 52 20          	mov    rdx,QWORD PTR [rdx+0x20]
ffff8000008111db:	48 83 c2 30          	add    rdx,0x30
ffff8000008111df:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:83
    stdbuf_t * ib=&((tty_t*)filp->private_data)->stdin_buf;
ffff8000008111e3:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffff8000008111e7:	48 8b 52 20          	mov    rdx,QWORD PTR [rdx+0x20]
ffff8000008111eb:	48 83 c2 18          	add    rdx,0x18
ffff8000008111ef:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:84
    int i=0;
ffff8000008111f3:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:85
    char* buf=*((char**)arg);
ffff8000008111fa:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
ffff8000008111fe:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000811201:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:86
    unsigned long count=*((unsigned long*)(arg+8));
ffff800000811205:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
ffff800000811209:	48 83 c2 08          	add    rdx,0x8
ffff80000081120d:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000811210:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:87
    int saved_wptr=b->wptr;
ffff800000811214:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000811218:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff80000081121b:	89 55 c4             	mov    DWORD PTR [rbp-0x3c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:88
    int fd=-1;
ffff80000081121e:	c7 45 c0 ff ff ff ff 	mov    DWORD PTR [rbp-0x40],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:89
    switch (cmd)
ffff800000811225:	48 83 7d a8 03       	cmp    QWORD PTR [rbp-0x58],0x3
ffff80000081122a:	0f 84 b8 01 00 00    	je     ffff8000008113e8 <ioctl_tty+0x247>
ffff800000811230:	48 83 7d a8 03       	cmp    QWORD PTR [rbp-0x58],0x3
ffff800000811235:	0f 87 b8 01 00 00    	ja     ffff8000008113f3 <ioctl_tty+0x252>
ffff80000081123b:	48 83 7d a8 02       	cmp    QWORD PTR [rbp-0x58],0x2
ffff800000811240:	0f 84 0f 01 00 00    	je     ffff800000811355 <ioctl_tty+0x1b4>
ffff800000811246:	48 83 7d a8 02       	cmp    QWORD PTR [rbp-0x58],0x2
ffff80000081124b:	0f 87 a2 01 00 00    	ja     ffff8000008113f3 <ioctl_tty+0x252>
ffff800000811251:	48 83 7d a8 00       	cmp    QWORD PTR [rbp-0x58],0x0
ffff800000811256:	74 6b                	je     ffff8000008112c3 <ioctl_tty+0x122>
ffff800000811258:	48 83 7d a8 01       	cmp    QWORD PTR [rbp-0x58],0x1
ffff80000081125d:	0f 84 a2 00 00 00    	je     ffff800000811305 <ioctl_tty+0x164>
ffff800000811263:	e9 8b 01 00 00       	jmp    ffff8000008113f3 <ioctl_tty+0x252>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:93
    {
        case TTY_WSTDERR:
            while (i<count){
                if(b->wptr==b->size)
ffff800000811268:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000081126c:	8b 4a 08             	mov    ecx,DWORD PTR [rdx+0x8]
ffff80000081126f:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000811273:	8b 52 10             	mov    edx,DWORD PTR [rdx+0x10]
ffff800000811276:	39 d1                	cmp    ecx,edx
ffff800000811278:	75 0b                	jne    ffff800000811285 <ioctl_tty+0xe4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:94
                    b->wptr=0;
ffff80000081127a:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000081127e:	c7 42 08 00 00 00 00 	mov    DWORD PTR [rdx+0x8],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:95
                b->data[b->wptr]=buf[i++];
ffff800000811285:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000811288:	8d 4a 01             	lea    ecx,[rdx+0x1]
ffff80000081128b:	89 4d ec             	mov    DWORD PTR [rbp-0x14],ecx
ffff80000081128e:	48 63 ca             	movsxd rcx,edx
ffff800000811291:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000811295:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff800000811299:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000081129d:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008112a0:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008112a4:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff8000008112a7:	48 63 d2             	movsxd rdx,edx
ffff8000008112aa:	48 01 d1             	add    rcx,rdx
ffff8000008112ad:	0f b6 16             	movzx  edx,BYTE PTR [rsi]
ffff8000008112b0:	88 11                	mov    BYTE PTR [rcx],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:96
                b->wptr++;
ffff8000008112b2:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008112b6:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff8000008112b9:	8d 4a 01             	lea    ecx,[rdx+0x1]
ffff8000008112bc:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008112c0:	89 4a 08             	mov    DWORD PTR [rdx+0x8],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:92
            while (i<count){
ffff8000008112c3:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff8000008112c6:	48 63 d2             	movsxd rdx,edx
ffff8000008112c9:	48 39 55 c8          	cmp    QWORD PTR [rbp-0x38],rdx
ffff8000008112cd:	77 99                	ja     ffff800000811268 <ioctl_tty+0xc7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:99
            }
            //刷新到framebuffer
            write_framebuffer(filp,b->data+saved_wptr,count,0);
ffff8000008112cf:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008112d3:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008112d6:	8b 55 c4             	mov    edx,DWORD PTR [rbp-0x3c]
ffff8000008112d9:	48 63 d2             	movsxd rdx,edx
ffff8000008112dc:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff8000008112e0:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff8000008112e4:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
ffff8000008112e8:	b9 00 00 00 00       	mov    ecx,0x0
ffff8000008112ed:	49 89 c7             	mov    r15,rax
ffff8000008112f0:	49 b8 21 d6 ee ff ff 	movabs r8,0xffffffffffeed621
ffff8000008112f7:	ff ff ff 
ffff8000008112fa:	49 01 c0             	add    r8,rax
ffff8000008112fd:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:100
        break;
ffff800000811300:	e9 f7 00 00 00       	jmp    ffff8000008113fc <ioctl_tty+0x25b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:102
        case TTY_CONNECT:
            fd=sys_open("dev/console",O_WRONLY|O_CREAT|O_EXCL);
ffff800000811305:	be c1 00 00 00       	mov    esi,0xc1
ffff80000081130a:	48 ba 66 de ff ff ff 	movabs rdx,0xffffffffffffde66
ffff800000811311:	ff ff ff 
ffff800000811314:	48 8d 14 10          	lea    rdx,[rax+rdx*1]
ffff800000811318:	48 89 d7             	mov    rdi,rdx
ffff80000081131b:	49 89 c7             	mov    r15,rax
ffff80000081131e:	48 ba 53 e1 ee ff ff 	movabs rdx,0xffffffffffeee153
ffff800000811325:	ff ff ff 
ffff800000811328:	48 01 c2             	add    rdx,rax
ffff80000081132b:	ff d2                	call   rdx
ffff80000081132d:	89 45 c0             	mov    DWORD PTR [rbp-0x40],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:103
            if(fd==-1)return -1;
ffff800000811330:	83 7d c0 ff          	cmp    DWORD PTR [rbp-0x40],0xffffffff
ffff800000811334:	75 0c                	jne    ffff800000811342 <ioctl_tty+0x1a1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:103 (discriminator 1)
ffff800000811336:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff80000081133d:	e9 bf 00 00 00       	jmp    ffff800000811401 <ioctl_tty+0x260>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:104
            ((tty_t*)filp->private_data)->console_fd=fd;
ffff800000811342:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000811346:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000081134a:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
ffff80000081134d:	89 50 48             	mov    DWORD PTR [rax+0x48],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:105
            break;
ffff800000811350:	e9 a7 00 00 00       	jmp    ffff8000008113fc <ioctl_tty+0x25b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:107
        case TTY_DISCONNECT:
            fd=((tty_t*)filp->private_data)->console_fd;
ffff800000811355:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffff800000811359:	48 8b 52 20          	mov    rdx,QWORD PTR [rdx+0x20]
ffff80000081135d:	8b 52 48             	mov    edx,DWORD PTR [rdx+0x48]
ffff800000811360:	89 55 c0             	mov    DWORD PTR [rbp-0x40],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:108
            if(fd==-1)return -1;
ffff800000811363:	83 7d c0 ff          	cmp    DWORD PTR [rbp-0x40],0xffffffff
ffff800000811367:	75 0c                	jne    ffff800000811375 <ioctl_tty+0x1d4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:108 (discriminator 1)
ffff800000811369:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff800000811370:	e9 8c 00 00 00       	jmp    ffff800000811401 <ioctl_tty+0x260>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:109
            sys_close(fd);
ffff800000811375:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
ffff800000811378:	89 d7                	mov    edi,edx
ffff80000081137a:	49 89 c7             	mov    r15,rax
ffff80000081137d:	48 ba f3 e7 ee ff ff 	movabs rdx,0xffffffffffeee7f3
ffff800000811384:	ff ff ff 
ffff800000811387:	48 01 c2             	add    rdx,rax
ffff80000081138a:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:111
        case TTY_WSTDIN:
            while (i<count){
ffff80000081138c:	eb 5a                	jmp    ffff8000008113e8 <ioctl_tty+0x247>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:112
                if(ib->wptr==ib->size)
ffff80000081138e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811392:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffff800000811395:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811399:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff80000081139c:	39 c2                	cmp    edx,eax
ffff80000081139e:	75 0b                	jne    ffff8000008113ab <ioctl_tty+0x20a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:113
                    ib->wptr=0;
ffff8000008113a0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008113a4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [rax+0x8],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:114
                ib->data[ib->wptr]=buf[i++];
ffff8000008113ab:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008113ae:	8d 50 01             	lea    edx,[rax+0x1]
ffff8000008113b1:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
ffff8000008113b4:	48 63 d0             	movsxd rdx,eax
ffff8000008113b7:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008113bb:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
ffff8000008113bf:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008113c3:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008113c6:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008113ca:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff8000008113cd:	48 98                	cdqe   
ffff8000008113cf:	48 01 c2             	add    rdx,rax
ffff8000008113d2:	0f b6 01             	movzx  eax,BYTE PTR [rcx]
ffff8000008113d5:	88 02                	mov    BYTE PTR [rdx],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:115
                ib->wptr++;
ffff8000008113d7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008113db:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff8000008113de:	8d 50 01             	lea    edx,[rax+0x1]
ffff8000008113e1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008113e5:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:111
            while (i<count){
ffff8000008113e8:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008113eb:	48 98                	cdqe   
ffff8000008113ed:	48 39 45 c8          	cmp    QWORD PTR [rbp-0x38],rax
ffff8000008113f1:	77 9b                	ja     ffff80000081138e <ioctl_tty+0x1ed>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:117
            }
    default:return -1;
ffff8000008113f3:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff8000008113fa:	eb 05                	jmp    ffff800000811401 <ioctl_tty+0x260>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:119
    }
    return 0;
ffff8000008113fc:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:120
}
ffff800000811401:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000811405:	c9                   	leave  
ffff800000811406:	c3                   	ret    

ffff800000811407 <init_com>:
init_com():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:12
#include "str.h"
#include "memory.h"
#include "mem.h"

char combuf[1024];
void init_com(int base_port){
ffff800000811407:	f3 0f 1e fa          	endbr64 
ffff80000081140b:	55                   	push   rbp
ffff80000081140c:	48 89 e5             	mov    rbp,rsp
ffff80000081140f:	41 57                	push   r15
ffff800000811411:	53                   	push   rbx
ffff800000811412:	48 83 ec 10          	sub    rsp,0x10
ffff800000811416:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000811416 <init_com+0xf>
ffff80000081141d:	49 bb 02 b4 10 00 00 	movabs r11,0x10b402
ffff800000811424:	00 00 00 
ffff800000811427:	4c 01 db             	add    rbx,r11
ffff80000081142a:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:14
    /* disable all interrupts */
    outb(base_port + COM_REG_IER, 0x00);
ffff80000081142d:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000811430:	83 c0 01             	add    eax,0x1
ffff800000811433:	0f b7 c0             	movzx  eax,ax
ffff800000811436:	be 00 00 00 00       	mov    esi,0x0
ffff80000081143b:	89 c7                	mov    edi,eax
ffff80000081143d:	49 89 df             	mov    r15,rbx
ffff800000811440:	48 b8 b8 b4 ee ff ff 	movabs rax,0xffffffffffeeb4b8
ffff800000811447:	ff ff ff 
ffff80000081144a:	48 01 d8             	add    rax,rbx
ffff80000081144d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:17
    
    /* enable DLAB to set bound rate divisor */
    outb(base_port + COM_REG_LCR, 0x80);
ffff80000081144f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000811452:	83 c0 03             	add    eax,0x3
ffff800000811455:	0f b7 c0             	movzx  eax,ax
ffff800000811458:	be 80 00 00 00       	mov    esi,0x80
ffff80000081145d:	89 c7                	mov    edi,eax
ffff80000081145f:	49 89 df             	mov    r15,rbx
ffff800000811462:	48 b8 b8 b4 ee ff ff 	movabs rax,0xffffffffffeeb4b8
ffff800000811469:	ff ff ff 
ffff80000081146c:	48 01 d8             	add    rax,rbx
ffff80000081146f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:20
    
    /* set divisor to 38400 baud */
    outb(base_port + COM_REG_DLL, 0x03);
ffff800000811471:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000811474:	0f b7 c0             	movzx  eax,ax
ffff800000811477:	be 03 00 00 00       	mov    esi,0x3
ffff80000081147c:	89 c7                	mov    edi,eax
ffff80000081147e:	49 89 df             	mov    r15,rbx
ffff800000811481:	48 b8 b8 b4 ee ff ff 	movabs rax,0xffffffffffeeb4b8
ffff800000811488:	ff ff ff 
ffff80000081148b:	48 01 d8             	add    rax,rbx
ffff80000081148e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:21
    outb(base_port + COM_REG_DLM, 0x00);
ffff800000811490:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000811493:	83 c0 01             	add    eax,0x1
ffff800000811496:	0f b7 c0             	movzx  eax,ax
ffff800000811499:	be 00 00 00 00       	mov    esi,0x0
ffff80000081149e:	89 c7                	mov    edi,eax
ffff8000008114a0:	49 89 df             	mov    r15,rbx
ffff8000008114a3:	48 b8 b8 b4 ee ff ff 	movabs rax,0xffffffffffeeb4b8
ffff8000008114aa:	ff ff ff 
ffff8000008114ad:	48 01 d8             	add    rax,rbx
ffff8000008114b0:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:24
    
    /* 8 data bits, parity off, 1 stop bit, DLAB latch off */
    outb(base_port + COM_REG_LCR, 0x03);
ffff8000008114b2:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008114b5:	83 c0 03             	add    eax,0x3
ffff8000008114b8:	0f b7 c0             	movzx  eax,ax
ffff8000008114bb:	be 03 00 00 00       	mov    esi,0x3
ffff8000008114c0:	89 c7                	mov    edi,eax
ffff8000008114c2:	49 89 df             	mov    r15,rbx
ffff8000008114c5:	48 b8 b8 b4 ee ff ff 	movabs rax,0xffffffffffeeb4b8
ffff8000008114cc:	ff ff ff 
ffff8000008114cf:	48 01 d8             	add    rax,rbx
ffff8000008114d2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:27
    
    /* enable FIFO */
    outb(base_port + COM_REG_FCR, 0x87);//0xc7
ffff8000008114d4:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008114d7:	83 c0 02             	add    eax,0x2
ffff8000008114da:	0f b7 c0             	movzx  eax,ax
ffff8000008114dd:	be 87 00 00 00       	mov    esi,0x87
ffff8000008114e2:	89 c7                	mov    edi,eax
ffff8000008114e4:	49 89 df             	mov    r15,rbx
ffff8000008114e7:	48 b8 b8 b4 ee ff ff 	movabs rax,0xffffffffffeeb4b8
ffff8000008114ee:	ff ff ff 
ffff8000008114f1:	48 01 d8             	add    rax,rbx
ffff8000008114f4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:30

    /* enable IRQs, set RTS/DSR */
    outb(base_port + COM_REG_MCR, 0x0B);
ffff8000008114f6:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008114f9:	83 c0 04             	add    eax,0x4
ffff8000008114fc:	0f b7 c0             	movzx  eax,ax
ffff8000008114ff:	be 0b 00 00 00       	mov    esi,0xb
ffff800000811504:	89 c7                	mov    edi,eax
ffff800000811506:	49 89 df             	mov    r15,rbx
ffff800000811509:	48 b8 b8 b4 ee ff ff 	movabs rax,0xffffffffffeeb4b8
ffff800000811510:	ff ff ff 
ffff800000811513:	48 01 d8             	add    rax,rbx
ffff800000811516:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:44
//    if (inb(base_port + COM_REG_RX) != 0xae) {
//        return;
//    }
    
    /* set in normal mode */
    outb(base_port + COM_REG_MCR, 0x0F);
ffff800000811518:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000081151b:	83 c0 04             	add    eax,0x4
ffff80000081151e:	0f b7 c0             	movzx  eax,ax
ffff800000811521:	be 0f 00 00 00       	mov    esi,0xf
ffff800000811526:	89 c7                	mov    edi,eax
ffff800000811528:	49 89 df             	mov    r15,rbx
ffff80000081152b:	48 b8 b8 b4 ee ff ff 	movabs rax,0xffffffffffeeb4b8
ffff800000811532:	ff ff ff 
ffff800000811535:	48 01 d8             	add    rax,rbx
ffff800000811538:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:45
}
ffff80000081153a:	90                   	nop
ffff80000081153b:	48 83 c4 10          	add    rsp,0x10
ffff80000081153f:	5b                   	pop    rbx
ffff800000811540:	41 5f                	pop    r15
ffff800000811542:	5d                   	pop    rbp
ffff800000811543:	c3                   	ret    

ffff800000811544 <com_putchar>:
com_putchar():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:47
void com_putchar(unsigned short ch,int com_base)
{
ffff800000811544:	f3 0f 1e fa          	endbr64 
ffff800000811548:	55                   	push   rbp
ffff800000811549:	48 89 e5             	mov    rbp,rsp
ffff80000081154c:	41 57                	push   r15
ffff80000081154e:	53                   	push   rbx
ffff80000081154f:	48 83 ec 20          	sub    rsp,0x20
ffff800000811553:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000811553 <com_putchar+0xf>
ffff80000081155a:	49 bb c5 b2 10 00 00 	movabs r11,0x10b2c5
ffff800000811561:	00 00 00 
ffff800000811564:	4c 01 db             	add    rbx,r11
ffff800000811567:	89 f8                	mov    eax,edi
ffff800000811569:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000081156c:	66 89 45 dc          	mov    WORD PTR [rbp-0x24],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:51 (discriminator 1)
    unsigned char res;
    /* wait for the port to be ready */
    do {
        res = inb(com_base + COM_REG_LSR);
ffff800000811570:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000811573:	83 c0 05             	add    eax,0x5
ffff800000811576:	0f b6 c0             	movzx  eax,al
ffff800000811579:	89 c7                	mov    edi,eax
ffff80000081157b:	49 89 df             	mov    r15,rbx
ffff80000081157e:	48 b8 d1 b4 ee ff ff 	movabs rax,0xffffffffffeeb4d1
ffff800000811585:	ff ff ff 
ffff800000811588:	48 01 d8             	add    rax,rbx
ffff80000081158b:	ff d0                	call   rax
ffff80000081158d:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:52 (discriminator 1)
        res &= 0x20;
ffff800000811590:	80 65 ef 20          	and    BYTE PTR [rbp-0x11],0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:53 (discriminator 1)
    } while (res == 0);
ffff800000811594:	80 7d ef 00          	cmp    BYTE PTR [rbp-0x11],0x0
ffff800000811598:	74 d6                	je     ffff800000811570 <com_putchar+0x2c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:54
    outb(com_base, ch);
ffff80000081159a:	0f b7 45 dc          	movzx  eax,WORD PTR [rbp-0x24]
ffff80000081159e:	0f b6 d0             	movzx  edx,al
ffff8000008115a1:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff8000008115a4:	0f b7 c0             	movzx  eax,ax
ffff8000008115a7:	89 d6                	mov    esi,edx
ffff8000008115a9:	89 c7                	mov    edi,eax
ffff8000008115ab:	49 89 df             	mov    r15,rbx
ffff8000008115ae:	48 b8 b8 b4 ee ff ff 	movabs rax,0xffffffffffeeb4b8
ffff8000008115b5:	ff ff ff 
ffff8000008115b8:	48 01 d8             	add    rax,rbx
ffff8000008115bb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:55
}
ffff8000008115bd:	90                   	nop
ffff8000008115be:	48 83 c4 20          	add    rsp,0x20
ffff8000008115c2:	5b                   	pop    rbx
ffff8000008115c3:	41 5f                	pop    r15
ffff8000008115c5:	5d                   	pop    rbp
ffff8000008115c6:	c3                   	ret    

ffff8000008115c7 <com_puts>:
com_puts():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:57

void com_puts(char* s,int com_port){
ffff8000008115c7:	f3 0f 1e fa          	endbr64 
ffff8000008115cb:	55                   	push   rbp
ffff8000008115cc:	48 89 e5             	mov    rbp,rsp
ffff8000008115cf:	41 57                	push   r15
ffff8000008115d1:	53                   	push   rbx
ffff8000008115d2:	48 83 ec 10          	sub    rsp,0x10
ffff8000008115d6:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008115d6 <com_puts+0xf>
ffff8000008115dd:	49 bb 42 b2 10 00 00 	movabs r11,0x10b242
ffff8000008115e4:	00 00 00 
ffff8000008115e7:	4c 01 db             	add    rbx,r11
ffff8000008115ea:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff8000008115ee:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:58
    for(;*s;s++){
ffff8000008115f1:	eb 2a                	jmp    ffff80000081161d <com_puts+0x56>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:59 (discriminator 2)
        com_putchar(*s,com_port);
ffff8000008115f3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008115f7:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008115fa:	66 98                	cbw    
ffff8000008115fc:	0f b7 c0             	movzx  eax,ax
ffff8000008115ff:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffff800000811602:	89 d6                	mov    esi,edx
ffff800000811604:	89 c7                	mov    edi,eax
ffff800000811606:	49 89 df             	mov    r15,rbx
ffff800000811609:	48 b8 2c 4d ef ff ff 	movabs rax,0xffffffffffef4d2c
ffff800000811610:	ff ff ff 
ffff800000811613:	48 01 d8             	add    rax,rbx
ffff800000811616:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:58 (discriminator 2)
    for(;*s;s++){
ffff800000811618:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:58 (discriminator 1)
ffff80000081161d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811621:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811624:	84 c0                	test   al,al
ffff800000811626:	75 cb                	jne    ffff8000008115f3 <com_puts+0x2c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:61
    }
}
ffff800000811628:	90                   	nop
ffff800000811629:	90                   	nop
ffff80000081162a:	48 83 c4 10          	add    rsp,0x10
ffff80000081162e:	5b                   	pop    rbx
ffff80000081162f:	41 5f                	pop    r15
ffff800000811631:	5d                   	pop    rbp
ffff800000811632:	c3                   	ret    

ffff800000811633 <comprintf>:
comprintf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:63

void comprintf(char* fmt,...){
ffff800000811633:	f3 0f 1e fa          	endbr64 
ffff800000811637:	55                   	push   rbp
ffff800000811638:	48 89 e5             	mov    rbp,rsp
ffff80000081163b:	41 57                	push   r15
ffff80000081163d:	53                   	push   rbx
ffff80000081163e:	48 81 ec 10 01 00 00 	sub    rsp,0x110
ffff800000811645:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000811645 <comprintf+0x12>
ffff80000081164c:	49 bb d3 b1 10 00 00 	movabs r11,0x10b1d3
ffff800000811653:	00 00 00 
ffff800000811656:	4c 01 db             	add    rbx,r11
ffff800000811659:	48 89 bd e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rdi
ffff800000811660:	48 89 b5 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rsi
ffff800000811667:	48 89 95 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rdx
ffff80000081166e:	48 89 8d 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rcx
ffff800000811675:	4c 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],r8
ffff80000081167c:	4c 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],r9
ffff800000811683:	84 c0                	test   al,al
ffff800000811685:	74 23                	je     ffff8000008116aa <comprintf+0x77>
ffff800000811687:	0f 29 85 70 ff ff ff 	movaps XMMWORD PTR [rbp-0x90],xmm0
ffff80000081168e:	0f 29 4d 80          	movaps XMMWORD PTR [rbp-0x80],xmm1
ffff800000811692:	0f 29 55 90          	movaps XMMWORD PTR [rbp-0x70],xmm2
ffff800000811696:	0f 29 5d a0          	movaps XMMWORD PTR [rbp-0x60],xmm3
ffff80000081169a:	0f 29 65 b0          	movaps XMMWORD PTR [rbp-0x50],xmm4
ffff80000081169e:	0f 29 6d c0          	movaps XMMWORD PTR [rbp-0x40],xmm5
ffff8000008116a2:	0f 29 75 d0          	movaps XMMWORD PTR [rbp-0x30],xmm6
ffff8000008116a6:	0f 29 7d e0          	movaps XMMWORD PTR [rbp-0x20],xmm7
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:64
    if(strlen(fmt)>=1024)
ffff8000008116aa:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
ffff8000008116b1:	48 89 c7             	mov    rdi,rax
ffff8000008116b4:	49 89 df             	mov    r15,rbx
ffff8000008116b7:	48 b8 8d 56 ef ff ff 	movabs rax,0xffffffffffef568d
ffff8000008116be:	ff ff ff 
ffff8000008116c1:	48 01 d8             	add    rax,rbx
ffff8000008116c4:	ff d0                	call   rax
ffff8000008116c6:	3d ff 03 00 00       	cmp    eax,0x3ff
ffff8000008116cb:	0f 8f f6 03 00 00    	jg     ffff800000811ac7 <comprintf+0x494>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:67
        return;//一次性输出不了太长
    //这里不使用kmalloc
    char* tmp=combuf;
ffff8000008116d1:	48 b8 98 fd ff ff ff 	movabs rax,0xfffffffffffffd98
ffff8000008116d8:	ff ff ff 
ffff8000008116db:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008116df:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:68
    memset(tmp,0, sizeof(combuf));
ffff8000008116e6:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff8000008116ed:	ba 00 04 00 00       	mov    edx,0x400
ffff8000008116f2:	be 00 00 00 00       	mov    esi,0x0
ffff8000008116f7:	48 89 c7             	mov    rdi,rax
ffff8000008116fa:	49 89 df             	mov    r15,rbx
ffff8000008116fd:	48 b8 6b 53 ef ff ff 	movabs rax,0xffffffffffef536b
ffff800000811704:	ff ff ff 
ffff800000811707:	48 01 d8             	add    rax,rbx
ffff80000081170a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:70
    //count num of args
    char *pstr=fmt;
ffff80000081170c:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
ffff800000811713:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:71
    char *prev=fmt;
ffff80000081171a:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
ffff800000811721:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:74

    va_list vargs;
    va_start(vargs,fmt);
ffff800000811728:	c7 85 f0 fe ff ff 08 	mov    DWORD PTR [rbp-0x110],0x8
ffff80000081172f:	00 00 00 
ffff800000811732:	c7 85 f4 fe ff ff 30 	mov    DWORD PTR [rbp-0x10c],0x30
ffff800000811739:	00 00 00 
ffff80000081173c:	48 8d 45 10          	lea    rax,[rbp+0x10]
ffff800000811740:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
ffff800000811747:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
ffff80000081174e:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:75
    pstr=fmt;
ffff800000811755:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
ffff80000081175c:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:76
    for(;*pstr!='\0';pstr++){
ffff800000811763:	e9 2a 03 00 00       	jmp    ffff800000811a92 <comprintf+0x45f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:77
        if(*pstr=='%'&&*(pstr+1)!='\0'){
ffff800000811768:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff80000081176f:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811772:	3c 25                	cmp    al,0x25
ffff800000811774:	0f 85 e5 02 00 00    	jne    ffff800000811a5f <comprintf+0x42c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:77 (discriminator 1)
ffff80000081177a:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000811781:	48 83 c0 01          	add    rax,0x1
ffff800000811785:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811788:	84 c0                	test   al,al
ffff80000081178a:	0f 84 cf 02 00 00    	je     ffff800000811a5f <comprintf+0x42c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:78
            pstr++;
ffff800000811790:	48 83 85 38 ff ff ff 	add    QWORD PTR [rbp-0xc8],0x1
ffff800000811797:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:79
            if(*pstr=='x'){
ffff800000811798:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff80000081179f:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008117a2:	3c 78                	cmp    al,0x78
ffff8000008117a4:	75 70                	jne    ffff800000811816 <comprintf+0x1e3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:80
                int v=va_arg(vargs,int);
ffff8000008117a6:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x110]
ffff8000008117ac:	83 f8 2f             	cmp    eax,0x2f
ffff8000008117af:	77 23                	ja     ffff8000008117d4 <comprintf+0x1a1>
ffff8000008117b1:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff8000008117b8:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff8000008117be:	89 d2                	mov    edx,edx
ffff8000008117c0:	48 01 d0             	add    rax,rdx
ffff8000008117c3:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff8000008117c9:	83 c2 08             	add    edx,0x8
ffff8000008117cc:	89 95 f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],edx
ffff8000008117d2:	eb 12                	jmp    ffff8000008117e6 <comprintf+0x1b3>
ffff8000008117d4:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff8000008117db:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff8000008117df:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
ffff8000008117e6:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008117e8:	89 85 24 ff ff ff    	mov    DWORD PTR [rbp-0xdc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:81
                sprint_hex(tmp,v);
ffff8000008117ee:	8b 85 24 ff ff ff    	mov    eax,DWORD PTR [rbp-0xdc]
ffff8000008117f4:	48 63 d0             	movsxd rdx,eax
ffff8000008117f7:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff8000008117fe:	48 89 d6             	mov    rsi,rdx
ffff800000811801:	48 89 c7             	mov    rdi,rax
ffff800000811804:	49 89 df             	mov    r15,rbx
ffff800000811807:	48 b8 e0 5a ef ff ff 	movabs rax,0xffffffffffef5ae0
ffff80000081180e:	ff ff ff 
ffff800000811811:	48 01 d8             	add    rax,rbx
ffff800000811814:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:82
            }if(*pstr=='l'){
ffff800000811816:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff80000081181d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811820:	3c 6c                	cmp    al,0x6c
ffff800000811822:	75 76                	jne    ffff80000081189a <comprintf+0x267>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:83
                int v=va_arg(vargs,unsigned long);
ffff800000811824:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x110]
ffff80000081182a:	83 f8 2f             	cmp    eax,0x2f
ffff80000081182d:	77 23                	ja     ffff800000811852 <comprintf+0x21f>
ffff80000081182f:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff800000811836:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff80000081183c:	89 d2                	mov    edx,edx
ffff80000081183e:	48 01 d0             	add    rax,rdx
ffff800000811841:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff800000811847:	83 c2 08             	add    edx,0x8
ffff80000081184a:	89 95 f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],edx
ffff800000811850:	eb 12                	jmp    ffff800000811864 <comprintf+0x231>
ffff800000811852:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000811859:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff80000081185d:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
ffff800000811864:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811867:	89 85 0c ff ff ff    	mov    DWORD PTR [rbp-0xf4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:84
                sprint_hex(tmp,v);
ffff80000081186d:	8b 85 0c ff ff ff    	mov    eax,DWORD PTR [rbp-0xf4]
ffff800000811873:	48 63 d0             	movsxd rdx,eax
ffff800000811876:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff80000081187d:	48 89 d6             	mov    rsi,rdx
ffff800000811880:	48 89 c7             	mov    rdi,rax
ffff800000811883:	49 89 df             	mov    r15,rbx
ffff800000811886:	48 b8 e0 5a ef ff ff 	movabs rax,0xffffffffffef5ae0
ffff80000081188d:	ff ff ff 
ffff800000811890:	48 01 d8             	add    rax,rbx
ffff800000811893:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:82
            }if(*pstr=='l'){
ffff800000811895:	e9 f0 01 00 00       	jmp    ffff800000811a8a <comprintf+0x457>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:85
            }else if(*pstr=='s'){
ffff80000081189a:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff8000008118a1:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008118a4:	3c 73                	cmp    al,0x73
ffff8000008118a6:	75 75                	jne    ffff80000081191d <comprintf+0x2ea>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:86
                char* v=va_arg(vargs,char*);
ffff8000008118a8:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x110]
ffff8000008118ae:	83 f8 2f             	cmp    eax,0x2f
ffff8000008118b1:	77 23                	ja     ffff8000008118d6 <comprintf+0x2a3>
ffff8000008118b3:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff8000008118ba:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff8000008118c0:	89 d2                	mov    edx,edx
ffff8000008118c2:	48 01 d0             	add    rax,rdx
ffff8000008118c5:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff8000008118cb:	83 c2 08             	add    edx,0x8
ffff8000008118ce:	89 95 f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],edx
ffff8000008118d4:	eb 12                	jmp    ffff8000008118e8 <comprintf+0x2b5>
ffff8000008118d6:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff8000008118dd:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff8000008118e1:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
ffff8000008118e8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008118eb:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:87
                sprintn(tmp,v);
ffff8000008118f2:	48 8b 95 10 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf0]
ffff8000008118f9:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000811900:	48 89 d6             	mov    rsi,rdx
ffff800000811903:	48 89 c7             	mov    rdi,rax
ffff800000811906:	49 89 df             	mov    r15,rbx
ffff800000811909:	48 b8 6e 5b ef ff ff 	movabs rax,0xffffffffffef5b6e
ffff800000811910:	ff ff ff 
ffff800000811913:	48 01 d8             	add    rax,rbx
ffff800000811916:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:82
            }if(*pstr=='l'){
ffff800000811918:	e9 6d 01 00 00       	jmp    ffff800000811a8a <comprintf+0x457>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:88
            }else if(*pstr=='d'){
ffff80000081191d:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000811924:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811927:	3c 64                	cmp    al,0x64
ffff800000811929:	75 76                	jne    ffff8000008119a1 <comprintf+0x36e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:89
                char* v=va_arg(vargs,char*);
ffff80000081192b:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x110]
ffff800000811931:	83 f8 2f             	cmp    eax,0x2f
ffff800000811934:	77 23                	ja     ffff800000811959 <comprintf+0x326>
ffff800000811936:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff80000081193d:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff800000811943:	89 d2                	mov    edx,edx
ffff800000811945:	48 01 d0             	add    rax,rdx
ffff800000811948:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff80000081194e:	83 c2 08             	add    edx,0x8
ffff800000811951:	89 95 f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],edx
ffff800000811957:	eb 12                	jmp    ffff80000081196b <comprintf+0x338>
ffff800000811959:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000811960:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000811964:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
ffff80000081196b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000081196e:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:90
                sprint_decimal(tmp,v);
ffff800000811975:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
ffff80000081197c:	89 c2                	mov    edx,eax
ffff80000081197e:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000811985:	89 d6                	mov    esi,edx
ffff800000811987:	48 89 c7             	mov    rdi,rax
ffff80000081198a:	49 89 df             	mov    r15,rbx
ffff80000081198d:	48 b8 25 5a ef ff ff 	movabs rax,0xffffffffffef5a25
ffff800000811994:	ff ff ff 
ffff800000811997:	48 01 d8             	add    rax,rbx
ffff80000081199a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:82
            }if(*pstr=='l'){
ffff80000081199c:	e9 e9 00 00 00       	jmp    ffff800000811a8a <comprintf+0x457>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:91
            }else if(*pstr=='c'){
ffff8000008119a1:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff8000008119a8:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008119ab:	3c 63                	cmp    al,0x63
ffff8000008119ad:	75 02                	jne    ffff8000008119b1 <comprintf+0x37e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:92
                char v=va_arg(vargs,char);
ffff8000008119af:	0f 0b                	ud2    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:94
                sprintchar(tmp,v);
            }else if(*pstr=='p') {
ffff8000008119b1:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff8000008119b8:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008119bb:	3c 70                	cmp    al,0x70
ffff8000008119bd:	75 73                	jne    ffff800000811a32 <comprintf+0x3ff>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:95
                int v=va_arg(vargs,addr_t);
ffff8000008119bf:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x110]
ffff8000008119c5:	83 f8 2f             	cmp    eax,0x2f
ffff8000008119c8:	77 23                	ja     ffff8000008119ed <comprintf+0x3ba>
ffff8000008119ca:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff8000008119d1:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff8000008119d7:	89 d2                	mov    edx,edx
ffff8000008119d9:	48 01 d0             	add    rax,rdx
ffff8000008119dc:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff8000008119e2:	83 c2 08             	add    edx,0x8
ffff8000008119e5:	89 95 f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],edx
ffff8000008119eb:	eb 12                	jmp    ffff8000008119ff <comprintf+0x3cc>
ffff8000008119ed:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff8000008119f4:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff8000008119f8:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
ffff8000008119ff:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811a02:	89 85 20 ff ff ff    	mov    DWORD PTR [rbp-0xe0],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:96
                sprint_hex(tmp,v);
ffff800000811a08:	8b 85 20 ff ff ff    	mov    eax,DWORD PTR [rbp-0xe0]
ffff800000811a0e:	48 63 d0             	movsxd rdx,eax
ffff800000811a11:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000811a18:	48 89 d6             	mov    rsi,rdx
ffff800000811a1b:	48 89 c7             	mov    rdi,rax
ffff800000811a1e:	49 89 df             	mov    r15,rbx
ffff800000811a21:	48 b8 e0 5a ef ff ff 	movabs rax,0xffffffffffef5ae0
ffff800000811a28:	ff ff ff 
ffff800000811a2b:	48 01 d8             	add    rax,rbx
ffff800000811a2e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:82
            }if(*pstr=='l'){
ffff800000811a30:	eb 58                	jmp    ffff800000811a8a <comprintf+0x457>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:98
            }else{
                    sprintchar(tmp,*pstr);
ffff800000811a32:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000811a39:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811a3c:	0f be d0             	movsx  edx,al
ffff800000811a3f:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000811a46:	89 d6                	mov    esi,edx
ffff800000811a48:	48 89 c7             	mov    rdi,rax
ffff800000811a4b:	49 89 df             	mov    r15,rbx
ffff800000811a4e:	48 b8 e6 59 ef ff ff 	movabs rax,0xffffffffffef59e6
ffff800000811a55:	ff ff ff 
ffff800000811a58:	48 01 d8             	add    rax,rbx
ffff800000811a5b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:82
            }if(*pstr=='l'){
ffff800000811a5d:	eb 2b                	jmp    ffff800000811a8a <comprintf+0x457>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:101
                }
        }else{
            sprintchar(tmp,*pstr);
ffff800000811a5f:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000811a66:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811a69:	0f be d0             	movsx  edx,al
ffff800000811a6c:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000811a73:	89 d6                	mov    esi,edx
ffff800000811a75:	48 89 c7             	mov    rdi,rax
ffff800000811a78:	49 89 df             	mov    r15,rbx
ffff800000811a7b:	48 b8 e6 59 ef ff ff 	movabs rax,0xffffffffffef59e6
ffff800000811a82:	ff ff ff 
ffff800000811a85:	48 01 d8             	add    rax,rbx
ffff800000811a88:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:76
    for(;*pstr!='\0';pstr++){
ffff800000811a8a:	48 83 85 38 ff ff ff 	add    QWORD PTR [rbp-0xc8],0x1
ffff800000811a91:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:76 (discriminator 1)
ffff800000811a92:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000811a99:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811a9c:	84 c0                	test   al,al
ffff800000811a9e:	0f 85 c4 fc ff ff    	jne    ffff800000811768 <comprintf+0x135>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:105
        }
    }
    va_end(vargs);
    com_puts(tmp,PORT_COM1);
ffff800000811aa4:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000811aab:	be f8 03 00 00       	mov    esi,0x3f8
ffff800000811ab0:	48 89 c7             	mov    rdi,rax
ffff800000811ab3:	49 89 df             	mov    r15,rbx
ffff800000811ab6:	48 b8 af 4d ef ff ff 	movabs rax,0xffffffffffef4daf
ffff800000811abd:	ff ff ff 
ffff800000811ac0:	48 01 d8             	add    rax,rbx
ffff800000811ac3:	ff d0                	call   rax
ffff800000811ac5:	eb 01                	jmp    ffff800000811ac8 <comprintf+0x495>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:65
        return;//一次性输出不了太长
ffff800000811ac7:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:106
ffff800000811ac8:	48 81 c4 10 01 00 00 	add    rsp,0x110
ffff800000811acf:	5b                   	pop    rbx
ffff800000811ad0:	41 5f                	pop    r15
ffff800000811ad2:	5d                   	pop    rbp
ffff800000811ad3:	c3                   	ret    

ffff800000811ad4 <memcpy>:
memcpy():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:5
#include "mem.h"
#include "typename.h"
static u32 mem_end;
static u32 usr_mem_base;
void memcpy(u8* dest, u8 *src,u32 size){
ffff800000811ad4:	f3 0f 1e fa          	endbr64 
ffff800000811ad8:	55                   	push   rbp
ffff800000811ad9:	48 89 e5             	mov    rbp,rsp
ffff800000811adc:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000811ae0:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff800000811ae4:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:6
    *dest=0xff;//如果页内存还没分配，这样就可以先激发缺页异常分配了，之后写数据就会完整不会少开头第一个字节。
ffff800000811ae7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811aeb:	c6 00 ff             	mov    BYTE PTR [rax],0xff
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:7
    for(int i=0;i<size;i++){
ffff800000811aee:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000811af5:	eb 1b                	jmp    ffff800000811b12 <memcpy+0x3e>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:8 (discriminator 3)
        *(dest)=*(src);
ffff800000811af7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000811afb:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff800000811afe:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811b02:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:9 (discriminator 3)
        dest++;
ffff800000811b04:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:10 (discriminator 3)
        src++;
ffff800000811b09:	48 83 45 e0 01       	add    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:7 (discriminator 3)
    for(int i=0;i<size;i++){
ffff800000811b0e:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:7 (discriminator 1)
ffff800000811b12:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000811b15:	39 45 dc             	cmp    DWORD PTR [rbp-0x24],eax
ffff800000811b18:	77 dd                	ja     ffff800000811af7 <memcpy+0x23>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:12
    }
}
ffff800000811b1a:	90                   	nop
ffff800000811b1b:	90                   	nop
ffff800000811b1c:	5d                   	pop    rbp
ffff800000811b1d:	c3                   	ret    

ffff800000811b1e <memcmp>:
memcmp():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:14
int memcmp(u8 *a,u8* b,int len)
{
ffff800000811b1e:	f3 0f 1e fa          	endbr64 
ffff800000811b22:	55                   	push   rbp
ffff800000811b23:	48 89 e5             	mov    rbp,rsp
ffff800000811b26:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000811b2a:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff800000811b2e:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:15
    for(int i=0;i<len;i++)
ffff800000811b31:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000811b38:	eb 3a                	jmp    ffff800000811b74 <memcmp+0x56>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:17
    {
        if(*a!=*b)
ffff800000811b3a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811b3e:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff800000811b41:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000811b45:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811b48:	38 c2                	cmp    dl,al
ffff800000811b4a:	74 1a                	je     ffff800000811b66 <memcmp+0x48>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:18
            return *a-*b;
ffff800000811b4c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811b50:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811b53:	0f b6 d0             	movzx  edx,al
ffff800000811b56:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000811b5a:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811b5d:	0f b6 c8             	movzx  ecx,al
ffff800000811b60:	89 d0                	mov    eax,edx
ffff800000811b62:	29 c8                	sub    eax,ecx
ffff800000811b64:	eb 1b                	jmp    ffff800000811b81 <memcmp+0x63>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:19 (discriminator 2)
        a++;
ffff800000811b66:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:20 (discriminator 2)
        b++;
ffff800000811b6b:	48 83 45 e0 01       	add    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:15 (discriminator 2)
    for(int i=0;i<len;i++)
ffff800000811b70:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:15 (discriminator 1)
ffff800000811b74:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000811b77:	3b 45 dc             	cmp    eax,DWORD PTR [rbp-0x24]
ffff800000811b7a:	7c be                	jl     ffff800000811b3a <memcmp+0x1c>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:22
    }
    return 0;
ffff800000811b7c:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:23
}
ffff800000811b81:	5d                   	pop    rbp
ffff800000811b82:	c3                   	ret    

ffff800000811b83 <memset>:
memset():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:24
void memset(u8 *buf,u8 value,u32 size){
ffff800000811b83:	f3 0f 1e fa          	endbr64 
ffff800000811b87:	55                   	push   rbp
ffff800000811b88:	48 89 e5             	mov    rbp,rsp
ffff800000811b8b:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000811b8f:	89 f0                	mov    eax,esi
ffff800000811b91:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
ffff800000811b94:	88 45 e4             	mov    BYTE PTR [rbp-0x1c],al
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:25
    for(u32 i=0;i<size;i++){
ffff800000811b97:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000811b9e:	eb 16                	jmp    ffff800000811bb6 <memset+0x33>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:26 (discriminator 3)
        *(buf++)=value;
ffff800000811ba0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811ba4:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffff800000811ba8:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff800000811bac:	0f b6 55 e4          	movzx  edx,BYTE PTR [rbp-0x1c]
ffff800000811bb0:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:25 (discriminator 3)
    for(u32 i=0;i<size;i++){
ffff800000811bb2:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:25 (discriminator 1)
ffff800000811bb6:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000811bb9:	3b 45 e0             	cmp    eax,DWORD PTR [rbp-0x20]
ffff800000811bbc:	72 e2                	jb     ffff800000811ba0 <memset+0x1d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:28
    }
}
ffff800000811bbe:	90                   	nop
ffff800000811bbf:	90                   	nop
ffff800000811bc0:	5d                   	pop    rbp
ffff800000811bc1:	c3                   	ret    

ffff800000811bc2 <get_mem_size>:
get_mem_size():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:30

u32 get_mem_size(){
ffff800000811bc2:	f3 0f 1e fa          	endbr64 
ffff800000811bc6:	55                   	push   rbp
ffff800000811bc7:	48 89 e5             	mov    rbp,rsp
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:31
    return mem_end;
ffff800000811bca:	48 b8 20 90 41 00 00 	movabs rax,0xffff800000419020
ffff800000811bd1:	80 ff ff 
ffff800000811bd4:	8b 00                	mov    eax,DWORD PTR [rax]
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:32
}
ffff800000811bd6:	5d                   	pop    rbp
ffff800000811bd7:	c3                   	ret    

ffff800000811bd8 <strcpy>:
strcpy():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:3
#include "str.h"
#include <stdarg.h>
void strcpy(unsigned char* dest, unsigned char *buf){
ffff800000811bd8:	f3 0f 1e fa          	endbr64 
ffff800000811bdc:	55                   	push   rbp
ffff800000811bdd:	48 89 e5             	mov    rbp,rsp
ffff800000811be0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000811be4:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:4
    while(*buf!='\0'){
ffff800000811be8:	eb 1d                	jmp    ffff800000811c07 <strcpy+0x2f>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:5
        *(dest++)=*(buf++);
ffff800000811bea:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff800000811bee:	48 8d 42 01          	lea    rax,[rdx+0x1]
ffff800000811bf2:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffff800000811bf6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000811bfa:	48 8d 48 01          	lea    rcx,[rax+0x1]
ffff800000811bfe:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
ffff800000811c02:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff800000811c05:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:4
    while(*buf!='\0'){
ffff800000811c07:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000811c0b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811c0e:	84 c0                	test   al,al
ffff800000811c10:	75 d8                	jne    ffff800000811bea <strcpy+0x12>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:7
    }
    *dest='\0';
ffff800000811c12:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000811c16:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:8
}
ffff800000811c19:	90                   	nop
ffff800000811c1a:	5d                   	pop    rbp
ffff800000811c1b:	c3                   	ret    

ffff800000811c1c <strtok>:
strtok():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:12
static char strtokkee[512],*strtokkeeptr=strtokkee;
static int tokptr=0;
static char retbuf[512],*retbptr=retbuf;
char* strtok(char *str,char splitter){
ffff800000811c1c:	f3 0f 1e fa          	endbr64 
ffff800000811c20:	55                   	push   rbp
ffff800000811c21:	48 89 e5             	mov    rbp,rsp
ffff800000811c24:	48 83 ec 30          	sub    rsp,0x30
ffff800000811c28:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000811c2c:	89 f0                	mov    eax,esi
ffff800000811c2e:	88 45 d4             	mov    BYTE PTR [rbp-0x2c],al
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:14
    //limit: cannot cut string longer than 512
    if(str!=(void*)0){
ffff800000811c31:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff800000811c36:	0f 84 fa 00 00 00    	je     ffff800000811d36 <strtok+0x11a>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:16
        //cut for the first time
        strcpy(strtokkee,str);
ffff800000811c3c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811c40:	48 89 c6             	mov    rsi,rax
ffff800000811c43:	48 b8 40 90 41 00 00 	movabs rax,0xffff800000419040
ffff800000811c4a:	80 ff ff 
ffff800000811c4d:	48 89 c7             	mov    rdi,rax
ffff800000811c50:	48 b8 d8 1b 81 00 00 	movabs rax,0xffff800000811bd8
ffff800000811c57:	80 ff ff 
ffff800000811c5a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:17
        char* ptr=strtokkee;
ffff800000811c5c:	48 b8 40 90 41 00 00 	movabs rax,0xffff800000419040
ffff800000811c63:	80 ff ff 
ffff800000811c66:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:18
        for(tokptr=0;strtokkee[tokptr]!=splitter&&strtokkee[tokptr]!='\0';tokptr=(tokptr+1)%512);
ffff800000811c6a:	48 b8 40 92 41 00 00 	movabs rax,0xffff800000419240
ffff800000811c71:	80 ff ff 
ffff800000811c74:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
ffff800000811c7a:	eb 2a                	jmp    ffff800000811ca6 <strtok+0x8a>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:18 (discriminator 4)
ffff800000811c7c:	48 b8 40 92 41 00 00 	movabs rax,0xffff800000419240
ffff800000811c83:	80 ff ff 
ffff800000811c86:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000811c88:	83 c0 01             	add    eax,0x1
ffff800000811c8b:	99                   	cdq    
ffff800000811c8c:	c1 ea 17             	shr    edx,0x17
ffff800000811c8f:	01 d0                	add    eax,edx
ffff800000811c91:	25 ff 01 00 00       	and    eax,0x1ff
ffff800000811c96:	29 d0                	sub    eax,edx
ffff800000811c98:	89 c2                	mov    edx,eax
ffff800000811c9a:	48 b8 40 92 41 00 00 	movabs rax,0xffff800000419240
ffff800000811ca1:	80 ff ff 
ffff800000811ca4:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:18 (discriminator 1)
ffff800000811ca6:	48 b8 40 92 41 00 00 	movabs rax,0xffff800000419240
ffff800000811cad:	80 ff ff 
ffff800000811cb0:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000811cb2:	48 ba 40 90 41 00 00 	movabs rdx,0xffff800000419040
ffff800000811cb9:	80 ff ff 
ffff800000811cbc:	48 98                	cdqe   
ffff800000811cbe:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000811cc2:	38 45 d4             	cmp    BYTE PTR [rbp-0x2c],al
ffff800000811cc5:	74 20                	je     ffff800000811ce7 <strtok+0xcb>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:18 (discriminator 3)
ffff800000811cc7:	48 b8 40 92 41 00 00 	movabs rax,0xffff800000419240
ffff800000811cce:	80 ff ff 
ffff800000811cd1:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000811cd3:	48 ba 40 90 41 00 00 	movabs rdx,0xffff800000419040
ffff800000811cda:	80 ff ff 
ffff800000811cdd:	48 98                	cdqe   
ffff800000811cdf:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000811ce3:	84 c0                	test   al,al
ffff800000811ce5:	75 95                	jne    ffff800000811c7c <strtok+0x60>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:19
        strtokkee[tokptr]='\0';
ffff800000811ce7:	48 b8 40 92 41 00 00 	movabs rax,0xffff800000419240
ffff800000811cee:	80 ff ff 
ffff800000811cf1:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000811cf3:	48 ba 40 90 41 00 00 	movabs rdx,0xffff800000419040
ffff800000811cfa:	80 ff ff 
ffff800000811cfd:	48 98                	cdqe   
ffff800000811cff:	c6 04 02 00          	mov    BYTE PTR [rdx+rax*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:20
        tokptr=(tokptr+1)%512;
ffff800000811d03:	48 b8 40 92 41 00 00 	movabs rax,0xffff800000419240
ffff800000811d0a:	80 ff ff 
ffff800000811d0d:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000811d0f:	83 c0 01             	add    eax,0x1
ffff800000811d12:	99                   	cdq    
ffff800000811d13:	c1 ea 17             	shr    edx,0x17
ffff800000811d16:	01 d0                	add    eax,edx
ffff800000811d18:	25 ff 01 00 00       	and    eax,0x1ff
ffff800000811d1d:	29 d0                	sub    eax,edx
ffff800000811d1f:	89 c2                	mov    edx,eax
ffff800000811d21:	48 b8 40 92 41 00 00 	movabs rax,0xffff800000419240
ffff800000811d28:	80 ff ff 
ffff800000811d2b:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:21
        return ptr;
ffff800000811d2d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811d31:	e9 ee 00 00 00       	jmp    ffff800000811e24 <strtok+0x208>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:24
    }
    //go on cutting
    int c=0;
ffff800000811d36:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:25
    char* ptr=strtokkee+tokptr;
ffff800000811d3d:	48 b8 40 92 41 00 00 	movabs rax,0xffff800000419240
ffff800000811d44:	80 ff ff 
ffff800000811d47:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000811d49:	48 98                	cdqe   
ffff800000811d4b:	48 ba 40 90 41 00 00 	movabs rdx,0xffff800000419040
ffff800000811d52:	80 ff ff 
ffff800000811d55:	48 01 d0             	add    rax,rdx
ffff800000811d58:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:26
    for(;strtokkee[tokptr]!=splitter&&strtokkee[tokptr]!='\0';tokptr=(tokptr+1)%512,c++);
ffff800000811d5c:	eb 2e                	jmp    ffff800000811d8c <strtok+0x170>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:26 (discriminator 3)
ffff800000811d5e:	48 b8 40 92 41 00 00 	movabs rax,0xffff800000419240
ffff800000811d65:	80 ff ff 
ffff800000811d68:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000811d6a:	83 c0 01             	add    eax,0x1
ffff800000811d6d:	99                   	cdq    
ffff800000811d6e:	c1 ea 17             	shr    edx,0x17
ffff800000811d71:	01 d0                	add    eax,edx
ffff800000811d73:	25 ff 01 00 00       	and    eax,0x1ff
ffff800000811d78:	29 d0                	sub    eax,edx
ffff800000811d7a:	89 c2                	mov    edx,eax
ffff800000811d7c:	48 b8 40 92 41 00 00 	movabs rax,0xffff800000419240
ffff800000811d83:	80 ff ff 
ffff800000811d86:	89 10                	mov    DWORD PTR [rax],edx
ffff800000811d88:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:26 (discriminator 1)
ffff800000811d8c:	48 b8 40 92 41 00 00 	movabs rax,0xffff800000419240
ffff800000811d93:	80 ff ff 
ffff800000811d96:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000811d98:	48 ba 40 90 41 00 00 	movabs rdx,0xffff800000419040
ffff800000811d9f:	80 ff ff 
ffff800000811da2:	48 98                	cdqe   
ffff800000811da4:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000811da8:	38 45 d4             	cmp    BYTE PTR [rbp-0x2c],al
ffff800000811dab:	74 20                	je     ffff800000811dcd <strtok+0x1b1>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:26 (discriminator 2)
ffff800000811dad:	48 b8 40 92 41 00 00 	movabs rax,0xffff800000419240
ffff800000811db4:	80 ff ff 
ffff800000811db7:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000811db9:	48 ba 40 90 41 00 00 	movabs rdx,0xffff800000419040
ffff800000811dc0:	80 ff ff 
ffff800000811dc3:	48 98                	cdqe   
ffff800000811dc5:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000811dc9:	84 c0                	test   al,al
ffff800000811dcb:	75 91                	jne    ffff800000811d5e <strtok+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:27
    strtokkee[tokptr]='\0';
ffff800000811dcd:	48 b8 40 92 41 00 00 	movabs rax,0xffff800000419240
ffff800000811dd4:	80 ff ff 
ffff800000811dd7:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000811dd9:	48 ba 40 90 41 00 00 	movabs rdx,0xffff800000419040
ffff800000811de0:	80 ff ff 
ffff800000811de3:	48 98                	cdqe   
ffff800000811de5:	c6 04 02 00          	mov    BYTE PTR [rdx+rax*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:28
    tokptr=(tokptr+1)%512;
ffff800000811de9:	48 b8 40 92 41 00 00 	movabs rax,0xffff800000419240
ffff800000811df0:	80 ff ff 
ffff800000811df3:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000811df5:	83 c0 01             	add    eax,0x1
ffff800000811df8:	99                   	cdq    
ffff800000811df9:	c1 ea 17             	shr    edx,0x17
ffff800000811dfc:	01 d0                	add    eax,edx
ffff800000811dfe:	25 ff 01 00 00       	and    eax,0x1ff
ffff800000811e03:	29 d0                	sub    eax,edx
ffff800000811e05:	89 c2                	mov    edx,eax
ffff800000811e07:	48 b8 40 92 41 00 00 	movabs rax,0xffff800000419240
ffff800000811e0e:	80 ff ff 
ffff800000811e11:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:29
    if(c)
ffff800000811e13:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
ffff800000811e17:	74 06                	je     ffff800000811e1f <strtok+0x203>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:30
        return ptr;
ffff800000811e19:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000811e1d:	eb 05                	jmp    ffff800000811e24 <strtok+0x208>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:32
    else
        return (void*)0;
ffff800000811e1f:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:33
}
ffff800000811e24:	c9                   	leave  
ffff800000811e25:	c3                   	ret    

ffff800000811e26 <strcmp>:
strcmp():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:35
int strcmp(char *s1,char *s2)
{
ffff800000811e26:	f3 0f 1e fa          	endbr64 
ffff800000811e2a:	55                   	push   rbp
ffff800000811e2b:	48 89 e5             	mov    rbp,rsp
ffff800000811e2e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000811e32:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:36
	while(*s1!='\0'&&*s2!='\0'){
ffff800000811e36:	eb 3c                	jmp    ffff800000811e74 <strcmp+0x4e>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:37
		if(*s1>*s2)
ffff800000811e38:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000811e3c:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff800000811e3f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000811e43:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811e46:	38 c2                	cmp    dl,al
ffff800000811e48:	7e 07                	jle    ffff800000811e51 <strcmp+0x2b>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:38
			return 1;
ffff800000811e4a:	b8 01 00 00 00       	mov    eax,0x1
ffff800000811e4f:	eb 52                	jmp    ffff800000811ea3 <strcmp+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:39
		else if(*s1<*s2)
ffff800000811e51:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000811e55:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff800000811e58:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000811e5c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811e5f:	38 c2                	cmp    dl,al
ffff800000811e61:	7d 07                	jge    ffff800000811e6a <strcmp+0x44>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:40
			return -1;
ffff800000811e63:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000811e68:	eb 39                	jmp    ffff800000811ea3 <strcmp+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:41
		s1++;
ffff800000811e6a:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:42
		s2++;
ffff800000811e6f:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:36
	while(*s1!='\0'&&*s2!='\0'){
ffff800000811e74:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000811e78:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811e7b:	84 c0                	test   al,al
ffff800000811e7d:	74 0b                	je     ffff800000811e8a <strcmp+0x64>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:36 (discriminator 1)
ffff800000811e7f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000811e83:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811e86:	84 c0                	test   al,al
ffff800000811e88:	75 ae                	jne    ffff800000811e38 <strcmp+0x12>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:44
	}
	if(*s1==*s2)
ffff800000811e8a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000811e8e:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff800000811e91:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000811e95:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811e98:	38 c2                	cmp    dl,al
ffff800000811e9a:	75 07                	jne    ffff800000811ea3 <strcmp+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:45
		return 0;
ffff800000811e9c:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811ea1:	eb 00                	jmp    ffff800000811ea3 <strcmp+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:46
}
ffff800000811ea3:	5d                   	pop    rbp
ffff800000811ea4:	c3                   	ret    

ffff800000811ea5 <strlen>:
strlen():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:49

int strlen(char *str)
{
ffff800000811ea5:	f3 0f 1e fa          	endbr64 
ffff800000811ea9:	55                   	push   rbp
ffff800000811eaa:	48 89 e5             	mov    rbp,rsp
ffff800000811ead:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:50
    int l=0;
ffff800000811eb1:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:51
    for(;*str!='\0';str++,l++);
ffff800000811eb8:	eb 09                	jmp    ffff800000811ec3 <strlen+0x1e>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:51 (discriminator 2)
ffff800000811eba:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
ffff800000811ebf:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:51 (discriminator 1)
ffff800000811ec3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811ec7:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811eca:	84 c0                	test   al,al
ffff800000811ecc:	75 ec                	jne    ffff800000811eba <strlen+0x15>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:52
    return l;
ffff800000811ece:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:53
}
ffff800000811ed1:	5d                   	pop    rbp
ffff800000811ed2:	c3                   	ret    

ffff800000811ed3 <sprintf>:
sprintf():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:56

void sprintf(char *dist, char *str,...)
{
ffff800000811ed3:	f3 0f 1e fa          	endbr64 
ffff800000811ed7:	55                   	push   rbp
ffff800000811ed8:	48 89 e5             	mov    rbp,rsp
ffff800000811edb:	48 81 ec 10 01 00 00 	sub    rsp,0x110
ffff800000811ee2:	48 89 bd f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdi
ffff800000811ee9:	48 89 b5 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rsi
ffff800000811ef0:	48 89 95 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdx
ffff800000811ef7:	48 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rcx
ffff800000811efe:	4c 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],r8
ffff800000811f05:	4c 89 8d 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],r9
ffff800000811f0c:	84 c0                	test   al,al
ffff800000811f0e:	74 20                	je     ffff800000811f30 <sprintf+0x5d>
ffff800000811f10:	0f 29 45 80          	movaps XMMWORD PTR [rbp-0x80],xmm0
ffff800000811f14:	0f 29 4d 90          	movaps XMMWORD PTR [rbp-0x70],xmm1
ffff800000811f18:	0f 29 55 a0          	movaps XMMWORD PTR [rbp-0x60],xmm2
ffff800000811f1c:	0f 29 5d b0          	movaps XMMWORD PTR [rbp-0x50],xmm3
ffff800000811f20:	0f 29 65 c0          	movaps XMMWORD PTR [rbp-0x40],xmm4
ffff800000811f24:	0f 29 6d d0          	movaps XMMWORD PTR [rbp-0x30],xmm5
ffff800000811f28:	0f 29 75 e0          	movaps XMMWORD PTR [rbp-0x20],xmm6
ffff800000811f2c:	0f 29 7d f0          	movaps XMMWORD PTR [rbp-0x10],xmm7
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:59

    //count num of args
    char *pstr=str;
ffff800000811f30:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff800000811f37:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:60
    char *prev=str;
ffff800000811f3e:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff800000811f45:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:61
    int argnum=0;
ffff800000811f4c:	c7 85 3c ff ff ff 00 	mov    DWORD PTR [rbp-0xc4],0x0
ffff800000811f53:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:62
    while (*pstr!='\n')
ffff800000811f56:	eb 39                	jmp    ffff800000811f91 <sprintf+0xbe>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:64
    {
        if(*pstr=='%'&&*prev!='%')
ffff800000811f58:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000811f5f:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811f62:	3c 25                	cmp    al,0x25
ffff800000811f64:	75 15                	jne    ffff800000811f7b <sprintf+0xa8>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:64 (discriminator 1)
ffff800000811f66:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
ffff800000811f6d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811f70:	3c 25                	cmp    al,0x25
ffff800000811f72:	74 07                	je     ffff800000811f7b <sprintf+0xa8>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:65
            argnum++;
ffff800000811f74:	83 85 3c ff ff ff 01 	add    DWORD PTR [rbp-0xc4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:66
        prev=pstr;
ffff800000811f7b:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000811f82:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:67
        pstr++;
ffff800000811f89:	48 83 85 48 ff ff ff 	add    QWORD PTR [rbp-0xb8],0x1
ffff800000811f90:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:62
    while (*pstr!='\n')
ffff800000811f91:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000811f98:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811f9b:	3c 0a                	cmp    al,0xa
ffff800000811f9d:	75 b9                	jne    ffff800000811f58 <sprintf+0x85>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:71
    }

    va_list vargs;
    va_start(vargs,str);
ffff800000811f9f:	c7 85 08 ff ff ff 10 	mov    DWORD PTR [rbp-0xf8],0x10
ffff800000811fa6:	00 00 00 
ffff800000811fa9:	c7 85 0c ff ff ff 30 	mov    DWORD PTR [rbp-0xf4],0x30
ffff800000811fb0:	00 00 00 
ffff800000811fb3:	48 8d 45 10          	lea    rax,[rbp+0x10]
ffff800000811fb7:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
ffff800000811fbe:	48 8d 85 50 ff ff ff 	lea    rax,[rbp-0xb0]
ffff800000811fc5:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:72
    pstr=str;
ffff800000811fcc:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff800000811fd3:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:73
    for(;*pstr!='\0';pstr++){
ffff800000811fda:	e9 09 02 00 00       	jmp    ffff8000008121e8 <sprintf+0x315>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:74
        if(*pstr=='%'&&*(pstr+1)!='\0'){
ffff800000811fdf:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000811fe6:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811fe9:	3c 25                	cmp    al,0x25
ffff800000811feb:	0f 85 ca 01 00 00    	jne    ffff8000008121bb <sprintf+0x2e8>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:74 (discriminator 1)
ffff800000811ff1:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000811ff8:	48 83 c0 01          	add    rax,0x1
ffff800000811ffc:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811fff:	84 c0                	test   al,al
ffff800000812001:	0f 84 b4 01 00 00    	je     ffff8000008121bb <sprintf+0x2e8>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:75
            pstr++;
ffff800000812007:	48 83 85 48 ff ff ff 	add    QWORD PTR [rbp-0xb8],0x1
ffff80000081200e:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:76
            if(*pstr=='x'){
ffff80000081200f:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000812016:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812019:	3c 78                	cmp    al,0x78
ffff80000081201b:	75 6f                	jne    ffff80000081208c <sprintf+0x1b9>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:77
                int v=va_arg(vargs,int);
ffff80000081201d:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
ffff800000812023:	83 f8 2f             	cmp    eax,0x2f
ffff800000812026:	77 23                	ja     ffff80000081204b <sprintf+0x178>
ffff800000812028:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
ffff80000081202f:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff800000812035:	89 d2                	mov    edx,edx
ffff800000812037:	48 01 d0             	add    rax,rdx
ffff80000081203a:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff800000812040:	83 c2 08             	add    edx,0x8
ffff800000812043:	89 95 08 ff ff ff    	mov    DWORD PTR [rbp-0xf8],edx
ffff800000812049:	eb 12                	jmp    ffff80000081205d <sprintf+0x18a>
ffff80000081204b:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff800000812052:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000812056:	48 89 95 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rdx
ffff80000081205d:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000081205f:	89 85 24 ff ff ff    	mov    DWORD PTR [rbp-0xdc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:78
                sprint_hex(dist,v);
ffff800000812065:	8b 85 24 ff ff ff    	mov    eax,DWORD PTR [rbp-0xdc]
ffff80000081206b:	48 63 d0             	movsxd rdx,eax
ffff80000081206e:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000812075:	48 89 d6             	mov    rsi,rdx
ffff800000812078:	48 89 c7             	mov    rdi,rax
ffff80000081207b:	48 b8 f8 22 81 00 00 	movabs rax,0xffff8000008122f8
ffff800000812082:	80 ff ff 
ffff800000812085:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:76
            if(*pstr=='x'){
ffff800000812087:	e9 54 01 00 00       	jmp    ffff8000008121e0 <sprintf+0x30d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:79
            }else if(*pstr=='s'){
ffff80000081208c:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000812093:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812096:	3c 73                	cmp    al,0x73
ffff800000812098:	75 6f                	jne    ffff800000812109 <sprintf+0x236>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:80
                char* v=va_arg(vargs,char*);
ffff80000081209a:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
ffff8000008120a0:	83 f8 2f             	cmp    eax,0x2f
ffff8000008120a3:	77 23                	ja     ffff8000008120c8 <sprintf+0x1f5>
ffff8000008120a5:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
ffff8000008120ac:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff8000008120b2:	89 d2                	mov    edx,edx
ffff8000008120b4:	48 01 d0             	add    rax,rdx
ffff8000008120b7:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff8000008120bd:	83 c2 08             	add    edx,0x8
ffff8000008120c0:	89 95 08 ff ff ff    	mov    DWORD PTR [rbp-0xf8],edx
ffff8000008120c6:	eb 12                	jmp    ffff8000008120da <sprintf+0x207>
ffff8000008120c8:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff8000008120cf:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff8000008120d3:	48 89 95 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rdx
ffff8000008120da:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008120dd:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:81
                sprintn(dist,v);
ffff8000008120e4:	48 8b 95 28 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd8]
ffff8000008120eb:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff8000008120f2:	48 89 d6             	mov    rsi,rdx
ffff8000008120f5:	48 89 c7             	mov    rdi,rax
ffff8000008120f8:	48 b8 86 23 81 00 00 	movabs rax,0xffff800000812386
ffff8000008120ff:	80 ff ff 
ffff800000812102:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:76
            if(*pstr=='x'){
ffff800000812104:	e9 d7 00 00 00       	jmp    ffff8000008121e0 <sprintf+0x30d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:82
            }else if(*pstr=='d'){
ffff800000812109:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000812110:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812113:	3c 64                	cmp    al,0x64
ffff800000812115:	75 6d                	jne    ffff800000812184 <sprintf+0x2b1>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:83
                char* v=va_arg(vargs,char*);
ffff800000812117:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
ffff80000081211d:	83 f8 2f             	cmp    eax,0x2f
ffff800000812120:	77 23                	ja     ffff800000812145 <sprintf+0x272>
ffff800000812122:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
ffff800000812129:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff80000081212f:	89 d2                	mov    edx,edx
ffff800000812131:	48 01 d0             	add    rax,rdx
ffff800000812134:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff80000081213a:	83 c2 08             	add    edx,0x8
ffff80000081213d:	89 95 08 ff ff ff    	mov    DWORD PTR [rbp-0xf8],edx
ffff800000812143:	eb 12                	jmp    ffff800000812157 <sprintf+0x284>
ffff800000812145:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff80000081214c:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000812150:	48 89 95 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rdx
ffff800000812157:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000081215a:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:84
                sprint_decimal(dist,v);
ffff800000812161:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000812168:	89 c2                	mov    edx,eax
ffff80000081216a:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000812171:	89 d6                	mov    esi,edx
ffff800000812173:	48 89 c7             	mov    rdi,rax
ffff800000812176:	48 b8 3d 22 81 00 00 	movabs rax,0xffff80000081223d
ffff80000081217d:	80 ff ff 
ffff800000812180:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:76
            if(*pstr=='x'){
ffff800000812182:	eb 5c                	jmp    ffff8000008121e0 <sprintf+0x30d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:85
            }else if(*pstr=='c'){
ffff800000812184:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff80000081218b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081218e:	3c 63                	cmp    al,0x63
ffff800000812190:	75 02                	jne    ffff800000812194 <sprintf+0x2c1>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:86
                char v=va_arg(vargs,char);
ffff800000812192:	0f 0b                	ud2    
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:89
                sprintchar(dist,v);
            }else{
                sprintchar(dist,*pstr);
ffff800000812194:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff80000081219b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081219e:	0f be d0             	movsx  edx,al
ffff8000008121a1:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff8000008121a8:	89 d6                	mov    esi,edx
ffff8000008121aa:	48 89 c7             	mov    rdi,rax
ffff8000008121ad:	48 b8 fe 21 81 00 00 	movabs rax,0xffff8000008121fe
ffff8000008121b4:	80 ff ff 
ffff8000008121b7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:76
            if(*pstr=='x'){
ffff8000008121b9:	eb 25                	jmp    ffff8000008121e0 <sprintf+0x30d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:92
            }
        }else{
            sprintchar(dist,*pstr);
ffff8000008121bb:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff8000008121c2:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008121c5:	0f be d0             	movsx  edx,al
ffff8000008121c8:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff8000008121cf:	89 d6                	mov    esi,edx
ffff8000008121d1:	48 89 c7             	mov    rdi,rax
ffff8000008121d4:	48 b8 fe 21 81 00 00 	movabs rax,0xffff8000008121fe
ffff8000008121db:	80 ff ff 
ffff8000008121de:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:73
    for(;*pstr!='\0';pstr++){
ffff8000008121e0:	48 83 85 48 ff ff ff 	add    QWORD PTR [rbp-0xb8],0x1
ffff8000008121e7:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:73 (discriminator 1)
ffff8000008121e8:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff8000008121ef:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008121f2:	84 c0                	test   al,al
ffff8000008121f4:	0f 85 e5 fd ff ff    	jne    ffff800000811fdf <sprintf+0x10c>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:96
        }
    }
    va_end(vargs);
}
ffff8000008121fa:	90                   	nop
ffff8000008121fb:	90                   	nop
ffff8000008121fc:	c9                   	leave  
ffff8000008121fd:	c3                   	ret    

ffff8000008121fe <sprintchar>:
sprintchar():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:98
void sprintchar(char *dist,char c)
{
ffff8000008121fe:	f3 0f 1e fa          	endbr64 
ffff800000812202:	55                   	push   rbp
ffff800000812203:	48 89 e5             	mov    rbp,rsp
ffff800000812206:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000081220a:	89 f0                	mov    eax,esi
ffff80000081220c:	88 45 f4             	mov    BYTE PTR [rbp-0xc],al
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:99
    while(*dist!='\0')
ffff80000081220f:	eb 05                	jmp    ffff800000812216 <sprintchar+0x18>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:100
        dist++;
ffff800000812211:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:99
    while(*dist!='\0')
ffff800000812216:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000081221a:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081221d:	84 c0                	test   al,al
ffff80000081221f:	75 f0                	jne    ffff800000812211 <sprintchar+0x13>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:101
    *dist++=c;
ffff800000812221:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000812225:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffff800000812229:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffff80000081222d:	0f b6 55 f4          	movzx  edx,BYTE PTR [rbp-0xc]
ffff800000812231:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:102
    *dist='\0';
ffff800000812233:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000812237:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:103
}
ffff80000081223a:	90                   	nop
ffff80000081223b:	5d                   	pop    rbp
ffff80000081223c:	c3                   	ret    

ffff80000081223d <sprint_decimal>:
sprint_decimal():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:105
void sprint_decimal(char *dist,int c)
{
ffff80000081223d:	f3 0f 1e fa          	endbr64 
ffff800000812241:	55                   	push   rbp
ffff800000812242:	48 89 e5             	mov    rbp,rsp
ffff800000812245:	48 83 ec 30          	sub    rsp,0x30
ffff800000812249:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff80000081224d:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:107
    unsigned char st[22];
    int p=0;
ffff800000812250:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:108
    while(p<sizeof(unsigned long)*2){
ffff800000812257:	eb 65                	jmp    ffff8000008122be <sprint_decimal+0x81>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:109
        unsigned char a=c%10+'0';
ffff800000812259:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff80000081225c:	48 63 c2             	movsxd rax,edx
ffff80000081225f:	48 69 c0 67 66 66 66 	imul   rax,rax,0x66666667
ffff800000812266:	48 c1 e8 20          	shr    rax,0x20
ffff80000081226a:	c1 f8 02             	sar    eax,0x2
ffff80000081226d:	89 d6                	mov    esi,edx
ffff80000081226f:	c1 fe 1f             	sar    esi,0x1f
ffff800000812272:	29 f0                	sub    eax,esi
ffff800000812274:	89 c1                	mov    ecx,eax
ffff800000812276:	89 c8                	mov    eax,ecx
ffff800000812278:	c1 e0 02             	shl    eax,0x2
ffff80000081227b:	01 c8                	add    eax,ecx
ffff80000081227d:	01 c0                	add    eax,eax
ffff80000081227f:	89 d1                	mov    ecx,edx
ffff800000812281:	29 c1                	sub    ecx,eax
ffff800000812283:	89 c8                	mov    eax,ecx
ffff800000812285:	83 c0 30             	add    eax,0x30
ffff800000812288:	88 45 fb             	mov    BYTE PTR [rbp-0x5],al
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:110
        st[p++]=a;
ffff80000081228b:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000081228e:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000812291:	89 55 fc             	mov    DWORD PTR [rbp-0x4],edx
ffff800000812294:	48 98                	cdqe   
ffff800000812296:	0f b6 55 fb          	movzx  edx,BYTE PTR [rbp-0x5]
ffff80000081229a:	88 54 05 e0          	mov    BYTE PTR [rbp+rax*1-0x20],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:111
        c/=10;
ffff80000081229e:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff8000008122a1:	48 63 d0             	movsxd rdx,eax
ffff8000008122a4:	48 69 d2 67 66 66 66 	imul   rdx,rdx,0x66666667
ffff8000008122ab:	48 c1 ea 20          	shr    rdx,0x20
ffff8000008122af:	c1 fa 02             	sar    edx,0x2
ffff8000008122b2:	c1 f8 1f             	sar    eax,0x1f
ffff8000008122b5:	89 c1                	mov    ecx,eax
ffff8000008122b7:	89 d0                	mov    eax,edx
ffff8000008122b9:	29 c8                	sub    eax,ecx
ffff8000008122bb:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:108
    while(p<sizeof(unsigned long)*2){
ffff8000008122be:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008122c1:	83 f8 0f             	cmp    eax,0xf
ffff8000008122c4:	76 93                	jbe    ffff800000812259 <sprint_decimal+0x1c>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:113
    }
    while(p>0)
ffff8000008122c6:	eb 26                	jmp    ffff8000008122ee <sprint_decimal+0xb1>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:115
    {
        sprintchar(dist,st[--p]);
ffff8000008122c8:	83 6d fc 01          	sub    DWORD PTR [rbp-0x4],0x1
ffff8000008122cc:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008122cf:	48 98                	cdqe   
ffff8000008122d1:	0f b6 44 05 e0       	movzx  eax,BYTE PTR [rbp+rax*1-0x20]
ffff8000008122d6:	0f be d0             	movsx  edx,al
ffff8000008122d9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008122dd:	89 d6                	mov    esi,edx
ffff8000008122df:	48 89 c7             	mov    rdi,rax
ffff8000008122e2:	48 b8 fe 21 81 00 00 	movabs rax,0xffff8000008121fe
ffff8000008122e9:	80 ff ff 
ffff8000008122ec:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:113
    while(p>0)
ffff8000008122ee:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
ffff8000008122f2:	7f d4                	jg     ffff8000008122c8 <sprint_decimal+0x8b>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:117
    }
}
ffff8000008122f4:	90                   	nop
ffff8000008122f5:	90                   	nop
ffff8000008122f6:	c9                   	leave  
ffff8000008122f7:	c3                   	ret    

ffff8000008122f8 <sprint_hex>:
sprint_hex():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:119
void sprint_hex(char *dist,unsigned long c)
{
ffff8000008122f8:	f3 0f 1e fa          	endbr64 
ffff8000008122fc:	55                   	push   rbp
ffff8000008122fd:	48 89 e5             	mov    rbp,rsp
ffff800000812300:	48 83 ec 30          	sub    rsp,0x30
ffff800000812304:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000812308:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:121
    unsigned char st[22];
    int p=0;
ffff80000081230c:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:122
    while(p<22){
ffff800000812313:	eb 39                	jmp    ffff80000081234e <sprint_hex+0x56>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:123
        unsigned char a=c%16;
ffff800000812315:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000812319:	83 e0 0f             	and    eax,0xf
ffff80000081231c:	88 45 fb             	mov    BYTE PTR [rbp-0x5],al
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:124
        if(a>9)a+='a'-10;
ffff80000081231f:	80 7d fb 09          	cmp    BYTE PTR [rbp-0x5],0x9
ffff800000812323:	76 06                	jbe    ffff80000081232b <sprint_hex+0x33>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:124 (discriminator 1)
ffff800000812325:	80 45 fb 57          	add    BYTE PTR [rbp-0x5],0x57
ffff800000812329:	eb 04                	jmp    ffff80000081232f <sprint_hex+0x37>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:125
        else a+='0';
ffff80000081232b:	80 45 fb 30          	add    BYTE PTR [rbp-0x5],0x30
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:126
        st[p++]=a;
ffff80000081232f:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000812332:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000812335:	89 55 fc             	mov    DWORD PTR [rbp-0x4],edx
ffff800000812338:	48 98                	cdqe   
ffff80000081233a:	0f b6 55 fb          	movzx  edx,BYTE PTR [rbp-0x5]
ffff80000081233e:	88 54 05 e0          	mov    BYTE PTR [rbp+rax*1-0x20],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:127
        c/=16;
ffff800000812342:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000812346:	48 c1 e8 04          	shr    rax,0x4
ffff80000081234a:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:122
    while(p<22){
ffff80000081234e:	83 7d fc 15          	cmp    DWORD PTR [rbp-0x4],0x15
ffff800000812352:	7e c1                	jle    ffff800000812315 <sprint_hex+0x1d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:129
    }
    while(p>0)
ffff800000812354:	eb 26                	jmp    ffff80000081237c <sprint_hex+0x84>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:131
    {
        sprintchar(dist,st[--p]);
ffff800000812356:	83 6d fc 01          	sub    DWORD PTR [rbp-0x4],0x1
ffff80000081235a:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000081235d:	48 98                	cdqe   
ffff80000081235f:	0f b6 44 05 e0       	movzx  eax,BYTE PTR [rbp+rax*1-0x20]
ffff800000812364:	0f be d0             	movsx  edx,al
ffff800000812367:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081236b:	89 d6                	mov    esi,edx
ffff80000081236d:	48 89 c7             	mov    rdi,rax
ffff800000812370:	48 b8 fe 21 81 00 00 	movabs rax,0xffff8000008121fe
ffff800000812377:	80 ff ff 
ffff80000081237a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:129
    while(p>0)
ffff80000081237c:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
ffff800000812380:	7f d4                	jg     ffff800000812356 <sprint_hex+0x5e>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:133
    }
}
ffff800000812382:	90                   	nop
ffff800000812383:	90                   	nop
ffff800000812384:	c9                   	leave  
ffff800000812385:	c3                   	ret    

ffff800000812386 <sprintn>:
sprintn():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:135
void sprintn(char *dist,char *str)
{
ffff800000812386:	f3 0f 1e fa          	endbr64 
ffff80000081238a:	55                   	push   rbp
ffff80000081238b:	48 89 e5             	mov    rbp,rsp
ffff80000081238e:	48 83 ec 10          	sub    rsp,0x10
ffff800000812392:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000812396:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:136
    while(*str!='\0')
ffff80000081239a:	eb 27                	jmp    ffff8000008123c3 <sprintn+0x3d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:138
    {
        sprintchar(dist,*str++);
ffff80000081239c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008123a0:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffff8000008123a4:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
ffff8000008123a8:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008123ab:	0f be d0             	movsx  edx,al
ffff8000008123ae:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008123b2:	89 d6                	mov    esi,edx
ffff8000008123b4:	48 89 c7             	mov    rdi,rax
ffff8000008123b7:	48 b8 fe 21 81 00 00 	movabs rax,0xffff8000008121fe
ffff8000008123be:	80 ff ff 
ffff8000008123c1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:136
    while(*str!='\0')
ffff8000008123c3:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008123c7:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008123ca:	84 c0                	test   al,al
ffff8000008123cc:	75 ce                	jne    ffff80000081239c <sprintn+0x16>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:140
    }
ffff8000008123ce:	90                   	nop
ffff8000008123cf:	90                   	nop
ffff8000008123d0:	c9                   	leave  
ffff8000008123d1:	c3                   	ret    
ffff8000008123d2:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffff8000008123d9:	00 00 00 
ffff8000008123dc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

ffff8000008123e0 <create_zero>:
create_zero():
ffff8000008123e0:	e8 75 27 ff ff       	call   ffff800000804b5a <req_proc>
ffff8000008123e5:	83 f8 ff             	cmp    eax,0xffffffff
ffff8000008123e8:	74 0c                	je     ffff8000008123f6 <create_zero.retu>
ffff8000008123ea:	e8 bc 28 ff ff       	call   ffff800000804cab <set_proc>
ffff8000008123ef:	67 8b 04 24          	mov    eax,DWORD PTR [esp]
ffff8000008123f3:	83 c4 40             	add    esp,0x40

ffff8000008123f6 <create_zero.retu>:
create_zero.retu():
ffff8000008123f6:	c3                   	ret    

ffff8000008123f7 <switch_proc_asm>:
save_context():
ffff8000008123f7:	67 8b 44 24 24       	mov    eax,DWORD PTR [esp+0x24]
ffff8000008123fc:	83 c0 44             	add    eax,0x44
ffff8000008123ff:	b9 08 00 00 00       	mov    ecx,0x8
ffff800000812404:	89 e7                	mov    edi,esp

ffff800000812406 <save_context.loops>:
save_context.loops():
ffff800000812406:	67 8b 17             	mov    edx,DWORD PTR [edi]
ffff800000812409:	67 89 10             	mov    DWORD PTR [eax],edx
ffff80000081240c:	83 c7 04             	add    edi,0x4
ffff80000081240f:	83 e8 04             	sub    eax,0x4
ffff800000812412:	e2 f2                	loop   ffff800000812406 <save_context.loops>
ffff800000812414:	5b                   	pop    rbx
ffff800000812415:	67 8b 44 24 04       	mov    eax,DWORD PTR [esp+0x4]
ffff80000081241a:	67 89 58 24          	mov    DWORD PTR [eax+0x24],ebx
ffff80000081241e:	67 48 8b 1c 24       	mov    rbx,QWORD PTR [esp]
ffff800000812423:	67 89 58 20          	mov    DWORD PTR [eax+0x20],ebx
ffff800000812427:	c3                   	ret    

ffff800000812428 <desc>:
	...

ffff800000812430 <ret_sys_call>:
ret_sys_call():
ffff800000812430:	58                   	pop    rax
ffff800000812431:	8e d8                	mov    ds,eax
ffff800000812433:	58                   	pop    rax
ffff800000812434:	8e c0                	mov    es,eax
ffff800000812436:	41 5f                	pop    r15
ffff800000812438:	41 5e                	pop    r14
ffff80000081243a:	41 5d                	pop    r13
ffff80000081243c:	41 5c                	pop    r12
ffff80000081243e:	41 5b                	pop    r11
ffff800000812440:	41 5a                	pop    r10
ffff800000812442:	41 59                	pop    r9
ffff800000812444:	41 58                	pop    r8
ffff800000812446:	5e                   	pop    rsi
ffff800000812447:	5f                   	pop    rdi
ffff800000812448:	5a                   	pop    rdx
ffff800000812449:	59                   	pop    rcx
ffff80000081244a:	5b                   	pop    rbx
ffff80000081244b:	58                   	pop    rax

ffff80000081244c <tmp>:
tmp():
ffff80000081244c:	48 0f 07             	sysretq 

ffff80000081244f <ret_normal_proc>:
ret_normal_proc():
ffff80000081244f:	58                   	pop    rax
ffff800000812450:	8e d8                	mov    ds,eax
ffff800000812452:	58                   	pop    rax
ffff800000812453:	8e c0                	mov    es,eax
ffff800000812455:	41 5f                	pop    r15
ffff800000812457:	41 5e                	pop    r14
ffff800000812459:	41 5d                	pop    r13
ffff80000081245b:	41 5c                	pop    r12
ffff80000081245d:	41 5b                	pop    r11
ffff80000081245f:	41 5a                	pop    r10
ffff800000812461:	41 59                	pop    r9
ffff800000812463:	41 58                	pop    r8
ffff800000812465:	5e                   	pop    rsi
ffff800000812466:	5f                   	pop    rdi
ffff800000812467:	5a                   	pop    rdx
ffff800000812468:	59                   	pop    rcx
ffff800000812469:	5b                   	pop    rbx
ffff80000081246a:	58                   	pop    rax
ffff80000081246b:	c3                   	ret    

ffff80000081246c <move_to_user_mode>:
move_to_user_mode():
ffff80000081246c:	48 b9 7c 24 81 00 00 	movabs rcx,0xffff80000081247c
ffff800000812473:	80 ff ff 
ffff800000812476:	9c                   	pushf  
ffff800000812477:	41 5b                	pop    r11
ffff800000812479:	48 0f 07             	sysretq 

ffff80000081247c <move_to_user_mode.result>:
move_to_user_mode.result():
ffff80000081247c:	b8 2b 00 00 00       	mov    eax,0x2b
ffff800000812481:	8e c0                	mov    es,eax
ffff800000812483:	8e d8                	mov    ds,eax
ffff800000812485:	8e e0                	mov    fs,eax
ffff800000812487:	8e e8                	mov    gs,eax
ffff800000812489:	c3                   	ret    
