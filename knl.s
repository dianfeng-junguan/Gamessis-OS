
bin/gmsknl.elf:     file format elf64-x86-64


bin/gmsknl.elf:     file format elf64-x86-64


Disassembly of section .text:

ffff800000800000 <init_int>:
init_int():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:14
#include "kb.h"
#include "framebuffer.h"

gate *idt= (gate *) (KNL_BASE+IDT_ADDR);
extern int disk_int_handler();
void init_int(){
ffff800000800000:	f3 0f 1e fa          	endbr64 
ffff800000800004:	55                   	push   rbp
ffff800000800005:	48 89 e5             	mov    rbp,rsp
ffff800000800008:	41 57                	push   r15
ffff80000080000a:	53                   	push   rbx
ffff80000080000b:	48 83 ec 10          	sub    rsp,0x10
ffff80000080000f:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080000f <init_int+0xf>
ffff800000800016:	49 bb 29 f3 01 00 00 	movabs r11,0x1f329
ffff80000080001d:	00 00 00 
ffff800000800020:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:16
    //asm volatile("sidt %0"::"m"(idt));
    set_gate(0,(addr_t)divide_err,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800023:	48 b8 28 ff ff ff ff 	movabs rax,0xffffffffffffff28
ffff80000080002a:	ff ff ff 
ffff80000080002d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800031:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800036:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080003b:	48 89 c6             	mov    rsi,rax
ffff80000080003e:	bf 00 00 00 00       	mov    edi,0x0
ffff800000800043:	49 89 df             	mov    r15,rbx
ffff800000800046:	48 b8 9a 12 fe ff ff 	movabs rax,0xfffffffffffe129a
ffff80000080004d:	ff ff ff 
ffff800000800050:	48 01 d8             	add    rax,rbx
ffff800000800053:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:17
    set_gate(1,(addr_t)debug,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800055:	48 b8 e8 fd ff ff ff 	movabs rax,0xfffffffffffffde8
ffff80000080005c:	ff ff ff 
ffff80000080005f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800063:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800068:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080006d:	48 89 c6             	mov    rsi,rax
ffff800000800070:	bf 01 00 00 00       	mov    edi,0x1
ffff800000800075:	49 89 df             	mov    r15,rbx
ffff800000800078:	48 b8 9a 12 fe ff ff 	movabs rax,0xfffffffffffe129a
ffff80000080007f:	ff ff ff 
ffff800000800082:	48 01 d8             	add    rax,rbx
ffff800000800085:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:18
    set_gate(2,(addr_t)default_int_proc,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800087:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff80000080008e:	ff ff ff 
ffff800000800091:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800095:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff80000080009a:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080009f:	48 89 c6             	mov    rsi,rax
ffff8000008000a2:	bf 02 00 00 00       	mov    edi,0x2
ffff8000008000a7:	49 89 df             	mov    r15,rbx
ffff8000008000aa:	48 b8 9a 12 fe ff ff 	movabs rax,0xfffffffffffe129a
ffff8000008000b1:	ff ff ff 
ffff8000008000b4:	48 01 d8             	add    rax,rbx
ffff8000008000b7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:19
    set_gate(3,(addr_t)breakpoint,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff8000008000b9:	48 b8 68 fe ff ff ff 	movabs rax,0xfffffffffffffe68
ffff8000008000c0:	ff ff ff 
ffff8000008000c3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008000c7:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008000cc:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008000d1:	48 89 c6             	mov    rsi,rax
ffff8000008000d4:	bf 03 00 00 00       	mov    edi,0x3
ffff8000008000d9:	49 89 df             	mov    r15,rbx
ffff8000008000dc:	48 b8 9a 12 fe ff ff 	movabs rax,0xfffffffffffe129a
ffff8000008000e3:	ff ff ff 
ffff8000008000e6:	48 01 d8             	add    rax,rbx
ffff8000008000e9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:20
    set_gate(4,(addr_t)overflow,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff8000008000eb:	48 b8 e0 fd ff ff ff 	movabs rax,0xfffffffffffffde0
ffff8000008000f2:	ff ff ff 
ffff8000008000f5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008000f9:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008000fe:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800103:	48 89 c6             	mov    rsi,rax
ffff800000800106:	bf 04 00 00 00       	mov    edi,0x4
ffff80000080010b:	49 89 df             	mov    r15,rbx
ffff80000080010e:	48 b8 9a 12 fe ff ff 	movabs rax,0xfffffffffffe129a
ffff800000800115:	ff ff ff 
ffff800000800118:	48 01 d8             	add    rax,rbx
ffff80000080011b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:21
    set_gate(5,(addr_t)bounds,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff80000080011d:	48 b8 f0 fd ff ff ff 	movabs rax,0xfffffffffffffdf0
ffff800000800124:	ff ff ff 
ffff800000800127:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080012b:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800130:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800135:	48 89 c6             	mov    rsi,rax
ffff800000800138:	bf 05 00 00 00       	mov    edi,0x5
ffff80000080013d:	49 89 df             	mov    r15,rbx
ffff800000800140:	48 b8 9a 12 fe ff ff 	movabs rax,0xfffffffffffe129a
ffff800000800147:	ff ff ff 
ffff80000080014a:	48 01 d8             	add    rax,rbx
ffff80000080014d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:22
    set_gate(6,(addr_t)undefined_operator,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff80000080014f:	48 b8 60 ff ff ff ff 	movabs rax,0xffffffffffffff60
ffff800000800156:	ff ff ff 
ffff800000800159:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080015d:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800162:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800167:	48 89 c6             	mov    rsi,rax
ffff80000080016a:	bf 06 00 00 00       	mov    edi,0x6
ffff80000080016f:	49 89 df             	mov    r15,rbx
ffff800000800172:	48 b8 9a 12 fe ff ff 	movabs rax,0xfffffffffffe129a
ffff800000800179:	ff ff ff 
ffff80000080017c:	48 01 d8             	add    rax,rbx
ffff80000080017f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:23
    set_gate(7,(addr_t)coprocessor_notexist,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800181:	48 b8 f0 ff ff ff ff 	movabs rax,0xfffffffffffffff0
ffff800000800188:	ff ff ff 
ffff80000080018b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080018f:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800194:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800199:	48 89 c6             	mov    rsi,rax
ffff80000080019c:	bf 07 00 00 00       	mov    edi,0x7
ffff8000008001a1:	49 89 df             	mov    r15,rbx
ffff8000008001a4:	48 b8 9a 12 fe ff ff 	movabs rax,0xfffffffffffe129a
ffff8000008001ab:	ff ff ff 
ffff8000008001ae:	48 01 d8             	add    rax,rbx
ffff8000008001b1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:24
    set_gate(8,(addr_t)double_ints,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);//double_ints
ffff8000008001b3:	48 b8 58 fe ff ff ff 	movabs rax,0xfffffffffffffe58
ffff8000008001ba:	ff ff ff 
ffff8000008001bd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008001c1:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008001c6:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008001cb:	48 89 c6             	mov    rsi,rax
ffff8000008001ce:	bf 08 00 00 00       	mov    edi,0x8
ffff8000008001d3:	49 89 df             	mov    r15,rbx
ffff8000008001d6:	48 b8 9a 12 fe ff ff 	movabs rax,0xfffffffffffe129a
ffff8000008001dd:	ff ff ff 
ffff8000008001e0:	48 01 d8             	add    rax,rbx
ffff8000008001e3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:25
    set_gate(9,(addr_t)coprocessor_seg_overbound,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff8000008001e5:	48 b8 10 fe ff ff ff 	movabs rax,0xfffffffffffffe10
ffff8000008001ec:	ff ff ff 
ffff8000008001ef:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008001f3:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008001f8:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008001fd:	48 89 c6             	mov    rsi,rax
ffff800000800200:	bf 09 00 00 00       	mov    edi,0x9
ffff800000800205:	49 89 df             	mov    r15,rbx
ffff800000800208:	48 b8 9a 12 fe ff ff 	movabs rax,0xfffffffffffe129a
ffff80000080020f:	ff ff ff 
ffff800000800212:	48 01 d8             	add    rax,rbx
ffff800000800215:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:26
    set_gate(10,(addr_t)invalid_tss,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800217:	48 b8 c8 ff ff ff ff 	movabs rax,0xffffffffffffffc8
ffff80000080021e:	ff ff ff 
ffff800000800221:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800225:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff80000080022a:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080022f:	48 89 c6             	mov    rsi,rax
ffff800000800232:	bf 0a 00 00 00       	mov    edi,0xa
ffff800000800237:	49 89 df             	mov    r15,rbx
ffff80000080023a:	48 b8 9a 12 fe ff ff 	movabs rax,0xfffffffffffe129a
ffff800000800241:	ff ff ff 
ffff800000800244:	48 01 d8             	add    rax,rbx
ffff800000800247:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:27
    set_gate(11,(addr_t)segment_notexist,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800249:	48 b8 d8 ff ff ff ff 	movabs rax,0xffffffffffffffd8
ffff800000800250:	ff ff ff 
ffff800000800253:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800257:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff80000080025c:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800261:	48 89 c6             	mov    rsi,rax
ffff800000800264:	bf 0b 00 00 00       	mov    edi,0xb
ffff800000800269:	49 89 df             	mov    r15,rbx
ffff80000080026c:	48 b8 9a 12 fe ff ff 	movabs rax,0xfffffffffffe129a
ffff800000800273:	ff ff ff 
ffff800000800276:	48 01 d8             	add    rax,rbx
ffff800000800279:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:28
    set_gate(12,(addr_t)stackseg_overbound,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);//
ffff80000080027b:	48 b8 b8 ff ff ff ff 	movabs rax,0xffffffffffffffb8
ffff800000800282:	ff ff ff 
ffff800000800285:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800289:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff80000080028e:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800293:	48 89 c6             	mov    rsi,rax
ffff800000800296:	bf 0c 00 00 00       	mov    edi,0xc
ffff80000080029b:	49 89 df             	mov    r15,rbx
ffff80000080029e:	48 b8 9a 12 fe ff ff 	movabs rax,0xfffffffffffe129a
ffff8000008002a5:	ff ff ff 
ffff8000008002a8:	48 01 d8             	add    rax,rbx
ffff8000008002ab:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:29
    set_gate(13,(addr_t)general_protect,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff8000008002ad:	48 b8 80 ff ff ff ff 	movabs rax,0xffffffffffffff80
ffff8000008002b4:	ff ff ff 
ffff8000008002b7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008002bb:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008002c0:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008002c5:	48 89 c6             	mov    rsi,rax
ffff8000008002c8:	bf 0d 00 00 00       	mov    edi,0xd
ffff8000008002cd:	49 89 df             	mov    r15,rbx
ffff8000008002d0:	48 b8 9a 12 fe ff ff 	movabs rax,0xfffffffffffe129a
ffff8000008002d7:	ff ff ff 
ffff8000008002da:	48 01 d8             	add    rax,rbx
ffff8000008002dd:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:30
    set_gate(14,(addr_t)page_err,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff8000008002df:	48 b8 50 fd ff ff ff 	movabs rax,0xfffffffffffffd50
ffff8000008002e6:	ff ff ff 
ffff8000008002e9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008002ed:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008002f2:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008002f7:	48 89 c6             	mov    rsi,rax
ffff8000008002fa:	bf 0e 00 00 00       	mov    edi,0xe
ffff8000008002ff:	49 89 df             	mov    r15,rbx
ffff800000800302:	48 b8 9a 12 fe ff ff 	movabs rax,0xfffffffffffe129a
ffff800000800309:	ff ff ff 
ffff80000080030c:	48 01 d8             	add    rax,rbx
ffff80000080030f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:31
    set_gate(15,(addr_t)default_int_proc,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800311:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff800000800318:	ff ff ff 
ffff80000080031b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080031f:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800324:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800329:	48 89 c6             	mov    rsi,rax
ffff80000080032c:	bf 0f 00 00 00       	mov    edi,0xf
ffff800000800331:	49 89 df             	mov    r15,rbx
ffff800000800334:	48 b8 9a 12 fe ff ff 	movabs rax,0xfffffffffffe129a
ffff80000080033b:	ff ff ff 
ffff80000080033e:	48 01 d8             	add    rax,rbx
ffff800000800341:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:32
    set_gate(16,(addr_t)coprocessor_err,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800343:	48 b8 68 ff ff ff ff 	movabs rax,0xffffffffffffff68
ffff80000080034a:	ff ff ff 
ffff80000080034d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800351:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800356:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080035b:	48 89 c6             	mov    rsi,rax
ffff80000080035e:	bf 10 00 00 00       	mov    edi,0x10
ffff800000800363:	49 89 df             	mov    r15,rbx
ffff800000800366:	48 b8 9a 12 fe ff ff 	movabs rax,0xfffffffffffe129a
ffff80000080036d:	ff ff ff 
ffff800000800370:	48 01 d8             	add    rax,rbx
ffff800000800373:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:33
    for (int i=17;i<48;i++)
ffff800000800375:	c7 45 ec 11 00 00 00 	mov    DWORD PTR [rbp-0x14],0x11
ffff80000080037c:	eb 39                	jmp    ffff8000008003b7 <init_int+0x3b7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:34 (discriminator 3)
        set_gate(i,(addr_t)default_int_proc,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);
ffff80000080037e:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff800000800385:	ff ff ff 
ffff800000800388:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080038c:	48 89 c6             	mov    rsi,rax
ffff80000080038f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000800392:	0f b6 c0             	movzx  eax,al
ffff800000800395:	b9 00 8e 00 00       	mov    ecx,0x8e00
ffff80000080039a:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080039f:	89 c7                	mov    edi,eax
ffff8000008003a1:	49 89 df             	mov    r15,rbx
ffff8000008003a4:	48 b8 9a 12 fe ff ff 	movabs rax,0xfffffffffffe129a
ffff8000008003ab:	ff ff ff 
ffff8000008003ae:	48 01 d8             	add    rax,rbx
ffff8000008003b1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:33 (discriminator 3)
    for (int i=17;i<48;i++)
ffff8000008003b3:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:33 (discriminator 1)
ffff8000008003b7:	83 7d ec 2f          	cmp    DWORD PTR [rbp-0x14],0x2f
ffff8000008003bb:	7e c1                	jle    ffff80000080037e <init_int+0x37e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:35
	set_gate(0x21,(addr_t)key_proc,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);
ffff8000008003bd:	48 b8 68 fd ff ff ff 	movabs rax,0xfffffffffffffd68
ffff8000008003c4:	ff ff ff 
ffff8000008003c7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008003cb:	b9 00 8e 00 00       	mov    ecx,0x8e00
ffff8000008003d0:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008003d5:	48 89 c6             	mov    rsi,rax
ffff8000008003d8:	bf 21 00 00 00       	mov    edi,0x21
ffff8000008003dd:	49 89 df             	mov    r15,rbx
ffff8000008003e0:	48 b8 9a 12 fe ff ff 	movabs rax,0xfffffffffffe129a
ffff8000008003e7:	ff ff ff 
ffff8000008003ea:	48 01 d8             	add    rax,rbx
ffff8000008003ed:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:36
	set_gate(0x20,(addr_t)clock,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);
ffff8000008003ef:	48 b8 d0 ff ff ff ff 	movabs rax,0xffffffffffffffd0
ffff8000008003f6:	ff ff ff 
ffff8000008003f9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008003fd:	b9 00 8e 00 00       	mov    ecx,0x8e00
ffff800000800402:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800407:	48 89 c6             	mov    rsi,rax
ffff80000080040a:	bf 20 00 00 00       	mov    edi,0x20
ffff80000080040f:	49 89 df             	mov    r15,rbx
ffff800000800412:	48 b8 9a 12 fe ff ff 	movabs rax,0xfffffffffffe129a
ffff800000800419:	ff ff ff 
ffff80000080041c:	48 01 d8             	add    rax,rbx
ffff80000080041f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:37
	set_gate(0x2e,(addr_t)disk_int_handler,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);
ffff800000800421:	48 b8 f8 ff ff ff ff 	movabs rax,0xfffffffffffffff8
ffff800000800428:	ff ff ff 
ffff80000080042b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080042f:	b9 00 8e 00 00       	mov    ecx,0x8e00
ffff800000800434:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800439:	48 89 c6             	mov    rsi,rax
ffff80000080043c:	bf 2e 00 00 00       	mov    edi,0x2e
ffff800000800441:	49 89 df             	mov    r15,rbx
ffff800000800444:	48 b8 9a 12 fe ff ff 	movabs rax,0xfffffffffffe129a
ffff80000080044b:	ff ff ff 
ffff80000080044e:	48 01 d8             	add    rax,rbx
ffff800000800451:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:38
    set_gate(0x80,(addr_t)_syscall,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);//
ffff800000800453:	48 b8 90 fd ff ff ff 	movabs rax,0xfffffffffffffd90
ffff80000080045a:	ff ff ff 
ffff80000080045d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800461:	b9 00 8e 00 00       	mov    ecx,0x8e00
ffff800000800466:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080046b:	48 89 c6             	mov    rsi,rax
ffff80000080046e:	bf 80 00 00 00       	mov    edi,0x80
ffff800000800473:	49 89 df             	mov    r15,rbx
ffff800000800476:	48 b8 9a 12 fe ff ff 	movabs rax,0xfffffffffffe129a
ffff80000080047d:	ff ff ff 
ffff800000800480:	48 01 d8             	add    rax,rbx
ffff800000800483:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:43
    //set_gate(0x2c,mouse_proc,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);
    //启动8259A
    
	//ICW1
	outb(0x20,0x11);
ffff800000800485:	be 11 00 00 00       	mov    esi,0x11
ffff80000080048a:	bf 20 00 00 00       	mov    edi,0x20
ffff80000080048f:	49 89 df             	mov    r15,rbx
ffff800000800492:	48 b8 48 ae fe ff ff 	movabs rax,0xfffffffffffeae48
ffff800000800499:	ff ff ff 
ffff80000080049c:	48 01 d8             	add    rax,rbx
ffff80000080049f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:44
	outb(0xA0,0x11);
ffff8000008004a1:	be 11 00 00 00       	mov    esi,0x11
ffff8000008004a6:	bf a0 00 00 00       	mov    edi,0xa0
ffff8000008004ab:	49 89 df             	mov    r15,rbx
ffff8000008004ae:	48 b8 48 ae fe ff ff 	movabs rax,0xfffffffffffeae48
ffff8000008004b5:	ff ff ff 
ffff8000008004b8:	48 01 d8             	add    rax,rbx
ffff8000008004bb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:46
	//ICW2
	outb(0x21,0x20);//former 0x20,0x20
ffff8000008004bd:	be 20 00 00 00       	mov    esi,0x20
ffff8000008004c2:	bf 21 00 00 00       	mov    edi,0x21
ffff8000008004c7:	49 89 df             	mov    r15,rbx
ffff8000008004ca:	48 b8 48 ae fe ff ff 	movabs rax,0xfffffffffffeae48
ffff8000008004d1:	ff ff ff 
ffff8000008004d4:	48 01 d8             	add    rax,rbx
ffff8000008004d7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:47
	outb(0xA1,0x28);
ffff8000008004d9:	be 28 00 00 00       	mov    esi,0x28
ffff8000008004de:	bf a1 00 00 00       	mov    edi,0xa1
ffff8000008004e3:	49 89 df             	mov    r15,rbx
ffff8000008004e6:	48 b8 48 ae fe ff ff 	movabs rax,0xfffffffffffeae48
ffff8000008004ed:	ff ff ff 
ffff8000008004f0:	48 01 d8             	add    rax,rbx
ffff8000008004f3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:49
	//ICW3
	outb(0x21,0x04);
ffff8000008004f5:	be 04 00 00 00       	mov    esi,0x4
ffff8000008004fa:	bf 21 00 00 00       	mov    edi,0x21
ffff8000008004ff:	49 89 df             	mov    r15,rbx
ffff800000800502:	48 b8 48 ae fe ff ff 	movabs rax,0xfffffffffffeae48
ffff800000800509:	ff ff ff 
ffff80000080050c:	48 01 d8             	add    rax,rbx
ffff80000080050f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:50
	outb(0xA1,0x02);
ffff800000800511:	be 02 00 00 00       	mov    esi,0x2
ffff800000800516:	bf a1 00 00 00       	mov    edi,0xa1
ffff80000080051b:	49 89 df             	mov    r15,rbx
ffff80000080051e:	48 b8 48 ae fe ff ff 	movabs rax,0xfffffffffffeae48
ffff800000800525:	ff ff ff 
ffff800000800528:	48 01 d8             	add    rax,rbx
ffff80000080052b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:52
	//ICW4
	outb(0x21,0x01);
ffff80000080052d:	be 01 00 00 00       	mov    esi,0x1
ffff800000800532:	bf 21 00 00 00       	mov    edi,0x21
ffff800000800537:	49 89 df             	mov    r15,rbx
ffff80000080053a:	48 b8 48 ae fe ff ff 	movabs rax,0xfffffffffffeae48
ffff800000800541:	ff ff ff 
ffff800000800544:	48 01 d8             	add    rax,rbx
ffff800000800547:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:53
	outb(0xA1,0x01);
ffff800000800549:	be 01 00 00 00       	mov    esi,0x1
ffff80000080054e:	bf a1 00 00 00       	mov    edi,0xa1
ffff800000800553:	49 89 df             	mov    r15,rbx
ffff800000800556:	48 b8 48 ae fe ff ff 	movabs rax,0xfffffffffffeae48
ffff80000080055d:	ff ff ff 
ffff800000800560:	48 01 d8             	add    rax,rbx
ffff800000800563:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:55

    turn_on_int();
ffff800000800565:	49 89 df             	mov    r15,rbx
ffff800000800568:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080056d:	48 ba 82 ae fe ff ff 	movabs rdx,0xfffffffffffeae82
ffff800000800574:	ff ff ff 
ffff800000800577:	48 01 da             	add    rdx,rbx
ffff80000080057a:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:59


    //设置IA32_LSTAR,为syscall做设置
    wrmsr(0xc0000082, _syscall);
ffff80000080057c:	48 b8 90 fd ff ff ff 	movabs rax,0xfffffffffffffd90
ffff800000800583:	ff ff ff 
ffff800000800586:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080058a:	48 89 c6             	mov    rsi,rax
ffff80000080058d:	b8 82 00 00 c0       	mov    eax,0xc0000082
ffff800000800592:	48 89 c7             	mov    rdi,rax
ffff800000800595:	49 89 df             	mov    r15,rbx
ffff800000800598:	48 b8 50 1c fe ff ff 	movabs rax,0xfffffffffffe1c50
ffff80000080059f:	ff ff ff 
ffff8000008005a2:	48 01 d8             	add    rax,rbx
ffff8000008005a5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:61
    //设置IA32_FMASK,为syscall做设置
    wrmsr(0xc0000084, -1);
ffff8000008005a7:	48 c7 c6 ff ff ff ff 	mov    rsi,0xffffffffffffffff
ffff8000008005ae:	b8 84 00 00 c0       	mov    eax,0xc0000084
ffff8000008005b3:	48 89 c7             	mov    rdi,rax
ffff8000008005b6:	49 89 df             	mov    r15,rbx
ffff8000008005b9:	48 b8 50 1c fe ff ff 	movabs rax,0xfffffffffffe1c50
ffff8000008005c0:	ff ff ff 
ffff8000008005c3:	48 01 d8             	add    rax,rbx
ffff8000008005c6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:62
}
ffff8000008005c8:	90                   	nop
ffff8000008005c9:	48 83 c4 10          	add    rsp,0x10
ffff8000008005cd:	5b                   	pop    rbx
ffff8000008005ce:	41 5f                	pop    r15
ffff8000008005d0:	5d                   	pop    rbp
ffff8000008005d1:	c3                   	ret    

ffff8000008005d2 <set_gate>:
set_gate():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:64
void set_gate(u8 index,addr_t offset,u16 selector,u16 attr)
{
ffff8000008005d2:	f3 0f 1e fa          	endbr64 
ffff8000008005d6:	55                   	push   rbp
ffff8000008005d7:	48 89 e5             	mov    rbp,rsp
ffff8000008005da:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008005da <set_gate+0x8>
ffff8000008005e1:	49 bb 5e ed 01 00 00 	movabs r11,0x1ed5e
ffff8000008005e8:	00 00 00 
ffff8000008005eb:	4c 01 d8             	add    rax,r11
ffff8000008005ee:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff8000008005f2:	89 d6                	mov    esi,edx
ffff8000008005f4:	89 ca                	mov    edx,ecx
ffff8000008005f6:	89 f9                	mov    ecx,edi
ffff8000008005f8:	88 4d fc             	mov    BYTE PTR [rbp-0x4],cl
ffff8000008005fb:	89 f1                	mov    ecx,esi
ffff8000008005fd:	66 89 4d f8          	mov    WORD PTR [rbp-0x8],cx
ffff800000800601:	66 89 55 ec          	mov    WORD PTR [rbp-0x14],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:71
    idt[index].offset_low=offset&0xffffu;
    idt[index].offset_high=(offset>>16)&0xffffu;
    idt[index].attr=attr;
    idt[index].selector=selector;
#else
    offset|=KNL_BASE;//中断必须在内核空间
ffff800000800605:	48 ba 00 00 00 00 00 	movabs rdx,0xffff800000000000
ffff80000080060c:	80 ff ff 
ffff80000080060f:	48 09 55 f0          	or     QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:72
    idt[index].offset_low=offset&0xffff;
ffff800000800613:	48 ba 38 ff ff ff ff 	movabs rdx,0xffffffffffffff38
ffff80000080061a:	ff ff ff 
ffff80000080061d:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000800621:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000800624:	0f b6 55 fc          	movzx  edx,BYTE PTR [rbp-0x4]
ffff800000800628:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080062c:	48 01 ca             	add    rdx,rcx
ffff80000080062f:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff800000800633:	66 89 0a             	mov    WORD PTR [rdx],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:73
    idt[index].offset_mid=(offset>>16)&0xffff;
ffff800000800636:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080063a:	48 89 d1             	mov    rcx,rdx
ffff80000080063d:	48 c1 e9 10          	shr    rcx,0x10
ffff800000800641:	48 ba 38 ff ff ff ff 	movabs rdx,0xffffffffffffff38
ffff800000800648:	ff ff ff 
ffff80000080064b:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080064f:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff800000800652:	0f b6 55 fc          	movzx  edx,BYTE PTR [rbp-0x4]
ffff800000800656:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080065a:	48 01 f2             	add    rdx,rsi
ffff80000080065d:	66 89 4a 06          	mov    WORD PTR [rdx+0x6],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:74
    idt[index].offset_high=(offset>>32);//0x0000ffff;
ffff800000800661:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff800000800665:	48 89 d1             	mov    rcx,rdx
ffff800000800668:	48 c1 e9 20          	shr    rcx,0x20
ffff80000080066c:	48 ba 38 ff ff ff ff 	movabs rdx,0xffffffffffffff38
ffff800000800673:	ff ff ff 
ffff800000800676:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080067a:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff80000080067d:	0f b6 55 fc          	movzx  edx,BYTE PTR [rbp-0x4]
ffff800000800681:	48 c1 e2 04          	shl    rdx,0x4
ffff800000800685:	48 01 f2             	add    rdx,rsi
ffff800000800688:	89 4a 08             	mov    DWORD PTR [rdx+0x8],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:75
    idt[index].attr=attr|1;//1是ist索引
ffff80000080068b:	48 ba 38 ff ff ff ff 	movabs rdx,0xffffffffffffff38
ffff800000800692:	ff ff ff 
ffff800000800695:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000800699:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080069c:	0f b6 55 fc          	movzx  edx,BYTE PTR [rbp-0x4]
ffff8000008006a0:	48 c1 e2 04          	shl    rdx,0x4
ffff8000008006a4:	48 01 ca             	add    rdx,rcx
ffff8000008006a7:	0f b7 4d ec          	movzx  ecx,WORD PTR [rbp-0x14]
ffff8000008006ab:	83 c9 01             	or     ecx,0x1
ffff8000008006ae:	66 89 4a 04          	mov    WORD PTR [rdx+0x4],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:76
    idt[index].selector=selector;
ffff8000008006b2:	48 ba 38 ff ff ff ff 	movabs rdx,0xffffffffffffff38
ffff8000008006b9:	ff ff ff 
ffff8000008006bc:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008006c0:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008006c3:	0f b6 55 fc          	movzx  edx,BYTE PTR [rbp-0x4]
ffff8000008006c7:	48 c1 e2 04          	shl    rdx,0x4
ffff8000008006cb:	48 01 d1             	add    rcx,rdx
ffff8000008006ce:	0f b7 55 f8          	movzx  edx,WORD PTR [rbp-0x8]
ffff8000008006d2:	66 89 51 02          	mov    WORD PTR [rcx+0x2],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:77
    idt[index].rsvd=0;
ffff8000008006d6:	48 ba 38 ff ff ff ff 	movabs rdx,0xffffffffffffff38
ffff8000008006dd:	ff ff ff 
ffff8000008006e0:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff8000008006e4:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008006e7:	0f b6 45 fc          	movzx  eax,BYTE PTR [rbp-0x4]
ffff8000008006eb:	48 c1 e0 04          	shl    rax,0x4
ffff8000008006ef:	48 01 d0             	add    rax,rdx
ffff8000008006f2:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [rax+0xc],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:79
#endif
}
ffff8000008006f9:	90                   	nop
ffff8000008006fa:	5d                   	pop    rbp
ffff8000008006fb:	c3                   	ret    

ffff8000008006fc <divide_err>:
divide_err():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:81

void divide_err(){
ffff8000008006fc:	f3 0f 1e fa          	endbr64 
ffff800000800700:	55                   	push   rbp
ffff800000800701:	48 89 e5             	mov    rbp,rsp
ffff800000800704:	41 57                	push   r15
ffff800000800706:	48 83 ec 08          	sub    rsp,0x8
ffff80000080070a:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080070a <divide_err+0xe>
ffff800000800711:	49 bb 2e ec 01 00 00 	movabs r11,0x1ec2e
ffff800000800718:	00 00 00 
ffff80000080071b:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:82
    asm("cli");
ffff80000080071e:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:84
    //puts("divide err");
    eoi();
ffff80000080071f:	49 89 d7             	mov    r15,rdx
ffff800000800722:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800727:	48 b9 76 ae fe ff ff 	movabs rcx,0xfffffffffffeae76
ffff80000080072e:	ff ff ff 
ffff800000800731:	48 01 d1             	add    rcx,rdx
ffff800000800734:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:85
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800736:	fb                   	sti    
ffff800000800737:	c9                   	leave  
ffff800000800738:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:86
}
ffff80000080073a:	90                   	nop
ffff80000080073b:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080073f:	c9                   	leave  
ffff800000800740:	c3                   	ret    

ffff800000800741 <debug>:
debug():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:88

void debug(){
ffff800000800741:	f3 0f 1e fa          	endbr64 
ffff800000800745:	55                   	push   rbp
ffff800000800746:	48 89 e5             	mov    rbp,rsp
ffff800000800749:	41 57                	push   r15
ffff80000080074b:	48 83 ec 08          	sub    rsp,0x8
ffff80000080074f:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080074f <debug+0xe>
ffff800000800756:	49 bb e9 eb 01 00 00 	movabs r11,0x1ebe9
ffff80000080075d:	00 00 00 
ffff800000800760:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:89
    asm("cli");
ffff800000800763:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:91
    //puts("debug");
    eoi();
ffff800000800764:	49 89 d7             	mov    r15,rdx
ffff800000800767:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080076c:	48 b9 76 ae fe ff ff 	movabs rcx,0xfffffffffffeae76
ffff800000800773:	ff ff ff 
ffff800000800776:	48 01 d1             	add    rcx,rdx
ffff800000800779:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:92
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff80000080077b:	fb                   	sti    
ffff80000080077c:	c9                   	leave  
ffff80000080077d:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:93
}
ffff80000080077f:	90                   	nop
ffff800000800780:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800784:	c9                   	leave  
ffff800000800785:	c3                   	ret    

ffff800000800786 <default_int_proc>:
default_int_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:94
void default_int_proc(){
ffff800000800786:	f3 0f 1e fa          	endbr64 
ffff80000080078a:	55                   	push   rbp
ffff80000080078b:	48 89 e5             	mov    rbp,rsp
ffff80000080078e:	41 57                	push   r15
ffff800000800790:	48 83 ec 08          	sub    rsp,0x8
ffff800000800794:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800794 <default_int_proc+0xe>
ffff80000080079b:	49 bb a4 eb 01 00 00 	movabs r11,0x1eba4
ffff8000008007a2:	00 00 00 
ffff8000008007a5:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:95
    asm("cli");
ffff8000008007a8:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:97
    //puts("default_int_proc");
    eoi();
ffff8000008007a9:	49 89 d7             	mov    r15,rdx
ffff8000008007ac:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008007b1:	48 b9 76 ae fe ff ff 	movabs rcx,0xfffffffffffeae76
ffff8000008007b8:	ff ff ff 
ffff8000008007bb:	48 01 d1             	add    rcx,rdx
ffff8000008007be:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:98
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff8000008007c0:	fb                   	sti    
ffff8000008007c1:	c9                   	leave  
ffff8000008007c2:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:99
}
ffff8000008007c4:	90                   	nop
ffff8000008007c5:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff8000008007c9:	c9                   	leave  
ffff8000008007ca:	c3                   	ret    

ffff8000008007cb <breakpoint>:
breakpoint():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:100
void breakpoint(){
ffff8000008007cb:	f3 0f 1e fa          	endbr64 
ffff8000008007cf:	55                   	push   rbp
ffff8000008007d0:	48 89 e5             	mov    rbp,rsp
ffff8000008007d3:	41 57                	push   r15
ffff8000008007d5:	48 83 ec 08          	sub    rsp,0x8
ffff8000008007d9:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff8000008007d9 <breakpoint+0xe>
ffff8000008007e0:	49 bb 5f eb 01 00 00 	movabs r11,0x1eb5f
ffff8000008007e7:	00 00 00 
ffff8000008007ea:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:101
    asm("cli");
ffff8000008007ed:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:103
    //puts("breakpoint");
    eoi();
ffff8000008007ee:	49 89 d7             	mov    r15,rdx
ffff8000008007f1:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008007f6:	48 b9 76 ae fe ff ff 	movabs rcx,0xfffffffffffeae76
ffff8000008007fd:	ff ff ff 
ffff800000800800:	48 01 d1             	add    rcx,rdx
ffff800000800803:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:104
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800805:	fb                   	sti    
ffff800000800806:	c9                   	leave  
ffff800000800807:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:105
}
ffff800000800809:	90                   	nop
ffff80000080080a:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080080e:	c9                   	leave  
ffff80000080080f:	c3                   	ret    

ffff800000800810 <overflow>:
overflow():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:106
void overflow(){
ffff800000800810:	f3 0f 1e fa          	endbr64 
ffff800000800814:	55                   	push   rbp
ffff800000800815:	48 89 e5             	mov    rbp,rsp
ffff800000800818:	41 57                	push   r15
ffff80000080081a:	48 83 ec 08          	sub    rsp,0x8
ffff80000080081e:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080081e <overflow+0xe>
ffff800000800825:	49 bb 1a eb 01 00 00 	movabs r11,0x1eb1a
ffff80000080082c:	00 00 00 
ffff80000080082f:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:107
    asm("cli");
ffff800000800832:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:109
    //puts("overflow");
    eoi();
ffff800000800833:	49 89 d7             	mov    r15,rdx
ffff800000800836:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080083b:	48 b9 76 ae fe ff ff 	movabs rcx,0xfffffffffffeae76
ffff800000800842:	ff ff ff 
ffff800000800845:	48 01 d1             	add    rcx,rdx
ffff800000800848:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:110
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff80000080084a:	fb                   	sti    
ffff80000080084b:	c9                   	leave  
ffff80000080084c:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:111
}
ffff80000080084e:	90                   	nop
ffff80000080084f:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800853:	c9                   	leave  
ffff800000800854:	c3                   	ret    

ffff800000800855 <bounds>:
bounds():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:112
void bounds(){
ffff800000800855:	f3 0f 1e fa          	endbr64 
ffff800000800859:	55                   	push   rbp
ffff80000080085a:	48 89 e5             	mov    rbp,rsp
ffff80000080085d:	41 57                	push   r15
ffff80000080085f:	48 83 ec 08          	sub    rsp,0x8
ffff800000800863:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800863 <bounds+0xe>
ffff80000080086a:	49 bb d5 ea 01 00 00 	movabs r11,0x1ead5
ffff800000800871:	00 00 00 
ffff800000800874:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:113
    asm("cli");
ffff800000800877:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:115
    //puts("bounds");
    eoi();
ffff800000800878:	49 89 d7             	mov    r15,rdx
ffff80000080087b:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800880:	48 b9 76 ae fe ff ff 	movabs rcx,0xfffffffffffeae76
ffff800000800887:	ff ff ff 
ffff80000080088a:	48 01 d1             	add    rcx,rdx
ffff80000080088d:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:116
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff80000080088f:	fb                   	sti    
ffff800000800890:	c9                   	leave  
ffff800000800891:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:117
}
ffff800000800893:	90                   	nop
ffff800000800894:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800898:	c9                   	leave  
ffff800000800899:	c3                   	ret    

ffff80000080089a <undefined_operator>:
undefined_operator():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:118
void undefined_operator(){
ffff80000080089a:	f3 0f 1e fa          	endbr64 
ffff80000080089e:	55                   	push   rbp
ffff80000080089f:	48 89 e5             	mov    rbp,rsp
ffff8000008008a2:	41 57                	push   r15
ffff8000008008a4:	53                   	push   rbx
ffff8000008008a5:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008008a5 <undefined_operator+0xb>
ffff8000008008ac:	49 bb 93 ea 01 00 00 	movabs r11,0x1ea93
ffff8000008008b3:	00 00 00 
ffff8000008008b6:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:120
    //puts("undef operator");
    eoi();
ffff8000008008b9:	49 89 df             	mov    r15,rbx
ffff8000008008bc:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008008c1:	48 ba 76 ae fe ff ff 	movabs rdx,0xfffffffffffeae76
ffff8000008008c8:	ff ff ff 
ffff8000008008cb:	48 01 da             	add    rdx,rbx
ffff8000008008ce:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:121
    report_back_trace_of_err();
ffff8000008008d0:	49 89 df             	mov    r15,rbx
ffff8000008008d3:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008008d8:	48 ba a6 ae fe ff ff 	movabs rdx,0xfffffffffffeaea6
ffff8000008008df:	ff ff ff 
ffff8000008008e2:	48 01 da             	add    rdx,rbx
ffff8000008008e5:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:122
    __asm__ volatile ("jmp .\r\n leave \r\n iretq");
ffff8000008008e7:	eb fe                	jmp    ffff8000008008e7 <undefined_operator+0x4d>
ffff8000008008e9:	c9                   	leave  
ffff8000008008ea:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:123
}
ffff8000008008ec:	90                   	nop
ffff8000008008ed:	5b                   	pop    rbx
ffff8000008008ee:	41 5f                	pop    r15
ffff8000008008f0:	5d                   	pop    rbp
ffff8000008008f1:	c3                   	ret    

ffff8000008008f2 <coprocessor_notexist>:
coprocessor_notexist():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:124
void coprocessor_notexist(){
ffff8000008008f2:	f3 0f 1e fa          	endbr64 
ffff8000008008f6:	55                   	push   rbp
ffff8000008008f7:	48 89 e5             	mov    rbp,rsp
ffff8000008008fa:	41 57                	push   r15
ffff8000008008fc:	48 83 ec 08          	sub    rsp,0x8
ffff800000800900:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800900 <coprocessor_notexist+0xe>
ffff800000800907:	49 bb 38 ea 01 00 00 	movabs r11,0x1ea38
ffff80000080090e:	00 00 00 
ffff800000800911:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:125
    asm("cli");
ffff800000800914:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:127
    //puts("coprocessor doesnt exist");
    eoi();
ffff800000800915:	49 89 d7             	mov    r15,rdx
ffff800000800918:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080091d:	48 b9 76 ae fe ff ff 	movabs rcx,0xfffffffffffeae76
ffff800000800924:	ff ff ff 
ffff800000800927:	48 01 d1             	add    rcx,rdx
ffff80000080092a:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:128
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff80000080092c:	fb                   	sti    
ffff80000080092d:	c9                   	leave  
ffff80000080092e:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:129
}
ffff800000800930:	90                   	nop
ffff800000800931:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800935:	c9                   	leave  
ffff800000800936:	c3                   	ret    

ffff800000800937 <double_ints>:
double_ints():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:130
void double_ints(){
ffff800000800937:	f3 0f 1e fa          	endbr64 
ffff80000080093b:	55                   	push   rbp
ffff80000080093c:	48 89 e5             	mov    rbp,rsp
ffff80000080093f:	41 57                	push   r15
ffff800000800941:	48 83 ec 08          	sub    rsp,0x8
ffff800000800945:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800945 <double_ints+0xe>
ffff80000080094c:	49 bb f3 e9 01 00 00 	movabs r11,0x1e9f3
ffff800000800953:	00 00 00 
ffff800000800956:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:131
    asm("cli");
ffff800000800959:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:133
    //puts("double interrupts");
    eoi();
ffff80000080095a:	49 89 d7             	mov    r15,rdx
ffff80000080095d:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800962:	48 b9 76 ae fe ff ff 	movabs rcx,0xfffffffffffeae76
ffff800000800969:	ff ff ff 
ffff80000080096c:	48 01 d1             	add    rcx,rdx
ffff80000080096f:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:134
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800971:	fb                   	sti    
ffff800000800972:	c9                   	leave  
ffff800000800973:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:135
}
ffff800000800975:	90                   	nop
ffff800000800976:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080097a:	c9                   	leave  
ffff80000080097b:	c3                   	ret    

ffff80000080097c <coprocessor_seg_overbound>:
coprocessor_seg_overbound():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:136
void coprocessor_seg_overbound(){
ffff80000080097c:	f3 0f 1e fa          	endbr64 
ffff800000800980:	55                   	push   rbp
ffff800000800981:	48 89 e5             	mov    rbp,rsp
ffff800000800984:	41 57                	push   r15
ffff800000800986:	48 83 ec 08          	sub    rsp,0x8
ffff80000080098a:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080098a <coprocessor_seg_overbound+0xe>
ffff800000800991:	49 bb ae e9 01 00 00 	movabs r11,0x1e9ae
ffff800000800998:	00 00 00 
ffff80000080099b:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:138
    //puts("coprocessfor seg overdound");
    eoi();
ffff80000080099e:	49 89 d7             	mov    r15,rdx
ffff8000008009a1:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008009a6:	48 b9 76 ae fe ff ff 	movabs rcx,0xfffffffffffeae76
ffff8000008009ad:	ff ff ff 
ffff8000008009b0:	48 01 d1             	add    rcx,rdx
ffff8000008009b3:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:139
    __asm__ volatile ("leave \r\n iretq");
ffff8000008009b5:	c9                   	leave  
ffff8000008009b6:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:140
}
ffff8000008009b8:	90                   	nop
ffff8000008009b9:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff8000008009bd:	c9                   	leave  
ffff8000008009be:	c3                   	ret    

ffff8000008009bf <invalid_tss>:
invalid_tss():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:141
void invalid_tss(){
ffff8000008009bf:	f3 0f 1e fa          	endbr64 
ffff8000008009c3:	55                   	push   rbp
ffff8000008009c4:	48 89 e5             	mov    rbp,rsp
ffff8000008009c7:	41 57                	push   r15
ffff8000008009c9:	48 83 ec 08          	sub    rsp,0x8
ffff8000008009cd:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff8000008009cd <invalid_tss+0xe>
ffff8000008009d4:	49 bb 6b e9 01 00 00 	movabs r11,0x1e96b
ffff8000008009db:	00 00 00 
ffff8000008009de:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:142
    asm("cli");
ffff8000008009e1:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:144
    //puts("invalid tss");
    eoi();
ffff8000008009e2:	49 89 d7             	mov    r15,rdx
ffff8000008009e5:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008009ea:	48 b9 76 ae fe ff ff 	movabs rcx,0xfffffffffffeae76
ffff8000008009f1:	ff ff ff 
ffff8000008009f4:	48 01 d1             	add    rcx,rdx
ffff8000008009f7:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:145
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff8000008009f9:	fb                   	sti    
ffff8000008009fa:	c9                   	leave  
ffff8000008009fb:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:146
}
ffff8000008009fd:	90                   	nop
ffff8000008009fe:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800a02:	c9                   	leave  
ffff800000800a03:	c3                   	ret    

ffff800000800a04 <segment_notexist>:
segment_notexist():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:147
void segment_notexist(){
ffff800000800a04:	f3 0f 1e fa          	endbr64 
ffff800000800a08:	55                   	push   rbp
ffff800000800a09:	48 89 e5             	mov    rbp,rsp
ffff800000800a0c:	41 57                	push   r15
ffff800000800a0e:	48 83 ec 08          	sub    rsp,0x8
ffff800000800a12:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800a12 <segment_notexist+0xe>
ffff800000800a19:	49 bb 26 e9 01 00 00 	movabs r11,0x1e926
ffff800000800a20:	00 00 00 
ffff800000800a23:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:148
    asm("cli");
ffff800000800a26:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:150
    //puts("seg nonexistent");
    eoi();
ffff800000800a27:	49 89 d7             	mov    r15,rdx
ffff800000800a2a:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800a2f:	48 b9 76 ae fe ff ff 	movabs rcx,0xfffffffffffeae76
ffff800000800a36:	ff ff ff 
ffff800000800a39:	48 01 d1             	add    rcx,rdx
ffff800000800a3c:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:151
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800a3e:	fb                   	sti    
ffff800000800a3f:	c9                   	leave  
ffff800000800a40:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:152
}
ffff800000800a42:	90                   	nop
ffff800000800a43:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800a47:	c9                   	leave  
ffff800000800a48:	c3                   	ret    

ffff800000800a49 <stackseg_overbound>:
stackseg_overbound():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:153
void stackseg_overbound(){
ffff800000800a49:	f3 0f 1e fa          	endbr64 
ffff800000800a4d:	55                   	push   rbp
ffff800000800a4e:	48 89 e5             	mov    rbp,rsp
ffff800000800a51:	41 57                	push   r15
ffff800000800a53:	48 83 ec 08          	sub    rsp,0x8
ffff800000800a57:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800a57 <stackseg_overbound+0xe>
ffff800000800a5e:	49 bb e1 e8 01 00 00 	movabs r11,0x1e8e1
ffff800000800a65:	00 00 00 
ffff800000800a68:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:154
    asm("cli");
ffff800000800a6b:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:156
    //puts("stack seg overbound");
    eoi();
ffff800000800a6c:	49 89 d7             	mov    r15,rdx
ffff800000800a6f:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800a74:	48 b9 76 ae fe ff ff 	movabs rcx,0xfffffffffffeae76
ffff800000800a7b:	ff ff ff 
ffff800000800a7e:	48 01 d1             	add    rcx,rdx
ffff800000800a81:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:157
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800a83:	fb                   	sti    
ffff800000800a84:	c9                   	leave  
ffff800000800a85:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:158
}
ffff800000800a87:	90                   	nop
ffff800000800a88:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800a8c:	c9                   	leave  
ffff800000800a8d:	c3                   	ret    

ffff800000800a8e <general_protect>:
general_protect():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:159
void general_protect(){
ffff800000800a8e:	f3 0f 1e fa          	endbr64 
ffff800000800a92:	55                   	push   rbp
ffff800000800a93:	48 89 e5             	mov    rbp,rsp
ffff800000800a96:	41 57                	push   r15
ffff800000800a98:	48 83 ec 18          	sub    rsp,0x18
ffff800000800a9c:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800a9c <general_protect+0xe>
ffff800000800aa3:	49 bb 9c e8 01 00 00 	movabs r11,0x1e89c
ffff800000800aaa:	00 00 00 
ffff800000800aad:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:161
    //print("general protect.");
    int err_code=0;
ffff800000800ab0:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:179
    //杀死问题进程
    del_proc(cur_proc);
    printf("killed the problem process.\n");
	printf("shell:>");
    switch_proc_tss(0); */
    eoi();
ffff800000800ab7:	49 89 d7             	mov    r15,rdx
ffff800000800aba:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800abf:	48 b9 76 ae fe ff ff 	movabs rcx,0xfffffffffffeae76
ffff800000800ac6:	ff ff ff 
ffff800000800ac9:	48 01 d1             	add    rcx,rdx
ffff800000800acc:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:180
    __asm__ volatile ("leave\r\n add $8,%rsp \r\n iretq");
ffff800000800ace:	c9                   	leave  
ffff800000800acf:	48 83 c4 08          	add    rsp,0x8
ffff800000800ad3:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:181
}
ffff800000800ad5:	90                   	nop
ffff800000800ad6:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800ada:	c9                   	leave  
ffff800000800adb:	c3                   	ret    

ffff800000800adc <coprocessor_err>:
coprocessor_err():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:183

void coprocessor_err(){
ffff800000800adc:	f3 0f 1e fa          	endbr64 
ffff800000800ae0:	55                   	push   rbp
ffff800000800ae1:	48 89 e5             	mov    rbp,rsp
ffff800000800ae4:	41 57                	push   r15
ffff800000800ae6:	48 83 ec 08          	sub    rsp,0x8
ffff800000800aea:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800aea <coprocessor_err+0xe>
ffff800000800af1:	49 bb 4e e8 01 00 00 	movabs r11,0x1e84e
ffff800000800af8:	00 00 00 
ffff800000800afb:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:184
    asm("cli");
ffff800000800afe:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:186
    //puts("coprocessor err");
    eoi();
ffff800000800aff:	49 89 d7             	mov    r15,rdx
ffff800000800b02:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800b07:	48 b9 76 ae fe ff ff 	movabs rcx,0xfffffffffffeae76
ffff800000800b0e:	ff ff ff 
ffff800000800b11:	48 01 d1             	add    rcx,rdx
ffff800000800b14:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:187
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800b16:	fb                   	sti    
ffff800000800b17:	c9                   	leave  
ffff800000800b18:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:188
}
ffff800000800b1a:	90                   	nop
ffff800000800b1b:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800b1f:	c9                   	leave  
ffff800000800b20:	c3                   	ret    

ffff800000800b21 <syscall>:
syscall():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:207

xchg rcx to r10

*/
int syscall(int a, int b, int c, int d, int e, int f)
{
ffff800000800b21:	f3 0f 1e fa          	endbr64 
ffff800000800b25:	55                   	push   rbp
ffff800000800b26:	48 89 e5             	mov    rbp,rsp
ffff800000800b29:	41 57                	push   r15
ffff800000800b2b:	53                   	push   rbx
ffff800000800b2c:	48 83 ec 30          	sub    rsp,0x30
ffff800000800b30:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000800b30 <syscall+0xf>
ffff800000800b37:	49 bb 08 e8 01 00 00 	movabs r11,0x1e808
ffff800000800b3e:	00 00 00 
ffff800000800b41:	4c 01 db             	add    rbx,r11
ffff800000800b44:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff800000800b47:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff800000800b4a:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff800000800b4d:	89 4d d0             	mov    DWORD PTR [rbp-0x30],ecx
ffff800000800b50:	44 89 45 cc          	mov    DWORD PTR [rbp-0x34],r8d
ffff800000800b54:	44 89 4d c8          	mov    DWORD PTR [rbp-0x38],r9d
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:209
    unsigned long num;
    asm volatile("":"=a"(num));//这样rax中存的参数就到这了
ffff800000800b58:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:210
    switch (num)
ffff800000800b5c:	48 83 7d e8 64       	cmp    QWORD PTR [rbp-0x18],0x64
ffff800000800b61:	0f 87 18 04 00 00    	ja     ffff800000800f7f <syscall+0x45e>
ffff800000800b67:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000800b6b:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000800b72:	00 
ffff800000800b73:	48 8d 05 26 a9 01 00 	lea    rax,[rip+0x1a926]        # ffff80000081b4a0 <dev_keyboard+0xc0>
ffff800000800b7a:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000800b7e:	48 8d 15 1b a9 01 00 	lea    rdx,[rip+0x1a91b]        # ffff80000081b4a0 <dev_keyboard+0xc0>
ffff800000800b85:	48 01 d0             	add    rax,rdx
ffff800000800b88:	3e ff e0             	notrack jmp rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:212
    {
        case 0:return reg_device(a);
ffff800000800b8b:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000800b8e:	48 98                	cdqe   
ffff800000800b90:	48 89 c7             	mov    rdi,rax
ffff800000800b93:	49 89 df             	mov    r15,rbx
ffff800000800b96:	48 b8 e6 5d fe ff ff 	movabs rax,0xfffffffffffe5de6
ffff800000800b9d:	ff ff ff 
ffff800000800ba0:	48 01 d8             	add    rax,rbx
ffff800000800ba3:	ff d0                	call   rax
ffff800000800ba5:	e9 d5 03 00 00       	jmp    ffff800000800f7f <syscall+0x45e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:213
        case 1:return dispose_device(a);
ffff800000800baa:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000800bad:	89 c7                	mov    edi,eax
ffff800000800baf:	49 89 df             	mov    r15,rbx
ffff800000800bb2:	48 b8 54 6b fe ff ff 	movabs rax,0xfffffffffffe6b54
ffff800000800bb9:	ff ff ff 
ffff800000800bbc:	48 01 d8             	add    rax,rbx
ffff800000800bbf:	ff d0                	call   rax
ffff800000800bc1:	e9 b9 03 00 00       	jmp    ffff800000800f7f <syscall+0x45e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:214
        case 2:return reg_driver(a);
ffff800000800bc6:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000800bc9:	48 98                	cdqe   
ffff800000800bcb:	48 89 c7             	mov    rdi,rax
ffff800000800bce:	49 89 df             	mov    r15,rbx
ffff800000800bd1:	48 b8 5e 61 fe ff ff 	movabs rax,0xfffffffffffe615e
ffff800000800bd8:	ff ff ff 
ffff800000800bdb:	48 01 d8             	add    rax,rbx
ffff800000800bde:	ff d0                	call   rax
ffff800000800be0:	e9 9a 03 00 00       	jmp    ffff800000800f7f <syscall+0x45e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:215
        case 3:return dispose_driver(a);
ffff800000800be5:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000800be8:	48 98                	cdqe   
ffff800000800bea:	48 89 c7             	mov    rdi,rax
ffff800000800bed:	49 89 df             	mov    r15,rbx
ffff800000800bf0:	48 b8 20 6c fe ff ff 	movabs rax,0xfffffffffffe6c20
ffff800000800bf7:	ff ff ff 
ffff800000800bfa:	48 01 d8             	add    rax,rbx
ffff800000800bfd:	ff d0                	call   rax
ffff800000800bff:	e9 7b 03 00 00       	jmp    ffff800000800f7f <syscall+0x45e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:216
        case 4:return call_drv_func(a,b,c);
ffff800000800c04:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000800c07:	48 98                	cdqe   
ffff800000800c09:	48 89 c2             	mov    rdx,rax
ffff800000800c0c:	8b 4d d8             	mov    ecx,DWORD PTR [rbp-0x28]
ffff800000800c0f:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000800c12:	89 ce                	mov    esi,ecx
ffff800000800c14:	89 c7                	mov    edi,eax
ffff800000800c16:	49 89 df             	mov    r15,rbx
ffff800000800c19:	48 b8 12 68 fe ff ff 	movabs rax,0xfffffffffffe6812
ffff800000800c20:	ff ff ff 
ffff800000800c23:	48 01 d8             	add    rax,rbx
ffff800000800c26:	ff d0                	call   rax
ffff800000800c28:	e9 52 03 00 00       	jmp    ffff800000800f7f <syscall+0x45e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:217
        case 5:return req_page_at(a,b);
ffff800000800c2d:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000800c30:	48 98                	cdqe   
ffff800000800c32:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
ffff800000800c35:	89 d6                	mov    esi,edx
ffff800000800c37:	48 89 c7             	mov    rdi,rax
ffff800000800c3a:	49 89 df             	mov    r15,rbx
ffff800000800c3d:	48 b8 57 3a fe ff ff 	movabs rax,0xfffffffffffe3a57
ffff800000800c44:	ff ff ff 
ffff800000800c47:	48 01 d8             	add    rax,rbx
ffff800000800c4a:	ff d0                	call   rax
ffff800000800c4c:	e9 2e 03 00 00       	jmp    ffff800000800f7f <syscall+0x45e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:218
        case 6:return free_page(a);
ffff800000800c51:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000800c54:	48 98                	cdqe   
ffff800000800c56:	48 89 c7             	mov    rdi,rax
ffff800000800c59:	49 89 df             	mov    r15,rbx
ffff800000800c5c:	48 b8 58 37 fe ff ff 	movabs rax,0xfffffffffffe3758
ffff800000800c63:	ff ff ff 
ffff800000800c66:	48 01 d8             	add    rax,rbx
ffff800000800c69:	ff d0                	call   rax
ffff800000800c6b:	e9 0f 03 00 00       	jmp    ffff800000800f7f <syscall+0x45e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:219
        case 7:return reg_proc(a, b, c);
ffff800000800c70:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000800c73:	48 98                	cdqe   
ffff800000800c75:	48 89 c2             	mov    rdx,rax
ffff800000800c78:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000800c7b:	48 98                	cdqe   
ffff800000800c7d:	48 89 c1             	mov    rcx,rax
ffff800000800c80:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000800c83:	48 98                	cdqe   
ffff800000800c85:	48 89 ce             	mov    rsi,rcx
ffff800000800c88:	48 89 c7             	mov    rdi,rax
ffff800000800c8b:	49 89 df             	mov    r15,rbx
ffff800000800c8e:	48 b8 f8 88 fe ff ff 	movabs rax,0xfffffffffffe88f8
ffff800000800c95:	ff ff ff 
ffff800000800c98:	48 01 d8             	add    rax,rbx
ffff800000800c9b:	ff d0                	call   rax
ffff800000800c9d:	e9 dd 02 00 00       	jmp    ffff800000800f7f <syscall+0x45e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:220
        case 8:del_proc(a);
ffff800000800ca2:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000800ca5:	89 c7                	mov    edi,eax
ffff800000800ca7:	49 89 df             	mov    r15,rbx
ffff800000800caa:	48 b8 a9 85 fe ff ff 	movabs rax,0xfffffffffffe85a9
ffff800000800cb1:	ff ff ff 
ffff800000800cb4:	48 01 d8             	add    rax,rbx
ffff800000800cb7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:221
        case 10:chk_vm(a,b);
ffff800000800cb9:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
ffff800000800cbc:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000800cbf:	89 d6                	mov    esi,edx
ffff800000800cc1:	89 c7                	mov    edi,eax
ffff800000800cc3:	49 89 df             	mov    r15,rbx
ffff800000800cc6:	48 b8 89 3b fe ff ff 	movabs rax,0xfffffffffffe3b89
ffff800000800ccd:	ff ff ff 
ffff800000800cd0:	48 01 d8             	add    rax,rbx
ffff800000800cd3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:222
        case 11:return sys_open(a,b);
ffff800000800cd5:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000800cd8:	48 98                	cdqe   
ffff800000800cda:	48 89 c2             	mov    rdx,rax
ffff800000800cdd:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000800ce0:	89 c6                	mov    esi,eax
ffff800000800ce2:	48 89 d7             	mov    rdi,rdx
ffff800000800ce5:	49 89 df             	mov    r15,rbx
ffff800000800ce8:	48 b8 16 d6 fe ff ff 	movabs rax,0xfffffffffffed616
ffff800000800cef:	ff ff ff 
ffff800000800cf2:	48 01 d8             	add    rax,rbx
ffff800000800cf5:	ff d0                	call   rax
ffff800000800cf7:	e9 83 02 00 00       	jmp    ffff800000800f7f <syscall+0x45e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:223
        case 12:return sys_close(a);
ffff800000800cfc:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000800cff:	89 c7                	mov    edi,eax
ffff800000800d01:	49 89 df             	mov    r15,rbx
ffff800000800d04:	48 b8 ca dc fe ff ff 	movabs rax,0xfffffffffffedcca
ffff800000800d0b:	ff ff ff 
ffff800000800d0e:	48 01 d8             	add    rax,rbx
ffff800000800d11:	ff d0                	call   rax
ffff800000800d13:	e9 67 02 00 00       	jmp    ffff800000800f7f <syscall+0x45e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:224
        case 13:return sys_read(a,b,c);
ffff800000800d18:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000800d1b:	48 63 d0             	movsxd rdx,eax
ffff800000800d1e:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000800d21:	48 98                	cdqe   
ffff800000800d23:	48 89 c1             	mov    rcx,rax
ffff800000800d26:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000800d29:	48 89 ce             	mov    rsi,rcx
ffff800000800d2c:	89 c7                	mov    edi,eax
ffff800000800d2e:	49 89 df             	mov    r15,rbx
ffff800000800d31:	48 b8 c1 dd fe ff ff 	movabs rax,0xfffffffffffeddc1
ffff800000800d38:	ff ff ff 
ffff800000800d3b:	48 01 d8             	add    rax,rbx
ffff800000800d3e:	ff d0                	call   rax
ffff800000800d40:	e9 3a 02 00 00       	jmp    ffff800000800f7f <syscall+0x45e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:225
        case 14:return sys_write(a,b,c);
ffff800000800d45:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000800d48:	48 63 d0             	movsxd rdx,eax
ffff800000800d4b:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000800d4e:	48 98                	cdqe   
ffff800000800d50:	48 89 c1             	mov    rcx,rax
ffff800000800d53:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000800d56:	48 89 ce             	mov    rsi,rcx
ffff800000800d59:	89 c7                	mov    edi,eax
ffff800000800d5b:	49 89 df             	mov    r15,rbx
ffff800000800d5e:	48 b8 8f de fe ff ff 	movabs rax,0xfffffffffffede8f
ffff800000800d65:	ff ff ff 
ffff800000800d68:	48 01 d8             	add    rax,rbx
ffff800000800d6b:	ff d0                	call   rax
ffff800000800d6d:	e9 0d 02 00 00       	jmp    ffff800000800f7f <syscall+0x45e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:226
        case 15:return sys_lseek(a,b,c);
ffff800000800d72:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000800d75:	48 63 c8             	movsxd rcx,eax
ffff800000800d78:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff800000800d7b:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000800d7e:	48 89 ce             	mov    rsi,rcx
ffff800000800d81:	89 c7                	mov    edi,eax
ffff800000800d83:	49 89 df             	mov    r15,rbx
ffff800000800d86:	48 b8 5d df fe ff ff 	movabs rax,0xfffffffffffedf5d
ffff800000800d8d:	ff ff ff 
ffff800000800d90:	48 01 d8             	add    rax,rbx
ffff800000800d93:	ff d0                	call   rax
ffff800000800d95:	e9 e5 01 00 00       	jmp    ffff800000800f7f <syscall+0x45e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:227
        case 16:return sys_tell(a);
ffff800000800d9a:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000800d9d:	89 c7                	mov    edi,eax
ffff800000800d9f:	49 89 df             	mov    r15,rbx
ffff800000800da2:	48 b8 80 41 fe ff ff 	movabs rax,0xfffffffffffe4180
ffff800000800da9:	ff ff ff 
ffff800000800dac:	48 01 d8             	add    rax,rbx
ffff800000800daf:	ff d0                	call   rax
ffff800000800db1:	e9 c9 01 00 00       	jmp    ffff800000800f7f <syscall+0x45e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:228
        case 17:return reg_vol(a,b,c);
ffff800000800db6:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff800000800db9:	8b 4d d8             	mov    ecx,DWORD PTR [rbp-0x28]
ffff800000800dbc:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000800dbf:	89 ce                	mov    esi,ecx
ffff800000800dc1:	89 c7                	mov    edi,eax
ffff800000800dc3:	49 89 df             	mov    r15,rbx
ffff800000800dc6:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800dcb:	48 b9 ec 3f fe ff ff 	movabs rcx,0xfffffffffffe3fec
ffff800000800dd2:	ff ff ff 
ffff800000800dd5:	48 01 d9             	add    rcx,rbx
ffff800000800dd8:	ff d1                	call   rcx
ffff800000800dda:	e9 a0 01 00 00       	jmp    ffff800000800f7f <syscall+0x45e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:229
        case 18:return free_vol(a);
ffff800000800ddf:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000800de2:	89 c7                	mov    edi,eax
ffff800000800de4:	49 89 df             	mov    r15,rbx
ffff800000800de7:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800dec:	48 ba b1 3f fe ff ff 	movabs rdx,0xfffffffffffe3fb1
ffff800000800df3:	ff ff ff 
ffff800000800df6:	48 01 da             	add    rdx,rbx
ffff800000800df9:	ff d2                	call   rdx
ffff800000800dfb:	e9 7f 01 00 00       	jmp    ffff800000800f7f <syscall+0x45e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:230
        case 19:return execute(a, NULL);
ffff800000800e00:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000800e03:	48 98                	cdqe   
ffff800000800e05:	be 00 00 00 00       	mov    esi,0x0
ffff800000800e0a:	48 89 c7             	mov    rdi,rax
ffff800000800e0d:	49 89 df             	mov    r15,rbx
ffff800000800e10:	48 b8 0c b2 fe ff ff 	movabs rax,0xfffffffffffeb20c
ffff800000800e17:	ff ff ff 
ffff800000800e1a:	48 01 d8             	add    rax,rbx
ffff800000800e1d:	ff d0                	call   rax
ffff800000800e1f:	e9 5b 01 00 00       	jmp    ffff800000800f7f <syscall+0x45e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:231
        case SYSCALL_EXIT:return sys_exit(a);
ffff800000800e24:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000800e27:	89 c7                	mov    edi,eax
ffff800000800e29:	49 89 df             	mov    r15,rbx
ffff800000800e2c:	48 b8 7e 88 fe ff ff 	movabs rax,0xfffffffffffe887e
ffff800000800e33:	ff ff ff 
ffff800000800e36:	48 01 d8             	add    rax,rbx
ffff800000800e39:	ff d0                	call   rax
ffff800000800e3b:	e9 3f 01 00 00       	jmp    ffff800000800f7f <syscall+0x45e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:232
        case SYSCALL_CALL:return exec_call(a);
ffff800000800e40:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000800e43:	48 98                	cdqe   
ffff800000800e45:	48 89 c7             	mov    rdi,rax
ffff800000800e48:	49 89 df             	mov    r15,rbx
ffff800000800e4b:	48 b8 fd b4 fe ff ff 	movabs rax,0xfffffffffffeb4fd
ffff800000800e52:	ff ff ff 
ffff800000800e55:	48 01 d8             	add    rax,rbx
ffff800000800e58:	ff d0                	call   rax
ffff800000800e5a:	e9 20 01 00 00       	jmp    ffff800000800f7f <syscall+0x45e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:233
        case SYSCALL_MKFIFO:return sys_mkfifo(a);
ffff800000800e5f:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000800e62:	89 c7                	mov    edi,eax
ffff800000800e64:	49 89 df             	mov    r15,rbx
ffff800000800e67:	48 b8 70 3d fe ff ff 	movabs rax,0xfffffffffffe3d70
ffff800000800e6e:	ff ff ff 
ffff800000800e71:	48 01 d8             	add    rax,rbx
ffff800000800e74:	ff d0                	call   rax
ffff800000800e76:	e9 04 01 00 00       	jmp    ffff800000800f7f <syscall+0x45e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:234
        case SYSCALL_MALLOC:return sys_malloc(a);
ffff800000800e7b:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000800e7e:	89 c7                	mov    edi,eax
ffff800000800e80:	49 89 df             	mov    r15,rbx
ffff800000800e83:	48 b8 dc 8b fe ff ff 	movabs rax,0xfffffffffffe8bdc
ffff800000800e8a:	ff ff ff 
ffff800000800e8d:	48 01 d8             	add    rax,rbx
ffff800000800e90:	ff d0                	call   rax
ffff800000800e92:	e9 e8 00 00 00       	jmp    ffff800000800f7f <syscall+0x45e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:235
        case SYSCALL_FREE:return sys_free(a);
ffff800000800e97:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000800e9a:	89 c7                	mov    edi,eax
ffff800000800e9c:	49 89 df             	mov    r15,rbx
ffff800000800e9f:	48 b8 d6 8d fe ff ff 	movabs rax,0xfffffffffffe8dd6
ffff800000800ea6:	ff ff ff 
ffff800000800ea9:	48 01 d8             	add    rax,rbx
ffff800000800eac:	ff d0                	call   rax
ffff800000800eae:	e9 cc 00 00 00       	jmp    ffff800000800f7f <syscall+0x45e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:236
        case SYSCALL_KB_READC:return sys_analyse_key();
ffff800000800eb3:	49 89 df             	mov    r15,rbx
ffff800000800eb6:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800ebb:	48 ba a8 eb fe ff ff 	movabs rdx,0xfffffffffffeeba8
ffff800000800ec2:	ff ff ff 
ffff800000800ec5:	48 01 da             	add    rdx,rbx
ffff800000800ec8:	ff d2                	call   rdx
ffff800000800eca:	0f be c0             	movsx  eax,al
ffff800000800ecd:	e9 ad 00 00 00       	jmp    ffff800000800f7f <syscall+0x45e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:237
        case SYSCALL_FIND_DEV:return sys_find_dev(a);
ffff800000800ed2:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000800ed5:	48 98                	cdqe   
ffff800000800ed7:	48 89 c7             	mov    rdi,rax
ffff800000800eda:	49 89 df             	mov    r15,rbx
ffff800000800edd:	48 b8 de 62 fe ff ff 	movabs rax,0xfffffffffffe62de
ffff800000800ee4:	ff ff ff 
ffff800000800ee7:	48 01 d8             	add    rax,rbx
ffff800000800eea:	ff d0                	call   rax
ffff800000800eec:	e9 8e 00 00 00       	jmp    ffff800000800f7f <syscall+0x45e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:238
        case SYSCALL_FORK:return sys_fork();
ffff800000800ef1:	49 89 df             	mov    r15,rbx
ffff800000800ef4:	48 b8 6f 92 fe ff ff 	movabs rax,0xfffffffffffe926f
ffff800000800efb:	ff ff ff 
ffff800000800efe:	48 01 d8             	add    rax,rbx
ffff800000800f01:	ff d0                	call   rax
ffff800000800f03:	eb 7a                	jmp    ffff800000800f7f <syscall+0x45e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:239
        case SYSCALL_EXECVE:return sys_execve(a,b);
ffff800000800f05:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000800f08:	48 98                	cdqe   
ffff800000800f0a:	48 89 c2             	mov    rdx,rax
ffff800000800f0d:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000800f10:	48 98                	cdqe   
ffff800000800f12:	48 89 d6             	mov    rsi,rdx
ffff800000800f15:	48 89 c7             	mov    rdi,rax
ffff800000800f18:	49 89 df             	mov    r15,rbx
ffff800000800f1b:	48 b8 71 b3 fe ff ff 	movabs rax,0xfffffffffffeb371
ffff800000800f22:	ff ff ff 
ffff800000800f25:	48 01 d8             	add    rax,rbx
ffff800000800f28:	ff d0                	call   rax
ffff800000800f2a:	eb 53                	jmp    ffff800000800f7f <syscall+0x45e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:240
        case SYSCALL_OPERATE_DEV:return sys_operate_dev(a,b,c);
ffff800000800f2c:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000800f2f:	48 98                	cdqe   
ffff800000800f31:	48 89 c2             	mov    rdx,rax
ffff800000800f34:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000800f37:	48 98                	cdqe   
ffff800000800f39:	48 89 c1             	mov    rcx,rax
ffff800000800f3c:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000800f3f:	89 c6                	mov    esi,eax
ffff800000800f41:	48 89 cf             	mov    rdi,rcx
ffff800000800f44:	49 89 df             	mov    r15,rbx
ffff800000800f47:	48 b8 bc 63 fe ff ff 	movabs rax,0xfffffffffffe63bc
ffff800000800f4e:	ff ff ff 
ffff800000800f51:	48 01 d8             	add    rax,rbx
ffff800000800f54:	ff d0                	call   rax
ffff800000800f56:	eb 27                	jmp    ffff800000800f7f <syscall+0x45e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:241
        case SYSCALL_WAIT:return sys_wait(a,b,c);
ffff800000800f58:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000800f5b:	48 98                	cdqe   
ffff800000800f5d:	48 89 c1             	mov    rcx,rax
ffff800000800f60:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff800000800f63:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000800f66:	48 89 ce             	mov    rsi,rcx
ffff800000800f69:	89 c7                	mov    edi,eax
ffff800000800f6b:	49 89 df             	mov    r15,rbx
ffff800000800f6e:	48 b8 a6 e0 fe ff ff 	movabs rax,0xfffffffffffee0a6
ffff800000800f75:	ff ff ff 
ffff800000800f78:	48 01 d8             	add    rax,rbx
ffff800000800f7b:	ff d0                	call   rax
ffff800000800f7d:	eb 00                	jmp    ffff800000800f7f <syscall+0x45e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:247
    }
    // __asm__ volatile("mov %0,%%eax\r\n mov %1,%%ebx\r\n mov %2,%%ecx\r\n mov %3,%%edx\r\n mov %4,%%esi\r\n mov %5,%%edi"\
    // ::"m"(func),"m"(a),"m"(b),"m"(c),"m"(d),"m"(e));
    // __asm__ volatile("int $0x80\r\n leave\r\n ret");

}
ffff800000800f7f:	48 83 c4 30          	add    rsp,0x30
ffff800000800f83:	5b                   	pop    rbx
ffff800000800f84:	41 5f                	pop    r15
ffff800000800f86:	5d                   	pop    rbp
ffff800000800f87:	c3                   	ret    

ffff800000800f88 <wrmsr>:
wrmsr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:249
void wrmsr(unsigned long address,unsigned long value)
{
ffff800000800f88:	f3 0f 1e fa          	endbr64 
ffff800000800f8c:	55                   	push   rbp
ffff800000800f8d:	48 89 e5             	mov    rbp,rsp
ffff800000800f90:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000800f90 <wrmsr+0x8>
ffff800000800f97:	49 bb a8 e3 01 00 00 	movabs r11,0x1e3a8
ffff800000800f9e:	00 00 00 
ffff800000800fa1:	4c 01 d8             	add    rax,r11
ffff800000800fa4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000800fa8:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:250
    __asm__ __volatile__	("wrmsr	\n\t"::"d"(value >> 32),"a"(value & 0xffffffff),"c"(address):"memory");
ffff800000800fac:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000800fb0:	48 c1 e8 20          	shr    rax,0x20
ffff800000800fb4:	48 89 c2             	mov    rdx,rax
ffff800000800fb7:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000800fbb:	89 c0                	mov    eax,eax
ffff800000800fbd:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
ffff800000800fc1:	0f 30                	wrmsr  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:251
ffff800000800fc3:	90                   	nop
ffff800000800fc4:	5d                   	pop    rbp
ffff800000800fc5:	c3                   	ret    

ffff800000800fc6 <main>:
main():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:23
#include "fcntl.h"
#include "exe.h"

int manage_proc_lock=1;
void main(unsigned int magic,void* addr)
{
ffff800000800fc6:	f3 0f 1e fa          	endbr64 
ffff800000800fca:	55                   	push   rbp
ffff800000800fcb:	48 89 e5             	mov    rbp,rsp
ffff800000800fce:	41 57                	push   r15
ffff800000800fd0:	53                   	push   rbx
ffff800000800fd1:	48 83 ec 60          	sub    rsp,0x60
ffff800000800fd5:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000800fd5 <main+0xf>
ffff800000800fdc:	49 bb 63 e3 01 00 00 	movabs r11,0x1e363
ffff800000800fe3:	00 00 00 
ffff800000800fe6:	4c 01 db             	add    rbx,r11
ffff800000800fe9:	89 7d 9c             	mov    DWORD PTR [rbp-0x64],edi
ffff800000800fec:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:25

    struct multiboot_header* mbi=0ul;
ffff800000800ff0:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff800000800ff7:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:26
    mbi=(struct multiboot_header*)addr;
ffff800000800ff8:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000800ffc:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:27
    init_logging();
ffff800000801000:	49 89 df             	mov    r15,rbx
ffff800000801003:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801008:	48 ba c5 21 fe ff ff 	movabs rdx,0xfffffffffffe21c5
ffff80000080100f:	ff ff ff 
ffff800000801012:	48 01 da             	add    rdx,rbx
ffff800000801015:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:37
    }
    //获取tags
    struct multiboot_tag *tag;

    //先初始化串口，保证输出最基本的调试信息
    init_com(PORT_COM1);
ffff800000801017:	bf f8 03 00 00       	mov    edi,0x3f8
ffff80000080101c:	49 89 df             	mov    r15,rbx
ffff80000080101f:	48 b8 d9 37 ff ff ff 	movabs rax,0xffffffffffff37d9
ffff800000801026:	ff ff ff 
ffff800000801029:	48 01 d8             	add    rax,rbx
ffff80000080102c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:38
    comprintf("\rgamessis os loaded.\r\n");
ffff80000080102e:	48 b8 90 c4 ff ff ff 	movabs rax,0xffffffffffffc490
ffff800000801035:	ff ff ff 
ffff800000801038:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080103c:	48 89 c7             	mov    rdi,rax
ffff80000080103f:	49 89 df             	mov    r15,rbx
ffff800000801042:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801047:	48 ba 05 3a ff ff ff 	movabs rdx,0xffffffffffff3a05
ffff80000080104e:	ff ff ff 
ffff800000801051:	48 01 da             	add    rdx,rbx
ffff800000801054:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:40
	unsigned size;
    size = *(unsigned long*)addr;
ffff800000801056:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080105a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080105d:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:42
//    //printf("Announced mbi size 0x%x\n", size);
	for (tag = (struct multiboot_tag *)(addr + 8);
ffff800000801060:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000801064:	48 83 c0 08          	add    rax,0x8
ffff800000801068:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff80000080106c:	e9 86 02 00 00       	jmp    ffff8000008012f7 <main+0x331>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:47
		 tag->type != MULTIBOOT_TAG_TYPE_END;
		 tag = (struct multiboot_tag *)((u8 *)tag + ((tag->size + 7) & ~7)))
	{
		//printf("Tag 0x%x, Size 0x%x\n", tag->type, tag->size);
        if(tag->type==MULTIBOOT_TAG_TYPE_BASIC_MEMINFO)
ffff800000801071:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801075:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000801077:	83 f8 04             	cmp    eax,0x4
ffff80000080107a:	75 20                	jne    ffff80000080109c <main+0xd6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:48
            set_high_mem_base(((struct multiboot_tag_basic_meminfo *)tag)->mem_lower);
ffff80000080107c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801080:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000801083:	89 c7                	mov    edi,eax
ffff800000801085:	49 89 df             	mov    r15,rbx
ffff800000801088:	48 b8 ef 2a fe ff ff 	movabs rax,0xfffffffffffe2aef
ffff80000080108f:	ff ff ff 
ffff800000801092:	48 01 d8             	add    rax,rbx
ffff800000801095:	ff d0                	call   rax
ffff800000801097:	e9 48 02 00 00       	jmp    ffff8000008012e4 <main+0x31e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:49
        else if(tag->type==MULTIBOOT_TAG_TYPE_MMAP){
ffff80000080109c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008010a0:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008010a2:	83 f8 06             	cmp    eax,0x6
ffff8000008010a5:	75 6d                	jne    ffff800000801114 <main+0x14e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:51

            for (multiboot_memory_map_t * mmap = ((struct multiboot_tag_mmap *)tag)->entries;
ffff8000008010a7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008010ab:	48 83 c0 10          	add    rax,0x10
ffff8000008010af:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffff8000008010b3:	eb 44                	jmp    ffff8000008010f9 <main+0x133>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:55
                 (multiboot_uint8_t *)mmap < (multiboot_uint8_t *)tag + tag->size;
                 mmap = (multiboot_memory_map_t *)((unsigned long)mmap + ((struct multiboot_tag_mmap *)tag)->entry_size))
            {
                set_mem_area(mmap->addr,mmap->len,mmap->type);
ffff8000008010b5:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008010b9:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff8000008010bc:	89 c2                	mov    edx,eax
ffff8000008010be:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008010c2:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
ffff8000008010c6:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008010ca:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008010cd:	48 89 ce             	mov    rsi,rcx
ffff8000008010d0:	48 89 c7             	mov    rdi,rax
ffff8000008010d3:	49 89 df             	mov    r15,rbx
ffff8000008010d6:	48 b8 24 2b fe ff ff 	movabs rax,0xfffffffffffe2b24
ffff8000008010dd:	ff ff ff 
ffff8000008010e0:	48 01 d8             	add    rax,rbx
ffff8000008010e3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:53
                 mmap = (multiboot_memory_map_t *)((unsigned long)mmap + ((struct multiboot_tag_mmap *)tag)->entry_size))
ffff8000008010e5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008010e9:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff8000008010ec:	89 c2                	mov    edx,eax
ffff8000008010ee:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008010f2:	48 01 d0             	add    rax,rdx
ffff8000008010f5:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:52
                 (multiboot_uint8_t *)mmap < (multiboot_uint8_t *)tag + tag->size;
ffff8000008010f9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008010fd:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff800000801100:	89 c2                	mov    edx,eax
ffff800000801102:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801106:	48 01 d0             	add    rax,rdx
ffff800000801109:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
ffff80000080110d:	72 a6                	jb     ffff8000008010b5 <main+0xef>
ffff80000080110f:	e9 d0 01 00 00       	jmp    ffff8000008012e4 <main+0x31e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:59
            }

        }
        else if (tag->type==MULTIBOOT_TAG_TYPE_FRAMEBUFFER){
ffff800000801114:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801118:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080111a:	83 f8 08             	cmp    eax,0x8
ffff80000080111d:	0f 85 c1 01 00 00    	jne    ffff8000008012e4 <main+0x31e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:63

            multiboot_uint32_t color;
            unsigned i;
            struct multiboot_tag_framebuffer *tagfb = (struct multiboot_tag_framebuffer *)tag;
ffff800000801123:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801127:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:64
            void *fb = (void *) FRAMEBUFFER_ADDR;
ffff80000080112b:	48 b8 00 00 00 40 00 	movabs rax,0xffff800040000000
ffff800000801132:	80 ff ff 
ffff800000801135:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:65
            set_framebuffer(*tagfb);
ffff800000801139:	48 83 ec 08          	sub    rsp,0x8
ffff80000080113d:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801141:	ff 70 20             	push   QWORD PTR [rax+0x20]
ffff800000801144:	ff 70 18             	push   QWORD PTR [rax+0x18]
ffff800000801147:	ff 70 10             	push   QWORD PTR [rax+0x10]
ffff80000080114a:	ff 70 08             	push   QWORD PTR [rax+0x8]
ffff80000080114d:	ff 30                	push   QWORD PTR [rax]
ffff80000080114f:	49 89 df             	mov    r15,rbx
ffff800000801152:	48 b8 74 c3 fe ff ff 	movabs rax,0xfffffffffffec374
ffff800000801159:	ff ff ff 
ffff80000080115c:	48 01 d8             	add    rax,rbx
ffff80000080115f:	ff d0                	call   rax
ffff800000801161:	48 83 c4 30          	add    rsp,0x30
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:67

            switch (tagfb->common.framebuffer_type)
ffff800000801165:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801169:	0f b6 40 1d          	movzx  eax,BYTE PTR [rax+0x1d]
ffff80000080116d:	0f b6 c0             	movzx  eax,al
ffff800000801170:	83 f8 02             	cmp    eax,0x2
ffff800000801173:	0f 84 5a 01 00 00    	je     ffff8000008012d3 <main+0x30d>
ffff800000801179:	83 f8 02             	cmp    eax,0x2
ffff80000080117c:	0f 8f 5a 01 00 00    	jg     ffff8000008012dc <main+0x316>
ffff800000801182:	85 c0                	test   eax,eax
ffff800000801184:	74 0e                	je     ffff800000801194 <main+0x1ce>
ffff800000801186:	83 f8 01             	cmp    eax,0x1
ffff800000801189:	0f 84 15 01 00 00    	je     ffff8000008012a4 <main+0x2de>
ffff80000080118f:	e9 48 01 00 00       	jmp    ffff8000008012dc <main+0x316>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:74
                case MULTIBOOT_FRAMEBUFFER_TYPE_INDEXED:
                {
                    unsigned best_distance, distance;
                    struct multiboot_color *palette;

                    palette = tagfb->framebuffer_palette;
ffff800000801194:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801198:	48 83 c0 22          	add    rax,0x22
ffff80000080119c:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:76

                    color = 0;
ffff8000008011a0:	c7 45 b4 00 00 00 00 	mov    DWORD PTR [rbp-0x4c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:77
                    best_distance = 4 * 256 * 256;
ffff8000008011a7:	c7 45 d8 00 00 04 00 	mov    DWORD PTR [rbp-0x28],0x40000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:79

                    for (i = 0; i < tagfb->framebuffer_palette_num_colors; i++)
ffff8000008011ae:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
ffff8000008011b5:	e9 d4 00 00 00       	jmp    ffff80000080128e <main+0x2c8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:81
                    {
                        distance = (0xff - palette[i].blue) * (0xff - palette[i].blue) + palette[i].red * palette[i].red + palette[i].green * palette[i].green;
ffff8000008011ba:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff8000008011bd:	48 89 d0             	mov    rax,rdx
ffff8000008011c0:	48 01 c0             	add    rax,rax
ffff8000008011c3:	48 01 c2             	add    rdx,rax
ffff8000008011c6:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008011ca:	48 01 d0             	add    rax,rdx
ffff8000008011cd:	0f b6 40 02          	movzx  eax,BYTE PTR [rax+0x2]
ffff8000008011d1:	0f b6 c0             	movzx  eax,al
ffff8000008011d4:	ba ff 00 00 00       	mov    edx,0xff
ffff8000008011d9:	89 d1                	mov    ecx,edx
ffff8000008011db:	29 c1                	sub    ecx,eax
ffff8000008011dd:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff8000008011e0:	48 89 d0             	mov    rax,rdx
ffff8000008011e3:	48 01 c0             	add    rax,rax
ffff8000008011e6:	48 01 c2             	add    rdx,rax
ffff8000008011e9:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008011ed:	48 01 d0             	add    rax,rdx
ffff8000008011f0:	0f b6 40 02          	movzx  eax,BYTE PTR [rax+0x2]
ffff8000008011f4:	0f b6 d0             	movzx  edx,al
ffff8000008011f7:	b8 ff 00 00 00       	mov    eax,0xff
ffff8000008011fc:	29 d0                	sub    eax,edx
ffff8000008011fe:	89 ce                	mov    esi,ecx
ffff800000801200:	0f af f0             	imul   esi,eax
ffff800000801203:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000801206:	48 89 d0             	mov    rax,rdx
ffff800000801209:	48 01 c0             	add    rax,rax
ffff80000080120c:	48 01 c2             	add    rdx,rax
ffff80000080120f:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000801213:	48 01 d0             	add    rax,rdx
ffff800000801216:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801219:	0f b6 c8             	movzx  ecx,al
ffff80000080121c:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080121f:	48 89 d0             	mov    rax,rdx
ffff800000801222:	48 01 c0             	add    rax,rax
ffff800000801225:	48 01 c2             	add    rdx,rax
ffff800000801228:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080122c:	48 01 d0             	add    rax,rdx
ffff80000080122f:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801232:	0f b6 c0             	movzx  eax,al
ffff800000801235:	0f af c1             	imul   eax,ecx
ffff800000801238:	01 c6                	add    esi,eax
ffff80000080123a:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080123d:	48 89 d0             	mov    rax,rdx
ffff800000801240:	48 01 c0             	add    rax,rax
ffff800000801243:	48 01 c2             	add    rdx,rax
ffff800000801246:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080124a:	48 01 d0             	add    rax,rdx
ffff80000080124d:	0f b6 40 01          	movzx  eax,BYTE PTR [rax+0x1]
ffff800000801251:	0f b6 c8             	movzx  ecx,al
ffff800000801254:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000801257:	48 89 d0             	mov    rax,rdx
ffff80000080125a:	48 01 c0             	add    rax,rax
ffff80000080125d:	48 01 c2             	add    rdx,rax
ffff800000801260:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000801264:	48 01 d0             	add    rax,rdx
ffff800000801267:	0f b6 40 01          	movzx  eax,BYTE PTR [rax+0x1]
ffff80000080126b:	0f b6 c0             	movzx  eax,al
ffff80000080126e:	0f af c1             	imul   eax,ecx
ffff800000801271:	01 f0                	add    eax,esi
ffff800000801273:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:82
                        if (distance < best_distance)
ffff800000801276:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
ffff800000801279:	3b 45 d8             	cmp    eax,DWORD PTR [rbp-0x28]
ffff80000080127c:	73 0c                	jae    ffff80000080128a <main+0x2c4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:84
                        {
                            color = i;
ffff80000080127e:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000801281:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:85
                            best_distance = distance;
ffff800000801284:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
ffff800000801287:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:79 (discriminator 2)
                    for (i = 0; i < tagfb->framebuffer_palette_num_colors; i++)
ffff80000080128a:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:79 (discriminator 1)
ffff80000080128e:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801292:	0f b7 40 20          	movzx  eax,WORD PTR [rax+0x20]
ffff800000801296:	0f b7 c0             	movzx  eax,ax
ffff800000801299:	39 45 dc             	cmp    DWORD PTR [rbp-0x24],eax
ffff80000080129c:	0f 82 18 ff ff ff    	jb     ffff8000008011ba <main+0x1f4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:89
                        }
                    }
                }
                    break;
ffff8000008012a2:	eb 40                	jmp    ffff8000008012e4 <main+0x31e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:92

                case MULTIBOOT_FRAMEBUFFER_TYPE_RGB:
                    color = ((1 << tagfb->framebuffer_blue_mask_size) - 1) << tagfb->framebuffer_blue_field_position;
ffff8000008012a4:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008012a8:	0f b6 40 25          	movzx  eax,BYTE PTR [rax+0x25]
ffff8000008012ac:	0f b6 c0             	movzx  eax,al
ffff8000008012af:	ba 01 00 00 00       	mov    edx,0x1
ffff8000008012b4:	89 c1                	mov    ecx,eax
ffff8000008012b6:	d3 e2                	shl    edx,cl
ffff8000008012b8:	89 d0                	mov    eax,edx
ffff8000008012ba:	8d 50 ff             	lea    edx,[rax-0x1]
ffff8000008012bd:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008012c1:	0f b6 40 24          	movzx  eax,BYTE PTR [rax+0x24]
ffff8000008012c5:	0f b6 c0             	movzx  eax,al
ffff8000008012c8:	89 c1                	mov    ecx,eax
ffff8000008012ca:	d3 e2                	shl    edx,cl
ffff8000008012cc:	89 d0                	mov    eax,edx
ffff8000008012ce:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:93
                    break;
ffff8000008012d1:	eb 11                	jmp    ffff8000008012e4 <main+0x31e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:96

                case MULTIBOOT_FRAMEBUFFER_TYPE_EGA_TEXT:
                    color = '\\' | 0x0100;
ffff8000008012d3:	c7 45 b4 5c 01 00 00 	mov    DWORD PTR [rbp-0x4c],0x15c
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:97
                    break;
ffff8000008012da:	eb 08                	jmp    ffff8000008012e4 <main+0x31e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:100

                default:
                    color = 0xffffffff;
ffff8000008012dc:	c7 45 b4 ff ff ff ff 	mov    DWORD PTR [rbp-0x4c],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:101
                    break;
ffff8000008012e3:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:44
		 tag = (struct multiboot_tag *)((u8 *)tag + ((tag->size + 7) & ~7)))
ffff8000008012e4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008012e8:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff8000008012eb:	83 c0 07             	add    eax,0x7
ffff8000008012ee:	89 c0                	mov    eax,eax
ffff8000008012f0:	83 e0 f8             	and    eax,0xfffffff8
ffff8000008012f3:	48 01 45 e8          	add    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:43
		 tag->type != MULTIBOOT_TAG_TYPE_END;
ffff8000008012f7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008012fb:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008012fd:	85 c0                	test   eax,eax
ffff8000008012ff:	0f 85 6c fd ff ff    	jne    ffff800000801071 <main+0xab>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:195

			break;
		}
		}*/
	}
	tag = (struct multiboot_tag *)((multiboot_uint8_t *)tag + ((tag->size + 7) & ~7));
ffff800000801305:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801309:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff80000080130c:	83 c0 07             	add    eax,0x7
ffff80000080130f:	89 c0                	mov    eax,eax
ffff800000801311:	83 e0 f8             	and    eax,0xfffffff8
ffff800000801314:	48 01 45 e8          	add    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:196
    init_memory();
ffff800000801318:	49 89 df             	mov    r15,rbx
ffff80000080131b:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801320:	48 ba 90 32 fe ff ff 	movabs rdx,0xfffffffffffe3290
ffff800000801327:	ff ff ff 
ffff80000080132a:	48 01 da             	add    rdx,rbx
ffff80000080132d:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:197
    init_framebuffer();
ffff80000080132f:	49 89 df             	mov    r15,rbx
ffff800000801332:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801337:	48 ba 80 c0 fe ff ff 	movabs rdx,0xfffffffffffec080
ffff80000080133e:	ff ff ff 
ffff800000801341:	48 01 da             	add    rdx,rbx
ffff800000801344:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:199
	//printf("Total mbi size 0x%x\n", (unsigned)tag - addr);
	char disk_count=*(char*)0x475;
ffff800000801346:	b8 75 04 00 00       	mov    eax,0x475
ffff80000080134b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080134e:	88 45 cb             	mov    BYTE PTR [rbp-0x35],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:201
	//printf("disk count:%d\n",disk_count);
    init_font();
ffff800000801351:	49 89 df             	mov    r15,rbx
ffff800000801354:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801359:	48 ba bf c1 fe ff ff 	movabs rdx,0xfffffffffffec1bf
ffff800000801360:	ff ff ff 
ffff800000801363:	48 01 da             	add    rdx,rbx
ffff800000801366:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:204
    //初始化区域
    //fill_rect(0,0,100,100,255);
    print("gamessis os loaded.\nkernel:>");
ffff800000801368:	48 b8 a7 c4 ff ff ff 	movabs rax,0xffffffffffffc4a7
ffff80000080136f:	ff ff ff 
ffff800000801372:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000801376:	48 89 c7             	mov    rdi,rax
ffff800000801379:	49 89 df             	mov    r15,rbx
ffff80000080137c:	48 b8 db c8 fe ff ff 	movabs rax,0xfffffffffffec8db
ffff800000801383:	ff ff ff 
ffff800000801386:	48 01 d8             	add    rax,rbx
ffff800000801389:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:205
    init_int();
ffff80000080138b:	49 89 df             	mov    r15,rbx
ffff80000080138e:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801393:	48 ba c8 0c fe ff ff 	movabs rdx,0xfffffffffffe0cc8
ffff80000080139a:	ff ff ff 
ffff80000080139d:	48 01 da             	add    rdx,rbx
ffff8000008013a0:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:206
    print("int loaded.\n");
ffff8000008013a2:	48 b8 c4 c4 ff ff ff 	movabs rax,0xffffffffffffc4c4
ffff8000008013a9:	ff ff ff 
ffff8000008013ac:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008013b0:	48 89 c7             	mov    rdi,rax
ffff8000008013b3:	49 89 df             	mov    r15,rbx
ffff8000008013b6:	48 b8 db c8 fe ff ff 	movabs rax,0xfffffffffffec8db
ffff8000008013bd:	ff ff ff 
ffff8000008013c0:	48 01 d8             	add    rax,rbx
ffff8000008013c3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:208
//    set_tss(0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000);
	init_paging();
ffff8000008013c5:	49 89 df             	mov    r15,rbx
ffff8000008013c8:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008013cd:	48 ba d0 2a fe ff ff 	movabs rdx,0xfffffffffffe2ad0
ffff8000008013d4:	ff ff ff 
ffff8000008013d7:	48 01 da             	add    rdx,rbx
ffff8000008013da:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:209
 	init_gdt();
ffff8000008013dc:	49 89 df             	mov    r15,rbx
ffff8000008013df:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008013e4:	48 ba c5 ae fe ff ff 	movabs rdx,0xfffffffffffeaec5
ffff8000008013eb:	ff ff ff 
ffff8000008013ee:	48 01 da             	add    rdx,rbx
ffff8000008013f1:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:210
    mount_rootfs();
ffff8000008013f3:	49 89 df             	mov    r15,rbx
ffff8000008013f6:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008013fb:	48 ba 7c d3 fe ff ff 	movabs rdx,0xfffffffffffed37c
ffff800000801402:	ff ff ff 
ffff800000801405:	48 01 da             	add    rdx,rbx
ffff800000801408:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:211
    init_devman();
ffff80000080140a:	49 89 df             	mov    r15,rbx
ffff80000080140d:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801412:	48 ba b9 51 fe ff ff 	movabs rdx,0xfffffffffffe51b9
ffff800000801419:	ff ff ff 
ffff80000080141c:	48 01 da             	add    rdx,rbx
ffff80000080141f:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:212
    init_proc();
ffff800000801421:	49 89 df             	mov    r15,rbx
ffff800000801424:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801429:	48 ba 1d 71 fe ff ff 	movabs rdx,0xfffffffffffe711d
ffff800000801430:	ff ff ff 
ffff800000801433:	48 01 da             	add    rdx,rbx
ffff800000801436:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:213
    sti();
ffff800000801438:	fb                   	sti    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:214
    DISK1_FAT32_FS_init();
ffff800000801439:	49 89 df             	mov    r15,rbx
ffff80000080143c:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801441:	48 ba 96 2f ff ff ff 	movabs rdx,0xffffffffffff2f96
ffff800000801448:	ff ff ff 
ffff80000080144b:	48 01 da             	add    rdx,rbx
ffff80000080144e:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:218

    //自带驱动
    //init_tty();
    init_kb();
ffff800000801450:	49 89 df             	mov    r15,rbx
ffff800000801453:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801458:	48 ba f9 e8 fe ff ff 	movabs rdx,0xfffffffffffee8f9
ffff80000080145f:	ff ff ff 
ffff800000801462:	48 01 da             	add    rdx,rbx
ffff800000801465:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:222
//    init_disk();


    manage_proc_lock=0;
ffff800000801467:	48 b8 48 fd ff ff ff 	movabs rax,0xfffffffffffffd48
ffff80000080146e:	ff ff ff 
ffff800000801471:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000801475:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:223
    if(sys_fork()==0){
ffff80000080147b:	49 89 df             	mov    r15,rbx
ffff80000080147e:	48 b8 6f 92 fe ff ff 	movabs rax,0xfffffffffffe926f
ffff800000801485:	ff ff ff 
ffff800000801488:	48 01 d8             	add    rax,rbx
ffff80000080148b:	ff d0                	call   rax
ffff80000080148d:	85 c0                	test   eax,eax
ffff80000080148f:	75 28                	jne    ffff8000008014b9 <main+0x4f3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:224
        sys_execve("/mnt/test.exe",NULL);
ffff800000801491:	be 00 00 00 00       	mov    esi,0x0
ffff800000801496:	48 b8 d1 c4 ff ff ff 	movabs rax,0xffffffffffffc4d1
ffff80000080149d:	ff ff ff 
ffff8000008014a0:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008014a4:	48 89 c7             	mov    rdi,rax
ffff8000008014a7:	49 89 df             	mov    r15,rbx
ffff8000008014aa:	48 b8 71 b3 fe ff ff 	movabs rax,0xfffffffffffeb371
ffff8000008014b1:	ff ff ff 
ffff8000008014b4:	48 01 d8             	add    rax,rbx
ffff8000008014b7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:235 (discriminator 1)
//    extern device *dev_tree[];
//    blk_dev* p=dev_tree[DEVTREE_BLKDEVI];
//    mount_fs("fat16",p->par,vmalloc());
    while (1)
    {
        char c=-1;
ffff8000008014b9:	c6 45 a3 ff          	mov    BYTE PTR [rbp-0x5d],0xff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:236 (discriminator 1)
        sys_read(0,&c,1);
ffff8000008014bd:	48 8d 45 a3          	lea    rax,[rbp-0x5d]
ffff8000008014c1:	ba 01 00 00 00       	mov    edx,0x1
ffff8000008014c6:	48 89 c6             	mov    rsi,rax
ffff8000008014c9:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008014ce:	49 89 df             	mov    r15,rbx
ffff8000008014d1:	48 b8 c1 dd fe ff ff 	movabs rax,0xfffffffffffeddc1
ffff8000008014d8:	ff ff ff 
ffff8000008014db:	48 01 d8             	add    rax,rbx
ffff8000008014de:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:237 (discriminator 1)
        putchar(c);
ffff8000008014e0:	0f b6 45 a3          	movzx  eax,BYTE PTR [rbp-0x5d]
ffff8000008014e4:	0f be c0             	movsx  eax,al
ffff8000008014e7:	89 c7                	mov    edi,eax
ffff8000008014e9:	49 89 df             	mov    r15,rbx
ffff8000008014ec:	48 b8 41 23 fe ff ff 	movabs rax,0xfffffffffffe2341
ffff8000008014f3:	ff ff ff 
ffff8000008014f6:	48 01 d8             	add    rax,rbx
ffff8000008014f9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:234 (discriminator 1)
    {
ffff8000008014fb:	eb bc                	jmp    ffff8000008014b9 <main+0x4f3>

ffff8000008014fd <init_logging>:
init_logging():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:12
static unsigned char* video;
static int xpos,ypos;
/* 将整数 D 转换为字符串并保存在 BUF 中。如果 BASE 为 'd'，则 D 为十进制，如果 BASE 为 'x'，则 D 为十六进制。 */

int init_logging()
{
ffff8000008014fd:	f3 0f 1e fa          	endbr64 
ffff800000801501:	55                   	push   rbp
ffff800000801502:	48 89 e5             	mov    rbp,rsp
ffff800000801505:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000801505 <init_logging+0x8>
ffff80000080150c:	49 bb 33 de 01 00 00 	movabs r11,0x1de33
ffff800000801513:	00 00 00 
ffff800000801516:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:13
    video=0xb8000;
ffff800000801519:	48 ba c8 0c be ff ff 	movabs rdx,0xffffffffffbe0cc8
ffff800000801520:	ff ff ff 
ffff800000801523:	48 c7 04 10 00 80 0b 	mov    QWORD PTR [rax+rdx*1],0xb8000
ffff80000080152a:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:14
    xpos=0;
ffff80000080152b:	48 ba d0 0c be ff ff 	movabs rdx,0xffffffffffbe0cd0
ffff800000801532:	ff ff ff 
ffff800000801535:	c7 04 10 00 00 00 00 	mov    DWORD PTR [rax+rdx*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:15
    ypos=0;
ffff80000080153c:	48 ba d4 0c be ff ff 	movabs rdx,0xffffffffffbe0cd4
ffff800000801543:	ff ff ff 
ffff800000801546:	c7 04 10 00 00 00 00 	mov    DWORD PTR [rax+rdx*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:16
}
ffff80000080154d:	90                   	nop
ffff80000080154e:	5d                   	pop    rbp
ffff80000080154f:	c3                   	ret    

ffff800000801550 <itoa>:
itoa():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:19

void itoa (char *buf, int base, int d)
{
ffff800000801550:	f3 0f 1e fa          	endbr64 
ffff800000801554:	55                   	push   rbp
ffff800000801555:	48 89 e5             	mov    rbp,rsp
ffff800000801558:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000801558 <itoa+0x8>
ffff80000080155f:	49 bb e0 dd 01 00 00 	movabs r11,0x1dde0
ffff800000801566:	00 00 00 
ffff800000801569:	4c 01 d8             	add    rax,r11
ffff80000080156c:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000801570:	89 75 c4             	mov    DWORD PTR [rbp-0x3c],esi
ffff800000801573:	89 55 c0             	mov    DWORD PTR [rbp-0x40],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:20
    char *p = buf;
ffff800000801576:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080157a:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:22
    char *p1, *p2;
    unsigned long ud = d;
ffff80000080157e:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
ffff800000801581:	48 98                	cdqe   
ffff800000801583:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:23
    int divisor = 10;
ffff800000801587:	c7 45 dc 0a 00 00 00 	mov    DWORD PTR [rbp-0x24],0xa
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:26
 
    /* 如果指定了 %d 并且 D 是负数，在开始添上负号。 */
    if (base == 'd' && d < 0)
ffff80000080158e:	83 7d c4 64          	cmp    DWORD PTR [rbp-0x3c],0x64
ffff800000801592:	75 27                	jne    ffff8000008015bb <itoa+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:26 (discriminator 1)
ffff800000801594:	83 7d c0 00          	cmp    DWORD PTR [rbp-0x40],0x0
ffff800000801598:	79 21                	jns    ffff8000008015bb <itoa+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:28
    {
        *p++ = '-';
ffff80000080159a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080159e:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffff8000008015a2:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffff8000008015a6:	c6 00 2d             	mov    BYTE PTR [rax],0x2d
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:29
        buf++;
ffff8000008015a9:	48 83 45 c8 01       	add    QWORD PTR [rbp-0x38],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:30
        ud = -d;
ffff8000008015ae:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
ffff8000008015b1:	f7 d8                	neg    eax
ffff8000008015b3:	48 98                	cdqe   
ffff8000008015b5:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffff8000008015b9:	eb 0d                	jmp    ffff8000008015c8 <itoa+0x78>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:32
    }
    else if (base == 'x')
ffff8000008015bb:	83 7d c4 78          	cmp    DWORD PTR [rbp-0x3c],0x78
ffff8000008015bf:	75 07                	jne    ffff8000008015c8 <itoa+0x78>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:33
        divisor = 16;
ffff8000008015c1:	c7 45 dc 10 00 00 00 	mov    DWORD PTR [rbp-0x24],0x10
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:38
 
    /* 用 DIVISOR 去除 UD 直到 UD == 0。 */
    do
    {
        int remainder = ud % divisor;
ffff8000008015c8:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008015cb:	48 63 c8             	movsxd rcx,eax
ffff8000008015ce:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008015d2:	ba 00 00 00 00       	mov    edx,0x0
ffff8000008015d7:	48 f7 f1             	div    rcx
ffff8000008015da:	48 89 d0             	mov    rax,rdx
ffff8000008015dd:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:40
 
        *p++ = (remainder < 10) ? remainder + '0' : remainder + 'a' - 10;
ffff8000008015e0:	83 7d d8 09          	cmp    DWORD PTR [rbp-0x28],0x9
ffff8000008015e4:	7f 0a                	jg     ffff8000008015f0 <itoa+0xa0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:40 (discriminator 1)
ffff8000008015e6:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff8000008015e9:	83 c0 30             	add    eax,0x30
ffff8000008015ec:	89 c1                	mov    ecx,eax
ffff8000008015ee:	eb 08                	jmp    ffff8000008015f8 <itoa+0xa8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:40 (discriminator 2)
ffff8000008015f0:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff8000008015f3:	83 c0 57             	add    eax,0x57
ffff8000008015f6:	89 c1                	mov    ecx,eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:40 (discriminator 4)
ffff8000008015f8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008015fc:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffff800000801600:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffff800000801604:	88 08                	mov    BYTE PTR [rax],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:42 (discriminator 4)
    }
    while (ud /= divisor);
ffff800000801606:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000801609:	48 63 f0             	movsxd rsi,eax
ffff80000080160c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801610:	ba 00 00 00 00       	mov    edx,0x0
ffff800000801615:	48 f7 f6             	div    rsi
ffff800000801618:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffff80000080161c:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
ffff800000801621:	75 a5                	jne    ffff8000008015c8 <itoa+0x78>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:45
 
    /* 在字符串尾添上终结符。 */
    *p = 0;
ffff800000801623:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000801627:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:48
 
    /* 反转 BUF。 */
    p1 = buf;
ffff80000080162a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080162e:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:49
    p2 = p - 1;
ffff800000801632:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000801636:	48 83 e8 01          	sub    rax,0x1
ffff80000080163a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:50
    while (p1 < p2)
ffff80000080163e:	eb 2b                	jmp    ffff80000080166b <itoa+0x11b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:52
    {
        char tmp = *p1;
ffff800000801640:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000801644:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801647:	88 45 d7             	mov    BYTE PTR [rbp-0x29],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:53
        *p1 = *p2;
ffff80000080164a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080164e:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff800000801651:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000801655:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:54
        *p2 = tmp;
ffff800000801657:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080165b:	0f b6 55 d7          	movzx  edx,BYTE PTR [rbp-0x29]
ffff80000080165f:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:55
        p1++;
ffff800000801661:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:56
        p2--;
ffff800000801666:	48 83 6d e8 01       	sub    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:50
    while (p1 < p2)
ffff80000080166b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080166f:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000801673:	72 cb                	jb     ffff800000801640 <itoa+0xf0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:58
    }
}
ffff800000801675:	90                   	nop
ffff800000801676:	90                   	nop
ffff800000801677:	5d                   	pop    rbp
ffff800000801678:	c3                   	ret    

ffff800000801679 <putchar>:
putchar():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:62
 
/* 在屏幕上输出字符 C 。 */
void putchar (char c)
{
ffff800000801679:	f3 0f 1e fa          	endbr64 
ffff80000080167d:	55                   	push   rbp
ffff80000080167e:	48 89 e5             	mov    rbp,rsp
ffff800000801681:	41 57                	push   r15
ffff800000801683:	48 83 ec 28          	sub    rsp,0x28
ffff800000801687:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000801687 <putchar+0xe>
ffff80000080168e:	49 bb b1 dc 01 00 00 	movabs r11,0x1dcb1
ffff800000801695:	00 00 00 
ffff800000801698:	4c 01 d8             	add    rax,r11
ffff80000080169b:	89 fa                	mov    edx,edi
ffff80000080169d:	88 55 dc             	mov    BYTE PTR [rbp-0x24],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:63
    char s[2]={c,'\0'};
ffff8000008016a0:	0f b6 55 dc          	movzx  edx,BYTE PTR [rbp-0x24]
ffff8000008016a4:	88 55 ee             	mov    BYTE PTR [rbp-0x12],dl
ffff8000008016a7:	c6 45 ef 00          	mov    BYTE PTR [rbp-0x11],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:64
    print(s);
ffff8000008016ab:	48 8d 55 ee          	lea    rdx,[rbp-0x12]
ffff8000008016af:	48 89 d7             	mov    rdi,rdx
ffff8000008016b2:	49 89 c7             	mov    r15,rax
ffff8000008016b5:	48 ba db c8 fe ff ff 	movabs rdx,0xfffffffffffec8db
ffff8000008016bc:	ff ff ff 
ffff8000008016bf:	48 01 c2             	add    rdx,rax
ffff8000008016c2:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:82
    *(video + (xpos + ypos * COLUMNS) * 2 + 1) = ATTRIBUTE;
 
    xpos++;
    if (xpos >= COLUMNS)
        goto newline;
}
ffff8000008016c4:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff8000008016c8:	c9                   	leave  
ffff8000008016c9:	c3                   	ret    

ffff8000008016ca <printf>:
printf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:86
 
/* 格式化字符串并在屏幕上输出，就像 libc 函数 printf 一样。 */
void printf (const char *format,...)
{
ffff8000008016ca:	f3 0f 1e fa          	endbr64 
ffff8000008016ce:	55                   	push   rbp
ffff8000008016cf:	48 89 e5             	mov    rbp,rsp
ffff8000008016d2:	41 57                	push   r15
ffff8000008016d4:	53                   	push   rbx
ffff8000008016d5:	48 81 ec 00 01 00 00 	sub    rsp,0x100
ffff8000008016dc:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008016dc <printf+0x12>
ffff8000008016e3:	49 bb 5c dc 01 00 00 	movabs r11,0x1dc5c
ffff8000008016ea:	00 00 00 
ffff8000008016ed:	4c 01 db             	add    rbx,r11
ffff8000008016f0:	48 89 bd f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdi
ffff8000008016f7:	48 89 b5 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rsi
ffff8000008016fe:	48 89 95 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rdx
ffff800000801705:	48 89 8d 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rcx
ffff80000080170c:	4c 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],r8
ffff800000801713:	4c 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],r9
ffff80000080171a:	84 c0                	test   al,al
ffff80000080171c:	74 23                	je     ffff800000801741 <printf+0x77>
ffff80000080171e:	0f 29 85 70 ff ff ff 	movaps XMMWORD PTR [rbp-0x90],xmm0
ffff800000801725:	0f 29 4d 80          	movaps XMMWORD PTR [rbp-0x80],xmm1
ffff800000801729:	0f 29 55 90          	movaps XMMWORD PTR [rbp-0x70],xmm2
ffff80000080172d:	0f 29 5d a0          	movaps XMMWORD PTR [rbp-0x60],xmm3
ffff800000801731:	0f 29 65 b0          	movaps XMMWORD PTR [rbp-0x50],xmm4
ffff800000801735:	0f 29 6d c0          	movaps XMMWORD PTR [rbp-0x40],xmm5
ffff800000801739:	0f 29 75 d0          	movaps XMMWORD PTR [rbp-0x30],xmm6
ffff80000080173d:	0f 29 7d e0          	movaps XMMWORD PTR [rbp-0x20],xmm7
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:87
    if(strlen(format)>=1024)
ffff800000801741:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000801748:	48 89 c7             	mov    rdi,rax
ffff80000080174b:	49 89 df             	mov    r15,rbx
ffff80000080174e:	48 b8 f8 41 ff ff ff 	movabs rax,0xffffffffffff41f8
ffff800000801755:	ff ff ff 
ffff800000801758:	48 01 d8             	add    rax,rbx
ffff80000080175b:	ff d0                	call   rax
ffff80000080175d:	3d ff 03 00 00       	cmp    eax,0x3ff
ffff800000801762:	0f 8f f2 02 00 00    	jg     ffff800000801a5a <printf+0x390>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:89
        return;//一次性输出不了太长
    char* tmp=(char*) kmalloc();
ffff800000801768:	49 89 df             	mov    r15,rbx
ffff80000080176b:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801770:	48 ba 13 2c fe ff ff 	movabs rdx,0xfffffffffffe2c13
ffff800000801777:	ff ff ff 
ffff80000080177a:	48 01 da             	add    rdx,rbx
ffff80000080177d:	ff d2                	call   rdx
ffff80000080177f:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:91
    va_list vargs;
    va_start(vargs,format);
ffff800000801786:	c7 85 00 ff ff ff 08 	mov    DWORD PTR [rbp-0x100],0x8
ffff80000080178d:	00 00 00 
ffff800000801790:	c7 85 04 ff ff ff 30 	mov    DWORD PTR [rbp-0xfc],0x30
ffff800000801797:	00 00 00 
ffff80000080179a:	48 8d 45 10          	lea    rax,[rbp+0x10]
ffff80000080179e:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
ffff8000008017a5:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
ffff8000008017ac:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:92
    char *pstr=format;
ffff8000008017b3:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff8000008017ba:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:93
    for(;*pstr!='\0';pstr++){
ffff8000008017c1:	e9 27 02 00 00       	jmp    ffff8000008019ed <printf+0x323>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:94
        if(*pstr=='%'&&*(pstr+1)!='\0'){
ffff8000008017c6:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff8000008017cd:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008017d0:	3c 25                	cmp    al,0x25
ffff8000008017d2:	0f 85 e2 01 00 00    	jne    ffff8000008019ba <printf+0x2f0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:94 (discriminator 1)
ffff8000008017d8:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff8000008017df:	48 83 c0 01          	add    rax,0x1
ffff8000008017e3:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008017e6:	84 c0                	test   al,al
ffff8000008017e8:	0f 84 cc 01 00 00    	je     ffff8000008019ba <printf+0x2f0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:95
            pstr++;
ffff8000008017ee:	48 83 85 38 ff ff ff 	add    QWORD PTR [rbp-0xc8],0x1
ffff8000008017f5:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:96
            if(*pstr=='x'){
ffff8000008017f6:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff8000008017fd:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801800:	3c 78                	cmp    al,0x78
ffff800000801802:	75 75                	jne    ffff800000801879 <printf+0x1af>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:97
                int v=va_arg(vargs,int);
ffff800000801804:	8b 85 00 ff ff ff    	mov    eax,DWORD PTR [rbp-0x100]
ffff80000080180a:	83 f8 2f             	cmp    eax,0x2f
ffff80000080180d:	77 23                	ja     ffff800000801832 <printf+0x168>
ffff80000080180f:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff800000801816:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff80000080181c:	89 d2                	mov    edx,edx
ffff80000080181e:	48 01 d0             	add    rax,rdx
ffff800000801821:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff800000801827:	83 c2 08             	add    edx,0x8
ffff80000080182a:	89 95 00 ff ff ff    	mov    DWORD PTR [rbp-0x100],edx
ffff800000801830:	eb 12                	jmp    ffff800000801844 <printf+0x17a>
ffff800000801832:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff800000801839:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff80000080183d:	48 89 95 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdx
ffff800000801844:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000801846:	89 85 1c ff ff ff    	mov    DWORD PTR [rbp-0xe4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:98
                sprint_hex(tmp,v);
ffff80000080184c:	8b 85 1c ff ff ff    	mov    eax,DWORD PTR [rbp-0xe4]
ffff800000801852:	48 63 d0             	movsxd rdx,eax
ffff800000801855:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff80000080185c:	48 89 d6             	mov    rsi,rdx
ffff80000080185f:	48 89 c7             	mov    rdi,rax
ffff800000801862:	49 89 df             	mov    r15,rbx
ffff800000801865:	48 b8 4b 46 ff ff ff 	movabs rax,0xffffffffffff464b
ffff80000080186c:	ff ff ff 
ffff80000080186f:	48 01 d8             	add    rax,rbx
ffff800000801872:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:96
            if(*pstr=='x'){
ffff800000801874:	e9 6c 01 00 00       	jmp    ffff8000008019e5 <printf+0x31b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:99
            }else if(*pstr=='s'){
ffff800000801879:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000801880:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801883:	3c 73                	cmp    al,0x73
ffff800000801885:	75 75                	jne    ffff8000008018fc <printf+0x232>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:100
                char* v=va_arg(vargs,char*);
ffff800000801887:	8b 85 00 ff ff ff    	mov    eax,DWORD PTR [rbp-0x100]
ffff80000080188d:	83 f8 2f             	cmp    eax,0x2f
ffff800000801890:	77 23                	ja     ffff8000008018b5 <printf+0x1eb>
ffff800000801892:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff800000801899:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff80000080189f:	89 d2                	mov    edx,edx
ffff8000008018a1:	48 01 d0             	add    rax,rdx
ffff8000008018a4:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff8000008018aa:	83 c2 08             	add    edx,0x8
ffff8000008018ad:	89 95 00 ff ff ff    	mov    DWORD PTR [rbp-0x100],edx
ffff8000008018b3:	eb 12                	jmp    ffff8000008018c7 <printf+0x1fd>
ffff8000008018b5:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff8000008018bc:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff8000008018c0:	48 89 95 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdx
ffff8000008018c7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008018ca:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:101
                sprintn(tmp,v);
ffff8000008018d1:	48 8b 95 20 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe0]
ffff8000008018d8:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff8000008018df:	48 89 d6             	mov    rsi,rdx
ffff8000008018e2:	48 89 c7             	mov    rdi,rax
ffff8000008018e5:	49 89 df             	mov    r15,rbx
ffff8000008018e8:	48 b8 d9 46 ff ff ff 	movabs rax,0xffffffffffff46d9
ffff8000008018ef:	ff ff ff 
ffff8000008018f2:	48 01 d8             	add    rax,rbx
ffff8000008018f5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:96
            if(*pstr=='x'){
ffff8000008018f7:	e9 e9 00 00 00       	jmp    ffff8000008019e5 <printf+0x31b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:102
            }else if(*pstr=='d'){
ffff8000008018fc:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000801903:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801906:	3c 64                	cmp    al,0x64
ffff800000801908:	75 73                	jne    ffff80000080197d <printf+0x2b3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:103
                char* v=va_arg(vargs,char*);
ffff80000080190a:	8b 85 00 ff ff ff    	mov    eax,DWORD PTR [rbp-0x100]
ffff800000801910:	83 f8 2f             	cmp    eax,0x2f
ffff800000801913:	77 23                	ja     ffff800000801938 <printf+0x26e>
ffff800000801915:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff80000080191c:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff800000801922:	89 d2                	mov    edx,edx
ffff800000801924:	48 01 d0             	add    rax,rdx
ffff800000801927:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff80000080192d:	83 c2 08             	add    edx,0x8
ffff800000801930:	89 95 00 ff ff ff    	mov    DWORD PTR [rbp-0x100],edx
ffff800000801936:	eb 12                	jmp    ffff80000080194a <printf+0x280>
ffff800000801938:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff80000080193f:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000801943:	48 89 95 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdx
ffff80000080194a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080194d:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:104
                sprint_decimal(tmp,v);
ffff800000801954:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
ffff80000080195b:	89 c2                	mov    edx,eax
ffff80000080195d:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801964:	89 d6                	mov    esi,edx
ffff800000801966:	48 89 c7             	mov    rdi,rax
ffff800000801969:	49 89 df             	mov    r15,rbx
ffff80000080196c:	48 b8 90 45 ff ff ff 	movabs rax,0xffffffffffff4590
ffff800000801973:	ff ff ff 
ffff800000801976:	48 01 d8             	add    rax,rbx
ffff800000801979:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:96
            if(*pstr=='x'){
ffff80000080197b:	eb 68                	jmp    ffff8000008019e5 <printf+0x31b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:105
            }else if(*pstr=='c'){
ffff80000080197d:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000801984:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801987:	3c 63                	cmp    al,0x63
ffff800000801989:	75 02                	jne    ffff80000080198d <printf+0x2c3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:106
                char v=va_arg(vargs,char);
ffff80000080198b:	0f 0b                	ud2    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:109
                sprintchar(tmp,v);
            }else{
                sprintchar(tmp,*pstr);
ffff80000080198d:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000801994:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801997:	0f be d0             	movsx  edx,al
ffff80000080199a:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff8000008019a1:	89 d6                	mov    esi,edx
ffff8000008019a3:	48 89 c7             	mov    rdi,rax
ffff8000008019a6:	49 89 df             	mov    r15,rbx
ffff8000008019a9:	48 b8 51 45 ff ff ff 	movabs rax,0xffffffffffff4551
ffff8000008019b0:	ff ff ff 
ffff8000008019b3:	48 01 d8             	add    rax,rbx
ffff8000008019b6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:96
            if(*pstr=='x'){
ffff8000008019b8:	eb 2b                	jmp    ffff8000008019e5 <printf+0x31b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:112
            }
        }else{
            sprintchar(tmp,*pstr);
ffff8000008019ba:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff8000008019c1:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008019c4:	0f be d0             	movsx  edx,al
ffff8000008019c7:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff8000008019ce:	89 d6                	mov    esi,edx
ffff8000008019d0:	48 89 c7             	mov    rdi,rax
ffff8000008019d3:	49 89 df             	mov    r15,rbx
ffff8000008019d6:	48 b8 51 45 ff ff ff 	movabs rax,0xffffffffffff4551
ffff8000008019dd:	ff ff ff 
ffff8000008019e0:	48 01 d8             	add    rax,rbx
ffff8000008019e3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:93
    for(;*pstr!='\0';pstr++){
ffff8000008019e5:	48 83 85 38 ff ff ff 	add    QWORD PTR [rbp-0xc8],0x1
ffff8000008019ec:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:93 (discriminator 1)
ffff8000008019ed:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff8000008019f4:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008019f7:	84 c0                	test   al,al
ffff8000008019f9:	0f 85 c7 fd ff ff    	jne    ffff8000008017c6 <printf+0xfc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:116
        }
    }
    va_end(vargs);
    print(tmp);
ffff8000008019ff:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801a06:	48 89 c7             	mov    rdi,rax
ffff800000801a09:	49 89 df             	mov    r15,rbx
ffff800000801a0c:	48 b8 db c8 fe ff ff 	movabs rax,0xfffffffffffec8db
ffff800000801a13:	ff ff ff 
ffff800000801a16:	48 01 d8             	add    rax,rbx
ffff800000801a19:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:117
    comprintf(tmp);
ffff800000801a1b:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801a22:	48 89 c7             	mov    rdi,rax
ffff800000801a25:	49 89 df             	mov    r15,rbx
ffff800000801a28:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801a2d:	48 ba 05 3a ff ff ff 	movabs rdx,0xffffffffffff3a05
ffff800000801a34:	ff ff ff 
ffff800000801a37:	48 01 da             	add    rdx,rbx
ffff800000801a3a:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:118
    kmfree(tmp);
ffff800000801a3c:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801a43:	48 89 c7             	mov    rdi,rax
ffff800000801a46:	49 89 df             	mov    r15,rbx
ffff800000801a49:	48 b8 82 2f fe ff ff 	movabs rax,0xfffffffffffe2f82
ffff800000801a50:	ff ff ff 
ffff800000801a53:	48 01 d8             	add    rax,rbx
ffff800000801a56:	ff d0                	call   rax
ffff800000801a58:	eb 01                	jmp    ffff800000801a5b <printf+0x391>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:88
        return;//一次性输出不了太长
ffff800000801a5a:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:160
//                putchar (*((int *) arg++));
//                break;
//            }
//        }
//    }
}
ffff800000801a5b:	48 81 c4 00 01 00 00 	add    rsp,0x100
ffff800000801a62:	5b                   	pop    rbx
ffff800000801a63:	41 5f                	pop    r15
ffff800000801a65:	5d                   	pop    rbp
ffff800000801a66:	c3                   	ret    

ffff800000801a67 <mmap>:
mmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:27
//以kb为单位
int high_mem_base=1024;
int mmap_t_i=0;

stat_t mmap(addr_t pa,addr_t la,u32 attr)
{
ffff800000801a67:	f3 0f 1e fa          	endbr64 
ffff800000801a6b:	55                   	push   rbp
ffff800000801a6c:	48 89 e5             	mov    rbp,rsp
ffff800000801a6f:	41 57                	push   r15
ffff800000801a71:	48 83 ec 28          	sub    rsp,0x28
ffff800000801a75:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000801a75 <mmap+0xe>
ffff800000801a7c:	49 bb c3 d8 01 00 00 	movabs r11,0x1d8c3
ffff800000801a83:	00 00 00 
ffff800000801a86:	4c 01 d8             	add    rax,r11
ffff800000801a89:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000801a8d:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff800000801a91:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:28
    return smmap(pa,la,attr,current->pml4);
ffff800000801a94:	48 ba 90 fe ff ff ff 	movabs rdx,0xfffffffffffffe90
ffff800000801a9b:	ff ff ff 
ffff800000801a9e:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000801aa2:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000801aa5:	48 8b 8a c0 00 00 00 	mov    rcx,QWORD PTR [rdx+0xc0]
ffff800000801aac:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000801aaf:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff800000801ab3:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
ffff800000801ab7:	49 89 c7             	mov    r15,rax
ffff800000801aba:	49 b8 98 27 fe ff ff 	movabs r8,0xfffffffffffe2798
ffff800000801ac1:	ff ff ff 
ffff800000801ac4:	49 01 c0             	add    r8,rax
ffff800000801ac7:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:58
    pt=(page_item*)((addr_t)pt & ~0xff);

    //在pt中找到la指向的page
    pt[la % PDE_SIZE / PAGE_SIZE]=pa|attr;//映射
    return NORMAL;*/
}
ffff800000801aca:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000801ace:	c9                   	leave  
ffff800000801acf:	c3                   	ret    

ffff800000801ad0 <smmap>:
smmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:61

stat_t smmap(addr_t pa,addr_t la,u32 attr,page_item* pml4p)
{
ffff800000801ad0:	f3 0f 1e fa          	endbr64 
ffff800000801ad4:	55                   	push   rbp
ffff800000801ad5:	48 89 e5             	mov    rbp,rsp
ffff800000801ad8:	41 57                	push   r15
ffff800000801ada:	53                   	push   rbx
ffff800000801adb:	48 83 ec 40          	sub    rsp,0x40
ffff800000801adf:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000801adf <smmap+0xf>
ffff800000801ae6:	49 bb 59 d8 01 00 00 	movabs r11,0x1d859
ffff800000801aed:	00 00 00 
ffff800000801af0:	4c 01 db             	add    rbx,r11
ffff800000801af3:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000801af7:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffff800000801afb:	89 55 bc             	mov    DWORD PTR [rbp-0x44],edx
ffff800000801afe:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:64
    //从pml4中找到la所属的pml4项目，即属于第几个512GB
    //canonical 高地址判断
    if(la>0x7ffffffffffful){
ffff800000801b02:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffff
ffff800000801b09:	7f 00 00 
ffff800000801b0c:	48 39 45 c0          	cmp    QWORD PTR [rbp-0x40],rax
ffff800000801b10:	76 0e                	jbe    ffff800000801b20 <smmap+0x50>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:65
        la&=~0xffff000000000000ul;
ffff800000801b12:	48 b8 ff ff ff ff ff 	movabs rax,0xffffffffffff
ffff800000801b19:	ff 00 00 
ffff800000801b1c:	48 21 45 c0          	and    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:67
    }
    page_item *pdptp= (page_item *) (pml4p[la / PML4E_SIZE]);//指向的pdpt表
ffff800000801b20:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801b24:	48 c1 e8 27          	shr    rax,0x27
ffff800000801b28:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000801b2f:	00 
ffff800000801b30:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000801b34:	48 01 d0             	add    rax,rdx
ffff800000801b37:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801b3a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:68
    int pml4i=la / PML4E_SIZE;
ffff800000801b3e:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801b42:	48 c1 e8 27          	shr    rax,0x27
ffff800000801b46:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:69
    if(!((unsigned long long)pdptp&PAGE_PRESENT))
ffff800000801b49:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801b4d:	83 e0 01             	and    eax,0x1
ffff800000801b50:	48 85 c0             	test   rax,rax
ffff800000801b53:	75 78                	jne    ffff800000801bcd <smmap+0xfd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:71
    {
        pdptp=(page_item*) kmalloc();
ffff800000801b55:	49 89 df             	mov    r15,rbx
ffff800000801b58:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801b5d:	48 ba 13 2c fe ff ff 	movabs rdx,0xfffffffffffe2c13
ffff800000801b64:	ff ff ff 
ffff800000801b67:	48 01 da             	add    rdx,rbx
ffff800000801b6a:	ff d2                	call   rdx
ffff800000801b6c:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:72
        memset(pdptp,0,4096);
ffff800000801b70:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801b74:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000801b79:	be 00 00 00 00       	mov    esi,0x0
ffff800000801b7e:	48 89 c7             	mov    rdi,rax
ffff800000801b81:	49 89 df             	mov    r15,rbx
ffff800000801b84:	48 b8 d6 3e ff ff ff 	movabs rax,0xffffffffffff3ed6
ffff800000801b8b:	ff ff ff 
ffff800000801b8e:	48 01 d8             	add    rax,rbx
ffff800000801b91:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:74
        //这里使用了狡猾的技巧：kmalloc的内存-KNL_BASE直接就是实际的物理地址
        pml4[pml4i]=((addr_t)pdptp&~KNL_BASE)|attr;
ffff800000801b93:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801b97:	48 ba ff ff ff ff ff 	movabs rdx,0x7fffffffffff
ffff800000801b9e:	7f 00 00 
ffff800000801ba1:	48 21 d0             	and    rax,rdx
ffff800000801ba4:	48 89 c6             	mov    rsi,rax
ffff800000801ba7:	8b 55 bc             	mov    edx,DWORD PTR [rbp-0x44]
ffff800000801baa:	48 b8 b0 ff ff ff ff 	movabs rax,0xffffffffffffffb0
ffff800000801bb1:	ff ff ff 
ffff800000801bb4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000801bb8:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000801bbb:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000801bbe:	48 98                	cdqe   
ffff800000801bc0:	48 c1 e0 03          	shl    rax,0x3
ffff800000801bc4:	48 01 c8             	add    rax,rcx
ffff800000801bc7:	48 09 f2             	or     rdx,rsi
ffff800000801bca:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:76
    }
    pdptp=(page_item*)(((addr_t)pdptp&~0xff)|KNL_BASE);
ffff800000801bcd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801bd1:	48 ba 00 ff ff ff ff 	movabs rdx,0x7fffffffff00
ffff800000801bd8:	7f 00 00 
ffff800000801bdb:	48 21 c2             	and    rdx,rax
ffff800000801bde:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff800000801be5:	80 ff ff 
ffff800000801be8:	48 09 d0             	or     rax,rdx
ffff800000801beb:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:79

    //在这个512GB（一张pdpt表）中找到la所属的pdpt项目，找到指向的pd
    int pdpti=la%PML4E_SIZE/PDPTE_SIZE;
ffff800000801bef:	48 b8 ff ff ff ff 7f 	movabs rax,0x7fffffffff
ffff800000801bf6:	00 00 00 
ffff800000801bf9:	48 23 45 c0          	and    rax,QWORD PTR [rbp-0x40]
ffff800000801bfd:	48 c1 e8 1e          	shr    rax,0x1e
ffff800000801c01:	89 45 d0             	mov    DWORD PTR [rbp-0x30],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:80
    page_item* pdp= (page_item *) pdptp[pdpti];//指向的pd
ffff800000801c04:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000801c07:	48 98                	cdqe   
ffff800000801c09:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000801c10:	00 
ffff800000801c11:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801c15:	48 01 d0             	add    rax,rdx
ffff800000801c18:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801c1b:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:82
    //检查pdptp是否被占用
    if(!((unsigned long long)pdp&PAGE_PRESENT))
ffff800000801c1f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801c23:	83 e0 01             	and    eax,0x1
ffff800000801c26:	48 85 c0             	test   rax,rax
ffff800000801c29:	75 6f                	jne    ffff800000801c9a <smmap+0x1ca>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:84
    {
        pdp=(page_item*) kmalloc();
ffff800000801c2b:	49 89 df             	mov    r15,rbx
ffff800000801c2e:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801c33:	48 ba 13 2c fe ff ff 	movabs rdx,0xfffffffffffe2c13
ffff800000801c3a:	ff ff ff 
ffff800000801c3d:	48 01 da             	add    rdx,rbx
ffff800000801c40:	ff d2                	call   rdx
ffff800000801c42:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:85
        memset(pdp,0,4096);
ffff800000801c46:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801c4a:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000801c4f:	be 00 00 00 00       	mov    esi,0x0
ffff800000801c54:	48 89 c7             	mov    rdi,rax
ffff800000801c57:	49 89 df             	mov    r15,rbx
ffff800000801c5a:	48 b8 d6 3e ff ff ff 	movabs rax,0xffffffffffff3ed6
ffff800000801c61:	ff ff ff 
ffff800000801c64:	48 01 d8             	add    rax,rbx
ffff800000801c67:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:86
        pdptp[pdpti]=((addr_t)pdp&~KNL_BASE)|attr;
ffff800000801c69:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801c6d:	48 ba ff ff ff ff ff 	movabs rdx,0x7fffffffffff
ffff800000801c74:	7f 00 00 
ffff800000801c77:	48 21 d0             	and    rax,rdx
ffff800000801c7a:	48 89 c1             	mov    rcx,rax
ffff800000801c7d:	8b 55 bc             	mov    edx,DWORD PTR [rbp-0x44]
ffff800000801c80:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000801c83:	48 98                	cdqe   
ffff800000801c85:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
ffff800000801c8c:	00 
ffff800000801c8d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801c91:	48 01 f0             	add    rax,rsi
ffff800000801c94:	48 09 ca             	or     rdx,rcx
ffff800000801c97:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:88
    }
    pdp=(page_item*)(((addr_t)(pdp)&~0xff)|KNL_BASE);
ffff800000801c9a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801c9e:	48 ba 00 ff ff ff ff 	movabs rdx,0x7fffffffff00
ffff800000801ca5:	7f 00 00 
ffff800000801ca8:	48 21 c2             	and    rdx,rax
ffff800000801cab:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff800000801cb2:	80 ff ff 
ffff800000801cb5:	48 09 d0             	or     rax,rdx
ffff800000801cb8:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:91

    //在pd中找到la指向的pt
    page_item* pt=(page_item*)pdp[la % PDPTE_SIZE / PDE_SIZE];
ffff800000801cbc:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801cc0:	25 ff ff ff 3f       	and    eax,0x3fffffff
ffff800000801cc5:	48 c1 e8 15          	shr    rax,0x15
ffff800000801cc9:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000801cd0:	00 
ffff800000801cd1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801cd5:	48 01 d0             	add    rax,rdx
ffff800000801cd8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801cdb:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:92
    if(!((unsigned long long)pt & PAGE_PRESENT))
ffff800000801cdf:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000801ce3:	83 e0 01             	and    eax,0x1
ffff800000801ce6:	48 85 c0             	test   rax,rax
ffff800000801ce9:	75 77                	jne    ffff800000801d62 <smmap+0x292>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:94
    {
        pt=(page_item*) kmalloc();
ffff800000801ceb:	49 89 df             	mov    r15,rbx
ffff800000801cee:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801cf3:	48 ba 13 2c fe ff ff 	movabs rdx,0xfffffffffffe2c13
ffff800000801cfa:	ff ff ff 
ffff800000801cfd:	48 01 da             	add    rdx,rbx
ffff800000801d00:	ff d2                	call   rdx
ffff800000801d02:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:95
        memset(pt,0,4096);
ffff800000801d06:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000801d0a:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000801d0f:	be 00 00 00 00       	mov    esi,0x0
ffff800000801d14:	48 89 c7             	mov    rdi,rax
ffff800000801d17:	49 89 df             	mov    r15,rbx
ffff800000801d1a:	48 b8 d6 3e ff ff ff 	movabs rax,0xffffffffffff3ed6
ffff800000801d21:	ff ff ff 
ffff800000801d24:	48 01 d8             	add    rax,rbx
ffff800000801d27:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:96
        pdp[la%PDPTE_SIZE/PDE_SIZE]= ((addr_t)pt&~KNL_BASE) | attr;
ffff800000801d29:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000801d2d:	48 ba ff ff ff ff ff 	movabs rdx,0x7fffffffffff
ffff800000801d34:	7f 00 00 
ffff800000801d37:	48 21 d0             	and    rax,rdx
ffff800000801d3a:	48 89 c1             	mov    rcx,rax
ffff800000801d3d:	8b 55 bc             	mov    edx,DWORD PTR [rbp-0x44]
ffff800000801d40:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801d44:	25 ff ff ff 3f       	and    eax,0x3fffffff
ffff800000801d49:	48 c1 e8 15          	shr    rax,0x15
ffff800000801d4d:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
ffff800000801d54:	00 
ffff800000801d55:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801d59:	48 01 f0             	add    rax,rsi
ffff800000801d5c:	48 09 ca             	or     rdx,rcx
ffff800000801d5f:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:98
    }
    pt=(page_item*)(((addr_t)pt & ~0xff)|KNL_BASE);
ffff800000801d62:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000801d66:	48 ba 00 ff ff ff ff 	movabs rdx,0x7fffffffff00
ffff800000801d6d:	7f 00 00 
ffff800000801d70:	48 21 c2             	and    rdx,rax
ffff800000801d73:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff800000801d7a:	80 ff ff 
ffff800000801d7d:	48 09 d0             	or     rax,rdx
ffff800000801d80:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:101

    //在pt中找到la指向的page
    pt[la % PDE_SIZE / PAGE_4K_SIZE]=pa|attr;//映射
ffff800000801d84:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
ffff800000801d87:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000801d8b:	81 e2 ff ff 1f 00    	and    edx,0x1fffff
ffff800000801d91:	48 c1 ea 0c          	shr    rdx,0xc
ffff800000801d95:	48 8d 0c d5 00 00 00 	lea    rcx,[rdx*8+0x0]
ffff800000801d9c:	00 
ffff800000801d9d:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000801da1:	48 01 ca             	add    rdx,rcx
ffff800000801da4:	48 0b 45 c8          	or     rax,QWORD PTR [rbp-0x38]
ffff800000801da8:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:102
    return NORMAL;
ffff800000801dab:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:103
}
ffff800000801db0:	48 83 c4 40          	add    rsp,0x40
ffff800000801db4:	5b                   	pop    rbx
ffff800000801db5:	41 5f                	pop    r15
ffff800000801db7:	5d                   	pop    rbp
ffff800000801db8:	c3                   	ret    

ffff800000801db9 <mdemap>:
mdemap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:106

stat_t mdemap(addr_t la)
{
ffff800000801db9:	f3 0f 1e fa          	endbr64 
ffff800000801dbd:	55                   	push   rbp
ffff800000801dbe:	48 89 e5             	mov    rbp,rsp
ffff800000801dc1:	41 57                	push   r15
ffff800000801dc3:	48 83 ec 18          	sub    rsp,0x18
ffff800000801dc7:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000801dc7 <mdemap+0xe>
ffff800000801dce:	49 bb 71 d5 01 00 00 	movabs r11,0x1d571
ffff800000801dd5:	00 00 00 
ffff800000801dd8:	4c 01 d8             	add    rax,r11
ffff800000801ddb:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:107
    return mmap(0l,la,0);
ffff800000801ddf:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff800000801de3:	ba 00 00 00 00       	mov    edx,0x0
ffff800000801de8:	48 89 ce             	mov    rsi,rcx
ffff800000801deb:	bf 00 00 00 00       	mov    edi,0x0
ffff800000801df0:	49 89 c7             	mov    r15,rax
ffff800000801df3:	48 b9 2f 27 fe ff ff 	movabs rcx,0xfffffffffffe272f
ffff800000801dfa:	ff ff ff 
ffff800000801dfd:	48 01 c1             	add    rcx,rax
ffff800000801e00:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:108
}
ffff800000801e02:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000801e06:	c9                   	leave  
ffff800000801e07:	c3                   	ret    

ffff800000801e08 <init_paging>:
init_paging():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:110
int init_paging()
{
ffff800000801e08:	f3 0f 1e fa          	endbr64 
ffff800000801e0c:	55                   	push   rbp
ffff800000801e0d:	48 89 e5             	mov    rbp,rsp
ffff800000801e10:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000801e10 <init_paging+0x8>
ffff800000801e17:	49 bb 28 d5 01 00 00 	movabs r11,0x1d528
ffff800000801e1e:	00 00 00 
ffff800000801e21:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:144
    //设置第一项pdpte，也就是内核空间
//    set_1gb_pdpt(pdpt,0,PAGE_RWX);//设置PDPT0x40000000ul
//    set_page_item(pdpt+1,PD_ADDR,PAGE_PRESENT|PAGE_FOR_ALL|PAGE_RWX);

    #endif
}
ffff800000801e24:	90                   	nop
ffff800000801e25:	5d                   	pop    rbp
ffff800000801e26:	c3                   	ret    

ffff800000801e27 <set_high_mem_base>:
set_high_mem_base():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:146
void set_high_mem_base(int base)
{
ffff800000801e27:	f3 0f 1e fa          	endbr64 
ffff800000801e2b:	55                   	push   rbp
ffff800000801e2c:	48 89 e5             	mov    rbp,rsp
ffff800000801e2f:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000801e2f <set_high_mem_base+0x8>
ffff800000801e36:	49 bb 09 d5 01 00 00 	movabs r11,0x1d509
ffff800000801e3d:	00 00 00 
ffff800000801e40:	4c 01 d8             	add    rax,r11
ffff800000801e43:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:147
    high_mem_base=base;
ffff800000801e46:	48 ba f8 fd ff ff ff 	movabs rdx,0xfffffffffffffdf8
ffff800000801e4d:	ff ff ff 
ffff800000801e50:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000801e54:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000801e57:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:148
}
ffff800000801e59:	90                   	nop
ffff800000801e5a:	5d                   	pop    rbp
ffff800000801e5b:	c3                   	ret    

ffff800000801e5c <set_mem_area>:
set_mem_area():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:150
void set_mem_area(unsigned long base, unsigned long len, unsigned long type)
{
ffff800000801e5c:	f3 0f 1e fa          	endbr64 
ffff800000801e60:	55                   	push   rbp
ffff800000801e61:	48 89 e5             	mov    rbp,rsp
ffff800000801e64:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000801e64 <set_mem_area+0x8>
ffff800000801e6b:	49 bb d4 d4 01 00 00 	movabs r11,0x1d4d4
ffff800000801e72:	00 00 00 
ffff800000801e75:	4c 01 d8             	add    rax,r11
ffff800000801e78:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000801e7c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000801e80:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:151
    mmap_struct[mmap_t_i].base=base;
ffff800000801e84:	48 ba 70 fe ff ff ff 	movabs rdx,0xfffffffffffffe70
ffff800000801e8b:	ff ff ff 
ffff800000801e8e:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000801e92:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000801e94:	48 b9 b8 fd ff ff ff 	movabs rcx,0xfffffffffffffdb8
ffff800000801e9b:	ff ff ff 
ffff800000801e9e:	48 8b 34 08          	mov    rsi,QWORD PTR [rax+rcx*1]
ffff800000801ea2:	48 63 ca             	movsxd rcx,edx
ffff800000801ea5:	48 89 ca             	mov    rdx,rcx
ffff800000801ea8:	48 01 d2             	add    rdx,rdx
ffff800000801eab:	48 01 ca             	add    rdx,rcx
ffff800000801eae:	48 c1 e2 03          	shl    rdx,0x3
ffff800000801eb2:	48 8d 0c 16          	lea    rcx,[rsi+rdx*1]
ffff800000801eb6:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000801eba:	48 89 11             	mov    QWORD PTR [rcx],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:152
    mmap_struct[mmap_t_i].len=len;
ffff800000801ebd:	48 ba 70 fe ff ff ff 	movabs rdx,0xfffffffffffffe70
ffff800000801ec4:	ff ff ff 
ffff800000801ec7:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000801ecb:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000801ecd:	48 b9 b8 fd ff ff ff 	movabs rcx,0xfffffffffffffdb8
ffff800000801ed4:	ff ff ff 
ffff800000801ed7:	48 8b 34 08          	mov    rsi,QWORD PTR [rax+rcx*1]
ffff800000801edb:	48 63 ca             	movsxd rcx,edx
ffff800000801ede:	48 89 ca             	mov    rdx,rcx
ffff800000801ee1:	48 01 d2             	add    rdx,rdx
ffff800000801ee4:	48 01 ca             	add    rdx,rcx
ffff800000801ee7:	48 c1 e2 03          	shl    rdx,0x3
ffff800000801eeb:	48 01 f2             	add    rdx,rsi
ffff800000801eee:	48 8d 4a 08          	lea    rcx,[rdx+0x8]
ffff800000801ef2:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff800000801ef6:	48 89 11             	mov    QWORD PTR [rcx],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:153
    mmap_struct[mmap_t_i++].type=type;
ffff800000801ef9:	48 ba 70 fe ff ff ff 	movabs rdx,0xfffffffffffffe70
ffff800000801f00:	ff ff ff 
ffff800000801f03:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000801f07:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000801f09:	8d 72 01             	lea    esi,[rdx+0x1]
ffff800000801f0c:	48 b9 70 fe ff ff ff 	movabs rcx,0xfffffffffffffe70
ffff800000801f13:	ff ff ff 
ffff800000801f16:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff800000801f1a:	89 31                	mov    DWORD PTR [rcx],esi
ffff800000801f1c:	48 b9 b8 fd ff ff ff 	movabs rcx,0xfffffffffffffdb8
ffff800000801f23:	ff ff ff 
ffff800000801f26:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff800000801f2a:	48 63 d2             	movsxd rdx,edx
ffff800000801f2d:	48 89 d0             	mov    rax,rdx
ffff800000801f30:	48 01 c0             	add    rax,rax
ffff800000801f33:	48 01 d0             	add    rax,rdx
ffff800000801f36:	48 c1 e0 03          	shl    rax,0x3
ffff800000801f3a:	48 01 c8             	add    rax,rcx
ffff800000801f3d:	48 8d 50 10          	lea    rdx,[rax+0x10]
ffff800000801f41:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801f45:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:154
}
ffff800000801f48:	90                   	nop
ffff800000801f49:	5d                   	pop    rbp
ffff800000801f4a:	c3                   	ret    

ffff800000801f4b <kmalloc>:
kmalloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:156
addr_t kmalloc()
{
ffff800000801f4b:	f3 0f 1e fa          	endbr64 
ffff800000801f4f:	55                   	push   rbp
ffff800000801f50:	48 89 e5             	mov    rbp,rsp
ffff800000801f53:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000801f53 <kmalloc+0x8>
ffff800000801f5a:	49 bb e5 d3 01 00 00 	movabs r11,0x1d3e5
ffff800000801f61:	00 00 00 
ffff800000801f64:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:157
    for(int i=0;i<VMALLOC_PGN/32;i++)
ffff800000801f67:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000801f6e:	e9 c6 00 00 00       	jmp    ffff800000802039 <kmalloc+0xee>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:159
    {
        for(int j=0;j<32;j++)
ffff800000801f73:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
ffff800000801f7a:	e9 ac 00 00 00       	jmp    ffff80000080202b <kmalloc+0xe0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:161
        {
            if(!(vmalloc_map[i]&(1<<j)))
ffff800000801f7f:	48 ba 70 fd ff ff ff 	movabs rdx,0xfffffffffffffd70
ffff800000801f86:	ff ff ff 
ffff800000801f89:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000801f8d:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000801f90:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000801f93:	48 63 d2             	movsxd rdx,edx
ffff800000801f96:	48 c1 e2 02          	shl    rdx,0x2
ffff800000801f9a:	48 01 ca             	add    rdx,rcx
ffff800000801f9d:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff800000801f9f:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff800000801fa2:	bf 01 00 00 00       	mov    edi,0x1
ffff800000801fa7:	89 d1                	mov    ecx,edx
ffff800000801fa9:	d3 e7                	shl    edi,cl
ffff800000801fab:	89 fa                	mov    edx,edi
ffff800000801fad:	21 f2                	and    edx,esi
ffff800000801faf:	85 d2                	test   edx,edx
ffff800000801fb1:	75 74                	jne    ffff800000802027 <kmalloc+0xdc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:163
            {
                vmalloc_map[i]|=(1<<j);
ffff800000801fb3:	48 ba 70 fd ff ff ff 	movabs rdx,0xfffffffffffffd70
ffff800000801fba:	ff ff ff 
ffff800000801fbd:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000801fc1:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000801fc4:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000801fc7:	48 63 d2             	movsxd rdx,edx
ffff800000801fca:	48 c1 e2 02          	shl    rdx,0x2
ffff800000801fce:	48 01 ca             	add    rdx,rcx
ffff800000801fd1:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff800000801fd3:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff800000801fd6:	bf 01 00 00 00       	mov    edi,0x1
ffff800000801fdb:	89 d1                	mov    ecx,edx
ffff800000801fdd:	d3 e7                	shl    edi,cl
ffff800000801fdf:	89 fa                	mov    edx,edi
ffff800000801fe1:	89 d1                	mov    ecx,edx
ffff800000801fe3:	48 ba 70 fd ff ff ff 	movabs rdx,0xfffffffffffffd70
ffff800000801fea:	ff ff ff 
ffff800000801fed:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000801ff1:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000801ff4:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000801ff7:	48 98                	cdqe   
ffff800000801ff9:	48 c1 e0 02          	shl    rax,0x2
ffff800000801ffd:	48 01 d0             	add    rax,rdx
ffff800000802000:	09 ce                	or     esi,ecx
ffff800000802002:	89 f2                	mov    edx,esi
ffff800000802004:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:164
                return VMALLOC_BASE+(i*32+j)*0x1000;
ffff800000802006:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802009:	c1 e0 05             	shl    eax,0x5
ffff80000080200c:	89 c2                	mov    edx,eax
ffff80000080200e:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff800000802011:	01 d0                	add    eax,edx
ffff800000802013:	c1 e0 0c             	shl    eax,0xc
ffff800000802016:	48 98                	cdqe   
ffff800000802018:	48 ba 00 00 00 02 00 	movabs rdx,0xffff800002000000
ffff80000080201f:	80 ff ff 
ffff800000802022:	48 01 d0             	add    rax,rdx
ffff800000802025:	eb 1c                	jmp    ffff800000802043 <kmalloc+0xf8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:159 (discriminator 2)
        for(int j=0;j<32;j++)
ffff800000802027:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:159 (discriminator 1)
ffff80000080202b:	83 7d f8 1f          	cmp    DWORD PTR [rbp-0x8],0x1f
ffff80000080202f:	0f 8e 4a ff ff ff    	jle    ffff800000801f7f <kmalloc+0x34>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:157 (discriminator 2)
    for(int i=0;i<VMALLOC_PGN/32;i++)
ffff800000802035:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:157 (discriminator 1)
ffff800000802039:	83 7d fc 7f          	cmp    DWORD PTR [rbp-0x4],0x7f
ffff80000080203d:	0f 8e 30 ff ff ff    	jle    ffff800000801f73 <kmalloc+0x28>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:168
            }
        }
    }
}
ffff800000802043:	5d                   	pop    rbp
ffff800000802044:	c3                   	ret    

ffff800000802045 <kmallocat>:
kmallocat():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:170
addr_t kmallocat(addr_t addr,int pgc)
{
ffff800000802045:	f3 0f 1e fa          	endbr64 
ffff800000802049:	55                   	push   rbp
ffff80000080204a:	48 89 e5             	mov    rbp,rsp
ffff80000080204d:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080204d <kmallocat+0x8>
ffff800000802054:	49 bb eb d2 01 00 00 	movabs r11,0x1d2eb
ffff80000080205b:	00 00 00 
ffff80000080205e:	4c 01 d8             	add    rax,r11
ffff800000802061:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000802065:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:171
    int pi=(addr-VMALLOC_BASE)/PAGE_4K_SIZE;
ffff800000802068:	48 b9 00 00 00 fe ff 	movabs rcx,0x7ffffe000000
ffff80000080206f:	7f 00 00 
ffff800000802072:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000802076:	48 01 ca             	add    rdx,rcx
ffff800000802079:	48 c1 ea 0c          	shr    rdx,0xc
ffff80000080207d:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:172
    if(addr==0){
ffff800000802080:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff800000802085:	0f 85 3f 01 00 00    	jne    ffff8000008021ca <kmallocat+0x185>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:173
        int l=0,p=0;
ffff80000080208b:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000802092:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:174
        for(int i=0;i<kmalloc_pgc;i++){
ffff800000802099:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
ffff8000008020a0:	eb 63                	jmp    ffff800000802105 <kmallocat+0xc0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:175
            if(!(vmalloc_map[i/32]&(1u<<(i%32)))){
ffff8000008020a2:	48 ba 70 fd ff ff ff 	movabs rdx,0xfffffffffffffd70
ffff8000008020a9:	ff ff ff 
ffff8000008020ac:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008020b0:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff8000008020b3:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff8000008020b6:	8d 4a 1f             	lea    ecx,[rdx+0x1f]
ffff8000008020b9:	85 d2                	test   edx,edx
ffff8000008020bb:	0f 48 d1             	cmovs  edx,ecx
ffff8000008020be:	c1 fa 05             	sar    edx,0x5
ffff8000008020c1:	48 63 d2             	movsxd rdx,edx
ffff8000008020c4:	48 c1 e2 02          	shl    rdx,0x2
ffff8000008020c8:	48 01 f2             	add    rdx,rsi
ffff8000008020cb:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff8000008020cd:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff8000008020d0:	83 e2 1f             	and    edx,0x1f
ffff8000008020d3:	89 d1                	mov    ecx,edx
ffff8000008020d5:	d3 ee                	shr    esi,cl
ffff8000008020d7:	89 f2                	mov    edx,esi
ffff8000008020d9:	83 e2 01             	and    edx,0x1
ffff8000008020dc:	85 d2                	test   edx,edx
ffff8000008020de:	75 12                	jne    ffff8000008020f2 <kmallocat+0xad>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:176
                if(l==0)
ffff8000008020e0:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
ffff8000008020e4:	75 06                	jne    ffff8000008020ec <kmallocat+0xa7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:177
                    p=i;//开头空页
ffff8000008020e6:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff8000008020e9:	89 55 f8             	mov    DWORD PTR [rbp-0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:178
                l++;
ffff8000008020ec:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
ffff8000008020f0:	eb 07                	jmp    ffff8000008020f9 <kmallocat+0xb4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:180
            } else
                l=0;
ffff8000008020f2:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:181
            if(l==pgc)break;
ffff8000008020f9:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff8000008020fc:	3b 55 d4             	cmp    edx,DWORD PTR [rbp-0x2c]
ffff8000008020ff:	74 1b                	je     ffff80000080211c <kmallocat+0xd7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:174 (discriminator 2)
        for(int i=0;i<kmalloc_pgc;i++){
ffff800000802101:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:174 (discriminator 1)
ffff800000802105:	48 ba 58 ff ff ff ff 	movabs rdx,0xffffffffffffff58
ffff80000080210c:	ff ff ff 
ffff80000080210f:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000802113:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000802115:	39 55 f4             	cmp    DWORD PTR [rbp-0xc],edx
ffff800000802118:	7c 88                	jl     ffff8000008020a2 <kmallocat+0x5d>
ffff80000080211a:	eb 01                	jmp    ffff80000080211d <kmallocat+0xd8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:181
            if(l==pgc)break;
ffff80000080211c:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:183
        }
        if(l<pgc)return -1;
ffff80000080211d:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000802120:	3b 55 d4             	cmp    edx,DWORD PTR [rbp-0x2c]
ffff800000802123:	7d 0c                	jge    ffff800000802131 <kmallocat+0xec>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:183 (discriminator 1)
ffff800000802125:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff80000080212c:	e9 87 01 00 00       	jmp    ffff8000008022b8 <kmallocat+0x273>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:185
        //开始占用
        for(int i=0;i<pgc;i++){
ffff800000802131:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [rbp-0x10],0x0
ffff800000802138:	eb 6e                	jmp    ffff8000008021a8 <kmallocat+0x163>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:186 (discriminator 3)
            vmalloc_map[(p+i)/32]|=1u<<((p+i)%32);
ffff80000080213a:	48 ba 70 fd ff ff ff 	movabs rdx,0xfffffffffffffd70
ffff800000802141:	ff ff ff 
ffff800000802144:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000802148:	48 8b 3a             	mov    rdi,QWORD PTR [rdx]
ffff80000080214b:	8b 4d f8             	mov    ecx,DWORD PTR [rbp-0x8]
ffff80000080214e:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
ffff800000802151:	01 ca                	add    edx,ecx
ffff800000802153:	8d 4a 1f             	lea    ecx,[rdx+0x1f]
ffff800000802156:	85 d2                	test   edx,edx
ffff800000802158:	0f 48 d1             	cmovs  edx,ecx
ffff80000080215b:	c1 fa 05             	sar    edx,0x5
ffff80000080215e:	89 d6                	mov    esi,edx
ffff800000802160:	48 63 d6             	movsxd rdx,esi
ffff800000802163:	48 c1 e2 02          	shl    rdx,0x2
ffff800000802167:	48 01 fa             	add    rdx,rdi
ffff80000080216a:	8b 3a                	mov    edi,DWORD PTR [rdx]
ffff80000080216c:	8b 4d f8             	mov    ecx,DWORD PTR [rbp-0x8]
ffff80000080216f:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
ffff800000802172:	01 ca                	add    edx,ecx
ffff800000802174:	83 e2 1f             	and    edx,0x1f
ffff800000802177:	41 b8 01 00 00 00    	mov    r8d,0x1
ffff80000080217d:	89 d1                	mov    ecx,edx
ffff80000080217f:	41 d3 e0             	shl    r8d,cl
ffff800000802182:	48 ba 70 fd ff ff ff 	movabs rdx,0xfffffffffffffd70
ffff800000802189:	ff ff ff 
ffff80000080218c:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000802190:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000802193:	48 63 d6             	movsxd rdx,esi
ffff800000802196:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080219a:	48 01 ca             	add    rdx,rcx
ffff80000080219d:	44 09 c7             	or     edi,r8d
ffff8000008021a0:	89 f9                	mov    ecx,edi
ffff8000008021a2:	89 0a                	mov    DWORD PTR [rdx],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:185 (discriminator 3)
        for(int i=0;i<pgc;i++){
ffff8000008021a4:	83 45 f0 01          	add    DWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:185 (discriminator 1)
ffff8000008021a8:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
ffff8000008021ab:	3b 55 d4             	cmp    edx,DWORD PTR [rbp-0x2c]
ffff8000008021ae:	7c 8a                	jl     ffff80000080213a <kmallocat+0xf5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:188
        }
        return VMALLOC_BASE+PAGE_4K_SIZE*p;
ffff8000008021b0:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff8000008021b3:	c1 e0 0c             	shl    eax,0xc
ffff8000008021b6:	48 98                	cdqe   
ffff8000008021b8:	48 ba 00 00 00 02 00 	movabs rdx,0xffff800002000000
ffff8000008021bf:	80 ff ff 
ffff8000008021c2:	48 01 d0             	add    rax,rdx
ffff8000008021c5:	e9 ee 00 00 00       	jmp    ffff8000008022b8 <kmallocat+0x273>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:190
    }
    for(int i=0;i<pgc;i++){
ffff8000008021ca:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff8000008021d1:	eb 5c                	jmp    ffff80000080222f <kmallocat+0x1ea>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:191
        if(vmalloc_map[(pi+i)/32]&(1<<((pi+i)%32)))
ffff8000008021d3:	48 ba 70 fd ff ff ff 	movabs rdx,0xfffffffffffffd70
ffff8000008021da:	ff ff ff 
ffff8000008021dd:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008021e1:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff8000008021e4:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
ffff8000008021e7:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff8000008021ea:	01 ca                	add    edx,ecx
ffff8000008021ec:	8d 4a 1f             	lea    ecx,[rdx+0x1f]
ffff8000008021ef:	85 d2                	test   edx,edx
ffff8000008021f1:	0f 48 d1             	cmovs  edx,ecx
ffff8000008021f4:	c1 fa 05             	sar    edx,0x5
ffff8000008021f7:	48 63 d2             	movsxd rdx,edx
ffff8000008021fa:	48 c1 e2 02          	shl    rdx,0x2
ffff8000008021fe:	48 01 f2             	add    rdx,rsi
ffff800000802201:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff800000802203:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
ffff800000802206:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000802209:	01 ca                	add    edx,ecx
ffff80000080220b:	83 e2 1f             	and    edx,0x1f
ffff80000080220e:	bf 01 00 00 00       	mov    edi,0x1
ffff800000802213:	89 d1                	mov    ecx,edx
ffff800000802215:	d3 e7                	shl    edi,cl
ffff800000802217:	89 fa                	mov    edx,edi
ffff800000802219:	21 f2                	and    edx,esi
ffff80000080221b:	85 d2                	test   edx,edx
ffff80000080221d:	74 0c                	je     ffff80000080222b <kmallocat+0x1e6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:192
            return -1;
ffff80000080221f:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff800000802226:	e9 8d 00 00 00       	jmp    ffff8000008022b8 <kmallocat+0x273>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:190 (discriminator 2)
    for(int i=0;i<pgc;i++){
ffff80000080222b:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:190 (discriminator 1)
ffff80000080222f:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000802232:	3b 55 d4             	cmp    edx,DWORD PTR [rbp-0x2c]
ffff800000802235:	7c 9c                	jl     ffff8000008021d3 <kmallocat+0x18e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:195
    }
    //
    for(int i=0;i<pgc;i++){
ffff800000802237:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff80000080223e:	eb 6c                	jmp    ffff8000008022ac <kmallocat+0x267>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:196 (discriminator 3)
        vmalloc_map[(pi+i)]|=(1<<((pi+i)%32));
ffff800000802240:	48 ba 70 fd ff ff ff 	movabs rdx,0xfffffffffffffd70
ffff800000802247:	ff ff ff 
ffff80000080224a:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080224e:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000802251:	8b 75 e4             	mov    esi,DWORD PTR [rbp-0x1c]
ffff800000802254:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000802257:	01 f2                	add    edx,esi
ffff800000802259:	48 63 d2             	movsxd rdx,edx
ffff80000080225c:	48 c1 e2 02          	shl    rdx,0x2
ffff800000802260:	48 01 ca             	add    rdx,rcx
ffff800000802263:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff800000802265:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
ffff800000802268:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff80000080226b:	01 ca                	add    edx,ecx
ffff80000080226d:	83 e2 1f             	and    edx,0x1f
ffff800000802270:	bf 01 00 00 00       	mov    edi,0x1
ffff800000802275:	89 d1                	mov    ecx,edx
ffff800000802277:	d3 e7                	shl    edi,cl
ffff800000802279:	89 fa                	mov    edx,edi
ffff80000080227b:	41 89 d0             	mov    r8d,edx
ffff80000080227e:	48 ba 70 fd ff ff ff 	movabs rdx,0xfffffffffffffd70
ffff800000802285:	ff ff ff 
ffff800000802288:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080228c:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080228f:	8b 7d e4             	mov    edi,DWORD PTR [rbp-0x1c]
ffff800000802292:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000802295:	01 fa                	add    edx,edi
ffff800000802297:	48 63 d2             	movsxd rdx,edx
ffff80000080229a:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080229e:	48 01 ca             	add    rdx,rcx
ffff8000008022a1:	44 09 c6             	or     esi,r8d
ffff8000008022a4:	89 f1                	mov    ecx,esi
ffff8000008022a6:	89 0a                	mov    DWORD PTR [rdx],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:195 (discriminator 3)
    for(int i=0;i<pgc;i++){
ffff8000008022a8:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:195 (discriminator 1)
ffff8000008022ac:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff8000008022af:	3b 55 d4             	cmp    edx,DWORD PTR [rbp-0x2c]
ffff8000008022b2:	7c 8c                	jl     ffff800000802240 <kmallocat+0x1fb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:198
    }
    return addr;
ffff8000008022b4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:200

}
ffff8000008022b8:	5d                   	pop    rbp
ffff8000008022b9:	c3                   	ret    

ffff8000008022ba <kmfree>:
kmfree():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:203

int kmfree(addr_t ptr)
{
ffff8000008022ba:	f3 0f 1e fa          	endbr64 
ffff8000008022be:	55                   	push   rbp
ffff8000008022bf:	48 89 e5             	mov    rbp,rsp
ffff8000008022c2:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff8000008022c2 <kmfree+0x8>
ffff8000008022c9:	49 bb 76 d0 01 00 00 	movabs r11,0x1d076
ffff8000008022d0:	00 00 00 
ffff8000008022d3:	4c 01 da             	add    rdx,r11
ffff8000008022d6:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:204
    int num=ptr/PAGE_SIZE;
ffff8000008022da:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008022de:	48 c1 e8 0c          	shr    rax,0xc
ffff8000008022e2:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:205
    int n=num/32;
ffff8000008022e5:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008022e8:	8d 48 1f             	lea    ecx,[rax+0x1f]
ffff8000008022eb:	85 c0                	test   eax,eax
ffff8000008022ed:	0f 48 c1             	cmovs  eax,ecx
ffff8000008022f0:	c1 f8 05             	sar    eax,0x5
ffff8000008022f3:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:206
    int r=num%32;
ffff8000008022f6:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008022f9:	89 c1                	mov    ecx,eax
ffff8000008022fb:	c1 f9 1f             	sar    ecx,0x1f
ffff8000008022fe:	c1 e9 1b             	shr    ecx,0x1b
ffff800000802301:	01 c8                	add    eax,ecx
ffff800000802303:	83 e0 1f             	and    eax,0x1f
ffff800000802306:	29 c8                	sub    eax,ecx
ffff800000802308:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:207
    vmalloc_map[n]=vmalloc_map[n]&~(unsigned int)(1<<r);
ffff80000080230b:	48 b8 70 fd ff ff ff 	movabs rax,0xfffffffffffffd70
ffff800000802312:	ff ff ff 
ffff800000802315:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000802319:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080231c:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff80000080231f:	48 98                	cdqe   
ffff800000802321:	48 c1 e0 02          	shl    rax,0x2
ffff800000802325:	48 01 c8             	add    rax,rcx
ffff800000802328:	8b 30                	mov    esi,DWORD PTR [rax]
ffff80000080232a:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffff80000080232d:	bf 01 00 00 00       	mov    edi,0x1
ffff800000802332:	89 c1                	mov    ecx,eax
ffff800000802334:	d3 e7                	shl    edi,cl
ffff800000802336:	89 f8                	mov    eax,edi
ffff800000802338:	f7 d0                	not    eax
ffff80000080233a:	89 c1                	mov    ecx,eax
ffff80000080233c:	48 b8 70 fd ff ff ff 	movabs rax,0xfffffffffffffd70
ffff800000802343:	ff ff ff 
ffff800000802346:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff80000080234a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080234d:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff800000802350:	48 98                	cdqe   
ffff800000802352:	48 c1 e0 02          	shl    rax,0x2
ffff800000802356:	48 01 d0             	add    rax,rdx
ffff800000802359:	21 ce                	and    esi,ecx
ffff80000080235b:	89 f2                	mov    edx,esi
ffff80000080235d:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:208
}
ffff80000080235f:	90                   	nop
ffff800000802360:	5d                   	pop    rbp
ffff800000802361:	c3                   	ret    

ffff800000802362 <page_err>:
page_err():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:209
void page_err(){
ffff800000802362:	f3 0f 1e fa          	endbr64 
ffff800000802366:	55                   	push   rbp
ffff800000802367:	48 89 e5             	mov    rbp,rsp
ffff80000080236a:	41 57                	push   r15
ffff80000080236c:	41 55                	push   r13
ffff80000080236e:	41 54                	push   r12
ffff800000802370:	53                   	push   rbx
ffff800000802371:	48 83 ec 20          	sub    rsp,0x20
ffff800000802375:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000802375 <page_err+0x13>
ffff80000080237c:	49 bb c3 cf 01 00 00 	movabs r11,0x1cfc3
ffff800000802383:	00 00 00 
ffff800000802386:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:210
    asm("cli");
ffff800000802389:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:211
    printf("page err\n");
ffff80000080238a:	48 b8 e0 c4 ff ff ff 	movabs rax,0xffffffffffffc4e0
ffff800000802391:	ff ff ff 
ffff800000802394:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000802398:	48 89 c7             	mov    rdi,rax
ffff80000080239b:	49 89 df             	mov    r15,rbx
ffff80000080239e:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008023a3:	48 ba 92 23 fe ff ff 	movabs rdx,0xfffffffffffe2392
ffff8000008023aa:	ff ff ff 
ffff8000008023ad:	48 01 da             	add    rdx,rbx
ffff8000008023b0:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:212
    unsigned long err_code=0,l_addr=0;
ffff8000008023b2:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff8000008023b9:	00 
ffff8000008023ba:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff8000008023c1:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:213
    asm volatile("mov 0(%%rbp),%0":"=r"(err_code));
ffff8000008023c2:	48 8b 45 00          	mov    rax,QWORD PTR [rbp+0x0]
ffff8000008023c6:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:214
    asm volatile("mov %%cr2,%0":"=r"(l_addr));//试图访问的地址
ffff8000008023ca:	0f 20 d0             	mov    rax,cr2
ffff8000008023cd:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:215
    int p=err_code&1;
ffff8000008023d1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008023d5:	83 e0 01             	and    eax,0x1
ffff8000008023d8:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:217

    if(!p)
ffff8000008023db:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
ffff8000008023df:	75 72                	jne    ffff800000802453 <page_err+0xf1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:224
        //accessing non-existent page
        //检查地址合法性
        if(l_addr>=MEM_END)
            ;
        //在进程的页表中申请新页
        smmap(get_phyaddr(req_a_page()),l_addr&~0xfff,PAGE_PRESENT|PAGE_RWX|PAGE_FOR_ALL,current->pml4);
ffff8000008023e1:	48 b8 90 fe ff ff ff 	movabs rax,0xfffffffffffffe90
ffff8000008023e8:	ff ff ff 
ffff8000008023eb:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008023ef:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008023f2:	4c 8b a0 c0 00 00 00 	mov    r12,QWORD PTR [rax+0xc0]
ffff8000008023f9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008023fd:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
ffff800000802403:	49 89 c5             	mov    r13,rax
ffff800000802406:	49 89 df             	mov    r15,rbx
ffff800000802409:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080240e:	48 ba eb 35 fe ff ff 	movabs rdx,0xfffffffffffe35eb
ffff800000802415:	ff ff ff 
ffff800000802418:	48 01 da             	add    rdx,rbx
ffff80000080241b:	ff d2                	call   rdx
ffff80000080241d:	89 c7                	mov    edi,eax
ffff80000080241f:	49 89 df             	mov    r15,rbx
ffff800000802422:	48 b8 f2 38 fe ff ff 	movabs rax,0xfffffffffffe38f2
ffff800000802429:	ff ff ff 
ffff80000080242c:	48 01 d8             	add    rax,rbx
ffff80000080242f:	ff d0                	call   rax
ffff800000802431:	48 98                	cdqe   
ffff800000802433:	4c 89 e1             	mov    rcx,r12
ffff800000802436:	ba 07 00 00 00       	mov    edx,0x7
ffff80000080243b:	4c 89 ee             	mov    rsi,r13
ffff80000080243e:	48 89 c7             	mov    rdi,rax
ffff800000802441:	49 89 df             	mov    r15,rbx
ffff800000802444:	48 b8 98 27 fe ff ff 	movabs rax,0xfffffffffffe2798
ffff80000080244b:	ff ff ff 
ffff80000080244e:	48 01 d8             	add    rax,rbx
ffff800000802451:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:242
    }
    else
    {
        //page level protection
    }
    p=err_code&2;
ffff800000802453:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000802457:	83 e0 02             	and    eax,0x2
ffff80000080245a:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:243
    if(p)printf("when writing\n");else //puts("when reading");
ffff80000080245d:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
ffff800000802461:	74 2a                	je     ffff80000080248d <page_err+0x12b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:243 (discriminator 1)
ffff800000802463:	48 b8 ea c4 ff ff ff 	movabs rax,0xffffffffffffc4ea
ffff80000080246a:	ff ff ff 
ffff80000080246d:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000802471:	48 89 c7             	mov    rdi,rax
ffff800000802474:	49 89 df             	mov    r15,rbx
ffff800000802477:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080247c:	48 ba 92 23 fe ff ff 	movabs rdx,0xfffffffffffe2392
ffff800000802483:	ff ff ff 
ffff800000802486:	48 01 da             	add    rdx,rbx
ffff800000802489:	ff d2                	call   rdx
ffff80000080248b:	eb 0a                	jmp    ffff800000802497 <page_err+0x135>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:244
    p=err_code&4;
ffff80000080248d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000802491:	83 e0 04             	and    eax,0x4
ffff800000802494:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:245
    if(!p)printf("supervisor mode\n");else //puts("user mode");
ffff800000802497:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
ffff80000080249b:	75 2a                	jne    ffff8000008024c7 <page_err+0x165>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:245 (discriminator 1)
ffff80000080249d:	48 b8 f8 c4 ff ff ff 	movabs rax,0xffffffffffffc4f8
ffff8000008024a4:	ff ff ff 
ffff8000008024a7:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008024ab:	48 89 c7             	mov    rdi,rax
ffff8000008024ae:	49 89 df             	mov    r15,rbx
ffff8000008024b1:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008024b6:	48 ba 92 23 fe ff ff 	movabs rdx,0xfffffffffffe2392
ffff8000008024bd:	ff ff ff 
ffff8000008024c0:	48 01 da             	add    rdx,rbx
ffff8000008024c3:	ff d2                	call   rdx
ffff8000008024c5:	eb 0a                	jmp    ffff8000008024d1 <page_err+0x16f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:246
    p=err_code&16;
ffff8000008024c7:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008024cb:	83 e0 10             	and    eax,0x10
ffff8000008024ce:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:247
    if(p)printf("an instruction tries to fetch\n");
ffff8000008024d1:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
ffff8000008024d5:	74 28                	je     ffff8000008024ff <page_err+0x19d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:247 (discriminator 1)
ffff8000008024d7:	48 b8 10 c5 ff ff ff 	movabs rax,0xffffffffffffc510
ffff8000008024de:	ff ff ff 
ffff8000008024e1:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008024e5:	48 89 c7             	mov    rdi,rax
ffff8000008024e8:	49 89 df             	mov    r15,rbx
ffff8000008024eb:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008024f0:	48 ba 92 23 fe ff ff 	movabs rdx,0xfffffffffffe2392
ffff8000008024f7:	ff ff ff 
ffff8000008024fa:	48 01 da             	add    rdx,rbx
ffff8000008024fd:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:248
    unsigned int addr=0;
ffff8000008024ff:	c7 45 c4 00 00 00 00 	mov    DWORD PTR [rbp-0x3c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:249
    asm volatile("mov 8(%%rbp),%0":"=r"(addr));
ffff800000802506:	8b 45 08             	mov    eax,DWORD PTR [rbp+0x8]
ffff800000802509:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:250
    printf("occurred at %x(paddr), %x(laddr)\n",addr,l_addr);
ffff80000080250c:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000802510:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff800000802513:	89 c6                	mov    esi,eax
ffff800000802515:	48 b8 30 c5 ff ff ff 	movabs rax,0xffffffffffffc530
ffff80000080251c:	ff ff ff 
ffff80000080251f:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000802523:	48 89 c7             	mov    rdi,rax
ffff800000802526:	49 89 df             	mov    r15,rbx
ffff800000802529:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080252e:	48 b9 92 23 fe ff ff 	movabs rcx,0xfffffffffffe2392
ffff800000802535:	ff ff ff 
ffff800000802538:	48 01 d9             	add    rcx,rbx
ffff80000080253b:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:253
    extern int cur_proc;
    extern struct process *task;
    if(task[cur_proc].pid==1)//系统进程
ffff80000080253d:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000802544:	ff ff ff 
ffff800000802547:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080254b:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080254e:	48 b8 40 fe ff ff ff 	movabs rax,0xfffffffffffffe40
ffff800000802555:	ff ff ff 
ffff800000802558:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080255c:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080255e:	48 98                	cdqe   
ffff800000802560:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff800000802567:	48 01 d0             	add    rax,rdx
ffff80000080256a:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080256c:	83 f8 01             	cmp    eax,0x1
ffff80000080256f:	75 2a                	jne    ffff80000080259b <page_err+0x239>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:255
    {
        printf("sys died. please reboot.\n");
ffff800000802571:	48 b8 52 c5 ff ff ff 	movabs rax,0xffffffffffffc552
ffff800000802578:	ff ff ff 
ffff80000080257b:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080257f:	48 89 c7             	mov    rdi,rax
ffff800000802582:	49 89 df             	mov    r15,rbx
ffff800000802585:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080258a:	48 ba 92 23 fe ff ff 	movabs rdx,0xfffffffffffe2392
ffff800000802591:	ff ff ff 
ffff800000802594:	48 01 da             	add    rdx,rbx
ffff800000802597:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:256
        asm volatile("jmp .");
ffff800000802599:	eb fe                	jmp    ffff800000802599 <page_err+0x237>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:262
    }
    //杀死问题进程
//    del_proc(cur_proc);
    // printf("killed the problem process.\n");
    // printf("shell:>");
    eoi();
ffff80000080259b:	49 89 df             	mov    r15,rbx
ffff80000080259e:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008025a3:	48 ba 76 ae fe ff ff 	movabs rdx,0xfffffffffffeae76
ffff8000008025aa:	ff ff ff 
ffff8000008025ad:	48 01 da             	add    rdx,rbx
ffff8000008025b0:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:264
    //这里对esp的加法是必要的，因为page fault多push了一个错误码，但是iret识别不了
    __asm__ volatile ("sti \r\n  leave\n add $8,%rsp \n iretq");
ffff8000008025b2:	fb                   	sti    
ffff8000008025b3:	c9                   	leave  
ffff8000008025b4:	48 83 c4 08          	add    rsp,0x8
ffff8000008025b8:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:265
}
ffff8000008025ba:	90                   	nop
ffff8000008025bb:	48 83 c4 20          	add    rsp,0x20
ffff8000008025bf:	5b                   	pop    rbx
ffff8000008025c0:	41 5c                	pop    r12
ffff8000008025c2:	41 5d                	pop    r13
ffff8000008025c4:	41 5f                	pop    r15
ffff8000008025c6:	5d                   	pop    rbp
ffff8000008025c7:	c3                   	ret    

ffff8000008025c8 <init_memory>:
init_memory():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:267
void init_memory()
{
ffff8000008025c8:	f3 0f 1e fa          	endbr64 
ffff8000008025cc:	55                   	push   rbp
ffff8000008025cd:	48 89 e5             	mov    rbp,rsp
ffff8000008025d0:	41 57                	push   r15
ffff8000008025d2:	53                   	push   rbx
ffff8000008025d3:	48 83 ec 50          	sub    rsp,0x50
ffff8000008025d7:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008025d7 <init_memory+0xf>
ffff8000008025de:	49 bb 61 cd 01 00 00 	movabs r11,0x1cd61
ffff8000008025e5:	00 00 00 
ffff8000008025e8:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:270
    extern addr_t _knl_end,_knl_start;//lds中声明的内核的结尾地址，放置位图
    //获取内存大小
    size_t mem_size=mmap_struct[mmap_t_i-1].base+mmap_struct[mmap_t_i-1].len;
ffff8000008025eb:	48 b8 70 fe ff ff ff 	movabs rax,0xfffffffffffffe70
ffff8000008025f2:	ff ff ff 
ffff8000008025f5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008025f9:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008025fb:	8d 50 ff             	lea    edx,[rax-0x1]
ffff8000008025fe:	48 b8 b8 fd ff ff ff 	movabs rax,0xfffffffffffffdb8
ffff800000802605:	ff ff ff 
ffff800000802608:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff80000080260c:	48 63 d2             	movsxd rdx,edx
ffff80000080260f:	48 89 d0             	mov    rax,rdx
ffff800000802612:	48 01 c0             	add    rax,rax
ffff800000802615:	48 01 d0             	add    rax,rdx
ffff800000802618:	48 c1 e0 03          	shl    rax,0x3
ffff80000080261c:	48 01 c8             	add    rax,rcx
ffff80000080261f:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000802622:	48 b8 70 fe ff ff ff 	movabs rax,0xfffffffffffffe70
ffff800000802629:	ff ff ff 
ffff80000080262c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802630:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000802632:	8d 50 ff             	lea    edx,[rax-0x1]
ffff800000802635:	48 b8 b8 fd ff ff ff 	movabs rax,0xfffffffffffffdb8
ffff80000080263c:	ff ff ff 
ffff80000080263f:	48 8b 34 03          	mov    rsi,QWORD PTR [rbx+rax*1]
ffff800000802643:	48 63 d2             	movsxd rdx,edx
ffff800000802646:	48 89 d0             	mov    rax,rdx
ffff800000802649:	48 01 c0             	add    rax,rax
ffff80000080264c:	48 01 d0             	add    rax,rdx
ffff80000080264f:	48 c1 e0 03          	shl    rax,0x3
ffff800000802653:	48 01 f0             	add    rax,rsi
ffff800000802656:	48 83 c0 08          	add    rax,0x8
ffff80000080265a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080265d:	48 01 c8             	add    rax,rcx
ffff800000802660:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:277
    /*
     * 注：物理内存的一半会分给内核，所以除以2，内核空间page map不表示。
     * 前半部分是计算内存大小使多少个页，在位图中，一页表示为一位，所以除以后面部分，
     * 即一页位图可以有多少位。
     * */
    int pgc=(mem_size/2/PAGE_4K_SIZE)/(PAGE_4K_SIZE*8);
ffff800000802664:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000802668:	48 8d 90 ff ff ff 0f 	lea    rdx,[rax+0xfffffff]
ffff80000080266f:	48 85 c0             	test   rax,rax
ffff800000802672:	48 0f 48 c2          	cmovs  rax,rdx
ffff800000802676:	48 c1 f8 1c          	sar    rax,0x1c
ffff80000080267a:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:279
    //计算出位图所需的字节数
    int pg_bytes=pgc>>5;//=/32
ffff80000080267d:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffff800000802680:	c1 f8 05             	sar    eax,0x5
ffff800000802683:	89 45 b0             	mov    DWORD PTR [rbp-0x50],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:282
    //初始化vmalloc内存位图
    //计算位图需要多少个int
    size_t vmec= (mem_size/2-0x1000000)/PAGE_4K_SIZE/32;//去掉内核代码16M
ffff800000802686:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080268a:	48 89 c2             	mov    rdx,rax
ffff80000080268d:	48 c1 ea 3f          	shr    rdx,0x3f
ffff800000802691:	48 01 d0             	add    rax,rdx
ffff800000802694:	48 d1 f8             	sar    rax,1
ffff800000802697:	48 2d 00 00 00 01    	sub    rax,0x1000000
ffff80000080269d:	48 8d 90 ff ff 01 00 	lea    rdx,[rax+0x1ffff]
ffff8000008026a4:	48 85 c0             	test   rax,rax
ffff8000008026a7:	48 0f 48 c2          	cmovs  rax,rdx
ffff8000008026ab:	48 c1 f8 11          	sar    rax,0x11
ffff8000008026af:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:283
    size_t vmms=vmec*4/PAGE_4K_SIZE;//位图自己需要多少页
ffff8000008026b3:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008026b7:	48 8d 90 ff 03 00 00 	lea    rdx,[rax+0x3ff]
ffff8000008026be:	48 85 c0             	test   rax,rax
ffff8000008026c1:	48 0f 48 c2          	cmovs  rax,rdx
ffff8000008026c5:	48 c1 f8 0a          	sar    rax,0xa
ffff8000008026c9:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:284
    comprintf("tot memsize:0x%x,kmalloc pages count:%d,kmalloc bitmap taking 0x%d pages\n", mem_size,vmec,vmms);
ffff8000008026cd:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff8000008026d1:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff8000008026d5:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008026d9:	48 89 c6             	mov    rsi,rax
ffff8000008026dc:	48 b8 70 c5 ff ff ff 	movabs rax,0xffffffffffffc570
ffff8000008026e3:	ff ff ff 
ffff8000008026e6:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008026ea:	48 89 c7             	mov    rdi,rax
ffff8000008026ed:	49 89 df             	mov    r15,rbx
ffff8000008026f0:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008026f5:	49 b8 05 3a ff ff ff 	movabs r8,0xffffffffffff3a05
ffff8000008026fc:	ff ff ff 
ffff8000008026ff:	49 01 d8             	add    r8,rbx
ffff800000802702:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:285
    if(vmec*4%PAGE_4K_SIZE)
ffff800000802705:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000802709:	48 c1 e0 02          	shl    rax,0x2
ffff80000080270d:	25 fc 0f 00 00       	and    eax,0xffc
ffff800000802712:	48 85 c0             	test   rax,rax
ffff800000802715:	74 05                	je     ffff80000080271c <init_memory+0x154>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:286
        vmms++;
ffff800000802717:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:287
    for(int i=0;i<vmec;i++){
ffff80000080271c:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff800000802723:	eb 27                	jmp    ffff80000080274c <init_memory+0x184>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:288 (discriminator 3)
        vmalloc_map[i]=0;
ffff800000802725:	48 b8 70 fd ff ff ff 	movabs rax,0xfffffffffffffd70
ffff80000080272c:	ff ff ff 
ffff80000080272f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802733:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802736:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000802739:	48 98                	cdqe   
ffff80000080273b:	48 c1 e0 02          	shl    rax,0x2
ffff80000080273f:	48 01 d0             	add    rax,rdx
ffff800000802742:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:287 (discriminator 3)
    for(int i=0;i<vmec;i++){
ffff800000802748:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:287 (discriminator 1)
ffff80000080274c:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080274f:	48 98                	cdqe   
ffff800000802751:	48 39 45 a8          	cmp    QWORD PTR [rbp-0x58],rax
ffff800000802755:	7f ce                	jg     ffff800000802725 <init_memory+0x15d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:291
    }
    //位图占用前几页
    for(int i=0,j=0;j*32+i<vmms;i++)
ffff800000802757:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff80000080275e:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
ffff800000802765:	eb 61                	jmp    ffff8000008027c8 <init_memory+0x200>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:293
    {
        if(i==32)
ffff800000802767:	83 7d e0 20          	cmp    DWORD PTR [rbp-0x20],0x20
ffff80000080276b:	75 0b                	jne    ffff800000802778 <init_memory+0x1b0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:295
        {
            i=0;
ffff80000080276d:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:296
            j++;
ffff800000802774:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:298 (discriminator 2)
        }
        vmalloc_map[j]|=1u<<i;
ffff800000802778:	48 b8 70 fd ff ff ff 	movabs rax,0xfffffffffffffd70
ffff80000080277f:	ff ff ff 
ffff800000802782:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802786:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802789:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080278c:	48 98                	cdqe   
ffff80000080278e:	48 c1 e0 02          	shl    rax,0x2
ffff800000802792:	48 01 d0             	add    rax,rdx
ffff800000802795:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000802797:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff80000080279a:	be 01 00 00 00       	mov    esi,0x1
ffff80000080279f:	89 c1                	mov    ecx,eax
ffff8000008027a1:	d3 e6                	shl    esi,cl
ffff8000008027a3:	48 b8 70 fd ff ff ff 	movabs rax,0xfffffffffffffd70
ffff8000008027aa:	ff ff ff 
ffff8000008027ad:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008027b1:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008027b4:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008027b7:	48 98                	cdqe   
ffff8000008027b9:	48 c1 e0 02          	shl    rax,0x2
ffff8000008027bd:	48 01 c8             	add    rax,rcx
ffff8000008027c0:	09 f2                	or     edx,esi
ffff8000008027c2:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:291 (discriminator 2)
    for(int i=0,j=0;j*32+i<vmms;i++)
ffff8000008027c4:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:291 (discriminator 1)
ffff8000008027c8:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008027cb:	c1 e0 05             	shl    eax,0x5
ffff8000008027ce:	89 c2                	mov    edx,eax
ffff8000008027d0:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff8000008027d3:	01 d0                	add    eax,edx
ffff8000008027d5:	48 98                	cdqe   
ffff8000008027d7:	48 39 45 e8          	cmp    QWORD PTR [rbp-0x18],rax
ffff8000008027db:	7f 8a                	jg     ffff800000802767 <init_memory+0x19f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:301
    }
    //kmalloc连续的内存
    page_map=kmallocat(0,pgc);//(unsigned int*)PAGE_4K_ALIGN(0xc00000);
ffff8000008027dd:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffff8000008027e0:	89 c6                	mov    esi,eax
ffff8000008027e2:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008027e7:	49 89 df             	mov    r15,rbx
ffff8000008027ea:	48 b8 0d 2d fe ff ff 	movabs rax,0xfffffffffffe2d0d
ffff8000008027f1:	ff ff ff 
ffff8000008027f4:	48 01 d8             	add    rax,rbx
ffff8000008027f7:	ff d0                	call   rax
ffff8000008027f9:	48 89 c2             	mov    rdx,rax
ffff8000008027fc:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000802803:	ff ff ff 
ffff800000802806:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080280a:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:302
    int* p=page_map;
ffff80000080280d:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000802814:	ff ff ff 
ffff800000802817:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080281b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080281e:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:303
    addr_t curp=0;
ffff800000802822:	48 c7 45 a0 00 00 00 	mov    QWORD PTR [rbp-0x60],0x0
ffff800000802829:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:304
    for(int i=0;i<mmap_t_i;i++){
ffff80000080282a:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
ffff800000802831:	e9 a5 00 00 00       	jmp    ffff8000008028db <init_memory+0x313>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:305
        int cont=0;
ffff800000802836:	c7 45 c8 00 00 00 00 	mov    DWORD PTR [rbp-0x38],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:306
        if(mmap_struct[i].type!=MULTIBOOT_MEMORY_AVAILABLE)
ffff80000080283d:	48 b8 b8 fd ff ff ff 	movabs rax,0xfffffffffffffdb8
ffff800000802844:	ff ff ff 
ffff800000802847:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff80000080284b:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080284e:	48 63 d0             	movsxd rdx,eax
ffff800000802851:	48 89 d0             	mov    rax,rdx
ffff800000802854:	48 01 c0             	add    rax,rax
ffff800000802857:	48 01 d0             	add    rax,rdx
ffff80000080285a:	48 c1 e0 03          	shl    rax,0x3
ffff80000080285e:	48 01 c8             	add    rax,rcx
ffff800000802861:	48 83 c0 10          	add    rax,0x10
ffff800000802865:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000802868:	48 83 f8 01          	cmp    rax,0x1
ffff80000080286c:	74 07                	je     ffff800000802875 <init_memory+0x2ad>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:307
            cont=-1;
ffff80000080286e:	c7 45 c8 ff ff ff ff 	mov    DWORD PTR [rbp-0x38],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:308
        for(int j=0;j<PAGE_4K_ALIGN(mmap_struct[i].len)/PAGE_4K_SIZE/32;j++){
ffff800000802875:	c7 45 c4 00 00 00 00 	mov    DWORD PTR [rbp-0x3c],0x0
ffff80000080287c:	eb 15                	jmp    ffff800000802893 <init_memory+0x2cb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:309 (discriminator 3)
            *(p++)=cont;
ffff80000080287e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000802882:	48 8d 50 04          	lea    rdx,[rax+0x4]
ffff800000802886:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
ffff80000080288a:	8b 55 c8             	mov    edx,DWORD PTR [rbp-0x38]
ffff80000080288d:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:308 (discriminator 3)
        for(int j=0;j<PAGE_4K_ALIGN(mmap_struct[i].len)/PAGE_4K_SIZE/32;j++){
ffff80000080288f:	83 45 c4 01          	add    DWORD PTR [rbp-0x3c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:308 (discriminator 1)
ffff800000802893:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff800000802896:	48 63 c8             	movsxd rcx,eax
ffff800000802899:	48 b8 b8 fd ff ff ff 	movabs rax,0xfffffffffffffdb8
ffff8000008028a0:	ff ff ff 
ffff8000008028a3:	48 8b 34 03          	mov    rsi,QWORD PTR [rbx+rax*1]
ffff8000008028a7:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff8000008028aa:	48 63 d0             	movsxd rdx,eax
ffff8000008028ad:	48 89 d0             	mov    rax,rdx
ffff8000008028b0:	48 01 c0             	add    rax,rax
ffff8000008028b3:	48 01 d0             	add    rax,rdx
ffff8000008028b6:	48 c1 e0 03          	shl    rax,0x3
ffff8000008028ba:	48 01 f0             	add    rax,rsi
ffff8000008028bd:	48 83 c0 08          	add    rax,0x8
ffff8000008028c1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008028c4:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff8000008028ca:	48 c1 e8 0c          	shr    rax,0xc
ffff8000008028ce:	48 c1 e8 05          	shr    rax,0x5
ffff8000008028d2:	48 39 c1             	cmp    rcx,rax
ffff8000008028d5:	72 a7                	jb     ffff80000080287e <init_memory+0x2b6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:304 (discriminator 2)
    for(int i=0;i<mmap_t_i;i++){
ffff8000008028d7:	83 45 cc 01          	add    DWORD PTR [rbp-0x34],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:304 (discriminator 1)
ffff8000008028db:	48 b8 70 fe ff ff ff 	movabs rax,0xfffffffffffffe70
ffff8000008028e2:	ff ff ff 
ffff8000008028e5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008028e9:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008028eb:	39 45 cc             	cmp    DWORD PTR [rbp-0x34],eax
ffff8000008028ee:	0f 8c 42 ff ff ff    	jl     ffff800000802836 <init_memory+0x26e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:313
        }
    }

    usr_mem_pa=mem_size/2;
ffff8000008028f4:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008028f8:	48 89 c2             	mov    rdx,rax
ffff8000008028fb:	48 c1 ea 3f          	shr    rdx,0x3f
ffff8000008028ff:	48 01 d0             	add    rax,rdx
ffff800000802902:	48 d1 f8             	sar    rax,1
ffff800000802905:	48 89 c2             	mov    rdx,rax
ffff800000802908:	48 b8 38 fd ff ff ff 	movabs rax,0xfffffffffffffd38
ffff80000080290f:	ff ff ff 
ffff800000802912:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802916:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:341
        pd[i+mapai]=ptpm|PAGE_PRESENT|PAGE_RWX;
    }
    page_item *pdpt=(addr_t)pml4[256]&PAGE_4K_MASK+KNL_BASE;
    pdpt[0]=pdpm|PAGE_PRESENT|PAGE_RWX;*/

}
ffff800000802919:	90                   	nop
ffff80000080291a:	48 83 c4 50          	add    rsp,0x50
ffff80000080291e:	5b                   	pop    rbx
ffff80000080291f:	41 5f                	pop    r15
ffff800000802921:	5d                   	pop    rbp
ffff800000802922:	c3                   	ret    

ffff800000802923 <req_a_page>:
req_a_page():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:347
/*
page_map存储方式:
0x00000000
little end
*/
addr_t req_a_page(){
ffff800000802923:	f3 0f 1e fa          	endbr64 
ffff800000802927:	55                   	push   rbp
ffff800000802928:	48 89 e5             	mov    rbp,rsp
ffff80000080292b:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080292b <req_a_page+0x8>
ffff800000802932:	49 bb 0d ca 01 00 00 	movabs r11,0x1ca0d
ffff800000802939:	00 00 00 
ffff80000080293c:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:348
    for(int i=0;i<PAGE_BITMAP_NR;i++){
ffff80000080293f:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000802946:	e9 d3 00 00 00       	jmp    ffff800000802a1e <req_a_page+0xfb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:349
        for(int j=0;j<32;j++){
ffff80000080294b:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
ffff800000802952:	e9 b9 00 00 00       	jmp    ffff800000802a10 <req_a_page+0xed>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:350
            unsigned int bit=page_map[i]&(1<<j);
ffff800000802957:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff80000080295e:	ff ff ff 
ffff800000802961:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000802965:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000802968:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080296b:	48 63 d2             	movsxd rdx,edx
ffff80000080296e:	48 c1 e2 02          	shl    rdx,0x2
ffff800000802972:	48 01 ca             	add    rdx,rcx
ffff800000802975:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff800000802977:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff80000080297a:	bf 01 00 00 00       	mov    edi,0x1
ffff80000080297f:	89 d1                	mov    ecx,edx
ffff800000802981:	d3 e7                	shl    edi,cl
ffff800000802983:	89 fa                	mov    edx,edi
ffff800000802985:	21 f2                	and    edx,esi
ffff800000802987:	89 55 f4             	mov    DWORD PTR [rbp-0xc],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:351
            if((i*32+j)*4096>=0x100000&&!bit)
ffff80000080298a:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080298d:	89 d1                	mov    ecx,edx
ffff80000080298f:	c1 e1 05             	shl    ecx,0x5
ffff800000802992:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff800000802995:	01 ca                	add    edx,ecx
ffff800000802997:	c1 e2 0c             	shl    edx,0xc
ffff80000080299a:	81 fa ff ff 0f 00    	cmp    edx,0xfffff
ffff8000008029a0:	7e 6a                	jle    ffff800000802a0c <req_a_page+0xe9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:351 (discriminator 1)
ffff8000008029a2:	83 7d f4 00          	cmp    DWORD PTR [rbp-0xc],0x0
ffff8000008029a6:	75 64                	jne    ffff800000802a0c <req_a_page+0xe9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:353
            {
                page_map[i]=page_map[i]|(1<<j);
ffff8000008029a8:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff8000008029af:	ff ff ff 
ffff8000008029b2:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008029b6:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008029b9:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff8000008029bc:	48 63 d2             	movsxd rdx,edx
ffff8000008029bf:	48 c1 e2 02          	shl    rdx,0x2
ffff8000008029c3:	48 01 ca             	add    rdx,rcx
ffff8000008029c6:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff8000008029c8:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff8000008029cb:	bf 01 00 00 00       	mov    edi,0x1
ffff8000008029d0:	89 d1                	mov    ecx,edx
ffff8000008029d2:	d3 e7                	shl    edi,cl
ffff8000008029d4:	89 fa                	mov    edx,edi
ffff8000008029d6:	89 d1                	mov    ecx,edx
ffff8000008029d8:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff8000008029df:	ff ff ff 
ffff8000008029e2:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff8000008029e6:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008029e9:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008029ec:	48 98                	cdqe   
ffff8000008029ee:	48 c1 e0 02          	shl    rax,0x2
ffff8000008029f2:	48 01 d0             	add    rax,rdx
ffff8000008029f5:	09 ce                	or     esi,ecx
ffff8000008029f7:	89 f2                	mov    edx,esi
ffff8000008029f9:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:354
                return i*32+j;//num of page
ffff8000008029fb:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008029fe:	c1 e0 05             	shl    eax,0x5
ffff800000802a01:	89 c2                	mov    edx,eax
ffff800000802a03:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff800000802a06:	01 d0                	add    eax,edx
ffff800000802a08:	48 98                	cdqe   
ffff800000802a0a:	eb 1c                	jmp    ffff800000802a28 <req_a_page+0x105>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:349 (discriminator 2)
        for(int j=0;j<32;j++){
ffff800000802a0c:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:349 (discriminator 1)
ffff800000802a10:	83 7d f8 1f          	cmp    DWORD PTR [rbp-0x8],0x1f
ffff800000802a14:	0f 8e 3d ff ff ff    	jle    ffff800000802957 <req_a_page+0x34>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:348 (discriminator 2)
    for(int i=0;i<PAGE_BITMAP_NR;i++){
ffff800000802a1a:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:348 (discriminator 1)
ffff800000802a1e:	83 7d fc 3f          	cmp    DWORD PTR [rbp-0x4],0x3f
ffff800000802a22:	0f 8e 23 ff ff ff    	jle    ffff80000080294b <req_a_page+0x28>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:359

            }
        }
    }
}
ffff800000802a28:	5d                   	pop    rbp
ffff800000802a29:	c3                   	ret    

ffff800000802a2a <pmalloc>:
pmalloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:361

void * pmalloc(){
ffff800000802a2a:	f3 0f 1e fa          	endbr64 
ffff800000802a2e:	55                   	push   rbp
ffff800000802a2f:	48 89 e5             	mov    rbp,rsp
ffff800000802a32:	41 57                	push   r15
ffff800000802a34:	53                   	push   rbx
ffff800000802a35:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000802a35 <pmalloc+0xb>
ffff800000802a3c:	49 bb 03 c9 01 00 00 	movabs r11,0x1c903
ffff800000802a43:	00 00 00 
ffff800000802a46:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:362
    return (void*)(get_phyaddr(req_a_page())+usr_mem_pa);
ffff800000802a49:	49 89 df             	mov    r15,rbx
ffff800000802a4c:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802a51:	48 ba eb 35 fe ff ff 	movabs rdx,0xfffffffffffe35eb
ffff800000802a58:	ff ff ff 
ffff800000802a5b:	48 01 da             	add    rdx,rbx
ffff800000802a5e:	ff d2                	call   rdx
ffff800000802a60:	89 c7                	mov    edi,eax
ffff800000802a62:	49 89 df             	mov    r15,rbx
ffff800000802a65:	48 b8 f2 38 fe ff ff 	movabs rax,0xfffffffffffe38f2
ffff800000802a6c:	ff ff ff 
ffff800000802a6f:	48 01 d8             	add    rax,rbx
ffff800000802a72:	ff d0                	call   rax
ffff800000802a74:	48 63 d0             	movsxd rdx,eax
ffff800000802a77:	48 b8 38 fd ff ff ff 	movabs rax,0xfffffffffffffd38
ffff800000802a7e:	ff ff ff 
ffff800000802a81:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802a85:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000802a88:	48 01 d0             	add    rax,rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:363
}
ffff800000802a8b:	5b                   	pop    rbx
ffff800000802a8c:	41 5f                	pop    r15
ffff800000802a8e:	5d                   	pop    rbp
ffff800000802a8f:	c3                   	ret    

ffff800000802a90 <free_page>:
free_page():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:364
int free_page(char *paddr){
ffff800000802a90:	f3 0f 1e fa          	endbr64 
ffff800000802a94:	55                   	push   rbp
ffff800000802a95:	48 89 e5             	mov    rbp,rsp
ffff800000802a98:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000802a98 <free_page+0x8>
ffff800000802a9f:	49 bb a0 c8 01 00 00 	movabs r11,0x1c8a0
ffff800000802aa6:	00 00 00 
ffff800000802aa9:	4c 01 da             	add    rdx,r11
ffff800000802aac:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:365
    int num=(int)paddr/4096;
ffff800000802ab0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802ab4:	8d 88 ff 0f 00 00    	lea    ecx,[rax+0xfff]
ffff800000802aba:	85 c0                	test   eax,eax
ffff800000802abc:	0f 48 c1             	cmovs  eax,ecx
ffff800000802abf:	c1 f8 0c             	sar    eax,0xc
ffff800000802ac2:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:366
    int n=num/32;
ffff800000802ac5:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802ac8:	8d 48 1f             	lea    ecx,[rax+0x1f]
ffff800000802acb:	85 c0                	test   eax,eax
ffff800000802acd:	0f 48 c1             	cmovs  eax,ecx
ffff800000802ad0:	c1 f8 05             	sar    eax,0x5
ffff800000802ad3:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:367
    int r=num%32;
ffff800000802ad6:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802ad9:	89 c1                	mov    ecx,eax
ffff800000802adb:	c1 f9 1f             	sar    ecx,0x1f
ffff800000802ade:	c1 e9 1b             	shr    ecx,0x1b
ffff800000802ae1:	01 c8                	add    eax,ecx
ffff800000802ae3:	83 e0 1f             	and    eax,0x1f
ffff800000802ae6:	29 c8                	sub    eax,ecx
ffff800000802ae8:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:368
    page_map[n]=page_map[n]&~(unsigned int)(1<<r);
ffff800000802aeb:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000802af2:	ff ff ff 
ffff800000802af5:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000802af9:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000802afc:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff800000802aff:	48 98                	cdqe   
ffff800000802b01:	48 c1 e0 02          	shl    rax,0x2
ffff800000802b05:	48 01 c8             	add    rax,rcx
ffff800000802b08:	8b 30                	mov    esi,DWORD PTR [rax]
ffff800000802b0a:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffff800000802b0d:	bf 01 00 00 00       	mov    edi,0x1
ffff800000802b12:	89 c1                	mov    ecx,eax
ffff800000802b14:	d3 e7                	shl    edi,cl
ffff800000802b16:	89 f8                	mov    eax,edi
ffff800000802b18:	f7 d0                	not    eax
ffff800000802b1a:	89 c1                	mov    ecx,eax
ffff800000802b1c:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000802b23:	ff ff ff 
ffff800000802b26:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000802b2a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802b2d:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff800000802b30:	48 98                	cdqe   
ffff800000802b32:	48 c1 e0 02          	shl    rax,0x2
ffff800000802b36:	48 01 d0             	add    rax,rdx
ffff800000802b39:	21 ce                	and    esi,ecx
ffff800000802b3b:	89 f2                	mov    edx,esi
ffff800000802b3d:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:369
}
ffff800000802b3f:	90                   	nop
ffff800000802b40:	5d                   	pop    rbp
ffff800000802b41:	c3                   	ret    

ffff800000802b42 <free_pages_at>:
free_pages_at():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:371

int free_pages_at(int base,int pgn){
ffff800000802b42:	f3 0f 1e fa          	endbr64 
ffff800000802b46:	55                   	push   rbp
ffff800000802b47:	48 89 e5             	mov    rbp,rsp
ffff800000802b4a:	41 57                	push   r15
ffff800000802b4c:	53                   	push   rbx
ffff800000802b4d:	48 83 ec 20          	sub    rsp,0x20
ffff800000802b51:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000802b51 <free_pages_at+0xf>
ffff800000802b58:	49 bb e7 c7 01 00 00 	movabs r11,0x1c7e7
ffff800000802b5f:	00 00 00 
ffff800000802b62:	4c 01 db             	add    rbx,r11
ffff800000802b65:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff800000802b68:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:372
    for(int i=0;i<pgn;i++){
ffff800000802b6b:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000802b72:	eb 28                	jmp    ffff800000802b9c <free_pages_at+0x5a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:373 (discriminator 3)
        free_page(base+i*PAGE_4K_SIZE);
ffff800000802b74:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802b77:	c1 e0 0c             	shl    eax,0xc
ffff800000802b7a:	89 c2                	mov    edx,eax
ffff800000802b7c:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000802b7f:	01 d0                	add    eax,edx
ffff800000802b81:	48 98                	cdqe   
ffff800000802b83:	48 89 c7             	mov    rdi,rax
ffff800000802b86:	49 89 df             	mov    r15,rbx
ffff800000802b89:	48 b8 58 37 fe ff ff 	movabs rax,0xfffffffffffe3758
ffff800000802b90:	ff ff ff 
ffff800000802b93:	48 01 d8             	add    rax,rbx
ffff800000802b96:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:372 (discriminator 3)
    for(int i=0;i<pgn;i++){
ffff800000802b98:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:372 (discriminator 1)
ffff800000802b9c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802b9f:	3b 45 d8             	cmp    eax,DWORD PTR [rbp-0x28]
ffff800000802ba2:	7c d0                	jl     ffff800000802b74 <free_pages_at+0x32>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:375
    }
}
ffff800000802ba4:	90                   	nop
ffff800000802ba5:	48 83 c4 20          	add    rsp,0x20
ffff800000802ba9:	5b                   	pop    rbx
ffff800000802baa:	41 5f                	pop    r15
ffff800000802bac:	5d                   	pop    rbp
ffff800000802bad:	c3                   	ret    

ffff800000802bae <check_page>:
check_page():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:376
int check_page(int num){
ffff800000802bae:	f3 0f 1e fa          	endbr64 
ffff800000802bb2:	55                   	push   rbp
ffff800000802bb3:	48 89 e5             	mov    rbp,rsp
ffff800000802bb6:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000802bb6 <check_page+0x8>
ffff800000802bbd:	49 bb 82 c7 01 00 00 	movabs r11,0x1c782
ffff800000802bc4:	00 00 00 
ffff800000802bc7:	4c 01 da             	add    rdx,r11
ffff800000802bca:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:377
    int n=num/32;
ffff800000802bcd:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802bd0:	8d 48 1f             	lea    ecx,[rax+0x1f]
ffff800000802bd3:	85 c0                	test   eax,eax
ffff800000802bd5:	0f 48 c1             	cmovs  eax,ecx
ffff800000802bd8:	c1 f8 05             	sar    eax,0x5
ffff800000802bdb:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:378
    int r=num%32;
ffff800000802bde:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802be1:	89 c1                	mov    ecx,eax
ffff800000802be3:	c1 f9 1f             	sar    ecx,0x1f
ffff800000802be6:	c1 e9 1b             	shr    ecx,0x1b
ffff800000802be9:	01 c8                	add    eax,ecx
ffff800000802beb:	83 e0 1f             	and    eax,0x1f
ffff800000802bee:	29 c8                	sub    eax,ecx
ffff800000802bf0:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:379
    int bit=page_map[n]&(1<<r);
ffff800000802bf3:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000802bfa:	ff ff ff 
ffff800000802bfd:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000802c01:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802c04:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802c07:	48 98                	cdqe   
ffff800000802c09:	48 c1 e0 02          	shl    rax,0x2
ffff800000802c0d:	48 01 d0             	add    rax,rdx
ffff800000802c10:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000802c12:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff800000802c15:	be 01 00 00 00       	mov    esi,0x1
ffff800000802c1a:	89 c1                	mov    ecx,eax
ffff800000802c1c:	d3 e6                	shl    esi,cl
ffff800000802c1e:	89 f0                	mov    eax,esi
ffff800000802c20:	21 d0                	and    eax,edx
ffff800000802c22:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:380
    return bit;
ffff800000802c25:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:381
}
ffff800000802c28:	5d                   	pop    rbp
ffff800000802c29:	c3                   	ret    

ffff800000802c2a <get_phyaddr>:
get_phyaddr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:385
/*
 * 获得这个页对应的物理内存地址
 * */
int get_phyaddr(int num){
ffff800000802c2a:	f3 0f 1e fa          	endbr64 
ffff800000802c2e:	55                   	push   rbp
ffff800000802c2f:	48 89 e5             	mov    rbp,rsp
ffff800000802c32:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000802c32 <get_phyaddr+0x8>
ffff800000802c39:	49 bb 06 c7 01 00 00 	movabs r11,0x1c706
ffff800000802c40:	00 00 00 
ffff800000802c43:	4c 01 d8             	add    rax,r11
ffff800000802c46:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:386
    return num*0x1000;
ffff800000802c49:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802c4c:	c1 e0 0c             	shl    eax,0xc
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:387
}
ffff800000802c4f:	5d                   	pop    rbp
ffff800000802c50:	c3                   	ret    

ffff800000802c51 <set_page_item>:
set_page_item():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:390

void set_page_item(page_item *item_addr,int phy_addr,int attr)
{
ffff800000802c51:	f3 0f 1e fa          	endbr64 
ffff800000802c55:	55                   	push   rbp
ffff800000802c56:	48 89 e5             	mov    rbp,rsp
ffff800000802c59:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000802c59 <set_page_item+0x8>
ffff800000802c60:	49 bb df c6 01 00 00 	movabs r11,0x1c6df
ffff800000802c67:	00 00 00 
ffff800000802c6a:	4c 01 d8             	add    rax,r11
ffff800000802c6d:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000802c71:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
ffff800000802c74:	89 55 f0             	mov    DWORD PTR [rbp-0x10],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:391
    *item_addr=0;
ffff800000802c77:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000802c7b:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:392
    *item_addr|=phy_addr&0xfffff000;
ffff800000802c82:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000802c86:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802c89:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffff800000802c8c:	89 c0                	mov    eax,eax
ffff800000802c8e:	25 00 f0 ff ff       	and    eax,0xfffff000
ffff800000802c93:	48 09 c2             	or     rdx,rax
ffff800000802c96:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000802c9a:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:393
    *item_addr|=attr;
ffff800000802c9d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000802ca1:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802ca4:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
ffff800000802ca7:	48 98                	cdqe   
ffff800000802ca9:	48 09 c2             	or     rdx,rax
ffff800000802cac:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000802cb0:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:394
}
ffff800000802cb3:	90                   	nop
ffff800000802cb4:	5d                   	pop    rbp
ffff800000802cb5:	c3                   	ret    

ffff800000802cb6 <set_1gb_pdpt>:
set_1gb_pdpt():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:396
void set_1gb_pdpt(page_item* ppdpt,int pa,unsigned int extra_attr)
{
ffff800000802cb6:	f3 0f 1e fa          	endbr64 
ffff800000802cba:	55                   	push   rbp
ffff800000802cbb:	48 89 e5             	mov    rbp,rsp
ffff800000802cbe:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000802cbe <set_1gb_pdpt+0x8>
ffff800000802cc5:	49 bb 7a c6 01 00 00 	movabs r11,0x1c67a
ffff800000802ccc:	00 00 00 
ffff800000802ccf:	4c 01 d8             	add    rax,r11
ffff800000802cd2:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000802cd6:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
ffff800000802cd9:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:397
    *ppdpt=0;
ffff800000802cdc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802ce0:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:398
    *ppdpt|=PAGE_PRESENT|PDPTE_1GB|extra_attr;
ffff800000802ce7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802ceb:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802cee:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000802cf1:	0c 81                	or     al,0x81
ffff800000802cf3:	89 c0                	mov    eax,eax
ffff800000802cf5:	48 09 c2             	or     rdx,rax
ffff800000802cf8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802cfc:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:399
    unsigned int hipa=pa&0xffffc0000000ul;
ffff800000802cff:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000802d02:	25 00 00 00 c0       	and    eax,0xc0000000
ffff800000802d07:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:400
    *ppdpt|=hipa;
ffff800000802d0a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802d0e:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802d11:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802d14:	48 09 c2             	or     rdx,rax
ffff800000802d17:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802d1b:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:401
}
ffff800000802d1e:	90                   	nop
ffff800000802d1f:	5d                   	pop    rbp
ffff800000802d20:	c3                   	ret    

ffff800000802d21 <set_2mb_pde>:
set_2mb_pde():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:403
void set_2mb_pde(page_item *pde, int pa, int extra_attr)
{
ffff800000802d21:	f3 0f 1e fa          	endbr64 
ffff800000802d25:	55                   	push   rbp
ffff800000802d26:	48 89 e5             	mov    rbp,rsp
ffff800000802d29:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000802d29 <set_2mb_pde+0x8>
ffff800000802d30:	49 bb 0f c6 01 00 00 	movabs r11,0x1c60f
ffff800000802d37:	00 00 00 
ffff800000802d3a:	4c 01 d8             	add    rax,r11
ffff800000802d3d:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000802d41:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
ffff800000802d44:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:404
    *pde=0;
ffff800000802d47:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802d4b:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:405
    *pde|=PAGE_PRESENT|PAGE_4MB_PAGE|PDE_4MB_PAT|extra_attr;
ffff800000802d52:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802d56:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802d59:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000802d5c:	0d 81 10 00 00       	or     eax,0x1081
ffff800000802d61:	48 98                	cdqe   
ffff800000802d63:	48 09 c2             	or     rdx,rax
ffff800000802d66:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802d6a:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:406
    unsigned int hipa=pa&0xffc00000;
ffff800000802d6d:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000802d70:	25 00 00 c0 ff       	and    eax,0xffc00000
ffff800000802d75:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:407
    *pde|=hipa;
ffff800000802d78:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802d7c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802d7f:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802d82:	48 09 c2             	or     rdx,rax
ffff800000802d85:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802d89:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:408
}
ffff800000802d8c:	90                   	nop
ffff800000802d8d:	5d                   	pop    rbp
ffff800000802d8e:	c3                   	ret    

ffff800000802d8f <req_page_at>:
req_page_at():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:429
        page_map[i]&=(u32)(1<<j);
    return ret;
} */
//在bitmap申请指定的页面,base默认0x1000对齐
addr_t req_page_at(addr_t base,int pgn)
{
ffff800000802d8f:	f3 0f 1e fa          	endbr64 
ffff800000802d93:	55                   	push   rbp
ffff800000802d94:	48 89 e5             	mov    rbp,rsp
ffff800000802d97:	41 57                	push   r15
ffff800000802d99:	53                   	push   rbx
ffff800000802d9a:	48 83 ec 20          	sub    rsp,0x20
ffff800000802d9e:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000802d9e <req_page_at+0xf>
ffff800000802da5:	49 bb 9a c5 01 00 00 	movabs r11,0x1c59a
ffff800000802dac:	00 00 00 
ffff800000802daf:	4c 01 db             	add    rbx,r11
ffff800000802db2:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000802db6:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:430
    if(base==0)//不指定地址
ffff800000802db9:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff800000802dbe:	75 32                	jne    ffff800000802df2 <req_page_at+0x63>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:432
    {
        return get_phyaddr(req_a_page());
ffff800000802dc0:	49 89 df             	mov    r15,rbx
ffff800000802dc3:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802dc8:	48 ba eb 35 fe ff ff 	movabs rdx,0xfffffffffffe35eb
ffff800000802dcf:	ff ff ff 
ffff800000802dd2:	48 01 da             	add    rdx,rbx
ffff800000802dd5:	ff d2                	call   rdx
ffff800000802dd7:	89 c7                	mov    edi,eax
ffff800000802dd9:	49 89 df             	mov    r15,rbx
ffff800000802ddc:	48 b8 f2 38 fe ff ff 	movabs rax,0xfffffffffffe38f2
ffff800000802de3:	ff ff ff 
ffff800000802de6:	48 01 d8             	add    rax,rbx
ffff800000802de9:	ff d0                	call   rax
ffff800000802deb:	48 98                	cdqe   
ffff800000802ded:	e9 c6 00 00 00       	jmp    ffff800000802eb8 <req_page_at+0x129>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:434
    }
    if(!is_pgs_ava(base,pgn))return -1;//先检查
ffff800000802df2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000802df6:	89 c2                	mov    edx,eax
ffff800000802df8:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000802dfb:	89 c6                	mov    esi,eax
ffff800000802dfd:	89 d7                	mov    edi,edx
ffff800000802dff:	49 89 df             	mov    r15,rbx
ffff800000802e02:	48 b8 5a 3c fe ff ff 	movabs rax,0xfffffffffffe3c5a
ffff800000802e09:	ff ff ff 
ffff800000802e0c:	48 01 d8             	add    rax,rbx
ffff800000802e0f:	ff d0                	call   rax
ffff800000802e11:	85 c0                	test   eax,eax
ffff800000802e13:	75 0c                	jne    ffff800000802e21 <req_page_at+0x92>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:434 (discriminator 1)
ffff800000802e15:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff800000802e1c:	e9 97 00 00 00       	jmp    ffff800000802eb8 <req_page_at+0x129>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:435
    int pgni=base/4096;
ffff800000802e21:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000802e25:	48 c1 e8 0c          	shr    rax,0xc
ffff800000802e29:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:436
    int pgi=pgni/32;
ffff800000802e2c:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000802e2f:	8d 50 1f             	lea    edx,[rax+0x1f]
ffff800000802e32:	85 c0                	test   eax,eax
ffff800000802e34:	0f 48 c2             	cmovs  eax,edx
ffff800000802e37:	c1 f8 05             	sar    eax,0x5
ffff800000802e3a:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:437
    int pgj=pgni%32;
ffff800000802e3d:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000802e40:	99                   	cdq    
ffff800000802e41:	c1 ea 1b             	shr    edx,0x1b
ffff800000802e44:	01 d0                	add    eax,edx
ffff800000802e46:	83 e0 1f             	and    eax,0x1f
ffff800000802e49:	29 d0                	sub    eax,edx
ffff800000802e4b:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:438
    for(int i=0;i<pgn;i++)
ffff800000802e4e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000802e55:	eb 54                	jmp    ffff800000802eab <req_page_at+0x11c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:440 (discriminator 3)
    {
        page_map[i]|=(1<<pgj);
ffff800000802e57:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000802e5e:	ff ff ff 
ffff800000802e61:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802e65:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802e68:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802e6b:	48 98                	cdqe   
ffff800000802e6d:	48 c1 e0 02          	shl    rax,0x2
ffff800000802e71:	48 01 d0             	add    rax,rdx
ffff800000802e74:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000802e76:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000802e79:	be 01 00 00 00       	mov    esi,0x1
ffff800000802e7e:	89 c1                	mov    ecx,eax
ffff800000802e80:	d3 e6                	shl    esi,cl
ffff800000802e82:	89 f0                	mov    eax,esi
ffff800000802e84:	89 c6                	mov    esi,eax
ffff800000802e86:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff800000802e8d:	ff ff ff 
ffff800000802e90:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802e94:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000802e97:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802e9a:	48 98                	cdqe   
ffff800000802e9c:	48 c1 e0 02          	shl    rax,0x2
ffff800000802ea0:	48 01 c8             	add    rax,rcx
ffff800000802ea3:	09 f2                	or     edx,esi
ffff800000802ea5:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:438 (discriminator 3)
    for(int i=0;i<pgn;i++)
ffff800000802ea7:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:438 (discriminator 1)
ffff800000802eab:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802eae:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
ffff800000802eb1:	7c a4                	jl     ffff800000802e57 <req_page_at+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:442
    }
    return 0;
ffff800000802eb3:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:444

}
ffff800000802eb8:	48 83 c4 20          	add    rsp,0x20
ffff800000802ebc:	5b                   	pop    rbx
ffff800000802ebd:	41 5f                	pop    r15
ffff800000802ebf:	5d                   	pop    rbp
ffff800000802ec0:	c3                   	ret    

ffff800000802ec1 <chk_vm>:
chk_vm():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:446
int chk_vm(int base, int pgn)
{
ffff800000802ec1:	f3 0f 1e fa          	endbr64 
ffff800000802ec5:	55                   	push   rbp
ffff800000802ec6:	48 89 e5             	mov    rbp,rsp
ffff800000802ec9:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000802ec9 <chk_vm+0x8>
ffff800000802ed0:	49 bb 6f c4 01 00 00 	movabs r11,0x1c46f
ffff800000802ed7:	00 00 00 
ffff800000802eda:	4c 01 d8             	add    rax,r11
ffff800000802edd:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff800000802ee0:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:447
    int *pdet=0;
ffff800000802ee3:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff800000802eea:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:448
    asm volatile("mov %%cr3,%0":"=r"(pdet));
ffff800000802eeb:	0f 20 d8             	mov    rax,cr3
ffff800000802eee:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:449
    int *pt=pdet[base/PAGE_INDEX_SIZE]&0xfffff000;
ffff800000802ef2:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802ef5:	8d 90 ff ff 1f 00    	lea    edx,[rax+0x1fffff]
ffff800000802efb:	85 c0                	test   eax,eax
ffff800000802efd:	0f 48 c2             	cmovs  eax,edx
ffff800000802f00:	c1 f8 15             	sar    eax,0x15
ffff800000802f03:	48 98                	cdqe   
ffff800000802f05:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff800000802f0c:	00 
ffff800000802f0d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000802f11:	48 01 d0             	add    rax,rdx
ffff800000802f14:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000802f16:	89 c0                	mov    eax,eax
ffff800000802f18:	25 00 f0 ff ff       	and    eax,0xfffff000
ffff800000802f1d:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:450
    if(!(pdet[base/PAGE_INDEX_SIZE]&PAGE_PRESENT)||\
ffff800000802f21:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802f24:	8d 90 ff ff 1f 00    	lea    edx,[rax+0x1fffff]
ffff800000802f2a:	85 c0                	test   eax,eax
ffff800000802f2c:	0f 48 c2             	cmovs  eax,edx
ffff800000802f2f:	c1 f8 15             	sar    eax,0x15
ffff800000802f32:	48 98                	cdqe   
ffff800000802f34:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff800000802f3b:	00 
ffff800000802f3c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000802f40:	48 01 d0             	add    rax,rdx
ffff800000802f43:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000802f45:	83 e0 01             	and    eax,0x1
ffff800000802f48:	85 c0                	test   eax,eax
ffff800000802f4a:	74 38                	je     ffff800000802f84 <chk_vm+0xc3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:451 (discriminator 1)
    !(pt[base%PAGE_INDEX_SIZE/PAGE_SIZE]&PAGE_PRESENT))
ffff800000802f4c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802f4f:	99                   	cdq    
ffff800000802f50:	c1 ea 0b             	shr    edx,0xb
ffff800000802f53:	01 d0                	add    eax,edx
ffff800000802f55:	25 ff ff 1f 00       	and    eax,0x1fffff
ffff800000802f5a:	29 d0                	sub    eax,edx
ffff800000802f5c:	8d 90 ff 0f 00 00    	lea    edx,[rax+0xfff]
ffff800000802f62:	85 c0                	test   eax,eax
ffff800000802f64:	0f 48 c2             	cmovs  eax,edx
ffff800000802f67:	c1 f8 0c             	sar    eax,0xc
ffff800000802f6a:	48 98                	cdqe   
ffff800000802f6c:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff800000802f73:	00 
ffff800000802f74:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000802f78:	48 01 d0             	add    rax,rdx
ffff800000802f7b:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000802f7d:	83 e0 01             	and    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:450 (discriminator 1)
    if(!(pdet[base/PAGE_INDEX_SIZE]&PAGE_PRESENT)||\
ffff800000802f80:	85 c0                	test   eax,eax
ffff800000802f82:	75 07                	jne    ffff800000802f8b <chk_vm+0xca>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:453
    {
        return -1;
ffff800000802f84:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000802f89:	eb 05                	jmp    ffff800000802f90 <chk_vm+0xcf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:455
    }
    return 0;
ffff800000802f8b:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:456
}
ffff800000802f90:	5d                   	pop    rbp
ffff800000802f91:	c3                   	ret    

ffff800000802f92 <is_pgs_ava>:
is_pgs_ava():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:459
//查看指定区域的页内存是否可用
int is_pgs_ava(int base,int pgn)
{
ffff800000802f92:	f3 0f 1e fa          	endbr64 
ffff800000802f96:	55                   	push   rbp
ffff800000802f97:	48 89 e5             	mov    rbp,rsp
ffff800000802f9a:	41 57                	push   r15
ffff800000802f9c:	53                   	push   rbx
ffff800000802f9d:	48 83 ec 20          	sub    rsp,0x20
ffff800000802fa1:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000802fa1 <is_pgs_ava+0xf>
ffff800000802fa8:	49 bb 97 c3 01 00 00 	movabs r11,0x1c397
ffff800000802faf:	00 00 00 
ffff800000802fb2:	4c 01 db             	add    rbx,r11
ffff800000802fb5:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff800000802fb8:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:460
    int pgi=base/4096;
ffff800000802fbb:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000802fbe:	8d 90 ff 0f 00 00    	lea    edx,[rax+0xfff]
ffff800000802fc4:	85 c0                	test   eax,eax
ffff800000802fc6:	0f 48 c2             	cmovs  eax,edx
ffff800000802fc9:	c1 f8 0c             	sar    eax,0xc
ffff800000802fcc:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:461
    for(int i=0;i<pgn;i++)
ffff800000802fcf:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000802fd6:	eb 2b                	jmp    ffff800000803003 <is_pgs_ava+0x71>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:463
    {
        if(check_page(pgi+i)!=0)return 0;
ffff800000802fd8:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000802fdb:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000802fde:	01 d0                	add    eax,edx
ffff800000802fe0:	89 c7                	mov    edi,eax
ffff800000802fe2:	49 89 df             	mov    r15,rbx
ffff800000802fe5:	48 b8 76 38 fe ff ff 	movabs rax,0xfffffffffffe3876
ffff800000802fec:	ff ff ff 
ffff800000802fef:	48 01 d8             	add    rax,rbx
ffff800000802ff2:	ff d0                	call   rax
ffff800000802ff4:	85 c0                	test   eax,eax
ffff800000802ff6:	74 07                	je     ffff800000802fff <is_pgs_ava+0x6d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:463 (discriminator 1)
ffff800000802ff8:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802ffd:	eb 11                	jmp    ffff800000803010 <is_pgs_ava+0x7e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:461 (discriminator 2)
    for(int i=0;i<pgn;i++)
ffff800000802fff:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:461 (discriminator 1)
ffff800000803003:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803006:	3b 45 d8             	cmp    eax,DWORD PTR [rbp-0x28]
ffff800000803009:	7c cd                	jl     ffff800000802fd8 <is_pgs_ava+0x46>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:465
    }
    return 1;
ffff80000080300b:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:467

}
ffff800000803010:	48 83 c4 20          	add    rsp,0x20
ffff800000803014:	5b                   	pop    rbx
ffff800000803015:	41 5f                	pop    r15
ffff800000803017:	5d                   	pop    rbp
ffff800000803018:	c3                   	ret    

ffff800000803019 <setup_sys_vol>:
setup_sys_vol():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:22
super_block sbs[MAX_SUPERBLOCKS];
fs_operations fs[MAX_FS];

buffer_head buffer_heads[NR_BUFFERHEADS];
int setup_sys_vol(void *disk_drv, void *fs_drv)
{
ffff800000803019:	f3 0f 1e fa          	endbr64 
ffff80000080301d:	55                   	push   rbp
ffff80000080301e:	48 89 e5             	mov    rbp,rsp
ffff800000803021:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000803021 <setup_sys_vol+0x8>
ffff800000803028:	49 bb 17 c3 01 00 00 	movabs r11,0x1c317
ffff80000080302f:	00 00 00 
ffff800000803032:	4c 01 d8             	add    rax,r11
ffff800000803035:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000803039:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:23
    vols[0].name[0]='C';
ffff80000080303d:	48 ba a0 ff ff ff ff 	movabs rdx,0xffffffffffffffa0
ffff800000803044:	ff ff ff 
ffff800000803047:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080304b:	c6 02 43             	mov    BYTE PTR [rdx],0x43
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:24
    vols[0].name[1]='\0';
ffff80000080304e:	48 ba a0 ff ff ff ff 	movabs rdx,0xffffffffffffffa0
ffff800000803055:	ff ff ff 
ffff800000803058:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080305c:	c6 42 01 00          	mov    BYTE PTR [rdx+0x1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:25
    vols[0].disk_drv=disk_drv;
ffff800000803060:	48 ba a0 ff ff ff ff 	movabs rdx,0xffffffffffffffa0
ffff800000803067:	ff ff ff 
ffff80000080306a:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080306e:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
ffff800000803072:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:26
    vols[0].fs_drv=fs_drv;
ffff800000803076:	48 ba a0 ff ff ff ff 	movabs rdx,0xffffffffffffffa0
ffff80000080307d:	ff ff ff 
ffff800000803080:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000803084:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff800000803088:	48 89 4a 10          	mov    QWORD PTR [rdx+0x10],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:27
    vols[0].stat=VOLUME_STAT_READY;
ffff80000080308c:	48 ba a0 ff ff ff ff 	movabs rdx,0xffffffffffffffa0
ffff800000803093:	ff ff ff 
ffff800000803096:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080309a:	c7 40 20 01 00 00 00 	mov    DWORD PTR [rax+0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:28
    return 0;
ffff8000008030a1:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:29
}
ffff8000008030a6:	5d                   	pop    rbp
ffff8000008030a7:	c3                   	ret    

ffff8000008030a8 <sys_mkfifo>:
sys_mkfifo():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:32
//返回管道描述符
int sys_mkfifo(int number)
{
ffff8000008030a8:	f3 0f 1e fa          	endbr64 
ffff8000008030ac:	55                   	push   rbp
ffff8000008030ad:	48 89 e5             	mov    rbp,rsp
ffff8000008030b0:	41 57                	push   r15
ffff8000008030b2:	53                   	push   rbx
ffff8000008030b3:	48 83 ec 20          	sub    rsp,0x20
ffff8000008030b7:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008030b7 <sys_mkfifo+0xf>
ffff8000008030be:	49 bb 81 c2 01 00 00 	movabs r11,0x1c281
ffff8000008030c5:	00 00 00 
ffff8000008030c8:	4c 01 db             	add    rbx,r11
ffff8000008030cb:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:34
    //查重
    for(int i=0;i<MAX_FIFOS;i++)
ffff8000008030ce:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff8000008030d5:	eb 56                	jmp    ffff80000080312d <sys_mkfifo+0x85>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:36
    {
        if(fifos[i].id==number&&fifos[i].flag==1) {
ffff8000008030d7:	48 b8 20 ff ff ff ff 	movabs rax,0xffffffffffffff20
ffff8000008030de:	ff ff ff 
ffff8000008030e1:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff8000008030e5:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008030e8:	48 98                	cdqe   
ffff8000008030ea:	48 c1 e0 04          	shl    rax,0x4
ffff8000008030ee:	48 01 d0             	add    rax,rdx
ffff8000008030f1:	48 83 c0 0c          	add    rax,0xc
ffff8000008030f5:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008030f7:	39 45 dc             	cmp    DWORD PTR [rbp-0x24],eax
ffff8000008030fa:	75 2d                	jne    ffff800000803129 <sys_mkfifo+0x81>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:36 (discriminator 1)
ffff8000008030fc:	48 b8 20 ff ff ff ff 	movabs rax,0xffffffffffffff20
ffff800000803103:	ff ff ff 
ffff800000803106:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff80000080310a:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080310d:	48 98                	cdqe   
ffff80000080310f:	48 c1 e0 04          	shl    rax,0x4
ffff800000803113:	48 01 d0             	add    rax,rdx
ffff800000803116:	48 83 c0 08          	add    rax,0x8
ffff80000080311a:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080311c:	83 f8 01             	cmp    eax,0x1
ffff80000080311f:	75 08                	jne    ffff800000803129 <sys_mkfifo+0x81>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:37
            return i;
ffff800000803121:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803124:	e9 09 01 00 00       	jmp    ffff800000803232 <sys_mkfifo+0x18a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:34 (discriminator 2)
    for(int i=0;i<MAX_FIFOS;i++)
ffff800000803129:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:34 (discriminator 1)
ffff80000080312d:	83 7d ec 0f          	cmp    DWORD PTR [rbp-0x14],0xf
ffff800000803131:	7e a4                	jle    ffff8000008030d7 <sys_mkfifo+0x2f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:40
        }
    }
    for(int i=0;i<MAX_FIFOS;i++)
ffff800000803133:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff80000080313a:	e9 e4 00 00 00       	jmp    ffff800000803223 <sys_mkfifo+0x17b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:42
    {
        if(fifos[i].flag==0) {
ffff80000080313f:	48 b8 20 ff ff ff ff 	movabs rax,0xffffffffffffff20
ffff800000803146:	ff ff ff 
ffff800000803149:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff80000080314d:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000803150:	48 98                	cdqe   
ffff800000803152:	48 c1 e0 04          	shl    rax,0x4
ffff800000803156:	48 01 d0             	add    rax,rdx
ffff800000803159:	48 83 c0 08          	add    rax,0x8
ffff80000080315d:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080315f:	85 c0                	test   eax,eax
ffff800000803161:	0f 85 b8 00 00 00    	jne    ffff80000080321f <sys_mkfifo+0x177>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:43
            fifos[i].flag=1;
ffff800000803167:	48 b8 20 ff ff ff ff 	movabs rax,0xffffffffffffff20
ffff80000080316e:	ff ff ff 
ffff800000803171:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff800000803175:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000803178:	48 98                	cdqe   
ffff80000080317a:	48 c1 e0 04          	shl    rax,0x4
ffff80000080317e:	48 01 d0             	add    rax,rdx
ffff800000803181:	48 83 c0 08          	add    rax,0x8
ffff800000803185:	c7 00 01 00 00 00    	mov    DWORD PTR [rax],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:44
            fifos[i].id=number;
ffff80000080318b:	48 b8 20 ff ff ff ff 	movabs rax,0xffffffffffffff20
ffff800000803192:	ff ff ff 
ffff800000803195:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff800000803199:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080319c:	48 98                	cdqe   
ffff80000080319e:	48 c1 e0 04          	shl    rax,0x4
ffff8000008031a2:	48 01 d0             	add    rax,rdx
ffff8000008031a5:	48 8d 50 0c          	lea    rdx,[rax+0xc]
ffff8000008031a9:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008031ac:	89 02                	mov    DWORD PTR [rdx],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:45
            fifos[i].size=CHUNK_SIZE;
ffff8000008031ae:	48 b8 20 ff ff ff ff 	movabs rax,0xffffffffffffff20
ffff8000008031b5:	ff ff ff 
ffff8000008031b8:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff8000008031bc:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff8000008031bf:	48 98                	cdqe   
ffff8000008031c1:	48 c1 e0 04          	shl    rax,0x4
ffff8000008031c5:	48 01 d0             	add    rax,rdx
ffff8000008031c8:	48 83 c0 04          	add    rax,0x4
ffff8000008031cc:	c7 00 00 10 00 00    	mov    DWORD PTR [rax],0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:47
            //分配内存
            fifos[i].pa= get_phyaddr(req_a_page());
ffff8000008031d2:	49 89 df             	mov    r15,rbx
ffff8000008031d5:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008031da:	48 ba eb 35 fe ff ff 	movabs rdx,0xfffffffffffe35eb
ffff8000008031e1:	ff ff ff 
ffff8000008031e4:	48 01 da             	add    rdx,rbx
ffff8000008031e7:	ff d2                	call   rdx
ffff8000008031e9:	89 c7                	mov    edi,eax
ffff8000008031eb:	49 89 df             	mov    r15,rbx
ffff8000008031ee:	48 b8 f2 38 fe ff ff 	movabs rax,0xfffffffffffe38f2
ffff8000008031f5:	ff ff ff 
ffff8000008031f8:	48 01 d8             	add    rax,rbx
ffff8000008031fb:	ff d0                	call   rax
ffff8000008031fd:	48 ba 20 ff ff ff ff 	movabs rdx,0xffffffffffffff20
ffff800000803204:	ff ff ff 
ffff800000803207:	48 8b 0c 13          	mov    rcx,QWORD PTR [rbx+rdx*1]
ffff80000080320b:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff80000080320e:	48 63 d2             	movsxd rdx,edx
ffff800000803211:	48 c1 e2 04          	shl    rdx,0x4
ffff800000803215:	48 01 ca             	add    rdx,rcx
ffff800000803218:	89 02                	mov    DWORD PTR [rdx],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:48
            return i;
ffff80000080321a:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080321d:	eb 13                	jmp    ffff800000803232 <sys_mkfifo+0x18a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:40 (discriminator 2)
    for(int i=0;i<MAX_FIFOS;i++)
ffff80000080321f:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:40 (discriminator 1)
ffff800000803223:	83 7d e8 0f          	cmp    DWORD PTR [rbp-0x18],0xf
ffff800000803227:	0f 8e 12 ff ff ff    	jle    ffff80000080313f <sys_mkfifo+0x97>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:51
        }
    }
    return -1;
ffff80000080322d:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:52
}
ffff800000803232:	48 83 c4 20          	add    rsp,0x20
ffff800000803236:	5b                   	pop    rbx
ffff800000803237:	41 5f                	pop    r15
ffff800000803239:	5d                   	pop    rbp
ffff80000080323a:	c3                   	ret    

ffff80000080323b <sys_rmfifo>:
sys_rmfifo():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:55

int sys_rmfifo(int number)
{
ffff80000080323b:	f3 0f 1e fa          	endbr64 
ffff80000080323f:	55                   	push   rbp
ffff800000803240:	48 89 e5             	mov    rbp,rsp
ffff800000803243:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000803243 <sys_rmfifo+0x8>
ffff80000080324a:	49 bb f5 c0 01 00 00 	movabs r11,0x1c0f5
ffff800000803251:	00 00 00 
ffff800000803254:	4c 01 d8             	add    rax,r11
ffff800000803257:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:56
    for(int i=0;i<MAX_FIFOS;i++)
ffff80000080325a:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000803261:	eb 79                	jmp    ffff8000008032dc <sys_rmfifo+0xa1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:58
    {
        if(fifos[i].id==number&&fifos[i].flag==1) {
ffff800000803263:	48 ba 20 ff ff ff ff 	movabs rdx,0xffffffffffffff20
ffff80000080326a:	ff ff ff 
ffff80000080326d:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff800000803271:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000803274:	48 63 d2             	movsxd rdx,edx
ffff800000803277:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080327b:	48 01 ca             	add    rdx,rcx
ffff80000080327e:	48 83 c2 0c          	add    rdx,0xc
ffff800000803282:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000803284:	39 55 ec             	cmp    DWORD PTR [rbp-0x14],edx
ffff800000803287:	75 4f                	jne    ffff8000008032d8 <sys_rmfifo+0x9d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:58 (discriminator 1)
ffff800000803289:	48 ba 20 ff ff ff ff 	movabs rdx,0xffffffffffffff20
ffff800000803290:	ff ff ff 
ffff800000803293:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff800000803297:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080329a:	48 63 d2             	movsxd rdx,edx
ffff80000080329d:	48 c1 e2 04          	shl    rdx,0x4
ffff8000008032a1:	48 01 ca             	add    rdx,rcx
ffff8000008032a4:	48 83 c2 08          	add    rdx,0x8
ffff8000008032a8:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff8000008032aa:	83 fa 01             	cmp    edx,0x1
ffff8000008032ad:	75 29                	jne    ffff8000008032d8 <sys_rmfifo+0x9d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:59
            fifos[i].flag=0;
ffff8000008032af:	48 ba 20 ff ff ff ff 	movabs rdx,0xffffffffffffff20
ffff8000008032b6:	ff ff ff 
ffff8000008032b9:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008032bd:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008032c0:	48 98                	cdqe   
ffff8000008032c2:	48 c1 e0 04          	shl    rax,0x4
ffff8000008032c6:	48 01 d0             	add    rax,rdx
ffff8000008032c9:	48 83 c0 08          	add    rax,0x8
ffff8000008032cd:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:60
            return i;
ffff8000008032d3:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008032d6:	eb 0f                	jmp    ffff8000008032e7 <sys_rmfifo+0xac>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:56 (discriminator 2)
    for(int i=0;i<MAX_FIFOS;i++)
ffff8000008032d8:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:56 (discriminator 1)
ffff8000008032dc:	83 7d fc 0f          	cmp    DWORD PTR [rbp-0x4],0xf
ffff8000008032e0:	7e 81                	jle    ffff800000803263 <sys_rmfifo+0x28>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:63
        }
    }
    return -1;
ffff8000008032e2:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:64
}
ffff8000008032e7:	5d                   	pop    rbp
ffff8000008032e8:	c3                   	ret    

ffff8000008032e9 <free_vol>:
free_vol():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:66
int free_vol(int voli)
{
ffff8000008032e9:	f3 0f 1e fa          	endbr64 
ffff8000008032ed:	55                   	push   rbp
ffff8000008032ee:	48 89 e5             	mov    rbp,rsp
ffff8000008032f1:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008032f1 <free_vol+0x8>
ffff8000008032f8:	49 bb 47 c0 01 00 00 	movabs r11,0x1c047
ffff8000008032ff:	00 00 00 
ffff800000803302:	4c 01 d8             	add    rax,r11
ffff800000803305:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:67
    vols[0].stat=VOLUME_STAT_EMPTY;
ffff800000803308:	48 ba a0 ff ff ff ff 	movabs rdx,0xffffffffffffffa0
ffff80000080330f:	ff ff ff 
ffff800000803312:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000803316:	c7 40 20 00 00 00 00 	mov    DWORD PTR [rax+0x20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:68
    return 0;
ffff80000080331d:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:69
}
ffff800000803322:	5d                   	pop    rbp
ffff800000803323:	c3                   	ret    

ffff800000803324 <reg_vol>:
reg_vol():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:72

int reg_vol(int disk_drvi, int fs_drvi, char *name)
{
ffff800000803324:	f3 0f 1e fa          	endbr64 
ffff800000803328:	55                   	push   rbp
ffff800000803329:	48 89 e5             	mov    rbp,rsp
ffff80000080332c:	41 57                	push   r15
ffff80000080332e:	53                   	push   rbx
ffff80000080332f:	48 83 ec 20          	sub    rsp,0x20
ffff800000803333:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000803333 <reg_vol+0xf>
ffff80000080333a:	49 bb 05 c0 01 00 00 	movabs r11,0x1c005
ffff800000803341:	00 00 00 
ffff800000803344:	4c 01 db             	add    rbx,r11
ffff800000803347:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff80000080334a:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080334d:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:73
    for(int i=0;i<MAX_VOLUMES;i++)
ffff800000803351:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000803358:	e9 43 01 00 00       	jmp    ffff8000008034a0 <reg_vol+0x17c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:75
    {
        if(vols[i].stat==VOLUME_STAT_EMPTY)
ffff80000080335d:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff800000803364:	ff ff ff 
ffff800000803367:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff80000080336b:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080336e:	48 63 d0             	movsxd rdx,eax
ffff800000803371:	48 89 d0             	mov    rax,rdx
ffff800000803374:	48 c1 e0 02          	shl    rax,0x2
ffff800000803378:	48 01 d0             	add    rax,rdx
ffff80000080337b:	48 c1 e0 03          	shl    rax,0x3
ffff80000080337f:	48 01 c8             	add    rax,rcx
ffff800000803382:	48 83 c0 20          	add    rax,0x20
ffff800000803386:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000803388:	85 c0                	test   eax,eax
ffff80000080338a:	0f 85 0c 01 00 00    	jne    ffff80000080349c <reg_vol+0x178>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:78
        {
            extern driver *drvs;
            vols[i].stat=VOLUME_STAT_READY;
ffff800000803390:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff800000803397:	ff ff ff 
ffff80000080339a:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff80000080339e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008033a1:	48 63 d0             	movsxd rdx,eax
ffff8000008033a4:	48 89 d0             	mov    rax,rdx
ffff8000008033a7:	48 c1 e0 02          	shl    rax,0x2
ffff8000008033ab:	48 01 d0             	add    rax,rdx
ffff8000008033ae:	48 c1 e0 03          	shl    rax,0x3
ffff8000008033b2:	48 01 c8             	add    rax,rcx
ffff8000008033b5:	48 83 c0 20          	add    rax,0x20
ffff8000008033b9:	c7 00 01 00 00 00    	mov    DWORD PTR [rax],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:79
            vols[i].fs= &fs[fs_drvi];
ffff8000008033bf:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff8000008033c2:	48 63 d0             	movsxd rdx,eax
ffff8000008033c5:	48 89 d0             	mov    rax,rdx
ffff8000008033c8:	48 01 c0             	add    rax,rax
ffff8000008033cb:	48 01 d0             	add    rax,rdx
ffff8000008033ce:	48 c1 e0 03          	shl    rax,0x3
ffff8000008033d2:	48 ba 98 fd ff ff ff 	movabs rdx,0xfffffffffffffd98
ffff8000008033d9:	ff ff ff 
ffff8000008033dc:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff8000008033e0:	48 8d 0c 10          	lea    rcx,[rax+rdx*1]
ffff8000008033e4:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff8000008033eb:	ff ff ff 
ffff8000008033ee:	48 8b 34 03          	mov    rsi,QWORD PTR [rbx+rax*1]
ffff8000008033f2:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008033f5:	48 63 d0             	movsxd rdx,eax
ffff8000008033f8:	48 89 d0             	mov    rax,rdx
ffff8000008033fb:	48 c1 e0 02          	shl    rax,0x2
ffff8000008033ff:	48 01 d0             	add    rax,rdx
ffff800000803402:	48 c1 e0 03          	shl    rax,0x3
ffff800000803406:	48 01 f0             	add    rax,rsi
ffff800000803409:	48 83 c0 18          	add    rax,0x18
ffff80000080340d:	48 89 08             	mov    QWORD PTR [rax],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:80
            vols[i].disk_drv= get_drv(disk_drvi);
ffff800000803410:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000803413:	89 c7                	mov    edi,eax
ffff800000803415:	49 89 df             	mov    r15,rbx
ffff800000803418:	48 b8 90 6c fe ff ff 	movabs rax,0xfffffffffffe6c90
ffff80000080341f:	ff ff ff 
ffff800000803422:	48 01 d8             	add    rax,rbx
ffff800000803425:	ff d0                	call   rax
ffff800000803427:	48 89 c2             	mov    rdx,rax
ffff80000080342a:	48 b8 a0 ff ff ff ff 	movabs rax,0xffffffffffffffa0
ffff800000803431:	ff ff ff 
ffff800000803434:	48 8b 34 03          	mov    rsi,QWORD PTR [rbx+rax*1]
ffff800000803438:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080343b:	48 63 c8             	movsxd rcx,eax
ffff80000080343e:	48 89 c8             	mov    rax,rcx
ffff800000803441:	48 c1 e0 02          	shl    rax,0x2
ffff800000803445:	48 01 c8             	add    rax,rcx
ffff800000803448:	48 c1 e0 03          	shl    rax,0x3
ffff80000080344c:	48 01 f0             	add    rax,rsi
ffff80000080344f:	48 83 c0 08          	add    rax,0x8
ffff800000803453:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:81
            strcpy(vols[i].name,name);
ffff800000803456:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803459:	48 63 d0             	movsxd rdx,eax
ffff80000080345c:	48 89 d0             	mov    rax,rdx
ffff80000080345f:	48 c1 e0 02          	shl    rax,0x2
ffff800000803463:	48 01 d0             	add    rax,rdx
ffff800000803466:	48 c1 e0 03          	shl    rax,0x3
ffff80000080346a:	48 ba a0 ff ff ff ff 	movabs rdx,0xffffffffffffffa0
ffff800000803471:	ff ff ff 
ffff800000803474:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000803478:	48 01 c2             	add    rdx,rax
ffff80000080347b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080347f:	48 89 c6             	mov    rsi,rax
ffff800000803482:	48 89 d7             	mov    rdi,rdx
ffff800000803485:	49 89 df             	mov    r15,rbx
ffff800000803488:	48 b8 2b 3f ff ff ff 	movabs rax,0xffffffffffff3f2b
ffff80000080348f:	ff ff ff 
ffff800000803492:	48 01 d8             	add    rax,rbx
ffff800000803495:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:82
            return i;
ffff800000803497:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080349a:	eb 13                	jmp    ffff8000008034af <reg_vol+0x18b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:73 (discriminator 2)
    for(int i=0;i<MAX_VOLUMES;i++)
ffff80000080349c:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:73 (discriminator 1)
ffff8000008034a0:	83 7d ec 19          	cmp    DWORD PTR [rbp-0x14],0x19
ffff8000008034a4:	0f 8e b3 fe ff ff    	jle    ffff80000080335d <reg_vol+0x39>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:85
        }
    }
    return -1;
ffff8000008034aa:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:86
}
ffff8000008034af:	48 83 c4 20          	add    rsp,0x20
ffff8000008034b3:	5b                   	pop    rbx
ffff8000008034b4:	41 5f                	pop    r15
ffff8000008034b6:	5d                   	pop    rbp
ffff8000008034b7:	c3                   	ret    

ffff8000008034b8 <sys_tell>:
sys_tell():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:210
//    if(!f)return -1;
//    f->ptr=offset+origin;
//    return 0;
//}
int sys_tell(int fno)
{
ffff8000008034b8:	f3 0f 1e fa          	endbr64 
ffff8000008034bc:	55                   	push   rbp
ffff8000008034bd:	48 89 e5             	mov    rbp,rsp
ffff8000008034c0:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008034c0 <sys_tell+0x8>
ffff8000008034c7:	49 bb 78 be 01 00 00 	movabs r11,0x1be78
ffff8000008034ce:	00 00 00 
ffff8000008034d1:	4c 01 d8             	add    rax,r11
ffff8000008034d4:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:211
    struct file* f=current->openf[fno];
ffff8000008034d7:	48 ba 90 fe ff ff ff 	movabs rdx,0xfffffffffffffe90
ffff8000008034de:	ff ff ff 
ffff8000008034e1:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff8000008034e5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008034e8:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff8000008034eb:	48 63 d2             	movsxd rdx,edx
ffff8000008034ee:	48 83 c2 1a          	add    rdx,0x1a
ffff8000008034f2:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff8000008034f7:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:212
    return f->position;
ffff8000008034fb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008034ff:	48 8b 00             	mov    rax,QWORD PTR [rax]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:213
}
ffff800000803502:	5d                   	pop    rbp
ffff800000803503:	c3                   	ret    

ffff800000803504 <get_vfs_entry>:
get_vfs_entry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:215
vfs_dir_entry *get_vfs_entry(int fno)
{
ffff800000803504:	f3 0f 1e fa          	endbr64 
ffff800000803508:	55                   	push   rbp
ffff800000803509:	48 89 e5             	mov    rbp,rsp
ffff80000080350c:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080350c <get_vfs_entry+0x8>
ffff800000803513:	49 bb 2c be 01 00 00 	movabs r11,0x1be2c
ffff80000080351a:	00 00 00 
ffff80000080351d:	4c 01 da             	add    rdx,r11
ffff800000803520:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:216
    for(int i=0;i<MAX_OPEN_FILES;i++)
ffff800000803523:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff80000080352a:	eb 55                	jmp    ffff800000803581 <get_vfs_entry+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:218
    {
        if(opened[i].fno==fno)
ffff80000080352c:	48 b8 00 ff ff ff ff 	movabs rax,0xffffffffffffff00
ffff800000803533:	ff ff ff 
ffff800000803536:	48 8b 34 02          	mov    rsi,QWORD PTR [rdx+rax*1]
ffff80000080353a:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000080353d:	48 63 c8             	movsxd rcx,eax
ffff800000803540:	48 89 c8             	mov    rax,rcx
ffff800000803543:	48 01 c0             	add    rax,rax
ffff800000803546:	48 01 c8             	add    rax,rcx
ffff800000803549:	48 c1 e0 05          	shl    rax,0x5
ffff80000080354d:	48 01 f0             	add    rax,rsi
ffff800000803550:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000803552:	39 45 ec             	cmp    DWORD PTR [rbp-0x14],eax
ffff800000803555:	75 26                	jne    ffff80000080357d <get_vfs_entry+0x79>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:220
        {
            return &opened[i];
ffff800000803557:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000080355a:	48 63 c8             	movsxd rcx,eax
ffff80000080355d:	48 89 c8             	mov    rax,rcx
ffff800000803560:	48 01 c0             	add    rax,rax
ffff800000803563:	48 01 c8             	add    rax,rcx
ffff800000803566:	48 c1 e0 05          	shl    rax,0x5
ffff80000080356a:	48 b9 00 ff ff ff ff 	movabs rcx,0xffffffffffffff00
ffff800000803571:	ff ff ff 
ffff800000803574:	48 8b 14 0a          	mov    rdx,QWORD PTR [rdx+rcx*1]
ffff800000803578:	48 01 d0             	add    rax,rdx
ffff80000080357b:	eb 0f                	jmp    ffff80000080358c <get_vfs_entry+0x88>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:216 (discriminator 2)
    for(int i=0;i<MAX_OPEN_FILES;i++)
ffff80000080357d:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:216 (discriminator 1)
ffff800000803581:	83 7d fc 3f          	cmp    DWORD PTR [rbp-0x4],0x3f
ffff800000803585:	7e a5                	jle    ffff80000080352c <get_vfs_entry+0x28>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:223
        }
    }
    return NULL;
ffff800000803587:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:224
}
ffff80000080358c:	5d                   	pop    rbp
ffff80000080358d:	c3                   	ret    

ffff80000080358e <brelse>:
brelse():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:228

//释放缓冲区（只释放这一块）
int brelse(buffer_head* bh)
{
ffff80000080358e:	f3 0f 1e fa          	endbr64 
ffff800000803592:	55                   	push   rbp
ffff800000803593:	48 89 e5             	mov    rbp,rsp
ffff800000803596:	41 57                	push   r15
ffff800000803598:	53                   	push   rbx
ffff800000803599:	48 83 ec 10          	sub    rsp,0x10
ffff80000080359d:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080359d <brelse+0xf>
ffff8000008035a4:	49 bb 9b bd 01 00 00 	movabs r11,0x1bd9b
ffff8000008035ab:	00 00 00 
ffff8000008035ae:	4c 01 db             	add    rbx,r11
ffff8000008035b1:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:229
    wait_on_buf(bh);
ffff8000008035b5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008035b9:	48 89 c7             	mov    rdi,rax
ffff8000008035bc:	49 89 df             	mov    r15,rbx
ffff8000008035bf:	48 b8 b7 49 fe ff ff 	movabs rax,0xfffffffffffe49b7
ffff8000008035c6:	ff ff ff 
ffff8000008035c9:	48 01 d8             	add    rax,rbx
ffff8000008035cc:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:230
    if(bh->b_count==0)return -1;
ffff8000008035ce:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008035d2:	0f b6 40 14          	movzx  eax,BYTE PTR [rax+0x14]
ffff8000008035d6:	84 c0                	test   al,al
ffff8000008035d8:	75 07                	jne    ffff8000008035e1 <brelse+0x53>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:230 (discriminator 1)
ffff8000008035da:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff8000008035df:	eb 3f                	jmp    ffff800000803620 <brelse+0x92>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:231
    bh->b_count--;
ffff8000008035e1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008035e5:	0f b6 40 14          	movzx  eax,BYTE PTR [rax+0x14]
ffff8000008035e9:	8d 50 ff             	lea    edx,[rax-0x1]
ffff8000008035ec:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008035f0:	88 50 14             	mov    BYTE PTR [rax+0x14],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:232
    if(bh->b_count==0)
ffff8000008035f3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008035f7:	0f b6 40 14          	movzx  eax,BYTE PTR [rax+0x14]
ffff8000008035fb:	84 c0                	test   al,al
ffff8000008035fd:	75 1c                	jne    ffff80000080361b <brelse+0x8d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:233
        kmfree(bh->b_data);
ffff8000008035ff:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803603:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803606:	48 89 c7             	mov    rdi,rax
ffff800000803609:	49 89 df             	mov    r15,rbx
ffff80000080360c:	48 b8 82 2f fe ff ff 	movabs rax,0xfffffffffffe2f82
ffff800000803613:	ff ff ff 
ffff800000803616:	48 01 d8             	add    rax,rbx
ffff800000803619:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:234
    return 0;
ffff80000080361b:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:235
}
ffff800000803620:	48 83 c4 10          	add    rsp,0x10
ffff800000803624:	5b                   	pop    rbx
ffff800000803625:	41 5f                	pop    r15
ffff800000803627:	5d                   	pop    rbp
ffff800000803628:	c3                   	ret    

ffff800000803629 <bread>:
bread():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:238
//从设备中读取指定设备的指定块并返回缓冲区
buffer_head* bread(int dev,int blk)
{
ffff800000803629:	f3 0f 1e fa          	endbr64 
ffff80000080362d:	55                   	push   rbp
ffff80000080362e:	48 89 e5             	mov    rbp,rsp
ffff800000803631:	41 57                	push   r15
ffff800000803633:	53                   	push   rbx
ffff800000803634:	48 81 ec e0 00 00 00 	sub    rsp,0xe0
ffff80000080363b:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080363b <bread+0x12>
ffff800000803642:	49 bb fd bc 01 00 00 	movabs r11,0x1bcfd
ffff800000803649:	00 00 00 
ffff80000080364c:	4c 01 db             	add    rbx,r11
ffff80000080364f:	89 bd 1c ff ff ff    	mov    DWORD PTR [rbp-0xe4],edi
ffff800000803655:	89 b5 18 ff ff ff    	mov    DWORD PTR [rbp-0xe8],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:240

    buffer_head *bh=get_buf(dev,blk);
ffff80000080365b:	8b 95 18 ff ff ff    	mov    edx,DWORD PTR [rbp-0xe8]
ffff800000803661:	8b 85 1c ff ff ff    	mov    eax,DWORD PTR [rbp-0xe4]
ffff800000803667:	89 d6                	mov    esi,edx
ffff800000803669:	89 c7                	mov    edi,eax
ffff80000080366b:	49 89 df             	mov    r15,rbx
ffff80000080366e:	48 b8 d8 46 fe ff ff 	movabs rax,0xfffffffffffe46d8
ffff800000803675:	ff ff ff 
ffff800000803678:	48 01 d8             	add    rax,rbx
ffff80000080367b:	ff d0                	call   rax
ffff80000080367d:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:241
    if(!bh)return -1;//申请失败
ffff800000803681:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff800000803686:	75 0c                	jne    ffff800000803694 <bread+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:241 (discriminator 1)
ffff800000803688:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff80000080368f:	e9 a0 00 00 00       	jmp    ffff800000803734 <bread+0x10b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:242
    if(!bh->b_uptodate)
ffff800000803694:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803698:	0f b6 40 12          	movzx  eax,BYTE PTR [rax+0x12]
ffff80000080369c:	84 c0                	test   al,al
ffff80000080369e:	0f 85 8c 00 00 00    	jne    ffff800000803730 <bread+0x107>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:245
    {
        driver_args arg;
        arg.dev=dev;
ffff8000008036a4:	8b 85 1c ff ff ff    	mov    eax,DWORD PTR [rbp-0xe4]
ffff8000008036aa:	89 45 ac             	mov    DWORD PTR [rbp-0x54],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:246
        arg.cmd=DRVF_READ;
ffff8000008036ad:	c7 45 c8 02 00 00 00 	mov    DWORD PTR [rbp-0x38],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:247
        arg.dist_addr=bh->b_data;
ffff8000008036b4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008036b8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008036bb:	89 85 24 ff ff ff    	mov    DWORD PTR [rbp-0xdc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:248
        arg.len=BLOCK_SIZE;
ffff8000008036c1:	c7 85 38 ff ff ff 00 	mov    DWORD PTR [rbp-0xc8],0x200
ffff8000008036c8:	02 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:249
        arg.lba=bh->b_blocknr;
ffff8000008036cb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008036cf:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff8000008036d3:	89 85 20 ff ff ff    	mov    DWORD PTR [rbp-0xe0],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:250
        arg.sec_c=BLOCK_SIZE/512;//之后会改
ffff8000008036d9:	c7 85 38 ff ff ff 01 	mov    DWORD PTR [rbp-0xc8],0x1
ffff8000008036e0:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:252
        //lock_buffer(bh);//锁定缓冲块直到读取完成
        int reqi=make_request(&arg);
ffff8000008036e3:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
ffff8000008036ea:	48 89 c7             	mov    rdi,rax
ffff8000008036ed:	49 89 df             	mov    r15,rbx
ffff8000008036f0:	48 b8 d6 6c fe ff ff 	movabs rax,0xfffffffffffe6cd6
ffff8000008036f7:	ff ff ff 
ffff8000008036fa:	48 01 d8             	add    rax,rbx
ffff8000008036fd:	ff d0                	call   rax
ffff8000008036ff:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:253
        wait_on_req(reqi);
ffff800000803702:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000803705:	89 c7                	mov    edi,eax
ffff800000803707:	49 89 df             	mov    r15,rbx
ffff80000080370a:	48 b8 76 70 fe ff ff 	movabs rax,0xfffffffffffe7076
ffff800000803711:	ff ff ff 
ffff800000803714:	48 01 d8             	add    rax,rbx
ffff800000803717:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:254
        clear_req(reqi);
ffff800000803719:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080371c:	89 c7                	mov    edi,eax
ffff80000080371e:	49 89 df             	mov    r15,rbx
ffff800000803721:	48 b8 cb 70 fe ff ff 	movabs rax,0xfffffffffffe70cb
ffff800000803728:	ff ff ff 
ffff80000080372b:	48 01 d8             	add    rax,rbx
ffff80000080372e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:256
    }
    return bh;
ffff800000803730:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:257
}
ffff800000803734:	48 81 c4 e0 00 00 00 	add    rsp,0xe0
ffff80000080373b:	5b                   	pop    rbx
ffff80000080373c:	41 5f                	pop    r15
ffff80000080373e:	5d                   	pop    rbp
ffff80000080373f:	c3                   	ret    

ffff800000803740 <vfs_read_file>:
vfs_read_file():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:261


int vfs_read_file(vfs_dir_entry *f,char *buf,int len)
{
ffff800000803740:	f3 0f 1e fa          	endbr64 
ffff800000803744:	55                   	push   rbp
ffff800000803745:	48 89 e5             	mov    rbp,rsp
ffff800000803748:	41 57                	push   r15
ffff80000080374a:	53                   	push   rbx
ffff80000080374b:	48 83 ec 40          	sub    rsp,0x40
ffff80000080374f:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080374f <vfs_read_file+0xf>
ffff800000803756:	49 bb e9 bb 01 00 00 	movabs r11,0x1bbe9
ffff80000080375d:	00 00 00 
ffff800000803760:	4c 01 db             	add    rbx,r11
ffff800000803763:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000803767:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffff80000080376b:	89 55 bc             	mov    DWORD PTR [rbp-0x44],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:262
    int dev=f->dev;
ffff80000080376e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803772:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
ffff800000803775:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:264 (discriminator 1)
    do{
        int block=get_according_bnr(f);
ffff800000803778:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080377c:	48 89 c7             	mov    rdi,rax
ffff80000080377f:	49 89 df             	mov    r15,rbx
ffff800000803782:	48 b8 75 46 fe ff ff 	movabs rax,0xfffffffffffe4675
ffff800000803789:	ff ff ff 
ffff80000080378c:	48 01 d8             	add    rax,rbx
ffff80000080378f:	ff d0                	call   rax
ffff800000803791:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:265 (discriminator 1)
        buffer_head* bh=bread(dev,block);
ffff800000803794:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000803797:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080379a:	89 d6                	mov    esi,edx
ffff80000080379c:	89 c7                	mov    edi,eax
ffff80000080379e:	49 89 df             	mov    r15,rbx
ffff8000008037a1:	48 b8 f1 42 fe ff ff 	movabs rax,0xfffffffffffe42f1
ffff8000008037a8:	ff ff ff 
ffff8000008037ab:	48 01 d8             	add    rax,rbx
ffff8000008037ae:	ff d0                	call   rax
ffff8000008037b0:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:266 (discriminator 1)
        int size=len>BLOCK_SIZE?BLOCK_SIZE:len;//一次最多读一块，如果len大于一块，就只能读一块
ffff8000008037b4:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
ffff8000008037b7:	ba 00 02 00 00       	mov    edx,0x200
ffff8000008037bc:	39 d0                	cmp    eax,edx
ffff8000008037be:	0f 4f c2             	cmovg  eax,edx
ffff8000008037c1:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:267 (discriminator 1)
        memcpy(buf,bh->b_data,size);
ffff8000008037c4:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff8000008037c7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008037cb:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008037ce:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008037d2:	48 89 ce             	mov    rsi,rcx
ffff8000008037d5:	48 89 c7             	mov    rdi,rax
ffff8000008037d8:	49 89 df             	mov    r15,rbx
ffff8000008037db:	48 b8 27 3e ff ff ff 	movabs rax,0xffffffffffff3e27
ffff8000008037e2:	ff ff ff 
ffff8000008037e5:	48 01 d8             	add    rax,rbx
ffff8000008037e8:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:268 (discriminator 1)
        len-=BLOCK_SIZE;
ffff8000008037ea:	81 6d bc 00 02 00 00 	sub    DWORD PTR [rbp-0x44],0x200
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:270 (discriminator 1)
        //读写指针后移
        f->ptr+=size;
ffff8000008037f1:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008037f5:	8b 50 1c             	mov    edx,DWORD PTR [rax+0x1c]
ffff8000008037f8:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008037fb:	01 c2                	add    edx,eax
ffff8000008037fd:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803801:	89 50 1c             	mov    DWORD PTR [rax+0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:271 (discriminator 1)
        brelse(bh);
ffff800000803804:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803808:	48 89 c7             	mov    rdi,rax
ffff80000080380b:	49 89 df             	mov    r15,rbx
ffff80000080380e:	48 b8 56 42 fe ff ff 	movabs rax,0xfffffffffffe4256
ffff800000803815:	ff ff ff 
ffff800000803818:	48 01 d8             	add    rax,rbx
ffff80000080381b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:272 (discriminator 1)
    }while(len>0);
ffff80000080381d:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
ffff800000803821:	0f 8f 51 ff ff ff    	jg     ffff800000803778 <vfs_read_file+0x38>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:273
    return 0;
ffff800000803827:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:274
}
ffff80000080382c:	48 83 c4 40          	add    rsp,0x40
ffff800000803830:	5b                   	pop    rbx
ffff800000803831:	41 5f                	pop    r15
ffff800000803833:	5d                   	pop    rbp
ffff800000803834:	c3                   	ret    

ffff800000803835 <vfs_write_file>:
vfs_write_file():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:276
int vfs_write_file(vfs_dir_entry *f,char *buf,int len)
{
ffff800000803835:	f3 0f 1e fa          	endbr64 
ffff800000803839:	55                   	push   rbp
ffff80000080383a:	48 89 e5             	mov    rbp,rsp
ffff80000080383d:	41 57                	push   r15
ffff80000080383f:	53                   	push   rbx
ffff800000803840:	48 83 ec 40          	sub    rsp,0x40
ffff800000803844:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000803844 <vfs_write_file+0xf>
ffff80000080384b:	49 bb f4 ba 01 00 00 	movabs r11,0x1baf4
ffff800000803852:	00 00 00 
ffff800000803855:	4c 01 db             	add    rbx,r11
ffff800000803858:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff80000080385c:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffff800000803860:	89 55 bc             	mov    DWORD PTR [rbp-0x44],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:277
    int dev=f->dev;
ffff800000803863:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803867:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
ffff80000080386a:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:279 (discriminator 1)
    do{
        int block=get_according_bnr(f);
ffff80000080386d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803871:	48 89 c7             	mov    rdi,rax
ffff800000803874:	49 89 df             	mov    r15,rbx
ffff800000803877:	48 b8 75 46 fe ff ff 	movabs rax,0xfffffffffffe4675
ffff80000080387e:	ff ff ff 
ffff800000803881:	48 01 d8             	add    rax,rbx
ffff800000803884:	ff d0                	call   rax
ffff800000803886:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:280 (discriminator 1)
        buffer_head* bh=get_buf(dev,block);
ffff800000803889:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff80000080388c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080388f:	89 d6                	mov    esi,edx
ffff800000803891:	89 c7                	mov    edi,eax
ffff800000803893:	49 89 df             	mov    r15,rbx
ffff800000803896:	48 b8 d8 46 fe ff ff 	movabs rax,0xfffffffffffe46d8
ffff80000080389d:	ff ff ff 
ffff8000008038a0:	48 01 d8             	add    rax,rbx
ffff8000008038a3:	ff d0                	call   rax
ffff8000008038a5:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:281 (discriminator 1)
        int size=len>BLOCK_SIZE?BLOCK_SIZE:len;//一次最多读一块，如果len大于一块，就只能读一块
ffff8000008038a9:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
ffff8000008038ac:	ba 00 02 00 00       	mov    edx,0x200
ffff8000008038b1:	39 d0                	cmp    eax,edx
ffff8000008038b3:	0f 4f c2             	cmovg  eax,edx
ffff8000008038b6:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:282 (discriminator 1)
        memcpy(bh->b_data,buf,size);
ffff8000008038b9:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff8000008038bc:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008038c0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008038c3:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
ffff8000008038c7:	48 89 ce             	mov    rsi,rcx
ffff8000008038ca:	48 89 c7             	mov    rdi,rax
ffff8000008038cd:	49 89 df             	mov    r15,rbx
ffff8000008038d0:	48 b8 27 3e ff ff ff 	movabs rax,0xffffffffffff3e27
ffff8000008038d7:	ff ff ff 
ffff8000008038da:	48 01 d8             	add    rax,rbx
ffff8000008038dd:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:283 (discriminator 1)
        len-=BLOCK_SIZE;
ffff8000008038df:	81 6d bc 00 02 00 00 	sub    DWORD PTR [rbp-0x44],0x200
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:285 (discriminator 1)
        //读写指针后移
        f->ptr+=size;
ffff8000008038e6:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008038ea:	8b 50 1c             	mov    edx,DWORD PTR [rax+0x1c]
ffff8000008038ed:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008038f0:	01 c2                	add    edx,eax
ffff8000008038f2:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008038f6:	89 50 1c             	mov    DWORD PTR [rax+0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:286 (discriminator 1)
        bh->b_dirt=1;//修改置位
ffff8000008038f9:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008038fd:	c6 40 13 01          	mov    BYTE PTR [rax+0x13],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:287 (discriminator 1)
        brelse(bh);
ffff800000803901:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803905:	48 89 c7             	mov    rdi,rax
ffff800000803908:	49 89 df             	mov    r15,rbx
ffff80000080390b:	48 b8 56 42 fe ff ff 	movabs rax,0xfffffffffffe4256
ffff800000803912:	ff ff ff 
ffff800000803915:	48 01 d8             	add    rax,rbx
ffff800000803918:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:288 (discriminator 1)
    }while(len>0);
ffff80000080391a:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
ffff80000080391e:	0f 8f 49 ff ff ff    	jg     ffff80000080386d <vfs_write_file+0x38>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:289
    return 0;
ffff800000803924:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:290
}
ffff800000803929:	48 83 c4 40          	add    rsp,0x40
ffff80000080392d:	5b                   	pop    rbx
ffff80000080392e:	41 5f                	pop    r15
ffff800000803930:	5d                   	pop    rbp
ffff800000803931:	c3                   	ret    

ffff800000803932 <vfs_seek_file>:
vfs_seek_file():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:293

int vfs_seek_file(vfs_dir_entry *f,int offset,int origin)
{
ffff800000803932:	f3 0f 1e fa          	endbr64 
ffff800000803936:	55                   	push   rbp
ffff800000803937:	48 89 e5             	mov    rbp,rsp
ffff80000080393a:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080393a <vfs_seek_file+0x8>
ffff800000803941:	49 bb fe b9 01 00 00 	movabs r11,0x1b9fe
ffff800000803948:	00 00 00 
ffff80000080394b:	4c 01 d8             	add    rax,r11
ffff80000080394e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000803952:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
ffff800000803955:	89 55 f0             	mov    DWORD PTR [rbp-0x10],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:294
    switch (origin)
ffff800000803958:	83 7d f0 02          	cmp    DWORD PTR [rbp-0x10],0x2
ffff80000080395c:	74 35                	je     ffff800000803993 <vfs_seek_file+0x61>
ffff80000080395e:	83 7d f0 02          	cmp    DWORD PTR [rbp-0x10],0x2
ffff800000803962:	7f 3f                	jg     ffff8000008039a3 <vfs_seek_file+0x71>
ffff800000803964:	83 7d f0 00          	cmp    DWORD PTR [rbp-0x10],0x0
ffff800000803968:	74 08                	je     ffff800000803972 <vfs_seek_file+0x40>
ffff80000080396a:	83 7d f0 01          	cmp    DWORD PTR [rbp-0x10],0x1
ffff80000080396e:	74 0e                	je     ffff80000080397e <vfs_seek_file+0x4c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:306
        break;
    case SEEK_END:
        f->ptr=f->size;
        break;
    default:
        break;
ffff800000803970:	eb 31                	jmp    ffff8000008039a3 <vfs_seek_file+0x71>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:297
        f->ptr=offset;
ffff800000803972:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803976:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff800000803979:	89 50 1c             	mov    DWORD PTR [rax+0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:298
        break;
ffff80000080397c:	eb 26                	jmp    ffff8000008039a4 <vfs_seek_file+0x72>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:300
        f->ptr+=offset;
ffff80000080397e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803982:	8b 50 1c             	mov    edx,DWORD PTR [rax+0x1c]
ffff800000803985:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffff800000803988:	01 c2                	add    edx,eax
ffff80000080398a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080398e:	89 50 1c             	mov    DWORD PTR [rax+0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:301
        break;
ffff800000803991:	eb 11                	jmp    ffff8000008039a4 <vfs_seek_file+0x72>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:303
        f->ptr=f->size;
ffff800000803993:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803997:	8b 50 18             	mov    edx,DWORD PTR [rax+0x18]
ffff80000080399a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080399e:	89 50 1c             	mov    DWORD PTR [rax+0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:304
        break;
ffff8000008039a1:	eb 01                	jmp    ffff8000008039a4 <vfs_seek_file+0x72>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:306
        break;
ffff8000008039a3:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:308
    }
    return f->ptr;
ffff8000008039a4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008039a8:	8b 40 1c             	mov    eax,DWORD PTR [rax+0x1c]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:309
}
ffff8000008039ab:	5d                   	pop    rbp
ffff8000008039ac:	c3                   	ret    

ffff8000008039ad <get_according_bnr>:
get_according_bnr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:312
//返回文件ptr在块设备中的块号
int get_according_bnr(vfs_dir_entry *f)
{
ffff8000008039ad:	f3 0f 1e fa          	endbr64 
ffff8000008039b1:	55                   	push   rbp
ffff8000008039b2:	48 89 e5             	mov    rbp,rsp
ffff8000008039b5:	48 83 ec 10          	sub    rsp,0x10
ffff8000008039b9:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008039b9 <get_according_bnr+0xc>
ffff8000008039c0:	49 bb 7f b9 01 00 00 	movabs r11,0x1b97f
ffff8000008039c7:	00 00 00 
ffff8000008039ca:	4c 01 d8             	add    rax,r11
ffff8000008039cd:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:313
    return vols[f->voln].fs->get_according_bnr(f);
ffff8000008039d1:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff8000008039d5:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff8000008039d8:	48 b9 a0 ff ff ff ff 	movabs rcx,0xffffffffffffffa0
ffff8000008039df:	ff ff ff 
ffff8000008039e2:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff8000008039e6:	48 63 d2             	movsxd rdx,edx
ffff8000008039e9:	48 89 d0             	mov    rax,rdx
ffff8000008039ec:	48 c1 e0 02          	shl    rax,0x2
ffff8000008039f0:	48 01 d0             	add    rax,rdx
ffff8000008039f3:	48 c1 e0 03          	shl    rax,0x3
ffff8000008039f7:	48 01 c8             	add    rax,rcx
ffff8000008039fa:	48 83 c0 18          	add    rax,0x18
ffff8000008039fe:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803a01:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff800000803a05:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803a09:	48 89 c7             	mov    rdi,rax
ffff800000803a0c:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:315

}
ffff800000803a0e:	c9                   	leave  
ffff800000803a0f:	c3                   	ret    

ffff800000803a10 <get_buf>:
get_buf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:318
//获取或者新建一个和dev上block相对应的缓冲区。
buffer_head* get_buf(int dev,int block)
{
ffff800000803a10:	f3 0f 1e fa          	endbr64 
ffff800000803a14:	55                   	push   rbp
ffff800000803a15:	48 89 e5             	mov    rbp,rsp
ffff800000803a18:	41 57                	push   r15
ffff800000803a1a:	53                   	push   rbx
ffff800000803a1b:	48 83 ec 20          	sub    rsp,0x20
ffff800000803a1f:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000803a1f <get_buf+0xf>
ffff800000803a26:	49 bb 19 b9 01 00 00 	movabs r11,0x1b919
ffff800000803a2d:	00 00 00 
ffff800000803a30:	4c 01 db             	add    rbx,r11
ffff800000803a33:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff800000803a36:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:319
    for(int i=0;i<NR_BUFFERHEADS;i++)
ffff800000803a39:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000803a40:	e9 31 01 00 00       	jmp    ffff800000803b76 <get_buf+0x166>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:321
    {
        if(buffer_heads[i].b_dev==dev&&buffer_heads[i].b_blocknr==block)
ffff800000803a45:	48 b8 18 ff ff ff ff 	movabs rax,0xffffffffffffff18
ffff800000803a4c:	ff ff ff 
ffff800000803a4f:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff800000803a53:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803a56:	48 98                	cdqe   
ffff800000803a58:	48 c1 e0 06          	shl    rax,0x6
ffff800000803a5c:	48 01 d0             	add    rax,rdx
ffff800000803a5f:	48 83 c0 10          	add    rax,0x10
ffff800000803a63:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff800000803a66:	0f b7 c0             	movzx  eax,ax
ffff800000803a69:	39 45 dc             	cmp    DWORD PTR [rbp-0x24],eax
ffff800000803a6c:	0f 85 00 01 00 00    	jne    ffff800000803b72 <get_buf+0x162>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:321 (discriminator 1)
ffff800000803a72:	48 b8 18 ff ff ff ff 	movabs rax,0xffffffffffffff18
ffff800000803a79:	ff ff ff 
ffff800000803a7c:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff800000803a80:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803a83:	48 98                	cdqe   
ffff800000803a85:	48 c1 e0 06          	shl    rax,0x6
ffff800000803a89:	48 01 d0             	add    rax,rdx
ffff800000803a8c:	48 83 c0 08          	add    rax,0x8
ffff800000803a90:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803a93:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000803a96:	48 98                	cdqe   
ffff800000803a98:	48 39 c2             	cmp    rdx,rax
ffff800000803a9b:	0f 85 d1 00 00 00    	jne    ffff800000803b72 <get_buf+0x162>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:323
        {
            repeat:
ffff800000803aa1:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:324
            wait_on_buf(&buffer_heads[i]);//等待解锁
ffff800000803aa2:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803aa5:	48 98                	cdqe   
ffff800000803aa7:	48 c1 e0 06          	shl    rax,0x6
ffff800000803aab:	48 89 c2             	mov    rdx,rax
ffff800000803aae:	48 b8 18 ff ff ff ff 	movabs rax,0xffffffffffffff18
ffff800000803ab5:	ff ff ff 
ffff800000803ab8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803abc:	48 01 d0             	add    rax,rdx
ffff800000803abf:	48 89 c7             	mov    rdi,rax
ffff800000803ac2:	49 89 df             	mov    r15,rbx
ffff800000803ac5:	48 b8 b7 49 fe ff ff 	movabs rax,0xfffffffffffe49b7
ffff800000803acc:	ff ff ff 
ffff800000803acf:	48 01 d8             	add    rax,rbx
ffff800000803ad2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:325
            if(buffer_heads[i].b_count>0)//别的进程正在用
ffff800000803ad4:	48 b8 18 ff ff ff ff 	movabs rax,0xffffffffffffff18
ffff800000803adb:	ff ff ff 
ffff800000803ade:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff800000803ae2:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803ae5:	48 98                	cdqe   
ffff800000803ae7:	48 c1 e0 06          	shl    rax,0x6
ffff800000803aeb:	48 01 d0             	add    rax,rdx
ffff800000803aee:	48 83 c0 14          	add    rax,0x14
ffff800000803af2:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000803af5:	84 c0                	test   al,al
ffff800000803af7:	74 02                	je     ffff800000803afb <get_buf+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:326
                goto repeat;
ffff800000803af9:	eb a7                	jmp    ffff800000803aa2 <get_buf+0x92>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:327
            if(!(buffer_heads[i].b_dev==dev&&buffer_heads[i].b_blocknr==block))//别的进程修改了
ffff800000803afb:	48 b8 18 ff ff ff ff 	movabs rax,0xffffffffffffff18
ffff800000803b02:	ff ff ff 
ffff800000803b05:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff800000803b09:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803b0c:	48 98                	cdqe   
ffff800000803b0e:	48 c1 e0 06          	shl    rax,0x6
ffff800000803b12:	48 01 d0             	add    rax,rdx
ffff800000803b15:	48 83 c0 10          	add    rax,0x10
ffff800000803b19:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff800000803b1c:	0f b7 c0             	movzx  eax,ax
ffff800000803b1f:	39 45 dc             	cmp    DWORD PTR [rbp-0x24],eax
ffff800000803b22:	75 4d                	jne    ffff800000803b71 <get_buf+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:327 (discriminator 2)
ffff800000803b24:	48 b8 18 ff ff ff ff 	movabs rax,0xffffffffffffff18
ffff800000803b2b:	ff ff ff 
ffff800000803b2e:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff800000803b32:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803b35:	48 98                	cdqe   
ffff800000803b37:	48 c1 e0 06          	shl    rax,0x6
ffff800000803b3b:	48 01 d0             	add    rax,rdx
ffff800000803b3e:	48 83 c0 08          	add    rax,0x8
ffff800000803b42:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803b45:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000803b48:	48 98                	cdqe   
ffff800000803b4a:	48 39 c2             	cmp    rdx,rax
ffff800000803b4d:	75 22                	jne    ffff800000803b71 <get_buf+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:329
                continue;
            return &buffer_heads[i];
ffff800000803b4f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803b52:	48 98                	cdqe   
ffff800000803b54:	48 c1 e0 06          	shl    rax,0x6
ffff800000803b58:	48 89 c2             	mov    rdx,rax
ffff800000803b5b:	48 b8 18 ff ff ff ff 	movabs rax,0xffffffffffffff18
ffff800000803b62:	ff ff ff 
ffff800000803b65:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803b69:	48 01 d0             	add    rax,rdx
ffff800000803b6c:	e9 75 01 00 00       	jmp    ffff800000803ce6 <get_buf+0x2d6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:328
                continue;
ffff800000803b71:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:319 (discriminator 2)
    for(int i=0;i<NR_BUFFERHEADS;i++)
ffff800000803b72:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:319 (discriminator 1)
ffff800000803b76:	83 7d ec 1f          	cmp    DWORD PTR [rbp-0x14],0x1f
ffff800000803b7a:	0f 8e c5 fe ff ff    	jle    ffff800000803a45 <get_buf+0x35>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:333
        }
    }
    //空头中找
    for(int i=0;i<NR_BUFFERHEADS;i++)
ffff800000803b80:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff800000803b87:	e9 50 01 00 00       	jmp    ffff800000803cdc <get_buf+0x2cc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:335
    {
        if(buffer_heads[i].b_count==0)
ffff800000803b8c:	48 b8 18 ff ff ff ff 	movabs rax,0xffffffffffffff18
ffff800000803b93:	ff ff ff 
ffff800000803b96:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff800000803b9a:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000803b9d:	48 98                	cdqe   
ffff800000803b9f:	48 c1 e0 06          	shl    rax,0x6
ffff800000803ba3:	48 01 d0             	add    rax,rdx
ffff800000803ba6:	48 83 c0 14          	add    rax,0x14
ffff800000803baa:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000803bad:	84 c0                	test   al,al
ffff800000803baf:	0f 85 23 01 00 00    	jne    ffff800000803cd8 <get_buf+0x2c8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:337
        {
            if(buffer_heads[i].b_dirt)
ffff800000803bb5:	48 b8 18 ff ff ff ff 	movabs rax,0xffffffffffffff18
ffff800000803bbc:	ff ff ff 
ffff800000803bbf:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff800000803bc3:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000803bc6:	48 98                	cdqe   
ffff800000803bc8:	48 c1 e0 06          	shl    rax,0x6
ffff800000803bcc:	48 01 d0             	add    rax,rdx
ffff800000803bcf:	48 83 c0 13          	add    rax,0x13
ffff800000803bd3:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000803bd6:	84 c0                	test   al,al
ffff800000803bd8:	74 64                	je     ffff800000803c3e <get_buf+0x22e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:339
            {
                sync_buf(&buffer_heads[i]);
ffff800000803bda:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000803bdd:	48 98                	cdqe   
ffff800000803bdf:	48 c1 e0 06          	shl    rax,0x6
ffff800000803be3:	48 89 c2             	mov    rdx,rax
ffff800000803be6:	48 b8 18 ff ff ff ff 	movabs rax,0xffffffffffffff18
ffff800000803bed:	ff ff ff 
ffff800000803bf0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803bf4:	48 01 d0             	add    rax,rdx
ffff800000803bf7:	48 89 c7             	mov    rdi,rax
ffff800000803bfa:	49 89 df             	mov    r15,rbx
ffff800000803bfd:	48 b8 ae 4a fe ff ff 	movabs rax,0xfffffffffffe4aae
ffff800000803c04:	ff ff ff 
ffff800000803c07:	48 01 d8             	add    rax,rbx
ffff800000803c0a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:340
                wait_on_buf(&buffer_heads[i]);
ffff800000803c0c:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000803c0f:	48 98                	cdqe   
ffff800000803c11:	48 c1 e0 06          	shl    rax,0x6
ffff800000803c15:	48 89 c2             	mov    rdx,rax
ffff800000803c18:	48 b8 18 ff ff ff ff 	movabs rax,0xffffffffffffff18
ffff800000803c1f:	ff ff ff 
ffff800000803c22:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803c26:	48 01 d0             	add    rax,rdx
ffff800000803c29:	48 89 c7             	mov    rdi,rax
ffff800000803c2c:	49 89 df             	mov    r15,rbx
ffff800000803c2f:	48 b8 b7 49 fe ff ff 	movabs rax,0xfffffffffffe49b7
ffff800000803c36:	ff ff ff 
ffff800000803c39:	48 01 d8             	add    rax,rbx
ffff800000803c3c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:342
            }
            buffer_heads[i].b_count++;
ffff800000803c3e:	48 b8 18 ff ff ff ff 	movabs rax,0xffffffffffffff18
ffff800000803c45:	ff ff ff 
ffff800000803c48:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff800000803c4c:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000803c4f:	48 98                	cdqe   
ffff800000803c51:	48 c1 e0 06          	shl    rax,0x6
ffff800000803c55:	48 01 d0             	add    rax,rdx
ffff800000803c58:	48 83 c0 14          	add    rax,0x14
ffff800000803c5c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000803c5f:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000803c62:	48 b8 18 ff ff ff ff 	movabs rax,0xffffffffffffff18
ffff800000803c69:	ff ff ff 
ffff800000803c6c:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000803c70:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000803c73:	48 98                	cdqe   
ffff800000803c75:	48 c1 e0 06          	shl    rax,0x6
ffff800000803c79:	48 01 c8             	add    rax,rcx
ffff800000803c7c:	48 83 c0 14          	add    rax,0x14
ffff800000803c80:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:344
            //给buffer分配一个实际的缓冲区
            buffer_heads[i].b_data= kmalloc();
ffff800000803c82:	49 89 df             	mov    r15,rbx
ffff800000803c85:	b8 00 00 00 00       	mov    eax,0x0
ffff800000803c8a:	48 ba 13 2c fe ff ff 	movabs rdx,0xfffffffffffe2c13
ffff800000803c91:	ff ff ff 
ffff800000803c94:	48 01 da             	add    rdx,rbx
ffff800000803c97:	ff d2                	call   rdx
ffff800000803c99:	48 89 c2             	mov    rdx,rax
ffff800000803c9c:	48 b8 18 ff ff ff ff 	movabs rax,0xffffffffffffff18
ffff800000803ca3:	ff ff ff 
ffff800000803ca6:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000803caa:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000803cad:	48 98                	cdqe   
ffff800000803caf:	48 c1 e0 06          	shl    rax,0x6
ffff800000803cb3:	48 01 c8             	add    rax,rcx
ffff800000803cb6:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:345
            return &buffer_heads[i];
ffff800000803cb9:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000803cbc:	48 98                	cdqe   
ffff800000803cbe:	48 c1 e0 06          	shl    rax,0x6
ffff800000803cc2:	48 89 c2             	mov    rdx,rax
ffff800000803cc5:	48 b8 18 ff ff ff ff 	movabs rax,0xffffffffffffff18
ffff800000803ccc:	ff ff ff 
ffff800000803ccf:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803cd3:	48 01 d0             	add    rax,rdx
ffff800000803cd6:	eb 0e                	jmp    ffff800000803ce6 <get_buf+0x2d6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:333 (discriminator 2)
    for(int i=0;i<NR_BUFFERHEADS;i++)
ffff800000803cd8:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:333 (discriminator 1)
ffff800000803cdc:	83 7d e8 1f          	cmp    DWORD PTR [rbp-0x18],0x1f
ffff800000803ce0:	0f 8e a6 fe ff ff    	jle    ffff800000803b8c <get_buf+0x17c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:348
        }
    }
}
ffff800000803ce6:	48 83 c4 20          	add    rsp,0x20
ffff800000803cea:	5b                   	pop    rbx
ffff800000803ceb:	41 5f                	pop    r15
ffff800000803ced:	5d                   	pop    rbp
ffff800000803cee:	c3                   	ret    

ffff800000803cef <wait_on_buf>:
wait_on_buf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:351

void wait_on_buf(buffer_head* bh)
{
ffff800000803cef:	f3 0f 1e fa          	endbr64 
ffff800000803cf3:	55                   	push   rbp
ffff800000803cf4:	48 89 e5             	mov    rbp,rsp
ffff800000803cf7:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000803cf7 <wait_on_buf+0x8>
ffff800000803cfe:	49 bb 41 b6 01 00 00 	movabs r11,0x1b641
ffff800000803d05:	00 00 00 
ffff800000803d08:	4c 01 d8             	add    rax,r11
ffff800000803d0b:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:353
    //等待缓冲区解锁
    while (bh->b_lock);
ffff800000803d0f:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:353 (discriminator 1)
ffff800000803d10:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803d14:	0f b6 40 15          	movzx  eax,BYTE PTR [rax+0x15]
ffff800000803d18:	84 c0                	test   al,al
ffff800000803d1a:	75 f4                	jne    ffff800000803d10 <wait_on_buf+0x21>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:355
    
}
ffff800000803d1c:	90                   	nop
ffff800000803d1d:	90                   	nop
ffff800000803d1e:	5d                   	pop    rbp
ffff800000803d1f:	c3                   	ret    

ffff800000803d20 <scan_dev>:
scan_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:359

//扫描块设备，读取分区，识别文件系统
int scan_dev(int dev)
{
ffff800000803d20:	f3 0f 1e fa          	endbr64 
ffff800000803d24:	55                   	push   rbp
ffff800000803d25:	48 89 e5             	mov    rbp,rsp
ffff800000803d28:	41 57                	push   r15
ffff800000803d2a:	53                   	push   rbx
ffff800000803d2b:	48 83 ec 30          	sub    rsp,0x30
ffff800000803d2f:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000803d2f <scan_dev+0xf>
ffff800000803d36:	49 bb 09 b6 01 00 00 	movabs r11,0x1b609
ffff800000803d3d:	00 00 00 
ffff800000803d40:	4c 01 db             	add    rbx,r11
ffff800000803d43:	89 7d cc             	mov    DWORD PTR [rbp-0x34],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:363
//    device *blkdev=get_dev(dev);
//    buffer_head* bh=bread(dev,0);
//    if(!bh)return -1;
    char* buf= kmalloc();
ffff800000803d46:	49 89 df             	mov    r15,rbx
ffff800000803d49:	b8 00 00 00 00       	mov    eax,0x0
ffff800000803d4e:	48 ba 13 2c fe ff ff 	movabs rdx,0xfffffffffffe2c13
ffff800000803d55:	ff ff ff 
ffff800000803d58:	48 01 da             	add    rdx,rbx
ffff800000803d5b:	ff d2                	call   rdx
ffff800000803d5d:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:364
    int r=request(DISK_MAJOR_MAJOR,DISK_CMD_READ,0,1,buf);
ffff800000803d61:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000803d65:	49 89 c0             	mov    r8,rax
ffff800000803d68:	b9 01 00 00 00       	mov    ecx,0x1
ffff800000803d6d:	ba 00 00 00 00       	mov    edx,0x0
ffff800000803d72:	be 20 00 00 00       	mov    esi,0x20
ffff800000803d77:	bf 00 00 00 00       	mov    edi,0x0
ffff800000803d7c:	49 89 df             	mov    r15,rbx
ffff800000803d7f:	48 b8 56 f1 fe ff ff 	movabs rax,0xfffffffffffef156
ffff800000803d86:	ff ff ff 
ffff800000803d89:	48 01 d8             	add    rax,rbx
ffff800000803d8c:	ff d0                	call   rax
ffff800000803d8e:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:365
    chk_result(r);
ffff800000803d91:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000803d94:	89 c7                	mov    edi,eax
ffff800000803d96:	49 89 df             	mov    r15,rbx
ffff800000803d99:	48 b8 ab fb fe ff ff 	movabs rax,0xfffffffffffefbab
ffff800000803da0:	ff ff ff 
ffff800000803da3:	48 01 d8             	add    rax,rbx
ffff800000803da6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:367

    dpt_t* dpte=buf+0x1be;
ffff800000803da8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000803dac:	48 05 be 01 00 00    	add    rax,0x1be
ffff800000803db2:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:368
    for(int i=0;i<4;i++)
ffff800000803db6:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff800000803dbd:	eb 13                	jmp    ffff800000803dd2 <scan_dev+0xb2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:371 (discriminator 3)
    {
//        blkdev->par[i].type=dpte->type;
        int stlba=dpte->start_lba;
ffff800000803dbf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803dc3:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000803dc6:	89 45 d0             	mov    DWORD PTR [rbp-0x30],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:387 (discriminator 3)
//        {
//            printf("err:unrecognised partition fs.\n");
//        }

//        blkdev->par[i].end_sec=dpte->end_lba;
        dpte++;
ffff800000803dc9:	48 83 45 e8 10       	add    QWORD PTR [rbp-0x18],0x10
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:368 (discriminator 3)
    for(int i=0;i<4;i++)
ffff800000803dce:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:368 (discriminator 1)
ffff800000803dd2:	83 7d e4 03          	cmp    DWORD PTR [rbp-0x1c],0x3
ffff800000803dd6:	7e e7                	jle    ffff800000803dbf <scan_dev+0x9f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:390
    }
//    brelse(bh);
    return 0;
ffff800000803dd8:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:391
}
ffff800000803ddd:	48 83 c4 30          	add    rsp,0x30
ffff800000803de1:	5b                   	pop    rbx
ffff800000803de2:	41 5f                	pop    r15
ffff800000803de4:	5d                   	pop    rbp
ffff800000803de5:	c3                   	ret    

ffff800000803de6 <sync_buf>:
sync_buf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:394

int sync_buf(buffer_head* bh)
{
ffff800000803de6:	f3 0f 1e fa          	endbr64 
ffff800000803dea:	55                   	push   rbp
ffff800000803deb:	48 89 e5             	mov    rbp,rsp
ffff800000803dee:	41 57                	push   r15
ffff800000803df0:	48 83 ec 28          	sub    rsp,0x28
ffff800000803df4:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000803df4 <sync_buf+0xe>
ffff800000803dfb:	49 bb 44 b5 01 00 00 	movabs r11,0x1b544
ffff800000803e02:	00 00 00 
ffff800000803e05:	4c 01 d8             	add    rax,r11
ffff800000803e08:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:395
    int dev=bh->b_dev;
ffff800000803e0c:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000803e10:	0f b7 52 10          	movzx  edx,WORD PTR [rdx+0x10]
ffff800000803e14:	0f b7 d2             	movzx  edx,dx
ffff800000803e17:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:396
    int block=bh->b_blocknr;
ffff800000803e1a:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000803e1e:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff800000803e22:	89 55 e8             	mov    DWORD PTR [rbp-0x18],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:398
    //这里需要调用块设备写函数write_block
    return write_block(dev,block,bh->b_data,BLOCK_SIZE);
ffff800000803e25:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000803e29:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000803e2c:	8b 75 e8             	mov    esi,DWORD PTR [rbp-0x18]
ffff800000803e2f:	8b 7d ec             	mov    edi,DWORD PTR [rbp-0x14]
ffff800000803e32:	b9 00 02 00 00       	mov    ecx,0x200
ffff800000803e37:	49 89 c7             	mov    r15,rax
ffff800000803e3a:	49 b8 18 4b fe ff ff 	movabs r8,0xfffffffffffe4b18
ffff800000803e41:	ff ff ff 
ffff800000803e44:	49 01 c0             	add    r8,rax
ffff800000803e47:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:400

}
ffff800000803e4a:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000803e4e:	c9                   	leave  
ffff800000803e4f:	c3                   	ret    

ffff800000803e50 <write_block>:
write_block():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:403
//操作块设备函数
int write_block(int dev,int block,char *buf,int len)
{
ffff800000803e50:	f3 0f 1e fa          	endbr64 
ffff800000803e54:	55                   	push   rbp
ffff800000803e55:	48 89 e5             	mov    rbp,rsp
ffff800000803e58:	41 57                	push   r15
ffff800000803e5a:	53                   	push   rbx
ffff800000803e5b:	48 83 ec 30          	sub    rsp,0x30
ffff800000803e5f:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000803e5f <write_block+0xf>
ffff800000803e66:	49 bb d9 b4 01 00 00 	movabs r11,0x1b4d9
ffff800000803e6d:	00 00 00 
ffff800000803e70:	4c 01 db             	add    rbx,r11
ffff800000803e73:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff800000803e76:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff800000803e79:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
ffff800000803e7d:	89 4d cc             	mov    DWORD PTR [rbp-0x34],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:405 (discriminator 1)
    do{
        buffer_head* bh=get_buf(dev,block);
ffff800000803e80:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
ffff800000803e83:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000803e86:	89 d6                	mov    esi,edx
ffff800000803e88:	89 c7                	mov    edi,eax
ffff800000803e8a:	49 89 df             	mov    r15,rbx
ffff800000803e8d:	48 b8 d8 46 fe ff ff 	movabs rax,0xfffffffffffe46d8
ffff800000803e94:	ff ff ff 
ffff800000803e97:	48 01 d8             	add    rax,rbx
ffff800000803e9a:	ff d0                	call   rax
ffff800000803e9c:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:406 (discriminator 1)
        int size=len>BLOCK_SIZE?BLOCK_SIZE:len;//一次最多读一块，如果len大于一块，就只能读一块
ffff800000803ea0:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000803ea3:	ba 00 02 00 00       	mov    edx,0x200
ffff800000803ea8:	39 d0                	cmp    eax,edx
ffff800000803eaa:	0f 4f c2             	cmovg  eax,edx
ffff800000803ead:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:407 (discriminator 1)
        memcpy(bh->b_data,buf,size);
ffff800000803eb0:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffff800000803eb3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803eb7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803eba:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffff800000803ebe:	48 89 ce             	mov    rsi,rcx
ffff800000803ec1:	48 89 c7             	mov    rdi,rax
ffff800000803ec4:	49 89 df             	mov    r15,rbx
ffff800000803ec7:	48 b8 27 3e ff ff ff 	movabs rax,0xffffffffffff3e27
ffff800000803ece:	ff ff ff 
ffff800000803ed1:	48 01 d8             	add    rax,rbx
ffff800000803ed4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:408 (discriminator 1)
        len-=BLOCK_SIZE;
ffff800000803ed6:	81 6d cc 00 02 00 00 	sub    DWORD PTR [rbp-0x34],0x200
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:409 (discriminator 1)
        bh->b_dirt=1;//修改置位
ffff800000803edd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803ee1:	c6 40 13 01          	mov    BYTE PTR [rax+0x13],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:410 (discriminator 1)
        brelse(bh);
ffff800000803ee5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803ee9:	48 89 c7             	mov    rdi,rax
ffff800000803eec:	49 89 df             	mov    r15,rbx
ffff800000803eef:	48 b8 56 42 fe ff ff 	movabs rax,0xfffffffffffe4256
ffff800000803ef6:	ff ff ff 
ffff800000803ef9:	48 01 d8             	add    rax,rbx
ffff800000803efc:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:411 (discriminator 1)
    }while(len>0);
ffff800000803efe:	83 7d cc 00          	cmp    DWORD PTR [rbp-0x34],0x0
ffff800000803f02:	0f 8f 78 ff ff ff    	jg     ffff800000803e80 <write_block+0x30>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:412
    return 0;
ffff800000803f08:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:413
}
ffff800000803f0d:	48 83 c4 30          	add    rsp,0x30
ffff800000803f11:	5b                   	pop    rbx
ffff800000803f12:	41 5f                	pop    r15
ffff800000803f14:	5d                   	pop    rbp
ffff800000803f15:	c3                   	ret    

ffff800000803f16 <read_block>:
read_block():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:415
int read_block(int dev,int block,char* buf,int len)
{
ffff800000803f16:	f3 0f 1e fa          	endbr64 
ffff800000803f1a:	55                   	push   rbp
ffff800000803f1b:	48 89 e5             	mov    rbp,rsp
ffff800000803f1e:	41 57                	push   r15
ffff800000803f20:	53                   	push   rbx
ffff800000803f21:	48 83 ec 30          	sub    rsp,0x30
ffff800000803f25:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000803f25 <read_block+0xf>
ffff800000803f2c:	49 bb 13 b4 01 00 00 	movabs r11,0x1b413
ffff800000803f33:	00 00 00 
ffff800000803f36:	4c 01 db             	add    rbx,r11
ffff800000803f39:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff800000803f3c:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff800000803f3f:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
ffff800000803f43:	89 4d cc             	mov    DWORD PTR [rbp-0x34],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:417 (discriminator 1)
    do{
        buffer_head* bh=bread(dev,block);
ffff800000803f46:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
ffff800000803f49:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000803f4c:	89 d6                	mov    esi,edx
ffff800000803f4e:	89 c7                	mov    edi,eax
ffff800000803f50:	49 89 df             	mov    r15,rbx
ffff800000803f53:	48 b8 f1 42 fe ff ff 	movabs rax,0xfffffffffffe42f1
ffff800000803f5a:	ff ff ff 
ffff800000803f5d:	48 01 d8             	add    rax,rbx
ffff800000803f60:	ff d0                	call   rax
ffff800000803f62:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:418 (discriminator 1)
        int size=len>BLOCK_SIZE?BLOCK_SIZE:len;//一次最多读一块，如果len大于一块，就只能读一块
ffff800000803f66:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000803f69:	ba 00 02 00 00       	mov    edx,0x200
ffff800000803f6e:	39 d0                	cmp    eax,edx
ffff800000803f70:	0f 4f c2             	cmovg  eax,edx
ffff800000803f73:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:419 (discriminator 1)
        memcpy(buf,bh->b_data,size);
ffff800000803f76:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffff800000803f79:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803f7d:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000803f80:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000803f84:	48 89 ce             	mov    rsi,rcx
ffff800000803f87:	48 89 c7             	mov    rdi,rax
ffff800000803f8a:	49 89 df             	mov    r15,rbx
ffff800000803f8d:	48 b8 27 3e ff ff ff 	movabs rax,0xffffffffffff3e27
ffff800000803f94:	ff ff ff 
ffff800000803f97:	48 01 d8             	add    rax,rbx
ffff800000803f9a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:420 (discriminator 1)
        len-=BLOCK_SIZE;
ffff800000803f9c:	81 6d cc 00 02 00 00 	sub    DWORD PTR [rbp-0x34],0x200
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:421 (discriminator 1)
        brelse(bh);
ffff800000803fa3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803fa7:	48 89 c7             	mov    rdi,rax
ffff800000803faa:	49 89 df             	mov    r15,rbx
ffff800000803fad:	48 b8 56 42 fe ff ff 	movabs rax,0xfffffffffffe4256
ffff800000803fb4:	ff ff ff 
ffff800000803fb7:	48 01 d8             	add    rax,rbx
ffff800000803fba:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:422 (discriminator 1)
    }while(len>0);
ffff800000803fbc:	83 7d cc 00          	cmp    DWORD PTR [rbp-0x34],0x0
ffff800000803fc0:	7f 84                	jg     ffff800000803f46 <read_block+0x30>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:423
    return 0;
ffff800000803fc2:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:424
}
ffff800000803fc7:	48 83 c4 30          	add    rsp,0x30
ffff800000803fcb:	5b                   	pop    rbx
ffff800000803fcc:	41 5f                	pop    r15
ffff800000803fce:	5d                   	pop    rbp
ffff800000803fcf:	c3                   	ret    

ffff800000803fd0 <init_vfs>:
init_vfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:427

int init_vfs()
{
ffff800000803fd0:	f3 0f 1e fa          	endbr64 
ffff800000803fd4:	55                   	push   rbp
ffff800000803fd5:	48 89 e5             	mov    rbp,rsp
ffff800000803fd8:	41 57                	push   r15
ffff800000803fda:	53                   	push   rbx
ffff800000803fdb:	48 83 ec 10          	sub    rsp,0x10
ffff800000803fdf:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000803fdf <init_vfs+0xf>
ffff800000803fe6:	49 bb 59 b3 01 00 00 	movabs r11,0x1b359
ffff800000803fed:	00 00 00 
ffff800000803ff0:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:431
    //扫描块设备
    extern device *dev_tree[];
    extern device devs[];
    blk_dev* p=dev_tree[DEVTREE_BLKDEVI];
ffff800000803ff3:	48 b8 60 fd ff ff ff 	movabs rax,0xfffffffffffffd60
ffff800000803ffa:	ff ff ff 
ffff800000803ffd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804001:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804004:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:432
    for(;p;p=p->next)
ffff800000804008:	eb 5b                	jmp    ffff800000804065 <init_vfs+0x95>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:434
    {
        if(scan_dev(p-devs)!=0)return -1;
ffff80000080400a:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000804011:	ff ff ff 
ffff800000804014:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804018:	48 89 c2             	mov    rdx,rax
ffff80000080401b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080401f:	48 29 d0             	sub    rax,rdx
ffff800000804022:	48 c1 f8 02          	sar    rax,0x2
ffff800000804026:	48 89 c2             	mov    rdx,rax
ffff800000804029:	48 b8 19 9c 8f c1 f9 	movabs rax,0x8f9c18f9c18f9c19
ffff800000804030:	18 9c 8f 
ffff800000804033:	48 0f af c2          	imul   rax,rdx
ffff800000804037:	89 c7                	mov    edi,eax
ffff800000804039:	49 89 df             	mov    r15,rbx
ffff80000080403c:	48 b8 e8 49 fe ff ff 	movabs rax,0xfffffffffffe49e8
ffff800000804043:	ff ff ff 
ffff800000804046:	48 01 d8             	add    rax,rbx
ffff800000804049:	ff d0                	call   rax
ffff80000080404b:	85 c0                	test   eax,eax
ffff80000080404d:	74 07                	je     ffff800000804056 <init_vfs+0x86>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:434 (discriminator 1)
ffff80000080404f:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000804054:	eb 1b                	jmp    ffff800000804071 <init_vfs+0xa1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:432
    for(;p;p=p->next)
ffff800000804056:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080405a:	48 8b 80 90 00 00 00 	mov    rax,QWORD PTR [rax+0x90]
ffff800000804061:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:432 (discriminator 1)
ffff800000804065:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080406a:	75 9e                	jne    ffff80000080400a <init_vfs+0x3a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:437
    }

    return 0;
ffff80000080406c:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:438
}
ffff800000804071:	48 83 c4 10          	add    rsp,0x10
ffff800000804075:	5b                   	pop    rbx
ffff800000804076:	41 5f                	pop    r15
ffff800000804078:	5d                   	pop    rbp
ffff800000804079:	c3                   	ret    

ffff80000080407a <make_dentry>:
make_dentry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:34
};
struct dir_entry_operations dev_dir_dops={

};
static int devd_fd=-1;
void make_dentry(struct dir_entry* d,char* name,int namelen,struct dir_entry* parent,struct dir_entry_operations* dops){
ffff80000080407a:	f3 0f 1e fa          	endbr64 
ffff80000080407e:	55                   	push   rbp
ffff80000080407f:	48 89 e5             	mov    rbp,rsp
ffff800000804082:	41 57                	push   r15
ffff800000804084:	48 81 ec 88 00 00 00 	sub    rsp,0x88
ffff80000080408b:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080408b <make_dentry+0x11>
ffff800000804092:	49 bb ad b2 01 00 00 	movabs r11,0x1b2ad
ffff800000804099:	00 00 00 
ffff80000080409c:	4c 01 d8             	add    rax,r11
ffff80000080409f:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
ffff8000008040a3:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
ffff8000008040a7:	89 55 8c             	mov    DWORD PTR [rbp-0x74],edx
ffff8000008040aa:	48 89 4d 80          	mov    QWORD PTR [rbp-0x80],rcx
ffff8000008040ae:	4c 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:35
    strcpy(d->name,name);
ffff8000008040b5:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
ffff8000008040b9:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008040bc:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
ffff8000008040c0:	48 89 ce             	mov    rsi,rcx
ffff8000008040c3:	48 89 d7             	mov    rdi,rdx
ffff8000008040c6:	49 89 c7             	mov    r15,rax
ffff8000008040c9:	48 ba 2b 3f ff ff ff 	movabs rdx,0xffffffffffff3f2b
ffff8000008040d0:	ff ff ff 
ffff8000008040d3:	48 01 c2             	add    rdx,rax
ffff8000008040d6:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:36
    d->name_length=namelen;
ffff8000008040d8:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008040dc:	8b 55 8c             	mov    edx,DWORD PTR [rbp-0x74]
ffff8000008040df:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:38
    //添加dentry的操作方法，这样能够查找设备
    d->dir_ops=dops;
ffff8000008040e2:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008040e6:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
ffff8000008040ed:	48 89 50 50          	mov    QWORD PTR [rax+0x50],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:39
    list_init(&d->subdirs_list);
ffff8000008040f1:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008040f5:	48 83 c0 28          	add    rax,0x28
ffff8000008040f9:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    struct List * next;
};

__attribute__((always_inline)) inline void list_init(struct List * list)
{
    list->prev = NULL;
ffff8000008040fd:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000804101:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff800000804108:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080410c:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff800000804113:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff800000804114:	90                   	nop
make_dentry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:40
    list_init(&d->child_node);
ffff800000804115:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000804119:	48 83 c0 10          	add    rax,0x10
ffff80000080411d:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff800000804121:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000804125:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000080412c:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000804130:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff800000804137:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff800000804138:	90                   	nop
make_dentry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:41
    d->child_node.data=d;
ffff800000804139:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080413d:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
ffff800000804141:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:42
    d->parent=parent;
ffff800000804145:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000804149:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
ffff80000080414d:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:43
    list_add(&parent->subdirs_list,&d->child_node);
ffff800000804151:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000804155:	48 83 c0 10          	add    rax,0x10
ffff800000804159:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
ffff80000080415d:	48 83 c2 28          	add    rdx,0x28
ffff800000804161:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff800000804165:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:33
        new->next->prev = new;
    entry->next = new;
}
__attribute__((always_inline)) inline void list_add(struct List * entry,struct List * new)	////add to the tail of the link
{
    if(entry->next==NULL)
ffff800000804169:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080416d:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000804171:	48 85 c0             	test   rax,rax
ffff800000804174:	75 58                	jne    ffff8000008041ce <make_dentry+0x154>
ffff800000804176:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080417a:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffff80000080417e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804182:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff800000804186:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080418a:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080418e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000804192:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff800000804196:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080419a:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080419e:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff8000008041a1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008041a5:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008041a9:	48 85 c0             	test   rax,rax
ffff8000008041ac:	74 0f                	je     ffff8000008041bd <make_dentry+0x143>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff8000008041ae:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008041b2:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008041b6:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff8000008041ba:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:29
    entry->next = new;
ffff8000008041bd:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008041c1:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff8000008041c5:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff8000008041c9:	e9 9c 00 00 00       	jmp    ffff80000080426a <make_dentry+0x1f0>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:36
        list_add_to_behind(entry,new);
    else{
        struct List* p=entry;
ffff8000008041ce:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008041d2:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff8000008041d6:	eb 21                	jmp    ffff8000008041f9 <make_dentry+0x17f>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:38
            if(p->data==new->data)
ffff8000008041d8:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008041dc:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff8000008041e0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008041e4:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff8000008041e8:	48 39 c2             	cmp    rdx,rax
ffff8000008041eb:	74 7c                	je     ffff800000804269 <make_dentry+0x1ef>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff8000008041ed:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008041f1:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008041f5:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
ffff8000008041f9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008041fd:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000804201:	48 85 c0             	test   rax,rax
ffff800000804204:	74 0e                	je     ffff800000804214 <make_dentry+0x19a>
ffff800000804206:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080420a:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080420e:	48 39 45 c8          	cmp    QWORD PTR [rbp-0x38],rax
ffff800000804212:	75 c4                	jne    ffff8000008041d8 <make_dentry+0x15e>
ffff800000804214:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000804218:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
ffff80000080421c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804220:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff800000804224:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000804228:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080422c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000804230:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff800000804234:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000804238:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff80000080423c:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff80000080423f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000804243:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000804247:	48 85 c0             	test   rax,rax
ffff80000080424a:	74 0f                	je     ffff80000080425b <make_dentry+0x1e1>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff80000080424c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000804250:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000804254:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff800000804258:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:29
    entry->next = new;
ffff80000080425b:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080425f:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff800000804263:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff800000804267:	eb 01                	jmp    ffff80000080426a <make_dentry+0x1f0>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:39
                return;
ffff800000804269:	90                   	nop
make_dentry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:44
}
ffff80000080426a:	90                   	nop
ffff80000080426b:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080426f:	c9                   	leave  
ffff800000804270:	c3                   	ret    

ffff800000804271 <make_inode>:
make_inode():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:45
void make_inode(struct index_node* i,struct index_node_operations* iops,struct file_operations* fops,unsigned long attr,super_block* sb){
ffff800000804271:	f3 0f 1e fa          	endbr64 
ffff800000804275:	55                   	push   rbp
ffff800000804276:	48 89 e5             	mov    rbp,rsp
ffff800000804279:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000804279 <make_inode+0x8>
ffff800000804280:	49 bb bf b0 01 00 00 	movabs r11,0x1b0bf
ffff800000804287:	00 00 00 
ffff80000080428a:	4c 01 d8             	add    rax,r11
ffff80000080428d:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000804291:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000804295:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff800000804299:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
ffff80000080429d:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:46
    i->f_ops=fops;
ffff8000008042a1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008042a5:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff8000008042a9:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:47
    i->attribute=attr;
ffff8000008042ad:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008042b1:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008042b5:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:48
    i->sb=sb;
ffff8000008042b9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008042bd:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff8000008042c1:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:49
    i->file_size=0;
ffff8000008042c5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008042c9:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:50
    i->inode_ops=iops;
ffff8000008042d0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008042d4:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff8000008042d8:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:51
}
ffff8000008042dc:	90                   	nop
ffff8000008042dd:	5d                   	pop    rbp
ffff8000008042de:	c3                   	ret    

ffff8000008042df <make_devf>:
make_devf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:52
void make_devf(struct dir_entry* d,struct index_node* i,char* name,struct dir_entry* ddev,struct file_operations* fops){
ffff8000008042df:	f3 0f 1e fa          	endbr64 
ffff8000008042e3:	55                   	push   rbp
ffff8000008042e4:	48 89 e5             	mov    rbp,rsp
ffff8000008042e7:	41 57                	push   r15
ffff8000008042e9:	41 54                	push   r12
ffff8000008042eb:	53                   	push   rbx
ffff8000008042ec:	48 83 ec 78          	sub    rsp,0x78
ffff8000008042f0:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008042f0 <make_devf+0x11>
ffff8000008042f7:	49 bb 48 b0 01 00 00 	movabs r11,0x1b048
ffff8000008042fe:	00 00 00 
ffff800000804301:	4c 01 db             	add    rbx,r11
ffff800000804304:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
ffff800000804308:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
ffff80000080430c:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
ffff800000804310:	48 89 4d 80          	mov    QWORD PTR [rbp-0x80],rcx
ffff800000804314:	4c 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:53
    make_dentry(d,name, strlen(name),root_sb->root,&dev_dir_dops);
ffff80000080431b:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff800000804322:	ff ff ff 
ffff800000804325:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804329:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080432c:	4c 8b 20             	mov    r12,QWORD PTR [rax]
ffff80000080432f:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000804333:	48 89 c7             	mov    rdi,rax
ffff800000804336:	49 89 df             	mov    r15,rbx
ffff800000804339:	48 b8 f8 41 ff ff ff 	movabs rax,0xffffffffffff41f8
ffff800000804340:	ff ff ff 
ffff800000804343:	48 01 d8             	add    rax,rbx
ffff800000804346:	ff d0                	call   rax
ffff800000804348:	89 c2                	mov    edx,eax
ffff80000080434a:	48 8b 75 88          	mov    rsi,QWORD PTR [rbp-0x78]
ffff80000080434e:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000804352:	48 b9 c0 ff ff ff ff 	movabs rcx,0xffffffffffffffc0
ffff800000804359:	ff ff ff 
ffff80000080435c:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff800000804360:	49 89 c8             	mov    r8,rcx
ffff800000804363:	4c 89 e1             	mov    rcx,r12
ffff800000804366:	48 89 c7             	mov    rdi,rax
ffff800000804369:	49 89 df             	mov    r15,rbx
ffff80000080436c:	48 b8 42 4d fe ff ff 	movabs rax,0xfffffffffffe4d42
ffff800000804373:	ff ff ff 
ffff800000804376:	48 01 d8             	add    rax,rbx
ffff800000804379:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:54
    d->dir_inode=i;
ffff80000080437b:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080437f:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
ffff800000804383:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:55
    make_inode(i,ddev->dir_inode->inode_ops,fops,FS_ATTR_DEVICE,root_sb);
ffff800000804387:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff80000080438e:	ff ff ff 
ffff800000804391:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804395:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000804398:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080439c:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008043a0:	48 8b 70 28          	mov    rsi,QWORD PTR [rax+0x28]
ffff8000008043a4:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
ffff8000008043ab:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008043af:	49 89 c8             	mov    r8,rcx
ffff8000008043b2:	b9 04 00 00 00       	mov    ecx,0x4
ffff8000008043b7:	48 89 c7             	mov    rdi,rax
ffff8000008043ba:	49 89 df             	mov    r15,rbx
ffff8000008043bd:	48 b8 39 4f fe ff ff 	movabs rax,0xfffffffffffe4f39
ffff8000008043c4:	ff ff ff 
ffff8000008043c7:	48 01 d8             	add    rax,rbx
ffff8000008043ca:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:56
    list_add(&ddev->subdirs_list,&d->child_node);//添加到/dev下
ffff8000008043cc:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008043d0:	48 83 c0 10          	add    rax,0x10
ffff8000008043d4:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
ffff8000008043d8:	48 83 c2 28          	add    rdx,0x28
ffff8000008043dc:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffff8000008043e0:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:33
    if(entry->next==NULL)
ffff8000008043e4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008043e8:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008043ec:	48 85 c0             	test   rax,rax
ffff8000008043ef:	75 58                	jne    ffff800000804449 <make_devf+0x16a>
ffff8000008043f1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008043f5:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
ffff8000008043f9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008043fd:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff800000804401:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000804405:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff800000804409:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080440d:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff800000804411:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000804415:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000804419:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff80000080441c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000804420:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000804424:	48 85 c0             	test   rax,rax
ffff800000804427:	74 0f                	je     ffff800000804438 <make_devf+0x159>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff800000804429:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080442d:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000804431:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000804435:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:29
    entry->next = new;
ffff800000804438:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080443c:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000804440:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff800000804444:	e9 9c 00 00 00       	jmp    ffff8000008044e5 <make_devf+0x206>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:36
        struct List* p=entry;
ffff800000804449:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080444d:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff800000804451:	eb 21                	jmp    ffff800000804474 <make_devf+0x195>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:38
            if(p->data==new->data)
ffff800000804453:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000804457:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff80000080445b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080445f:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000804463:	48 39 c2             	cmp    rdx,rax
ffff800000804466:	74 7c                	je     ffff8000008044e4 <make_devf+0x205>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff800000804468:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080446c:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000804470:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
ffff800000804474:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000804478:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080447c:	48 85 c0             	test   rax,rax
ffff80000080447f:	74 0e                	je     ffff80000080448f <make_devf+0x1b0>
ffff800000804481:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000804485:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000804489:	48 39 45 b8          	cmp    QWORD PTR [rbp-0x48],rax
ffff80000080448d:	75 c4                	jne    ffff800000804453 <make_devf+0x174>
ffff80000080448f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000804493:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
ffff800000804497:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080449b:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff80000080449f:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff8000008044a3:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff8000008044a7:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008044ab:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff8000008044af:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008044b3:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffff8000008044b7:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff8000008044ba:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008044be:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008044c2:	48 85 c0             	test   rax,rax
ffff8000008044c5:	74 0f                	je     ffff8000008044d6 <make_devf+0x1f7>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff8000008044c7:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008044cb:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008044cf:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff8000008044d3:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:29
    entry->next = new;
ffff8000008044d6:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff8000008044da:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff8000008044de:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff8000008044e2:	eb 01                	jmp    ffff8000008044e5 <make_devf+0x206>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:39
                return;
ffff8000008044e4:	90                   	nop
make_devf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:57
}
ffff8000008044e5:	90                   	nop
ffff8000008044e6:	48 83 c4 78          	add    rsp,0x78
ffff8000008044ea:	5b                   	pop    rbx
ffff8000008044eb:	41 5c                	pop    r12
ffff8000008044ed:	41 5f                	pop    r15
ffff8000008044ef:	5d                   	pop    rbp
ffff8000008044f0:	c3                   	ret    

ffff8000008044f1 <init_devman>:
init_devman():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:65
 * 这个/dev文件夹的dentry和inode等数据由devman管理，根文件系统切换时，这个文件夹会跟着挂载到新文件系统的根目录下。
 * */
struct dir_entry* ddev=NULL,*dmnt,*dconsole,*dhd0,*dtty;
struct file ftty;
int init_devman()
{
ffff8000008044f1:	f3 0f 1e fa          	endbr64 
ffff8000008044f5:	55                   	push   rbp
ffff8000008044f6:	48 89 e5             	mov    rbp,rsp
ffff8000008044f9:	41 57                	push   r15
ffff8000008044fb:	53                   	push   rbx
ffff8000008044fc:	48 83 ec 30          	sub    rsp,0x30
ffff800000804500:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000804500 <init_devman+0xf>
ffff800000804507:	49 bb 38 ae 01 00 00 	movabs r11,0x1ae38
ffff80000080450e:	00 00 00 
ffff800000804511:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:67
    //创建dev文件夹
    ddev=(struct dir_entry*) kmalloc();
ffff800000804514:	49 89 df             	mov    r15,rbx
ffff800000804517:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080451c:	48 ba 13 2c fe ff ff 	movabs rdx,0xfffffffffffe2c13
ffff800000804523:	ff ff ff 
ffff800000804526:	48 01 da             	add    rdx,rbx
ffff800000804529:	ff d2                	call   rdx
ffff80000080452b:	48 89 c2             	mov    rdx,rax
ffff80000080452e:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff800000804535:	ff ff ff 
ffff800000804538:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080453c:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:68
    struct index_node* idev=ddev+1;
ffff80000080453f:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff800000804546:	ff ff ff 
ffff800000804549:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080454d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804550:	48 83 c0 58          	add    rax,0x58
ffff800000804554:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:69
    ddev->name=idev+1;
ffff800000804558:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff80000080455f:	ff ff ff 
ffff800000804562:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804566:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804569:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080456d:	48 83 c2 38          	add    rdx,0x38
ffff800000804571:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:70
    make_dentry(ddev,"dev",3,root_sb->root,root_sb->root->dir_ops);
ffff800000804574:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff80000080457b:	ff ff ff 
ffff80000080457e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804582:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804585:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804588:	48 8b 48 50          	mov    rcx,QWORD PTR [rax+0x50]
ffff80000080458c:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff800000804593:	ff ff ff 
ffff800000804596:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080459a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080459d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008045a0:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff8000008045a7:	ff ff ff 
ffff8000008045aa:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008045ae:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008045b1:	49 89 c8             	mov    r8,rcx
ffff8000008045b4:	48 89 d1             	mov    rcx,rdx
ffff8000008045b7:	ba 03 00 00 00       	mov    edx,0x3
ffff8000008045bc:	48 be c0 c5 ff ff ff 	movabs rsi,0xffffffffffffc5c0
ffff8000008045c3:	ff ff ff 
ffff8000008045c6:	48 8d 34 33          	lea    rsi,[rbx+rsi*1]
ffff8000008045ca:	48 89 c7             	mov    rdi,rax
ffff8000008045cd:	49 89 df             	mov    r15,rbx
ffff8000008045d0:	48 b8 42 4d fe ff ff 	movabs rax,0xfffffffffffe4d42
ffff8000008045d7:	ff ff ff 
ffff8000008045da:	48 01 d8             	add    rax,rbx
ffff8000008045dd:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:71
    ddev->dir_inode=idev;
ffff8000008045df:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff8000008045e6:	ff ff ff 
ffff8000008045e9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008045ed:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008045f0:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff8000008045f4:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:72
    make_inode(idev,root_sb->root->dir_inode->inode_ops,root_sb->root->dir_inode->f_ops,FS_ATTR_DIR,root_sb);
ffff8000008045f8:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff8000008045ff:	ff ff ff 
ffff800000804602:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804606:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000804609:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff800000804610:	ff ff ff 
ffff800000804613:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804617:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080461a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080461d:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000804621:	48 8b 50 20          	mov    rdx,QWORD PTR [rax+0x20]
ffff800000804625:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff80000080462c:	ff ff ff 
ffff80000080462f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804633:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804636:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804639:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080463d:	48 8b 70 28          	mov    rsi,QWORD PTR [rax+0x28]
ffff800000804641:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804645:	49 89 c8             	mov    r8,rcx
ffff800000804648:	b9 02 00 00 00       	mov    ecx,0x2
ffff80000080464d:	48 89 c7             	mov    rdi,rax
ffff800000804650:	49 89 df             	mov    r15,rbx
ffff800000804653:	48 b8 39 4f fe ff ff 	movabs rax,0xfffffffffffe4f39
ffff80000080465a:	ff ff ff 
ffff80000080465d:	48 01 d8             	add    rax,rbx
ffff800000804660:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:73
    idev->private_index_info=ddev;
ffff800000804662:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff800000804669:	ff ff ff 
ffff80000080466c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804670:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804673:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804677:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:76

    //创建mnt文件夹
    dmnt=(struct dir_entry*) kmalloc();
ffff80000080467b:	49 89 df             	mov    r15,rbx
ffff80000080467e:	b8 00 00 00 00       	mov    eax,0x0
ffff800000804683:	48 ba 13 2c fe ff ff 	movabs rdx,0xfffffffffffe2c13
ffff80000080468a:	ff ff ff 
ffff80000080468d:	48 01 da             	add    rdx,rbx
ffff800000804690:	ff d2                	call   rdx
ffff800000804692:	48 89 c2             	mov    rdx,rax
ffff800000804695:	48 b8 d8 fe ff ff ff 	movabs rax,0xfffffffffffffed8
ffff80000080469c:	ff ff ff 
ffff80000080469f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008046a3:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:77
    struct index_node* imnt=dmnt+1;
ffff8000008046a6:	48 b8 d8 fe ff ff ff 	movabs rax,0xfffffffffffffed8
ffff8000008046ad:	ff ff ff 
ffff8000008046b0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008046b4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008046b7:	48 83 c0 58          	add    rax,0x58
ffff8000008046bb:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:78
    dmnt->name=imnt+1;
ffff8000008046bf:	48 b8 d8 fe ff ff ff 	movabs rax,0xfffffffffffffed8
ffff8000008046c6:	ff ff ff 
ffff8000008046c9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008046cd:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008046d0:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008046d4:	48 83 c2 38          	add    rdx,0x38
ffff8000008046d8:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:79
    make_dentry(dmnt,"mnt",3,root_sb->root,root_sb->root->dir_ops);
ffff8000008046db:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff8000008046e2:	ff ff ff 
ffff8000008046e5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008046e9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008046ec:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008046ef:	48 8b 48 50          	mov    rcx,QWORD PTR [rax+0x50]
ffff8000008046f3:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff8000008046fa:	ff ff ff 
ffff8000008046fd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804701:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804704:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804707:	48 b8 d8 fe ff ff ff 	movabs rax,0xfffffffffffffed8
ffff80000080470e:	ff ff ff 
ffff800000804711:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804715:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804718:	49 89 c8             	mov    r8,rcx
ffff80000080471b:	48 89 d1             	mov    rcx,rdx
ffff80000080471e:	ba 03 00 00 00       	mov    edx,0x3
ffff800000804723:	48 be c4 c5 ff ff ff 	movabs rsi,0xffffffffffffc5c4
ffff80000080472a:	ff ff ff 
ffff80000080472d:	48 8d 34 33          	lea    rsi,[rbx+rsi*1]
ffff800000804731:	48 89 c7             	mov    rdi,rax
ffff800000804734:	49 89 df             	mov    r15,rbx
ffff800000804737:	48 b8 42 4d fe ff ff 	movabs rax,0xfffffffffffe4d42
ffff80000080473e:	ff ff ff 
ffff800000804741:	48 01 d8             	add    rax,rbx
ffff800000804744:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:80
    dmnt->dir_inode=imnt;
ffff800000804746:	48 b8 d8 fe ff ff ff 	movabs rax,0xfffffffffffffed8
ffff80000080474d:	ff ff ff 
ffff800000804750:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804754:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804757:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080475b:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:81
    make_inode(imnt,root_sb->root->dir_inode->inode_ops,root_sb->root->dir_inode->f_ops,FS_ATTR_DIR,root_sb);
ffff80000080475f:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff800000804766:	ff ff ff 
ffff800000804769:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080476d:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000804770:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff800000804777:	ff ff ff 
ffff80000080477a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080477e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804781:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804784:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000804788:	48 8b 50 20          	mov    rdx,QWORD PTR [rax+0x20]
ffff80000080478c:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff800000804793:	ff ff ff 
ffff800000804796:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080479a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080479d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008047a0:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008047a4:	48 8b 70 28          	mov    rsi,QWORD PTR [rax+0x28]
ffff8000008047a8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008047ac:	49 89 c8             	mov    r8,rcx
ffff8000008047af:	b9 02 00 00 00       	mov    ecx,0x2
ffff8000008047b4:	48 89 c7             	mov    rdi,rax
ffff8000008047b7:	49 89 df             	mov    r15,rbx
ffff8000008047ba:	48 b8 39 4f fe ff ff 	movabs rax,0xfffffffffffe4f39
ffff8000008047c1:	ff ff ff 
ffff8000008047c4:	48 01 d8             	add    rax,rbx
ffff8000008047c7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:82
    imnt->private_index_info=dmnt;
ffff8000008047c9:	48 b8 d8 fe ff ff ff 	movabs rax,0xfffffffffffffed8
ffff8000008047d0:	ff ff ff 
ffff8000008047d3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008047d7:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008047da:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008047de:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:87


    //创建几个设备文件
    //console-framebuffer.c
    dconsole= (struct dir_entry *) kmalloc();
ffff8000008047e2:	49 89 df             	mov    r15,rbx
ffff8000008047e5:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008047ea:	48 ba 13 2c fe ff ff 	movabs rdx,0xfffffffffffe2c13
ffff8000008047f1:	ff ff ff 
ffff8000008047f4:	48 01 da             	add    rdx,rbx
ffff8000008047f7:	ff d2                	call   rdx
ffff8000008047f9:	48 89 c2             	mov    rdx,rax
ffff8000008047fc:	48 b8 f0 fe ff ff ff 	movabs rax,0xfffffffffffffef0
ffff800000804803:	ff ff ff 
ffff800000804806:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080480a:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:88
    struct index_node* iconsole=dconsole+1;
ffff80000080480d:	48 b8 f0 fe ff ff ff 	movabs rax,0xfffffffffffffef0
ffff800000804814:	ff ff ff 
ffff800000804817:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080481b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080481e:	48 83 c0 58          	add    rax,0x58
ffff800000804822:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:89
    dconsole->name=iconsole+1;
ffff800000804826:	48 b8 f0 fe ff ff ff 	movabs rax,0xfffffffffffffef0
ffff80000080482d:	ff ff ff 
ffff800000804830:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804834:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804837:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080483b:	48 83 c2 38          	add    rdx,0x38
ffff80000080483f:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:90
    make_devf(dconsole,iconsole,"console",ddev,&framebuffer_fops);
ffff800000804842:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff800000804849:	ff ff ff 
ffff80000080484c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804850:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804853:	48 b8 f0 fe ff ff ff 	movabs rax,0xfffffffffffffef0
ffff80000080485a:	ff ff ff 
ffff80000080485d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804861:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804864:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
ffff800000804868:	48 b9 50 fe ff ff ff 	movabs rcx,0xfffffffffffffe50
ffff80000080486f:	ff ff ff 
ffff800000804872:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff800000804876:	49 89 c8             	mov    r8,rcx
ffff800000804879:	48 89 d1             	mov    rcx,rdx
ffff80000080487c:	48 ba c8 c5 ff ff ff 	movabs rdx,0xffffffffffffc5c8
ffff800000804883:	ff ff ff 
ffff800000804886:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff80000080488a:	48 89 c7             	mov    rdi,rax
ffff80000080488d:	49 89 df             	mov    r15,rbx
ffff800000804890:	48 b8 a7 4f fe ff ff 	movabs rax,0xfffffffffffe4fa7
ffff800000804897:	ff ff ff 
ffff80000080489a:	48 01 d8             	add    rax,rbx
ffff80000080489d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:92
    //hd0-disk.c
    dhd0= (struct dir_entry *) kmalloc();
ffff80000080489f:	49 89 df             	mov    r15,rbx
ffff8000008048a2:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008048a7:	48 ba 13 2c fe ff ff 	movabs rdx,0xfffffffffffe2c13
ffff8000008048ae:	ff ff ff 
ffff8000008048b1:	48 01 da             	add    rdx,rbx
ffff8000008048b4:	ff d2                	call   rdx
ffff8000008048b6:	48 89 c2             	mov    rdx,rax
ffff8000008048b9:	48 b8 e0 fe ff ff ff 	movabs rax,0xfffffffffffffee0
ffff8000008048c0:	ff ff ff 
ffff8000008048c3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008048c7:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:93
    struct index_node* ihd0=dhd0+1;
ffff8000008048ca:	48 b8 e0 fe ff ff ff 	movabs rax,0xfffffffffffffee0
ffff8000008048d1:	ff ff ff 
ffff8000008048d4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008048d8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008048db:	48 83 c0 58          	add    rax,0x58
ffff8000008048df:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:94
    dhd0->name=ihd0+1;
ffff8000008048e3:	48 b8 e0 fe ff ff ff 	movabs rax,0xfffffffffffffee0
ffff8000008048ea:	ff ff ff 
ffff8000008048ed:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008048f1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008048f4:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff8000008048f8:	48 83 c2 38          	add    rdx,0x38
ffff8000008048fc:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:95
    make_devf(dhd0,ihd0,"hd0",ddev,&hd_fops);
ffff8000008048ff:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff800000804906:	ff ff ff 
ffff800000804909:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080490d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804910:	48 b8 e0 fe ff ff ff 	movabs rax,0xfffffffffffffee0
ffff800000804917:	ff ff ff 
ffff80000080491a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080491e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804921:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff800000804925:	48 b9 d8 fd ff ff ff 	movabs rcx,0xfffffffffffffdd8
ffff80000080492c:	ff ff ff 
ffff80000080492f:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff800000804933:	49 89 c8             	mov    r8,rcx
ffff800000804936:	48 89 d1             	mov    rcx,rdx
ffff800000804939:	48 ba d0 c5 ff ff ff 	movabs rdx,0xffffffffffffc5d0
ffff800000804940:	ff ff ff 
ffff800000804943:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000804947:	48 89 c7             	mov    rdi,rax
ffff80000080494a:	49 89 df             	mov    r15,rbx
ffff80000080494d:	48 b8 a7 4f fe ff ff 	movabs rax,0xfffffffffffe4fa7
ffff800000804954:	ff ff ff 
ffff800000804957:	48 01 d8             	add    rax,rbx
ffff80000080495a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:97
    //tty-tty.c
    dtty= (struct dir_entry *) kmalloc();
ffff80000080495c:	49 89 df             	mov    r15,rbx
ffff80000080495f:	b8 00 00 00 00       	mov    eax,0x0
ffff800000804964:	48 ba 13 2c fe ff ff 	movabs rdx,0xfffffffffffe2c13
ffff80000080496b:	ff ff ff 
ffff80000080496e:	48 01 da             	add    rdx,rbx
ffff800000804971:	ff d2                	call   rdx
ffff800000804973:	48 89 c2             	mov    rdx,rax
ffff800000804976:	48 b8 88 fd ff ff ff 	movabs rax,0xfffffffffffffd88
ffff80000080497d:	ff ff ff 
ffff800000804980:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804984:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:98
    struct index_node* itty=dtty+1;
ffff800000804987:	48 b8 88 fd ff ff ff 	movabs rax,0xfffffffffffffd88
ffff80000080498e:	ff ff ff 
ffff800000804991:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804995:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804998:	48 83 c0 58          	add    rax,0x58
ffff80000080499c:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:99
    dtty->name=itty+1;
ffff8000008049a0:	48 b8 88 fd ff ff ff 	movabs rax,0xfffffffffffffd88
ffff8000008049a7:	ff ff ff 
ffff8000008049aa:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008049ae:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008049b1:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff8000008049b5:	48 83 c2 38          	add    rdx,0x38
ffff8000008049b9:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:100
    make_devf(dtty,itty,"tty",ddev,&tty_fops);
ffff8000008049bc:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff8000008049c3:	ff ff ff 
ffff8000008049c6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008049ca:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008049cd:	48 b8 88 fd ff ff ff 	movabs rax,0xfffffffffffffd88
ffff8000008049d4:	ff ff ff 
ffff8000008049d7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008049db:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008049de:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
ffff8000008049e2:	48 b9 c8 fe ff ff ff 	movabs rcx,0xfffffffffffffec8
ffff8000008049e9:	ff ff ff 
ffff8000008049ec:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff8000008049f0:	49 89 c8             	mov    r8,rcx
ffff8000008049f3:	48 89 d1             	mov    rcx,rdx
ffff8000008049f6:	48 ba d4 c5 ff ff ff 	movabs rdx,0xffffffffffffc5d4
ffff8000008049fd:	ff ff ff 
ffff800000804a00:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000804a04:	48 89 c7             	mov    rdi,rax
ffff800000804a07:	49 89 df             	mov    r15,rbx
ffff800000804a0a:	48 b8 a7 4f fe ff ff 	movabs rax,0xfffffffffffe4fa7
ffff800000804a11:	ff ff ff 
ffff800000804a14:	48 01 d8             	add    rax,rbx
ffff800000804a17:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:102
    //初始化一下
    tty_fops.open(itty,&ftty);
ffff800000804a19:	48 b8 c8 fe ff ff ff 	movabs rax,0xfffffffffffffec8
ffff800000804a20:	ff ff ff 
ffff800000804a23:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804a27:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804a2a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000804a2e:	48 b9 38 fe ff ff ff 	movabs rcx,0xfffffffffffffe38
ffff800000804a35:	ff ff ff 
ffff800000804a38:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff800000804a3c:	48 89 ce             	mov    rsi,rcx
ffff800000804a3f:	48 89 c7             	mov    rdi,rax
ffff800000804a42:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:104

}
ffff800000804a44:	90                   	nop
ffff800000804a45:	48 83 c4 30          	add    rsp,0x30
ffff800000804a49:	5b                   	pop    rbx
ffff800000804a4a:	41 5f                	pop    r15
ffff800000804a4c:	5d                   	pop    rbp
ffff800000804a4d:	c3                   	ret    

ffff800000804a4e <open_dev>:
open_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:106
//
long open_dev(struct index_node * inode,struct file * filp){
ffff800000804a4e:	f3 0f 1e fa          	endbr64 
ffff800000804a52:	55                   	push   rbp
ffff800000804a53:	48 89 e5             	mov    rbp,rsp
ffff800000804a56:	41 57                	push   r15
ffff800000804a58:	53                   	push   rbx
ffff800000804a59:	48 83 ec 20          	sub    rsp,0x20
ffff800000804a5d:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000804a5d <open_dev+0xf>
ffff800000804a64:	49 bb db a8 01 00 00 	movabs r11,0x1a8db
ffff800000804a6b:	00 00 00 
ffff800000804a6e:	4c 01 db             	add    rbx,r11
ffff800000804a71:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000804a75:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:108
    //查看文件名
    char* name=filp->dentry->name;
ffff800000804a79:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000804a7d:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000804a81:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804a84:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:109
    char* p=name+ strlen(name)-1;
ffff800000804a88:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804a8c:	48 89 c7             	mov    rdi,rax
ffff800000804a8f:	49 89 df             	mov    r15,rbx
ffff800000804a92:	48 b8 f8 41 ff ff ff 	movabs rax,0xffffffffffff41f8
ffff800000804a99:	ff ff ff 
ffff800000804a9c:	48 01 d8             	add    rax,rbx
ffff800000804a9f:	ff d0                	call   rax
ffff800000804aa1:	48 98                	cdqe   
ffff800000804aa3:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff800000804aa7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804aab:	48 01 d0             	add    rax,rdx
ffff800000804aae:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:110
    for(;*p!='/'&&p>=name;p--);
ffff800000804ab2:	eb 05                	jmp    ffff800000804ab9 <open_dev+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:110 (discriminator 3)
ffff800000804ab4:	48 83 6d e0 01       	sub    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:110 (discriminator 1)
ffff800000804ab9:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804abd:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000804ac0:	3c 2f                	cmp    al,0x2f
ffff800000804ac2:	74 0a                	je     ffff800000804ace <open_dev+0x80>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:110 (discriminator 2)
ffff800000804ac4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804ac8:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000804acc:	73 e6                	jae    ffff800000804ab4 <open_dev+0x66>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:111
    if(p>=name)
ffff800000804ace:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804ad2:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000804ad6:	72 0c                	jb     ffff800000804ae4 <open_dev+0x96>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:112
        name=p+1;
ffff800000804ad8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804adc:	48 83 c0 01          	add    rax,0x1
ffff800000804ae0:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:113
    if(memcmp(name,"tty",3)==0){
ffff800000804ae4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804ae8:	ba 03 00 00 00       	mov    edx,0x3
ffff800000804aed:	48 b9 d4 c5 ff ff ff 	movabs rcx,0xffffffffffffc5d4
ffff800000804af4:	ff ff ff 
ffff800000804af7:	48 8d 0c 0b          	lea    rcx,[rbx+rcx*1]
ffff800000804afb:	48 89 ce             	mov    rsi,rcx
ffff800000804afe:	48 89 c7             	mov    rdi,rax
ffff800000804b01:	49 89 df             	mov    r15,rbx
ffff800000804b04:	48 b8 71 3e ff ff ff 	movabs rax,0xffffffffffff3e71
ffff800000804b0b:	ff ff ff 
ffff800000804b0e:	48 01 d8             	add    rax,rbx
ffff800000804b11:	ff d0                	call   rax
ffff800000804b13:	85 c0                	test   eax,eax
ffff800000804b15:	75 22                	jne    ffff800000804b39 <open_dev+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:114
        return init_tty(inode,filp);
ffff800000804b17:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000804b1b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000804b1f:	48 89 d6             	mov    rsi,rdx
ffff800000804b22:	48 89 c7             	mov    rdi,rax
ffff800000804b25:	49 89 df             	mov    r15,rbx
ffff800000804b28:	48 b8 6e 32 ff ff ff 	movabs rax,0xffffffffffff326e
ffff800000804b2f:	ff ff ff 
ffff800000804b32:	48 01 d8             	add    rax,rbx
ffff800000804b35:	ff d0                	call   rax
ffff800000804b37:	eb 57                	jmp    ffff800000804b90 <open_dev+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:115
    }else if(strcmp(name,"console")==0){
ffff800000804b39:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804b3d:	48 ba c8 c5 ff ff ff 	movabs rdx,0xffffffffffffc5c8
ffff800000804b44:	ff ff ff 
ffff800000804b47:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000804b4b:	48 89 d6             	mov    rsi,rdx
ffff800000804b4e:	48 89 c7             	mov    rdi,rax
ffff800000804b51:	49 89 df             	mov    r15,rbx
ffff800000804b54:	48 b8 79 41 ff ff ff 	movabs rax,0xffffffffffff4179
ffff800000804b5b:	ff ff ff 
ffff800000804b5e:	48 01 d8             	add    rax,rbx
ffff800000804b61:	ff d0                	call   rax
ffff800000804b63:	85 c0                	test   eax,eax
ffff800000804b65:	75 22                	jne    ffff800000804b89 <open_dev+0x13b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:116
        return open_framebuffer(inode,filp);
ffff800000804b67:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000804b6b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000804b6f:	48 89 d6             	mov    rsi,rdx
ffff800000804b72:	48 89 c7             	mov    rdi,rax
ffff800000804b75:	49 89 df             	mov    r15,rbx
ffff800000804b78:	48 b8 76 ca fe ff ff 	movabs rax,0xfffffffffffeca76
ffff800000804b7f:	ff ff ff 
ffff800000804b82:	48 01 d8             	add    rax,rbx
ffff800000804b85:	ff d0                	call   rax
ffff800000804b87:	eb 07                	jmp    ffff800000804b90 <open_dev+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:118
    }
    return -1;
ffff800000804b89:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:119
}
ffff800000804b90:	48 83 c4 20          	add    rsp,0x20
ffff800000804b94:	5b                   	pop    rbx
ffff800000804b95:	41 5f                	pop    r15
ffff800000804b97:	5d                   	pop    rbp
ffff800000804b98:	c3                   	ret    

ffff800000804b99 <close_dev>:
close_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:120
long close_dev(struct index_node * inode,struct file * filp){
ffff800000804b99:	f3 0f 1e fa          	endbr64 
ffff800000804b9d:	55                   	push   rbp
ffff800000804b9e:	48 89 e5             	mov    rbp,rsp
ffff800000804ba1:	41 57                	push   r15
ffff800000804ba3:	53                   	push   rbx
ffff800000804ba4:	48 83 ec 20          	sub    rsp,0x20
ffff800000804ba8:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000804ba8 <close_dev+0xf>
ffff800000804baf:	49 bb 90 a7 01 00 00 	movabs r11,0x1a790
ffff800000804bb6:	00 00 00 
ffff800000804bb9:	4c 01 db             	add    rbx,r11
ffff800000804bbc:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000804bc0:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:122
    //查看文件名
    char* name=filp->dentry->name;
ffff800000804bc4:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000804bc8:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000804bcc:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804bcf:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:123
    char* p=name+ strlen(name)-1;
ffff800000804bd3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804bd7:	48 89 c7             	mov    rdi,rax
ffff800000804bda:	49 89 df             	mov    r15,rbx
ffff800000804bdd:	48 b8 f8 41 ff ff ff 	movabs rax,0xffffffffffff41f8
ffff800000804be4:	ff ff ff 
ffff800000804be7:	48 01 d8             	add    rax,rbx
ffff800000804bea:	ff d0                	call   rax
ffff800000804bec:	48 98                	cdqe   
ffff800000804bee:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff800000804bf2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804bf6:	48 01 d0             	add    rax,rdx
ffff800000804bf9:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:124
    for(;*p!='/'&&p>=name;p--);
ffff800000804bfd:	eb 05                	jmp    ffff800000804c04 <close_dev+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:124 (discriminator 3)
ffff800000804bff:	48 83 6d e0 01       	sub    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:124 (discriminator 1)
ffff800000804c04:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804c08:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000804c0b:	3c 2f                	cmp    al,0x2f
ffff800000804c0d:	74 0a                	je     ffff800000804c19 <close_dev+0x80>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:124 (discriminator 2)
ffff800000804c0f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804c13:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000804c17:	73 e6                	jae    ffff800000804bff <close_dev+0x66>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:125
    if(p>=name)
ffff800000804c19:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804c1d:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000804c21:	72 0c                	jb     ffff800000804c2f <close_dev+0x96>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:126
        name=p+1;
ffff800000804c23:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804c27:	48 83 c0 01          	add    rax,0x1
ffff800000804c2b:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:127
    if(memcmp(name,"tty",3)==0){
ffff800000804c2f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804c33:	ba 03 00 00 00       	mov    edx,0x3
ffff800000804c38:	48 b9 d4 c5 ff ff ff 	movabs rcx,0xffffffffffffc5d4
ffff800000804c3f:	ff ff ff 
ffff800000804c42:	48 8d 0c 0b          	lea    rcx,[rbx+rcx*1]
ffff800000804c46:	48 89 ce             	mov    rsi,rcx
ffff800000804c49:	48 89 c7             	mov    rdi,rax
ffff800000804c4c:	49 89 df             	mov    r15,rbx
ffff800000804c4f:	48 b8 71 3e ff ff ff 	movabs rax,0xffffffffffff3e71
ffff800000804c56:	ff ff ff 
ffff800000804c59:	48 01 d8             	add    rax,rbx
ffff800000804c5c:	ff d0                	call   rax
ffff800000804c5e:	85 c0                	test   eax,eax
ffff800000804c60:	75 22                	jne    ffff800000804c84 <close_dev+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:128
        return close_tty(inode,filp);
ffff800000804c62:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000804c66:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000804c6a:	48 89 d6             	mov    rsi,rdx
ffff800000804c6d:	48 89 c7             	mov    rdi,rax
ffff800000804c70:	49 89 df             	mov    r15,rbx
ffff800000804c73:	48 b8 a1 31 ff ff ff 	movabs rax,0xffffffffffff31a1
ffff800000804c7a:	ff ff ff 
ffff800000804c7d:	48 01 d8             	add    rax,rbx
ffff800000804c80:	ff d0                	call   rax
ffff800000804c82:	eb 57                	jmp    ffff800000804cdb <close_dev+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:129
    }else if(strcmp(name,"console")==0){
ffff800000804c84:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804c88:	48 ba c8 c5 ff ff ff 	movabs rdx,0xffffffffffffc5c8
ffff800000804c8f:	ff ff ff 
ffff800000804c92:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000804c96:	48 89 d6             	mov    rsi,rdx
ffff800000804c99:	48 89 c7             	mov    rdi,rax
ffff800000804c9c:	49 89 df             	mov    r15,rbx
ffff800000804c9f:	48 b8 79 41 ff ff ff 	movabs rax,0xffffffffffff4179
ffff800000804ca6:	ff ff ff 
ffff800000804ca9:	48 01 d8             	add    rax,rbx
ffff800000804cac:	ff d0                	call   rax
ffff800000804cae:	85 c0                	test   eax,eax
ffff800000804cb0:	75 22                	jne    ffff800000804cd4 <close_dev+0x13b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:130
        return close_framebuffer(inode,filp);
ffff800000804cb2:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000804cb6:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000804cba:	48 89 d6             	mov    rsi,rdx
ffff800000804cbd:	48 89 c7             	mov    rdi,rax
ffff800000804cc0:	49 89 df             	mov    r15,rbx
ffff800000804cc3:	48 b8 cd ca fe ff ff 	movabs rax,0xfffffffffffecacd
ffff800000804cca:	ff ff ff 
ffff800000804ccd:	48 01 d8             	add    rax,rbx
ffff800000804cd0:	ff d0                	call   rax
ffff800000804cd2:	eb 07                	jmp    ffff800000804cdb <close_dev+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:132
    }
    return -1;
ffff800000804cd4:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:134

}
ffff800000804cdb:	48 83 c4 20          	add    rsp,0x20
ffff800000804cdf:	5b                   	pop    rbx
ffff800000804ce0:	41 5f                	pop    r15
ffff800000804ce2:	5d                   	pop    rbp
ffff800000804ce3:	c3                   	ret    

ffff800000804ce4 <read_dev>:
read_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:135
long read_dev(struct file * filp,char * buf,unsigned long count,long * position){
ffff800000804ce4:	f3 0f 1e fa          	endbr64 
ffff800000804ce8:	55                   	push   rbp
ffff800000804ce9:	48 89 e5             	mov    rbp,rsp
ffff800000804cec:	41 57                	push   r15
ffff800000804cee:	53                   	push   rbx
ffff800000804cef:	48 83 ec 30          	sub    rsp,0x30
ffff800000804cf3:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000804cf3 <read_dev+0xf>
ffff800000804cfa:	49 bb 45 a6 01 00 00 	movabs r11,0x1a645
ffff800000804d01:	00 00 00 
ffff800000804d04:	4c 01 db             	add    rbx,r11
ffff800000804d07:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000804d0b:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffff800000804d0f:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
ffff800000804d13:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:137
    //查看文件名
    char* name=filp->dentry->name;
ffff800000804d17:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000804d1b:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000804d1f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804d22:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:138
    char* p=name+ strlen(name)-1;
ffff800000804d26:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804d2a:	48 89 c7             	mov    rdi,rax
ffff800000804d2d:	49 89 df             	mov    r15,rbx
ffff800000804d30:	48 b8 f8 41 ff ff ff 	movabs rax,0xffffffffffff41f8
ffff800000804d37:	ff ff ff 
ffff800000804d3a:	48 01 d8             	add    rax,rbx
ffff800000804d3d:	ff d0                	call   rax
ffff800000804d3f:	48 98                	cdqe   
ffff800000804d41:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff800000804d45:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804d49:	48 01 d0             	add    rax,rdx
ffff800000804d4c:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:139
    for(;*p!='/'&&p>=name;p--);
ffff800000804d50:	eb 05                	jmp    ffff800000804d57 <read_dev+0x73>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:139 (discriminator 3)
ffff800000804d52:	48 83 6d e0 01       	sub    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:139 (discriminator 1)
ffff800000804d57:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804d5b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000804d5e:	3c 2f                	cmp    al,0x2f
ffff800000804d60:	74 0a                	je     ffff800000804d6c <read_dev+0x88>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:139 (discriminator 2)
ffff800000804d62:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804d66:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000804d6a:	73 e6                	jae    ffff800000804d52 <read_dev+0x6e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:140
    if(p>=name)
ffff800000804d6c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804d70:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000804d74:	72 0c                	jb     ffff800000804d82 <read_dev+0x9e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:141
        name=p+1;
ffff800000804d76:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804d7a:	48 83 c0 01          	add    rax,0x1
ffff800000804d7e:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:142
    if(memcmp(name,"tty",3)==0){
ffff800000804d82:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804d86:	ba 03 00 00 00       	mov    edx,0x3
ffff800000804d8b:	48 b9 d4 c5 ff ff ff 	movabs rcx,0xffffffffffffc5d4
ffff800000804d92:	ff ff ff 
ffff800000804d95:	48 8d 0c 0b          	lea    rcx,[rbx+rcx*1]
ffff800000804d99:	48 89 ce             	mov    rsi,rcx
ffff800000804d9c:	48 89 c7             	mov    rdi,rax
ffff800000804d9f:	49 89 df             	mov    r15,rbx
ffff800000804da2:	48 b8 71 3e ff ff ff 	movabs rax,0xffffffffffff3e71
ffff800000804da9:	ff ff ff 
ffff800000804dac:	48 01 d8             	add    rax,rbx
ffff800000804daf:	ff d0                	call   rax
ffff800000804db1:	85 c0                	test   eax,eax
ffff800000804db3:	75 27                	jne    ffff800000804ddc <read_dev+0xf8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:143
        return read_tty(filp,buf,count,position);
ffff800000804db5:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
ffff800000804db9:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000804dbd:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff800000804dc1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000804dc5:	48 89 c7             	mov    rdi,rax
ffff800000804dc8:	49 89 df             	mov    r15,rbx
ffff800000804dcb:	48 b8 c2 33 ff ff ff 	movabs rax,0xffffffffffff33c2
ffff800000804dd2:	ff ff ff 
ffff800000804dd5:	48 01 d8             	add    rax,rbx
ffff800000804dd8:	ff d0                	call   rax
ffff800000804dda:	eb 5c                	jmp    ffff800000804e38 <read_dev+0x154>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:144
    }else if(strcmp(name,"console")==0){
ffff800000804ddc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804de0:	48 ba c8 c5 ff ff ff 	movabs rdx,0xffffffffffffc5c8
ffff800000804de7:	ff ff ff 
ffff800000804dea:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000804dee:	48 89 d6             	mov    rsi,rdx
ffff800000804df1:	48 89 c7             	mov    rdi,rax
ffff800000804df4:	49 89 df             	mov    r15,rbx
ffff800000804df7:	48 b8 79 41 ff ff ff 	movabs rax,0xffffffffffff4179
ffff800000804dfe:	ff ff ff 
ffff800000804e01:	48 01 d8             	add    rax,rbx
ffff800000804e04:	ff d0                	call   rax
ffff800000804e06:	85 c0                	test   eax,eax
ffff800000804e08:	75 27                	jne    ffff800000804e31 <read_dev+0x14d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:145
        return read_framebuffer(filp,buf,count,position);
ffff800000804e0a:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
ffff800000804e0e:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000804e12:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff800000804e16:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000804e1a:	48 89 c7             	mov    rdi,rax
ffff800000804e1d:	49 89 df             	mov    r15,rbx
ffff800000804e20:	48 b8 f4 ca fe ff ff 	movabs rax,0xfffffffffffecaf4
ffff800000804e27:	ff ff ff 
ffff800000804e2a:	48 01 d8             	add    rax,rbx
ffff800000804e2d:	ff d0                	call   rax
ffff800000804e2f:	eb 07                	jmp    ffff800000804e38 <read_dev+0x154>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:147
    }
    return -1;
ffff800000804e31:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:149

}
ffff800000804e38:	48 83 c4 30          	add    rsp,0x30
ffff800000804e3c:	5b                   	pop    rbx
ffff800000804e3d:	41 5f                	pop    r15
ffff800000804e3f:	5d                   	pop    rbp
ffff800000804e40:	c3                   	ret    

ffff800000804e41 <write_dev>:
write_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:150
long write_dev(struct file * filp,char * buf,unsigned long count,long * position){
ffff800000804e41:	f3 0f 1e fa          	endbr64 
ffff800000804e45:	55                   	push   rbp
ffff800000804e46:	48 89 e5             	mov    rbp,rsp
ffff800000804e49:	41 57                	push   r15
ffff800000804e4b:	53                   	push   rbx
ffff800000804e4c:	48 83 ec 30          	sub    rsp,0x30
ffff800000804e50:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000804e50 <write_dev+0xf>
ffff800000804e57:	49 bb e8 a4 01 00 00 	movabs r11,0x1a4e8
ffff800000804e5e:	00 00 00 
ffff800000804e61:	4c 01 db             	add    rbx,r11
ffff800000804e64:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000804e68:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffff800000804e6c:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
ffff800000804e70:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:152
    //查看文件名
    char* name=filp->dentry->name;
ffff800000804e74:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000804e78:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000804e7c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804e7f:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:153
    char* p=name+ strlen(name)-1;
ffff800000804e83:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804e87:	48 89 c7             	mov    rdi,rax
ffff800000804e8a:	49 89 df             	mov    r15,rbx
ffff800000804e8d:	48 b8 f8 41 ff ff ff 	movabs rax,0xffffffffffff41f8
ffff800000804e94:	ff ff ff 
ffff800000804e97:	48 01 d8             	add    rax,rbx
ffff800000804e9a:	ff d0                	call   rax
ffff800000804e9c:	48 98                	cdqe   
ffff800000804e9e:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff800000804ea2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804ea6:	48 01 d0             	add    rax,rdx
ffff800000804ea9:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:154
    for(;*p!='/'&&p>=name;p--);
ffff800000804ead:	eb 05                	jmp    ffff800000804eb4 <write_dev+0x73>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:154 (discriminator 3)
ffff800000804eaf:	48 83 6d e0 01       	sub    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:154 (discriminator 1)
ffff800000804eb4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804eb8:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000804ebb:	3c 2f                	cmp    al,0x2f
ffff800000804ebd:	74 0a                	je     ffff800000804ec9 <write_dev+0x88>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:154 (discriminator 2)
ffff800000804ebf:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804ec3:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000804ec7:	73 e6                	jae    ffff800000804eaf <write_dev+0x6e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:155
    if(p>=name)
ffff800000804ec9:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804ecd:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000804ed1:	72 0c                	jb     ffff800000804edf <write_dev+0x9e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:156
        name=p+1;
ffff800000804ed3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804ed7:	48 83 c0 01          	add    rax,0x1
ffff800000804edb:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:157
    if(memcmp(name,"tty",3)==0){
ffff800000804edf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804ee3:	ba 03 00 00 00       	mov    edx,0x3
ffff800000804ee8:	48 b9 d4 c5 ff ff ff 	movabs rcx,0xffffffffffffc5d4
ffff800000804eef:	ff ff ff 
ffff800000804ef2:	48 8d 0c 0b          	lea    rcx,[rbx+rcx*1]
ffff800000804ef6:	48 89 ce             	mov    rsi,rcx
ffff800000804ef9:	48 89 c7             	mov    rdi,rax
ffff800000804efc:	49 89 df             	mov    r15,rbx
ffff800000804eff:	48 b8 71 3e ff ff ff 	movabs rax,0xffffffffffff3e71
ffff800000804f06:	ff ff ff 
ffff800000804f09:	48 01 d8             	add    rax,rbx
ffff800000804f0c:	ff d0                	call   rax
ffff800000804f0e:	85 c0                	test   eax,eax
ffff800000804f10:	75 27                	jne    ffff800000804f39 <write_dev+0xf8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:158
        return write_tty(filp,buf,count,position);
ffff800000804f12:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
ffff800000804f16:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000804f1a:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff800000804f1e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000804f22:	48 89 c7             	mov    rdi,rax
ffff800000804f25:	49 89 df             	mov    r15,rbx
ffff800000804f28:	48 b8 83 34 ff ff ff 	movabs rax,0xffffffffffff3483
ffff800000804f2f:	ff ff ff 
ffff800000804f32:	48 01 d8             	add    rax,rbx
ffff800000804f35:	ff d0                	call   rax
ffff800000804f37:	eb 5c                	jmp    ffff800000804f95 <write_dev+0x154>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:159
    }else if(strcmp(name,"console")==0){
ffff800000804f39:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804f3d:	48 ba c8 c5 ff ff ff 	movabs rdx,0xffffffffffffc5c8
ffff800000804f44:	ff ff ff 
ffff800000804f47:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000804f4b:	48 89 d6             	mov    rsi,rdx
ffff800000804f4e:	48 89 c7             	mov    rdi,rax
ffff800000804f51:	49 89 df             	mov    r15,rbx
ffff800000804f54:	48 b8 79 41 ff ff ff 	movabs rax,0xffffffffffff4179
ffff800000804f5b:	ff ff ff 
ffff800000804f5e:	48 01 d8             	add    rax,rbx
ffff800000804f61:	ff d0                	call   rax
ffff800000804f63:	85 c0                	test   eax,eax
ffff800000804f65:	75 27                	jne    ffff800000804f8e <write_dev+0x14d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:160
        return write_framebuffer(filp,buf,count,position);
ffff800000804f67:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
ffff800000804f6b:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000804f6f:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff800000804f73:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000804f77:	48 89 c7             	mov    rdi,rax
ffff800000804f7a:	49 89 df             	mov    r15,rbx
ffff800000804f7d:	48 b8 23 cb fe ff ff 	movabs rax,0xfffffffffffecb23
ffff800000804f84:	ff ff ff 
ffff800000804f87:	48 01 d8             	add    rax,rbx
ffff800000804f8a:	ff d0                	call   rax
ffff800000804f8c:	eb 07                	jmp    ffff800000804f95 <write_dev+0x154>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:162
    }
    return -1;
ffff800000804f8e:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:164

}
ffff800000804f95:	48 83 c4 30          	add    rsp,0x30
ffff800000804f99:	5b                   	pop    rbx
ffff800000804f9a:	41 5f                	pop    r15
ffff800000804f9c:	5d                   	pop    rbp
ffff800000804f9d:	c3                   	ret    

ffff800000804f9e <ioctl_dev>:
ioctl_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:165
long ioctl_dev(struct index_node * inode,struct file * filp,unsigned long cmd,unsigned long arg){
ffff800000804f9e:	f3 0f 1e fa          	endbr64 
ffff800000804fa2:	55                   	push   rbp
ffff800000804fa3:	48 89 e5             	mov    rbp,rsp
ffff800000804fa6:	41 57                	push   r15
ffff800000804fa8:	53                   	push   rbx
ffff800000804fa9:	48 83 ec 30          	sub    rsp,0x30
ffff800000804fad:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000804fad <ioctl_dev+0xf>
ffff800000804fb4:	49 bb 8b a3 01 00 00 	movabs r11,0x1a38b
ffff800000804fbb:	00 00 00 
ffff800000804fbe:	4c 01 db             	add    rbx,r11
ffff800000804fc1:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000804fc5:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffff800000804fc9:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
ffff800000804fcd:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:167
    //查看文件名
    char* name=filp->dentry->name;
ffff800000804fd1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000804fd5:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000804fd9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804fdc:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:168
    char* p=name+ strlen(name)-1;
ffff800000804fe0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804fe4:	48 89 c7             	mov    rdi,rax
ffff800000804fe7:	49 89 df             	mov    r15,rbx
ffff800000804fea:	48 b8 f8 41 ff ff ff 	movabs rax,0xffffffffffff41f8
ffff800000804ff1:	ff ff ff 
ffff800000804ff4:	48 01 d8             	add    rax,rbx
ffff800000804ff7:	ff d0                	call   rax
ffff800000804ff9:	48 98                	cdqe   
ffff800000804ffb:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff800000804fff:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000805003:	48 01 d0             	add    rax,rdx
ffff800000805006:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:169
    for(;*p!='/'&&p>=name;p--);
ffff80000080500a:	eb 05                	jmp    ffff800000805011 <ioctl_dev+0x73>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:169 (discriminator 3)
ffff80000080500c:	48 83 6d e0 01       	sub    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:169 (discriminator 1)
ffff800000805011:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000805015:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000805018:	3c 2f                	cmp    al,0x2f
ffff80000080501a:	74 0a                	je     ffff800000805026 <ioctl_dev+0x88>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:169 (discriminator 2)
ffff80000080501c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000805020:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000805024:	73 e6                	jae    ffff80000080500c <ioctl_dev+0x6e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:170
    if(p>=name)
ffff800000805026:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080502a:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff80000080502e:	72 0c                	jb     ffff80000080503c <ioctl_dev+0x9e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:171
        name=p+1;
ffff800000805030:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000805034:	48 83 c0 01          	add    rax,0x1
ffff800000805038:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:172
    if(memcmp(name,"tty",3)==0){
ffff80000080503c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000805040:	ba 03 00 00 00       	mov    edx,0x3
ffff800000805045:	48 b9 d4 c5 ff ff ff 	movabs rcx,0xffffffffffffc5d4
ffff80000080504c:	ff ff ff 
ffff80000080504f:	48 8d 0c 0b          	lea    rcx,[rbx+rcx*1]
ffff800000805053:	48 89 ce             	mov    rsi,rcx
ffff800000805056:	48 89 c7             	mov    rdi,rax
ffff800000805059:	49 89 df             	mov    r15,rbx
ffff80000080505c:	48 b8 71 3e ff ff ff 	movabs rax,0xffffffffffff3e71
ffff800000805063:	ff ff ff 
ffff800000805066:	48 01 d8             	add    rax,rbx
ffff800000805069:	ff d0                	call   rax
ffff80000080506b:	85 c0                	test   eax,eax
ffff80000080506d:	75 27                	jne    ffff800000805096 <ioctl_dev+0xf8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:173
        return ioctl_tty(inode, filp, cmd, arg);
ffff80000080506f:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
ffff800000805073:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000805077:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff80000080507b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080507f:	48 89 c7             	mov    rdi,rax
ffff800000805082:	49 89 df             	mov    r15,rbx
ffff800000805085:	48 b8 73 35 ff ff ff 	movabs rax,0xffffffffffff3573
ffff80000080508c:	ff ff ff 
ffff80000080508f:	48 01 d8             	add    rax,rbx
ffff800000805092:	ff d0                	call   rax
ffff800000805094:	eb 5c                	jmp    ffff8000008050f2 <ioctl_dev+0x154>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:174
    }else if(strcmp(name,"console")==0){
ffff800000805096:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080509a:	48 ba c8 c5 ff ff ff 	movabs rdx,0xffffffffffffc5c8
ffff8000008050a1:	ff ff ff 
ffff8000008050a4:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff8000008050a8:	48 89 d6             	mov    rsi,rdx
ffff8000008050ab:	48 89 c7             	mov    rdi,rax
ffff8000008050ae:	49 89 df             	mov    r15,rbx
ffff8000008050b1:	48 b8 79 41 ff ff ff 	movabs rax,0xffffffffffff4179
ffff8000008050b8:	ff ff ff 
ffff8000008050bb:	48 01 d8             	add    rax,rbx
ffff8000008050be:	ff d0                	call   rax
ffff8000008050c0:	85 c0                	test   eax,eax
ffff8000008050c2:	75 27                	jne    ffff8000008050eb <ioctl_dev+0x14d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:175
        return ioctl_framebuffer(inode,filp,cmd,arg);
ffff8000008050c4:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
ffff8000008050c8:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff8000008050cc:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff8000008050d0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008050d4:	48 89 c7             	mov    rdi,rax
ffff8000008050d7:	49 89 df             	mov    r15,rbx
ffff8000008050da:	48 b8 44 cc fe ff ff 	movabs rax,0xfffffffffffecc44
ffff8000008050e1:	ff ff ff 
ffff8000008050e4:	48 01 d8             	add    rax,rbx
ffff8000008050e7:	ff d0                	call   rax
ffff8000008050e9:	eb 07                	jmp    ffff8000008050f2 <ioctl_dev+0x154>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:177
    }
    return -1;
ffff8000008050eb:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:179

}
ffff8000008050f2:	48 83 c4 30          	add    rsp,0x30
ffff8000008050f6:	5b                   	pop    rbx
ffff8000008050f7:	41 5f                	pop    r15
ffff8000008050f9:	5d                   	pop    rbp
ffff8000008050fa:	c3                   	ret    

ffff8000008050fb <load_driver>:
load_driver():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:181
int load_driver(char *path)
{
ffff8000008050fb:	f3 0f 1e fa          	endbr64 
ffff8000008050ff:	55                   	push   rbp
ffff800000805100:	48 89 e5             	mov    rbp,rsp
ffff800000805103:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000805103 <load_driver+0x8>
ffff80000080510a:	49 bb 35 a2 01 00 00 	movabs r11,0x1a235
ffff800000805111:	00 00 00 
ffff800000805114:	4c 01 d8             	add    rax,r11
ffff800000805117:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:183
    
}
ffff80000080511b:	90                   	nop
ffff80000080511c:	5d                   	pop    rbp
ffff80000080511d:	c3                   	ret    

ffff80000080511e <reg_device>:
reg_device():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:186

int reg_device(device* dev)
{
ffff80000080511e:	f3 0f 1e fa          	endbr64 
ffff800000805122:	55                   	push   rbp
ffff800000805123:	48 89 e5             	mov    rbp,rsp
ffff800000805126:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000805126 <reg_device+0x8>
ffff80000080512d:	49 bb 12 a2 01 00 00 	movabs r11,0x1a212
ffff800000805134:	00 00 00 
ffff800000805137:	4c 01 d8             	add    rax,r11
ffff80000080513a:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:190
    //TODO:查重

    //放入数组
    int i=0;
ffff80000080513e:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:191
    for(;i<MAX_DEVICES;i++)
ffff800000805145:	e9 6b 01 00 00       	jmp    ffff8000008052b5 <reg_device+0x197>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:193
    {
        if(devs[i].flag==DEV_FLAG_EMPTY)
ffff80000080514a:	48 ba 98 fe ff ff ff 	movabs rdx,0xfffffffffffffe98
ffff800000805151:	ff ff ff 
ffff800000805154:	48 8b 34 10          	mov    rsi,QWORD PTR [rax+rdx*1]
ffff800000805158:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080515b:	48 63 ca             	movsxd rcx,edx
ffff80000080515e:	48 89 ca             	mov    rdx,rcx
ffff800000805161:	48 c1 e2 02          	shl    rdx,0x2
ffff800000805165:	48 01 ca             	add    rdx,rcx
ffff800000805168:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080516c:	48 01 ca             	add    rdx,rcx
ffff80000080516f:	48 c1 e2 03          	shl    rdx,0x3
ffff800000805173:	48 01 f2             	add    rdx,rsi
ffff800000805176:	48 83 c2 10          	add    rdx,0x10
ffff80000080517a:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff80000080517c:	85 d2                	test   edx,edx
ffff80000080517e:	0f 85 2d 01 00 00    	jne    ffff8000008052b1 <reg_device+0x193>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:195
        {
            devs[i]=*dev;
ffff800000805184:	48 ba 98 fe ff ff ff 	movabs rdx,0xfffffffffffffe98
ffff80000080518b:	ff ff ff 
ffff80000080518e:	48 8b 34 10          	mov    rsi,QWORD PTR [rax+rdx*1]
ffff800000805192:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000805195:	48 63 ca             	movsxd rcx,edx
ffff800000805198:	48 89 ca             	mov    rdx,rcx
ffff80000080519b:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080519f:	48 01 ca             	add    rdx,rcx
ffff8000008051a2:	48 c1 e2 02          	shl    rdx,0x2
ffff8000008051a6:	48 01 ca             	add    rdx,rcx
ffff8000008051a9:	48 c1 e2 03          	shl    rdx,0x3
ffff8000008051ad:	48 8d 0c 16          	lea    rcx,[rsi+rdx*1]
ffff8000008051b1:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff8000008051b5:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff8000008051b8:	48 8b 7a 08          	mov    rdi,QWORD PTR [rdx+0x8]
ffff8000008051bc:	48 89 31             	mov    QWORD PTR [rcx],rsi
ffff8000008051bf:	48 89 79 08          	mov    QWORD PTR [rcx+0x8],rdi
ffff8000008051c3:	48 8b 72 10          	mov    rsi,QWORD PTR [rdx+0x10]
ffff8000008051c7:	48 8b 7a 18          	mov    rdi,QWORD PTR [rdx+0x18]
ffff8000008051cb:	48 89 71 10          	mov    QWORD PTR [rcx+0x10],rsi
ffff8000008051cf:	48 89 79 18          	mov    QWORD PTR [rcx+0x18],rdi
ffff8000008051d3:	48 8b 72 20          	mov    rsi,QWORD PTR [rdx+0x20]
ffff8000008051d7:	48 8b 7a 28          	mov    rdi,QWORD PTR [rdx+0x28]
ffff8000008051db:	48 89 71 20          	mov    QWORD PTR [rcx+0x20],rsi
ffff8000008051df:	48 89 79 28          	mov    QWORD PTR [rcx+0x28],rdi
ffff8000008051e3:	48 8b 72 30          	mov    rsi,QWORD PTR [rdx+0x30]
ffff8000008051e7:	48 8b 7a 38          	mov    rdi,QWORD PTR [rdx+0x38]
ffff8000008051eb:	48 89 71 30          	mov    QWORD PTR [rcx+0x30],rsi
ffff8000008051ef:	48 89 79 38          	mov    QWORD PTR [rcx+0x38],rdi
ffff8000008051f3:	48 8b 72 40          	mov    rsi,QWORD PTR [rdx+0x40]
ffff8000008051f7:	48 8b 7a 48          	mov    rdi,QWORD PTR [rdx+0x48]
ffff8000008051fb:	48 89 71 40          	mov    QWORD PTR [rcx+0x40],rsi
ffff8000008051ff:	48 89 79 48          	mov    QWORD PTR [rcx+0x48],rdi
ffff800000805203:	48 8b 72 50          	mov    rsi,QWORD PTR [rdx+0x50]
ffff800000805207:	48 8b 7a 58          	mov    rdi,QWORD PTR [rdx+0x58]
ffff80000080520b:	48 89 71 50          	mov    QWORD PTR [rcx+0x50],rsi
ffff80000080520f:	48 89 79 58          	mov    QWORD PTR [rcx+0x58],rdi
ffff800000805213:	48 8b 72 60          	mov    rsi,QWORD PTR [rdx+0x60]
ffff800000805217:	48 8b 7a 68          	mov    rdi,QWORD PTR [rdx+0x68]
ffff80000080521b:	48 89 71 60          	mov    QWORD PTR [rcx+0x60],rsi
ffff80000080521f:	48 89 79 68          	mov    QWORD PTR [rcx+0x68],rdi
ffff800000805223:	48 8b 72 70          	mov    rsi,QWORD PTR [rdx+0x70]
ffff800000805227:	48 8b 7a 78          	mov    rdi,QWORD PTR [rdx+0x78]
ffff80000080522b:	48 89 71 70          	mov    QWORD PTR [rcx+0x70],rsi
ffff80000080522f:	48 89 79 78          	mov    QWORD PTR [rcx+0x78],rdi
ffff800000805233:	48 8b b2 80 00 00 00 	mov    rsi,QWORD PTR [rdx+0x80]
ffff80000080523a:	48 8b ba 88 00 00 00 	mov    rdi,QWORD PTR [rdx+0x88]
ffff800000805241:	48 89 b1 80 00 00 00 	mov    QWORD PTR [rcx+0x80],rsi
ffff800000805248:	48 89 b9 88 00 00 00 	mov    QWORD PTR [rcx+0x88],rdi
ffff80000080524f:	48 8b b2 90 00 00 00 	mov    rsi,QWORD PTR [rdx+0x90]
ffff800000805256:	48 8b ba 98 00 00 00 	mov    rdi,QWORD PTR [rdx+0x98]
ffff80000080525d:	48 89 b1 90 00 00 00 	mov    QWORD PTR [rcx+0x90],rsi
ffff800000805264:	48 89 b9 98 00 00 00 	mov    QWORD PTR [rcx+0x98],rdi
ffff80000080526b:	48 8b 92 a0 00 00 00 	mov    rdx,QWORD PTR [rdx+0xa0]
ffff800000805272:	48 89 91 a0 00 00 00 	mov    QWORD PTR [rcx+0xa0],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:196
            devs[i].flag=DEV_FLAG_USED;
ffff800000805279:	48 ba 98 fe ff ff ff 	movabs rdx,0xfffffffffffffe98
ffff800000805280:	ff ff ff 
ffff800000805283:	48 8b 34 10          	mov    rsi,QWORD PTR [rax+rdx*1]
ffff800000805287:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080528a:	48 63 ca             	movsxd rcx,edx
ffff80000080528d:	48 89 ca             	mov    rdx,rcx
ffff800000805290:	48 c1 e2 02          	shl    rdx,0x2
ffff800000805294:	48 01 ca             	add    rdx,rcx
ffff800000805297:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080529b:	48 01 ca             	add    rdx,rcx
ffff80000080529e:	48 c1 e2 03          	shl    rdx,0x3
ffff8000008052a2:	48 01 f2             	add    rdx,rsi
ffff8000008052a5:	48 83 c2 10          	add    rdx,0x10
ffff8000008052a9:	c7 02 01 00 00 00    	mov    DWORD PTR [rdx],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:197
            break;
ffff8000008052af:	eb 0e                	jmp    ffff8000008052bf <reg_device+0x1a1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:191
    for(;i<MAX_DEVICES;i++)
ffff8000008052b1:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:191 (discriminator 1)
ffff8000008052b5:	83 7d fc 3f          	cmp    DWORD PTR [rbp-0x4],0x3f
ffff8000008052b9:	0f 8e 8b fe ff ff    	jle    ffff80000080514a <reg_device+0x2c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:200
        }
    }
    if(i==MAX_DEVICES)
ffff8000008052bf:	83 7d fc 40          	cmp    DWORD PTR [rbp-0x4],0x40
ffff8000008052c3:	75 0a                	jne    ffff8000008052cf <reg_device+0x1b1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:201
        return -1;
ffff8000008052c5:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff8000008052ca:	e9 c5 01 00 00       	jmp    ffff800000805494 <reg_device+0x376>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:203
    //添加到链表
    device* p=NULL,*neo=&devs[i],**pp;
ffff8000008052cf:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffff8000008052d6:	00 
ffff8000008052d7:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff8000008052da:	48 63 ca             	movsxd rcx,edx
ffff8000008052dd:	48 89 ca             	mov    rdx,rcx
ffff8000008052e0:	48 c1 e2 02          	shl    rdx,0x2
ffff8000008052e4:	48 01 ca             	add    rdx,rcx
ffff8000008052e7:	48 c1 e2 02          	shl    rdx,0x2
ffff8000008052eb:	48 01 ca             	add    rdx,rcx
ffff8000008052ee:	48 c1 e2 03          	shl    rdx,0x3
ffff8000008052f2:	48 b9 98 fe ff ff ff 	movabs rcx,0xfffffffffffffe98
ffff8000008052f9:	ff ff ff 
ffff8000008052fc:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff800000805300:	48 01 ca             	add    rdx,rcx
ffff800000805303:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:204
    switch (dev->type)
ffff800000805307:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080530b:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff80000080530e:	83 fa 03             	cmp    edx,0x3
ffff800000805311:	74 6f                	je     ffff800000805382 <reg_device+0x264>
ffff800000805313:	83 fa 03             	cmp    edx,0x3
ffff800000805316:	0f 8f 94 00 00 00    	jg     ffff8000008053b0 <reg_device+0x292>
ffff80000080531c:	83 fa 01             	cmp    edx,0x1
ffff80000080531f:	74 0a                	je     ffff80000080532b <reg_device+0x20d>
ffff800000805321:	83 fa 02             	cmp    edx,0x2
ffff800000805324:	74 2e                	je     ffff800000805354 <reg_device+0x236>
ffff800000805326:	e9 85 00 00 00       	jmp    ffff8000008053b0 <reg_device+0x292>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:207
    {
    case DEV_TYPE_BLKDEV:
        p=dev_tree[DEVTREE_BLKDEVI];pp=&dev_tree[DEVTREE_BLKDEVI];
ffff80000080532b:	48 ba 60 fd ff ff ff 	movabs rdx,0xfffffffffffffd60
ffff800000805332:	ff ff ff 
ffff800000805335:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805339:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080533c:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
ffff800000805340:	48 ba 60 fd ff ff ff 	movabs rdx,0xfffffffffffffd60
ffff800000805347:	ff ff ff 
ffff80000080534a:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080534e:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:208
        break;
ffff800000805352:	eb 66                	jmp    ffff8000008053ba <reg_device+0x29c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:211
    
    case DEV_TYPE_CHRDEV:
        p=dev_tree[DEVTREE_CHRDEVI];pp=&dev_tree[DEVTREE_CHRDEVI];
ffff800000805354:	48 ba 60 fd ff ff ff 	movabs rdx,0xfffffffffffffd60
ffff80000080535b:	ff ff ff 
ffff80000080535e:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805362:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff800000805366:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
ffff80000080536a:	48 ba 60 fd ff ff ff 	movabs rdx,0xfffffffffffffd60
ffff800000805371:	ff ff ff 
ffff800000805374:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000805378:	48 8d 40 08          	lea    rax,[rax+0x8]
ffff80000080537c:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:212
        break;
ffff800000805380:	eb 38                	jmp    ffff8000008053ba <reg_device+0x29c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:215
        
    case DEV_TYPE_OTHERS:
        p=dev_tree[DEVTREE_OTHERDEVI];pp=&dev_tree[DEVTREE_OTHERDEVI];
ffff800000805382:	48 ba 60 fd ff ff ff 	movabs rdx,0xfffffffffffffd60
ffff800000805389:	ff ff ff 
ffff80000080538c:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805390:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
ffff800000805394:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
ffff800000805398:	48 ba 60 fd ff ff ff 	movabs rdx,0xfffffffffffffd60
ffff80000080539f:	ff ff ff 
ffff8000008053a2:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff8000008053a6:	48 8d 40 10          	lea    rax,[rax+0x10]
ffff8000008053aa:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:216
        break;
ffff8000008053ae:	eb 0a                	jmp    ffff8000008053ba <reg_device+0x29c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:217
    default:return -1;//不可能有其他情况
ffff8000008053b0:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff8000008053b5:	e9 da 00 00 00       	jmp    ffff800000805494 <reg_device+0x376>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:219
    }
    if(!p){
ffff8000008053ba:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
ffff8000008053bf:	75 2b                	jne    ffff8000008053ec <reg_device+0x2ce>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:220
        *pp=neo;
ffff8000008053c1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008053c5:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008053c9:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:221
        neo->prev=NULL;
ffff8000008053cc:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008053d0:	48 c7 80 98 00 00 00 	mov    QWORD PTR [rax+0x98],0x0
ffff8000008053d7:	00 00 00 00 
ffff8000008053db:	eb 3d                	jmp    ffff80000080541a <reg_device+0x2fc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:224 (discriminator 2)
    }
    else{
        for(;p->next;p=p->next);
ffff8000008053dd:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008053e1:	48 8b 80 90 00 00 00 	mov    rax,QWORD PTR [rax+0x90]
ffff8000008053e8:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:224 (discriminator 1)
ffff8000008053ec:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008053f0:	48 8b 80 90 00 00 00 	mov    rax,QWORD PTR [rax+0x90]
ffff8000008053f7:	48 85 c0             	test   rax,rax
ffff8000008053fa:	75 e1                	jne    ffff8000008053dd <reg_device+0x2bf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:225
        p->next=neo;
ffff8000008053fc:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000805400:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000805404:	48 89 90 90 00 00 00 	mov    QWORD PTR [rax+0x90],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:226
        neo->prev=p;
ffff80000080540b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080540f:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff800000805413:	48 89 90 98 00 00 00 	mov    QWORD PTR [rax+0x98],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:228
    }
    neo->next=NULL;
ffff80000080541a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080541e:	48 c7 80 90 00 00 00 	mov    QWORD PTR [rax+0x90],0x0
ffff800000805425:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:230
    //设置相应的请求函数
    switch (neo->stype)
ffff800000805429:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080542d:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff800000805430:	83 f8 04             	cmp    eax,0x4
ffff800000805433:	74 3b                	je     ffff800000805470 <reg_device+0x352>
ffff800000805435:	83 f8 04             	cmp    eax,0x4
ffff800000805438:	7f 56                	jg     ffff800000805490 <reg_device+0x372>
ffff80000080543a:	83 f8 03             	cmp    eax,0x3
ffff80000080543d:	74 21                	je     ffff800000805460 <reg_device+0x342>
ffff80000080543f:	83 f8 03             	cmp    eax,0x3
ffff800000805442:	7f 4c                	jg     ffff800000805490 <reg_device+0x372>
ffff800000805444:	83 f8 01             	cmp    eax,0x1
ffff800000805447:	74 07                	je     ffff800000805450 <reg_device+0x332>
ffff800000805449:	83 f8 02             	cmp    eax,0x2
ffff80000080544c:	74 32                	je     ffff800000805480 <reg_device+0x362>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:246
        break;
    case DEV_STYPE_TTY:
        neo->operi=OPERATIONS_TTY;
        break;
    default:
        break;
ffff80000080544e:	eb 40                	jmp    ffff800000805490 <reg_device+0x372>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:233
        neo->operi=OPERATIONS_HD;
ffff800000805450:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000805454:	c7 80 a0 00 00 00 00 	mov    DWORD PTR [rax+0xa0],0x0
ffff80000080545b:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:234
        break;
ffff80000080545e:	eb 31                	jmp    ffff800000805491 <reg_device+0x373>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:237
        neo->operi=OPERATIONS_MOUSE;
ffff800000805460:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000805464:	c7 80 a0 00 00 00 02 	mov    DWORD PTR [rax+0xa0],0x2
ffff80000080546b:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:238
        break;
ffff80000080546e:	eb 21                	jmp    ffff800000805491 <reg_device+0x373>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:240
        neo->operi=OPERATIONS_KEYBOARD;
ffff800000805470:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000805474:	c7 80 a0 00 00 00 03 	mov    DWORD PTR [rax+0xa0],0x3
ffff80000080547b:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:241
        break;
ffff80000080547e:	eb 11                	jmp    ffff800000805491 <reg_device+0x373>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:243
        neo->operi=OPERATIONS_TTY;
ffff800000805480:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000805484:	c7 80 a0 00 00 00 01 	mov    DWORD PTR [rax+0xa0],0x1
ffff80000080548b:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:244
        break;
ffff80000080548e:	eb 01                	jmp    ffff800000805491 <reg_device+0x373>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:246
        break;
ffff800000805490:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:248
    }
    return i;
ffff800000805491:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:249
}
ffff800000805494:	5d                   	pop    rbp
ffff800000805495:	c3                   	ret    

ffff800000805496 <reg_driver>:
reg_driver():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:253


int reg_driver(driver *drv)
{
ffff800000805496:	f3 0f 1e fa          	endbr64 
ffff80000080549a:	55                   	push   rbp
ffff80000080549b:	48 89 e5             	mov    rbp,rsp
ffff80000080549e:	48 8d 0d f9 ff ff ff 	lea    rcx,[rip+0xfffffffffffffff9]        # ffff80000080549e <reg_driver+0x8>
ffff8000008054a5:	49 bb 9a 9e 01 00 00 	movabs r11,0x19e9a
ffff8000008054ac:	00 00 00 
ffff8000008054af:	4c 01 d9             	add    rcx,r11
ffff8000008054b2:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:254
    for(int i=0;i<MAX_DRIVERS;i++)
ffff8000008054b6:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff8000008054bd:	e9 43 01 00 00       	jmp    ffff800000805605 <reg_driver+0x16f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:256
    {
        if(drvs[i].flag==DRV_FLAG_EMPTY)
ffff8000008054c2:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008054c9:	ff ff ff 
ffff8000008054cc:	48 8b 34 01          	mov    rsi,QWORD PTR [rcx+rax*1]
ffff8000008054d0:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008054d3:	48 63 d0             	movsxd rdx,eax
ffff8000008054d6:	48 89 d0             	mov    rax,rdx
ffff8000008054d9:	48 c1 e0 02          	shl    rax,0x2
ffff8000008054dd:	48 01 d0             	add    rax,rdx
ffff8000008054e0:	48 c1 e0 05          	shl    rax,0x5
ffff8000008054e4:	48 01 f0             	add    rax,rsi
ffff8000008054e7:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008054e9:	85 c0                	test   eax,eax
ffff8000008054eb:	0f 85 10 01 00 00    	jne    ffff800000805601 <reg_driver+0x16b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:258
        {
            drvs[i]=*drv;
ffff8000008054f1:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008054f8:	ff ff ff 
ffff8000008054fb:	48 8b 34 01          	mov    rsi,QWORD PTR [rcx+rax*1]
ffff8000008054ff:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000805502:	48 63 d0             	movsxd rdx,eax
ffff800000805505:	48 89 d0             	mov    rax,rdx
ffff800000805508:	48 c1 e0 02          	shl    rax,0x2
ffff80000080550c:	48 01 d0             	add    rax,rdx
ffff80000080550f:	48 c1 e0 05          	shl    rax,0x5
ffff800000805513:	48 8d 14 06          	lea    rdx,[rsi+rax*1]
ffff800000805517:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080551b:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff80000080551e:	48 8b 78 08          	mov    rdi,QWORD PTR [rax+0x8]
ffff800000805522:	48 89 32             	mov    QWORD PTR [rdx],rsi
ffff800000805525:	48 89 7a 08          	mov    QWORD PTR [rdx+0x8],rdi
ffff800000805529:	48 8b 70 10          	mov    rsi,QWORD PTR [rax+0x10]
ffff80000080552d:	48 8b 78 18          	mov    rdi,QWORD PTR [rax+0x18]
ffff800000805531:	48 89 72 10          	mov    QWORD PTR [rdx+0x10],rsi
ffff800000805535:	48 89 7a 18          	mov    QWORD PTR [rdx+0x18],rdi
ffff800000805539:	48 8b 70 20          	mov    rsi,QWORD PTR [rax+0x20]
ffff80000080553d:	48 8b 78 28          	mov    rdi,QWORD PTR [rax+0x28]
ffff800000805541:	48 89 72 20          	mov    QWORD PTR [rdx+0x20],rsi
ffff800000805545:	48 89 7a 28          	mov    QWORD PTR [rdx+0x28],rdi
ffff800000805549:	48 8b 70 30          	mov    rsi,QWORD PTR [rax+0x30]
ffff80000080554d:	48 8b 78 38          	mov    rdi,QWORD PTR [rax+0x38]
ffff800000805551:	48 89 72 30          	mov    QWORD PTR [rdx+0x30],rsi
ffff800000805555:	48 89 7a 38          	mov    QWORD PTR [rdx+0x38],rdi
ffff800000805559:	48 8b 70 40          	mov    rsi,QWORD PTR [rax+0x40]
ffff80000080555d:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
ffff800000805561:	48 89 72 40          	mov    QWORD PTR [rdx+0x40],rsi
ffff800000805565:	48 89 7a 48          	mov    QWORD PTR [rdx+0x48],rdi
ffff800000805569:	48 8b 70 50          	mov    rsi,QWORD PTR [rax+0x50]
ffff80000080556d:	48 8b 78 58          	mov    rdi,QWORD PTR [rax+0x58]
ffff800000805571:	48 89 72 50          	mov    QWORD PTR [rdx+0x50],rsi
ffff800000805575:	48 89 7a 58          	mov    QWORD PTR [rdx+0x58],rdi
ffff800000805579:	48 8b 70 60          	mov    rsi,QWORD PTR [rax+0x60]
ffff80000080557d:	48 8b 78 68          	mov    rdi,QWORD PTR [rax+0x68]
ffff800000805581:	48 89 72 60          	mov    QWORD PTR [rdx+0x60],rsi
ffff800000805585:	48 89 7a 68          	mov    QWORD PTR [rdx+0x68],rdi
ffff800000805589:	48 8b 70 70          	mov    rsi,QWORD PTR [rax+0x70]
ffff80000080558d:	48 8b 78 78          	mov    rdi,QWORD PTR [rax+0x78]
ffff800000805591:	48 89 72 70          	mov    QWORD PTR [rdx+0x70],rsi
ffff800000805595:	48 89 7a 78          	mov    QWORD PTR [rdx+0x78],rdi
ffff800000805599:	48 8b b0 80 00 00 00 	mov    rsi,QWORD PTR [rax+0x80]
ffff8000008055a0:	48 8b b8 88 00 00 00 	mov    rdi,QWORD PTR [rax+0x88]
ffff8000008055a7:	48 89 b2 80 00 00 00 	mov    QWORD PTR [rdx+0x80],rsi
ffff8000008055ae:	48 89 ba 88 00 00 00 	mov    QWORD PTR [rdx+0x88],rdi
ffff8000008055b5:	48 8b b0 90 00 00 00 	mov    rsi,QWORD PTR [rax+0x90]
ffff8000008055bc:	48 8b b8 98 00 00 00 	mov    rdi,QWORD PTR [rax+0x98]
ffff8000008055c3:	48 89 b2 90 00 00 00 	mov    QWORD PTR [rdx+0x90],rsi
ffff8000008055ca:	48 89 ba 98 00 00 00 	mov    QWORD PTR [rdx+0x98],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:259
            drvs[i].flag=DRV_FLAG_USED;
ffff8000008055d1:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff8000008055d8:	ff ff ff 
ffff8000008055db:	48 8b 0c 01          	mov    rcx,QWORD PTR [rcx+rax*1]
ffff8000008055df:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008055e2:	48 63 d0             	movsxd rdx,eax
ffff8000008055e5:	48 89 d0             	mov    rax,rdx
ffff8000008055e8:	48 c1 e0 02          	shl    rax,0x2
ffff8000008055ec:	48 01 d0             	add    rax,rdx
ffff8000008055ef:	48 c1 e0 05          	shl    rax,0x5
ffff8000008055f3:	48 01 c8             	add    rax,rcx
ffff8000008055f6:	c7 00 01 00 00 00    	mov    DWORD PTR [rax],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:260
            return i;
ffff8000008055fc:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008055ff:	eb 13                	jmp    ffff800000805614 <reg_driver+0x17e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:254 (discriminator 2)
    for(int i=0;i<MAX_DRIVERS;i++)
ffff800000805601:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:254 (discriminator 1)
ffff800000805605:	83 7d fc 1f          	cmp    DWORD PTR [rbp-0x4],0x1f
ffff800000805609:	0f 8e b3 fe ff ff    	jle    ffff8000008054c2 <reg_driver+0x2c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:263
        }
    }
    return -1;
ffff80000080560f:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:264
}
ffff800000805614:	5d                   	pop    rbp
ffff800000805615:	c3                   	ret    

ffff800000805616 <sys_find_dev>:
sys_find_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:267

int sys_find_dev(char *name)
{
ffff800000805616:	f3 0f 1e fa          	endbr64 
ffff80000080561a:	55                   	push   rbp
ffff80000080561b:	48 89 e5             	mov    rbp,rsp
ffff80000080561e:	41 57                	push   r15
ffff800000805620:	53                   	push   rbx
ffff800000805621:	48 83 ec 20          	sub    rsp,0x20
ffff800000805625:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000805625 <sys_find_dev+0xf>
ffff80000080562c:	49 bb 13 9d 01 00 00 	movabs r11,0x19d13
ffff800000805633:	00 00 00 
ffff800000805636:	4c 01 db             	add    rbx,r11
ffff800000805639:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:268
    for(int i=0;i<MAX_DEVICES;i++)
ffff80000080563d:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000805644:	e9 93 00 00 00       	jmp    ffff8000008056dc <sys_find_dev+0xc6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:270
    {
        if(devs[i].flag!=DEV_FLAG_EMPTY&&strcmp(name,devs[i].name)==0)
ffff800000805649:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000805650:	ff ff ff 
ffff800000805653:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000805657:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080565a:	48 63 d0             	movsxd rdx,eax
ffff80000080565d:	48 89 d0             	mov    rax,rdx
ffff800000805660:	48 c1 e0 02          	shl    rax,0x2
ffff800000805664:	48 01 d0             	add    rax,rdx
ffff800000805667:	48 c1 e0 02          	shl    rax,0x2
ffff80000080566b:	48 01 d0             	add    rax,rdx
ffff80000080566e:	48 c1 e0 03          	shl    rax,0x3
ffff800000805672:	48 01 c8             	add    rax,rcx
ffff800000805675:	48 83 c0 10          	add    rax,0x10
ffff800000805679:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080567b:	85 c0                	test   eax,eax
ffff80000080567d:	74 59                	je     ffff8000008056d8 <sys_find_dev+0xc2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:270 (discriminator 1)
ffff80000080567f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000805682:	48 63 d0             	movsxd rdx,eax
ffff800000805685:	48 89 d0             	mov    rax,rdx
ffff800000805688:	48 c1 e0 02          	shl    rax,0x2
ffff80000080568c:	48 01 d0             	add    rax,rdx
ffff80000080568f:	48 c1 e0 02          	shl    rax,0x2
ffff800000805693:	48 01 d0             	add    rax,rdx
ffff800000805696:	48 c1 e0 03          	shl    rax,0x3
ffff80000080569a:	48 8d 50 10          	lea    rdx,[rax+0x10]
ffff80000080569e:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff8000008056a5:	ff ff ff 
ffff8000008056a8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008056ac:	48 01 d0             	add    rax,rdx
ffff8000008056af:	48 8d 50 04          	lea    rdx,[rax+0x4]
ffff8000008056b3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008056b7:	48 89 d6             	mov    rsi,rdx
ffff8000008056ba:	48 89 c7             	mov    rdi,rax
ffff8000008056bd:	49 89 df             	mov    r15,rbx
ffff8000008056c0:	48 b8 79 41 ff ff ff 	movabs rax,0xffffffffffff4179
ffff8000008056c7:	ff ff ff 
ffff8000008056ca:	48 01 d8             	add    rax,rbx
ffff8000008056cd:	ff d0                	call   rax
ffff8000008056cf:	85 c0                	test   eax,eax
ffff8000008056d1:	75 05                	jne    ffff8000008056d8 <sys_find_dev+0xc2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:271
            return i;
ffff8000008056d3:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008056d6:	eb 13                	jmp    ffff8000008056eb <sys_find_dev+0xd5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:268 (discriminator 2)
    for(int i=0;i<MAX_DEVICES;i++)
ffff8000008056d8:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:268 (discriminator 1)
ffff8000008056dc:	83 7d ec 3f          	cmp    DWORD PTR [rbp-0x14],0x3f
ffff8000008056e0:	0f 8e 63 ff ff ff    	jle    ffff800000805649 <sys_find_dev+0x33>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:273
    }
    return -1;
ffff8000008056e6:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:274
}
ffff8000008056eb:	48 83 c4 20          	add    rsp,0x20
ffff8000008056ef:	5b                   	pop    rbx
ffff8000008056f0:	41 5f                	pop    r15
ffff8000008056f2:	5d                   	pop    rbp
ffff8000008056f3:	c3                   	ret    

ffff8000008056f4 <sys_operate_dev>:
sys_operate_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:277

int sys_operate_dev(char *name,int func,driver_args* args)
{
ffff8000008056f4:	f3 0f 1e fa          	endbr64 
ffff8000008056f8:	55                   	push   rbp
ffff8000008056f9:	48 89 e5             	mov    rbp,rsp
ffff8000008056fc:	41 57                	push   r15
ffff8000008056fe:	53                   	push   rbx
ffff8000008056ff:	48 83 ec 30          	sub    rsp,0x30
ffff800000805703:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000805703 <sys_operate_dev+0xf>
ffff80000080570a:	49 bb 35 9c 01 00 00 	movabs r11,0x19c35
ffff800000805711:	00 00 00 
ffff800000805714:	4c 01 db             	add    rbx,r11
ffff800000805717:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff80000080571b:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
ffff80000080571e:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:278
    int i=0;
ffff800000805722:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:279
    for(;i<MAX_DEVICES;i++)
ffff800000805729:	e9 8e 00 00 00       	jmp    ffff8000008057bc <sys_operate_dev+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:281
    {
        if(devs[i].flag!=DEV_FLAG_EMPTY&&strcmp(name,devs[i].name)==0)
ffff80000080572e:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000805735:	ff ff ff 
ffff800000805738:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff80000080573c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080573f:	48 63 d0             	movsxd rdx,eax
ffff800000805742:	48 89 d0             	mov    rax,rdx
ffff800000805745:	48 c1 e0 02          	shl    rax,0x2
ffff800000805749:	48 01 d0             	add    rax,rdx
ffff80000080574c:	48 c1 e0 02          	shl    rax,0x2
ffff800000805750:	48 01 d0             	add    rax,rdx
ffff800000805753:	48 c1 e0 03          	shl    rax,0x3
ffff800000805757:	48 01 c8             	add    rax,rcx
ffff80000080575a:	48 83 c0 10          	add    rax,0x10
ffff80000080575e:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000805760:	85 c0                	test   eax,eax
ffff800000805762:	74 54                	je     ffff8000008057b8 <sys_operate_dev+0xc4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:281 (discriminator 1)
ffff800000805764:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000805767:	48 63 d0             	movsxd rdx,eax
ffff80000080576a:	48 89 d0             	mov    rax,rdx
ffff80000080576d:	48 c1 e0 02          	shl    rax,0x2
ffff800000805771:	48 01 d0             	add    rax,rdx
ffff800000805774:	48 c1 e0 02          	shl    rax,0x2
ffff800000805778:	48 01 d0             	add    rax,rdx
ffff80000080577b:	48 c1 e0 03          	shl    rax,0x3
ffff80000080577f:	48 8d 50 10          	lea    rdx,[rax+0x10]
ffff800000805783:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff80000080578a:	ff ff ff 
ffff80000080578d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805791:	48 01 d0             	add    rax,rdx
ffff800000805794:	48 8d 50 04          	lea    rdx,[rax+0x4]
ffff800000805798:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080579c:	48 89 d6             	mov    rsi,rdx
ffff80000080579f:	48 89 c7             	mov    rdi,rax
ffff8000008057a2:	49 89 df             	mov    r15,rbx
ffff8000008057a5:	48 b8 79 41 ff ff ff 	movabs rax,0xffffffffffff4179
ffff8000008057ac:	ff ff ff 
ffff8000008057af:	48 01 d8             	add    rax,rbx
ffff8000008057b2:	ff d0                	call   rax
ffff8000008057b4:	85 c0                	test   eax,eax
ffff8000008057b6:	74 10                	je     ffff8000008057c8 <sys_operate_dev+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:279
    for(;i<MAX_DEVICES;i++)
ffff8000008057b8:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:279 (discriminator 1)
ffff8000008057bc:	83 7d ec 3f          	cmp    DWORD PTR [rbp-0x14],0x3f
ffff8000008057c0:	0f 8e 68 ff ff ff    	jle    ffff80000080572e <sys_operate_dev+0x3a>
ffff8000008057c6:	eb 01                	jmp    ffff8000008057c9 <sys_operate_dev+0xd5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:282
            break;
ffff8000008057c8:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:284
    }
    if(i==MAX_DEVICES)return -1;
ffff8000008057c9:	83 7d ec 40          	cmp    DWORD PTR [rbp-0x14],0x40
ffff8000008057cd:	75 0a                	jne    ffff8000008057d9 <sys_operate_dev+0xe5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:284 (discriminator 1)
ffff8000008057cf:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff8000008057d4:	e9 68 03 00 00       	jmp    ffff800000805b41 <sys_operate_dev+0x44d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:285
    switch (func) {
ffff8000008057d9:	83 7d d4 0b          	cmp    DWORD PTR [rbp-0x2c],0xb
ffff8000008057dd:	0f 87 59 03 00 00    	ja     ffff800000805b3c <sys_operate_dev+0x448>
ffff8000008057e3:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff8000008057e6:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008057ed:	00 
ffff8000008057ee:	48 8d 05 1b 61 01 00 	lea    rax,[rip+0x1611b]        # ffff80000081b910 <.LC4+0x4>
ffff8000008057f5:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff8000008057f9:	48 8d 15 10 61 01 00 	lea    rdx,[rip+0x16110]        # ffff80000081b910 <.LC4+0x4>
ffff800000805800:	48 01 d0             	add    rax,rdx
ffff800000805803:	3e ff e0             	notrack jmp rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:286
        case DRVF_OPEN :return devs[i].drv->open(args);
ffff800000805806:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff80000080580d:	ff ff ff 
ffff800000805810:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000805814:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000805817:	48 63 d0             	movsxd rdx,eax
ffff80000080581a:	48 89 d0             	mov    rax,rdx
ffff80000080581d:	48 c1 e0 02          	shl    rax,0x2
ffff800000805821:	48 01 d0             	add    rax,rdx
ffff800000805824:	48 c1 e0 02          	shl    rax,0x2
ffff800000805828:	48 01 d0             	add    rax,rdx
ffff80000080582b:	48 c1 e0 03          	shl    rax,0x3
ffff80000080582f:	48 01 c8             	add    rax,rcx
ffff800000805832:	48 83 c0 78          	add    rax,0x78
ffff800000805836:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000805839:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff80000080583d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000805841:	48 89 c7             	mov    rdi,rax
ffff800000805844:	ff d2                	call   rdx
ffff800000805846:	e9 f6 02 00 00       	jmp    ffff800000805b41 <sys_operate_dev+0x44d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:287
        case DRVF_CLOSE:return devs[i].drv->close(args);
ffff80000080584b:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000805852:	ff ff ff 
ffff800000805855:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000805859:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080585c:	48 63 d0             	movsxd rdx,eax
ffff80000080585f:	48 89 d0             	mov    rax,rdx
ffff800000805862:	48 c1 e0 02          	shl    rax,0x2
ffff800000805866:	48 01 d0             	add    rax,rdx
ffff800000805869:	48 c1 e0 02          	shl    rax,0x2
ffff80000080586d:	48 01 d0             	add    rax,rdx
ffff800000805870:	48 c1 e0 03          	shl    rax,0x3
ffff800000805874:	48 01 c8             	add    rax,rcx
ffff800000805877:	48 83 c0 78          	add    rax,0x78
ffff80000080587b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080587e:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff800000805882:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000805886:	48 89 c7             	mov    rdi,rax
ffff800000805889:	ff d2                	call   rdx
ffff80000080588b:	e9 b1 02 00 00       	jmp    ffff800000805b41 <sys_operate_dev+0x44d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:288
        case DRVF_READ :return devs[i].drv->read(args);
ffff800000805890:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000805897:	ff ff ff 
ffff80000080589a:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff80000080589e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008058a1:	48 63 d0             	movsxd rdx,eax
ffff8000008058a4:	48 89 d0             	mov    rax,rdx
ffff8000008058a7:	48 c1 e0 02          	shl    rax,0x2
ffff8000008058ab:	48 01 d0             	add    rax,rdx
ffff8000008058ae:	48 c1 e0 02          	shl    rax,0x2
ffff8000008058b2:	48 01 d0             	add    rax,rdx
ffff8000008058b5:	48 c1 e0 03          	shl    rax,0x3
ffff8000008058b9:	48 01 c8             	add    rax,rcx
ffff8000008058bc:	48 83 c0 78          	add    rax,0x78
ffff8000008058c0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008058c3:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
ffff8000008058c7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008058cb:	48 89 c7             	mov    rdi,rax
ffff8000008058ce:	ff d2                	call   rdx
ffff8000008058d0:	e9 6c 02 00 00       	jmp    ffff800000805b41 <sys_operate_dev+0x44d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:289
        case DRVF_WRITE:return devs[i].drv->write(args);
ffff8000008058d5:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff8000008058dc:	ff ff ff 
ffff8000008058df:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff8000008058e3:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008058e6:	48 63 d0             	movsxd rdx,eax
ffff8000008058e9:	48 89 d0             	mov    rax,rdx
ffff8000008058ec:	48 c1 e0 02          	shl    rax,0x2
ffff8000008058f0:	48 01 d0             	add    rax,rdx
ffff8000008058f3:	48 c1 e0 02          	shl    rax,0x2
ffff8000008058f7:	48 01 d0             	add    rax,rdx
ffff8000008058fa:	48 c1 e0 03          	shl    rax,0x3
ffff8000008058fe:	48 01 c8             	add    rax,rcx
ffff800000805901:	48 83 c0 78          	add    rax,0x78
ffff800000805905:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000805908:	48 8b 50 20          	mov    rdx,QWORD PTR [rax+0x20]
ffff80000080590c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000805910:	48 89 c7             	mov    rdi,rax
ffff800000805913:	ff d2                	call   rdx
ffff800000805915:	e9 27 02 00 00       	jmp    ffff800000805b41 <sys_operate_dev+0x44d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:290
        case DRVF_CHK  :return devs[i].drv->check(args);
ffff80000080591a:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000805921:	ff ff ff 
ffff800000805924:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000805928:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080592b:	48 63 d0             	movsxd rdx,eax
ffff80000080592e:	48 89 d0             	mov    rax,rdx
ffff800000805931:	48 c1 e0 02          	shl    rax,0x2
ffff800000805935:	48 01 d0             	add    rax,rdx
ffff800000805938:	48 c1 e0 02          	shl    rax,0x2
ffff80000080593c:	48 01 d0             	add    rax,rdx
ffff80000080593f:	48 c1 e0 03          	shl    rax,0x3
ffff800000805943:	48 01 c8             	add    rax,rcx
ffff800000805946:	48 83 c0 78          	add    rax,0x78
ffff80000080594a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080594d:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
ffff800000805951:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000805955:	48 89 c7             	mov    rdi,rax
ffff800000805958:	ff d2                	call   rdx
ffff80000080595a:	e9 e2 01 00 00       	jmp    ffff800000805b41 <sys_operate_dev+0x44d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:291
        case DRVF_RSVD :return devs[i].drv->reserved(args);
ffff80000080595f:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000805966:	ff ff ff 
ffff800000805969:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff80000080596d:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000805970:	48 63 d0             	movsxd rdx,eax
ffff800000805973:	48 89 d0             	mov    rax,rdx
ffff800000805976:	48 c1 e0 02          	shl    rax,0x2
ffff80000080597a:	48 01 d0             	add    rax,rdx
ffff80000080597d:	48 c1 e0 02          	shl    rax,0x2
ffff800000805981:	48 01 d0             	add    rax,rdx
ffff800000805984:	48 c1 e0 03          	shl    rax,0x3
ffff800000805988:	48 01 c8             	add    rax,rcx
ffff80000080598b:	48 83 c0 78          	add    rax,0x78
ffff80000080598f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000805992:	48 8b 50 30          	mov    rdx,QWORD PTR [rax+0x30]
ffff800000805996:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080599a:	48 89 c7             	mov    rdi,rax
ffff80000080599d:	ff d2                	call   rdx
ffff80000080599f:	e9 9d 01 00 00       	jmp    ffff800000805b41 <sys_operate_dev+0x44d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:292
        case DRVF_INT  :return devs[i].drv->inthandler(args);
ffff8000008059a4:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff8000008059ab:	ff ff ff 
ffff8000008059ae:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff8000008059b2:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008059b5:	48 63 d0             	movsxd rdx,eax
ffff8000008059b8:	48 89 d0             	mov    rax,rdx
ffff8000008059bb:	48 c1 e0 02          	shl    rax,0x2
ffff8000008059bf:	48 01 d0             	add    rax,rdx
ffff8000008059c2:	48 c1 e0 02          	shl    rax,0x2
ffff8000008059c6:	48 01 d0             	add    rax,rdx
ffff8000008059c9:	48 c1 e0 03          	shl    rax,0x3
ffff8000008059cd:	48 01 c8             	add    rax,rcx
ffff8000008059d0:	48 83 c0 78          	add    rax,0x78
ffff8000008059d4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008059d7:	48 8b 50 38          	mov    rdx,QWORD PTR [rax+0x38]
ffff8000008059db:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008059df:	48 89 c7             	mov    rdi,rax
ffff8000008059e2:	ff d2                	call   rdx
ffff8000008059e4:	e9 58 01 00 00       	jmp    ffff800000805b41 <sys_operate_dev+0x44d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:293
        case DRVF_FIND :return devs[i].drv->find(args);
ffff8000008059e9:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff8000008059f0:	ff ff ff 
ffff8000008059f3:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff8000008059f7:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008059fa:	48 63 d0             	movsxd rdx,eax
ffff8000008059fd:	48 89 d0             	mov    rax,rdx
ffff800000805a00:	48 c1 e0 02          	shl    rax,0x2
ffff800000805a04:	48 01 d0             	add    rax,rdx
ffff800000805a07:	48 c1 e0 02          	shl    rax,0x2
ffff800000805a0b:	48 01 d0             	add    rax,rdx
ffff800000805a0e:	48 c1 e0 03          	shl    rax,0x3
ffff800000805a12:	48 01 c8             	add    rax,rcx
ffff800000805a15:	48 83 c0 78          	add    rax,0x78
ffff800000805a19:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000805a1c:	48 8b 50 40          	mov    rdx,QWORD PTR [rax+0x40]
ffff800000805a20:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000805a24:	48 89 c7             	mov    rdi,rax
ffff800000805a27:	ff d2                	call   rdx
ffff800000805a29:	e9 13 01 00 00       	jmp    ffff800000805b41 <sys_operate_dev+0x44d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:294
        case DRVF_RM   :return devs[i].drv->rm(args);
ffff800000805a2e:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000805a35:	ff ff ff 
ffff800000805a38:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000805a3c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000805a3f:	48 63 d0             	movsxd rdx,eax
ffff800000805a42:	48 89 d0             	mov    rax,rdx
ffff800000805a45:	48 c1 e0 02          	shl    rax,0x2
ffff800000805a49:	48 01 d0             	add    rax,rdx
ffff800000805a4c:	48 c1 e0 02          	shl    rax,0x2
ffff800000805a50:	48 01 d0             	add    rax,rdx
ffff800000805a53:	48 c1 e0 03          	shl    rax,0x3
ffff800000805a57:	48 01 c8             	add    rax,rcx
ffff800000805a5a:	48 83 c0 78          	add    rax,0x78
ffff800000805a5e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000805a61:	48 8b 50 48          	mov    rdx,QWORD PTR [rax+0x48]
ffff800000805a65:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000805a69:	48 89 c7             	mov    rdi,rax
ffff800000805a6c:	ff d2                	call   rdx
ffff800000805a6e:	e9 ce 00 00 00       	jmp    ffff800000805b41 <sys_operate_dev+0x44d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:295
        case DRVF_TOUCH:return devs[i].drv->touch(args);
ffff800000805a73:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000805a7a:	ff ff ff 
ffff800000805a7d:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000805a81:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000805a84:	48 63 d0             	movsxd rdx,eax
ffff800000805a87:	48 89 d0             	mov    rax,rdx
ffff800000805a8a:	48 c1 e0 02          	shl    rax,0x2
ffff800000805a8e:	48 01 d0             	add    rax,rdx
ffff800000805a91:	48 c1 e0 02          	shl    rax,0x2
ffff800000805a95:	48 01 d0             	add    rax,rdx
ffff800000805a98:	48 c1 e0 03          	shl    rax,0x3
ffff800000805a9c:	48 01 c8             	add    rax,rcx
ffff800000805a9f:	48 83 c0 78          	add    rax,0x78
ffff800000805aa3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000805aa6:	48 8b 50 50          	mov    rdx,QWORD PTR [rax+0x50]
ffff800000805aaa:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000805aae:	48 89 c7             	mov    rdi,rax
ffff800000805ab1:	ff d2                	call   rdx
ffff800000805ab3:	e9 89 00 00 00       	jmp    ffff800000805b41 <sys_operate_dev+0x44d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:296
        case DRVF_MKDIR:return devs[i].drv->mkdir(args);
ffff800000805ab8:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000805abf:	ff ff ff 
ffff800000805ac2:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000805ac6:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000805ac9:	48 63 d0             	movsxd rdx,eax
ffff800000805acc:	48 89 d0             	mov    rax,rdx
ffff800000805acf:	48 c1 e0 02          	shl    rax,0x2
ffff800000805ad3:	48 01 d0             	add    rax,rdx
ffff800000805ad6:	48 c1 e0 02          	shl    rax,0x2
ffff800000805ada:	48 01 d0             	add    rax,rdx
ffff800000805add:	48 c1 e0 03          	shl    rax,0x3
ffff800000805ae1:	48 01 c8             	add    rax,rcx
ffff800000805ae4:	48 83 c0 78          	add    rax,0x78
ffff800000805ae8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000805aeb:	48 8b 50 58          	mov    rdx,QWORD PTR [rax+0x58]
ffff800000805aef:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000805af3:	48 89 c7             	mov    rdi,rax
ffff800000805af6:	ff d2                	call   rdx
ffff800000805af8:	eb 47                	jmp    ffff800000805b41 <sys_operate_dev+0x44d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:297
        case DRVF_LS:return    devs[i].drv->ls(args);
ffff800000805afa:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000805b01:	ff ff ff 
ffff800000805b04:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000805b08:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000805b0b:	48 63 d0             	movsxd rdx,eax
ffff800000805b0e:	48 89 d0             	mov    rax,rdx
ffff800000805b11:	48 c1 e0 02          	shl    rax,0x2
ffff800000805b15:	48 01 d0             	add    rax,rdx
ffff800000805b18:	48 c1 e0 02          	shl    rax,0x2
ffff800000805b1c:	48 01 d0             	add    rax,rdx
ffff800000805b1f:	48 c1 e0 03          	shl    rax,0x3
ffff800000805b23:	48 01 c8             	add    rax,rcx
ffff800000805b26:	48 83 c0 78          	add    rax,0x78
ffff800000805b2a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000805b2d:	48 8b 50 60          	mov    rdx,QWORD PTR [rax+0x60]
ffff800000805b31:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000805b35:	48 89 c7             	mov    rdi,rax
ffff800000805b38:	ff d2                	call   rdx
ffff800000805b3a:	eb 05                	jmp    ffff800000805b41 <sys_operate_dev+0x44d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:299
    }
    return -1;
ffff800000805b3c:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:300
}
ffff800000805b41:	48 83 c4 30          	add    rsp,0x30
ffff800000805b45:	5b                   	pop    rbx
ffff800000805b46:	41 5f                	pop    r15
ffff800000805b48:	5d                   	pop    rbp
ffff800000805b49:	c3                   	ret    

ffff800000805b4a <call_drv_func>:
call_drv_func():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:302
int call_drv_func(int drv_n,int func_n,driver_args *args)
{
ffff800000805b4a:	f3 0f 1e fa          	endbr64 
ffff800000805b4e:	55                   	push   rbp
ffff800000805b4f:	48 89 e5             	mov    rbp,rsp
ffff800000805b52:	48 83 ec 10          	sub    rsp,0x10
ffff800000805b56:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000805b56 <call_drv_func+0xc>
ffff800000805b5d:	49 bb e2 97 01 00 00 	movabs r11,0x197e2
ffff800000805b64:	00 00 00 
ffff800000805b67:	4c 01 d8             	add    rax,r11
ffff800000805b6a:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffff800000805b6d:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
ffff800000805b70:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:303
    if(drvs[drv_n].flag==DRV_FLAG_EMPTY)return -1;
ffff800000805b74:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000805b7b:	ff ff ff 
ffff800000805b7e:	48 8b 34 10          	mov    rsi,QWORD PTR [rax+rdx*1]
ffff800000805b82:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000805b85:	48 63 ca             	movsxd rcx,edx
ffff800000805b88:	48 89 ca             	mov    rdx,rcx
ffff800000805b8b:	48 c1 e2 02          	shl    rdx,0x2
ffff800000805b8f:	48 01 ca             	add    rdx,rcx
ffff800000805b92:	48 c1 e2 05          	shl    rdx,0x5
ffff800000805b96:	48 01 f2             	add    rdx,rsi
ffff800000805b99:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000805b9b:	85 d2                	test   edx,edx
ffff800000805b9d:	75 0a                	jne    ffff800000805ba9 <call_drv_func+0x5f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:303 (discriminator 1)
ffff800000805b9f:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000805ba4:	e9 e1 02 00 00       	jmp    ffff800000805e8a <call_drv_func+0x340>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:306
    /*driverfunc f=drvs[drv_n].func_thunk[func_n];
    return f(args);*/
    switch (func_n) {
ffff800000805ba9:	83 7d f8 0b          	cmp    DWORD PTR [rbp-0x8],0xb
ffff800000805bad:	0f 87 d2 02 00 00    	ja     ffff800000805e85 <call_drv_func+0x33b>
ffff800000805bb3:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff800000805bb6:	48 8d 0c d5 00 00 00 	lea    rcx,[rdx*8+0x0]
ffff800000805bbd:	00 
ffff800000805bbe:	48 8d 15 ab 5d 01 00 	lea    rdx,[rip+0x15dab]        # ffff80000081b970 <.LC4+0x64>
ffff800000805bc5:	48 8b 14 11          	mov    rdx,QWORD PTR [rcx+rdx*1]
ffff800000805bc9:	48 8d 0d a0 5d 01 00 	lea    rcx,[rip+0x15da0]        # ffff80000081b970 <.LC4+0x64>
ffff800000805bd0:	48 01 ca             	add    rdx,rcx
ffff800000805bd3:	3e ff e2             	notrack jmp rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:307
        case DRVF_OPEN :return drvs[drv_n].open(args);
ffff800000805bd6:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000805bdd:	ff ff ff 
ffff800000805be0:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff800000805be4:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000805be7:	48 63 d0             	movsxd rdx,eax
ffff800000805bea:	48 89 d0             	mov    rax,rdx
ffff800000805bed:	48 c1 e0 02          	shl    rax,0x2
ffff800000805bf1:	48 01 d0             	add    rax,rdx
ffff800000805bf4:	48 c1 e0 05          	shl    rax,0x5
ffff800000805bf8:	48 01 c8             	add    rax,rcx
ffff800000805bfb:	48 83 c0 08          	add    rax,0x8
ffff800000805bff:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805c02:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000805c06:	48 89 c7             	mov    rdi,rax
ffff800000805c09:	ff d2                	call   rdx
ffff800000805c0b:	e9 7a 02 00 00       	jmp    ffff800000805e8a <call_drv_func+0x340>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:308
        case DRVF_CLOSE:return drvs[drv_n].close(args);
ffff800000805c10:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000805c17:	ff ff ff 
ffff800000805c1a:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff800000805c1e:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000805c21:	48 63 d0             	movsxd rdx,eax
ffff800000805c24:	48 89 d0             	mov    rax,rdx
ffff800000805c27:	48 c1 e0 02          	shl    rax,0x2
ffff800000805c2b:	48 01 d0             	add    rax,rdx
ffff800000805c2e:	48 c1 e0 05          	shl    rax,0x5
ffff800000805c32:	48 01 c8             	add    rax,rcx
ffff800000805c35:	48 83 c0 10          	add    rax,0x10
ffff800000805c39:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805c3c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000805c40:	48 89 c7             	mov    rdi,rax
ffff800000805c43:	ff d2                	call   rdx
ffff800000805c45:	e9 40 02 00 00       	jmp    ffff800000805e8a <call_drv_func+0x340>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:309
        case DRVF_READ :return drvs[drv_n].read(args);
ffff800000805c4a:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000805c51:	ff ff ff 
ffff800000805c54:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff800000805c58:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000805c5b:	48 63 d0             	movsxd rdx,eax
ffff800000805c5e:	48 89 d0             	mov    rax,rdx
ffff800000805c61:	48 c1 e0 02          	shl    rax,0x2
ffff800000805c65:	48 01 d0             	add    rax,rdx
ffff800000805c68:	48 c1 e0 05          	shl    rax,0x5
ffff800000805c6c:	48 01 c8             	add    rax,rcx
ffff800000805c6f:	48 83 c0 18          	add    rax,0x18
ffff800000805c73:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805c76:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000805c7a:	48 89 c7             	mov    rdi,rax
ffff800000805c7d:	ff d2                	call   rdx
ffff800000805c7f:	e9 06 02 00 00       	jmp    ffff800000805e8a <call_drv_func+0x340>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:310
        case DRVF_WRITE:return drvs[drv_n].write(args);
ffff800000805c84:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000805c8b:	ff ff ff 
ffff800000805c8e:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff800000805c92:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000805c95:	48 63 d0             	movsxd rdx,eax
ffff800000805c98:	48 89 d0             	mov    rax,rdx
ffff800000805c9b:	48 c1 e0 02          	shl    rax,0x2
ffff800000805c9f:	48 01 d0             	add    rax,rdx
ffff800000805ca2:	48 c1 e0 05          	shl    rax,0x5
ffff800000805ca6:	48 01 c8             	add    rax,rcx
ffff800000805ca9:	48 83 c0 20          	add    rax,0x20
ffff800000805cad:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805cb0:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000805cb4:	48 89 c7             	mov    rdi,rax
ffff800000805cb7:	ff d2                	call   rdx
ffff800000805cb9:	e9 cc 01 00 00       	jmp    ffff800000805e8a <call_drv_func+0x340>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:311
        case DRVF_CHK  :return drvs[drv_n].check(args);
ffff800000805cbe:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000805cc5:	ff ff ff 
ffff800000805cc8:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff800000805ccc:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000805ccf:	48 63 d0             	movsxd rdx,eax
ffff800000805cd2:	48 89 d0             	mov    rax,rdx
ffff800000805cd5:	48 c1 e0 02          	shl    rax,0x2
ffff800000805cd9:	48 01 d0             	add    rax,rdx
ffff800000805cdc:	48 c1 e0 05          	shl    rax,0x5
ffff800000805ce0:	48 01 c8             	add    rax,rcx
ffff800000805ce3:	48 83 c0 28          	add    rax,0x28
ffff800000805ce7:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805cea:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000805cee:	48 89 c7             	mov    rdi,rax
ffff800000805cf1:	ff d2                	call   rdx
ffff800000805cf3:	e9 92 01 00 00       	jmp    ffff800000805e8a <call_drv_func+0x340>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:312
        case DRVF_RSVD :return drvs[drv_n].reserved(args);
ffff800000805cf8:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000805cff:	ff ff ff 
ffff800000805d02:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff800000805d06:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000805d09:	48 63 d0             	movsxd rdx,eax
ffff800000805d0c:	48 89 d0             	mov    rax,rdx
ffff800000805d0f:	48 c1 e0 02          	shl    rax,0x2
ffff800000805d13:	48 01 d0             	add    rax,rdx
ffff800000805d16:	48 c1 e0 05          	shl    rax,0x5
ffff800000805d1a:	48 01 c8             	add    rax,rcx
ffff800000805d1d:	48 83 c0 30          	add    rax,0x30
ffff800000805d21:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805d24:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000805d28:	48 89 c7             	mov    rdi,rax
ffff800000805d2b:	ff d2                	call   rdx
ffff800000805d2d:	e9 58 01 00 00       	jmp    ffff800000805e8a <call_drv_func+0x340>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:313
        case DRVF_INT  :return drvs[drv_n].inthandler(args);
ffff800000805d32:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000805d39:	ff ff ff 
ffff800000805d3c:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff800000805d40:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000805d43:	48 63 d0             	movsxd rdx,eax
ffff800000805d46:	48 89 d0             	mov    rax,rdx
ffff800000805d49:	48 c1 e0 02          	shl    rax,0x2
ffff800000805d4d:	48 01 d0             	add    rax,rdx
ffff800000805d50:	48 c1 e0 05          	shl    rax,0x5
ffff800000805d54:	48 01 c8             	add    rax,rcx
ffff800000805d57:	48 83 c0 38          	add    rax,0x38
ffff800000805d5b:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805d5e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000805d62:	48 89 c7             	mov    rdi,rax
ffff800000805d65:	ff d2                	call   rdx
ffff800000805d67:	e9 1e 01 00 00       	jmp    ffff800000805e8a <call_drv_func+0x340>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:314
        case DRVF_FIND :return drvs[drv_n].find(args);
ffff800000805d6c:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000805d73:	ff ff ff 
ffff800000805d76:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff800000805d7a:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000805d7d:	48 63 d0             	movsxd rdx,eax
ffff800000805d80:	48 89 d0             	mov    rax,rdx
ffff800000805d83:	48 c1 e0 02          	shl    rax,0x2
ffff800000805d87:	48 01 d0             	add    rax,rdx
ffff800000805d8a:	48 c1 e0 05          	shl    rax,0x5
ffff800000805d8e:	48 01 c8             	add    rax,rcx
ffff800000805d91:	48 83 c0 40          	add    rax,0x40
ffff800000805d95:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805d98:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000805d9c:	48 89 c7             	mov    rdi,rax
ffff800000805d9f:	ff d2                	call   rdx
ffff800000805da1:	e9 e4 00 00 00       	jmp    ffff800000805e8a <call_drv_func+0x340>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:315
        case DRVF_RM   :return drvs[drv_n].rm(args);
ffff800000805da6:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000805dad:	ff ff ff 
ffff800000805db0:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff800000805db4:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000805db7:	48 63 d0             	movsxd rdx,eax
ffff800000805dba:	48 89 d0             	mov    rax,rdx
ffff800000805dbd:	48 c1 e0 02          	shl    rax,0x2
ffff800000805dc1:	48 01 d0             	add    rax,rdx
ffff800000805dc4:	48 c1 e0 05          	shl    rax,0x5
ffff800000805dc8:	48 01 c8             	add    rax,rcx
ffff800000805dcb:	48 83 c0 48          	add    rax,0x48
ffff800000805dcf:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805dd2:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000805dd6:	48 89 c7             	mov    rdi,rax
ffff800000805dd9:	ff d2                	call   rdx
ffff800000805ddb:	e9 aa 00 00 00       	jmp    ffff800000805e8a <call_drv_func+0x340>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:316
        case DRVF_TOUCH:return drvs[drv_n].touch(args);
ffff800000805de0:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000805de7:	ff ff ff 
ffff800000805dea:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff800000805dee:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000805df1:	48 63 d0             	movsxd rdx,eax
ffff800000805df4:	48 89 d0             	mov    rax,rdx
ffff800000805df7:	48 c1 e0 02          	shl    rax,0x2
ffff800000805dfb:	48 01 d0             	add    rax,rdx
ffff800000805dfe:	48 c1 e0 05          	shl    rax,0x5
ffff800000805e02:	48 01 c8             	add    rax,rcx
ffff800000805e05:	48 83 c0 50          	add    rax,0x50
ffff800000805e09:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805e0c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000805e10:	48 89 c7             	mov    rdi,rax
ffff800000805e13:	ff d2                	call   rdx
ffff800000805e15:	eb 73                	jmp    ffff800000805e8a <call_drv_func+0x340>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:317
        case DRVF_MKDIR:return drvs[drv_n].mkdir(args);
ffff800000805e17:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000805e1e:	ff ff ff 
ffff800000805e21:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff800000805e25:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000805e28:	48 63 d0             	movsxd rdx,eax
ffff800000805e2b:	48 89 d0             	mov    rax,rdx
ffff800000805e2e:	48 c1 e0 02          	shl    rax,0x2
ffff800000805e32:	48 01 d0             	add    rax,rdx
ffff800000805e35:	48 c1 e0 05          	shl    rax,0x5
ffff800000805e39:	48 01 c8             	add    rax,rcx
ffff800000805e3c:	48 83 c0 58          	add    rax,0x58
ffff800000805e40:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805e43:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000805e47:	48 89 c7             	mov    rdi,rax
ffff800000805e4a:	ff d2                	call   rdx
ffff800000805e4c:	eb 3c                	jmp    ffff800000805e8a <call_drv_func+0x340>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:318
        case DRVF_LS:return drvs[drv_n].ls(args);
ffff800000805e4e:	48 ba b8 fe ff ff ff 	movabs rdx,0xfffffffffffffeb8
ffff800000805e55:	ff ff ff 
ffff800000805e58:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff800000805e5c:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000805e5f:	48 63 d0             	movsxd rdx,eax
ffff800000805e62:	48 89 d0             	mov    rax,rdx
ffff800000805e65:	48 c1 e0 02          	shl    rax,0x2
ffff800000805e69:	48 01 d0             	add    rax,rdx
ffff800000805e6c:	48 c1 e0 05          	shl    rax,0x5
ffff800000805e70:	48 01 c8             	add    rax,rcx
ffff800000805e73:	48 83 c0 60          	add    rax,0x60
ffff800000805e77:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805e7a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000805e7e:	48 89 c7             	mov    rdi,rax
ffff800000805e81:	ff d2                	call   rdx
ffff800000805e83:	eb 05                	jmp    ffff800000805e8a <call_drv_func+0x340>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:320
    }
    return -1;
ffff800000805e85:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:321
}
ffff800000805e8a:	c9                   	leave  
ffff800000805e8b:	c3                   	ret    

ffff800000805e8c <dispose_device>:
dispose_device():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:322
int dispose_device(int dev){
ffff800000805e8c:	f3 0f 1e fa          	endbr64 
ffff800000805e90:	55                   	push   rbp
ffff800000805e91:	48 89 e5             	mov    rbp,rsp
ffff800000805e94:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000805e94 <dispose_device+0x8>
ffff800000805e9b:	49 bb a4 94 01 00 00 	movabs r11,0x194a4
ffff800000805ea2:	00 00 00 
ffff800000805ea5:	4c 01 da             	add    rdx,r11
ffff800000805ea8:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:323
    if(devs[dev].flag!=DEV_FLAG_USED)return -1;
ffff800000805eab:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff800000805eb2:	ff ff ff 
ffff800000805eb5:	48 8b 34 02          	mov    rsi,QWORD PTR [rdx+rax*1]
ffff800000805eb9:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000805ebc:	48 63 c8             	movsxd rcx,eax
ffff800000805ebf:	48 89 c8             	mov    rax,rcx
ffff800000805ec2:	48 c1 e0 02          	shl    rax,0x2
ffff800000805ec6:	48 01 c8             	add    rax,rcx
ffff800000805ec9:	48 c1 e0 02          	shl    rax,0x2
ffff800000805ecd:	48 01 c8             	add    rax,rcx
ffff800000805ed0:	48 c1 e0 03          	shl    rax,0x3
ffff800000805ed4:	48 01 f0             	add    rax,rsi
ffff800000805ed7:	48 83 c0 10          	add    rax,0x10
ffff800000805edb:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000805edd:	83 f8 01             	cmp    eax,0x1
ffff800000805ee0:	74 07                	je     ffff800000805ee9 <dispose_device+0x5d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:323 (discriminator 1)
ffff800000805ee2:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000805ee7:	eb 6d                	jmp    ffff800000805f56 <dispose_device+0xca>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:324
    device* p=&devs[dev];
ffff800000805ee9:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000805eec:	48 63 c8             	movsxd rcx,eax
ffff800000805eef:	48 89 c8             	mov    rax,rcx
ffff800000805ef2:	48 c1 e0 02          	shl    rax,0x2
ffff800000805ef6:	48 01 c8             	add    rax,rcx
ffff800000805ef9:	48 c1 e0 02          	shl    rax,0x2
ffff800000805efd:	48 01 c8             	add    rax,rcx
ffff800000805f00:	48 c1 e0 03          	shl    rax,0x3
ffff800000805f04:	48 b9 98 fe ff ff ff 	movabs rcx,0xfffffffffffffe98
ffff800000805f0b:	ff ff ff 
ffff800000805f0e:	48 8b 14 0a          	mov    rdx,QWORD PTR [rdx+rcx*1]
ffff800000805f12:	48 01 d0             	add    rax,rdx
ffff800000805f15:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:326
    //从链表删除
    if(p->prev)p->prev->next=p->next;
ffff800000805f19:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000805f1d:	48 8b 80 98 00 00 00 	mov    rax,QWORD PTR [rax+0x98]
ffff800000805f24:	48 85 c0             	test   rax,rax
ffff800000805f27:	74 1d                	je     ffff800000805f46 <dispose_device+0xba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:326 (discriminator 1)
ffff800000805f29:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000805f2d:	48 8b 80 98 00 00 00 	mov    rax,QWORD PTR [rax+0x98]
ffff800000805f34:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000805f38:	48 8b 92 90 00 00 00 	mov    rdx,QWORD PTR [rdx+0x90]
ffff800000805f3f:	48 89 90 90 00 00 00 	mov    QWORD PTR [rax+0x90],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:327
    p->flag=DEV_FLAG_EMPTY;
ffff800000805f46:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000805f4a:	c7 40 10 00 00 00 00 	mov    DWORD PTR [rax+0x10],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:328
    return 0;
ffff800000805f51:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:329
}
ffff800000805f56:	5d                   	pop    rbp
ffff800000805f57:	c3                   	ret    

ffff800000805f58 <dispose_driver>:
dispose_driver():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:330
int dispose_driver(driver *drv){
ffff800000805f58:	f3 0f 1e fa          	endbr64 
ffff800000805f5c:	55                   	push   rbp
ffff800000805f5d:	48 89 e5             	mov    rbp,rsp
ffff800000805f60:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000805f60 <dispose_driver+0x8>
ffff800000805f67:	49 bb d8 93 01 00 00 	movabs r11,0x193d8
ffff800000805f6e:	00 00 00 
ffff800000805f71:	4c 01 d8             	add    rax,r11
ffff800000805f74:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:332

}
ffff800000805f78:	90                   	nop
ffff800000805f79:	5d                   	pop    rbp
ffff800000805f7a:	c3                   	ret    

ffff800000805f7b <get_dev>:
get_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:335

device *get_dev(int devi)
{
ffff800000805f7b:	f3 0f 1e fa          	endbr64 
ffff800000805f7f:	55                   	push   rbp
ffff800000805f80:	48 89 e5             	mov    rbp,rsp
ffff800000805f83:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000805f83 <get_dev+0x8>
ffff800000805f8a:	49 bb b5 93 01 00 00 	movabs r11,0x193b5
ffff800000805f91:	00 00 00 
ffff800000805f94:	4c 01 da             	add    rdx,r11
ffff800000805f97:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:336
    return &devs[devi];
ffff800000805f9a:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000805f9d:	48 63 c8             	movsxd rcx,eax
ffff800000805fa0:	48 89 c8             	mov    rax,rcx
ffff800000805fa3:	48 c1 e0 02          	shl    rax,0x2
ffff800000805fa7:	48 01 c8             	add    rax,rcx
ffff800000805faa:	48 c1 e0 02          	shl    rax,0x2
ffff800000805fae:	48 01 c8             	add    rax,rcx
ffff800000805fb1:	48 c1 e0 03          	shl    rax,0x3
ffff800000805fb5:	48 b9 98 fe ff ff ff 	movabs rcx,0xfffffffffffffe98
ffff800000805fbc:	ff ff ff 
ffff800000805fbf:	48 8b 14 0a          	mov    rdx,QWORD PTR [rdx+rcx*1]
ffff800000805fc3:	48 01 d0             	add    rax,rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:337
}
ffff800000805fc6:	5d                   	pop    rbp
ffff800000805fc7:	c3                   	ret    

ffff800000805fc8 <get_drv>:
get_drv():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:339
driver *get_drv(int drvi)
{
ffff800000805fc8:	f3 0f 1e fa          	endbr64 
ffff800000805fcc:	55                   	push   rbp
ffff800000805fcd:	48 89 e5             	mov    rbp,rsp
ffff800000805fd0:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000805fd0 <get_drv+0x8>
ffff800000805fd7:	49 bb 68 93 01 00 00 	movabs r11,0x19368
ffff800000805fde:	00 00 00 
ffff800000805fe1:	4c 01 da             	add    rdx,r11
ffff800000805fe4:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:340
    return &drvs[drvi];
ffff800000805fe7:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000805fea:	48 63 c8             	movsxd rcx,eax
ffff800000805fed:	48 89 c8             	mov    rax,rcx
ffff800000805ff0:	48 c1 e0 02          	shl    rax,0x2
ffff800000805ff4:	48 01 c8             	add    rax,rcx
ffff800000805ff7:	48 c1 e0 05          	shl    rax,0x5
ffff800000805ffb:	48 b9 b8 fe ff ff ff 	movabs rcx,0xfffffffffffffeb8
ffff800000806002:	ff ff ff 
ffff800000806005:	48 8b 14 0a          	mov    rdx,QWORD PTR [rdx+rcx*1]
ffff800000806009:	48 01 d0             	add    rax,rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:341
}
ffff80000080600c:	5d                   	pop    rbp
ffff80000080600d:	c3                   	ret    

ffff80000080600e <make_request>:
make_request():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:345

//发送一个操作设备的申请
int make_request(driver_args* args)
{
ffff80000080600e:	f3 0f 1e fa          	endbr64 
ffff800000806012:	55                   	push   rbp
ffff800000806013:	48 89 e5             	mov    rbp,rsp
ffff800000806016:	48 8d 0d f9 ff ff ff 	lea    rcx,[rip+0xfffffffffffffff9]        # ffff800000806016 <make_request+0x8>
ffff80000080601d:	49 bb 22 93 01 00 00 	movabs r11,0x19322
ffff800000806024:	00 00 00 
ffff800000806027:	4c 01 d9             	add    rcx,r11
ffff80000080602a:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:347
    //在数组中寻找空项
    int i=0;
ffff80000080602e:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:348
    for(;i<NR_REQS;i++)
ffff800000806035:	eb 34                	jmp    ffff80000080606b <make_request+0x5d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:350
    {
        if(reqs[i].stat==REQ_STAT_EMPTY)break;
ffff800000806037:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff80000080603e:	ff ff ff 
ffff800000806041:	48 8b 34 01          	mov    rsi,QWORD PTR [rcx+rax*1]
ffff800000806045:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000806048:	48 63 d0             	movsxd rdx,eax
ffff80000080604b:	48 89 d0             	mov    rax,rdx
ffff80000080604e:	48 01 c0             	add    rax,rax
ffff800000806051:	48 01 d0             	add    rax,rdx
ffff800000806054:	48 c1 e0 06          	shl    rax,0x6
ffff800000806058:	48 01 f0             	add    rax,rsi
ffff80000080605b:	48 05 ac 00 00 00    	add    rax,0xac
ffff800000806061:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000806063:	85 c0                	test   eax,eax
ffff800000806065:	74 0c                	je     ffff800000806073 <make_request+0x65>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:348
    for(;i<NR_REQS;i++)
ffff800000806067:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:348 (discriminator 1)
ffff80000080606b:	83 7d fc 1f          	cmp    DWORD PTR [rbp-0x4],0x1f
ffff80000080606f:	7e c6                	jle    ffff800000806037 <make_request+0x29>
ffff800000806071:	eb 01                	jmp    ffff800000806074 <make_request+0x66>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:350
        if(reqs[i].stat==REQ_STAT_EMPTY)break;
ffff800000806073:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:352
    }
    if(i==NR_REQS)return -1;//满了
ffff800000806074:	83 7d fc 20          	cmp    DWORD PTR [rbp-0x4],0x20
ffff800000806078:	75 0a                	jne    ffff800000806084 <make_request+0x76>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:352 (discriminator 1)
ffff80000080607a:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080607f:	e9 25 02 00 00       	jmp    ffff8000008062a9 <make_request+0x29b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:353
    reqs[i]=*args;//放入数组
ffff800000806084:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff80000080608b:	ff ff ff 
ffff80000080608e:	48 8b 34 01          	mov    rsi,QWORD PTR [rcx+rax*1]
ffff800000806092:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000806095:	48 63 d0             	movsxd rdx,eax
ffff800000806098:	48 89 d0             	mov    rax,rdx
ffff80000080609b:	48 01 c0             	add    rax,rax
ffff80000080609e:	48 01 d0             	add    rax,rdx
ffff8000008060a1:	48 c1 e0 06          	shl    rax,0x6
ffff8000008060a5:	48 8d 14 06          	lea    rdx,[rsi+rax*1]
ffff8000008060a9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008060ad:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff8000008060b0:	48 8b 78 08          	mov    rdi,QWORD PTR [rax+0x8]
ffff8000008060b4:	48 89 32             	mov    QWORD PTR [rdx],rsi
ffff8000008060b7:	48 89 7a 08          	mov    QWORD PTR [rdx+0x8],rdi
ffff8000008060bb:	48 8b 70 10          	mov    rsi,QWORD PTR [rax+0x10]
ffff8000008060bf:	48 8b 78 18          	mov    rdi,QWORD PTR [rax+0x18]
ffff8000008060c3:	48 89 72 10          	mov    QWORD PTR [rdx+0x10],rsi
ffff8000008060c7:	48 89 7a 18          	mov    QWORD PTR [rdx+0x18],rdi
ffff8000008060cb:	48 8b 70 20          	mov    rsi,QWORD PTR [rax+0x20]
ffff8000008060cf:	48 8b 78 28          	mov    rdi,QWORD PTR [rax+0x28]
ffff8000008060d3:	48 89 72 20          	mov    QWORD PTR [rdx+0x20],rsi
ffff8000008060d7:	48 89 7a 28          	mov    QWORD PTR [rdx+0x28],rdi
ffff8000008060db:	48 8b 70 30          	mov    rsi,QWORD PTR [rax+0x30]
ffff8000008060df:	48 8b 78 38          	mov    rdi,QWORD PTR [rax+0x38]
ffff8000008060e3:	48 89 72 30          	mov    QWORD PTR [rdx+0x30],rsi
ffff8000008060e7:	48 89 7a 38          	mov    QWORD PTR [rdx+0x38],rdi
ffff8000008060eb:	48 8b 70 40          	mov    rsi,QWORD PTR [rax+0x40]
ffff8000008060ef:	48 8b 78 48          	mov    rdi,QWORD PTR [rax+0x48]
ffff8000008060f3:	48 89 72 40          	mov    QWORD PTR [rdx+0x40],rsi
ffff8000008060f7:	48 89 7a 48          	mov    QWORD PTR [rdx+0x48],rdi
ffff8000008060fb:	48 8b 70 50          	mov    rsi,QWORD PTR [rax+0x50]
ffff8000008060ff:	48 8b 78 58          	mov    rdi,QWORD PTR [rax+0x58]
ffff800000806103:	48 89 72 50          	mov    QWORD PTR [rdx+0x50],rsi
ffff800000806107:	48 89 7a 58          	mov    QWORD PTR [rdx+0x58],rdi
ffff80000080610b:	48 8b 70 60          	mov    rsi,QWORD PTR [rax+0x60]
ffff80000080610f:	48 8b 78 68          	mov    rdi,QWORD PTR [rax+0x68]
ffff800000806113:	48 89 72 60          	mov    QWORD PTR [rdx+0x60],rsi
ffff800000806117:	48 89 7a 68          	mov    QWORD PTR [rdx+0x68],rdi
ffff80000080611b:	48 8b 70 70          	mov    rsi,QWORD PTR [rax+0x70]
ffff80000080611f:	48 8b 78 78          	mov    rdi,QWORD PTR [rax+0x78]
ffff800000806123:	48 89 72 70          	mov    QWORD PTR [rdx+0x70],rsi
ffff800000806127:	48 89 7a 78          	mov    QWORD PTR [rdx+0x78],rdi
ffff80000080612b:	48 8b b0 80 00 00 00 	mov    rsi,QWORD PTR [rax+0x80]
ffff800000806132:	48 8b b8 88 00 00 00 	mov    rdi,QWORD PTR [rax+0x88]
ffff800000806139:	48 89 b2 80 00 00 00 	mov    QWORD PTR [rdx+0x80],rsi
ffff800000806140:	48 89 ba 88 00 00 00 	mov    QWORD PTR [rdx+0x88],rdi
ffff800000806147:	48 8b b0 90 00 00 00 	mov    rsi,QWORD PTR [rax+0x90]
ffff80000080614e:	48 8b b8 98 00 00 00 	mov    rdi,QWORD PTR [rax+0x98]
ffff800000806155:	48 89 b2 90 00 00 00 	mov    QWORD PTR [rdx+0x90],rsi
ffff80000080615c:	48 89 ba 98 00 00 00 	mov    QWORD PTR [rdx+0x98],rdi
ffff800000806163:	48 8b b0 a0 00 00 00 	mov    rsi,QWORD PTR [rax+0xa0]
ffff80000080616a:	48 8b b8 a8 00 00 00 	mov    rdi,QWORD PTR [rax+0xa8]
ffff800000806171:	48 89 b2 a0 00 00 00 	mov    QWORD PTR [rdx+0xa0],rsi
ffff800000806178:	48 89 ba a8 00 00 00 	mov    QWORD PTR [rdx+0xa8],rdi
ffff80000080617f:	48 8b b0 b0 00 00 00 	mov    rsi,QWORD PTR [rax+0xb0]
ffff800000806186:	48 8b b8 b8 00 00 00 	mov    rdi,QWORD PTR [rax+0xb8]
ffff80000080618d:	48 89 b2 b0 00 00 00 	mov    QWORD PTR [rdx+0xb0],rsi
ffff800000806194:	48 89 ba b8 00 00 00 	mov    QWORD PTR [rdx+0xb8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:355
    //插入具体设备的等待链表中
    device* dev=&devs[args->dev];
ffff80000080619b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080619f:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [rax+0x8c]
ffff8000008061a5:	48 63 d0             	movsxd rdx,eax
ffff8000008061a8:	48 89 d0             	mov    rax,rdx
ffff8000008061ab:	48 c1 e0 02          	shl    rax,0x2
ffff8000008061af:	48 01 d0             	add    rax,rdx
ffff8000008061b2:	48 c1 e0 02          	shl    rax,0x2
ffff8000008061b6:	48 01 d0             	add    rax,rdx
ffff8000008061b9:	48 c1 e0 03          	shl    rax,0x3
ffff8000008061bd:	48 ba 98 fe ff ff ff 	movabs rdx,0xfffffffffffffe98
ffff8000008061c4:	ff ff ff 
ffff8000008061c7:	48 8b 14 11          	mov    rdx,QWORD PTR [rcx+rdx*1]
ffff8000008061cb:	48 01 d0             	add    rax,rdx
ffff8000008061ce:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:356
    if(!dev->waiting_reqs)//空的等待队列
ffff8000008061d2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008061d6:	48 8b 80 88 00 00 00 	mov    rax,QWORD PTR [rax+0x88]
ffff8000008061dd:	48 85 c0             	test   rax,rax
ffff8000008061e0:	75 34                	jne    ffff800000806216 <make_request+0x208>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:357
        dev->waiting_reqs=&reqs[i];
ffff8000008061e2:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008061e5:	48 63 d0             	movsxd rdx,eax
ffff8000008061e8:	48 89 d0             	mov    rax,rdx
ffff8000008061eb:	48 01 c0             	add    rax,rax
ffff8000008061ee:	48 01 d0             	add    rax,rdx
ffff8000008061f1:	48 c1 e0 06          	shl    rax,0x6
ffff8000008061f5:	48 ba 80 fe ff ff ff 	movabs rdx,0xfffffffffffffe80
ffff8000008061fc:	ff ff ff 
ffff8000008061ff:	48 8b 14 11          	mov    rdx,QWORD PTR [rcx+rdx*1]
ffff800000806203:	48 01 c2             	add    rdx,rax
ffff800000806206:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080620a:	48 89 90 88 00 00 00 	mov    QWORD PTR [rax+0x88],rdx
ffff800000806211:	e9 90 00 00 00       	jmp    ffff8000008062a6 <make_request+0x298>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:359
    else{
        driver_args* p=dev->waiting_reqs;
ffff800000806216:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080621a:	48 8b 80 88 00 00 00 	mov    rax,QWORD PTR [rax+0x88]
ffff800000806221:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:360
        for(;p->next;p=p->next);
ffff800000806225:	eb 0f                	jmp    ffff800000806236 <make_request+0x228>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:360 (discriminator 2)
ffff800000806227:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080622b:	48 8b 80 b8 00 00 00 	mov    rax,QWORD PTR [rax+0xb8]
ffff800000806232:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:360 (discriminator 1)
ffff800000806236:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080623a:	48 8b 80 b8 00 00 00 	mov    rax,QWORD PTR [rax+0xb8]
ffff800000806241:	48 85 c0             	test   rax,rax
ffff800000806244:	75 e1                	jne    ffff800000806227 <make_request+0x219>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:361
        p->next=&reqs[i];
ffff800000806246:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000806249:	48 63 d0             	movsxd rdx,eax
ffff80000080624c:	48 89 d0             	mov    rax,rdx
ffff80000080624f:	48 01 c0             	add    rax,rax
ffff800000806252:	48 01 d0             	add    rax,rdx
ffff800000806255:	48 c1 e0 06          	shl    rax,0x6
ffff800000806259:	48 ba 80 fe ff ff ff 	movabs rdx,0xfffffffffffffe80
ffff800000806260:	ff ff ff 
ffff800000806263:	48 8b 14 11          	mov    rdx,QWORD PTR [rcx+rdx*1]
ffff800000806267:	48 01 c2             	add    rdx,rax
ffff80000080626a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080626e:	48 89 90 b8 00 00 00 	mov    QWORD PTR [rax+0xb8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:362
        reqs[i].next=NULL;
ffff800000806275:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff80000080627c:	ff ff ff 
ffff80000080627f:	48 8b 0c 01          	mov    rcx,QWORD PTR [rcx+rax*1]
ffff800000806283:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000806286:	48 63 d0             	movsxd rdx,eax
ffff800000806289:	48 89 d0             	mov    rax,rdx
ffff80000080628c:	48 01 c0             	add    rax,rax
ffff80000080628f:	48 01 d0             	add    rax,rdx
ffff800000806292:	48 c1 e0 06          	shl    rax,0x6
ffff800000806296:	48 01 c8             	add    rax,rcx
ffff800000806299:	48 05 b8 00 00 00    	add    rax,0xb8
ffff80000080629f:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:365
    }

    return i;
ffff8000008062a6:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:366
}
ffff8000008062a9:	5d                   	pop    rbp
ffff8000008062aa:	c3                   	ret    

ffff8000008062ab <do_req>:
do_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:369
//取出一个申请并且执行
int do_req()
{
ffff8000008062ab:	f3 0f 1e fa          	endbr64 
ffff8000008062af:	55                   	push   rbp
ffff8000008062b0:	48 89 e5             	mov    rbp,rsp
ffff8000008062b3:	53                   	push   rbx
ffff8000008062b4:	48 83 ec 18          	sub    rsp,0x18
ffff8000008062b8:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008062b8 <do_req+0xd>
ffff8000008062bf:	49 bb 80 90 01 00 00 	movabs r11,0x19080
ffff8000008062c6:	00 00 00 
ffff8000008062c9:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:372
    //查看每个设备的请求情况
    //块设备
    for(int i=0;i<3;i++)
ffff8000008062cc:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff8000008062d3:	e9 c1 00 00 00       	jmp    ffff800000806399 <do_req+0xee>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:374
    {
        device* p=dev_tree[i];
ffff8000008062d8:	48 b8 60 fd ff ff ff 	movabs rax,0xfffffffffffffd60
ffff8000008062df:	ff ff ff 
ffff8000008062e2:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008062e6:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff8000008062e9:	48 63 d2             	movsxd rdx,edx
ffff8000008062ec:	48 8b 04 d0          	mov    rax,QWORD PTR [rax+rdx*8]
ffff8000008062f0:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:375
        for(;p;p=p->next)
ffff8000008062f4:	e9 91 00 00 00       	jmp    ffff80000080638a <do_req+0xdf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:378
        {
            //如果没有请求运行而且有请求要运行
            if(!p->running_req&&p->waiting_reqs)
ffff8000008062f9:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008062fd:	48 8b 80 80 00 00 00 	mov    rax,QWORD PTR [rax+0x80]
ffff800000806304:	48 85 c0             	test   rax,rax
ffff800000806307:	75 72                	jne    ffff80000080637b <do_req+0xd0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:378 (discriminator 1)
ffff800000806309:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080630d:	48 8b 80 88 00 00 00 	mov    rax,QWORD PTR [rax+0x88]
ffff800000806314:	48 85 c0             	test   rax,rax
ffff800000806317:	74 62                	je     ffff80000080637b <do_req+0xd0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:380
            {
                p->running_req=p->waiting_reqs;
ffff800000806319:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080631d:	48 8b 90 88 00 00 00 	mov    rdx,QWORD PTR [rax+0x88]
ffff800000806324:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806328:	48 89 90 80 00 00 00 	mov    QWORD PTR [rax+0x80],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:381
                p->waiting_reqs=p->waiting_reqs->next;//取出一个
ffff80000080632f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806333:	48 8b 80 88 00 00 00 	mov    rax,QWORD PTR [rax+0x88]
ffff80000080633a:	48 8b 90 b8 00 00 00 	mov    rdx,QWORD PTR [rax+0xb8]
ffff800000806341:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806345:	48 89 90 88 00 00 00 	mov    QWORD PTR [rax+0x88],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:382
                dev_funcs[p->operi](p->running_req);
ffff80000080634c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806350:	8b 90 a0 00 00 00    	mov    edx,DWORD PTR [rax+0xa0]
ffff800000806356:	48 b8 e8 ff ff ff ff 	movabs rax,0xffffffffffffffe8
ffff80000080635d:	ff ff ff 
ffff800000806360:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806364:	48 63 d2             	movsxd rdx,edx
ffff800000806367:	48 8b 14 d0          	mov    rdx,QWORD PTR [rax+rdx*8]
ffff80000080636b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080636f:	48 8b 80 80 00 00 00 	mov    rax,QWORD PTR [rax+0x80]
ffff800000806376:	48 89 c7             	mov    rdi,rax
ffff800000806379:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:375
        for(;p;p=p->next)
ffff80000080637b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080637f:	48 8b 80 90 00 00 00 	mov    rax,QWORD PTR [rax+0x90]
ffff800000806386:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:375 (discriminator 1)
ffff80000080638a:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
ffff80000080638f:	0f 85 64 ff ff ff    	jne    ffff8000008062f9 <do_req+0x4e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:372 (discriminator 2)
    for(int i=0;i<3;i++)
ffff800000806395:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:372 (discriminator 1)
ffff800000806399:	83 7d ec 02          	cmp    DWORD PTR [rbp-0x14],0x2
ffff80000080639d:	0f 8e 35 ff ff ff    	jle    ffff8000008062d8 <do_req+0x2d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:388
            }
            //如果还在运行（DONE的状态不能直接覆盖，因为里面的运行结果可能还没被拿走）
        }
    }
    
    return 0;
ffff8000008063a3:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:389
}
ffff8000008063a8:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
ffff8000008063ac:	c9                   	leave  
ffff8000008063ad:	c3                   	ret    

ffff8000008063ae <wait_on_req>:
wait_on_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:393


void wait_on_req(int reqi)
{
ffff8000008063ae:	f3 0f 1e fa          	endbr64 
ffff8000008063b2:	55                   	push   rbp
ffff8000008063b3:	48 89 e5             	mov    rbp,rsp
ffff8000008063b6:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff8000008063b6 <wait_on_req+0x8>
ffff8000008063bd:	49 bb 82 8f 01 00 00 	movabs r11,0x18f82
ffff8000008063c4:	00 00 00 
ffff8000008063c7:	4c 01 da             	add    rdx,r11
ffff8000008063ca:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:394
    while(reqs[reqi].stat!=REQ_STAT_DONE);
ffff8000008063cd:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:394 (discriminator 1)
ffff8000008063ce:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff8000008063d5:	ff ff ff 
ffff8000008063d8:	48 8b 34 02          	mov    rsi,QWORD PTR [rdx+rax*1]
ffff8000008063dc:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008063df:	48 63 c8             	movsxd rcx,eax
ffff8000008063e2:	48 89 c8             	mov    rax,rcx
ffff8000008063e5:	48 01 c0             	add    rax,rax
ffff8000008063e8:	48 01 c8             	add    rax,rcx
ffff8000008063eb:	48 c1 e0 06          	shl    rax,0x6
ffff8000008063ef:	48 01 f0             	add    rax,rsi
ffff8000008063f2:	48 05 ac 00 00 00    	add    rax,0xac
ffff8000008063f8:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008063fa:	83 f8 03             	cmp    eax,0x3
ffff8000008063fd:	75 cf                	jne    ffff8000008063ce <wait_on_req+0x20>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:395
}
ffff8000008063ff:	90                   	nop
ffff800000806400:	90                   	nop
ffff800000806401:	5d                   	pop    rbp
ffff800000806402:	c3                   	ret    

ffff800000806403 <clear_req>:
clear_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:397
void clear_req(int reqi)
{
ffff800000806403:	f3 0f 1e fa          	endbr64 
ffff800000806407:	55                   	push   rbp
ffff800000806408:	48 89 e5             	mov    rbp,rsp
ffff80000080640b:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080640b <clear_req+0x8>
ffff800000806412:	49 bb 2d 8f 01 00 00 	movabs r11,0x18f2d
ffff800000806419:	00 00 00 
ffff80000080641c:	4c 01 d8             	add    rax,r11
ffff80000080641f:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:398
    reqs[reqi].stat=REQ_STAT_EMPTY;
ffff800000806422:	48 ba 80 fe ff ff ff 	movabs rdx,0xfffffffffffffe80
ffff800000806429:	ff ff ff 
ffff80000080642c:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff800000806430:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000806433:	48 63 d0             	movsxd rdx,eax
ffff800000806436:	48 89 d0             	mov    rax,rdx
ffff800000806439:	48 01 c0             	add    rax,rax
ffff80000080643c:	48 01 d0             	add    rax,rdx
ffff80000080643f:	48 c1 e0 06          	shl    rax,0x6
ffff800000806443:	48 01 c8             	add    rax,rcx
ffff800000806446:	48 05 ac 00 00 00    	add    rax,0xac
ffff80000080644c:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:399
ffff800000806452:	90                   	nop
ffff800000806453:	5d                   	pop    rbp
ffff800000806454:	c3                   	ret    

ffff800000806455 <init_proc>:
init_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:26
TSS *tss=0xffff800000108000ul;
int cur_proc=0;
int pidd=0;
int palloc_paddr=0;
static pid_t sidd=0;
void init_proc(){
ffff800000806455:	f3 0f 1e fa          	endbr64 
ffff800000806459:	55                   	push   rbp
ffff80000080645a:	48 89 e5             	mov    rbp,rsp
ffff80000080645d:	41 57                	push   r15
ffff80000080645f:	53                   	push   rbx
ffff800000806460:	48 83 ec 10          	sub    rsp,0x10
ffff800000806464:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000806464 <init_proc+0xf>
ffff80000080646b:	49 bb d4 8e 01 00 00 	movabs r11,0x18ed4
ffff800000806472:	00 00 00 
ffff800000806475:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:28
    //task=(struct process*)get_global_var(TASK_PCBS_ADDR);//[MAX_TASKS];;
    task=(struct process*)kmallocat(0,13);
ffff800000806478:	be 0d 00 00 00       	mov    esi,0xd
ffff80000080647d:	bf 00 00 00 00       	mov    edi,0x0
ffff800000806482:	49 89 df             	mov    r15,rbx
ffff800000806485:	48 b8 0d 2d fe ff ff 	movabs rax,0xfffffffffffe2d0d
ffff80000080648c:	ff ff ff 
ffff80000080648f:	48 01 d8             	add    rax,rbx
ffff800000806492:	ff d0                	call   rax
ffff800000806494:	48 89 c2             	mov    rdx,rax
ffff800000806497:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff80000080649e:	ff ff ff 
ffff8000008064a1:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008064a5:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:29
    for(int i=0;i<MAX_PROC_COUNT;i++){
ffff8000008064a8:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff8000008064af:	eb 7b                	jmp    ffff80000080652c <init_proc+0xd7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:30 (discriminator 3)
        task[i].pid=-1;
ffff8000008064b1:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff8000008064b8:	ff ff ff 
ffff8000008064bb:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008064bf:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008064c2:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008064c5:	48 98                	cdqe   
ffff8000008064c7:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff8000008064ce:	48 01 d0             	add    rax,rdx
ffff8000008064d1:	c7 00 ff ff ff ff    	mov    DWORD PTR [rax],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:31 (discriminator 3)
        task[i].stat=TASK_EMPTY;
ffff8000008064d7:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff8000008064de:	ff ff ff 
ffff8000008064e1:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008064e5:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008064e8:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008064eb:	48 98                	cdqe   
ffff8000008064ed:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff8000008064f4:	48 01 d0             	add    rax,rdx
ffff8000008064f7:	c7 40 18 00 00 00 00 	mov    DWORD PTR [rax+0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:32 (discriminator 3)
        task[i].parent_pid=-1;
ffff8000008064fe:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000806505:	ff ff ff 
ffff800000806508:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080650c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080650f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000806512:	48 98                	cdqe   
ffff800000806514:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff80000080651b:	48 01 d0             	add    rax,rdx
ffff80000080651e:	c7 80 9c 00 00 00 ff 	mov    DWORD PTR [rax+0x9c],0xffffffff
ffff800000806525:	ff ff ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:29 (discriminator 3)
    for(int i=0;i<MAX_PROC_COUNT;i++){
ffff800000806528:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:29 (discriminator 1)
ffff80000080652c:	83 7d ec 3f          	cmp    DWORD PTR [rbp-0x14],0x3f
ffff800000806530:	0f 8e 7b ff ff ff    	jle    ffff8000008064b1 <init_proc+0x5c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:34
    }
    cur_proc=0;//proc zero
ffff800000806536:	48 b8 40 fe ff ff ff 	movabs rax,0xfffffffffffffe40
ffff80000080653d:	ff ff ff 
ffff800000806540:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806544:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:35
    current=task;
ffff80000080654a:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000806551:	ff ff ff 
ffff800000806554:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806558:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080655b:	48 b8 90 fe ff ff ff 	movabs rax,0xfffffffffffffe90
ffff800000806562:	ff ff ff 
ffff800000806565:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806569:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:36
    pidd=1;
ffff80000080656c:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000806573:	ff ff ff 
ffff800000806576:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080657a:	c7 00 01 00 00 00    	mov    DWORD PTR [rax],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:38
     //===============创建0号进程======================
    int zi= init_proc0();
ffff800000806580:	49 89 df             	mov    r15,rbx
ffff800000806583:	b8 00 00 00 00       	mov    eax,0x0
ffff800000806588:	48 ba a8 76 fe ff ff 	movabs rdx,0xfffffffffffe76a8
ffff80000080658f:	ff ff ff 
ffff800000806592:	48 01 da             	add    rdx,rbx
ffff800000806595:	ff d2                	call   rdx
ffff800000806597:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:39
    task[zi].stat=TASK_READY;
ffff80000080659a:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff8000008065a1:	ff ff ff 
ffff8000008065a4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008065a8:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008065ab:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff8000008065ae:	48 98                	cdqe   
ffff8000008065b0:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff8000008065b7:	48 01 d0             	add    rax,rdx
ffff8000008065ba:	c7 40 18 02 00 00 00 	mov    DWORD PTR [rax+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:44


    //asm volatile("lldt %0"::"m"(xi));
    //asm volatile("ltr %0"::"m"(zi));
    set_tss(0x400000+KNL_BASE,0x400000+KNL_BASE,0x400000+KNL_BASE\
ffff8000008065c1:	68 00 00 80 00       	push   0x800000
ffff8000008065c6:	c7 44 24 04 00 80 ff 	mov    DWORD PTR [rsp+0x4],0xffff8000
ffff8000008065cd:	ff 
ffff8000008065ce:	68 00 00 80 00       	push   0x800000
ffff8000008065d3:	c7 44 24 04 00 80 ff 	mov    DWORD PTR [rsp+0x4],0xffff8000
ffff8000008065da:	ff 
ffff8000008065db:	68 00 00 80 00       	push   0x800000
ffff8000008065e0:	c7 44 24 04 00 80 ff 	mov    DWORD PTR [rsp+0x4],0xffff8000
ffff8000008065e7:	ff 
ffff8000008065e8:	68 00 00 80 00       	push   0x800000
ffff8000008065ed:	c7 44 24 04 00 80 ff 	mov    DWORD PTR [rsp+0x4],0xffff8000
ffff8000008065f4:	ff 
ffff8000008065f5:	49 b9 00 00 80 00 00 	movabs r9,0xffff800000800000
ffff8000008065fc:	80 ff ff 
ffff8000008065ff:	49 b8 00 00 80 00 00 	movabs r8,0xffff800000800000
ffff800000806606:	80 ff ff 
ffff800000806609:	48 b8 00 00 80 00 00 	movabs rax,0xffff800000800000
ffff800000806610:	80 ff ff 
ffff800000806613:	48 89 c1             	mov    rcx,rax
ffff800000806616:	48 b8 00 00 40 00 00 	movabs rax,0xffff800000400000
ffff80000080661d:	80 ff ff 
ffff800000806620:	48 89 c2             	mov    rdx,rax
ffff800000806623:	48 b8 00 00 40 00 00 	movabs rax,0xffff800000400000
ffff80000080662a:	80 ff ff 
ffff80000080662d:	48 89 c6             	mov    rsi,rax
ffff800000806630:	48 b8 00 00 40 00 00 	movabs rax,0xffff800000400000
ffff800000806637:	80 ff ff 
ffff80000080663a:	48 89 c7             	mov    rdi,rax
ffff80000080663d:	49 89 df             	mov    r15,rbx
ffff800000806640:	48 b8 1b 91 fe ff ff 	movabs rax,0xfffffffffffe911b
ffff800000806647:	ff ff ff 
ffff80000080664a:	48 01 d8             	add    rax,rbx
ffff80000080664d:	ff d0                	call   rax
ffff80000080664f:	48 83 c4 20          	add    rsp,0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:48
    ,0x800000+KNL_BASE,0x800000+KNL_BASE,0x800000+KNL_BASE,0x800000+KNL_BASE\
    ,0x800000+KNL_BASE,0x800000+KNL_BASE,0x800000+KNL_BASE);
    //IA32_INTERRUPT_SSP_TABLE_ADDR，准备IST
    wrmsr(0x6a8,tss->rsvd2);
ffff800000806653:	48 b8 18 fe ff ff ff 	movabs rax,0xfffffffffffffe18
ffff80000080665a:	ff ff ff 
ffff80000080665d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806661:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806664:	48 8b 40 1c          	mov    rax,QWORD PTR [rax+0x1c]
ffff800000806668:	48 89 c6             	mov    rsi,rax
ffff80000080666b:	bf a8 06 00 00       	mov    edi,0x6a8
ffff800000806670:	49 89 df             	mov    r15,rbx
ffff800000806673:	48 b8 50 1c fe ff ff 	movabs rax,0xfffffffffffe1c50
ffff80000080667a:	ff ff ff 
ffff80000080667d:	48 01 d8             	add    rax,rbx
ffff800000806680:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:50
    //把内核代码段选择子写到MSR寄存器中准备用于特权级转换(sysexit，现在没用)
    wrmsr(0x174,0x8);
ffff800000806682:	be 08 00 00 00       	mov    esi,0x8
ffff800000806687:	bf 74 01 00 00       	mov    edi,0x174
ffff80000080668c:	49 89 df             	mov    r15,rbx
ffff80000080668f:	48 b8 50 1c fe ff ff 	movabs rax,0xfffffffffffe1c50
ffff800000806696:	ff ff ff 
ffff800000806699:	48 01 d8             	add    rax,rbx
ffff80000080669c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:52
    //准备用于特权级转换(sysret，正在使用)
    wrmsr(0xc0000081,0x0020000800000000ul);
ffff80000080669e:	48 b8 00 00 00 00 08 	movabs rax,0x20000800000000
ffff8000008066a5:	00 20 00 
ffff8000008066a8:	48 89 c6             	mov    rsi,rax
ffff8000008066ab:	b8 81 00 00 c0       	mov    eax,0xc0000081
ffff8000008066b0:	48 89 c7             	mov    rdi,rax
ffff8000008066b3:	49 89 df             	mov    r15,rbx
ffff8000008066b6:	48 b8 50 1c fe ff ff 	movabs rax,0xfffffffffffe1c50
ffff8000008066bd:	ff ff ff 
ffff8000008066c0:	48 01 d8             	add    rax,rbx
ffff8000008066c3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:54

    comprintf("proc init set.\r\ntss.ist=0x%p\r\n",tss->ists[0]);
ffff8000008066c5:	48 b8 18 fe ff ff ff 	movabs rax,0xfffffffffffffe18
ffff8000008066cc:	ff ff ff 
ffff8000008066cf:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008066d3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008066d6:	48 8b 40 24          	mov    rax,QWORD PTR [rax+0x24]
ffff8000008066da:	48 89 c6             	mov    rsi,rax
ffff8000008066dd:	48 b8 98 c6 ff ff ff 	movabs rax,0xffffffffffffc698
ffff8000008066e4:	ff ff ff 
ffff8000008066e7:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008066eb:	48 89 c7             	mov    rdi,rax
ffff8000008066ee:	49 89 df             	mov    r15,rbx
ffff8000008066f1:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008066f6:	48 ba 05 3a ff ff ff 	movabs rdx,0xffffffffffff3a05
ffff8000008066fd:	ff ff ff 
ffff800000806700:	48 01 da             	add    rdx,rbx
ffff800000806703:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:57
    //创建一个测试进程
//    create_test_proc();
}
ffff800000806705:	90                   	nop
ffff800000806706:	48 8d 65 f0          	lea    rsp,[rbp-0x10]
ffff80000080670a:	5b                   	pop    rbx
ffff80000080670b:	41 5f                	pop    r15
ffff80000080670d:	5d                   	pop    rbp
ffff80000080670e:	c3                   	ret    

ffff80000080670f <create_test_proc>:
create_test_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:58
void create_test_proc(){
ffff80000080670f:	f3 0f 1e fa          	endbr64 
ffff800000806713:	55                   	push   rbp
ffff800000806714:	48 89 e5             	mov    rbp,rsp
ffff800000806717:	41 57                	push   r15
ffff800000806719:	53                   	push   rbx
ffff80000080671a:	48 83 ec 20          	sub    rsp,0x20
ffff80000080671e:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080671e <create_test_proc+0xf>
ffff800000806725:	49 bb 1a 8c 01 00 00 	movabs r11,0x18c1a
ffff80000080672c:	00 00 00 
ffff80000080672f:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:60

    int index=req_proc();
ffff800000806732:	49 89 df             	mov    r15,rbx
ffff800000806735:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080673a:	48 ba 8d 78 fe ff ff 	movabs rdx,0xfffffffffffe788d
ffff800000806741:	ff ff ff 
ffff800000806744:	48 01 da             	add    rdx,rbx
ffff800000806747:	ff d2                	call   rdx
ffff800000806749:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:61
    task[index].stat=TASK_READY;
ffff80000080674c:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000806753:	ff ff ff 
ffff800000806756:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080675a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080675d:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000806760:	48 98                	cdqe   
ffff800000806762:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff800000806769:	48 01 d0             	add    rax,rdx
ffff80000080676c:	c7 40 18 02 00 00 00 	mov    DWORD PTR [rax+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:62
    int currsp=0x9fc00-1;
ffff800000806773:	c7 45 dc ff fb 09 00 	mov    DWORD PTR [rbp-0x24],0x9fbff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:63
    asm volatile("mov %%rsp,%0":"=m"(currsp));
ffff80000080677a:	48 89 65 dc          	mov    QWORD PTR [rbp-0x24],rsp
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:64
    set_proc(0, 0, 0, 0, 0x10, 0x8, 0x10, 0x10, 0x10, 0x10,
ffff80000080677e:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff800000806785:	ff ff ff 
ffff800000806788:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080678c:	48 89 c2             	mov    rdx,rax
ffff80000080678f:	48 83 ec 08          	sub    rsp,0x8
ffff800000806793:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000806796:	50                   	push   rax
ffff800000806797:	6a 00                	push   0x0
ffff800000806799:	52                   	push   rdx
ffff80000080679a:	6a 00                	push   0x0
ffff80000080679c:	6a 00                	push   0x0
ffff80000080679e:	6a 00                	push   0x0
ffff8000008067a0:	68 58 7d 00 00       	push   0x7d58
ffff8000008067a5:	6a 10                	push   0x10
ffff8000008067a7:	6a 10                	push   0x10
ffff8000008067a9:	6a 10                	push   0x10
ffff8000008067ab:	6a 10                	push   0x10
ffff8000008067ad:	41 b9 08 00 00 00    	mov    r9d,0x8
ffff8000008067b3:	41 b8 10 00 00 00    	mov    r8d,0x10
ffff8000008067b9:	b9 00 00 00 00       	mov    ecx,0x0
ffff8000008067be:	ba 00 00 00 00       	mov    edx,0x0
ffff8000008067c3:	be 00 00 00 00       	mov    esi,0x0
ffff8000008067c8:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008067cd:	49 89 df             	mov    r15,rbx
ffff8000008067d0:	48 b8 de 79 fe ff ff 	movabs rax,0xfffffffffffe79de
ffff8000008067d7:	ff ff ff 
ffff8000008067da:	48 01 d8             	add    rax,rbx
ffff8000008067dd:	ff d0                	call   rax
ffff8000008067df:	48 83 c4 60          	add    rsp,0x60
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:66
             0x7e00- sizeof(stack_store_regs), 0, 0, 0, (long)ret_sys_call, 0, index);
    task[index].tss.rsp0=0x400000;
ffff8000008067e3:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff8000008067ea:	ff ff ff 
ffff8000008067ed:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008067f1:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008067f4:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008067f7:	48 98                	cdqe   
ffff8000008067f9:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff800000806800:	48 01 d0             	add    rax,rdx
ffff800000806803:	48 c7 80 dc 01 00 00 	mov    QWORD PTR [rax+0x1dc],0x400000
ffff80000080680a:	00 00 40 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:67
    task[index].mem_struct.stack_top=0x7e00;
ffff80000080680e:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000806815:	ff ff ff 
ffff800000806818:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080681c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080681f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000806822:	48 98                	cdqe   
ffff800000806824:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff80000080682b:	48 01 d0             	add    rax,rdx
ffff80000080682e:	c7 40 34 00 7e 00 00 	mov    DWORD PTR [rax+0x34],0x7e00
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:68
    task[index].mem_struct.stack_bottom=0x6e00;
ffff800000806835:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff80000080683c:	ff ff ff 
ffff80000080683f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806843:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806846:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000806849:	48 98                	cdqe   
ffff80000080684b:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff800000806852:	48 01 d0             	add    rax,rdx
ffff800000806855:	c7 40 30 00 6e 00 00 	mov    DWORD PTR [rax+0x30],0x6e00
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:69
    task[index].mem_struct.heap_top=0x1101000;
ffff80000080685c:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000806863:	ff ff ff 
ffff800000806866:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080686a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080686d:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000806870:	48 98                	cdqe   
ffff800000806872:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff800000806879:	48 01 d0             	add    rax,rdx
ffff80000080687c:	c7 40 2c 00 10 10 01 	mov    DWORD PTR [rax+0x2c],0x1101000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:70
    task[index].mem_struct.heap_base=0x1100000;
ffff800000806883:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff80000080688a:	ff ff ff 
ffff80000080688d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806891:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806894:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000806897:	48 98                	cdqe   
ffff800000806899:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff8000008068a0:	48 01 d0             	add    rax,rdx
ffff8000008068a3:	c7 40 28 00 00 10 01 	mov    DWORD PTR [rax+0x28],0x1100000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:73

    //把还原现场时用到的堆栈设置好
    stack_store_regs *str= (stack_store_regs *) (0x7e00 - sizeof(stack_store_regs));
ffff8000008068aa:	48 c7 45 e0 58 7d 00 	mov    QWORD PTR [rbp-0x20],0x7d58
ffff8000008068b1:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:74
    str->rax=0;
ffff8000008068b2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008068b6:	48 c7 40 78 00 00 00 	mov    QWORD PTR [rax+0x78],0x0
ffff8000008068bd:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:75
    str->rbx=0;
ffff8000008068be:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008068c2:	48 c7 40 70 00 00 00 	mov    QWORD PTR [rax+0x70],0x0
ffff8000008068c9:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:76
    str->rcx=proc_zero;//sysret采用的返回地址
ffff8000008068ca:	48 b8 10 ff ff ff ff 	movabs rax,0xffffffffffffff10
ffff8000008068d1:	ff ff ff 
ffff8000008068d4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008068d8:	48 89 c2             	mov    rdx,rax
ffff8000008068db:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008068df:	48 89 50 68          	mov    QWORD PTR [rax+0x68],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:77
    str->rdx=0;
ffff8000008068e3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008068e7:	48 c7 40 60 00 00 00 	mov    QWORD PTR [rax+0x60],0x0
ffff8000008068ee:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:78
    str->rsi=0;
ffff8000008068ef:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008068f3:	48 c7 40 50 00 00 00 	mov    QWORD PTR [rax+0x50],0x0
ffff8000008068fa:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:79
    str->rdi=0;
ffff8000008068fb:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008068ff:	48 c7 40 58 00 00 00 	mov    QWORD PTR [rax+0x58],0x0
ffff800000806906:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:80
    str->r15=0;
ffff800000806907:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080690b:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff800000806912:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:81
    str->r14=0;
ffff800000806913:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806917:	48 c7 40 18 00 00 00 	mov    QWORD PTR [rax+0x18],0x0
ffff80000080691e:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:82
    str->r13=0;
ffff80000080691f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806923:	48 c7 40 20 00 00 00 	mov    QWORD PTR [rax+0x20],0x0
ffff80000080692a:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:83
    str->r12=0;
ffff80000080692b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080692f:	48 c7 40 28 00 00 00 	mov    QWORD PTR [rax+0x28],0x0
ffff800000806936:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:84
    str->r11=0x200;
ffff800000806937:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080693b:	48 c7 40 30 00 02 00 	mov    QWORD PTR [rax+0x30],0x200
ffff800000806942:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:85
    str->r10=0;
ffff800000806943:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806947:	48 c7 40 38 00 00 00 	mov    QWORD PTR [rax+0x38],0x0
ffff80000080694e:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:86
    str->r9=0;
ffff80000080694f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806953:	48 c7 40 40 00 00 00 	mov    QWORD PTR [rax+0x40],0x0
ffff80000080695a:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:87
    str->r8=0;
ffff80000080695b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080695f:	48 c7 40 48 00 00 00 	mov    QWORD PTR [rax+0x48],0x0
ffff800000806966:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:88
    str->rip=proc_zero;
ffff800000806967:	48 b8 10 ff ff ff ff 	movabs rax,0xffffffffffffff10
ffff80000080696e:	ff ff ff 
ffff800000806971:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806975:	48 89 c2             	mov    rdx,rax
ffff800000806978:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080697c:	48 89 90 80 00 00 00 	mov    QWORD PTR [rax+0x80],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:89
    str->cs=0x8;
ffff800000806983:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806987:	48 c7 80 88 00 00 00 	mov    QWORD PTR [rax+0x88],0x8
ffff80000080698e:	08 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:90
    str->rflags=0x00200206;
ffff800000806992:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806996:	48 c7 80 90 00 00 00 	mov    QWORD PTR [rax+0x90],0x200206
ffff80000080699d:	06 02 20 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:91
    str->rsp=0x7e00;
ffff8000008069a1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008069a5:	48 c7 80 98 00 00 00 	mov    QWORD PTR [rax+0x98],0x7e00
ffff8000008069ac:	00 7e 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:92
    str->ss=0x2b;
ffff8000008069b0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008069b4:	48 c7 80 a0 00 00 00 	mov    QWORD PTR [rax+0xa0],0x2b
ffff8000008069bb:	2b 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:93
    str->ds=0x2b;
ffff8000008069bf:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008069c3:	48 c7 00 2b 00 00 00 	mov    QWORD PTR [rax],0x2b
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:94
    str->es=0x2b;
ffff8000008069ca:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008069ce:	48 c7 40 08 2b 00 00 	mov    QWORD PTR [rax+0x8],0x2b
ffff8000008069d5:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:96

}
ffff8000008069d6:	90                   	nop
ffff8000008069d7:	48 8d 65 f0          	lea    rsp,[rbp-0x10]
ffff8000008069db:	5b                   	pop    rbx
ffff8000008069dc:	41 5f                	pop    r15
ffff8000008069de:	5d                   	pop    rbp
ffff8000008069df:	c3                   	ret    

ffff8000008069e0 <init_proc0>:
init_proc0():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:98
int init_proc0()
{
ffff8000008069e0:	f3 0f 1e fa          	endbr64 
ffff8000008069e4:	55                   	push   rbp
ffff8000008069e5:	48 89 e5             	mov    rbp,rsp
ffff8000008069e8:	41 57                	push   r15
ffff8000008069ea:	53                   	push   rbx
ffff8000008069eb:	48 83 ec 10          	sub    rsp,0x10
ffff8000008069ef:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008069ef <init_proc0+0xf>
ffff8000008069f6:	49 bb 49 89 01 00 00 	movabs r11,0x18949
ffff8000008069fd:	00 00 00 
ffff800000806a00:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:100

    task[0].pid=pidd++;
ffff800000806a03:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000806a0a:	ff ff ff 
ffff800000806a0d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806a11:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000806a13:	8d 48 01             	lea    ecx,[rax+0x1]
ffff800000806a16:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff800000806a1d:	ff ff ff 
ffff800000806a20:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000806a24:	89 0a                	mov    DWORD PTR [rdx],ecx
ffff800000806a26:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff800000806a2d:	ff ff ff 
ffff800000806a30:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000806a34:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000806a37:	89 02                	mov    DWORD PTR [rdx],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:101
    task[0].stat=TASK_ZOMBIE;
ffff800000806a39:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000806a40:	ff ff ff 
ffff800000806a43:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806a47:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806a4a:	c7 40 18 04 00 00 00 	mov    DWORD PTR [rax+0x18],0x4
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:102
    task[0].utime=0;
ffff800000806a51:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000806a58:	ff ff ff 
ffff800000806a5b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806a5f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806a62:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [rax+0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:103
    task[0].priority=0;
ffff800000806a69:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000806a70:	ff ff ff 
ffff800000806a73:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806a77:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806a7a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [rax+0x20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:105

    struct process *pz=task;
ffff800000806a81:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000806a88:	ff ff ff 
ffff800000806a8b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806a8f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806a92:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:106
    addr_t currsp=KNL_BASE+0x400000;
ffff800000806a96:	48 b8 00 00 40 00 00 	movabs rax,0xffff800000400000
ffff800000806a9d:	80 ff ff 
ffff800000806aa0:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:110
//    asm volatile("mov %%rsp,%0"::"m"(currsp));
    //默认DPL=3
    //set_proc(0,0,0,0,0x23,0x1b,0x23,0x23,0x23,0x23,curesp,0,0,0,0,index);
    set_proc(0, 0, 0, 0, 0x10, 0x8, 0x10, 0x10, 0x10, 0x10,
ffff800000806aa4:	48 b8 10 ff ff ff ff 	movabs rax,0xffffffffffffff10
ffff800000806aab:	ff ff ff 
ffff800000806aae:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806ab2:	48 89 c2             	mov    rdx,rax
ffff800000806ab5:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000806ab9:	48 83 ec 08          	sub    rsp,0x8
ffff800000806abd:	6a 00                	push   0x0
ffff800000806abf:	6a 00                	push   0x0
ffff800000806ac1:	52                   	push   rdx
ffff800000806ac2:	6a 00                	push   0x0
ffff800000806ac4:	6a 00                	push   0x0
ffff800000806ac6:	6a 00                	push   0x0
ffff800000806ac8:	50                   	push   rax
ffff800000806ac9:	6a 10                	push   0x10
ffff800000806acb:	6a 10                	push   0x10
ffff800000806acd:	6a 10                	push   0x10
ffff800000806acf:	6a 10                	push   0x10
ffff800000806ad1:	41 b9 08 00 00 00    	mov    r9d,0x8
ffff800000806ad7:	41 b8 10 00 00 00    	mov    r8d,0x10
ffff800000806add:	b9 00 00 00 00       	mov    ecx,0x0
ffff800000806ae2:	ba 00 00 00 00       	mov    edx,0x0
ffff800000806ae7:	be 00 00 00 00       	mov    esi,0x0
ffff800000806aec:	bf 00 00 00 00       	mov    edi,0x0
ffff800000806af1:	49 89 df             	mov    r15,rbx
ffff800000806af4:	48 b8 de 79 fe ff ff 	movabs rax,0xfffffffffffe79de
ffff800000806afb:	ff ff ff 
ffff800000806afe:	48 01 d8             	add    rax,rbx
ffff800000806b01:	ff d0                	call   rax
ffff800000806b03:	48 83 c4 60          	add    rsp,0x60
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:118
    extern struct dir_entry* dtty;
    //stdin stdout stderr
    //这里绕开了sys open，这样是为了尽量快
    extern struct file ftty;
    //不知道为什么，这里就是没法加上高地址
    pz->openf[0]=(struct file*)((addr_t)&ftty|KNL_BASE);
ffff800000806b07:	48 b8 38 fe ff ff ff 	movabs rax,0xfffffffffffffe38
ffff800000806b0e:	ff ff ff 
ffff800000806b11:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806b15:	48 89 c2             	mov    rdx,rax
ffff800000806b18:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff800000806b1f:	80 ff ff 
ffff800000806b22:	48 09 d0             	or     rax,rdx
ffff800000806b25:	48 89 c2             	mov    rdx,rax
ffff800000806b28:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806b2c:	48 89 90 d8 00 00 00 	mov    QWORD PTR [rax+0xd8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:119
    pz->openf[1]=(struct file*)((addr_t)&ftty|KNL_BASE);
ffff800000806b33:	48 b8 38 fe ff ff ff 	movabs rax,0xfffffffffffffe38
ffff800000806b3a:	ff ff ff 
ffff800000806b3d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806b41:	48 89 c2             	mov    rdx,rax
ffff800000806b44:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff800000806b4b:	80 ff ff 
ffff800000806b4e:	48 09 d0             	or     rax,rdx
ffff800000806b51:	48 89 c2             	mov    rdx,rax
ffff800000806b54:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806b58:	48 89 90 e0 00 00 00 	mov    QWORD PTR [rax+0xe0],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:120
    pz->openf[2]=(struct file*)((addr_t)&ftty|KNL_BASE);
ffff800000806b5f:	48 b8 38 fe ff ff ff 	movabs rax,0xfffffffffffffe38
ffff800000806b66:	ff ff ff 
ffff800000806b69:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806b6d:	48 89 c2             	mov    rdx,rax
ffff800000806b70:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff800000806b77:	80 ff ff 
ffff800000806b7a:	48 09 d0             	or     rax,rdx
ffff800000806b7d:	48 89 c2             	mov    rdx,rax
ffff800000806b80:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806b84:	48 89 90 e8 00 00 00 	mov    QWORD PTR [rax+0xe8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:122

    pz->mem_struct.stack_top=STACK_TOP;
ffff800000806b8b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806b8f:	c7 40 34 00 f0 ff ff 	mov    DWORD PTR [rax+0x34],0xfffff000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:123
    pz->mem_struct.stack_bottom=STACK_TOP-CHUNK_SIZE;
ffff800000806b96:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806b9a:	c7 40 30 00 e0 ff ff 	mov    DWORD PTR [rax+0x30],0xffffe000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:124
    pz->mem_struct.heap_top=HEAP_BASE+CHUNK_SIZE;
ffff800000806ba1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806ba5:	c7 40 2c 00 10 00 01 	mov    DWORD PTR [rax+0x2c],0x1001000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:125
    pz->mem_struct.heap_base=HEAP_BASE;
ffff800000806bac:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000806bb0:	c7 40 28 00 00 00 01 	mov    DWORD PTR [rax+0x28],0x1000000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:128


    return 0;
ffff800000806bb7:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:129
}
ffff800000806bbc:	48 8d 65 f0          	lea    rsp,[rbp-0x10]
ffff800000806bc0:	5b                   	pop    rbx
ffff800000806bc1:	41 5f                	pop    r15
ffff800000806bc3:	5d                   	pop    rbp
ffff800000806bc4:	c3                   	ret    

ffff800000806bc5 <req_proc>:
req_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:130
int req_proc(){
ffff800000806bc5:	f3 0f 1e fa          	endbr64 
ffff800000806bc9:	55                   	push   rbp
ffff800000806bca:	48 89 e5             	mov    rbp,rsp
ffff800000806bcd:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000806bcd <req_proc+0x8>
ffff800000806bd4:	49 bb 6b 87 01 00 00 	movabs r11,0x1876b
ffff800000806bdb:	00 00 00 
ffff800000806bde:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:131
    int num=0;
ffff800000806be1:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:132
    while(task[num].pid!=-1 && task[num].stat != TASK_EMPTY && \
ffff800000806be8:	eb 04                	jmp    ffff800000806bee <req_proc+0x29>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:134
    num<=MAX_PROC_COUNT){
        num++;
ffff800000806bea:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:132
    while(task[num].pid!=-1 && task[num].stat != TASK_EMPTY && \
ffff800000806bee:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff800000806bf5:	ff ff ff 
ffff800000806bf8:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806bfc:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000806bff:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000806c02:	48 63 d2             	movsxd rdx,edx
ffff800000806c05:	48 69 d2 34 03 00 00 	imul   rdx,rdx,0x334
ffff800000806c0c:	48 01 ca             	add    rdx,rcx
ffff800000806c0f:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000806c11:	83 fa ff             	cmp    edx,0xffffffff
ffff800000806c14:	74 2e                	je     ffff800000806c44 <req_proc+0x7f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:132 (discriminator 1)
ffff800000806c16:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff800000806c1d:	ff ff ff 
ffff800000806c20:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806c24:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000806c27:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000806c2a:	48 63 d2             	movsxd rdx,edx
ffff800000806c2d:	48 69 d2 34 03 00 00 	imul   rdx,rdx,0x334
ffff800000806c34:	48 01 ca             	add    rdx,rcx
ffff800000806c37:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff800000806c3a:	85 d2                	test   edx,edx
ffff800000806c3c:	74 06                	je     ffff800000806c44 <req_proc+0x7f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:132 (discriminator 2)
ffff800000806c3e:	83 7d fc 40          	cmp    DWORD PTR [rbp-0x4],0x40
ffff800000806c42:	7e a6                	jle    ffff800000806bea <req_proc+0x25>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:136
    }
    if(num>=MAX_PROC_COUNT)
ffff800000806c44:	83 7d fc 3f          	cmp    DWORD PTR [rbp-0x4],0x3f
ffff800000806c48:	7e 0a                	jle    ffff800000806c54 <req_proc+0x8f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:137
        return -1;
ffff800000806c4a:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000806c4f:	e9 c0 00 00 00       	jmp    ffff800000806d14 <req_proc+0x14f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:138
    task[num].pid=pidd++;
ffff800000806c54:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff800000806c5b:	ff ff ff 
ffff800000806c5e:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806c62:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000806c64:	8d 72 01             	lea    esi,[rdx+0x1]
ffff800000806c67:	48 b9 60 fe ff ff ff 	movabs rcx,0xfffffffffffffe60
ffff800000806c6e:	ff ff ff 
ffff800000806c71:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff800000806c75:	89 31                	mov    DWORD PTR [rcx],esi
ffff800000806c77:	48 b9 c0 fe ff ff ff 	movabs rcx,0xfffffffffffffec0
ffff800000806c7e:	ff ff ff 
ffff800000806c81:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff800000806c85:	48 8b 31             	mov    rsi,QWORD PTR [rcx]
ffff800000806c88:	8b 4d fc             	mov    ecx,DWORD PTR [rbp-0x4]
ffff800000806c8b:	48 63 c9             	movsxd rcx,ecx
ffff800000806c8e:	48 69 c9 34 03 00 00 	imul   rcx,rcx,0x334
ffff800000806c95:	48 01 f1             	add    rcx,rsi
ffff800000806c98:	89 11                	mov    DWORD PTR [rcx],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:139
    task[num].stat=TASK_ZOMBIE;
ffff800000806c9a:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff800000806ca1:	ff ff ff 
ffff800000806ca4:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806ca8:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000806cab:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000806cae:	48 63 d2             	movsxd rdx,edx
ffff800000806cb1:	48 69 d2 34 03 00 00 	imul   rdx,rdx,0x334
ffff800000806cb8:	48 01 ca             	add    rdx,rcx
ffff800000806cbb:	c7 42 18 04 00 00 00 	mov    DWORD PTR [rdx+0x18],0x4
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:140
    task[num].utime=0;
ffff800000806cc2:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff800000806cc9:	ff ff ff 
ffff800000806ccc:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806cd0:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000806cd3:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000806cd6:	48 63 d2             	movsxd rdx,edx
ffff800000806cd9:	48 69 d2 34 03 00 00 	imul   rdx,rdx,0x334
ffff800000806ce0:	48 01 ca             	add    rdx,rcx
ffff800000806ce3:	c7 42 1c 00 00 00 00 	mov    DWORD PTR [rdx+0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:141
    task[num].priority=0;
ffff800000806cea:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff800000806cf1:	ff ff ff 
ffff800000806cf4:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000806cf8:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806cfb:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000806cfe:	48 98                	cdqe   
ffff800000806d00:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff800000806d07:	48 01 d0             	add    rax,rdx
ffff800000806d0a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [rax+0x20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:142
    return num;
ffff800000806d11:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:143
}
ffff800000806d14:	5d                   	pop    rbp
ffff800000806d15:	c3                   	ret    

ffff800000806d16 <set_proc>:
set_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:145
void set_proc(long rax, long rbx, long rcx, long rdx, long es, long cs, long ss, long ds, long fs, long gs, long rsp,
              long rbp, long rsi, long rdi, long rip, long rflags, int proc_nr) {
ffff800000806d16:	f3 0f 1e fa          	endbr64 
ffff800000806d1a:	55                   	push   rbp
ffff800000806d1b:	48 89 e5             	mov    rbp,rsp
ffff800000806d1e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000806d1e <set_proc+0x8>
ffff800000806d25:	49 bb 1a 86 01 00 00 	movabs r11,0x1861a
ffff800000806d2c:	00 00 00 
ffff800000806d2f:	4c 01 d8             	add    rax,r11
ffff800000806d32:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000806d36:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff800000806d3a:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffff800000806d3e:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
ffff800000806d42:	4c 89 45 c8          	mov    QWORD PTR [rbp-0x38],r8
ffff800000806d46:	4c 89 4d c0          	mov    QWORD PTR [rbp-0x40],r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:146
    struct process* proc=&task[proc_nr];
ffff800000806d4a:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff800000806d51:	ff ff ff 
ffff800000806d54:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000806d58:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000806d5b:	8b 45 60             	mov    eax,DWORD PTR [rbp+0x60]
ffff800000806d5e:	48 98                	cdqe   
ffff800000806d60:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff800000806d67:	48 01 d0             	add    rax,rdx
ffff800000806d6a:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:147
    proc->regs.rax=rax;
ffff800000806d6e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000806d72:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000806d76:	48 89 90 5c 02 00 00 	mov    QWORD PTR [rax+0x25c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:148
    proc->regs.rbx=rbx;
ffff800000806d7d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000806d81:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000806d85:	48 89 90 74 02 00 00 	mov    QWORD PTR [rax+0x274],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:149
    proc->regs.rcx=rcx;
ffff800000806d8c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000806d90:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000806d94:	48 89 90 64 02 00 00 	mov    QWORD PTR [rax+0x264],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:150
    proc->regs.rdx=rdx;
ffff800000806d9b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000806d9f:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000806da3:	48 89 90 6c 02 00 00 	mov    QWORD PTR [rax+0x26c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:151
    proc->regs.es=es;
ffff800000806daa:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000806dae:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000806db2:	48 89 90 9c 02 00 00 	mov    QWORD PTR [rax+0x29c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:152
    proc->regs.cs=cs;
ffff800000806db9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000806dbd:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000806dc1:	48 89 90 a4 02 00 00 	mov    QWORD PTR [rax+0x2a4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:153
    proc->regs.ss=ss;
ffff800000806dc8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000806dcc:	48 8b 55 10          	mov    rdx,QWORD PTR [rbp+0x10]
ffff800000806dd0:	48 89 90 ac 02 00 00 	mov    QWORD PTR [rax+0x2ac],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:154
    proc->regs.ds=ds;
ffff800000806dd7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000806ddb:	48 8b 55 18          	mov    rdx,QWORD PTR [rbp+0x18]
ffff800000806ddf:	48 89 90 b4 02 00 00 	mov    QWORD PTR [rax+0x2b4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:155
    proc->regs.fs=fs;
ffff800000806de6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000806dea:	48 8b 55 20          	mov    rdx,QWORD PTR [rbp+0x20]
ffff800000806dee:	48 89 90 bc 02 00 00 	mov    QWORD PTR [rax+0x2bc],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:156
    proc->regs.gs=gs;
ffff800000806df5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000806df9:	48 8b 55 28          	mov    rdx,QWORD PTR [rbp+0x28]
ffff800000806dfd:	48 89 90 c4 02 00 00 	mov    QWORD PTR [rax+0x2c4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:157
    proc->regs.rsp=rsp;
ffff800000806e04:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000806e08:	48 8b 55 30          	mov    rdx,QWORD PTR [rbp+0x30]
ffff800000806e0c:	48 89 90 7c 02 00 00 	mov    QWORD PTR [rax+0x27c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:158
    proc->regs.rbp=rbp;
ffff800000806e13:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000806e17:	48 8b 55 38          	mov    rdx,QWORD PTR [rbp+0x38]
ffff800000806e1b:	48 89 90 84 02 00 00 	mov    QWORD PTR [rax+0x284],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:159
    proc->regs.rsi=rsi;
ffff800000806e22:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000806e26:	48 8b 55 40          	mov    rdx,QWORD PTR [rbp+0x40]
ffff800000806e2a:	48 89 90 8c 02 00 00 	mov    QWORD PTR [rax+0x28c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:160
    proc->regs.rdi=rdi;
ffff800000806e31:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000806e35:	48 8b 55 48          	mov    rdx,QWORD PTR [rbp+0x48]
ffff800000806e39:	48 89 90 94 02 00 00 	mov    QWORD PTR [rax+0x294],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:161
    proc->regs.rflags=0x202;//设置为默认值:0b 0010 0000 0010
ffff800000806e40:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000806e44:	48 c7 80 54 02 00 00 	mov    QWORD PTR [rax+0x254],0x202
ffff800000806e4b:	02 02 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:163
    //能接受中断
    proc->regs.rip=rip;
ffff800000806e4f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000806e53:	48 8b 55 50          	mov    rdx,QWORD PTR [rbp+0x50]
ffff800000806e57:	48 89 90 4c 02 00 00 	mov    QWORD PTR [rax+0x24c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:165

    proc->regs.cs=cs;
ffff800000806e5e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000806e62:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000806e66:	48 89 90 a4 02 00 00 	mov    QWORD PTR [rax+0x2a4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:166
    proc->regs.ds=ds;
ffff800000806e6d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000806e71:	48 8b 55 18          	mov    rdx,QWORD PTR [rbp+0x18]
ffff800000806e75:	48 89 90 b4 02 00 00 	mov    QWORD PTR [rax+0x2b4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:167
    proc->regs.es=es;
ffff800000806e7c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000806e80:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000806e84:	48 89 90 9c 02 00 00 	mov    QWORD PTR [rax+0x29c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:168
    proc->regs.cr3=PML4_ADDR;//get_phyaddr(n1);//暂时先搞成全局
ffff800000806e8b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000806e8f:	48 b9 00 10 10 00 00 	movabs rcx,0xffff800000101000
ffff800000806e96:	80 ff ff 
ffff800000806e99:	48 89 88 44 02 00 00 	mov    QWORD PTR [rax+0x244],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:169
    proc->pml4=PML4_ADDR;
ffff800000806ea0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000806ea4:	48 89 88 c0 00 00 00 	mov    QWORD PTR [rax+0xc0],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:172


}
ffff800000806eab:	90                   	nop
ffff800000806eac:	5d                   	pop    rbp
ffff800000806ead:	c3                   	ret    

ffff800000806eae <proc_zero>:
proc_zero():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:174
void proc_zero()
{
ffff800000806eae:	f3 0f 1e fa          	endbr64 
ffff800000806eb2:	55                   	push   rbp
ffff800000806eb3:	48 89 e5             	mov    rbp,rsp
ffff800000806eb6:	41 57                	push   r15
ffff800000806eb8:	53                   	push   rbx
ffff800000806eb9:	48 83 ec 10          	sub    rsp,0x10
ffff800000806ebd:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000806ebd <proc_zero+0xf>
ffff800000806ec4:	49 bb 7b 84 01 00 00 	movabs r11,0x1847b
ffff800000806ecb:	00 00 00 
ffff800000806ece:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:187 (discriminator 1)
//    }else{
//        printf("parent proc ret:%d\n",rax);
//    }
    while (1)
    {
        char c= sys_analyse_key();
ffff800000806ed1:	49 89 df             	mov    r15,rbx
ffff800000806ed4:	b8 00 00 00 00       	mov    eax,0x0
ffff800000806ed9:	48 ba a8 eb fe ff ff 	movabs rdx,0xfffffffffffeeba8
ffff800000806ee0:	ff ff ff 
ffff800000806ee3:	48 01 da             	add    rdx,rbx
ffff800000806ee6:	ff d2                	call   rdx
ffff800000806ee8:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:188 (discriminator 1)
        putchar(c);
ffff800000806eeb:	0f be 45 ef          	movsx  eax,BYTE PTR [rbp-0x11]
ffff800000806eef:	89 c7                	mov    edi,eax
ffff800000806ef1:	49 89 df             	mov    r15,rbx
ffff800000806ef4:	48 b8 41 23 fe ff ff 	movabs rax,0xfffffffffffe2341
ffff800000806efb:	ff ff ff 
ffff800000806efe:	48 01 d8             	add    rax,rbx
ffff800000806f01:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:186 (discriminator 1)
    {
ffff800000806f03:	eb cc                	jmp    ffff800000806ed1 <proc_zero+0x23>

ffff800000806f05 <save_rsp>:
save_rsp():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:191
    }
}
void save_rsp(){
ffff800000806f05:	f3 0f 1e fa          	endbr64 
ffff800000806f09:	55                   	push   rbp
ffff800000806f0a:	48 89 e5             	mov    rbp,rsp
ffff800000806f0d:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000806f0d <save_rsp+0x8>
ffff800000806f14:	49 bb 2b 84 01 00 00 	movabs r11,0x1842b
ffff800000806f1b:	00 00 00 
ffff800000806f1e:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:193
    //在时钟中断context下
    addr_t * p=INT_STACK_TOP-16;
ffff800000806f21:	48 be f0 ff 7f 00 00 	movabs rsi,0xffff8000007ffff0
ffff800000806f28:	80 ff ff 
ffff800000806f2b:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:194
    current->regs.rsp=*p;
ffff800000806f2f:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000806f33:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000806f36:	48 b9 90 fe ff ff ff 	movabs rcx,0xfffffffffffffe90
ffff800000806f3d:	ff ff ff 
ffff800000806f40:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff800000806f44:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806f47:	48 89 90 7c 02 00 00 	mov    QWORD PTR [rax+0x27c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:195
}
ffff800000806f4e:	90                   	nop
ffff800000806f4f:	5d                   	pop    rbp
ffff800000806f50:	c3                   	ret    

ffff800000806f51 <manage_proc>:
manage_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:196
void manage_proc(){
ffff800000806f51:	f3 0f 1e fa          	endbr64 
ffff800000806f55:	55                   	push   rbp
ffff800000806f56:	48 89 e5             	mov    rbp,rsp
ffff800000806f59:	41 57                	push   r15
ffff800000806f5b:	48 83 ec 18          	sub    rsp,0x18
ffff800000806f5f:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000806f5f <manage_proc+0xe>
ffff800000806f66:	49 bb d9 83 01 00 00 	movabs r11,0x183d9
ffff800000806f6d:	00 00 00 
ffff800000806f70:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:197
    if(cur_proc!=-1)
ffff800000806f73:	48 ba 40 fe ff ff ff 	movabs rdx,0xfffffffffffffe40
ffff800000806f7a:	ff ff ff 
ffff800000806f7d:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806f81:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000806f83:	83 fa ff             	cmp    edx,0xffffffff
ffff800000806f86:	74 37                	je     ffff800000806fbf <manage_proc+0x6e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:198
        task[cur_proc].utime++;
ffff800000806f88:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff800000806f8f:	ff ff ff 
ffff800000806f92:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806f96:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000806f99:	48 ba 40 fe ff ff ff 	movabs rdx,0xfffffffffffffe40
ffff800000806fa0:	ff ff ff 
ffff800000806fa3:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806fa7:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000806fa9:	48 63 d2             	movsxd rdx,edx
ffff800000806fac:	48 69 d2 34 03 00 00 	imul   rdx,rdx,0x334
ffff800000806fb3:	48 01 ca             	add    rdx,rcx
ffff800000806fb6:	8b 4a 1c             	mov    ecx,DWORD PTR [rdx+0x1c]
ffff800000806fb9:	83 c1 01             	add    ecx,0x1
ffff800000806fbc:	89 4a 1c             	mov    DWORD PTR [rdx+0x1c],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:199
    if(cur_proc==-1||task[cur_proc].utime>MAX_UTIME||\
ffff800000806fbf:	48 ba 40 fe ff ff ff 	movabs rdx,0xfffffffffffffe40
ffff800000806fc6:	ff ff ff 
ffff800000806fc9:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806fcd:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000806fcf:	83 fa ff             	cmp    edx,0xffffffff
ffff800000806fd2:	74 70                	je     ffff800000807044 <manage_proc+0xf3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:199 (discriminator 1)
ffff800000806fd4:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff800000806fdb:	ff ff ff 
ffff800000806fde:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806fe2:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000806fe5:	48 ba 40 fe ff ff ff 	movabs rdx,0xfffffffffffffe40
ffff800000806fec:	ff ff ff 
ffff800000806fef:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806ff3:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000806ff5:	48 63 d2             	movsxd rdx,edx
ffff800000806ff8:	48 69 d2 34 03 00 00 	imul   rdx,rdx,0x334
ffff800000806fff:	48 01 ca             	add    rdx,rcx
ffff800000807002:	8b 52 1c             	mov    edx,DWORD PTR [rdx+0x1c]
ffff800000807005:	83 fa 0a             	cmp    edx,0xa
ffff800000807008:	77 3a                	ja     ffff800000807044 <manage_proc+0xf3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:200 (discriminator 2)
    task[cur_proc].stat != TASK_READY){
ffff80000080700a:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff800000807011:	ff ff ff 
ffff800000807014:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807018:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080701b:	48 ba 40 fe ff ff ff 	movabs rdx,0xfffffffffffffe40
ffff800000807022:	ff ff ff 
ffff800000807025:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807029:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff80000080702b:	48 63 d2             	movsxd rdx,edx
ffff80000080702e:	48 69 d2 34 03 00 00 	imul   rdx,rdx,0x334
ffff800000807035:	48 01 ca             	add    rdx,rcx
ffff800000807038:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:199 (discriminator 2)
    if(cur_proc==-1||task[cur_proc].utime>MAX_UTIME||\
ffff80000080703b:	83 fa 02             	cmp    edx,0x2
ffff80000080703e:	0f 84 bf 01 00 00    	je     ffff800000807203 <manage_proc+0x2b2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:201
        if(cur_proc!=-1)
ffff800000807044:	48 ba 40 fe ff ff ff 	movabs rdx,0xfffffffffffffe40
ffff80000080704b:	ff ff ff 
ffff80000080704e:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807052:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000807054:	83 fa ff             	cmp    edx,0xffffffff
ffff800000807057:	74 35                	je     ffff80000080708e <manage_proc+0x13d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:202
            task[cur_proc].utime=0;
ffff800000807059:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff800000807060:	ff ff ff 
ffff800000807063:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807067:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080706a:	48 ba 40 fe ff ff ff 	movabs rdx,0xfffffffffffffe40
ffff800000807071:	ff ff ff 
ffff800000807074:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807078:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff80000080707a:	48 63 d2             	movsxd rdx,edx
ffff80000080707d:	48 69 d2 34 03 00 00 	imul   rdx,rdx,0x334
ffff800000807084:	48 01 ca             	add    rdx,rcx
ffff800000807087:	c7 42 1c 00 00 00 00 	mov    DWORD PTR [rdx+0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:204
        //find
        int i=cur_proc+1;
ffff80000080708e:	48 ba 40 fe ff ff ff 	movabs rdx,0xfffffffffffffe40
ffff800000807095:	ff ff ff 
ffff800000807098:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080709c:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff80000080709e:	83 c2 01             	add    edx,0x1
ffff8000008070a1:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:205
        int times=0;
ffff8000008070a4:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:207
        //轮询，直到有一个符合条件
        while(times<10){
ffff8000008070ab:	eb 7b                	jmp    ffff800000807128 <manage_proc+0x1d7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:208
            if(task[i].pid!=-1 && task[i].stat == TASK_READY && i != cur_proc){
ffff8000008070ad:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff8000008070b4:	ff ff ff 
ffff8000008070b7:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008070bb:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008070be:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff8000008070c1:	48 63 d2             	movsxd rdx,edx
ffff8000008070c4:	48 69 d2 34 03 00 00 	imul   rdx,rdx,0x334
ffff8000008070cb:	48 01 ca             	add    rdx,rcx
ffff8000008070ce:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff8000008070d0:	83 fa ff             	cmp    edx,0xffffffff
ffff8000008070d3:	74 3e                	je     ffff800000807113 <manage_proc+0x1c2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:208 (discriminator 1)
ffff8000008070d5:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff8000008070dc:	ff ff ff 
ffff8000008070df:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008070e3:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008070e6:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff8000008070e9:	48 63 d2             	movsxd rdx,edx
ffff8000008070ec:	48 69 d2 34 03 00 00 	imul   rdx,rdx,0x334
ffff8000008070f3:	48 01 ca             	add    rdx,rcx
ffff8000008070f6:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff8000008070f9:	83 fa 02             	cmp    edx,0x2
ffff8000008070fc:	75 15                	jne    ffff800000807113 <manage_proc+0x1c2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:208 (discriminator 2)
ffff8000008070fe:	48 ba 40 fe ff ff ff 	movabs rdx,0xfffffffffffffe40
ffff800000807105:	ff ff ff 
ffff800000807108:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080710c:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff80000080710e:	39 55 ec             	cmp    DWORD PTR [rbp-0x14],edx
ffff800000807111:	75 21                	jne    ffff800000807134 <manage_proc+0x1e3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:211
                break;
            }
            i++;
ffff800000807113:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:212
            if(i>=MAX_TASKS){
ffff800000807117:	83 7d ec 1f          	cmp    DWORD PTR [rbp-0x14],0x1f
ffff80000080711b:	7e 0b                	jle    ffff800000807128 <manage_proc+0x1d7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:213
                times++;
ffff80000080711d:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:214
                i=0;
ffff800000807121:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:207
        while(times<10){
ffff800000807128:	83 7d e8 09          	cmp    DWORD PTR [rbp-0x18],0x9
ffff80000080712c:	0f 8e 7b ff ff ff    	jle    ffff8000008070ad <manage_proc+0x15c>
ffff800000807132:	eb 01                	jmp    ffff800000807135 <manage_proc+0x1e4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:209
                break;
ffff800000807134:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:217
            }
        }
        if(times==10)return;//超过十次尝试都没有，暂时不切换
ffff800000807135:	83 7d e8 0a          	cmp    DWORD PTR [rbp-0x18],0xa
ffff800000807139:	0f 84 c7 00 00 00    	je     ffff800000807206 <manage_proc+0x2b5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:219
        //switch
        task[cur_proc].stat=TASK_READY;
ffff80000080713f:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff800000807146:	ff ff ff 
ffff800000807149:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080714d:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000807150:	48 ba 40 fe ff ff ff 	movabs rdx,0xfffffffffffffe40
ffff800000807157:	ff ff ff 
ffff80000080715a:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080715e:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000807160:	48 63 d2             	movsxd rdx,edx
ffff800000807163:	48 69 d2 34 03 00 00 	imul   rdx,rdx,0x334
ffff80000080716a:	48 01 ca             	add    rdx,rcx
ffff80000080716d:	c7 42 18 02 00 00 00 	mov    DWORD PTR [rdx+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:220
        task[i].stat=TASK_RUNNING;
ffff800000807174:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff80000080717b:	ff ff ff 
ffff80000080717e:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807182:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000807185:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000807188:	48 63 d2             	movsxd rdx,edx
ffff80000080718b:	48 69 d2 34 03 00 00 	imul   rdx,rdx,0x334
ffff800000807192:	48 01 ca             	add    rdx,rcx
ffff800000807195:	c7 42 18 01 00 00 00 	mov    DWORD PTR [rdx+0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:221
        switch_to(&task[cur_proc], &task[i]);
ffff80000080719c:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff8000008071a3:	ff ff ff 
ffff8000008071a6:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008071aa:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008071ad:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff8000008071b0:	48 63 d2             	movsxd rdx,edx
ffff8000008071b3:	48 69 d2 34 03 00 00 	imul   rdx,rdx,0x334
ffff8000008071ba:	48 01 d1             	add    rcx,rdx
ffff8000008071bd:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff8000008071c4:	ff ff ff 
ffff8000008071c7:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008071cb:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff8000008071ce:	48 ba 40 fe ff ff ff 	movabs rdx,0xfffffffffffffe40
ffff8000008071d5:	ff ff ff 
ffff8000008071d8:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008071dc:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff8000008071de:	48 63 d2             	movsxd rdx,edx
ffff8000008071e1:	48 69 d2 34 03 00 00 	imul   rdx,rdx,0x334
ffff8000008071e8:	48 01 f2             	add    rdx,rsi
ffff8000008071eb:	48 89 ce             	mov    rsi,rcx
ffff8000008071ee:	48 89 d7             	mov    rdi,rdx
ffff8000008071f1:	49 89 c7             	mov    r15,rax
ffff8000008071f4:	48 ba a1 8e fe ff ff 	movabs rdx,0xfffffffffffe8ea1
ffff8000008071fb:	ff ff ff 
ffff8000008071fe:	48 01 c2             	add    rdx,rax
ffff800000807201:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:223
    }
    return;
ffff800000807203:	90                   	nop
ffff800000807204:	eb 01                	jmp    ffff800000807207 <manage_proc+0x2b6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:217
        if(times==10)return;//超过十次尝试都没有，暂时不切换
ffff800000807206:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:224
}
ffff800000807207:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080720b:	c9                   	leave  
ffff80000080720c:	c3                   	ret    

ffff80000080720d <switch_proc_tss>:
switch_proc_tss():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:227

void switch_proc_tss(int pnr)
{
ffff80000080720d:	f3 0f 1e fa          	endbr64 
ffff800000807211:	55                   	push   rbp
ffff800000807212:	48 89 e5             	mov    rbp,rsp
ffff800000807215:	41 57                	push   r15
ffff800000807217:	48 83 ec 28          	sub    rsp,0x28
ffff80000080721b:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080721b <switch_proc_tss+0xe>
ffff800000807222:	49 bb 1d 81 01 00 00 	movabs r11,0x1811d
ffff800000807229:	00 00 00 
ffff80000080722c:	4c 01 d8             	add    rax,r11
ffff80000080722f:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:228
    int sel=_TSS_IND(pnr)*8;
ffff800000807232:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000807235:	01 d2                	add    edx,edx
ffff800000807237:	83 c2 05             	add    edx,0x5
ffff80000080723a:	c1 e2 03             	shl    edx,0x3
ffff80000080723d:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:229
    cur_proc=pnr;
ffff800000807240:	48 ba 40 fe ff ff ff 	movabs rdx,0xfffffffffffffe40
ffff800000807247:	ff ff ff 
ffff80000080724a:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080724e:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
ffff800000807251:	89 0a                	mov    DWORD PTR [rdx],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:230
    switch_proc_asm(sel);
ffff800000807253:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000807256:	89 d7                	mov    edi,edx
ffff800000807258:	49 89 c7             	mov    r15,rax
ffff80000080725b:	48 ba 3f 47 ff ff ff 	movabs rdx,0xffffffffffff473f
ffff800000807262:	ff ff ff 
ffff800000807265:	48 01 c2             	add    rdx,rax
ffff800000807268:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:231
}
ffff80000080726a:	90                   	nop
ffff80000080726b:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080726f:	c9                   	leave  
ffff800000807270:	c3                   	ret    

ffff800000807271 <switch_proc>:
switch_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:232
void switch_proc(int pnr){
ffff800000807271:	f3 0f 1e fa          	endbr64 
ffff800000807275:	55                   	push   rbp
ffff800000807276:	48 89 e5             	mov    rbp,rsp
ffff800000807279:	41 57                	push   r15
ffff80000080727b:	53                   	push   rbx
ffff80000080727c:	48 81 ec 50 03 00 00 	sub    rsp,0x350
ffff800000807283:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000807283 <switch_proc+0x12>
ffff80000080728a:	49 bb b5 80 01 00 00 	movabs r11,0x180b5
ffff800000807291:	00 00 00 
ffff800000807294:	4c 01 db             	add    rbx,r11
ffff800000807297:	89 bd ac fc ff ff    	mov    DWORD PTR [rbp-0x354],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:235
    //printf("switching proc to %d\n",pnr);
    //printf("eip:%x\n",task[pnr].tss.eip);
    struct process p=task[pnr];
ffff80000080729d:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff8000008072a4:	ff ff ff 
ffff8000008072a7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008072ab:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008072ae:	8b 85 ac fc ff ff    	mov    eax,DWORD PTR [rbp-0x354]
ffff8000008072b4:	48 98                	cdqe   
ffff8000008072b6:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff8000008072bd:	48 01 c2             	add    rdx,rax
ffff8000008072c0:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
ffff8000008072c7:	b9 66 00 00 00       	mov    ecx,0x66
ffff8000008072cc:	48 89 c7             	mov    rdi,rax
ffff8000008072cf:	48 89 d6             	mov    rsi,rdx
ffff8000008072d2:	f3 48 a5             	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
ffff8000008072d5:	48 89 f2             	mov    rdx,rsi
ffff8000008072d8:	48 89 f8             	mov    rax,rdi
ffff8000008072db:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff8000008072dd:	89 08                	mov    DWORD PTR [rax],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:236
    save_context(&task[cur_proc].tss);
ffff8000008072df:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff8000008072e6:	ff ff ff 
ffff8000008072e9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008072ed:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008072f0:	48 b8 40 fe ff ff ff 	movabs rax,0xfffffffffffffe40
ffff8000008072f7:	ff ff ff 
ffff8000008072fa:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008072fe:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000807300:	48 98                	cdqe   
ffff800000807302:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff800000807309:	48 01 d0             	add    rax,rdx
ffff80000080730c:	48 05 d8 01 00 00    	add    rax,0x1d8
ffff800000807312:	48 89 c7             	mov    rdi,rax
ffff800000807315:	49 89 df             	mov    r15,rbx
ffff800000807318:	48 b8 66 80 fe ff ff 	movabs rax,0xfffffffffffe8066
ffff80000080731f:	ff ff ff 
ffff800000807322:	48 01 d8             	add    rax,rbx
ffff800000807325:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:241
//    //重新设置0号进程
//    task[0].tss.eip=proc_zero;
//    task[0].tss.cr3=PAGE_INDEX_ADDR;
//    task[0].tss.eflags=0x202;
    cur_proc=pnr;
ffff800000807327:	48 b8 40 fe ff ff ff 	movabs rax,0xfffffffffffffe40
ffff80000080732e:	ff ff ff 
ffff800000807331:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807335:	8b 95 ac fc ff ff    	mov    edx,DWORD PTR [rbp-0x354]
ffff80000080733b:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:242
    int sel=_TSS_IND(pnr)*8;
ffff80000080733d:	8b 85 ac fc ff ff    	mov    eax,DWORD PTR [rbp-0x354]
ffff800000807343:	01 c0                	add    eax,eax
ffff800000807345:	83 c0 05             	add    eax,0x5
ffff800000807348:	c1 e0 03             	shl    eax,0x3
ffff80000080734b:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:243
    switch_to(NULL, &task[pnr].tss);
ffff80000080734e:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000807355:	ff ff ff 
ffff800000807358:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080735c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080735f:	8b 85 ac fc ff ff    	mov    eax,DWORD PTR [rbp-0x354]
ffff800000807365:	48 98                	cdqe   
ffff800000807367:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff80000080736e:	48 01 d0             	add    rax,rdx
ffff800000807371:	48 05 d8 01 00 00    	add    rax,0x1d8
ffff800000807377:	48 89 c6             	mov    rsi,rax
ffff80000080737a:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080737f:	49 89 df             	mov    r15,rbx
ffff800000807382:	48 b8 a1 8e fe ff ff 	movabs rax,0xfffffffffffe8ea1
ffff800000807389:	ff ff ff 
ffff80000080738c:	48 01 d8             	add    rax,rbx
ffff80000080738f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:246
    //asm volatile("push %0":"=r"(task[pnr].tss.eip));
    //switch_proc_asm(pnr*8+0x8*3);
}
ffff800000807391:	90                   	nop
ffff800000807392:	48 81 c4 50 03 00 00 	add    rsp,0x350
ffff800000807399:	5b                   	pop    rbx
ffff80000080739a:	41 5f                	pop    r15
ffff80000080739c:	5d                   	pop    rbp
ffff80000080739d:	c3                   	ret    

ffff80000080739e <save_context>:
save_context():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:248
void save_context(TSS *tss)
{
ffff80000080739e:	f3 0f 1e fa          	endbr64 
ffff8000008073a2:	55                   	push   rbp
ffff8000008073a3:	48 89 e5             	mov    rbp,rsp
ffff8000008073a6:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008073a6 <save_context+0x8>
ffff8000008073ad:	49 bb 92 7f 01 00 00 	movabs r11,0x17f92
ffff8000008073b4:	00 00 00 
ffff8000008073b7:	4c 01 d8             	add    rax,r11
ffff8000008073ba:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:259
//    tss->esi=scene_saver.esi;
//    tss->edi=scene_saver.edi;
//    tss->eflags=scene_saver.eflags;
//    tss->esp=scene_saver.esp;
//    tss->ebp=scene_saver.ebp;
}
ffff8000008073be:	90                   	nop
ffff8000008073bf:	5d                   	pop    rbp
ffff8000008073c0:	c3                   	ret    

ffff8000008073c1 <palloc>:
palloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:420
    task[index].stat=TASK_READY;
    return index;
} */
//为指定进程申请新的内存，并返回这块内存的线性地址。
void* palloc(int proc_index,int size)
{
ffff8000008073c1:	f3 0f 1e fa          	endbr64 
ffff8000008073c5:	55                   	push   rbp
ffff8000008073c6:	48 89 e5             	mov    rbp,rsp
ffff8000008073c9:	41 57                	push   r15
ffff8000008073cb:	53                   	push   rbx
ffff8000008073cc:	48 83 ec 60          	sub    rsp,0x60
ffff8000008073d0:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008073d0 <palloc+0xf>
ffff8000008073d7:	49 bb 68 7f 01 00 00 	movabs r11,0x17f68
ffff8000008073de:	00 00 00 
ffff8000008073e1:	4c 01 db             	add    rbx,r11
ffff8000008073e4:	89 7d 9c             	mov    DWORD PTR [rbp-0x64],edi
ffff8000008073e7:	89 75 98             	mov    DWORD PTR [rbp-0x68],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:421
    int page_c=size/4096+size%4096?1:0;
ffff8000008073ea:	8b 45 98             	mov    eax,DWORD PTR [rbp-0x68]
ffff8000008073ed:	8d 90 ff 0f 00 00    	lea    edx,[rax+0xfff]
ffff8000008073f3:	85 c0                	test   eax,eax
ffff8000008073f5:	0f 48 c2             	cmovs  eax,edx
ffff8000008073f8:	c1 f8 0c             	sar    eax,0xc
ffff8000008073fb:	89 c1                	mov    ecx,eax
ffff8000008073fd:	8b 45 98             	mov    eax,DWORD PTR [rbp-0x68]
ffff800000807400:	99                   	cdq    
ffff800000807401:	c1 ea 14             	shr    edx,0x14
ffff800000807404:	01 d0                	add    eax,edx
ffff800000807406:	25 ff 0f 00 00       	and    eax,0xfff
ffff80000080740b:	29 d0                	sub    eax,edx
ffff80000080740d:	01 c8                	add    eax,ecx
ffff80000080740f:	85 c0                	test   eax,eax
ffff800000807411:	0f 95 c0             	setne  al
ffff800000807414:	0f b6 c0             	movzx  eax,al
ffff800000807417:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:422
    int c=0;
ffff80000080741a:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:423
    void *ptr=NULL;
ffff800000807421:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
ffff800000807428:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:424
    page_item *pgind=NULL;//task[proc_index].tss.cr3;
ffff800000807429:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff800000807430:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:425
    pgind++;
ffff800000807431:	48 83 45 e0 08       	add    QWORD PTR [rbp-0x20],0x8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:426
    for(int i=1;i<1024;i++)
ffff800000807436:	c7 45 dc 01 00 00 00 	mov    DWORD PTR [rbp-0x24],0x1
ffff80000080743d:	e9 e9 02 00 00       	jmp    ffff80000080772b <palloc+0x36a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:428
    {
        page_item* tblp=*pgind&0xfffff000;
ffff800000807442:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000807446:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807449:	25 00 f0 ff ff       	and    eax,0xfffff000
ffff80000080744e:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:429
        for(int j=0;j<1024;j++)
ffff800000807452:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
ffff800000807459:	e9 b7 02 00 00       	jmp    ffff800000807715 <palloc+0x354>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:431
        {
            int v=*tblp&PAGE_PRESENT;
ffff80000080745e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000807462:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807465:	83 e0 01             	and    eax,0x1
ffff800000807468:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:432
            if(!v)
ffff80000080746b:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
ffff80000080746f:	0f 85 97 02 00 00    	jne    ffff80000080770c <palloc+0x34b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:434
            {
                int new_pg=req_a_page();
ffff800000807475:	49 89 df             	mov    r15,rbx
ffff800000807478:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080747d:	48 ba eb 35 fe ff ff 	movabs rdx,0xfffffffffffe35eb
ffff800000807484:	ff ff ff 
ffff800000807487:	48 01 da             	add    rdx,rbx
ffff80000080748a:	ff d2                	call   rdx
ffff80000080748c:	89 45 b8             	mov    DWORD PTR [rbp-0x48],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:435
                if(new_pg==-1)
ffff80000080748f:	83 7d b8 ff          	cmp    DWORD PTR [rbp-0x48],0xffffffff
ffff800000807493:	0f 85 fd 00 00 00    	jne    ffff800000807596 <palloc+0x1d5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:438
                {
                    //修改ldt,增加数据空间
                    unsigned int size=task[proc_index].ldt[2].limit_lo16;
ffff800000807499:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff8000008074a0:	ff ff ff 
ffff8000008074a3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008074a7:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008074aa:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff8000008074ad:	48 98                	cdqe   
ffff8000008074af:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff8000008074b6:	48 01 d0             	add    rax,rdx
ffff8000008074b9:	0f b7 40 68          	movzx  eax,WORD PTR [rax+0x68]
ffff8000008074bd:	0f b7 c0             	movzx  eax,ax
ffff8000008074c0:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:439
                    size+=(task[proc_index].ldt[2].attr&0xf)<<16;
ffff8000008074c3:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff8000008074ca:	ff ff ff 
ffff8000008074cd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008074d1:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008074d4:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff8000008074d7:	48 98                	cdqe   
ffff8000008074d9:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff8000008074e0:	48 01 d0             	add    rax,rdx
ffff8000008074e3:	0f b7 40 6d          	movzx  eax,WORD PTR [rax+0x6d]
ffff8000008074e7:	0f b7 c0             	movzx  eax,ax
ffff8000008074ea:	c1 e0 10             	shl    eax,0x10
ffff8000008074ed:	25 00 00 0f 00       	and    eax,0xf0000
ffff8000008074f2:	01 45 a4             	add    DWORD PTR [rbp-0x5c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:440
                    size+=c;
ffff8000008074f5:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff8000008074f8:	01 45 a4             	add    DWORD PTR [rbp-0x5c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:441
                    task[proc_index].ldt[2].limit_lo16=size&0xffff;
ffff8000008074fb:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000807502:	ff ff ff 
ffff800000807505:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807509:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080750c:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff80000080750f:	48 98                	cdqe   
ffff800000807511:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff800000807518:	48 01 d0             	add    rax,rdx
ffff80000080751b:	8b 55 a4             	mov    edx,DWORD PTR [rbp-0x5c]
ffff80000080751e:	66 89 50 68          	mov    WORD PTR [rax+0x68],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:442
                    int tmp_attr=task[proc_index].ldt[2].attr;
ffff800000807522:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000807529:	ff ff ff 
ffff80000080752c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807530:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807533:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff800000807536:	48 98                	cdqe   
ffff800000807538:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff80000080753f:	48 01 d0             	add    rax,rdx
ffff800000807542:	0f b7 40 6d          	movzx  eax,WORD PTR [rax+0x6d]
ffff800000807546:	0f b7 c0             	movzx  eax,ax
ffff800000807549:	89 45 a0             	mov    DWORD PTR [rbp-0x60],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:443
                    tmp_attr&=0xfff0;
ffff80000080754c:	81 65 a0 f0 ff 00 00 	and    DWORD PTR [rbp-0x60],0xfff0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:444
                    tmp_attr+=(size>>16)&0xf;
ffff800000807553:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
ffff800000807556:	c1 e8 10             	shr    eax,0x10
ffff800000807559:	83 e0 0f             	and    eax,0xf
ffff80000080755c:	89 c2                	mov    edx,eax
ffff80000080755e:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
ffff800000807561:	01 d0                	add    eax,edx
ffff800000807563:	89 45 a0             	mov    DWORD PTR [rbp-0x60],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:445
                    task[proc_index].ldt[2].attr=tmp_attr;
ffff800000807566:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff80000080756d:	ff ff ff 
ffff800000807570:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807574:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807577:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff80000080757a:	48 98                	cdqe   
ffff80000080757c:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff800000807583:	48 01 d0             	add    rax,rdx
ffff800000807586:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
ffff800000807589:	66 89 50 6d          	mov    WORD PTR [rax+0x6d],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:446
                    return ptr;//失败了，只能申请一部分的内存或者返回NULL
ffff80000080758d:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000807591:	e9 a7 01 00 00       	jmp    ffff80000080773d <palloc+0x37c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:448
                }
                int addr=get_phyaddr(new_pg);
ffff800000807596:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
ffff800000807599:	89 c7                	mov    edi,eax
ffff80000080759b:	49 89 df             	mov    r15,rbx
ffff80000080759e:	48 b8 f2 38 fe ff ff 	movabs rax,0xfffffffffffe38f2
ffff8000008075a5:	ff ff ff 
ffff8000008075a8:	48 01 d8             	add    rax,rbx
ffff8000008075ab:	ff d0                	call   rax
ffff8000008075ad:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:449
                set_page_item(tblp,addr,PAGE_PRESENT|\
ffff8000008075b0:	8b 4d b4             	mov    ecx,DWORD PTR [rbp-0x4c]
ffff8000008075b3:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008075b7:	ba 07 00 00 00       	mov    edx,0x7
ffff8000008075bc:	89 ce                	mov    esi,ecx
ffff8000008075be:	48 89 c7             	mov    rdi,rax
ffff8000008075c1:	49 89 df             	mov    r15,rbx
ffff8000008075c4:	48 b8 19 39 fe ff ff 	movabs rax,0xfffffffffffe3919
ffff8000008075cb:	ff ff ff 
ffff8000008075ce:	48 01 d8             	add    rax,rbx
ffff8000008075d1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:451
                PAGE_RWX|PAGE_FOR_ALL);
                int laddr=i*0x400000+j*0x1000;//线性地址
ffff8000008075d3:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008075d6:	c1 e0 0a             	shl    eax,0xa
ffff8000008075d9:	89 c2                	mov    edx,eax
ffff8000008075db:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff8000008075de:	01 d0                	add    eax,edx
ffff8000008075e0:	c1 e0 0c             	shl    eax,0xc
ffff8000008075e3:	89 45 b0             	mov    DWORD PTR [rbp-0x50],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:452
                if(ptr==NULL)
ffff8000008075e6:	48 83 7d c0 00       	cmp    QWORD PTR [rbp-0x40],0x0
ffff8000008075eb:	75 13                	jne    ffff800000807600 <palloc+0x23f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:455
                {
                   // ptr=laddr;
                    palloc_paddr=addr;
ffff8000008075ed:	48 b8 78 fd ff ff ff 	movabs rax,0xfffffffffffffd78
ffff8000008075f4:	ff ff ff 
ffff8000008075f7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008075fb:	8b 55 b4             	mov    edx,DWORD PTR [rbp-0x4c]
ffff8000008075fe:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:457
                }
                page_c--;
ffff800000807600:	83 6d ec 01          	sub    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:458
                c++;
ffff800000807604:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:459
                if(page_c==0)
ffff800000807608:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff80000080760c:	0f 85 fa 00 00 00    	jne    ffff80000080770c <palloc+0x34b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:462
                {
                    //修改ldt,增加数据空间
                    unsigned int size=task[proc_index].ldt[2].limit_lo16;
ffff800000807612:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000807619:	ff ff ff 
ffff80000080761c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807620:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807623:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff800000807626:	48 98                	cdqe   
ffff800000807628:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff80000080762f:	48 01 d0             	add    rax,rdx
ffff800000807632:	0f b7 40 68          	movzx  eax,WORD PTR [rax+0x68]
ffff800000807636:	0f b7 c0             	movzx  eax,ax
ffff800000807639:	89 45 ac             	mov    DWORD PTR [rbp-0x54],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:463
                    size+=(task[proc_index].ldt[2].attr&0xf)<<16;
ffff80000080763c:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000807643:	ff ff ff 
ffff800000807646:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080764a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080764d:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff800000807650:	48 98                	cdqe   
ffff800000807652:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff800000807659:	48 01 d0             	add    rax,rdx
ffff80000080765c:	0f b7 40 6d          	movzx  eax,WORD PTR [rax+0x6d]
ffff800000807660:	0f b7 c0             	movzx  eax,ax
ffff800000807663:	c1 e0 10             	shl    eax,0x10
ffff800000807666:	25 00 00 0f 00       	and    eax,0xf0000
ffff80000080766b:	01 45 ac             	add    DWORD PTR [rbp-0x54],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:464
                    size+=c;
ffff80000080766e:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000807671:	01 45 ac             	add    DWORD PTR [rbp-0x54],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:465
                    task[proc_index].ldt[2].limit_lo16=size&0xffff;
ffff800000807674:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff80000080767b:	ff ff ff 
ffff80000080767e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807682:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807685:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff800000807688:	48 98                	cdqe   
ffff80000080768a:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff800000807691:	48 01 d0             	add    rax,rdx
ffff800000807694:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
ffff800000807697:	66 89 50 68          	mov    WORD PTR [rax+0x68],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:466
                    int tmp_attr=task[proc_index].ldt[2].attr;
ffff80000080769b:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff8000008076a2:	ff ff ff 
ffff8000008076a5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008076a9:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008076ac:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff8000008076af:	48 98                	cdqe   
ffff8000008076b1:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff8000008076b8:	48 01 d0             	add    rax,rdx
ffff8000008076bb:	0f b7 40 6d          	movzx  eax,WORD PTR [rax+0x6d]
ffff8000008076bf:	0f b7 c0             	movzx  eax,ax
ffff8000008076c2:	89 45 a8             	mov    DWORD PTR [rbp-0x58],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:467
                    tmp_attr&=0xfff0;
ffff8000008076c5:	81 65 a8 f0 ff 00 00 	and    DWORD PTR [rbp-0x58],0xfff0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:468
                    tmp_attr+=(size>>16)&0xf;
ffff8000008076cc:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
ffff8000008076cf:	c1 e8 10             	shr    eax,0x10
ffff8000008076d2:	83 e0 0f             	and    eax,0xf
ffff8000008076d5:	89 c2                	mov    edx,eax
ffff8000008076d7:	8b 45 a8             	mov    eax,DWORD PTR [rbp-0x58]
ffff8000008076da:	01 d0                	add    eax,edx
ffff8000008076dc:	89 45 a8             	mov    DWORD PTR [rbp-0x58],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:469
                    task[proc_index].ldt[2].attr=tmp_attr;
ffff8000008076df:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff8000008076e6:	ff ff ff 
ffff8000008076e9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008076ed:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008076f0:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff8000008076f3:	48 98                	cdqe   
ffff8000008076f5:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff8000008076fc:	48 01 d0             	add    rax,rdx
ffff8000008076ff:	8b 55 a8             	mov    edx,DWORD PTR [rbp-0x58]
ffff800000807702:	66 89 50 6d          	mov    WORD PTR [rax+0x6d],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:470
                    return ptr;
ffff800000807706:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080770a:	eb 31                	jmp    ffff80000080773d <palloc+0x37c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:473 (discriminator 2)
                }
            }
            tblp++;
ffff80000080770c:	48 83 45 d0 08       	add    QWORD PTR [rbp-0x30],0x8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:429 (discriminator 2)
        for(int j=0;j<1024;j++)
ffff800000807711:	83 45 cc 01          	add    DWORD PTR [rbp-0x34],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:429 (discriminator 1)
ffff800000807715:	81 7d cc ff 03 00 00 	cmp    DWORD PTR [rbp-0x34],0x3ff
ffff80000080771c:	0f 8e 3c fd ff ff    	jle    ffff80000080745e <palloc+0x9d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:475 (discriminator 2)
        }
        pgind++;
ffff800000807722:	48 83 45 e0 08       	add    QWORD PTR [rbp-0x20],0x8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:426 (discriminator 2)
    for(int i=1;i<1024;i++)
ffff800000807727:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:426 (discriminator 1)
ffff80000080772b:	81 7d dc ff 03 00 00 	cmp    DWORD PTR [rbp-0x24],0x3ff
ffff800000807732:	0f 8e 0a fd ff ff    	jle    ffff800000807442 <palloc+0x81>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:477
    }
    return NULL;
ffff800000807738:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:478
}
ffff80000080773d:	48 83 c4 60          	add    rsp,0x60
ffff800000807741:	5b                   	pop    rbx
ffff800000807742:	41 5f                	pop    r15
ffff800000807744:	5d                   	pop    rbp
ffff800000807745:	c3                   	ret    

ffff800000807746 <malloc>:
malloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:481
//为当前进程申请新的内存，并返回这块内存的线性地址。
void* malloc(int size)
{
ffff800000807746:	f3 0f 1e fa          	endbr64 
ffff80000080774a:	55                   	push   rbp
ffff80000080774b:	48 89 e5             	mov    rbp,rsp
ffff80000080774e:	41 57                	push   r15
ffff800000807750:	48 83 ec 18          	sub    rsp,0x18
ffff800000807754:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807754 <malloc+0xe>
ffff80000080775b:	49 bb e4 7b 01 00 00 	movabs r11,0x17be4
ffff800000807762:	00 00 00 
ffff800000807765:	4c 01 d8             	add    rax,r11
ffff800000807768:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:482
    return palloc(cur_proc,size);
ffff80000080776b:	48 ba 40 fe ff ff ff 	movabs rdx,0xfffffffffffffe40
ffff800000807772:	ff ff ff 
ffff800000807775:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807779:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff80000080777b:	8b 4d ec             	mov    ecx,DWORD PTR [rbp-0x14]
ffff80000080777e:	89 ce                	mov    esi,ecx
ffff800000807780:	89 d7                	mov    edi,edx
ffff800000807782:	49 89 c7             	mov    r15,rax
ffff800000807785:	48 ba 89 80 fe ff ff 	movabs rdx,0xfffffffffffe8089
ffff80000080778c:	ff ff ff 
ffff80000080778f:	48 01 c2             	add    rdx,rax
ffff800000807792:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:483
}
ffff800000807794:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000807798:	c9                   	leave  
ffff800000807799:	c3                   	ret    

ffff80000080779a <proc_end>:
proc_end():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:485
void proc_end()
{
ffff80000080779a:	f3 0f 1e fa          	endbr64 
ffff80000080779e:	55                   	push   rbp
ffff80000080779f:	48 89 e5             	mov    rbp,rsp
ffff8000008077a2:	41 57                	push   r15
ffff8000008077a4:	53                   	push   rbx
ffff8000008077a5:	48 83 ec 10          	sub    rsp,0x10
ffff8000008077a9:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008077a9 <proc_end+0xf>
ffff8000008077b0:	49 bb 8f 7b 01 00 00 	movabs r11,0x17b8f
ffff8000008077b7:	00 00 00 
ffff8000008077ba:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:487
    int ret;
    asm volatile("mov %%eax,%0":"=m"(ret));
ffff8000008077bd:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:491
    //printf("proc #%d ended with retv %d.\n",cur_proc,ret);
    //切换堆栈
    //asm volatile("mov %0,%%rsp"::"r"(task[0].tss.esp));
    del_proc(cur_proc);
ffff8000008077c0:	48 b8 40 fe ff ff ff 	movabs rax,0xfffffffffffffe40
ffff8000008077c7:	ff ff ff 
ffff8000008077ca:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008077ce:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008077d0:	89 c7                	mov    edi,eax
ffff8000008077d2:	49 89 df             	mov    r15,rbx
ffff8000008077d5:	48 b8 a9 85 fe ff ff 	movabs rax,0xfffffffffffe85a9
ffff8000008077dc:	ff ff ff 
ffff8000008077df:	48 01 d8             	add    rax,rbx
ffff8000008077e2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:492
    if(task[cur_proc].parent_pid!=-1){
ffff8000008077e4:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff8000008077eb:	ff ff ff 
ffff8000008077ee:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008077f2:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008077f5:	48 b8 40 fe ff ff ff 	movabs rax,0xfffffffffffffe40
ffff8000008077fc:	ff ff ff 
ffff8000008077ff:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807803:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000807805:	48 98                	cdqe   
ffff800000807807:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff80000080780e:	48 01 d0             	add    rax,rdx
ffff800000807811:	8b 80 9c 00 00 00    	mov    eax,DWORD PTR [rax+0x9c]
ffff800000807817:	83 f8 ff             	cmp    eax,0xffffffff
ffff80000080781a:	0f 84 a0 00 00 00    	je     ffff8000008078c0 <proc_end+0x126>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:493
        task[task[cur_proc].parent_pid].stat=TASK_READY;
ffff800000807820:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000807827:	ff ff ff 
ffff80000080782a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080782e:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807831:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000807838:	ff ff ff 
ffff80000080783b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080783f:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000807842:	48 b8 40 fe ff ff ff 	movabs rax,0xfffffffffffffe40
ffff800000807849:	ff ff ff 
ffff80000080784c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807850:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000807852:	48 98                	cdqe   
ffff800000807854:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff80000080785b:	48 01 c8             	add    rax,rcx
ffff80000080785e:	8b 80 9c 00 00 00    	mov    eax,DWORD PTR [rax+0x9c]
ffff800000807864:	89 c0                	mov    eax,eax
ffff800000807866:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff80000080786d:	48 01 d0             	add    rax,rdx
ffff800000807870:	c7 40 18 02 00 00 00 	mov    DWORD PTR [rax+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:494
        switch_proc_tss(task[cur_proc].parent_pid);
ffff800000807877:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff80000080787e:	ff ff ff 
ffff800000807881:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807885:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807888:	48 b8 40 fe ff ff ff 	movabs rax,0xfffffffffffffe40
ffff80000080788f:	ff ff ff 
ffff800000807892:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807896:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000807898:	48 98                	cdqe   
ffff80000080789a:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff8000008078a1:	48 01 d0             	add    rax,rdx
ffff8000008078a4:	8b 80 9c 00 00 00    	mov    eax,DWORD PTR [rax+0x9c]
ffff8000008078aa:	89 c7                	mov    edi,eax
ffff8000008078ac:	49 89 df             	mov    r15,rbx
ffff8000008078af:	48 b8 d5 7e fe ff ff 	movabs rax,0xfffffffffffe7ed5
ffff8000008078b6:	ff ff ff 
ffff8000008078b9:	48 01 d8             	add    rax,rbx
ffff8000008078bc:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:499
    }
    else
        switch_proc_tss(0);
    //syscall(SYSCALL_DEL_PROC,cur_proc,0,0,0,0);
}
ffff8000008078be:	eb 17                	jmp    ffff8000008078d7 <proc_end+0x13d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:497
        switch_proc_tss(0);
ffff8000008078c0:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008078c5:	49 89 df             	mov    r15,rbx
ffff8000008078c8:	48 b8 d5 7e fe ff ff 	movabs rax,0xfffffffffffe7ed5
ffff8000008078cf:	ff ff ff 
ffff8000008078d2:	48 01 d8             	add    rax,rbx
ffff8000008078d5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:499
}
ffff8000008078d7:	90                   	nop
ffff8000008078d8:	48 83 c4 10          	add    rsp,0x10
ffff8000008078dc:	5b                   	pop    rbx
ffff8000008078dd:	41 5f                	pop    r15
ffff8000008078df:	5d                   	pop    rbp
ffff8000008078e0:	c3                   	ret    

ffff8000008078e1 <del_proc>:
del_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:501
void del_proc(int pnr)
{
ffff8000008078e1:	f3 0f 1e fa          	endbr64 
ffff8000008078e5:	55                   	push   rbp
ffff8000008078e6:	48 89 e5             	mov    rbp,rsp
ffff8000008078e9:	41 57                	push   r15
ffff8000008078eb:	53                   	push   rbx
ffff8000008078ec:	48 83 ec 20          	sub    rsp,0x20
ffff8000008078f0:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008078f0 <del_proc+0xf>
ffff8000008078f7:	49 bb 48 7a 01 00 00 	movabs r11,0x17a48
ffff8000008078fe:	00 00 00 
ffff800000807901:	4c 01 db             	add    rbx,r11
ffff800000807904:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:502
    task[pnr].stat=TASK_ZOMBIE;
ffff800000807907:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff80000080790e:	ff ff ff 
ffff800000807911:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807915:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807918:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080791b:	48 98                	cdqe   
ffff80000080791d:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff800000807924:	48 01 d0             	add    rax,rdx
ffff800000807927:	c7 40 18 04 00 00 00 	mov    DWORD PTR [rax+0x18],0x4
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:505
//    task[pnr].pid=-1;
    //释放申请的页面
    release_mmap(&task[pnr]);
ffff80000080792e:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000807935:	ff ff ff 
ffff800000807938:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080793c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080793f:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000807942:	48 98                	cdqe   
ffff800000807944:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff80000080794b:	48 01 d0             	add    rax,rdx
ffff80000080794e:	48 89 c7             	mov    rdi,rax
ffff800000807951:	49 89 df             	mov    r15,rbx
ffff800000807954:	48 b8 26 a1 fe ff ff 	movabs rax,0xfffffffffffea126
ffff80000080795b:	ff ff ff 
ffff80000080795e:	48 01 d8             	add    rax,rbx
ffff800000807961:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:507
    //释放存放页目录的页面
    kmfree(task[pnr].pml4);
ffff800000807963:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff80000080796a:	ff ff ff 
ffff80000080796d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807971:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807974:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000807977:	48 98                	cdqe   
ffff800000807979:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff800000807980:	48 01 d0             	add    rax,rdx
ffff800000807983:	48 8b 80 c0 00 00 00 	mov    rax,QWORD PTR [rax+0xc0]
ffff80000080798a:	48 89 c7             	mov    rdi,rax
ffff80000080798d:	49 89 df             	mov    r15,rbx
ffff800000807990:	48 b8 82 2f fe ff ff 	movabs rax,0xfffffffffffe2f82
ffff800000807997:	ff ff ff 
ffff80000080799a:	48 01 d8             	add    rax,rbx
ffff80000080799d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:509
    //关闭打开的文件
    for(int i=3;i<MAX_PROC_OPENF;i++){
ffff80000080799f:	c7 45 ec 03 00 00 00 	mov    DWORD PTR [rbp-0x14],0x3
ffff8000008079a6:	eb 4f                	jmp    ffff8000008079f7 <del_proc+0x116>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:510
        if(task[pnr].openf[i]){
ffff8000008079a8:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff8000008079af:	ff ff ff 
ffff8000008079b2:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008079b6:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008079b9:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008079bc:	48 98                	cdqe   
ffff8000008079be:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff8000008079c5:	48 01 d0             	add    rax,rdx
ffff8000008079c8:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff8000008079cb:	48 63 d2             	movsxd rdx,edx
ffff8000008079ce:	48 83 c2 1a          	add    rdx,0x1a
ffff8000008079d2:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff8000008079d7:	48 85 c0             	test   rax,rax
ffff8000008079da:	74 17                	je     ffff8000008079f3 <del_proc+0x112>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:511
            sys_close(i);
ffff8000008079dc:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008079df:	89 c7                	mov    edi,eax
ffff8000008079e1:	49 89 df             	mov    r15,rbx
ffff8000008079e4:	48 b8 ca dc fe ff ff 	movabs rax,0xfffffffffffedcca
ffff8000008079eb:	ff ff ff 
ffff8000008079ee:	48 01 d8             	add    rax,rbx
ffff8000008079f1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:509 (discriminator 2)
    for(int i=3;i<MAX_PROC_OPENF;i++){
ffff8000008079f3:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:509 (discriminator 1)
ffff8000008079f7:	83 7d ec 1f          	cmp    DWORD PTR [rbp-0x14],0x1f
ffff8000008079fb:	7e ab                	jle    ffff8000008079a8 <del_proc+0xc7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:515
        }
    }
    //三个std判断一下是否是会话leader，是的话再关闭
    if(task[pnr].sid==task[pnr].pid){
ffff8000008079fd:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000807a04:	ff ff ff 
ffff800000807a07:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807a0b:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807a0e:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000807a11:	48 98                	cdqe   
ffff800000807a13:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff800000807a1a:	48 01 d0             	add    rax,rdx
ffff800000807a1d:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffff800000807a20:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000807a27:	ff ff ff 
ffff800000807a2a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807a2e:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000807a31:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000807a34:	48 98                	cdqe   
ffff800000807a36:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff800000807a3d:	48 01 c8             	add    rax,rcx
ffff800000807a40:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000807a42:	39 c2                	cmp    edx,eax
ffff800000807a44:	75 79                	jne    ffff800000807abf <del_proc+0x1de>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:517
        //tty和console断联
        sys_ioctl(0,TTY_DISCONNECT,0);
ffff800000807a46:	ba 00 00 00 00       	mov    edx,0x0
ffff800000807a4b:	be 02 00 00 00       	mov    esi,0x2
ffff800000807a50:	bf 00 00 00 00       	mov    edi,0x0
ffff800000807a55:	49 89 df             	mov    r15,rbx
ffff800000807a58:	48 b8 95 ad fe ff ff 	movabs rax,0xfffffffffffead95
ffff800000807a5f:	ff ff ff 
ffff800000807a62:	48 01 d8             	add    rax,rbx
ffff800000807a65:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:518
        sys_close(0);
ffff800000807a67:	bf 00 00 00 00       	mov    edi,0x0
ffff800000807a6c:	49 89 df             	mov    r15,rbx
ffff800000807a6f:	48 b8 ca dc fe ff ff 	movabs rax,0xfffffffffffedcca
ffff800000807a76:	ff ff ff 
ffff800000807a79:	48 01 d8             	add    rax,rbx
ffff800000807a7c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:519
        sys_close(1);
ffff800000807a7e:	bf 01 00 00 00       	mov    edi,0x1
ffff800000807a83:	49 89 df             	mov    r15,rbx
ffff800000807a86:	48 b8 ca dc fe ff ff 	movabs rax,0xfffffffffffedcca
ffff800000807a8d:	ff ff ff 
ffff800000807a90:	48 01 d8             	add    rax,rbx
ffff800000807a93:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:520
        sys_close(2);
ffff800000807a95:	bf 02 00 00 00       	mov    edi,0x2
ffff800000807a9a:	49 89 df             	mov    r15,rbx
ffff800000807a9d:	48 b8 ca dc fe ff ff 	movabs rax,0xfffffffffffedcca
ffff800000807aa4:	ff ff ff 
ffff800000807aa7:	48 01 d8             	add    rax,rbx
ffff800000807aaa:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:522
        //然后,关闭所有前台进程组的进程
        for(int i=0;i<MAX_TASKS;i++){
ffff800000807aac:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff800000807ab3:	eb 04                	jmp    ffff800000807ab9 <del_proc+0x1d8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:522 (discriminator 3)
ffff800000807ab5:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:522 (discriminator 1)
ffff800000807ab9:	83 7d e8 1f          	cmp    DWORD PTR [rbp-0x18],0x1f
ffff800000807abd:	7e f6                	jle    ffff800000807ab5 <del_proc+0x1d4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:532
    }
    //TODO 给子进程发送SIGHUP信号结束他们
    //
    //从进程中解除cr3,tss和ldt
    //switch_proc_tss(task[pnr]);
}
ffff800000807abf:	90                   	nop
ffff800000807ac0:	48 83 c4 20          	add    rsp,0x20
ffff800000807ac4:	5b                   	pop    rbx
ffff800000807ac5:	41 5f                	pop    r15
ffff800000807ac7:	5d                   	pop    rbp
ffff800000807ac8:	c3                   	ret    

ffff800000807ac9 <set_proc_stat>:
set_proc_stat():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:535

int set_proc_stat(int pid,int stat)
{
ffff800000807ac9:	f3 0f 1e fa          	endbr64 
ffff800000807acd:	55                   	push   rbp
ffff800000807ace:	48 89 e5             	mov    rbp,rsp
ffff800000807ad1:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807ad1 <set_proc_stat+0x8>
ffff800000807ad8:	49 bb 67 78 01 00 00 	movabs r11,0x17867
ffff800000807adf:	00 00 00 
ffff800000807ae2:	4c 01 d8             	add    rax,r11
ffff800000807ae5:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff800000807ae8:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:536
    if(pid==-1)return -1;
ffff800000807aeb:	83 7d ec ff          	cmp    DWORD PTR [rbp-0x14],0xffffffff
ffff800000807aef:	75 0a                	jne    ffff800000807afb <set_proc_stat+0x32>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:536 (discriminator 1)
ffff800000807af1:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000807af6:	e9 b9 00 00 00       	jmp    ffff800000807bb4 <set_proc_stat+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:537
    int i=0;
ffff800000807afb:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:538
    for(;task[i].pid!=pid;i++);
ffff800000807b02:	eb 04                	jmp    ffff800000807b08 <set_proc_stat+0x3f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:538 (discriminator 2)
ffff800000807b04:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:538 (discriminator 1)
ffff800000807b08:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff800000807b0f:	ff ff ff 
ffff800000807b12:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807b16:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000807b19:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000807b1c:	48 63 d2             	movsxd rdx,edx
ffff800000807b1f:	48 69 d2 34 03 00 00 	imul   rdx,rdx,0x334
ffff800000807b26:	48 01 ca             	add    rdx,rcx
ffff800000807b29:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff800000807b2b:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000807b2e:	39 d1                	cmp    ecx,edx
ffff800000807b30:	75 d2                	jne    ffff800000807b04 <set_proc_stat+0x3b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:539
    if(i==MAX_PROC_COUNT)return -1;
ffff800000807b32:	83 7d fc 40          	cmp    DWORD PTR [rbp-0x4],0x40
ffff800000807b36:	75 07                	jne    ffff800000807b3f <set_proc_stat+0x76>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:539 (discriminator 1)
ffff800000807b38:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000807b3d:	eb 75                	jmp    ffff800000807bb4 <set_proc_stat+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:540
    task[i].stat=stat;
ffff800000807b3f:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff800000807b46:	ff ff ff 
ffff800000807b49:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807b4d:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000807b50:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000807b53:	48 63 d2             	movsxd rdx,edx
ffff800000807b56:	48 69 d2 34 03 00 00 	imul   rdx,rdx,0x334
ffff800000807b5d:	48 01 d1             	add    rcx,rdx
ffff800000807b60:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000807b63:	89 51 18             	mov    DWORD PTR [rcx+0x18],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:542
    //如果这就是正在运行的进程，那么马上停止
    if(cur_proc==i)
ffff800000807b66:	48 ba 40 fe ff ff ff 	movabs rdx,0xfffffffffffffe40
ffff800000807b6d:	ff ff ff 
ffff800000807b70:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807b74:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000807b76:	39 55 fc             	cmp    DWORD PTR [rbp-0x4],edx
ffff800000807b79:	75 34                	jne    ffff800000807baf <set_proc_stat+0xe6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:543
        task[cur_proc].utime=MAX_UTIME;
ffff800000807b7b:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff800000807b82:	ff ff ff 
ffff800000807b85:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807b89:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000807b8c:	48 ba 40 fe ff ff ff 	movabs rdx,0xfffffffffffffe40
ffff800000807b93:	ff ff ff 
ffff800000807b96:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000807b9a:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000807b9c:	48 98                	cdqe   
ffff800000807b9e:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff800000807ba5:	48 01 c8             	add    rax,rcx
ffff800000807ba8:	c7 40 1c 0a 00 00 00 	mov    DWORD PTR [rax+0x1c],0xa
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:544
    return 0;
ffff800000807baf:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:545
}
ffff800000807bb4:	5d                   	pop    rbp
ffff800000807bb5:	c3                   	ret    

ffff800000807bb6 <sys_exit>:
sys_exit():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:577
//}
/*
 * 进程结束。
 * */
int sys_exit(int code)
{
ffff800000807bb6:	f3 0f 1e fa          	endbr64 
ffff800000807bba:	55                   	push   rbp
ffff800000807bbb:	48 89 e5             	mov    rbp,rsp
ffff800000807bbe:	41 57                	push   r15
ffff800000807bc0:	53                   	push   rbx
ffff800000807bc1:	48 83 ec 10          	sub    rsp,0x10
ffff800000807bc5:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000807bc5 <sys_exit+0xf>
ffff800000807bcc:	49 bb 73 77 01 00 00 	movabs r11,0x17773
ffff800000807bd3:	00 00 00 
ffff800000807bd6:	4c 01 db             	add    rbx,r11
ffff800000807bd9:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:578
    current->exit_code=code;
ffff800000807bdc:	48 b8 90 fe ff ff ff 	movabs rax,0xfffffffffffffe90
ffff800000807be3:	ff ff ff 
ffff800000807be6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807bea:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807bed:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000807bf0:	89 50 24             	mov    DWORD PTR [rax+0x24],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:579
    del_proc(cur_proc);
ffff800000807bf3:	48 b8 40 fe ff ff ff 	movabs rax,0xfffffffffffffe40
ffff800000807bfa:	ff ff ff 
ffff800000807bfd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807c01:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000807c03:	89 c7                	mov    edi,eax
ffff800000807c05:	49 89 df             	mov    r15,rbx
ffff800000807c08:	48 b8 a9 85 fe ff ff 	movabs rax,0xfffffffffffe85a9
ffff800000807c0f:	ff ff ff 
ffff800000807c12:	48 01 d8             	add    rax,rbx
ffff800000807c15:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:581 (discriminator 1)
    while(1)
        manage_proc();
ffff800000807c17:	49 89 df             	mov    r15,rbx
ffff800000807c1a:	b8 00 00 00 00       	mov    eax,0x0
ffff800000807c1f:	48 ba 19 7c fe ff ff 	movabs rdx,0xfffffffffffe7c19
ffff800000807c26:	ff ff ff 
ffff800000807c29:	48 01 da             	add    rdx,rbx
ffff800000807c2c:	ff d2                	call   rdx
ffff800000807c2e:	eb e7                	jmp    ffff800000807c17 <sys_exit+0x61>

ffff800000807c30 <reg_proc>:
reg_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:637
    dllmain(NULL,0,NULL);
    
}*/

int reg_proc(addr_t entry, struct index_node *cwd, struct index_node *exef)
{
ffff800000807c30:	f3 0f 1e fa          	endbr64 
ffff800000807c34:	55                   	push   rbp
ffff800000807c35:	48 89 e5             	mov    rbp,rsp
ffff800000807c38:	41 57                	push   r15
ffff800000807c3a:	41 54                	push   r12
ffff800000807c3c:	53                   	push   rbx
ffff800000807c3d:	48 83 ec 48          	sub    rsp,0x48
ffff800000807c41:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000807c41 <reg_proc+0x11>
ffff800000807c48:	49 bb f7 76 01 00 00 	movabs r11,0x176f7
ffff800000807c4f:	00 00 00 
ffff800000807c52:	4c 01 db             	add    rbx,r11
ffff800000807c55:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
ffff800000807c59:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
ffff800000807c5d:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:639
    
    int i=req_proc();
ffff800000807c61:	49 89 df             	mov    r15,rbx
ffff800000807c64:	b8 00 00 00 00       	mov    eax,0x0
ffff800000807c69:	48 ba 8d 78 fe ff ff 	movabs rdx,0xfffffffffffe788d
ffff800000807c70:	ff ff ff 
ffff800000807c73:	48 01 da             	add    rdx,rbx
ffff800000807c76:	ff d2                	call   rdx
ffff800000807c78:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:640
    if(i==-1)return -1;
ffff800000807c7b:	83 7d dc ff          	cmp    DWORD PTR [rbp-0x24],0xffffffff
ffff800000807c7f:	75 0a                	jne    ffff800000807c8b <reg_proc+0x5b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:640 (discriminator 1)
ffff800000807c81:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000807c86:	e9 7e 02 00 00       	jmp    ffff800000807f09 <reg_proc+0x2d9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:643

    //栈顶设置在了4G处
    set_proc(0, 0, 0, 0, DS_USER, CS_USER, DS_USER, DS_USER\
ffff800000807c8b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000807c8f:	48 83 ec 08          	sub    rsp,0x8
ffff800000807c93:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000807c96:	52                   	push   rdx
ffff800000807c97:	6a 00                	push   0x0
ffff800000807c99:	50                   	push   rax
ffff800000807c9a:	6a 00                	push   0x0
ffff800000807c9c:	6a 00                	push   0x0
ffff800000807c9e:	6a 00                	push   0x0
ffff800000807ca0:	68 00 f0 ff ff       	push   0xfffffffffffff000
ffff800000807ca5:	c7 44 24 04 ff 7f 00 	mov    DWORD PTR [rsp+0x4],0x7fff
ffff800000807cac:	00 
ffff800000807cad:	6a 28                	push   0x28
ffff800000807caf:	6a 28                	push   0x28
ffff800000807cb1:	6a 28                	push   0x28
ffff800000807cb3:	6a 28                	push   0x28
ffff800000807cb5:	41 b9 30 00 00 00    	mov    r9d,0x30
ffff800000807cbb:	41 b8 28 00 00 00    	mov    r8d,0x28
ffff800000807cc1:	b9 00 00 00 00       	mov    ecx,0x0
ffff800000807cc6:	ba 00 00 00 00       	mov    edx,0x0
ffff800000807ccb:	be 00 00 00 00       	mov    esi,0x0
ffff800000807cd0:	bf 00 00 00 00       	mov    edi,0x0
ffff800000807cd5:	49 89 df             	mov    r15,rbx
ffff800000807cd8:	48 b8 de 79 fe ff ff 	movabs rax,0xfffffffffffe79de
ffff800000807cdf:	ff ff ff 
ffff800000807ce2:	48 01 d8             	add    rax,rbx
ffff800000807ce5:	ff d0                	call   rax
ffff800000807ce7:	48 83 c4 60          	add    rsp,0x60
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:645
, DS_USER, DS_USER, STACK_TOP, 0, 0, 0, entry, 0, i);
    task[i].pml4= kmalloc();
ffff800000807ceb:	49 89 df             	mov    r15,rbx
ffff800000807cee:	b8 00 00 00 00       	mov    eax,0x0
ffff800000807cf3:	48 ba 13 2c fe ff ff 	movabs rdx,0xfffffffffffe2c13
ffff800000807cfa:	ff ff ff 
ffff800000807cfd:	48 01 da             	add    rdx,rbx
ffff800000807d00:	ff d2                	call   rdx
ffff800000807d02:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff800000807d09:	ff ff ff 
ffff800000807d0c:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000807d10:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000807d13:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000807d16:	48 63 d2             	movsxd rdx,edx
ffff800000807d19:	48 69 d2 34 03 00 00 	imul   rdx,rdx,0x334
ffff800000807d20:	48 01 ca             	add    rdx,rcx
ffff800000807d23:	48 89 82 c0 00 00 00 	mov    QWORD PTR [rdx+0xc0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:646
    task[i].pml4[0]= kmalloc();
ffff800000807d2a:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000807d31:	ff ff ff 
ffff800000807d34:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807d38:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807d3b:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000807d3e:	48 98                	cdqe   
ffff800000807d40:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff800000807d47:	48 01 d0             	add    rax,rdx
ffff800000807d4a:	4c 8b a0 c0 00 00 00 	mov    r12,QWORD PTR [rax+0xc0]
ffff800000807d51:	49 89 df             	mov    r15,rbx
ffff800000807d54:	b8 00 00 00 00       	mov    eax,0x0
ffff800000807d59:	48 ba 13 2c fe ff ff 	movabs rdx,0xfffffffffffe2c13
ffff800000807d60:	ff ff ff 
ffff800000807d63:	48 01 da             	add    rdx,rbx
ffff800000807d66:	ff d2                	call   rdx
ffff800000807d68:	49 89 04 24          	mov    QWORD PTR [r12],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:647
    unsigned long *pdpt=task[i].pml4;
ffff800000807d6c:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000807d73:	ff ff ff 
ffff800000807d76:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807d7a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807d7d:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000807d80:	48 98                	cdqe   
ffff800000807d82:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff800000807d89:	48 01 d0             	add    rax,rdx
ffff800000807d8c:	48 8b 80 c0 00 00 00 	mov    rax,QWORD PTR [rax+0xc0]
ffff800000807d93:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:649
    //pdpt第一项(0-1GB)设置为内核空间，这样才能访问中断
    set_1gb_pdpt(pdpt,0,PAGE_PRESENT|PAGE_RWX);
ffff800000807d97:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000807d9b:	ba 03 00 00 00       	mov    edx,0x3
ffff800000807da0:	be 00 00 00 00       	mov    esi,0x0
ffff800000807da5:	48 89 c7             	mov    rdi,rax
ffff800000807da8:	49 89 df             	mov    r15,rbx
ffff800000807dab:	48 b8 7e 39 fe ff ff 	movabs rax,0xfffffffffffe397e
ffff800000807db2:	ff ff ff 
ffff800000807db5:	48 01 d8             	add    rax,rbx
ffff800000807db8:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:652

    //申请一项pd,里面申请一2mb页用于堆栈
    addr_t *stackb= kmalloc();
ffff800000807dba:	49 89 df             	mov    r15,rbx
ffff800000807dbd:	b8 00 00 00 00       	mov    eax,0x0
ffff800000807dc2:	48 ba 13 2c fe ff ff 	movabs rdx,0xfffffffffffe2c13
ffff800000807dc9:	ff ff ff 
ffff800000807dcc:	48 01 da             	add    rdx,rbx
ffff800000807dcf:	ff d2                	call   rdx
ffff800000807dd1:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:653
    pdpt[3]=(unsigned long)stackb|PAGE_PRESENT|PAGE_FOR_ALL|PAGE_RWX;//3-4G分配栈空间
ffff800000807dd5:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000807dd9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000807ddd:	48 83 c0 18          	add    rax,0x18
ffff800000807de1:	48 83 ca 07          	or     rdx,0x7
ffff800000807de5:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:654
    set_2mb_pde(stackb + 511, get_phyaddr(req_a_page()), PAGE_FOR_ALL|PAGE_RWX);
ffff800000807de8:	49 89 df             	mov    r15,rbx
ffff800000807deb:	b8 00 00 00 00       	mov    eax,0x0
ffff800000807df0:	48 ba eb 35 fe ff ff 	movabs rdx,0xfffffffffffe35eb
ffff800000807df7:	ff ff ff 
ffff800000807dfa:	48 01 da             	add    rdx,rbx
ffff800000807dfd:	ff d2                	call   rdx
ffff800000807dff:	89 c7                	mov    edi,eax
ffff800000807e01:	49 89 df             	mov    r15,rbx
ffff800000807e04:	48 b8 f2 38 fe ff ff 	movabs rax,0xfffffffffffe38f2
ffff800000807e0b:	ff ff ff 
ffff800000807e0e:	48 01 d8             	add    rax,rbx
ffff800000807e11:	ff d0                	call   rax
ffff800000807e13:	89 c1                	mov    ecx,eax
ffff800000807e15:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000807e19:	48 05 f8 0f 00 00    	add    rax,0xff8
ffff800000807e1f:	ba 06 00 00 00       	mov    edx,0x6
ffff800000807e24:	89 ce                	mov    esi,ecx
ffff800000807e26:	48 89 c7             	mov    rdi,rax
ffff800000807e29:	49 89 df             	mov    r15,rbx
ffff800000807e2c:	48 b8 e9 39 fe ff ff 	movabs rax,0xfffffffffffe39e9
ffff800000807e33:	ff ff ff 
ffff800000807e36:	48 01 d8             	add    rax,rbx
ffff800000807e39:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:655
    task[i].regs.cr3=task[i].pml4;
ffff800000807e3b:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000807e42:	ff ff ff 
ffff800000807e45:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807e49:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807e4c:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000807e4f:	48 98                	cdqe   
ffff800000807e51:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff800000807e58:	48 01 d0             	add    rax,rdx
ffff800000807e5b:	48 8b 90 c0 00 00 00 	mov    rdx,QWORD PTR [rax+0xc0]
ffff800000807e62:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000807e69:	ff ff ff 
ffff800000807e6c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807e70:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000807e73:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000807e76:	48 98                	cdqe   
ffff800000807e78:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff800000807e7f:	48 01 c8             	add    rax,rcx
ffff800000807e82:	48 89 90 44 02 00 00 	mov    QWORD PTR [rax+0x244],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:657

    task[i].stat=TASK_READY;
ffff800000807e89:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000807e90:	ff ff ff 
ffff800000807e93:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807e97:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807e9a:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000807e9d:	48 98                	cdqe   
ffff800000807e9f:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff800000807ea6:	48 01 d0             	add    rax,rdx
ffff800000807ea9:	c7 40 18 02 00 00 00 	mov    DWORD PTR [rax+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:658
    task[i].cwd=cwd;
ffff800000807eb0:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000807eb7:	ff ff ff 
ffff800000807eba:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807ebe:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807ec1:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000807ec4:	48 98                	cdqe   
ffff800000807ec6:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff800000807ecd:	48 01 c2             	add    rdx,rax
ffff800000807ed0:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000807ed4:	48 89 82 c8 00 00 00 	mov    QWORD PTR [rdx+0xc8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:659
    task[i].exef=exef;
ffff800000807edb:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000807ee2:	ff ff ff 
ffff800000807ee5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807ee9:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000807eec:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000807eef:	48 98                	cdqe   
ffff800000807ef1:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff800000807ef8:	48 01 c2             	add    rdx,rax
ffff800000807efb:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000807eff:	48 89 82 d0 00 00 00 	mov    QWORD PTR [rdx+0xd0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:661

    return i;
ffff800000807f06:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:716
    proc_ret_stack *pstack=stack_paddr+stack_size-12;
    pstack->argc=0;
    pstack->argv=0;
    pstack->proc_end_addr=proc_end;
    int *pptr=pstack;*/
}
ffff800000807f09:	48 8d 65 e8          	lea    rsp,[rbp-0x18]
ffff800000807f0d:	5b                   	pop    rbx
ffff800000807f0e:	41 5c                	pop    r12
ffff800000807f10:	41 5f                	pop    r15
ffff800000807f12:	5d                   	pop    rbp
ffff800000807f13:	c3                   	ret    

ffff800000807f14 <sys_malloc>:
sys_malloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:719

void * sys_malloc(int size)
{
ffff800000807f14:	f3 0f 1e fa          	endbr64 
ffff800000807f18:	55                   	push   rbp
ffff800000807f19:	48 89 e5             	mov    rbp,rsp
ffff800000807f1c:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807f1c <sys_malloc+0x8>
ffff800000807f23:	49 bb 1c 74 01 00 00 	movabs r11,0x1741c
ffff800000807f2a:	00 00 00 
ffff800000807f2d:	4c 01 d8             	add    rax,r11
ffff800000807f30:	89 7d cc             	mov    DWORD PTR [rbp-0x34],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:721
    //
    int n=size/CHUNK_SIZE+size%CHUNK_SIZE?1:0;
ffff800000807f33:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff800000807f36:	8d 8a ff 0f 00 00    	lea    ecx,[rdx+0xfff]
ffff800000807f3c:	85 d2                	test   edx,edx
ffff800000807f3e:	0f 48 d1             	cmovs  edx,ecx
ffff800000807f41:	c1 fa 0c             	sar    edx,0xc
ffff800000807f44:	89 d6                	mov    esi,edx
ffff800000807f46:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff800000807f49:	89 d1                	mov    ecx,edx
ffff800000807f4b:	c1 f9 1f             	sar    ecx,0x1f
ffff800000807f4e:	c1 e9 14             	shr    ecx,0x14
ffff800000807f51:	01 ca                	add    edx,ecx
ffff800000807f53:	81 e2 ff 0f 00 00    	and    edx,0xfff
ffff800000807f59:	29 ca                	sub    edx,ecx
ffff800000807f5b:	01 f2                	add    edx,esi
ffff800000807f5d:	85 d2                	test   edx,edx
ffff800000807f5f:	0f 95 c2             	setne  dl
ffff800000807f62:	0f b6 d2             	movzx  edx,dl
ffff800000807f65:	89 55 e8             	mov    DWORD PTR [rbp-0x18],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:722
    chunk_header *hp=(chunk_header*)task[cur_proc].mem_struct.heap_base;
ffff800000807f68:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff800000807f6f:	ff ff ff 
ffff800000807f72:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807f76:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000807f79:	48 ba 40 fe ff ff ff 	movabs rdx,0xfffffffffffffe40
ffff800000807f80:	ff ff ff 
ffff800000807f83:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807f87:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000807f89:	48 63 d2             	movsxd rdx,edx
ffff800000807f8c:	48 69 d2 34 03 00 00 	imul   rdx,rdx,0x334
ffff800000807f93:	48 01 ca             	add    rdx,rcx
ffff800000807f96:	8b 52 28             	mov    edx,DWORD PTR [rdx+0x28]
ffff800000807f99:	48 63 d2             	movsxd rdx,edx
ffff800000807f9c:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:723
    while (hp->next!=NULL&&hp->alloc==0&&hp->pgn>=n)
ffff800000807fa0:	eb 0c                	jmp    ffff800000807fae <sys_malloc+0x9a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:724
        hp=hp->next;
ffff800000807fa2:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000807fa6:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff800000807faa:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:723
    while (hp->next!=NULL&&hp->alloc==0&&hp->pgn>=n)
ffff800000807fae:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000807fb2:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff800000807fb6:	48 85 d2             	test   rdx,rdx
ffff800000807fb9:	74 16                	je     ffff800000807fd1 <sys_malloc+0xbd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:723 (discriminator 1)
ffff800000807fbb:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000807fbf:	8b 52 04             	mov    edx,DWORD PTR [rdx+0x4]
ffff800000807fc2:	85 d2                	test   edx,edx
ffff800000807fc4:	75 0b                	jne    ffff800000807fd1 <sys_malloc+0xbd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:723 (discriminator 2)
ffff800000807fc6:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000807fca:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000807fcc:	39 55 e8             	cmp    DWORD PTR [rbp-0x18],edx
ffff800000807fcf:	7e d1                	jle    ffff800000807fa2 <sys_malloc+0x8e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:725
    if(hp->pgn<n)
ffff800000807fd1:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000807fd5:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000807fd7:	39 55 e8             	cmp    DWORD PTR [rbp-0x18],edx
ffff800000807fda:	0f 8e b3 00 00 00    	jle    ffff800000808093 <sys_malloc+0x17f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:728
    {
        //上抬heap top
        if(task[cur_proc].mem_struct.heap_top+CHUNK_SIZE*n>=HEAP_MAXTOP)
ffff800000807fe0:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff800000807fe7:	ff ff ff 
ffff800000807fea:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807fee:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000807ff1:	48 ba 40 fe ff ff ff 	movabs rdx,0xfffffffffffffe40
ffff800000807ff8:	ff ff ff 
ffff800000807ffb:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807fff:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000808001:	48 63 d2             	movsxd rdx,edx
ffff800000808004:	48 69 d2 34 03 00 00 	imul   rdx,rdx,0x334
ffff80000080800b:	48 01 ca             	add    rdx,rcx
ffff80000080800e:	8b 4a 2c             	mov    ecx,DWORD PTR [rdx+0x2c]
ffff800000808011:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000808014:	c1 e2 0c             	shl    edx,0xc
ffff800000808017:	01 ca                	add    edx,ecx
ffff800000808019:	81 fa ff ff ef 01    	cmp    edx,0x1efffff
ffff80000080801f:	7e 0a                	jle    ffff80000080802b <sys_malloc+0x117>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:731
        {
            //超过顶部
            return NULL;
ffff800000808021:	b8 00 00 00 00       	mov    eax,0x0
ffff800000808026:	e9 e1 00 00 00       	jmp    ffff80000080810c <sys_malloc+0x1f8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:733
        }
        int needed=n-hp->pgn;
ffff80000080802b:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080802f:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff800000808031:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000808034:	29 ca                	sub    edx,ecx
ffff800000808036:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:734
        char* p=task[cur_proc].mem_struct.heap_top;
ffff800000808039:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff800000808040:	ff ff ff 
ffff800000808043:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000808047:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080804a:	48 ba 40 fe ff ff ff 	movabs rdx,0xfffffffffffffe40
ffff800000808051:	ff ff ff 
ffff800000808054:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000808058:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080805a:	48 98                	cdqe   
ffff80000080805c:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff800000808063:	48 01 c8             	add    rax,rcx
ffff800000808066:	8b 40 2c             	mov    eax,DWORD PTR [rax+0x2c]
ffff800000808069:	48 98                	cdqe   
ffff80000080806b:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:735
        for(int i=0;i<needed*CHUNK_SIZE/PAGE_SIZE;i++)
ffff80000080806f:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000808076:	eb 13                	jmp    ffff80000080808b <sys_malloc+0x177>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:737 (discriminator 3)
        {
            *p=0;//触发缺页中断
ffff800000808078:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080807c:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:738 (discriminator 3)
            p+=PAGE_SIZE;
ffff80000080807f:	48 81 45 f0 00 10 00 	add    QWORD PTR [rbp-0x10],0x1000
ffff800000808086:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:735 (discriminator 3)
        for(int i=0;i<needed*CHUNK_SIZE/PAGE_SIZE;i++)
ffff800000808087:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:735 (discriminator 1)
ffff80000080808b:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080808e:	3b 45 e4             	cmp    eax,DWORD PTR [rbp-0x1c]
ffff800000808091:	7c e5                	jl     ffff800000808078 <sys_malloc+0x164>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:741
        }
    }
    if(hp->pgn>n)
ffff800000808093:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000808097:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000808099:	39 45 e8             	cmp    DWORD PTR [rbp-0x18],eax
ffff80000080809c:	7d 59                	jge    ffff8000008080f7 <sys_malloc+0x1e3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:744
    {
        //在后面新建一个头
        char *p=hp;
ffff80000080809e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008080a2:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:745
        p+=(n+1)*CHUNK_SIZE;//算上存储头一个
ffff8000008080a6:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff8000008080a9:	83 c0 01             	add    eax,0x1
ffff8000008080ac:	c1 e0 0c             	shl    eax,0xc
ffff8000008080af:	48 98                	cdqe   
ffff8000008080b1:	48 01 45 d8          	add    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:746
        chunk_header *np=p;
ffff8000008080b5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008080b9:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:747
        np->pgn=hp->pgn-n-1;
ffff8000008080bd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008080c1:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008080c3:	2b 45 e8             	sub    eax,DWORD PTR [rbp-0x18]
ffff8000008080c6:	8d 50 ff             	lea    edx,[rax-0x1]
ffff8000008080c9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008080cd:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:748
        np->next=hp->next;
ffff8000008080cf:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008080d3:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff8000008080d7:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008080db:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:749
        np->prev=hp;
ffff8000008080df:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008080e3:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff8000008080e7:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:750
        hp->next=np;
ffff8000008080eb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008080ef:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff8000008080f3:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:752
    }
    hp->alloc=1;//分配完毕
ffff8000008080f7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008080fb:	c7 40 04 01 00 00 00 	mov    DWORD PTR [rax+0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:753
    return (char*)hp+CHUNK_SIZE;//返回后边的第一个数据块地址
ffff800000808102:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000808106:	48 05 00 10 00 00    	add    rax,0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:754
}
ffff80000080810c:	5d                   	pop    rbp
ffff80000080810d:	c3                   	ret    

ffff80000080810e <sys_free>:
sys_free():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:756
int sys_free(int ptr)
{
ffff80000080810e:	f3 0f 1e fa          	endbr64 
ffff800000808112:	55                   	push   rbp
ffff800000808113:	48 89 e5             	mov    rbp,rsp
ffff800000808116:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000808116 <sys_free+0x8>
ffff80000080811d:	49 bb 22 72 01 00 00 	movabs r11,0x17222
ffff800000808124:	00 00 00 
ffff800000808127:	4c 01 d8             	add    rax,r11
ffff80000080812a:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:757
    chunk_header *hp=ptr-CHUNK_SIZE;//回退到头
ffff80000080812d:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000808130:	2d 00 10 00 00       	sub    eax,0x1000
ffff800000808135:	48 98                	cdqe   
ffff800000808137:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:758
    hp->alloc=0;    //合并
ffff80000080813b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080813f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [rax+0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:760
    //向后合并
    chunk_header *p=hp->next;
ffff800000808146:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080814a:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080814e:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:761
    while(p!=NULL)
ffff800000808152:	eb 2e                	jmp    ffff800000808182 <sys_free+0x74>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:763
    {
        if(p->alloc==0)
ffff800000808154:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000808158:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff80000080815b:	85 c0                	test   eax,eax
ffff80000080815d:	75 2c                	jne    ffff80000080818b <sys_free+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:765
        {
            hp->pgn+=p->pgn+1;//把区域合并
ffff80000080815f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000808163:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000808165:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000808169:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080816b:	83 c0 01             	add    eax,0x1
ffff80000080816e:	01 c2                	add    edx,eax
ffff800000808170:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000808174:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:768
        }else
            break;
        p=p->next;
ffff800000808176:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080817a:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080817e:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:761
    while(p!=NULL)
ffff800000808182:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffff800000808187:	75 cb                	jne    ffff800000808154 <sys_free+0x46>
ffff800000808189:	eb 01                	jmp    ffff80000080818c <sys_free+0x7e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:767
            break;
ffff80000080818b:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:771
    }
    //向前合并
    p=hp->prev;
ffff80000080818c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000808190:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000808194:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:772
    while(p!=NULL)
ffff800000808198:	eb 2e                	jmp    ffff8000008081c8 <sys_free+0xba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:774
    {
        if(p->alloc==0)
ffff80000080819a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080819e:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff8000008081a1:	85 c0                	test   eax,eax
ffff8000008081a3:	75 2c                	jne    ffff8000008081d1 <sys_free+0xc3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:776
        {
            p->pgn+=hp->pgn+1;//把区域合并
ffff8000008081a5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008081a9:	8b 10                	mov    edx,DWORD PTR [rax]
ffff8000008081ab:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008081af:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008081b1:	83 c0 01             	add    eax,0x1
ffff8000008081b4:	01 c2                	add    edx,eax
ffff8000008081b6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008081ba:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:779
        }else
            break;
        p=p->prev;
ffff8000008081bc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008081c0:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008081c4:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:772
    while(p!=NULL)
ffff8000008081c8:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffff8000008081cd:	75 cb                	jne    ffff80000080819a <sys_free+0x8c>
ffff8000008081cf:	eb 01                	jmp    ffff8000008081d2 <sys_free+0xc4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:778
            break;
ffff8000008081d1:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:782
    }
    //合并完成
    return 0;
ffff8000008081d2:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:783
}
ffff8000008081d7:	5d                   	pop    rbp
ffff8000008081d8:	c3                   	ret    

ffff8000008081d9 <switch_to>:
switch_to():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:785

void switch_to(struct process *from, struct process *to) {
ffff8000008081d9:	f3 0f 1e fa          	endbr64 
ffff8000008081dd:	55                   	push   rbp
ffff8000008081de:	48 89 e5             	mov    rbp,rsp
ffff8000008081e1:	53                   	push   rbx
ffff8000008081e2:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008081e2 <switch_to+0x9>
ffff8000008081e9:	49 bb 56 71 01 00 00 	movabs r11,0x17156
ffff8000008081f0:	00 00 00 
ffff8000008081f3:	4c 01 d8             	add    rax,r11
ffff8000008081f6:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
ffff8000008081fa:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:786
    cur_proc=to-task;
ffff8000008081fe:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff800000808205:	ff ff ff 
ffff800000808208:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080820c:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080820f:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000808213:	48 29 ca             	sub    rdx,rcx
ffff800000808216:	48 89 d1             	mov    rcx,rdx
ffff800000808219:	48 c1 f9 02          	sar    rcx,0x2
ffff80000080821d:	48 ba 05 ec 4f c0 fe 	movabs rdx,0x4fec04fec04fec05
ffff800000808224:	04 ec 4f 
ffff800000808227:	48 0f af d1          	imul   rdx,rcx
ffff80000080822b:	89 d1                	mov    ecx,edx
ffff80000080822d:	48 ba 40 fe ff ff ff 	movabs rdx,0xfffffffffffffe40
ffff800000808234:	ff ff ff 
ffff800000808237:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080823b:	89 0a                	mov    DWORD PTR [rdx],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:787
    current=&task[cur_proc];
ffff80000080823d:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff800000808244:	ff ff ff 
ffff800000808247:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080824b:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080824e:	48 ba 40 fe ff ff ff 	movabs rdx,0xfffffffffffffe40
ffff800000808255:	ff ff ff 
ffff800000808258:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080825c:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff80000080825e:	48 63 d2             	movsxd rdx,edx
ffff800000808261:	48 69 d2 34 03 00 00 	imul   rdx,rdx,0x334
ffff800000808268:	48 01 ca             	add    rdx,rcx
ffff80000080826b:	48 b9 90 fe ff ff ff 	movabs rcx,0xfffffffffffffe90
ffff800000808272:	ff ff ff 
ffff800000808275:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff800000808279:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:788
    addr_t pml4n=((addr_t )to->pml4)&~KNL_BASE;//cr3需要物理地址
ffff80000080827c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000808280:	48 8b 80 c0 00 00 00 	mov    rax,QWORD PTR [rax+0xc0]
ffff800000808287:	48 89 c2             	mov    rdx,rax
ffff80000080828a:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffff
ffff800000808291:	7f 00 00 
ffff800000808294:	48 21 d0             	and    rax,rdx
ffff800000808297:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:789
    asm volatile("mov %0,%%rax\n"
ffff80000080829b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080829f:	0f 22 d8             	mov    cr3,rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:791
                 "mov %%rax,%%cr3\n":"=m"(pml4n));
    asm volatile("mov %%rsp,%0\r\n"
ffff8000008082a2:	4c 8b 4d e0          	mov    r9,QWORD PTR [rbp-0x20]
ffff8000008082a6:	4c 8b 55 e0          	mov    r10,QWORD PTR [rbp-0x20]
ffff8000008082aa:	4c 8b 5d e0          	mov    r11,QWORD PTR [rbp-0x20]
ffff8000008082ae:	48 8b 5d e0          	mov    rbx,QWORD PTR [rbp-0x20]
ffff8000008082b2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008082b6:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff8000008082ba:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff8000008082be:	4c 8b 45 d8          	mov    r8,QWORD PTR [rbp-0x28]
ffff8000008082c2:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
ffff8000008082c6:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
ffff8000008082ca:	49 89 a1 7c 02 00 00 	mov    QWORD PTR [r9+0x27c],rsp
ffff8000008082d1:	48 8d 05 24 00 00 00 	lea    rax,[rip+0x24]        # ffff8000008082fc <done>
ffff8000008082d8:	49 89 82 4c 02 00 00 	mov    QWORD PTR [r10+0x24c],rax
ffff8000008082df:	41 8c a3 bc 02 00 00 	mov    WORD PTR [r11+0x2bc],fs
ffff8000008082e6:	8c ab c4 02 00 00    	mov    WORD PTR [rbx+0x2c4],gs
ffff8000008082ec:	48 8b a1 7c 02 00 00 	mov    rsp,QWORD PTR [rcx+0x27c]
ffff8000008082f3:	41 ff b0 4c 02 00 00 	push   QWORD PTR [r8+0x24c]
ffff8000008082fa:	eb 08                	jmp    ffff800000808304 <__switch_to>

ffff8000008082fc <done>:
ffff8000008082fc:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:805
                 "nop":"=m"(from->regs.rsp),"=m"(from->regs.rip),
                 "=m"(from->regs.fs),"=m"(from->regs.gs):
                "m"(to->regs.fs),"m"(to->regs.gs),"m"(to->regs.rsp),"m"(to->regs.rip),
                "D"(from),"S"(to));

}
ffff8000008082fd:	90                   	nop
ffff8000008082fe:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
ffff800000808302:	c9                   	leave  
ffff800000808303:	c3                   	ret    

ffff800000808304 <__switch_to>:
__switch_to():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:806
void __switch_to(struct process *from, struct process *to) {
ffff800000808304:	f3 0f 1e fa          	endbr64 
ffff800000808308:	55                   	push   rbp
ffff800000808309:	48 89 e5             	mov    rbp,rsp
ffff80000080830c:	41 57                	push   r15
ffff80000080830e:	41 54                	push   r12
ffff800000808310:	53                   	push   rbx
ffff800000808311:	48 83 ec 18          	sub    rsp,0x18
ffff800000808315:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000808315 <__switch_to+0x11>
ffff80000080831c:	49 bb 23 70 01 00 00 	movabs r11,0x17023
ffff800000808323:	00 00 00 
ffff800000808326:	4c 01 d8             	add    rax,r11
ffff800000808329:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff80000080832d:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:808
    set_tss(to->tss.rsp0,tss->rsp1,tss->rsp2,tss->ists[0],tss->ists[1],
            tss->ists[2],tss->ists[3],tss->ists[4],tss->ists[5],tss->ists[6]);
ffff800000808331:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff800000808338:	ff ff ff 
ffff80000080833b:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080833f:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:807
    set_tss(to->tss.rsp0,tss->rsp1,tss->rsp2,tss->ists[0],tss->ists[1],
ffff800000808342:	4c 8b 5a 54          	mov    r11,QWORD PTR [rdx+0x54]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:808
            tss->ists[2],tss->ists[3],tss->ists[4],tss->ists[5],tss->ists[6]);
ffff800000808346:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff80000080834d:	ff ff ff 
ffff800000808350:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000808354:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:807
    set_tss(to->tss.rsp0,tss->rsp1,tss->rsp2,tss->ists[0],tss->ists[1],
ffff800000808357:	4c 8b 52 4c          	mov    r10,QWORD PTR [rdx+0x4c]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:808
            tss->ists[2],tss->ists[3],tss->ists[4],tss->ists[5],tss->ists[6]);
ffff80000080835b:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff800000808362:	ff ff ff 
ffff800000808365:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000808369:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:807
    set_tss(to->tss.rsp0,tss->rsp1,tss->rsp2,tss->ists[0],tss->ists[1],
ffff80000080836c:	4c 8b 4a 44          	mov    r9,QWORD PTR [rdx+0x44]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:808
            tss->ists[2],tss->ists[3],tss->ists[4],tss->ists[5],tss->ists[6]);
ffff800000808370:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff800000808377:	ff ff ff 
ffff80000080837a:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080837e:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:807
    set_tss(to->tss.rsp0,tss->rsp1,tss->rsp2,tss->ists[0],tss->ists[1],
ffff800000808381:	4c 8b 42 3c          	mov    r8,QWORD PTR [rdx+0x3c]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:808
            tss->ists[2],tss->ists[3],tss->ists[4],tss->ists[5],tss->ists[6]);
ffff800000808385:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff80000080838c:	ff ff ff 
ffff80000080838f:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000808393:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:807
    set_tss(to->tss.rsp0,tss->rsp1,tss->rsp2,tss->ists[0],tss->ists[1],
ffff800000808396:	4c 8b 62 34          	mov    r12,QWORD PTR [rdx+0x34]
ffff80000080839a:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff8000008083a1:	ff ff ff 
ffff8000008083a4:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008083a8:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008083ab:	48 8b 5a 2c          	mov    rbx,QWORD PTR [rdx+0x2c]
ffff8000008083af:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff8000008083b6:	ff ff ff 
ffff8000008083b9:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008083bd:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008083c0:	48 8b 4a 24          	mov    rcx,QWORD PTR [rdx+0x24]
ffff8000008083c4:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff8000008083cb:	ff ff ff 
ffff8000008083ce:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008083d2:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008083d5:	48 8b 52 14          	mov    rdx,QWORD PTR [rdx+0x14]
ffff8000008083d9:	48 be 18 fe ff ff ff 	movabs rsi,0xfffffffffffffe18
ffff8000008083e0:	ff ff ff 
ffff8000008083e3:	48 8b 34 30          	mov    rsi,QWORD PTR [rax+rsi*1]
ffff8000008083e7:	48 8b 36             	mov    rsi,QWORD PTR [rsi]
ffff8000008083ea:	48 8b 76 0c          	mov    rsi,QWORD PTR [rsi+0xc]
ffff8000008083ee:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffff8000008083f2:	48 8b bf dc 01 00 00 	mov    rdi,QWORD PTR [rdi+0x1dc]
ffff8000008083f9:	41 53                	push   r11
ffff8000008083fb:	41 52                	push   r10
ffff8000008083fd:	41 51                	push   r9
ffff8000008083ff:	41 50                	push   r8
ffff800000808401:	4d 89 e1             	mov    r9,r12
ffff800000808404:	49 89 d8             	mov    r8,rbx
ffff800000808407:	49 89 c7             	mov    r15,rax
ffff80000080840a:	49 ba 1b 91 fe ff ff 	movabs r10,0xfffffffffffe911b
ffff800000808411:	ff ff ff 
ffff800000808414:	49 01 c2             	add    r10,rax
ffff800000808417:	41 ff d2             	call   r10
ffff80000080841a:	48 83 c4 20          	add    rsp,0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:809
    asm volatile("mov %%fs,%0\r\n"
ffff80000080841e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000808422:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff800000808426:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080842a:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff80000080842e:	8c a0 bc 02 00 00    	mov    WORD PTR [rax+0x2bc],fs
ffff800000808434:	8c ae c4 02 00 00    	mov    WORD PTR [rsi+0x2c4],gs
ffff80000080843a:	8e a2 bc 02 00 00    	mov    fs,WORD PTR [rdx+0x2bc]
ffff800000808440:	8e a9 c4 02 00 00    	mov    gs,WORD PTR [rcx+0x2c4]
ffff800000808446:	fb                   	sti    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:815
                 "mov %%gs,%1\r\n"
                 "mov %2,%%fs\r\n"
                 "mov %3,%%gs\r\n"
                 "sti":"=m"(to->regs.fs),"=m"(to->regs.gs):
                 "m"(from->regs.fs),"m"(from->regs.gs));
}
ffff800000808447:	90                   	nop
ffff800000808448:	48 8d 65 e8          	lea    rsp,[rbp-0x18]
ffff80000080844c:	5b                   	pop    rbx
ffff80000080844d:	41 5c                	pop    r12
ffff80000080844f:	41 5f                	pop    r15
ffff800000808451:	5d                   	pop    rbp
ffff800000808452:	c3                   	ret    

ffff800000808453 <set_tss>:
set_tss():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:817

void set_tss(u64 rsp0,u64 rsp1,u64 rsp2,u64 ist0,u64 ist1,u64 ist2,u64 ist3,u64 ist4,u64 ist5,u64 ist6){
ffff800000808453:	f3 0f 1e fa          	endbr64 
ffff800000808457:	55                   	push   rbp
ffff800000808458:	48 89 e5             	mov    rbp,rsp
ffff80000080845b:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080845b <set_tss+0x8>
ffff800000808462:	49 bb dd 6e 01 00 00 	movabs r11,0x16edd
ffff800000808469:	00 00 00 
ffff80000080846c:	4c 01 d8             	add    rax,r11
ffff80000080846f:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000808473:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000808477:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080847b:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
ffff80000080847f:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
ffff800000808483:	4c 89 4d d0          	mov    QWORD PTR [rbp-0x30],r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:818
    tss->rsp0=rsp0;
ffff800000808487:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff80000080848e:	ff ff ff 
ffff800000808491:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000808495:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000808498:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
ffff80000080849c:	48 89 4a 04          	mov    QWORD PTR [rdx+0x4],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:819
    tss->rsp1=rsp1;
ffff8000008084a0:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff8000008084a7:	ff ff ff 
ffff8000008084aa:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008084ae:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008084b1:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff8000008084b5:	48 89 4a 0c          	mov    QWORD PTR [rdx+0xc],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:820
    tss->rsp2=rsp2;
ffff8000008084b9:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff8000008084c0:	ff ff ff 
ffff8000008084c3:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008084c7:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008084ca:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff8000008084ce:	48 89 4a 14          	mov    QWORD PTR [rdx+0x14],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:821
    tss->ists[0]=ist0;
ffff8000008084d2:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff8000008084d9:	ff ff ff 
ffff8000008084dc:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008084e0:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008084e3:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
ffff8000008084e7:	48 89 4a 24          	mov    QWORD PTR [rdx+0x24],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:822
    tss->ists[1]=ist1;
ffff8000008084eb:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff8000008084f2:	ff ff ff 
ffff8000008084f5:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008084f9:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008084fc:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff800000808500:	48 89 4a 2c          	mov    QWORD PTR [rdx+0x2c],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:823
    tss->ists[2]=ist2;
ffff800000808504:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff80000080850b:	ff ff ff 
ffff80000080850e:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000808512:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000808515:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffff800000808519:	48 89 4a 34          	mov    QWORD PTR [rdx+0x34],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:824
    tss->ists[3]=ist3;
ffff80000080851d:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff800000808524:	ff ff ff 
ffff800000808527:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080852b:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080852e:	48 8b 4d 10          	mov    rcx,QWORD PTR [rbp+0x10]
ffff800000808532:	48 89 4a 3c          	mov    QWORD PTR [rdx+0x3c],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:825
    tss->ists[4]=ist4;
ffff800000808536:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff80000080853d:	ff ff ff 
ffff800000808540:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000808544:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000808547:	48 8b 4d 18          	mov    rcx,QWORD PTR [rbp+0x18]
ffff80000080854b:	48 89 4a 44          	mov    QWORD PTR [rdx+0x44],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:826
    tss->ists[5]=ist5;
ffff80000080854f:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff800000808556:	ff ff ff 
ffff800000808559:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080855d:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000808560:	48 8b 4d 20          	mov    rcx,QWORD PTR [rbp+0x20]
ffff800000808564:	48 89 4a 4c          	mov    QWORD PTR [rdx+0x4c],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:827
    tss->ists[6]=ist6;
ffff800000808568:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff80000080856f:	ff ff ff 
ffff800000808572:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000808576:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808579:	48 8b 55 28          	mov    rdx,QWORD PTR [rbp+0x28]
ffff80000080857d:	48 89 50 54          	mov    QWORD PTR [rax+0x54],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:828
}
ffff800000808581:	90                   	nop
ffff800000808582:	5d                   	pop    rbp
ffff800000808583:	c3                   	ret    

ffff800000808584 <fork_child_ret>:
fork_child_ret():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:830

int fork_child_ret(){
ffff800000808584:	f3 0f 1e fa          	endbr64 
ffff800000808588:	55                   	push   rbp
ffff800000808589:	48 89 e5             	mov    rbp,rsp
ffff80000080858c:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080858c <fork_child_ret+0x8>
ffff800000808593:	49 bb ac 6d 01 00 00 	movabs r11,0x16dac
ffff80000080859a:	00 00 00 
ffff80000080859d:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:831
    return 0;
ffff8000008085a0:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:833

}
ffff8000008085a5:	5d                   	pop    rbp
ffff8000008085a6:	c3                   	ret    

ffff8000008085a7 <sys_fork>:
sys_fork():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:835

int sys_fork(void){
ffff8000008085a7:	f3 0f 1e fa          	endbr64 
ffff8000008085ab:	55                   	push   rbp
ffff8000008085ac:	48 89 e5             	mov    rbp,rsp
ffff8000008085af:	41 57                	push   r15
ffff8000008085b1:	53                   	push   rbx
ffff8000008085b2:	48 81 ec a0 00 00 00 	sub    rsp,0xa0
ffff8000008085b9:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008085b9 <sys_fork+0x12>
ffff8000008085c0:	49 bb 7f 6d 01 00 00 	movabs r11,0x16d7f
ffff8000008085c7:	00 00 00 
ffff8000008085ca:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:836
    int pid=req_proc();
ffff8000008085cd:	49 89 df             	mov    r15,rbx
ffff8000008085d0:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008085d5:	48 ba 8d 78 fe ff ff 	movabs rdx,0xfffffffffffe788d
ffff8000008085dc:	ff ff ff 
ffff8000008085df:	48 01 da             	add    rdx,rbx
ffff8000008085e2:	ff d2                	call   rdx
ffff8000008085e4:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:837
    if(pid==-1)return -1;
ffff8000008085e7:	83 7d cc ff          	cmp    DWORD PTR [rbp-0x34],0xffffffff
ffff8000008085eb:	75 0a                	jne    ffff8000008085f7 <sys_fork+0x50>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:837 (discriminator 1)
ffff8000008085ed:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff8000008085f2:	e9 5b 0e 00 00       	jmp    ffff800000809452 <sys_fork+0xeab>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:838
    task[pid].regs=current->regs;
ffff8000008085f7:	48 b8 90 fe ff ff ff 	movabs rax,0xfffffffffffffe90
ffff8000008085fe:	ff ff ff 
ffff800000808601:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808605:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808608:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff80000080860f:	ff ff ff 
ffff800000808612:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000808616:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000808619:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000080861c:	48 63 d2             	movsxd rdx,edx
ffff80000080861f:	48 69 d2 34 03 00 00 	imul   rdx,rdx,0x334
ffff800000808626:	48 01 ca             	add    rdx,rcx
ffff800000808629:	48 8b b0 44 02 00 00 	mov    rsi,QWORD PTR [rax+0x244]
ffff800000808630:	48 8b b8 4c 02 00 00 	mov    rdi,QWORD PTR [rax+0x24c]
ffff800000808637:	48 89 b2 44 02 00 00 	mov    QWORD PTR [rdx+0x244],rsi
ffff80000080863e:	48 89 ba 4c 02 00 00 	mov    QWORD PTR [rdx+0x24c],rdi
ffff800000808645:	48 8b b0 54 02 00 00 	mov    rsi,QWORD PTR [rax+0x254]
ffff80000080864c:	48 8b b8 5c 02 00 00 	mov    rdi,QWORD PTR [rax+0x25c]
ffff800000808653:	48 89 b2 54 02 00 00 	mov    QWORD PTR [rdx+0x254],rsi
ffff80000080865a:	48 89 ba 5c 02 00 00 	mov    QWORD PTR [rdx+0x25c],rdi
ffff800000808661:	48 8b b0 64 02 00 00 	mov    rsi,QWORD PTR [rax+0x264]
ffff800000808668:	48 8b b8 6c 02 00 00 	mov    rdi,QWORD PTR [rax+0x26c]
ffff80000080866f:	48 89 b2 64 02 00 00 	mov    QWORD PTR [rdx+0x264],rsi
ffff800000808676:	48 89 ba 6c 02 00 00 	mov    QWORD PTR [rdx+0x26c],rdi
ffff80000080867d:	48 8b b0 74 02 00 00 	mov    rsi,QWORD PTR [rax+0x274]
ffff800000808684:	48 8b b8 7c 02 00 00 	mov    rdi,QWORD PTR [rax+0x27c]
ffff80000080868b:	48 89 b2 74 02 00 00 	mov    QWORD PTR [rdx+0x274],rsi
ffff800000808692:	48 89 ba 7c 02 00 00 	mov    QWORD PTR [rdx+0x27c],rdi
ffff800000808699:	48 8b b0 84 02 00 00 	mov    rsi,QWORD PTR [rax+0x284]
ffff8000008086a0:	48 8b b8 8c 02 00 00 	mov    rdi,QWORD PTR [rax+0x28c]
ffff8000008086a7:	48 89 b2 84 02 00 00 	mov    QWORD PTR [rdx+0x284],rsi
ffff8000008086ae:	48 89 ba 8c 02 00 00 	mov    QWORD PTR [rdx+0x28c],rdi
ffff8000008086b5:	48 8b b0 94 02 00 00 	mov    rsi,QWORD PTR [rax+0x294]
ffff8000008086bc:	48 8b b8 9c 02 00 00 	mov    rdi,QWORD PTR [rax+0x29c]
ffff8000008086c3:	48 89 b2 94 02 00 00 	mov    QWORD PTR [rdx+0x294],rsi
ffff8000008086ca:	48 89 ba 9c 02 00 00 	mov    QWORD PTR [rdx+0x29c],rdi
ffff8000008086d1:	48 8b b0 a4 02 00 00 	mov    rsi,QWORD PTR [rax+0x2a4]
ffff8000008086d8:	48 8b b8 ac 02 00 00 	mov    rdi,QWORD PTR [rax+0x2ac]
ffff8000008086df:	48 89 b2 a4 02 00 00 	mov    QWORD PTR [rdx+0x2a4],rsi
ffff8000008086e6:	48 89 ba ac 02 00 00 	mov    QWORD PTR [rdx+0x2ac],rdi
ffff8000008086ed:	48 8b b0 b4 02 00 00 	mov    rsi,QWORD PTR [rax+0x2b4]
ffff8000008086f4:	48 8b b8 bc 02 00 00 	mov    rdi,QWORD PTR [rax+0x2bc]
ffff8000008086fb:	48 89 b2 b4 02 00 00 	mov    QWORD PTR [rdx+0x2b4],rsi
ffff800000808702:	48 89 ba bc 02 00 00 	mov    QWORD PTR [rdx+0x2bc],rdi
ffff800000808709:	48 8b b0 c4 02 00 00 	mov    rsi,QWORD PTR [rax+0x2c4]
ffff800000808710:	48 8b b8 cc 02 00 00 	mov    rdi,QWORD PTR [rax+0x2cc]
ffff800000808717:	48 89 b2 c4 02 00 00 	mov    QWORD PTR [rdx+0x2c4],rsi
ffff80000080871e:	48 89 ba cc 02 00 00 	mov    QWORD PTR [rdx+0x2cc],rdi
ffff800000808725:	48 8b b0 d4 02 00 00 	mov    rsi,QWORD PTR [rax+0x2d4]
ffff80000080872c:	48 8b b8 dc 02 00 00 	mov    rdi,QWORD PTR [rax+0x2dc]
ffff800000808733:	48 89 b2 d4 02 00 00 	mov    QWORD PTR [rdx+0x2d4],rsi
ffff80000080873a:	48 89 ba dc 02 00 00 	mov    QWORD PTR [rdx+0x2dc],rdi
ffff800000808741:	48 8b b0 e4 02 00 00 	mov    rsi,QWORD PTR [rax+0x2e4]
ffff800000808748:	48 8b b8 ec 02 00 00 	mov    rdi,QWORD PTR [rax+0x2ec]
ffff80000080874f:	48 89 b2 e4 02 00 00 	mov    QWORD PTR [rdx+0x2e4],rsi
ffff800000808756:	48 89 ba ec 02 00 00 	mov    QWORD PTR [rdx+0x2ec],rdi
ffff80000080875d:	48 8b b0 f4 02 00 00 	mov    rsi,QWORD PTR [rax+0x2f4]
ffff800000808764:	48 8b b8 fc 02 00 00 	mov    rdi,QWORD PTR [rax+0x2fc]
ffff80000080876b:	48 89 b2 f4 02 00 00 	mov    QWORD PTR [rdx+0x2f4],rsi
ffff800000808772:	48 89 ba fc 02 00 00 	mov    QWORD PTR [rdx+0x2fc],rdi
ffff800000808779:	48 8b b0 04 03 00 00 	mov    rsi,QWORD PTR [rax+0x304]
ffff800000808780:	48 8b b8 0c 03 00 00 	mov    rdi,QWORD PTR [rax+0x30c]
ffff800000808787:	48 89 b2 04 03 00 00 	mov    QWORD PTR [rdx+0x304],rsi
ffff80000080878e:	48 89 ba 0c 03 00 00 	mov    QWORD PTR [rdx+0x30c],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:840
    //使得子程序处于刚调用完系统调用的状态
    task[pid].regs.rip=ret_normal_proc;
ffff800000808795:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff80000080879c:	ff ff ff 
ffff80000080879f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008087a3:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008087a6:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff8000008087a9:	48 98                	cdqe   
ffff8000008087ab:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff8000008087b2:	48 01 d0             	add    rax,rdx
ffff8000008087b5:	48 ba 78 ff ff ff ff 	movabs rdx,0xffffffffffffff78
ffff8000008087bc:	ff ff ff 
ffff8000008087bf:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff8000008087c3:	48 89 90 4c 02 00 00 	mov    QWORD PTR [rax+0x24c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:841
    task[pid].regs.rsp-=sizeof(stack_store_regs);
ffff8000008087ca:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff8000008087d1:	ff ff ff 
ffff8000008087d4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008087d8:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008087db:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff8000008087de:	48 98                	cdqe   
ffff8000008087e0:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff8000008087e7:	48 01 d0             	add    rax,rdx
ffff8000008087ea:	48 8b 80 7c 02 00 00 	mov    rax,QWORD PTR [rax+0x27c]
ffff8000008087f1:	48 8d 90 58 ff ff ff 	lea    rdx,[rax-0xa8]
ffff8000008087f8:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff8000008087ff:	ff ff ff 
ffff800000808802:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808806:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000808809:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080880c:	48 98                	cdqe   
ffff80000080880e:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff800000808815:	48 01 c8             	add    rax,rcx
ffff800000808818:	48 89 90 7c 02 00 00 	mov    QWORD PTR [rax+0x27c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:842
    task[pid].sid=current->sid;
ffff80000080881f:	48 b8 90 fe ff ff ff 	movabs rax,0xfffffffffffffe90
ffff800000808826:	ff ff ff 
ffff800000808829:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080882d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808830:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff800000808837:	ff ff ff 
ffff80000080883a:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080883e:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000808841:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff800000808844:	48 63 d2             	movsxd rdx,edx
ffff800000808847:	48 69 d2 34 03 00 00 	imul   rdx,rdx,0x334
ffff80000080884e:	48 01 ca             	add    rdx,rcx
ffff800000808851:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000808854:	89 42 08             	mov    DWORD PTR [rdx+0x8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:843
    task[pid].gpid=current->gpid;
ffff800000808857:	48 b8 90 fe ff ff ff 	movabs rax,0xfffffffffffffe90
ffff80000080885e:	ff ff ff 
ffff800000808861:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808865:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808868:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff80000080886f:	ff ff ff 
ffff800000808872:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000808876:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000808879:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000080887c:	48 63 d2             	movsxd rdx,edx
ffff80000080887f:	48 69 d2 34 03 00 00 	imul   rdx,rdx,0x334
ffff800000808886:	48 01 ca             	add    rdx,rcx
ffff800000808889:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff80000080888c:	89 42 04             	mov    DWORD PTR [rdx+0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:844
    stack_store_regs *r=task[pid].regs.rsp;
ffff80000080888f:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000808896:	ff ff ff 
ffff800000808899:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080889d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008088a0:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff8000008088a3:	48 98                	cdqe   
ffff8000008088a5:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff8000008088ac:	48 01 d0             	add    rax,rdx
ffff8000008088af:	48 8b 80 7c 02 00 00 	mov    rax,QWORD PTR [rax+0x27c]
ffff8000008088b6:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:845
    r->rax=0;
ffff8000008088ba:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008088be:	48 c7 40 78 00 00 00 	mov    QWORD PTR [rax+0x78],0x0
ffff8000008088c5:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:846
    r->ds=DS_USER;
ffff8000008088c6:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008088ca:	48 c7 00 28 00 00 00 	mov    QWORD PTR [rax],0x28
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:847
    r->ss=DS_USER;
ffff8000008088d1:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008088d5:	48 c7 80 a0 00 00 00 	mov    QWORD PTR [rax+0xa0],0x28
ffff8000008088dc:	28 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:848
    r->es=DS_USER;
ffff8000008088e0:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008088e4:	48 c7 40 08 28 00 00 	mov    QWORD PTR [rax+0x8],0x28
ffff8000008088eb:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:849
    r->rax=task[pid].regs.rax;
ffff8000008088ec:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff8000008088f3:	ff ff ff 
ffff8000008088f6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008088fa:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008088fd:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000808900:	48 98                	cdqe   
ffff800000808902:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff800000808909:	48 01 d0             	add    rax,rdx
ffff80000080890c:	48 8b 80 5c 02 00 00 	mov    rax,QWORD PTR [rax+0x25c]
ffff800000808913:	48 89 c2             	mov    rdx,rax
ffff800000808916:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080891a:	48 89 50 78          	mov    QWORD PTR [rax+0x78],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:850
    r->rbx=task[pid].regs.rbx;
ffff80000080891e:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000808925:	ff ff ff 
ffff800000808928:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080892c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080892f:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000808932:	48 98                	cdqe   
ffff800000808934:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff80000080893b:	48 01 d0             	add    rax,rdx
ffff80000080893e:	48 8b 80 74 02 00 00 	mov    rax,QWORD PTR [rax+0x274]
ffff800000808945:	48 89 c2             	mov    rdx,rax
ffff800000808948:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080894c:	48 89 50 70          	mov    QWORD PTR [rax+0x70],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:851
    r->rcx=task[pid].regs.rcx;
ffff800000808950:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000808957:	ff ff ff 
ffff80000080895a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080895e:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808961:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000808964:	48 98                	cdqe   
ffff800000808966:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff80000080896d:	48 01 d0             	add    rax,rdx
ffff800000808970:	48 8b 80 64 02 00 00 	mov    rax,QWORD PTR [rax+0x264]
ffff800000808977:	48 89 c2             	mov    rdx,rax
ffff80000080897a:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080897e:	48 89 50 68          	mov    QWORD PTR [rax+0x68],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:852
    r->rdx=task[pid].regs.rdx;
ffff800000808982:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000808989:	ff ff ff 
ffff80000080898c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808990:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808993:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000808996:	48 98                	cdqe   
ffff800000808998:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff80000080899f:	48 01 d0             	add    rax,rdx
ffff8000008089a2:	48 8b 80 6c 02 00 00 	mov    rax,QWORD PTR [rax+0x26c]
ffff8000008089a9:	48 89 c2             	mov    rdx,rax
ffff8000008089ac:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008089b0:	48 89 50 60          	mov    QWORD PTR [rax+0x60],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:853
    r->rsi=task[pid].regs.rsi;
ffff8000008089b4:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff8000008089bb:	ff ff ff 
ffff8000008089be:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008089c2:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008089c5:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff8000008089c8:	48 98                	cdqe   
ffff8000008089ca:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff8000008089d1:	48 01 d0             	add    rax,rdx
ffff8000008089d4:	48 8b 80 8c 02 00 00 	mov    rax,QWORD PTR [rax+0x28c]
ffff8000008089db:	48 89 c2             	mov    rdx,rax
ffff8000008089de:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008089e2:	48 89 50 50          	mov    QWORD PTR [rax+0x50],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:854
    r->rdi=task[pid].regs.rdi;
ffff8000008089e6:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff8000008089ed:	ff ff ff 
ffff8000008089f0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008089f4:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008089f7:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff8000008089fa:	48 98                	cdqe   
ffff8000008089fc:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff800000808a03:	48 01 d0             	add    rax,rdx
ffff800000808a06:	48 8b 80 94 02 00 00 	mov    rax,QWORD PTR [rax+0x294]
ffff800000808a0d:	48 89 c2             	mov    rdx,rax
ffff800000808a10:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000808a14:	48 89 50 58          	mov    QWORD PTR [rax+0x58],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:856

    r->r8 =task[pid].regs.r8 ;
ffff800000808a18:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000808a1f:	ff ff ff 
ffff800000808a22:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808a26:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808a29:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000808a2c:	48 98                	cdqe   
ffff800000808a2e:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff800000808a35:	48 01 d0             	add    rax,rdx
ffff800000808a38:	48 8b 80 cc 02 00 00 	mov    rax,QWORD PTR [rax+0x2cc]
ffff800000808a3f:	48 89 c2             	mov    rdx,rax
ffff800000808a42:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000808a46:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:857
    r->r9 =task[pid].regs.r9 ;
ffff800000808a4a:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000808a51:	ff ff ff 
ffff800000808a54:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808a58:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808a5b:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000808a5e:	48 98                	cdqe   
ffff800000808a60:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff800000808a67:	48 01 d0             	add    rax,rdx
ffff800000808a6a:	48 8b 80 d4 02 00 00 	mov    rax,QWORD PTR [rax+0x2d4]
ffff800000808a71:	48 89 c2             	mov    rdx,rax
ffff800000808a74:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000808a78:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:858
    r->r10=task[pid].regs.r10;
ffff800000808a7c:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000808a83:	ff ff ff 
ffff800000808a86:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808a8a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808a8d:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000808a90:	48 98                	cdqe   
ffff800000808a92:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff800000808a99:	48 01 d0             	add    rax,rdx
ffff800000808a9c:	48 8b 80 dc 02 00 00 	mov    rax,QWORD PTR [rax+0x2dc]
ffff800000808aa3:	48 89 c2             	mov    rdx,rax
ffff800000808aa6:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000808aaa:	48 89 50 38          	mov    QWORD PTR [rax+0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:859
    r->r11=task[pid].regs.r11;
ffff800000808aae:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000808ab5:	ff ff ff 
ffff800000808ab8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808abc:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808abf:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000808ac2:	48 98                	cdqe   
ffff800000808ac4:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff800000808acb:	48 01 d0             	add    rax,rdx
ffff800000808ace:	48 8b 80 e4 02 00 00 	mov    rax,QWORD PTR [rax+0x2e4]
ffff800000808ad5:	48 89 c2             	mov    rdx,rax
ffff800000808ad8:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000808adc:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:860
    r->r12=task[pid].regs.r12;
ffff800000808ae0:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000808ae7:	ff ff ff 
ffff800000808aea:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808aee:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808af1:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000808af4:	48 98                	cdqe   
ffff800000808af6:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff800000808afd:	48 01 d0             	add    rax,rdx
ffff800000808b00:	48 8b 80 ec 02 00 00 	mov    rax,QWORD PTR [rax+0x2ec]
ffff800000808b07:	48 89 c2             	mov    rdx,rax
ffff800000808b0a:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000808b0e:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:861
    r->r13=task[pid].regs.r13;
ffff800000808b12:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000808b19:	ff ff ff 
ffff800000808b1c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808b20:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808b23:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000808b26:	48 98                	cdqe   
ffff800000808b28:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff800000808b2f:	48 01 d0             	add    rax,rdx
ffff800000808b32:	48 8b 80 f4 02 00 00 	mov    rax,QWORD PTR [rax+0x2f4]
ffff800000808b39:	48 89 c2             	mov    rdx,rax
ffff800000808b3c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000808b40:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:862
    r->r14=task[pid].regs.r14;
ffff800000808b44:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000808b4b:	ff ff ff 
ffff800000808b4e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808b52:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808b55:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000808b58:	48 98                	cdqe   
ffff800000808b5a:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff800000808b61:	48 01 d0             	add    rax,rdx
ffff800000808b64:	48 8b 80 fc 02 00 00 	mov    rax,QWORD PTR [rax+0x2fc]
ffff800000808b6b:	48 89 c2             	mov    rdx,rax
ffff800000808b6e:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000808b72:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:863
    r->r15=task[pid].regs.r15;
ffff800000808b76:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000808b7d:	ff ff ff 
ffff800000808b80:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808b84:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808b87:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000808b8a:	48 98                	cdqe   
ffff800000808b8c:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff800000808b93:	48 01 d0             	add    rax,rdx
ffff800000808b96:	48 8b 80 04 03 00 00 	mov    rax,QWORD PTR [rax+0x304]
ffff800000808b9d:	48 89 c2             	mov    rdx,rax
ffff800000808ba0:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000808ba4:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:865

    asm volatile("mov %%r10,%0"::"m"(r->rip));
ffff800000808ba8:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000808bac:	4c 89 90 80 00 00 00 	mov    QWORD PTR [rax+0x80],r10
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:867

    task[pid].tss=current->tss;
ffff800000808bb3:	48 b8 90 fe ff ff ff 	movabs rax,0xfffffffffffffe90
ffff800000808bba:	ff ff ff 
ffff800000808bbd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808bc1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808bc4:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff800000808bcb:	ff ff ff 
ffff800000808bce:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000808bd2:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000808bd5:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff800000808bd8:	48 63 d2             	movsxd rdx,edx
ffff800000808bdb:	48 69 d2 34 03 00 00 	imul   rdx,rdx,0x334
ffff800000808be2:	48 01 ca             	add    rdx,rcx
ffff800000808be5:	48 8b b0 d8 01 00 00 	mov    rsi,QWORD PTR [rax+0x1d8]
ffff800000808bec:	48 8b b8 e0 01 00 00 	mov    rdi,QWORD PTR [rax+0x1e0]
ffff800000808bf3:	48 89 b2 d8 01 00 00 	mov    QWORD PTR [rdx+0x1d8],rsi
ffff800000808bfa:	48 89 ba e0 01 00 00 	mov    QWORD PTR [rdx+0x1e0],rdi
ffff800000808c01:	48 8b b0 e8 01 00 00 	mov    rsi,QWORD PTR [rax+0x1e8]
ffff800000808c08:	48 8b b8 f0 01 00 00 	mov    rdi,QWORD PTR [rax+0x1f0]
ffff800000808c0f:	48 89 b2 e8 01 00 00 	mov    QWORD PTR [rdx+0x1e8],rsi
ffff800000808c16:	48 89 ba f0 01 00 00 	mov    QWORD PTR [rdx+0x1f0],rdi
ffff800000808c1d:	48 8b b0 f8 01 00 00 	mov    rsi,QWORD PTR [rax+0x1f8]
ffff800000808c24:	48 8b b8 00 02 00 00 	mov    rdi,QWORD PTR [rax+0x200]
ffff800000808c2b:	48 89 b2 f8 01 00 00 	mov    QWORD PTR [rdx+0x1f8],rsi
ffff800000808c32:	48 89 ba 00 02 00 00 	mov    QWORD PTR [rdx+0x200],rdi
ffff800000808c39:	48 8b b0 08 02 00 00 	mov    rsi,QWORD PTR [rax+0x208]
ffff800000808c40:	48 8b b8 10 02 00 00 	mov    rdi,QWORD PTR [rax+0x210]
ffff800000808c47:	48 89 b2 08 02 00 00 	mov    QWORD PTR [rdx+0x208],rsi
ffff800000808c4e:	48 89 ba 10 02 00 00 	mov    QWORD PTR [rdx+0x210],rdi
ffff800000808c55:	48 8b b0 18 02 00 00 	mov    rsi,QWORD PTR [rax+0x218]
ffff800000808c5c:	48 8b b8 20 02 00 00 	mov    rdi,QWORD PTR [rax+0x220]
ffff800000808c63:	48 89 b2 18 02 00 00 	mov    QWORD PTR [rdx+0x218],rsi
ffff800000808c6a:	48 89 ba 20 02 00 00 	mov    QWORD PTR [rdx+0x220],rdi
ffff800000808c71:	48 8b b0 28 02 00 00 	mov    rsi,QWORD PTR [rax+0x228]
ffff800000808c78:	48 8b b8 30 02 00 00 	mov    rdi,QWORD PTR [rax+0x230]
ffff800000808c7f:	48 89 b2 28 02 00 00 	mov    QWORD PTR [rdx+0x228],rsi
ffff800000808c86:	48 89 ba 30 02 00 00 	mov    QWORD PTR [rdx+0x230],rdi
ffff800000808c8d:	48 8b 88 38 02 00 00 	mov    rcx,QWORD PTR [rax+0x238]
ffff800000808c94:	48 89 8a 38 02 00 00 	mov    QWORD PTR [rdx+0x238],rcx
ffff800000808c9b:	8b 80 40 02 00 00    	mov    eax,DWORD PTR [rax+0x240]
ffff800000808ca1:	89 82 40 02 00 00    	mov    DWORD PTR [rdx+0x240],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:868
    task[pid].stat=TASK_READY;
ffff800000808ca7:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000808cae:	ff ff ff 
ffff800000808cb1:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808cb5:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808cb8:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000808cbb:	48 98                	cdqe   
ffff800000808cbd:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff800000808cc4:	48 01 d0             	add    rax,rdx
ffff800000808cc7:	c7 40 18 02 00 00 00 	mov    DWORD PTR [rax+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:869
    task[pid].parent_pid=cur_proc;
ffff800000808cce:	48 b8 40 fe ff ff ff 	movabs rax,0xfffffffffffffe40
ffff800000808cd5:	ff ff ff 
ffff800000808cd8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808cdc:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000808cde:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000808ce5:	ff ff ff 
ffff800000808ce8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808cec:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000808cef:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000808cf2:	48 98                	cdqe   
ffff800000808cf4:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff800000808cfb:	48 01 c8             	add    rax,rcx
ffff800000808cfe:	89 90 9c 00 00 00    	mov    DWORD PTR [rax+0x9c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:871
    //设置父子关系以及初始化子进程的的list节点
    list_init(&task[pid].node);
ffff800000808d04:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000808d0b:	ff ff ff 
ffff800000808d0e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808d12:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808d15:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000808d18:	48 98                	cdqe   
ffff800000808d1a:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff800000808d21:	48 01 d0             	add    rax,rdx
ffff800000808d24:	48 05 14 03 00 00    	add    rax,0x314
ffff800000808d2a:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff800000808d31:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
ffff800000808d38:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff800000808d3f:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
ffff800000808d46:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff800000808d4d:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff800000808d4e:	90                   	nop
sys_fork():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:872
    task[pid].child_procs=NULL;
ffff800000808d4f:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000808d56:	ff ff ff 
ffff800000808d59:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808d5d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808d60:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000808d63:	48 98                	cdqe   
ffff800000808d65:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff800000808d6c:	48 01 d0             	add    rax,rdx
ffff800000808d6f:	48 c7 80 2c 03 00 00 	mov    QWORD PTR [rax+0x32c],0x0
ffff800000808d76:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:873
    task[pid].node.data=&task[pid];
ffff800000808d7a:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000808d81:	ff ff ff 
ffff800000808d84:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808d88:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000808d8b:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000808d8e:	48 98                	cdqe   
ffff800000808d90:	48 69 d0 34 03 00 00 	imul   rdx,rax,0x334
ffff800000808d97:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000808d9e:	ff ff ff 
ffff800000808da1:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808da5:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff800000808da8:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000808dab:	48 98                	cdqe   
ffff800000808dad:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff800000808db4:	48 01 f0             	add    rax,rsi
ffff800000808db7:	48 01 ca             	add    rdx,rcx
ffff800000808dba:	48 89 90 1c 03 00 00 	mov    QWORD PTR [rax+0x31c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:874
    list_add(current->child_procs,&task[pid].node);
ffff800000808dc1:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000808dc8:	ff ff ff 
ffff800000808dcb:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808dcf:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808dd2:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000808dd5:	48 98                	cdqe   
ffff800000808dd7:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff800000808dde:	48 01 d0             	add    rax,rdx
ffff800000808de1:	48 8d 90 14 03 00 00 	lea    rdx,[rax+0x314]
ffff800000808de8:	48 b8 90 fe ff ff ff 	movabs rax,0xfffffffffffffe90
ffff800000808def:	ff ff ff 
ffff800000808df2:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808df6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808df9:	48 8b 80 2c 03 00 00 	mov    rax,QWORD PTR [rax+0x32c]
ffff800000808e00:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
ffff800000808e04:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:33
    if(entry->next==NULL)
ffff800000808e08:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000808e0c:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000808e10:	48 85 c0             	test   rax,rax
ffff800000808e13:	75 6d                	jne    ffff800000808e82 <sys_fork+0x8db>
ffff800000808e15:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000808e19:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
ffff800000808e1d:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000808e21:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff800000808e28:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000808e2c:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff800000808e30:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000808e37:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff800000808e3b:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000808e42:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
ffff800000808e46:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff800000808e49:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000808e50:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000808e54:	48 85 c0             	test   rax,rax
ffff800000808e57:	74 15                	je     ffff800000808e6e <sys_fork+0x8c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff800000808e59:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000808e60:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000808e64:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
ffff800000808e6b:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:29
    entry->next = new;
ffff800000808e6e:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000808e72:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
ffff800000808e79:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff800000808e7d:	e9 d9 00 00 00       	jmp    ffff800000808f5b <sys_fork+0x9b4>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:36
        struct List* p=entry;
ffff800000808e82:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000808e86:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff800000808e8d:	eb 2e                	jmp    ffff800000808ebd <sys_fork+0x916>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:38
            if(p->data==new->data)
ffff800000808e8f:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000808e96:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff800000808e9a:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000808e9e:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000808ea2:	48 39 c2             	cmp    rdx,rax
ffff800000808ea5:	0f 84 af 00 00 00    	je     ffff800000808f5a <sys_fork+0x9b3>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff800000808eab:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000808eb2:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000808eb6:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
ffff800000808ebd:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000808ec4:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000808ec8:	48 85 c0             	test   rax,rax
ffff800000808ecb:	74 14                	je     ffff800000808ee1 <sys_fork+0x93a>
ffff800000808ecd:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000808ed4:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000808ed8:	48 39 85 70 ff ff ff 	cmp    QWORD PTR [rbp-0x90],rax
ffff800000808edf:	75 ae                	jne    ffff800000808e8f <sys_fork+0x8e8>
ffff800000808ee1:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000808ee8:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
ffff800000808eef:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000808ef3:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff800000808efa:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff800000808f01:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff800000808f05:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff800000808f0c:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff800000808f10:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff800000808f17:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
ffff800000808f1e:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff800000808f21:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff800000808f28:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000808f2c:	48 85 c0             	test   rax,rax
ffff800000808f2f:	74 15                	je     ffff800000808f46 <sys_fork+0x99f>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff800000808f31:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff800000808f38:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000808f3c:	48 8b 95 60 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa0]
ffff800000808f43:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:29
    entry->next = new;
ffff800000808f46:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff800000808f4d:	48 8b 95 60 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa0]
ffff800000808f54:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff800000808f58:	eb 01                	jmp    ffff800000808f5b <sys_fork+0x9b4>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:39
                return;
ffff800000808f5a:	90                   	nop
sys_fork():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:876
    //复制打开文件
    memcpy(task[pid].openf,current->openf,sizeof(struct file*)*MAX_PROC_OPENF);
ffff800000808f5b:	48 b8 90 fe ff ff ff 	movabs rax,0xfffffffffffffe90
ffff800000808f62:	ff ff ff 
ffff800000808f65:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808f69:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808f6c:	48 8d 88 d8 00 00 00 	lea    rcx,[rax+0xd8]
ffff800000808f73:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000808f7a:	ff ff ff 
ffff800000808f7d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808f81:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808f84:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000808f87:	48 98                	cdqe   
ffff800000808f89:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff800000808f90:	48 01 d0             	add    rax,rdx
ffff800000808f93:	48 05 d8 00 00 00    	add    rax,0xd8
ffff800000808f99:	ba 00 01 00 00       	mov    edx,0x100
ffff800000808f9e:	48 89 ce             	mov    rsi,rcx
ffff800000808fa1:	48 89 c7             	mov    rdi,rax
ffff800000808fa4:	49 89 df             	mov    r15,rbx
ffff800000808fa7:	48 b8 27 3e ff ff ff 	movabs rax,0xffffffffffff3e27
ffff800000808fae:	ff ff ff 
ffff800000808fb1:	48 01 d8             	add    rax,rbx
ffff800000808fb4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:877
    task[pid].utime=0;
ffff800000808fb6:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000808fbd:	ff ff ff 
ffff800000808fc0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808fc4:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808fc7:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000808fca:	48 98                	cdqe   
ffff800000808fcc:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff800000808fd3:	48 01 d0             	add    rax,rdx
ffff800000808fd6:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [rax+0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:878
    task[pid].mem_struct=current->mem_struct;
ffff800000808fdd:	48 b8 90 fe ff ff ff 	movabs rax,0xfffffffffffffe90
ffff800000808fe4:	ff ff ff 
ffff800000808fe7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808feb:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000808fee:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000808ff5:	ff ff ff 
ffff800000808ff8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808ffc:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808fff:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000809002:	48 98                	cdqe   
ffff800000809004:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff80000080900b:	48 8d 34 02          	lea    rsi,[rdx+rax*1]
ffff80000080900f:	48 8b 41 28          	mov    rax,QWORD PTR [rcx+0x28]
ffff800000809013:	48 8b 51 30          	mov    rdx,QWORD PTR [rcx+0x30]
ffff800000809017:	48 89 46 28          	mov    QWORD PTR [rsi+0x28],rax
ffff80000080901b:	48 89 56 30          	mov    QWORD PTR [rsi+0x30],rdx
ffff80000080901f:	48 8b 41 38          	mov    rax,QWORD PTR [rcx+0x38]
ffff800000809023:	48 8b 51 40          	mov    rdx,QWORD PTR [rcx+0x40]
ffff800000809027:	48 89 46 38          	mov    QWORD PTR [rsi+0x38],rax
ffff80000080902b:	48 89 56 40          	mov    QWORD PTR [rsi+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:883
    //根据是子进程还是父进程设置返回值的不同

    //TODO:设置新堆栈
    //复制父进程的内存映射到子进程，然后重新映射并复制子进程的堆栈和数据段
    copy_mmap(current,&task[pid]);
ffff80000080902f:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000809036:	ff ff ff 
ffff800000809039:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080903d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000809040:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000809043:	48 98                	cdqe   
ffff800000809045:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff80000080904c:	48 01 c2             	add    rdx,rax
ffff80000080904f:	48 b8 90 fe ff ff ff 	movabs rax,0xfffffffffffffe90
ffff800000809056:	ff ff ff 
ffff800000809059:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080905d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809060:	48 89 d6             	mov    rsi,rdx
ffff800000809063:	48 89 c7             	mov    rdi,rax
ffff800000809066:	49 89 df             	mov    r15,rbx
ffff800000809069:	48 b8 56 a4 fe ff ff 	movabs rax,0xfffffffffffea456
ffff800000809070:	ff ff ff 
ffff800000809073:	48 01 d8             	add    rax,rbx
ffff800000809076:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:887
    //复制完毕，开始更改堆栈
    //栈
    //首先获取物理内存，然后临时映射到一个地方，然后拷贝数据，再解除映射，再映射到目标进程的页表。
    addr_t stk=task[pid].mem_struct.stack_top-PAGE_4K_SIZE;
ffff800000809078:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff80000080907f:	ff ff ff 
ffff800000809082:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809086:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000809089:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080908c:	48 98                	cdqe   
ffff80000080908e:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff800000809095:	48 01 d0             	add    rax,rdx
ffff800000809098:	8b 40 34             	mov    eax,DWORD PTR [rax+0x34]
ffff80000080909b:	2d 00 10 00 00       	sub    eax,0x1000
ffff8000008090a0:	48 98                	cdqe   
ffff8000008090a2:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:888
    addr_t tmpla=KNL_BASE+0x80000000;
ffff8000008090a6:	48 b8 00 00 00 80 00 	movabs rax,0xffff800080000000
ffff8000008090ad:	80 ff ff 
ffff8000008090b0:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:889
    for(;stk>=task[pid].mem_struct.stack_bottom;stk-=PAGE_4K_SIZE){
ffff8000008090b4:	e9 d1 00 00 00       	jmp    ffff80000080918a <sys_fork+0xbe3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:890 (discriminator 2)
        addr_t new_stkpg= pmalloc();
ffff8000008090b9:	49 89 df             	mov    r15,rbx
ffff8000008090bc:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008090c1:	48 ba f2 36 fe ff ff 	movabs rdx,0xfffffffffffe36f2
ffff8000008090c8:	ff ff ff 
ffff8000008090cb:	48 01 da             	add    rdx,rbx
ffff8000008090ce:	ff d2                	call   rdx
ffff8000008090d0:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:891 (discriminator 2)
        smmap(new_stkpg,tmpla,PAGE_PRESENT|PAGE_RWX,current->pml4);
ffff8000008090d4:	48 b8 90 fe ff ff ff 	movabs rax,0xfffffffffffffe90
ffff8000008090db:	ff ff ff 
ffff8000008090de:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008090e2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008090e5:	48 8b 90 c0 00 00 00 	mov    rdx,QWORD PTR [rax+0xc0]
ffff8000008090ec:	48 8b 75 b8          	mov    rsi,QWORD PTR [rbp-0x48]
ffff8000008090f0:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008090f4:	48 89 d1             	mov    rcx,rdx
ffff8000008090f7:	ba 03 00 00 00       	mov    edx,0x3
ffff8000008090fc:	48 89 c7             	mov    rdi,rax
ffff8000008090ff:	49 89 df             	mov    r15,rbx
ffff800000809102:	48 b8 98 27 fe ff ff 	movabs rax,0xfffffffffffe2798
ffff800000809109:	ff ff ff 
ffff80000080910c:	48 01 d8             	add    rax,rbx
ffff80000080910f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:892 (discriminator 2)
        memcpy(tmpla,stk,PAGE_4K_SIZE);//把当前进程的栈空间复制到新栈里面
ffff800000809111:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff800000809115:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000809119:	ba 00 10 00 00       	mov    edx,0x1000
ffff80000080911e:	48 89 ce             	mov    rsi,rcx
ffff800000809121:	48 89 c7             	mov    rdi,rax
ffff800000809124:	49 89 df             	mov    r15,rbx
ffff800000809127:	48 b8 27 3e ff ff ff 	movabs rax,0xffffffffffff3e27
ffff80000080912e:	ff ff ff 
ffff800000809131:	48 01 d8             	add    rax,rbx
ffff800000809134:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:894 (discriminator 2)
        //把新的页面映射到进程页表里
        smmap(new_stkpg,stk,PAGE_PRESENT|PAGE_RWX|PAGE_FOR_ALL,task[pid].pml4);
ffff800000809136:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff80000080913d:	ff ff ff 
ffff800000809140:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809144:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000809147:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080914a:	48 98                	cdqe   
ffff80000080914c:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff800000809153:	48 01 d0             	add    rax,rdx
ffff800000809156:	48 8b 90 c0 00 00 00 	mov    rdx,QWORD PTR [rax+0xc0]
ffff80000080915d:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
ffff800000809161:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000809165:	48 89 d1             	mov    rcx,rdx
ffff800000809168:	ba 07 00 00 00       	mov    edx,0x7
ffff80000080916d:	48 89 c7             	mov    rdi,rax
ffff800000809170:	49 89 df             	mov    r15,rbx
ffff800000809173:	48 b8 98 27 fe ff ff 	movabs rax,0xfffffffffffe2798
ffff80000080917a:	ff ff ff 
ffff80000080917d:	48 01 d8             	add    rax,rbx
ffff800000809180:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:889 (discriminator 2)
    for(;stk>=task[pid].mem_struct.stack_bottom;stk-=PAGE_4K_SIZE){
ffff800000809182:	48 81 6d e8 00 10 00 	sub    QWORD PTR [rbp-0x18],0x1000
ffff800000809189:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:889 (discriminator 1)
ffff80000080918a:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000809191:	ff ff ff 
ffff800000809194:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809198:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080919b:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080919e:	48 98                	cdqe   
ffff8000008091a0:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff8000008091a7:	48 01 d0             	add    rax,rdx
ffff8000008091aa:	8b 40 30             	mov    eax,DWORD PTR [rax+0x30]
ffff8000008091ad:	48 98                	cdqe   
ffff8000008091af:	48 39 45 e8          	cmp    QWORD PTR [rbp-0x18],rax
ffff8000008091b3:	0f 83 00 ff ff ff    	jae    ffff8000008090b9 <sys_fork+0xb12>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:897
    }
    //中断使用的栈空间
    addr_t intstk=INT_STACK_TOP-PAGE_4K_SIZE;
ffff8000008091b9:	48 b8 00 f0 7f 00 00 	movabs rax,0xffff8000007ff000
ffff8000008091c0:	80 ff ff 
ffff8000008091c3:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:898
    int f=1;
ffff8000008091c7:	c7 45 dc 01 00 00 00 	mov    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:899
    for(;intstk>=INT_STACK_BASE;intstk-=PAGE_4K_SIZE){
ffff8000008091ce:	e9 f7 00 00 00       	jmp    ffff8000008092ca <sys_fork+0xd23>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:900
        addr_t new_stkpg= pmalloc();
ffff8000008091d3:	49 89 df             	mov    r15,rbx
ffff8000008091d6:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008091db:	48 ba f2 36 fe ff ff 	movabs rdx,0xfffffffffffe36f2
ffff8000008091e2:	ff ff ff 
ffff8000008091e5:	48 01 da             	add    rdx,rbx
ffff8000008091e8:	ff d2                	call   rdx
ffff8000008091ea:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:901
        smmap(new_stkpg,tmpla,PAGE_PRESENT|PAGE_RWX,current->pml4);
ffff8000008091ee:	48 b8 90 fe ff ff ff 	movabs rax,0xfffffffffffffe90
ffff8000008091f5:	ff ff ff 
ffff8000008091f8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008091fc:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008091ff:	48 8b 90 c0 00 00 00 	mov    rdx,QWORD PTR [rax+0xc0]
ffff800000809206:	48 8b 75 b8          	mov    rsi,QWORD PTR [rbp-0x48]
ffff80000080920a:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080920e:	48 89 d1             	mov    rcx,rdx
ffff800000809211:	ba 03 00 00 00       	mov    edx,0x3
ffff800000809216:	48 89 c7             	mov    rdi,rax
ffff800000809219:	49 89 df             	mov    r15,rbx
ffff80000080921c:	48 b8 98 27 fe ff ff 	movabs rax,0xfffffffffffe2798
ffff800000809223:	ff ff ff 
ffff800000809226:	48 01 d8             	add    rax,rbx
ffff800000809229:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:902
        memcpy(tmpla,intstk,PAGE_4K_SIZE);//把当前进程的栈空间复制到新栈里面
ffff80000080922b:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
ffff80000080922f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000809233:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000809238:	48 89 ce             	mov    rsi,rcx
ffff80000080923b:	48 89 c7             	mov    rdi,rax
ffff80000080923e:	49 89 df             	mov    r15,rbx
ffff800000809241:	48 b8 27 3e ff ff ff 	movabs rax,0xffffffffffff3e27
ffff800000809248:	ff ff ff 
ffff80000080924b:	48 01 d8             	add    rax,rbx
ffff80000080924e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:903
        if(f){
ffff800000809250:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
ffff800000809254:	74 20                	je     ffff800000809276 <sys_fork+0xccf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:904
            f=0;
ffff800000809256:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:905
            addr_t *raxp=new_stkpg+PAGE_4K_SIZE-56;//指向中断堆栈，里面存着rax的值
ffff80000080925d:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000809261:	48 05 c8 0f 00 00    	add    rax,0xfc8
ffff800000809267:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:906
            *raxp=0;//这样进程切换到子进程的done标签，从时钟中断返回弹出堆栈的时候rax弹出来的就是0，成为返回值。
ffff80000080926b:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080926f:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:909
        }
        //把新的页面映射到进程页表里
        smmap(new_stkpg,intstk,PAGE_PRESENT|PAGE_RWX|PAGE_FOR_ALL,task[pid].pml4);
ffff800000809276:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff80000080927d:	ff ff ff 
ffff800000809280:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809284:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000809287:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080928a:	48 98                	cdqe   
ffff80000080928c:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff800000809293:	48 01 d0             	add    rax,rdx
ffff800000809296:	48 8b 90 c0 00 00 00 	mov    rdx,QWORD PTR [rax+0xc0]
ffff80000080929d:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff8000008092a1:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008092a5:	48 89 d1             	mov    rcx,rdx
ffff8000008092a8:	ba 07 00 00 00       	mov    edx,0x7
ffff8000008092ad:	48 89 c7             	mov    rdi,rax
ffff8000008092b0:	49 89 df             	mov    r15,rbx
ffff8000008092b3:	48 b8 98 27 fe ff ff 	movabs rax,0xfffffffffffe2798
ffff8000008092ba:	ff ff ff 
ffff8000008092bd:	48 01 d8             	add    rax,rbx
ffff8000008092c0:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:899
    for(;intstk>=INT_STACK_BASE;intstk-=PAGE_4K_SIZE){
ffff8000008092c2:	48 81 6d e0 00 10 00 	sub    QWORD PTR [rbp-0x20],0x1000
ffff8000008092c9:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:899 (discriminator 1)
ffff8000008092ca:	48 b8 ff ef 7f 00 00 	movabs rax,0xffff8000007fefff
ffff8000008092d1:	80 ff ff 
ffff8000008092d4:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
ffff8000008092d8:	0f 87 f5 fe ff ff    	ja     ffff8000008091d3 <sys_fork+0xc2c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:912
    }
    //堆
    addr_t hp=task[pid].mem_struct.heap_top-PAGE_4K_SIZE;
ffff8000008092de:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff8000008092e5:	ff ff ff 
ffff8000008092e8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008092ec:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008092ef:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff8000008092f2:	48 98                	cdqe   
ffff8000008092f4:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff8000008092fb:	48 01 d0             	add    rax,rdx
ffff8000008092fe:	8b 40 2c             	mov    eax,DWORD PTR [rax+0x2c]
ffff800000809301:	2d 00 10 00 00       	sub    eax,0x1000
ffff800000809306:	48 98                	cdqe   
ffff800000809308:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:913
    for(;hp>=task[pid].mem_struct.heap_base;hp-=PAGE_4K_SIZE){
ffff80000080930c:	e9 d1 00 00 00       	jmp    ffff8000008093e2 <sys_fork+0xe3b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:914 (discriminator 2)
        addr_t new_hppg= pmalloc();
ffff800000809311:	49 89 df             	mov    r15,rbx
ffff800000809314:	b8 00 00 00 00       	mov    eax,0x0
ffff800000809319:	48 ba f2 36 fe ff ff 	movabs rdx,0xfffffffffffe36f2
ffff800000809320:	ff ff ff 
ffff800000809323:	48 01 da             	add    rdx,rbx
ffff800000809326:	ff d2                	call   rdx
ffff800000809328:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:915 (discriminator 2)
        smmap(new_hppg,tmpla,PAGE_PRESENT|PAGE_RWX,current->pml4);
ffff80000080932c:	48 b8 90 fe ff ff ff 	movabs rax,0xfffffffffffffe90
ffff800000809333:	ff ff ff 
ffff800000809336:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080933a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080933d:	48 8b 90 c0 00 00 00 	mov    rdx,QWORD PTR [rax+0xc0]
ffff800000809344:	48 8b 75 b8          	mov    rsi,QWORD PTR [rbp-0x48]
ffff800000809348:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080934c:	48 89 d1             	mov    rcx,rdx
ffff80000080934f:	ba 03 00 00 00       	mov    edx,0x3
ffff800000809354:	48 89 c7             	mov    rdi,rax
ffff800000809357:	49 89 df             	mov    r15,rbx
ffff80000080935a:	48 b8 98 27 fe ff ff 	movabs rax,0xfffffffffffe2798
ffff800000809361:	ff ff ff 
ffff800000809364:	48 01 d8             	add    rax,rbx
ffff800000809367:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:916 (discriminator 2)
        memcpy(tmpla,hp,PAGE_4K_SIZE);//把当前进程的栈空间复制到新栈里面
ffff800000809369:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffff80000080936d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000809371:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000809376:	48 89 ce             	mov    rsi,rcx
ffff800000809379:	48 89 c7             	mov    rdi,rax
ffff80000080937c:	49 89 df             	mov    r15,rbx
ffff80000080937f:	48 b8 27 3e ff ff ff 	movabs rax,0xffffffffffff3e27
ffff800000809386:	ff ff ff 
ffff800000809389:	48 01 d8             	add    rax,rbx
ffff80000080938c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:918 (discriminator 2)
        //把新的页面映射到进程页表里
        smmap(new_hppg,hp,PAGE_PRESENT|PAGE_RWX|PAGE_FOR_ALL,task[pid].pml4);
ffff80000080938e:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000809395:	ff ff ff 
ffff800000809398:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080939c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080939f:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff8000008093a2:	48 98                	cdqe   
ffff8000008093a4:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff8000008093ab:	48 01 d0             	add    rax,rdx
ffff8000008093ae:	48 8b 90 c0 00 00 00 	mov    rdx,QWORD PTR [rax+0xc0]
ffff8000008093b5:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff8000008093b9:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff8000008093bd:	48 89 d1             	mov    rcx,rdx
ffff8000008093c0:	ba 07 00 00 00       	mov    edx,0x7
ffff8000008093c5:	48 89 c7             	mov    rdi,rax
ffff8000008093c8:	49 89 df             	mov    r15,rbx
ffff8000008093cb:	48 b8 98 27 fe ff ff 	movabs rax,0xfffffffffffe2798
ffff8000008093d2:	ff ff ff 
ffff8000008093d5:	48 01 d8             	add    rax,rbx
ffff8000008093d8:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:913 (discriminator 2)
    for(;hp>=task[pid].mem_struct.heap_base;hp-=PAGE_4K_SIZE){
ffff8000008093da:	48 81 6d d0 00 10 00 	sub    QWORD PTR [rbp-0x30],0x1000
ffff8000008093e1:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:913 (discriminator 1)
ffff8000008093e2:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff8000008093e9:	ff ff ff 
ffff8000008093ec:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008093f0:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008093f3:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff8000008093f6:	48 98                	cdqe   
ffff8000008093f8:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff8000008093ff:	48 01 d0             	add    rax,rdx
ffff800000809402:	8b 40 28             	mov    eax,DWORD PTR [rax+0x28]
ffff800000809405:	48 98                	cdqe   
ffff800000809407:	48 39 45 d0          	cmp    QWORD PTR [rbp-0x30],rax
ffff80000080940b:	0f 83 00 ff ff ff    	jae    ffff800000809311 <sys_fork+0xd6a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:920
    }
    smmap(0,tmpla,0,current->pml4);//解除映射
ffff800000809411:	48 b8 90 fe ff ff ff 	movabs rax,0xfffffffffffffe90
ffff800000809418:	ff ff ff 
ffff80000080941b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080941f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809422:	48 8b 90 c0 00 00 00 	mov    rdx,QWORD PTR [rax+0xc0]
ffff800000809429:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080942d:	48 89 d1             	mov    rcx,rdx
ffff800000809430:	ba 00 00 00 00       	mov    edx,0x0
ffff800000809435:	48 89 c6             	mov    rsi,rax
ffff800000809438:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080943d:	49 89 df             	mov    r15,rbx
ffff800000809440:	48 b8 98 27 fe ff ff 	movabs rax,0xfffffffffffe2798
ffff800000809447:	ff ff ff 
ffff80000080944a:	48 01 d8             	add    rax,rbx
ffff80000080944d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:922
    //父进程运行到这里
    return pid;
ffff80000080944f:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:923
}
ffff800000809452:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
ffff800000809459:	5b                   	pop    rbx
ffff80000080945a:	41 5f                	pop    r15
ffff80000080945c:	5d                   	pop    rbp
ffff80000080945d:	c3                   	ret    

ffff80000080945e <release_mmap>:
release_mmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:925
//释放进程页表映射的内存，内核空间除外。
void release_mmap(struct process* p){
ffff80000080945e:	f3 0f 1e fa          	endbr64 
ffff800000809462:	55                   	push   rbp
ffff800000809463:	48 89 e5             	mov    rbp,rsp
ffff800000809466:	41 57                	push   r15
ffff800000809468:	53                   	push   rbx
ffff800000809469:	48 83 ec 50          	sub    rsp,0x50
ffff80000080946d:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080946d <release_mmap+0xf>
ffff800000809474:	49 bb cb 5e 01 00 00 	movabs r11,0x15ecb
ffff80000080947b:	00 00 00 
ffff80000080947e:	4c 01 db             	add    rbx,r11
ffff800000809481:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:926
    page_item * pml4p=p->pml4;
ffff800000809485:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000809489:	48 8b 80 c0 00 00 00 	mov    rax,QWORD PTR [rax+0xc0]
ffff800000809490:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:928
    //复制pdpt
    page_item *pml4e= pml4p;
ffff800000809494:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000809498:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:929
    for(int i=0;i<512;i++)
ffff80000080949c:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff8000008094a3:	e9 ce 02 00 00       	jmp    ffff800000809776 <release_mmap+0x318>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:931
    {
        if(pml4e[i]&PAGE_PRESENT){
ffff8000008094a8:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008094ab:	48 98                	cdqe   
ffff8000008094ad:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008094b4:	00 
ffff8000008094b5:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008094b9:	48 01 d0             	add    rax,rdx
ffff8000008094bc:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008094bf:	83 e0 01             	and    eax,0x1
ffff8000008094c2:	48 85 c0             	test   rax,rax
ffff8000008094c5:	0f 84 a7 02 00 00    	je     ffff800000809772 <release_mmap+0x314>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:932
            page_item *pdpte=pml4e[i]&PAGE_4K_MASK;
ffff8000008094cb:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008094ce:	48 98                	cdqe   
ffff8000008094d0:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008094d7:	00 
ffff8000008094d8:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008094dc:	48 01 d0             	add    rax,rdx
ffff8000008094df:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008094e2:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
ffff8000008094e8:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:933
            int j=i==0?1:0;//低1GB的空间不释放（内核空间）
ffff8000008094ec:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff8000008094f0:	0f 94 c0             	sete   al
ffff8000008094f3:	0f b6 c0             	movzx  eax,al
ffff8000008094f6:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:934
            for(;j<512;j++)
ffff8000008094f9:	e9 35 02 00 00       	jmp    ffff800000809733 <release_mmap+0x2d5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:936
            {
                if(pdpte[j]&PAGE_PRESENT&&!(pdpte[j]&PDPTE_1GB)){
ffff8000008094fe:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000809501:	48 98                	cdqe   
ffff800000809503:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080950a:	00 
ffff80000080950b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080950f:	48 01 d0             	add    rax,rdx
ffff800000809512:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809515:	83 e0 01             	and    eax,0x1
ffff800000809518:	48 85 c0             	test   rax,rax
ffff80000080951b:	0f 84 0e 02 00 00    	je     ffff80000080972f <release_mmap+0x2d1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:936 (discriminator 1)
ffff800000809521:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000809524:	48 98                	cdqe   
ffff800000809526:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080952d:	00 
ffff80000080952e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000809532:	48 01 d0             	add    rax,rdx
ffff800000809535:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809538:	25 80 00 00 00       	and    eax,0x80
ffff80000080953d:	48 85 c0             	test   rax,rax
ffff800000809540:	0f 85 e9 01 00 00    	jne    ffff80000080972f <release_mmap+0x2d1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:937
                    page_item *pde=pdpte[j]&PAGE_4K_MASK;
ffff800000809546:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000809549:	48 98                	cdqe   
ffff80000080954b:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000809552:	00 
ffff800000809553:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000809557:	48 01 d0             	add    rax,rdx
ffff80000080955a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080955d:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
ffff800000809563:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:938
                    for(int k=0;k<512;k++)
ffff800000809567:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff80000080956e:	e9 7d 01 00 00       	jmp    ffff8000008096f0 <release_mmap+0x292>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:940
                    {
                        if(pde[k]&PAGE_PRESENT&&!(pde[k]&PDE_4MB)){
ffff800000809573:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000809576:	48 98                	cdqe   
ffff800000809578:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080957f:	00 
ffff800000809580:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000809584:	48 01 d0             	add    rax,rdx
ffff800000809587:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080958a:	83 e0 01             	and    eax,0x1
ffff80000080958d:	48 85 c0             	test   rax,rax
ffff800000809590:	0f 84 e1 00 00 00    	je     ffff800000809677 <release_mmap+0x219>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:940 (discriminator 1)
ffff800000809596:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000809599:	48 98                	cdqe   
ffff80000080959b:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008095a2:	00 
ffff8000008095a3:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008095a7:	48 01 d0             	add    rax,rdx
ffff8000008095aa:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008095ad:	25 80 00 00 00       	and    eax,0x80
ffff8000008095b2:	48 85 c0             	test   rax,rax
ffff8000008095b5:	0f 85 bc 00 00 00    	jne    ffff800000809677 <release_mmap+0x219>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:941
                            page_item *pte=pde[k]&PAGE_4K_MASK;
ffff8000008095bb:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008095be:	48 98                	cdqe   
ffff8000008095c0:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008095c7:	00 
ffff8000008095c8:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008095cc:	48 01 d0             	add    rax,rdx
ffff8000008095cf:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008095d2:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
ffff8000008095d8:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:942
                            for(int l=0;l<512;l++){
ffff8000008095dc:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff8000008095e3:	eb 55                	jmp    ffff80000080963a <release_mmap+0x1dc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:943
                                if(pte[l]&PAGE_PRESENT){
ffff8000008095e5:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff8000008095e8:	48 98                	cdqe   
ffff8000008095ea:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008095f1:	00 
ffff8000008095f2:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008095f6:	48 01 d0             	add    rax,rdx
ffff8000008095f9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008095fc:	83 e0 01             	and    eax,0x1
ffff8000008095ff:	48 85 c0             	test   rax,rax
ffff800000809602:	74 32                	je     ffff800000809636 <release_mmap+0x1d8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:946
                                    //释放申请的物理内存
                                    //TODO:这里有一个问题：目前fork时候堆栈空间使用的是vmalloc内存，这样的话free_page是释放不了的。
                                    free_page(pte[l]&PAGE_4K_MASK);
ffff800000809604:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000809607:	48 98                	cdqe   
ffff800000809609:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000809610:	00 
ffff800000809611:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000809615:	48 01 d0             	add    rax,rdx
ffff800000809618:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080961b:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
ffff800000809621:	48 89 c7             	mov    rdi,rax
ffff800000809624:	49 89 df             	mov    r15,rbx
ffff800000809627:	48 b8 58 37 fe ff ff 	movabs rax,0xfffffffffffe3758
ffff80000080962e:	ff ff ff 
ffff800000809631:	48 01 d8             	add    rax,rbx
ffff800000809634:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:942 (discriminator 2)
                            for(int l=0;l<512;l++){
ffff800000809636:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:942 (discriminator 1)
ffff80000080963a:	81 7d e0 ff 01 00 00 	cmp    DWORD PTR [rbp-0x20],0x1ff
ffff800000809641:	7e a2                	jle    ffff8000008095e5 <release_mmap+0x187>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:950
                                }
                            }
                            //里面的项释放完了，这一项指向的vmalloc内存可以释放了
                            kmfree(pde[k] & PAGE_4K_MASK);
ffff800000809643:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000809646:	48 98                	cdqe   
ffff800000809648:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080964f:	00 
ffff800000809650:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000809654:	48 01 d0             	add    rax,rdx
ffff800000809657:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080965a:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
ffff800000809660:	48 89 c7             	mov    rdi,rax
ffff800000809663:	49 89 df             	mov    r15,rbx
ffff800000809666:	48 b8 82 2f fe ff ff 	movabs rax,0xfffffffffffe2f82
ffff80000080966d:	ff ff ff 
ffff800000809670:	48 01 d8             	add    rax,rbx
ffff800000809673:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:940
                        if(pde[k]&PAGE_PRESENT&&!(pde[k]&PDE_4MB)){
ffff800000809675:	eb 75                	jmp    ffff8000008096ec <release_mmap+0x28e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:951
                        }else if((pde[k]&PAGE_PRESENT)&&(pde[k]&PDE_4MB)){
ffff800000809677:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080967a:	48 98                	cdqe   
ffff80000080967c:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000809683:	00 
ffff800000809684:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000809688:	48 01 d0             	add    rax,rdx
ffff80000080968b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080968e:	83 e0 01             	and    eax,0x1
ffff800000809691:	48 85 c0             	test   rax,rax
ffff800000809694:	74 56                	je     ffff8000008096ec <release_mmap+0x28e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:951 (discriminator 1)
ffff800000809696:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000809699:	48 98                	cdqe   
ffff80000080969b:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008096a2:	00 
ffff8000008096a3:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008096a7:	48 01 d0             	add    rax,rdx
ffff8000008096aa:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008096ad:	25 80 00 00 00       	and    eax,0x80
ffff8000008096b2:	48 85 c0             	test   rax,rax
ffff8000008096b5:	74 35                	je     ffff8000008096ec <release_mmap+0x28e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:953
                            //释放2MB页
                            free_pages_at(pde[k]&PAGE_4K_MASK,512);
ffff8000008096b7:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008096ba:	48 98                	cdqe   
ffff8000008096bc:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008096c3:	00 
ffff8000008096c4:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008096c8:	48 01 d0             	add    rax,rdx
ffff8000008096cb:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008096ce:	25 00 f0 ff ff       	and    eax,0xfffff000
ffff8000008096d3:	be 00 02 00 00       	mov    esi,0x200
ffff8000008096d8:	89 c7                	mov    edi,eax
ffff8000008096da:	49 89 df             	mov    r15,rbx
ffff8000008096dd:	48 b8 0a 38 fe ff ff 	movabs rax,0xfffffffffffe380a
ffff8000008096e4:	ff ff ff 
ffff8000008096e7:	48 01 d8             	add    rax,rbx
ffff8000008096ea:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:938 (discriminator 2)
                    for(int k=0;k<512;k++)
ffff8000008096ec:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:938 (discriminator 1)
ffff8000008096f0:	81 7d e4 ff 01 00 00 	cmp    DWORD PTR [rbp-0x1c],0x1ff
ffff8000008096f7:	0f 8e 76 fe ff ff    	jle    ffff800000809573 <release_mmap+0x115>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:957
                        }
                    }
                    //这一页pde的内容释放完了，这一项指向的vmalloc可以释放了
                    kmfree(pdpte[j] & PAGE_4K_MASK);
ffff8000008096fd:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000809700:	48 98                	cdqe   
ffff800000809702:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000809709:	00 
ffff80000080970a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080970e:	48 01 d0             	add    rax,rdx
ffff800000809711:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809714:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
ffff80000080971a:	48 89 c7             	mov    rdi,rax
ffff80000080971d:	49 89 df             	mov    r15,rbx
ffff800000809720:	48 b8 82 2f fe ff ff 	movabs rax,0xfffffffffffe2f82
ffff800000809727:	ff ff ff 
ffff80000080972a:	48 01 d8             	add    rax,rbx
ffff80000080972d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:934
            for(;j<512;j++)
ffff80000080972f:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:934 (discriminator 1)
ffff800000809733:	81 7d e8 ff 01 00 00 	cmp    DWORD PTR [rbp-0x18],0x1ff
ffff80000080973a:	0f 8e be fd ff ff    	jle    ffff8000008094fe <release_mmap+0xa0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:962
                }//1GB先不写，目前还没有初始化之后动态申请1GB页的

            }
            //这一页pdpte的内容释放完了，这一项指向的vmalloc可以释放了
            kmfree(pml4e[i] & PAGE_4K_MASK);
ffff800000809740:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000809743:	48 98                	cdqe   
ffff800000809745:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080974c:	00 
ffff80000080974d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000809751:	48 01 d0             	add    rax,rdx
ffff800000809754:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809757:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
ffff80000080975d:	48 89 c7             	mov    rdi,rax
ffff800000809760:	49 89 df             	mov    r15,rbx
ffff800000809763:	48 b8 82 2f fe ff ff 	movabs rax,0xfffffffffffe2f82
ffff80000080976a:	ff ff ff 
ffff80000080976d:	48 01 d8             	add    rax,rbx
ffff800000809770:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:929 (discriminator 2)
    for(int i=0;i<512;i++)
ffff800000809772:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:929 (discriminator 1)
ffff800000809776:	81 7d ec ff 01 00 00 	cmp    DWORD PTR [rbp-0x14],0x1ff
ffff80000080977d:	0f 8e 25 fd ff ff    	jle    ffff8000008094a8 <release_mmap+0x4a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:965
        }
    }
}
ffff800000809783:	90                   	nop
ffff800000809784:	90                   	nop
ffff800000809785:	48 83 c4 50          	add    rsp,0x50
ffff800000809789:	5b                   	pop    rbx
ffff80000080978a:	41 5f                	pop    r15
ffff80000080978c:	5d                   	pop    rbp
ffff80000080978d:	c3                   	ret    

ffff80000080978e <copy_mmap>:
copy_mmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:966
void copy_mmap(struct process* from, struct process *to){
ffff80000080978e:	f3 0f 1e fa          	endbr64 
ffff800000809792:	55                   	push   rbp
ffff800000809793:	48 89 e5             	mov    rbp,rsp
ffff800000809796:	41 57                	push   r15
ffff800000809798:	53                   	push   rbx
ffff800000809799:	48 83 ec 60          	sub    rsp,0x60
ffff80000080979d:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080979d <copy_mmap+0xf>
ffff8000008097a4:	49 bb 9b 5b 01 00 00 	movabs r11,0x15b9b
ffff8000008097ab:	00 00 00 
ffff8000008097ae:	4c 01 db             	add    rbx,r11
ffff8000008097b1:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
ffff8000008097b5:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:967
    page_item * pml4p= kmalloc();
ffff8000008097b9:	49 89 df             	mov    r15,rbx
ffff8000008097bc:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008097c1:	48 ba 13 2c fe ff ff 	movabs rdx,0xfffffffffffe2c13
ffff8000008097c8:	ff ff ff 
ffff8000008097cb:	48 01 da             	add    rdx,rbx
ffff8000008097ce:	ff d2                	call   rdx
ffff8000008097d0:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:968
    memcpy(pml4p, (unsigned char *) ((addr_t) from->pml4 | KNL_BASE), PAGE_4K_SIZE);//复制pml4
ffff8000008097d4:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008097d8:	48 8b 80 c0 00 00 00 	mov    rax,QWORD PTR [rax+0xc0]
ffff8000008097df:	48 89 c2             	mov    rdx,rax
ffff8000008097e2:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff8000008097e9:	80 ff ff 
ffff8000008097ec:	48 09 d0             	or     rax,rdx
ffff8000008097ef:	48 89 c1             	mov    rcx,rax
ffff8000008097f2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008097f6:	ba 00 10 00 00       	mov    edx,0x1000
ffff8000008097fb:	48 89 ce             	mov    rsi,rcx
ffff8000008097fe:	48 89 c7             	mov    rdi,rax
ffff800000809801:	49 89 df             	mov    r15,rbx
ffff800000809804:	48 b8 27 3e ff ff ff 	movabs rax,0xffffffffffff3e27
ffff80000080980b:	ff ff ff 
ffff80000080980e:	48 01 d8             	add    rax,rbx
ffff800000809811:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:969
    to->regs.cr3=pml4p;
ffff800000809813:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000809817:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080981b:	48 89 90 44 02 00 00 	mov    QWORD PTR [rax+0x244],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:970
    to->pml4=pml4p;
ffff800000809822:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000809826:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080982a:	48 89 90 c0 00 00 00 	mov    QWORD PTR [rax+0xc0],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:973
    //复制pdpt

    page_item *pml4e= pml4p;
ffff800000809831:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000809835:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:974
    for(int i=0;i<512;i++)
ffff800000809839:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000809840:	e9 4c 03 00 00       	jmp    ffff800000809b91 <copy_mmap+0x403>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:976
    {
        if(pml4e[i]&PAGE_PRESENT){
ffff800000809845:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000809848:	48 98                	cdqe   
ffff80000080984a:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000809851:	00 
ffff800000809852:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000809856:	48 01 d0             	add    rax,rdx
ffff800000809859:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080985c:	83 e0 01             	and    eax,0x1
ffff80000080985f:	48 85 c0             	test   rax,rax
ffff800000809862:	0f 84 25 03 00 00    	je     ffff800000809b8d <copy_mmap+0x3ff>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:977
            addr_t old_data=pml4e[i];//旧的数据，里面保存了属性和要拷贝的数据的地址
ffff800000809868:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080986b:	48 98                	cdqe   
ffff80000080986d:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000809874:	00 
ffff800000809875:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000809879:	48 01 d0             	add    rax,rdx
ffff80000080987c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080987f:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:978
            pml4e[i]= kmalloc() | (old_data & ~PAGE_4K_MASK);
ffff800000809883:	49 89 df             	mov    r15,rbx
ffff800000809886:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080988b:	48 ba 13 2c fe ff ff 	movabs rdx,0xfffffffffffe2c13
ffff800000809892:	ff ff ff 
ffff800000809895:	48 01 da             	add    rdx,rbx
ffff800000809898:	ff d2                	call   rdx
ffff80000080989a:	48 89 c2             	mov    rdx,rax
ffff80000080989d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008098a1:	25 ff 0f 00 00       	and    eax,0xfff
ffff8000008098a6:	48 89 c1             	mov    rcx,rax
ffff8000008098a9:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008098ac:	48 98                	cdqe   
ffff8000008098ae:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
ffff8000008098b5:	00 
ffff8000008098b6:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008098ba:	48 01 f0             	add    rax,rsi
ffff8000008098bd:	48 09 ca             	or     rdx,rcx
ffff8000008098c0:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:979
            memcpy(pml4e[i]&PAGE_4K_MASK,old_data&PAGE_4K_MASK|KNL_BASE,PAGE_4K_SIZE);//把老的数据拷贝到新的页面里
ffff8000008098c3:	48 b8 00 f0 ff ff ff 	movabs rax,0x7ffffffff000
ffff8000008098ca:	7f 00 00 
ffff8000008098cd:	48 23 45 c8          	and    rax,QWORD PTR [rbp-0x38]
ffff8000008098d1:	48 ba 00 00 00 00 00 	movabs rdx,0xffff800000000000
ffff8000008098d8:	80 ff ff 
ffff8000008098db:	48 09 d0             	or     rax,rdx
ffff8000008098de:	48 89 c1             	mov    rcx,rax
ffff8000008098e1:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008098e4:	48 98                	cdqe   
ffff8000008098e6:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008098ed:	00 
ffff8000008098ee:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008098f2:	48 01 d0             	add    rax,rdx
ffff8000008098f5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008098f8:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
ffff8000008098fe:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000809903:	48 89 ce             	mov    rsi,rcx
ffff800000809906:	48 89 c7             	mov    rdi,rax
ffff800000809909:	49 89 df             	mov    r15,rbx
ffff80000080990c:	48 b8 27 3e ff ff ff 	movabs rax,0xffffffffffff3e27
ffff800000809913:	ff ff ff 
ffff800000809916:	48 01 d8             	add    rax,rbx
ffff800000809919:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:980
            page_item *pdpte=pml4e[i]&PAGE_4K_MASK;
ffff80000080991b:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080991e:	48 98                	cdqe   
ffff800000809920:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000809927:	00 
ffff800000809928:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080992c:	48 01 d0             	add    rax,rdx
ffff80000080992f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809932:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
ffff800000809938:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:981
            for(int j=0;j<512;j++)
ffff80000080993c:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff800000809943:	e9 38 02 00 00       	jmp    ffff800000809b80 <copy_mmap+0x3f2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:983
            {
                if(pdpte[j]&PAGE_PRESENT&&!(pdpte[j]&PDPTE_1GB)){
ffff800000809948:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080994b:	48 98                	cdqe   
ffff80000080994d:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000809954:	00 
ffff800000809955:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000809959:	48 01 d0             	add    rax,rdx
ffff80000080995c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080995f:	83 e0 01             	and    eax,0x1
ffff800000809962:	48 85 c0             	test   rax,rax
ffff800000809965:	0f 84 11 02 00 00    	je     ffff800000809b7c <copy_mmap+0x3ee>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:983 (discriminator 1)
ffff80000080996b:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080996e:	48 98                	cdqe   
ffff800000809970:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000809977:	00 
ffff800000809978:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080997c:	48 01 d0             	add    rax,rdx
ffff80000080997f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809982:	25 80 00 00 00       	and    eax,0x80
ffff800000809987:	48 85 c0             	test   rax,rax
ffff80000080998a:	0f 85 ec 01 00 00    	jne    ffff800000809b7c <copy_mmap+0x3ee>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:984
                    addr_t old_data2=pdpte[j];//旧的数据，里面保存了属性和要拷贝的数据的地址
ffff800000809990:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000809993:	48 98                	cdqe   
ffff800000809995:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080999c:	00 
ffff80000080999d:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008099a1:	48 01 d0             	add    rax,rdx
ffff8000008099a4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008099a7:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:985
                    pdpte[j]= kmalloc() | (old_data2 & ~PAGE_4K_MASK);
ffff8000008099ab:	49 89 df             	mov    r15,rbx
ffff8000008099ae:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008099b3:	48 ba 13 2c fe ff ff 	movabs rdx,0xfffffffffffe2c13
ffff8000008099ba:	ff ff ff 
ffff8000008099bd:	48 01 da             	add    rdx,rbx
ffff8000008099c0:	ff d2                	call   rdx
ffff8000008099c2:	48 89 c2             	mov    rdx,rax
ffff8000008099c5:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008099c9:	25 ff 0f 00 00       	and    eax,0xfff
ffff8000008099ce:	48 89 c1             	mov    rcx,rax
ffff8000008099d1:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff8000008099d4:	48 98                	cdqe   
ffff8000008099d6:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
ffff8000008099dd:	00 
ffff8000008099de:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008099e2:	48 01 f0             	add    rax,rsi
ffff8000008099e5:	48 09 ca             	or     rdx,rcx
ffff8000008099e8:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:986
                    memcpy(pdpte[j]&PAGE_4K_MASK,old_data2&PAGE_4K_MASK|KNL_BASE,PAGE_4K_SIZE);//把老的数据拷贝到新的页面里
ffff8000008099eb:	48 b8 00 f0 ff ff ff 	movabs rax,0x7ffffffff000
ffff8000008099f2:	7f 00 00 
ffff8000008099f5:	48 23 45 b8          	and    rax,QWORD PTR [rbp-0x48]
ffff8000008099f9:	48 ba 00 00 00 00 00 	movabs rdx,0xffff800000000000
ffff800000809a00:	80 ff ff 
ffff800000809a03:	48 09 d0             	or     rax,rdx
ffff800000809a06:	48 89 c1             	mov    rcx,rax
ffff800000809a09:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000809a0c:	48 98                	cdqe   
ffff800000809a0e:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000809a15:	00 
ffff800000809a16:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000809a1a:	48 01 d0             	add    rax,rdx
ffff800000809a1d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809a20:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
ffff800000809a26:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000809a2b:	48 89 ce             	mov    rsi,rcx
ffff800000809a2e:	48 89 c7             	mov    rdi,rax
ffff800000809a31:	49 89 df             	mov    r15,rbx
ffff800000809a34:	48 b8 27 3e ff ff ff 	movabs rax,0xffffffffffff3e27
ffff800000809a3b:	ff ff ff 
ffff800000809a3e:	48 01 d8             	add    rax,rbx
ffff800000809a41:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:987
                    page_item *pde=pdpte[j]&PAGE_4K_MASK;
ffff800000809a43:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000809a46:	48 98                	cdqe   
ffff800000809a48:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000809a4f:	00 
ffff800000809a50:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000809a54:	48 01 d0             	add    rax,rdx
ffff800000809a57:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809a5a:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
ffff800000809a60:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:988
                    for(int k=0;k<512;k++)
ffff800000809a64:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff800000809a6b:	e9 ff 00 00 00       	jmp    ffff800000809b6f <copy_mmap+0x3e1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:990
                    {
                        if(pde[k]&PAGE_PRESENT&&!(pde[k]&PDE_4MB)){
ffff800000809a70:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000809a73:	48 98                	cdqe   
ffff800000809a75:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000809a7c:	00 
ffff800000809a7d:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000809a81:	48 01 d0             	add    rax,rdx
ffff800000809a84:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809a87:	83 e0 01             	and    eax,0x1
ffff800000809a8a:	48 85 c0             	test   rax,rax
ffff800000809a8d:	0f 84 d8 00 00 00    	je     ffff800000809b6b <copy_mmap+0x3dd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:990 (discriminator 1)
ffff800000809a93:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000809a96:	48 98                	cdqe   
ffff800000809a98:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000809a9f:	00 
ffff800000809aa0:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000809aa4:	48 01 d0             	add    rax,rdx
ffff800000809aa7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809aaa:	25 80 00 00 00       	and    eax,0x80
ffff800000809aaf:	48 85 c0             	test   rax,rax
ffff800000809ab2:	0f 85 b3 00 00 00    	jne    ffff800000809b6b <copy_mmap+0x3dd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:991
                            addr_t old_data3=pde[k];//旧的数据，里面保存了属性和要拷贝的数据的地址
ffff800000809ab8:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000809abb:	48 98                	cdqe   
ffff800000809abd:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000809ac4:	00 
ffff800000809ac5:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000809ac9:	48 01 d0             	add    rax,rdx
ffff800000809acc:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809acf:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:992
                            pde[k]= kmalloc() | (old_data3 & ~PAGE_4K_MASK);
ffff800000809ad3:	49 89 df             	mov    r15,rbx
ffff800000809ad6:	b8 00 00 00 00       	mov    eax,0x0
ffff800000809adb:	48 ba 13 2c fe ff ff 	movabs rdx,0xfffffffffffe2c13
ffff800000809ae2:	ff ff ff 
ffff800000809ae5:	48 01 da             	add    rdx,rbx
ffff800000809ae8:	ff d2                	call   rdx
ffff800000809aea:	48 89 c2             	mov    rdx,rax
ffff800000809aed:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000809af1:	25 ff 0f 00 00       	and    eax,0xfff
ffff800000809af6:	48 89 c1             	mov    rcx,rax
ffff800000809af9:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000809afc:	48 98                	cdqe   
ffff800000809afe:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
ffff800000809b05:	00 
ffff800000809b06:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000809b0a:	48 01 f0             	add    rax,rsi
ffff800000809b0d:	48 09 ca             	or     rdx,rcx
ffff800000809b10:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:993
                            memcpy(pde[k]&PAGE_4K_MASK,old_data3&PAGE_4K_MASK|KNL_BASE,PAGE_4K_SIZE);//把老的数据拷贝到新的页面里
ffff800000809b13:	48 b8 00 f0 ff ff ff 	movabs rax,0x7ffffffff000
ffff800000809b1a:	7f 00 00 
ffff800000809b1d:	48 23 45 a8          	and    rax,QWORD PTR [rbp-0x58]
ffff800000809b21:	48 ba 00 00 00 00 00 	movabs rdx,0xffff800000000000
ffff800000809b28:	80 ff ff 
ffff800000809b2b:	48 09 d0             	or     rax,rdx
ffff800000809b2e:	48 89 c1             	mov    rcx,rax
ffff800000809b31:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000809b34:	48 98                	cdqe   
ffff800000809b36:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000809b3d:	00 
ffff800000809b3e:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000809b42:	48 01 d0             	add    rax,rdx
ffff800000809b45:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809b48:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
ffff800000809b4e:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000809b53:	48 89 ce             	mov    rsi,rcx
ffff800000809b56:	48 89 c7             	mov    rdi,rax
ffff800000809b59:	49 89 df             	mov    r15,rbx
ffff800000809b5c:	48 b8 27 3e ff ff ff 	movabs rax,0xffffffffffff3e27
ffff800000809b63:	ff ff ff 
ffff800000809b66:	48 01 d8             	add    rax,rbx
ffff800000809b69:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:988 (discriminator 2)
                    for(int k=0;k<512;k++)
ffff800000809b6b:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:988 (discriminator 1)
ffff800000809b6f:	81 7d e4 ff 01 00 00 	cmp    DWORD PTR [rbp-0x1c],0x1ff
ffff800000809b76:	0f 8e f4 fe ff ff    	jle    ffff800000809a70 <copy_mmap+0x2e2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:981 (discriminator 2)
            for(int j=0;j<512;j++)
ffff800000809b7c:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:981 (discriminator 1)
ffff800000809b80:	81 7d e8 ff 01 00 00 	cmp    DWORD PTR [rbp-0x18],0x1ff
ffff800000809b87:	0f 8e bb fd ff ff    	jle    ffff800000809948 <copy_mmap+0x1ba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:974 (discriminator 2)
    for(int i=0;i<512;i++)
ffff800000809b8d:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:974 (discriminator 1)
ffff800000809b91:	81 7d ec ff 01 00 00 	cmp    DWORD PTR [rbp-0x14],0x1ff
ffff800000809b98:	0f 8e a7 fc ff ff    	jle    ffff800000809845 <copy_mmap+0xb7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1000
                    }
                }
            }
        }
    }
}
ffff800000809b9e:	90                   	nop
ffff800000809b9f:	90                   	nop
ffff800000809ba0:	48 83 c4 60          	add    rsp,0x60
ffff800000809ba4:	5b                   	pop    rbx
ffff800000809ba5:	41 5f                	pop    r15
ffff800000809ba7:	5d                   	pop    rbp
ffff800000809ba8:	c3                   	ret    

ffff800000809ba9 <getpgrp>:
getpgrp():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1002

pid_t getpgrp(void){
ffff800000809ba9:	f3 0f 1e fa          	endbr64 
ffff800000809bad:	55                   	push   rbp
ffff800000809bae:	48 89 e5             	mov    rbp,rsp
ffff800000809bb1:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000809bb1 <getpgrp+0x8>
ffff800000809bb8:	49 bb 87 57 01 00 00 	movabs r11,0x15787
ffff800000809bbf:	00 00 00 
ffff800000809bc2:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1003
    return current->gpid;
ffff800000809bc5:	48 ba 90 fe ff ff ff 	movabs rdx,0xfffffffffffffe90
ffff800000809bcc:	ff ff ff 
ffff800000809bcf:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000809bd3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809bd6:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1004
}
ffff800000809bd9:	5d                   	pop    rbp
ffff800000809bda:	c3                   	ret    

ffff800000809bdb <getpgid>:
getpgid():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1006

int getpgid(pid_t pid,gid_t gid){
ffff800000809bdb:	f3 0f 1e fa          	endbr64 
ffff800000809bdf:	55                   	push   rbp
ffff800000809be0:	48 89 e5             	mov    rbp,rsp
ffff800000809be3:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000809be3 <getpgid+0x8>
ffff800000809bea:	49 bb 55 57 01 00 00 	movabs r11,0x15755
ffff800000809bf1:	00 00 00 
ffff800000809bf4:	4c 01 d8             	add    rax,r11
ffff800000809bf7:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff800000809bfa:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1007
    if(pid==0)
ffff800000809bfd:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff800000809c01:	75 16                	jne    ffff800000809c19 <getpgid+0x3e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1008
        return current->gpid;
ffff800000809c03:	48 ba 90 fe ff ff ff 	movabs rdx,0xfffffffffffffe90
ffff800000809c0a:	ff ff ff 
ffff800000809c0d:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000809c11:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809c14:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff800000809c17:	eb 67                	jmp    ffff800000809c80 <getpgid+0xa5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1009
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000809c19:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000809c20:	eb 53                	jmp    ffff800000809c75 <getpgid+0x9a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1010
        if(task[i].pid==pid)
ffff800000809c22:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff800000809c29:	ff ff ff 
ffff800000809c2c:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000809c30:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000809c33:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000809c36:	48 63 d2             	movsxd rdx,edx
ffff800000809c39:	48 69 d2 34 03 00 00 	imul   rdx,rdx,0x334
ffff800000809c40:	48 01 ca             	add    rdx,rcx
ffff800000809c43:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff800000809c45:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000809c48:	39 d1                	cmp    ecx,edx
ffff800000809c4a:	75 25                	jne    ffff800000809c71 <getpgid+0x96>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1011
            return task[i].gpid;
ffff800000809c4c:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff800000809c53:	ff ff ff 
ffff800000809c56:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000809c5a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000809c5d:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000809c60:	48 98                	cdqe   
ffff800000809c62:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff800000809c69:	48 01 d0             	add    rax,rdx
ffff800000809c6c:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff800000809c6f:	eb 0f                	jmp    ffff800000809c80 <getpgid+0xa5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1009 (discriminator 2)
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000809c71:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1009 (discriminator 1)
ffff800000809c75:	83 7d fc 1f          	cmp    DWORD PTR [rbp-0x4],0x1f
ffff800000809c79:	7e a7                	jle    ffff800000809c22 <getpgid+0x47>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1013
    }
    return -1;
ffff800000809c7b:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1014
}
ffff800000809c80:	5d                   	pop    rbp
ffff800000809c81:	c3                   	ret    

ffff800000809c82 <setpgid>:
setpgid():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1015
int setpgid(pid_t pid,gid_t gid){
ffff800000809c82:	f3 0f 1e fa          	endbr64 
ffff800000809c86:	55                   	push   rbp
ffff800000809c87:	48 89 e5             	mov    rbp,rsp
ffff800000809c8a:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000809c8a <setpgid+0x8>
ffff800000809c91:	49 bb ae 56 01 00 00 	movabs r11,0x156ae
ffff800000809c98:	00 00 00 
ffff800000809c9b:	4c 01 d8             	add    rax,r11
ffff800000809c9e:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff800000809ca1:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1016
    if(pid==0)
ffff800000809ca4:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff800000809ca8:	75 56                	jne    ffff800000809d00 <setpgid+0x7e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1018
    {
        if(current->sid==current->pid)
ffff800000809caa:	48 ba 90 fe ff ff ff 	movabs rdx,0xfffffffffffffe90
ffff800000809cb1:	ff ff ff 
ffff800000809cb4:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000809cb8:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000809cbb:	8b 4a 08             	mov    ecx,DWORD PTR [rdx+0x8]
ffff800000809cbe:	48 ba 90 fe ff ff ff 	movabs rdx,0xfffffffffffffe90
ffff800000809cc5:	ff ff ff 
ffff800000809cc8:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000809ccc:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000809ccf:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000809cd1:	39 d1                	cmp    ecx,edx
ffff800000809cd3:	75 0a                	jne    ffff800000809cdf <setpgid+0x5d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1019
            return -1;
ffff800000809cd5:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000809cda:	e9 e9 00 00 00       	jmp    ffff800000809dc8 <setpgid+0x146>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1020
        current->gpid=gid;
ffff800000809cdf:	48 ba 90 fe ff ff ff 	movabs rdx,0xfffffffffffffe90
ffff800000809ce6:	ff ff ff 
ffff800000809ce9:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000809ced:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809cf0:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000809cf3:	89 50 04             	mov    DWORD PTR [rax+0x4],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1021
        return 0;
ffff800000809cf6:	b8 00 00 00 00       	mov    eax,0x0
ffff800000809cfb:	e9 c8 00 00 00       	jmp    ffff800000809dc8 <setpgid+0x146>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1023
    }
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000809d00:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000809d07:	e9 ad 00 00 00       	jmp    ffff800000809db9 <setpgid+0x137>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1024
        if(task[i].pid==pid)
ffff800000809d0c:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff800000809d13:	ff ff ff 
ffff800000809d16:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000809d1a:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000809d1d:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000809d20:	48 63 d2             	movsxd rdx,edx
ffff800000809d23:	48 69 d2 34 03 00 00 	imul   rdx,rdx,0x334
ffff800000809d2a:	48 01 ca             	add    rdx,rcx
ffff800000809d2d:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff800000809d2f:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000809d32:	39 d1                	cmp    ecx,edx
ffff800000809d34:	75 7f                	jne    ffff800000809db5 <setpgid+0x133>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1026
        {
            if(task[i].sid==task[i].pid)
ffff800000809d36:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff800000809d3d:	ff ff ff 
ffff800000809d40:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000809d44:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000809d47:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000809d4a:	48 63 d2             	movsxd rdx,edx
ffff800000809d4d:	48 69 d2 34 03 00 00 	imul   rdx,rdx,0x334
ffff800000809d54:	48 01 ca             	add    rdx,rcx
ffff800000809d57:	8b 4a 08             	mov    ecx,DWORD PTR [rdx+0x8]
ffff800000809d5a:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff800000809d61:	ff ff ff 
ffff800000809d64:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000809d68:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff800000809d6b:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000809d6e:	48 63 d2             	movsxd rdx,edx
ffff800000809d71:	48 69 d2 34 03 00 00 	imul   rdx,rdx,0x334
ffff800000809d78:	48 01 f2             	add    rdx,rsi
ffff800000809d7b:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000809d7d:	39 d1                	cmp    ecx,edx
ffff800000809d7f:	75 07                	jne    ffff800000809d88 <setpgid+0x106>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1027
                return -1;
ffff800000809d81:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000809d86:	eb 40                	jmp    ffff800000809dc8 <setpgid+0x146>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1028
            task[i].gpid=gid;
ffff800000809d88:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff800000809d8f:	ff ff ff 
ffff800000809d92:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000809d96:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000809d99:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000809d9c:	48 98                	cdqe   
ffff800000809d9e:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff800000809da5:	48 01 c2             	add    rdx,rax
ffff800000809da8:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000809dab:	89 42 04             	mov    DWORD PTR [rdx+0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1029
            return 0;
ffff800000809dae:	b8 00 00 00 00       	mov    eax,0x0
ffff800000809db3:	eb 13                	jmp    ffff800000809dc8 <setpgid+0x146>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1023 (discriminator 2)
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000809db5:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1023 (discriminator 1)
ffff800000809db9:	83 7d fc 1f          	cmp    DWORD PTR [rbp-0x4],0x1f
ffff800000809dbd:	0f 8e 49 ff ff ff    	jle    ffff800000809d0c <setpgid+0x8a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1032
        }
    }
    return -1;
ffff800000809dc3:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1033
}
ffff800000809dc8:	5d                   	pop    rbp
ffff800000809dc9:	c3                   	ret    

ffff800000809dca <setsid>:
setsid():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1035

pid_t setsid(void){
ffff800000809dca:	f3 0f 1e fa          	endbr64 
ffff800000809dce:	55                   	push   rbp
ffff800000809dcf:	48 89 e5             	mov    rbp,rsp
ffff800000809dd2:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000809dd2 <setsid+0x8>
ffff800000809dd9:	49 bb 66 55 01 00 00 	movabs r11,0x15566
ffff800000809de0:	00 00 00 
ffff800000809de3:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1036
    current->sid=current->pid;
ffff800000809de6:	48 ba 90 fe ff ff ff 	movabs rdx,0xfffffffffffffe90
ffff800000809ded:	ff ff ff 
ffff800000809df0:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000809df4:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000809df7:	48 b9 90 fe ff ff ff 	movabs rcx,0xfffffffffffffe90
ffff800000809dfe:	ff ff ff 
ffff800000809e01:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff800000809e05:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809e08:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000809e0a:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1037
}
ffff800000809e0d:	90                   	nop
ffff800000809e0e:	5d                   	pop    rbp
ffff800000809e0f:	c3                   	ret    

ffff800000809e10 <getsid>:
getsid():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1038
pid_t getsid(pid_t pid){
ffff800000809e10:	f3 0f 1e fa          	endbr64 
ffff800000809e14:	55                   	push   rbp
ffff800000809e15:	48 89 e5             	mov    rbp,rsp
ffff800000809e18:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000809e18 <getsid+0x8>
ffff800000809e1f:	49 bb 20 55 01 00 00 	movabs r11,0x15520
ffff800000809e26:	00 00 00 
ffff800000809e29:	4c 01 d8             	add    rax,r11
ffff800000809e2c:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1039
    if(pid==0)
ffff800000809e2f:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff800000809e33:	75 16                	jne    ffff800000809e4b <getsid+0x3b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1040
        return current->sid;
ffff800000809e35:	48 ba 90 fe ff ff ff 	movabs rdx,0xfffffffffffffe90
ffff800000809e3c:	ff ff ff 
ffff800000809e3f:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000809e43:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809e46:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000809e49:	eb 67                	jmp    ffff800000809eb2 <getsid+0xa2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1041
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000809e4b:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000809e52:	eb 53                	jmp    ffff800000809ea7 <getsid+0x97>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1042
        if(task[i].pid==pid)
ffff800000809e54:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff800000809e5b:	ff ff ff 
ffff800000809e5e:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000809e62:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000809e65:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000809e68:	48 63 d2             	movsxd rdx,edx
ffff800000809e6b:	48 69 d2 34 03 00 00 	imul   rdx,rdx,0x334
ffff800000809e72:	48 01 ca             	add    rdx,rcx
ffff800000809e75:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff800000809e77:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000809e7a:	39 d1                	cmp    ecx,edx
ffff800000809e7c:	75 25                	jne    ffff800000809ea3 <getsid+0x93>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1043
            return task[i].sid;
ffff800000809e7e:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff800000809e85:	ff ff ff 
ffff800000809e88:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000809e8c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000809e8f:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000809e92:	48 98                	cdqe   
ffff800000809e94:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff800000809e9b:	48 01 d0             	add    rax,rdx
ffff800000809e9e:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000809ea1:	eb 0f                	jmp    ffff800000809eb2 <getsid+0xa2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1041 (discriminator 2)
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000809ea3:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1041 (discriminator 1)
ffff800000809ea7:	83 7d fc 1f          	cmp    DWORD PTR [rbp-0x4],0x1f
ffff800000809eab:	7e a7                	jle    ffff800000809e54 <getsid+0x44>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1045
    }
    return -1;
ffff800000809ead:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1046
}
ffff800000809eb2:	5d                   	pop    rbp
ffff800000809eb3:	c3                   	ret    

ffff800000809eb4 <tcsetpgrp>:
tcsetpgrp():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1047
int tcsetpgrp(int fildes,pid_t pgid_id){
ffff800000809eb4:	f3 0f 1e fa          	endbr64 
ffff800000809eb8:	55                   	push   rbp
ffff800000809eb9:	48 89 e5             	mov    rbp,rsp
ffff800000809ebc:	41 57                	push   r15
ffff800000809ebe:	53                   	push   rbx
ffff800000809ebf:	48 83 ec 20          	sub    rsp,0x20
ffff800000809ec3:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000809ec3 <tcsetpgrp+0xf>
ffff800000809eca:	49 bb 75 54 01 00 00 	movabs r11,0x15475
ffff800000809ed1:	00 00 00 
ffff800000809ed4:	4c 01 db             	add    rbx,r11
ffff800000809ed7:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff800000809eda:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1049
    //当前controlling terminal断联
    sys_ioctl(fildes,TTY_DISCONNECT,0);
ffff800000809edd:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000809ee0:	ba 00 00 00 00       	mov    edx,0x0
ffff800000809ee5:	be 02 00 00 00       	mov    esi,0x2
ffff800000809eea:	89 c7                	mov    edi,eax
ffff800000809eec:	49 89 df             	mov    r15,rbx
ffff800000809eef:	48 b8 95 ad fe ff ff 	movabs rax,0xfffffffffffead95
ffff800000809ef6:	ff ff ff 
ffff800000809ef9:	48 01 d8             	add    rax,rbx
ffff800000809efc:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1050
    int sid= getsid(0);//获取session id
ffff800000809efe:	bf 00 00 00 00       	mov    edi,0x0
ffff800000809f03:	49 89 df             	mov    r15,rbx
ffff800000809f06:	48 b8 d8 aa fe ff ff 	movabs rax,0xfffffffffffeaad8
ffff800000809f0d:	ff ff ff 
ffff800000809f10:	48 01 d8             	add    rax,rbx
ffff800000809f13:	ff d0                	call   rax
ffff800000809f15:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1051
    struct process* new_fgl=NULL;
ffff800000809f18:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff800000809f1f:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1052
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000809f20:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff800000809f27:	e9 fb 00 00 00       	jmp    ffff80000080a027 <tcsetpgrp+0x173>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1053
        if(task[i].stat == TASK_ZOMBIE||task[i].stat == TASK_EMPTY)continue;
ffff800000809f2c:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000809f33:	ff ff ff 
ffff800000809f36:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809f3a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000809f3d:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000809f40:	48 98                	cdqe   
ffff800000809f42:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff800000809f49:	48 01 d0             	add    rax,rdx
ffff800000809f4c:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff800000809f4f:	83 f8 04             	cmp    eax,0x4
ffff800000809f52:	0f 84 ca 00 00 00    	je     ffff80000080a022 <tcsetpgrp+0x16e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1053 (discriminator 2)
ffff800000809f58:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000809f5f:	ff ff ff 
ffff800000809f62:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809f66:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000809f69:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000809f6c:	48 98                	cdqe   
ffff800000809f6e:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff800000809f75:	48 01 d0             	add    rax,rdx
ffff800000809f78:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff800000809f7b:	85 c0                	test   eax,eax
ffff800000809f7d:	0f 84 9f 00 00 00    	je     ffff80000080a022 <tcsetpgrp+0x16e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1054
        if(task[i].sid==sid){
ffff800000809f83:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000809f8a:	ff ff ff 
ffff800000809f8d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809f91:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000809f94:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000809f97:	48 98                	cdqe   
ffff800000809f99:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff800000809fa0:	48 01 d0             	add    rax,rdx
ffff800000809fa3:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffff800000809fa6:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000809fa9:	39 c2                	cmp    edx,eax
ffff800000809fab:	75 76                	jne    ffff80000080a023 <tcsetpgrp+0x16f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1055
            task[i].fg_pgid=pgid_id;
ffff800000809fad:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000809fb4:	ff ff ff 
ffff800000809fb7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809fbb:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000809fbe:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000809fc1:	48 98                	cdqe   
ffff800000809fc3:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff800000809fca:	48 01 c2             	add    rdx,rax
ffff800000809fcd:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000809fd0:	89 42 0c             	mov    DWORD PTR [rdx+0xc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1056
            if(task[i].pid==pgid_id){
ffff800000809fd3:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff800000809fda:	ff ff ff 
ffff800000809fdd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809fe1:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000809fe4:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000809fe7:	48 98                	cdqe   
ffff800000809fe9:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff800000809ff0:	48 01 d0             	add    rax,rdx
ffff800000809ff3:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000809ff5:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000809ff8:	39 c2                	cmp    edx,eax
ffff800000809ffa:	75 27                	jne    ffff80000080a023 <tcsetpgrp+0x16f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1058
                //这是新前台进程组的leader
                new_fgl=&task[i];
ffff800000809ffc:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff80000080a003:	ff ff ff 
ffff80000080a006:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a00a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080a00d:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080a010:	48 98                	cdqe   
ffff80000080a012:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff80000080a019:	48 01 d0             	add    rax,rdx
ffff80000080a01c:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff80000080a020:	eb 01                	jmp    ffff80000080a023 <tcsetpgrp+0x16f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1053
        if(task[i].stat == TASK_ZOMBIE||task[i].stat == TASK_EMPTY)continue;
ffff80000080a022:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1052 (discriminator 2)
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff80000080a023:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1052 (discriminator 1)
ffff80000080a027:	83 7d e4 1f          	cmp    DWORD PTR [rbp-0x1c],0x1f
ffff80000080a02b:	0f 8e fb fe ff ff    	jle    ffff800000809f2c <tcsetpgrp+0x78>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1063
            }
        }
    }
    //新leader把tty连接
    new_fgl->openf[new_fgl->tty_fd]->f_ops->ioctl(new_fgl->openf[fildes]->dentry->dir_inode,new_fgl->openf[fildes]\
ffff80000080a031:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080a035:	8b 50 14             	mov    edx,DWORD PTR [rax+0x14]
ffff80000080a038:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080a03c:	48 63 d2             	movsxd rdx,edx
ffff80000080a03f:	48 83 c2 1a          	add    rdx,0x1a
ffff80000080a043:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff80000080a048:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080a04c:	4c 8b 40 28          	mov    r8,QWORD PTR [rax+0x28]
ffff80000080a050:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080a054:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080a057:	48 63 d2             	movsxd rdx,edx
ffff80000080a05a:	48 83 c2 1a          	add    rdx,0x1a
ffff80000080a05e:	48 8b 74 d0 08       	mov    rsi,QWORD PTR [rax+rdx*8+0x8]
ffff80000080a063:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080a067:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080a06a:	48 63 d2             	movsxd rdx,edx
ffff80000080a06d:	48 83 c2 1a          	add    rdx,0x1a
ffff80000080a071:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff80000080a076:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080a07a:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080a07e:	b9 00 00 00 00       	mov    ecx,0x0
ffff80000080a083:	ba 01 00 00 00       	mov    edx,0x1
ffff80000080a088:	48 89 c7             	mov    rdi,rax
ffff80000080a08b:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1065
    ,TTY_CONNECT,0);
}
ffff80000080a08e:	90                   	nop
ffff80000080a08f:	48 83 c4 20          	add    rsp,0x20
ffff80000080a093:	5b                   	pop    rbx
ffff80000080a094:	41 5f                	pop    r15
ffff80000080a096:	5d                   	pop    rbp
ffff80000080a097:	c3                   	ret    

ffff80000080a098 <tcgetpgrp>:
tcgetpgrp():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1066
pid_t tcgetpgrp(int fildes){
ffff80000080a098:	f3 0f 1e fa          	endbr64 
ffff80000080a09c:	55                   	push   rbp
ffff80000080a09d:	48 89 e5             	mov    rbp,rsp
ffff80000080a0a0:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080a0a0 <tcgetpgrp+0x8>
ffff80000080a0a7:	49 bb 98 52 01 00 00 	movabs r11,0x15298
ffff80000080a0ae:	00 00 00 
ffff80000080a0b1:	4c 01 d8             	add    rax,r11
ffff80000080a0b4:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1067
    return current->fg_pgid;
ffff80000080a0b7:	48 ba 90 fe ff ff ff 	movabs rdx,0xfffffffffffffe90
ffff80000080a0be:	ff ff ff 
ffff80000080a0c1:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080a0c5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a0c8:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1068
}
ffff80000080a0cb:	5d                   	pop    rbp
ffff80000080a0cc:	c3                   	ret    

ffff80000080a0cd <sys_ioctl>:
sys_ioctl():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1071
//===============

int sys_ioctl(int fildes, int request, unsigned long args){
ffff80000080a0cd:	f3 0f 1e fa          	endbr64 
ffff80000080a0d1:	55                   	push   rbp
ffff80000080a0d2:	48 89 e5             	mov    rbp,rsp
ffff80000080a0d5:	48 83 ec 10          	sub    rsp,0x10
ffff80000080a0d9:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080a0d9 <sys_ioctl+0xc>
ffff80000080a0e0:	49 bb 5f 52 01 00 00 	movabs r11,0x1525f
ffff80000080a0e7:	00 00 00 
ffff80000080a0ea:	4c 01 d8             	add    rax,r11
ffff80000080a0ed:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffff80000080a0f0:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
ffff80000080a0f3:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1072
    current->openf[fildes]->f_ops->ioctl(current->openf[fildes]->dentry->dir_inode,current->openf[fildes]\
ffff80000080a0f7:	48 ba 90 fe ff ff ff 	movabs rdx,0xfffffffffffffe90
ffff80000080a0fe:	ff ff ff 
ffff80000080a101:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080a105:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080a108:	8b 4d fc             	mov    ecx,DWORD PTR [rbp-0x4]
ffff80000080a10b:	48 63 c9             	movsxd rcx,ecx
ffff80000080a10e:	48 83 c1 1a          	add    rcx,0x1a
ffff80000080a112:	48 8b 54 ca 08       	mov    rdx,QWORD PTR [rdx+rcx*8+0x8]
ffff80000080a117:	48 8b 52 18          	mov    rdx,QWORD PTR [rdx+0x18]
ffff80000080a11b:	4c 8b 42 28          	mov    r8,QWORD PTR [rdx+0x28]
ffff80000080a11f:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff80000080a122:	48 63 d2             	movsxd rdx,edx
ffff80000080a125:	48 b9 90 fe ff ff ff 	movabs rcx,0xfffffffffffffe90
ffff80000080a12c:	ff ff ff 
ffff80000080a12f:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080a133:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
ffff80000080a136:	8b 75 fc             	mov    esi,DWORD PTR [rbp-0x4]
ffff80000080a139:	48 63 f6             	movsxd rsi,esi
ffff80000080a13c:	48 83 c6 1a          	add    rsi,0x1a
ffff80000080a140:	48 8b 74 f1 08       	mov    rsi,QWORD PTR [rcx+rsi*8+0x8]
ffff80000080a145:	48 b9 90 fe ff ff ff 	movabs rcx,0xfffffffffffffe90
ffff80000080a14c:	ff ff ff 
ffff80000080a14f:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff80000080a153:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a156:	8b 4d fc             	mov    ecx,DWORD PTR [rbp-0x4]
ffff80000080a159:	48 63 c9             	movsxd rcx,ecx
ffff80000080a15c:	48 83 c1 1a          	add    rcx,0x1a
ffff80000080a160:	48 8b 44 c8 08       	mov    rax,QWORD PTR [rax+rcx*8+0x8]
ffff80000080a165:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080a169:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080a16d:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff80000080a171:	48 89 c7             	mov    rdi,rax
ffff80000080a174:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1074
    ,request,args);
ffff80000080a177:	90                   	nop
ffff80000080a178:	c9                   	leave  
ffff80000080a179:	c3                   	ret    
ffff80000080a17a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

ffff80000080a180 <outb>:
outb():
ffff80000080a180:	66 89 fa             	mov    dx,di
ffff80000080a183:	66 89 f0             	mov    ax,si
ffff80000080a186:	ee                   	out    dx,al
ffff80000080a187:	e8 29 00 00 00       	call   ffff80000080a1b5 <io_delay>
ffff80000080a18c:	c3                   	ret    

ffff80000080a18d <outw>:
outw():
ffff80000080a18d:	66 89 fa             	mov    dx,di
ffff80000080a190:	66 89 f0             	mov    ax,si
ffff80000080a193:	66 ef                	out    dx,ax
ffff80000080a195:	90                   	nop
ffff80000080a196:	90                   	nop
ffff80000080a197:	90                   	nop
ffff80000080a198:	c3                   	ret    

ffff80000080a199 <inb>:
inb():
ffff80000080a199:	31 c0                	xor    eax,eax
ffff80000080a19b:	66 89 fa             	mov    dx,di
ffff80000080a19e:	ec                   	in     al,dx
ffff80000080a19f:	90                   	nop
ffff80000080a1a0:	90                   	nop
ffff80000080a1a1:	90                   	nop
ffff80000080a1a2:	c3                   	ret    

ffff80000080a1a3 <inw>:
inw():
ffff80000080a1a3:	31 c0                	xor    eax,eax
ffff80000080a1a5:	66 89 fa             	mov    dx,di
ffff80000080a1a8:	66 ed                	in     ax,dx
ffff80000080a1aa:	90                   	nop
ffff80000080a1ab:	90                   	nop
ffff80000080a1ac:	90                   	nop
ffff80000080a1ad:	c3                   	ret    

ffff80000080a1ae <eoi>:
eoi():
ffff80000080a1ae:	b0 20                	mov    al,0x20
ffff80000080a1b0:	e6 a0                	out    0xa0,al
ffff80000080a1b2:	e6 20                	out    0x20,al
ffff80000080a1b4:	c3                   	ret    

ffff80000080a1b5 <io_delay>:
io_delay():
ffff80000080a1b5:	90                   	nop
ffff80000080a1b6:	90                   	nop
ffff80000080a1b7:	90                   	nop
ffff80000080a1b8:	90                   	nop
ffff80000080a1b9:	c3                   	ret    

ffff80000080a1ba <turn_on_int>:
turn_on_int():
ffff80000080a1ba:	b0 f8                	mov    al,0xf8
ffff80000080a1bc:	e6 21                	out    0x21,al
ffff80000080a1be:	e8 f2 ff ff ff       	call   ffff80000080a1b5 <io_delay>
ffff80000080a1c3:	b0 af                	mov    al,0xaf
ffff80000080a1c5:	e6 a1                	out    0xa1,al
ffff80000080a1c7:	e8 e9 ff ff ff       	call   ffff80000080a1b5 <io_delay>
ffff80000080a1cc:	48 b8 00 70 10 00 00 	movabs rax,0xffff800000107000
ffff80000080a1d3:	80 ff ff 
ffff80000080a1d6:	0f 01 18             	lidt   [rax]
ffff80000080a1d9:	90                   	nop
ffff80000080a1da:	90                   	nop
ffff80000080a1db:	90                   	nop
ffff80000080a1dc:	90                   	nop
ffff80000080a1dd:	c3                   	ret    

ffff80000080a1de <report_back_trace_of_err>:
report_back_trace_of_err():
ffff80000080a1de:	67 8b 44 24 04       	mov    eax,DWORD PTR [esp+0x4]
ffff80000080a1e3:	50                   	push   rax
ffff80000080a1e4:	83 c4 08             	add    esp,0x8
ffff80000080a1e7:	c3                   	ret    

ffff80000080a1e8 <bt_msg>:
bt_msg():
ffff80000080a1e8:	65 72 72             	gs jb  ffff80000080a25d <fill_desc+0x3a>
ffff80000080a1eb:	6f                   	outs   dx,DWORD PTR ds:[rsi]
ffff80000080a1ec:	72 20                	jb     ffff80000080a20e <init_gdt+0x11>
ffff80000080a1ee:	6f                   	outs   dx,DWORD PTR ds:[rsi]
ffff80000080a1ef:	63 63 75             	movsxd esp,DWORD PTR [rbx+0x75]
ffff80000080a1f2:	72 73                	jb     ffff80000080a267 <fill_desc+0x44>
ffff80000080a1f4:	20 61 74             	and    BYTE PTR [rcx+0x74],ah
ffff80000080a1f7:	3a 25 78 5c 6e 00    	cmp    ah,BYTE PTR [rip+0x6e5c78]        # ffff800000eefe75 <_knl_end+0x2efe75>

ffff80000080a1fd <init_gdt>:
init_gdt():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:8
#include "memory.h"

descriptor *gdt=GDT_ADDR+KNL_BASE;
extern char *gdtptr;
int init_gdt()
{
ffff80000080a1fd:	f3 0f 1e fa          	endbr64 
ffff80000080a201:	55                   	push   rbp
ffff80000080a202:	48 89 e5             	mov    rbp,rsp
ffff80000080a205:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080a205 <init_gdt+0x8>
ffff80000080a20c:	49 bb 33 51 01 00 00 	movabs r11,0x15133
ffff80000080a213:	00 00 00 
ffff80000080a216:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:10
//    fill_desc(0x108000,108,SEG_SYS_TSS|SEG_PRESENT,4);
    asm volatile("mov $0x48,%ax\r\n"
ffff80000080a219:	66 b8 48 00          	mov    ax,0x48
ffff80000080a21d:	0f 00 d8             	ltr    ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:12
                 "ltr %ax");  
}
ffff80000080a220:	90                   	nop
ffff80000080a221:	5d                   	pop    rbp
ffff80000080a222:	c3                   	ret    

ffff80000080a223 <fill_desc>:
fill_desc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:14
void fill_desc(u64 base, u64 limit, u16 attr, u32 index)
{
ffff80000080a223:	f3 0f 1e fa          	endbr64 
ffff80000080a227:	55                   	push   rbp
ffff80000080a228:	48 89 e5             	mov    rbp,rsp
ffff80000080a22b:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080a22b <fill_desc+0x8>
ffff80000080a232:	49 bb 0d 51 01 00 00 	movabs r11,0x1510d
ffff80000080a239:	00 00 00 
ffff80000080a23c:	4c 01 d8             	add    rax,r11
ffff80000080a23f:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080a243:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080a247:	89 4d e8             	mov    DWORD PTR [rbp-0x18],ecx
ffff80000080a24a:	66 89 55 ec          	mov    WORD PTR [rbp-0x14],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:15
    gdt[index].base_12=base&0xffff;
ffff80000080a24e:	48 ba d0 fd ff ff ff 	movabs rdx,0xfffffffffffffdd0
ffff80000080a255:	ff ff ff 
ffff80000080a258:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080a25c:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080a25f:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff80000080a262:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080a266:	48 01 ca             	add    rdx,rcx
ffff80000080a269:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
ffff80000080a26d:	66 89 4a 02          	mov    WORD PTR [rdx+0x2],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:16
    gdt[index].base_3=(base>>16)&0xff;
ffff80000080a271:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080a275:	48 89 d6             	mov    rsi,rdx
ffff80000080a278:	48 c1 ee 10          	shr    rsi,0x10
ffff80000080a27c:	48 ba d0 fd ff ff ff 	movabs rdx,0xfffffffffffffdd0
ffff80000080a283:	ff ff ff 
ffff80000080a286:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080a28a:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080a28d:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff80000080a290:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080a294:	48 01 ca             	add    rdx,rcx
ffff80000080a297:	89 f1                	mov    ecx,esi
ffff80000080a299:	88 4a 04             	mov    BYTE PTR [rdx+0x4],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:17
    gdt[index].base_4=(base>>24)&0xff;
ffff80000080a29c:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080a2a0:	48 89 d6             	mov    rsi,rdx
ffff80000080a2a3:	48 c1 ee 18          	shr    rsi,0x18
ffff80000080a2a7:	48 ba d0 fd ff ff ff 	movabs rdx,0xfffffffffffffdd0
ffff80000080a2ae:	ff ff ff 
ffff80000080a2b1:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080a2b5:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080a2b8:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff80000080a2bb:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080a2bf:	48 01 ca             	add    rdx,rcx
ffff80000080a2c2:	89 f1                	mov    ecx,esi
ffff80000080a2c4:	88 4a 07             	mov    BYTE PTR [rdx+0x7],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:18
    gdt[index].base_5678=(base>>32)&0xffffffff;
ffff80000080a2c7:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080a2cb:	48 89 d1             	mov    rcx,rdx
ffff80000080a2ce:	48 c1 e9 20          	shr    rcx,0x20
ffff80000080a2d2:	48 ba d0 fd ff ff ff 	movabs rdx,0xfffffffffffffdd0
ffff80000080a2d9:	ff ff ff 
ffff80000080a2dc:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080a2e0:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff80000080a2e3:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff80000080a2e6:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080a2ea:	48 01 f2             	add    rdx,rsi
ffff80000080a2ed:	89 4a 08             	mov    DWORD PTR [rdx+0x8],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:19
    gdt[index].limit_lo16=limit&0xffff;
ffff80000080a2f0:	48 ba d0 fd ff ff ff 	movabs rdx,0xfffffffffffffdd0
ffff80000080a2f7:	ff ff ff 
ffff80000080a2fa:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080a2fe:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080a301:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff80000080a304:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080a308:	48 01 ca             	add    rdx,rcx
ffff80000080a30b:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff80000080a30f:	66 89 0a             	mov    WORD PTR [rdx],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:20
    gdt[index].attr=attr|((limit>>8)&0xf0);
ffff80000080a312:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080a316:	48 c1 ea 08          	shr    rdx,0x8
ffff80000080a31a:	89 d1                	mov    ecx,edx
ffff80000080a31c:	66 81 e1 f0 00       	and    cx,0xf0
ffff80000080a321:	48 ba d0 fd ff ff ff 	movabs rdx,0xfffffffffffffdd0
ffff80000080a328:	ff ff ff 
ffff80000080a32b:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080a32f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080a332:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080a335:	48 c1 e0 04          	shl    rax,0x4
ffff80000080a339:	48 01 c2             	add    rdx,rax
ffff80000080a33c:	89 c8                	mov    eax,ecx
ffff80000080a33e:	66 0b 45 ec          	or     ax,WORD PTR [rbp-0x14]
ffff80000080a342:	66 89 42 05          	mov    WORD PTR [rdx+0x5],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:22

}
ffff80000080a346:	90                   	nop
ffff80000080a347:	5d                   	pop    rbp
ffff80000080a348:	c3                   	ret    

ffff80000080a349 <fill_gate>:
fill_gate():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:25

void fill_gate(u32 index,u32 offset,u16 selector,u16 attr)
{
ffff80000080a349:	f3 0f 1e fa          	endbr64 
ffff80000080a34d:	55                   	push   rbp
ffff80000080a34e:	48 89 e5             	mov    rbp,rsp
ffff80000080a351:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080a351 <fill_gate+0x8>
ffff80000080a358:	49 bb e7 4f 01 00 00 	movabs r11,0x14fe7
ffff80000080a35f:	00 00 00 
ffff80000080a362:	4c 01 d8             	add    rax,r11
ffff80000080a365:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff80000080a368:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
ffff80000080a36b:	89 d6                	mov    esi,edx
ffff80000080a36d:	89 ca                	mov    edx,ecx
ffff80000080a36f:	89 f1                	mov    ecx,esi
ffff80000080a371:	66 89 4d e4          	mov    WORD PTR [rbp-0x1c],cx
ffff80000080a375:	66 89 55 e0          	mov    WORD PTR [rbp-0x20],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:26
    gate* ptr=gdt;
ffff80000080a379:	48 ba d0 fd ff ff ff 	movabs rdx,0xfffffffffffffdd0
ffff80000080a380:	ff ff ff 
ffff80000080a383:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080a387:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a38a:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:27
    ptr[index].offset_low=offset&0xffff;
ffff80000080a38e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080a391:	48 c1 e0 04          	shl    rax,0x4
ffff80000080a395:	48 89 c2             	mov    rdx,rax
ffff80000080a398:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080a39c:	48 01 d0             	add    rax,rdx
ffff80000080a39f:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff80000080a3a2:	66 89 10             	mov    WORD PTR [rax],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:28
    ptr[index].offset_high=(offset>>16)&0xffff;
ffff80000080a3a5:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080a3a8:	48 c1 e0 04          	shl    rax,0x4
ffff80000080a3ac:	48 89 c2             	mov    rdx,rax
ffff80000080a3af:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080a3b3:	48 01 d0             	add    rax,rdx
ffff80000080a3b6:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff80000080a3b9:	c1 ea 10             	shr    edx,0x10
ffff80000080a3bc:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:29
    ptr[index].selector=selector;
ffff80000080a3bf:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080a3c2:	48 c1 e0 04          	shl    rax,0x4
ffff80000080a3c6:	48 89 c2             	mov    rdx,rax
ffff80000080a3c9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080a3cd:	48 01 c2             	add    rdx,rax
ffff80000080a3d0:	0f b7 45 e4          	movzx  eax,WORD PTR [rbp-0x1c]
ffff80000080a3d4:	66 89 42 02          	mov    WORD PTR [rdx+0x2],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:30
    ptr[index].attr=attr;
ffff80000080a3d8:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080a3db:	48 c1 e0 04          	shl    rax,0x4
ffff80000080a3df:	48 89 c2             	mov    rdx,rax
ffff80000080a3e2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080a3e6:	48 01 c2             	add    rdx,rax
ffff80000080a3e9:	0f b7 45 e0          	movzx  eax,WORD PTR [rbp-0x20]
ffff80000080a3ed:	66 89 42 04          	mov    WORD PTR [rdx+0x4],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:31
}
ffff80000080a3f1:	90                   	nop
ffff80000080a3f2:	5d                   	pop    rbp
ffff80000080a3f3:	c3                   	ret    

ffff80000080a3f4 <fill_ldt_desc>:
fill_ldt_desc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:34

void fill_ldt_desc(u32 base, u32 limit,u16 attr,descriptor *desc)
{
ffff80000080a3f4:	f3 0f 1e fa          	endbr64 
ffff80000080a3f8:	55                   	push   rbp
ffff80000080a3f9:	48 89 e5             	mov    rbp,rsp
ffff80000080a3fc:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080a3fc <fill_ldt_desc+0x8>
ffff80000080a403:	49 bb 3c 4f 01 00 00 	movabs r11,0x14f3c
ffff80000080a40a:	00 00 00 
ffff80000080a40d:	4c 01 d8             	add    rax,r11
ffff80000080a410:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffff80000080a413:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
ffff80000080a416:	89 d0                	mov    eax,edx
ffff80000080a418:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
ffff80000080a41c:	66 89 45 f4          	mov    WORD PTR [rbp-0xc],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:40
//    desc->base_lo16=base&0xffff;
//    desc->base_mid8=(base>>16)&0xff;
//    desc->base_hi8=(base>>24)&0xff;
//    desc->limit_lo16=limit&0xffff;
//    desc->attr=attr|(limit>>16&0xf)<<8;
ffff80000080a420:	90                   	nop
ffff80000080a421:	5d                   	pop    rbp
ffff80000080a422:	c3                   	ret    
ffff80000080a423:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffff80000080a42a:	00 00 00 
ffff80000080a42d:	0f 1f 00             	nop    DWORD PTR [rax]

ffff80000080a430 <fill_desc>:
fill_desc():
ffff80000080a430:	67 8b 44 24 04       	mov    eax,DWORD PTR [esp+0x4]
ffff80000080a435:	67 8b 5c 24 08       	mov    ebx,DWORD PTR [esp+0x8]
ffff80000080a43a:	67 8b 4c 24 0c       	mov    ecx,DWORD PTR [esp+0xc]
ffff80000080a43f:	67 8b 54 24 10       	mov    edx,DWORD PTR [esp+0x10]
ffff80000080a444:	be 00 60 00 00       	mov    esi,0x6000
ffff80000080a449:	c1 e2 03             	shl    edx,0x3
ffff80000080a44c:	01 d6                	add    esi,edx
ffff80000080a44e:	66 67 89 1e          	mov    WORD PTR [esi],bx
ffff80000080a452:	66 67 89 46 02       	mov    WORD PTR [esi+0x2],ax
ffff80000080a457:	c1 e8 10             	shr    eax,0x10
ffff80000080a45a:	67 88 46 04          	mov    BYTE PTR [esi+0x4],al
ffff80000080a45e:	c1 eb 10             	shr    ebx,0x10
ffff80000080a461:	67 88 5e 06          	mov    BYTE PTR [esi+0x6],bl
ffff80000080a465:	67 88 66 07          	mov    BYTE PTR [esi+0x7],ah
ffff80000080a469:	67 09 4e 05          	or     DWORD PTR [esi+0x5],ecx
ffff80000080a46d:	c3                   	ret    

ffff80000080a46e <clock_c>:
clock_c():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/clock.c:9
#include <devman.h>
#include <disk.h>
extern int manage_proc_lock;
extern int cur_proc;
extern struct process *task;
void clock_c(){
ffff80000080a46e:	f3 0f 1e fa          	endbr64 
ffff80000080a472:	55                   	push   rbp
ffff80000080a473:	48 89 e5             	mov    rbp,rsp
ffff80000080a476:	41 57                	push   r15
ffff80000080a478:	53                   	push   rbx
ffff80000080a479:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080a479 <clock_c+0xb>
ffff80000080a480:	49 bb bf 4e 01 00 00 	movabs r11,0x14ebf
ffff80000080a487:	00 00 00 
ffff80000080a48a:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/clock.c:11
    //refresh_wnds();
    execute_request();
ffff80000080a48d:	49 89 df             	mov    r15,rbx
ffff80000080a490:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080a495:	48 ba 71 f3 fe ff ff 	movabs rdx,0xfffffffffffef371
ffff80000080a49c:	ff ff ff 
ffff80000080a49f:	48 01 da             	add    rdx,rbx
ffff80000080a4a2:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/clock.c:12
    do_req();
ffff80000080a4a4:	49 89 df             	mov    r15,rbx
ffff80000080a4a7:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080a4ac:	48 ba 73 6f fe ff ff 	movabs rdx,0xfffffffffffe6f73
ffff80000080a4b3:	ff ff ff 
ffff80000080a4b6:	48 01 da             	add    rdx,rbx
ffff80000080a4b9:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/clock.c:13
    if(!manage_proc_lock)
ffff80000080a4bb:	48 b8 48 fd ff ff ff 	movabs rax,0xfffffffffffffd48
ffff80000080a4c2:	ff ff ff 
ffff80000080a4c5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a4c9:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080a4cb:	85 c0                	test   eax,eax
ffff80000080a4cd:	75 17                	jne    ffff80000080a4e6 <clock_c+0x78>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/clock.c:15
    {
        manage_proc();
ffff80000080a4cf:	49 89 df             	mov    r15,rbx
ffff80000080a4d2:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080a4d7:	48 ba 19 7c fe ff ff 	movabs rdx,0xfffffffffffe7c19
ffff80000080a4de:	ff ff ff 
ffff80000080a4e1:	48 01 da             	add    rdx,rbx
ffff80000080a4e4:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/clock.c:18
    }
    //puts("1 disk req executed.");
ffff80000080a4e6:	90                   	nop
ffff80000080a4e7:	5b                   	pop    rbx
ffff80000080a4e8:	41 5f                	pop    r15
ffff80000080a4ea:	5d                   	pop    rbp
ffff80000080a4eb:	c3                   	ret    
ffff80000080a4ec:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

ffff80000080a4f0 <clock>:
clock():
ffff80000080a4f0:	50                   	push   rax
ffff80000080a4f1:	53                   	push   rbx
ffff80000080a4f2:	51                   	push   rcx
ffff80000080a4f3:	52                   	push   rdx
ffff80000080a4f4:	57                   	push   rdi
ffff80000080a4f5:	56                   	push   rsi
ffff80000080a4f6:	41 50                	push   r8
ffff80000080a4f8:	41 51                	push   r9
ffff80000080a4fa:	41 52                	push   r10
ffff80000080a4fc:	41 53                	push   r11
ffff80000080a4fe:	41 54                	push   r12
ffff80000080a500:	41 55                	push   r13
ffff80000080a502:	41 56                	push   r14
ffff80000080a504:	41 57                	push   r15
ffff80000080a506:	e8 fa c9 ff ff       	call   ffff800000806f05 <save_rsp>
ffff80000080a50b:	66 8c c0             	mov    ax,es
ffff80000080a50e:	50                   	push   rax
ffff80000080a50f:	66 8c d8             	mov    ax,ds
ffff80000080a512:	50                   	push   rax
ffff80000080a513:	66 b8 10 00          	mov    ax,0x10
ffff80000080a517:	8e c0                	mov    es,eax
ffff80000080a519:	8e d8                	mov    ds,eax

ffff80000080a51b <clock.normal_part>:
clock.normal_part():
ffff80000080a51b:	b0 20                	mov    al,0x20
ffff80000080a51d:	e6 a0                	out    0xa0,al
ffff80000080a51f:	e6 20                	out    0x20,al
ffff80000080a521:	e8 48 ff ff ff       	call   ffff80000080a46e <clock_c>
ffff80000080a526:	58                   	pop    rax
ffff80000080a527:	8e d8                	mov    ds,eax
ffff80000080a529:	58                   	pop    rax
ffff80000080a52a:	8e c0                	mov    es,eax
ffff80000080a52c:	41 5f                	pop    r15
ffff80000080a52e:	41 5e                	pop    r14
ffff80000080a530:	41 5d                	pop    r13
ffff80000080a532:	41 5c                	pop    r12
ffff80000080a534:	41 5b                	pop    r11
ffff80000080a536:	41 5a                	pop    r10
ffff80000080a538:	41 59                	pop    r9
ffff80000080a53a:	41 58                	pop    r8
ffff80000080a53c:	5e                   	pop    rsi
ffff80000080a53d:	5f                   	pop    rdi
ffff80000080a53e:	5a                   	pop    rdx
ffff80000080a53f:	59                   	pop    rcx
ffff80000080a540:	5b                   	pop    rbx
ffff80000080a541:	58                   	pop    rax
ffff80000080a542:	48 cf                	iretq  

ffff80000080a544 <execute>:
execute():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:116
    return ind;
}
*/

int execute(char *path, char **argv)
{
ffff80000080a544:	f3 0f 1e fa          	endbr64 
ffff80000080a548:	55                   	push   rbp
ffff80000080a549:	48 89 e5             	mov    rbp,rsp
ffff80000080a54c:	41 57                	push   r15
ffff80000080a54e:	53                   	push   rbx
ffff80000080a54f:	48 83 ec 30          	sub    rsp,0x30
ffff80000080a553:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080a553 <execute+0xf>
ffff80000080a55a:	49 bb e5 4d 01 00 00 	movabs r11,0x14de5
ffff80000080a561:	00 00 00 
ffff80000080a564:	4c 01 db             	add    rbx,r11
ffff80000080a567:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff80000080a56b:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:119
    //尚未切换到目标进程
    //syscall(SYSCALL_REG_PROC, load_pe,0,0,0,0);
    int fno=-1,cwd_fno=-1;
ffff80000080a56f:	c7 45 dc ff ff ff ff 	mov    DWORD PTR [rbp-0x24],0xffffffff
ffff80000080a576:	c7 45 ec ff ff ff ff 	mov    DWORD PTR [rbp-0x14],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:120
    if((fno=sys_open(path, O_EXEC)) <0)return -1;
ffff80000080a57d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080a581:	be 00 10 00 00       	mov    esi,0x1000
ffff80000080a586:	48 89 c7             	mov    rdi,rax
ffff80000080a589:	49 89 df             	mov    r15,rbx
ffff80000080a58c:	48 b8 16 d6 fe ff ff 	movabs rax,0xfffffffffffed616
ffff80000080a593:	ff ff ff 
ffff80000080a596:	48 01 d8             	add    rax,rbx
ffff80000080a599:	ff d0                	call   rax
ffff80000080a59b:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
ffff80000080a59e:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
ffff80000080a5a2:	79 0a                	jns    ffff80000080a5ae <execute+0x6a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:120 (discriminator 1)
ffff80000080a5a4:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080a5a9:	e9 f2 00 00 00       	jmp    ffff80000080a6a0 <execute+0x15c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:122
    //
    char *p=path;
ffff80000080a5ae:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080a5b2:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:123
    for(;*p!='\0';p++);
ffff80000080a5b6:	eb 05                	jmp    ffff80000080a5bd <execute+0x79>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:123 (discriminator 2)
ffff80000080a5b8:	48 83 45 e0 01       	add    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:123 (discriminator 1)
ffff80000080a5bd:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080a5c1:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080a5c4:	84 c0                	test   al,al
ffff80000080a5c6:	75 f0                	jne    ffff80000080a5b8 <execute+0x74>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:124
    for(;*p!='/'&&p>path;p--);
ffff80000080a5c8:	eb 05                	jmp    ffff80000080a5cf <execute+0x8b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:124 (discriminator 3)
ffff80000080a5ca:	48 83 6d e0 01       	sub    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:124 (discriminator 1)
ffff80000080a5cf:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080a5d3:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080a5d6:	3c 2f                	cmp    al,0x2f
ffff80000080a5d8:	74 0a                	je     ffff80000080a5e4 <execute+0xa0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:124 (discriminator 2)
ffff80000080a5da:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080a5de:	48 3b 45 c8          	cmp    rax,QWORD PTR [rbp-0x38]
ffff80000080a5e2:	77 e6                	ja     ffff80000080a5ca <execute+0x86>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:125
    if(p>path)
ffff80000080a5e4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080a5e8:	48 3b 45 c8          	cmp    rax,QWORD PTR [rbp-0x38]
ffff80000080a5ec:	76 3c                	jbe    ffff80000080a62a <execute+0xe6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:127
    {
        *p='\0';
ffff80000080a5ee:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080a5f2:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:128
        if((cwd_fno=sys_open(path, O_DIRECTORY)) <0)return -1;
ffff80000080a5f5:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080a5f9:	be 00 40 00 00       	mov    esi,0x4000
ffff80000080a5fe:	48 89 c7             	mov    rdi,rax
ffff80000080a601:	49 89 df             	mov    r15,rbx
ffff80000080a604:	48 b8 16 d6 fe ff ff 	movabs rax,0xfffffffffffed616
ffff80000080a60b:	ff ff ff 
ffff80000080a60e:	48 01 d8             	add    rax,rbx
ffff80000080a611:	ff d0                	call   rax
ffff80000080a613:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
ffff80000080a616:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff80000080a61a:	79 07                	jns    ffff80000080a623 <execute+0xdf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:128 (discriminator 1)
ffff80000080a61c:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080a621:	eb 7d                	jmp    ffff80000080a6a0 <execute+0x15c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:129
        *p='/';
ffff80000080a623:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080a627:	c6 00 2f             	mov    BYTE PTR [rax],0x2f
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:133
    }
    extern struct file opened[];
    extern struct process task[];
    int pi= reg_proc(proc_start, &opened[cwd_fno], &opened[fno]);
ffff80000080a62a:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080a62d:	48 63 d0             	movsxd rdx,eax
ffff80000080a630:	48 89 d0             	mov    rax,rdx
ffff80000080a633:	48 c1 e0 02          	shl    rax,0x2
ffff80000080a637:	48 01 d0             	add    rax,rdx
ffff80000080a63a:	48 c1 e0 03          	shl    rax,0x3
ffff80000080a63e:	48 ba 00 ff ff ff ff 	movabs rdx,0xffffffffffffff00
ffff80000080a645:	ff ff ff 
ffff80000080a648:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080a64c:	48 01 c2             	add    rdx,rax
ffff80000080a64f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080a652:	48 63 c8             	movsxd rcx,eax
ffff80000080a655:	48 89 c8             	mov    rax,rcx
ffff80000080a658:	48 c1 e0 02          	shl    rax,0x2
ffff80000080a65c:	48 01 c8             	add    rax,rcx
ffff80000080a65f:	48 c1 e0 03          	shl    rax,0x3
ffff80000080a663:	48 b9 00 ff ff ff ff 	movabs rcx,0xffffffffffffff00
ffff80000080a66a:	ff ff ff 
ffff80000080a66d:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff80000080a671:	48 01 c8             	add    rax,rcx
ffff80000080a674:	48 b9 a8 ff ff ff ff 	movabs rcx,0xffffffffffffffa8
ffff80000080a67b:	ff ff ff 
ffff80000080a67e:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff80000080a682:	48 89 c6             	mov    rsi,rax
ffff80000080a685:	48 89 cf             	mov    rdi,rcx
ffff80000080a688:	49 89 df             	mov    r15,rbx
ffff80000080a68b:	48 b8 f8 88 fe ff ff 	movabs rax,0xfffffffffffe88f8
ffff80000080a692:	ff ff ff 
ffff80000080a695:	48 01 d8             	add    rax,rbx
ffff80000080a698:	ff d0                	call   rax
ffff80000080a69a:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:134
    return pi;
ffff80000080a69d:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:135
}
ffff80000080a6a0:	48 83 c4 30          	add    rsp,0x30
ffff80000080a6a4:	5b                   	pop    rbx
ffff80000080a6a5:	41 5f                	pop    r15
ffff80000080a6a7:	5d                   	pop    rbp
ffff80000080a6a8:	c3                   	ret    

ffff80000080a6a9 <sys_execve>:
sys_execve():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:137

int sys_execve(char *path,char **argv){
ffff80000080a6a9:	f3 0f 1e fa          	endbr64 
ffff80000080a6ad:	55                   	push   rbp
ffff80000080a6ae:	48 89 e5             	mov    rbp,rsp
ffff80000080a6b1:	41 57                	push   r15
ffff80000080a6b3:	53                   	push   rbx
ffff80000080a6b4:	48 83 ec 30          	sub    rsp,0x30
ffff80000080a6b8:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080a6b8 <sys_execve+0xf>
ffff80000080a6bf:	49 bb 80 4c 01 00 00 	movabs r11,0x14c80
ffff80000080a6c6:	00 00 00 
ffff80000080a6c9:	4c 01 db             	add    rbx,r11
ffff80000080a6cc:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff80000080a6d0:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:138
    int fno=-1,cwd_fno=-1;
ffff80000080a6d4:	c7 45 ec ff ff ff ff 	mov    DWORD PTR [rbp-0x14],0xffffffff
ffff80000080a6db:	c7 45 e8 ff ff ff ff 	mov    DWORD PTR [rbp-0x18],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:139
    if((fno=sys_open(path, O_EXEC)) <0)return -ENOENT;
ffff80000080a6e2:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080a6e6:	be 00 10 00 00       	mov    esi,0x1000
ffff80000080a6eb:	48 89 c7             	mov    rdi,rax
ffff80000080a6ee:	49 89 df             	mov    r15,rbx
ffff80000080a6f1:	48 b8 16 d6 fe ff ff 	movabs rax,0xfffffffffffed616
ffff80000080a6f8:	ff ff ff 
ffff80000080a6fb:	48 01 d8             	add    rax,rbx
ffff80000080a6fe:	ff d0                	call   rax
ffff80000080a700:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
ffff80000080a703:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff80000080a707:	79 0a                	jns    ffff80000080a713 <sys_execve+0x6a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:139 (discriminator 1)
ffff80000080a709:	b8 d3 ff ff ff       	mov    eax,0xffffffd3
ffff80000080a70e:	e9 19 01 00 00       	jmp    ffff80000080a82c <sys_execve+0x183>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:152
//        if((cwd_fno=sys_open(path, O_DIRECTORY)) <0)return -1;
//        *p='/';
//    }
    extern struct file opened[];
    extern struct process task[];
    if(sys_close(current->exef-opened)<0)return -1;
ffff80000080a713:	48 b8 90 fe ff ff ff 	movabs rax,0xfffffffffffffe90
ffff80000080a71a:	ff ff ff 
ffff80000080a71d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a721:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a724:	48 8b 80 d0 00 00 00 	mov    rax,QWORD PTR [rax+0xd0]
ffff80000080a72b:	48 ba 00 ff ff ff ff 	movabs rdx,0xffffffffffffff00
ffff80000080a732:	ff ff ff 
ffff80000080a735:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080a739:	48 29 d0             	sub    rax,rdx
ffff80000080a73c:	48 c1 f8 03          	sar    rax,0x3
ffff80000080a740:	48 89 c2             	mov    rdx,rax
ffff80000080a743:	48 b8 cd cc cc cc cc 	movabs rax,0xcccccccccccccccd
ffff80000080a74a:	cc cc cc 
ffff80000080a74d:	48 0f af c2          	imul   rax,rdx
ffff80000080a751:	89 c7                	mov    edi,eax
ffff80000080a753:	49 89 df             	mov    r15,rbx
ffff80000080a756:	48 b8 ca dc fe ff ff 	movabs rax,0xfffffffffffedcca
ffff80000080a75d:	ff ff ff 
ffff80000080a760:	48 01 d8             	add    rax,rbx
ffff80000080a763:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:154

    void *retp= load_pe;
ffff80000080a765:	48 b8 80 fd ff ff ff 	movabs rax,0xfffffffffffffd80
ffff80000080a76c:	ff ff ff 
ffff80000080a76f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a773:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:155
    current->exef=&opened[fno];//改变执行文件
ffff80000080a777:	48 b8 90 fe ff ff ff 	movabs rax,0xfffffffffffffe90
ffff80000080a77e:	ff ff ff 
ffff80000080a781:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a785:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080a788:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080a78b:	48 63 c8             	movsxd rcx,eax
ffff80000080a78e:	48 89 c8             	mov    rax,rcx
ffff80000080a791:	48 c1 e0 02          	shl    rax,0x2
ffff80000080a795:	48 01 c8             	add    rax,rcx
ffff80000080a798:	48 c1 e0 03          	shl    rax,0x3
ffff80000080a79c:	48 b9 00 ff ff ff ff 	movabs rcx,0xffffffffffffff00
ffff80000080a7a3:	ff ff ff 
ffff80000080a7a6:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff80000080a7aa:	48 01 c8             	add    rax,rcx
ffff80000080a7ad:	48 89 82 d0 00 00 00 	mov    QWORD PTR [rdx+0xd0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:158
    //重新设置进程数据
    //清空原来的页表
    release_mmap(current);
ffff80000080a7b4:	48 b8 90 fe ff ff ff 	movabs rax,0xfffffffffffffe90
ffff80000080a7bb:	ff ff ff 
ffff80000080a7be:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a7c2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a7c5:	48 89 c7             	mov    rdi,rax
ffff80000080a7c8:	49 89 df             	mov    r15,rbx
ffff80000080a7cb:	48 b8 26 a1 fe ff ff 	movabs rax,0xfffffffffffea126
ffff80000080a7d2:	ff ff ff 
ffff80000080a7d5:	48 01 d8             	add    rax,rbx
ffff80000080a7d8:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:159
    current->regs.rsp=STACK_TOP;//清空栈
ffff80000080a7da:	48 b8 90 fe ff ff ff 	movabs rax,0xfffffffffffffe90
ffff80000080a7e1:	ff ff ff 
ffff80000080a7e4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a7e8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a7eb:	48 be 00 f0 ff ff ff 	movabs rsi,0x7ffffffff000
ffff80000080a7f2:	7f 00 00 
ffff80000080a7f5:	48 89 b0 7c 02 00 00 	mov    QWORD PTR [rax+0x27c],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:162
    extern TSS* tss;
    //sysret直接返回到load_pe加载新程序，然后直接开始运行新程序的main
    stack_store_regs *rs=tss->ists[0]- sizeof(stack_store_regs);
ffff80000080a7fc:	48 b8 18 fe ff ff ff 	movabs rax,0xfffffffffffffe18
ffff80000080a803:	ff ff ff 
ffff80000080a806:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a80a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a80d:	48 8b 40 24          	mov    rax,QWORD PTR [rax+0x24]
ffff80000080a811:	48 2d a8 00 00 00    	sub    rax,0xa8
ffff80000080a817:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:163
    rs->rcx=retp;
ffff80000080a81b:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080a81f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a823:	48 89 50 68          	mov    QWORD PTR [rax+0x68],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:164
    return 0;
ffff80000080a827:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:165
}
ffff80000080a82c:	48 83 c4 30          	add    rsp,0x30
ffff80000080a830:	5b                   	pop    rbx
ffff80000080a831:	41 5f                	pop    r15
ffff80000080a833:	5d                   	pop    rbp
ffff80000080a834:	c3                   	ret    

ffff80000080a835 <exec_call>:
exec_call():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:167
int exec_call(char *path)
{
ffff80000080a835:	f3 0f 1e fa          	endbr64 
ffff80000080a839:	55                   	push   rbp
ffff80000080a83a:	48 89 e5             	mov    rbp,rsp
ffff80000080a83d:	41 57                	push   r15
ffff80000080a83f:	53                   	push   rbx
ffff80000080a840:	48 83 ec 20          	sub    rsp,0x20
ffff80000080a844:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080a844 <exec_call+0xf>
ffff80000080a84b:	49 bb f4 4a 01 00 00 	movabs r11,0x14af4
ffff80000080a852:	00 00 00 
ffff80000080a855:	4c 01 db             	add    rbx,r11
ffff80000080a858:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:168
    int pi= execute(path, NULL);
ffff80000080a85c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080a860:	be 00 00 00 00       	mov    esi,0x0
ffff80000080a865:	48 89 c7             	mov    rdi,rax
ffff80000080a868:	49 89 df             	mov    r15,rbx
ffff80000080a86b:	48 b8 0c b2 fe ff ff 	movabs rax,0xfffffffffffeb20c
ffff80000080a872:	ff ff ff 
ffff80000080a875:	48 01 d8             	add    rax,rbx
ffff80000080a878:	ff d0                	call   rax
ffff80000080a87a:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:169
    int tss= _TSS_IND(pi)*8;
ffff80000080a87d:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080a880:	01 c0                	add    eax,eax
ffff80000080a882:	83 c0 05             	add    eax,0x5
ffff80000080a885:	c1 e0 03             	shl    eax,0x3
ffff80000080a888:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:172
    extern struct process task[];
    extern int cur_proc;
    switch_proc_tss(pi);
ffff80000080a88b:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080a88e:	89 c7                	mov    edi,eax
ffff80000080a890:	49 89 df             	mov    r15,rbx
ffff80000080a893:	48 b8 d5 7e fe ff ff 	movabs rax,0xfffffffffffe7ed5
ffff80000080a89a:	ff ff ff 
ffff80000080a89d:	48 01 d8             	add    rax,rbx
ffff80000080a8a0:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:173
    while(task[pi].stat != TASK_ZOMBIE);
ffff80000080a8a2:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:173 (discriminator 1)
ffff80000080a8a3:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff80000080a8aa:	ff ff ff 
ffff80000080a8ad:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff80000080a8b1:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080a8b4:	48 98                	cdqe   
ffff80000080a8b6:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff80000080a8bd:	48 01 d0             	add    rax,rdx
ffff80000080a8c0:	48 83 c0 10          	add    rax,0x10
ffff80000080a8c4:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080a8c7:	83 f8 04             	cmp    eax,0x4
ffff80000080a8ca:	75 d7                	jne    ffff80000080a8a3 <exec_call+0x6e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:174
    return task[pi].exit_code;
ffff80000080a8cc:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff80000080a8d3:	ff ff ff 
ffff80000080a8d6:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff80000080a8da:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080a8dd:	48 98                	cdqe   
ffff80000080a8df:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff80000080a8e6:	48 01 d0             	add    rax,rdx
ffff80000080a8e9:	48 83 c0 20          	add    rax,0x20
ffff80000080a8ed:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:175
}
ffff80000080a8f0:	48 83 c4 20          	add    rsp,0x20
ffff80000080a8f4:	5b                   	pop    rbx
ffff80000080a8f5:	41 5f                	pop    r15
ffff80000080a8f7:	5d                   	pop    rbp
ffff80000080a8f8:	c3                   	ret    

ffff80000080a8f9 <proc_start>:
proc_start():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:177
int proc_start()
{
ffff80000080a8f9:	f3 0f 1e fa          	endbr64 
ffff80000080a8fd:	55                   	push   rbp
ffff80000080a8fe:	48 89 e5             	mov    rbp,rsp
ffff80000080a901:	41 57                	push   r15
ffff80000080a903:	53                   	push   rbx
ffff80000080a904:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080a904 <proc_start+0xb>
ffff80000080a90b:	49 bb 34 4a 01 00 00 	movabs r11,0x14a34
ffff80000080a912:	00 00 00 
ffff80000080a915:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:180
    extern struct process task[];
    extern int cur_proc;
    load_pe(&task[cur_proc]);
ffff80000080a918:	48 b8 40 fe ff ff ff 	movabs rax,0xfffffffffffffe40
ffff80000080a91f:	ff ff ff 
ffff80000080a922:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a926:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080a928:	48 98                	cdqe   
ffff80000080a92a:	48 69 d0 34 03 00 00 	imul   rdx,rax,0x334
ffff80000080a931:	48 b8 c0 fe ff ff ff 	movabs rax,0xfffffffffffffec0
ffff80000080a938:	ff ff ff 
ffff80000080a93b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a93f:	48 01 d0             	add    rax,rdx
ffff80000080a942:	48 89 c7             	mov    rdi,rax
ffff80000080a945:	49 89 df             	mov    r15,rbx
ffff80000080a948:	48 b8 3c b6 fe ff ff 	movabs rax,0xfffffffffffeb63c
ffff80000080a94f:	ff ff ff 
ffff80000080a952:	48 01 d8             	add    rax,rbx
ffff80000080a955:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:182
    //释放进程资源
    sys_exit(0);
ffff80000080a957:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080a95c:	49 89 df             	mov    r15,rbx
ffff80000080a95f:	48 b8 7e 88 fe ff ff 	movabs rax,0xfffffffffffe887e
ffff80000080a966:	ff ff ff 
ffff80000080a969:	48 01 d8             	add    rax,rbx
ffff80000080a96c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:183
}
ffff80000080a96e:	90                   	nop
ffff80000080a96f:	5b                   	pop    rbx
ffff80000080a970:	41 5f                	pop    r15
ffff80000080a972:	5d                   	pop    rbp
ffff80000080a973:	c3                   	ret    

ffff80000080a974 <load_pe>:
load_pe():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:186
//在cr3切换到目标进程下的加载程序
int load_pe(struct process *proc)
{
ffff80000080a974:	f3 0f 1e fa          	endbr64 
ffff80000080a978:	55                   	push   rbp
ffff80000080a979:	48 89 e5             	mov    rbp,rsp
ffff80000080a97c:	41 57                	push   r15
ffff80000080a97e:	53                   	push   rbx
ffff80000080a97f:	48 81 ec e0 02 00 00 	sub    rsp,0x2e0
ffff80000080a986:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080a986 <load_pe+0x12>
ffff80000080a98d:	49 bb b2 49 01 00 00 	movabs r11,0x149b2
ffff80000080a994:	00 00 00 
ffff80000080a997:	4c 01 db             	add    rbx,r11
ffff80000080a99a:	48 89 bd 18 fd ff ff 	mov    QWORD PTR [rbp-0x2e8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:188
    // 读取文件头
    struct file *f=proc->exef;
ffff80000080a9a1:	48 8b 85 18 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2e8]
ffff80000080a9a8:	48 8b 80 d0 00 00 00 	mov    rax,QWORD PTR [rax+0xd0]
ffff80000080a9af:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:189
    int exefno=-1;
ffff80000080a9b3:	c7 45 ec ff ff ff ff 	mov    DWORD PTR [rbp-0x14],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:190
    for(int i=0;i<MAX_PROC_OPENF;i++)
ffff80000080a9ba:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff80000080a9c1:	eb 32                	jmp    ffff80000080a9f5 <load_pe+0x81>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:191
        if(current->openf[i]==f)
ffff80000080a9c3:	48 b8 90 fe ff ff ff 	movabs rax,0xfffffffffffffe90
ffff80000080a9ca:	ff ff ff 
ffff80000080a9cd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a9d1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a9d4:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff80000080a9d7:	48 63 d2             	movsxd rdx,edx
ffff80000080a9da:	48 83 c2 1a          	add    rdx,0x1a
ffff80000080a9de:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff80000080a9e3:	48 39 45 88          	cmp    QWORD PTR [rbp-0x78],rax
ffff80000080a9e7:	75 08                	jne    ffff80000080a9f1 <load_pe+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:193
        {
            exefno=i;
ffff80000080a9e9:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080a9ec:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:194
            break;
ffff80000080a9ef:	eb 0a                	jmp    ffff80000080a9fb <load_pe+0x87>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:190 (discriminator 2)
    for(int i=0;i<MAX_PROC_OPENF;i++)
ffff80000080a9f1:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:190 (discriminator 1)
ffff80000080a9f5:	83 7d e8 1f          	cmp    DWORD PTR [rbp-0x18],0x1f
ffff80000080a9f9:	7e c8                	jle    ffff80000080a9c3 <load_pe+0x4f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:196
        }
    if(exefno==-1)return ERR;
ffff80000080a9fb:	83 7d ec ff          	cmp    DWORD PTR [rbp-0x14],0xffffffff
ffff80000080a9ff:	75 0a                	jne    ffff80000080aa0b <load_pe+0x97>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:196 (discriminator 1)
ffff80000080aa01:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080aa06:	e9 42 08 00 00       	jmp    ffff80000080b24d <load_pe+0x8d9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:200

    IMAGE_DOS_HEADER tdh;
    IMAGE_NT_HEADERS32 tnth;
    sys_read(exefno, &tdh, sizeof(tdh));
ffff80000080aa0b:	48 8d 8d 50 fe ff ff 	lea    rcx,[rbp-0x1b0]
ffff80000080aa12:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080aa15:	ba 44 00 00 00       	mov    edx,0x44
ffff80000080aa1a:	48 89 ce             	mov    rsi,rcx
ffff80000080aa1d:	89 c7                	mov    edi,eax
ffff80000080aa1f:	49 89 df             	mov    r15,rbx
ffff80000080aa22:	48 b8 c1 dd fe ff ff 	movabs rax,0xfffffffffffeddc1
ffff80000080aa29:	ff ff ff 
ffff80000080aa2c:	48 01 d8             	add    rax,rbx
ffff80000080aa2f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:201
    sys_lseek(exefno,tdh.e_lfanew,SEEK_SET);
ffff80000080aa31:	48 8b 85 8c fe ff ff 	mov    rax,QWORD PTR [rbp-0x174]
ffff80000080aa38:	48 89 c1             	mov    rcx,rax
ffff80000080aa3b:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080aa3e:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080aa43:	48 89 ce             	mov    rsi,rcx
ffff80000080aa46:	89 c7                	mov    edi,eax
ffff80000080aa48:	49 89 df             	mov    r15,rbx
ffff80000080aa4b:	48 b8 5d df fe ff ff 	movabs rax,0xfffffffffffedf5d
ffff80000080aa52:	ff ff ff 
ffff80000080aa55:	48 01 d8             	add    rax,rbx
ffff80000080aa58:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:202
    sys_read(exefno, &tnth, sizeof(tnth));
ffff80000080aa5a:	48 8d 8d 40 fd ff ff 	lea    rcx,[rbp-0x2c0]
ffff80000080aa61:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080aa64:	ba 0c 01 00 00       	mov    edx,0x10c
ffff80000080aa69:	48 89 ce             	mov    rsi,rcx
ffff80000080aa6c:	89 c7                	mov    edi,eax
ffff80000080aa6e:	49 89 df             	mov    r15,rbx
ffff80000080aa71:	48 b8 c1 dd fe ff ff 	movabs rax,0xfffffffffffeddc1
ffff80000080aa78:	ff ff ff 
ffff80000080aa7b:	48 01 d8             	add    rax,rbx
ffff80000080aa7e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:205

    //是否需要移动base(先不检查)
    addr_t nbase=tnth.OptionalHeader.ImageBase;
ffff80000080aa80:	48 8b 85 74 fd ff ff 	mov    rax,QWORD PTR [rbp-0x28c]
ffff80000080aa87:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:206
    int pgn=tnth.OptionalHeader.SizeOfImage/PAGE_SIZE;
ffff80000080aa8b:	8b 85 94 fd ff ff    	mov    eax,DWORD PTR [rbp-0x26c]
ffff80000080aa91:	c1 e8 0c             	shr    eax,0xc
ffff80000080aa94:	89 85 7c ff ff ff    	mov    DWORD PTR [rbp-0x84],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:231
//        break;
//    }

    //proc->tss.eip=tnth.OptionalHeader.AddressOfEntryPoint+nbase;
    //存放文件头
    sys_lseek(exefno,0,SEEK_SET);
ffff80000080aa9a:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080aa9d:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080aaa2:	be 00 00 00 00       	mov    esi,0x0
ffff80000080aaa7:	89 c7                	mov    edi,eax
ffff80000080aaa9:	49 89 df             	mov    r15,rbx
ffff80000080aaac:	48 b8 5d df fe ff ff 	movabs rax,0xfffffffffffedf5d
ffff80000080aab3:	ff ff ff 
ffff80000080aab6:	48 01 d8             	add    rax,rbx
ffff80000080aab9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:232
    sys_read(exefno, nbase, PAGE_SIZE);
ffff80000080aabb:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
ffff80000080aabf:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080aac2:	ba 00 10 00 00       	mov    edx,0x1000
ffff80000080aac7:	48 89 ce             	mov    rsi,rcx
ffff80000080aaca:	89 c7                	mov    edi,eax
ffff80000080aacc:	49 89 df             	mov    r15,rbx
ffff80000080aacf:	48 b8 c1 dd fe ff ff 	movabs rax,0xfffffffffffeddc1
ffff80000080aad6:	ff ff ff 
ffff80000080aad9:	48 01 d8             	add    rax,rbx
ffff80000080aadc:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:234
    //dos头
    PIMAGE_DOS_HEADER dosh=nbase;
ffff80000080aade:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080aae2:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:235
    PIMAGE_NT_HEADERS64 nth=nbase+dosh->e_lfanew;
ffff80000080aae9:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080aaf0:	48 8b 50 3c          	mov    rdx,QWORD PTR [rax+0x3c]
ffff80000080aaf4:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080aaf8:	48 01 d0             	add    rax,rdx
ffff80000080aafb:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:236
    PIMAGE_FILE_HEADER fh=&nth->FileHeader;
ffff80000080ab02:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080ab09:	48 83 c0 04          	add    rax,0x4
ffff80000080ab0d:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:239
    //为新进程分配内存页
    //计算所需的页
    int prog_size=nth->OptionalHeader.SizeOfImage;
ffff80000080ab14:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080ab1b:	8b 40 50             	mov    eax,DWORD PTR [rax+0x50]
ffff80000080ab1e:	89 85 5c ff ff ff    	mov    DWORD PTR [rbp-0xa4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:240
    int page_count=prog_size/4096;
ffff80000080ab24:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
ffff80000080ab2a:	8d 90 ff 0f 00 00    	lea    edx,[rax+0xfff]
ffff80000080ab30:	85 c0                	test   eax,eax
ffff80000080ab32:	0f 48 c2             	cmovs  eax,edx
ffff80000080ab35:	c1 f8 0c             	sar    eax,0xc
ffff80000080ab38:	89 85 58 ff ff ff    	mov    DWORD PTR [rbp-0xa8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:242

    addr_t shell_addr=nth->OptionalHeader.AddressOfEntryPoint+nbase;
ffff80000080ab3e:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080ab45:	8b 40 28             	mov    eax,DWORD PTR [rax+0x28]
ffff80000080ab48:	89 c2                	mov    edx,eax
ffff80000080ab4a:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080ab4e:	48 01 d0             	add    rax,rdx
ffff80000080ab51:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:243
    int page_index_item_count=page_count/1024+page_count%1024==0?0:1;
ffff80000080ab58:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
ffff80000080ab5e:	8d 90 ff 03 00 00    	lea    edx,[rax+0x3ff]
ffff80000080ab64:	85 c0                	test   eax,eax
ffff80000080ab66:	0f 48 c2             	cmovs  eax,edx
ffff80000080ab69:	c1 f8 0a             	sar    eax,0xa
ffff80000080ab6c:	89 c1                	mov    ecx,eax
ffff80000080ab6e:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
ffff80000080ab74:	99                   	cdq    
ffff80000080ab75:	c1 ea 16             	shr    edx,0x16
ffff80000080ab78:	01 d0                	add    eax,edx
ffff80000080ab7a:	25 ff 03 00 00       	and    eax,0x3ff
ffff80000080ab7f:	29 d0                	sub    eax,edx
ffff80000080ab81:	01 c8                	add    eax,ecx
ffff80000080ab83:	85 c0                	test   eax,eax
ffff80000080ab85:	0f 95 c0             	setne  al
ffff80000080ab88:	0f b6 c0             	movzx  eax,al
ffff80000080ab8b:	89 85 4c ff ff ff    	mov    DWORD PTR [rbp-0xb4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:244
    int start_pgind_item=shell_addr/PAGE_INDEX_SIZE;
ffff80000080ab91:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
ffff80000080ab98:	48 c1 e8 15          	shr    rax,0x15
ffff80000080ab9c:	89 85 48 ff ff ff    	mov    DWORD PTR [rbp-0xb8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:247

    //sys_read sections
    PIMAGE_SECTION_HEADER psec=(u32)nth+sizeof(IMAGE_NT_HEADERS32);
ffff80000080aba2:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080aba9:	89 c0                	mov    eax,eax
ffff80000080abab:	48 05 0c 01 00 00    	add    rax,0x10c
ffff80000080abb1:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:249
    int data_start=sizeof(IMAGE_DOS_HEADER)+sizeof(IMAGE_NT_HEADERS32)+\
    nth->FileHeader.NumberOfSections*sizeof(IMAGE_SECTION_HEADER);
ffff80000080abb5:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080abbc:	0f b7 40 06          	movzx  eax,WORD PTR [rax+0x6]
ffff80000080abc0:	0f b7 d0             	movzx  edx,ax
ffff80000080abc3:	89 d0                	mov    eax,edx
ffff80000080abc5:	c1 e0 02             	shl    eax,0x2
ffff80000080abc8:	01 d0                	add    eax,edx
ffff80000080abca:	c1 e0 03             	shl    eax,0x3
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:248
    int data_start=sizeof(IMAGE_DOS_HEADER)+sizeof(IMAGE_NT_HEADERS32)+\
ffff80000080abcd:	05 50 01 00 00       	add    eax,0x150
ffff80000080abd2:	89 85 44 ff ff ff    	mov    DWORD PTR [rbp-0xbc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:250
    int align=nth->OptionalHeader.FileAlignment;
ffff80000080abd8:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080abdf:	8b 40 3c             	mov    eax,DWORD PTR [rax+0x3c]
ffff80000080abe2:	89 85 40 ff ff ff    	mov    DWORD PTR [rbp-0xc0],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:251
    data_start=data_start%align?data_start-data_start%align+align:data_start;
ffff80000080abe8:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
ffff80000080abee:	99                   	cdq    
ffff80000080abef:	f7 bd 40 ff ff ff    	idiv   DWORD PTR [rbp-0xc0]
ffff80000080abf5:	89 d0                	mov    eax,edx
ffff80000080abf7:	85 c0                	test   eax,eax
ffff80000080abf9:	74 23                	je     ffff80000080ac1e <load_pe+0x2aa>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:251 (discriminator 1)
ffff80000080abfb:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
ffff80000080ac01:	99                   	cdq    
ffff80000080ac02:	f7 bd 40 ff ff ff    	idiv   DWORD PTR [rbp-0xc0]
ffff80000080ac08:	89 d1                	mov    ecx,edx
ffff80000080ac0a:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
ffff80000080ac10:	29 c8                	sub    eax,ecx
ffff80000080ac12:	89 c2                	mov    edx,eax
ffff80000080ac14:	8b 85 40 ff ff ff    	mov    eax,DWORD PTR [rbp-0xc0]
ffff80000080ac1a:	01 d0                	add    eax,edx
ffff80000080ac1c:	eb 06                	jmp    ffff80000080ac24 <load_pe+0x2b0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:251 (discriminator 2)
ffff80000080ac1e:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:251 (discriminator 4)
ffff80000080ac24:	89 85 44 ff ff ff    	mov    DWORD PTR [rbp-0xbc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:252 (discriminator 4)
    for(int i=0;i<nth->FileHeader.NumberOfSections;i++,psec++)
ffff80000080ac2a:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
ffff80000080ac31:	e9 85 00 00 00       	jmp    ffff80000080acbb <load_pe+0x347>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:254
    {
        int disca=psec->Characteristics&IMAGE_SCN_MEM_DISCARDABLE;
ffff80000080ac36:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ac3a:	8b 40 24             	mov    eax,DWORD PTR [rax+0x24]
ffff80000080ac3d:	25 00 00 00 02       	and    eax,0x2000000
ffff80000080ac42:	89 85 b0 fe ff ff    	mov    DWORD PTR [rbp-0x150],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:255
        if(disca)
ffff80000080ac48:	83 bd b0 fe ff ff 00 	cmp    DWORD PTR [rbp-0x150],0x0
ffff80000080ac4f:	75 60                	jne    ffff80000080acb1 <load_pe+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:258
            continue;
        //直接读，缺页内核解决
        sys_lseek(exefno,psec->PointerToRawData,SEEK_SET);
ffff80000080ac51:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ac55:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
ffff80000080ac58:	89 c1                	mov    ecx,eax
ffff80000080ac5a:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080ac5d:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080ac62:	48 89 ce             	mov    rsi,rcx
ffff80000080ac65:	89 c7                	mov    edi,eax
ffff80000080ac67:	49 89 df             	mov    r15,rbx
ffff80000080ac6a:	48 b8 5d df fe ff ff 	movabs rax,0xfffffffffffedf5d
ffff80000080ac71:	ff ff ff 
ffff80000080ac74:	48 01 d8             	add    rax,rbx
ffff80000080ac77:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:259
        sys_read(exefno, psec->VirtualAddress + nbase,  psec->SizeOfRawData);
ffff80000080ac79:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ac7d:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff80000080ac80:	89 c2                	mov    edx,eax
ffff80000080ac82:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ac86:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff80000080ac89:	89 c1                	mov    ecx,eax
ffff80000080ac8b:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080ac8f:	48 01 c8             	add    rax,rcx
ffff80000080ac92:	48 89 c1             	mov    rcx,rax
ffff80000080ac95:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080ac98:	48 89 ce             	mov    rsi,rcx
ffff80000080ac9b:	89 c7                	mov    edi,eax
ffff80000080ac9d:	49 89 df             	mov    r15,rbx
ffff80000080aca0:	48 b8 c1 dd fe ff ff 	movabs rax,0xfffffffffffeddc1
ffff80000080aca7:	ff ff ff 
ffff80000080acaa:	48 01 d8             	add    rax,rbx
ffff80000080acad:	ff d0                	call   rax
ffff80000080acaf:	eb 01                	jmp    ffff80000080acb2 <load_pe+0x33e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:256
            continue;
ffff80000080acb1:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:252 (discriminator 2)
    for(int i=0;i<nth->FileHeader.NumberOfSections;i++,psec++)
ffff80000080acb2:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
ffff80000080acb6:	48 83 45 e0 28       	add    QWORD PTR [rbp-0x20],0x28
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:252 (discriminator 1)
ffff80000080acbb:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080acc2:	0f b7 40 06          	movzx  eax,WORD PTR [rax+0x6]
ffff80000080acc6:	0f b7 c0             	movzx  eax,ax
ffff80000080acc9:	39 45 dc             	cmp    DWORD PTR [rbp-0x24],eax
ffff80000080accc:	0f 8c 64 ff ff ff    	jl     ffff80000080ac36 <load_pe+0x2c2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:264

    }

    //通过导入表加载需要的dll
    PIMAGE_DATA_DIRECTORY impd=&nth->OptionalHeader.DataDirectory[1];
ffff80000080acd2:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080acd9:	48 05 90 00 00 00    	add    rax,0x90
ffff80000080acdf:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:265
    if(impd->Size>0)
ffff80000080ace6:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff80000080aced:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff80000080acf0:	85 c0                	test   eax,eax
ffff80000080acf2:	0f 84 bc 02 00 00    	je     ffff80000080afb4 <load_pe+0x640>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:267
    {
        int tmpi=impd->VirtualAddress+nbase;
ffff80000080acf8:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff80000080acff:	8b 10                	mov    edx,DWORD PTR [rax]
ffff80000080ad01:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080ad05:	01 d0                	add    eax,edx
ffff80000080ad07:	89 85 34 ff ff ff    	mov    DWORD PTR [rbp-0xcc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:268
        PIMAGE_IMPORT_DESCRIPTOR impdes=tmpi;
ffff80000080ad0d:	8b 85 34 ff ff ff    	mov    eax,DWORD PTR [rbp-0xcc]
ffff80000080ad13:	48 98                	cdqe   
ffff80000080ad15:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:270
        int dllp;
        while (impdes->Characteristics)
ffff80000080ad19:	e9 88 02 00 00       	jmp    ffff80000080afa6 <load_pe+0x632>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:273
        {
            //加载dll
            char *dllname=impdes->Name+nbase;
ffff80000080ad1e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080ad22:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff80000080ad25:	89 c2                	mov    edx,eax
ffff80000080ad27:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080ad2b:	48 01 d0             	add    rax,rdx
ffff80000080ad2e:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:276
            //此处应有加载dll代码
            int dlli;
            if(strcmp(dllname,"sys.dll")==0)//加载系统dll的部分由内核已经完成
ffff80000080ad35:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
ffff80000080ad3c:	48 ba b7 c6 ff ff ff 	movabs rdx,0xffffffffffffc6b7
ffff80000080ad43:	ff ff ff 
ffff80000080ad46:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff80000080ad4a:	48 89 d6             	mov    rsi,rdx
ffff80000080ad4d:	48 89 c7             	mov    rdi,rax
ffff80000080ad50:	49 89 df             	mov    r15,rbx
ffff80000080ad53:	48 b8 79 41 ff ff ff 	movabs rax,0xffffffffffff4179
ffff80000080ad5a:	ff ff ff 
ffff80000080ad5d:	48 01 d8             	add    rax,rbx
ffff80000080ad60:	ff d0                	call   rax
ffff80000080ad62:	85 c0                	test   eax,eax
ffff80000080ad64:	75 09                	jne    ffff80000080ad6f <load_pe+0x3fb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:278
            {
                dllp=0x1c00000;
ffff80000080ad66:	c7 45 cc 00 00 c0 01 	mov    DWORD PTR [rbp-0x34],0x1c00000
ffff80000080ad6d:	eb 3d                	jmp    ffff80000080adac <load_pe+0x438>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:281
            }else{
                //load_pe要记录module的加载
                dlli= load_pe(proc);
ffff80000080ad6f:	48 8b 85 18 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2e8]
ffff80000080ad76:	48 89 c7             	mov    rdi,rax
ffff80000080ad79:	48 b8 3c b6 fe ff ff 	movabs rax,0xfffffffffffeb63c
ffff80000080ad80:	ff ff ff 
ffff80000080ad83:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080ad87:	ff d0                	call   rax
ffff80000080ad89:	89 85 24 ff ff ff    	mov    DWORD PTR [rbp-0xdc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:284
                //dlli=load_library(dllname);
                //这个是线性地址
                dllp=get_module_addr(dlli);
ffff80000080ad8f:	8b 85 24 ff ff ff    	mov    eax,DWORD PTR [rbp-0xdc]
ffff80000080ad95:	89 c7                	mov    edi,eax
ffff80000080ad97:	49 89 df             	mov    r15,rbx
ffff80000080ad9a:	48 b8 21 bf fe ff ff 	movabs rax,0xfffffffffffebf21
ffff80000080ada1:	ff ff ff 
ffff80000080ada4:	48 01 d8             	add    rax,rbx
ffff80000080ada7:	ff d0                	call   rax
ffff80000080ada9:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:287
            }
            //从线性地址查页表找到物理地址
            PIMAGE_DOS_HEADER dlldos=dllp;
ffff80000080adac:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080adaf:	48 98                	cdqe   
ffff80000080adb1:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:288
            PIMAGE_NT_HEADERS32 dllnth=dllp+dlldos->e_lfanew;
ffff80000080adb8:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080adbb:	48 63 d0             	movsxd rdx,eax
ffff80000080adbe:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
ffff80000080adc5:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff80000080adc9:	48 01 d0             	add    rax,rdx
ffff80000080adcc:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:289
            PIMAGE_EXPORT_DIRECTORY dllexp=(dllnth->OptionalHeader.DataDirectory[0].VirtualAddress+dllp);
ffff80000080add3:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff80000080adda:	8b 90 8c 00 00 00    	mov    edx,DWORD PTR [rax+0x8c]
ffff80000080ade0:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080ade3:	01 d0                	add    eax,edx
ffff80000080ade5:	89 c0                	mov    eax,eax
ffff80000080ade7:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:290
            int funcn=dllexp->NumberOfNames;
ffff80000080adee:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff80000080adf5:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff80000080adf8:	89 85 04 ff ff ff    	mov    DWORD PTR [rbp-0xfc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:291
            char **fnames=dllexp->AddressOfNames+dllp;
ffff80000080adfe:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff80000080ae05:	8b 50 20             	mov    edx,DWORD PTR [rax+0x20]
ffff80000080ae08:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080ae0b:	01 d0                	add    eax,edx
ffff80000080ae0d:	89 c0                	mov    eax,eax
ffff80000080ae0f:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:292
            int *funcaddrs=dllexp->AddressOfFunctions+dllp;
ffff80000080ae16:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff80000080ae1d:	8b 50 1c             	mov    edx,DWORD PTR [rax+0x1c]
ffff80000080ae20:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080ae23:	01 d0                	add    eax,edx
ffff80000080ae25:	89 c0                	mov    eax,eax
ffff80000080ae27:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:293
            short *funcords=dllexp->AddressOfNameOrdinals+dllp;
ffff80000080ae2e:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff80000080ae35:	8b 50 24             	mov    edx,DWORD PTR [rax+0x24]
ffff80000080ae38:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080ae3b:	01 d0                	add    eax,edx
ffff80000080ae3d:	89 c0                	mov    eax,eax
ffff80000080ae3f:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:295
            //寻找nameordinal的base（最小值），里面的数据加上base才是真正的序号
            unsigned int ord_base=dllexp->Base;
ffff80000080ae46:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff80000080ae4d:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff80000080ae50:	89 85 e4 fe ff ff    	mov    DWORD PTR [rbp-0x11c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:297
            //开始将导入表IAT的内容更新为函数地址
            unsigned int *iataddrs=impdes->FirstThunk+nbase;//IAT和INT内容一样，只用IAT
ffff80000080ae56:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080ae5a:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff80000080ae5d:	89 c2                	mov    edx,eax
ffff80000080ae5f:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080ae63:	48 01 d0             	add    rax,rdx
ffff80000080ae66:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:298
            char **siataddrs=impdes->FirstThunk+nbase;
ffff80000080ae6a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080ae6e:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff80000080ae71:	89 c2                	mov    edx,eax
ffff80000080ae73:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080ae77:	48 01 d0             	add    rax,rdx
ffff80000080ae7a:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:299
            while (*iataddrs)
ffff80000080ae7e:	e9 10 01 00 00       	jmp    ffff80000080af93 <load_pe+0x61f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:302
            {
                //判断是序号导入还是名称导入
                if(((unsigned)*iataddrs)&0x80000000)
ffff80000080ae83:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080ae87:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080ae89:	85 c0                	test   eax,eax
ffff80000080ae8b:	79 43                	jns    ffff80000080aed0 <load_pe+0x55c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:305
                {
                    //序号导入
                    unsigned int ord=((*iataddrs)&0x7fffffff)-ord_base;
ffff80000080ae8d:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080ae91:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080ae93:	25 ff ff ff 7f       	and    eax,0x7fffffff
ffff80000080ae98:	2b 85 e4 fe ff ff    	sub    eax,DWORD PTR [rbp-0x11c]
ffff80000080ae9e:	89 85 d0 fe ff ff    	mov    DWORD PTR [rbp-0x130],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:306
                    *iataddrs=funcaddrs[ord]+dllp;
ffff80000080aea4:	8b 85 d0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x130]
ffff80000080aeaa:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff80000080aeb1:	00 
ffff80000080aeb2:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff80000080aeb9:	48 01 d0             	add    rax,rdx
ffff80000080aebc:	8b 10                	mov    edx,DWORD PTR [rax]
ffff80000080aebe:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080aec1:	01 d0                	add    eax,edx
ffff80000080aec3:	89 c2                	mov    edx,eax
ffff80000080aec5:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080aec9:	89 10                	mov    DWORD PTR [rax],edx
ffff80000080aecb:	e9 b9 00 00 00       	jmp    ffff80000080af89 <load_pe+0x615>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:310
                }else
                {
                    //名称导入
                    char *import_by_name_p=*iataddrs;//指向IMPORT_BY_NAME
ffff80000080aed0:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080aed4:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080aed6:	89 c0                	mov    eax,eax
ffff80000080aed8:	48 89 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:311
                    import_by_name_p+=2;//跳过开头两字节序号
ffff80000080aedf:	48 83 85 d8 fe ff ff 	add    QWORD PTR [rbp-0x128],0x2
ffff80000080aee6:	02 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:312
                    int i=0;
ffff80000080aee7:	c7 45 b4 00 00 00 00 	mov    DWORD PTR [rbp-0x4c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:313
                    for(;i<funcn;i++)
ffff80000080aeee:	e9 87 00 00 00       	jmp    ffff80000080af7a <load_pe+0x606>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:315
                    {
                        if(strcmp(import_by_name_p,fnames[i])==0)
ffff80000080aef3:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffff80000080aef6:	48 98                	cdqe   
ffff80000080aef8:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080aeff:	00 
ffff80000080af00:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff80000080af07:	48 01 d0             	add    rax,rdx
ffff80000080af0a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080af0d:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
ffff80000080af14:	48 89 d6             	mov    rsi,rdx
ffff80000080af17:	48 89 c7             	mov    rdi,rax
ffff80000080af1a:	49 89 df             	mov    r15,rbx
ffff80000080af1d:	48 b8 79 41 ff ff ff 	movabs rax,0xffffffffffff4179
ffff80000080af24:	ff ff ff 
ffff80000080af27:	48 01 d8             	add    rax,rbx
ffff80000080af2a:	ff d0                	call   rax
ffff80000080af2c:	85 c0                	test   eax,eax
ffff80000080af2e:	75 46                	jne    ffff80000080af76 <load_pe+0x602>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:317
                        {
                            int ordi=funcords[i];
ffff80000080af30:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffff80000080af33:	48 98                	cdqe   
ffff80000080af35:	48 8d 14 00          	lea    rdx,[rax+rax*1]
ffff80000080af39:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
ffff80000080af40:	48 01 d0             	add    rax,rdx
ffff80000080af43:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff80000080af46:	98                   	cwde   
ffff80000080af47:	89 85 d4 fe ff ff    	mov    DWORD PTR [rbp-0x12c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:318
                            *iataddrs=funcaddrs[ordi]+dllp;//导入表中的IAT内容修改成地址
ffff80000080af4d:	8b 85 d4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x12c]
ffff80000080af53:	48 98                	cdqe   
ffff80000080af55:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff80000080af5c:	00 
ffff80000080af5d:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff80000080af64:	48 01 d0             	add    rax,rdx
ffff80000080af67:	8b 10                	mov    edx,DWORD PTR [rax]
ffff80000080af69:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080af6c:	01 d0                	add    eax,edx
ffff80000080af6e:	89 c2                	mov    edx,eax
ffff80000080af70:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080af74:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:313
                    for(;i<funcn;i++)
ffff80000080af76:	83 45 b4 01          	add    DWORD PTR [rbp-0x4c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:313 (discriminator 1)
ffff80000080af7a:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffff80000080af7d:	3b 85 04 ff ff ff    	cmp    eax,DWORD PTR [rbp-0xfc]
ffff80000080af83:	0f 8c 6a ff ff ff    	jl     ffff80000080aef3 <load_pe+0x57f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:322
                        }
                    }
                }
                iataddrs++;
ffff80000080af89:	48 83 45 c0 04       	add    QWORD PTR [rbp-0x40],0x4
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:323
                siataddrs++;
ffff80000080af8e:	48 83 45 b8 08       	add    QWORD PTR [rbp-0x48],0x8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:299
            while (*iataddrs)
ffff80000080af93:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080af97:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080af99:	85 c0                	test   eax,eax
ffff80000080af9b:	0f 85 e2 fe ff ff    	jne    ffff80000080ae83 <load_pe+0x50f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:325
            }
            impdes++;
ffff80000080afa1:	48 83 45 d0 14       	add    QWORD PTR [rbp-0x30],0x14
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:270
        while (impdes->Characteristics)
ffff80000080afa6:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080afaa:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080afac:	85 c0                	test   eax,eax
ffff80000080afae:	0f 85 6a fd ff ff    	jne    ffff80000080ad1e <load_pe+0x3aa>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:332
        }
    }


    //开始重定位
    PIMAGE_BASE_RELOCATION relp=0;
ffff80000080afb4:	48 c7 45 a8 00 00 00 	mov    QWORD PTR [rbp-0x58],0x0
ffff80000080afbb:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:333
    if(nth->OptionalHeader.DataDirectory[5].Size>0)
ffff80000080afbc:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080afc3:	8b 80 b4 00 00 00    	mov    eax,DWORD PTR [rax+0xb4]
ffff80000080afc9:	85 c0                	test   eax,eax
ffff80000080afcb:	0f 84 ec 00 00 00    	je     ffff80000080b0bd <load_pe+0x749>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:335
    {
        relp=(u32)(nth->OptionalHeader.DataDirectory[5].VirtualAddress\
ffff80000080afd1:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080afd8:	8b 90 b0 00 00 00    	mov    edx,DWORD PTR [rax+0xb0]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:336
                                +(u32)nbase);
ffff80000080afde:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:335
        relp=(u32)(nth->OptionalHeader.DataDirectory[5].VirtualAddress\
ffff80000080afe2:	01 d0                	add    eax,edx
ffff80000080afe4:	89 c0                	mov    eax,eax
ffff80000080afe6:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:337
        u16 *reloc=relp+sizeof(IMAGE_BASE_RELOCATION);
ffff80000080afea:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080afee:	48 83 c0 40          	add    rax,0x40
ffff80000080aff2:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:338
        u16 *rtype=reloc+1;
ffff80000080aff6:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080affa:	48 83 c0 02          	add    rax,0x2
ffff80000080affe:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:339
        int old_base=nth->OptionalHeader.ImageBase;
ffff80000080b002:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080b009:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff80000080b00d:	89 85 cc fe ff ff    	mov    DWORD PTR [rbp-0x134],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:340
        while(relp->VirtualAddress){
ffff80000080b013:	e9 97 00 00 00       	jmp    ffff80000080b0af <load_pe+0x73b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:341
            int pgva=relp->VirtualAddress+nbase;
ffff80000080b018:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080b01c:	8b 10                	mov    edx,DWORD PTR [rax]
ffff80000080b01e:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080b022:	01 d0                	add    eax,edx
ffff80000080b024:	89 85 c8 fe ff ff    	mov    DWORD PTR [rbp-0x138],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:342
            for(int i=0;i<relp->SizeOfBlock/4;i++)
ffff80000080b02a:	c7 45 94 00 00 00 00 	mov    DWORD PTR [rbp-0x6c],0x0
ffff80000080b031:	eb 5a                	jmp    ffff80000080b08d <load_pe+0x719>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:344
            {
                if(*rtype==IMAGE_REL_BASED_ABSOLUTE)continue;//不用重定位
ffff80000080b033:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080b037:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff80000080b03a:	66 85 c0             	test   ax,ax
ffff80000080b03d:	74 49                	je     ffff80000080b088 <load_pe+0x714>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:345
                int *at=*reloc+pgva;//要重定位的数据的地址
ffff80000080b03f:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080b043:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff80000080b046:	0f b7 d0             	movzx  edx,ax
ffff80000080b049:	8b 85 c8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x138]
ffff80000080b04f:	01 d0                	add    eax,edx
ffff80000080b051:	48 98                	cdqe   
ffff80000080b053:	48 89 85 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:346
                *at=*at-old_base+nbase;
ffff80000080b05a:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
ffff80000080b061:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080b063:	2b 85 cc fe ff ff    	sub    eax,DWORD PTR [rbp-0x134]
ffff80000080b069:	89 c2                	mov    edx,eax
ffff80000080b06b:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080b06f:	01 d0                	add    eax,edx
ffff80000080b071:	89 c2                	mov    edx,eax
ffff80000080b073:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
ffff80000080b07a:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:348
                //下一个
                reloc+=2;
ffff80000080b07c:	48 83 45 a0 04       	add    QWORD PTR [rbp-0x60],0x4
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:349
                rtype+=2;
ffff80000080b081:	48 83 45 98 04       	add    QWORD PTR [rbp-0x68],0x4
ffff80000080b086:	eb 01                	jmp    ffff80000080b089 <load_pe+0x715>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:344
                if(*rtype==IMAGE_REL_BASED_ABSOLUTE)continue;//不用重定位
ffff80000080b088:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:342 (discriminator 2)
            for(int i=0;i<relp->SizeOfBlock/4;i++)
ffff80000080b089:	83 45 94 01          	add    DWORD PTR [rbp-0x6c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:342 (discriminator 1)
ffff80000080b08d:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080b091:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff80000080b094:	c1 e8 02             	shr    eax,0x2
ffff80000080b097:	89 c2                	mov    edx,eax
ffff80000080b099:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
ffff80000080b09c:	39 c2                	cmp    edx,eax
ffff80000080b09e:	77 93                	ja     ffff80000080b033 <load_pe+0x6bf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:351
            }
            relp=(int)relp+0x1000;
ffff80000080b0a0:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080b0a4:	05 00 10 00 00       	add    eax,0x1000
ffff80000080b0a9:	48 98                	cdqe   
ffff80000080b0ab:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:340
        while(relp->VirtualAddress){
ffff80000080b0af:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080b0b3:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080b0b5:	85 c0                	test   eax,eax
ffff80000080b0b7:	0f 85 5b ff ff ff    	jne    ffff80000080b018 <load_pe+0x6a4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:357
        }
    }
    extern struct process task[];
    extern int cur_proc;
    //初始化堆
    chunk_header hdrtmp={
ffff80000080b0bd:	c7 85 20 fd ff ff 00 	mov    DWORD PTR [rbp-0x2e0],0x0
ffff80000080b0c4:	00 00 00 
ffff80000080b0c7:	c7 85 24 fd ff ff 00 	mov    DWORD PTR [rbp-0x2dc],0x0
ffff80000080b0ce:	00 00 00 
ffff80000080b0d1:	48 c7 85 28 fd ff ff 	mov    QWORD PTR [rbp-0x2d8],0x0
ffff80000080b0d8:	00 00 00 00 
ffff80000080b0dc:	48 c7 85 30 fd ff ff 	mov    QWORD PTR [rbp-0x2d0],0x0
ffff80000080b0e3:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:364
            .next=NULL,
            .pgn=0,
            .prev=NULL
    };//空堆
    //拷贝触发页中断然后分配
    memcpy((chunk_header*)HEAP_BASE,&hdrtmp,sizeof(hdrtmp));
ffff80000080b0e7:	48 8d 85 20 fd ff ff 	lea    rax,[rbp-0x2e0]
ffff80000080b0ee:	ba 18 00 00 00       	mov    edx,0x18
ffff80000080b0f3:	48 89 c6             	mov    rsi,rax
ffff80000080b0f6:	bf 00 00 00 01       	mov    edi,0x1000000
ffff80000080b0fb:	49 89 df             	mov    r15,rbx
ffff80000080b0fe:	48 b8 27 3e ff ff ff 	movabs rax,0xffffffffffff3e27
ffff80000080b105:	ff ff ff 
ffff80000080b108:	48 01 d8             	add    rax,rbx
ffff80000080b10b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:365
    task[cur_proc].mem_struct.heap_base=HEAP_BASE;
ffff80000080b10d:	48 b8 40 fe ff ff ff 	movabs rax,0xfffffffffffffe40
ffff80000080b114:	ff ff ff 
ffff80000080b117:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b11b:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080b11d:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff80000080b124:	ff ff ff 
ffff80000080b127:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080b12b:	48 98                	cdqe   
ffff80000080b12d:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff80000080b134:	48 01 d0             	add    rax,rdx
ffff80000080b137:	48 83 c0 20          	add    rax,0x20
ffff80000080b13b:	c7 40 08 00 00 00 01 	mov    DWORD PTR [rax+0x8],0x1000000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:366
    task[cur_proc].mem_struct.heap_top=HEAP_BASE+CHUNK_SIZE;
ffff80000080b142:	48 b8 40 fe ff ff ff 	movabs rax,0xfffffffffffffe40
ffff80000080b149:	ff ff ff 
ffff80000080b14c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b150:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080b152:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff80000080b159:	ff ff ff 
ffff80000080b15c:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080b160:	48 98                	cdqe   
ffff80000080b162:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff80000080b169:	48 01 d0             	add    rax,rdx
ffff80000080b16c:	48 83 c0 20          	add    rax,0x20
ffff80000080b170:	c7 40 0c 00 10 00 01 	mov    DWORD PTR [rax+0xc],0x1001000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:368
    //设置栈
    task[cur_proc].mem_struct.stack_top=STACK_TOP;
ffff80000080b177:	48 b8 40 fe ff ff ff 	movabs rax,0xfffffffffffffe40
ffff80000080b17e:	ff ff ff 
ffff80000080b181:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b185:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080b187:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff80000080b18e:	ff ff ff 
ffff80000080b191:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080b195:	48 98                	cdqe   
ffff80000080b197:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
ffff80000080b19e:	48 01 d0             	add    rax,rdx
ffff80000080b1a1:	48 83 c0 20          	add    rax,0x20
ffff80000080b1a5:	c7 40 14 00 f0 ff ff 	mov    DWORD PTR [rax+0x14],0xfffff000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:375


    //完毕,调用入口函数
    //重定位完毕，准备调用DllMain
    typedef int (*Main)(int,void*);
    Main main=shell_addr;
ffff80000080b1ac:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
ffff80000080b1b3:	48 89 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:376
    int ecode=main(0,NULL);
ffff80000080b1ba:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
ffff80000080b1c1:	be 00 00 00 00       	mov    esi,0x0
ffff80000080b1c6:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080b1cb:	ff d0                	call   rax
ffff80000080b1cd:	89 85 b4 fe ff ff    	mov    DWORD PTR [rbp-0x14c],eax
ffff80000080b1d3:	c7 85 ac fe ff ff 14 	mov    DWORD PTR [rbp-0x154],0x14
ffff80000080b1da:	00 00 00 
ffff80000080b1dd:	8b 85 b4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x14c]
ffff80000080b1e3:	89 85 a8 fe ff ff    	mov    DWORD PTR [rbp-0x158],eax
ffff80000080b1e9:	c7 85 a4 fe ff ff 00 	mov    DWORD PTR [rbp-0x15c],0x0
ffff80000080b1f0:	00 00 00 
ffff80000080b1f3:	c7 85 a0 fe ff ff 00 	mov    DWORD PTR [rbp-0x160],0x0
ffff80000080b1fa:	00 00 00 
ffff80000080b1fd:	c7 85 9c fe ff ff 00 	mov    DWORD PTR [rbp-0x164],0x0
ffff80000080b204:	00 00 00 
ffff80000080b207:	c7 85 98 fe ff ff 00 	mov    DWORD PTR [rbp-0x168],0x0
ffff80000080b20e:	00 00 00 
ffff80000080b211:	c7 85 94 fe ff ff 00 	mov    DWORD PTR [rbp-0x16c],0x0
ffff80000080b218:	00 00 00 
do_syscall():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:184
    unsigned int argv;
    unsigned int argc;
}proc_ret_stack;

__attribute__((__always_inline__))inline int do_syscall(int func,int a1,int a2,int a3,int a4,int a5,int a6){
        asm volatile(".byte 0x48\n"
ffff80000080b21b:	8b 85 ac fe ff ff    	mov    eax,DWORD PTR [rbp-0x154]
ffff80000080b221:	8b bd a8 fe ff ff    	mov    edi,DWORD PTR [rbp-0x158]
ffff80000080b227:	8b b5 a4 fe ff ff    	mov    esi,DWORD PTR [rbp-0x15c]
ffff80000080b22d:	8b 95 a0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x160]
ffff80000080b233:	8b 8d 9c fe ff ff    	mov    ecx,DWORD PTR [rbp-0x164]
ffff80000080b239:	44 8b 85 98 fe ff ff 	mov    r8d,DWORD PTR [rbp-0x168]
ffff80000080b240:	44 8b 8d 94 fe ff ff 	mov    r9d,DWORD PTR [rbp-0x16c]
ffff80000080b247:	48 0f 05             	rex.W syscall 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:186
                 "syscall"::"a"(func),"D"(a1),"S"(a2),"d"(a3),"c"(a4),"r"(a5),"r"(a6));
}
ffff80000080b24a:	90                   	nop
load_pe():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:380 (discriminator 1)
    do_syscall(SYSCALL_EXIT,ecode,0,0,0,0,0);
    //
    //不应该执行到这
    while(1);
ffff80000080b24b:	eb fe                	jmp    ffff80000080b24b <load_pe+0x8d7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:382 (discriminator 2)
    return task[cur_proc].exit_code;
}
ffff80000080b24d:	48 81 c4 e0 02 00 00 	add    rsp,0x2e0
ffff80000080b254:	5b                   	pop    rbx
ffff80000080b255:	41 5f                	pop    r15
ffff80000080b257:	5d                   	pop    rbp
ffff80000080b258:	c3                   	ret    

ffff80000080b259 <get_module_addr>:
get_module_addr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:385

int get_module_addr(int mi)
{
ffff80000080b259:	f3 0f 1e fa          	endbr64 
ffff80000080b25d:	55                   	push   rbp
ffff80000080b25e:	48 89 e5             	mov    rbp,rsp
ffff80000080b261:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080b261 <get_module_addr+0x8>
ffff80000080b268:	49 bb d7 40 01 00 00 	movabs r11,0x140d7
ffff80000080b26f:	00 00 00 
ffff80000080b272:	4c 01 d8             	add    rax,r11
ffff80000080b275:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:386
    return modules[mi].base;
ffff80000080b278:	48 ba 08 fe ff ff ff 	movabs rdx,0xfffffffffffffe08
ffff80000080b27f:	ff ff ff 
ffff80000080b282:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080b286:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080b289:	48 63 d2             	movsxd rdx,edx
ffff80000080b28c:	8b 04 d0             	mov    eax,DWORD PTR [rax+rdx*8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:387
}
ffff80000080b28f:	5d                   	pop    rbp
ffff80000080b290:	c3                   	ret    

ffff80000080b291 <dispose_library>:
dispose_library():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:389
int dispose_library(int dlln)
{
ffff80000080b291:	f3 0f 1e fa          	endbr64 
ffff80000080b295:	55                   	push   rbp
ffff80000080b296:	48 89 e5             	mov    rbp,rsp
ffff80000080b299:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080b299 <dispose_library+0x8>
ffff80000080b2a0:	49 bb 9f 40 01 00 00 	movabs r11,0x1409f
ffff80000080b2a7:	00 00 00 
ffff80000080b2aa:	4c 01 d8             	add    rax,r11
ffff80000080b2ad:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:390
    if(dlln<0||dlln>=MAX_DLLS)return -1;
ffff80000080b2b0:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
ffff80000080b2b4:	78 09                	js     ffff80000080b2bf <dispose_library+0x2e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:390 (discriminator 2)
ffff80000080b2b6:	81 7d fc ff 00 00 00 	cmp    DWORD PTR [rbp-0x4],0xff
ffff80000080b2bd:	7e 07                	jle    ffff80000080b2c6 <dispose_library+0x35>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:390 (discriminator 3)
ffff80000080b2bf:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080b2c4:	eb 2c                	jmp    ffff80000080b2f2 <dispose_library+0x61>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:395
    //空间不够，释放之前申请的
    // for(int j=0;j<dlls[dlln].page_used;j++)
    //     dispose_page(get_phyaddr(dlls[dlln].page_num[j]));
    //释放dll
    dlls[dlln].flag=DLL_STAT_EMPTY;
ffff80000080b2c6:	48 ba 08 ff ff ff ff 	movabs rdx,0xffffffffffffff08
ffff80000080b2cd:	ff ff ff 
ffff80000080b2d0:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080b2d4:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000080b2d7:	48 98                	cdqe   
ffff80000080b2d9:	48 69 c0 2c 01 00 00 	imul   rax,rax,0x12c
ffff80000080b2e0:	48 01 d0             	add    rax,rdx
ffff80000080b2e3:	48 83 c0 08          	add    rax,0x8
ffff80000080b2e7:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:396
    return 0;
ffff80000080b2ed:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:397
}
ffff80000080b2f2:	5d                   	pop    rbp
ffff80000080b2f3:	c3                   	ret    

ffff80000080b2f4 <sys_insmod>:
sys_insmod():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:445

    return 0;
} */

int sys_insmod(char *path)
{
ffff80000080b2f4:	f3 0f 1e fa          	endbr64 
ffff80000080b2f8:	55                   	push   rbp
ffff80000080b2f9:	48 89 e5             	mov    rbp,rsp
ffff80000080b2fc:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080b2fc <sys_insmod+0x8>
ffff80000080b303:	49 bb 3c 40 01 00 00 	movabs r11,0x1403c
ffff80000080b30a:	00 00 00 
ffff80000080b30d:	4c 01 d8             	add    rax,r11
ffff80000080b310:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:447

}
ffff80000080b314:	90                   	nop
ffff80000080b315:	5d                   	pop    rbp
ffff80000080b316:	c3                   	ret    

ffff80000080b317 <sys_rmmod>:
sys_rmmod():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:449
int sys_rmmod(char *name)
{
ffff80000080b317:	f3 0f 1e fa          	endbr64 
ffff80000080b31b:	55                   	push   rbp
ffff80000080b31c:	48 89 e5             	mov    rbp,rsp
ffff80000080b31f:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080b31f <sys_rmmod+0x8>
ffff80000080b326:	49 bb 19 40 01 00 00 	movabs r11,0x14019
ffff80000080b32d:	00 00 00 
ffff80000080b330:	4c 01 d8             	add    rax,r11
ffff80000080b333:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:451

ffff80000080b337:	90                   	nop
ffff80000080b338:	5d                   	pop    rbp
ffff80000080b339:	c3                   	ret    
ffff80000080b33a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

ffff80000080b340 <_syscall>:
_syscall():
ffff80000080b340:	55                   	push   rbp
ffff80000080b341:	bd 00 80 10 00       	mov    ebp,0x108000
ffff80000080b346:	48 89 65 14          	mov    QWORD PTR [rbp+0x14],rsp
ffff80000080b34a:	48 8b 65 04          	mov    rsp,QWORD PTR [rbp+0x4]
ffff80000080b34e:	50                   	push   rax
ffff80000080b34f:	53                   	push   rbx
ffff80000080b350:	51                   	push   rcx
ffff80000080b351:	52                   	push   rdx
ffff80000080b352:	57                   	push   rdi
ffff80000080b353:	56                   	push   rsi
ffff80000080b354:	41 50                	push   r8
ffff80000080b356:	41 51                	push   r9
ffff80000080b358:	41 52                	push   r10
ffff80000080b35a:	41 53                	push   r11
ffff80000080b35c:	41 54                	push   r12
ffff80000080b35e:	41 55                	push   r13
ffff80000080b360:	41 56                	push   r14
ffff80000080b362:	41 57                	push   r15
ffff80000080b364:	66 8c c0             	mov    ax,es
ffff80000080b367:	50                   	push   rax
ffff80000080b368:	66 8c d8             	mov    ax,ds
ffff80000080b36b:	50                   	push   rax
ffff80000080b36c:	66 b8 10 00          	mov    ax,0x10
ffff80000080b370:	8e c0                	mov    es,eax
ffff80000080b372:	8e d8                	mov    ds,eax
ffff80000080b374:	48 8b 44 24 78       	mov    rax,QWORD PTR [rsp+0x78]
ffff80000080b379:	41 53                	push   r11
ffff80000080b37b:	51                   	push   rcx
ffff80000080b37c:	49 87 ca             	xchg   r10,rcx
ffff80000080b37f:	e8 9d 57 ff ff       	call   ffff800000800b21 <syscall>
ffff80000080b384:	4c 87 d1             	xchg   rcx,r10
ffff80000080b387:	59                   	pop    rcx
ffff80000080b388:	41 5b                	pop    r11
ffff80000080b38a:	48 89 44 24 78       	mov    QWORD PTR [rsp+0x78],rax
ffff80000080b38f:	58                   	pop    rax
ffff80000080b390:	8e d8                	mov    ds,eax
ffff80000080b392:	58                   	pop    rax
ffff80000080b393:	8e c0                	mov    es,eax
ffff80000080b395:	41 5f                	pop    r15
ffff80000080b397:	41 5e                	pop    r14
ffff80000080b399:	41 5d                	pop    r13
ffff80000080b39b:	41 5c                	pop    r12
ffff80000080b39d:	41 5b                	pop    r11
ffff80000080b39f:	41 5a                	pop    r10
ffff80000080b3a1:	41 59                	pop    r9
ffff80000080b3a3:	41 58                	pop    r8
ffff80000080b3a5:	5e                   	pop    rsi
ffff80000080b3a6:	5f                   	pop    rdi
ffff80000080b3a7:	5a                   	pop    rdx
ffff80000080b3a8:	59                   	pop    rcx
ffff80000080b3a9:	5b                   	pop    rbx
ffff80000080b3aa:	58                   	pop    rax
ffff80000080b3ab:	48 89 65 04          	mov    QWORD PTR [rbp+0x4],rsp
ffff80000080b3af:	48 8b 65 14          	mov    rsp,QWORD PTR [rbp+0x14]
ffff80000080b3b3:	5d                   	pop    rbp
ffff80000080b3b4:	fb                   	sti    
ffff80000080b3b5:	48 0f 07             	sysretq 

ffff80000080b3b8 <init_framebuffer>:
init_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:27
static u32 font_width_bytes;
static u8 *glyph_table;
static u32 bytes_per_glyph, glyph_nr;
int font_size=1;
void init_framebuffer()
{
ffff80000080b3b8:	f3 0f 1e fa          	endbr64 
ffff80000080b3bc:	55                   	push   rbp
ffff80000080b3bd:	48 89 e5             	mov    rbp,rsp
ffff80000080b3c0:	41 57                	push   r15
ffff80000080b3c2:	53                   	push   rbx
ffff80000080b3c3:	48 83 ec 50          	sub    rsp,0x50
ffff80000080b3c7:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080b3c7 <init_framebuffer+0xf>
ffff80000080b3ce:	49 bb 71 3f 01 00 00 	movabs r11,0x13f71
ffff80000080b3d5:	00 00 00 
ffff80000080b3d8:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:29
    //映射页帧内存
    size_t w=framebuffer.common.framebuffer_width;
ffff80000080b3db:	48 b8 e8 fe ff ff ff 	movabs rax,0xfffffffffffffee8
ffff80000080b3e2:	ff ff ff 
ffff80000080b3e5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b3e9:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
ffff80000080b3ec:	89 c0                	mov    eax,eax
ffff80000080b3ee:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:30
    size_t h=framebuffer.common.framebuffer_height;
ffff80000080b3f2:	48 b8 e8 fe ff ff ff 	movabs rax,0xfffffffffffffee8
ffff80000080b3f9:	ff ff ff 
ffff80000080b3fc:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b400:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff80000080b403:	89 c0                	mov    eax,eax
ffff80000080b405:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:31
    size_t bypp=framebuffer.common.framebuffer_bpp/8;
ffff80000080b409:	48 b8 e8 fe ff ff ff 	movabs rax,0xfffffffffffffee8
ffff80000080b410:	ff ff ff 
ffff80000080b413:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b417:	0f b6 40 1c          	movzx  eax,BYTE PTR [rax+0x1c]
ffff80000080b41b:	c0 e8 03             	shr    al,0x3
ffff80000080b41e:	0f b6 c0             	movzx  eax,al
ffff80000080b421:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:32
    size_t inter=framebuffer.common.framebuffer_pitch;
ffff80000080b425:	48 b8 e8 fe ff ff ff 	movabs rax,0xfffffffffffffee8
ffff80000080b42c:	ff ff ff 
ffff80000080b42f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b433:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff80000080b436:	89 c0                	mov    eax,eax
ffff80000080b438:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:33
    size_t pc=w*h;
ffff80000080b43c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080b440:	48 0f af 45 c8       	imul   rax,QWORD PTR [rbp-0x38]
ffff80000080b445:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:34
    size_t size=h*inter;
ffff80000080b449:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b44d:	48 0f af 45 b8       	imul   rax,QWORD PTR [rbp-0x48]
ffff80000080b452:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:35
    int pgc=size/PAGE_SIZE;
ffff80000080b456:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080b45a:	48 8d 90 ff 0f 00 00 	lea    rdx,[rax+0xfff]
ffff80000080b461:	48 85 c0             	test   rax,rax
ffff80000080b464:	48 0f 48 c2          	cmovs  rax,rdx
ffff80000080b468:	48 c1 f8 0c          	sar    rax,0xc
ffff80000080b46c:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:36
    addr_t p=FRAMEBUFFER_ADDR;
ffff80000080b46f:	48 b8 00 00 00 40 00 	movabs rax,0xffff800040000000
ffff80000080b476:	80 ff ff 
ffff80000080b479:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:37
    addr_t pp=framebuffer.common.framebuffer_addr;
ffff80000080b47d:	48 b8 e8 fe ff ff ff 	movabs rax,0xfffffffffffffee8
ffff80000080b484:	ff ff ff 
ffff80000080b487:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b48b:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080b48f:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:38
    for (size_t i = 0; i < pgc; i++)
ffff80000080b493:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff80000080b49a:	00 
ffff80000080b49b:	eb 44                	jmp    ffff80000080b4e1 <init_framebuffer+0x129>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:40 (discriminator 3)
    {
        smmap(pp,p,PAGE_PRESENT|PAGE_RWX|PAGE_FOR_ALL,PML4_ADDR);
ffff80000080b49d:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
ffff80000080b4a1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080b4a5:	48 ba 00 10 10 00 00 	movabs rdx,0xffff800000101000
ffff80000080b4ac:	80 ff ff 
ffff80000080b4af:	48 89 d1             	mov    rcx,rdx
ffff80000080b4b2:	ba 07 00 00 00       	mov    edx,0x7
ffff80000080b4b7:	48 89 c7             	mov    rdi,rax
ffff80000080b4ba:	49 89 df             	mov    r15,rbx
ffff80000080b4bd:	48 b8 98 27 fe ff ff 	movabs rax,0xfffffffffffe2798
ffff80000080b4c4:	ff ff ff 
ffff80000080b4c7:	48 01 d8             	add    rax,rbx
ffff80000080b4ca:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:41 (discriminator 3)
        pp+=PAGE_SIZE;
ffff80000080b4cc:	48 81 45 e0 00 10 00 	add    QWORD PTR [rbp-0x20],0x1000
ffff80000080b4d3:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:42 (discriminator 3)
        p+=PAGE_SIZE;
ffff80000080b4d4:	48 81 45 e8 00 10 00 	add    QWORD PTR [rbp-0x18],0x1000
ffff80000080b4db:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:38 (discriminator 3)
    for (size_t i = 0; i < pgc; i++)
ffff80000080b4dc:	48 83 45 d8 01       	add    QWORD PTR [rbp-0x28],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:38 (discriminator 1)
ffff80000080b4e1:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
ffff80000080b4e4:	48 98                	cdqe   
ffff80000080b4e6:	48 39 45 d8          	cmp    QWORD PTR [rbp-0x28],rax
ffff80000080b4ea:	7c b1                	jl     ffff80000080b49d <init_framebuffer+0xe5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:46
    }
    
    
}
ffff80000080b4ec:	90                   	nop
ffff80000080b4ed:	90                   	nop
ffff80000080b4ee:	48 83 c4 50          	add    rsp,0x50
ffff80000080b4f2:	5b                   	pop    rbx
ffff80000080b4f3:	41 5f                	pop    r15
ffff80000080b4f5:	5d                   	pop    rbp
ffff80000080b4f6:	c3                   	ret    

ffff80000080b4f7 <init_font>:
init_font():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:47
void init_font(){
ffff80000080b4f7:	f3 0f 1e fa          	endbr64 
ffff80000080b4fb:	55                   	push   rbp
ffff80000080b4fc:	48 89 e5             	mov    rbp,rsp
ffff80000080b4ff:	48 8d 0d f9 ff ff ff 	lea    rcx,[rip+0xfffffffffffffff9]        # ffff80000080b4ff <init_font+0x8>
ffff80000080b506:	49 bb 39 3e 01 00 00 	movabs r11,0x13e39
ffff80000080b50d:	00 00 00 
ffff80000080b510:	4c 01 d9             	add    rcx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:48
    boot_font = (struct psf2_header*) (_binary_res_font_psf_start);
ffff80000080b513:	48 b8 e8 c2 bf ff ff 	movabs rax,0xffffffffffbfc2e8
ffff80000080b51a:	ff ff ff 
ffff80000080b51d:	48 ba c8 fd ff ff ff 	movabs rdx,0xfffffffffffffdc8
ffff80000080b524:	ff ff ff 
ffff80000080b527:	48 8b 14 11          	mov    rdx,QWORD PTR [rcx+rdx*1]
ffff80000080b52b:	48 89 14 01          	mov    QWORD PTR [rcx+rax*1],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:50

    font_width_bytes = (boot_font->width + 7) / 8;
ffff80000080b52f:	48 b8 e8 c2 bf ff ff 	movabs rax,0xffffffffffbfc2e8
ffff80000080b536:	ff ff ff 
ffff80000080b539:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080b53d:	8b 40 1c             	mov    eax,DWORD PTR [rax+0x1c]
ffff80000080b540:	83 c0 07             	add    eax,0x7
ffff80000080b543:	c1 e8 03             	shr    eax,0x3
ffff80000080b546:	89 c2                	mov    edx,eax
ffff80000080b548:	48 b8 f8 c2 bf ff ff 	movabs rax,0xffffffffffbfc2f8
ffff80000080b54f:	ff ff ff 
ffff80000080b552:	89 14 01             	mov    DWORD PTR [rcx+rax*1],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:51
    font_width = font_width_bytes * 8;
ffff80000080b555:	48 b8 f8 c2 bf ff ff 	movabs rax,0xffffffffffbfc2f8
ffff80000080b55c:	ff ff ff 
ffff80000080b55f:	8b 04 01             	mov    eax,DWORD PTR [rcx+rax*1]
ffff80000080b562:	8d 14 c5 00 00 00 00 	lea    edx,[rax*8+0x0]
ffff80000080b569:	48 b8 f0 c2 bf ff ff 	movabs rax,0xffffffffffbfc2f0
ffff80000080b570:	ff ff ff 
ffff80000080b573:	89 14 01             	mov    DWORD PTR [rcx+rax*1],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:52
    font_height = boot_font->height;
ffff80000080b576:	48 b8 e8 c2 bf ff ff 	movabs rax,0xffffffffffbfc2e8
ffff80000080b57d:	ff ff ff 
ffff80000080b580:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080b584:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff80000080b587:	48 ba f4 c2 bf ff ff 	movabs rdx,0xffffffffffbfc2f4
ffff80000080b58e:	ff ff ff 
ffff80000080b591:	89 04 11             	mov    DWORD PTR [rcx+rdx*1],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:54

    glyph_table = (u8*)(_binary_res_font_psf_start)+boot_font->header_size;
ffff80000080b594:	48 b8 e8 c2 bf ff ff 	movabs rax,0xffffffffffbfc2e8
ffff80000080b59b:	ff ff ff 
ffff80000080b59e:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080b5a2:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080b5a5:	89 c2                	mov    edx,eax
ffff80000080b5a7:	48 b8 c8 fd ff ff ff 	movabs rax,0xfffffffffffffdc8
ffff80000080b5ae:	ff ff ff 
ffff80000080b5b1:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080b5b5:	48 01 c2             	add    rdx,rax
ffff80000080b5b8:	48 b8 00 c3 bf ff ff 	movabs rax,0xffffffffffbfc300
ffff80000080b5bf:	ff ff ff 
ffff80000080b5c2:	48 89 14 01          	mov    QWORD PTR [rcx+rax*1],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:55
    glyph_nr = boot_font->glyph_nr;
ffff80000080b5c6:	48 b8 e8 c2 bf ff ff 	movabs rax,0xffffffffffbfc2e8
ffff80000080b5cd:	ff ff ff 
ffff80000080b5d0:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080b5d4:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff80000080b5d7:	48 ba 0c c3 bf ff ff 	movabs rdx,0xffffffffffbfc30c
ffff80000080b5de:	ff ff ff 
ffff80000080b5e1:	89 04 11             	mov    DWORD PTR [rcx+rdx*1],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:56
    bytes_per_glyph = boot_font->bytes_per_glyph;
ffff80000080b5e4:	48 b8 e8 c2 bf ff ff 	movabs rax,0xffffffffffbfc2e8
ffff80000080b5eb:	ff ff ff 
ffff80000080b5ee:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080b5f2:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
ffff80000080b5f5:	48 ba 08 c3 bf ff ff 	movabs rdx,0xffffffffffbfc308
ffff80000080b5fc:	ff ff ff 
ffff80000080b5ff:	89 04 11             	mov    DWORD PTR [rcx+rdx*1],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:58

    fb_cursor_x = fb_cursor_y = 0;
ffff80000080b602:	48 b8 d8 c2 bf ff ff 	movabs rax,0xffffffffffbfc2d8
ffff80000080b609:	ff ff ff 
ffff80000080b60c:	c7 04 01 00 00 00 00 	mov    DWORD PTR [rcx+rax*1],0x0
ffff80000080b613:	48 b8 d8 c2 bf ff ff 	movabs rax,0xffffffffffbfc2d8
ffff80000080b61a:	ff ff ff 
ffff80000080b61d:	8b 04 01             	mov    eax,DWORD PTR [rcx+rax*1]
ffff80000080b620:	48 ba d4 c2 bf ff ff 	movabs rdx,0xffffffffffbfc2d4
ffff80000080b627:	ff ff ff 
ffff80000080b62a:	89 04 11             	mov    DWORD PTR [rcx+rdx*1],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:59
    max_ch_nr_x = framebuffer.common.framebuffer_width / font_width;
ffff80000080b62d:	48 b8 e8 fe ff ff ff 	movabs rax,0xfffffffffffffee8
ffff80000080b634:	ff ff ff 
ffff80000080b637:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080b63b:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
ffff80000080b63e:	48 ba f0 c2 bf ff ff 	movabs rdx,0xffffffffffbfc2f0
ffff80000080b645:	ff ff ff 
ffff80000080b648:	8b 34 11             	mov    esi,DWORD PTR [rcx+rdx*1]
ffff80000080b64b:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080b650:	f7 f6                	div    esi
ffff80000080b652:	89 c2                	mov    edx,eax
ffff80000080b654:	48 b8 dc c2 bf ff ff 	movabs rax,0xffffffffffbfc2dc
ffff80000080b65b:	ff ff ff 
ffff80000080b65e:	89 14 01             	mov    DWORD PTR [rcx+rax*1],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:60
    max_ch_nr_y = framebuffer.common.framebuffer_height / font_height;
ffff80000080b661:	48 b8 e8 fe ff ff ff 	movabs rax,0xfffffffffffffee8
ffff80000080b668:	ff ff ff 
ffff80000080b66b:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080b66f:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff80000080b672:	48 ba f4 c2 bf ff ff 	movabs rdx,0xffffffffffbfc2f4
ffff80000080b679:	ff ff ff 
ffff80000080b67c:	8b 3c 11             	mov    edi,DWORD PTR [rcx+rdx*1]
ffff80000080b67f:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080b684:	f7 f7                	div    edi
ffff80000080b686:	89 c2                	mov    edx,eax
ffff80000080b688:	48 b8 e0 c2 bf ff ff 	movabs rax,0xffffffffffbfc2e0
ffff80000080b68f:	ff ff ff 
ffff80000080b692:	89 14 01             	mov    DWORD PTR [rcx+rax*1],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:61
    font_size=1;
ffff80000080b695:	48 b8 28 fe ff ff ff 	movabs rax,0xfffffffffffffe28
ffff80000080b69c:	ff ff ff 
ffff80000080b69f:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080b6a3:	c7 00 01 00 00 00    	mov    DWORD PTR [rax],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:62
}
ffff80000080b6a9:	90                   	nop
ffff80000080b6aa:	5d                   	pop    rbp
ffff80000080b6ab:	c3                   	ret    

ffff80000080b6ac <set_framebuffer>:
set_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:64
void set_framebuffer(struct multiboot_tag_framebuffer tag)
{
ffff80000080b6ac:	f3 0f 1e fa          	endbr64 
ffff80000080b6b0:	55                   	push   rbp
ffff80000080b6b1:	48 89 e5             	mov    rbp,rsp
ffff80000080b6b4:	53                   	push   rbx
ffff80000080b6b5:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080b6b5 <set_framebuffer+0x9>
ffff80000080b6bc:	49 bb 83 3c 01 00 00 	movabs r11,0x13c83
ffff80000080b6c3:	00 00 00 
ffff80000080b6c6:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:65
    framebuffer=tag;
ffff80000080b6c9:	48 ba e8 fe ff ff ff 	movabs rdx,0xfffffffffffffee8
ffff80000080b6d0:	ff ff ff 
ffff80000080b6d3:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080b6d7:	48 8b 4d 10          	mov    rcx,QWORD PTR [rbp+0x10]
ffff80000080b6db:	48 8b 5d 18          	mov    rbx,QWORD PTR [rbp+0x18]
ffff80000080b6df:	48 89 08             	mov    QWORD PTR [rax],rcx
ffff80000080b6e2:	48 89 58 08          	mov    QWORD PTR [rax+0x8],rbx
ffff80000080b6e6:	48 8b 4d 20          	mov    rcx,QWORD PTR [rbp+0x20]
ffff80000080b6ea:	48 8b 5d 28          	mov    rbx,QWORD PTR [rbp+0x28]
ffff80000080b6ee:	48 89 48 10          	mov    QWORD PTR [rax+0x10],rcx
ffff80000080b6f2:	48 89 58 18          	mov    QWORD PTR [rax+0x18],rbx
ffff80000080b6f6:	48 8b 55 30          	mov    rdx,QWORD PTR [rbp+0x30]
ffff80000080b6fa:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:66
}
ffff80000080b6fe:	90                   	nop
ffff80000080b6ff:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
ffff80000080b703:	c9                   	leave  
ffff80000080b704:	c3                   	ret    

ffff80000080b705 <fill_rect>:
fill_rect():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:68

void fill_rect(int x,int y,int w,int h,unsigned int color){
ffff80000080b705:	f3 0f 1e fa          	endbr64 
ffff80000080b709:	55                   	push   rbp
ffff80000080b70a:	48 89 e5             	mov    rbp,rsp
ffff80000080b70d:	4c 8d 0d f9 ff ff ff 	lea    r9,[rip+0xfffffffffffffff9]        # ffff80000080b70d <fill_rect+0x8>
ffff80000080b714:	49 bb 2b 3c 01 00 00 	movabs r11,0x13c2b
ffff80000080b71b:	00 00 00 
ffff80000080b71e:	4d 01 d9             	add    r9,r11
ffff80000080b721:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff80000080b724:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080b727:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff80000080b72a:	89 4d d0             	mov    DWORD PTR [rbp-0x30],ecx
ffff80000080b72d:	44 89 45 cc          	mov    DWORD PTR [rbp-0x34],r8d
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:69
    unsigned int* fb= (unsigned int*) FRAMEBUFFER_ADDR;
ffff80000080b731:	48 b8 00 00 00 40 00 	movabs rax,0xffff800040000000
ffff80000080b738:	80 ff ff 
ffff80000080b73b:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:71
    //目前只写32bpp
    for(int py=x;py<h+x;py++){
ffff80000080b73f:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080b742:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffff80000080b745:	e9 82 00 00 00       	jmp    ffff80000080b7cc <fill_rect+0xc7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:72
        for(int px=y;px<w+y;px++){
ffff80000080b74a:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080b74d:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffff80000080b750:	eb 69                	jmp    ffff80000080b7bb <fill_rect+0xb6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:73 (discriminator 3)
            addr_t ptr=FRAMEBUFFER_ADDR+py*framebuffer.common.framebuffer_pitch
ffff80000080b752:	48 b8 e8 fe ff ff ff 	movabs rax,0xfffffffffffffee8
ffff80000080b759:	ff ff ff 
ffff80000080b75c:	49 8b 04 01          	mov    rax,QWORD PTR [r9+rax*1]
ffff80000080b760:	8b 50 10             	mov    edx,DWORD PTR [rax+0x10]
ffff80000080b763:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000080b766:	0f af c2             	imul   eax,edx
ffff80000080b769:	89 c1                	mov    ecx,eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:74 (discriminator 3)
                       +px*framebuffer.common.framebuffer_bpp/8;
ffff80000080b76b:	48 b8 e8 fe ff ff ff 	movabs rax,0xfffffffffffffee8
ffff80000080b772:	ff ff ff 
ffff80000080b775:	49 8b 04 01          	mov    rax,QWORD PTR [r9+rax*1]
ffff80000080b779:	0f b6 40 1c          	movzx  eax,BYTE PTR [rax+0x1c]
ffff80000080b77d:	0f b6 c0             	movzx  eax,al
ffff80000080b780:	0f af 45 f8          	imul   eax,DWORD PTR [rbp-0x8]
ffff80000080b784:	8d 50 07             	lea    edx,[rax+0x7]
ffff80000080b787:	85 c0                	test   eax,eax
ffff80000080b789:	0f 48 c2             	cmovs  eax,edx
ffff80000080b78c:	c1 f8 03             	sar    eax,0x3
ffff80000080b78f:	48 98                	cdqe   
ffff80000080b791:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:73 (discriminator 3)
            addr_t ptr=FRAMEBUFFER_ADDR+py*framebuffer.common.framebuffer_pitch
ffff80000080b795:	48 b8 00 00 00 40 00 	movabs rax,0xffff800040000000
ffff80000080b79c:	80 ff ff 
ffff80000080b79f:	48 01 d0             	add    rax,rdx
ffff80000080b7a2:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:75 (discriminator 3)
            fb=(unsigned int*)ptr;
ffff80000080b7a6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b7aa:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:76 (discriminator 3)
            *fb=color;
ffff80000080b7ae:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080b7b2:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000080b7b5:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:72 (discriminator 3)
        for(int px=y;px<w+y;px++){
ffff80000080b7b7:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:72 (discriminator 1)
ffff80000080b7bb:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff80000080b7be:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080b7c1:	01 d0                	add    eax,edx
ffff80000080b7c3:	39 45 f8             	cmp    DWORD PTR [rbp-0x8],eax
ffff80000080b7c6:	7c 8a                	jl     ffff80000080b752 <fill_rect+0x4d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:71 (discriminator 2)
    for(int py=x;py<h+x;py++){
ffff80000080b7c8:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:71 (discriminator 1)
ffff80000080b7cc:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
ffff80000080b7cf:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080b7d2:	01 d0                	add    eax,edx
ffff80000080b7d4:	39 45 fc             	cmp    DWORD PTR [rbp-0x4],eax
ffff80000080b7d7:	0f 8c 6d ff ff ff    	jl     ffff80000080b74a <fill_rect+0x45>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:79
        }
    }
}
ffff80000080b7dd:	90                   	nop
ffff80000080b7de:	90                   	nop
ffff80000080b7df:	5d                   	pop    rbp
ffff80000080b7e0:	c3                   	ret    

ffff80000080b7e1 <draw_text>:
draw_text():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:82
unsigned char letters[];
void draw_text(int x, int y, int size, char *str)
{
ffff80000080b7e1:	f3 0f 1e fa          	endbr64 
ffff80000080b7e5:	55                   	push   rbp
ffff80000080b7e6:	48 89 e5             	mov    rbp,rsp
ffff80000080b7e9:	41 57                	push   r15
ffff80000080b7eb:	53                   	push   rbx
ffff80000080b7ec:	48 83 ec 30          	sub    rsp,0x30
ffff80000080b7f0:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080b7f0 <draw_text+0xf>
ffff80000080b7f7:	49 bb 48 3b 01 00 00 	movabs r11,0x13b48
ffff80000080b7fe:	00 00 00 
ffff80000080b801:	4c 01 db             	add    rbx,r11
ffff80000080b804:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff80000080b807:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080b80a:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff80000080b80d:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:83
    int tx=x;
ffff80000080b811:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080b814:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:84
    while(*str!='\0')
ffff80000080b817:	eb 75                	jmp    ffff80000080b88e <draw_text+0xad>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:86
    {
        if(*str=='\n')
ffff80000080b819:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b81d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080b820:	3c 0a                	cmp    al,0xa
ffff80000080b822:	75 23                	jne    ffff80000080b847 <draw_text+0x66>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:88
        {
            y+=font_height*size;
ffff80000080b824:	48 b8 f4 c2 bf ff ff 	movabs rax,0xffffffffffbfc2f4
ffff80000080b82b:	ff ff ff 
ffff80000080b82e:	8b 14 03             	mov    edx,DWORD PTR [rbx+rax*1]
ffff80000080b831:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080b834:	0f af d0             	imul   edx,eax
ffff80000080b837:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080b83a:	01 d0                	add    eax,edx
ffff80000080b83c:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:89
            tx=x;
ffff80000080b83f:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080b842:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
ffff80000080b845:	eb 42                	jmp    ffff80000080b889 <draw_text+0xa8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:93
        }
        else
        {
            draw_letter(tx,y,size,*str);
ffff80000080b847:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b84b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080b84e:	0f be c8             	movsx  ecx,al
ffff80000080b851:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff80000080b854:	8b 75 d8             	mov    esi,DWORD PTR [rbp-0x28]
ffff80000080b857:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080b85a:	89 c7                	mov    edi,eax
ffff80000080b85c:	49 89 df             	mov    r15,rbx
ffff80000080b85f:	48 b8 6c c5 fe ff ff 	movabs rax,0xfffffffffffec56c
ffff80000080b866:	ff ff ff 
ffff80000080b869:	48 01 d8             	add    rax,rbx
ffff80000080b86c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:94
            tx+=size*font_width;
ffff80000080b86e:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff80000080b871:	48 b8 f0 c2 bf ff ff 	movabs rax,0xffffffffffbfc2f0
ffff80000080b878:	ff ff ff 
ffff80000080b87b:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080b87e:	0f af d0             	imul   edx,eax
ffff80000080b881:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080b884:	01 d0                	add    eax,edx
ffff80000080b886:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:96
        }
        str++;
ffff80000080b889:	48 83 45 c8 01       	add    QWORD PTR [rbp-0x38],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:84
    while(*str!='\0')
ffff80000080b88e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b892:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080b895:	84 c0                	test   al,al
ffff80000080b897:	75 80                	jne    ffff80000080b819 <draw_text+0x38>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:98
    }
}
ffff80000080b899:	90                   	nop
ffff80000080b89a:	90                   	nop
ffff80000080b89b:	48 83 c4 30          	add    rsp,0x30
ffff80000080b89f:	5b                   	pop    rbx
ffff80000080b8a0:	41 5f                	pop    r15
ffff80000080b8a2:	5d                   	pop    rbp
ffff80000080b8a3:	c3                   	ret    

ffff80000080b8a4 <draw_letter>:
draw_letter():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:99
void draw_letter(int x, volatile int y, int size, char c) {
ffff80000080b8a4:	f3 0f 1e fa          	endbr64 
ffff80000080b8a8:	55                   	push   rbp
ffff80000080b8a9:	48 89 e5             	mov    rbp,rsp
ffff80000080b8ac:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080b8ac <draw_letter+0x8>
ffff80000080b8b3:	49 bb 8c 3a 01 00 00 	movabs r11,0x13a8c
ffff80000080b8ba:	00 00 00 
ffff80000080b8bd:	4c 01 d8             	add    rax,r11
ffff80000080b8c0:	89 7d cc             	mov    DWORD PTR [rbp-0x34],edi
ffff80000080b8c3:	89 75 c8             	mov    DWORD PTR [rbp-0x38],esi
ffff80000080b8c6:	89 55 c4             	mov    DWORD PTR [rbp-0x3c],edx
ffff80000080b8c9:	89 ca                	mov    edx,ecx
ffff80000080b8cb:	88 55 c0             	mov    BYTE PTR [rbp-0x40],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:100
    u8 *glyph = glyph_table;
ffff80000080b8ce:	48 ba 00 c3 bf ff ff 	movabs rdx,0xffffffffffbfc300
ffff80000080b8d5:	ff ff ff 
ffff80000080b8d8:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080b8dc:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:101
    if (c < glyph_nr) {
ffff80000080b8e0:	0f be 4d c0          	movsx  ecx,BYTE PTR [rbp-0x40]
ffff80000080b8e4:	48 ba 0c c3 bf ff ff 	movabs rdx,0xffffffffffbfc30c
ffff80000080b8eb:	ff ff ff 
ffff80000080b8ee:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080b8f1:	39 d1                	cmp    ecx,edx
ffff80000080b8f3:	73 1a                	jae    ffff80000080b90f <draw_letter+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:102
        glyph += c * bytes_per_glyph;
ffff80000080b8f5:	0f be 4d c0          	movsx  ecx,BYTE PTR [rbp-0x40]
ffff80000080b8f9:	48 ba 08 c3 bf ff ff 	movabs rdx,0xffffffffffbfc308
ffff80000080b900:	ff ff ff 
ffff80000080b903:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080b906:	0f af d1             	imul   edx,ecx
ffff80000080b909:	89 d2                	mov    edx,edx
ffff80000080b90b:	48 01 55 f8          	add    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:105
    }
    /* output the font to frame buffer */
    for (u32 ch_y = 0; ch_y < font_height; ch_y++) {
ffff80000080b90f:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
ffff80000080b916:	e9 f8 00 00 00       	jmp    ffff80000080ba13 <draw_letter+0x16f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:106
        u8 mask = 1 << 7;
ffff80000080b91b:	c6 45 f3 80          	mov    BYTE PTR [rbp-0xd],0x80
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:108

        for (u32 ch_x = 0; ch_x < font_width; ch_x++) {
ffff80000080b91f:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff80000080b926:	e9 bb 00 00 00       	jmp    ffff80000080b9e6 <draw_letter+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:109
            int px=x+ch_x*size;
ffff80000080b92b:	8b 55 c4             	mov    edx,DWORD PTR [rbp-0x3c]
ffff80000080b92e:	89 d1                	mov    ecx,edx
ffff80000080b930:	0f af 4d ec          	imul   ecx,DWORD PTR [rbp-0x14]
ffff80000080b934:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000080b937:	01 ca                	add    edx,ecx
ffff80000080b939:	89 55 e8             	mov    DWORD PTR [rbp-0x18],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:110
            int py=y+ch_y*size;
ffff80000080b93c:	8b 55 c4             	mov    edx,DWORD PTR [rbp-0x3c]
ffff80000080b93f:	89 d1                	mov    ecx,edx
ffff80000080b941:	0f af 4d f4          	imul   ecx,DWORD PTR [rbp-0xc]
ffff80000080b945:	8b 55 c8             	mov    edx,DWORD PTR [rbp-0x38]
ffff80000080b948:	01 ca                	add    edx,ecx
ffff80000080b94a:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:111
            int* ptr=FRAMEBUFFER_ADDR+py*framebuffer.common.framebuffer_pitch
ffff80000080b94d:	48 ba e8 fe ff ff ff 	movabs rdx,0xfffffffffffffee8
ffff80000080b954:	ff ff ff 
ffff80000080b957:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080b95b:	8b 4a 10             	mov    ecx,DWORD PTR [rdx+0x10]
ffff80000080b95e:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffff80000080b961:	0f af d1             	imul   edx,ecx
ffff80000080b964:	89 d6                	mov    esi,edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:112
                     +px*framebuffer.common.framebuffer_bpp/8;
ffff80000080b966:	48 ba e8 fe ff ff ff 	movabs rdx,0xfffffffffffffee8
ffff80000080b96d:	ff ff ff 
ffff80000080b970:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080b974:	0f b6 52 1c          	movzx  edx,BYTE PTR [rdx+0x1c]
ffff80000080b978:	0f b6 d2             	movzx  edx,dl
ffff80000080b97b:	0f af 55 e8          	imul   edx,DWORD PTR [rbp-0x18]
ffff80000080b97f:	8d 4a 07             	lea    ecx,[rdx+0x7]
ffff80000080b982:	85 d2                	test   edx,edx
ffff80000080b984:	0f 48 d1             	cmovs  edx,ecx
ffff80000080b987:	c1 fa 03             	sar    edx,0x3
ffff80000080b98a:	48 63 d2             	movsxd rdx,edx
ffff80000080b98d:	48 8d 0c 16          	lea    rcx,[rsi+rdx*1]
ffff80000080b991:	48 ba 00 00 00 40 00 	movabs rdx,0xffff800040000000
ffff80000080b998:	80 ff ff 
ffff80000080b99b:	48 01 ca             	add    rdx,rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:111
            int* ptr=FRAMEBUFFER_ADDR+py*framebuffer.common.framebuffer_pitch
ffff80000080b99e:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:113
            if ((*(glyph + ch_x / 8) & mask) != 0) {
ffff80000080b9a2:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080b9a5:	c1 ea 03             	shr    edx,0x3
ffff80000080b9a8:	89 d1                	mov    ecx,edx
ffff80000080b9aa:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080b9ae:	48 01 ca             	add    rdx,rcx
ffff80000080b9b1:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080b9b4:	22 55 f3             	and    dl,BYTE PTR [rbp-0xd]
ffff80000080b9b7:	84 d2                	test   dl,dl
ffff80000080b9b9:	74 0c                	je     ffff80000080b9c7 <draw_letter+0x123>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:114
                *ptr=-1;
ffff80000080b9bb:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080b9bf:	c7 02 ff ff ff ff    	mov    DWORD PTR [rdx],0xffffffff
ffff80000080b9c5:	eb 0a                	jmp    ffff80000080b9d1 <draw_letter+0x12d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:116
            } else {
                *ptr=0;
ffff80000080b9c7:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080b9cb:	c7 02 00 00 00 00    	mov    DWORD PTR [rdx],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:119
            }

            mask >>= 1;
ffff80000080b9d1:	d0 6d f3             	shr    BYTE PTR [rbp-0xd],1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:120
            if (ch_x % 8 == 0) {
ffff80000080b9d4:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080b9d7:	83 e2 07             	and    edx,0x7
ffff80000080b9da:	85 d2                	test   edx,edx
ffff80000080b9dc:	75 04                	jne    ffff80000080b9e2 <draw_letter+0x13e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:121
                mask = 1 << 7;
ffff80000080b9de:	c6 45 f3 80          	mov    BYTE PTR [rbp-0xd],0x80
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:108 (discriminator 2)
        for (u32 ch_x = 0; ch_x < font_width; ch_x++) {
ffff80000080b9e2:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:108 (discriminator 1)
ffff80000080b9e6:	48 ba f0 c2 bf ff ff 	movabs rdx,0xffffffffffbfc2f0
ffff80000080b9ed:	ff ff ff 
ffff80000080b9f0:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080b9f3:	39 55 ec             	cmp    DWORD PTR [rbp-0x14],edx
ffff80000080b9f6:	0f 82 2f ff ff ff    	jb     ffff80000080b92b <draw_letter+0x87>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:125 (discriminator 2)
            }
        }

        glyph += font_width_bytes;
ffff80000080b9fc:	48 ba f8 c2 bf ff ff 	movabs rdx,0xffffffffffbfc2f8
ffff80000080ba03:	ff ff ff 
ffff80000080ba06:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080ba09:	89 d2                	mov    edx,edx
ffff80000080ba0b:	48 01 55 f8          	add    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:105 (discriminator 2)
    for (u32 ch_y = 0; ch_y < font_height; ch_y++) {
ffff80000080ba0f:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:105 (discriminator 1)
ffff80000080ba13:	48 ba f4 c2 bf ff ff 	movabs rdx,0xffffffffffbfc2f4
ffff80000080ba1a:	ff ff ff 
ffff80000080ba1d:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080ba20:	39 55 f4             	cmp    DWORD PTR [rbp-0xc],edx
ffff80000080ba23:	0f 82 f2 fe ff ff    	jb     ffff80000080b91b <draw_letter+0x77>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:127
    }
}
ffff80000080ba29:	90                   	nop
ffff80000080ba2a:	90                   	nop
ffff80000080ba2b:	5d                   	pop    rbp
ffff80000080ba2c:	c3                   	ret    

ffff80000080ba2d <scr_up>:
scr_up():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:129
//向上滚动一个像素
void scr_up(){
ffff80000080ba2d:	f3 0f 1e fa          	endbr64 
ffff80000080ba31:	55                   	push   rbp
ffff80000080ba32:	48 89 e5             	mov    rbp,rsp
ffff80000080ba35:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080ba35 <scr_up+0x8>
ffff80000080ba3c:	49 bb 03 39 01 00 00 	movabs r11,0x13903
ffff80000080ba43:	00 00 00 
ffff80000080ba46:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:130
    for(int dy=0;dy<framebuffer.common.framebuffer_height-1;dy++){
ffff80000080ba49:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff80000080ba50:	e9 ad 00 00 00       	jmp    ffff80000080bb02 <scr_up+0xd5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:131
        for(int dx=0;dx<framebuffer.common.framebuffer_width;dx++){
ffff80000080ba55:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
ffff80000080ba5c:	e9 81 00 00 00       	jmp    ffff80000080bae2 <scr_up+0xb5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:133 (discriminator 3)
            char *p=(char*)(FRAMEBUFFER_ADDR+
                    dy*framebuffer.common.framebuffer_pitch
ffff80000080ba61:	48 ba e8 fe ff ff ff 	movabs rdx,0xfffffffffffffee8
ffff80000080ba68:	ff ff ff 
ffff80000080ba6b:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080ba6f:	8b 4a 10             	mov    ecx,DWORD PTR [rdx+0x10]
ffff80000080ba72:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080ba75:	0f af d1             	imul   edx,ecx
ffff80000080ba78:	89 d6                	mov    esi,edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:134 (discriminator 3)
                    +dx*framebuffer.common.framebuffer_bpp/8);
ffff80000080ba7a:	48 ba e8 fe ff ff ff 	movabs rdx,0xfffffffffffffee8
ffff80000080ba81:	ff ff ff 
ffff80000080ba84:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080ba88:	0f b6 52 1c          	movzx  edx,BYTE PTR [rdx+0x1c]
ffff80000080ba8c:	0f b6 d2             	movzx  edx,dl
ffff80000080ba8f:	0f af 55 f8          	imul   edx,DWORD PTR [rbp-0x8]
ffff80000080ba93:	8d 4a 07             	lea    ecx,[rdx+0x7]
ffff80000080ba96:	85 d2                	test   edx,edx
ffff80000080ba98:	0f 48 d1             	cmovs  edx,ecx
ffff80000080ba9b:	c1 fa 03             	sar    edx,0x3
ffff80000080ba9e:	48 63 d2             	movsxd rdx,edx
ffff80000080baa1:	48 8d 0c 16          	lea    rcx,[rsi+rdx*1]
ffff80000080baa5:	48 ba 00 00 00 40 00 	movabs rdx,0xffff800040000000
ffff80000080baac:	80 ff ff 
ffff80000080baaf:	48 01 ca             	add    rdx,rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:132 (discriminator 3)
            char *p=(char*)(FRAMEBUFFER_ADDR+
ffff80000080bab2:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:135 (discriminator 3)
            *p=*(p+framebuffer.common.framebuffer_pitch);
ffff80000080bab6:	48 ba e8 fe ff ff ff 	movabs rdx,0xfffffffffffffee8
ffff80000080babd:	ff ff ff 
ffff80000080bac0:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080bac4:	8b 52 10             	mov    edx,DWORD PTR [rdx+0x10]
ffff80000080bac7:	89 d1                	mov    ecx,edx
ffff80000080bac9:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080bacd:	48 01 ca             	add    rdx,rcx
ffff80000080bad0:	0f b6 0a             	movzx  ecx,BYTE PTR [rdx]
ffff80000080bad3:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080bad7:	88 0a                	mov    BYTE PTR [rdx],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:136 (discriminator 3)
            p++;
ffff80000080bad9:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:131 (discriminator 3)
        for(int dx=0;dx<framebuffer.common.framebuffer_width;dx++){
ffff80000080bade:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:131 (discriminator 1)
ffff80000080bae2:	48 ba e8 fe ff ff ff 	movabs rdx,0xfffffffffffffee8
ffff80000080bae9:	ff ff ff 
ffff80000080baec:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080baf0:	8b 4a 14             	mov    ecx,DWORD PTR [rdx+0x14]
ffff80000080baf3:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff80000080baf6:	39 d1                	cmp    ecx,edx
ffff80000080baf8:	0f 87 63 ff ff ff    	ja     ffff80000080ba61 <scr_up+0x34>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:130 (discriminator 2)
    for(int dy=0;dy<framebuffer.common.framebuffer_height-1;dy++){
ffff80000080bafe:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:130 (discriminator 1)
ffff80000080bb02:	48 ba e8 fe ff ff ff 	movabs rdx,0xfffffffffffffee8
ffff80000080bb09:	ff ff ff 
ffff80000080bb0c:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080bb10:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff80000080bb13:	8d 4a ff             	lea    ecx,[rdx-0x1]
ffff80000080bb16:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080bb19:	39 d1                	cmp    ecx,edx
ffff80000080bb1b:	0f 87 34 ff ff ff    	ja     ffff80000080ba55 <scr_up+0x28>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:142
        }

    }
//    for(int i=0;i< framebuffer.common.framebuffer_width*framebuffer.common.framebuffer_bpp/8;i++)
//        *(p++)=0;
}
ffff80000080bb21:	90                   	nop
ffff80000080bb22:	90                   	nop
ffff80000080bb23:	5d                   	pop    rbp
ffff80000080bb24:	c3                   	ret    

ffff80000080bb25 <scr_down>:
scr_down():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:143
void scr_down(){
ffff80000080bb25:	f3 0f 1e fa          	endbr64 
ffff80000080bb29:	55                   	push   rbp
ffff80000080bb2a:	48 89 e5             	mov    rbp,rsp
ffff80000080bb2d:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080bb2d <scr_down+0x8>
ffff80000080bb34:	49 bb 0b 38 01 00 00 	movabs r11,0x1380b
ffff80000080bb3b:	00 00 00 
ffff80000080bb3e:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:144
    for(int dy=1;dy<max_ch_nr_y;dy++){
ffff80000080bb41:	c7 45 fc 01 00 00 00 	mov    DWORD PTR [rbp-0x4],0x1
ffff80000080bb48:	e9 aa 00 00 00       	jmp    ffff80000080bbf7 <scr_down+0xd2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:145
        for(int dx=0;dx<max_ch_nr_x;dx++){
ffff80000080bb4d:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
ffff80000080bb54:	e9 82 00 00 00       	jmp    ffff80000080bbdb <scr_down+0xb6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:146 (discriminator 3)
            char *p=(char*)(FRAMEBUFFER_ADDR+dy*framebuffer.common.framebuffer_pitch
ffff80000080bb59:	48 ba e8 fe ff ff ff 	movabs rdx,0xfffffffffffffee8
ffff80000080bb60:	ff ff ff 
ffff80000080bb63:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080bb67:	8b 4a 10             	mov    ecx,DWORD PTR [rdx+0x10]
ffff80000080bb6a:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080bb6d:	0f af d1             	imul   edx,ecx
ffff80000080bb70:	89 d6                	mov    esi,edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:147 (discriminator 3)
                            +dx*framebuffer.common.framebuffer_bpp/8);
ffff80000080bb72:	48 ba e8 fe ff ff ff 	movabs rdx,0xfffffffffffffee8
ffff80000080bb79:	ff ff ff 
ffff80000080bb7c:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080bb80:	0f b6 52 1c          	movzx  edx,BYTE PTR [rdx+0x1c]
ffff80000080bb84:	0f b6 d2             	movzx  edx,dl
ffff80000080bb87:	0f af 55 f8          	imul   edx,DWORD PTR [rbp-0x8]
ffff80000080bb8b:	8d 4a 07             	lea    ecx,[rdx+0x7]
ffff80000080bb8e:	85 d2                	test   edx,edx
ffff80000080bb90:	0f 48 d1             	cmovs  edx,ecx
ffff80000080bb93:	c1 fa 03             	sar    edx,0x3
ffff80000080bb96:	48 63 d2             	movsxd rdx,edx
ffff80000080bb99:	48 8d 0c 16          	lea    rcx,[rsi+rdx*1]
ffff80000080bb9d:	48 ba 00 00 00 40 00 	movabs rdx,0xffff800040000000
ffff80000080bba4:	80 ff ff 
ffff80000080bba7:	48 01 ca             	add    rdx,rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:146 (discriminator 3)
            char *p=(char*)(FRAMEBUFFER_ADDR+dy*framebuffer.common.framebuffer_pitch
ffff80000080bbaa:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:148 (discriminator 3)
            *p=*(p-framebuffer.common.framebuffer_pitch);
ffff80000080bbae:	48 ba e8 fe ff ff ff 	movabs rdx,0xfffffffffffffee8
ffff80000080bbb5:	ff ff ff 
ffff80000080bbb8:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080bbbc:	8b 52 10             	mov    edx,DWORD PTR [rdx+0x10]
ffff80000080bbbf:	89 d2                	mov    edx,edx
ffff80000080bbc1:	48 89 d1             	mov    rcx,rdx
ffff80000080bbc4:	48 f7 d9             	neg    rcx
ffff80000080bbc7:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080bbcb:	48 01 ca             	add    rdx,rcx
ffff80000080bbce:	0f b6 0a             	movzx  ecx,BYTE PTR [rdx]
ffff80000080bbd1:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080bbd5:	88 0a                	mov    BYTE PTR [rdx],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:145 (discriminator 3)
        for(int dx=0;dx<max_ch_nr_x;dx++){
ffff80000080bbd7:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:145 (discriminator 1)
ffff80000080bbdb:	8b 4d f8             	mov    ecx,DWORD PTR [rbp-0x8]
ffff80000080bbde:	48 ba dc c2 bf ff ff 	movabs rdx,0xffffffffffbfc2dc
ffff80000080bbe5:	ff ff ff 
ffff80000080bbe8:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080bbeb:	39 d1                	cmp    ecx,edx
ffff80000080bbed:	0f 82 66 ff ff ff    	jb     ffff80000080bb59 <scr_down+0x34>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:144 (discriminator 2)
    for(int dy=1;dy<max_ch_nr_y;dy++){
ffff80000080bbf3:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:144 (discriminator 1)
ffff80000080bbf7:	8b 4d fc             	mov    ecx,DWORD PTR [rbp-0x4]
ffff80000080bbfa:	48 ba e0 c2 bf ff ff 	movabs rdx,0xffffffffffbfc2e0
ffff80000080bc01:	ff ff ff 
ffff80000080bc04:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080bc07:	39 d1                	cmp    ecx,edx
ffff80000080bc09:	0f 82 3e ff ff ff    	jb     ffff80000080bb4d <scr_down+0x28>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:152
        }

    }
}
ffff80000080bc0f:	90                   	nop
ffff80000080bc10:	90                   	nop
ffff80000080bc11:	5d                   	pop    rbp
ffff80000080bc12:	c3                   	ret    

ffff80000080bc13 <print>:
print():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:153
void print(char* s){
ffff80000080bc13:	f3 0f 1e fa          	endbr64 
ffff80000080bc17:	55                   	push   rbp
ffff80000080bc18:	48 89 e5             	mov    rbp,rsp
ffff80000080bc1b:	41 57                	push   r15
ffff80000080bc1d:	53                   	push   rbx
ffff80000080bc1e:	48 83 ec 10          	sub    rsp,0x10
ffff80000080bc22:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080bc22 <print+0xf>
ffff80000080bc29:	49 bb 16 37 01 00 00 	movabs r11,0x13716
ffff80000080bc30:	00 00 00 
ffff80000080bc33:	4c 01 db             	add    rbx,r11
ffff80000080bc36:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:154
    for(;*s;s++){
ffff80000080bc3a:	e9 55 01 00 00       	jmp    ffff80000080bd94 <print+0x181>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:155
        if(fb_cursor_x>max_ch_nr_x||*s=='\n')
ffff80000080bc3f:	48 b8 d4 c2 bf ff ff 	movabs rax,0xffffffffffbfc2d4
ffff80000080bc46:	ff ff ff 
ffff80000080bc49:	8b 14 03             	mov    edx,DWORD PTR [rbx+rax*1]
ffff80000080bc4c:	48 b8 dc c2 bf ff ff 	movabs rax,0xffffffffffbfc2dc
ffff80000080bc53:	ff ff ff 
ffff80000080bc56:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080bc59:	39 c2                	cmp    edx,eax
ffff80000080bc5b:	77 0b                	ja     ffff80000080bc68 <print+0x55>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:155 (discriminator 1)
ffff80000080bc5d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080bc61:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080bc64:	3c 0a                	cmp    al,0xa
ffff80000080bc66:	75 2e                	jne    ffff80000080bc96 <print+0x83>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:157
        {
            fb_cursor_y+=1;
ffff80000080bc68:	48 b8 d8 c2 bf ff ff 	movabs rax,0xffffffffffbfc2d8
ffff80000080bc6f:	ff ff ff 
ffff80000080bc72:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080bc75:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080bc78:	48 b8 d8 c2 bf ff ff 	movabs rax,0xffffffffffbfc2d8
ffff80000080bc7f:	ff ff ff 
ffff80000080bc82:	89 14 03             	mov    DWORD PTR [rbx+rax*1],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:158
            fb_cursor_x=0;
ffff80000080bc85:	48 b8 d4 c2 bf ff ff 	movabs rax,0xffffffffffbfc2d4
ffff80000080bc8c:	ff ff ff 
ffff80000080bc8f:	c7 04 03 00 00 00 00 	mov    DWORD PTR [rbx+rax*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:160
        }
        if(*s=='\n')continue;
ffff80000080bc96:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080bc9a:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080bc9d:	3c 0a                	cmp    al,0xa
ffff80000080bc9f:	0f 84 e9 00 00 00    	je     ffff80000080bd8e <print+0x17b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:161
        if(fb_cursor_y>=max_ch_nr_y-1){
ffff80000080bca5:	48 b8 e0 c2 bf ff ff 	movabs rax,0xffffffffffbfc2e0
ffff80000080bcac:	ff ff ff 
ffff80000080bcaf:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080bcb2:	8d 50 ff             	lea    edx,[rax-0x1]
ffff80000080bcb5:	48 b8 d8 c2 bf ff ff 	movabs rax,0xffffffffffbfc2d8
ffff80000080bcbc:	ff ff ff 
ffff80000080bcbf:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080bcc2:	39 c2                	cmp    edx,eax
ffff80000080bcc4:	77 11                	ja     ffff80000080bcd7 <print+0xc4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:165
//            for(int i=0;i<font_height*font_size;i++)
////                scr_up();
////            fb_cursor_y=max_ch_nr_y-1;
            fb_cursor_y=0;
ffff80000080bcc6:	48 b8 d8 c2 bf ff ff 	movabs rax,0xffffffffffbfc2d8
ffff80000080bccd:	ff ff ff 
ffff80000080bcd0:	c7 04 03 00 00 00 00 	mov    DWORD PTR [rbx+rax*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:167
        }
        draw_letter(fb_cursor_x*font_width*font_size,fb_cursor_y*font_height*font_size,font_size,*s);
ffff80000080bcd7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080bcdb:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080bcde:	0f be d0             	movsx  edx,al
ffff80000080bce1:	48 b8 28 fe ff ff ff 	movabs rax,0xfffffffffffffe28
ffff80000080bce8:	ff ff ff 
ffff80000080bceb:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080bcef:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080bcf1:	48 b9 d8 c2 bf ff ff 	movabs rcx,0xffffffffffbfc2d8
ffff80000080bcf8:	ff ff ff 
ffff80000080bcfb:	8b 34 0b             	mov    esi,DWORD PTR [rbx+rcx*1]
ffff80000080bcfe:	48 b9 f4 c2 bf ff ff 	movabs rcx,0xffffffffffbfc2f4
ffff80000080bd05:	ff ff ff 
ffff80000080bd08:	8b 0c 0b             	mov    ecx,DWORD PTR [rbx+rcx*1]
ffff80000080bd0b:	0f af f1             	imul   esi,ecx
ffff80000080bd0e:	48 b9 28 fe ff ff ff 	movabs rcx,0xfffffffffffffe28
ffff80000080bd15:	ff ff ff 
ffff80000080bd18:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff80000080bd1c:	8b 09                	mov    ecx,DWORD PTR [rcx]
ffff80000080bd1e:	0f af ce             	imul   ecx,esi
ffff80000080bd21:	41 89 c8             	mov    r8d,ecx
ffff80000080bd24:	48 b9 d4 c2 bf ff ff 	movabs rcx,0xffffffffffbfc2d4
ffff80000080bd2b:	ff ff ff 
ffff80000080bd2e:	8b 34 0b             	mov    esi,DWORD PTR [rbx+rcx*1]
ffff80000080bd31:	48 b9 f0 c2 bf ff ff 	movabs rcx,0xffffffffffbfc2f0
ffff80000080bd38:	ff ff ff 
ffff80000080bd3b:	8b 0c 0b             	mov    ecx,DWORD PTR [rbx+rcx*1]
ffff80000080bd3e:	0f af f1             	imul   esi,ecx
ffff80000080bd41:	48 b9 28 fe ff ff ff 	movabs rcx,0xfffffffffffffe28
ffff80000080bd48:	ff ff ff 
ffff80000080bd4b:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff80000080bd4f:	8b 09                	mov    ecx,DWORD PTR [rcx]
ffff80000080bd51:	0f af ce             	imul   ecx,esi
ffff80000080bd54:	89 cf                	mov    edi,ecx
ffff80000080bd56:	89 d1                	mov    ecx,edx
ffff80000080bd58:	89 c2                	mov    edx,eax
ffff80000080bd5a:	44 89 c6             	mov    esi,r8d
ffff80000080bd5d:	49 89 df             	mov    r15,rbx
ffff80000080bd60:	48 b8 6c c5 fe ff ff 	movabs rax,0xfffffffffffec56c
ffff80000080bd67:	ff ff ff 
ffff80000080bd6a:	48 01 d8             	add    rax,rbx
ffff80000080bd6d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:168
        fb_cursor_x+=1;
ffff80000080bd6f:	48 b8 d4 c2 bf ff ff 	movabs rax,0xffffffffffbfc2d4
ffff80000080bd76:	ff ff ff 
ffff80000080bd79:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080bd7c:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080bd7f:	48 b8 d4 c2 bf ff ff 	movabs rax,0xffffffffffbfc2d4
ffff80000080bd86:	ff ff ff 
ffff80000080bd89:	89 14 03             	mov    DWORD PTR [rbx+rax*1],edx
ffff80000080bd8c:	eb 01                	jmp    ffff80000080bd8f <print+0x17c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:160
        if(*s=='\n')continue;
ffff80000080bd8e:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:154
    for(;*s;s++){
ffff80000080bd8f:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:154 (discriminator 1)
ffff80000080bd94:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080bd98:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080bd9b:	84 c0                	test   al,al
ffff80000080bd9d:	0f 85 9c fe ff ff    	jne    ffff80000080bc3f <print+0x2c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:170
    }
}
ffff80000080bda3:	90                   	nop
ffff80000080bda4:	90                   	nop
ffff80000080bda5:	48 83 c4 10          	add    rsp,0x10
ffff80000080bda9:	5b                   	pop    rbx
ffff80000080bdaa:	41 5f                	pop    r15
ffff80000080bdac:	5d                   	pop    rbp
ffff80000080bdad:	c3                   	ret    

ffff80000080bdae <open_framebuffer>:
open_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:175
struct file_operations framebuffer_fops={
        .open=open_framebuffer,.close=close_framebuffer,.read=read_framebuffer,.write=write_framebuffer,
        .ioctl=ioctl_framebuffer
};
long open_framebuffer(struct index_node * inode,struct file * filp){
ffff80000080bdae:	f3 0f 1e fa          	endbr64 
ffff80000080bdb2:	55                   	push   rbp
ffff80000080bdb3:	48 89 e5             	mov    rbp,rsp
ffff80000080bdb6:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080bdb6 <open_framebuffer+0x8>
ffff80000080bdbd:	49 bb 82 35 01 00 00 	movabs r11,0x13582
ffff80000080bdc4:	00 00 00 
ffff80000080bdc7:	4c 01 d8             	add    rax,r11
ffff80000080bdca:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080bdce:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:176
    inode->f_ops=&framebuffer_fops;
ffff80000080bdd2:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080bdd6:	48 b9 50 fe ff ff ff 	movabs rcx,0xfffffffffffffe50
ffff80000080bddd:	ff ff ff 
ffff80000080bde0:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080bde4:	48 89 4a 20          	mov    QWORD PTR [rdx+0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:177
    filp->f_ops=&framebuffer_fops;
ffff80000080bde8:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080bdec:	48 b9 50 fe ff ff ff 	movabs rcx,0xfffffffffffffe50
ffff80000080bdf3:	ff ff ff 
ffff80000080bdf6:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff80000080bdfa:	48 89 42 18          	mov    QWORD PTR [rdx+0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:178
    return 1;
ffff80000080bdfe:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:179
}
ffff80000080be03:	5d                   	pop    rbp
ffff80000080be04:	c3                   	ret    

ffff80000080be05 <close_framebuffer>:
close_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:180
long close_framebuffer(struct index_node * inode,struct file * filp){
ffff80000080be05:	f3 0f 1e fa          	endbr64 
ffff80000080be09:	55                   	push   rbp
ffff80000080be0a:	48 89 e5             	mov    rbp,rsp
ffff80000080be0d:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080be0d <close_framebuffer+0x8>
ffff80000080be14:	49 bb 2b 35 01 00 00 	movabs r11,0x1352b
ffff80000080be1b:	00 00 00 
ffff80000080be1e:	4c 01 d8             	add    rax,r11
ffff80000080be21:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080be25:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:182

}
ffff80000080be29:	90                   	nop
ffff80000080be2a:	5d                   	pop    rbp
ffff80000080be2b:	c3                   	ret    

ffff80000080be2c <read_framebuffer>:
read_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:183
long read_framebuffer(struct file * filp,char * buf,unsigned long count,long * position){
ffff80000080be2c:	f3 0f 1e fa          	endbr64 
ffff80000080be30:	55                   	push   rbp
ffff80000080be31:	48 89 e5             	mov    rbp,rsp
ffff80000080be34:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080be34 <read_framebuffer+0x8>
ffff80000080be3b:	49 bb 04 35 01 00 00 	movabs r11,0x13504
ffff80000080be42:	00 00 00 
ffff80000080be45:	4c 01 d8             	add    rax,r11
ffff80000080be48:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080be4c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080be50:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080be54:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:185

}
ffff80000080be58:	90                   	nop
ffff80000080be59:	5d                   	pop    rbp
ffff80000080be5a:	c3                   	ret    

ffff80000080be5b <write_framebuffer>:
write_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:186
long write_framebuffer(struct file * filp,char * buf,unsigned long count,long * position){
ffff80000080be5b:	f3 0f 1e fa          	endbr64 
ffff80000080be5f:	55                   	push   rbp
ffff80000080be60:	48 89 e5             	mov    rbp,rsp
ffff80000080be63:	41 57                	push   r15
ffff80000080be65:	53                   	push   rbx
ffff80000080be66:	48 83 ec 40          	sub    rsp,0x40
ffff80000080be6a:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080be6a <write_framebuffer+0xf>
ffff80000080be71:	49 bb ce 34 01 00 00 	movabs r11,0x134ce
ffff80000080be78:	00 00 00 
ffff80000080be7b:	4c 01 db             	add    rbx,r11
ffff80000080be7e:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff80000080be82:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffff80000080be86:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
ffff80000080be8a:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:187
    char *tmp= (char*) kmalloc();
ffff80000080be8e:	49 89 df             	mov    r15,rbx
ffff80000080be91:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080be96:	48 ba 13 2c fe ff ff 	movabs rdx,0xfffffffffffe2c13
ffff80000080be9d:	ff ff ff 
ffff80000080bea0:	48 01 da             	add    rdx,rbx
ffff80000080bea3:	ff d2                	call   rdx
ffff80000080bea5:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:188
    int c=count/(PAGE_4K_SIZE-1),p=0;
ffff80000080bea9:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
ffff80000080bead:	48 ba 11 00 01 10 00 	movabs rdx,0x10010010010011
ffff80000080beb4:	01 10 00 
ffff80000080beb7:	48 89 c8             	mov    rax,rcx
ffff80000080beba:	48 f7 e2             	mul    rdx
ffff80000080bebd:	48 89 c8             	mov    rax,rcx
ffff80000080bec0:	48 29 d0             	sub    rax,rdx
ffff80000080bec3:	48 d1 e8             	shr    rax,1
ffff80000080bec6:	48 01 d0             	add    rax,rdx
ffff80000080bec9:	48 c1 e8 0b          	shr    rax,0xb
ffff80000080becd:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
ffff80000080bed0:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190
    //一块一块输出
    for(int i=0;i<(c?c:1);i++){
ffff80000080bed7:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff80000080bede:	eb 60                	jmp    ffff80000080bf40 <write_framebuffer+0xe5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:191 (discriminator 7)
        memcpy(tmp,buf+p,PAGE_4K_SIZE-1);
ffff80000080bee0:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080bee3:	48 63 d0             	movsxd rdx,eax
ffff80000080bee6:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080beea:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
ffff80000080beee:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bef2:	ba ff 0f 00 00       	mov    edx,0xfff
ffff80000080bef7:	48 89 ce             	mov    rsi,rcx
ffff80000080befa:	48 89 c7             	mov    rdi,rax
ffff80000080befd:	49 89 df             	mov    r15,rbx
ffff80000080bf00:	48 b8 27 3e ff ff ff 	movabs rax,0xffffffffffff3e27
ffff80000080bf07:	ff ff ff 
ffff80000080bf0a:	48 01 d8             	add    rax,rbx
ffff80000080bf0d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:192 (discriminator 7)
        tmp[PAGE_4K_SIZE-1]=0;
ffff80000080bf0f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bf13:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff80000080bf19:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:193 (discriminator 7)
        print(tmp);
ffff80000080bf1c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bf20:	48 89 c7             	mov    rdi,rax
ffff80000080bf23:	49 89 df             	mov    r15,rbx
ffff80000080bf26:	48 b8 db c8 fe ff ff 	movabs rax,0xfffffffffffec8db
ffff80000080bf2d:	ff ff ff 
ffff80000080bf30:	48 01 d8             	add    rax,rbx
ffff80000080bf33:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:194 (discriminator 7)
        p+=PAGE_4K_SIZE-1;
ffff80000080bf35:	81 45 ec ff 0f 00 00 	add    DWORD PTR [rbp-0x14],0xfff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190 (discriminator 7)
    for(int i=0;i<(c?c:1);i++){
ffff80000080bf3c:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190 (discriminator 1)
ffff80000080bf40:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
ffff80000080bf44:	74 05                	je     ffff80000080bf4b <write_framebuffer+0xf0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190 (discriminator 3)
ffff80000080bf46:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080bf49:	eb 05                	jmp    ffff80000080bf50 <write_framebuffer+0xf5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190 (discriminator 4)
ffff80000080bf4b:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190 (discriminator 6)
ffff80000080bf50:	3b 45 e8             	cmp    eax,DWORD PTR [rbp-0x18]
ffff80000080bf53:	7f 8b                	jg     ffff80000080bee0 <write_framebuffer+0x85>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:196
    }
    kmfree(tmp);
ffff80000080bf55:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080bf59:	48 89 c7             	mov    rdi,rax
ffff80000080bf5c:	49 89 df             	mov    r15,rbx
ffff80000080bf5f:	48 b8 82 2f fe ff ff 	movabs rax,0xfffffffffffe2f82
ffff80000080bf66:	ff ff ff 
ffff80000080bf69:	48 01 d8             	add    rax,rbx
ffff80000080bf6c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:197
    return 0;
ffff80000080bf6e:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:198
}
ffff80000080bf73:	48 83 c4 40          	add    rsp,0x40
ffff80000080bf77:	5b                   	pop    rbx
ffff80000080bf78:	41 5f                	pop    r15
ffff80000080bf7a:	5d                   	pop    rbp
ffff80000080bf7b:	c3                   	ret    

ffff80000080bf7c <ioctl_framebuffer>:
ioctl_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:199
long ioctl_framebuffer(struct index_node * inode,struct file * filp,unsigned long cmd,unsigned long arg){
ffff80000080bf7c:	f3 0f 1e fa          	endbr64 
ffff80000080bf80:	55                   	push   rbp
ffff80000080bf81:	48 89 e5             	mov    rbp,rsp
ffff80000080bf84:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080bf84 <ioctl_framebuffer+0x8>
ffff80000080bf8b:	49 bb b4 33 01 00 00 	movabs r11,0x133b4
ffff80000080bf92:	00 00 00 
ffff80000080bf95:	4c 01 d8             	add    rax,r11
ffff80000080bf98:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080bf9c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080bfa0:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080bfa4:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:201

}
ffff80000080bfa8:	90                   	nop
ffff80000080bfa9:	5d                   	pop    rbp
ffff80000080bfaa:	c3                   	ret    

ffff80000080bfab <path_walk>:
path_walk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:13
#include "log.h"
#include "mem.h"
#include "str.h"

struct dir_entry * path_walk(char * name,unsigned long flags)
{
ffff80000080bfab:	f3 0f 1e fa          	endbr64 
ffff80000080bfaf:	55                   	push   rbp
ffff80000080bfb0:	48 89 e5             	mov    rbp,rsp
ffff80000080bfb3:	41 57                	push   r15
ffff80000080bfb5:	53                   	push   rbx
ffff80000080bfb6:	48 83 ec 70          	sub    rsp,0x70
ffff80000080bfba:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080bfba <path_walk+0xf>
ffff80000080bfc1:	49 bb 7e 33 01 00 00 	movabs r11,0x1337e
ffff80000080bfc8:	00 00 00 
ffff80000080bfcb:	4c 01 db             	add    rbx,r11
ffff80000080bfce:	48 89 7d 88          	mov    QWORD PTR [rbp-0x78],rdi
ffff80000080bfd2:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:14
    char * tmpname = NULL;
ffff80000080bfd6:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff80000080bfdd:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:15
    int tmpnamelen = 0;
ffff80000080bfde:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:16
    struct dir_entry * parent = root_sb->root;
ffff80000080bfe5:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff80000080bfec:	ff ff ff 
ffff80000080bfef:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080bff3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080bff6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080bff9:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:17
    struct dir_entry * path = NULL;
ffff80000080bffd:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff80000080c004:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:19

    while(*name == '/')
ffff80000080c005:	eb 05                	jmp    ffff80000080c00c <path_walk+0x61>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:20
        name++;
ffff80000080c007:	48 83 45 88 01       	add    QWORD PTR [rbp-0x78],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:19
    while(*name == '/')
ffff80000080c00c:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080c010:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080c013:	3c 2f                	cmp    al,0x2f
ffff80000080c015:	74 f0                	je     ffff80000080c007 <path_walk+0x5c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:22

    if(!*name)
ffff80000080c017:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080c01b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080c01e:	84 c0                	test   al,al
ffff80000080c020:	75 09                	jne    ffff80000080c02b <path_walk+0x80>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:24
    {
        return parent;
ffff80000080c022:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c026:	e9 06 03 00 00       	jmp    ffff80000080c331 <path_walk+0x386>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:29
    }

    for(;;)
    {
        tmpname = name;
ffff80000080c02b:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080c02f:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:30
        while(*name && (*name != '/'))
ffff80000080c033:	eb 05                	jmp    ffff80000080c03a <path_walk+0x8f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:31
            name++;
ffff80000080c035:	48 83 45 88 01       	add    QWORD PTR [rbp-0x78],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:30
        while(*name && (*name != '/'))
ffff80000080c03a:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080c03e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080c041:	84 c0                	test   al,al
ffff80000080c043:	74 0b                	je     ffff80000080c050 <path_walk+0xa5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:30 (discriminator 1)
ffff80000080c045:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080c049:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080c04c:	3c 2f                	cmp    al,0x2f
ffff80000080c04e:	75 e5                	jne    ffff80000080c035 <path_walk+0x8a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:32
        tmpnamelen = name - tmpname;
ffff80000080c050:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080c054:	48 2b 45 e0          	sub    rax,QWORD PTR [rbp-0x20]
ffff80000080c058:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:34

        path = (struct dir_entry *) kmalloc(sizeof(struct dir_entry), 0);
ffff80000080c05b:	be 00 00 00 00       	mov    esi,0x0
ffff80000080c060:	bf 58 00 00 00       	mov    edi,0x58
ffff80000080c065:	49 89 df             	mov    r15,rbx
ffff80000080c068:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080c06d:	48 ba 13 2c fe ff ff 	movabs rdx,0xfffffffffffe2c13
ffff80000080c074:	ff ff ff 
ffff80000080c077:	48 01 da             	add    rdx,rbx
ffff80000080c07a:	ff d2                	call   rdx
ffff80000080c07c:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:35
        memset(path,0,sizeof(struct dir_entry));
ffff80000080c080:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080c084:	ba 58 00 00 00       	mov    edx,0x58
ffff80000080c089:	be 00 00 00 00       	mov    esi,0x0
ffff80000080c08e:	48 89 c7             	mov    rdi,rax
ffff80000080c091:	49 89 df             	mov    r15,rbx
ffff80000080c094:	48 b8 d6 3e ff ff ff 	movabs rax,0xffffffffffff3ed6
ffff80000080c09b:	ff ff ff 
ffff80000080c09e:	48 01 d8             	add    rax,rbx
ffff80000080c0a1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:37

        path->name = kmalloc();
ffff80000080c0a3:	49 89 df             	mov    r15,rbx
ffff80000080c0a6:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080c0ab:	48 ba 13 2c fe ff ff 	movabs rdx,0xfffffffffffe2c13
ffff80000080c0b2:	ff ff ff 
ffff80000080c0b5:	48 01 da             	add    rdx,rbx
ffff80000080c0b8:	ff d2                	call   rdx
ffff80000080c0ba:	48 89 c2             	mov    rdx,rax
ffff80000080c0bd:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080c0c1:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:38
        memset(path->name,0,tmpnamelen+1);
ffff80000080c0c4:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080c0c7:	83 c0 01             	add    eax,0x1
ffff80000080c0ca:	89 c2                	mov    edx,eax
ffff80000080c0cc:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080c0d0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c0d3:	be 00 00 00 00       	mov    esi,0x0
ffff80000080c0d8:	48 89 c7             	mov    rdi,rax
ffff80000080c0db:	49 89 df             	mov    r15,rbx
ffff80000080c0de:	48 b8 d6 3e ff ff ff 	movabs rax,0xffffffffffff3ed6
ffff80000080c0e5:	ff ff ff 
ffff80000080c0e8:	48 01 d8             	add    rax,rbx
ffff80000080c0eb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:39
        memcpy(path->name,tmpname,tmpnamelen);
ffff80000080c0ed:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080c0f0:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080c0f4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c0f7:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
ffff80000080c0fb:	48 89 ce             	mov    rsi,rcx
ffff80000080c0fe:	48 89 c7             	mov    rdi,rax
ffff80000080c101:	49 89 df             	mov    r15,rbx
ffff80000080c104:	48 b8 27 3e ff ff ff 	movabs rax,0xffffffffffff3e27
ffff80000080c10b:	ff ff ff 
ffff80000080c10e:	48 01 d8             	add    rax,rbx
ffff80000080c111:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:40
        path->name_length = tmpnamelen;
ffff80000080c113:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080c117:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080c11a:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:42

        path=parent->dir_inode->inode_ops->lookup(parent->dir_inode,path);
ffff80000080c11d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c121:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080c125:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080c129:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
ffff80000080c12d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c131:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080c135:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000080c139:	48 89 d6             	mov    rsi,rdx
ffff80000080c13c:	48 89 c7             	mov    rdi,rax
ffff80000080c13f:	ff d1                	call   rcx
ffff80000080c141:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:43
        if(path == NULL)
ffff80000080c145:	48 83 7d d0 00       	cmp    QWORD PTR [rbp-0x30],0x0
ffff80000080c14a:	75 71                	jne    ffff80000080c1bd <path_walk+0x212>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:45
        {
            printf("can not find file or dir:%s\n",path->name);
ffff80000080c14c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080c150:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c153:	48 89 c6             	mov    rsi,rax
ffff80000080c156:	48 b8 bf c6 ff ff ff 	movabs rax,0xffffffffffffc6bf
ffff80000080c15d:	ff ff ff 
ffff80000080c160:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080c164:	48 89 c7             	mov    rdi,rax
ffff80000080c167:	49 89 df             	mov    r15,rbx
ffff80000080c16a:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080c16f:	48 ba 92 23 fe ff ff 	movabs rdx,0xfffffffffffe2392
ffff80000080c176:	ff ff ff 
ffff80000080c179:	48 01 da             	add    rdx,rbx
ffff80000080c17c:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:46
            kmfree(path->name);
ffff80000080c17e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080c182:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c185:	48 89 c7             	mov    rdi,rax
ffff80000080c188:	49 89 df             	mov    r15,rbx
ffff80000080c18b:	48 b8 82 2f fe ff ff 	movabs rax,0xfffffffffffe2f82
ffff80000080c192:	ff ff ff 
ffff80000080c195:	48 01 d8             	add    rax,rbx
ffff80000080c198:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:47
            kmfree(path);
ffff80000080c19a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080c19e:	48 89 c7             	mov    rdi,rax
ffff80000080c1a1:	49 89 df             	mov    r15,rbx
ffff80000080c1a4:	48 b8 82 2f fe ff ff 	movabs rax,0xfffffffffffe2f82
ffff80000080c1ab:	ff ff ff 
ffff80000080c1ae:	48 01 d8             	add    rax,rbx
ffff80000080c1b1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:48
            return NULL;
ffff80000080c1b3:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080c1b8:	e9 74 01 00 00       	jmp    ffff80000080c331 <path_walk+0x386>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:53
        }

//        list_init(&path->child_node);
//        list_init(&path->subdirs_list);
        path->parent = parent;
ffff80000080c1bd:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080c1c1:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080c1c5:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:56
        //list_add会查重，如果链表里面已经有了data指针值相同的项，就不添加。
        //对于/dev这样的文件夹，lookup返回的就是链表里的dentry，data会一样
        list_add(&parent->subdirs_list,&path->child_node);
ffff80000080c1c9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080c1cd:	48 83 c0 10          	add    rax,0x10
ffff80000080c1d1:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080c1d5:	48 83 c2 28          	add    rdx,0x28
ffff80000080c1d9:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
ffff80000080c1dd:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:33
    if(entry->next==NULL)
ffff80000080c1e1:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080c1e5:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080c1e9:	48 85 c0             	test   rax,rax
ffff80000080c1ec:	75 58                	jne    ffff80000080c246 <path_walk+0x29b>
ffff80000080c1ee:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080c1f2:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
ffff80000080c1f6:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080c1fa:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff80000080c1fe:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080c202:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080c206:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080c20a:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff80000080c20e:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080c212:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000080c216:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff80000080c219:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080c21d:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080c221:	48 85 c0             	test   rax,rax
ffff80000080c224:	74 0f                	je     ffff80000080c235 <path_walk+0x28a>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff80000080c226:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080c22a:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080c22e:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffff80000080c232:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:29
    entry->next = new;
ffff80000080c235:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080c239:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffff80000080c23d:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff80000080c241:	e9 9c 00 00 00       	jmp    ffff80000080c2e2 <path_walk+0x337>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:36
        struct List* p=entry;
ffff80000080c246:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080c24a:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff80000080c24e:	eb 21                	jmp    ffff80000080c271 <path_walk+0x2c6>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:38
            if(p->data==new->data)
ffff80000080c250:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080c254:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff80000080c258:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080c25c:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080c260:	48 39 c2             	cmp    rdx,rax
ffff80000080c263:	74 7c                	je     ffff80000080c2e1 <path_walk+0x336>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff80000080c265:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080c269:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080c26d:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
ffff80000080c271:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080c275:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080c279:	48 85 c0             	test   rax,rax
ffff80000080c27c:	74 0e                	je     ffff80000080c28c <path_walk+0x2e1>
ffff80000080c27e:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080c282:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080c286:	48 39 45 a8          	cmp    QWORD PTR [rbp-0x58],rax
ffff80000080c28a:	75 c4                	jne    ffff80000080c250 <path_walk+0x2a5>
ffff80000080c28c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080c290:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
ffff80000080c294:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080c298:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff80000080c29c:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080c2a0:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080c2a4:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080c2a8:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff80000080c2ac:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080c2b0:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
ffff80000080c2b4:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff80000080c2b7:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080c2bb:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080c2bf:	48 85 c0             	test   rax,rax
ffff80000080c2c2:	74 0f                	je     ffff80000080c2d3 <path_walk+0x328>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff80000080c2c4:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080c2c8:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080c2cc:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
ffff80000080c2d0:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:29
    entry->next = new;
ffff80000080c2d3:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080c2d7:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
ffff80000080c2db:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff80000080c2df:	eb 01                	jmp    ffff80000080c2e2 <path_walk+0x337>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:39
                return;
ffff80000080c2e1:	90                   	nop
path_walk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:58

        if(!*name)
ffff80000080c2e2:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080c2e6:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080c2e9:	84 c0                	test   al,al
ffff80000080c2eb:	74 2a                	je     ffff80000080c317 <path_walk+0x36c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:60
            goto last_component;
        while(*name == '/')
ffff80000080c2ed:	eb 05                	jmp    ffff80000080c2f4 <path_walk+0x349>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:61
            name++;
ffff80000080c2ef:	48 83 45 88 01       	add    QWORD PTR [rbp-0x78],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:60
        while(*name == '/')
ffff80000080c2f4:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080c2f8:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080c2fb:	3c 2f                	cmp    al,0x2f
ffff80000080c2fd:	74 f0                	je     ffff80000080c2ef <path_walk+0x344>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:62
        if(!*name)
ffff80000080c2ff:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080c303:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080c306:	84 c0                	test   al,al
ffff80000080c308:	74 10                	je     ffff80000080c31a <path_walk+0x36f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:65
            goto last_slash;

        parent = path;
ffff80000080c30a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080c30e:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:29
        tmpname = name;
ffff80000080c312:	e9 14 fd ff ff       	jmp    ffff80000080c02b <path_walk+0x80>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:59
            goto last_component;
ffff80000080c317:	90                   	nop
ffff80000080c318:	eb 01                	jmp    ffff80000080c31b <path_walk+0x370>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:63
            goto last_slash;
ffff80000080c31a:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:71
    }

    last_slash:
    last_component:

    if(flags & 1)
ffff80000080c31b:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080c31f:	83 e0 01             	and    eax,0x1
ffff80000080c322:	48 85 c0             	test   rax,rax
ffff80000080c325:	74 06                	je     ffff80000080c32d <path_walk+0x382>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:73
    {
        return parent;
ffff80000080c327:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c32b:	eb 04                	jmp    ffff80000080c331 <path_walk+0x386>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:76
    }

    return path;
ffff80000080c32d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:77
}
ffff80000080c331:	48 83 c4 70          	add    rsp,0x70
ffff80000080c335:	5b                   	pop    rbx
ffff80000080c336:	41 5f                	pop    r15
ffff80000080c338:	5d                   	pop    rbp
ffff80000080c339:	c3                   	ret    

ffff80000080c33a <fill_dentry>:
fill_dentry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:81


int fill_dentry(void *buf,char *name, long namelen,long type,long offset)
{
ffff80000080c33a:	f3 0f 1e fa          	endbr64 
ffff80000080c33e:	55                   	push   rbp
ffff80000080c33f:	48 89 e5             	mov    rbp,rsp
ffff80000080c342:	41 57                	push   r15
ffff80000080c344:	48 83 ec 48          	sub    rsp,0x48
ffff80000080c348:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080c348 <fill_dentry+0xe>
ffff80000080c34f:	49 bb f0 2f 01 00 00 	movabs r11,0x12ff0
ffff80000080c356:	00 00 00 
ffff80000080c359:	4c 01 d8             	add    rax,r11
ffff80000080c35c:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff80000080c360:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffff80000080c364:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
ffff80000080c368:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
ffff80000080c36c:	4c 89 45 b8          	mov    QWORD PTR [rbp-0x48],r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:82
    struct dirent* dent = (struct dirent*)buf;
ffff80000080c370:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080c374:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:84

    if((unsigned long)buf < PAGE_4K_SIZE)
ffff80000080c378:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080c37c:	48 81 fa ff 0f 00 00 	cmp    rdx,0xfff
ffff80000080c383:	77 07                	ja     ffff80000080c38c <fill_dentry+0x52>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:85
        return -EFAULT;
ffff80000080c385:	b8 eb ff ff ff       	mov    eax,0xffffffeb
ffff80000080c38a:	eb 53                	jmp    ffff80000080c3df <fill_dentry+0xa5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:87

    memcpy(name,dent->d_name,namelen);
ffff80000080c38c:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080c390:	89 d7                	mov    edi,edx
ffff80000080c392:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080c396:	48 8d 72 18          	lea    rsi,[rdx+0x18]
ffff80000080c39a:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffff80000080c39e:	89 fa                	mov    edx,edi
ffff80000080c3a0:	48 89 cf             	mov    rdi,rcx
ffff80000080c3a3:	49 89 c7             	mov    r15,rax
ffff80000080c3a6:	48 b9 27 3e ff ff ff 	movabs rcx,0xffffffffffff3e27
ffff80000080c3ad:	ff ff ff 
ffff80000080c3b0:	48 01 c1             	add    rcx,rax
ffff80000080c3b3:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:88
    dent->d_namelen = namelen;
ffff80000080c3b5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c3b9:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080c3bd:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:89
    dent->d_type = type;
ffff80000080c3c1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c3c5:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff80000080c3c9:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:90
    dent->d_offset = offset;
ffff80000080c3cd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c3d1:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000080c3d5:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:91
    return sizeof(struct dirent) + namelen;
ffff80000080c3d8:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080c3dc:	83 c0 18             	add    eax,0x18
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:92
}
ffff80000080c3df:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080c3e3:	c9                   	leave  
ffff80000080c3e4:	c3                   	ret    

ffff80000080c3e5 <mount_fs>:
mount_fs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:99
//function mount_root
struct super_block * root_sb = NULL;
struct file_system_type filesystem = {"filesystem",0};

struct super_block* mount_fs(char * name,struct Disk_Partition_Table_Entry * DPTE,void * buf)
{
ffff80000080c3e5:	f3 0f 1e fa          	endbr64 
ffff80000080c3e9:	55                   	push   rbp
ffff80000080c3ea:	48 89 e5             	mov    rbp,rsp
ffff80000080c3ed:	41 57                	push   r15
ffff80000080c3ef:	53                   	push   rbx
ffff80000080c3f0:	48 83 ec 30          	sub    rsp,0x30
ffff80000080c3f4:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080c3f4 <mount_fs+0xf>
ffff80000080c3fb:	49 bb 44 2f 01 00 00 	movabs r11,0x12f44
ffff80000080c402:	00 00 00 
ffff80000080c405:	4c 01 db             	add    rbx,r11
ffff80000080c408:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff80000080c40c:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffff80000080c410:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:100
    struct file_system_type * p = NULL;
ffff80000080c414:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000080c41b:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:102

    for(p = &filesystem;p;p = p->next)
ffff80000080c41c:	48 b8 50 ff ff ff ff 	movabs rax,0xffffffffffffff50
ffff80000080c423:	ff ff ff 
ffff80000080c426:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080c42a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff80000080c42e:	eb 4d                	jmp    ffff80000080c47d <mount_fs+0x98>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:103
        if(!strcmp(p->name,name))
ffff80000080c430:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c434:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c437:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080c43b:	48 89 d6             	mov    rsi,rdx
ffff80000080c43e:	48 89 c7             	mov    rdi,rax
ffff80000080c441:	49 89 df             	mov    r15,rbx
ffff80000080c444:	48 b8 79 41 ff ff ff 	movabs rax,0xffffffffffff4179
ffff80000080c44b:	ff ff ff 
ffff80000080c44e:	48 01 d8             	add    rax,rbx
ffff80000080c451:	ff d0                	call   rax
ffff80000080c453:	85 c0                	test   eax,eax
ffff80000080c455:	75 1a                	jne    ffff80000080c471 <mount_fs+0x8c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:105
        {
            return p->read_superblock(DPTE,buf);
ffff80000080c457:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c45b:	48 8b 48 10          	mov    rcx,QWORD PTR [rax+0x10]
ffff80000080c45f:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080c463:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080c467:	48 89 d6             	mov    rsi,rdx
ffff80000080c46a:	48 89 c7             	mov    rdi,rax
ffff80000080c46d:	ff d1                	call   rcx
ffff80000080c46f:	eb 18                	jmp    ffff80000080c489 <mount_fs+0xa4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:102 (discriminator 2)
    for(p = &filesystem;p;p = p->next)
ffff80000080c471:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c475:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080c479:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:102 (discriminator 1)
ffff80000080c47d:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080c482:	75 ac                	jne    ffff80000080c430 <mount_fs+0x4b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:107
        }
    return 0;
ffff80000080c484:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:108
}
ffff80000080c489:	48 83 c4 30          	add    rsp,0x30
ffff80000080c48d:	5b                   	pop    rbx
ffff80000080c48e:	41 5f                	pop    r15
ffff80000080c490:	5d                   	pop    rbp
ffff80000080c491:	c3                   	ret    

ffff80000080c492 <register_filesystem>:
register_filesystem():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:111

unsigned long register_filesystem(struct file_system_type * fs)
{
ffff80000080c492:	f3 0f 1e fa          	endbr64 
ffff80000080c496:	55                   	push   rbp
ffff80000080c497:	48 89 e5             	mov    rbp,rsp
ffff80000080c49a:	41 57                	push   r15
ffff80000080c49c:	53                   	push   rbx
ffff80000080c49d:	48 83 ec 20          	sub    rsp,0x20
ffff80000080c4a1:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080c4a1 <register_filesystem+0xf>
ffff80000080c4a8:	49 bb 97 2e 01 00 00 	movabs r11,0x12e97
ffff80000080c4af:	00 00 00 
ffff80000080c4b2:	4c 01 db             	add    rbx,r11
ffff80000080c4b5:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:112
    struct file_system_type * p = NULL;
ffff80000080c4b9:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000080c4c0:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:114

    for(p = &filesystem;p;p = p->next)
ffff80000080c4c1:	48 b8 50 ff ff ff ff 	movabs rax,0xffffffffffffff50
ffff80000080c4c8:	ff ff ff 
ffff80000080c4cb:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080c4cf:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff80000080c4d3:	eb 3d                	jmp    ffff80000080c512 <register_filesystem+0x80>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:115
        if(!strcmp(fs->name,p->name))
ffff80000080c4d5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c4d9:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080c4dc:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080c4e0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c4e3:	48 89 d6             	mov    rsi,rdx
ffff80000080c4e6:	48 89 c7             	mov    rdi,rax
ffff80000080c4e9:	49 89 df             	mov    r15,rbx
ffff80000080c4ec:	48 b8 79 41 ff ff ff 	movabs rax,0xffffffffffff4179
ffff80000080c4f3:	ff ff ff 
ffff80000080c4f6:	48 01 d8             	add    rax,rbx
ffff80000080c4f9:	ff d0                	call   rax
ffff80000080c4fb:	85 c0                	test   eax,eax
ffff80000080c4fd:	75 07                	jne    ffff80000080c506 <register_filesystem+0x74>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:116
            return 0;
ffff80000080c4ff:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080c504:	eb 48                	jmp    ffff80000080c54e <register_filesystem+0xbc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:114 (discriminator 2)
    for(p = &filesystem;p;p = p->next)
ffff80000080c506:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c50a:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080c50e:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:114 (discriminator 1)
ffff80000080c512:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080c517:	75 bc                	jne    ffff80000080c4d5 <register_filesystem+0x43>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:118

    fs->next = filesystem.next;
ffff80000080c519:	48 b8 50 ff ff ff ff 	movabs rax,0xffffffffffffff50
ffff80000080c520:	ff ff ff 
ffff80000080c523:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080c527:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
ffff80000080c52b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080c52f:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:119
    filesystem.next = fs;
ffff80000080c533:	48 b8 50 ff ff ff ff 	movabs rax,0xffffffffffffff50
ffff80000080c53a:	ff ff ff 
ffff80000080c53d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080c541:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080c545:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:121

    return 1;
ffff80000080c549:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:122
}
ffff80000080c54e:	48 83 c4 20          	add    rsp,0x20
ffff80000080c552:	5b                   	pop    rbx
ffff80000080c553:	41 5f                	pop    r15
ffff80000080c555:	5d                   	pop    rbp
ffff80000080c556:	c3                   	ret    

ffff80000080c557 <unregister_filesystem>:
unregister_filesystem():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:125

unsigned long unregister_filesystem(struct file_system_type * fs)
{
ffff80000080c557:	f3 0f 1e fa          	endbr64 
ffff80000080c55b:	55                   	push   rbp
ffff80000080c55c:	48 89 e5             	mov    rbp,rsp
ffff80000080c55f:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080c55f <unregister_filesystem+0x8>
ffff80000080c566:	49 bb d9 2d 01 00 00 	movabs r11,0x12dd9
ffff80000080c56d:	00 00 00 
ffff80000080c570:	4c 01 d8             	add    rax,r11
ffff80000080c573:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:126
    struct file_system_type * p = &filesystem;
ffff80000080c577:	48 ba 50 ff ff ff ff 	movabs rdx,0xffffffffffffff50
ffff80000080c57e:	ff ff ff 
ffff80000080c581:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080c585:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:128

    while(p->next)
ffff80000080c589:	eb 41                	jmp    ffff80000080c5cc <unregister_filesystem+0x75>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:129
        if(p->next == fs)
ffff80000080c58b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080c58f:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080c593:	48 39 45 e8          	cmp    QWORD PTR [rbp-0x18],rax
ffff80000080c597:	75 27                	jne    ffff80000080c5c0 <unregister_filesystem+0x69>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:131
        {
            p->next = p->next->next;
ffff80000080c599:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080c59d:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080c5a1:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
ffff80000080c5a5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080c5a9:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:132
            fs->next = NULL;
ffff80000080c5ad:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c5b1:	48 c7 40 18 00 00 00 	mov    QWORD PTR [rax+0x18],0x0
ffff80000080c5b8:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:133
            return 1;
ffff80000080c5b9:	b8 01 00 00 00       	mov    eax,0x1
ffff80000080c5be:	eb 1e                	jmp    ffff80000080c5de <unregister_filesystem+0x87>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:136
        }
        else
            p = p->next;
ffff80000080c5c0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080c5c4:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080c5c8:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:128
    while(p->next)
ffff80000080c5cc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080c5d0:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080c5d4:	48 85 c0             	test   rax,rax
ffff80000080c5d7:	75 b2                	jne    ffff80000080c58b <unregister_filesystem+0x34>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:137
    return 0;
ffff80000080c5d9:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:138
}
ffff80000080c5de:	5d                   	pop    rbp
ffff80000080c5df:	c3                   	ret    

ffff80000080c5e0 <root_lookup>:
root_lookup():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:140
//在parent inode下查找dest dentry
struct dir_entry* root_lookup(struct index_node * parent_inode,struct dir_entry * dest_dentry){
ffff80000080c5e0:	f3 0f 1e fa          	endbr64 
ffff80000080c5e4:	55                   	push   rbp
ffff80000080c5e5:	48 89 e5             	mov    rbp,rsp
ffff80000080c5e8:	41 57                	push   r15
ffff80000080c5ea:	53                   	push   rbx
ffff80000080c5eb:	48 83 ec 30          	sub    rsp,0x30
ffff80000080c5ef:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080c5ef <root_lookup+0xf>
ffff80000080c5f6:	49 bb 49 2d 01 00 00 	movabs r11,0x12d49
ffff80000080c5fd:	00 00 00 
ffff80000080c600:	4c 01 db             	add    rbx,r11
ffff80000080c603:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff80000080c607:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:141
    struct dir_entry* tmp= (struct dir_entry *) parent_inode->private_index_info;
ffff80000080c60b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080c60f:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff80000080c613:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:142
    struct List* p= tmp->subdirs_list.next;
ffff80000080c617:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080c61b:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff80000080c61f:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:143
    while (p){
ffff80000080c623:	eb 61                	jmp    ffff80000080c686 <root_lookup+0xa6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:144
        struct dir_entry* dp=p->data;
ffff80000080c625:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c629:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080c62d:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:145
        if(strcmp(dp->name,dest_dentry->name)==0){
ffff80000080c631:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080c635:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080c638:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080c63c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c63f:	48 89 d6             	mov    rsi,rdx
ffff80000080c642:	48 89 c7             	mov    rdi,rax
ffff80000080c645:	49 89 df             	mov    r15,rbx
ffff80000080c648:	48 b8 79 41 ff ff ff 	movabs rax,0xffffffffffff4179
ffff80000080c64f:	ff ff ff 
ffff80000080c652:	48 01 d8             	add    rax,rbx
ffff80000080c655:	ff d0                	call   rax
ffff80000080c657:	85 c0                	test   eax,eax
ffff80000080c659:	75 1f                	jne    ffff80000080c67a <root_lookup+0x9a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:146
            kmfree(dest_dentry);
ffff80000080c65b:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080c65f:	48 89 c7             	mov    rdi,rax
ffff80000080c662:	49 89 df             	mov    r15,rbx
ffff80000080c665:	48 b8 82 2f fe ff ff 	movabs rax,0xfffffffffffe2f82
ffff80000080c66c:	ff ff ff 
ffff80000080c66f:	48 01 d8             	add    rax,rbx
ffff80000080c672:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:147
            return dp;
ffff80000080c674:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080c678:	eb 31                	jmp    ffff80000080c6ab <root_lookup+0xcb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:149
        }
        p=p->next;
ffff80000080c67a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c67e:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080c682:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:143
    while (p){
ffff80000080c686:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080c68b:	75 98                	jne    ffff80000080c625 <root_lookup+0x45>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:151
    }
    kmfree(dest_dentry);
ffff80000080c68d:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080c691:	48 89 c7             	mov    rdi,rax
ffff80000080c694:	49 89 df             	mov    r15,rbx
ffff80000080c697:	48 b8 82 2f fe ff ff 	movabs rax,0xfffffffffffe2f82
ffff80000080c69e:	ff ff ff 
ffff80000080c6a1:	48 01 d8             	add    rax,rbx
ffff80000080c6a4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:152
    return NULL;
ffff80000080c6a6:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:153
}
ffff80000080c6ab:	48 83 c4 30          	add    rsp,0x30
ffff80000080c6af:	5b                   	pop    rbx
ffff80000080c6b0:	41 5f                	pop    r15
ffff80000080c6b2:	5d                   	pop    rbp
ffff80000080c6b3:	c3                   	ret    

ffff80000080c6b4 <mount_rootfs>:
mount_rootfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:157
struct index_node_operations root_iops={
    .lookup=root_lookup
};
void mount_rootfs(){
ffff80000080c6b4:	f3 0f 1e fa          	endbr64 
ffff80000080c6b8:	55                   	push   rbp
ffff80000080c6b9:	48 89 e5             	mov    rbp,rsp
ffff80000080c6bc:	41 57                	push   r15
ffff80000080c6be:	53                   	push   rbx
ffff80000080c6bf:	48 83 ec 20          	sub    rsp,0x20
ffff80000080c6c3:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080c6c3 <mount_rootfs+0xf>
ffff80000080c6ca:	49 bb 75 2c 01 00 00 	movabs r11,0x12c75
ffff80000080c6d1:	00 00 00 
ffff80000080c6d4:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:158
    root_sb=(struct super_block*) kmalloc();
ffff80000080c6d7:	49 89 df             	mov    r15,rbx
ffff80000080c6da:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080c6df:	48 ba 13 2c fe ff ff 	movabs rdx,0xfffffffffffe2c13
ffff80000080c6e6:	ff ff ff 
ffff80000080c6e9:	48 01 da             	add    rdx,rbx
ffff80000080c6ec:	ff d2                	call   rdx
ffff80000080c6ee:	48 89 c2             	mov    rdx,rax
ffff80000080c6f1:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff80000080c6f8:	ff ff ff 
ffff80000080c6fb:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080c6ff:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:159
    root_sb->root=root_sb+1;//紧凑跟在后面
ffff80000080c702:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff80000080c709:	ff ff ff 
ffff80000080c70c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080c710:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080c713:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff80000080c71a:	ff ff ff 
ffff80000080c71d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080c721:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c724:	48 83 c2 18          	add    rdx,0x18
ffff80000080c728:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:160
    root_sb->sb_ops=NULL;
ffff80000080c72b:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff80000080c732:	ff ff ff 
ffff80000080c735:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080c739:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c73c:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
ffff80000080c743:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:161
    struct index_node* ir=root_sb->root+1;
ffff80000080c744:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff80000080c74b:	ff ff ff 
ffff80000080c74e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080c752:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c755:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c758:	48 83 c0 58          	add    rax,0x58
ffff80000080c75c:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:162
    root_sb->root->dir_inode=ir;
ffff80000080c760:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff80000080c767:	ff ff ff 
ffff80000080c76a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080c76e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c771:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c774:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080c778:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:163
    ir->sb=root_sb;
ffff80000080c77c:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff80000080c783:	ff ff ff 
ffff80000080c786:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080c78a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080c78d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c791:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:164
    ir->attribute=FS_ATTR_DIR;
ffff80000080c795:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c799:	48 c7 40 10 02 00 00 	mov    QWORD PTR [rax+0x10],0x2
ffff80000080c7a0:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:165
    ir->file_size=0;
ffff80000080c7a1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c7a5:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:166
    ir->inode_ops=&root_iops;//lookup函数是必要的
ffff80000080c7ac:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c7b0:	48 ba 58 fd ff ff ff 	movabs rdx,0xfffffffffffffd58
ffff80000080c7b7:	ff ff ff 
ffff80000080c7ba:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080c7be:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:167
    ir->f_ops=NULL;
ffff80000080c7c2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c7c6:	48 c7 40 20 00 00 00 	mov    QWORD PTR [rax+0x20],0x0
ffff80000080c7cd:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:168
    ir->private_index_info=root_sb->root;
ffff80000080c7ce:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff80000080c7d5:	ff ff ff 
ffff80000080c7d8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080c7dc:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c7df:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080c7e2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c7e6:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:170

    root_sb->root->name=ir+1;//紧凑跟在后面
ffff80000080c7ea:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff80000080c7f1:	ff ff ff 
ffff80000080c7f4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080c7f8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c7fb:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c7fe:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080c802:	48 83 c2 38          	add    rdx,0x38
ffff80000080c806:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:171
    strcpy(root_sb->root->name,"/");
ffff80000080c809:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff80000080c810:	ff ff ff 
ffff80000080c813:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080c817:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c81a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c81d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c820:	48 ba e7 c6 ff ff ff 	movabs rdx,0xffffffffffffc6e7
ffff80000080c827:	ff ff ff 
ffff80000080c82a:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff80000080c82e:	48 89 d6             	mov    rsi,rdx
ffff80000080c831:	48 89 c7             	mov    rdi,rax
ffff80000080c834:	49 89 df             	mov    r15,rbx
ffff80000080c837:	48 b8 2b 3f ff ff ff 	movabs rax,0xffffffffffff3f2b
ffff80000080c83e:	ff ff ff 
ffff80000080c841:	48 01 d8             	add    rax,rbx
ffff80000080c844:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:172
    root_sb->root->name_length=1;
ffff80000080c846:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff80000080c84d:	ff ff ff 
ffff80000080c850:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080c854:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c857:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c85a:	c7 40 08 01 00 00 00 	mov    DWORD PTR [rax+0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:173
    root_sb->root->parent=root_sb->root;
ffff80000080c861:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff80000080c868:	ff ff ff 
ffff80000080c86b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080c86f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080c872:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff80000080c879:	ff ff ff 
ffff80000080c87c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080c880:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c883:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c886:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080c889:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:174
    list_init(&root_sb->root->subdirs_list);
ffff80000080c88d:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff80000080c894:	ff ff ff 
ffff80000080c897:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080c89b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c89e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c8a1:	48 83 c0 28          	add    rax,0x28
ffff80000080c8a5:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff80000080c8a9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080c8ad:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000080c8b4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080c8b8:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000080c8bf:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000080c8c0:	90                   	nop
mount_rootfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:175
    list_init(&root_sb->root->child_node);
ffff80000080c8c1:	48 b8 00 fe ff ff ff 	movabs rax,0xfffffffffffffe00
ffff80000080c8c8:	ff ff ff 
ffff80000080c8cb:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080c8cf:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c8d2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c8d5:	48 83 c0 10          	add    rax,0x10
ffff80000080c8d9:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff80000080c8dd:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080c8e1:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000080c8e8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080c8ec:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000080c8f3:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000080c8f4:	90                   	nop
mount_rootfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:177

}
ffff80000080c8f5:	90                   	nop
ffff80000080c8f6:	48 83 c4 20          	add    rsp,0x20
ffff80000080c8fa:	5b                   	pop    rbx
ffff80000080c8fb:	41 5f                	pop    r15
ffff80000080c8fd:	5d                   	pop    rbp
ffff80000080c8fe:	c3                   	ret    

ffff80000080c8ff <sys_putstring>:
sys_putstring():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:20
#include "syscall.h"
#include "int.h"


unsigned long sys_putstring(char *string)
{
ffff80000080c8ff:	f3 0f 1e fa          	endbr64 
ffff80000080c903:	55                   	push   rbp
ffff80000080c904:	48 89 e5             	mov    rbp,rsp
ffff80000080c907:	41 57                	push   r15
ffff80000080c909:	48 83 ec 18          	sub    rsp,0x18
ffff80000080c90d:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080c90d <sys_putstring+0xe>
ffff80000080c914:	49 bb 2b 2a 01 00 00 	movabs r11,0x12a2b
ffff80000080c91b:	00 00 00 
ffff80000080c91e:	4c 01 da             	add    rdx,r11
ffff80000080c921:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:21
    printf(string);
ffff80000080c925:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c929:	48 89 c7             	mov    rdi,rax
ffff80000080c92c:	49 89 d7             	mov    r15,rdx
ffff80000080c92f:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080c934:	48 b9 92 23 fe ff ff 	movabs rcx,0xfffffffffffe2392
ffff80000080c93b:	ff ff ff 
ffff80000080c93e:	48 01 d1             	add    rcx,rdx
ffff80000080c941:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:22
    return 0;
ffff80000080c943:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:23
}
ffff80000080c948:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080c94c:	c9                   	leave  
ffff80000080c94d:	c3                   	ret    

ffff80000080c94e <sys_open>:
sys_open():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:26

unsigned long sys_open(char *filename,int flags)
{
ffff80000080c94e:	f3 0f 1e fa          	endbr64 
ffff80000080c952:	55                   	push   rbp
ffff80000080c953:	48 89 e5             	mov    rbp,rsp
ffff80000080c956:	41 57                	push   r15
ffff80000080c958:	53                   	push   rbx
ffff80000080c959:	48 81 ec a0 00 00 00 	sub    rsp,0xa0
ffff80000080c960:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080c960 <sys_open+0x12>
ffff80000080c967:	49 bb d8 29 01 00 00 	movabs r11,0x129d8
ffff80000080c96e:	00 00 00 
ffff80000080c971:	4c 01 db             	add    rbx,r11
ffff80000080c974:	48 89 bd 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdi
ffff80000080c97b:	89 b5 54 ff ff ff    	mov    DWORD PTR [rbp-0xac],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:27
    char * path = NULL;
ffff80000080c981:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff80000080c988:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:28
    long pathlen = 0;
ffff80000080c989:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
ffff80000080c990:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:29
    long error = 0;
ffff80000080c991:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000080c998:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:30
    struct dir_entry * dentry = NULL;
ffff80000080c999:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff80000080c9a0:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:31
    struct file * filp = NULL;
ffff80000080c9a1:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffff80000080c9a8:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:32
    struct file ** f = NULL;
ffff80000080c9a9:	48 c7 45 b0 00 00 00 	mov    QWORD PTR [rbp-0x50],0x0
ffff80000080c9b0:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:33
    int fd = -1;
ffff80000080c9b1:	c7 45 dc ff ff ff ff 	mov    DWORD PTR [rbp-0x24],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:37
    int i;

//	printf("sys_open\n");
    path = (char *) kmalloc();
ffff80000080c9b8:	49 89 df             	mov    r15,rbx
ffff80000080c9bb:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080c9c0:	48 ba 13 2c fe ff ff 	movabs rdx,0xfffffffffffe2c13
ffff80000080c9c7:	ff ff ff 
ffff80000080c9ca:	48 01 da             	add    rdx,rbx
ffff80000080c9cd:	ff d2                	call   rdx
ffff80000080c9cf:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:38
    if(path == NULL)
ffff80000080c9d3:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffff80000080c9d8:	75 0c                	jne    ffff80000080c9e6 <sys_open+0x98>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:39
        return -ENOMEM;
ffff80000080c9da:	48 c7 c0 cf ff ff ff 	mov    rax,0xffffffffffffffcf
ffff80000080c9e1:	e9 10 06 00 00       	jmp    ffff80000080cff6 <sys_open+0x6a8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:40
    memset(path,0,PAGE_4K_SIZE);
ffff80000080c9e6:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080c9ea:	ba 00 10 00 00       	mov    edx,0x1000
ffff80000080c9ef:	be 00 00 00 00       	mov    esi,0x0
ffff80000080c9f4:	48 89 c7             	mov    rdi,rax
ffff80000080c9f7:	49 89 df             	mov    r15,rbx
ffff80000080c9fa:	48 b8 d6 3e ff ff ff 	movabs rax,0xffffffffffff3ed6
ffff80000080ca01:	ff ff ff 
ffff80000080ca04:	48 01 d8             	add    rax,rbx
ffff80000080ca07:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:41
    pathlen = strlen(filename);
ffff80000080ca09:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
ffff80000080ca10:	48 89 c7             	mov    rdi,rax
ffff80000080ca13:	49 89 df             	mov    r15,rbx
ffff80000080ca16:	48 b8 f8 41 ff ff ff 	movabs rax,0xffffffffffff41f8
ffff80000080ca1d:	ff ff ff 
ffff80000080ca20:	48 01 d8             	add    rax,rbx
ffff80000080ca23:	ff d0                	call   rax
ffff80000080ca25:	48 98                	cdqe   
ffff80000080ca27:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:42
    if(pathlen <= 0)
ffff80000080ca2b:	48 83 7d c0 00       	cmp    QWORD PTR [rbp-0x40],0x0
ffff80000080ca30:	7f 25                	jg     ffff80000080ca57 <sys_open+0x109>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:44
    {
        kmfree(path);
ffff80000080ca32:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080ca36:	48 89 c7             	mov    rdi,rax
ffff80000080ca39:	49 89 df             	mov    r15,rbx
ffff80000080ca3c:	48 b8 82 2f fe ff ff 	movabs rax,0xfffffffffffe2f82
ffff80000080ca43:	ff ff ff 
ffff80000080ca46:	48 01 d8             	add    rax,rbx
ffff80000080ca49:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:45
        return -EFAULT;
ffff80000080ca4b:	48 c7 c0 eb ff ff ff 	mov    rax,0xffffffffffffffeb
ffff80000080ca52:	e9 9f 05 00 00       	jmp    ffff80000080cff6 <sys_open+0x6a8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:47
    }
    else if(pathlen >= PAGE_4K_SIZE)
ffff80000080ca57:	48 81 7d c0 ff 0f 00 	cmp    QWORD PTR [rbp-0x40],0xfff
ffff80000080ca5e:	00 
ffff80000080ca5f:	7e 25                	jle    ffff80000080ca86 <sys_open+0x138>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:49
    {
        kmfree(path);
ffff80000080ca61:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080ca65:	48 89 c7             	mov    rdi,rax
ffff80000080ca68:	49 89 df             	mov    r15,rbx
ffff80000080ca6b:	48 b8 82 2f fe ff ff 	movabs rax,0xfffffffffffe2f82
ffff80000080ca72:	ff ff ff 
ffff80000080ca75:	48 01 d8             	add    rax,rbx
ffff80000080ca78:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:50
        return -ENAMETOOLONG;
ffff80000080ca7a:	48 c7 c0 db ff ff ff 	mov    rax,0xffffffffffffffdb
ffff80000080ca81:	e9 70 05 00 00       	jmp    ffff80000080cff6 <sys_open+0x6a8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:52
    }
    strcpy(path,filename);
ffff80000080ca86:	48 8b 95 58 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa8]
ffff80000080ca8d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080ca91:	48 89 d6             	mov    rsi,rdx
ffff80000080ca94:	48 89 c7             	mov    rdi,rax
ffff80000080ca97:	49 89 df             	mov    r15,rbx
ffff80000080ca9a:	48 b8 2b 3f ff ff ff 	movabs rax,0xffffffffffff3f2b
ffff80000080caa1:	ff ff ff 
ffff80000080caa4:	48 01 d8             	add    rax,rbx
ffff80000080caa7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:54

    dentry = path_walk(path,0);
ffff80000080caa9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080caad:	be 00 00 00 00       	mov    esi,0x0
ffff80000080cab2:	48 89 c7             	mov    rdi,rax
ffff80000080cab5:	49 89 df             	mov    r15,rbx
ffff80000080cab8:	48 b8 73 cc fe ff ff 	movabs rax,0xfffffffffffecc73
ffff80000080cabf:	ff ff ff 
ffff80000080cac2:	48 01 d8             	add    rax,rbx
ffff80000080cac5:	ff d0                	call   rax
ffff80000080cac7:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:56

    if(dentry == NULL){
ffff80000080cacb:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
ffff80000080cad0:	0f 85 bc 02 00 00    	jne    ffff80000080cd92 <sys_open+0x444>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:61
        if(!flags&O_CREAT)
            return -ENOENT;
        //创建文件
        //找到上一级目录
        char* p=path+strlen(path)-1;
ffff80000080cad6:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080cada:	48 89 c7             	mov    rdi,rax
ffff80000080cadd:	49 89 df             	mov    r15,rbx
ffff80000080cae0:	48 b8 f8 41 ff ff ff 	movabs rax,0xffffffffffff41f8
ffff80000080cae7:	ff ff ff 
ffff80000080caea:	48 01 d8             	add    rax,rbx
ffff80000080caed:	ff d0                	call   rax
ffff80000080caef:	48 98                	cdqe   
ffff80000080caf1:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff80000080caf5:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080caf9:	48 01 d0             	add    rax,rdx
ffff80000080cafc:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:62
        for(;*p!='/'&&p>path;p--);
ffff80000080cb00:	eb 05                	jmp    ffff80000080cb07 <sys_open+0x1b9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:62 (discriminator 3)
ffff80000080cb02:	48 83 6d d0 01       	sub    QWORD PTR [rbp-0x30],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:62 (discriminator 1)
ffff80000080cb07:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080cb0b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080cb0e:	3c 2f                	cmp    al,0x2f
ffff80000080cb10:	74 0a                	je     ffff80000080cb1c <sys_open+0x1ce>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:62 (discriminator 2)
ffff80000080cb12:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080cb16:	48 3b 45 c8          	cmp    rax,QWORD PTR [rbp-0x38]
ffff80000080cb1a:	77 e6                	ja     ffff80000080cb02 <sys_open+0x1b4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:63
        *p='\0';
ffff80000080cb1c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080cb20:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:64
        struct dir_entry *parent= path_walk(path,O_DIRECTORY);
ffff80000080cb23:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080cb27:	be 00 40 00 00       	mov    esi,0x4000
ffff80000080cb2c:	48 89 c7             	mov    rdi,rax
ffff80000080cb2f:	49 89 df             	mov    r15,rbx
ffff80000080cb32:	48 b8 73 cc fe ff ff 	movabs rax,0xfffffffffffecc73
ffff80000080cb39:	ff ff ff 
ffff80000080cb3c:	48 01 d8             	add    rax,rbx
ffff80000080cb3f:	ff d0                	call   rax
ffff80000080cb41:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:65
        if(parent==NULL)
ffff80000080cb45:	48 83 7d a8 00       	cmp    QWORD PTR [rbp-0x58],0x0
ffff80000080cb4a:	75 0c                	jne    ffff80000080cb58 <sys_open+0x20a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:66
            return -ENOENT;//上级目录也不在
ffff80000080cb4c:	48 c7 c0 d3 ff ff ff 	mov    rax,0xffffffffffffffd3
ffff80000080cb53:	e9 9e 04 00 00       	jmp    ffff80000080cff6 <sys_open+0x6a8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:68
        //创建新的文件
        dentry=(struct dir_entry*) kmalloc();
ffff80000080cb58:	49 89 df             	mov    r15,rbx
ffff80000080cb5b:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080cb60:	48 ba 13 2c fe ff ff 	movabs rdx,0xfffffffffffe2c13
ffff80000080cb67:	ff ff ff 
ffff80000080cb6a:	48 01 da             	add    rdx,rbx
ffff80000080cb6d:	ff d2                	call   rdx
ffff80000080cb6f:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:69
        list_init(&dentry->subdirs_list);
ffff80000080cb73:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080cb77:	48 83 c0 28          	add    rax,0x28
ffff80000080cb7b:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff80000080cb82:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff80000080cb89:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000080cb90:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff80000080cb97:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000080cb9e:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000080cb9f:	90                   	nop
sys_open():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:70
        list_init(&dentry->child_node);
ffff80000080cba0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080cba4:	48 83 c0 10          	add    rax,0x10
ffff80000080cba8:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff80000080cbaf:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080cbb6:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000080cbbd:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080cbc4:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000080cbcb:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000080cbcc:	90                   	nop
sys_open():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:71
        dentry->child_node.data=dentry;
ffff80000080cbcd:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080cbd1:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080cbd5:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:72
        list_add(&parent->subdirs_list,&dentry->child_node);
ffff80000080cbd9:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080cbdd:	48 83 c0 10          	add    rax,0x10
ffff80000080cbe1:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff80000080cbe5:	48 83 c2 28          	add    rdx,0x28
ffff80000080cbe9:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
ffff80000080cbed:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:33
    if(entry->next==NULL)
ffff80000080cbf1:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080cbf5:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080cbf9:	48 85 c0             	test   rax,rax
ffff80000080cbfc:	75 58                	jne    ffff80000080cc56 <sys_open+0x308>
ffff80000080cbfe:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080cc02:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
ffff80000080cc06:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080cc0a:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff80000080cc0e:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080cc12:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080cc16:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080cc1a:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff80000080cc1e:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080cc22:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
ffff80000080cc26:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff80000080cc29:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080cc2d:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080cc31:	48 85 c0             	test   rax,rax
ffff80000080cc34:	74 0f                	je     ffff80000080cc45 <sys_open+0x2f7>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff80000080cc36:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080cc3a:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080cc3e:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
ffff80000080cc42:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:29
    entry->next = new;
ffff80000080cc45:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080cc49:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
ffff80000080cc4d:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff80000080cc51:	e9 c1 00 00 00       	jmp    ffff80000080cd17 <sys_open+0x3c9>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:36
        struct List* p=entry;
ffff80000080cc56:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080cc5a:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff80000080cc5e:	eb 25                	jmp    ffff80000080cc85 <sys_open+0x337>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:38
            if(p->data==new->data)
ffff80000080cc60:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080cc64:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff80000080cc68:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080cc6c:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080cc70:	48 39 c2             	cmp    rdx,rax
ffff80000080cc73:	0f 84 9d 00 00 00    	je     ffff80000080cd16 <sys_open+0x3c8>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
ffff80000080cc79:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080cc7d:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080cc81:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
ffff80000080cc85:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080cc89:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080cc8d:	48 85 c0             	test   rax,rax
ffff80000080cc90:	74 0e                	je     ffff80000080cca0 <sys_open+0x352>
ffff80000080cc92:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080cc96:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080cc9a:	48 39 45 80          	cmp    QWORD PTR [rbp-0x80],rax
ffff80000080cc9e:	75 c0                	jne    ffff80000080cc60 <sys_open+0x312>
ffff80000080cca0:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080cca4:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
ffff80000080ccab:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080ccaf:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff80000080ccb6:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff80000080ccbd:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080ccc1:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080ccc8:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff80000080cccc:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080ccd3:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
ffff80000080ccda:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff80000080ccdd:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080cce4:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080cce8:	48 85 c0             	test   rax,rax
ffff80000080cceb:	74 15                	je     ffff80000080cd02 <sys_open+0x3b4>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff80000080cced:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080ccf4:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080ccf8:	48 8b 95 70 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x90]
ffff80000080ccff:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:29
    entry->next = new;
ffff80000080cd02:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff80000080cd09:	48 8b 95 70 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x90]
ffff80000080cd10:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff80000080cd14:	eb 01                	jmp    ffff80000080cd17 <sys_open+0x3c9>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:39
                return;
ffff80000080cd16:	90                   	nop
sys_open():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:73
        dentry->parent=parent;
ffff80000080cd17:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080cd1b:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff80000080cd1f:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:74
        dentry->dir_inode=dentry+1;//放在后面
ffff80000080cd23:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080cd27:	48 8d 50 58          	lea    rdx,[rax+0x58]
ffff80000080cd2b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080cd2f:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:75
        dentry->dir_inode->file_size=0;
ffff80000080cd33:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080cd37:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080cd3b:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:77
        //继承操作方法
        dentry->dir_inode->f_ops=parent->dir_inode->f_ops;
ffff80000080cd42:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080cd46:	48 8b 50 40          	mov    rdx,QWORD PTR [rax+0x40]
ffff80000080cd4a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080cd4e:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080cd52:	48 8b 52 20          	mov    rdx,QWORD PTR [rdx+0x20]
ffff80000080cd56:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:78
        dentry->dir_inode->inode_ops=parent->dir_inode->inode_ops;
ffff80000080cd5a:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080cd5e:	48 8b 50 40          	mov    rdx,QWORD PTR [rax+0x40]
ffff80000080cd62:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080cd66:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080cd6a:	48 8b 52 28          	mov    rdx,QWORD PTR [rdx+0x28]
ffff80000080cd6e:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:79
        dentry->dir_ops=parent->dir_ops;
ffff80000080cd72:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080cd76:	48 8b 50 50          	mov    rdx,QWORD PTR [rax+0x50]
ffff80000080cd7a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080cd7e:	48 89 50 50          	mov    QWORD PTR [rax+0x50],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:81
        //这样的创建文件只能创建普通文件，设备文件要通过devman创建
        dentry->dir_inode->attribute=FS_ATTR_FILE;
ffff80000080cd82:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080cd86:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080cd8a:	48 c7 40 10 01 00 00 	mov    QWORD PTR [rax+0x10],0x1
ffff80000080cd91:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:83
    }
    kmfree(path);
ffff80000080cd92:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080cd96:	48 89 c7             	mov    rdi,rax
ffff80000080cd99:	49 89 df             	mov    r15,rbx
ffff80000080cd9c:	48 b8 82 2f fe ff ff 	movabs rax,0xfffffffffffe2f82
ffff80000080cda3:	ff ff ff 
ffff80000080cda6:	48 01 d8             	add    rax,rbx
ffff80000080cda9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:85

    if((flags & O_DIRECTORY) && (dentry->dir_inode->attribute != FS_ATTR_DIR))
ffff80000080cdab:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
ffff80000080cdb1:	25 00 40 00 00       	and    eax,0x4000
ffff80000080cdb6:	85 c0                	test   eax,eax
ffff80000080cdb8:	74 1e                	je     ffff80000080cdd8 <sys_open+0x48a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:85 (discriminator 1)
ffff80000080cdba:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080cdbe:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080cdc2:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080cdc6:	48 83 f8 02          	cmp    rax,0x2
ffff80000080cdca:	74 0c                	je     ffff80000080cdd8 <sys_open+0x48a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:86
        return -ENOTDIR;
ffff80000080cdcc:	48 c7 c0 c7 ff ff ff 	mov    rax,0xffffffffffffffc7
ffff80000080cdd3:	e9 1e 02 00 00       	jmp    ffff80000080cff6 <sys_open+0x6a8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:87
    if(!(flags & O_DIRECTORY) && (dentry->dir_inode->attribute == FS_ATTR_DIR))
ffff80000080cdd8:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
ffff80000080cdde:	25 00 40 00 00       	and    eax,0x4000
ffff80000080cde3:	85 c0                	test   eax,eax
ffff80000080cde5:	75 1e                	jne    ffff80000080ce05 <sys_open+0x4b7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:87 (discriminator 1)
ffff80000080cde7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080cdeb:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080cdef:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080cdf3:	48 83 f8 02          	cmp    rax,0x2
ffff80000080cdf7:	75 0c                	jne    ffff80000080ce05 <sys_open+0x4b7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:88
        return -EISDIR;
ffff80000080cdf9:	48 c7 c0 e1 ff ff ff 	mov    rax,0xffffffffffffffe1
ffff80000080ce00:	e9 f1 01 00 00       	jmp    ffff80000080cff6 <sys_open+0x6a8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:90

    filp = (struct file *) kmalloc();
ffff80000080ce05:	49 89 df             	mov    r15,rbx
ffff80000080ce08:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080ce0d:	48 ba 13 2c fe ff ff 	movabs rdx,0xfffffffffffe2c13
ffff80000080ce14:	ff ff ff 
ffff80000080ce17:	48 01 da             	add    rdx,rbx
ffff80000080ce1a:	ff d2                	call   rdx
ffff80000080ce1c:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:91
    memset(filp,0,sizeof(struct file));
ffff80000080ce20:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080ce24:	ba 28 00 00 00       	mov    edx,0x28
ffff80000080ce29:	be 00 00 00 00       	mov    esi,0x0
ffff80000080ce2e:	48 89 c7             	mov    rdi,rax
ffff80000080ce31:	49 89 df             	mov    r15,rbx
ffff80000080ce34:	48 b8 d6 3e ff ff ff 	movabs rax,0xffffffffffff3ed6
ffff80000080ce3b:	ff ff ff 
ffff80000080ce3e:	48 01 d8             	add    rax,rbx
ffff80000080ce41:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:92
    filp->dentry = dentry;
ffff80000080ce43:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080ce47:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080ce4b:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:93
    filp->mode = flags;
ffff80000080ce4f:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
ffff80000080ce55:	48 63 d0             	movsxd rdx,eax
ffff80000080ce58:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080ce5c:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:95

    if(dentry->dir_inode->attribute & FS_ATTR_DEVICE){
ffff80000080ce60:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ce64:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080ce68:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080ce6c:	83 e0 04             	and    eax,0x4
ffff80000080ce6f:	48 85 c0             	test   rax,rax
ffff80000080ce72:	74 18                	je     ffff80000080ce8c <sys_open+0x53e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:97
        extern struct file_operations dev_dir_fops;
        filp->f_ops = &dev_dir_fops;	//////	find device file operation function
ffff80000080ce74:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080ce78:	48 ba e0 ff ff ff ff 	movabs rdx,0xffffffffffffffe0
ffff80000080ce7f:	ff ff ff 
ffff80000080ce82:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080ce86:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
ffff80000080ce8a:	eb 14                	jmp    ffff80000080cea0 <sys_open+0x552>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:100
    }
    else
        filp->f_ops = dentry->dir_inode->f_ops;
ffff80000080ce8c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ce90:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080ce94:	48 8b 50 20          	mov    rdx,QWORD PTR [rax+0x20]
ffff80000080ce98:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080ce9c:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:101
    if(filp->f_ops && filp->f_ops->open)
ffff80000080cea0:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080cea4:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080cea8:	48 85 c0             	test   rax,rax
ffff80000080ceab:	74 33                	je     ffff80000080cee0 <sys_open+0x592>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:101 (discriminator 1)
ffff80000080cead:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080ceb1:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080ceb5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ceb8:	48 85 c0             	test   rax,rax
ffff80000080cebb:	74 23                	je     ffff80000080cee0 <sys_open+0x592>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:102
        error = filp->f_ops->open(dentry->dir_inode,filp);
ffff80000080cebd:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080cec1:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080cec5:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080cec8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080cecc:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080ced0:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000080ced4:	48 89 d6             	mov    rsi,rdx
ffff80000080ced7:	48 89 c7             	mov    rdi,rax
ffff80000080ceda:	ff d1                	call   rcx
ffff80000080cedc:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:103
    if(error != 1)
ffff80000080cee0:	48 83 7d e8 01       	cmp    QWORD PTR [rbp-0x18],0x1
ffff80000080cee5:	74 25                	je     ffff80000080cf0c <sys_open+0x5be>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:105
    {
        kmfree(filp);
ffff80000080cee7:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080ceeb:	48 89 c7             	mov    rdi,rax
ffff80000080ceee:	49 89 df             	mov    r15,rbx
ffff80000080cef1:	48 b8 82 2f fe ff ff 	movabs rax,0xfffffffffffe2f82
ffff80000080cef8:	ff ff ff 
ffff80000080cefb:	48 01 d8             	add    rax,rbx
ffff80000080cefe:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:106
        return -EFAULT;
ffff80000080cf00:	48 c7 c0 eb ff ff ff 	mov    rax,0xffffffffffffffeb
ffff80000080cf07:	e9 ea 00 00 00       	jmp    ffff80000080cff6 <sys_open+0x6a8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:109
    }

    if(filp->mode & O_TRUNC)
ffff80000080cf0c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080cf10:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080cf14:	25 00 02 00 00       	and    eax,0x200
ffff80000080cf19:	48 85 c0             	test   rax,rax
ffff80000080cf1c:	74 13                	je     ffff80000080cf31 <sys_open+0x5e3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:111
    {
        filp->dentry->dir_inode->file_size = 0;
ffff80000080cf1e:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080cf22:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080cf26:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080cf2a:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:113
    }
    if(filp->mode & O_APPEND)
ffff80000080cf31:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080cf35:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080cf39:	25 00 04 00 00       	and    eax,0x400
ffff80000080cf3e:	48 85 c0             	test   rax,rax
ffff80000080cf41:	74 19                	je     ffff80000080cf5c <sys_open+0x60e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:115
    {
        filp->position = filp->dentry->dir_inode->file_size;
ffff80000080cf43:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080cf47:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080cf4b:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080cf4f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080cf52:	48 89 c2             	mov    rdx,rax
ffff80000080cf55:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080cf59:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:118
    }

    f = current->openf;
ffff80000080cf5c:	48 b8 90 fe ff ff ff 	movabs rax,0xfffffffffffffe90
ffff80000080cf63:	ff ff ff 
ffff80000080cf66:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080cf6a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080cf6d:	48 05 d8 00 00 00    	add    rax,0xd8
ffff80000080cf73:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:119
    for(i = 0;i < MAX_TASKS;i++)
ffff80000080cf77:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [rbp-0x28],0x0
ffff80000080cf7e:	eb 28                	jmp    ffff80000080cfa8 <sys_open+0x65a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:120
        if(f[i] == NULL)
ffff80000080cf80:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080cf83:	48 98                	cdqe   
ffff80000080cf85:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080cf8c:	00 
ffff80000080cf8d:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080cf91:	48 01 d0             	add    rax,rdx
ffff80000080cf94:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080cf97:	48 85 c0             	test   rax,rax
ffff80000080cf9a:	75 08                	jne    ffff80000080cfa4 <sys_open+0x656>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:122
        {
            fd = i;
ffff80000080cf9c:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080cf9f:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:123
            break;
ffff80000080cfa2:	eb 0a                	jmp    ffff80000080cfae <sys_open+0x660>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:119 (discriminator 2)
    for(i = 0;i < MAX_TASKS;i++)
ffff80000080cfa4:	83 45 d8 01          	add    DWORD PTR [rbp-0x28],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:119 (discriminator 1)
ffff80000080cfa8:	83 7d d8 1f          	cmp    DWORD PTR [rbp-0x28],0x1f
ffff80000080cfac:	7e d2                	jle    ffff80000080cf80 <sys_open+0x632>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:125
        }
    if(i == MAX_TASKS)
ffff80000080cfae:	83 7d d8 20          	cmp    DWORD PTR [rbp-0x28],0x20
ffff80000080cfb2:	75 22                	jne    ffff80000080cfd6 <sys_open+0x688>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:127
    {
        kmfree(filp);
ffff80000080cfb4:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080cfb8:	48 89 c7             	mov    rdi,rax
ffff80000080cfbb:	49 89 df             	mov    r15,rbx
ffff80000080cfbe:	48 b8 82 2f fe ff ff 	movabs rax,0xfffffffffffe2f82
ffff80000080cfc5:	ff ff ff 
ffff80000080cfc8:	48 01 d8             	add    rax,rbx
ffff80000080cfcb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:129
        //// reclaim struct index_node & struct dir_entry
        return -EMFILE;
ffff80000080cfcd:	48 c7 c0 df ff ff ff 	mov    rax,0xffffffffffffffdf
ffff80000080cfd4:	eb 20                	jmp    ffff80000080cff6 <sys_open+0x6a8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:131
    }
    f[fd] = filp;
ffff80000080cfd6:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080cfd9:	48 98                	cdqe   
ffff80000080cfdb:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080cfe2:	00 
ffff80000080cfe3:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080cfe7:	48 01 c2             	add    rdx,rax
ffff80000080cfea:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080cfee:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:133

    return fd;
ffff80000080cff1:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080cff4:	48 98                	cdqe   
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:134
}
ffff80000080cff6:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
ffff80000080cffd:	5b                   	pop    rbx
ffff80000080cffe:	41 5f                	pop    r15
ffff80000080d000:	5d                   	pop    rbp
ffff80000080d001:	c3                   	ret    

ffff80000080d002 <sys_close>:
sys_close():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:137

unsigned long sys_close(int fd)
{
ffff80000080d002:	f3 0f 1e fa          	endbr64 
ffff80000080d006:	55                   	push   rbp
ffff80000080d007:	48 89 e5             	mov    rbp,rsp
ffff80000080d00a:	41 57                	push   r15
ffff80000080d00c:	53                   	push   rbx
ffff80000080d00d:	48 83 ec 20          	sub    rsp,0x20
ffff80000080d011:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080d011 <sys_close+0xf>
ffff80000080d018:	49 bb 27 23 01 00 00 	movabs r11,0x12327
ffff80000080d01f:	00 00 00 
ffff80000080d022:	4c 01 db             	add    rbx,r11
ffff80000080d025:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:138
    struct file * filp = NULL;
ffff80000080d028:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000080d02f:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:141

//	printf("sys_close:%d\n",fd);
    if(fd < 0 || fd >= MAX_TASKS)
ffff80000080d030:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
ffff80000080d034:	78 06                	js     ffff80000080d03c <sys_close+0x3a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:141 (discriminator 1)
ffff80000080d036:	83 7d dc 1f          	cmp    DWORD PTR [rbp-0x24],0x1f
ffff80000080d03a:	7e 0c                	jle    ffff80000080d048 <sys_close+0x46>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:142
        return -EBADF;
ffff80000080d03c:	48 c7 c0 f8 ff ff ff 	mov    rax,0xfffffffffffffff8
ffff80000080d043:	e9 a8 00 00 00       	jmp    ffff80000080d0f0 <sys_close+0xee>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:144

    filp = current->openf[fd];
ffff80000080d048:	48 b8 90 fe ff ff ff 	movabs rax,0xfffffffffffffe90
ffff80000080d04f:	ff ff ff 
ffff80000080d052:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d056:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d059:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080d05c:	48 63 d2             	movsxd rdx,edx
ffff80000080d05f:	48 83 c2 1a          	add    rdx,0x1a
ffff80000080d063:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff80000080d068:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:145
    if(filp->f_ops && filp->f_ops->close)
ffff80000080d06c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d070:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080d074:	48 85 c0             	test   rax,rax
ffff80000080d077:	74 35                	je     ffff80000080d0ae <sys_close+0xac>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:145 (discriminator 1)
ffff80000080d079:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d07d:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080d081:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080d085:	48 85 c0             	test   rax,rax
ffff80000080d088:	74 24                	je     ffff80000080d0ae <sys_close+0xac>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:146
        filp->f_ops->close(filp->dentry->dir_inode,filp);
ffff80000080d08a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d08e:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080d092:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
ffff80000080d096:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d09a:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080d09e:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080d0a2:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080d0a6:	48 89 d6             	mov    rsi,rdx
ffff80000080d0a9:	48 89 c7             	mov    rdi,rax
ffff80000080d0ac:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:148

    kmfree(filp);
ffff80000080d0ae:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d0b2:	48 89 c7             	mov    rdi,rax
ffff80000080d0b5:	49 89 df             	mov    r15,rbx
ffff80000080d0b8:	48 b8 82 2f fe ff ff 	movabs rax,0xfffffffffffe2f82
ffff80000080d0bf:	ff ff ff 
ffff80000080d0c2:	48 01 d8             	add    rax,rbx
ffff80000080d0c5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:149
    current->openf[fd] = NULL;
ffff80000080d0c7:	48 b8 90 fe ff ff ff 	movabs rax,0xfffffffffffffe90
ffff80000080d0ce:	ff ff ff 
ffff80000080d0d1:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d0d5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d0d8:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080d0db:	48 63 d2             	movsxd rdx,edx
ffff80000080d0de:	48 83 c2 1a          	add    rdx,0x1a
ffff80000080d0e2:	48 c7 44 d0 08 00 00 	mov    QWORD PTR [rax+rdx*8+0x8],0x0
ffff80000080d0e9:	00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:151

    return 0;
ffff80000080d0eb:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:152
}
ffff80000080d0f0:	48 83 c4 20          	add    rsp,0x20
ffff80000080d0f4:	5b                   	pop    rbx
ffff80000080d0f5:	41 5f                	pop    r15
ffff80000080d0f7:	5d                   	pop    rbp
ffff80000080d0f8:	c3                   	ret    

ffff80000080d0f9 <sys_read>:
sys_read():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:155

unsigned long sys_read(int fd,void * buf,long count)
{
ffff80000080d0f9:	f3 0f 1e fa          	endbr64 
ffff80000080d0fd:	55                   	push   rbp
ffff80000080d0fe:	48 89 e5             	mov    rbp,rsp
ffff80000080d101:	48 83 ec 30          	sub    rsp,0x30
ffff80000080d105:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d105 <sys_read+0xc>
ffff80000080d10c:	49 bb 33 22 01 00 00 	movabs r11,0x12233
ffff80000080d113:	00 00 00 
ffff80000080d116:	4c 01 d8             	add    rax,r11
ffff80000080d119:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff80000080d11c:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080d120:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:156
    struct file * filp = NULL;
ffff80000080d124:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffff80000080d12b:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:157
    unsigned long ret = 0;
ffff80000080d12c:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080d133:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:160

//	printf("sys_read:%d\n",fd);
    if(fd < 0 || fd >= MAX_TASKS)
ffff80000080d134:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff80000080d138:	78 06                	js     ffff80000080d140 <sys_read+0x47>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:160 (discriminator 1)
ffff80000080d13a:	83 7d ec 1f          	cmp    DWORD PTR [rbp-0x14],0x1f
ffff80000080d13e:	7e 09                	jle    ffff80000080d149 <sys_read+0x50>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:161
        return -EBADF;
ffff80000080d140:	48 c7 c0 f8 ff ff ff 	mov    rax,0xfffffffffffffff8
ffff80000080d147:	eb 7c                	jmp    ffff80000080d1c5 <sys_read+0xcc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:162
    if(count < 0)
ffff80000080d149:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff80000080d14e:	79 09                	jns    ffff80000080d159 <sys_read+0x60>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:163
        return -EINVAL;
ffff80000080d150:	48 c7 c0 e4 ff ff ff 	mov    rax,0xffffffffffffffe4
ffff80000080d157:	eb 6c                	jmp    ffff80000080d1c5 <sys_read+0xcc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:165

    filp = current->openf[fd];
ffff80000080d159:	48 ba 90 fe ff ff ff 	movabs rdx,0xfffffffffffffe90
ffff80000080d160:	ff ff ff 
ffff80000080d163:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080d167:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d16a:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080d16d:	48 63 d2             	movsxd rdx,edx
ffff80000080d170:	48 83 c2 1a          	add    rdx,0x1a
ffff80000080d174:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff80000080d179:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:166
    if(filp->f_ops && filp->f_ops->read)
ffff80000080d17d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080d181:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080d185:	48 85 c0             	test   rax,rax
ffff80000080d188:	74 37                	je     ffff80000080d1c1 <sys_read+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:166 (discriminator 1)
ffff80000080d18a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080d18e:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080d192:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080d196:	48 85 c0             	test   rax,rax
ffff80000080d199:	74 26                	je     ffff80000080d1c1 <sys_read+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:167
        ret = filp->f_ops->read(filp,buf,count,&filp->position);
ffff80000080d19b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080d19f:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080d1a3:	4c 8b 40 10          	mov    r8,QWORD PTR [rax+0x10]
ffff80000080d1a7:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff80000080d1ab:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080d1af:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff80000080d1b3:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080d1b7:	48 89 c7             	mov    rdi,rax
ffff80000080d1ba:	41 ff d0             	call   r8
ffff80000080d1bd:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:168
    return ret;
ffff80000080d1c1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:169
}
ffff80000080d1c5:	c9                   	leave  
ffff80000080d1c6:	c3                   	ret    

ffff80000080d1c7 <sys_write>:
sys_write():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:172

unsigned long sys_write(int fd,void * buf,long count)
{
ffff80000080d1c7:	f3 0f 1e fa          	endbr64 
ffff80000080d1cb:	55                   	push   rbp
ffff80000080d1cc:	48 89 e5             	mov    rbp,rsp
ffff80000080d1cf:	48 83 ec 30          	sub    rsp,0x30
ffff80000080d1d3:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d1d3 <sys_write+0xc>
ffff80000080d1da:	49 bb 65 21 01 00 00 	movabs r11,0x12165
ffff80000080d1e1:	00 00 00 
ffff80000080d1e4:	4c 01 d8             	add    rax,r11
ffff80000080d1e7:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff80000080d1ea:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080d1ee:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:173
    struct file * filp = NULL;
ffff80000080d1f2:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffff80000080d1f9:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:174
    unsigned long ret = 0;
ffff80000080d1fa:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080d201:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:177

//	printf("sys_write:%d\n",fd);
    if(fd < 0 || fd >= MAX_TASKS)
ffff80000080d202:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff80000080d206:	78 06                	js     ffff80000080d20e <sys_write+0x47>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:177 (discriminator 1)
ffff80000080d208:	83 7d ec 1f          	cmp    DWORD PTR [rbp-0x14],0x1f
ffff80000080d20c:	7e 09                	jle    ffff80000080d217 <sys_write+0x50>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:178
        return -EBADF;
ffff80000080d20e:	48 c7 c0 f8 ff ff ff 	mov    rax,0xfffffffffffffff8
ffff80000080d215:	eb 7c                	jmp    ffff80000080d293 <sys_write+0xcc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:179
    if(count < 0)
ffff80000080d217:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff80000080d21c:	79 09                	jns    ffff80000080d227 <sys_write+0x60>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:180
        return -EINVAL;
ffff80000080d21e:	48 c7 c0 e4 ff ff ff 	mov    rax,0xffffffffffffffe4
ffff80000080d225:	eb 6c                	jmp    ffff80000080d293 <sys_write+0xcc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:182

    filp = current->openf[fd];
ffff80000080d227:	48 ba 90 fe ff ff ff 	movabs rdx,0xfffffffffffffe90
ffff80000080d22e:	ff ff ff 
ffff80000080d231:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080d235:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d238:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080d23b:	48 63 d2             	movsxd rdx,edx
ffff80000080d23e:	48 83 c2 1a          	add    rdx,0x1a
ffff80000080d242:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff80000080d247:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:183
    if(filp->f_ops && filp->f_ops->write)
ffff80000080d24b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080d24f:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080d253:	48 85 c0             	test   rax,rax
ffff80000080d256:	74 37                	je     ffff80000080d28f <sys_write+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:183 (discriminator 1)
ffff80000080d258:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080d25c:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080d260:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080d264:	48 85 c0             	test   rax,rax
ffff80000080d267:	74 26                	je     ffff80000080d28f <sys_write+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:184
        ret = filp->f_ops->write(filp,buf,count,&filp->position);
ffff80000080d269:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080d26d:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080d271:	4c 8b 40 18          	mov    r8,QWORD PTR [rax+0x18]
ffff80000080d275:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff80000080d279:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080d27d:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff80000080d281:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080d285:	48 89 c7             	mov    rdi,rax
ffff80000080d288:	41 ff d0             	call   r8
ffff80000080d28b:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:185
    return ret;
ffff80000080d28f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:186
}
ffff80000080d293:	c9                   	leave  
ffff80000080d294:	c3                   	ret    

ffff80000080d295 <sys_lseek>:
sys_lseek():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:190


unsigned long sys_lseek(int filds,long offset,int whence)
{
ffff80000080d295:	f3 0f 1e fa          	endbr64 
ffff80000080d299:	55                   	push   rbp
ffff80000080d29a:	48 89 e5             	mov    rbp,rsp
ffff80000080d29d:	48 83 ec 20          	sub    rsp,0x20
ffff80000080d2a1:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d2a1 <sys_lseek+0xc>
ffff80000080d2a8:	49 bb 97 20 01 00 00 	movabs r11,0x12097
ffff80000080d2af:	00 00 00 
ffff80000080d2b2:	4c 01 d8             	add    rax,r11
ffff80000080d2b5:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff80000080d2b8:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080d2bc:	89 55 e8             	mov    DWORD PTR [rbp-0x18],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:191
    struct file * filp = NULL;
ffff80000080d2bf:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffff80000080d2c6:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:192
    unsigned long ret = 0;
ffff80000080d2c7:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080d2ce:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:195

//	printf("sys_lseek:%d\n",filds);
    if(filds < 0 || filds >= MAX_TASKS)
ffff80000080d2cf:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff80000080d2d3:	78 06                	js     ffff80000080d2db <sys_lseek+0x46>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:195 (discriminator 1)
ffff80000080d2d5:	83 7d ec 1f          	cmp    DWORD PTR [rbp-0x14],0x1f
ffff80000080d2d9:	7e 0c                	jle    ffff80000080d2e7 <sys_lseek+0x52>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:196
        return -EBADF;
ffff80000080d2db:	48 c7 c0 f8 ff ff ff 	mov    rax,0xfffffffffffffff8
ffff80000080d2e2:	e9 82 00 00 00       	jmp    ffff80000080d369 <sys_lseek+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:197
    if(whence < 0 || whence >= SEEK_MAX)
ffff80000080d2e7:	83 7d e8 00          	cmp    DWORD PTR [rbp-0x18],0x0
ffff80000080d2eb:	78 06                	js     ffff80000080d2f3 <sys_lseek+0x5e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:197 (discriminator 1)
ffff80000080d2ed:	83 7d e8 02          	cmp    DWORD PTR [rbp-0x18],0x2
ffff80000080d2f1:	7e 09                	jle    ffff80000080d2fc <sys_lseek+0x67>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:198
        return -EINVAL;
ffff80000080d2f3:	48 c7 c0 e4 ff ff ff 	mov    rax,0xffffffffffffffe4
ffff80000080d2fa:	eb 6d                	jmp    ffff80000080d369 <sys_lseek+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:200

    filp = current->openf[filds];
ffff80000080d2fc:	48 ba 90 fe ff ff ff 	movabs rdx,0xfffffffffffffe90
ffff80000080d303:	ff ff ff 
ffff80000080d306:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080d30a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d30d:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080d310:	48 63 d2             	movsxd rdx,edx
ffff80000080d313:	48 83 c2 1a          	add    rdx,0x1a
ffff80000080d317:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff80000080d31c:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:201
    if(filp->f_ops && filp->f_ops->lseek)
ffff80000080d320:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080d324:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080d328:	48 85 c0             	test   rax,rax
ffff80000080d32b:	74 38                	je     ffff80000080d365 <sys_lseek+0xd0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:201 (discriminator 1)
ffff80000080d32d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080d331:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080d335:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000080d339:	48 85 c0             	test   rax,rax
ffff80000080d33c:	74 27                	je     ffff80000080d365 <sys_lseek+0xd0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:202
        ret = filp->f_ops->lseek(filp,offset,whence);
ffff80000080d33e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080d342:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080d346:	4c 8b 40 20          	mov    r8,QWORD PTR [rax+0x20]
ffff80000080d34a:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080d34d:	48 63 d0             	movsxd rdx,eax
ffff80000080d350:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
ffff80000080d354:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080d358:	48 89 ce             	mov    rsi,rcx
ffff80000080d35b:	48 89 c7             	mov    rdi,rax
ffff80000080d35e:	41 ff d0             	call   r8
ffff80000080d361:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:203
    return ret;
ffff80000080d365:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:204
}
ffff80000080d369:	c9                   	leave  
ffff80000080d36a:	c3                   	ret    

ffff80000080d36b <sys_vfork>:
sys_vfork():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:214
//    printf("sys_fork\n");
//    //return do_fork(regs,0,regs->rsp,0);
//}

unsigned long sys_vfork()
{
ffff80000080d36b:	f3 0f 1e fa          	endbr64 
ffff80000080d36f:	55                   	push   rbp
ffff80000080d370:	48 89 e5             	mov    rbp,rsp
ffff80000080d373:	41 57                	push   r15
ffff80000080d375:	48 83 ec 18          	sub    rsp,0x18
ffff80000080d379:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080d379 <sys_vfork+0xe>
ffff80000080d380:	49 bb bf 1f 01 00 00 	movabs r11,0x11fbf
ffff80000080d387:	00 00 00 
ffff80000080d38a:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:215
    regs_t *regs = (regs_t *)current->tss.rsp0 -1;
ffff80000080d38d:	48 b8 90 fe ff ff ff 	movabs rax,0xfffffffffffffe90
ffff80000080d394:	ff ff ff 
ffff80000080d397:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff80000080d39b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d39e:	48 8b 80 dc 01 00 00 	mov    rax,QWORD PTR [rax+0x1dc]
ffff80000080d3a5:	48 2d d0 00 00 00    	sub    rax,0xd0
ffff80000080d3ab:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:216
    printf("sys_vfork\n");
ffff80000080d3af:	48 b8 f0 c6 ff ff ff 	movabs rax,0xffffffffffffc6f0
ffff80000080d3b6:	ff ff ff 
ffff80000080d3b9:	48 8d 04 02          	lea    rax,[rdx+rax*1]
ffff80000080d3bd:	48 89 c7             	mov    rdi,rax
ffff80000080d3c0:	49 89 d7             	mov    r15,rdx
ffff80000080d3c3:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080d3c8:	48 b9 92 23 fe ff ff 	movabs rcx,0xfffffffffffe2392
ffff80000080d3cf:	ff ff ff 
ffff80000080d3d2:	48 01 d1             	add    rcx,rdx
ffff80000080d3d5:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:218
    //return do_fork(regs,CLONE_VM | CLONE_FS | CLONE_SIGNAL,regs->rsp,0);
}
ffff80000080d3d7:	90                   	nop
ffff80000080d3d8:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080d3dc:	c9                   	leave  
ffff80000080d3dd:	c3                   	ret    

ffff80000080d3de <sys_wait>:
sys_wait():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:261

/*
	rusage reserved
*/

unsigned long sys_wait(pid_t pid, int *stat_loc, int options){
ffff80000080d3de:	f3 0f 1e fa          	endbr64 
ffff80000080d3e2:	55                   	push   rbp
ffff80000080d3e3:	48 89 e5             	mov    rbp,rsp
ffff80000080d3e6:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d3e6 <sys_wait+0x8>
ffff80000080d3ed:	49 bb 52 1f 01 00 00 	movabs r11,0x11f52
ffff80000080d3f4:	00 00 00 
ffff80000080d3f7:	4c 01 d8             	add    rax,r11
ffff80000080d3fa:	89 7d bc             	mov    DWORD PTR [rbp-0x44],edi
ffff80000080d3fd:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
ffff80000080d401:	89 55 b8             	mov    DWORD PTR [rbp-0x48],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:262
    struct process* waitee=NULL;
ffff80000080d404:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080d40b:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:264
    extern struct process task[];
    if(!current->child_procs)
ffff80000080d40c:	48 ba 90 fe ff ff ff 	movabs rdx,0xfffffffffffffe90
ffff80000080d413:	ff ff ff 
ffff80000080d416:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080d41a:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080d41d:	48 8b 92 2c 03 00 00 	mov    rdx,QWORD PTR [rdx+0x32c]
ffff80000080d424:	48 85 d2             	test   rdx,rdx
ffff80000080d427:	75 0c                	jne    ffff80000080d435 <sys_wait+0x57>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:265
        return -ECHILD;//没有子进程可以等
ffff80000080d429:	48 c7 c0 f4 ff ff ff 	mov    rax,0xfffffffffffffff4
ffff80000080d430:	e9 ef 01 00 00       	jmp    ffff80000080d624 <sys_wait+0x246>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:266
    if(pid==-1){
ffff80000080d435:	83 7d bc ff          	cmp    DWORD PTR [rbp-0x44],0xffffffff
ffff80000080d439:	75 58                	jne    ffff80000080d493 <sys_wait+0xb5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:269
        //任意一个子进程
        while (1) {
            for(struct List* l=current->child_procs;l;l=l->next) {
ffff80000080d43b:	48 ba 90 fe ff ff ff 	movabs rdx,0xfffffffffffffe90
ffff80000080d442:	ff ff ff 
ffff80000080d445:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080d449:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080d44c:	48 8b 92 2c 03 00 00 	mov    rdx,QWORD PTR [rdx+0x32c]
ffff80000080d453:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
ffff80000080d457:	eb 31                	jmp    ffff80000080d48a <sys_wait+0xac>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:270
                struct process* p=l->data;
ffff80000080d459:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080d45d:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff80000080d461:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:271
                if(p->stat == TASK_ZOMBIE) {
ffff80000080d465:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000080d469:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff80000080d46c:	83 fa 04             	cmp    edx,0x4
ffff80000080d46f:	75 0d                	jne    ffff80000080d47e <sys_wait+0xa0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:272
                    waitee=p;
ffff80000080d471:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080d475:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:273
                    goto done;
ffff80000080d479:	e9 46 01 00 00       	jmp    ffff80000080d5c4 <sys_wait+0x1e6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:269 (discriminator 2)
            for(struct List* l=current->child_procs;l;l=l->next) {
ffff80000080d47e:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080d482:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
ffff80000080d486:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:269 (discriminator 1)
ffff80000080d48a:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
ffff80000080d48f:	75 c8                	jne    ffff80000080d459 <sys_wait+0x7b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:269
ffff80000080d491:	eb a8                	jmp    ffff80000080d43b <sys_wait+0x5d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:278
                }
            }
        }

    }else if(pid==0) {
ffff80000080d493:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
ffff80000080d497:	75 77                	jne    ffff80000080d510 <sys_wait+0x132>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:281
        //等待任意一个和父进程同一个进程组的子进程
        while (1) {
            for(struct List* l=current->child_procs;l;l=l->next) {
ffff80000080d499:	48 ba 90 fe ff ff ff 	movabs rdx,0xfffffffffffffe90
ffff80000080d4a0:	ff ff ff 
ffff80000080d4a3:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080d4a7:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080d4aa:	48 8b 92 2c 03 00 00 	mov    rdx,QWORD PTR [rdx+0x32c]
ffff80000080d4b1:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080d4b5:	eb 50                	jmp    ffff80000080d507 <sys_wait+0x129>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:282
                struct process* p=l->data;
ffff80000080d4b7:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080d4bb:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff80000080d4bf:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:283
                if(p->gpid==current->gpid&& p->stat == TASK_ZOMBIE) {
ffff80000080d4c3:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080d4c7:	8b 4a 04             	mov    ecx,DWORD PTR [rdx+0x4]
ffff80000080d4ca:	48 ba 90 fe ff ff ff 	movabs rdx,0xfffffffffffffe90
ffff80000080d4d1:	ff ff ff 
ffff80000080d4d4:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080d4d8:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080d4db:	8b 52 04             	mov    edx,DWORD PTR [rdx+0x4]
ffff80000080d4de:	39 d1                	cmp    ecx,edx
ffff80000080d4e0:	75 19                	jne    ffff80000080d4fb <sys_wait+0x11d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:283 (discriminator 1)
ffff80000080d4e2:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080d4e6:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff80000080d4e9:	83 fa 04             	cmp    edx,0x4
ffff80000080d4ec:	75 0d                	jne    ffff80000080d4fb <sys_wait+0x11d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:284
                    waitee=p;
ffff80000080d4ee:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080d4f2:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:285
                    goto done;
ffff80000080d4f6:	e9 c9 00 00 00       	jmp    ffff80000080d5c4 <sys_wait+0x1e6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:281 (discriminator 2)
            for(struct List* l=current->child_procs;l;l=l->next) {
ffff80000080d4fb:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080d4ff:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
ffff80000080d503:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:281 (discriminator 1)
ffff80000080d507:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080d50c:	75 a9                	jne    ffff80000080d4b7 <sys_wait+0xd9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:281
ffff80000080d50e:	eb 89                	jmp    ffff80000080d499 <sys_wait+0xbb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:290
                }
            }
        }
    }else{
        if(pid<0)pid=-pid;
ffff80000080d510:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
ffff80000080d514:	79 03                	jns    ffff80000080d519 <sys_wait+0x13b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:290 (discriminator 1)
ffff80000080d516:	f7 5d bc             	neg    DWORD PTR [rbp-0x44]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:292
        //检查是不是本进程的子进程
        for(int i=0;i<MAX_TASKS;i++){
ffff80000080d519:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff80000080d520:	eb 4f                	jmp    ffff80000080d571 <sys_wait+0x193>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:293
            if(task[i].pid==pid){
ffff80000080d522:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff80000080d529:	ff ff ff 
ffff80000080d52c:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080d530:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffff80000080d533:	48 63 d2             	movsxd rdx,edx
ffff80000080d536:	48 69 d2 34 03 00 00 	imul   rdx,rdx,0x334
ffff80000080d53d:	48 01 ca             	add    rdx,rcx
ffff80000080d540:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff80000080d542:	8b 55 bc             	mov    edx,DWORD PTR [rbp-0x44]
ffff80000080d545:	39 d1                	cmp    ecx,edx
ffff80000080d547:	75 24                	jne    ffff80000080d56d <sys_wait+0x18f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:294
                waitee=&task[i];
ffff80000080d549:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffff80000080d54c:	48 63 d2             	movsxd rdx,edx
ffff80000080d54f:	48 69 ca 34 03 00 00 	imul   rcx,rdx,0x334
ffff80000080d556:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff80000080d55d:	ff ff ff 
ffff80000080d560:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080d564:	48 01 ca             	add    rdx,rcx
ffff80000080d567:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:295
                break;
ffff80000080d56b:	eb 0a                	jmp    ffff80000080d577 <sys_wait+0x199>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:292 (discriminator 2)
        for(int i=0;i<MAX_TASKS;i++){
ffff80000080d56d:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:292 (discriminator 1)
ffff80000080d571:	83 7d e4 1f          	cmp    DWORD PTR [rbp-0x1c],0x1f
ffff80000080d575:	7e ab                	jle    ffff80000080d522 <sys_wait+0x144>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:298
            }
        }
        if(waitee==NULL||waitee->parent_pid!=current->pid)
ffff80000080d577:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffff80000080d57c:	74 21                	je     ffff80000080d59f <sys_wait+0x1c1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:298 (discriminator 1)
ffff80000080d57e:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080d582:	8b 92 9c 00 00 00    	mov    edx,DWORD PTR [rdx+0x9c]
ffff80000080d588:	48 b9 90 fe ff ff ff 	movabs rcx,0xfffffffffffffe90
ffff80000080d58f:	ff ff ff 
ffff80000080d592:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff80000080d596:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d599:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080d59b:	39 c2                	cmp    edx,eax
ffff80000080d59d:	74 09                	je     ffff80000080d5a8 <sys_wait+0x1ca>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:299
            return -ECHILD;//没有这个进程或者不是子进程
ffff80000080d59f:	48 c7 c0 f4 ff ff ff 	mov    rax,0xfffffffffffffff4
ffff80000080d5a6:	eb 7c                	jmp    ffff80000080d624 <sys_wait+0x246>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:301
        //TODO 等待结束以及等待信号
        while (waitee->stat != TASK_ZOMBIE);
ffff80000080d5a8:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:301 (discriminator 1)
ffff80000080d5a9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080d5ad:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff80000080d5b0:	83 f8 04             	cmp    eax,0x4
ffff80000080d5b3:	75 f4                	jne    ffff80000080d5a9 <sys_wait+0x1cb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:302
        *stat_loc=waitee->exit_code;
ffff80000080d5b5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080d5b9:	8b 40 24             	mov    eax,DWORD PTR [rax+0x24]
ffff80000080d5bc:	89 c2                	mov    edx,eax
ffff80000080d5be:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080d5c2:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:306
    }
    done:
    //清除子进程
    waitee->stat=TASK_EMPTY;
ffff80000080d5c4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080d5c8:	c7 40 18 00 00 00 00 	mov    DWORD PTR [rax+0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:308
    //从链表中删除，不再是子进程
    list_drop(&waitee->node);
ffff80000080d5cf:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080d5d3:	48 05 14 03 00 00    	add    rax,0x314
ffff80000080d5d9:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
list_drop():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:47
    }
}
__attribute__((always_inline)) inline void list_drop(struct List * entry)
{
    //从链表中删除
    if(entry->prev)
ffff80000080d5dd:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080d5e1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d5e4:	48 85 c0             	test   rax,rax
ffff80000080d5e7:	74 13                	je     ffff80000080d5fc <sys_wait+0x21e>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:48
        entry->prev->next=entry->next;
ffff80000080d5e9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080d5ed:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d5f0:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080d5f4:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
ffff80000080d5f8:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:49
    if(entry->next)
ffff80000080d5fc:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080d600:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080d604:	48 85 c0             	test   rax,rax
ffff80000080d607:	74 12                	je     ffff80000080d61b <sys_wait+0x23d>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:50
        entry->next->prev=entry->prev;
ffff80000080d609:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080d60d:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080d611:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080d615:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080d618:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:51
}
ffff80000080d61b:	90                   	nop
sys_wait():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:310
    //TODO 被信号中断时返回-1
    return waitee->pid;
ffff80000080d61c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080d620:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080d622:	89 c0                	mov    eax,eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:311
}
ffff80000080d624:	5d                   	pop    rbp
ffff80000080d625:	c3                   	ret    

ffff80000080d626 <sys_wait4>:
sys_wait4():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:313
unsigned long sys_wait4(unsigned long pid,int *status,int options,void *rusage)
{
ffff80000080d626:	f3 0f 1e fa          	endbr64 
ffff80000080d62a:	55                   	push   rbp
ffff80000080d62b:	48 89 e5             	mov    rbp,rsp
ffff80000080d62e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d62e <sys_wait4+0x8>
ffff80000080d635:	49 bb 0a 1d 01 00 00 	movabs r11,0x11d0a
ffff80000080d63c:	00 00 00 
ffff80000080d63f:	4c 01 d8             	add    rax,r11
ffff80000080d642:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080d646:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080d64a:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
ffff80000080d64d:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:349
//    copy_to_user(&child->exit_code,status,sizeof(long));
//    tsk->next = child->next;
//    exit_mm(child);
//    vmfree(child);
//    return retval;
}
ffff80000080d651:	90                   	nop
ffff80000080d652:	5d                   	pop    rbp
ffff80000080d653:	c3                   	ret    

ffff80000080d654 <sys_brk>:
sys_brk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:352

unsigned long sys_brk(unsigned long brk)
{
ffff80000080d654:	f3 0f 1e fa          	endbr64 
ffff80000080d658:	55                   	push   rbp
ffff80000080d659:	48 89 e5             	mov    rbp,rsp
ffff80000080d65c:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d65c <sys_brk+0x8>
ffff80000080d663:	49 bb dc 1c 01 00 00 	movabs r11,0x11cdc
ffff80000080d66a:	00 00 00 
ffff80000080d66d:	4c 01 d8             	add    rax,r11
ffff80000080d670:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:366
//
//    new_brk = do_brk(current->mm->end_brk,new_brk - current->mm->end_brk);	//expand brk space
//
//    current->mm->end_brk = new_brk;
//    return new_brk;
}
ffff80000080d674:	90                   	nop
ffff80000080d675:	5d                   	pop    rbp
ffff80000080d676:	c3                   	ret    

ffff80000080d677 <sys_reboot>:
sys_reboot():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:369

unsigned long sys_reboot(unsigned long cmd,void * arg)
{
ffff80000080d677:	f3 0f 1e fa          	endbr64 
ffff80000080d67b:	55                   	push   rbp
ffff80000080d67c:	48 89 e5             	mov    rbp,rsp
ffff80000080d67f:	41 57                	push   r15
ffff80000080d681:	53                   	push   rbx
ffff80000080d682:	48 83 ec 10          	sub    rsp,0x10
ffff80000080d686:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080d686 <sys_reboot+0xf>
ffff80000080d68d:	49 bb b2 1c 01 00 00 	movabs r11,0x11cb2
ffff80000080d694:	00 00 00 
ffff80000080d697:	4c 01 db             	add    rbx,r11
ffff80000080d69a:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff80000080d69e:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:370
    printf("sys_reboot\n");
ffff80000080d6a2:	48 b8 fb c6 ff ff ff 	movabs rax,0xffffffffffffc6fb
ffff80000080d6a9:	ff ff ff 
ffff80000080d6ac:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080d6b0:	48 89 c7             	mov    rdi,rax
ffff80000080d6b3:	49 89 df             	mov    r15,rbx
ffff80000080d6b6:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080d6bb:	48 ba 92 23 fe ff ff 	movabs rdx,0xfffffffffffe2392
ffff80000080d6c2:	ff ff ff 
ffff80000080d6c5:	48 01 da             	add    rdx,rbx
ffff80000080d6c8:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:371
    switch(cmd)
ffff80000080d6ca:	48 83 7d e8 01       	cmp    QWORD PTR [rbp-0x18],0x1
ffff80000080d6cf:	74 09                	je     ffff80000080d6da <sys_reboot+0x63>
ffff80000080d6d1:	48 83 7d e8 02       	cmp    QWORD PTR [rbp-0x18],0x2
ffff80000080d6d6:	74 20                	je     ffff80000080d6f8 <sys_reboot+0x81>
ffff80000080d6d8:	eb 48                	jmp    ffff80000080d722 <sys_reboot+0xab>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:374
    {
        case SYSTEM_REBOOT:
            outb(0x64,0xFE);
ffff80000080d6da:	be fe 00 00 00       	mov    esi,0xfe
ffff80000080d6df:	bf 64 00 00 00       	mov    edi,0x64
ffff80000080d6e4:	49 89 df             	mov    r15,rbx
ffff80000080d6e7:	48 b8 48 ae fe ff ff 	movabs rax,0xfffffffffffeae48
ffff80000080d6ee:	ff ff ff 
ffff80000080d6f1:	48 01 d8             	add    rax,rbx
ffff80000080d6f4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:375
            break;
ffff80000080d6f6:	eb 53                	jmp    ffff80000080d74b <sys_reboot+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:378

        case SYSTEM_POWEROFF:
            printf("sys_reboot cmd SYSTEM_POWEROFF\n");
ffff80000080d6f8:	48 b8 08 c7 ff ff ff 	movabs rax,0xffffffffffffc708
ffff80000080d6ff:	ff ff ff 
ffff80000080d702:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080d706:	48 89 c7             	mov    rdi,rax
ffff80000080d709:	49 89 df             	mov    r15,rbx
ffff80000080d70c:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080d711:	48 ba 92 23 fe ff ff 	movabs rdx,0xfffffffffffe2392
ffff80000080d718:	ff ff ff 
ffff80000080d71b:	48 01 da             	add    rdx,rbx
ffff80000080d71e:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:379
            break;
ffff80000080d720:	eb 29                	jmp    ffff80000080d74b <sys_reboot+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:382

        default:
            printf("sys_reboot cmd ERROR!\n");
ffff80000080d722:	48 b8 28 c7 ff ff ff 	movabs rax,0xffffffffffffc728
ffff80000080d729:	ff ff ff 
ffff80000080d72c:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080d730:	48 89 c7             	mov    rdi,rax
ffff80000080d733:	49 89 df             	mov    r15,rbx
ffff80000080d736:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080d73b:	48 ba 92 23 fe ff ff 	movabs rdx,0xfffffffffffe2392
ffff80000080d742:	ff ff ff 
ffff80000080d745:	48 01 da             	add    rdx,rbx
ffff80000080d748:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:383
            break;
ffff80000080d74a:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:385
    }
    return 0;
ffff80000080d74b:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:386
}
ffff80000080d750:	48 83 c4 10          	add    rsp,0x10
ffff80000080d754:	5b                   	pop    rbx
ffff80000080d755:	41 5f                	pop    r15
ffff80000080d757:	5d                   	pop    rbp
ffff80000080d758:	c3                   	ret    

ffff80000080d759 <sys_chdir>:
sys_chdir():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:390


unsigned long sys_chdir(char *filename)
{
ffff80000080d759:	f3 0f 1e fa          	endbr64 
ffff80000080d75d:	55                   	push   rbp
ffff80000080d75e:	48 89 e5             	mov    rbp,rsp
ffff80000080d761:	41 57                	push   r15
ffff80000080d763:	53                   	push   rbx
ffff80000080d764:	48 83 ec 30          	sub    rsp,0x30
ffff80000080d768:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080d768 <sys_chdir+0xf>
ffff80000080d76f:	49 bb d0 1b 01 00 00 	movabs r11,0x11bd0
ffff80000080d776:	00 00 00 
ffff80000080d779:	4c 01 db             	add    rbx,r11
ffff80000080d77c:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:391
    char * path = NULL;
ffff80000080d780:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000080d787:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:392
    long pathlen = 0;
ffff80000080d788:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff80000080d78f:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:393
    struct dir_entry * dentry = NULL;
ffff80000080d790:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff80000080d797:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:395

    printf("sys_chdir\n");
ffff80000080d798:	48 b8 3f c7 ff ff ff 	movabs rax,0xffffffffffffc73f
ffff80000080d79f:	ff ff ff 
ffff80000080d7a2:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080d7a6:	48 89 c7             	mov    rdi,rax
ffff80000080d7a9:	49 89 df             	mov    r15,rbx
ffff80000080d7ac:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080d7b1:	48 ba 92 23 fe ff ff 	movabs rdx,0xfffffffffffe2392
ffff80000080d7b8:	ff ff ff 
ffff80000080d7bb:	48 01 da             	add    rdx,rbx
ffff80000080d7be:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:396
    path = (char *) kmalloc();
ffff80000080d7c0:	49 89 df             	mov    r15,rbx
ffff80000080d7c3:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080d7c8:	48 ba 13 2c fe ff ff 	movabs rdx,0xfffffffffffe2c13
ffff80000080d7cf:	ff ff ff 
ffff80000080d7d2:	48 01 da             	add    rdx,rbx
ffff80000080d7d5:	ff d2                	call   rdx
ffff80000080d7d7:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:398

    if(path == NULL)
ffff80000080d7db:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080d7e0:	75 0c                	jne    ffff80000080d7ee <sys_chdir+0x95>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:399
        return -ENOMEM;
ffff80000080d7e2:	48 c7 c0 cf ff ff ff 	mov    rax,0xffffffffffffffcf
ffff80000080d7e9:	e9 28 01 00 00       	jmp    ffff80000080d916 <sys_chdir+0x1bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:400
    memset(path,0,PAGE_4K_SIZE);
ffff80000080d7ee:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d7f2:	ba 00 10 00 00       	mov    edx,0x1000
ffff80000080d7f7:	be 00 00 00 00       	mov    esi,0x0
ffff80000080d7fc:	48 89 c7             	mov    rdi,rax
ffff80000080d7ff:	49 89 df             	mov    r15,rbx
ffff80000080d802:	48 b8 d6 3e ff ff ff 	movabs rax,0xffffffffffff3ed6
ffff80000080d809:	ff ff ff 
ffff80000080d80c:	48 01 d8             	add    rax,rbx
ffff80000080d80f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:401
    pathlen = strlen(filename);
ffff80000080d811:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080d815:	48 89 c7             	mov    rdi,rax
ffff80000080d818:	49 89 df             	mov    r15,rbx
ffff80000080d81b:	48 b8 f8 41 ff ff ff 	movabs rax,0xffffffffffff41f8
ffff80000080d822:	ff ff ff 
ffff80000080d825:	48 01 d8             	add    rax,rbx
ffff80000080d828:	ff d0                	call   rax
ffff80000080d82a:	48 98                	cdqe   
ffff80000080d82c:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:402
    if(pathlen <= 0)
ffff80000080d830:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
ffff80000080d835:	7f 25                	jg     ffff80000080d85c <sys_chdir+0x103>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:404
    {
        kmfree(path);
ffff80000080d837:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d83b:	48 89 c7             	mov    rdi,rax
ffff80000080d83e:	49 89 df             	mov    r15,rbx
ffff80000080d841:	48 b8 82 2f fe ff ff 	movabs rax,0xfffffffffffe2f82
ffff80000080d848:	ff ff ff 
ffff80000080d84b:	48 01 d8             	add    rax,rbx
ffff80000080d84e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:405
        return -EFAULT;
ffff80000080d850:	48 c7 c0 eb ff ff ff 	mov    rax,0xffffffffffffffeb
ffff80000080d857:	e9 ba 00 00 00       	jmp    ffff80000080d916 <sys_chdir+0x1bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:407
    }
    else if(pathlen >= PAGE_4K_SIZE)
ffff80000080d85c:	48 81 7d e0 ff 0f 00 	cmp    QWORD PTR [rbp-0x20],0xfff
ffff80000080d863:	00 
ffff80000080d864:	7e 25                	jle    ffff80000080d88b <sys_chdir+0x132>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:409
    {
        kmfree(path);
ffff80000080d866:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d86a:	48 89 c7             	mov    rdi,rax
ffff80000080d86d:	49 89 df             	mov    r15,rbx
ffff80000080d870:	48 b8 82 2f fe ff ff 	movabs rax,0xfffffffffffe2f82
ffff80000080d877:	ff ff ff 
ffff80000080d87a:	48 01 d8             	add    rax,rbx
ffff80000080d87d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:410
        return -ENAMETOOLONG;
ffff80000080d87f:	48 c7 c0 db ff ff ff 	mov    rax,0xffffffffffffffdb
ffff80000080d886:	e9 8b 00 00 00       	jmp    ffff80000080d916 <sys_chdir+0x1bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:412
    }
    strcpy(filename,path);
ffff80000080d88b:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080d88f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080d893:	48 89 d6             	mov    rsi,rdx
ffff80000080d896:	48 89 c7             	mov    rdi,rax
ffff80000080d899:	49 89 df             	mov    r15,rbx
ffff80000080d89c:	48 b8 2b 3f ff ff ff 	movabs rax,0xffffffffffff3f2b
ffff80000080d8a3:	ff ff ff 
ffff80000080d8a6:	48 01 d8             	add    rax,rbx
ffff80000080d8a9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:414

    dentry = path_walk(path,0);
ffff80000080d8ab:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d8af:	be 00 00 00 00       	mov    esi,0x0
ffff80000080d8b4:	48 89 c7             	mov    rdi,rax
ffff80000080d8b7:	49 89 df             	mov    r15,rbx
ffff80000080d8ba:	48 b8 73 cc fe ff ff 	movabs rax,0xfffffffffffecc73
ffff80000080d8c1:	ff ff ff 
ffff80000080d8c4:	48 01 d8             	add    rax,rbx
ffff80000080d8c7:	ff d0                	call   rax
ffff80000080d8c9:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:415
    kmfree(path);
ffff80000080d8cd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d8d1:	48 89 c7             	mov    rdi,rax
ffff80000080d8d4:	49 89 df             	mov    r15,rbx
ffff80000080d8d7:	48 b8 82 2f fe ff ff 	movabs rax,0xfffffffffffe2f82
ffff80000080d8de:	ff ff ff 
ffff80000080d8e1:	48 01 d8             	add    rax,rbx
ffff80000080d8e4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:417

    if(dentry == NULL)
ffff80000080d8e6:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff80000080d8eb:	75 09                	jne    ffff80000080d8f6 <sys_chdir+0x19d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:418
        return -ENOENT;
ffff80000080d8ed:	48 c7 c0 d3 ff ff ff 	mov    rax,0xffffffffffffffd3
ffff80000080d8f4:	eb 20                	jmp    ffff80000080d916 <sys_chdir+0x1bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:419
    if(dentry->dir_inode->attribute != FS_ATTR_DIR)
ffff80000080d8f6:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080d8fa:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080d8fe:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080d902:	48 83 f8 02          	cmp    rax,0x2
ffff80000080d906:	74 09                	je     ffff80000080d911 <sys_chdir+0x1b8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:420
        return -ENOTDIR;
ffff80000080d908:	48 c7 c0 c7 ff ff ff 	mov    rax,0xffffffffffffffc7
ffff80000080d90f:	eb 05                	jmp    ffff80000080d916 <sys_chdir+0x1bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:421
    return 0;
ffff80000080d911:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:422
}
ffff80000080d916:	48 83 c4 30          	add    rsp,0x30
ffff80000080d91a:	5b                   	pop    rbx
ffff80000080d91b:	41 5f                	pop    r15
ffff80000080d91d:	5d                   	pop    rbp
ffff80000080d91e:	c3                   	ret    

ffff80000080d91f <sys_getdents>:
sys_getdents():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:425

unsigned long sys_getdents(int fd, void * dirent, long count)
{
ffff80000080d91f:	f3 0f 1e fa          	endbr64 
ffff80000080d923:	55                   	push   rbp
ffff80000080d924:	48 89 e5             	mov    rbp,rsp
ffff80000080d927:	48 83 ec 30          	sub    rsp,0x30
ffff80000080d92b:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d92b <sys_getdents+0xc>
ffff80000080d932:	49 bb 0d 1a 01 00 00 	movabs r11,0x11a0d
ffff80000080d939:	00 00 00 
ffff80000080d93c:	4c 01 d8             	add    rax,r11
ffff80000080d93f:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff80000080d942:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080d946:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:426
    struct file * filp = NULL;
ffff80000080d94a:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffff80000080d951:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:427
    unsigned long ret = 0;
ffff80000080d952:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080d959:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:430

//	printf("sys_getdents:%d\n",fd);
    if(fd < 0 || fd > MAX_TASKS)
ffff80000080d95a:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff80000080d95e:	78 06                	js     ffff80000080d966 <sys_getdents+0x47>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:430 (discriminator 1)
ffff80000080d960:	83 7d ec 20          	cmp    DWORD PTR [rbp-0x14],0x20
ffff80000080d964:	7e 0c                	jle    ffff80000080d972 <sys_getdents+0x53>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:431
        return -EBADF;
ffff80000080d966:	48 c7 c0 f8 ff ff ff 	mov    rax,0xfffffffffffffff8
ffff80000080d96d:	e9 85 00 00 00       	jmp    ffff80000080d9f7 <sys_getdents+0xd8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:432
    if(count < 0)
ffff80000080d972:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff80000080d977:	79 09                	jns    ffff80000080d982 <sys_getdents+0x63>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:433
        return -EINVAL;
ffff80000080d979:	48 c7 c0 e4 ff ff ff 	mov    rax,0xffffffffffffffe4
ffff80000080d980:	eb 75                	jmp    ffff80000080d9f7 <sys_getdents+0xd8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:435

    filp = current->openf[fd];
ffff80000080d982:	48 ba 90 fe ff ff ff 	movabs rdx,0xfffffffffffffe90
ffff80000080d989:	ff ff ff 
ffff80000080d98c:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080d990:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080d993:	8b 4d ec             	mov    ecx,DWORD PTR [rbp-0x14]
ffff80000080d996:	48 63 c9             	movsxd rcx,ecx
ffff80000080d999:	48 83 c1 1a          	add    rcx,0x1a
ffff80000080d99d:	48 8b 54 ca 08       	mov    rdx,QWORD PTR [rdx+rcx*8+0x8]
ffff80000080d9a2:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:436
    if(filp->f_ops && filp->f_ops->readdir)
ffff80000080d9a6:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080d9aa:	48 8b 52 18          	mov    rdx,QWORD PTR [rdx+0x18]
ffff80000080d9ae:	48 85 d2             	test   rdx,rdx
ffff80000080d9b1:	74 40                	je     ffff80000080d9f3 <sys_getdents+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:436 (discriminator 1)
ffff80000080d9b3:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080d9b7:	48 8b 52 18          	mov    rdx,QWORD PTR [rdx+0x18]
ffff80000080d9bb:	48 8b 52 30          	mov    rdx,QWORD PTR [rdx+0x30]
ffff80000080d9bf:	48 85 d2             	test   rdx,rdx
ffff80000080d9c2:	74 2f                	je     ffff80000080d9f3 <sys_getdents+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:437
        ret = filp->f_ops->readdir(filp,dirent,&fill_dentry);
ffff80000080d9c4:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080d9c8:	48 8b 52 18          	mov    rdx,QWORD PTR [rdx+0x18]
ffff80000080d9cc:	4c 8b 42 30          	mov    r8,QWORD PTR [rdx+0x30]
ffff80000080d9d0:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff80000080d9d4:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff80000080d9d8:	48 ba 88 ff ff ff ff 	movabs rdx,0xffffffffffffff88
ffff80000080d9df:	ff ff ff 
ffff80000080d9e2:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080d9e6:	48 89 c2             	mov    rdx,rax
ffff80000080d9e9:	48 89 cf             	mov    rdi,rcx
ffff80000080d9ec:	41 ff d0             	call   r8
ffff80000080d9ef:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:438
    return ret;
ffff80000080d9f3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:439
}
ffff80000080d9f7:	c9                   	leave  
ffff80000080d9f8:	c3                   	ret    

ffff80000080d9f9 <shift>:
shift():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:133
/* 0x5D - Apps      */ {  0,        0,       0x5D,      0x5D }
        };
char k_shift=0,k_ctrl=0,k_capslock=0;

void shift()
{
ffff80000080d9f9:	f3 0f 1e fa          	endbr64 
ffff80000080d9fd:	55                   	push   rbp
ffff80000080d9fe:	48 89 e5             	mov    rbp,rsp
ffff80000080da01:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080da01 <shift+0x8>
ffff80000080da08:	49 bb 37 19 01 00 00 	movabs r11,0x11937
ffff80000080da0f:	00 00 00 
ffff80000080da12:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:134
    k_shift=!k_shift;
ffff80000080da15:	48 ba 70 ff ff ff ff 	movabs rdx,0xffffffffffffff70
ffff80000080da1c:	ff ff ff 
ffff80000080da1f:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080da23:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080da26:	84 d2                	test   dl,dl
ffff80000080da28:	0f 94 c2             	sete   dl
ffff80000080da2b:	89 d1                	mov    ecx,edx
ffff80000080da2d:	48 ba 70 ff ff ff ff 	movabs rdx,0xffffffffffffff70
ffff80000080da34:	ff ff ff 
ffff80000080da37:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080da3b:	88 08                	mov    BYTE PTR [rax],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:135
}
ffff80000080da3d:	90                   	nop
ffff80000080da3e:	5d                   	pop    rbp
ffff80000080da3f:	c3                   	ret    

ffff80000080da40 <ctrl>:
ctrl():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:137
void ctrl()
{
ffff80000080da40:	f3 0f 1e fa          	endbr64 
ffff80000080da44:	55                   	push   rbp
ffff80000080da45:	48 89 e5             	mov    rbp,rsp
ffff80000080da48:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080da48 <ctrl+0x8>
ffff80000080da4f:	49 bb f0 18 01 00 00 	movabs r11,0x118f0
ffff80000080da56:	00 00 00 
ffff80000080da59:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:138
    k_ctrl=!k_ctrl;
ffff80000080da5c:	48 ba 40 fd ff ff ff 	movabs rdx,0xfffffffffffffd40
ffff80000080da63:	ff ff ff 
ffff80000080da66:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080da6a:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080da6d:	84 d2                	test   dl,dl
ffff80000080da6f:	0f 94 c2             	sete   dl
ffff80000080da72:	89 d1                	mov    ecx,edx
ffff80000080da74:	48 ba 40 fd ff ff ff 	movabs rdx,0xfffffffffffffd40
ffff80000080da7b:	ff ff ff 
ffff80000080da7e:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080da82:	88 08                	mov    BYTE PTR [rax],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:139
}
ffff80000080da84:	90                   	nop
ffff80000080da85:	5d                   	pop    rbp
ffff80000080da86:	c3                   	ret    

ffff80000080da87 <capslock>:
capslock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:141
void capslock()
{
ffff80000080da87:	f3 0f 1e fa          	endbr64 
ffff80000080da8b:	55                   	push   rbp
ffff80000080da8c:	48 89 e5             	mov    rbp,rsp
ffff80000080da8f:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080da8f <capslock+0x8>
ffff80000080da96:	49 bb a9 18 01 00 00 	movabs r11,0x118a9
ffff80000080da9d:	00 00 00 
ffff80000080daa0:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:142
    k_capslock=k_capslock==0?1:0;
ffff80000080daa3:	48 ba 78 fe ff ff ff 	movabs rdx,0xfffffffffffffe78
ffff80000080daaa:	ff ff ff 
ffff80000080daad:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080dab1:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080dab4:	84 d2                	test   dl,dl
ffff80000080dab6:	0f 94 c2             	sete   dl
ffff80000080dab9:	89 d1                	mov    ecx,edx
ffff80000080dabb:	48 ba 78 fe ff ff ff 	movabs rdx,0xfffffffffffffe78
ffff80000080dac2:	ff ff ff 
ffff80000080dac5:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080dac9:	88 08                	mov    BYTE PTR [rax],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:143
}
ffff80000080dacb:	90                   	nop
ffff80000080dacc:	5d                   	pop    rbp
ffff80000080dacd:	c3                   	ret    

ffff80000080dace <to_ascii>:
to_ascii():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:145
char to_ascii(char scan_code)
{
ffff80000080dace:	f3 0f 1e fa          	endbr64 
ffff80000080dad2:	55                   	push   rbp
ffff80000080dad3:	48 89 e5             	mov    rbp,rsp
ffff80000080dad6:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080dad6 <to_ascii+0x8>
ffff80000080dadd:	49 bb 62 18 01 00 00 	movabs r11,0x11862
ffff80000080dae4:	00 00 00 
ffff80000080dae7:	4c 01 d8             	add    rax,r11
ffff80000080daea:	89 fa                	mov    edx,edi
ffff80000080daec:	88 55 ec             	mov    BYTE PTR [rbp-0x14],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:146
    for(int i=0;i<0x5e;i++)//sizeof(key_map)/sizeof(key_code)
ffff80000080daef:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff80000080daf6:	e9 25 01 00 00       	jmp    ffff80000080dc20 <to_ascii+0x152>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:147
        if(key_map[i].scan_code==scan_code)
ffff80000080dafb:	48 be 68 c7 ff ff ff 	movabs rsi,0xffffffffffffc768
ffff80000080db02:	ff ff ff 
ffff80000080db05:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080db08:	48 63 ca             	movsxd rcx,edx
ffff80000080db0b:	48 89 ca             	mov    rdx,rcx
ffff80000080db0e:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080db12:	48 01 ca             	add    rdx,rcx
ffff80000080db15:	48 01 c2             	add    rdx,rax
ffff80000080db18:	48 01 f2             	add    rdx,rsi
ffff80000080db1b:	48 83 c2 02          	add    rdx,0x2
ffff80000080db1f:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080db22:	38 55 ec             	cmp    BYTE PTR [rbp-0x14],dl
ffff80000080db25:	0f 85 f1 00 00 00    	jne    ffff80000080dc1c <to_ascii+0x14e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:149
        {
            if(k_capslock&&key_map[i].ascii>='a'&&key_map[i].ascii<='z')return key_map[i].ascii_shift;
ffff80000080db2b:	48 ba 78 fe ff ff ff 	movabs rdx,0xfffffffffffffe78
ffff80000080db32:	ff ff ff 
ffff80000080db35:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080db39:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080db3c:	84 d2                	test   dl,dl
ffff80000080db3e:	74 79                	je     ffff80000080dbb9 <to_ascii+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:149 (discriminator 1)
ffff80000080db40:	48 be 68 c7 ff ff ff 	movabs rsi,0xffffffffffffc768
ffff80000080db47:	ff ff ff 
ffff80000080db4a:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080db4d:	48 63 ca             	movsxd rcx,edx
ffff80000080db50:	48 01 c6             	add    rsi,rax
ffff80000080db53:	48 89 ca             	mov    rdx,rcx
ffff80000080db56:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080db5a:	48 01 ca             	add    rdx,rcx
ffff80000080db5d:	48 01 f2             	add    rdx,rsi
ffff80000080db60:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080db63:	80 fa 60             	cmp    dl,0x60
ffff80000080db66:	7e 51                	jle    ffff80000080dbb9 <to_ascii+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:149 (discriminator 2)
ffff80000080db68:	48 be 68 c7 ff ff ff 	movabs rsi,0xffffffffffffc768
ffff80000080db6f:	ff ff ff 
ffff80000080db72:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080db75:	48 63 ca             	movsxd rcx,edx
ffff80000080db78:	48 01 c6             	add    rsi,rax
ffff80000080db7b:	48 89 ca             	mov    rdx,rcx
ffff80000080db7e:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080db82:	48 01 ca             	add    rdx,rcx
ffff80000080db85:	48 01 f2             	add    rdx,rsi
ffff80000080db88:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080db8b:	80 fa 7a             	cmp    dl,0x7a
ffff80000080db8e:	7f 29                	jg     ffff80000080dbb9 <to_ascii+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:149 (discriminator 3)
ffff80000080db90:	48 be 68 c7 ff ff ff 	movabs rsi,0xffffffffffffc768
ffff80000080db97:	ff ff ff 
ffff80000080db9a:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080db9d:	48 63 ca             	movsxd rcx,edx
ffff80000080dba0:	48 89 ca             	mov    rdx,rcx
ffff80000080dba3:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080dba7:	48 01 ca             	add    rdx,rcx
ffff80000080dbaa:	48 01 d0             	add    rax,rdx
ffff80000080dbad:	48 01 f0             	add    rax,rsi
ffff80000080dbb0:	48 83 c0 01          	add    rax,0x1
ffff80000080dbb4:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080dbb7:	eb 76                	jmp    ffff80000080dc2f <to_ascii+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:150
            else if(k_shift)return key_map[i].ascii_shift;
ffff80000080dbb9:	48 ba 70 ff ff ff ff 	movabs rdx,0xffffffffffffff70
ffff80000080dbc0:	ff ff ff 
ffff80000080dbc3:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080dbc7:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080dbca:	84 d2                	test   dl,dl
ffff80000080dbcc:	74 29                	je     ffff80000080dbf7 <to_ascii+0x129>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:150 (discriminator 1)
ffff80000080dbce:	48 be 68 c7 ff ff ff 	movabs rsi,0xffffffffffffc768
ffff80000080dbd5:	ff ff ff 
ffff80000080dbd8:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080dbdb:	48 63 ca             	movsxd rcx,edx
ffff80000080dbde:	48 89 ca             	mov    rdx,rcx
ffff80000080dbe1:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080dbe5:	48 01 ca             	add    rdx,rcx
ffff80000080dbe8:	48 01 d0             	add    rax,rdx
ffff80000080dbeb:	48 01 f0             	add    rax,rsi
ffff80000080dbee:	48 83 c0 01          	add    rax,0x1
ffff80000080dbf2:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080dbf5:	eb 38                	jmp    ffff80000080dc2f <to_ascii+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:151
            else return key_map[i].ascii;
ffff80000080dbf7:	48 b9 68 c7 ff ff ff 	movabs rcx,0xffffffffffffc768
ffff80000080dbfe:	ff ff ff 
ffff80000080dc01:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080dc04:	48 63 d2             	movsxd rdx,edx
ffff80000080dc07:	48 01 c1             	add    rcx,rax
ffff80000080dc0a:	48 89 d0             	mov    rax,rdx
ffff80000080dc0d:	48 c1 e0 02          	shl    rax,0x2
ffff80000080dc11:	48 01 d0             	add    rax,rdx
ffff80000080dc14:	48 01 c8             	add    rax,rcx
ffff80000080dc17:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080dc1a:	eb 13                	jmp    ffff80000080dc2f <to_ascii+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:146 (discriminator 2)
    for(int i=0;i<0x5e;i++)//sizeof(key_map)/sizeof(key_code)
ffff80000080dc1c:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:146 (discriminator 1)
ffff80000080dc20:	83 7d fc 5d          	cmp    DWORD PTR [rbp-0x4],0x5d
ffff80000080dc24:	0f 8e d1 fe ff ff    	jle    ffff80000080dafb <to_ascii+0x2d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:154
        }

    return '\0';
ffff80000080dc2a:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:155
}
ffff80000080dc2f:	5d                   	pop    rbp
ffff80000080dc30:	c3                   	ret    

ffff80000080dc31 <init_kb>:
init_kb():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:157
int init_kb()
{
ffff80000080dc31:	f3 0f 1e fa          	endbr64 
ffff80000080dc35:	55                   	push   rbp
ffff80000080dc36:	48 89 e5             	mov    rbp,rsp
ffff80000080dc39:	41 57                	push   r15
ffff80000080dc3b:	53                   	push   rbx
ffff80000080dc3c:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080dc3c <init_kb+0xb>
ffff80000080dc43:	49 bb fc 16 01 00 00 	movabs r11,0x116fc
ffff80000080dc4a:	00 00 00 
ffff80000080dc4d:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:158
    reg_device(&dev_keyboard);
ffff80000080dc50:	48 b8 40 ff ff ff ff 	movabs rax,0xffffffffffffff40
ffff80000080dc57:	ff ff ff 
ffff80000080dc5a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080dc5e:	48 89 c7             	mov    rdi,rax
ffff80000080dc61:	49 89 df             	mov    r15,rbx
ffff80000080dc64:	48 b8 e6 5d fe ff ff 	movabs rax,0xfffffffffffe5de6
ffff80000080dc6b:	ff ff ff 
ffff80000080dc6e:	48 01 d8             	add    rax,rbx
ffff80000080dc71:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:159
    reg_driver(&drv_keyboard);
ffff80000080dc73:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff80000080dc7a:	ff ff ff 
ffff80000080dc7d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080dc81:	48 89 c7             	mov    rdi,rax
ffff80000080dc84:	49 89 df             	mov    r15,rbx
ffff80000080dc87:	48 b8 5e 61 fe ff ff 	movabs rax,0xfffffffffffe615e
ffff80000080dc8e:	ff ff ff 
ffff80000080dc91:	48 01 d8             	add    rax,rbx
ffff80000080dc94:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:160
}
ffff80000080dc96:	90                   	nop
ffff80000080dc97:	5b                   	pop    rbx
ffff80000080dc98:	41 5f                	pop    r15
ffff80000080dc9a:	5d                   	pop    rbp
ffff80000080dc9b:	c3                   	ret    

ffff80000080dc9c <key_proc>:
key_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:162
int key_proc()
{
ffff80000080dc9c:	f3 0f 1e fa          	endbr64 
ffff80000080dca0:	55                   	push   rbp
ffff80000080dca1:	48 89 e5             	mov    rbp,rsp
ffff80000080dca4:	41 57                	push   r15
ffff80000080dca6:	53                   	push   rbx
ffff80000080dca7:	48 83 ec 20          	sub    rsp,0x20
ffff80000080dcab:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080dcab <key_proc+0xf>
ffff80000080dcb2:	49 bb 8d 16 01 00 00 	movabs r11,0x1168d
ffff80000080dcb9:	00 00 00 
ffff80000080dcbc:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:163
    asm volatile("cli");
ffff80000080dcbf:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:165
    //获取完整的扫描码
    u8 scan1=0,scan2=0,ch=0;
ffff80000080dcc0:	c6 45 ef 00          	mov    BYTE PTR [rbp-0x11],0x0
ffff80000080dcc4:	c6 45 ee 00          	mov    BYTE PTR [rbp-0x12],0x0
ffff80000080dcc8:	c6 45 ed 00          	mov    BYTE PTR [rbp-0x13],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:167
    key_code tmpc;
    scan1=inb(0x60);
ffff80000080dccc:	bf 60 00 00 00       	mov    edi,0x60
ffff80000080dcd1:	49 89 df             	mov    r15,rbx
ffff80000080dcd4:	48 b8 61 ae fe ff ff 	movabs rax,0xfffffffffffeae61
ffff80000080dcdb:	ff ff ff 
ffff80000080dcde:	48 01 d8             	add    rax,rbx
ffff80000080dce1:	ff d0                	call   rax
ffff80000080dce3:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:179
//    tmpc.scan_code2=scan2;
//    tmpc.ascii= ch;


//    ENQUEUE(key_bufq,tmpc)
    if((key_bufq.tail+1)%key_bufq.size!=key_bufq.head)
ffff80000080dce6:	48 b8 98 ff ff ff ff 	movabs rax,0xffffffffffffff98
ffff80000080dced:	ff ff ff 
ffff80000080dcf0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080dcf4:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff80000080dcf7:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080dcfa:	48 b8 98 ff ff ff ff 	movabs rax,0xffffffffffffff98
ffff80000080dd01:	ff ff ff 
ffff80000080dd04:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080dd08:	8b 48 10             	mov    ecx,DWORD PTR [rax+0x10]
ffff80000080dd0b:	89 d0                	mov    eax,edx
ffff80000080dd0d:	99                   	cdq    
ffff80000080dd0e:	f7 f9                	idiv   ecx
ffff80000080dd10:	48 b8 98 ff ff ff ff 	movabs rax,0xffffffffffffff98
ffff80000080dd17:	ff ff ff 
ffff80000080dd1a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080dd1e:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080dd21:	39 c2                	cmp    edx,eax
ffff80000080dd23:	74 68                	je     ffff80000080dd8d <key_proc+0xf1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:181
    {
        key_bufq.data[key_bufq.tail]=scan1;
ffff80000080dd25:	48 b8 98 ff ff ff ff 	movabs rax,0xffffffffffffff98
ffff80000080dd2c:	ff ff ff 
ffff80000080dd2f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080dd33:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080dd36:	48 b8 98 ff ff ff ff 	movabs rax,0xffffffffffffff98
ffff80000080dd3d:	ff ff ff 
ffff80000080dd40:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080dd44:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff80000080dd47:	48 98                	cdqe   
ffff80000080dd49:	48 01 c2             	add    rdx,rax
ffff80000080dd4c:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
ffff80000080dd50:	88 02                	mov    BYTE PTR [rdx],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:182
        key_bufq.tail=(key_bufq.tail+1)%key_bufq.size;
ffff80000080dd52:	48 b8 98 ff ff ff ff 	movabs rax,0xffffffffffffff98
ffff80000080dd59:	ff ff ff 
ffff80000080dd5c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080dd60:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff80000080dd63:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080dd66:	48 b8 98 ff ff ff ff 	movabs rax,0xffffffffffffff98
ffff80000080dd6d:	ff ff ff 
ffff80000080dd70:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080dd74:	8b 48 10             	mov    ecx,DWORD PTR [rax+0x10]
ffff80000080dd77:	89 d0                	mov    eax,edx
ffff80000080dd79:	99                   	cdq    
ffff80000080dd7a:	f7 f9                	idiv   ecx
ffff80000080dd7c:	48 b8 98 ff ff ff ff 	movabs rax,0xffffffffffffff98
ffff80000080dd83:	ff ff ff 
ffff80000080dd86:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080dd8a:	89 50 0c             	mov    DWORD PTR [rax+0xc],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:185
    }

    if(scan1==0x48)
ffff80000080dd8d:	80 7d ef 48          	cmp    BYTE PTR [rbp-0x11],0x48
ffff80000080dd91:	75 17                	jne    ffff80000080ddaa <key_proc+0x10e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:186
        scr_up();
ffff80000080dd93:	49 89 df             	mov    r15,rbx
ffff80000080dd96:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080dd9b:	48 ba f5 c6 fe ff ff 	movabs rdx,0xfffffffffffec6f5
ffff80000080dda2:	ff ff ff 
ffff80000080dda5:	48 01 da             	add    rdx,rbx
ffff80000080dda8:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:187
    if(scan1==0x50)
ffff80000080ddaa:	80 7d ef 50          	cmp    BYTE PTR [rbp-0x11],0x50
ffff80000080ddae:	75 17                	jne    ffff80000080ddc7 <key_proc+0x12b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:188
        scr_down();
ffff80000080ddb0:	49 89 df             	mov    r15,rbx
ffff80000080ddb3:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080ddb8:	48 ba ed c7 fe ff ff 	movabs rdx,0xfffffffffffec7ed
ffff80000080ddbf:	ff ff ff 
ffff80000080ddc2:	48 01 da             	add    rdx,rbx
ffff80000080ddc5:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:189
    switch (scan1)
ffff80000080ddc7:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
ffff80000080ddcb:	3d b6 00 00 00       	cmp    eax,0xb6
ffff80000080ddd0:	74 45                	je     ffff80000080de17 <key_proc+0x17b>
ffff80000080ddd2:	3d b6 00 00 00       	cmp    eax,0xb6
ffff80000080ddd7:	0f 8f 85 00 00 00    	jg     ffff80000080de62 <key_proc+0x1c6>
ffff80000080dddd:	3d aa 00 00 00       	cmp    eax,0xaa
ffff80000080dde2:	74 33                	je     ffff80000080de17 <key_proc+0x17b>
ffff80000080dde4:	3d aa 00 00 00       	cmp    eax,0xaa
ffff80000080dde9:	7f 77                	jg     ffff80000080de62 <key_proc+0x1c6>
ffff80000080ddeb:	3d 9d 00 00 00       	cmp    eax,0x9d
ffff80000080ddf0:	74 3e                	je     ffff80000080de30 <key_proc+0x194>
ffff80000080ddf2:	3d 9d 00 00 00       	cmp    eax,0x9d
ffff80000080ddf7:	7f 69                	jg     ffff80000080de62 <key_proc+0x1c6>
ffff80000080ddf9:	83 f8 3a             	cmp    eax,0x3a
ffff80000080ddfc:	74 4b                	je     ffff80000080de49 <key_proc+0x1ad>
ffff80000080ddfe:	83 f8 3a             	cmp    eax,0x3a
ffff80000080de01:	7f 5f                	jg     ffff80000080de62 <key_proc+0x1c6>
ffff80000080de03:	83 f8 36             	cmp    eax,0x36
ffff80000080de06:	74 0f                	je     ffff80000080de17 <key_proc+0x17b>
ffff80000080de08:	83 f8 36             	cmp    eax,0x36
ffff80000080de0b:	7f 55                	jg     ffff80000080de62 <key_proc+0x1c6>
ffff80000080de0d:	83 f8 1d             	cmp    eax,0x1d
ffff80000080de10:	74 1e                	je     ffff80000080de30 <key_proc+0x194>
ffff80000080de12:	83 f8 2a             	cmp    eax,0x2a
ffff80000080de15:	75 4b                	jne    ffff80000080de62 <key_proc+0x1c6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:195
    {
        case 0x36:
        case 0x2a:
        case 0xaa:
        case 0xb6:
            shift();
ffff80000080de17:	49 89 df             	mov    r15,rbx
ffff80000080de1a:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080de1f:	48 ba c1 e6 fe ff ff 	movabs rdx,0xfffffffffffee6c1
ffff80000080de26:	ff ff ff 
ffff80000080de29:	48 01 da             	add    rdx,rbx
ffff80000080de2c:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:196
            break;
ffff80000080de2e:	eb 33                	jmp    ffff80000080de63 <key_proc+0x1c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:199
        case 0x1d:
        case 0x9d:
            ctrl();
ffff80000080de30:	49 89 df             	mov    r15,rbx
ffff80000080de33:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080de38:	48 ba 08 e7 fe ff ff 	movabs rdx,0xfffffffffffee708
ffff80000080de3f:	ff ff ff 
ffff80000080de42:	48 01 da             	add    rdx,rbx
ffff80000080de45:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:200
            break;
ffff80000080de47:	eb 1a                	jmp    ffff80000080de63 <key_proc+0x1c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:202
        case 0x3a:
            capslock();
ffff80000080de49:	49 89 df             	mov    r15,rbx
ffff80000080de4c:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080de51:	48 ba 4f e7 fe ff ff 	movabs rdx,0xfffffffffffee74f
ffff80000080de58:	ff ff ff 
ffff80000080de5b:	48 01 da             	add    rdx,rbx
ffff80000080de5e:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:203
            break;
ffff80000080de60:	eb 01                	jmp    ffff80000080de63 <key_proc+0x1c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:205
        default:
            break;
ffff80000080de62:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:208
    }
    //发送到std
    if(!(scan1&FLAG_BREAK)){
ffff80000080de63:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
ffff80000080de67:	84 c0                	test   al,al
ffff80000080de69:	78 51                	js     ffff80000080debc <key_proc+0x220>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:209
        char ch= to_ascii(scan1);
ffff80000080de6b:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
ffff80000080de6f:	0f be c0             	movsx  eax,al
ffff80000080de72:	89 c7                	mov    edi,eax
ffff80000080de74:	49 89 df             	mov    r15,rbx
ffff80000080de77:	48 b8 96 e7 fe ff ff 	movabs rax,0xfffffffffffee796
ffff80000080de7e:	ff ff ff 
ffff80000080de81:	48 01 d8             	add    rax,rbx
ffff80000080de84:	ff d0                	call   rax
ffff80000080de86:	88 45 e7             	mov    BYTE PTR [rbp-0x19],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:210
        unsigned long args[]={(unsigned long) &ch, 1};
ffff80000080de89:	48 8d 45 e7          	lea    rax,[rbp-0x19]
ffff80000080de8d:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
ffff80000080de91:	48 c7 45 d8 01 00 00 	mov    QWORD PTR [rbp-0x28],0x1
ffff80000080de98:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:212
        //写入stdin
        sys_ioctl(0,TTY_WSTDIN,(unsigned long)args);
ffff80000080de99:	48 8d 45 d0          	lea    rax,[rbp-0x30]
ffff80000080de9d:	48 89 c2             	mov    rdx,rax
ffff80000080dea0:	be 03 00 00 00       	mov    esi,0x3
ffff80000080dea5:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080deaa:	49 89 df             	mov    r15,rbx
ffff80000080dead:	48 b8 95 ad fe ff ff 	movabs rax,0xfffffffffffead95
ffff80000080deb4:	ff ff ff 
ffff80000080deb7:	48 01 d8             	add    rax,rbx
ffff80000080deba:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:231
//        //logf("%x\n",stdin.w_ptr);
//        //print_stdin();
//        //printchar(ch);
//        //flush_screen(0);*/
//    }
    eoi();
ffff80000080debc:	49 89 df             	mov    r15,rbx
ffff80000080debf:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080dec4:	48 ba 76 ae fe ff ff 	movabs rdx,0xfffffffffffeae76
ffff80000080decb:	ff ff ff 
ffff80000080dece:	48 01 da             	add    rdx,rbx
ffff80000080ded1:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:232
    asm volatile("leave\r\n iretq");
ffff80000080ded3:	c9                   	leave  
ffff80000080ded4:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:233
}
ffff80000080ded6:	90                   	nop
ffff80000080ded7:	48 83 c4 20          	add    rsp,0x20
ffff80000080dedb:	5b                   	pop    rbx
ffff80000080dedc:	41 5f                	pop    r15
ffff80000080dede:	5d                   	pop    rbp
ffff80000080dedf:	c3                   	ret    

ffff80000080dee0 <sys_analyse_key>:
sys_analyse_key():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:236

char sys_analyse_key()
{
ffff80000080dee0:	f3 0f 1e fa          	endbr64 
ffff80000080dee4:	55                   	push   rbp
ffff80000080dee5:	48 89 e5             	mov    rbp,rsp
ffff80000080dee8:	41 57                	push   r15
ffff80000080deea:	53                   	push   rbx
ffff80000080deeb:	48 83 ec 30          	sub    rsp,0x30
ffff80000080deef:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080deef <sys_analyse_key+0xf>
ffff80000080def6:	49 bb 49 14 01 00 00 	movabs r11,0x11449
ffff80000080defd:	00 00 00 
ffff80000080df00:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:237
    if(key_bufq.tail==key_bufq.head)return -1;
ffff80000080df03:	48 b8 98 ff ff ff ff 	movabs rax,0xffffffffffffff98
ffff80000080df0a:	ff ff ff 
ffff80000080df0d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080df11:	8b 50 0c             	mov    edx,DWORD PTR [rax+0xc]
ffff80000080df14:	48 b8 98 ff ff ff ff 	movabs rax,0xffffffffffffff98
ffff80000080df1b:	ff ff ff 
ffff80000080df1e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080df22:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080df25:	39 c2                	cmp    edx,eax
ffff80000080df27:	75 0a                	jne    ffff80000080df33 <sys_analyse_key+0x53>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:237 (discriminator 1)
ffff80000080df29:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080df2e:	e9 b1 01 00 00       	jmp    ffff80000080e0e4 <sys_analyse_key+0x204>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:238
    char c=key_buf[key_bufq.head];
ffff80000080df33:	48 b8 98 ff ff ff ff 	movabs rax,0xffffffffffffff98
ffff80000080df3a:	ff ff ff 
ffff80000080df3d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080df41:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080df44:	48 ba a8 fd ff ff ff 	movabs rdx,0xfffffffffffffda8
ffff80000080df4b:	ff ff ff 
ffff80000080df4e:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080df52:	48 98                	cdqe   
ffff80000080df54:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff80000080df58:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:239
    key_bufq.head=(key_bufq.head+1)%key_bufq.size;
ffff80000080df5b:	48 b8 98 ff ff ff ff 	movabs rax,0xffffffffffffff98
ffff80000080df62:	ff ff ff 
ffff80000080df65:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080df69:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080df6c:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080df6f:	48 b8 98 ff ff ff ff 	movabs rax,0xffffffffffffff98
ffff80000080df76:	ff ff ff 
ffff80000080df79:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080df7d:	8b 48 10             	mov    ecx,DWORD PTR [rax+0x10]
ffff80000080df80:	89 d0                	mov    eax,edx
ffff80000080df82:	99                   	cdq    
ffff80000080df83:	f7 f9                	idiv   ecx
ffff80000080df85:	48 b8 98 ff ff ff ff 	movabs rax,0xffffffffffffff98
ffff80000080df8c:	ff ff ff 
ffff80000080df8f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080df93:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:241
//    QHEAD(key_bufq)=(QHEAD(key_bufq)+1)%QSIZE(key_bufq);
    printf("scan code:");
ffff80000080df96:	48 b8 3e c9 ff ff ff 	movabs rax,0xffffffffffffc93e
ffff80000080df9d:	ff ff ff 
ffff80000080dfa0:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080dfa4:	48 89 c7             	mov    rdi,rax
ffff80000080dfa7:	49 89 df             	mov    r15,rbx
ffff80000080dfaa:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080dfaf:	48 ba 92 23 fe ff ff 	movabs rdx,0xfffffffffffe2392
ffff80000080dfb6:	ff ff ff 
ffff80000080dfb9:	48 01 da             	add    rdx,rbx
ffff80000080dfbc:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:242
    char res[33]={0};
ffff80000080dfbe:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
ffff80000080dfc5:	00 
ffff80000080dfc6:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff80000080dfcd:	00 
ffff80000080dfce:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff80000080dfd5:	00 
ffff80000080dfd6:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff80000080dfdd:	00 
ffff80000080dfde:	c6 45 e0 00          	mov    BYTE PTR [rbp-0x20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:243
    itoa(res,16,c);
ffff80000080dfe2:	0f be 55 ef          	movsx  edx,BYTE PTR [rbp-0x11]
ffff80000080dfe6:	48 8d 45 c0          	lea    rax,[rbp-0x40]
ffff80000080dfea:	be 10 00 00 00       	mov    esi,0x10
ffff80000080dfef:	48 89 c7             	mov    rdi,rax
ffff80000080dff2:	49 89 df             	mov    r15,rbx
ffff80000080dff5:	48 b8 18 22 fe ff ff 	movabs rax,0xfffffffffffe2218
ffff80000080dffc:	ff ff ff 
ffff80000080dfff:	48 01 d8             	add    rax,rbx
ffff80000080e002:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:244
    printf(res);
ffff80000080e004:	48 8d 45 c0          	lea    rax,[rbp-0x40]
ffff80000080e008:	48 89 c7             	mov    rdi,rax
ffff80000080e00b:	49 89 df             	mov    r15,rbx
ffff80000080e00e:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e013:	48 ba 92 23 fe ff ff 	movabs rdx,0xfffffffffffe2392
ffff80000080e01a:	ff ff ff 
ffff80000080e01d:	48 01 da             	add    rdx,rbx
ffff80000080e020:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:245
    if(c&FLAG_BREAK){
ffff80000080e022:	80 7d ef 00          	cmp    BYTE PTR [rbp-0x11],0x0
ffff80000080e026:	79 32                	jns    ffff80000080e05a <sys_analyse_key+0x17a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:246
        printf("\n");
ffff80000080e028:	48 b8 49 c9 ff ff ff 	movabs rax,0xffffffffffffc949
ffff80000080e02f:	ff ff ff 
ffff80000080e032:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080e036:	48 89 c7             	mov    rdi,rax
ffff80000080e039:	49 89 df             	mov    r15,rbx
ffff80000080e03c:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e041:	48 ba 92 23 fe ff ff 	movabs rdx,0xfffffffffffe2392
ffff80000080e048:	ff ff ff 
ffff80000080e04b:	48 01 da             	add    rdx,rbx
ffff80000080e04e:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:247
        return -1;
ffff80000080e050:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080e055:	e9 8a 00 00 00       	jmp    ffff80000080e0e4 <sys_analyse_key+0x204>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:249
    }
    c= to_ascii(c&0x7f);
ffff80000080e05a:	0f be 45 ef          	movsx  eax,BYTE PTR [rbp-0x11]
ffff80000080e05e:	83 e0 7f             	and    eax,0x7f
ffff80000080e061:	89 c7                	mov    edi,eax
ffff80000080e063:	49 89 df             	mov    r15,rbx
ffff80000080e066:	48 b8 96 e7 fe ff ff 	movabs rax,0xfffffffffffee796
ffff80000080e06d:	ff ff ff 
ffff80000080e070:	48 01 d8             	add    rax,rbx
ffff80000080e073:	ff d0                	call   rax
ffff80000080e075:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:250
    printf(" char:");
ffff80000080e078:	48 b8 4b c9 ff ff ff 	movabs rax,0xffffffffffffc94b
ffff80000080e07f:	ff ff ff 
ffff80000080e082:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080e086:	48 89 c7             	mov    rdi,rax
ffff80000080e089:	49 89 df             	mov    r15,rbx
ffff80000080e08c:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e091:	48 ba 92 23 fe ff ff 	movabs rdx,0xfffffffffffe2392
ffff80000080e098:	ff ff ff 
ffff80000080e09b:	48 01 da             	add    rdx,rbx
ffff80000080e09e:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:251
    putchar(c);
ffff80000080e0a0:	0f be 45 ef          	movsx  eax,BYTE PTR [rbp-0x11]
ffff80000080e0a4:	89 c7                	mov    edi,eax
ffff80000080e0a6:	49 89 df             	mov    r15,rbx
ffff80000080e0a9:	48 b8 41 23 fe ff ff 	movabs rax,0xfffffffffffe2341
ffff80000080e0b0:	ff ff ff 
ffff80000080e0b3:	48 01 d8             	add    rax,rbx
ffff80000080e0b6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:252
    printf("\n");
ffff80000080e0b8:	48 b8 49 c9 ff ff ff 	movabs rax,0xffffffffffffc949
ffff80000080e0bf:	ff ff ff 
ffff80000080e0c2:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080e0c6:	48 89 c7             	mov    rdi,rax
ffff80000080e0c9:	49 89 df             	mov    r15,rbx
ffff80000080e0cc:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e0d1:	48 ba 92 23 fe ff ff 	movabs rdx,0xfffffffffffe2392
ffff80000080e0d8:	ff ff ff 
ffff80000080e0db:	48 01 da             	add    rdx,rbx
ffff80000080e0de:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:253
    return c;
ffff80000080e0e0:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:254 (discriminator 1)
ffff80000080e0e4:	48 83 c4 30          	add    rsp,0x30
ffff80000080e0e8:	5b                   	pop    rbx
ffff80000080e0e9:	41 5f                	pop    r15
ffff80000080e0eb:	5d                   	pop    rbp
ffff80000080e0ec:	c3                   	ret    

ffff80000080e0ed <init_disk>:
init_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:27
        .read=async_read_disk,
        .write=async_write_disk
};
int disks[4];//四块硬盘的dev号
int init_disk()
{
ffff80000080e0ed:	f3 0f 1e fa          	endbr64 
ffff80000080e0f1:	55                   	push   rbp
ffff80000080e0f2:	48 89 e5             	mov    rbp,rsp
ffff80000080e0f5:	41 57                	push   r15
ffff80000080e0f7:	48 83 ec 08          	sub    rsp,0x8
ffff80000080e0fb:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080e0fb <init_disk+0xe>
ffff80000080e102:	49 bb 3d 12 01 00 00 	movabs r11,0x1123d
ffff80000080e109:	00 00 00 
ffff80000080e10c:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:31
    //disk_devi= reg_device(&dev_disk);
    //disk_drvi= reg_driver(&drv_disk);
    //dev_disk.drv=&drv_disk;
    hd_iterate();
ffff80000080e10f:	49 89 d7             	mov    r15,rdx
ffff80000080e112:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e117:	48 b9 8a fd fe ff ff 	movabs rcx,0xfffffffffffefd8a
ffff80000080e11e:	ff ff ff 
ffff80000080e121:	48 01 d1             	add    rcx,rdx
ffff80000080e124:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:32
    return 0;
ffff80000080e126:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:33
}
ffff80000080e12b:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080e12f:	c9                   	leave  
ffff80000080e130:	c3                   	ret    

ffff80000080e131 <disk_int_handler_c>:
disk_int_handler_c():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:36

int disk_int_handler_c()
{
ffff80000080e131:	f3 0f 1e fa          	endbr64 
ffff80000080e135:	55                   	push   rbp
ffff80000080e136:	48 89 e5             	mov    rbp,rsp
ffff80000080e139:	41 57                	push   r15
ffff80000080e13b:	53                   	push   rbx
ffff80000080e13c:	48 83 ec 20          	sub    rsp,0x20
ffff80000080e140:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080e140 <disk_int_handler_c+0xf>
ffff80000080e147:	49 bb f8 11 01 00 00 	movabs r11,0x111f8
ffff80000080e14e:	00 00 00 
ffff80000080e151:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:37
    if(running_req==NULL)
ffff80000080e154:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080e15b:	ff ff ff 
ffff80000080e15e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e162:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e165:	48 85 c0             	test   rax,rax
ffff80000080e168:	75 0a                	jne    ffff80000080e174 <disk_int_handler_c+0x43>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:40
    {
        //printf("err:null running dreq\n");
        return 1;//同步读写硬盘
ffff80000080e16a:	b8 01 00 00 00       	mov    eax,0x1
ffff80000080e16f:	e9 c6 02 00 00       	jmp    ffff80000080e43a <disk_int_handler_c+0x309>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:42
    }
    short *p=running_req->buf;
ffff80000080e174:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080e17b:	ff ff ff 
ffff80000080e17e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e182:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e185:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080e189:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:43
    int port=PORT_DISK_MAJOR;
ffff80000080e18d:	c7 45 e4 f0 01 00 00 	mov    DWORD PTR [rbp-0x1c],0x1f0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:44
    if(running_req->disk==DISK_SLAVE_MAJOR||\
ffff80000080e194:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080e19b:	ff ff ff 
ffff80000080e19e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e1a2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e1a5:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff80000080e1a8:	83 f8 02             	cmp    eax,0x2
ffff80000080e1ab:	74 19                	je     ffff80000080e1c6 <disk_int_handler_c+0x95>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:45 (discriminator 1)
    running_req->disk==DISK_SLAVE_SLAVE)
ffff80000080e1ad:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080e1b4:	ff ff ff 
ffff80000080e1b7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e1bb:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e1be:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:44 (discriminator 1)
    if(running_req->disk==DISK_SLAVE_MAJOR||\
ffff80000080e1c1:	83 f8 03             	cmp    eax,0x3
ffff80000080e1c4:	75 07                	jne    ffff80000080e1cd <disk_int_handler_c+0x9c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:46
        port=PORT_DISK_SLAVE;
ffff80000080e1c6:	c7 45 e4 70 01 00 00 	mov    DWORD PTR [rbp-0x1c],0x170
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:47
    if(running_req->func==DISKREQ_READ)
ffff80000080e1cd:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080e1d4:	ff ff ff 
ffff80000080e1d7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e1db:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e1de:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080e1e0:	85 c0                	test   eax,eax
ffff80000080e1e2:	75 71                	jne    ffff80000080e255 <disk_int_handler_c+0x124>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:51
    {
        ////printf("sys_read dist:%x\n",p);
        //读取
        for(int i=0;i<running_req->sec_n*256;i++)
ffff80000080e1e4:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff80000080e1eb:	eb 2f                	jmp    ffff80000080e21c <disk_int_handler_c+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:53 (discriminator 3)
        {
            *p++=inw(port);
ffff80000080e1ed:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080e1f0:	0f b7 c0             	movzx  eax,ax
ffff80000080e1f3:	89 c7                	mov    edi,eax
ffff80000080e1f5:	49 89 df             	mov    r15,rbx
ffff80000080e1f8:	48 b8 6b ae fe ff ff 	movabs rax,0xfffffffffffeae6b
ffff80000080e1ff:	ff ff ff 
ffff80000080e202:	48 01 d8             	add    rax,rbx
ffff80000080e205:	ff d0                	call   rax
ffff80000080e207:	89 c2                	mov    edx,eax
ffff80000080e209:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080e20d:	48 8d 48 02          	lea    rcx,[rax+0x2]
ffff80000080e211:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
ffff80000080e215:	66 89 10             	mov    WORD PTR [rax],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:51 (discriminator 3)
        for(int i=0;i<running_req->sec_n*256;i++)
ffff80000080e218:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:51 (discriminator 1)
ffff80000080e21c:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080e223:	ff ff ff 
ffff80000080e226:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e22a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e22d:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff80000080e230:	c1 e0 08             	shl    eax,0x8
ffff80000080e233:	39 45 e0             	cmp    DWORD PTR [rbp-0x20],eax
ffff80000080e236:	7c b5                	jl     ffff80000080e1ed <disk_int_handler_c+0xbc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:55
        }
        running_req->result=DISK_CHK_OK;
ffff80000080e238:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080e23f:	ff ff ff 
ffff80000080e242:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e246:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e249:	c7 40 20 01 00 00 00 	mov    DWORD PTR [rax+0x20],0x1
ffff80000080e250:	e9 64 01 00 00       	jmp    ffff80000080e3b9 <disk_int_handler_c+0x288>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:56
    }else if(running_req->func==DISKREQ_WRITE)
ffff80000080e255:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080e25c:	ff ff ff 
ffff80000080e25f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e263:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e266:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080e268:	83 f8 01             	cmp    eax,0x1
ffff80000080e26b:	75 74                	jne    ffff80000080e2e1 <disk_int_handler_c+0x1b0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:58
    {
        for(int i=0;i<running_req->sec_n*256;i++)
ffff80000080e26d:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
ffff80000080e274:	eb 32                	jmp    ffff80000080e2a8 <disk_int_handler_c+0x177>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:59 (discriminator 3)
            outw(port,*p++);
ffff80000080e276:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080e27a:	48 8d 50 02          	lea    rdx,[rax+0x2]
ffff80000080e27e:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080e282:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff80000080e285:	0f b7 d0             	movzx  edx,ax
ffff80000080e288:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080e28b:	0f b7 c0             	movzx  eax,ax
ffff80000080e28e:	89 d6                	mov    esi,edx
ffff80000080e290:	89 c7                	mov    edi,eax
ffff80000080e292:	49 89 df             	mov    r15,rbx
ffff80000080e295:	48 b8 55 ae fe ff ff 	movabs rax,0xfffffffffffeae55
ffff80000080e29c:	ff ff ff 
ffff80000080e29f:	48 01 d8             	add    rax,rbx
ffff80000080e2a2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:58 (discriminator 3)
        for(int i=0;i<running_req->sec_n*256;i++)
ffff80000080e2a4:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:58 (discriminator 1)
ffff80000080e2a8:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080e2af:	ff ff ff 
ffff80000080e2b2:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e2b6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e2b9:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff80000080e2bc:	c1 e0 08             	shl    eax,0x8
ffff80000080e2bf:	39 45 dc             	cmp    DWORD PTR [rbp-0x24],eax
ffff80000080e2c2:	7c b2                	jl     ffff80000080e276 <disk_int_handler_c+0x145>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:60
        running_req->result=DISK_CHK_OK;
ffff80000080e2c4:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080e2cb:	ff ff ff 
ffff80000080e2ce:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e2d2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e2d5:	c7 40 20 01 00 00 00 	mov    DWORD PTR [rax+0x20],0x1
ffff80000080e2dc:	e9 d8 00 00 00       	jmp    ffff80000080e3b9 <disk_int_handler_c+0x288>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:61
    }else if(running_req->func==DISKREQ_CHECK)
ffff80000080e2e1:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080e2e8:	ff ff ff 
ffff80000080e2eb:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e2ef:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e2f2:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080e2f4:	83 f8 02             	cmp    eax,0x2
ffff80000080e2f7:	75 58                	jne    ffff80000080e351 <disk_int_handler_c+0x220>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:63
    {
        char stat=inb(port+7);
ffff80000080e2f9:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080e2fc:	83 c0 07             	add    eax,0x7
ffff80000080e2ff:	0f b6 c0             	movzx  eax,al
ffff80000080e302:	89 c7                	mov    edi,eax
ffff80000080e304:	49 89 df             	mov    r15,rbx
ffff80000080e307:	48 b8 61 ae fe ff ff 	movabs rax,0xfffffffffffeae61
ffff80000080e30e:	ff ff ff 
ffff80000080e311:	48 01 d8             	add    rax,rbx
ffff80000080e314:	ff d0                	call   rax
ffff80000080e316:	88 45 d7             	mov    BYTE PTR [rbp-0x29],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:64
        short dat=inw(port);
ffff80000080e319:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080e31c:	0f b7 c0             	movzx  eax,ax
ffff80000080e31f:	89 c7                	mov    edi,eax
ffff80000080e321:	49 89 df             	mov    r15,rbx
ffff80000080e324:	48 b8 6b ae fe ff ff 	movabs rax,0xfffffffffffeae6b
ffff80000080e32b:	ff ff ff 
ffff80000080e32e:	48 01 d8             	add    rax,rbx
ffff80000080e331:	ff d0                	call   rax
ffff80000080e333:	66 89 45 d4          	mov    WORD PTR [rbp-0x2c],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:67
        if(1)
        {
            running_req->result=DISK_CHK_OK;
ffff80000080e337:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080e33e:	ff ff ff 
ffff80000080e341:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e345:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e348:	c7 40 20 01 00 00 00 	mov    DWORD PTR [rax+0x20],0x1
ffff80000080e34f:	eb 68                	jmp    ffff80000080e3b9 <disk_int_handler_c+0x288>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:75
            char err=inb(port+1);//错误原因
            printf("checking disk err:%x\nresetting hd\n",err);
            running_req->result=DISK_CHK_ERR;
            request(running_req->disk,DISKREQ_RESET,0,0,0);
        }
    }else if(running_req->func==DISKREQ_RESET)
ffff80000080e351:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080e358:	ff ff ff 
ffff80000080e35b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e35f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e362:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080e364:	83 f8 03             	cmp    eax,0x3
ffff80000080e367:	75 50                	jne    ffff80000080e3b9 <disk_int_handler_c+0x288>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:77
    {
        int stat=inb(port+7);
ffff80000080e369:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080e36c:	83 c0 07             	add    eax,0x7
ffff80000080e36f:	0f b6 c0             	movzx  eax,al
ffff80000080e372:	89 c7                	mov    edi,eax
ffff80000080e374:	49 89 df             	mov    r15,rbx
ffff80000080e377:	48 b8 61 ae fe ff ff 	movabs rax,0xfffffffffffeae61
ffff80000080e37e:	ff ff ff 
ffff80000080e381:	48 01 d8             	add    rax,rbx
ffff80000080e384:	ff d0                	call   rax
ffff80000080e386:	0f b6 c0             	movzx  eax,al
ffff80000080e389:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:78
        printf("reset disk done.\nstat now:%x\n",stat);
ffff80000080e38c:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080e38f:	89 c6                	mov    esi,eax
ffff80000080e391:	48 b8 52 c9 ff ff ff 	movabs rax,0xffffffffffffc952
ffff80000080e398:	ff ff ff 
ffff80000080e39b:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080e39f:	48 89 c7             	mov    rdi,rax
ffff80000080e3a2:	49 89 df             	mov    r15,rbx
ffff80000080e3a5:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e3aa:	48 ba 92 23 fe ff ff 	movabs rdx,0xfffffffffffe2392
ffff80000080e3b1:	ff ff ff 
ffff80000080e3b4:	48 01 da             	add    rdx,rbx
ffff80000080e3b7:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:80
    }
    running_req->stat=REQ_STAT_DONE;
ffff80000080e3b9:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080e3c0:	ff ff ff 
ffff80000080e3c3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e3c7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e3ca:	c7 40 1c 03 00 00 00 	mov    DWORD PTR [rax+0x1c],0x3
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:81
    running_req->args->stat=REQ_STAT_EMPTY;
ffff80000080e3d1:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080e3d8:	ff ff ff 
ffff80000080e3db:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e3df:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e3e2:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080e3e6:	c7 80 ac 00 00 00 00 	mov    DWORD PTR [rax+0xac],0x0
ffff80000080e3ed:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:82
    running_devman_req->stat=REQ_STAT_DONE;
ffff80000080e3f0:	48 b8 c0 fd ff ff ff 	movabs rax,0xfffffffffffffdc0
ffff80000080e3f7:	ff ff ff 
ffff80000080e3fa:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e3fe:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e401:	c7 80 ac 00 00 00 03 	mov    DWORD PTR [rax+0xac],0x3
ffff80000080e408:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:83
    running_devman_req=NULL;
ffff80000080e40b:	48 b8 c0 fd ff ff ff 	movabs rax,0xfffffffffffffdc0
ffff80000080e412:	ff ff ff 
ffff80000080e415:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e419:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:85
    //set_proc_stat(running_req->pid,TASK_READY);
    running_req=NULL;
ffff80000080e420:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080e427:	ff ff ff 
ffff80000080e42a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e42e:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:86
    return 0;
ffff80000080e435:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:87
}
ffff80000080e43a:	48 83 c4 20          	add    rsp,0x20
ffff80000080e43e:	5b                   	pop    rbx
ffff80000080e43f:	41 5f                	pop    r15
ffff80000080e441:	5d                   	pop    rbp
ffff80000080e442:	c3                   	ret    

ffff80000080e443 <check_dreq_stat>:
check_dreq_stat():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:89
int check_dreq_stat(int req_id)
{
ffff80000080e443:	f3 0f 1e fa          	endbr64 
ffff80000080e447:	55                   	push   rbp
ffff80000080e448:	48 89 e5             	mov    rbp,rsp
ffff80000080e44b:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080e44b <check_dreq_stat+0x8>
ffff80000080e452:	49 bb ed 0e 01 00 00 	movabs r11,0x10eed
ffff80000080e459:	00 00 00 
ffff80000080e45c:	4c 01 d8             	add    rax,r11
ffff80000080e45f:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:90
    return disk_reqs[req_id].stat;
ffff80000080e462:	48 ba a0 fd ff ff ff 	movabs rdx,0xfffffffffffffda0
ffff80000080e469:	ff ff ff 
ffff80000080e46c:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080e470:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000080e473:	48 63 d0             	movsxd rdx,eax
ffff80000080e476:	48 89 d0             	mov    rax,rdx
ffff80000080e479:	48 01 c0             	add    rax,rax
ffff80000080e47c:	48 01 d0             	add    rax,rdx
ffff80000080e47f:	48 c1 e0 04          	shl    rax,0x4
ffff80000080e483:	48 01 c8             	add    rax,rcx
ffff80000080e486:	48 83 c0 1c          	add    rax,0x1c
ffff80000080e48a:	8b 00                	mov    eax,DWORD PTR [rax]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:91
}
ffff80000080e48c:	5d                   	pop    rbp
ffff80000080e48d:	c3                   	ret    

ffff80000080e48e <request>:
request():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:92
int request(int disk,int func,int lba,int secn,char *buf){
ffff80000080e48e:	f3 0f 1e fa          	endbr64 
ffff80000080e492:	55                   	push   rbp
ffff80000080e493:	48 89 e5             	mov    rbp,rsp
ffff80000080e496:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080e496 <request+0x8>
ffff80000080e49d:	49 bb a2 0e 01 00 00 	movabs r11,0x10ea2
ffff80000080e4a4:	00 00 00 
ffff80000080e4a7:	4c 01 d8             	add    rax,r11
ffff80000080e4aa:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff80000080e4ad:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
ffff80000080e4b0:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
ffff80000080e4b3:	89 4d e0             	mov    DWORD PTR [rbp-0x20],ecx
ffff80000080e4b6:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:93
    if((tail+1)%MAX_DISK_REQUEST_COUNT==head)
ffff80000080e4ba:	48 ba bc f2 bf ff ff 	movabs rdx,0xffffffffffbff2bc
ffff80000080e4c1:	ff ff ff 
ffff80000080e4c4:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080e4c7:	83 c2 01             	add    edx,0x1
ffff80000080e4ca:	48 63 ca             	movsxd rcx,edx
ffff80000080e4cd:	48 69 c9 89 88 88 88 	imul   rcx,rcx,0xffffffff88888889
ffff80000080e4d4:	48 c1 e9 20          	shr    rcx,0x20
ffff80000080e4d8:	01 d1                	add    ecx,edx
ffff80000080e4da:	c1 f9 07             	sar    ecx,0x7
ffff80000080e4dd:	89 d6                	mov    esi,edx
ffff80000080e4df:	c1 fe 1f             	sar    esi,0x1f
ffff80000080e4e2:	29 f1                	sub    ecx,esi
ffff80000080e4e4:	69 f1 f0 00 00 00    	imul   esi,ecx,0xf0
ffff80000080e4ea:	89 d1                	mov    ecx,edx
ffff80000080e4ec:	29 f1                	sub    ecx,esi
ffff80000080e4ee:	48 ba b8 f2 bf ff ff 	movabs rdx,0xffffffffffbff2b8
ffff80000080e4f5:	ff ff ff 
ffff80000080e4f8:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080e4fb:	39 d1                	cmp    ecx,edx
ffff80000080e4fd:	75 0a                	jne    ffff80000080e509 <request+0x7b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:95
    {
        return -1;
ffff80000080e4ff:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080e504:	e9 9e 01 00 00       	jmp    ffff80000080e6a7 <request+0x219>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:97
    }
    disk_reqs[tail].disk=disk;
ffff80000080e509:	48 ba bc f2 bf ff ff 	movabs rdx,0xffffffffffbff2bc
ffff80000080e510:	ff ff ff 
ffff80000080e513:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080e516:	48 b9 a0 fd ff ff ff 	movabs rcx,0xfffffffffffffda0
ffff80000080e51d:	ff ff ff 
ffff80000080e520:	48 8b 34 08          	mov    rsi,QWORD PTR [rax+rcx*1]
ffff80000080e524:	48 63 ca             	movsxd rcx,edx
ffff80000080e527:	48 89 ca             	mov    rdx,rcx
ffff80000080e52a:	48 01 d2             	add    rdx,rdx
ffff80000080e52d:	48 01 ca             	add    rdx,rcx
ffff80000080e530:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080e534:	48 01 f2             	add    rdx,rsi
ffff80000080e537:	48 8d 4a 04          	lea    rcx,[rdx+0x4]
ffff80000080e53b:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080e53e:	89 11                	mov    DWORD PTR [rcx],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:98
    disk_reqs[tail].func=func;
ffff80000080e540:	48 ba bc f2 bf ff ff 	movabs rdx,0xffffffffffbff2bc
ffff80000080e547:	ff ff ff 
ffff80000080e54a:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080e54d:	48 b9 a0 fd ff ff ff 	movabs rcx,0xfffffffffffffda0
ffff80000080e554:	ff ff ff 
ffff80000080e557:	48 8b 34 08          	mov    rsi,QWORD PTR [rax+rcx*1]
ffff80000080e55b:	48 63 ca             	movsxd rcx,edx
ffff80000080e55e:	48 89 ca             	mov    rdx,rcx
ffff80000080e561:	48 01 d2             	add    rdx,rdx
ffff80000080e564:	48 01 ca             	add    rdx,rcx
ffff80000080e567:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080e56b:	48 8d 0c 16          	lea    rcx,[rsi+rdx*1]
ffff80000080e56f:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff80000080e572:	89 11                	mov    DWORD PTR [rcx],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:99
    disk_reqs[tail].lba=lba;
ffff80000080e574:	48 ba bc f2 bf ff ff 	movabs rdx,0xffffffffffbff2bc
ffff80000080e57b:	ff ff ff 
ffff80000080e57e:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080e581:	48 b9 a0 fd ff ff ff 	movabs rcx,0xfffffffffffffda0
ffff80000080e588:	ff ff ff 
ffff80000080e58b:	48 8b 34 08          	mov    rsi,QWORD PTR [rax+rcx*1]
ffff80000080e58f:	48 63 ca             	movsxd rcx,edx
ffff80000080e592:	48 89 ca             	mov    rdx,rcx
ffff80000080e595:	48 01 d2             	add    rdx,rdx
ffff80000080e598:	48 01 ca             	add    rdx,rcx
ffff80000080e59b:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080e59f:	48 01 f2             	add    rdx,rsi
ffff80000080e5a2:	48 8d 4a 08          	lea    rcx,[rdx+0x8]
ffff80000080e5a6:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffff80000080e5a9:	89 11                	mov    DWORD PTR [rcx],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:100
    disk_reqs[tail].sec_n=secn;
ffff80000080e5ab:	48 ba bc f2 bf ff ff 	movabs rdx,0xffffffffffbff2bc
ffff80000080e5b2:	ff ff ff 
ffff80000080e5b5:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080e5b8:	48 b9 a0 fd ff ff ff 	movabs rcx,0xfffffffffffffda0
ffff80000080e5bf:	ff ff ff 
ffff80000080e5c2:	48 8b 34 08          	mov    rsi,QWORD PTR [rax+rcx*1]
ffff80000080e5c6:	48 63 ca             	movsxd rcx,edx
ffff80000080e5c9:	48 89 ca             	mov    rdx,rcx
ffff80000080e5cc:	48 01 d2             	add    rdx,rdx
ffff80000080e5cf:	48 01 ca             	add    rdx,rcx
ffff80000080e5d2:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080e5d6:	48 01 f2             	add    rdx,rsi
ffff80000080e5d9:	48 8d 4a 0c          	lea    rcx,[rdx+0xc]
ffff80000080e5dd:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff80000080e5e0:	89 11                	mov    DWORD PTR [rcx],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:101
    disk_reqs[tail].stat=REQ_STAT_READY;
ffff80000080e5e2:	48 ba bc f2 bf ff ff 	movabs rdx,0xffffffffffbff2bc
ffff80000080e5e9:	ff ff ff 
ffff80000080e5ec:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080e5ef:	48 b9 a0 fd ff ff ff 	movabs rcx,0xfffffffffffffda0
ffff80000080e5f6:	ff ff ff 
ffff80000080e5f9:	48 8b 34 08          	mov    rsi,QWORD PTR [rax+rcx*1]
ffff80000080e5fd:	48 63 ca             	movsxd rcx,edx
ffff80000080e600:	48 89 ca             	mov    rdx,rcx
ffff80000080e603:	48 01 d2             	add    rdx,rdx
ffff80000080e606:	48 01 ca             	add    rdx,rcx
ffff80000080e609:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080e60d:	48 01 f2             	add    rdx,rsi
ffff80000080e610:	48 83 c2 1c          	add    rdx,0x1c
ffff80000080e614:	c7 02 01 00 00 00    	mov    DWORD PTR [rdx],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:102
    disk_reqs[tail].buf=buf;
ffff80000080e61a:	48 ba bc f2 bf ff ff 	movabs rdx,0xffffffffffbff2bc
ffff80000080e621:	ff ff ff 
ffff80000080e624:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080e627:	48 b9 a0 fd ff ff ff 	movabs rcx,0xfffffffffffffda0
ffff80000080e62e:	ff ff ff 
ffff80000080e631:	48 8b 34 08          	mov    rsi,QWORD PTR [rax+rcx*1]
ffff80000080e635:	48 63 ca             	movsxd rcx,edx
ffff80000080e638:	48 89 ca             	mov    rdx,rcx
ffff80000080e63b:	48 01 d2             	add    rdx,rdx
ffff80000080e63e:	48 01 ca             	add    rdx,rcx
ffff80000080e641:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080e645:	48 01 f2             	add    rdx,rsi
ffff80000080e648:	48 8d 4a 10          	lea    rcx,[rdx+0x10]
ffff80000080e64c:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080e650:	48 89 11             	mov    QWORD PTR [rcx],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:103
    int r=tail;
ffff80000080e653:	48 ba bc f2 bf ff ff 	movabs rdx,0xffffffffffbff2bc
ffff80000080e65a:	ff ff ff 
ffff80000080e65d:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080e660:	89 55 fc             	mov    DWORD PTR [rbp-0x4],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:104
    tail=(tail+1)%MAX_DISK_REQUEST_COUNT;
ffff80000080e663:	48 ba bc f2 bf ff ff 	movabs rdx,0xffffffffffbff2bc
ffff80000080e66a:	ff ff ff 
ffff80000080e66d:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080e670:	8d 4a 01             	lea    ecx,[rdx+0x1]
ffff80000080e673:	48 63 d1             	movsxd rdx,ecx
ffff80000080e676:	48 69 d2 89 88 88 88 	imul   rdx,rdx,0xffffffff88888889
ffff80000080e67d:	48 c1 ea 20          	shr    rdx,0x20
ffff80000080e681:	01 ca                	add    edx,ecx
ffff80000080e683:	c1 fa 07             	sar    edx,0x7
ffff80000080e686:	89 ce                	mov    esi,ecx
ffff80000080e688:	c1 fe 1f             	sar    esi,0x1f
ffff80000080e68b:	29 f2                	sub    edx,esi
ffff80000080e68d:	69 f2 f0 00 00 00    	imul   esi,edx,0xf0
ffff80000080e693:	29 f1                	sub    ecx,esi
ffff80000080e695:	89 ca                	mov    edx,ecx
ffff80000080e697:	48 b9 bc f2 bf ff ff 	movabs rcx,0xffffffffffbff2bc
ffff80000080e69e:	ff ff ff 
ffff80000080e6a1:	89 14 08             	mov    DWORD PTR [rax+rcx*1],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:105
    return r;
ffff80000080e6a4:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:106
}
ffff80000080e6a7:	5d                   	pop    rbp
ffff80000080e6a8:	c3                   	ret    

ffff80000080e6a9 <execute_request>:
execute_request():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:107
int execute_request(){
ffff80000080e6a9:	f3 0f 1e fa          	endbr64 
ffff80000080e6ad:	55                   	push   rbp
ffff80000080e6ae:	48 89 e5             	mov    rbp,rsp
ffff80000080e6b1:	41 57                	push   r15
ffff80000080e6b3:	48 83 ec 18          	sub    rsp,0x18
ffff80000080e6b7:	4c 8d 05 f9 ff ff ff 	lea    r8,[rip+0xfffffffffffffff9]        # ffff80000080e6b7 <execute_request+0xe>
ffff80000080e6be:	49 bb 81 0c 01 00 00 	movabs r11,0x10c81
ffff80000080e6c5:	00 00 00 
ffff80000080e6c8:	4d 01 d8             	add    r8,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:109
    //查看是否有已经在运行的请求
    if(running_req!=NULL)
ffff80000080e6cb:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080e6d2:	ff ff ff 
ffff80000080e6d5:	49 8b 04 00          	mov    rax,QWORD PTR [r8+rax*1]
ffff80000080e6d9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e6dc:	48 85 c0             	test   rax,rax
ffff80000080e6df:	0f 84 a6 00 00 00    	je     ffff80000080e78b <execute_request+0xe2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:111
    {
        running_req->time++;
ffff80000080e6e5:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080e6ec:	ff ff ff 
ffff80000080e6ef:	49 8b 04 00          	mov    rax,QWORD PTR [r8+rax*1]
ffff80000080e6f3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e6f6:	8b 50 24             	mov    edx,DWORD PTR [rax+0x24]
ffff80000080e6f9:	83 c2 01             	add    edx,0x1
ffff80000080e6fc:	89 50 24             	mov    DWORD PTR [rax+0x24],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:112
        if(running_req->func!=DISKREQ_CHECK)
ffff80000080e6ff:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080e706:	ff ff ff 
ffff80000080e709:	49 8b 04 00          	mov    rax,QWORD PTR [r8+rax*1]
ffff80000080e70d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e710:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080e712:	83 f8 02             	cmp    eax,0x2
ffff80000080e715:	74 0a                	je     ffff80000080e721 <execute_request+0x78>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:113
            return 2;
ffff80000080e717:	b8 02 00 00 00       	mov    eax,0x2
ffff80000080e71c:	e9 c8 02 00 00       	jmp    ffff80000080e9e9 <execute_request+0x340>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:114
        if(running_req->time>MAX_DISK_CHKTIME)
ffff80000080e721:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080e728:	ff ff ff 
ffff80000080e72b:	49 8b 04 00          	mov    rax,QWORD PTR [r8+rax*1]
ffff80000080e72f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e732:	8b 40 24             	mov    eax,DWORD PTR [rax+0x24]
ffff80000080e735:	83 f8 0a             	cmp    eax,0xa
ffff80000080e738:	7e 47                	jle    ffff80000080e781 <execute_request+0xd8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:117
        {
            //检测硬盘超时，视为没有硬盘连接
            running_req->result=DISK_CHK_ERR;
ffff80000080e73a:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080e741:	ff ff ff 
ffff80000080e744:	49 8b 04 00          	mov    rax,QWORD PTR [r8+rax*1]
ffff80000080e748:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e74b:	c7 40 20 02 00 00 00 	mov    DWORD PTR [rax+0x20],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:118
            running_req->stat=REQ_STAT_DONE;
ffff80000080e752:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080e759:	ff ff ff 
ffff80000080e75c:	49 8b 04 00          	mov    rax,QWORD PTR [r8+rax*1]
ffff80000080e760:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e763:	c7 40 1c 03 00 00 00 	mov    DWORD PTR [rax+0x1c],0x3
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:119
            running_req=NULL;
ffff80000080e76a:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080e771:	ff ff ff 
ffff80000080e774:	49 8b 04 00          	mov    rax,QWORD PTR [r8+rax*1]
ffff80000080e778:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
ffff80000080e77f:	eb 0a                	jmp    ffff80000080e78b <execute_request+0xe2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:123
        }else
        {
            //未到时间继续等待
            return 2;
ffff80000080e781:	b8 02 00 00 00       	mov    eax,0x2
ffff80000080e786:	e9 5e 02 00 00       	jmp    ffff80000080e9e9 <execute_request+0x340>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:126
        }
    }
    if(head==tail)return 1;//检查是否为空
ffff80000080e78b:	48 b8 b8 f2 bf ff ff 	movabs rax,0xffffffffffbff2b8
ffff80000080e792:	ff ff ff 
ffff80000080e795:	41 8b 14 00          	mov    edx,DWORD PTR [r8+rax*1]
ffff80000080e799:	48 b8 bc f2 bf ff ff 	movabs rax,0xffffffffffbff2bc
ffff80000080e7a0:	ff ff ff 
ffff80000080e7a3:	41 8b 04 00          	mov    eax,DWORD PTR [r8+rax*1]
ffff80000080e7a7:	39 c2                	cmp    edx,eax
ffff80000080e7a9:	75 0a                	jne    ffff80000080e7b5 <execute_request+0x10c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:126 (discriminator 1)
ffff80000080e7ab:	b8 01 00 00 00       	mov    eax,0x1
ffff80000080e7b0:	e9 34 02 00 00       	jmp    ffff80000080e9e9 <execute_request+0x340>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:127
    running_req=&disk_reqs[head];
ffff80000080e7b5:	48 b8 b8 f2 bf ff ff 	movabs rax,0xffffffffffbff2b8
ffff80000080e7bc:	ff ff ff 
ffff80000080e7bf:	41 8b 04 00          	mov    eax,DWORD PTR [r8+rax*1]
ffff80000080e7c3:	48 63 d0             	movsxd rdx,eax
ffff80000080e7c6:	48 89 d0             	mov    rax,rdx
ffff80000080e7c9:	48 01 c0             	add    rax,rax
ffff80000080e7cc:	48 01 d0             	add    rax,rdx
ffff80000080e7cf:	48 c1 e0 04          	shl    rax,0x4
ffff80000080e7d3:	48 ba a0 fd ff ff ff 	movabs rdx,0xfffffffffffffda0
ffff80000080e7da:	ff ff ff 
ffff80000080e7dd:	49 8b 14 10          	mov    rdx,QWORD PTR [r8+rdx*1]
ffff80000080e7e1:	48 01 c2             	add    rdx,rax
ffff80000080e7e4:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080e7eb:	ff ff ff 
ffff80000080e7ee:	49 8b 04 00          	mov    rax,QWORD PTR [r8+rax*1]
ffff80000080e7f2:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:128
    head=(head+1)%MAX_DISK_REQUEST_COUNT;
ffff80000080e7f5:	48 b8 b8 f2 bf ff ff 	movabs rax,0xffffffffffbff2b8
ffff80000080e7fc:	ff ff ff 
ffff80000080e7ff:	41 8b 04 00          	mov    eax,DWORD PTR [r8+rax*1]
ffff80000080e803:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080e806:	48 63 c2             	movsxd rax,edx
ffff80000080e809:	48 69 c0 89 88 88 88 	imul   rax,rax,0xffffffff88888889
ffff80000080e810:	48 c1 e8 20          	shr    rax,0x20
ffff80000080e814:	01 d0                	add    eax,edx
ffff80000080e816:	c1 f8 07             	sar    eax,0x7
ffff80000080e819:	89 d1                	mov    ecx,edx
ffff80000080e81b:	c1 f9 1f             	sar    ecx,0x1f
ffff80000080e81e:	29 c8                	sub    eax,ecx
ffff80000080e820:	69 c8 f0 00 00 00    	imul   ecx,eax,0xf0
ffff80000080e826:	89 d0                	mov    eax,edx
ffff80000080e828:	29 c8                	sub    eax,ecx
ffff80000080e82a:	48 ba b8 f2 bf ff ff 	movabs rdx,0xffffffffffbff2b8
ffff80000080e831:	ff ff ff 
ffff80000080e834:	41 89 04 10          	mov    DWORD PTR [r8+rdx*1],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:129
    running_req->stat=REQ_STAT_WORKING;
ffff80000080e838:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080e83f:	ff ff ff 
ffff80000080e842:	49 8b 04 00          	mov    rax,QWORD PTR [r8+rax*1]
ffff80000080e846:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e849:	c7 40 1c 02 00 00 00 	mov    DWORD PTR [rax+0x1c],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:131
    //set_proc_stat(running_req->pid,TASK_SUSPENDED);
    int r=0;
ffff80000080e850:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:132
    switch (running_req->func)
ffff80000080e857:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080e85e:	ff ff ff 
ffff80000080e861:	49 8b 04 00          	mov    rax,QWORD PTR [r8+rax*1]
ffff80000080e865:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e868:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080e86a:	83 f8 03             	cmp    eax,0x3
ffff80000080e86d:	0f 84 31 01 00 00    	je     ffff80000080e9a4 <execute_request+0x2fb>
ffff80000080e873:	83 f8 03             	cmp    eax,0x3
ffff80000080e876:	0f 8f 5a 01 00 00    	jg     ffff80000080e9d6 <execute_request+0x32d>
ffff80000080e87c:	83 f8 02             	cmp    eax,0x2
ffff80000080e87f:	0f 84 f2 00 00 00    	je     ffff80000080e977 <execute_request+0x2ce>
ffff80000080e885:	83 f8 02             	cmp    eax,0x2
ffff80000080e888:	0f 8f 48 01 00 00    	jg     ffff80000080e9d6 <execute_request+0x32d>
ffff80000080e88e:	85 c0                	test   eax,eax
ffff80000080e890:	74 0a                	je     ffff80000080e89c <execute_request+0x1f3>
ffff80000080e892:	83 f8 01             	cmp    eax,0x1
ffff80000080e895:	74 74                	je     ffff80000080e90b <execute_request+0x262>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:150
        break;
    case DISKREQ_RESET:
        r=async_reset_disk(running_req->disk);
        break;
    default:
        break;
ffff80000080e897:	e9 3a 01 00 00       	jmp    ffff80000080e9d6 <execute_request+0x32d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:136
        running_req->lba,running_req->sec_n,running_req->buf);
ffff80000080e89c:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080e8a3:	ff ff ff 
ffff80000080e8a6:	49 8b 04 00          	mov    rax,QWORD PTR [r8+rax*1]
ffff80000080e8aa:	48 8b 00             	mov    rax,QWORD PTR [rax]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:135
        r=async_read_disk(running_req->disk,\
ffff80000080e8ad:	48 8b 48 10          	mov    rcx,QWORD PTR [rax+0x10]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:136
        running_req->lba,running_req->sec_n,running_req->buf);
ffff80000080e8b1:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080e8b8:	ff ff ff 
ffff80000080e8bb:	49 8b 04 00          	mov    rax,QWORD PTR [r8+rax*1]
ffff80000080e8bf:	48 8b 00             	mov    rax,QWORD PTR [rax]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:135
        r=async_read_disk(running_req->disk,\
ffff80000080e8c2:	8b 50 0c             	mov    edx,DWORD PTR [rax+0xc]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:136
        running_req->lba,running_req->sec_n,running_req->buf);
ffff80000080e8c5:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080e8cc:	ff ff ff 
ffff80000080e8cf:	49 8b 04 00          	mov    rax,QWORD PTR [r8+rax*1]
ffff80000080e8d3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e8d6:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:135
        r=async_read_disk(running_req->disk,\
ffff80000080e8d9:	89 c6                	mov    esi,eax
ffff80000080e8db:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080e8e2:	ff ff ff 
ffff80000080e8e5:	49 8b 04 00          	mov    rax,QWORD PTR [r8+rax*1]
ffff80000080e8e9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e8ec:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff80000080e8ef:	89 c7                	mov    edi,eax
ffff80000080e8f1:	4d 89 c7             	mov    r15,r8
ffff80000080e8f4:	48 b8 03 f7 fe ff ff 	movabs rax,0xfffffffffffef703
ffff80000080e8fb:	ff ff ff 
ffff80000080e8fe:	4c 01 c0             	add    rax,r8
ffff80000080e901:	ff d0                	call   rax
ffff80000080e903:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:137
        break;
ffff80000080e906:	e9 cc 00 00 00       	jmp    ffff80000080e9d7 <execute_request+0x32e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:140
         running_req->lba,running_req->sec_n,running_req->buf);
ffff80000080e90b:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080e912:	ff ff ff 
ffff80000080e915:	49 8b 04 00          	mov    rax,QWORD PTR [r8+rax*1]
ffff80000080e919:	48 8b 00             	mov    rax,QWORD PTR [rax]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:139
        r=async_write_disk(running_req->disk,\
ffff80000080e91c:	48 8b 48 10          	mov    rcx,QWORD PTR [rax+0x10]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:140
         running_req->lba,running_req->sec_n,running_req->buf);
ffff80000080e920:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080e927:	ff ff ff 
ffff80000080e92a:	49 8b 04 00          	mov    rax,QWORD PTR [r8+rax*1]
ffff80000080e92e:	48 8b 00             	mov    rax,QWORD PTR [rax]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:139
        r=async_write_disk(running_req->disk,\
ffff80000080e931:	8b 50 0c             	mov    edx,DWORD PTR [rax+0xc]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:140
         running_req->lba,running_req->sec_n,running_req->buf);
ffff80000080e934:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080e93b:	ff ff ff 
ffff80000080e93e:	49 8b 04 00          	mov    rax,QWORD PTR [r8+rax*1]
ffff80000080e942:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e945:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:139
        r=async_write_disk(running_req->disk,\
ffff80000080e948:	89 c6                	mov    esi,eax
ffff80000080e94a:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080e951:	ff ff ff 
ffff80000080e954:	49 8b 04 00          	mov    rax,QWORD PTR [r8+rax*1]
ffff80000080e958:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e95b:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff80000080e95e:	89 c7                	mov    edi,eax
ffff80000080e960:	4d 89 c7             	mov    r15,r8
ffff80000080e963:	48 b8 87 f8 fe ff ff 	movabs rax,0xfffffffffffef887
ffff80000080e96a:	ff ff ff 
ffff80000080e96d:	4c 01 c0             	add    rax,r8
ffff80000080e970:	ff d0                	call   rax
ffff80000080e972:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:142
        break;
ffff80000080e975:	eb 60                	jmp    ffff80000080e9d7 <execute_request+0x32e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:144
        r=async_check_disk(running_req->disk);
ffff80000080e977:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080e97e:	ff ff ff 
ffff80000080e981:	49 8b 04 00          	mov    rax,QWORD PTR [r8+rax*1]
ffff80000080e985:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e988:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff80000080e98b:	89 c7                	mov    edi,eax
ffff80000080e98d:	4d 89 c7             	mov    r15,r8
ffff80000080e990:	48 b8 9d 00 ff ff ff 	movabs rax,0xffffffffffff009d
ffff80000080e997:	ff ff ff 
ffff80000080e99a:	4c 01 c0             	add    rax,r8
ffff80000080e99d:	ff d0                	call   rax
ffff80000080e99f:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:145
        break;
ffff80000080e9a2:	eb 33                	jmp    ffff80000080e9d7 <execute_request+0x32e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:147
        r=async_reset_disk(running_req->disk);
ffff80000080e9a4:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080e9ab:	ff ff ff 
ffff80000080e9ae:	49 8b 04 00          	mov    rax,QWORD PTR [r8+rax*1]
ffff80000080e9b2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e9b5:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff80000080e9b8:	89 c7                	mov    edi,eax
ffff80000080e9ba:	4d 89 c7             	mov    r15,r8
ffff80000080e9bd:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e9c2:	48 ba b7 f6 fe ff ff 	movabs rdx,0xfffffffffffef6b7
ffff80000080e9c9:	ff ff ff 
ffff80000080e9cc:	4c 01 c2             	add    rdx,r8
ffff80000080e9cf:	ff d2                	call   rdx
ffff80000080e9d1:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:148
        break;
ffff80000080e9d4:	eb 01                	jmp    ffff80000080e9d7 <execute_request+0x32e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:150
        break;
ffff80000080e9d6:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:152
    }
    if(r==-1)return -1;
ffff80000080e9d7:	83 7d ec ff          	cmp    DWORD PTR [rbp-0x14],0xffffffff
ffff80000080e9db:	75 07                	jne    ffff80000080e9e4 <execute_request+0x33b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:152 (discriminator 1)
ffff80000080e9dd:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080e9e2:	eb 05                	jmp    ffff80000080e9e9 <execute_request+0x340>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:153
    return 0;
ffff80000080e9e4:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:154
}
ffff80000080e9e9:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080e9ed:	c9                   	leave  
ffff80000080e9ee:	c3                   	ret    

ffff80000080e9ef <async_reset_disk>:
async_reset_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:156
int async_reset_disk(int disk)
{
ffff80000080e9ef:	f3 0f 1e fa          	endbr64 
ffff80000080e9f3:	55                   	push   rbp
ffff80000080e9f4:	48 89 e5             	mov    rbp,rsp
ffff80000080e9f7:	41 57                	push   r15
ffff80000080e9f9:	48 83 ec 18          	sub    rsp,0x18
ffff80000080e9fd:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080e9fd <async_reset_disk+0xe>
ffff80000080ea04:	49 bb 3b 09 01 00 00 	movabs r11,0x1093b
ffff80000080ea0b:	00 00 00 
ffff80000080ea0e:	4c 01 d8             	add    rax,r11
ffff80000080ea11:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:157
    outb(PORT_DISK_CONTROL,DISK_CMD_RESET);
ffff80000080ea14:	be 0c 00 00 00       	mov    esi,0xc
ffff80000080ea19:	bf f6 03 00 00       	mov    edi,0x3f6
ffff80000080ea1e:	49 89 c7             	mov    r15,rax
ffff80000080ea21:	48 ba 48 ae fe ff ff 	movabs rdx,0xfffffffffffeae48
ffff80000080ea28:	ff ff ff 
ffff80000080ea2b:	48 01 c2             	add    rdx,rax
ffff80000080ea2e:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:158
    return 0;
ffff80000080ea30:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:159
}
ffff80000080ea35:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080ea39:	c9                   	leave  
ffff80000080ea3a:	c3                   	ret    

ffff80000080ea3b <async_read_disk>:
async_read_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:161
int async_read_disk(int disk,unsigned int lba,int sec_n,char* mem_addr)
{
ffff80000080ea3b:	f3 0f 1e fa          	endbr64 
ffff80000080ea3f:	55                   	push   rbp
ffff80000080ea40:	48 89 e5             	mov    rbp,rsp
ffff80000080ea43:	41 57                	push   r15
ffff80000080ea45:	53                   	push   rbx
ffff80000080ea46:	48 83 ec 30          	sub    rsp,0x30
ffff80000080ea4a:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080ea4a <async_read_disk+0xf>
ffff80000080ea51:	49 bb ee 08 01 00 00 	movabs r11,0x108ee
ffff80000080ea58:	00 00 00 
ffff80000080ea5b:	4c 01 db             	add    rbx,r11
ffff80000080ea5e:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff80000080ea61:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080ea64:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff80000080ea67:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:162
    unsigned short port=PORT_DISK_MAJOR;
ffff80000080ea6b:	66 c7 45 ee f0 01    	mov    WORD PTR [rbp-0x12],0x1f0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:163
    int slave_disk=0;
ffff80000080ea71:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:164
    if(disk==DISK_SLAVE_MAJOR||disk==DISK_SLAVE_SLAVE)
ffff80000080ea78:	83 7d dc 02          	cmp    DWORD PTR [rbp-0x24],0x2
ffff80000080ea7c:	74 06                	je     ffff80000080ea84 <async_read_disk+0x49>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:164 (discriminator 1)
ffff80000080ea7e:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff80000080ea82:	75 06                	jne    ffff80000080ea8a <async_read_disk+0x4f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:165
        port=PORT_DISK_SLAVE;
ffff80000080ea84:	66 c7 45 ee 70 01    	mov    WORD PTR [rbp-0x12],0x170
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:166
    if(disk==DISK_SLAVE_SLAVE||disk==DISK_MAJOR_SLAVE)
ffff80000080ea8a:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff80000080ea8e:	74 06                	je     ffff80000080ea96 <async_read_disk+0x5b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:166 (discriminator 1)
ffff80000080ea90:	83 7d dc 01          	cmp    DWORD PTR [rbp-0x24],0x1
ffff80000080ea94:	75 07                	jne    ffff80000080ea9d <async_read_disk+0x62>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:167
        slave_disk=1;
ffff80000080ea96:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:168
    outb(port+2,sec_n);
ffff80000080ea9d:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080eaa0:	0f b6 d0             	movzx  edx,al
ffff80000080eaa3:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080eaa7:	83 c0 02             	add    eax,0x2
ffff80000080eaaa:	0f b7 c0             	movzx  eax,ax
ffff80000080eaad:	89 d6                	mov    esi,edx
ffff80000080eaaf:	89 c7                	mov    edi,eax
ffff80000080eab1:	49 89 df             	mov    r15,rbx
ffff80000080eab4:	48 b8 48 ae fe ff ff 	movabs rax,0xfffffffffffeae48
ffff80000080eabb:	ff ff ff 
ffff80000080eabe:	48 01 d8             	add    rax,rbx
ffff80000080eac1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:169
    outb(port+3,lba&0xff);
ffff80000080eac3:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080eac6:	0f b6 d0             	movzx  edx,al
ffff80000080eac9:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080eacd:	83 c0 03             	add    eax,0x3
ffff80000080ead0:	0f b7 c0             	movzx  eax,ax
ffff80000080ead3:	89 d6                	mov    esi,edx
ffff80000080ead5:	89 c7                	mov    edi,eax
ffff80000080ead7:	49 89 df             	mov    r15,rbx
ffff80000080eada:	48 b8 48 ae fe ff ff 	movabs rax,0xfffffffffffeae48
ffff80000080eae1:	ff ff ff 
ffff80000080eae4:	48 01 d8             	add    rax,rbx
ffff80000080eae7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:170
    outb(port+4,(lba>>8)&0xff);
ffff80000080eae9:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080eaec:	c1 e8 08             	shr    eax,0x8
ffff80000080eaef:	0f b6 d0             	movzx  edx,al
ffff80000080eaf2:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080eaf6:	83 c0 04             	add    eax,0x4
ffff80000080eaf9:	0f b7 c0             	movzx  eax,ax
ffff80000080eafc:	89 d6                	mov    esi,edx
ffff80000080eafe:	89 c7                	mov    edi,eax
ffff80000080eb00:	49 89 df             	mov    r15,rbx
ffff80000080eb03:	48 b8 48 ae fe ff ff 	movabs rax,0xfffffffffffeae48
ffff80000080eb0a:	ff ff ff 
ffff80000080eb0d:	48 01 d8             	add    rax,rbx
ffff80000080eb10:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:171
    outb(port+5,(lba>>16)&0xff);
ffff80000080eb12:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080eb15:	c1 e8 10             	shr    eax,0x10
ffff80000080eb18:	0f b6 d0             	movzx  edx,al
ffff80000080eb1b:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080eb1f:	83 c0 05             	add    eax,0x5
ffff80000080eb22:	0f b7 c0             	movzx  eax,ax
ffff80000080eb25:	89 d6                	mov    esi,edx
ffff80000080eb27:	89 c7                	mov    edi,eax
ffff80000080eb29:	49 89 df             	mov    r15,rbx
ffff80000080eb2c:	48 b8 48 ae fe ff ff 	movabs rax,0xfffffffffffeae48
ffff80000080eb33:	ff ff ff 
ffff80000080eb36:	48 01 d8             	add    rax,rbx
ffff80000080eb39:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:172
    char drv=slave_disk?0x10:0;
ffff80000080eb3b:	83 7d e8 00          	cmp    DWORD PTR [rbp-0x18],0x0
ffff80000080eb3f:	74 07                	je     ffff80000080eb48 <async_read_disk+0x10d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:172 (discriminator 1)
ffff80000080eb41:	b8 10 00 00 00       	mov    eax,0x10
ffff80000080eb46:	eb 05                	jmp    ffff80000080eb4d <async_read_disk+0x112>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:172 (discriminator 2)
ffff80000080eb48:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:172 (discriminator 4)
ffff80000080eb4d:	88 45 e7             	mov    BYTE PTR [rbp-0x19],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:173 (discriminator 4)
    char lba_hi=(lba>>24)&0xf|drv|0xe0;
ffff80000080eb50:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080eb53:	c1 e8 18             	shr    eax,0x18
ffff80000080eb56:	83 e0 0f             	and    eax,0xf
ffff80000080eb59:	89 c2                	mov    edx,eax
ffff80000080eb5b:	0f b6 45 e7          	movzx  eax,BYTE PTR [rbp-0x19]
ffff80000080eb5f:	09 d0                	or     eax,edx
ffff80000080eb61:	83 c8 e0             	or     eax,0xffffffe0
ffff80000080eb64:	88 45 e6             	mov    BYTE PTR [rbp-0x1a],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:174 (discriminator 4)
    outb(port+6,lba_hi);
ffff80000080eb67:	0f b6 45 e6          	movzx  eax,BYTE PTR [rbp-0x1a]
ffff80000080eb6b:	0f b6 d0             	movzx  edx,al
ffff80000080eb6e:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080eb72:	83 c0 06             	add    eax,0x6
ffff80000080eb75:	0f b7 c0             	movzx  eax,ax
ffff80000080eb78:	89 d6                	mov    esi,edx
ffff80000080eb7a:	89 c7                	mov    edi,eax
ffff80000080eb7c:	49 89 df             	mov    r15,rbx
ffff80000080eb7f:	48 b8 48 ae fe ff ff 	movabs rax,0xfffffffffffeae48
ffff80000080eb86:	ff ff ff 
ffff80000080eb89:	48 01 d8             	add    rax,rbx
ffff80000080eb8c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:175 (discriminator 4)
    outb(port+7,DISK_CMD_READ);
ffff80000080eb8e:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080eb92:	83 c0 07             	add    eax,0x7
ffff80000080eb95:	0f b7 c0             	movzx  eax,ax
ffff80000080eb98:	be 20 00 00 00       	mov    esi,0x20
ffff80000080eb9d:	89 c7                	mov    edi,eax
ffff80000080eb9f:	49 89 df             	mov    r15,rbx
ffff80000080eba2:	48 b8 48 ae fe ff ff 	movabs rax,0xfffffffffffeae48
ffff80000080eba9:	ff ff ff 
ffff80000080ebac:	48 01 d8             	add    rax,rbx
ffff80000080ebaf:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:195 (discriminator 4)
    // }
    // for(int i=0;i<running_req->sec_n*256;i++)
    // {
    //     *mem_addr++=inw(port);
    // }
    return 0;
ffff80000080ebb1:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:196 (discriminator 4)
}
ffff80000080ebb6:	48 83 c4 30          	add    rsp,0x30
ffff80000080ebba:	5b                   	pop    rbx
ffff80000080ebbb:	41 5f                	pop    r15
ffff80000080ebbd:	5d                   	pop    rbp
ffff80000080ebbe:	c3                   	ret    

ffff80000080ebbf <async_write_disk>:
async_write_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:198
int async_write_disk(int disk,unsigned int lba, int sec_n, char* mem_ptr)
{
ffff80000080ebbf:	f3 0f 1e fa          	endbr64 
ffff80000080ebc3:	55                   	push   rbp
ffff80000080ebc4:	48 89 e5             	mov    rbp,rsp
ffff80000080ebc7:	41 57                	push   r15
ffff80000080ebc9:	53                   	push   rbx
ffff80000080ebca:	48 83 ec 30          	sub    rsp,0x30
ffff80000080ebce:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080ebce <async_write_disk+0xf>
ffff80000080ebd5:	49 bb 6a 07 01 00 00 	movabs r11,0x1076a
ffff80000080ebdc:	00 00 00 
ffff80000080ebdf:	4c 01 db             	add    rbx,r11
ffff80000080ebe2:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff80000080ebe5:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080ebe8:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff80000080ebeb:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:199
    unsigned short port=PORT_DISK_MAJOR;
ffff80000080ebef:	66 c7 45 ee f0 01    	mov    WORD PTR [rbp-0x12],0x1f0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:200
    int slave_disk=0;
ffff80000080ebf5:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:201
    if(disk==DISK_SLAVE_MAJOR||disk==DISK_SLAVE_SLAVE)
ffff80000080ebfc:	83 7d dc 02          	cmp    DWORD PTR [rbp-0x24],0x2
ffff80000080ec00:	74 06                	je     ffff80000080ec08 <async_write_disk+0x49>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:201 (discriminator 1)
ffff80000080ec02:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff80000080ec06:	75 06                	jne    ffff80000080ec0e <async_write_disk+0x4f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:202
        port=PORT_DISK_SLAVE;
ffff80000080ec08:	66 c7 45 ee 70 01    	mov    WORD PTR [rbp-0x12],0x170
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:203
    if(disk==DISK_SLAVE_SLAVE||disk==DISK_MAJOR_SLAVE)
ffff80000080ec0e:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff80000080ec12:	74 06                	je     ffff80000080ec1a <async_write_disk+0x5b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:203 (discriminator 1)
ffff80000080ec14:	83 7d dc 01          	cmp    DWORD PTR [rbp-0x24],0x1
ffff80000080ec18:	75 07                	jne    ffff80000080ec21 <async_write_disk+0x62>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:204
        slave_disk=1;
ffff80000080ec1a:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:207
    while (1)
    {
        byte t=inb(0x1f7);
ffff80000080ec21:	bf f7 00 00 00       	mov    edi,0xf7
ffff80000080ec26:	49 89 df             	mov    r15,rbx
ffff80000080ec29:	48 b8 61 ae fe ff ff 	movabs rax,0xfffffffffffeae61
ffff80000080ec30:	ff ff ff 
ffff80000080ec33:	48 01 d8             	add    rax,rbx
ffff80000080ec36:	ff d0                	call   rax
ffff80000080ec38:	88 45 e7             	mov    BYTE PTR [rbp-0x19],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:209
        //logf("istat:%x",t);
        byte err=t&1;
ffff80000080ec3b:	0f b6 45 e7          	movzx  eax,BYTE PTR [rbp-0x19]
ffff80000080ec3f:	83 e0 01             	and    eax,0x1
ffff80000080ec42:	88 45 e6             	mov    BYTE PTR [rbp-0x1a],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:210
        if(err!=0)
ffff80000080ec45:	80 7d e6 00          	cmp    BYTE PTR [rbp-0x1a],0x0
ffff80000080ec49:	74 0a                	je     ffff80000080ec55 <async_write_disk+0x96>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:213
        {
            //printf("ERR iwriting disk\n");
            return -1;
ffff80000080ec4b:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080ec50:	e9 23 01 00 00       	jmp    ffff80000080ed78 <async_write_disk+0x1b9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:215
        }
        t&=0x88;
ffff80000080ec55:	80 65 e7 88          	and    BYTE PTR [rbp-0x19],0x88
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:216
        if(t==0x8)break;
ffff80000080ec59:	80 7d e7 08          	cmp    BYTE PTR [rbp-0x19],0x8
ffff80000080ec5d:	74 02                	je     ffff80000080ec61 <async_write_disk+0xa2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:206
    {
ffff80000080ec5f:	eb c0                	jmp    ffff80000080ec21 <async_write_disk+0x62>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:216
        if(t==0x8)break;
ffff80000080ec61:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:218
    }
    outb(port+2,sec_n);
ffff80000080ec62:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080ec65:	0f b6 d0             	movzx  edx,al
ffff80000080ec68:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080ec6c:	83 c0 02             	add    eax,0x2
ffff80000080ec6f:	0f b7 c0             	movzx  eax,ax
ffff80000080ec72:	89 d6                	mov    esi,edx
ffff80000080ec74:	89 c7                	mov    edi,eax
ffff80000080ec76:	49 89 df             	mov    r15,rbx
ffff80000080ec79:	48 b8 48 ae fe ff ff 	movabs rax,0xfffffffffffeae48
ffff80000080ec80:	ff ff ff 
ffff80000080ec83:	48 01 d8             	add    rax,rbx
ffff80000080ec86:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:219
    outb(port+3,lba&0xff);
ffff80000080ec88:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080ec8b:	0f b6 d0             	movzx  edx,al
ffff80000080ec8e:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080ec92:	83 c0 03             	add    eax,0x3
ffff80000080ec95:	0f b7 c0             	movzx  eax,ax
ffff80000080ec98:	89 d6                	mov    esi,edx
ffff80000080ec9a:	89 c7                	mov    edi,eax
ffff80000080ec9c:	49 89 df             	mov    r15,rbx
ffff80000080ec9f:	48 b8 48 ae fe ff ff 	movabs rax,0xfffffffffffeae48
ffff80000080eca6:	ff ff ff 
ffff80000080eca9:	48 01 d8             	add    rax,rbx
ffff80000080ecac:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:220
    outb(port+4,(lba>>8)&0xff);
ffff80000080ecae:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080ecb1:	c1 e8 08             	shr    eax,0x8
ffff80000080ecb4:	0f b6 d0             	movzx  edx,al
ffff80000080ecb7:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080ecbb:	83 c0 04             	add    eax,0x4
ffff80000080ecbe:	0f b7 c0             	movzx  eax,ax
ffff80000080ecc1:	89 d6                	mov    esi,edx
ffff80000080ecc3:	89 c7                	mov    edi,eax
ffff80000080ecc5:	49 89 df             	mov    r15,rbx
ffff80000080ecc8:	48 b8 48 ae fe ff ff 	movabs rax,0xfffffffffffeae48
ffff80000080eccf:	ff ff ff 
ffff80000080ecd2:	48 01 d8             	add    rax,rbx
ffff80000080ecd5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:221
    outb(port+5,(lba>>16)&0xff);
ffff80000080ecd7:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080ecda:	c1 e8 10             	shr    eax,0x10
ffff80000080ecdd:	0f b6 d0             	movzx  edx,al
ffff80000080ece0:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080ece4:	83 c0 05             	add    eax,0x5
ffff80000080ece7:	0f b7 c0             	movzx  eax,ax
ffff80000080ecea:	89 d6                	mov    esi,edx
ffff80000080ecec:	89 c7                	mov    edi,eax
ffff80000080ecee:	49 89 df             	mov    r15,rbx
ffff80000080ecf1:	48 b8 48 ae fe ff ff 	movabs rax,0xfffffffffffeae48
ffff80000080ecf8:	ff ff ff 
ffff80000080ecfb:	48 01 d8             	add    rax,rbx
ffff80000080ecfe:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:222
    char drv=slave_disk?0x10:0;
ffff80000080ed00:	83 7d e8 00          	cmp    DWORD PTR [rbp-0x18],0x0
ffff80000080ed04:	74 07                	je     ffff80000080ed0d <async_write_disk+0x14e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:222 (discriminator 1)
ffff80000080ed06:	b8 10 00 00 00       	mov    eax,0x10
ffff80000080ed0b:	eb 05                	jmp    ffff80000080ed12 <async_write_disk+0x153>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:222 (discriminator 2)
ffff80000080ed0d:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:222 (discriminator 4)
ffff80000080ed12:	88 45 e5             	mov    BYTE PTR [rbp-0x1b],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:223 (discriminator 4)
    unsigned char lba_hi=(lba>>24)&0xf|drv|0xe0;
ffff80000080ed15:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080ed18:	c1 e8 18             	shr    eax,0x18
ffff80000080ed1b:	83 e0 0f             	and    eax,0xf
ffff80000080ed1e:	89 c2                	mov    edx,eax
ffff80000080ed20:	0f b6 45 e5          	movzx  eax,BYTE PTR [rbp-0x1b]
ffff80000080ed24:	09 d0                	or     eax,edx
ffff80000080ed26:	83 c8 e0             	or     eax,0xffffffe0
ffff80000080ed29:	88 45 e4             	mov    BYTE PTR [rbp-0x1c],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:224 (discriminator 4)
    outb(port+6,lba_hi);
ffff80000080ed2c:	0f b6 55 e4          	movzx  edx,BYTE PTR [rbp-0x1c]
ffff80000080ed30:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080ed34:	83 c0 06             	add    eax,0x6
ffff80000080ed37:	0f b7 c0             	movzx  eax,ax
ffff80000080ed3a:	89 d6                	mov    esi,edx
ffff80000080ed3c:	89 c7                	mov    edi,eax
ffff80000080ed3e:	49 89 df             	mov    r15,rbx
ffff80000080ed41:	48 b8 48 ae fe ff ff 	movabs rax,0xfffffffffffeae48
ffff80000080ed48:	ff ff ff 
ffff80000080ed4b:	48 01 d8             	add    rax,rbx
ffff80000080ed4e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:225 (discriminator 4)
    outb(port+7,DISK_CMD_WRITE);
ffff80000080ed50:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080ed54:	83 c0 07             	add    eax,0x7
ffff80000080ed57:	0f b7 c0             	movzx  eax,ax
ffff80000080ed5a:	be 30 00 00 00       	mov    esi,0x30
ffff80000080ed5f:	89 c7                	mov    edi,eax
ffff80000080ed61:	49 89 df             	mov    r15,rbx
ffff80000080ed64:	48 b8 48 ae fe ff ff 	movabs rax,0xfffffffffffeae48
ffff80000080ed6b:	ff ff ff 
ffff80000080ed6e:	48 01 d8             	add    rax,rbx
ffff80000080ed71:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:242 (discriminator 4)
    //     if(t==0x8)break;
    // }
    // short *p=mem_ptr;
    // for(int i=0;i<running_req->sec_n*256;i++)
    //         outw(port,*p++);
    return 0;
ffff80000080ed73:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:243
}
ffff80000080ed78:	48 83 c4 30          	add    rsp,0x30
ffff80000080ed7c:	5b                   	pop    rbx
ffff80000080ed7d:	41 5f                	pop    r15
ffff80000080ed7f:	5d                   	pop    rbp
ffff80000080ed80:	c3                   	ret    

ffff80000080ed81 <read_disk>:
read_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:245
int read_disk(driver_args* args)
{
ffff80000080ed81:	f3 0f 1e fa          	endbr64 
ffff80000080ed85:	55                   	push   rbp
ffff80000080ed86:	48 89 e5             	mov    rbp,rsp
ffff80000080ed89:	41 57                	push   r15
ffff80000080ed8b:	53                   	push   rbx
ffff80000080ed8c:	48 83 ec 20          	sub    rsp,0x20
ffff80000080ed90:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080ed90 <read_disk+0xf>
ffff80000080ed97:	49 bb a8 05 01 00 00 	movabs r11,0x105a8
ffff80000080ed9e:	00 00 00 
ffff80000080eda1:	4c 01 db             	add    rbx,r11
ffff80000080eda4:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:246
    int ret=read_disk_asm(args->lba,args->sec_c,args->dist_addr);
ffff80000080eda8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080edac:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff80000080edaf:	48 98                	cdqe   
ffff80000080edb1:	48 89 c2             	mov    rdx,rax
ffff80000080edb4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080edb8:	8b 48 18             	mov    ecx,DWORD PTR [rax+0x18]
ffff80000080edbb:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080edbf:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080edc1:	89 ce                	mov    esi,ecx
ffff80000080edc3:	89 c7                	mov    edi,eax
ffff80000080edc5:	49 89 df             	mov    r15,rbx
ffff80000080edc8:	48 b8 54 03 ff ff ff 	movabs rax,0xffffffffffff0354
ffff80000080edcf:	ff ff ff 
ffff80000080edd2:	48 01 d8             	add    rax,rbx
ffff80000080edd5:	ff d0                	call   rax
ffff80000080edd7:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:248
    
    running_req->stat=REQ_STAT_DONE;
ffff80000080edda:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080ede1:	ff ff ff 
ffff80000080ede4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ede8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080edeb:	c7 40 1c 03 00 00 00 	mov    DWORD PTR [rax+0x1c],0x3
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:249
    running_req->args->stat=REQ_STAT_EMPTY;
ffff80000080edf2:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080edf9:	ff ff ff 
ffff80000080edfc:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ee00:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ee03:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080ee07:	c7 80 ac 00 00 00 00 	mov    DWORD PTR [rax+0xac],0x0
ffff80000080ee0e:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:251
    //set_proc_stat(running_req->pid,TASK_READY);
    running_req=NULL;
ffff80000080ee11:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080ee18:	ff ff ff 
ffff80000080ee1b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ee1f:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:252
    return ret;
ffff80000080ee26:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:253
}
ffff80000080ee29:	48 83 c4 20          	add    rsp,0x20
ffff80000080ee2d:	5b                   	pop    rbx
ffff80000080ee2e:	41 5f                	pop    r15
ffff80000080ee30:	5d                   	pop    rbp
ffff80000080ee31:	c3                   	ret    

ffff80000080ee32 <write_disk>:
write_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:255
int write_disk(driver_args* args)
{
ffff80000080ee32:	f3 0f 1e fa          	endbr64 
ffff80000080ee36:	55                   	push   rbp
ffff80000080ee37:	48 89 e5             	mov    rbp,rsp
ffff80000080ee3a:	41 57                	push   r15
ffff80000080ee3c:	53                   	push   rbx
ffff80000080ee3d:	48 83 ec 20          	sub    rsp,0x20
ffff80000080ee41:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080ee41 <write_disk+0xf>
ffff80000080ee48:	49 bb f7 04 01 00 00 	movabs r11,0x104f7
ffff80000080ee4f:	00 00 00 
ffff80000080ee52:	4c 01 db             	add    rbx,r11
ffff80000080ee55:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:256
    int ret=write_disk_asm(args->lba,args->sec_c,args->src_addr);
ffff80000080ee59:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080ee5d:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080ee60:	48 98                	cdqe   
ffff80000080ee62:	48 89 c2             	mov    rdx,rax
ffff80000080ee65:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080ee69:	8b 48 18             	mov    ecx,DWORD PTR [rax+0x18]
ffff80000080ee6c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080ee70:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080ee72:	89 ce                	mov    esi,ecx
ffff80000080ee74:	89 c7                	mov    edi,eax
ffff80000080ee76:	49 89 df             	mov    r15,rbx
ffff80000080ee79:	48 b8 d4 03 ff ff ff 	movabs rax,0xffffffffffff03d4
ffff80000080ee80:	ff ff ff 
ffff80000080ee83:	48 01 d8             	add    rax,rbx
ffff80000080ee86:	ff d0                	call   rax
ffff80000080ee88:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:258
    
    running_req->stat=REQ_STAT_DONE;
ffff80000080ee8b:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080ee92:	ff ff ff 
ffff80000080ee95:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ee99:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ee9c:	c7 40 1c 03 00 00 00 	mov    DWORD PTR [rax+0x1c],0x3
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:259
    running_req->args->stat=REQ_STAT_EMPTY;
ffff80000080eea3:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080eeaa:	ff ff ff 
ffff80000080eead:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080eeb1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080eeb4:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080eeb8:	c7 80 ac 00 00 00 00 	mov    DWORD PTR [rax+0xac],0x0
ffff80000080eebf:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:261
    //set_proc_stat(running_req->pid,TASK_READY);
    running_req=NULL;
ffff80000080eec2:	48 b8 d0 fe ff ff ff 	movabs rax,0xfffffffffffffed0
ffff80000080eec9:	ff ff ff 
ffff80000080eecc:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080eed0:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:262
    return ret;
ffff80000080eed7:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:263
}
ffff80000080eeda:	48 83 c4 20          	add    rsp,0x20
ffff80000080eede:	5b                   	pop    rbx
ffff80000080eedf:	41 5f                	pop    r15
ffff80000080eee1:	5d                   	pop    rbp
ffff80000080eee2:	c3                   	ret    

ffff80000080eee3 <chk_result>:
chk_result():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:265
int chk_result(int r)
{
ffff80000080eee3:	f3 0f 1e fa          	endbr64 
ffff80000080eee7:	55                   	push   rbp
ffff80000080eee8:	48 89 e5             	mov    rbp,rsp
ffff80000080eeeb:	41 57                	push   r15
ffff80000080eeed:	48 83 ec 18          	sub    rsp,0x18
ffff80000080eef1:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080eef1 <chk_result+0xe>
ffff80000080eef8:	49 bb 47 04 01 00 00 	movabs r11,0x10447
ffff80000080eeff:	00 00 00 
ffff80000080ef02:	4c 01 da             	add    rdx,r11
ffff80000080ef05:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:266
    while(disk_reqs[r].stat!=REQ_STAT_DONE);
ffff80000080ef08:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:266 (discriminator 1)
ffff80000080ef09:	48 b8 a0 fd ff ff ff 	movabs rax,0xfffffffffffffda0
ffff80000080ef10:	ff ff ff 
ffff80000080ef13:	48 8b 34 02          	mov    rsi,QWORD PTR [rdx+rax*1]
ffff80000080ef17:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080ef1a:	48 63 c8             	movsxd rcx,eax
ffff80000080ef1d:	48 89 c8             	mov    rax,rcx
ffff80000080ef20:	48 01 c0             	add    rax,rax
ffff80000080ef23:	48 01 c8             	add    rax,rcx
ffff80000080ef26:	48 c1 e0 04          	shl    rax,0x4
ffff80000080ef2a:	48 01 f0             	add    rax,rsi
ffff80000080ef2d:	48 83 c0 1c          	add    rax,0x1c
ffff80000080ef31:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080ef33:	83 f8 03             	cmp    eax,0x3
ffff80000080ef36:	75 d1                	jne    ffff80000080ef09 <chk_result+0x26>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:267
    if(disk_reqs[r].result==DISK_CHK_OK)
ffff80000080ef38:	48 b8 a0 fd ff ff ff 	movabs rax,0xfffffffffffffda0
ffff80000080ef3f:	ff ff ff 
ffff80000080ef42:	48 8b 34 02          	mov    rsi,QWORD PTR [rdx+rax*1]
ffff80000080ef46:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080ef49:	48 63 c8             	movsxd rcx,eax
ffff80000080ef4c:	48 89 c8             	mov    rax,rcx
ffff80000080ef4f:	48 01 c0             	add    rax,rax
ffff80000080ef52:	48 01 c8             	add    rax,rcx
ffff80000080ef55:	48 c1 e0 04          	shl    rax,0x4
ffff80000080ef59:	48 01 f0             	add    rax,rsi
ffff80000080ef5c:	48 83 c0 20          	add    rax,0x20
ffff80000080ef60:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080ef62:	83 f8 01             	cmp    eax,0x1
ffff80000080ef65:	75 07                	jne    ffff80000080ef6e <chk_result+0x8b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:268
        return 1;
ffff80000080ef67:	b8 01 00 00 00       	mov    eax,0x1
ffff80000080ef6c:	eb 2d                	jmp    ffff80000080ef9b <chk_result+0xb8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:269
    comprintf("disk err\n");
ffff80000080ef6e:	48 b8 70 c9 ff ff ff 	movabs rax,0xffffffffffffc970
ffff80000080ef75:	ff ff ff 
ffff80000080ef78:	48 8d 04 02          	lea    rax,[rdx+rax*1]
ffff80000080ef7c:	48 89 c7             	mov    rdi,rax
ffff80000080ef7f:	49 89 d7             	mov    r15,rdx
ffff80000080ef82:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080ef87:	48 b9 05 3a ff ff ff 	movabs rcx,0xffffffffffff3a05
ffff80000080ef8e:	ff ff ff 
ffff80000080ef91:	48 01 d1             	add    rcx,rdx
ffff80000080ef94:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:270
    return 0;
ffff80000080ef96:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:271
}
ffff80000080ef9b:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080ef9f:	c9                   	leave  
ffff80000080efa0:	c3                   	ret    

ffff80000080efa1 <disk_existent>:
disk_existent():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:273
int disk_existent(int disk)
{
ffff80000080efa1:	f3 0f 1e fa          	endbr64 
ffff80000080efa5:	55                   	push   rbp
ffff80000080efa6:	48 89 e5             	mov    rbp,rsp
ffff80000080efa9:	41 57                	push   r15
ffff80000080efab:	48 83 ec 18          	sub    rsp,0x18
ffff80000080efaf:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080efaf <disk_existent+0xe>
ffff80000080efb6:	49 bb 89 03 01 00 00 	movabs r11,0x10389
ffff80000080efbd:	00 00 00 
ffff80000080efc0:	4c 01 d8             	add    rax,r11
ffff80000080efc3:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:274
    switch (disk)
ffff80000080efc6:	83 7d ec 03          	cmp    DWORD PTR [rbp-0x14],0x3
ffff80000080efca:	0f 84 b8 00 00 00    	je     ffff80000080f088 <disk_existent+0xe7>
ffff80000080efd0:	83 7d ec 03          	cmp    DWORD PTR [rbp-0x14],0x3
ffff80000080efd4:	0f 8f dc 00 00 00    	jg     ffff80000080f0b6 <disk_existent+0x115>
ffff80000080efda:	83 7d ec 02          	cmp    DWORD PTR [rbp-0x14],0x2
ffff80000080efde:	74 7a                	je     ffff80000080f05a <disk_existent+0xb9>
ffff80000080efe0:	83 7d ec 02          	cmp    DWORD PTR [rbp-0x14],0x2
ffff80000080efe4:	0f 8f cc 00 00 00    	jg     ffff80000080f0b6 <disk_existent+0x115>
ffff80000080efea:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff80000080efee:	74 0b                	je     ffff80000080effb <disk_existent+0x5a>
ffff80000080eff0:	83 7d ec 01          	cmp    DWORD PTR [rbp-0x14],0x1
ffff80000080eff4:	74 36                	je     ffff80000080f02c <disk_existent+0x8b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:292
        
    case DISK_SLAVE_SLAVE:
        return sys_find_dev("hd3")!=-1;
        break;
    default:
        break;
ffff80000080eff6:	e9 bb 00 00 00       	jmp    ffff80000080f0b6 <disk_existent+0x115>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:277
        return sys_find_dev("hd0")!=-1;
ffff80000080effb:	48 ba 7a c9 ff ff ff 	movabs rdx,0xffffffffffffc97a
ffff80000080f002:	ff ff ff 
ffff80000080f005:	48 8d 14 10          	lea    rdx,[rax+rdx*1]
ffff80000080f009:	48 89 d7             	mov    rdi,rdx
ffff80000080f00c:	49 89 c7             	mov    r15,rax
ffff80000080f00f:	48 ba de 62 fe ff ff 	movabs rdx,0xfffffffffffe62de
ffff80000080f016:	ff ff ff 
ffff80000080f019:	48 01 c2             	add    rdx,rax
ffff80000080f01c:	ff d2                	call   rdx
ffff80000080f01e:	83 f8 ff             	cmp    eax,0xffffffff
ffff80000080f021:	0f 95 c0             	setne  al
ffff80000080f024:	0f b6 c0             	movzx  eax,al
ffff80000080f027:	e9 90 00 00 00       	jmp    ffff80000080f0bc <disk_existent+0x11b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:281
        return sys_find_dev("hd1")!=-1;
ffff80000080f02c:	48 ba 7e c9 ff ff ff 	movabs rdx,0xffffffffffffc97e
ffff80000080f033:	ff ff ff 
ffff80000080f036:	48 8d 14 10          	lea    rdx,[rax+rdx*1]
ffff80000080f03a:	48 89 d7             	mov    rdi,rdx
ffff80000080f03d:	49 89 c7             	mov    r15,rax
ffff80000080f040:	48 ba de 62 fe ff ff 	movabs rdx,0xfffffffffffe62de
ffff80000080f047:	ff ff ff 
ffff80000080f04a:	48 01 c2             	add    rdx,rax
ffff80000080f04d:	ff d2                	call   rdx
ffff80000080f04f:	83 f8 ff             	cmp    eax,0xffffffff
ffff80000080f052:	0f 95 c0             	setne  al
ffff80000080f055:	0f b6 c0             	movzx  eax,al
ffff80000080f058:	eb 62                	jmp    ffff80000080f0bc <disk_existent+0x11b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:285
        return sys_find_dev("hd2")!=-1;
ffff80000080f05a:	48 ba 82 c9 ff ff ff 	movabs rdx,0xffffffffffffc982
ffff80000080f061:	ff ff ff 
ffff80000080f064:	48 8d 14 10          	lea    rdx,[rax+rdx*1]
ffff80000080f068:	48 89 d7             	mov    rdi,rdx
ffff80000080f06b:	49 89 c7             	mov    r15,rax
ffff80000080f06e:	48 ba de 62 fe ff ff 	movabs rdx,0xfffffffffffe62de
ffff80000080f075:	ff ff ff 
ffff80000080f078:	48 01 c2             	add    rdx,rax
ffff80000080f07b:	ff d2                	call   rdx
ffff80000080f07d:	83 f8 ff             	cmp    eax,0xffffffff
ffff80000080f080:	0f 95 c0             	setne  al
ffff80000080f083:	0f b6 c0             	movzx  eax,al
ffff80000080f086:	eb 34                	jmp    ffff80000080f0bc <disk_existent+0x11b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:289
        return sys_find_dev("hd3")!=-1;
ffff80000080f088:	48 ba 86 c9 ff ff ff 	movabs rdx,0xffffffffffffc986
ffff80000080f08f:	ff ff ff 
ffff80000080f092:	48 8d 14 10          	lea    rdx,[rax+rdx*1]
ffff80000080f096:	48 89 d7             	mov    rdi,rdx
ffff80000080f099:	49 89 c7             	mov    r15,rax
ffff80000080f09c:	48 ba de 62 fe ff ff 	movabs rdx,0xfffffffffffe62de
ffff80000080f0a3:	ff ff ff 
ffff80000080f0a6:	48 01 c2             	add    rdx,rax
ffff80000080f0a9:	ff d2                	call   rdx
ffff80000080f0ab:	83 f8 ff             	cmp    eax,0xffffffff
ffff80000080f0ae:	0f 95 c0             	setne  al
ffff80000080f0b1:	0f b6 c0             	movzx  eax,al
ffff80000080f0b4:	eb 06                	jmp    ffff80000080f0bc <disk_existent+0x11b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:292
        break;
ffff80000080f0b6:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:294
    }
    return 0;
ffff80000080f0b7:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:295
}
ffff80000080f0bc:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080f0c0:	c9                   	leave  
ffff80000080f0c1:	c3                   	ret    

ffff80000080f0c2 <hd_iterate>:
hd_iterate():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:297
int hd_iterate()
{
ffff80000080f0c2:	f3 0f 1e fa          	endbr64 
ffff80000080f0c6:	55                   	push   rbp
ffff80000080f0c7:	48 89 e5             	mov    rbp,rsp
ffff80000080f0ca:	41 57                	push   r15
ffff80000080f0cc:	53                   	push   rbx
ffff80000080f0cd:	48 81 ec e0 00 00 00 	sub    rsp,0xe0
ffff80000080f0d4:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080f0d4 <hd_iterate+0x12>
ffff80000080f0db:	49 bb 64 02 01 00 00 	movabs r11,0x10264
ffff80000080f0e2:	00 00 00 
ffff80000080f0e5:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:301
    char *name;
    
    int r[4];
    r[0]=request(DISK_MAJOR_MAJOR,DISKREQ_CHECK,0,1,0);
ffff80000080f0e8:	41 b8 00 00 00 00    	mov    r8d,0x0
ffff80000080f0ee:	b9 01 00 00 00       	mov    ecx,0x1
ffff80000080f0f3:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080f0f8:	be 02 00 00 00       	mov    esi,0x2
ffff80000080f0fd:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080f102:	49 89 df             	mov    r15,rbx
ffff80000080f105:	48 b8 56 f1 fe ff ff 	movabs rax,0xfffffffffffef156
ffff80000080f10c:	ff ff ff 
ffff80000080f10f:	48 01 d8             	add    rax,rbx
ffff80000080f112:	ff d0                	call   rax
ffff80000080f114:	89 45 c0             	mov    DWORD PTR [rbp-0x40],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:302
    r[1]=request(DISK_MAJOR_SLAVE,DISKREQ_CHECK,0,1,0);
ffff80000080f117:	41 b8 00 00 00 00    	mov    r8d,0x0
ffff80000080f11d:	b9 01 00 00 00       	mov    ecx,0x1
ffff80000080f122:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080f127:	be 02 00 00 00       	mov    esi,0x2
ffff80000080f12c:	bf 01 00 00 00       	mov    edi,0x1
ffff80000080f131:	49 89 df             	mov    r15,rbx
ffff80000080f134:	48 b8 56 f1 fe ff ff 	movabs rax,0xfffffffffffef156
ffff80000080f13b:	ff ff ff 
ffff80000080f13e:	48 01 d8             	add    rax,rbx
ffff80000080f141:	ff d0                	call   rax
ffff80000080f143:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:303
    r[2]=request(DISK_SLAVE_MAJOR,DISKREQ_CHECK,0,1,0);
ffff80000080f146:	41 b8 00 00 00 00    	mov    r8d,0x0
ffff80000080f14c:	b9 01 00 00 00       	mov    ecx,0x1
ffff80000080f151:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080f156:	be 02 00 00 00       	mov    esi,0x2
ffff80000080f15b:	bf 02 00 00 00       	mov    edi,0x2
ffff80000080f160:	49 89 df             	mov    r15,rbx
ffff80000080f163:	48 b8 56 f1 fe ff ff 	movabs rax,0xfffffffffffef156
ffff80000080f16a:	ff ff ff 
ffff80000080f16d:	48 01 d8             	add    rax,rbx
ffff80000080f170:	ff d0                	call   rax
ffff80000080f172:	89 45 c8             	mov    DWORD PTR [rbp-0x38],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:304
    r[3]=request(DISK_SLAVE_SLAVE,DISKREQ_CHECK,0,1,0);
ffff80000080f175:	41 b8 00 00 00 00    	mov    r8d,0x0
ffff80000080f17b:	b9 01 00 00 00       	mov    ecx,0x1
ffff80000080f180:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080f185:	be 02 00 00 00       	mov    esi,0x2
ffff80000080f18a:	bf 03 00 00 00       	mov    edi,0x3
ffff80000080f18f:	49 89 df             	mov    r15,rbx
ffff80000080f192:	48 b8 56 f1 fe ff ff 	movabs rax,0xfffffffffffef156
ffff80000080f199:	ff ff ff 
ffff80000080f19c:	48 01 d8             	add    rax,rbx
ffff80000080f19f:	ff d0                	call   rax
ffff80000080f1a1:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:305
    for(int i=0;i<1;i++)
ffff80000080f1a4:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff80000080f1ab:	e9 0f 02 00 00       	jmp    ffff80000080f3bf <hd_iterate+0x2fd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:308
    {
        int disk;
        switch (i)
ffff80000080f1b0:	83 7d e4 03          	cmp    DWORD PTR [rbp-0x1c],0x3
ffff80000080f1b4:	74 3b                	je     ffff80000080f1f1 <hd_iterate+0x12f>
ffff80000080f1b6:	83 7d e4 03          	cmp    DWORD PTR [rbp-0x1c],0x3
ffff80000080f1ba:	7f 3e                	jg     ffff80000080f1fa <hd_iterate+0x138>
ffff80000080f1bc:	83 7d e4 02          	cmp    DWORD PTR [rbp-0x1c],0x2
ffff80000080f1c0:	74 26                	je     ffff80000080f1e8 <hd_iterate+0x126>
ffff80000080f1c2:	83 7d e4 02          	cmp    DWORD PTR [rbp-0x1c],0x2
ffff80000080f1c6:	7f 32                	jg     ffff80000080f1fa <hd_iterate+0x138>
ffff80000080f1c8:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
ffff80000080f1cc:	74 08                	je     ffff80000080f1d6 <hd_iterate+0x114>
ffff80000080f1ce:	83 7d e4 01          	cmp    DWORD PTR [rbp-0x1c],0x1
ffff80000080f1d2:	74 0b                	je     ffff80000080f1df <hd_iterate+0x11d>
ffff80000080f1d4:	eb 24                	jmp    ffff80000080f1fa <hd_iterate+0x138>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:310
        {
        case 0:disk=DISK_MAJOR_MAJOR;break;
ffff80000080f1d6:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff80000080f1dd:	eb 25                	jmp    ffff80000080f204 <hd_iterate+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:311
        case 1:disk=DISK_MAJOR_SLAVE;break;
ffff80000080f1df:	c7 45 e0 01 00 00 00 	mov    DWORD PTR [rbp-0x20],0x1
ffff80000080f1e6:	eb 1c                	jmp    ffff80000080f204 <hd_iterate+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:312
        case 2:disk=DISK_SLAVE_MAJOR;break;
ffff80000080f1e8:	c7 45 e0 02 00 00 00 	mov    DWORD PTR [rbp-0x20],0x2
ffff80000080f1ef:	eb 13                	jmp    ffff80000080f204 <hd_iterate+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:313
        case 3:disk=DISK_SLAVE_SLAVE;break;
ffff80000080f1f1:	c7 45 e0 03 00 00 00 	mov    DWORD PTR [rbp-0x20],0x3
ffff80000080f1f8:	eb 0a                	jmp    ffff80000080f204 <hd_iterate+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:315
        default:
            return -1;
ffff80000080f1fa:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080f1ff:	e9 c5 01 00 00       	jmp    ffff80000080f3c9 <hd_iterate+0x307>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:318
            break;
        }
        if(chk_result(r[i]))//&&!disk_existent(disk)
ffff80000080f204:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080f207:	48 98                	cdqe   
ffff80000080f209:	8b 44 85 c0          	mov    eax,DWORD PTR [rbp+rax*4-0x40]
ffff80000080f20d:	89 c7                	mov    edi,eax
ffff80000080f20f:	49 89 df             	mov    r15,rbx
ffff80000080f212:	48 b8 ab fb fe ff ff 	movabs rax,0xfffffffffffefbab
ffff80000080f219:	ff ff ff 
ffff80000080f21c:	48 01 d8             	add    rax,rbx
ffff80000080f21f:	ff d0                	call   rax
ffff80000080f221:	85 c0                	test   eax,eax
ffff80000080f223:	0f 84 b1 00 00 00    	je     ffff80000080f2da <hd_iterate+0x218>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:320
        {
            printf("disk %d checked.\n",i);
ffff80000080f229:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080f22c:	89 c6                	mov    esi,eax
ffff80000080f22e:	48 b8 8a c9 ff ff ff 	movabs rax,0xffffffffffffc98a
ffff80000080f235:	ff ff ff 
ffff80000080f238:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080f23c:	48 89 c7             	mov    rdi,rax
ffff80000080f23f:	49 89 df             	mov    r15,rbx
ffff80000080f242:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080f247:	48 ba 92 23 fe ff ff 	movabs rdx,0xfffffffffffe2392
ffff80000080f24e:	ff ff ff 
ffff80000080f251:	48 01 da             	add    rdx,rbx
ffff80000080f254:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:322
            //新硬盘
            device hd={
ffff80000080f256:	48 8d 95 10 ff ff ff 	lea    rdx,[rbp-0xf0]
ffff80000080f25d:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080f262:	b9 15 00 00 00       	mov    ecx,0x15
ffff80000080f267:	48 89 d7             	mov    rdi,rdx
ffff80000080f26a:	f3 48 ab             	rep stos QWORD PTR es:[rdi],rax
ffff80000080f26d:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff80000080f270:	89 85 14 ff ff ff    	mov    DWORD PTR [rbp-0xec],eax
ffff80000080f276:	c7 85 18 ff ff ff 01 	mov    DWORD PTR [rbp-0xe8],0x1
ffff80000080f27d:	00 00 00 
ffff80000080f280:	c7 85 1c ff ff ff 01 	mov    DWORD PTR [rbp-0xe4],0x1
ffff80000080f287:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:326
                .type=DEV_TYPE_BLKDEV,
                .stype=DEV_STYPE_HD,
                .slave_dev=disk,
                .start_port=i<2?PORT_DISK_MAJOR:PORT_DISK_SLAVE
ffff80000080f28a:	83 7d e4 01          	cmp    DWORD PTR [rbp-0x1c],0x1
ffff80000080f28e:	7f 07                	jg     ffff80000080f297 <hd_iterate+0x1d5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:326 (discriminator 1)
ffff80000080f290:	b8 f0 01 00 00       	mov    eax,0x1f0
ffff80000080f295:	eb 05                	jmp    ffff80000080f29c <hd_iterate+0x1da>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:326 (discriminator 2)
ffff80000080f297:	b8 70 01 00 00       	mov    eax,0x170
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:322
            device hd={
ffff80000080f29c:	89 85 48 ff ff ff    	mov    DWORD PTR [rbp-0xb8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:328
            };
            disks[i]=reg_device(&hd);
ffff80000080f2a2:	48 8d 85 10 ff ff ff 	lea    rax,[rbp-0xf0]
ffff80000080f2a9:	48 89 c7             	mov    rdi,rax
ffff80000080f2ac:	49 89 df             	mov    r15,rbx
ffff80000080f2af:	48 b8 e6 5d fe ff ff 	movabs rax,0xfffffffffffe5de6
ffff80000080f2b6:	ff ff ff 
ffff80000080f2b9:	48 01 d8             	add    rax,rbx
ffff80000080f2bc:	ff d0                	call   rax
ffff80000080f2be:	48 ba 30 fe ff ff ff 	movabs rdx,0xfffffffffffffe30
ffff80000080f2c5:	ff ff ff 
ffff80000080f2c8:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080f2cc:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
ffff80000080f2cf:	48 63 c9             	movsxd rcx,ecx
ffff80000080f2d2:	89 04 8a             	mov    DWORD PTR [rdx+rcx*4],eax
ffff80000080f2d5:	e9 e1 00 00 00       	jmp    ffff80000080f3bb <hd_iterate+0x2f9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:329
        }else if(!chk_result(r[i]))//&&disk_existent(disk)
ffff80000080f2da:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080f2dd:	48 98                	cdqe   
ffff80000080f2df:	8b 44 85 c0          	mov    eax,DWORD PTR [rbp+rax*4-0x40]
ffff80000080f2e3:	89 c7                	mov    edi,eax
ffff80000080f2e5:	49 89 df             	mov    r15,rbx
ffff80000080f2e8:	48 b8 ab fb fe ff ff 	movabs rax,0xfffffffffffefbab
ffff80000080f2ef:	ff ff ff 
ffff80000080f2f2:	48 01 d8             	add    rax,rbx
ffff80000080f2f5:	ff d0                	call   rax
ffff80000080f2f7:	85 c0                	test   eax,eax
ffff80000080f2f9:	0f 85 bc 00 00 00    	jne    ffff80000080f3bb <hd_iterate+0x2f9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:331
        {
            switch (i)
ffff80000080f2ff:	83 7d e4 03          	cmp    DWORD PTR [rbp-0x1c],0x3
ffff80000080f303:	74 5c                	je     ffff80000080f361 <hd_iterate+0x29f>
ffff80000080f305:	83 7d e4 03          	cmp    DWORD PTR [rbp-0x1c],0x3
ffff80000080f309:	7f 69                	jg     ffff80000080f374 <hd_iterate+0x2b2>
ffff80000080f30b:	83 7d e4 02          	cmp    DWORD PTR [rbp-0x1c],0x2
ffff80000080f30f:	74 3c                	je     ffff80000080f34d <hd_iterate+0x28b>
ffff80000080f311:	83 7d e4 02          	cmp    DWORD PTR [rbp-0x1c],0x2
ffff80000080f315:	7f 5d                	jg     ffff80000080f374 <hd_iterate+0x2b2>
ffff80000080f317:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
ffff80000080f31b:	74 08                	je     ffff80000080f325 <hd_iterate+0x263>
ffff80000080f31d:	83 7d e4 01          	cmp    DWORD PTR [rbp-0x1c],0x1
ffff80000080f321:	74 16                	je     ffff80000080f339 <hd_iterate+0x277>
ffff80000080f323:	eb 4f                	jmp    ffff80000080f374 <hd_iterate+0x2b2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:333
            {
            case 0:name="hd0";break;
ffff80000080f325:	48 b8 7a c9 ff ff ff 	movabs rax,0xffffffffffffc97a
ffff80000080f32c:	ff ff ff 
ffff80000080f32f:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080f333:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff80000080f337:	eb 3b                	jmp    ffff80000080f374 <hd_iterate+0x2b2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:334
            case 1:name="hd1";break;
ffff80000080f339:	48 b8 7e c9 ff ff ff 	movabs rax,0xffffffffffffc97e
ffff80000080f340:	ff ff ff 
ffff80000080f343:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080f347:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff80000080f34b:	eb 27                	jmp    ffff80000080f374 <hd_iterate+0x2b2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:335
            case 2:name="hd2";break;
ffff80000080f34d:	48 b8 82 c9 ff ff ff 	movabs rax,0xffffffffffffc982
ffff80000080f354:	ff ff ff 
ffff80000080f357:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080f35b:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff80000080f35f:	eb 13                	jmp    ffff80000080f374 <hd_iterate+0x2b2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:336
            case 3:name="hd3";break;
ffff80000080f361:	48 b8 86 c9 ff ff ff 	movabs rax,0xffffffffffffc986
ffff80000080f368:	ff ff ff 
ffff80000080f36b:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080f36f:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff80000080f373:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:339
            }
            //有硬盘被卸载了
            int devi=sys_find_dev(name);
ffff80000080f374:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080f378:	48 89 c7             	mov    rdi,rax
ffff80000080f37b:	49 89 df             	mov    r15,rbx
ffff80000080f37e:	48 b8 de 62 fe ff ff 	movabs rax,0xfffffffffffe62de
ffff80000080f385:	ff ff ff 
ffff80000080f388:	48 01 d8             	add    rax,rbx
ffff80000080f38b:	ff d0                	call   rax
ffff80000080f38d:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:340
            dispose_device(get_dev(devi));
ffff80000080f390:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080f393:	89 c7                	mov    edi,eax
ffff80000080f395:	49 89 df             	mov    r15,rbx
ffff80000080f398:	48 b8 43 6c fe ff ff 	movabs rax,0xfffffffffffe6c43
ffff80000080f39f:	ff ff ff 
ffff80000080f3a2:	48 01 d8             	add    rax,rbx
ffff80000080f3a5:	ff d0                	call   rax
ffff80000080f3a7:	89 c7                	mov    edi,eax
ffff80000080f3a9:	49 89 df             	mov    r15,rbx
ffff80000080f3ac:	48 b8 54 6b fe ff ff 	movabs rax,0xfffffffffffe6b54
ffff80000080f3b3:	ff ff ff 
ffff80000080f3b6:	48 01 d8             	add    rax,rbx
ffff80000080f3b9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:305 (discriminator 2)
    for(int i=0;i<1;i++)
ffff80000080f3bb:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:305 (discriminator 1)
ffff80000080f3bf:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
ffff80000080f3c3:	0f 8e e7 fd ff ff    	jle    ffff80000080f1b0 <hd_iterate+0xee>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:344
        }

    }
}
ffff80000080f3c9:	48 81 c4 e0 00 00 00 	add    rsp,0xe0
ffff80000080f3d0:	5b                   	pop    rbx
ffff80000080f3d1:	41 5f                	pop    r15
ffff80000080f3d3:	5d                   	pop    rbp
ffff80000080f3d4:	c3                   	ret    

ffff80000080f3d5 <async_check_disk>:
async_check_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:347

int async_check_disk(int disk)
{
ffff80000080f3d5:	f3 0f 1e fa          	endbr64 
ffff80000080f3d9:	55                   	push   rbp
ffff80000080f3da:	48 89 e5             	mov    rbp,rsp
ffff80000080f3dd:	41 57                	push   r15
ffff80000080f3df:	53                   	push   rbx
ffff80000080f3e0:	48 83 ec 20          	sub    rsp,0x20
ffff80000080f3e4:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080f3e4 <async_check_disk+0xf>
ffff80000080f3eb:	49 bb 54 ff 00 00 00 	movabs r11,0xff54
ffff80000080f3f2:	00 00 00 
ffff80000080f3f5:	4c 01 db             	add    rbx,r11
ffff80000080f3f8:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:348
    unsigned short disknr=PORT_DISK_MAJOR;
ffff80000080f3fb:	66 c7 45 ee f0 01    	mov    WORD PTR [rbp-0x12],0x1f0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:349
    unsigned short chkcmd=0xe0;
ffff80000080f401:	66 c7 45 ec e0 00    	mov    WORD PTR [rbp-0x14],0xe0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:350
    if(disk==DISK_SLAVE_MAJOR||disk==DISK_SLAVE_SLAVE)
ffff80000080f407:	83 7d dc 02          	cmp    DWORD PTR [rbp-0x24],0x2
ffff80000080f40b:	74 06                	je     ffff80000080f413 <async_check_disk+0x3e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:350 (discriminator 1)
ffff80000080f40d:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff80000080f411:	75 06                	jne    ffff80000080f419 <async_check_disk+0x44>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:351
        disknr=PORT_DISK_SLAVE;
ffff80000080f413:	66 c7 45 ee 70 01    	mov    WORD PTR [rbp-0x12],0x170
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:352
    if(disk==DISK_MAJOR_SLAVE||disk==DISK_SLAVE_SLAVE)
ffff80000080f419:	83 7d dc 01          	cmp    DWORD PTR [rbp-0x24],0x1
ffff80000080f41d:	74 06                	je     ffff80000080f425 <async_check_disk+0x50>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:352 (discriminator 1)
ffff80000080f41f:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff80000080f423:	75 06                	jne    ffff80000080f42b <async_check_disk+0x56>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:353
        chkcmd=0xf0;
ffff80000080f425:	66 c7 45 ec f0 00    	mov    WORD PTR [rbp-0x14],0xf0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:354
    outb(disknr+2,1);
ffff80000080f42b:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080f42f:	83 c0 02             	add    eax,0x2
ffff80000080f432:	0f b7 c0             	movzx  eax,ax
ffff80000080f435:	be 01 00 00 00       	mov    esi,0x1
ffff80000080f43a:	89 c7                	mov    edi,eax
ffff80000080f43c:	49 89 df             	mov    r15,rbx
ffff80000080f43f:	48 b8 48 ae fe ff ff 	movabs rax,0xfffffffffffeae48
ffff80000080f446:	ff ff ff 
ffff80000080f449:	48 01 d8             	add    rax,rbx
ffff80000080f44c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:355
    outb(disknr+3,0);
ffff80000080f44e:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080f452:	83 c0 03             	add    eax,0x3
ffff80000080f455:	0f b7 c0             	movzx  eax,ax
ffff80000080f458:	be 00 00 00 00       	mov    esi,0x0
ffff80000080f45d:	89 c7                	mov    edi,eax
ffff80000080f45f:	49 89 df             	mov    r15,rbx
ffff80000080f462:	48 b8 48 ae fe ff ff 	movabs rax,0xfffffffffffeae48
ffff80000080f469:	ff ff ff 
ffff80000080f46c:	48 01 d8             	add    rax,rbx
ffff80000080f46f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:356
    outb(disknr+4,0);
ffff80000080f471:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080f475:	83 c0 04             	add    eax,0x4
ffff80000080f478:	0f b7 c0             	movzx  eax,ax
ffff80000080f47b:	be 00 00 00 00       	mov    esi,0x0
ffff80000080f480:	89 c7                	mov    edi,eax
ffff80000080f482:	49 89 df             	mov    r15,rbx
ffff80000080f485:	48 b8 48 ae fe ff ff 	movabs rax,0xfffffffffffeae48
ffff80000080f48c:	ff ff ff 
ffff80000080f48f:	48 01 d8             	add    rax,rbx
ffff80000080f492:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:357
    outb(disknr+5,0);
ffff80000080f494:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080f498:	83 c0 05             	add    eax,0x5
ffff80000080f49b:	0f b7 c0             	movzx  eax,ax
ffff80000080f49e:	be 00 00 00 00       	mov    esi,0x0
ffff80000080f4a3:	89 c7                	mov    edi,eax
ffff80000080f4a5:	49 89 df             	mov    r15,rbx
ffff80000080f4a8:	48 b8 48 ae fe ff ff 	movabs rax,0xfffffffffffeae48
ffff80000080f4af:	ff ff ff 
ffff80000080f4b2:	48 01 d8             	add    rax,rbx
ffff80000080f4b5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:358
    outb(disknr+6,chkcmd);//主硬盘
ffff80000080f4b7:	0f b7 45 ec          	movzx  eax,WORD PTR [rbp-0x14]
ffff80000080f4bb:	0f b6 d0             	movzx  edx,al
ffff80000080f4be:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080f4c2:	83 c0 06             	add    eax,0x6
ffff80000080f4c5:	0f b7 c0             	movzx  eax,ax
ffff80000080f4c8:	89 d6                	mov    esi,edx
ffff80000080f4ca:	89 c7                	mov    edi,eax
ffff80000080f4cc:	49 89 df             	mov    r15,rbx
ffff80000080f4cf:	48 b8 48 ae fe ff ff 	movabs rax,0xfffffffffffeae48
ffff80000080f4d6:	ff ff ff 
ffff80000080f4d9:	48 01 d8             	add    rax,rbx
ffff80000080f4dc:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:359
    outb(disknr+7,DISK_CMD_CHECK);
ffff80000080f4de:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000080f4e2:	83 c0 07             	add    eax,0x7
ffff80000080f4e5:	0f b7 c0             	movzx  eax,ax
ffff80000080f4e8:	be 90 00 00 00       	mov    esi,0x90
ffff80000080f4ed:	89 c7                	mov    edi,eax
ffff80000080f4ef:	49 89 df             	mov    r15,rbx
ffff80000080f4f2:	48 b8 48 ae fe ff ff 	movabs rax,0xfffffffffffeae48
ffff80000080f4f9:	ff ff ff 
ffff80000080f4fc:	48 01 d8             	add    rax,rbx
ffff80000080f4ff:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:370
    //     // {
    //     //     printf("DISK ERR\n");
    //     //     return -1;
    //     // }
    // }
    return 0;
ffff80000080f501:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:371
}
ffff80000080f506:	48 83 c4 20          	add    rsp,0x20
ffff80000080f50a:	5b                   	pop    rbx
ffff80000080f50b:	41 5f                	pop    r15
ffff80000080f50d:	5d                   	pop    rbp
ffff80000080f50e:	c3                   	ret    

ffff80000080f50f <hd_do_req>:
hd_do_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:375

//接口函数：负责接收VFS的请求然后执行
int hd_do_req(driver_args *args)
{
ffff80000080f50f:	f3 0f 1e fa          	endbr64 
ffff80000080f513:	55                   	push   rbp
ffff80000080f514:	48 89 e5             	mov    rbp,rsp
ffff80000080f517:	41 57                	push   r15
ffff80000080f519:	53                   	push   rbx
ffff80000080f51a:	48 83 ec 20          	sub    rsp,0x20
ffff80000080f51e:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080f51e <hd_do_req+0xf>
ffff80000080f525:	49 bb 1a fe 00 00 00 	movabs r11,0xfe1a
ffff80000080f52c:	00 00 00 
ffff80000080f52f:	4c 01 db             	add    rbx,r11
ffff80000080f532:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:376
    int diski=0;
ffff80000080f536:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:377
    for(;disks[diski]!=args->dev;diski++);
ffff80000080f53d:	eb 04                	jmp    ffff80000080f543 <hd_do_req+0x34>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:377 (discriminator 2)
ffff80000080f53f:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:377 (discriminator 1)
ffff80000080f543:	48 b8 30 fe ff ff ff 	movabs rax,0xfffffffffffffe30
ffff80000080f54a:	ff ff ff 
ffff80000080f54d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080f551:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080f554:	48 63 d2             	movsxd rdx,edx
ffff80000080f557:	8b 14 90             	mov    edx,DWORD PTR [rax+rdx*4]
ffff80000080f55a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080f55e:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [rax+0x8c]
ffff80000080f564:	39 c2                	cmp    edx,eax
ffff80000080f566:	75 d7                	jne    ffff80000080f53f <hd_do_req+0x30>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:378
    switch (args->cmd)
ffff80000080f568:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080f56c:	8b 80 a8 00 00 00    	mov    eax,DWORD PTR [rax+0xa8]
ffff80000080f572:	83 f8 04             	cmp    eax,0x4
ffff80000080f575:	0f 84 8c 00 00 00    	je     ffff80000080f607 <hd_do_req+0xf8>
ffff80000080f57b:	83 f8 04             	cmp    eax,0x4
ffff80000080f57e:	0f 8f bd 00 00 00    	jg     ffff80000080f641 <hd_do_req+0x132>
ffff80000080f584:	83 f8 02             	cmp    eax,0x2
ffff80000080f587:	74 0a                	je     ffff80000080f593 <hd_do_req+0x84>
ffff80000080f589:	83 f8 03             	cmp    eax,0x3
ffff80000080f58c:	74 3f                	je     ffff80000080f5cd <hd_do_req+0xbe>
ffff80000080f58e:	e9 ae 00 00 00       	jmp    ffff80000080f641 <hd_do_req+0x132>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:381
    {
    case DRVF_READ:
        request(diski,DISKREQ_READ,args->lba,args->sec_c,args->dist_addr);
ffff80000080f593:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080f597:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff80000080f59a:	48 98                	cdqe   
ffff80000080f59c:	48 89 c6             	mov    rsi,rax
ffff80000080f59f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080f5a3:	8b 48 18             	mov    ecx,DWORD PTR [rax+0x18]
ffff80000080f5a6:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080f5aa:	8b 10                	mov    edx,DWORD PTR [rax]
ffff80000080f5ac:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080f5af:	49 89 f0             	mov    r8,rsi
ffff80000080f5b2:	be 00 00 00 00       	mov    esi,0x0
ffff80000080f5b7:	89 c7                	mov    edi,eax
ffff80000080f5b9:	49 89 df             	mov    r15,rbx
ffff80000080f5bc:	48 b8 56 f1 fe ff ff 	movabs rax,0xfffffffffffef156
ffff80000080f5c3:	ff ff ff 
ffff80000080f5c6:	48 01 d8             	add    rax,rbx
ffff80000080f5c9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:382
        break;
ffff80000080f5cb:	eb 7b                	jmp    ffff80000080f648 <hd_do_req+0x139>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:384
    case DRVF_WRITE:
        request(diski,DISKREQ_WRITE,args->lba,args->sec_c,args->src_addr);
ffff80000080f5cd:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080f5d1:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080f5d4:	48 98                	cdqe   
ffff80000080f5d6:	48 89 c6             	mov    rsi,rax
ffff80000080f5d9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080f5dd:	8b 48 18             	mov    ecx,DWORD PTR [rax+0x18]
ffff80000080f5e0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080f5e4:	8b 10                	mov    edx,DWORD PTR [rax]
ffff80000080f5e6:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080f5e9:	49 89 f0             	mov    r8,rsi
ffff80000080f5ec:	be 01 00 00 00       	mov    esi,0x1
ffff80000080f5f1:	89 c7                	mov    edi,eax
ffff80000080f5f3:	49 89 df             	mov    r15,rbx
ffff80000080f5f6:	48 b8 56 f1 fe ff ff 	movabs rax,0xfffffffffffef156
ffff80000080f5fd:	ff ff ff 
ffff80000080f600:	48 01 d8             	add    rax,rbx
ffff80000080f603:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:385
        break;
ffff80000080f605:	eb 41                	jmp    ffff80000080f648 <hd_do_req+0x139>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:387
    case DRVF_CHK:
        request(diski,DISKREQ_CHECK,args->lba,args->sec_c,args->dist_addr);
ffff80000080f607:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080f60b:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff80000080f60e:	48 98                	cdqe   
ffff80000080f610:	48 89 c6             	mov    rsi,rax
ffff80000080f613:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080f617:	8b 48 18             	mov    ecx,DWORD PTR [rax+0x18]
ffff80000080f61a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080f61e:	8b 10                	mov    edx,DWORD PTR [rax]
ffff80000080f620:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080f623:	49 89 f0             	mov    r8,rsi
ffff80000080f626:	be 02 00 00 00       	mov    esi,0x2
ffff80000080f62b:	89 c7                	mov    edi,eax
ffff80000080f62d:	49 89 df             	mov    r15,rbx
ffff80000080f630:	48 b8 56 f1 fe ff ff 	movabs rax,0xfffffffffffef156
ffff80000080f637:	ff ff ff 
ffff80000080f63a:	48 01 d8             	add    rax,rbx
ffff80000080f63d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:388
        break;
ffff80000080f63f:	eb 07                	jmp    ffff80000080f648 <hd_do_req+0x139>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:389
    default:return -1;
ffff80000080f641:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080f646:	eb 28                	jmp    ffff80000080f670 <hd_do_req+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:391
    }
    args->stat=REQ_STAT_WORKING;
ffff80000080f648:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080f64c:	c7 80 ac 00 00 00 02 	mov    DWORD PTR [rax+0xac],0x2
ffff80000080f653:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:392
    running_devman_req=args;
ffff80000080f656:	48 b8 c0 fd ff ff ff 	movabs rax,0xfffffffffffffdc0
ffff80000080f65d:	ff ff ff 
ffff80000080f660:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080f664:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080f668:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:393
    return 0;
ffff80000080f66b:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:394
ffff80000080f670:	48 83 c4 20          	add    rsp,0x20
ffff80000080f674:	5b                   	pop    rbx
ffff80000080f675:	41 5f                	pop    r15
ffff80000080f677:	5d                   	pop    rbp
ffff80000080f678:	c3                   	ret    
ffff80000080f679:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

ffff80000080f680 <disk_int_handler>:
disk_int_handler():
ffff80000080f680:	e8 29 ab ff ff       	call   ffff80000080a1ae <eoi>
ffff80000080f685:	e8 a7 ea ff ff       	call   ffff80000080e131 <disk_int_handler_c>
ffff80000080f68a:	48 cf                	iretq  

ffff80000080f68c <read_disk_asm>:
read_disk_asm():
ffff80000080f68c:	55                   	push   rbp
ffff80000080f68d:	89 e5                	mov    ebp,esp
ffff80000080f68f:	66 ba f7 01          	mov    dx,0x1f7
ffff80000080f693:	31 c9                	xor    ecx,ecx
ffff80000080f695:	67 8b 44 24 08       	mov    eax,DWORD PTR [esp+0x8]
ffff80000080f69a:	67 8b 4c 24 0c       	mov    ecx,DWORD PTR [esp+0xc]
ffff80000080f69f:	67 8b 5c 24 10       	mov    ebx,DWORD PTR [esp+0x10]
ffff80000080f6a4:	89 c6                	mov    esi,eax
ffff80000080f6a6:	66 ba f2 01          	mov    dx,0x1f2
ffff80000080f6aa:	88 c8                	mov    al,cl
ffff80000080f6ac:	ee                   	out    dx,al
ffff80000080f6ad:	66 ba f3 01          	mov    dx,0x1f3
ffff80000080f6b1:	89 f0                	mov    eax,esi
ffff80000080f6b3:	ee                   	out    dx,al
ffff80000080f6b4:	66 ff c2             	inc    dx
ffff80000080f6b7:	c1 e8 08             	shr    eax,0x8
ffff80000080f6ba:	ee                   	out    dx,al
ffff80000080f6bb:	66 ff c2             	inc    dx
ffff80000080f6be:	c1 e8 08             	shr    eax,0x8
ffff80000080f6c1:	ee                   	out    dx,al
ffff80000080f6c2:	66 ff c2             	inc    dx
ffff80000080f6c5:	66 c1 e8 08          	shr    ax,0x8
ffff80000080f6c9:	24 0f                	and    al,0xf
ffff80000080f6cb:	0c e0                	or     al,0xe0
ffff80000080f6cd:	ee                   	out    dx,al
ffff80000080f6ce:	66 ff c2             	inc    dx
ffff80000080f6d1:	b0 20                	mov    al,0x20
ffff80000080f6d3:	ee                   	out    dx,al

ffff80000080f6d4 <read_disk_asm.wait>:
read_disk_asm.wait():
ffff80000080f6d4:	90                   	nop
ffff80000080f6d5:	ec                   	in     al,dx
ffff80000080f6d6:	24 88                	and    al,0x88
ffff80000080f6d8:	3c 08                	cmp    al,0x8
ffff80000080f6da:	75 f8                	jne    ffff80000080f6d4 <read_disk_asm.wait>
ffff80000080f6dc:	66 89 d7             	mov    di,dx
ffff80000080f6df:	89 c8                	mov    eax,ecx
ffff80000080f6e1:	66 b9 00 01          	mov    cx,0x100
ffff80000080f6e5:	66 f7 e1             	mul    cx
ffff80000080f6e8:	89 c1                	mov    ecx,eax
ffff80000080f6ea:	66 ba f0 01          	mov    dx,0x1f0

ffff80000080f6ee <read_disk_asm.read>:
read_disk_asm.read():
ffff80000080f6ee:	66 ed                	in     ax,dx
ffff80000080f6f0:	66 67 89 03          	mov    WORD PTR [ebx],ax
ffff80000080f6f4:	83 c3 02             	add    ebx,0x2
ffff80000080f6f7:	e2 f5                	loop   ffff80000080f6ee <read_disk_asm.read>
ffff80000080f6f9:	c9                   	leave  
ffff80000080f6fa:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080f6ff:	c3                   	ret    

ffff80000080f700 <read_disk_asm.err_disk_reading>:
read_disk_asm.err_disk_reading():
ffff80000080f700:	66 ba f1 01          	mov    dx,0x1f1
ffff80000080f704:	31 c0                	xor    eax,eax
ffff80000080f706:	66 ed                	in     ax,dx
ffff80000080f708:	89 ec                	mov    esp,ebp
ffff80000080f70a:	5d                   	pop    rbp
ffff80000080f70b:	c3                   	ret    

ffff80000080f70c <write_disk_asm>:
write_disk_asm():
ffff80000080f70c:	55                   	push   rbp
ffff80000080f70d:	89 e5                	mov    ebp,esp
ffff80000080f70f:	67 8b 44 24 08       	mov    eax,DWORD PTR [esp+0x8]
ffff80000080f714:	67 8b 4c 24 0c       	mov    ecx,DWORD PTR [esp+0xc]
ffff80000080f719:	67 8b 5c 24 10       	mov    ebx,DWORD PTR [esp+0x10]
ffff80000080f71e:	50                   	push   rax
ffff80000080f71f:	66 ba f2 01          	mov    dx,0x1f2
ffff80000080f723:	88 c8                	mov    al,cl
ffff80000080f725:	ee                   	out    dx,al
ffff80000080f726:	58                   	pop    rax
ffff80000080f727:	66 ba f3 01          	mov    dx,0x1f3
ffff80000080f72b:	ee                   	out    dx,al
ffff80000080f72c:	c1 e8 08             	shr    eax,0x8
ffff80000080f72f:	66 ba f4 01          	mov    dx,0x1f4
ffff80000080f733:	ee                   	out    dx,al
ffff80000080f734:	c1 e8 08             	shr    eax,0x8
ffff80000080f737:	66 ba f5 01          	mov    dx,0x1f5
ffff80000080f73b:	ee                   	out    dx,al
ffff80000080f73c:	c1 e8 08             	shr    eax,0x8
ffff80000080f73f:	24 0f                	and    al,0xf
ffff80000080f741:	0c e0                	or     al,0xe0
ffff80000080f743:	66 ba f6 01          	mov    dx,0x1f6
ffff80000080f747:	ee                   	out    dx,al
ffff80000080f748:	66 ba f7 01          	mov    dx,0x1f7
ffff80000080f74c:	b0 30                	mov    al,0x30
ffff80000080f74e:	ee                   	out    dx,al

ffff80000080f74f <write_disk_asm.not_ready2>:
write_disk_asm.not_ready2():
ffff80000080f74f:	90                   	nop
ffff80000080f750:	ec                   	in     al,dx
ffff80000080f751:	24 88                	and    al,0x88
ffff80000080f753:	3c 08                	cmp    al,0x8
ffff80000080f755:	75 f8                	jne    ffff80000080f74f <write_disk_asm.not_ready2>
ffff80000080f757:	89 c8                	mov    eax,ecx
ffff80000080f759:	66 b9 00 01          	mov    cx,0x100
ffff80000080f75d:	66 f7 e1             	mul    cx
ffff80000080f760:	89 c1                	mov    ecx,eax
ffff80000080f762:	66 ba f0 01          	mov    dx,0x1f0

ffff80000080f766 <write_disk_asm.go_on_write>:
write_disk_asm.go_on_write():
ffff80000080f766:	66 67 8b 03          	mov    ax,WORD PTR [ebx]
ffff80000080f76a:	66 ef                	out    dx,ax
ffff80000080f76c:	83 c3 02             	add    ebx,0x2
ffff80000080f76f:	e2 f5                	loop   ffff80000080f766 <write_disk_asm.go_on_write>
ffff80000080f771:	89 ec                	mov    esp,ebp
ffff80000080f773:	5d                   	pop    rbp
ffff80000080f774:	c3                   	ret    

ffff80000080f775 <DISK1_FAT32_read_FAT_Entry>:
DISK1_FAT32_read_FAT_Entry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:12
#include "memory.h"
#include "proc.h"
#include "devman.h"

unsigned int DISK1_FAT32_read_FAT_Entry(struct FAT32_sb_info * fsbi,unsigned int fat_entry)
{
ffff80000080f775:	f3 0f 1e fa          	endbr64 
ffff80000080f779:	55                   	push   rbp
ffff80000080f77a:	48 89 e5             	mov    rbp,rsp
ffff80000080f77d:	41 57                	push   r15
ffff80000080f77f:	53                   	push   rbx
ffff80000080f780:	48 81 ec 20 02 00 00 	sub    rsp,0x220
ffff80000080f787:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080f787 <DISK1_FAT32_read_FAT_Entry+0x12>
ffff80000080f78e:	49 bb b1 fb 00 00 00 	movabs r11,0xfbb1
ffff80000080f795:	00 00 00 
ffff80000080f798:	4c 01 db             	add    rbx,r11
ffff80000080f79b:	48 89 bd d8 fd ff ff 	mov    QWORD PTR [rbp-0x228],rdi
ffff80000080f7a2:	89 b5 d4 fd ff ff    	mov    DWORD PTR [rbp-0x22c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:14
	unsigned int buf[128];
	memset(buf,0,512);
ffff80000080f7a8:	48 8d 85 e0 fd ff ff 	lea    rax,[rbp-0x220]
ffff80000080f7af:	ba 00 02 00 00       	mov    edx,0x200
ffff80000080f7b4:	be 00 00 00 00       	mov    esi,0x0
ffff80000080f7b9:	48 89 c7             	mov    rdi,rax
ffff80000080f7bc:	49 89 df             	mov    r15,rbx
ffff80000080f7bf:	48 b8 d6 3e ff ff ff 	movabs rax,0xffffffffffff3ed6
ffff80000080f7c6:	ff ff ff 
ffff80000080f7c9:	48 01 d8             	add    rax,rbx
ffff80000080f7cc:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:15
	int r=request(DISK_MAJOR_MAJOR,DISKREQ_READ,fsbi->FAT1_firstsector + (fat_entry >> 7),1,(unsigned char *)buf);
ffff80000080f7ce:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffff80000080f7d5:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff80000080f7d9:	89 c2                	mov    edx,eax
ffff80000080f7db:	8b 85 d4 fd ff ff    	mov    eax,DWORD PTR [rbp-0x22c]
ffff80000080f7e1:	c1 e8 07             	shr    eax,0x7
ffff80000080f7e4:	01 d0                	add    eax,edx
ffff80000080f7e6:	89 c2                	mov    edx,eax
ffff80000080f7e8:	48 8d 85 e0 fd ff ff 	lea    rax,[rbp-0x220]
ffff80000080f7ef:	49 89 c0             	mov    r8,rax
ffff80000080f7f2:	b9 01 00 00 00       	mov    ecx,0x1
ffff80000080f7f7:	be 00 00 00 00       	mov    esi,0x0
ffff80000080f7fc:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080f801:	49 89 df             	mov    r15,rbx
ffff80000080f804:	48 b8 56 f1 fe ff ff 	movabs rax,0xfffffffffffef156
ffff80000080f80b:	ff ff ff 
ffff80000080f80e:	48 01 d8             	add    rax,rbx
ffff80000080f811:	ff d0                	call   rax
ffff80000080f813:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:16
    chk_result(r);
ffff80000080f816:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080f819:	89 c7                	mov    edi,eax
ffff80000080f81b:	49 89 df             	mov    r15,rbx
ffff80000080f81e:	48 b8 ab fb fe ff ff 	movabs rax,0xfffffffffffefbab
ffff80000080f825:	ff ff ff 
ffff80000080f828:	48 01 d8             	add    rax,rbx
ffff80000080f82b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:17
    printf("DISK1_FAT32_read_FAT_Entry fat_entry:%x,%#010x\n",fat_entry,buf[fat_entry & 0x7f]);
ffff80000080f82d:	8b 85 d4 fd ff ff    	mov    eax,DWORD PTR [rbp-0x22c]
ffff80000080f833:	83 e0 7f             	and    eax,0x7f
ffff80000080f836:	89 c0                	mov    eax,eax
ffff80000080f838:	8b 94 85 e0 fd ff ff 	mov    edx,DWORD PTR [rbp+rax*4-0x220]
ffff80000080f83f:	8b 85 d4 fd ff ff    	mov    eax,DWORD PTR [rbp-0x22c]
ffff80000080f845:	89 c6                	mov    esi,eax
ffff80000080f847:	48 b8 a0 c9 ff ff ff 	movabs rax,0xffffffffffffc9a0
ffff80000080f84e:	ff ff ff 
ffff80000080f851:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080f855:	48 89 c7             	mov    rdi,rax
ffff80000080f858:	49 89 df             	mov    r15,rbx
ffff80000080f85b:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080f860:	48 b9 92 23 fe ff ff 	movabs rcx,0xfffffffffffe2392
ffff80000080f867:	ff ff ff 
ffff80000080f86a:	48 01 d9             	add    rcx,rbx
ffff80000080f86d:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:18
	return buf[fat_entry & 0x7f] & 0x0fffffff;
ffff80000080f86f:	8b 85 d4 fd ff ff    	mov    eax,DWORD PTR [rbp-0x22c]
ffff80000080f875:	83 e0 7f             	and    eax,0x7f
ffff80000080f878:	89 c0                	mov    eax,eax
ffff80000080f87a:	8b 84 85 e0 fd ff ff 	mov    eax,DWORD PTR [rbp+rax*4-0x220]
ffff80000080f881:	25 ff ff ff 0f       	and    eax,0xfffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:19
}
ffff80000080f886:	48 81 c4 20 02 00 00 	add    rsp,0x220
ffff80000080f88d:	5b                   	pop    rbx
ffff80000080f88e:	41 5f                	pop    r15
ffff80000080f890:	5d                   	pop    rbp
ffff80000080f891:	c3                   	ret    

ffff80000080f892 <DISK1_FAT32_write_FAT_Entry>:
DISK1_FAT32_write_FAT_Entry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:23


unsigned long DISK1_FAT32_write_FAT_Entry(struct FAT32_sb_info * fsbi,unsigned int fat_entry,unsigned int value)
{
ffff80000080f892:	f3 0f 1e fa          	endbr64 
ffff80000080f896:	55                   	push   rbp
ffff80000080f897:	48 89 e5             	mov    rbp,rsp
ffff80000080f89a:	41 57                	push   r15
ffff80000080f89c:	53                   	push   rbx
ffff80000080f89d:	48 81 ec 20 02 00 00 	sub    rsp,0x220
ffff80000080f8a4:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080f8a4 <DISK1_FAT32_write_FAT_Entry+0x12>
ffff80000080f8ab:	49 bb 94 fa 00 00 00 	movabs r11,0xfa94
ffff80000080f8b2:	00 00 00 
ffff80000080f8b5:	4c 01 db             	add    rbx,r11
ffff80000080f8b8:	48 89 bd d8 fd ff ff 	mov    QWORD PTR [rbp-0x228],rdi
ffff80000080f8bf:	89 b5 d4 fd ff ff    	mov    DWORD PTR [rbp-0x22c],esi
ffff80000080f8c5:	89 95 d0 fd ff ff    	mov    DWORD PTR [rbp-0x230],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:27
	unsigned int buf[128];
	int i;

	memset(buf,0,512);
ffff80000080f8cb:	48 8d 85 e0 fd ff ff 	lea    rax,[rbp-0x220]
ffff80000080f8d2:	ba 00 02 00 00       	mov    edx,0x200
ffff80000080f8d7:	be 00 00 00 00       	mov    esi,0x0
ffff80000080f8dc:	48 89 c7             	mov    rdi,rax
ffff80000080f8df:	49 89 df             	mov    r15,rbx
ffff80000080f8e2:	48 b8 d6 3e ff ff ff 	movabs rax,0xffffffffffff3ed6
ffff80000080f8e9:	ff ff ff 
ffff80000080f8ec:	48 01 d8             	add    rax,rbx
ffff80000080f8ef:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:28
	int r=request(DISK_MAJOR_MAJOR,DISKREQ_READ,fsbi->FAT1_firstsector + (fat_entry >> 7),1,(unsigned char *)buf);
ffff80000080f8f1:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffff80000080f8f8:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff80000080f8fc:	89 c2                	mov    edx,eax
ffff80000080f8fe:	8b 85 d4 fd ff ff    	mov    eax,DWORD PTR [rbp-0x22c]
ffff80000080f904:	c1 e8 07             	shr    eax,0x7
ffff80000080f907:	01 d0                	add    eax,edx
ffff80000080f909:	89 c2                	mov    edx,eax
ffff80000080f90b:	48 8d 85 e0 fd ff ff 	lea    rax,[rbp-0x220]
ffff80000080f912:	49 89 c0             	mov    r8,rax
ffff80000080f915:	b9 01 00 00 00       	mov    ecx,0x1
ffff80000080f91a:	be 00 00 00 00       	mov    esi,0x0
ffff80000080f91f:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080f924:	49 89 df             	mov    r15,rbx
ffff80000080f927:	48 b8 56 f1 fe ff ff 	movabs rax,0xfffffffffffef156
ffff80000080f92e:	ff ff ff 
ffff80000080f931:	48 01 d8             	add    rax,rbx
ffff80000080f934:	ff d0                	call   rax
ffff80000080f936:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:29
    chk_result(r);
ffff80000080f939:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080f93c:	89 c7                	mov    edi,eax
ffff80000080f93e:	49 89 df             	mov    r15,rbx
ffff80000080f941:	48 b8 ab fb fe ff ff 	movabs rax,0xfffffffffffefbab
ffff80000080f948:	ff ff ff 
ffff80000080f94b:	48 01 d8             	add    rax,rbx
ffff80000080f94e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:30
    buf[fat_entry & 0x7f] = (buf[fat_entry & 0x7f] & 0xf0000000) | (value & 0x0fffffff);
ffff80000080f950:	8b 85 d4 fd ff ff    	mov    eax,DWORD PTR [rbp-0x22c]
ffff80000080f956:	83 e0 7f             	and    eax,0x7f
ffff80000080f959:	89 c0                	mov    eax,eax
ffff80000080f95b:	8b 84 85 e0 fd ff ff 	mov    eax,DWORD PTR [rbp+rax*4-0x220]
ffff80000080f962:	25 00 00 00 f0       	and    eax,0xf0000000
ffff80000080f967:	89 c6                	mov    esi,eax
ffff80000080f969:	8b 85 d0 fd ff ff    	mov    eax,DWORD PTR [rbp-0x230]
ffff80000080f96f:	25 ff ff ff 0f       	and    eax,0xfffffff
ffff80000080f974:	89 c1                	mov    ecx,eax
ffff80000080f976:	8b 85 d4 fd ff ff    	mov    eax,DWORD PTR [rbp-0x22c]
ffff80000080f97c:	83 e0 7f             	and    eax,0x7f
ffff80000080f97f:	89 c2                	mov    edx,eax
ffff80000080f981:	89 f0                	mov    eax,esi
ffff80000080f983:	09 c8                	or     eax,ecx
ffff80000080f985:	89 d2                	mov    edx,edx
ffff80000080f987:	89 84 95 e0 fd ff ff 	mov    DWORD PTR [rbp+rdx*4-0x220],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:32

	for(i = 0;i < fsbi->NumFATs;i++){
ffff80000080f98e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff80000080f995:	eb 7b                	jmp    ffff80000080fa12 <DISK1_FAT32_write_FAT_Entry+0x180>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:33 (discriminator 3)
        int r1=request(DISK_MAJOR_MAJOR,DISKREQ_WRITE,fsbi->FAT1_firstsector + fsbi->sector_per_FAT * i + (fat_entry >> 7),1,(unsigned char *)buf);
ffff80000080f997:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffff80000080f99e:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff80000080f9a2:	89 c1                	mov    ecx,eax
ffff80000080f9a4:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffff80000080f9ab:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff80000080f9af:	89 c2                	mov    edx,eax
ffff80000080f9b1:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080f9b4:	48 98                	cdqe   
ffff80000080f9b6:	0f af c2             	imul   eax,edx
ffff80000080f9b9:	8d 14 01             	lea    edx,[rcx+rax*1]
ffff80000080f9bc:	8b 85 d4 fd ff ff    	mov    eax,DWORD PTR [rbp-0x22c]
ffff80000080f9c2:	c1 e8 07             	shr    eax,0x7
ffff80000080f9c5:	01 d0                	add    eax,edx
ffff80000080f9c7:	89 c2                	mov    edx,eax
ffff80000080f9c9:	48 8d 85 e0 fd ff ff 	lea    rax,[rbp-0x220]
ffff80000080f9d0:	49 89 c0             	mov    r8,rax
ffff80000080f9d3:	b9 01 00 00 00       	mov    ecx,0x1
ffff80000080f9d8:	be 01 00 00 00       	mov    esi,0x1
ffff80000080f9dd:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080f9e2:	49 89 df             	mov    r15,rbx
ffff80000080f9e5:	48 b8 56 f1 fe ff ff 	movabs rax,0xfffffffffffef156
ffff80000080f9ec:	ff ff ff 
ffff80000080f9ef:	48 01 d8             	add    rax,rbx
ffff80000080f9f2:	ff d0                	call   rax
ffff80000080f9f4:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:34 (discriminator 3)
        chk_result(r1);
ffff80000080f9f7:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080f9fa:	89 c7                	mov    edi,eax
ffff80000080f9fc:	49 89 df             	mov    r15,rbx
ffff80000080f9ff:	48 b8 ab fb fe ff ff 	movabs rax,0xfffffffffffefbab
ffff80000080fa06:	ff ff ff 
ffff80000080fa09:	48 01 d8             	add    rax,rbx
ffff80000080fa0c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:32 (discriminator 3)
	for(i = 0;i < fsbi->NumFATs;i++){
ffff80000080fa0e:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:32 (discriminator 1)
ffff80000080fa12:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080fa15:	48 63 d0             	movsxd rdx,eax
ffff80000080fa18:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffff80000080fa1f:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080fa23:	48 39 c2             	cmp    rdx,rax
ffff80000080fa26:	0f 82 6b ff ff ff    	jb     ffff80000080f997 <DISK1_FAT32_write_FAT_Entry+0x105>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:36
    }
	return 1;
ffff80000080fa2c:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:37
}
ffff80000080fa31:	48 81 c4 20 02 00 00 	add    rsp,0x220
ffff80000080fa38:	5b                   	pop    rbx
ffff80000080fa39:	41 5f                	pop    r15
ffff80000080fa3b:	5d                   	pop    rbp
ffff80000080fa3c:	c3                   	ret    

ffff80000080fa3d <FAT32_open>:
FAT32_open():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:41


long FAT32_open(struct index_node * inode,struct file * filp)
{
ffff80000080fa3d:	f3 0f 1e fa          	endbr64 
ffff80000080fa41:	55                   	push   rbp
ffff80000080fa42:	48 89 e5             	mov    rbp,rsp
ffff80000080fa45:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080fa45 <FAT32_open+0x8>
ffff80000080fa4c:	49 bb f3 f8 00 00 00 	movabs r11,0xf8f3
ffff80000080fa53:	00 00 00 
ffff80000080fa56:	4c 01 d8             	add    rax,r11
ffff80000080fa59:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080fa5d:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:42
	return 1;
ffff80000080fa61:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:43
}
ffff80000080fa66:	5d                   	pop    rbp
ffff80000080fa67:	c3                   	ret    

ffff80000080fa68 <FAT32_close>:
FAT32_close():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:47


long FAT32_close(struct index_node * inode,struct file * filp)
{
ffff80000080fa68:	f3 0f 1e fa          	endbr64 
ffff80000080fa6c:	55                   	push   rbp
ffff80000080fa6d:	48 89 e5             	mov    rbp,rsp
ffff80000080fa70:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080fa70 <FAT32_close+0x8>
ffff80000080fa77:	49 bb c8 f8 00 00 00 	movabs r11,0xf8c8
ffff80000080fa7e:	00 00 00 
ffff80000080fa81:	4c 01 d8             	add    rax,r11
ffff80000080fa84:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080fa88:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:48
	return 1;
ffff80000080fa8c:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:49
}
ffff80000080fa91:	5d                   	pop    rbp
ffff80000080fa92:	c3                   	ret    

ffff80000080fa93 <FAT32_read>:
FAT32_read():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:53


long FAT32_read(struct file * filp,char * buf,unsigned long count,long * position)
{
ffff80000080fa93:	f3 0f 1e fa          	endbr64 
ffff80000080fa97:	55                   	push   rbp
ffff80000080fa98:	48 89 e5             	mov    rbp,rsp
ffff80000080fa9b:	41 57                	push   r15
ffff80000080fa9d:	53                   	push   rbx
ffff80000080fa9e:	48 83 c4 80          	add    rsp,0xffffffffffffff80
ffff80000080faa2:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080faa2 <FAT32_read+0xf>
ffff80000080faa9:	49 bb 96 f8 00 00 00 	movabs r11,0xf896
ffff80000080fab0:	00 00 00 
ffff80000080fab3:	4c 01 db             	add    rbx,r11
ffff80000080fab6:	48 89 7d 88          	mov    QWORD PTR [rbp-0x78],rdi
ffff80000080faba:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
ffff80000080fabe:	48 89 95 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdx
ffff80000080fac5:	48 89 8d 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:54
	struct FAT32_inode_info * finode = filp->dentry->dir_inode->private_index_info;
ffff80000080facc:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080fad0:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080fad4:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080fad8:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff80000080fadc:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:55
	struct FAT32_sb_info * fsbi = filp->dentry->dir_inode->sb->private_sb_info;
ffff80000080fae0:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080fae4:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080fae8:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080faec:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080faf0:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080faf4:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:57

	unsigned long cluster = finode->first_cluster;
ffff80000080faf8:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080fafc:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080faff:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:58
	unsigned long sector = 0;
ffff80000080fb03:	48 c7 45 b0 00 00 00 	mov    QWORD PTR [rbp-0x50],0x0
ffff80000080fb0a:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:59
	int i,length = 0;
ffff80000080fb0b:	c7 45 ac 00 00 00 00 	mov    DWORD PTR [rbp-0x54],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:60
	long retval = 0;
ffff80000080fb12:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff80000080fb19:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:61
	int index = *position / fsbi->bytes_per_cluster;
ffff80000080fb1a:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080fb21:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080fb24:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000080fb28:	48 8b 72 18          	mov    rsi,QWORD PTR [rdx+0x18]
ffff80000080fb2c:	48 99                	cqo    
ffff80000080fb2e:	48 f7 fe             	idiv   rsi
ffff80000080fb31:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:62
	long offset = *position % fsbi->bytes_per_cluster;
ffff80000080fb34:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080fb3b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080fb3e:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000080fb42:	48 8b 4a 18          	mov    rcx,QWORD PTR [rdx+0x18]
ffff80000080fb46:	48 99                	cqo    
ffff80000080fb48:	48 f7 f9             	idiv   rcx
ffff80000080fb4b:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:63
	char * buffer = (char *) kmalloc(fsbi->bytes_per_cluster, 0);
ffff80000080fb4f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080fb53:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080fb57:	be 00 00 00 00       	mov    esi,0x0
ffff80000080fb5c:	48 89 c7             	mov    rdi,rax
ffff80000080fb5f:	49 89 df             	mov    r15,rbx
ffff80000080fb62:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080fb67:	48 ba 13 2c fe ff ff 	movabs rdx,0xfffffffffffe2c13
ffff80000080fb6e:	ff ff ff 
ffff80000080fb71:	48 01 da             	add    rdx,rbx
ffff80000080fb74:	ff d2                	call   rdx
ffff80000080fb76:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:65

	if(!cluster)
ffff80000080fb7a:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080fb7f:	75 0c                	jne    ffff80000080fb8d <FAT32_read+0xfa>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:66
		return -EFAULT;
ffff80000080fb81:	48 c7 c0 eb ff ff ff 	mov    rax,0xffffffffffffffeb
ffff80000080fb88:	e9 8c 02 00 00       	jmp    ffff80000080fe19 <FAT32_read+0x386>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:67
	for(i = 0;i < index;i++)
ffff80000080fb8d:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff80000080fb94:	eb 2b                	jmp    ffff80000080fbc1 <FAT32_read+0x12e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:68 (discriminator 3)
		cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff80000080fb96:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080fb9a:	89 c2                	mov    edx,eax
ffff80000080fb9c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080fba0:	89 d6                	mov    esi,edx
ffff80000080fba2:	48 89 c7             	mov    rdi,rax
ffff80000080fba5:	49 89 df             	mov    r15,rbx
ffff80000080fba8:	48 b8 3d 04 ff ff ff 	movabs rax,0xffffffffffff043d
ffff80000080fbaf:	ff ff ff 
ffff80000080fbb2:	48 01 d8             	add    rax,rbx
ffff80000080fbb5:	ff d0                	call   rax
ffff80000080fbb7:	89 c0                	mov    eax,eax
ffff80000080fbb9:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:67 (discriminator 3)
	for(i = 0;i < index;i++)
ffff80000080fbbd:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:67 (discriminator 1)
ffff80000080fbc1:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080fbc4:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
ffff80000080fbc7:	7c cd                	jl     ffff80000080fb96 <FAT32_read+0x103>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:70

	if(*position + count > filp->dentry->dir_inode->file_size)
ffff80000080fbc9:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080fbd0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080fbd3:	48 89 c2             	mov    rdx,rax
ffff80000080fbd6:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff80000080fbdd:	48 01 c2             	add    rdx,rax
ffff80000080fbe0:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080fbe4:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080fbe8:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080fbec:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080fbef:	48 39 c2             	cmp    rdx,rax
ffff80000080fbf2:	76 35                	jbe    ffff80000080fc29 <FAT32_read+0x196>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:71
		index = count = filp->dentry->dir_inode->file_size - *position;
ffff80000080fbf4:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080fbf8:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080fbfc:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080fc00:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080fc03:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080fc0a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080fc0d:	48 89 c1             	mov    rcx,rax
ffff80000080fc10:	48 89 d0             	mov    rax,rdx
ffff80000080fc13:	48 29 c8             	sub    rax,rcx
ffff80000080fc16:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
ffff80000080fc1d:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff80000080fc24:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
ffff80000080fc27:	eb 0a                	jmp    ffff80000080fc33 <FAT32_read+0x1a0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:73
	else
		index = count;
ffff80000080fc29:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff80000080fc30:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:79

//	printf("FAT32_read first_cluster:%d,size:%d,preempt_count:%d\n",finode->first_cluster,filp->dentry->dir_inode->file_size,current->preempt_count);

	do
	{
		memset(buffer,0,fsbi->bytes_per_cluster);
ffff80000080fc33:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080fc37:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080fc3b:	89 c2                	mov    edx,eax
ffff80000080fc3d:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080fc41:	be 00 00 00 00       	mov    esi,0x0
ffff80000080fc46:	48 89 c7             	mov    rdi,rax
ffff80000080fc49:	49 89 df             	mov    r15,rbx
ffff80000080fc4c:	48 b8 d6 3e ff ff ff 	movabs rax,0xffffffffffff3ed6
ffff80000080fc53:	ff ff ff 
ffff80000080fc56:	48 01 d8             	add    rax,rbx
ffff80000080fc59:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:80
		sector = fsbi->Data_firstsector + (cluster - 2) * fsbi->sector_per_cluster;
ffff80000080fc5b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080fc5f:	48 8b 48 28          	mov    rcx,QWORD PTR [rax+0x28]
ffff80000080fc63:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080fc67:	48 8d 50 fe          	lea    rdx,[rax-0x2]
ffff80000080fc6b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080fc6f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080fc73:	48 0f af c2          	imul   rax,rdx
ffff80000080fc77:	48 01 c8             	add    rax,rcx
ffff80000080fc7a:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:81
        int r=request(DISK_MAJOR_MAJOR,DISKREQ_READ,sector,fsbi->sector_per_cluster,(unsigned char *)buffer);
ffff80000080fc7e:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080fc82:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080fc86:	89 c1                	mov    ecx,eax
ffff80000080fc88:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080fc8c:	89 c2                	mov    edx,eax
ffff80000080fc8e:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080fc92:	49 89 c0             	mov    r8,rax
ffff80000080fc95:	be 00 00 00 00       	mov    esi,0x0
ffff80000080fc9a:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080fc9f:	49 89 df             	mov    r15,rbx
ffff80000080fca2:	48 b8 56 f1 fe ff ff 	movabs rax,0xfffffffffffef156
ffff80000080fca9:	ff ff ff 
ffff80000080fcac:	48 01 d8             	add    rax,rbx
ffff80000080fcaf:	ff d0                	call   rax
ffff80000080fcb1:	89 45 9c             	mov    DWORD PTR [rbp-0x64],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:82
		if(!chk_result(r))
ffff80000080fcb4:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff80000080fcb7:	89 c7                	mov    edi,eax
ffff80000080fcb9:	49 89 df             	mov    r15,rbx
ffff80000080fcbc:	48 b8 ab fb fe ff ff 	movabs rax,0xfffffffffffefbab
ffff80000080fcc3:	ff ff ff 
ffff80000080fcc6:	48 01 d8             	add    rax,rbx
ffff80000080fcc9:	ff d0                	call   rax
ffff80000080fccb:	85 c0                	test   eax,eax
ffff80000080fccd:	75 35                	jne    ffff80000080fd04 <FAT32_read+0x271>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:84
		{
			printf("FAT32 FS(read) read disk ERROR!!!!!!!!!!\n");
ffff80000080fccf:	48 b8 d0 c9 ff ff ff 	movabs rax,0xffffffffffffc9d0
ffff80000080fcd6:	ff ff ff 
ffff80000080fcd9:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080fcdd:	48 89 c7             	mov    rdi,rax
ffff80000080fce0:	49 89 df             	mov    r15,rbx
ffff80000080fce3:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080fce8:	48 ba 92 23 fe ff ff 	movabs rdx,0xfffffffffffe2392
ffff80000080fcef:	ff ff ff 
ffff80000080fcf2:	48 01 da             	add    rdx,rbx
ffff80000080fcf5:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:85
			retval = -EIO;
ffff80000080fcf7:	48 c7 45 d8 e3 ff ff 	mov    QWORD PTR [rbp-0x28],0xffffffffffffffe3
ffff80000080fcfe:	ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:86
			break;
ffff80000080fcff:	e9 e7 00 00 00       	jmp    ffff80000080fdeb <FAT32_read+0x358>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:89
		}

		length = index <= fsbi->bytes_per_cluster - offset ? index : fsbi->bytes_per_cluster - offset;
ffff80000080fd04:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080fd07:	48 63 d0             	movsxd rdx,eax
ffff80000080fd0a:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080fd0e:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080fd12:	48 2b 45 c8          	sub    rax,QWORD PTR [rbp-0x38]
ffff80000080fd16:	48 39 c2             	cmp    rdx,rax
ffff80000080fd19:	48 0f 4e c2          	cmovle rax,rdx
ffff80000080fd1d:	89 45 ac             	mov    DWORD PTR [rbp-0x54],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:91

		if((unsigned long)buf < MAX_TASKS)
ffff80000080fd20:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080fd24:	48 83 f8 1f          	cmp    rax,0x1f
ffff80000080fd28:	77 2c                	ja     ffff80000080fd56 <FAT32_read+0x2c3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:92
			memcpy(buffer + offset,buf,length);
ffff80000080fd2a:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
ffff80000080fd2d:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
ffff80000080fd31:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080fd35:	48 01 c1             	add    rcx,rax
ffff80000080fd38:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080fd3c:	48 89 c6             	mov    rsi,rax
ffff80000080fd3f:	48 89 cf             	mov    rdi,rcx
ffff80000080fd42:	49 89 df             	mov    r15,rbx
ffff80000080fd45:	48 b8 27 3e ff ff ff 	movabs rax,0xffffffffffff3e27
ffff80000080fd4c:	ff ff ff 
ffff80000080fd4f:	48 01 d8             	add    rax,rbx
ffff80000080fd52:	ff d0                	call   rax
ffff80000080fd54:	eb 2a                	jmp    ffff80000080fd80 <FAT32_read+0x2ed>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:94
		else
			memcpy(buffer + offset,buf,length);
ffff80000080fd56:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
ffff80000080fd59:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
ffff80000080fd5d:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080fd61:	48 01 c1             	add    rcx,rax
ffff80000080fd64:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080fd68:	48 89 c6             	mov    rsi,rax
ffff80000080fd6b:	48 89 cf             	mov    rdi,rcx
ffff80000080fd6e:	49 89 df             	mov    r15,rbx
ffff80000080fd71:	48 b8 27 3e ff ff ff 	movabs rax,0xffffffffffff3e27
ffff80000080fd78:	ff ff ff 
ffff80000080fd7b:	48 01 d8             	add    rax,rbx
ffff80000080fd7e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:96

		index -= length;
ffff80000080fd80:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
ffff80000080fd83:	29 45 d4             	sub    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:97
		buf += length;
ffff80000080fd86:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
ffff80000080fd89:	48 98                	cdqe   
ffff80000080fd8b:	48 01 45 80          	add    QWORD PTR [rbp-0x80],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:98
		offset -= offset;
ffff80000080fd8f:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff80000080fd96:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:99
		*position += length;
ffff80000080fd97:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080fd9e:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080fda1:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
ffff80000080fda4:	48 98                	cdqe   
ffff80000080fda6:	48 01 c2             	add    rdx,rax
ffff80000080fda9:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080fdb0:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:100
	}while(index && (cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster)));
ffff80000080fdb3:	83 7d d4 00          	cmp    DWORD PTR [rbp-0x2c],0x0
ffff80000080fdb7:	74 32                	je     ffff80000080fdeb <FAT32_read+0x358>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:100 (discriminator 1)
ffff80000080fdb9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080fdbd:	89 c2                	mov    edx,eax
ffff80000080fdbf:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080fdc3:	89 d6                	mov    esi,edx
ffff80000080fdc5:	48 89 c7             	mov    rdi,rax
ffff80000080fdc8:	49 89 df             	mov    r15,rbx
ffff80000080fdcb:	48 b8 3d 04 ff ff ff 	movabs rax,0xffffffffffff043d
ffff80000080fdd2:	ff ff ff 
ffff80000080fdd5:	48 01 d8             	add    rax,rbx
ffff80000080fdd8:	ff d0                	call   rax
ffff80000080fdda:	89 c0                	mov    eax,eax
ffff80000080fddc:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff80000080fde0:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080fde5:	0f 85 48 fe ff ff    	jne    ffff80000080fc33 <FAT32_read+0x1a0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:102

    kmfree(buffer);
ffff80000080fdeb:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080fdef:	48 89 c7             	mov    rdi,rax
ffff80000080fdf2:	49 89 df             	mov    r15,rbx
ffff80000080fdf5:	48 b8 82 2f fe ff ff 	movabs rax,0xfffffffffffe2f82
ffff80000080fdfc:	ff ff ff 
ffff80000080fdff:	48 01 d8             	add    rax,rbx
ffff80000080fe02:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:103
	if(!index)
ffff80000080fe04:	83 7d d4 00          	cmp    DWORD PTR [rbp-0x2c],0x0
ffff80000080fe08:	75 0b                	jne    ffff80000080fe15 <FAT32_read+0x382>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:104
		retval = count;
ffff80000080fe0a:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff80000080fe11:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:105
	return retval;
ffff80000080fe15:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:106
}
ffff80000080fe19:	48 83 ec 80          	sub    rsp,0xffffffffffffff80
ffff80000080fe1d:	5b                   	pop    rbx
ffff80000080fe1e:	41 5f                	pop    r15
ffff80000080fe20:	5d                   	pop    rbp
ffff80000080fe21:	c3                   	ret    

ffff80000080fe22 <FAT32_find_available_cluster>:
FAT32_find_available_cluster():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:110


unsigned long FAT32_find_available_cluster(struct FAT32_sb_info * fsbi)
{
ffff80000080fe22:	f3 0f 1e fa          	endbr64 
ffff80000080fe26:	55                   	push   rbp
ffff80000080fe27:	48 89 e5             	mov    rbp,rsp
ffff80000080fe2a:	41 57                	push   r15
ffff80000080fe2c:	53                   	push   rbx
ffff80000080fe2d:	48 81 ec 30 02 00 00 	sub    rsp,0x230
ffff80000080fe34:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080fe34 <FAT32_find_available_cluster+0x12>
ffff80000080fe3b:	49 bb 04 f5 00 00 00 	movabs r11,0xf504
ffff80000080fe42:	00 00 00 
ffff80000080fe45:	4c 01 db             	add    rbx,r11
ffff80000080fe48:	48 89 bd c8 fd ff ff 	mov    QWORD PTR [rbp-0x238],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:113
	int i,j;
	int fat_entry;
	unsigned long sector_per_fat = fsbi->sector_per_FAT;
ffff80000080fe4f:	48 8b 85 c8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x238]
ffff80000080fe56:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff80000080fe5a:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:118
	unsigned int buf[128];

//	fsbi->fat_fsinfo->FSI_Free_Count & fsbi->fat_fsinfo->FSI_Nxt_Free not exactly,so unuse

	for(i = 0;i < sector_per_fat;i++)
ffff80000080fe5e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff80000080fe65:	e9 a5 00 00 00       	jmp    ffff80000080ff0f <FAT32_find_available_cluster+0xed>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:120
	{
		memset(buf,0,512);
ffff80000080fe6a:	48 8d 85 d0 fd ff ff 	lea    rax,[rbp-0x230]
ffff80000080fe71:	ba 00 02 00 00       	mov    edx,0x200
ffff80000080fe76:	be 00 00 00 00       	mov    esi,0x0
ffff80000080fe7b:	48 89 c7             	mov    rdi,rax
ffff80000080fe7e:	49 89 df             	mov    r15,rbx
ffff80000080fe81:	48 b8 d6 3e ff ff ff 	movabs rax,0xffffffffffff3ed6
ffff80000080fe88:	ff ff ff 
ffff80000080fe8b:	48 01 d8             	add    rax,rbx
ffff80000080fe8e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:121
		int r=request(DISK_MAJOR_MAJOR,DISKREQ_READ,fsbi->FAT1_firstsector + i,1,(unsigned char *)buf);
ffff80000080fe90:	48 8b 85 c8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x238]
ffff80000080fe97:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff80000080fe9b:	89 c2                	mov    edx,eax
ffff80000080fe9d:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080fea0:	01 d0                	add    eax,edx
ffff80000080fea2:	89 c2                	mov    edx,eax
ffff80000080fea4:	48 8d 85 d0 fd ff ff 	lea    rax,[rbp-0x230]
ffff80000080feab:	49 89 c0             	mov    r8,rax
ffff80000080feae:	b9 01 00 00 00       	mov    ecx,0x1
ffff80000080feb3:	be 00 00 00 00       	mov    esi,0x0
ffff80000080feb8:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080febd:	49 89 df             	mov    r15,rbx
ffff80000080fec0:	48 b8 56 f1 fe ff ff 	movabs rax,0xfffffffffffef156
ffff80000080fec7:	ff ff ff 
ffff80000080feca:	48 01 d8             	add    rax,rbx
ffff80000080fecd:	ff d0                	call   rax
ffff80000080fecf:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:123

		for(j = 0;j < 128;j++)
ffff80000080fed2:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff80000080fed9:	eb 2a                	jmp    ffff80000080ff05 <FAT32_find_available_cluster+0xe3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:125
		{
			if((buf[j] & 0x0fffffff) == 0)
ffff80000080fedb:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080fede:	48 98                	cdqe   
ffff80000080fee0:	8b 84 85 d0 fd ff ff 	mov    eax,DWORD PTR [rbp+rax*4-0x230]
ffff80000080fee7:	25 ff ff ff 0f       	and    eax,0xfffffff
ffff80000080feec:	85 c0                	test   eax,eax
ffff80000080feee:	75 11                	jne    ffff80000080ff01 <FAT32_find_available_cluster+0xdf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:126
				return (i << 7) + j;
ffff80000080fef0:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080fef3:	c1 e0 07             	shl    eax,0x7
ffff80000080fef6:	89 c2                	mov    edx,eax
ffff80000080fef8:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080fefb:	01 d0                	add    eax,edx
ffff80000080fefd:	48 98                	cdqe   
ffff80000080feff:	eb 22                	jmp    ffff80000080ff23 <FAT32_find_available_cluster+0x101>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:123 (discriminator 2)
		for(j = 0;j < 128;j++)
ffff80000080ff01:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:123 (discriminator 1)
ffff80000080ff05:	83 7d e8 7f          	cmp    DWORD PTR [rbp-0x18],0x7f
ffff80000080ff09:	7e d0                	jle    ffff80000080fedb <FAT32_find_available_cluster+0xb9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:118 (discriminator 2)
	for(i = 0;i < sector_per_fat;i++)
ffff80000080ff0b:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:118 (discriminator 1)
ffff80000080ff0f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080ff12:	48 98                	cdqe   
ffff80000080ff14:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
ffff80000080ff18:	0f 87 4c ff ff ff    	ja     ffff80000080fe6a <FAT32_find_available_cluster+0x48>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:129
		}
	}
	return 0;
ffff80000080ff1e:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:130 (discriminator 1)
}
ffff80000080ff23:	48 81 c4 30 02 00 00 	add    rsp,0x230
ffff80000080ff2a:	5b                   	pop    rbx
ffff80000080ff2b:	41 5f                	pop    r15
ffff80000080ff2d:	5d                   	pop    rbp
ffff80000080ff2e:	c3                   	ret    

ffff80000080ff2f <FAT32_write>:
FAT32_write():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:134


long FAT32_write(struct file * filp,char * buf,unsigned long count,long * position)
{
ffff80000080ff2f:	f3 0f 1e fa          	endbr64 
ffff80000080ff33:	55                   	push   rbp
ffff80000080ff34:	48 89 e5             	mov    rbp,rsp
ffff80000080ff37:	41 57                	push   r15
ffff80000080ff39:	53                   	push   rbx
ffff80000080ff3a:	48 81 ec 90 00 00 00 	sub    rsp,0x90
ffff80000080ff41:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080ff41 <FAT32_write+0x12>
ffff80000080ff48:	49 bb f7 f3 00 00 00 	movabs r11,0xf3f7
ffff80000080ff4f:	00 00 00 
ffff80000080ff52:	4c 01 db             	add    rbx,r11
ffff80000080ff55:	48 89 bd 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdi
ffff80000080ff5c:	48 89 b5 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rsi
ffff80000080ff63:	48 89 95 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdx
ffff80000080ff6a:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:135
	struct FAT32_inode_info * finode = filp->dentry->dir_inode->private_index_info;
ffff80000080ff71:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff80000080ff78:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080ff7c:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080ff80:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff80000080ff84:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:136
	struct FAT32_sb_info * fsbi = filp->dentry->dir_inode->sb->private_sb_info;
ffff80000080ff88:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff80000080ff8f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080ff93:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080ff97:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080ff9b:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080ff9f:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:138

	unsigned long cluster = finode->first_cluster;
ffff80000080ffa3:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080ffa7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ffaa:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:139
	unsigned long next_cluster = 0;
ffff80000080ffae:	48 c7 45 a0 00 00 00 	mov    QWORD PTR [rbp-0x60],0x0
ffff80000080ffb5:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:140
	unsigned long sector = 0;
ffff80000080ffb6:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff80000080ffbd:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:141
	int i,length = 0;
ffff80000080ffbe:	c7 45 9c 00 00 00 00 	mov    DWORD PTR [rbp-0x64],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:142
	long retval = 0;
ffff80000080ffc5:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff80000080ffcc:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:143
	long flags = 0;
ffff80000080ffcd:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff80000080ffd4:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:144
	int index = *position / fsbi->bytes_per_cluster;
ffff80000080ffd5:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff80000080ffdc:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ffdf:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff80000080ffe3:	48 8b 72 18          	mov    rsi,QWORD PTR [rdx+0x18]
ffff80000080ffe7:	48 99                	cqo    
ffff80000080ffe9:	48 f7 fe             	idiv   rsi
ffff80000080ffec:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:145
	long offset = *position % fsbi->bytes_per_cluster;
ffff80000080ffef:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff80000080fff6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080fff9:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff80000080fffd:	48 8b 4a 18          	mov    rcx,QWORD PTR [rdx+0x18]
ffff800000810001:	48 99                	cqo    
ffff800000810003:	48 f7 f9             	idiv   rcx
ffff800000810006:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:146
	char * buffer = (char *) kmalloc(fsbi->bytes_per_cluster, 0);
ffff80000081000a:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000081000e:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000810012:	be 00 00 00 00       	mov    esi,0x0
ffff800000810017:	48 89 c7             	mov    rdi,rax
ffff80000081001a:	49 89 df             	mov    r15,rbx
ffff80000081001d:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810022:	48 ba 13 2c fe ff ff 	movabs rdx,0xfffffffffffe2c13
ffff800000810029:	ff ff ff 
ffff80000081002c:	48 01 da             	add    rdx,rbx
ffff80000081002f:	ff d2                	call   rdx
ffff800000810031:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:148

	if(!cluster)
ffff800000810035:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000081003a:	75 27                	jne    ffff800000810063 <FAT32_write+0x134>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:150
	{
		cluster = FAT32_find_available_cluster(fsbi);
ffff80000081003c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810040:	48 89 c7             	mov    rdi,rax
ffff800000810043:	49 89 df             	mov    r15,rbx
ffff800000810046:	48 b8 ea 0a ff ff ff 	movabs rax,0xffffffffffff0aea
ffff80000081004d:	ff ff ff 
ffff800000810050:	48 01 d8             	add    rax,rbx
ffff800000810053:	ff d0                	call   rax
ffff800000810055:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:151
		flags = 1;
ffff800000810059:	48 c7 45 c8 01 00 00 	mov    QWORD PTR [rbp-0x38],0x1
ffff800000810060:	00 
ffff800000810061:	eb 3c                	jmp    ffff80000081009f <FAT32_write+0x170>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:154
	}
	else
		for(i = 0;i < index;i++)
ffff800000810063:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
ffff80000081006a:	eb 2b                	jmp    ffff800000810097 <FAT32_write+0x168>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:155 (discriminator 3)
			cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff80000081006c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000810070:	89 c2                	mov    edx,eax
ffff800000810072:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810076:	89 d6                	mov    esi,edx
ffff800000810078:	48 89 c7             	mov    rdi,rax
ffff80000081007b:	49 89 df             	mov    r15,rbx
ffff80000081007e:	48 b8 3d 04 ff ff ff 	movabs rax,0xffffffffffff043d
ffff800000810085:	ff ff ff 
ffff800000810088:	48 01 d8             	add    rax,rbx
ffff80000081008b:	ff d0                	call   rax
ffff80000081008d:	89 c0                	mov    eax,eax
ffff80000081008f:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:154 (discriminator 3)
		for(i = 0;i < index;i++)
ffff800000810093:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:154 (discriminator 1)
ffff800000810097:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000081009a:	3b 45 c4             	cmp    eax,DWORD PTR [rbp-0x3c]
ffff80000081009d:	7c cd                	jl     ffff80000081006c <FAT32_write+0x13d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:157

	if(!cluster)
ffff80000081009f:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff8000008100a4:	75 25                	jne    ffff8000008100cb <FAT32_write+0x19c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:159
	{
        kmfree(buffer);
ffff8000008100a6:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008100aa:	48 89 c7             	mov    rdi,rax
ffff8000008100ad:	49 89 df             	mov    r15,rbx
ffff8000008100b0:	48 b8 82 2f fe ff ff 	movabs rax,0xfffffffffffe2f82
ffff8000008100b7:	ff ff ff 
ffff8000008100ba:	48 01 d8             	add    rax,rbx
ffff8000008100bd:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:160
		return -ENOSPC;
ffff8000008100bf:	48 c7 c0 cc ff ff ff 	mov    rax,0xffffffffffffffcc
ffff8000008100c6:	e9 1d 04 00 00       	jmp    ffff8000008104e8 <FAT32_write+0x5b9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:163
	}

	if(flags)
ffff8000008100cb:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffff8000008100d0:	74 60                	je     ffff800000810132 <FAT32_write+0x203>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:165
	{
		finode->first_cluster = cluster;
ffff8000008100d2:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff8000008100d6:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff8000008100da:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:166
		filp->dentry->dir_inode->sb->sb_ops->write_inode(filp->dentry->dir_inode);
ffff8000008100dd:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff8000008100e4:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008100e8:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008100ec:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff8000008100f0:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff8000008100f4:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff8000008100f8:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff8000008100ff:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000810103:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000810107:	48 89 c7             	mov    rdi,rax
ffff80000081010a:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:167
		DISK1_FAT32_write_FAT_Entry(fsbi,cluster,0x0ffffff8);
ffff80000081010c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000810110:	89 c1                	mov    ecx,eax
ffff800000810112:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810116:	ba f8 ff ff 0f       	mov    edx,0xffffff8
ffff80000081011b:	89 ce                	mov    esi,ecx
ffff80000081011d:	48 89 c7             	mov    rdi,rax
ffff800000810120:	49 89 df             	mov    r15,rbx
ffff800000810123:	48 b8 5a 05 ff ff ff 	movabs rax,0xffffffffffff055a
ffff80000081012a:	ff ff ff 
ffff80000081012d:	48 01 d8             	add    rax,rbx
ffff800000810130:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:170
	}

	index = count;
ffff800000810132:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff800000810139:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:174

	do
	{
		if(!flags)
ffff80000081013c:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffff800000810141:	0f 85 d1 00 00 00    	jne    ffff800000810218 <FAT32_write+0x2e9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:176
		{
			memset(buffer,0,fsbi->bytes_per_cluster);
ffff800000810147:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000081014b:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000081014f:	89 c2                	mov    edx,eax
ffff800000810151:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000810155:	be 00 00 00 00       	mov    esi,0x0
ffff80000081015a:	48 89 c7             	mov    rdi,rax
ffff80000081015d:	49 89 df             	mov    r15,rbx
ffff800000810160:	48 b8 d6 3e ff ff ff 	movabs rax,0xffffffffffff3ed6
ffff800000810167:	ff ff ff 
ffff80000081016a:	48 01 d8             	add    rax,rbx
ffff80000081016d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:177
			sector = fsbi->Data_firstsector + (cluster - 2) * fsbi->sector_per_cluster;
ffff80000081016f:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810173:	48 8b 48 28          	mov    rcx,QWORD PTR [rax+0x28]
ffff800000810177:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081017b:	48 8d 50 fe          	lea    rdx,[rax-0x2]
ffff80000081017f:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810183:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000810187:	48 0f af c2          	imul   rax,rdx
ffff80000081018b:	48 01 c8             	add    rax,rcx
ffff80000081018e:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:178
            int r=request(DISK_MAJOR_MAJOR,DISKREQ_READ,sector,fsbi->sector_per_cluster,(unsigned char *)buffer);
ffff800000810192:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810196:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000081019a:	89 c1                	mov    ecx,eax
ffff80000081019c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008101a0:	89 c2                	mov    edx,eax
ffff8000008101a2:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008101a6:	49 89 c0             	mov    r8,rax
ffff8000008101a9:	be 00 00 00 00       	mov    esi,0x0
ffff8000008101ae:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008101b3:	49 89 df             	mov    r15,rbx
ffff8000008101b6:	48 b8 56 f1 fe ff ff 	movabs rax,0xfffffffffffef156
ffff8000008101bd:	ff ff ff 
ffff8000008101c0:	48 01 d8             	add    rax,rbx
ffff8000008101c3:	ff d0                	call   rax
ffff8000008101c5:	89 45 8c             	mov    DWORD PTR [rbp-0x74],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:180

			if(!chk_result(r))
ffff8000008101c8:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
ffff8000008101cb:	89 c7                	mov    edi,eax
ffff8000008101cd:	49 89 df             	mov    r15,rbx
ffff8000008101d0:	48 b8 ab fb fe ff ff 	movabs rax,0xfffffffffffefbab
ffff8000008101d7:	ff ff ff 
ffff8000008101da:	48 01 d8             	add    rax,rbx
ffff8000008101dd:	ff d0                	call   rax
ffff8000008101df:	85 c0                	test   eax,eax
ffff8000008101e1:	75 35                	jne    ffff800000810218 <FAT32_write+0x2e9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:182
			{
				printf("FAT32 FS(write) read disk ERROR!!!!!!!!!!\n");
ffff8000008101e3:	48 b8 00 ca ff ff ff 	movabs rax,0xffffffffffffca00
ffff8000008101ea:	ff ff ff 
ffff8000008101ed:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008101f1:	48 89 c7             	mov    rdi,rax
ffff8000008101f4:	49 89 df             	mov    r15,rbx
ffff8000008101f7:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008101fc:	48 ba 92 23 fe ff ff 	movabs rdx,0xfffffffffffe2392
ffff800000810203:	ff ff ff 
ffff800000810206:	48 01 da             	add    rdx,rbx
ffff800000810209:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:183
				retval = -EIO;
ffff80000081020b:	48 c7 45 d0 e3 ff ff 	mov    QWORD PTR [rbp-0x30],0xffffffffffffffe3
ffff800000810212:	ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:184
				break;
ffff800000810213:	e9 33 02 00 00       	jmp    ffff80000081044b <FAT32_write+0x51c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:188
			}
		}

		length = index <= fsbi->bytes_per_cluster - offset ? index : fsbi->bytes_per_cluster - offset;
ffff800000810218:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000081021b:	48 63 d0             	movsxd rdx,eax
ffff80000081021e:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810222:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000810226:	48 2b 45 b8          	sub    rax,QWORD PTR [rbp-0x48]
ffff80000081022a:	48 39 c2             	cmp    rdx,rax
ffff80000081022d:	48 0f 4e c2          	cmovle rax,rdx
ffff800000810231:	89 45 9c             	mov    DWORD PTR [rbp-0x64],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:190

		if((unsigned long)buf < MAX_TASKS)
ffff800000810234:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000081023b:	48 83 f8 1f          	cmp    rax,0x1f
ffff80000081023f:	77 2f                	ja     ffff800000810270 <FAT32_write+0x341>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:191
			memcpy(buf,buffer + offset,length);
ffff800000810241:	8b 55 9c             	mov    edx,DWORD PTR [rbp-0x64]
ffff800000810244:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
ffff800000810248:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000081024c:	48 01 c1             	add    rcx,rax
ffff80000081024f:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000810256:	48 89 ce             	mov    rsi,rcx
ffff800000810259:	48 89 c7             	mov    rdi,rax
ffff80000081025c:	49 89 df             	mov    r15,rbx
ffff80000081025f:	48 b8 27 3e ff ff ff 	movabs rax,0xffffffffffff3e27
ffff800000810266:	ff ff ff 
ffff800000810269:	48 01 d8             	add    rax,rbx
ffff80000081026c:	ff d0                	call   rax
ffff80000081026e:	eb 2d                	jmp    ffff80000081029d <FAT32_write+0x36e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:193
		else
			memcpy(buf,buffer + offset,length);
ffff800000810270:	8b 55 9c             	mov    edx,DWORD PTR [rbp-0x64]
ffff800000810273:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
ffff800000810277:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000081027b:	48 01 c1             	add    rcx,rax
ffff80000081027e:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000810285:	48 89 ce             	mov    rsi,rcx
ffff800000810288:	48 89 c7             	mov    rdi,rax
ffff80000081028b:	49 89 df             	mov    r15,rbx
ffff80000081028e:	48 b8 27 3e ff ff ff 	movabs rax,0xffffffffffff3e27
ffff800000810295:	ff ff ff 
ffff800000810298:	48 01 d8             	add    rax,rbx
ffff80000081029b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:195

		int r=request(DISK_MAJOR_MAJOR,DISKREQ_WRITE,sector,fsbi->sector_per_cluster,(unsigned char *)buffer);
ffff80000081029d:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008102a1:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008102a5:	89 c1                	mov    ecx,eax
ffff8000008102a7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008102ab:	89 c2                	mov    edx,eax
ffff8000008102ad:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008102b1:	49 89 c0             	mov    r8,rax
ffff8000008102b4:	be 01 00 00 00       	mov    esi,0x1
ffff8000008102b9:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008102be:	49 89 df             	mov    r15,rbx
ffff8000008102c1:	48 b8 56 f1 fe ff ff 	movabs rax,0xfffffffffffef156
ffff8000008102c8:	ff ff ff 
ffff8000008102cb:	48 01 d8             	add    rax,rbx
ffff8000008102ce:	ff d0                	call   rax
ffff8000008102d0:	89 45 88             	mov    DWORD PTR [rbp-0x78],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:196
        if(!chk_result(r))
ffff8000008102d3:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
ffff8000008102d6:	89 c7                	mov    edi,eax
ffff8000008102d8:	49 89 df             	mov    r15,rbx
ffff8000008102db:	48 b8 ab fb fe ff ff 	movabs rax,0xfffffffffffefbab
ffff8000008102e2:	ff ff ff 
ffff8000008102e5:	48 01 d8             	add    rax,rbx
ffff8000008102e8:	ff d0                	call   rax
ffff8000008102ea:	85 c0                	test   eax,eax
ffff8000008102ec:	75 35                	jne    ffff800000810323 <FAT32_write+0x3f4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:198
		{
			printf("FAT32 FS(write) write disk ERROR!!!!!!!!!!\n");
ffff8000008102ee:	48 b8 30 ca ff ff ff 	movabs rax,0xffffffffffffca30
ffff8000008102f5:	ff ff ff 
ffff8000008102f8:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008102fc:	48 89 c7             	mov    rdi,rax
ffff8000008102ff:	49 89 df             	mov    r15,rbx
ffff800000810302:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810307:	48 ba 92 23 fe ff ff 	movabs rdx,0xfffffffffffe2392
ffff80000081030e:	ff ff ff 
ffff800000810311:	48 01 da             	add    rdx,rbx
ffff800000810314:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:199
			retval = -EIO;
ffff800000810316:	48 c7 45 d0 e3 ff ff 	mov    QWORD PTR [rbp-0x30],0xffffffffffffffe3
ffff80000081031d:	ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:200
			break;
ffff80000081031e:	e9 28 01 00 00       	jmp    ffff80000081044b <FAT32_write+0x51c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:203
		}

		index -= length;
ffff800000810323:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff800000810326:	29 45 c4             	sub    DWORD PTR [rbp-0x3c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:204
		buf += length;
ffff800000810329:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff80000081032c:	48 98                	cdqe   
ffff80000081032e:	48 01 85 70 ff ff ff 	add    QWORD PTR [rbp-0x90],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:205
		offset -= offset;
ffff800000810335:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffff80000081033c:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:206
		*position += length;
ffff80000081033d:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff800000810344:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000810347:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff80000081034a:	48 98                	cdqe   
ffff80000081034c:	48 01 c2             	add    rdx,rax
ffff80000081034f:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff800000810356:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:208

		if(index)
ffff800000810359:	83 7d c4 00          	cmp    DWORD PTR [rbp-0x3c],0x0
ffff80000081035d:	0f 84 e7 00 00 00    	je     ffff80000081044a <FAT32_write+0x51b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:209
			next_cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff800000810363:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000810367:	89 c2                	mov    edx,eax
ffff800000810369:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000081036d:	89 d6                	mov    esi,edx
ffff80000081036f:	48 89 c7             	mov    rdi,rax
ffff800000810372:	49 89 df             	mov    r15,rbx
ffff800000810375:	48 b8 3d 04 ff ff ff 	movabs rax,0xffffffffffff043d
ffff80000081037c:	ff ff ff 
ffff80000081037f:	48 01 d8             	add    rax,rbx
ffff800000810382:	ff d0                	call   rax
ffff800000810384:	89 c0                	mov    eax,eax
ffff800000810386:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:213
		else
			break;

		if(next_cluster >= 0x0ffffff8)
ffff80000081038a:	48 81 7d a0 f7 ff ff 	cmp    QWORD PTR [rbp-0x60],0xffffff7
ffff800000810391:	0f 
ffff800000810392:	0f 86 a6 00 00 00    	jbe    ffff80000081043e <FAT32_write+0x50f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:215
		{
			next_cluster = FAT32_find_available_cluster(fsbi);
ffff800000810398:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000081039c:	48 89 c7             	mov    rdi,rax
ffff80000081039f:	49 89 df             	mov    r15,rbx
ffff8000008103a2:	48 b8 ea 0a ff ff ff 	movabs rax,0xffffffffffff0aea
ffff8000008103a9:	ff ff ff 
ffff8000008103ac:	48 01 d8             	add    rax,rbx
ffff8000008103af:	ff d0                	call   rax
ffff8000008103b1:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:216
			if(!next_cluster)
ffff8000008103b5:	48 83 7d a0 00       	cmp    QWORD PTR [rbp-0x60],0x0
ffff8000008103ba:	75 25                	jne    ffff8000008103e1 <FAT32_write+0x4b2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:218
			{
                kmfree(buffer);
ffff8000008103bc:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008103c0:	48 89 c7             	mov    rdi,rax
ffff8000008103c3:	49 89 df             	mov    r15,rbx
ffff8000008103c6:	48 b8 82 2f fe ff ff 	movabs rax,0xfffffffffffe2f82
ffff8000008103cd:	ff ff ff 
ffff8000008103d0:	48 01 d8             	add    rax,rbx
ffff8000008103d3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:219
				return -ENOSPC;
ffff8000008103d5:	48 c7 c0 cc ff ff ff 	mov    rax,0xffffffffffffffcc
ffff8000008103dc:	e9 07 01 00 00       	jmp    ffff8000008104e8 <FAT32_write+0x5b9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:222
			}			
				
			DISK1_FAT32_write_FAT_Entry(fsbi,cluster,next_cluster);
ffff8000008103e1:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff8000008103e5:	89 c2                	mov    edx,eax
ffff8000008103e7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008103eb:	89 c1                	mov    ecx,eax
ffff8000008103ed:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008103f1:	89 ce                	mov    esi,ecx
ffff8000008103f3:	48 89 c7             	mov    rdi,rax
ffff8000008103f6:	49 89 df             	mov    r15,rbx
ffff8000008103f9:	48 b8 5a 05 ff ff ff 	movabs rax,0xffffffffffff055a
ffff800000810400:	ff ff ff 
ffff800000810403:	48 01 d8             	add    rax,rbx
ffff800000810406:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:223
			DISK1_FAT32_write_FAT_Entry(fsbi,next_cluster,0x0ffffff8);
ffff800000810408:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000081040c:	89 c1                	mov    ecx,eax
ffff80000081040e:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810412:	ba f8 ff ff 0f       	mov    edx,0xffffff8
ffff800000810417:	89 ce                	mov    esi,ecx
ffff800000810419:	48 89 c7             	mov    rdi,rax
ffff80000081041c:	49 89 df             	mov    r15,rbx
ffff80000081041f:	48 b8 5a 05 ff ff ff 	movabs rax,0xffffffffffff055a
ffff800000810426:	ff ff ff 
ffff800000810429:	48 01 d8             	add    rax,rbx
ffff80000081042c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:224
			cluster = next_cluster;
ffff80000081042e:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000810432:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:225
			flags = 1;
ffff800000810436:	48 c7 45 c8 01 00 00 	mov    QWORD PTR [rbp-0x38],0x1
ffff80000081043d:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:228
		}

	}while(index);
ffff80000081043e:	83 7d c4 00          	cmp    DWORD PTR [rbp-0x3c],0x0
ffff800000810442:	0f 85 f4 fc ff ff    	jne    ffff80000081013c <FAT32_write+0x20d>
ffff800000810448:	eb 01                	jmp    ffff80000081044b <FAT32_write+0x51c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:211
			break;
ffff80000081044a:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:230

	if(*position > filp->dentry->dir_inode->file_size)
ffff80000081044b:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff800000810452:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810455:	48 89 c2             	mov    rdx,rax
ffff800000810458:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff80000081045f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000810463:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000810467:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000081046a:	48 39 c2             	cmp    rdx,rax
ffff80000081046d:	76 4b                	jbe    ffff8000008104ba <FAT32_write+0x58b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:232
	{
		filp->dentry->dir_inode->file_size = *position;
ffff80000081046f:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff800000810476:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000810479:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000810480:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000810484:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000810488:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:233
		filp->dentry->dir_inode->sb->sb_ops->write_inode(filp->dentry->dir_inode);
ffff80000081048b:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000810492:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000810496:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000081049a:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000081049e:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff8000008104a2:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff8000008104a6:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff8000008104ad:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008104b1:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008104b5:	48 89 c7             	mov    rdi,rax
ffff8000008104b8:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:236
	}

    kmfree(buffer);
ffff8000008104ba:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008104be:	48 89 c7             	mov    rdi,rax
ffff8000008104c1:	49 89 df             	mov    r15,rbx
ffff8000008104c4:	48 b8 82 2f fe ff ff 	movabs rax,0xfffffffffffe2f82
ffff8000008104cb:	ff ff ff 
ffff8000008104ce:	48 01 d8             	add    rax,rbx
ffff8000008104d1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:237
	if(!index)
ffff8000008104d3:	83 7d c4 00          	cmp    DWORD PTR [rbp-0x3c],0x0
ffff8000008104d7:	75 0b                	jne    ffff8000008104e4 <FAT32_write+0x5b5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:238
		retval = count;
ffff8000008104d9:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff8000008104e0:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:239
	return retval;
ffff8000008104e4:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:240
}
ffff8000008104e8:	48 81 c4 90 00 00 00 	add    rsp,0x90
ffff8000008104ef:	5b                   	pop    rbx
ffff8000008104f0:	41 5f                	pop    r15
ffff8000008104f2:	5d                   	pop    rbp
ffff8000008104f3:	c3                   	ret    

ffff8000008104f4 <FAT32_lseek>:
FAT32_lseek():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:244


long FAT32_lseek(struct file * filp,long offset,long origin)
{
ffff8000008104f4:	f3 0f 1e fa          	endbr64 
ffff8000008104f8:	55                   	push   rbp
ffff8000008104f9:	48 89 e5             	mov    rbp,rsp
ffff8000008104fc:	41 57                	push   r15
ffff8000008104fe:	48 83 ec 38          	sub    rsp,0x38
ffff800000810502:	48 8d 0d f9 ff ff ff 	lea    rcx,[rip+0xfffffffffffffff9]        # ffff800000810502 <FAT32_lseek+0xe>
ffff800000810509:	49 bb 36 ee 00 00 00 	movabs r11,0xee36
ffff800000810510:	00 00 00 
ffff800000810513:	4c 01 d9             	add    rcx,r11
ffff800000810516:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff80000081051a:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffff80000081051e:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:245
	struct index_node *inode = filp->dentry->dir_inode;
ffff800000810522:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810526:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000081052a:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000081052e:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:246
	long pos = 0;
ffff800000810532:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff800000810539:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:248

	switch(origin)
ffff80000081053a:	48 83 7d c8 02       	cmp    QWORD PTR [rbp-0x38],0x2
ffff80000081053f:	74 21                	je     ffff800000810562 <FAT32_lseek+0x6e>
ffff800000810541:	48 83 7d c8 02       	cmp    QWORD PTR [rbp-0x38],0x2
ffff800000810546:	7f 4a                	jg     ffff800000810592 <FAT32_lseek+0x9e>
ffff800000810548:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffff80000081054d:	74 09                	je     ffff800000810558 <FAT32_lseek+0x64>
ffff80000081054f:	48 83 7d c8 01       	cmp    QWORD PTR [rbp-0x38],0x1
ffff800000810554:	74 20                	je     ffff800000810576 <FAT32_lseek+0x82>
ffff800000810556:	eb 3a                	jmp    ffff800000810592 <FAT32_lseek+0x9e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:251
	{
		case SEEK_SET:
				pos = offset;
ffff800000810558:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081055c:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:252
			break;
ffff800000810560:	eb 39                	jmp    ffff80000081059b <FAT32_lseek+0xa7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:255

		case SEEK_CUR:
				pos =  filp->position + offset;
ffff800000810562:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810566:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000810569:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081056d:	48 01 d0             	add    rax,rdx
ffff800000810570:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:256
			break;
ffff800000810574:	eb 25                	jmp    ffff80000081059b <FAT32_lseek+0xa7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:259

		case SEEK_END:
				pos = filp->dentry->dir_inode->file_size + offset;
ffff800000810576:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081057a:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000081057e:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000810582:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000810585:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000810589:	48 01 d0             	add    rax,rdx
ffff80000081058c:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:260
			break;
ffff800000810590:	eb 09                	jmp    ffff80000081059b <FAT32_lseek+0xa7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:263

		default:
			return -EINVAL;
ffff800000810592:	48 c7 c0 e4 ff ff ff 	mov    rax,0xffffffffffffffe4
ffff800000810599:	eb 69                	jmp    ffff800000810604 <FAT32_lseek+0x110>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:267
			break;
	}

	if(pos < 0 || pos > filp->dentry->dir_inode->file_size)
ffff80000081059b:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff8000008105a0:	78 18                	js     ffff8000008105ba <FAT32_lseek+0xc6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:267 (discriminator 1)
ffff8000008105a2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008105a6:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008105aa:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008105ae:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008105b1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008105b5:	48 39 c2             	cmp    rdx,rax
ffff8000008105b8:	73 09                	jae    ffff8000008105c3 <FAT32_lseek+0xcf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:268
		return -EOVERFLOW;
ffff8000008105ba:	48 c7 c0 bf ff ff ff 	mov    rax,0xffffffffffffffbf
ffff8000008105c1:	eb 41                	jmp    ffff800000810604 <FAT32_lseek+0x110>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:270

	filp->position = pos;
ffff8000008105c3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008105c7:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff8000008105cb:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:271
	printf("FAT32 FS(lseek) alert position:%d\n",filp->position);
ffff8000008105ce:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008105d2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008105d5:	48 89 c6             	mov    rsi,rax
ffff8000008105d8:	48 b8 60 ca ff ff ff 	movabs rax,0xffffffffffffca60
ffff8000008105df:	ff ff ff 
ffff8000008105e2:	48 8d 04 01          	lea    rax,[rcx+rax*1]
ffff8000008105e6:	48 89 c7             	mov    rdi,rax
ffff8000008105e9:	49 89 cf             	mov    r15,rcx
ffff8000008105ec:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008105f1:	48 ba 92 23 fe ff ff 	movabs rdx,0xfffffffffffe2392
ffff8000008105f8:	ff ff ff 
ffff8000008105fb:	48 01 ca             	add    rdx,rcx
ffff8000008105fe:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:273

	return pos;
ffff800000810600:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:274
}
ffff800000810604:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000810608:	c9                   	leave  
ffff800000810609:	c3                   	ret    

ffff80000081060a <FAT32_ioctl>:
FAT32_ioctl():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:278


long FAT32_ioctl(struct index_node * inode,struct file * filp,unsigned long cmd,unsigned long arg)
{}
ffff80000081060a:	f3 0f 1e fa          	endbr64 
ffff80000081060e:	55                   	push   rbp
ffff80000081060f:	48 89 e5             	mov    rbp,rsp
ffff800000810612:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000810612 <FAT32_ioctl+0x8>
ffff800000810619:	49 bb 26 ed 00 00 00 	movabs r11,0xed26
ffff800000810620:	00 00 00 
ffff800000810623:	4c 01 d8             	add    rax,r11
ffff800000810626:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000081062a:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000081062e:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff800000810632:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
ffff800000810636:	90                   	nop
ffff800000810637:	5d                   	pop    rbp
ffff800000810638:	c3                   	ret    

ffff800000810639 <FAT32_readdir>:
FAT32_readdir():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:281

long FAT32_readdir(struct file * filp,void * dirent,filldir_t filler)
{
ffff800000810639:	f3 0f 1e fa          	endbr64 
ffff80000081063d:	55                   	push   rbp
ffff80000081063e:	48 89 e5             	mov    rbp,rsp
ffff800000810641:	41 57                	push   r15
ffff800000810643:	53                   	push   rbx
ffff800000810644:	48 83 c4 80          	add    rsp,0xffffffffffffff80
ffff800000810648:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000810648 <FAT32_readdir+0xf>
ffff80000081064f:	49 bb f0 ec 00 00 00 	movabs r11,0xecf0
ffff800000810656:	00 00 00 
ffff800000810659:	4c 01 db             	add    rbx,r11
ffff80000081065c:	48 89 7d 88          	mov    QWORD PTR [rbp-0x78],rdi
ffff800000810660:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
ffff800000810664:	48 89 95 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:282
	struct FAT32_inode_info * finode = filp->dentry->dir_inode->private_index_info;
ffff80000081066b:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000081066f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000810673:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000810677:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff80000081067b:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:283
	struct FAT32_sb_info * fsbi = filp->dentry->dir_inode->sb->private_sb_info;
ffff80000081067f:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000810683:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000810687:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000081068b:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000081068f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000810693:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:285

	unsigned int cluster = 0;
ffff800000810697:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:286
	unsigned long sector = 0;
ffff80000081069e:	48 c7 45 a0 00 00 00 	mov    QWORD PTR [rbp-0x60],0x0
ffff8000008106a5:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:287
	unsigned char * buf =NULL; 
ffff8000008106a6:	48 c7 45 98 00 00 00 	mov    QWORD PTR [rbp-0x68],0x0
ffff8000008106ad:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:288
	char *name = NULL;
ffff8000008106ae:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff8000008106b5:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:289
	int namelen = 0;
ffff8000008106b6:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:290
	int i = 0,j = 0,x = 0,y = 0;
ffff8000008106bd:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [rbp-0x28],0x0
ffff8000008106c4:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x0
ffff8000008106cb:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
ffff8000008106d2:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:291
	struct FAT32_Directory * tmpdentry = NULL;
ffff8000008106d9:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
ffff8000008106e0:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:292
	struct FAT32_LongDirectory * tmpldentry = NULL;
ffff8000008106e1:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffff8000008106e8:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:294

	buf = kmalloc(fsbi->bytes_per_cluster, 0);
ffff8000008106e9:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008106ed:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff8000008106f1:	be 00 00 00 00       	mov    esi,0x0
ffff8000008106f6:	48 89 c7             	mov    rdi,rax
ffff8000008106f9:	49 89 df             	mov    r15,rbx
ffff8000008106fc:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810701:	48 ba 13 2c fe ff ff 	movabs rdx,0xfffffffffffe2c13
ffff800000810708:	ff ff ff 
ffff80000081070b:	48 01 da             	add    rdx,rbx
ffff80000081070e:	ff d2                	call   rdx
ffff800000810710:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:296

	cluster = finode->first_cluster;
ffff800000810714:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000810718:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000081071b:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:298

	j = filp->position/fsbi->bytes_per_cluster;
ffff80000081071e:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000810722:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810725:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff800000810729:	48 8b 72 18          	mov    rsi,QWORD PTR [rdx+0x18]
ffff80000081072d:	48 99                	cqo    
ffff80000081072f:	48 f7 fe             	idiv   rsi
ffff800000810732:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:300
	
	for(i = 0;i<j;i++)
ffff800000810735:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [rbp-0x28],0x0
ffff80000081073c:	eb 60                	jmp    ffff80000081079e <FAT32_readdir+0x165>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:302
	{
		cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff80000081073e:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000810741:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810745:	89 d6                	mov    esi,edx
ffff800000810747:	48 89 c7             	mov    rdi,rax
ffff80000081074a:	49 89 df             	mov    r15,rbx
ffff80000081074d:	48 b8 3d 04 ff ff ff 	movabs rax,0xffffffffffff043d
ffff800000810754:	ff ff ff 
ffff800000810757:	48 01 d8             	add    rax,rbx
ffff80000081075a:	ff d0                	call   rax
ffff80000081075c:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:303
		if(cluster > 0x0ffffff7)
ffff80000081075f:	81 7d ec f7 ff ff 0f 	cmp    DWORD PTR [rbp-0x14],0xffffff7
ffff800000810766:	76 32                	jbe    ffff80000081079a <FAT32_readdir+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:305
		{
			printf("FAT32 FS(readdir) cluster didn`t exist\n");
ffff800000810768:	48 b8 88 ca ff ff ff 	movabs rax,0xffffffffffffca88
ffff80000081076f:	ff ff ff 
ffff800000810772:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000810776:	48 89 c7             	mov    rdi,rax
ffff800000810779:	49 89 df             	mov    r15,rbx
ffff80000081077c:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810781:	48 ba 92 23 fe ff ff 	movabs rdx,0xfffffffffffe2392
ffff800000810788:	ff ff ff 
ffff80000081078b:	48 01 da             	add    rdx,rbx
ffff80000081078e:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:306
			return NULL;
ffff800000810790:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810795:	e9 1a 06 00 00       	jmp    ffff800000810db4 <FAT32_readdir+0x77b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:300 (discriminator 2)
	for(i = 0;i<j;i++)
ffff80000081079a:	83 45 d8 01          	add    DWORD PTR [rbp-0x28],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:300 (discriminator 1)
ffff80000081079e:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff8000008107a1:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
ffff8000008107a4:	7c 98                	jl     ffff80000081073e <FAT32_readdir+0x105>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:310
		}
	}

next_cluster:
ffff8000008107a6:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:311
	sector = fsbi->Data_firstsector + (cluster - 2) * fsbi->sector_per_cluster;
ffff8000008107a7:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008107ab:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
ffff8000008107af:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008107b2:	83 e8 02             	sub    eax,0x2
ffff8000008107b5:	89 c1                	mov    ecx,eax
ffff8000008107b7:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008107bb:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008107bf:	48 0f af c1          	imul   rax,rcx
ffff8000008107c3:	48 01 d0             	add    rax,rdx
ffff8000008107c6:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:312
	int r=request(DISK_MAJOR_MAJOR,DISKREQ_READ,sector,fsbi->sector_per_cluster,(unsigned char *)buf);
ffff8000008107ca:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008107ce:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008107d2:	89 c1                	mov    ecx,eax
ffff8000008107d4:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff8000008107d8:	89 c2                	mov    edx,eax
ffff8000008107da:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008107de:	49 89 c0             	mov    r8,rax
ffff8000008107e1:	be 00 00 00 00       	mov    esi,0x0
ffff8000008107e6:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008107eb:	49 89 df             	mov    r15,rbx
ffff8000008107ee:	48 b8 56 f1 fe ff ff 	movabs rax,0xfffffffffffef156
ffff8000008107f5:	ff ff ff 
ffff8000008107f8:	48 01 d8             	add    rax,rbx
ffff8000008107fb:	ff d0                	call   rax
ffff8000008107fd:	89 45 94             	mov    DWORD PTR [rbp-0x6c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:313
    if(!chk_result(r))
ffff800000810800:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
ffff800000810803:	89 c7                	mov    edi,eax
ffff800000810805:	49 89 df             	mov    r15,rbx
ffff800000810808:	48 b8 ab fb fe ff ff 	movabs rax,0xfffffffffffefbab
ffff80000081080f:	ff ff ff 
ffff800000810812:	48 01 d8             	add    rax,rbx
ffff800000810815:	ff d0                	call   rax
ffff800000810817:	85 c0                	test   eax,eax
ffff800000810819:	75 4b                	jne    ffff800000810866 <FAT32_readdir+0x22d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:315
	{
		printf("FAT32 FS(readdir) read disk ERROR!!!!!!!!!!\n");
ffff80000081081b:	48 b8 b0 ca ff ff ff 	movabs rax,0xffffffffffffcab0
ffff800000810822:	ff ff ff 
ffff800000810825:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000810829:	48 89 c7             	mov    rdi,rax
ffff80000081082c:	49 89 df             	mov    r15,rbx
ffff80000081082f:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810834:	48 ba 92 23 fe ff ff 	movabs rdx,0xfffffffffffe2392
ffff80000081083b:	ff ff ff 
ffff80000081083e:	48 01 da             	add    rdx,rbx
ffff800000810841:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:316
        kmfree(buf);
ffff800000810843:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000810847:	48 89 c7             	mov    rdi,rax
ffff80000081084a:	49 89 df             	mov    r15,rbx
ffff80000081084d:	48 b8 82 2f fe ff ff 	movabs rax,0xfffffffffffe2f82
ffff800000810854:	ff ff ff 
ffff800000810857:	48 01 d8             	add    rax,rbx
ffff80000081085a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:317
		return NULL;
ffff80000081085c:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810861:	e9 4e 05 00 00       	jmp    ffff800000810db4 <FAT32_readdir+0x77b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:320
	}

	tmpdentry = (struct FAT32_Directory *)(buf + filp->position%fsbi->bytes_per_cluster);
ffff800000810866:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000081086a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000081086d:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff800000810871:	48 8b 4a 18          	mov    rcx,QWORD PTR [rdx+0x18]
ffff800000810875:	48 99                	cqo    
ffff800000810877:	48 f7 f9             	idiv   rcx
ffff80000081087a:	48 89 d0             	mov    rax,rdx
ffff80000081087d:	48 89 c2             	mov    rdx,rax
ffff800000810880:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000810884:	48 01 d0             	add    rax,rdx
ffff800000810887:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:322

	for(i = filp->position%fsbi->bytes_per_cluster;i < fsbi->bytes_per_cluster;i += 32,tmpdentry++,filp->position += 32)
ffff80000081088b:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000081088f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810892:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff800000810896:	48 8b 4a 18          	mov    rcx,QWORD PTR [rdx+0x18]
ffff80000081089a:	48 99                	cqo    
ffff80000081089c:	48 f7 f9             	idiv   rcx
ffff80000081089f:	48 89 d0             	mov    rax,rdx
ffff8000008108a2:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
ffff8000008108a5:	e9 66 04 00 00       	jmp    ffff800000810d10 <FAT32_readdir+0x6d7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:324
	{
		if(tmpdentry->DIR_Attr == ATTR_LONG_NAME)
ffff8000008108aa:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008108ae:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff8000008108b2:	3c 0f                	cmp    al,0xf
ffff8000008108b4:	0f 84 37 04 00 00    	je     ffff800000810cf1 <FAT32_readdir+0x6b8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:326
			continue;
		if(tmpdentry->DIR_Name[0] == 0xe5 || tmpdentry->DIR_Name[0] == 0x00 || tmpdentry->DIR_Name[0] == 0x05)
ffff8000008108ba:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008108be:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008108c1:	3c e5                	cmp    al,0xe5
ffff8000008108c3:	0f 84 2b 04 00 00    	je     ffff800000810cf4 <FAT32_readdir+0x6bb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:326 (discriminator 2)
ffff8000008108c9:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008108cd:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008108d0:	84 c0                	test   al,al
ffff8000008108d2:	0f 84 1c 04 00 00    	je     ffff800000810cf4 <FAT32_readdir+0x6bb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:326 (discriminator 4)
ffff8000008108d8:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008108dc:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008108df:	3c 05                	cmp    al,0x5
ffff8000008108e1:	0f 84 0d 04 00 00    	je     ffff800000810cf4 <FAT32_readdir+0x6bb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:329
			continue;

		namelen = 0;
ffff8000008108e7:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:330
		tmpldentry = (struct FAT32_LongDirectory *)tmpdentry-1;
ffff8000008108ee:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008108f2:	48 83 e8 20          	sub    rax,0x20
ffff8000008108f6:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:332

		if(tmpldentry->LDIR_Attr == ATTR_LONG_NAME && tmpldentry->LDIR_Ord != 0xe5 && tmpldentry->LDIR_Ord != 0x00 && tmpldentry->LDIR_Ord != 0x05)
ffff8000008108fa:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008108fe:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff800000810902:	3c 0f                	cmp    al,0xf
ffff800000810904:	0f 85 44 02 00 00    	jne    ffff800000810b4e <FAT32_readdir+0x515>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:332 (discriminator 1)
ffff80000081090a:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081090e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810911:	3c e5                	cmp    al,0xe5
ffff800000810913:	0f 84 35 02 00 00    	je     ffff800000810b4e <FAT32_readdir+0x515>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:332 (discriminator 2)
ffff800000810919:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081091d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810920:	84 c0                	test   al,al
ffff800000810922:	0f 84 26 02 00 00    	je     ffff800000810b4e <FAT32_readdir+0x515>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:332 (discriminator 3)
ffff800000810928:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081092c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081092f:	3c 05                	cmp    al,0x5
ffff800000810931:	0f 84 17 02 00 00    	je     ffff800000810b4e <FAT32_readdir+0x515>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:334
		{
			j = 0;
ffff800000810937:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:336
			//long file/dir name read
			while(tmpldentry->LDIR_Attr == ATTR_LONG_NAME  && tmpldentry->LDIR_Ord != 0xe5 && tmpldentry->LDIR_Ord != 0x00 && tmpldentry->LDIR_Ord != 0x05)
ffff80000081093e:	eb 1a                	jmp    ffff80000081095a <FAT32_readdir+0x321>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:338
			{
				j++;
ffff800000810940:	83 45 d4 01          	add    DWORD PTR [rbp-0x2c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:339
				if(tmpldentry->LDIR_Ord & 0x40)
ffff800000810944:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810948:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081094b:	0f b6 c0             	movzx  eax,al
ffff80000081094e:	83 e0 40             	and    eax,0x40
ffff800000810951:	85 c0                	test   eax,eax
ffff800000810953:	75 34                	jne    ffff800000810989 <FAT32_readdir+0x350>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:341
					break;
				tmpldentry --;
ffff800000810955:	48 83 6d b8 20       	sub    QWORD PTR [rbp-0x48],0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:336
			while(tmpldentry->LDIR_Attr == ATTR_LONG_NAME  && tmpldentry->LDIR_Ord != 0xe5 && tmpldentry->LDIR_Ord != 0x00 && tmpldentry->LDIR_Ord != 0x05)
ffff80000081095a:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081095e:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff800000810962:	3c 0f                	cmp    al,0xf
ffff800000810964:	75 24                	jne    ffff80000081098a <FAT32_readdir+0x351>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:336 (discriminator 1)
ffff800000810966:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081096a:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081096d:	3c e5                	cmp    al,0xe5
ffff80000081096f:	74 19                	je     ffff80000081098a <FAT32_readdir+0x351>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:336 (discriminator 2)
ffff800000810971:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810975:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810978:	84 c0                	test   al,al
ffff80000081097a:	74 0e                	je     ffff80000081098a <FAT32_readdir+0x351>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:336 (discriminator 3)
ffff80000081097c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810980:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810983:	3c 05                	cmp    al,0x5
ffff800000810985:	75 b9                	jne    ffff800000810940 <FAT32_readdir+0x307>
ffff800000810987:	eb 01                	jmp    ffff80000081098a <FAT32_readdir+0x351>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:340
					break;
ffff800000810989:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:344
			}

			name = kmalloc(j * 13 + 1, 0);
ffff80000081098a:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff80000081098d:	89 d0                	mov    eax,edx
ffff80000081098f:	01 c0                	add    eax,eax
ffff800000810991:	01 d0                	add    eax,edx
ffff800000810993:	c1 e0 02             	shl    eax,0x2
ffff800000810996:	01 d0                	add    eax,edx
ffff800000810998:	83 c0 01             	add    eax,0x1
ffff80000081099b:	be 00 00 00 00       	mov    esi,0x0
ffff8000008109a0:	89 c7                	mov    edi,eax
ffff8000008109a2:	49 89 df             	mov    r15,rbx
ffff8000008109a5:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008109aa:	48 ba 13 2c fe ff ff 	movabs rdx,0xfffffffffffe2c13
ffff8000008109b1:	ff ff ff 
ffff8000008109b4:	48 01 da             	add    rdx,rbx
ffff8000008109b7:	ff d2                	call   rdx
ffff8000008109b9:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:345
			memset(name,0,j*13+1);
ffff8000008109bd:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff8000008109c0:	89 d0                	mov    eax,edx
ffff8000008109c2:	01 c0                	add    eax,eax
ffff8000008109c4:	01 d0                	add    eax,edx
ffff8000008109c6:	c1 e0 02             	shl    eax,0x2
ffff8000008109c9:	01 d0                	add    eax,edx
ffff8000008109cb:	83 c0 01             	add    eax,0x1
ffff8000008109ce:	89 c2                	mov    edx,eax
ffff8000008109d0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008109d4:	be 00 00 00 00       	mov    esi,0x0
ffff8000008109d9:	48 89 c7             	mov    rdi,rax
ffff8000008109dc:	49 89 df             	mov    r15,rbx
ffff8000008109df:	48 b8 d6 3e ff ff ff 	movabs rax,0xffffffffffff3ed6
ffff8000008109e6:	ff ff ff 
ffff8000008109e9:	48 01 d8             	add    rax,rbx
ffff8000008109ec:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:346
			tmpldentry = (struct FAT32_LongDirectory *)tmpdentry-1;
ffff8000008109ee:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008109f2:	48 83 e8 20          	sub    rax,0x20
ffff8000008109f6:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:348

			for(x = 0;x<j;x++,tmpldentry --)
ffff8000008109fa:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
ffff800000810a01:	e9 37 01 00 00       	jmp    ffff800000810b3d <FAT32_readdir+0x504>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:350
			{
				for(y = 0;y<5;y++)
ffff800000810a06:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
ffff800000810a0d:	eb 53                	jmp    ffff800000810a62 <FAT32_readdir+0x429>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:351
					if(tmpldentry->LDIR_Name1[y] != 0xffff && tmpldentry->LDIR_Name1[y] != 0x0000)
ffff800000810a0f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810a13:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff800000810a16:	48 63 d2             	movsxd rdx,edx
ffff800000810a19:	0f b7 44 50 01       	movzx  eax,WORD PTR [rax+rdx*2+0x1]
ffff800000810a1e:	66 83 f8 ff          	cmp    ax,0xffff
ffff800000810a22:	74 3a                	je     ffff800000810a5e <FAT32_readdir+0x425>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:351 (discriminator 1)
ffff800000810a24:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810a28:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff800000810a2b:	48 63 d2             	movsxd rdx,edx
ffff800000810a2e:	0f b7 44 50 01       	movzx  eax,WORD PTR [rax+rdx*2+0x1]
ffff800000810a33:	66 85 c0             	test   ax,ax
ffff800000810a36:	74 26                	je     ffff800000810a5e <FAT32_readdir+0x425>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:352
						name[namelen++] = (char)tmpldentry->LDIR_Name1[y];
ffff800000810a38:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810a3c:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff800000810a3f:	48 63 d2             	movsxd rdx,edx
ffff800000810a42:	0f b7 4c 50 01       	movzx  ecx,WORD PTR [rax+rdx*2+0x1]
ffff800000810a47:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000810a4a:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000810a4d:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff800000810a50:	48 63 d0             	movsxd rdx,eax
ffff800000810a53:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000810a57:	48 01 d0             	add    rax,rdx
ffff800000810a5a:	89 ca                	mov    edx,ecx
ffff800000810a5c:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:350 (discriminator 2)
				for(y = 0;y<5;y++)
ffff800000810a5e:	83 45 cc 01          	add    DWORD PTR [rbp-0x34],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:350 (discriminator 1)
ffff800000810a62:	83 7d cc 04          	cmp    DWORD PTR [rbp-0x34],0x4
ffff800000810a66:	7e a7                	jle    ffff800000810a0f <FAT32_readdir+0x3d6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:354

				for(y = 0;y<6;y++)
ffff800000810a68:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
ffff800000810a6f:	eb 53                	jmp    ffff800000810ac4 <FAT32_readdir+0x48b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:355
					if(tmpldentry->LDIR_Name2[y] != 0xffff && tmpldentry->LDIR_Name1[y] != 0x0000)
ffff800000810a71:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810a75:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff800000810a78:	48 63 d2             	movsxd rdx,edx
ffff800000810a7b:	0f b7 44 50 0e       	movzx  eax,WORD PTR [rax+rdx*2+0xe]
ffff800000810a80:	66 83 f8 ff          	cmp    ax,0xffff
ffff800000810a84:	74 3a                	je     ffff800000810ac0 <FAT32_readdir+0x487>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:355 (discriminator 1)
ffff800000810a86:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810a8a:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff800000810a8d:	48 63 d2             	movsxd rdx,edx
ffff800000810a90:	0f b7 44 50 01       	movzx  eax,WORD PTR [rax+rdx*2+0x1]
ffff800000810a95:	66 85 c0             	test   ax,ax
ffff800000810a98:	74 26                	je     ffff800000810ac0 <FAT32_readdir+0x487>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:356
						name[namelen++] = (char)tmpldentry->LDIR_Name2[y];
ffff800000810a9a:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810a9e:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff800000810aa1:	48 63 d2             	movsxd rdx,edx
ffff800000810aa4:	0f b7 4c 50 0e       	movzx  ecx,WORD PTR [rax+rdx*2+0xe]
ffff800000810aa9:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000810aac:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000810aaf:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff800000810ab2:	48 63 d0             	movsxd rdx,eax
ffff800000810ab5:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000810ab9:	48 01 d0             	add    rax,rdx
ffff800000810abc:	89 ca                	mov    edx,ecx
ffff800000810abe:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:354 (discriminator 2)
				for(y = 0;y<6;y++)
ffff800000810ac0:	83 45 cc 01          	add    DWORD PTR [rbp-0x34],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:354 (discriminator 1)
ffff800000810ac4:	83 7d cc 05          	cmp    DWORD PTR [rbp-0x34],0x5
ffff800000810ac8:	7e a7                	jle    ffff800000810a71 <FAT32_readdir+0x438>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:358

				for(y = 0;y<2;y++)
ffff800000810aca:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
ffff800000810ad1:	eb 5b                	jmp    ffff800000810b2e <FAT32_readdir+0x4f5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:359
					if(tmpldentry->LDIR_Name3[y] != 0xffff && tmpldentry->LDIR_Name1[y] != 0x0000)
ffff800000810ad3:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810ad7:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff800000810ada:	48 63 d2             	movsxd rdx,edx
ffff800000810add:	48 83 c2 08          	add    rdx,0x8
ffff800000810ae1:	0f b7 44 50 0c       	movzx  eax,WORD PTR [rax+rdx*2+0xc]
ffff800000810ae6:	66 83 f8 ff          	cmp    ax,0xffff
ffff800000810aea:	74 3e                	je     ffff800000810b2a <FAT32_readdir+0x4f1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:359 (discriminator 1)
ffff800000810aec:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810af0:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff800000810af3:	48 63 d2             	movsxd rdx,edx
ffff800000810af6:	0f b7 44 50 01       	movzx  eax,WORD PTR [rax+rdx*2+0x1]
ffff800000810afb:	66 85 c0             	test   ax,ax
ffff800000810afe:	74 2a                	je     ffff800000810b2a <FAT32_readdir+0x4f1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:360
						name[namelen++] = (char)tmpldentry->LDIR_Name3[y];
ffff800000810b00:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810b04:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff800000810b07:	48 63 d2             	movsxd rdx,edx
ffff800000810b0a:	48 83 c2 08          	add    rdx,0x8
ffff800000810b0e:	0f b7 4c 50 0c       	movzx  ecx,WORD PTR [rax+rdx*2+0xc]
ffff800000810b13:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000810b16:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000810b19:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff800000810b1c:	48 63 d0             	movsxd rdx,eax
ffff800000810b1f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000810b23:	48 01 d0             	add    rax,rdx
ffff800000810b26:	89 ca                	mov    edx,ecx
ffff800000810b28:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:358 (discriminator 2)
				for(y = 0;y<2;y++)
ffff800000810b2a:	83 45 cc 01          	add    DWORD PTR [rbp-0x34],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:358 (discriminator 1)
ffff800000810b2e:	83 7d cc 01          	cmp    DWORD PTR [rbp-0x34],0x1
ffff800000810b32:	7e 9f                	jle    ffff800000810ad3 <FAT32_readdir+0x49a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:348 (discriminator 2)
			for(x = 0;x<j;x++,tmpldentry --)
ffff800000810b34:	83 45 d0 01          	add    DWORD PTR [rbp-0x30],0x1
ffff800000810b38:	48 83 6d b8 20       	sub    QWORD PTR [rbp-0x48],0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:348 (discriminator 1)
ffff800000810b3d:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000810b40:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
ffff800000810b43:	0f 8c bd fe ff ff    	jl     ffff800000810a06 <FAT32_readdir+0x3cd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:362
			}
			goto find_lookup_success;
ffff800000810b49:	e9 2c 02 00 00       	jmp    ffff800000810d7a <FAT32_readdir+0x741>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:365
		}

		name = kmalloc(15, 0);
ffff800000810b4e:	be 00 00 00 00       	mov    esi,0x0
ffff800000810b53:	bf 0f 00 00 00       	mov    edi,0xf
ffff800000810b58:	49 89 df             	mov    r15,rbx
ffff800000810b5b:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810b60:	48 ba 13 2c fe ff ff 	movabs rdx,0xfffffffffffe2c13
ffff800000810b67:	ff ff ff 
ffff800000810b6a:	48 01 da             	add    rdx,rbx
ffff800000810b6d:	ff d2                	call   rdx
ffff800000810b6f:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:366
		memset(name,0,15);
ffff800000810b73:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000810b77:	ba 0f 00 00 00       	mov    edx,0xf
ffff800000810b7c:	be 00 00 00 00       	mov    esi,0x0
ffff800000810b81:	48 89 c7             	mov    rdi,rax
ffff800000810b84:	49 89 df             	mov    r15,rbx
ffff800000810b87:	48 b8 d6 3e ff ff ff 	movabs rax,0xffffffffffff3ed6
ffff800000810b8e:	ff ff ff 
ffff800000810b91:	48 01 d8             	add    rax,rbx
ffff800000810b94:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:368
		//short file/dir base name compare
		for(x=0;x<8;x++)
ffff800000810b96:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
ffff800000810b9d:	eb 74                	jmp    ffff800000810c13 <FAT32_readdir+0x5da>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:370
		{
			if(tmpdentry->DIR_Name[x] == ' ')
ffff800000810b9f:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000810ba3:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000810ba6:	48 98                	cdqe   
ffff800000810ba8:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000810bac:	3c 20                	cmp    al,0x20
ffff800000810bae:	74 6b                	je     ffff800000810c1b <FAT32_readdir+0x5e2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:372
				break;
			if(tmpdentry->DIR_NTRes & LOWERCASE_BASE)
ffff800000810bb0:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000810bb4:	0f b6 40 0c          	movzx  eax,BYTE PTR [rax+0xc]
ffff800000810bb8:	0f b6 c0             	movzx  eax,al
ffff800000810bbb:	83 e0 08             	and    eax,0x8
ffff800000810bbe:	85 c0                	test   eax,eax
ffff800000810bc0:	74 29                	je     ffff800000810beb <FAT32_readdir+0x5b2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:373
				name[namelen++] = tmpdentry->DIR_Name[x] + 32;
ffff800000810bc2:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000810bc6:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000810bc9:	48 98                	cdqe   
ffff800000810bcb:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000810bcf:	8d 48 20             	lea    ecx,[rax+0x20]
ffff800000810bd2:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000810bd5:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000810bd8:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff800000810bdb:	48 63 d0             	movsxd rdx,eax
ffff800000810bde:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000810be2:	48 01 d0             	add    rax,rdx
ffff800000810be5:	89 ca                	mov    edx,ecx
ffff800000810be7:	88 10                	mov    BYTE PTR [rax],dl
ffff800000810be9:	eb 24                	jmp    ffff800000810c0f <FAT32_readdir+0x5d6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:375
			else
				name[namelen++] = tmpdentry->DIR_Name[x];
ffff800000810beb:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000810bef:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000810bf2:	48 98                	cdqe   
ffff800000810bf4:	0f b6 0c 02          	movzx  ecx,BYTE PTR [rdx+rax*1]
ffff800000810bf8:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000810bfb:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000810bfe:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff800000810c01:	48 63 d0             	movsxd rdx,eax
ffff800000810c04:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000810c08:	48 01 d0             	add    rax,rdx
ffff800000810c0b:	89 ca                	mov    edx,ecx
ffff800000810c0d:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:368 (discriminator 2)
		for(x=0;x<8;x++)
ffff800000810c0f:	83 45 d0 01          	add    DWORD PTR [rbp-0x30],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:368 (discriminator 1)
ffff800000810c13:	83 7d d0 07          	cmp    DWORD PTR [rbp-0x30],0x7
ffff800000810c17:	7e 86                	jle    ffff800000810b9f <FAT32_readdir+0x566>
ffff800000810c19:	eb 01                	jmp    ffff800000810c1c <FAT32_readdir+0x5e3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:371
				break;
ffff800000810c1b:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:378
		}

		if(tmpdentry->DIR_Attr & ATTR_DIRECTORY)
ffff800000810c1c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000810c20:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff800000810c24:	0f b6 c0             	movzx  eax,al
ffff800000810c27:	83 e0 10             	and    eax,0x10
ffff800000810c2a:	85 c0                	test   eax,eax
ffff800000810c2c:	0f 85 44 01 00 00    	jne    ffff800000810d76 <FAT32_readdir+0x73d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:381
			goto find_lookup_success;

		name[namelen++] = '.';
ffff800000810c32:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000810c35:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000810c38:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff800000810c3b:	48 63 d0             	movsxd rdx,eax
ffff800000810c3e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000810c42:	48 01 d0             	add    rax,rdx
ffff800000810c45:	c6 00 2e             	mov    BYTE PTR [rax],0x2e
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:384

		//short file ext name compare
		for(x=8;x<11;x++)
ffff800000810c48:	c7 45 d0 08 00 00 00 	mov    DWORD PTR [rbp-0x30],0x8
ffff800000810c4f:	eb 74                	jmp    ffff800000810cc5 <FAT32_readdir+0x68c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:386
		{
			if(tmpdentry->DIR_Name[x] == ' ')
ffff800000810c51:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000810c55:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000810c58:	48 98                	cdqe   
ffff800000810c5a:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000810c5e:	3c 20                	cmp    al,0x20
ffff800000810c60:	74 6b                	je     ffff800000810ccd <FAT32_readdir+0x694>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:388
				break;
			if(tmpdentry->DIR_NTRes & LOWERCASE_EXT)
ffff800000810c62:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000810c66:	0f b6 40 0c          	movzx  eax,BYTE PTR [rax+0xc]
ffff800000810c6a:	0f b6 c0             	movzx  eax,al
ffff800000810c6d:	83 e0 10             	and    eax,0x10
ffff800000810c70:	85 c0                	test   eax,eax
ffff800000810c72:	74 29                	je     ffff800000810c9d <FAT32_readdir+0x664>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:389
				name[namelen++] = tmpdentry->DIR_Name[x] + 32;
ffff800000810c74:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000810c78:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000810c7b:	48 98                	cdqe   
ffff800000810c7d:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000810c81:	8d 48 20             	lea    ecx,[rax+0x20]
ffff800000810c84:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000810c87:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000810c8a:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff800000810c8d:	48 63 d0             	movsxd rdx,eax
ffff800000810c90:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000810c94:	48 01 d0             	add    rax,rdx
ffff800000810c97:	89 ca                	mov    edx,ecx
ffff800000810c99:	88 10                	mov    BYTE PTR [rax],dl
ffff800000810c9b:	eb 24                	jmp    ffff800000810cc1 <FAT32_readdir+0x688>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:391
			else
				name[namelen++] = tmpdentry->DIR_Name[x];
ffff800000810c9d:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000810ca1:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000810ca4:	48 98                	cdqe   
ffff800000810ca6:	0f b6 0c 02          	movzx  ecx,BYTE PTR [rdx+rax*1]
ffff800000810caa:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000810cad:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000810cb0:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff800000810cb3:	48 63 d0             	movsxd rdx,eax
ffff800000810cb6:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000810cba:	48 01 d0             	add    rax,rdx
ffff800000810cbd:	89 ca                	mov    edx,ecx
ffff800000810cbf:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:384 (discriminator 2)
		for(x=8;x<11;x++)
ffff800000810cc1:	83 45 d0 01          	add    DWORD PTR [rbp-0x30],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:384 (discriminator 1)
ffff800000810cc5:	83 7d d0 0a          	cmp    DWORD PTR [rbp-0x30],0xa
ffff800000810cc9:	7e 86                	jle    ffff800000810c51 <FAT32_readdir+0x618>
ffff800000810ccb:	eb 01                	jmp    ffff800000810cce <FAT32_readdir+0x695>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:387
				break;
ffff800000810ccd:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:393
		}
		if(x == 8)
ffff800000810cce:	83 7d d0 08          	cmp    DWORD PTR [rbp-0x30],0x8
ffff800000810cd2:	0f 85 a1 00 00 00    	jne    ffff800000810d79 <FAT32_readdir+0x740>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:394
			name[--namelen] = 0;
ffff800000810cd8:	83 6d dc 01          	sub    DWORD PTR [rbp-0x24],0x1
ffff800000810cdc:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000810cdf:	48 63 d0             	movsxd rdx,eax
ffff800000810ce2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000810ce6:	48 01 d0             	add    rax,rdx
ffff800000810ce9:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:395
		goto find_lookup_success;
ffff800000810cec:	e9 88 00 00 00       	jmp    ffff800000810d79 <FAT32_readdir+0x740>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:325
			continue;
ffff800000810cf1:	90                   	nop
ffff800000810cf2:	eb 01                	jmp    ffff800000810cf5 <FAT32_readdir+0x6bc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:327
			continue;
ffff800000810cf4:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:322 (discriminator 2)
	for(i = filp->position%fsbi->bytes_per_cluster;i < fsbi->bytes_per_cluster;i += 32,tmpdentry++,filp->position += 32)
ffff800000810cf5:	83 45 d8 20          	add    DWORD PTR [rbp-0x28],0x20
ffff800000810cf9:	48 83 45 c0 20       	add    QWORD PTR [rbp-0x40],0x20
ffff800000810cfe:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000810d02:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810d05:	48 8d 50 20          	lea    rdx,[rax+0x20]
ffff800000810d09:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000810d0d:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:322 (discriminator 1)
ffff800000810d10:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000810d13:	48 63 d0             	movsxd rdx,eax
ffff800000810d16:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810d1a:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000810d1e:	48 39 c2             	cmp    rdx,rax
ffff800000810d21:	0f 8c 83 fb ff ff    	jl     ffff8000008108aa <FAT32_readdir+0x271>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:398
	}
	
	cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff800000810d27:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000810d2a:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000810d2e:	89 d6                	mov    esi,edx
ffff800000810d30:	48 89 c7             	mov    rdi,rax
ffff800000810d33:	49 89 df             	mov    r15,rbx
ffff800000810d36:	48 b8 3d 04 ff ff ff 	movabs rax,0xffffffffffff043d
ffff800000810d3d:	ff ff ff 
ffff800000810d40:	48 01 d8             	add    rax,rbx
ffff800000810d43:	ff d0                	call   rax
ffff800000810d45:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:399
	if(cluster < 0x0ffffff7)
ffff800000810d48:	81 7d ec f6 ff ff 0f 	cmp    DWORD PTR [rbp-0x14],0xffffff6
ffff800000810d4f:	77 05                	ja     ffff800000810d56 <FAT32_readdir+0x71d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:400
		goto next_cluster;
ffff800000810d51:	e9 51 fa ff ff       	jmp    ffff8000008107a7 <FAT32_readdir+0x16e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:402

    kmfree(buf);
ffff800000810d56:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000810d5a:	48 89 c7             	mov    rdi,rax
ffff800000810d5d:	49 89 df             	mov    r15,rbx
ffff800000810d60:	48 b8 82 2f fe ff ff 	movabs rax,0xfffffffffffe2f82
ffff800000810d67:	ff ff ff 
ffff800000810d6a:	48 01 d8             	add    rax,rbx
ffff800000810d6d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:403
	return NULL;
ffff800000810d6f:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810d74:	eb 3e                	jmp    ffff800000810db4 <FAT32_readdir+0x77b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:379
			goto find_lookup_success;
ffff800000810d76:	90                   	nop
ffff800000810d77:	eb 01                	jmp    ffff800000810d7a <FAT32_readdir+0x741>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:395
		goto find_lookup_success;
ffff800000810d79:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:407

find_lookup_success:

	filp->position += 32;
ffff800000810d7a:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000810d7e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810d81:	48 8d 50 20          	lea    rdx,[rax+0x20]
ffff800000810d85:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000810d89:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:408
	return filler(dirent,name,namelen,0,0);
ffff800000810d8c:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000810d8f:	48 63 d0             	movsxd rdx,eax
ffff800000810d92:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff800000810d96:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000810d9a:	4c 8b 8d 78 ff ff ff 	mov    r9,QWORD PTR [rbp-0x88]
ffff800000810da1:	41 b8 00 00 00 00    	mov    r8d,0x0
ffff800000810da7:	b9 00 00 00 00       	mov    ecx,0x0
ffff800000810dac:	48 89 c7             	mov    rdi,rax
ffff800000810daf:	41 ff d1             	call   r9
ffff800000810db2:	48 98                	cdqe   
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:409
}
ffff800000810db4:	48 83 ec 80          	sub    rsp,0xffffffffffffff80
ffff800000810db8:	5b                   	pop    rbx
ffff800000810db9:	41 5f                	pop    r15
ffff800000810dbb:	5d                   	pop    rbp
ffff800000810dbc:	c3                   	ret    

ffff800000810dbd <FAT32_create>:
FAT32_create():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:426
	.readdir = FAT32_readdir,
};


long FAT32_create(struct index_node * inode,struct dir_entry * dentry,int mode)
{}
ffff800000810dbd:	f3 0f 1e fa          	endbr64 
ffff800000810dc1:	55                   	push   rbp
ffff800000810dc2:	48 89 e5             	mov    rbp,rsp
ffff800000810dc5:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000810dc5 <FAT32_create+0x8>
ffff800000810dcc:	49 bb 73 e5 00 00 00 	movabs r11,0xe573
ffff800000810dd3:	00 00 00 
ffff800000810dd6:	4c 01 d8             	add    rax,r11
ffff800000810dd9:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000810ddd:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000810de1:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
ffff800000810de4:	90                   	nop
ffff800000810de5:	5d                   	pop    rbp
ffff800000810de6:	c3                   	ret    

ffff800000810de7 <FAT32_lookup>:
FAT32_lookup():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:430


struct dir_entry * FAT32_lookup(struct index_node * parent_inode,struct dir_entry * dest_dentry)
{
ffff800000810de7:	f3 0f 1e fa          	endbr64 
ffff800000810deb:	55                   	push   rbp
ffff800000810dec:	48 89 e5             	mov    rbp,rsp
ffff800000810def:	41 57                	push   r15
ffff800000810df1:	53                   	push   rbx
ffff800000810df2:	48 83 ec 60          	sub    rsp,0x60
ffff800000810df6:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000810df6 <FAT32_lookup+0xf>
ffff800000810dfd:	49 bb 42 e5 00 00 00 	movabs r11,0xe542
ffff800000810e04:	00 00 00 
ffff800000810e07:	4c 01 db             	add    rbx,r11
ffff800000810e0a:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
ffff800000810e0e:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:431
	struct FAT32_inode_info * finode = parent_inode->private_index_info;
ffff800000810e12:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000810e16:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff800000810e1a:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:432
	struct FAT32_sb_info * fsbi = parent_inode->sb->private_sb_info;
ffff800000810e1e:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000810e22:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000810e26:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000810e2a:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:434

	unsigned int cluster = 0;
ffff800000810e2e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:435
	unsigned long sector = 0;
ffff800000810e35:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffff800000810e3c:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:436
	unsigned char * buf =NULL; 
ffff800000810e3d:	48 c7 45 b0 00 00 00 	mov    QWORD PTR [rbp-0x50],0x0
ffff800000810e44:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:437
	int i = 0,j = 0,x = 0;
ffff800000810e45:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff800000810e4c:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff800000810e53:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:438
	struct FAT32_Directory * tmpdentry = NULL;
ffff800000810e5a:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff800000810e61:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:439
	struct FAT32_LongDirectory * tmpldentry = NULL;
ffff800000810e62:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff800000810e69:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:440
	struct index_node * p = NULL;
ffff800000810e6a:	48 c7 45 a8 00 00 00 	mov    QWORD PTR [rbp-0x58],0x0
ffff800000810e71:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:442

	buf = kmalloc(fsbi->bytes_per_cluster, 0);
ffff800000810e72:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000810e76:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000810e7a:	be 00 00 00 00       	mov    esi,0x0
ffff800000810e7f:	48 89 c7             	mov    rdi,rax
ffff800000810e82:	49 89 df             	mov    r15,rbx
ffff800000810e85:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810e8a:	48 ba 13 2c fe ff ff 	movabs rdx,0xfffffffffffe2c13
ffff800000810e91:	ff ff ff 
ffff800000810e94:	48 01 da             	add    rdx,rbx
ffff800000810e97:	ff d2                	call   rdx
ffff800000810e99:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:444

	cluster = finode->first_cluster;
ffff800000810e9d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000810ea1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810ea4:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:447

next_cluster:
	sector = fsbi->Data_firstsector + (cluster - 2) * fsbi->sector_per_cluster;
ffff800000810ea7:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000810eab:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
ffff800000810eaf:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000810eb2:	83 e8 02             	sub    eax,0x2
ffff800000810eb5:	89 c1                	mov    ecx,eax
ffff800000810eb7:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000810ebb:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000810ebf:	48 0f af c1          	imul   rax,rcx
ffff800000810ec3:	48 01 d0             	add    rax,rdx
ffff800000810ec6:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:448
	printf("lookup cluster:0x%x,sector:0x%x\r\n",cluster,sector);
ffff800000810eca:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff800000810ece:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000810ed1:	89 c6                	mov    esi,eax
ffff800000810ed3:	48 b8 e0 ca ff ff ff 	movabs rax,0xffffffffffffcae0
ffff800000810eda:	ff ff ff 
ffff800000810edd:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000810ee1:	48 89 c7             	mov    rdi,rax
ffff800000810ee4:	49 89 df             	mov    r15,rbx
ffff800000810ee7:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810eec:	48 b9 92 23 fe ff ff 	movabs rcx,0xfffffffffffe2392
ffff800000810ef3:	ff ff ff 
ffff800000810ef6:	48 01 d9             	add    rcx,rbx
ffff800000810ef9:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:449
	int r=request(DISK_MAJOR_MAJOR,DISKREQ_READ,sector,fsbi->sector_per_cluster,(unsigned char *)buf);
ffff800000810efb:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000810eff:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000810f03:	89 c1                	mov    ecx,eax
ffff800000810f05:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810f09:	89 c2                	mov    edx,eax
ffff800000810f0b:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000810f0f:	49 89 c0             	mov    r8,rax
ffff800000810f12:	be 00 00 00 00       	mov    esi,0x0
ffff800000810f17:	bf 00 00 00 00       	mov    edi,0x0
ffff800000810f1c:	49 89 df             	mov    r15,rbx
ffff800000810f1f:	48 b8 56 f1 fe ff ff 	movabs rax,0xfffffffffffef156
ffff800000810f26:	ff ff ff 
ffff800000810f29:	48 01 d8             	add    rax,rbx
ffff800000810f2c:	ff d0                	call   rax
ffff800000810f2e:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:450
    if(!chk_result(r))
ffff800000810f31:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
ffff800000810f34:	89 c7                	mov    edi,eax
ffff800000810f36:	49 89 df             	mov    r15,rbx
ffff800000810f39:	48 b8 ab fb fe ff ff 	movabs rax,0xfffffffffffefbab
ffff800000810f40:	ff ff ff 
ffff800000810f43:	48 01 d8             	add    rax,rbx
ffff800000810f46:	ff d0                	call   rax
ffff800000810f48:	85 c0                	test   eax,eax
ffff800000810f4a:	75 4b                	jne    ffff800000810f97 <FAT32_lookup+0x1b0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:452
	{
		printf("FAT32 FS(lookup) read disk ERROR!!!!!!!!!!\n");
ffff800000810f4c:	48 b8 08 cb ff ff ff 	movabs rax,0xffffffffffffcb08
ffff800000810f53:	ff ff ff 
ffff800000810f56:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000810f5a:	48 89 c7             	mov    rdi,rax
ffff800000810f5d:	49 89 df             	mov    r15,rbx
ffff800000810f60:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810f65:	48 ba 92 23 fe ff ff 	movabs rdx,0xfffffffffffe2392
ffff800000810f6c:	ff ff ff 
ffff800000810f6f:	48 01 da             	add    rdx,rbx
ffff800000810f72:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:453
        kmfree(buf);
ffff800000810f74:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000810f78:	48 89 c7             	mov    rdi,rax
ffff800000810f7b:	49 89 df             	mov    r15,rbx
ffff800000810f7e:	48 b8 82 2f fe ff ff 	movabs rax,0xfffffffffffe2f82
ffff800000810f85:	ff ff ff 
ffff800000810f88:	48 01 d8             	add    rax,rbx
ffff800000810f8b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:454
		return NULL;
ffff800000810f8d:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810f92:	e9 5f 08 00 00       	jmp    ffff8000008117f6 <FAT32_lookup+0xa0f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:457
	}

	tmpdentry = (struct FAT32_Directory *)buf;
ffff800000810f97:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000810f9b:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:459

	for(i = 0;i < fsbi->bytes_per_cluster;i+= 32,tmpdentry++)
ffff800000810f9f:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff800000810fa6:	e9 9d 05 00 00       	jmp    ffff800000811548 <FAT32_lookup+0x761>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:461
	{
		if(tmpdentry->DIR_Attr == ATTR_LONG_NAME)
ffff800000810fab:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810faf:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff800000810fb3:	3c 0f                	cmp    al,0xf
ffff800000810fb5:	0f 84 59 05 00 00    	je     ffff800000811514 <FAT32_lookup+0x72d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:463
			continue;
		if(tmpdentry->DIR_Name[0] == 0xe5 || tmpdentry->DIR_Name[0] == 0x00 || tmpdentry->DIR_Name[0] == 0x05)
ffff800000810fbb:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810fbf:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810fc2:	3c e5                	cmp    al,0xe5
ffff800000810fc4:	0f 84 4d 05 00 00    	je     ffff800000811517 <FAT32_lookup+0x730>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:463 (discriminator 2)
ffff800000810fca:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810fce:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810fd1:	84 c0                	test   al,al
ffff800000810fd3:	0f 84 3e 05 00 00    	je     ffff800000811517 <FAT32_lookup+0x730>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:463 (discriminator 4)
ffff800000810fd9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810fdd:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000810fe0:	3c 05                	cmp    al,0x5
ffff800000810fe2:	0f 84 2f 05 00 00    	je     ffff800000811517 <FAT32_lookup+0x730>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:466
			continue;

		tmpldentry = (struct FAT32_LongDirectory *)tmpdentry-1;
ffff800000810fe8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000810fec:	48 83 e8 20          	sub    rax,0x20
ffff800000810ff0:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:467
		j = 0;
ffff800000810ff4:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:470

		//long file/dir name compare
		while(tmpldentry->LDIR_Attr == ATTR_LONG_NAME && tmpldentry->LDIR_Ord != 0xe5)
ffff800000810ffb:	e9 88 01 00 00       	jmp    ffff800000811188 <FAT32_lookup+0x3a1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:472
		{
			for(x=0;x<5;x++)
ffff800000811000:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff800000811007:	eb 6a                	jmp    ffff800000811073 <FAT32_lookup+0x28c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:474
			{
				if(j>dest_dentry->name_length && tmpldentry->LDIR_Name1[x] == 0xffff)
ffff800000811009:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000081100d:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000811010:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000811013:	7e 15                	jle    ffff80000081102a <FAT32_lookup+0x243>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:474 (discriminator 1)
ffff800000811015:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811019:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff80000081101c:	48 63 d2             	movsxd rdx,edx
ffff80000081101f:	0f b7 44 50 01       	movzx  eax,WORD PTR [rax+rdx*2+0x1]
ffff800000811024:	66 83 f8 ff          	cmp    ax,0xffff
ffff800000811028:	74 44                	je     ffff80000081106e <FAT32_lookup+0x287>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:476
					continue;
				else if(j>dest_dentry->name_length || tmpldentry->LDIR_Name1[x] != (unsigned short)(dest_dentry->name[j++]))
ffff80000081102a:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000081102e:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000811031:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000811034:	0f 8f e0 04 00 00    	jg     ffff80000081151a <FAT32_lookup+0x733>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:476 (discriminator 1)
ffff80000081103a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081103e:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff800000811041:	48 63 d2             	movsxd rdx,edx
ffff800000811044:	0f b7 4c 50 01       	movzx  ecx,WORD PTR [rax+rdx*2+0x1]
ffff800000811049:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000081104d:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff800000811050:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000811053:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000811056:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
ffff800000811059:	48 98                	cdqe   
ffff80000081105b:	48 01 f0             	add    rax,rsi
ffff80000081105e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811061:	66 98                	cbw    
ffff800000811063:	66 39 c1             	cmp    cx,ax
ffff800000811066:	0f 85 ae 04 00 00    	jne    ffff80000081151a <FAT32_lookup+0x733>
ffff80000081106c:	eb 01                	jmp    ffff80000081106f <FAT32_lookup+0x288>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:475
					continue;
ffff80000081106e:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:472 (discriminator 2)
			for(x=0;x<5;x++)
ffff80000081106f:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:472 (discriminator 1)
ffff800000811073:	83 7d e0 04          	cmp    DWORD PTR [rbp-0x20],0x4
ffff800000811077:	7e 90                	jle    ffff800000811009 <FAT32_lookup+0x222>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:479
					goto continue_cmp_fail;
			}
			for(x=0;x<6;x++)
ffff800000811079:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff800000811080:	eb 6a                	jmp    ffff8000008110ec <FAT32_lookup+0x305>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:481
			{
				if(j>dest_dentry->name_length && tmpldentry->LDIR_Name2[x] == 0xffff)
ffff800000811082:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811086:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000811089:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff80000081108c:	7e 15                	jle    ffff8000008110a3 <FAT32_lookup+0x2bc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:481 (discriminator 1)
ffff80000081108e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811092:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff800000811095:	48 63 d2             	movsxd rdx,edx
ffff800000811098:	0f b7 44 50 0e       	movzx  eax,WORD PTR [rax+rdx*2+0xe]
ffff80000081109d:	66 83 f8 ff          	cmp    ax,0xffff
ffff8000008110a1:	74 44                	je     ffff8000008110e7 <FAT32_lookup+0x300>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:483
					continue;
				else if(j>dest_dentry->name_length || tmpldentry->LDIR_Name2[x] != (unsigned short)(dest_dentry->name[j++]))
ffff8000008110a3:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008110a7:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff8000008110aa:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff8000008110ad:	0f 8f 6a 04 00 00    	jg     ffff80000081151d <FAT32_lookup+0x736>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:483 (discriminator 1)
ffff8000008110b3:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008110b7:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff8000008110ba:	48 63 d2             	movsxd rdx,edx
ffff8000008110bd:	0f b7 4c 50 0e       	movzx  ecx,WORD PTR [rax+rdx*2+0xe]
ffff8000008110c2:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008110c6:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff8000008110c9:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008110cc:	8d 50 01             	lea    edx,[rax+0x1]
ffff8000008110cf:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
ffff8000008110d2:	48 98                	cdqe   
ffff8000008110d4:	48 01 f0             	add    rax,rsi
ffff8000008110d7:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008110da:	66 98                	cbw    
ffff8000008110dc:	66 39 c1             	cmp    cx,ax
ffff8000008110df:	0f 85 38 04 00 00    	jne    ffff80000081151d <FAT32_lookup+0x736>
ffff8000008110e5:	eb 01                	jmp    ffff8000008110e8 <FAT32_lookup+0x301>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:482
					continue;
ffff8000008110e7:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:479 (discriminator 2)
			for(x=0;x<6;x++)
ffff8000008110e8:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:479 (discriminator 1)
ffff8000008110ec:	83 7d e0 05          	cmp    DWORD PTR [rbp-0x20],0x5
ffff8000008110f0:	7e 90                	jle    ffff800000811082 <FAT32_lookup+0x29b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:486
					goto continue_cmp_fail;
			}
			for(x=0;x<2;x++)
ffff8000008110f2:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff8000008110f9:	eb 72                	jmp    ffff80000081116d <FAT32_lookup+0x386>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:488
			{
				if(j>dest_dentry->name_length && tmpldentry->LDIR_Name3[x] == 0xffff)
ffff8000008110fb:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008110ff:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000811102:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000811105:	7e 19                	jle    ffff800000811120 <FAT32_lookup+0x339>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:488 (discriminator 1)
ffff800000811107:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081110b:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff80000081110e:	48 63 d2             	movsxd rdx,edx
ffff800000811111:	48 83 c2 08          	add    rdx,0x8
ffff800000811115:	0f b7 44 50 0c       	movzx  eax,WORD PTR [rax+rdx*2+0xc]
ffff80000081111a:	66 83 f8 ff          	cmp    ax,0xffff
ffff80000081111e:	74 48                	je     ffff800000811168 <FAT32_lookup+0x381>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:490
					continue;
				else if(j>dest_dentry->name_length || tmpldentry->LDIR_Name3[x] != (unsigned short)(dest_dentry->name[j++]))
ffff800000811120:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811124:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000811127:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff80000081112a:	0f 8f f0 03 00 00    	jg     ffff800000811520 <FAT32_lookup+0x739>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:490 (discriminator 1)
ffff800000811130:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811134:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff800000811137:	48 63 d2             	movsxd rdx,edx
ffff80000081113a:	48 83 c2 08          	add    rdx,0x8
ffff80000081113e:	0f b7 4c 50 0c       	movzx  ecx,WORD PTR [rax+rdx*2+0xc]
ffff800000811143:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811147:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff80000081114a:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000081114d:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000811150:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
ffff800000811153:	48 98                	cdqe   
ffff800000811155:	48 01 f0             	add    rax,rsi
ffff800000811158:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081115b:	66 98                	cbw    
ffff80000081115d:	66 39 c1             	cmp    cx,ax
ffff800000811160:	0f 85 ba 03 00 00    	jne    ffff800000811520 <FAT32_lookup+0x739>
ffff800000811166:	eb 01                	jmp    ffff800000811169 <FAT32_lookup+0x382>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:489
					continue;
ffff800000811168:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:486 (discriminator 2)
			for(x=0;x<2;x++)
ffff800000811169:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:486 (discriminator 1)
ffff80000081116d:	83 7d e0 01          	cmp    DWORD PTR [rbp-0x20],0x1
ffff800000811171:	7e 88                	jle    ffff8000008110fb <FAT32_lookup+0x314>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:494
					goto continue_cmp_fail;
			}

			if(j >= dest_dentry->name_length)
ffff800000811173:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811177:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000081117a:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff80000081117d:	0f 8d 2e 04 00 00    	jge    ffff8000008115b1 <FAT32_lookup+0x7ca>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:499
			{
				goto find_lookup_success;
			}

			tmpldentry --;
ffff800000811183:	48 83 6d d0 20       	sub    QWORD PTR [rbp-0x30],0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:470
		while(tmpldentry->LDIR_Attr == ATTR_LONG_NAME && tmpldentry->LDIR_Ord != 0xe5)
ffff800000811188:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081118c:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff800000811190:	3c 0f                	cmp    al,0xf
ffff800000811192:	75 0f                	jne    ffff8000008111a3 <FAT32_lookup+0x3bc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:470 (discriminator 1)
ffff800000811194:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811198:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081119b:	3c e5                	cmp    al,0xe5
ffff80000081119d:	0f 85 5d fe ff ff    	jne    ffff800000811000 <FAT32_lookup+0x219>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:503
		}

		//short file/dir base name compare
		j = 0;
ffff8000008111a3:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:504
		for(x=0;x<8;x++)
ffff8000008111aa:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff8000008111b1:	e9 f4 01 00 00       	jmp    ffff8000008113aa <FAT32_lookup+0x5c3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:506
		{
			switch(tmpdentry->DIR_Name[x])
ffff8000008111b6:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff8000008111ba:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff8000008111bd:	48 98                	cdqe   
ffff8000008111bf:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff8000008111c3:	0f b6 c0             	movzx  eax,al
ffff8000008111c6:	83 f8 7a             	cmp    eax,0x7a
ffff8000008111c9:	0f 8f d0 01 00 00    	jg     ffff80000081139f <FAT32_lookup+0x5b8>
ffff8000008111cf:	83 f8 61             	cmp    eax,0x61
ffff8000008111d2:	0f 8d e6 00 00 00    	jge    ffff8000008112be <FAT32_lookup+0x4d7>
ffff8000008111d8:	83 f8 5a             	cmp    eax,0x5a
ffff8000008111db:	0f 8f be 01 00 00    	jg     ffff80000081139f <FAT32_lookup+0x5b8>
ffff8000008111e1:	83 f8 41             	cmp    eax,0x41
ffff8000008111e4:	0f 8d d4 00 00 00    	jge    ffff8000008112be <FAT32_lookup+0x4d7>
ffff8000008111ea:	83 f8 20             	cmp    eax,0x20
ffff8000008111ed:	74 1a                	je     ffff800000811209 <FAT32_lookup+0x422>
ffff8000008111ef:	83 f8 20             	cmp    eax,0x20
ffff8000008111f2:	0f 8c a7 01 00 00    	jl     ffff80000081139f <FAT32_lookup+0x5b8>
ffff8000008111f8:	83 e8 30             	sub    eax,0x30
ffff8000008111fb:	83 f8 09             	cmp    eax,0x9
ffff8000008111fe:	0f 87 9b 01 00 00    	ja     ffff80000081139f <FAT32_lookup+0x5b8>
ffff800000811204:	e9 53 01 00 00       	jmp    ffff80000081135c <FAT32_lookup+0x575>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:509
			{
				case ' ':
					if(!(tmpdentry->DIR_Attr & ATTR_DIRECTORY))
ffff800000811209:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081120d:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff800000811211:	0f b6 c0             	movzx  eax,al
ffff800000811214:	83 e0 10             	and    eax,0x10
ffff800000811217:	85 c0                	test   eax,eax
ffff800000811219:	75 50                	jne    ffff80000081126b <FAT32_lookup+0x484>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:511
					{
						if(dest_dentry->name[j]=='.')
ffff80000081121b:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000081121f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000811222:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000811225:	48 98                	cdqe   
ffff800000811227:	48 01 d0             	add    rax,rdx
ffff80000081122a:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081122d:	3c 2e                	cmp    al,0x2e
ffff80000081122f:	0f 84 70 01 00 00    	je     ffff8000008113a5 <FAT32_lookup+0x5be>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:513
							continue;
						else if(tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff800000811235:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000811239:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff80000081123c:	48 98                	cdqe   
ffff80000081123e:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000811242:	0f b6 d0             	movzx  edx,al
ffff800000811245:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811249:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000081124c:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000081124f:	48 98                	cdqe   
ffff800000811251:	48 01 c8             	add    rax,rcx
ffff800000811254:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811257:	0f be c0             	movsx  eax,al
ffff80000081125a:	39 c2                	cmp    edx,eax
ffff80000081125c:	0f 85 c1 02 00 00    	jne    ffff800000811523 <FAT32_lookup+0x73c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:515
						{
							j++;
ffff800000811262:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:516
							break;
ffff800000811266:	e9 3b 01 00 00       	jmp    ffff8000008113a6 <FAT32_lookup+0x5bf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:523
						else
							goto continue_cmp_fail;
					}
					else
					{
						if(j < dest_dentry->name_length && tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff80000081126b:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000081126f:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000811272:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000811275:	7d 32                	jge    ffff8000008112a9 <FAT32_lookup+0x4c2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:523 (discriminator 1)
ffff800000811277:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000081127b:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff80000081127e:	48 98                	cdqe   
ffff800000811280:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000811284:	0f b6 d0             	movzx  edx,al
ffff800000811287:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000081128b:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000081128e:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000811291:	48 98                	cdqe   
ffff800000811293:	48 01 c8             	add    rax,rcx
ffff800000811296:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811299:	0f be c0             	movsx  eax,al
ffff80000081129c:	39 c2                	cmp    edx,eax
ffff80000081129e:	75 09                	jne    ffff8000008112a9 <FAT32_lookup+0x4c2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:525
						{
							j++;
ffff8000008112a0:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:526
							break;
ffff8000008112a4:	e9 fd 00 00 00       	jmp    ffff8000008113a6 <FAT32_lookup+0x5bf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:528
						}
						else if(j == dest_dentry->name_length)
ffff8000008112a9:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008112ad:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff8000008112b0:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff8000008112b3:	0f 85 6d 02 00 00    	jne    ffff800000811526 <FAT32_lookup+0x73f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:529
							continue;
ffff8000008112b9:	e9 e8 00 00 00       	jmp    ffff8000008113a6 <FAT32_lookup+0x5bf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:536
							goto continue_cmp_fail;
					}

				case 'A' ... 'Z':
				case 'a' ... 'z':
					if(tmpdentry->DIR_NTRes & LOWERCASE_BASE)
ffff8000008112be:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008112c2:	0f b6 40 0c          	movzx  eax,BYTE PTR [rax+0xc]
ffff8000008112c6:	0f b6 c0             	movzx  eax,al
ffff8000008112c9:	83 e0 08             	and    eax,0x8
ffff8000008112cc:	85 c0                	test   eax,eax
ffff8000008112ce:	74 49                	je     ffff800000811319 <FAT32_lookup+0x532>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:537
						if(j < dest_dentry->name_length && tmpdentry->DIR_Name[x] + 32 == dest_dentry->name[j])
ffff8000008112d0:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008112d4:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff8000008112d7:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff8000008112da:	0f 8d 49 02 00 00    	jge    ffff800000811529 <FAT32_lookup+0x742>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:537 (discriminator 1)
ffff8000008112e0:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff8000008112e4:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff8000008112e7:	48 98                	cdqe   
ffff8000008112e9:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff8000008112ed:	0f b6 c0             	movzx  eax,al
ffff8000008112f0:	8d 50 20             	lea    edx,[rax+0x20]
ffff8000008112f3:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008112f7:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008112fa:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008112fd:	48 98                	cdqe   
ffff8000008112ff:	48 01 c8             	add    rax,rcx
ffff800000811302:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811305:	0f be c0             	movsx  eax,al
ffff800000811308:	39 c2                	cmp    edx,eax
ffff80000081130a:	0f 85 19 02 00 00    	jne    ffff800000811529 <FAT32_lookup+0x742>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:539
						{
							j++;
ffff800000811310:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:540
							break;
ffff800000811314:	e9 8d 00 00 00       	jmp    ffff8000008113a6 <FAT32_lookup+0x5bf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:546
						}
						else
							goto continue_cmp_fail;
					else
					{
						if(j < dest_dentry->name_length && tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff800000811319:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000081131d:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000811320:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000811323:	0f 8d 03 02 00 00    	jge    ffff80000081152c <FAT32_lookup+0x745>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:546 (discriminator 1)
ffff800000811329:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000081132d:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000811330:	48 98                	cdqe   
ffff800000811332:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000811336:	0f b6 d0             	movzx  edx,al
ffff800000811339:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000081133d:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000811340:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000811343:	48 98                	cdqe   
ffff800000811345:	48 01 c8             	add    rax,rcx
ffff800000811348:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081134b:	0f be c0             	movsx  eax,al
ffff80000081134e:	39 c2                	cmp    edx,eax
ffff800000811350:	0f 85 d6 01 00 00    	jne    ffff80000081152c <FAT32_lookup+0x745>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:548
						{
							j++;
ffff800000811356:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:549
							break;
ffff80000081135a:	eb 4a                	jmp    ffff8000008113a6 <FAT32_lookup+0x5bf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:556
						else
							goto continue_cmp_fail;
					}

				case '0' ... '9':
					if(j < dest_dentry->name_length && tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff80000081135c:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811360:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000811363:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000811366:	0f 8d c3 01 00 00    	jge    ffff80000081152f <FAT32_lookup+0x748>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:556 (discriminator 1)
ffff80000081136c:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000811370:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000811373:	48 98                	cdqe   
ffff800000811375:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000811379:	0f b6 d0             	movzx  edx,al
ffff80000081137c:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811380:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000811383:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000811386:	48 98                	cdqe   
ffff800000811388:	48 01 c8             	add    rax,rcx
ffff80000081138b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081138e:	0f be c0             	movsx  eax,al
ffff800000811391:	39 c2                	cmp    edx,eax
ffff800000811393:	0f 85 96 01 00 00    	jne    ffff80000081152f <FAT32_lookup+0x748>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:558
					{
						j++;
ffff800000811399:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:559
						break;
ffff80000081139d:	eb 07                	jmp    ffff8000008113a6 <FAT32_lookup+0x5bf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:565
					}
					else
						goto continue_cmp_fail;

				default :
					j++;
ffff80000081139f:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:566
					break;
ffff8000008113a3:	eb 01                	jmp    ffff8000008113a6 <FAT32_lookup+0x5bf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:512
							continue;
ffff8000008113a5:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:504 (discriminator 2)
		for(x=0;x<8;x++)
ffff8000008113a6:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:504 (discriminator 1)
ffff8000008113aa:	83 7d e0 07          	cmp    DWORD PTR [rbp-0x20],0x7
ffff8000008113ae:	0f 8e 02 fe ff ff    	jle    ffff8000008111b6 <FAT32_lookup+0x3cf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:570
			}
		}
		//short file ext name compare
		if(!(tmpdentry->DIR_Attr & ATTR_DIRECTORY))
ffff8000008113b4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008113b8:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff8000008113bc:	0f b6 c0             	movzx  eax,al
ffff8000008113bf:	83 e0 10             	and    eax,0x10
ffff8000008113c2:	85 c0                	test   eax,eax
ffff8000008113c4:	0f 85 ea 01 00 00    	jne    ffff8000008115b4 <FAT32_lookup+0x7cd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:572
		{
			j++;
ffff8000008113ca:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:573
			for(x=8;x<11;x++)
ffff8000008113ce:	c7 45 e0 08 00 00 00 	mov    DWORD PTR [rbp-0x20],0x8
ffff8000008113d5:	e9 2b 01 00 00       	jmp    ffff800000811505 <FAT32_lookup+0x71e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:575
			{
				switch(tmpdentry->DIR_Name[x])
ffff8000008113da:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff8000008113de:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff8000008113e1:	48 98                	cdqe   
ffff8000008113e3:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff8000008113e7:	0f b6 c0             	movzx  eax,al
ffff8000008113ea:	83 f8 7a             	cmp    eax,0x7a
ffff8000008113ed:	0f 8f 3f 01 00 00    	jg     ffff800000811532 <FAT32_lookup+0x74b>
ffff8000008113f3:	83 f8 61             	cmp    eax,0x61
ffff8000008113f6:	7d 2e                	jge    ffff800000811426 <FAT32_lookup+0x63f>
ffff8000008113f8:	83 f8 5a             	cmp    eax,0x5a
ffff8000008113fb:	0f 8f 31 01 00 00    	jg     ffff800000811532 <FAT32_lookup+0x74b>
ffff800000811401:	83 f8 41             	cmp    eax,0x41
ffff800000811404:	7d 20                	jge    ffff800000811426 <FAT32_lookup+0x63f>
ffff800000811406:	83 f8 20             	cmp    eax,0x20
ffff800000811409:	0f 84 c4 00 00 00    	je     ffff8000008114d3 <FAT32_lookup+0x6ec>
ffff80000081140f:	83 f8 20             	cmp    eax,0x20
ffff800000811412:	0f 8c 1a 01 00 00    	jl     ffff800000811532 <FAT32_lookup+0x74b>
ffff800000811418:	83 e8 30             	sub    eax,0x30
ffff80000081141b:	83 f8 09             	cmp    eax,0x9
ffff80000081141e:	0f 87 0e 01 00 00    	ja     ffff800000811532 <FAT32_lookup+0x74b>
ffff800000811424:	eb 7e                	jmp    ffff8000008114a4 <FAT32_lookup+0x6bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:579
				{
					case 'A' ... 'Z':
					case 'a' ... 'z':
						if(tmpdentry->DIR_NTRes & LOWERCASE_EXT)
ffff800000811426:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081142a:	0f b6 40 0c          	movzx  eax,BYTE PTR [rax+0xc]
ffff80000081142e:	0f b6 c0             	movzx  eax,al
ffff800000811431:	83 e0 10             	and    eax,0x10
ffff800000811434:	85 c0                	test   eax,eax
ffff800000811436:	74 39                	je     ffff800000811471 <FAT32_lookup+0x68a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:580
							if(tmpdentry->DIR_Name[x] + 32 == dest_dentry->name[j])
ffff800000811438:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000081143c:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff80000081143f:	48 98                	cdqe   
ffff800000811441:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000811445:	0f b6 c0             	movzx  eax,al
ffff800000811448:	8d 50 20             	lea    edx,[rax+0x20]
ffff80000081144b:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000081144f:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000811452:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000811455:	48 98                	cdqe   
ffff800000811457:	48 01 c8             	add    rax,rcx
ffff80000081145a:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081145d:	0f be c0             	movsx  eax,al
ffff800000811460:	39 c2                	cmp    edx,eax
ffff800000811462:	0f 85 cd 00 00 00    	jne    ffff800000811535 <FAT32_lookup+0x74e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:582
							{
								j++;
ffff800000811468:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:583
								break;
ffff80000081146c:	e9 90 00 00 00       	jmp    ffff800000811501 <FAT32_lookup+0x71a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:589
							}
							else
								goto continue_cmp_fail;
						else
						{
							if(tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff800000811471:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000811475:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000811478:	48 98                	cdqe   
ffff80000081147a:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff80000081147e:	0f b6 d0             	movzx  edx,al
ffff800000811481:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811485:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000811488:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000081148b:	48 98                	cdqe   
ffff80000081148d:	48 01 c8             	add    rax,rcx
ffff800000811490:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000811493:	0f be c0             	movsx  eax,al
ffff800000811496:	39 c2                	cmp    edx,eax
ffff800000811498:	0f 85 9a 00 00 00    	jne    ffff800000811538 <FAT32_lookup+0x751>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:591
							{
								j++;
ffff80000081149e:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:592
								break;
ffff8000008114a2:	eb 5d                	jmp    ffff800000811501 <FAT32_lookup+0x71a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:599
							else
								goto continue_cmp_fail;
						}

					case '0' ... '9':
						if(tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff8000008114a4:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff8000008114a8:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff8000008114ab:	48 98                	cdqe   
ffff8000008114ad:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff8000008114b1:	0f b6 d0             	movzx  edx,al
ffff8000008114b4:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008114b8:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008114bb:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008114be:	48 98                	cdqe   
ffff8000008114c0:	48 01 c8             	add    rax,rcx
ffff8000008114c3:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008114c6:	0f be c0             	movsx  eax,al
ffff8000008114c9:	39 c2                	cmp    edx,eax
ffff8000008114cb:	75 6e                	jne    ffff80000081153b <FAT32_lookup+0x754>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:601
						{
							j++;
ffff8000008114cd:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:602
							break;
ffff8000008114d1:	eb 2e                	jmp    ffff800000811501 <FAT32_lookup+0x71a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:608
						}
						else
							goto continue_cmp_fail;

					case ' ':
						if(tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff8000008114d3:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff8000008114d7:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff8000008114da:	48 98                	cdqe   
ffff8000008114dc:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff8000008114e0:	0f b6 d0             	movzx  edx,al
ffff8000008114e3:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008114e7:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008114ea:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008114ed:	48 98                	cdqe   
ffff8000008114ef:	48 01 c8             	add    rax,rcx
ffff8000008114f2:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008114f5:	0f be c0             	movsx  eax,al
ffff8000008114f8:	39 c2                	cmp    edx,eax
ffff8000008114fa:	75 42                	jne    ffff80000081153e <FAT32_lookup+0x757>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:610
						{
							j++;
ffff8000008114fc:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:611
							break;
ffff800000811500:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:573 (discriminator 2)
			for(x=8;x<11;x++)
ffff800000811501:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:573 (discriminator 1)
ffff800000811505:	83 7d e0 0a          	cmp    DWORD PTR [rbp-0x20],0xa
ffff800000811509:	0f 8e cb fe ff ff    	jle    ffff8000008113da <FAT32_lookup+0x5f3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:621
					default :
						goto continue_cmp_fail;
				}
			}
		}
		goto find_lookup_success;
ffff80000081150f:	e9 a0 00 00 00       	jmp    ffff8000008115b4 <FAT32_lookup+0x7cd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:462
			continue;
ffff800000811514:	90                   	nop
ffff800000811515:	eb 28                	jmp    ffff80000081153f <FAT32_lookup+0x758>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:464
			continue;
ffff800000811517:	90                   	nop
ffff800000811518:	eb 25                	jmp    ffff80000081153f <FAT32_lookup+0x758>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:477
					goto continue_cmp_fail;
ffff80000081151a:	90                   	nop
ffff80000081151b:	eb 22                	jmp    ffff80000081153f <FAT32_lookup+0x758>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:484
					goto continue_cmp_fail;
ffff80000081151d:	90                   	nop
ffff80000081151e:	eb 1f                	jmp    ffff80000081153f <FAT32_lookup+0x758>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:491
					goto continue_cmp_fail;
ffff800000811520:	90                   	nop
ffff800000811521:	eb 1c                	jmp    ffff80000081153f <FAT32_lookup+0x758>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:519
							goto continue_cmp_fail;
ffff800000811523:	90                   	nop
ffff800000811524:	eb 19                	jmp    ffff80000081153f <FAT32_lookup+0x758>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:531
							goto continue_cmp_fail;
ffff800000811526:	90                   	nop
ffff800000811527:	eb 16                	jmp    ffff80000081153f <FAT32_lookup+0x758>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:543
							goto continue_cmp_fail;
ffff800000811529:	90                   	nop
ffff80000081152a:	eb 13                	jmp    ffff80000081153f <FAT32_lookup+0x758>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:552
							goto continue_cmp_fail;
ffff80000081152c:	90                   	nop
ffff80000081152d:	eb 10                	jmp    ffff80000081153f <FAT32_lookup+0x758>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:562
						goto continue_cmp_fail;
ffff80000081152f:	90                   	nop
ffff800000811530:	eb 0d                	jmp    ffff80000081153f <FAT32_lookup+0x758>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:617
						goto continue_cmp_fail;
ffff800000811532:	90                   	nop
ffff800000811533:	eb 0a                	jmp    ffff80000081153f <FAT32_lookup+0x758>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:586
								goto continue_cmp_fail;
ffff800000811535:	90                   	nop
ffff800000811536:	eb 07                	jmp    ffff80000081153f <FAT32_lookup+0x758>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:595
								goto continue_cmp_fail;
ffff800000811538:	90                   	nop
ffff800000811539:	eb 04                	jmp    ffff80000081153f <FAT32_lookup+0x758>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:605
							goto continue_cmp_fail;
ffff80000081153b:	90                   	nop
ffff80000081153c:	eb 01                	jmp    ffff80000081153f <FAT32_lookup+0x758>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:614
							goto continue_cmp_fail;
ffff80000081153e:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:459 (discriminator 2)
	for(i = 0;i < fsbi->bytes_per_cluster;i+= 32,tmpdentry++)
ffff80000081153f:	83 45 e8 20          	add    DWORD PTR [rbp-0x18],0x20
ffff800000811543:	48 83 45 d8 20       	add    QWORD PTR [rbp-0x28],0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:459 (discriminator 1)
ffff800000811548:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000081154b:	48 63 d0             	movsxd rdx,eax
ffff80000081154e:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000811552:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000811556:	48 39 c2             	cmp    rdx,rax
ffff800000811559:	0f 8c 4c fa ff ff    	jl     ffff800000810fab <FAT32_lookup+0x1c4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:626

continue_cmp_fail:;
	}
	
	cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff80000081155f:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000811562:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000811566:	89 d6                	mov    esi,edx
ffff800000811568:	48 89 c7             	mov    rdi,rax
ffff80000081156b:	49 89 df             	mov    r15,rbx
ffff80000081156e:	48 b8 3d 04 ff ff ff 	movabs rax,0xffffffffffff043d
ffff800000811575:	ff ff ff 
ffff800000811578:	48 01 d8             	add    rax,rbx
ffff80000081157b:	ff d0                	call   rax
ffff80000081157d:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:627
	if(cluster < 0x0ffffff7)
ffff800000811580:	81 7d ec f6 ff ff 0f 	cmp    DWORD PTR [rbp-0x14],0xffffff6
ffff800000811587:	77 05                	ja     ffff80000081158e <FAT32_lookup+0x7a7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:628
		goto next_cluster;
ffff800000811589:	e9 19 f9 ff ff       	jmp    ffff800000810ea7 <FAT32_lookup+0xc0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:630

    kmfree(buf);
ffff80000081158e:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000811592:	48 89 c7             	mov    rdi,rax
ffff800000811595:	49 89 df             	mov    r15,rbx
ffff800000811598:	48 b8 82 2f fe ff ff 	movabs rax,0xfffffffffffe2f82
ffff80000081159f:	ff ff ff 
ffff8000008115a2:	48 01 d8             	add    rax,rbx
ffff8000008115a5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:631
	return NULL;
ffff8000008115a7:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008115ac:	e9 45 02 00 00       	jmp    ffff8000008117f6 <FAT32_lookup+0xa0f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:496
				goto find_lookup_success;
ffff8000008115b1:	90                   	nop
ffff8000008115b2:	eb 01                	jmp    ffff8000008115b5 <FAT32_lookup+0x7ce>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:621
		goto find_lookup_success;
ffff8000008115b4:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:634

find_lookup_success:
	p = (struct index_node *) kmalloc(sizeof(struct index_node), 0);
ffff8000008115b5:	be 00 00 00 00       	mov    esi,0x0
ffff8000008115ba:	bf 38 00 00 00       	mov    edi,0x38
ffff8000008115bf:	49 89 df             	mov    r15,rbx
ffff8000008115c2:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008115c7:	48 ba 13 2c fe ff ff 	movabs rdx,0xfffffffffffe2c13
ffff8000008115ce:	ff ff ff 
ffff8000008115d1:	48 01 da             	add    rdx,rbx
ffff8000008115d4:	ff d2                	call   rdx
ffff8000008115d6:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:635
	memset(p,0,sizeof(struct index_node));
ffff8000008115da:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008115de:	ba 38 00 00 00       	mov    edx,0x38
ffff8000008115e3:	be 00 00 00 00       	mov    esi,0x0
ffff8000008115e8:	48 89 c7             	mov    rdi,rax
ffff8000008115eb:	49 89 df             	mov    r15,rbx
ffff8000008115ee:	48 b8 d6 3e ff ff ff 	movabs rax,0xffffffffffff3ed6
ffff8000008115f5:	ff ff ff 
ffff8000008115f8:	48 01 d8             	add    rax,rbx
ffff8000008115fb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:636
	p->file_size = tmpdentry->DIR_FileSize;
ffff8000008115fd:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811601:	8b 40 1c             	mov    eax,DWORD PTR [rax+0x1c]
ffff800000811604:	89 c2                	mov    edx,eax
ffff800000811606:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000081160a:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:637
	p->blocks = (p->file_size + fsbi->bytes_per_cluster - 1)/fsbi->bytes_per_sector;
ffff80000081160d:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000811611:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000811614:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000811618:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000081161c:	48 01 d0             	add    rax,rdx
ffff80000081161f:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff800000811623:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000811627:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000081162b:	48 89 c1             	mov    rcx,rax
ffff80000081162e:	48 89 d0             	mov    rax,rdx
ffff800000811631:	ba 00 00 00 00       	mov    edx,0x0
ffff800000811636:	48 f7 f1             	div    rcx
ffff800000811639:	48 89 c2             	mov    rdx,rax
ffff80000081163c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000811640:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:638
	p->attribute = (tmpdentry->DIR_Attr & ATTR_DIRECTORY) ? FS_ATTR_DIR : FS_ATTR_FILE;
ffff800000811644:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811648:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff80000081164c:	0f b6 c0             	movzx  eax,al
ffff80000081164f:	83 e0 10             	and    eax,0x10
ffff800000811652:	85 c0                	test   eax,eax
ffff800000811654:	74 07                	je     ffff80000081165d <FAT32_lookup+0x876>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:638 (discriminator 1)
ffff800000811656:	ba 02 00 00 00       	mov    edx,0x2
ffff80000081165b:	eb 05                	jmp    ffff800000811662 <FAT32_lookup+0x87b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:638 (discriminator 2)
ffff80000081165d:	ba 01 00 00 00       	mov    edx,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:638 (discriminator 4)
ffff800000811662:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000811666:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:639 (discriminator 4)
	p->sb = parent_inode->sb;
ffff80000081166a:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000081166e:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
ffff800000811672:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000811676:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:640 (discriminator 4)
	p->f_ops = &FAT32_file_ops;
ffff80000081167a:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000081167e:	48 ba 20 fe ff ff ff 	movabs rdx,0xfffffffffffffe20
ffff800000811685:	ff ff ff 
ffff800000811688:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000081168c:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:641 (discriminator 4)
	p->inode_ops = &FAT32_inode_ops;
ffff800000811690:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000811694:	48 ba 48 ff ff ff ff 	movabs rdx,0xffffffffffffff48
ffff80000081169b:	ff ff ff 
ffff80000081169e:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff8000008116a2:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:643 (discriminator 4)

	p->private_index_info = (struct FAT32_inode_info *) kmalloc(sizeof(struct FAT32_inode_info), 0);
ffff8000008116a6:	be 00 00 00 00       	mov    esi,0x0
ffff8000008116ab:	bf 20 00 00 00       	mov    edi,0x20
ffff8000008116b0:	49 89 df             	mov    r15,rbx
ffff8000008116b3:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008116b8:	48 ba 13 2c fe ff ff 	movabs rdx,0xfffffffffffe2c13
ffff8000008116bf:	ff ff ff 
ffff8000008116c2:	48 01 da             	add    rdx,rbx
ffff8000008116c5:	ff d2                	call   rdx
ffff8000008116c7:	48 89 c2             	mov    rdx,rax
ffff8000008116ca:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008116ce:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:644 (discriminator 4)
	memset(p->private_index_info,0,sizeof(struct FAT32_inode_info));
ffff8000008116d2:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008116d6:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff8000008116da:	ba 20 00 00 00       	mov    edx,0x20
ffff8000008116df:	be 00 00 00 00       	mov    esi,0x0
ffff8000008116e4:	48 89 c7             	mov    rdi,rax
ffff8000008116e7:	49 89 df             	mov    r15,rbx
ffff8000008116ea:	48 b8 d6 3e ff ff ff 	movabs rax,0xffffffffffff3ed6
ffff8000008116f1:	ff ff ff 
ffff8000008116f4:	48 01 d8             	add    rax,rbx
ffff8000008116f7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:645 (discriminator 4)
	finode = p->private_index_info;
ffff8000008116f9:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008116fd:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff800000811701:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:647 (discriminator 4)

	finode->first_cluster = (tmpdentry->DIR_FstClusHI<< 16 | tmpdentry->DIR_FstClusLO) & 0x0fffffff;
ffff800000811705:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811709:	0f b7 40 14          	movzx  eax,WORD PTR [rax+0x14]
ffff80000081170d:	0f b7 c0             	movzx  eax,ax
ffff800000811710:	c1 e0 10             	shl    eax,0x10
ffff800000811713:	89 c2                	mov    edx,eax
ffff800000811715:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811719:	0f b7 40 1a          	movzx  eax,WORD PTR [rax+0x1a]
ffff80000081171d:	0f b7 c0             	movzx  eax,ax
ffff800000811720:	09 d0                	or     eax,edx
ffff800000811722:	48 98                	cdqe   
ffff800000811724:	25 ff ff ff 0f       	and    eax,0xfffffff
ffff800000811729:	48 89 c2             	mov    rdx,rax
ffff80000081172c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000811730:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:648 (discriminator 4)
	finode->dentry_location = cluster;
ffff800000811733:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000811736:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000081173a:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:649 (discriminator 4)
	finode->dentry_position = tmpdentry - (struct FAT32_Directory *)buf;
ffff80000081173e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811742:	48 2b 45 b0          	sub    rax,QWORD PTR [rbp-0x50]
ffff800000811746:	48 c1 f8 05          	sar    rax,0x5
ffff80000081174a:	48 89 c2             	mov    rdx,rax
ffff80000081174d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000811751:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:650 (discriminator 4)
	finode->create_date = tmpdentry->DIR_CrtTime;
ffff800000811755:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811759:	0f b7 50 0e          	movzx  edx,WORD PTR [rax+0xe]
ffff80000081175d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000811761:	66 89 50 18          	mov    WORD PTR [rax+0x18],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:651 (discriminator 4)
	finode->create_time = tmpdentry->DIR_CrtDate;
ffff800000811765:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811769:	0f b7 50 10          	movzx  edx,WORD PTR [rax+0x10]
ffff80000081176d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000811771:	66 89 50 1a          	mov    WORD PTR [rax+0x1a],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:652 (discriminator 4)
	finode->write_date = tmpdentry->DIR_WrtTime;
ffff800000811775:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811779:	0f b7 50 16          	movzx  edx,WORD PTR [rax+0x16]
ffff80000081177d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000811781:	66 89 50 1c          	mov    WORD PTR [rax+0x1c],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:653 (discriminator 4)
	finode->write_time = tmpdentry->DIR_WrtDate;
ffff800000811785:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811789:	0f b7 50 18          	movzx  edx,WORD PTR [rax+0x18]
ffff80000081178d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000811791:	66 89 50 1e          	mov    WORD PTR [rax+0x1e],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:655 (discriminator 4)

	if((tmpdentry->DIR_FstClusHI >> 12) && (p->attribute & FS_ATTR_FILE))
ffff800000811795:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811799:	0f b7 40 14          	movzx  eax,WORD PTR [rax+0x14]
ffff80000081179d:	66 c1 e8 0c          	shr    ax,0xc
ffff8000008117a1:	66 85 c0             	test   ax,ax
ffff8000008117a4:	74 27                	je     ffff8000008117cd <FAT32_lookup+0x9e6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:655 (discriminator 1)
ffff8000008117a6:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008117aa:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008117ae:	83 e0 01             	and    eax,0x1
ffff8000008117b1:	48 85 c0             	test   rax,rax
ffff8000008117b4:	74 17                	je     ffff8000008117cd <FAT32_lookup+0x9e6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:657
	{
		p->attribute |= FS_ATTR_DEVICE;
ffff8000008117b6:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008117ba:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008117be:	48 83 c8 04          	or     rax,0x4
ffff8000008117c2:	48 89 c2             	mov    rdx,rax
ffff8000008117c5:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008117c9:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:660
	}

	dest_dentry->dir_inode = p;
ffff8000008117cd:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008117d1:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff8000008117d5:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:661
    kmfree(buf);
ffff8000008117d9:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff8000008117dd:	48 89 c7             	mov    rdi,rax
ffff8000008117e0:	49 89 df             	mov    r15,rbx
ffff8000008117e3:	48 b8 82 2f fe ff ff 	movabs rax,0xfffffffffffe2f82
ffff8000008117ea:	ff ff ff 
ffff8000008117ed:	48 01 d8             	add    rax,rbx
ffff8000008117f0:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:662
	return dest_dentry;	
ffff8000008117f2:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:663
}
ffff8000008117f6:	48 83 c4 60          	add    rsp,0x60
ffff8000008117fa:	5b                   	pop    rbx
ffff8000008117fb:	41 5f                	pop    r15
ffff8000008117fd:	5d                   	pop    rbp
ffff8000008117fe:	c3                   	ret    

ffff8000008117ff <FAT32_mkdir>:
FAT32_mkdir():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:667


long FAT32_mkdir(struct index_node * inode,struct dir_entry * dentry,int mode)
{}
ffff8000008117ff:	f3 0f 1e fa          	endbr64 
ffff800000811803:	55                   	push   rbp
ffff800000811804:	48 89 e5             	mov    rbp,rsp
ffff800000811807:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000811807 <FAT32_mkdir+0x8>
ffff80000081180e:	49 bb 31 db 00 00 00 	movabs r11,0xdb31
ffff800000811815:	00 00 00 
ffff800000811818:	4c 01 d8             	add    rax,r11
ffff80000081181b:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000081181f:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000811823:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
ffff800000811826:	90                   	nop
ffff800000811827:	5d                   	pop    rbp
ffff800000811828:	c3                   	ret    

ffff800000811829 <FAT32_rmdir>:
FAT32_rmdir():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:671


long FAT32_rmdir(struct index_node * inode,struct dir_entry * dentry)
{}
ffff800000811829:	f3 0f 1e fa          	endbr64 
ffff80000081182d:	55                   	push   rbp
ffff80000081182e:	48 89 e5             	mov    rbp,rsp
ffff800000811831:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000811831 <FAT32_rmdir+0x8>
ffff800000811838:	49 bb 07 db 00 00 00 	movabs r11,0xdb07
ffff80000081183f:	00 00 00 
ffff800000811842:	4c 01 d8             	add    rax,r11
ffff800000811845:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000811849:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000081184d:	90                   	nop
ffff80000081184e:	5d                   	pop    rbp
ffff80000081184f:	c3                   	ret    

ffff800000811850 <FAT32_rename>:
FAT32_rename():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:674

long FAT32_rename(struct index_node * old_inode,struct dir_entry * old_dentry,struct index_node * new_inode,struct dir_entry * new_dentry)
{}
ffff800000811850:	f3 0f 1e fa          	endbr64 
ffff800000811854:	55                   	push   rbp
ffff800000811855:	48 89 e5             	mov    rbp,rsp
ffff800000811858:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000811858 <FAT32_rename+0x8>
ffff80000081185f:	49 bb e0 da 00 00 00 	movabs r11,0xdae0
ffff800000811866:	00 00 00 
ffff800000811869:	4c 01 d8             	add    rax,r11
ffff80000081186c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000811870:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000811874:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff800000811878:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
ffff80000081187c:	90                   	nop
ffff80000081187d:	5d                   	pop    rbp
ffff80000081187e:	c3                   	ret    

ffff80000081187f <FAT32_getattr>:
FAT32_getattr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:677

long FAT32_getattr(struct dir_entry * dentry,unsigned long * attr)
{}
ffff80000081187f:	f3 0f 1e fa          	endbr64 
ffff800000811883:	55                   	push   rbp
ffff800000811884:	48 89 e5             	mov    rbp,rsp
ffff800000811887:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000811887 <FAT32_getattr+0x8>
ffff80000081188e:	49 bb b1 da 00 00 00 	movabs r11,0xdab1
ffff800000811895:	00 00 00 
ffff800000811898:	4c 01 d8             	add    rax,r11
ffff80000081189b:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000081189f:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff8000008118a3:	90                   	nop
ffff8000008118a4:	5d                   	pop    rbp
ffff8000008118a5:	c3                   	ret    

ffff8000008118a6 <FAT32_setattr>:
FAT32_setattr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:680

long FAT32_setattr(struct dir_entry * dentry,unsigned long * attr)
{}
ffff8000008118a6:	f3 0f 1e fa          	endbr64 
ffff8000008118aa:	55                   	push   rbp
ffff8000008118ab:	48 89 e5             	mov    rbp,rsp
ffff8000008118ae:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008118ae <FAT32_setattr+0x8>
ffff8000008118b5:	49 bb 8a da 00 00 00 	movabs r11,0xda8a
ffff8000008118bc:	00 00 00 
ffff8000008118bf:	4c 01 d8             	add    rax,r11
ffff8000008118c2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff8000008118c6:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff8000008118ca:	90                   	nop
ffff8000008118cb:	5d                   	pop    rbp
ffff8000008118cc:	c3                   	ret    

ffff8000008118cd <FAT32_compare>:
FAT32_compare():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:695
	.setattr = FAT32_setattr,
};


//// these operation need cache and list
long FAT32_compare(struct dir_entry * parent_dentry,char * source_filename,char * destination_filename){}
ffff8000008118cd:	f3 0f 1e fa          	endbr64 
ffff8000008118d1:	55                   	push   rbp
ffff8000008118d2:	48 89 e5             	mov    rbp,rsp
ffff8000008118d5:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008118d5 <FAT32_compare+0x8>
ffff8000008118dc:	49 bb 63 da 00 00 00 	movabs r11,0xda63
ffff8000008118e3:	00 00 00 
ffff8000008118e6:	4c 01 d8             	add    rax,r11
ffff8000008118e9:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff8000008118ed:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff8000008118f1:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff8000008118f5:	90                   	nop
ffff8000008118f6:	5d                   	pop    rbp
ffff8000008118f7:	c3                   	ret    

ffff8000008118f8 <FAT32_hash>:
FAT32_hash():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:696
long FAT32_hash(struct dir_entry * dentry,char * filename){}
ffff8000008118f8:	f3 0f 1e fa          	endbr64 
ffff8000008118fc:	55                   	push   rbp
ffff8000008118fd:	48 89 e5             	mov    rbp,rsp
ffff800000811900:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000811900 <FAT32_hash+0x8>
ffff800000811907:	49 bb 38 da 00 00 00 	movabs r11,0xda38
ffff80000081190e:	00 00 00 
ffff800000811911:	4c 01 d8             	add    rax,r11
ffff800000811914:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000811918:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000081191c:	90                   	nop
ffff80000081191d:	5d                   	pop    rbp
ffff80000081191e:	c3                   	ret    

ffff80000081191f <FAT32_release>:
FAT32_release():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:697
long FAT32_release(struct dir_entry * dentry){}
ffff80000081191f:	f3 0f 1e fa          	endbr64 
ffff800000811923:	55                   	push   rbp
ffff800000811924:	48 89 e5             	mov    rbp,rsp
ffff800000811927:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000811927 <FAT32_release+0x8>
ffff80000081192e:	49 bb 11 da 00 00 00 	movabs r11,0xda11
ffff800000811935:	00 00 00 
ffff800000811938:	4c 01 d8             	add    rax,r11
ffff80000081193b:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000081193f:	90                   	nop
ffff800000811940:	5d                   	pop    rbp
ffff800000811941:	c3                   	ret    

ffff800000811942 <FAT32_iput>:
FAT32_iput():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:698
long FAT32_iput(struct dir_entry * dentry,struct index_node * inode){}
ffff800000811942:	f3 0f 1e fa          	endbr64 
ffff800000811946:	55                   	push   rbp
ffff800000811947:	48 89 e5             	mov    rbp,rsp
ffff80000081194a:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000081194a <FAT32_iput+0x8>
ffff800000811951:	49 bb ee d9 00 00 00 	movabs r11,0xd9ee
ffff800000811958:	00 00 00 
ffff80000081195b:	4c 01 d8             	add    rax,r11
ffff80000081195e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000811962:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000811966:	90                   	nop
ffff800000811967:	5d                   	pop    rbp
ffff800000811968:	c3                   	ret    

ffff800000811969 <fat32_write_superblock>:
fat32_write_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:710
	.release = FAT32_release,
	.iput = FAT32_iput,
};


void fat32_write_superblock(struct super_block * sb){}
ffff800000811969:	f3 0f 1e fa          	endbr64 
ffff80000081196d:	55                   	push   rbp
ffff80000081196e:	48 89 e5             	mov    rbp,rsp
ffff800000811971:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000811971 <fat32_write_superblock+0x8>
ffff800000811978:	49 bb c7 d9 00 00 00 	movabs r11,0xd9c7
ffff80000081197f:	00 00 00 
ffff800000811982:	4c 01 d8             	add    rax,r11
ffff800000811985:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000811989:	90                   	nop
ffff80000081198a:	5d                   	pop    rbp
ffff80000081198b:	c3                   	ret    

ffff80000081198c <fat32_put_superblock>:
fat32_put_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:713

void fat32_put_superblock(struct super_block * sb)
{
ffff80000081198c:	f3 0f 1e fa          	endbr64 
ffff800000811990:	55                   	push   rbp
ffff800000811991:	48 89 e5             	mov    rbp,rsp
ffff800000811994:	41 57                	push   r15
ffff800000811996:	53                   	push   rbx
ffff800000811997:	48 83 ec 10          	sub    rsp,0x10
ffff80000081199b:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000081199b <fat32_put_superblock+0xf>
ffff8000008119a2:	49 bb 9d d9 00 00 00 	movabs r11,0xd99d
ffff8000008119a9:	00 00 00 
ffff8000008119ac:	4c 01 db             	add    rbx,r11
ffff8000008119af:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:714
    kmfree(sb->private_sb_info);
ffff8000008119b3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008119b7:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008119bb:	48 89 c7             	mov    rdi,rax
ffff8000008119be:	49 89 df             	mov    r15,rbx
ffff8000008119c1:	48 b8 82 2f fe ff ff 	movabs rax,0xfffffffffffe2f82
ffff8000008119c8:	ff ff ff 
ffff8000008119cb:	48 01 d8             	add    rax,rbx
ffff8000008119ce:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:715
    kmfree(sb->root->dir_inode->private_index_info);
ffff8000008119d0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008119d4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008119d7:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008119db:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff8000008119df:	48 89 c7             	mov    rdi,rax
ffff8000008119e2:	49 89 df             	mov    r15,rbx
ffff8000008119e5:	48 b8 82 2f fe ff ff 	movabs rax,0xfffffffffffe2f82
ffff8000008119ec:	ff ff ff 
ffff8000008119ef:	48 01 d8             	add    rax,rbx
ffff8000008119f2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:716
    kmfree(sb->root->dir_inode);
ffff8000008119f4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008119f8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008119fb:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008119ff:	48 89 c7             	mov    rdi,rax
ffff800000811a02:	49 89 df             	mov    r15,rbx
ffff800000811a05:	48 b8 82 2f fe ff ff 	movabs rax,0xfffffffffffe2f82
ffff800000811a0c:	ff ff ff 
ffff800000811a0f:	48 01 d8             	add    rax,rbx
ffff800000811a12:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:717
    kmfree(sb->root);
ffff800000811a14:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811a18:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811a1b:	48 89 c7             	mov    rdi,rax
ffff800000811a1e:	49 89 df             	mov    r15,rbx
ffff800000811a21:	48 b8 82 2f fe ff ff 	movabs rax,0xfffffffffffe2f82
ffff800000811a28:	ff ff ff 
ffff800000811a2b:	48 01 d8             	add    rax,rbx
ffff800000811a2e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:718
    kmfree(sb);
ffff800000811a30:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811a34:	48 89 c7             	mov    rdi,rax
ffff800000811a37:	49 89 df             	mov    r15,rbx
ffff800000811a3a:	48 b8 82 2f fe ff ff 	movabs rax,0xfffffffffffe2f82
ffff800000811a41:	ff ff ff 
ffff800000811a44:	48 01 d8             	add    rax,rbx
ffff800000811a47:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:719
}
ffff800000811a49:	90                   	nop
ffff800000811a4a:	48 83 c4 10          	add    rsp,0x10
ffff800000811a4e:	5b                   	pop    rbx
ffff800000811a4f:	41 5f                	pop    r15
ffff800000811a51:	5d                   	pop    rbp
ffff800000811a52:	c3                   	ret    

ffff800000811a53 <fat32_write_inode>:
fat32_write_inode():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:722

void fat32_write_inode(struct index_node * inode)
{
ffff800000811a53:	f3 0f 1e fa          	endbr64 
ffff800000811a57:	55                   	push   rbp
ffff800000811a58:	48 89 e5             	mov    rbp,rsp
ffff800000811a5b:	41 57                	push   r15
ffff800000811a5d:	53                   	push   rbx
ffff800000811a5e:	48 83 ec 40          	sub    rsp,0x40
ffff800000811a62:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000811a62 <fat32_write_inode+0xf>
ffff800000811a69:	49 bb d6 d8 00 00 00 	movabs r11,0xd8d6
ffff800000811a70:	00 00 00 
ffff800000811a73:	4c 01 db             	add    rbx,r11
ffff800000811a76:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:723
	struct FAT32_Directory * fdentry = NULL;
ffff800000811a7a:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff800000811a81:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:724
	struct FAT32_Directory * buf = NULL;
ffff800000811a82:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff800000811a89:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:725
	struct FAT32_inode_info * finode = inode->private_index_info;
ffff800000811a8a:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000811a8e:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff800000811a92:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:726
	struct FAT32_sb_info * fsbi = inode->sb->private_sb_info;
ffff800000811a96:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000811a9a:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000811a9e:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000811aa2:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:727
	unsigned long sector = 0;
ffff800000811aa6:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff800000811aad:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:729

	if(finode->dentry_location == 0)
ffff800000811aae:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811ab2:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000811ab6:	48 85 c0             	test   rax,rax
ffff800000811ab9:	75 2d                	jne    ffff800000811ae8 <fat32_write_inode+0x95>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:731
	{
		printf("FS ERROR:write root inode!\n");	
ffff800000811abb:	48 b8 34 cb ff ff ff 	movabs rax,0xffffffffffffcb34
ffff800000811ac2:	ff ff ff 
ffff800000811ac5:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000811ac9:	48 89 c7             	mov    rdi,rax
ffff800000811acc:	49 89 df             	mov    r15,rbx
ffff800000811acf:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811ad4:	48 ba 92 23 fe ff ff 	movabs rdx,0xfffffffffffe2392
ffff800000811adb:	ff ff ff 
ffff800000811ade:	48 01 da             	add    rdx,rbx
ffff800000811ae1:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:732
		return ;
ffff800000811ae3:	e9 8b 01 00 00       	jmp    ffff800000811c73 <fat32_write_inode+0x220>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:735
	}

	sector = fsbi->Data_firstsector + (finode->dentry_location - 2) * fsbi->sector_per_cluster;
ffff800000811ae8:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811aec:	48 8b 48 28          	mov    rcx,QWORD PTR [rax+0x28]
ffff800000811af0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811af4:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000811af8:	48 8d 50 fe          	lea    rdx,[rax-0x2]
ffff800000811afc:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811b00:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000811b04:	48 0f af c2          	imul   rax,rdx
ffff800000811b08:	48 01 c8             	add    rax,rcx
ffff800000811b0b:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:736
	buf = (struct FAT32_Directory *) kmalloc(fsbi->bytes_per_cluster, 0);
ffff800000811b0f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811b13:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000811b17:	be 00 00 00 00       	mov    esi,0x0
ffff800000811b1c:	48 89 c7             	mov    rdi,rax
ffff800000811b1f:	49 89 df             	mov    r15,rbx
ffff800000811b22:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811b27:	48 ba 13 2c fe ff ff 	movabs rdx,0xfffffffffffe2c13
ffff800000811b2e:	ff ff ff 
ffff800000811b31:	48 01 da             	add    rdx,rbx
ffff800000811b34:	ff d2                	call   rdx
ffff800000811b36:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:737
	memset(buf,0,fsbi->bytes_per_cluster);
ffff800000811b3a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811b3e:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000811b42:	89 c2                	mov    edx,eax
ffff800000811b44:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000811b48:	be 00 00 00 00       	mov    esi,0x0
ffff800000811b4d:	48 89 c7             	mov    rdi,rax
ffff800000811b50:	49 89 df             	mov    r15,rbx
ffff800000811b53:	48 b8 d6 3e ff ff ff 	movabs rax,0xffffffffffff3ed6
ffff800000811b5a:	ff ff ff 
ffff800000811b5d:	48 01 d8             	add    rax,rbx
ffff800000811b60:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:738
	int r=request(DISK_MAJOR_MAJOR,DISKREQ_READ,sector,fsbi->sector_per_cluster,(unsigned char *)buf);
ffff800000811b62:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811b66:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000811b6a:	89 c1                	mov    ecx,eax
ffff800000811b6c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000811b70:	89 c2                	mov    edx,eax
ffff800000811b72:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000811b76:	49 89 c0             	mov    r8,rax
ffff800000811b79:	be 00 00 00 00       	mov    esi,0x0
ffff800000811b7e:	bf 00 00 00 00       	mov    edi,0x0
ffff800000811b83:	49 89 df             	mov    r15,rbx
ffff800000811b86:	48 b8 56 f1 fe ff ff 	movabs rax,0xfffffffffffef156
ffff800000811b8d:	ff ff ff 
ffff800000811b90:	48 01 d8             	add    rax,rbx
ffff800000811b93:	ff d0                	call   rax
ffff800000811b95:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:739
    chk_result(r);
ffff800000811b98:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff800000811b9b:	89 c7                	mov    edi,eax
ffff800000811b9d:	49 89 df             	mov    r15,rbx
ffff800000811ba0:	48 b8 ab fb fe ff ff 	movabs rax,0xfffffffffffefbab
ffff800000811ba7:	ff ff ff 
ffff800000811baa:	48 01 d8             	add    rax,rbx
ffff800000811bad:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:740
    fdentry = buf+finode->dentry_position;
ffff800000811baf:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811bb3:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000811bb7:	48 c1 e0 05          	shl    rax,0x5
ffff800000811bbb:	48 89 c2             	mov    rdx,rax
ffff800000811bbe:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000811bc2:	48 01 d0             	add    rax,rdx
ffff800000811bc5:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:743

	////alert fat32 dentry data
	fdentry->DIR_FileSize = inode->file_size;
ffff800000811bc9:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000811bcd:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811bd0:	89 c2                	mov    edx,eax
ffff800000811bd2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811bd6:	89 50 1c             	mov    DWORD PTR [rax+0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:744
	fdentry->DIR_FstClusLO = finode->first_cluster & 0xffff;
ffff800000811bd9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811bdd:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811be0:	89 c2                	mov    edx,eax
ffff800000811be2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811be6:	66 89 50 1a          	mov    WORD PTR [rax+0x1a],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:745
	fdentry->DIR_FstClusHI = (fdentry->DIR_FstClusHI & 0xf000) | (finode->first_cluster >> 16);
ffff800000811bea:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811bee:	0f b7 40 14          	movzx  eax,WORD PTR [rax+0x14]
ffff800000811bf2:	66 25 00 f0          	and    ax,0xf000
ffff800000811bf6:	89 c2                	mov    edx,eax
ffff800000811bf8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811bfc:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811bff:	48 c1 e8 10          	shr    rax,0x10
ffff800000811c03:	09 c2                	or     edx,eax
ffff800000811c05:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811c09:	66 89 50 14          	mov    WORD PTR [rax+0x14],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:747

	int r1=request(DISK_MAJOR_MAJOR,DISKREQ_WRITE,sector,fsbi->sector_per_cluster,(unsigned char *)buf);
ffff800000811c0d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811c11:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000811c15:	89 c1                	mov    ecx,eax
ffff800000811c17:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000811c1b:	89 c2                	mov    edx,eax
ffff800000811c1d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000811c21:	49 89 c0             	mov    r8,rax
ffff800000811c24:	be 01 00 00 00       	mov    esi,0x1
ffff800000811c29:	bf 00 00 00 00       	mov    edi,0x0
ffff800000811c2e:	49 89 df             	mov    r15,rbx
ffff800000811c31:	48 b8 56 f1 fe ff ff 	movabs rax,0xfffffffffffef156
ffff800000811c38:	ff ff ff 
ffff800000811c3b:	48 01 d8             	add    rax,rbx
ffff800000811c3e:	ff d0                	call   rax
ffff800000811c40:	89 45 c0             	mov    DWORD PTR [rbp-0x40],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:748
    chk_result(r1);
ffff800000811c43:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
ffff800000811c46:	89 c7                	mov    edi,eax
ffff800000811c48:	49 89 df             	mov    r15,rbx
ffff800000811c4b:	48 b8 ab fb fe ff ff 	movabs rax,0xfffffffffffefbab
ffff800000811c52:	ff ff ff 
ffff800000811c55:	48 01 d8             	add    rax,rbx
ffff800000811c58:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:749
    kmfree(buf);
ffff800000811c5a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000811c5e:	48 89 c7             	mov    rdi,rax
ffff800000811c61:	49 89 df             	mov    r15,rbx
ffff800000811c64:	48 b8 82 2f fe ff ff 	movabs rax,0xfffffffffffe2f82
ffff800000811c6b:	ff ff ff 
ffff800000811c6e:	48 01 d8             	add    rax,rbx
ffff800000811c71:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:750
}
ffff800000811c73:	48 83 c4 40          	add    rsp,0x40
ffff800000811c77:	5b                   	pop    rbx
ffff800000811c78:	41 5f                	pop    r15
ffff800000811c7a:	5d                   	pop    rbp
ffff800000811c7b:	c3                   	ret    

ffff800000811c7c <fat32_read_superblock>:
fat32_read_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:761

	.write_inode = fat32_write_inode,
};

struct super_block * fat32_read_superblock(struct Disk_Partition_Table_Entry * DPTE,void * buf)
{
ffff800000811c7c:	f3 0f 1e fa          	endbr64 
ffff800000811c80:	55                   	push   rbp
ffff800000811c81:	48 89 e5             	mov    rbp,rsp
ffff800000811c84:	41 57                	push   r15
ffff800000811c86:	53                   	push   rbx
ffff800000811c87:	48 83 ec 50          	sub    rsp,0x50
ffff800000811c8b:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000811c8b <fat32_read_superblock+0xf>
ffff800000811c92:	49 bb ad d6 00 00 00 	movabs r11,0xd6ad
ffff800000811c99:	00 00 00 
ffff800000811c9c:	4c 01 db             	add    rbx,r11
ffff800000811c9f:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
ffff800000811ca3:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:762
	struct super_block * sbp = NULL;
ffff800000811ca7:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff800000811cae:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:763
	struct FAT32_inode_info * finode = NULL;
ffff800000811caf:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff800000811cb6:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:764
	struct FAT32_BootSector * fbs = NULL;
ffff800000811cb7:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff800000811cbe:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:765
	struct FAT32_sb_info * fsbi = NULL;
ffff800000811cbf:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff800000811cc6:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:768

	////super block
	sbp = (struct super_block *) kmalloc(sizeof(struct super_block), 0);
ffff800000811cc7:	be 00 00 00 00       	mov    esi,0x0
ffff800000811ccc:	bf 18 00 00 00       	mov    edi,0x18
ffff800000811cd1:	49 89 df             	mov    r15,rbx
ffff800000811cd4:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811cd9:	48 ba 13 2c fe ff ff 	movabs rdx,0xfffffffffffe2c13
ffff800000811ce0:	ff ff ff 
ffff800000811ce3:	48 01 da             	add    rdx,rbx
ffff800000811ce6:	ff d2                	call   rdx
ffff800000811ce8:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:769
	memset(sbp,0,sizeof(struct super_block));
ffff800000811cec:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811cf0:	ba 18 00 00 00       	mov    edx,0x18
ffff800000811cf5:	be 00 00 00 00       	mov    esi,0x0
ffff800000811cfa:	48 89 c7             	mov    rdi,rax
ffff800000811cfd:	49 89 df             	mov    r15,rbx
ffff800000811d00:	48 b8 d6 3e ff ff ff 	movabs rax,0xffffffffffff3ed6
ffff800000811d07:	ff ff ff 
ffff800000811d0a:	48 01 d8             	add    rax,rbx
ffff800000811d0d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:771

	sbp->sb_ops = &FAT32_sb_ops;
ffff800000811d0f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811d13:	48 ba b0 fe ff ff ff 	movabs rdx,0xfffffffffffffeb0
ffff800000811d1a:	ff ff ff 
ffff800000811d1d:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000811d21:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:772
	sbp->private_sb_info = (struct FAT32_sb_info *) kmalloc(sizeof(struct FAT32_sb_info), 0);
ffff800000811d25:	be 00 00 00 00       	mov    esi,0x0
ffff800000811d2a:	bf 60 00 00 00       	mov    edi,0x60
ffff800000811d2f:	49 89 df             	mov    r15,rbx
ffff800000811d32:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811d37:	48 ba 13 2c fe ff ff 	movabs rdx,0xfffffffffffe2c13
ffff800000811d3e:	ff ff ff 
ffff800000811d41:	48 01 da             	add    rdx,rbx
ffff800000811d44:	ff d2                	call   rdx
ffff800000811d46:	48 89 c2             	mov    rdx,rax
ffff800000811d49:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811d4d:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:773
	memset(sbp->private_sb_info,0,sizeof(struct FAT32_sb_info));
ffff800000811d51:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811d55:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000811d59:	ba 60 00 00 00       	mov    edx,0x60
ffff800000811d5e:	be 00 00 00 00       	mov    esi,0x0
ffff800000811d63:	48 89 c7             	mov    rdi,rax
ffff800000811d66:	49 89 df             	mov    r15,rbx
ffff800000811d69:	48 b8 d6 3e ff ff ff 	movabs rax,0xffffffffffff3ed6
ffff800000811d70:	ff ff ff 
ffff800000811d73:	48 01 d8             	add    rax,rbx
ffff800000811d76:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:776

	////fat32 boot sector
	fbs = (struct FAT32_BootSector *)buf;
ffff800000811d78:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000811d7c:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:777
 	fsbi = sbp->private_sb_info;
ffff800000811d80:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811d84:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000811d88:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:778
	fsbi->start_sector = DPTE->start_LBA;
ffff800000811d8c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000811d90:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000811d93:	89 c2                	mov    edx,eax
ffff800000811d95:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811d99:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:779
	fsbi->sector_count = DPTE->sectors_limit;
ffff800000811d9c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000811da0:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff800000811da3:	89 c2                	mov    edx,eax
ffff800000811da5:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811da9:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:780
	fsbi->sector_per_cluster = fbs->BPB_SecPerClus;
ffff800000811dad:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811db1:	0f b6 40 0d          	movzx  eax,BYTE PTR [rax+0xd]
ffff800000811db5:	0f b6 d0             	movzx  edx,al
ffff800000811db8:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811dbc:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:781
	fsbi->bytes_per_cluster = fbs->BPB_SecPerClus * fbs->BPB_BytesPerSec;
ffff800000811dc0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811dc4:	0f b6 40 0d          	movzx  eax,BYTE PTR [rax+0xd]
ffff800000811dc8:	0f b6 d0             	movzx  edx,al
ffff800000811dcb:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811dcf:	0f b7 40 0b          	movzx  eax,WORD PTR [rax+0xb]
ffff800000811dd3:	0f b7 c0             	movzx  eax,ax
ffff800000811dd6:	0f af c2             	imul   eax,edx
ffff800000811dd9:	48 63 d0             	movsxd rdx,eax
ffff800000811ddc:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811de0:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:782
	fsbi->bytes_per_sector = fbs->BPB_BytesPerSec;
ffff800000811de4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811de8:	0f b7 40 0b          	movzx  eax,WORD PTR [rax+0xb]
ffff800000811dec:	0f b7 d0             	movzx  edx,ax
ffff800000811def:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811df3:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:783
	fsbi->Data_firstsector = DPTE->start_LBA + fbs->BPB_RsvdSecCnt + fbs->BPB_FATSz32 * fbs->BPB_NumFATs;
ffff800000811df7:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000811dfb:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffff800000811dfe:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811e02:	0f b7 40 0e          	movzx  eax,WORD PTR [rax+0xe]
ffff800000811e06:	0f b7 c0             	movzx  eax,ax
ffff800000811e09:	8d 0c 02             	lea    ecx,[rdx+rax*1]
ffff800000811e0c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811e10:	8b 50 24             	mov    edx,DWORD PTR [rax+0x24]
ffff800000811e13:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811e17:	0f b6 40 10          	movzx  eax,BYTE PTR [rax+0x10]
ffff800000811e1b:	0f b6 c0             	movzx  eax,al
ffff800000811e1e:	0f af c2             	imul   eax,edx
ffff800000811e21:	01 c8                	add    eax,ecx
ffff800000811e23:	89 c2                	mov    edx,eax
ffff800000811e25:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811e29:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:784
	fsbi->FAT1_firstsector = DPTE->start_LBA + fbs->BPB_RsvdSecCnt;
ffff800000811e2d:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000811e31:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffff800000811e34:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811e38:	0f b7 40 0e          	movzx  eax,WORD PTR [rax+0xe]
ffff800000811e3c:	0f b7 c0             	movzx  eax,ax
ffff800000811e3f:	01 d0                	add    eax,edx
ffff800000811e41:	89 c2                	mov    edx,eax
ffff800000811e43:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811e47:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:785
	fsbi->sector_per_FAT = fbs->BPB_FATSz32;
ffff800000811e4b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811e4f:	8b 40 24             	mov    eax,DWORD PTR [rax+0x24]
ffff800000811e52:	89 c2                	mov    edx,eax
ffff800000811e54:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811e58:	48 89 50 38          	mov    QWORD PTR [rax+0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:786
	fsbi->NumFATs = fbs->BPB_NumFATs;
ffff800000811e5c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811e60:	0f b6 40 10          	movzx  eax,BYTE PTR [rax+0x10]
ffff800000811e64:	0f b6 d0             	movzx  edx,al
ffff800000811e67:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811e6b:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:787
	fsbi->fsinfo_sector_infat = fbs->BPB_FSInfo;
ffff800000811e6f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811e73:	0f b7 40 30          	movzx  eax,WORD PTR [rax+0x30]
ffff800000811e77:	0f b7 d0             	movzx  edx,ax
ffff800000811e7a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811e7e:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:788
	fsbi->bootsector_bk_infat = fbs->BPB_BkBootSec;	
ffff800000811e82:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811e86:	0f b7 40 32          	movzx  eax,WORD PTR [rax+0x32]
ffff800000811e8a:	0f b7 d0             	movzx  edx,ax
ffff800000811e8d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811e91:	48 89 50 50          	mov    QWORD PTR [rax+0x50],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:790
	
	printf("FAT32 Boot Sector\n\tBPB_FSInfo:%x\n\tBPB_BkBootSec:%x\n\tBPB_TotSec32:%x\n",fbs->BPB_FSInfo,fbs->BPB_BkBootSec,fbs->BPB_TotSec32);
ffff800000811e95:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811e99:	8b 48 20             	mov    ecx,DWORD PTR [rax+0x20]
ffff800000811e9c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811ea0:	0f b7 40 32          	movzx  eax,WORD PTR [rax+0x32]
ffff800000811ea4:	0f b7 d0             	movzx  edx,ax
ffff800000811ea7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811eab:	0f b7 40 30          	movzx  eax,WORD PTR [rax+0x30]
ffff800000811eaf:	0f b7 c0             	movzx  eax,ax
ffff800000811eb2:	89 c6                	mov    esi,eax
ffff800000811eb4:	48 b8 50 cb ff ff ff 	movabs rax,0xffffffffffffcb50
ffff800000811ebb:	ff ff ff 
ffff800000811ebe:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000811ec2:	48 89 c7             	mov    rdi,rax
ffff800000811ec5:	49 89 df             	mov    r15,rbx
ffff800000811ec8:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811ecd:	49 b8 92 23 fe ff ff 	movabs r8,0xfffffffffffe2392
ffff800000811ed4:	ff ff ff 
ffff800000811ed7:	49 01 d8             	add    r8,rbx
ffff800000811eda:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:793
	
	////fat32 fsinfo sector
	fsbi->fat_fsinfo = (struct FAT32_FSInfo *) kmalloc(sizeof(struct FAT32_FSInfo), 0);
ffff800000811edd:	be 00 00 00 00       	mov    esi,0x0
ffff800000811ee2:	bf 00 02 00 00       	mov    edi,0x200
ffff800000811ee7:	49 89 df             	mov    r15,rbx
ffff800000811eea:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811eef:	48 ba 13 2c fe ff ff 	movabs rdx,0xfffffffffffe2c13
ffff800000811ef6:	ff ff ff 
ffff800000811ef9:	48 01 da             	add    rdx,rbx
ffff800000811efc:	ff d2                	call   rdx
ffff800000811efe:	48 89 c2             	mov    rdx,rax
ffff800000811f01:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811f05:	48 89 50 58          	mov    QWORD PTR [rax+0x58],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:794
	memset(fsbi->fat_fsinfo,0,512);
ffff800000811f09:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811f0d:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
ffff800000811f11:	ba 00 02 00 00       	mov    edx,0x200
ffff800000811f16:	be 00 00 00 00       	mov    esi,0x0
ffff800000811f1b:	48 89 c7             	mov    rdi,rax
ffff800000811f1e:	49 89 df             	mov    r15,rbx
ffff800000811f21:	48 b8 d6 3e ff ff ff 	movabs rax,0xffffffffffff3ed6
ffff800000811f28:	ff ff ff 
ffff800000811f2b:	48 01 d8             	add    rax,rbx
ffff800000811f2e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:795
	int r=request(DISK_MAJOR_MAJOR,DISKREQ_READ,DPTE->start_LBA + fbs->BPB_FSInfo,1,(unsigned char *)fsbi->fat_fsinfo);
ffff800000811f30:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811f34:	48 8b 50 58          	mov    rdx,QWORD PTR [rax+0x58]
ffff800000811f38:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000811f3c:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffff800000811f3f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811f43:	0f b7 40 30          	movzx  eax,WORD PTR [rax+0x30]
ffff800000811f47:	0f b7 c0             	movzx  eax,ax
ffff800000811f4a:	01 c8                	add    eax,ecx
ffff800000811f4c:	49 89 d0             	mov    r8,rdx
ffff800000811f4f:	b9 01 00 00 00       	mov    ecx,0x1
ffff800000811f54:	89 c2                	mov    edx,eax
ffff800000811f56:	be 00 00 00 00       	mov    esi,0x0
ffff800000811f5b:	bf 00 00 00 00       	mov    edi,0x0
ffff800000811f60:	49 89 df             	mov    r15,rbx
ffff800000811f63:	48 b8 56 f1 fe ff ff 	movabs rax,0xfffffffffffef156
ffff800000811f6a:	ff ff ff 
ffff800000811f6d:	48 01 d8             	add    rax,rbx
ffff800000811f70:	ff d0                	call   rax
ffff800000811f72:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:796
    chk_result(r);
ffff800000811f75:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000811f78:	89 c7                	mov    edi,eax
ffff800000811f7a:	49 89 df             	mov    r15,rbx
ffff800000811f7d:	48 b8 ab fb fe ff ff 	movabs rax,0xfffffffffffefbab
ffff800000811f84:	ff ff ff 
ffff800000811f87:	48 01 d8             	add    rax,rbx
ffff800000811f8a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:797
	printf("FAT32 FSInfo\n\tFSI_LeadSig:%x\n\tFSI_StrucSig:%x\n\tFSI_Free_Count:%x\n",fsbi->fat_fsinfo->FSI_LeadSig,fsbi->fat_fsinfo->FSI_StrucSig,fsbi->fat_fsinfo->FSI_Free_Count);
ffff800000811f8c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811f90:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
ffff800000811f94:	8b 88 e8 01 00 00    	mov    ecx,DWORD PTR [rax+0x1e8]
ffff800000811f9a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811f9e:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
ffff800000811fa2:	8b 90 e4 01 00 00    	mov    edx,DWORD PTR [rax+0x1e4]
ffff800000811fa8:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811fac:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
ffff800000811fb0:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000811fb2:	89 c6                	mov    esi,eax
ffff800000811fb4:	48 b8 98 cb ff ff ff 	movabs rax,0xffffffffffffcb98
ffff800000811fbb:	ff ff ff 
ffff800000811fbe:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000811fc2:	48 89 c7             	mov    rdi,rax
ffff800000811fc5:	49 89 df             	mov    r15,rbx
ffff800000811fc8:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811fcd:	49 b8 92 23 fe ff ff 	movabs r8,0xfffffffffffe2392
ffff800000811fd4:	ff ff ff 
ffff800000811fd7:	49 01 d8             	add    r8,rbx
ffff800000811fda:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:800
	
	////directory entry
	sbp->root = (struct dir_entry *) kmalloc(sizeof(struct dir_entry), 0);
ffff800000811fdd:	be 00 00 00 00       	mov    esi,0x0
ffff800000811fe2:	bf 58 00 00 00       	mov    edi,0x58
ffff800000811fe7:	49 89 df             	mov    r15,rbx
ffff800000811fea:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811fef:	48 ba 13 2c fe ff ff 	movabs rdx,0xfffffffffffe2c13
ffff800000811ff6:	ff ff ff 
ffff800000811ff9:	48 01 da             	add    rdx,rbx
ffff800000811ffc:	ff d2                	call   rdx
ffff800000811ffe:	48 89 c2             	mov    rdx,rax
ffff800000812001:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812005:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:801
	memset(sbp->root,0,sizeof(struct dir_entry));
ffff800000812008:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081200c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000081200f:	ba 58 00 00 00       	mov    edx,0x58
ffff800000812014:	be 00 00 00 00       	mov    esi,0x0
ffff800000812019:	48 89 c7             	mov    rdi,rax
ffff80000081201c:	49 89 df             	mov    r15,rbx
ffff80000081201f:	48 b8 d6 3e ff ff ff 	movabs rax,0xffffffffffff3ed6
ffff800000812026:	ff ff ff 
ffff800000812029:	48 01 d8             	add    rax,rbx
ffff80000081202c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:803

	list_init(&sbp->root->child_node);
ffff80000081202e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812032:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812035:	48 83 c0 10          	add    rax,0x10
ffff800000812039:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff80000081203d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000812041:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff800000812048:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081204c:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff800000812053:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff800000812054:	90                   	nop
fat32_read_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:804
	list_init(&sbp->root->subdirs_list);
ffff800000812055:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812059:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000081205c:	48 83 c0 28          	add    rax,0x28
ffff800000812060:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff800000812064:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000812068:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000081206f:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000812073:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000081207a:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000081207b:	90                   	nop
fat32_read_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:805
	sbp->root->parent = sbp->root;
ffff80000081207c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812080:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812083:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000812087:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000081208a:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:806
	sbp->root->dir_ops = &FAT32_dentry_ops;
ffff80000081208e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812092:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812095:	48 ba 30 ff ff ff ff 	movabs rdx,0xffffffffffffff30
ffff80000081209c:	ff ff ff 
ffff80000081209f:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff8000008120a3:	48 89 50 50          	mov    QWORD PTR [rax+0x50],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:807
	sbp->root->name = (char *) kmalloc(2, 0);
ffff8000008120a7:	be 00 00 00 00       	mov    esi,0x0
ffff8000008120ac:	bf 02 00 00 00       	mov    edi,0x2
ffff8000008120b1:	49 89 df             	mov    r15,rbx
ffff8000008120b4:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008120b9:	48 ba 13 2c fe ff ff 	movabs rdx,0xfffffffffffe2c13
ffff8000008120c0:	ff ff ff 
ffff8000008120c3:	48 01 da             	add    rdx,rbx
ffff8000008120c6:	ff d2                	call   rdx
ffff8000008120c8:	48 89 c2             	mov    rdx,rax
ffff8000008120cb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008120cf:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008120d2:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:808
	sbp->root->name[0] = '/';
ffff8000008120d5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008120d9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008120dc:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008120df:	c6 00 2f             	mov    BYTE PTR [rax],0x2f
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:809
	sbp->root->name_length = 1;
ffff8000008120e2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008120e6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008120e9:	c7 40 08 01 00 00 00 	mov    DWORD PTR [rax+0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:812

	////index node
	sbp->root->dir_inode = (struct index_node *) kmalloc(sizeof(struct index_node), 0);
ffff8000008120f0:	be 00 00 00 00       	mov    esi,0x0
ffff8000008120f5:	bf 38 00 00 00       	mov    edi,0x38
ffff8000008120fa:	49 89 df             	mov    r15,rbx
ffff8000008120fd:	b8 00 00 00 00       	mov    eax,0x0
ffff800000812102:	48 ba 13 2c fe ff ff 	movabs rdx,0xfffffffffffe2c13
ffff800000812109:	ff ff ff 
ffff80000081210c:	48 01 da             	add    rdx,rbx
ffff80000081210f:	ff d2                	call   rdx
ffff800000812111:	48 89 c2             	mov    rdx,rax
ffff800000812114:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812118:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000081211b:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:813
	memset(sbp->root->dir_inode,0,sizeof(struct index_node));
ffff80000081211f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812123:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812126:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000081212a:	ba 38 00 00 00       	mov    edx,0x38
ffff80000081212f:	be 00 00 00 00       	mov    esi,0x0
ffff800000812134:	48 89 c7             	mov    rdi,rax
ffff800000812137:	49 89 df             	mov    r15,rbx
ffff80000081213a:	48 b8 d6 3e ff ff ff 	movabs rax,0xffffffffffff3ed6
ffff800000812141:	ff ff ff 
ffff800000812144:	48 01 d8             	add    rax,rbx
ffff800000812147:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:814
	sbp->root->dir_inode->inode_ops = &FAT32_inode_ops;
ffff800000812149:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081214d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812150:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000812154:	48 ba 48 ff ff ff ff 	movabs rdx,0xffffffffffffff48
ffff80000081215b:	ff ff ff 
ffff80000081215e:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000812162:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:815
	sbp->root->dir_inode->f_ops = &FAT32_file_ops;
ffff800000812166:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081216a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000081216d:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000812171:	48 ba 20 fe ff ff ff 	movabs rdx,0xfffffffffffffe20
ffff800000812178:	ff ff ff 
ffff80000081217b:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000081217f:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:816
	sbp->root->dir_inode->file_size = 0;
ffff800000812183:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812187:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000081218a:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000081218e:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:817
	sbp->root->dir_inode->blocks = (sbp->root->dir_inode->file_size + fsbi->bytes_per_cluster - 1)/fsbi->bytes_per_sector;
ffff800000812195:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812199:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000081219c:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008121a0:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008121a3:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008121a7:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff8000008121ab:	48 01 d0             	add    rax,rdx
ffff8000008121ae:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff8000008121b2:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008121b6:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff8000008121ba:	48 89 c6             	mov    rsi,rax
ffff8000008121bd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008121c1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008121c4:	48 8b 48 40          	mov    rcx,QWORD PTR [rax+0x40]
ffff8000008121c8:	48 89 d0             	mov    rax,rdx
ffff8000008121cb:	ba 00 00 00 00       	mov    edx,0x0
ffff8000008121d0:	48 f7 f6             	div    rsi
ffff8000008121d3:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:818
	sbp->root->dir_inode->attribute = FS_ATTR_DIR;
ffff8000008121d7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008121db:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008121de:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008121e2:	48 c7 40 10 02 00 00 	mov    QWORD PTR [rax+0x10],0x2
ffff8000008121e9:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:819
	sbp->root->dir_inode->sb = sbp;
ffff8000008121ea:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008121ee:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008121f1:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008121f5:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff8000008121f9:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:822

	////fat32 root inode
	sbp->root->dir_inode->private_index_info = (struct FAT32_inode_info *) kmalloc(sizeof(struct FAT32_inode_info), 0);
ffff8000008121fd:	be 00 00 00 00       	mov    esi,0x0
ffff800000812202:	bf 20 00 00 00       	mov    edi,0x20
ffff800000812207:	49 89 df             	mov    r15,rbx
ffff80000081220a:	b8 00 00 00 00       	mov    eax,0x0
ffff80000081220f:	48 ba 13 2c fe ff ff 	movabs rdx,0xfffffffffffe2c13
ffff800000812216:	ff ff ff 
ffff800000812219:	48 01 da             	add    rdx,rbx
ffff80000081221c:	ff d2                	call   rdx
ffff80000081221e:	48 89 c2             	mov    rdx,rax
ffff800000812221:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812225:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812228:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000081222c:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:823
	memset(sbp->root->dir_inode->private_index_info,0,sizeof(struct FAT32_inode_info));
ffff800000812230:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812234:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812237:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000081223b:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff80000081223f:	ba 20 00 00 00       	mov    edx,0x20
ffff800000812244:	be 00 00 00 00       	mov    esi,0x0
ffff800000812249:	48 89 c7             	mov    rdi,rax
ffff80000081224c:	49 89 df             	mov    r15,rbx
ffff80000081224f:	48 b8 d6 3e ff ff ff 	movabs rax,0xffffffffffff3ed6
ffff800000812256:	ff ff ff 
ffff800000812259:	48 01 d8             	add    rax,rbx
ffff80000081225c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:824
	finode = (struct FAT32_inode_info *)sbp->root->dir_inode->private_index_info;
ffff80000081225e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812262:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812265:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000812269:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff80000081226d:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:825
	finode->first_cluster = fbs->BPB_RootClus;
ffff800000812271:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812275:	8b 40 2c             	mov    eax,DWORD PTR [rax+0x2c]
ffff800000812278:	89 c2                	mov    edx,eax
ffff80000081227a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000081227e:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:826
	finode->dentry_location = 0;
ffff800000812281:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000812285:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
ffff80000081228c:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:827
	finode->dentry_position = 0; 
ffff80000081228d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000812291:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff800000812298:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:828
	finode->create_date = 0;
ffff800000812299:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000081229d:	66 c7 40 18 00 00    	mov    WORD PTR [rax+0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:829
	finode->create_time = 0;
ffff8000008122a3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008122a7:	66 c7 40 1a 00 00    	mov    WORD PTR [rax+0x1a],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:830
	finode->write_date = 0;
ffff8000008122ad:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008122b1:	66 c7 40 1c 00 00    	mov    WORD PTR [rax+0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:831
	finode->write_time = 0;
ffff8000008122b7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008122bb:	66 c7 40 1e 00 00    	mov    WORD PTR [rax+0x1e],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:833

	return sbp;
ffff8000008122c1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:834
}
ffff8000008122c5:	48 83 c4 50          	add    rsp,0x50
ffff8000008122c9:	5b                   	pop    rbx
ffff8000008122ca:	41 5f                	pop    r15
ffff8000008122cc:	5d                   	pop    rbp
ffff8000008122cd:	c3                   	ret    

ffff8000008122ce <DISK1_FAT32_FS_init>:
DISK1_FAT32_FS_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:846
	.read_superblock = fat32_read_superblock,
	.next = NULL,
};

void DISK1_FAT32_FS_init()
{
ffff8000008122ce:	f3 0f 1e fa          	endbr64 
ffff8000008122d2:	55                   	push   rbp
ffff8000008122d3:	48 89 e5             	mov    rbp,rsp
ffff8000008122d6:	41 57                	push   r15
ffff8000008122d8:	53                   	push   rbx
ffff8000008122d9:	48 81 ec 20 04 00 00 	sub    rsp,0x420
ffff8000008122e0:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008122e0 <DISK1_FAT32_FS_init+0x12>
ffff8000008122e7:	49 bb 58 d0 00 00 00 	movabs r11,0xd058
ffff8000008122ee:	00 00 00 
ffff8000008122f1:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:849
	int i;
	unsigned char buf[512];
	struct dir_entry * dentry = NULL;
ffff8000008122f4:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff8000008122fb:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:850
	struct Disk_Partition_Table DPT = {0};
ffff8000008122fc:	48 8d 95 d0 fb ff ff 	lea    rdx,[rbp-0x430]
ffff800000812303:	b8 00 00 00 00       	mov    eax,0x0
ffff800000812308:	b9 40 00 00 00       	mov    ecx,0x40
ffff80000081230d:	48 89 d7             	mov    rdi,rdx
ffff800000812310:	f3 48 ab             	rep stos QWORD PTR es:[rdi],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:852

	register_filesystem(&FAT32_fs_type);
ffff800000812313:	48 b8 f8 fe ff ff ff 	movabs rax,0xfffffffffffffef8
ffff80000081231a:	ff ff ff 
ffff80000081231d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000812321:	48 89 c7             	mov    rdi,rax
ffff800000812324:	49 89 df             	mov    r15,rbx
ffff800000812327:	48 b8 5a d1 fe ff ff 	movabs rax,0xfffffffffffed15a
ffff80000081232e:	ff ff ff 
ffff800000812331:	48 01 d8             	add    rax,rbx
ffff800000812334:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:854
	
	memset(buf,0,512);
ffff800000812336:	48 8d 85 d0 fd ff ff 	lea    rax,[rbp-0x230]
ffff80000081233d:	ba 00 02 00 00       	mov    edx,0x200
ffff800000812342:	be 00 00 00 00       	mov    esi,0x0
ffff800000812347:	48 89 c7             	mov    rdi,rax
ffff80000081234a:	49 89 df             	mov    r15,rbx
ffff80000081234d:	48 b8 d6 3e ff ff ff 	movabs rax,0xffffffffffff3ed6
ffff800000812354:	ff ff ff 
ffff800000812357:	48 01 d8             	add    rax,rbx
ffff80000081235a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:855
	int r=request(DISK_MAJOR_MAJOR,DISKREQ_READ,0x0,1,(unsigned char *)buf);
ffff80000081235c:	48 8d 85 d0 fd ff ff 	lea    rax,[rbp-0x230]
ffff800000812363:	49 89 c0             	mov    r8,rax
ffff800000812366:	b9 01 00 00 00       	mov    ecx,0x1
ffff80000081236b:	ba 00 00 00 00       	mov    edx,0x0
ffff800000812370:	be 00 00 00 00       	mov    esi,0x0
ffff800000812375:	bf 00 00 00 00       	mov    edi,0x0
ffff80000081237a:	49 89 df             	mov    r15,rbx
ffff80000081237d:	48 b8 56 f1 fe ff ff 	movabs rax,0xfffffffffffef156
ffff800000812384:	ff ff ff 
ffff800000812387:	48 01 d8             	add    rax,rbx
ffff80000081238a:	ff d0                	call   rax
ffff80000081238c:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:856
    chk_result(r);
ffff80000081238f:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000812392:	89 c7                	mov    edi,eax
ffff800000812394:	49 89 df             	mov    r15,rbx
ffff800000812397:	48 b8 ab fb fe ff ff 	movabs rax,0xfffffffffffefbab
ffff80000081239e:	ff ff ff 
ffff8000008123a1:	48 01 d8             	add    rax,rbx
ffff8000008123a4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:857
    DPT = *(struct Disk_Partition_Table *)buf;
ffff8000008123a6:	48 8d 95 d0 fd ff ff 	lea    rdx,[rbp-0x230]
ffff8000008123ad:	48 8d 85 d0 fb ff ff 	lea    rax,[rbp-0x430]
ffff8000008123b4:	48 89 d6             	mov    rsi,rdx
ffff8000008123b7:	ba 40 00 00 00       	mov    edx,0x40
ffff8000008123bc:	48 89 c7             	mov    rdi,rax
ffff8000008123bf:	48 89 d1             	mov    rcx,rdx
ffff8000008123c2:	f3 48 a5             	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:858
	printf("DPTE[0] start_LBA:%x\ttype:%x\n",DPT.DPTE[0].start_LBA,DPT.DPTE[0].type);
ffff8000008123c5:	0f b6 85 92 fd ff ff 	movzx  eax,BYTE PTR [rbp-0x26e]
ffff8000008123cc:	0f b6 d0             	movzx  edx,al
ffff8000008123cf:	8b 85 96 fd ff ff    	mov    eax,DWORD PTR [rbp-0x26a]
ffff8000008123d5:	89 c6                	mov    esi,eax
ffff8000008123d7:	48 b8 e0 cb ff ff ff 	movabs rax,0xffffffffffffcbe0
ffff8000008123de:	ff ff ff 
ffff8000008123e1:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008123e5:	48 89 c7             	mov    rdi,rax
ffff8000008123e8:	49 89 df             	mov    r15,rbx
ffff8000008123eb:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008123f0:	48 b9 92 23 fe ff ff 	movabs rcx,0xfffffffffffe2392
ffff8000008123f7:	ff ff ff 
ffff8000008123fa:	48 01 d9             	add    rcx,rbx
ffff8000008123fd:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:860

	memset(buf,0,512);
ffff8000008123ff:	48 8d 85 d0 fd ff ff 	lea    rax,[rbp-0x230]
ffff800000812406:	ba 00 02 00 00       	mov    edx,0x200
ffff80000081240b:	be 00 00 00 00       	mov    esi,0x0
ffff800000812410:	48 89 c7             	mov    rdi,rax
ffff800000812413:	49 89 df             	mov    r15,rbx
ffff800000812416:	48 b8 d6 3e ff ff ff 	movabs rax,0xffffffffffff3ed6
ffff80000081241d:	ff ff ff 
ffff800000812420:	48 01 d8             	add    rax,rbx
ffff800000812423:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:861
	int r1=request(DISK_MAJOR_MAJOR,DISKREQ_READ,DPT.DPTE[0].start_LBA,1,(unsigned char *)buf);
ffff800000812425:	8b 85 96 fd ff ff    	mov    eax,DWORD PTR [rbp-0x26a]
ffff80000081242b:	89 c2                	mov    edx,eax
ffff80000081242d:	48 8d 85 d0 fd ff ff 	lea    rax,[rbp-0x230]
ffff800000812434:	49 89 c0             	mov    r8,rax
ffff800000812437:	b9 01 00 00 00       	mov    ecx,0x1
ffff80000081243c:	be 00 00 00 00       	mov    esi,0x0
ffff800000812441:	bf 00 00 00 00       	mov    edi,0x0
ffff800000812446:	49 89 df             	mov    r15,rbx
ffff800000812449:	48 b8 56 f1 fe ff ff 	movabs rax,0xfffffffffffef156
ffff800000812450:	ff ff ff 
ffff800000812453:	48 01 d8             	add    rax,rbx
ffff800000812456:	ff d0                	call   rax
ffff800000812458:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:862
    chk_result(r1);
ffff80000081245b:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff80000081245e:	89 c7                	mov    edi,eax
ffff800000812460:	49 89 df             	mov    r15,rbx
ffff800000812463:	48 b8 ab fb fe ff ff 	movabs rax,0xfffffffffffefbab
ffff80000081246a:	ff ff ff 
ffff80000081246d:	48 01 d8             	add    rax,rbx
ffff800000812470:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:865

    //挂载新文件系统到/mnt
	struct super_block *fat32_sb= mount_fs("FAT32",&DPT.DPTE[0],buf);	//not dev node
ffff800000812472:	48 8d 85 d0 fd ff ff 	lea    rax,[rbp-0x230]
ffff800000812479:	48 8d 95 d0 fb ff ff 	lea    rdx,[rbp-0x430]
ffff800000812480:	48 8d 8a be 01 00 00 	lea    rcx,[rdx+0x1be]
ffff800000812487:	48 89 c2             	mov    rdx,rax
ffff80000081248a:	48 89 ce             	mov    rsi,rcx
ffff80000081248d:	48 b8 da cb ff ff ff 	movabs rax,0xffffffffffffcbda
ffff800000812494:	ff ff ff 
ffff800000812497:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000081249b:	48 89 c7             	mov    rdi,rax
ffff80000081249e:	49 89 df             	mov    r15,rbx
ffff8000008124a1:	48 b8 ad d0 fe ff ff 	movabs rax,0xfffffffffffed0ad
ffff8000008124a8:	ff ff ff 
ffff8000008124ab:	48 01 d8             	add    rax,rbx
ffff8000008124ae:	ff d0                	call   rax
ffff8000008124b0:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:866
    fat32_sb->root=dmnt;
ffff8000008124b4:	48 b8 d8 fe ff ff ff 	movabs rax,0xfffffffffffffed8
ffff8000008124bb:	ff ff ff 
ffff8000008124be:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008124c2:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008124c5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008124c9:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:868
//    list_add_to_behind(&root_sb->root->subdirs_list,ddev);//把dev文件夹挂到新的rfs下
}
ffff8000008124cc:	90                   	nop
ffff8000008124cd:	48 81 c4 20 04 00 00 	add    rsp,0x420
ffff8000008124d4:	5b                   	pop    rbx
ffff8000008124d5:	41 5f                	pop    r15
ffff8000008124d7:	5d                   	pop    rbp
ffff8000008124d8:	c3                   	ret    

ffff8000008124d9 <close_tty>:
close_tty():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:12
int stdd=0;
struct file_operations tty_fops={
        .open=init_tty, .close=close_tty,.write=write_tty,.read=read_tty,.ioctl=ioctl_tty
};

long close_tty(struct index_node * inode,struct file * filp){
ffff8000008124d9:	f3 0f 1e fa          	endbr64 
ffff8000008124dd:	55                   	push   rbp
ffff8000008124de:	48 89 e5             	mov    rbp,rsp
ffff8000008124e1:	41 57                	push   r15
ffff8000008124e3:	53                   	push   rbx
ffff8000008124e4:	48 83 ec 30          	sub    rsp,0x30
ffff8000008124e8:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008124e8 <close_tty+0xf>
ffff8000008124ef:	49 bb 50 ce 00 00 00 	movabs r11,0xce50
ffff8000008124f6:	00 00 00 
ffff8000008124f9:	4c 01 db             	add    rbx,r11
ffff8000008124fc:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000812500:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:13
    stdbuf_t * bi=&((tty_t*)filp->private_data)->stdin_buf;
ffff800000812504:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000812508:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000081250c:	48 83 c0 18          	add    rax,0x18
ffff800000812510:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:14
    stdbuf_t * bo=&((tty_t*)filp->private_data)->stdout_buf;
ffff800000812514:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000812518:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000081251c:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:15
    stdbuf_t * be=&((tty_t*)filp->private_data)->stderr_buf;
ffff800000812520:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000812524:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000812528:	48 83 c0 30          	add    rax,0x30
ffff80000081252c:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:16
    kmfree((addr_t) bi);
ffff800000812530:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812534:	48 89 c7             	mov    rdi,rax
ffff800000812537:	49 89 df             	mov    r15,rbx
ffff80000081253a:	48 b8 82 2f fe ff ff 	movabs rax,0xfffffffffffe2f82
ffff800000812541:	ff ff ff 
ffff800000812544:	48 01 d8             	add    rax,rbx
ffff800000812547:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:17
    kmfree((addr_t) bo);
ffff800000812549:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000081254d:	48 89 c7             	mov    rdi,rax
ffff800000812550:	49 89 df             	mov    r15,rbx
ffff800000812553:	48 b8 82 2f fe ff ff 	movabs rax,0xfffffffffffe2f82
ffff80000081255a:	ff ff ff 
ffff80000081255d:	48 01 d8             	add    rax,rbx
ffff800000812560:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:18
    kmfree((addr_t) be);
ffff800000812562:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812566:	48 89 c7             	mov    rdi,rax
ffff800000812569:	49 89 df             	mov    r15,rbx
ffff80000081256c:	48 b8 82 2f fe ff ff 	movabs rax,0xfffffffffffe2f82
ffff800000812573:	ff ff ff 
ffff800000812576:	48 01 d8             	add    rax,rbx
ffff800000812579:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:19
    kmfree((addr_t) filp->private_data);
ffff80000081257b:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000081257f:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000812583:	48 89 c7             	mov    rdi,rax
ffff800000812586:	49 89 df             	mov    r15,rbx
ffff800000812589:	48 b8 82 2f fe ff ff 	movabs rax,0xfffffffffffe2f82
ffff800000812590:	ff ff ff 
ffff800000812593:	48 01 d8             	add    rax,rbx
ffff800000812596:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:20
    return 0;
ffff800000812598:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:21
}
ffff80000081259d:	48 83 c4 30          	add    rsp,0x30
ffff8000008125a1:	5b                   	pop    rbx
ffff8000008125a2:	41 5f                	pop    r15
ffff8000008125a4:	5d                   	pop    rbp
ffff8000008125a5:	c3                   	ret    

ffff8000008125a6 <init_tty>:
init_tty():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:24
//打开文件
long init_tty(struct index_node * inode,struct file * filp)
{
ffff8000008125a6:	f3 0f 1e fa          	endbr64 
ffff8000008125aa:	55                   	push   rbp
ffff8000008125ab:	48 89 e5             	mov    rbp,rsp
ffff8000008125ae:	41 57                	push   r15
ffff8000008125b0:	53                   	push   rbx
ffff8000008125b1:	48 83 ec 20          	sub    rsp,0x20
ffff8000008125b5:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008125b5 <init_tty+0xf>
ffff8000008125bc:	49 bb 83 cd 00 00 00 	movabs r11,0xcd83
ffff8000008125c3:	00 00 00 
ffff8000008125c6:	4c 01 db             	add    rbx,r11
ffff8000008125c9:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff8000008125cd:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:25
    tty_t *ntty=(tty_t*) kmalloc();
ffff8000008125d1:	49 89 df             	mov    r15,rbx
ffff8000008125d4:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008125d9:	48 ba 13 2c fe ff ff 	movabs rdx,0xfffffffffffe2c13
ffff8000008125e0:	ff ff ff 
ffff8000008125e3:	48 01 da             	add    rdx,rbx
ffff8000008125e6:	ff d2                	call   rdx
ffff8000008125e8:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:27
    //创建三个缓冲区
    ntty->stdin_buf.data= (char*) kmalloc();
ffff8000008125ec:	49 89 df             	mov    r15,rbx
ffff8000008125ef:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008125f4:	48 ba 13 2c fe ff ff 	movabs rdx,0xfffffffffffe2c13
ffff8000008125fb:	ff ff ff 
ffff8000008125fe:	48 01 da             	add    rdx,rbx
ffff800000812601:	ff d2                	call   rdx
ffff800000812603:	48 89 c2             	mov    rdx,rax
ffff800000812606:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081260a:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:28
    ntty->stdout_buf.data=(char*) kmalloc();
ffff80000081260e:	49 89 df             	mov    r15,rbx
ffff800000812611:	b8 00 00 00 00       	mov    eax,0x0
ffff800000812616:	48 ba 13 2c fe ff ff 	movabs rdx,0xfffffffffffe2c13
ffff80000081261d:	ff ff ff 
ffff800000812620:	48 01 da             	add    rdx,rbx
ffff800000812623:	ff d2                	call   rdx
ffff800000812625:	48 89 c2             	mov    rdx,rax
ffff800000812628:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081262c:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:29
    ntty->stderr_buf.data=(char*) kmalloc();
ffff80000081262f:	49 89 df             	mov    r15,rbx
ffff800000812632:	b8 00 00 00 00       	mov    eax,0x0
ffff800000812637:	48 ba 13 2c fe ff ff 	movabs rdx,0xfffffffffffe2c13
ffff80000081263e:	ff ff ff 
ffff800000812641:	48 01 da             	add    rdx,rbx
ffff800000812644:	ff d2                	call   rdx
ffff800000812646:	48 89 c2             	mov    rdx,rax
ffff800000812649:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081264d:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:30
    ntty->stdin_buf. wptr= 0;
ffff800000812651:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812655:	c7 40 20 00 00 00 00 	mov    DWORD PTR [rax+0x20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:31
    ntty->stdout_buf.wptr= 0;
ffff80000081265c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812660:	c7 40 08 00 00 00 00 	mov    DWORD PTR [rax+0x8],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:32
    ntty->stderr_buf.wptr= 0;
ffff800000812667:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081266b:	c7 40 38 00 00 00 00 	mov    DWORD PTR [rax+0x38],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:33
    ntty->stdin_buf. rptr= 0;
ffff800000812672:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812676:	c7 40 24 00 00 00 00 	mov    DWORD PTR [rax+0x24],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:34
    ntty->stdout_buf.rptr= 0;
ffff80000081267d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812681:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [rax+0xc],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:35
    ntty->stderr_buf.rptr= 0;
ffff800000812688:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081268c:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [rax+0x3c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:36
    ntty->stdin_buf.size= PAGE_4K_SIZE;
ffff800000812693:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812697:	c7 40 28 00 10 00 00 	mov    DWORD PTR [rax+0x28],0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:37
    ntty->stdout_buf.size= PAGE_4K_SIZE;
ffff80000081269e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008126a2:	c7 40 10 00 10 00 00 	mov    DWORD PTR [rax+0x10],0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:38
    ntty->stderr_buf.size= PAGE_4K_SIZE;
ffff8000008126a9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008126ad:	c7 40 40 00 10 00 00 	mov    DWORD PTR [rax+0x40],0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:40
    //设置inode文件操作方式为tty方式
    inode->f_ops=&tty_fops;
ffff8000008126b4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008126b8:	48 ba c8 fe ff ff ff 	movabs rdx,0xfffffffffffffec8
ffff8000008126bf:	ff ff ff 
ffff8000008126c2:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff8000008126c6:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:41
    filp->f_ops=&tty_fops;
ffff8000008126ca:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008126ce:	48 ba c8 fe ff ff ff 	movabs rdx,0xfffffffffffffec8
ffff8000008126d5:	ff ff ff 
ffff8000008126d8:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff8000008126dc:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:42
    filp->private_data=ntty;
ffff8000008126e0:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008126e4:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff8000008126e8:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:43
    return 0;
ffff8000008126ec:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:44
}
ffff8000008126f1:	48 83 c4 20          	add    rsp,0x20
ffff8000008126f5:	5b                   	pop    rbx
ffff8000008126f6:	41 5f                	pop    r15
ffff8000008126f8:	5d                   	pop    rbp
ffff8000008126f9:	c3                   	ret    

ffff8000008126fa <read_tty>:
read_tty():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:47

long read_tty(struct file * filp,char * buf,unsigned long count,long * position)
{
ffff8000008126fa:	f3 0f 1e fa          	endbr64 
ffff8000008126fe:	55                   	push   rbp
ffff8000008126ff:	48 89 e5             	mov    rbp,rsp
ffff800000812702:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000812702 <read_tty+0x8>
ffff800000812709:	49 bb 36 cc 00 00 00 	movabs r11,0xcc36
ffff800000812710:	00 00 00 
ffff800000812713:	4c 01 d8             	add    rax,r11
ffff800000812716:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff80000081271a:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000081271e:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffff800000812722:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:48
    stdbuf_t * b=&((tty_t*)filp->private_data)->stdin_buf;
ffff800000812726:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081272a:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000081272e:	48 83 c0 18          	add    rax,0x18
ffff800000812732:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:49
    int i=0;
ffff800000812736:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:50
    while (i<count){
ffff80000081273d:	eb 6e                	jmp    ffff8000008127ad <read_tty+0xb3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:51
        if(b->rptr==b->size)
ffff80000081273f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000812743:	8b 50 0c             	mov    edx,DWORD PTR [rax+0xc]
ffff800000812746:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000081274a:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff80000081274d:	39 c2                	cmp    edx,eax
ffff80000081274f:	75 0b                	jne    ffff80000081275c <read_tty+0x62>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:52
            b->rptr=0;
ffff800000812751:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000812755:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [rax+0xc],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:53
        if(b->rptr==b->wptr)continue;
ffff80000081275c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000812760:	8b 50 0c             	mov    edx,DWORD PTR [rax+0xc]
ffff800000812763:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000812767:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000081276a:	39 c2                	cmp    edx,eax
ffff80000081276c:	75 02                	jne    ffff800000812770 <read_tty+0x76>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:53 (discriminator 1)
ffff80000081276e:	eb 3d                	jmp    ffff8000008127ad <read_tty+0xb3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:54
        buf[i++]=b->data[b->rptr];
ffff800000812770:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000812774:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000812777:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000081277b:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff80000081277e:	48 98                	cdqe   
ffff800000812780:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
ffff800000812784:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000812787:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000081278a:	89 55 fc             	mov    DWORD PTR [rbp-0x4],edx
ffff80000081278d:	48 63 d0             	movsxd rdx,eax
ffff800000812790:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000812794:	48 01 c2             	add    rdx,rax
ffff800000812797:	0f b6 01             	movzx  eax,BYTE PTR [rcx]
ffff80000081279a:	88 02                	mov    BYTE PTR [rdx],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:55
        b->rptr++;
ffff80000081279c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008127a0:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff8000008127a3:	8d 50 01             	lea    edx,[rax+0x1]
ffff8000008127a6:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008127aa:	89 50 0c             	mov    DWORD PTR [rax+0xc],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:50
    while (i<count){
ffff8000008127ad:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008127b0:	48 98                	cdqe   
ffff8000008127b2:	48 39 45 d8          	cmp    QWORD PTR [rbp-0x28],rax
ffff8000008127b6:	77 87                	ja     ffff80000081273f <read_tty+0x45>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:57
    }
}
ffff8000008127b8:	90                   	nop
ffff8000008127b9:	5d                   	pop    rbp
ffff8000008127ba:	c3                   	ret    

ffff8000008127bb <write_tty>:
write_tty():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:59
long write_tty(struct file * filp,char * buf,unsigned long count,long * position)
{
ffff8000008127bb:	f3 0f 1e fa          	endbr64 
ffff8000008127bf:	55                   	push   rbp
ffff8000008127c0:	48 89 e5             	mov    rbp,rsp
ffff8000008127c3:	41 57                	push   r15
ffff8000008127c5:	48 83 ec 48          	sub    rsp,0x48
ffff8000008127c9:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008127c9 <write_tty+0xe>
ffff8000008127d0:	49 bb 6f cb 00 00 00 	movabs r11,0xcb6f
ffff8000008127d7:	00 00 00 
ffff8000008127da:	4c 01 d8             	add    rax,r11
ffff8000008127dd:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff8000008127e1:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffff8000008127e5:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
ffff8000008127e9:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:60
    stdbuf_t * b=&((tty_t*)filp->private_data)->stdout_buf;
ffff8000008127ed:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff8000008127f1:	48 8b 52 20          	mov    rdx,QWORD PTR [rdx+0x20]
ffff8000008127f5:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:61
    int i=0;
ffff8000008127f9:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:62
    int saved_wptr=b->wptr;
ffff800000812800:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000812804:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff800000812807:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:63
    while (i<count){
ffff80000081280a:	eb 5b                	jmp    ffff800000812867 <write_tty+0xac>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:64
        if(b->wptr==b->size)
ffff80000081280c:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000812810:	8b 4a 08             	mov    ecx,DWORD PTR [rdx+0x8]
ffff800000812813:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000812817:	8b 52 10             	mov    edx,DWORD PTR [rdx+0x10]
ffff80000081281a:	39 d1                	cmp    ecx,edx
ffff80000081281c:	75 0b                	jne    ffff800000812829 <write_tty+0x6e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:65
            b->wptr=0;
ffff80000081281e:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000812822:	c7 42 08 00 00 00 00 	mov    DWORD PTR [rdx+0x8],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:66
        b->data[b->wptr]=buf[i++];
ffff800000812829:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000081282c:	8d 4a 01             	lea    ecx,[rdx+0x1]
ffff80000081282f:	89 4d ec             	mov    DWORD PTR [rbp-0x14],ecx
ffff800000812832:	48 63 ca             	movsxd rcx,edx
ffff800000812835:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000812839:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff80000081283d:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000812841:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000812844:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000812848:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff80000081284b:	48 63 d2             	movsxd rdx,edx
ffff80000081284e:	48 01 d1             	add    rcx,rdx
ffff800000812851:	0f b6 16             	movzx  edx,BYTE PTR [rsi]
ffff800000812854:	88 11                	mov    BYTE PTR [rcx],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:67
        b->wptr++;
ffff800000812856:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000081285a:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff80000081285d:	8d 4a 01             	lea    ecx,[rdx+0x1]
ffff800000812860:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000812864:	89 4a 08             	mov    DWORD PTR [rdx+0x8],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:63
    while (i<count){
ffff800000812867:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000081286a:	48 63 d2             	movsxd rdx,edx
ffff80000081286d:	48 39 55 b8          	cmp    QWORD PTR [rbp-0x48],rdx
ffff800000812871:	77 99                	ja     ffff80000081280c <write_tty+0x51>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:70
    }
    //刷新到framebuffer
    write_framebuffer(filp,b->data+saved_wptr,count,0);
ffff800000812873:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000812877:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000081287a:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000081287d:	48 63 d2             	movsxd rdx,edx
ffff800000812880:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff800000812884:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff800000812888:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
ffff80000081288c:	b9 00 00 00 00       	mov    ecx,0x0
ffff800000812891:	49 89 c7             	mov    r15,rax
ffff800000812894:	49 b8 23 cb fe ff ff 	movabs r8,0xfffffffffffecb23
ffff80000081289b:	ff ff ff 
ffff80000081289e:	49 01 c0             	add    r8,rax
ffff8000008128a1:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:71
}
ffff8000008128a4:	90                   	nop
ffff8000008128a5:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff8000008128a9:	c9                   	leave  
ffff8000008128aa:	c3                   	ret    

ffff8000008128ab <ioctl_tty>:
ioctl_tty():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:81
 * TTY_CONNECT:尝试连接到dev/console,这样会成为controlling terminal,里面的数据才能输出到屏幕上，
 * 因为除了特殊指定的进程都会有一个自己的天tty。
 * 成功返回0。
 * */
long ioctl_tty(struct index_node * inode, struct file * filp, unsigned long cmd, unsigned long arg)
{
ffff8000008128ab:	f3 0f 1e fa          	endbr64 
ffff8000008128af:	55                   	push   rbp
ffff8000008128b0:	48 89 e5             	mov    rbp,rsp
ffff8000008128b3:	41 57                	push   r15
ffff8000008128b5:	48 83 ec 58          	sub    rsp,0x58
ffff8000008128b9:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008128b9 <ioctl_tty+0xe>
ffff8000008128c0:	49 bb 7f ca 00 00 00 	movabs r11,0xca7f
ffff8000008128c7:	00 00 00 
ffff8000008128ca:	4c 01 d8             	add    rax,r11
ffff8000008128cd:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
ffff8000008128d1:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
ffff8000008128d5:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
ffff8000008128d9:	48 89 4d a0          	mov    QWORD PTR [rbp-0x60],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:82
    stdbuf_t * b=&((tty_t*)filp->private_data)->stderr_buf;
ffff8000008128dd:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffff8000008128e1:	48 8b 52 20          	mov    rdx,QWORD PTR [rdx+0x20]
ffff8000008128e5:	48 83 c2 30          	add    rdx,0x30
ffff8000008128e9:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:83
    stdbuf_t * ib=&((tty_t*)filp->private_data)->stdin_buf;
ffff8000008128ed:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffff8000008128f1:	48 8b 52 20          	mov    rdx,QWORD PTR [rdx+0x20]
ffff8000008128f5:	48 83 c2 18          	add    rdx,0x18
ffff8000008128f9:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:84
    int i=0;
ffff8000008128fd:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:85
    char* buf=*((char**)arg);
ffff800000812904:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
ffff800000812908:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000081290b:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:86
    unsigned long count=*((unsigned long*)(arg+8));
ffff80000081290f:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
ffff800000812913:	48 83 c2 08          	add    rdx,0x8
ffff800000812917:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000081291a:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:87
    int saved_wptr=b->wptr;
ffff80000081291e:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000812922:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff800000812925:	89 55 c4             	mov    DWORD PTR [rbp-0x3c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:88
    int fd=-1;
ffff800000812928:	c7 45 c0 ff ff ff ff 	mov    DWORD PTR [rbp-0x40],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:89
    switch (cmd)
ffff80000081292f:	48 83 7d a8 03       	cmp    QWORD PTR [rbp-0x58],0x3
ffff800000812934:	0f 84 b8 01 00 00    	je     ffff800000812af2 <ioctl_tty+0x247>
ffff80000081293a:	48 83 7d a8 03       	cmp    QWORD PTR [rbp-0x58],0x3
ffff80000081293f:	0f 87 b8 01 00 00    	ja     ffff800000812afd <ioctl_tty+0x252>
ffff800000812945:	48 83 7d a8 02       	cmp    QWORD PTR [rbp-0x58],0x2
ffff80000081294a:	0f 84 0f 01 00 00    	je     ffff800000812a5f <ioctl_tty+0x1b4>
ffff800000812950:	48 83 7d a8 02       	cmp    QWORD PTR [rbp-0x58],0x2
ffff800000812955:	0f 87 a2 01 00 00    	ja     ffff800000812afd <ioctl_tty+0x252>
ffff80000081295b:	48 83 7d a8 00       	cmp    QWORD PTR [rbp-0x58],0x0
ffff800000812960:	74 6b                	je     ffff8000008129cd <ioctl_tty+0x122>
ffff800000812962:	48 83 7d a8 01       	cmp    QWORD PTR [rbp-0x58],0x1
ffff800000812967:	0f 84 a2 00 00 00    	je     ffff800000812a0f <ioctl_tty+0x164>
ffff80000081296d:	e9 8b 01 00 00       	jmp    ffff800000812afd <ioctl_tty+0x252>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:93
    {
        case TTY_WSTDERR:
            while (i<count){
                if(b->wptr==b->size)
ffff800000812972:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000812976:	8b 4a 08             	mov    ecx,DWORD PTR [rdx+0x8]
ffff800000812979:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000081297d:	8b 52 10             	mov    edx,DWORD PTR [rdx+0x10]
ffff800000812980:	39 d1                	cmp    ecx,edx
ffff800000812982:	75 0b                	jne    ffff80000081298f <ioctl_tty+0xe4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:94
                    b->wptr=0;
ffff800000812984:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000812988:	c7 42 08 00 00 00 00 	mov    DWORD PTR [rdx+0x8],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:95
                b->data[b->wptr]=buf[i++];
ffff80000081298f:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000812992:	8d 4a 01             	lea    ecx,[rdx+0x1]
ffff800000812995:	89 4d ec             	mov    DWORD PTR [rbp-0x14],ecx
ffff800000812998:	48 63 ca             	movsxd rcx,edx
ffff80000081299b:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000081299f:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff8000008129a3:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008129a7:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008129aa:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008129ae:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff8000008129b1:	48 63 d2             	movsxd rdx,edx
ffff8000008129b4:	48 01 d1             	add    rcx,rdx
ffff8000008129b7:	0f b6 16             	movzx  edx,BYTE PTR [rsi]
ffff8000008129ba:	88 11                	mov    BYTE PTR [rcx],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:96
                b->wptr++;
ffff8000008129bc:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008129c0:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff8000008129c3:	8d 4a 01             	lea    ecx,[rdx+0x1]
ffff8000008129c6:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008129ca:	89 4a 08             	mov    DWORD PTR [rdx+0x8],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:92
            while (i<count){
ffff8000008129cd:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff8000008129d0:	48 63 d2             	movsxd rdx,edx
ffff8000008129d3:	48 39 55 c8          	cmp    QWORD PTR [rbp-0x38],rdx
ffff8000008129d7:	77 99                	ja     ffff800000812972 <ioctl_tty+0xc7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:99
            }
            //刷新到framebuffer
            write_framebuffer(filp,b->data+saved_wptr,count,0);
ffff8000008129d9:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008129dd:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008129e0:	8b 55 c4             	mov    edx,DWORD PTR [rbp-0x3c]
ffff8000008129e3:	48 63 d2             	movsxd rdx,edx
ffff8000008129e6:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff8000008129ea:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff8000008129ee:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
ffff8000008129f2:	b9 00 00 00 00       	mov    ecx,0x0
ffff8000008129f7:	49 89 c7             	mov    r15,rax
ffff8000008129fa:	49 b8 23 cb fe ff ff 	movabs r8,0xfffffffffffecb23
ffff800000812a01:	ff ff ff 
ffff800000812a04:	49 01 c0             	add    r8,rax
ffff800000812a07:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:100
        break;
ffff800000812a0a:	e9 f7 00 00 00       	jmp    ffff800000812b06 <ioctl_tty+0x25b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:102
        case TTY_CONNECT:
            fd=sys_open("dev/console",O_WRONLY|O_CREAT|O_EXCL);
ffff800000812a0f:	be c1 00 00 00       	mov    esi,0xc1
ffff800000812a14:	48 ba fe cb ff ff ff 	movabs rdx,0xffffffffffffcbfe
ffff800000812a1b:	ff ff ff 
ffff800000812a1e:	48 8d 14 10          	lea    rdx,[rax+rdx*1]
ffff800000812a22:	48 89 d7             	mov    rdi,rdx
ffff800000812a25:	49 89 c7             	mov    r15,rax
ffff800000812a28:	48 ba 16 d6 fe ff ff 	movabs rdx,0xfffffffffffed616
ffff800000812a2f:	ff ff ff 
ffff800000812a32:	48 01 c2             	add    rdx,rax
ffff800000812a35:	ff d2                	call   rdx
ffff800000812a37:	89 45 c0             	mov    DWORD PTR [rbp-0x40],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:103
            if(fd==-1)return -1;
ffff800000812a3a:	83 7d c0 ff          	cmp    DWORD PTR [rbp-0x40],0xffffffff
ffff800000812a3e:	75 0c                	jne    ffff800000812a4c <ioctl_tty+0x1a1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:103 (discriminator 1)
ffff800000812a40:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff800000812a47:	e9 bf 00 00 00       	jmp    ffff800000812b0b <ioctl_tty+0x260>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:104
            ((tty_t*)filp->private_data)->console_fd=fd;
ffff800000812a4c:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000812a50:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000812a54:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
ffff800000812a57:	89 50 48             	mov    DWORD PTR [rax+0x48],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:105
            break;
ffff800000812a5a:	e9 a7 00 00 00       	jmp    ffff800000812b06 <ioctl_tty+0x25b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:107
        case TTY_DISCONNECT:
            fd=((tty_t*)filp->private_data)->console_fd;
ffff800000812a5f:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffff800000812a63:	48 8b 52 20          	mov    rdx,QWORD PTR [rdx+0x20]
ffff800000812a67:	8b 52 48             	mov    edx,DWORD PTR [rdx+0x48]
ffff800000812a6a:	89 55 c0             	mov    DWORD PTR [rbp-0x40],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:108
            if(fd==-1)return -1;
ffff800000812a6d:	83 7d c0 ff          	cmp    DWORD PTR [rbp-0x40],0xffffffff
ffff800000812a71:	75 0c                	jne    ffff800000812a7f <ioctl_tty+0x1d4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:108 (discriminator 1)
ffff800000812a73:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff800000812a7a:	e9 8c 00 00 00       	jmp    ffff800000812b0b <ioctl_tty+0x260>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:109
            sys_close(fd);
ffff800000812a7f:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
ffff800000812a82:	89 d7                	mov    edi,edx
ffff800000812a84:	49 89 c7             	mov    r15,rax
ffff800000812a87:	48 ba ca dc fe ff ff 	movabs rdx,0xfffffffffffedcca
ffff800000812a8e:	ff ff ff 
ffff800000812a91:	48 01 c2             	add    rdx,rax
ffff800000812a94:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:111
        case TTY_WSTDIN:
            while (i<count){
ffff800000812a96:	eb 5a                	jmp    ffff800000812af2 <ioctl_tty+0x247>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:112
                if(ib->wptr==ib->size)
ffff800000812a98:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812a9c:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffff800000812a9f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812aa3:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff800000812aa6:	39 c2                	cmp    edx,eax
ffff800000812aa8:	75 0b                	jne    ffff800000812ab5 <ioctl_tty+0x20a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:113
                    ib->wptr=0;
ffff800000812aaa:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812aae:	c7 40 08 00 00 00 00 	mov    DWORD PTR [rax+0x8],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:114
                ib->data[ib->wptr]=buf[i++];
ffff800000812ab5:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000812ab8:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000812abb:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
ffff800000812abe:	48 63 d0             	movsxd rdx,eax
ffff800000812ac1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000812ac5:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
ffff800000812ac9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812acd:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000812ad0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812ad4:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000812ad7:	48 98                	cdqe   
ffff800000812ad9:	48 01 c2             	add    rdx,rax
ffff800000812adc:	0f b6 01             	movzx  eax,BYTE PTR [rcx]
ffff800000812adf:	88 02                	mov    BYTE PTR [rdx],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:115
                ib->wptr++;
ffff800000812ae1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812ae5:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000812ae8:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000812aeb:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812aef:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:111
            while (i<count){
ffff800000812af2:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000812af5:	48 98                	cdqe   
ffff800000812af7:	48 39 45 c8          	cmp    QWORD PTR [rbp-0x38],rax
ffff800000812afb:	77 9b                	ja     ffff800000812a98 <ioctl_tty+0x1ed>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:117
            }
    default:return -1;
ffff800000812afd:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff800000812b04:	eb 05                	jmp    ffff800000812b0b <ioctl_tty+0x260>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:119
    }
    return 0;
ffff800000812b06:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:120
}
ffff800000812b0b:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000812b0f:	c9                   	leave  
ffff800000812b10:	c3                   	ret    

ffff800000812b11 <init_com>:
init_com():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:12
#include "str.h"
#include "memory.h"
#include "mem.h"

char combuf[1024];
void init_com(int base_port){
ffff800000812b11:	f3 0f 1e fa          	endbr64 
ffff800000812b15:	55                   	push   rbp
ffff800000812b16:	48 89 e5             	mov    rbp,rsp
ffff800000812b19:	41 57                	push   r15
ffff800000812b1b:	53                   	push   rbx
ffff800000812b1c:	48 83 ec 10          	sub    rsp,0x10
ffff800000812b20:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000812b20 <init_com+0xf>
ffff800000812b27:	49 bb 18 c8 00 00 00 	movabs r11,0xc818
ffff800000812b2e:	00 00 00 
ffff800000812b31:	4c 01 db             	add    rbx,r11
ffff800000812b34:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:14
    /* disable all interrupts */
    outb(base_port + COM_REG_IER, 0x00);
ffff800000812b37:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000812b3a:	83 c0 01             	add    eax,0x1
ffff800000812b3d:	0f b7 c0             	movzx  eax,ax
ffff800000812b40:	be 00 00 00 00       	mov    esi,0x0
ffff800000812b45:	89 c7                	mov    edi,eax
ffff800000812b47:	49 89 df             	mov    r15,rbx
ffff800000812b4a:	48 b8 48 ae fe ff ff 	movabs rax,0xfffffffffffeae48
ffff800000812b51:	ff ff ff 
ffff800000812b54:	48 01 d8             	add    rax,rbx
ffff800000812b57:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:17
    
    /* enable DLAB to set bound rate divisor */
    outb(base_port + COM_REG_LCR, 0x80);
ffff800000812b59:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000812b5c:	83 c0 03             	add    eax,0x3
ffff800000812b5f:	0f b7 c0             	movzx  eax,ax
ffff800000812b62:	be 80 00 00 00       	mov    esi,0x80
ffff800000812b67:	89 c7                	mov    edi,eax
ffff800000812b69:	49 89 df             	mov    r15,rbx
ffff800000812b6c:	48 b8 48 ae fe ff ff 	movabs rax,0xfffffffffffeae48
ffff800000812b73:	ff ff ff 
ffff800000812b76:	48 01 d8             	add    rax,rbx
ffff800000812b79:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:20
    
    /* set divisor to 38400 baud */
    outb(base_port + COM_REG_DLL, 0x03);
ffff800000812b7b:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000812b7e:	0f b7 c0             	movzx  eax,ax
ffff800000812b81:	be 03 00 00 00       	mov    esi,0x3
ffff800000812b86:	89 c7                	mov    edi,eax
ffff800000812b88:	49 89 df             	mov    r15,rbx
ffff800000812b8b:	48 b8 48 ae fe ff ff 	movabs rax,0xfffffffffffeae48
ffff800000812b92:	ff ff ff 
ffff800000812b95:	48 01 d8             	add    rax,rbx
ffff800000812b98:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:21
    outb(base_port + COM_REG_DLM, 0x00);
ffff800000812b9a:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000812b9d:	83 c0 01             	add    eax,0x1
ffff800000812ba0:	0f b7 c0             	movzx  eax,ax
ffff800000812ba3:	be 00 00 00 00       	mov    esi,0x0
ffff800000812ba8:	89 c7                	mov    edi,eax
ffff800000812baa:	49 89 df             	mov    r15,rbx
ffff800000812bad:	48 b8 48 ae fe ff ff 	movabs rax,0xfffffffffffeae48
ffff800000812bb4:	ff ff ff 
ffff800000812bb7:	48 01 d8             	add    rax,rbx
ffff800000812bba:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:24
    
    /* 8 data bits, parity off, 1 stop bit, DLAB latch off */
    outb(base_port + COM_REG_LCR, 0x03);
ffff800000812bbc:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000812bbf:	83 c0 03             	add    eax,0x3
ffff800000812bc2:	0f b7 c0             	movzx  eax,ax
ffff800000812bc5:	be 03 00 00 00       	mov    esi,0x3
ffff800000812bca:	89 c7                	mov    edi,eax
ffff800000812bcc:	49 89 df             	mov    r15,rbx
ffff800000812bcf:	48 b8 48 ae fe ff ff 	movabs rax,0xfffffffffffeae48
ffff800000812bd6:	ff ff ff 
ffff800000812bd9:	48 01 d8             	add    rax,rbx
ffff800000812bdc:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:27
    
    /* enable FIFO */
    outb(base_port + COM_REG_FCR, 0x87);//0xc7
ffff800000812bde:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000812be1:	83 c0 02             	add    eax,0x2
ffff800000812be4:	0f b7 c0             	movzx  eax,ax
ffff800000812be7:	be 87 00 00 00       	mov    esi,0x87
ffff800000812bec:	89 c7                	mov    edi,eax
ffff800000812bee:	49 89 df             	mov    r15,rbx
ffff800000812bf1:	48 b8 48 ae fe ff ff 	movabs rax,0xfffffffffffeae48
ffff800000812bf8:	ff ff ff 
ffff800000812bfb:	48 01 d8             	add    rax,rbx
ffff800000812bfe:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:30

    /* enable IRQs, set RTS/DSR */
    outb(base_port + COM_REG_MCR, 0x0B);
ffff800000812c00:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000812c03:	83 c0 04             	add    eax,0x4
ffff800000812c06:	0f b7 c0             	movzx  eax,ax
ffff800000812c09:	be 0b 00 00 00       	mov    esi,0xb
ffff800000812c0e:	89 c7                	mov    edi,eax
ffff800000812c10:	49 89 df             	mov    r15,rbx
ffff800000812c13:	48 b8 48 ae fe ff ff 	movabs rax,0xfffffffffffeae48
ffff800000812c1a:	ff ff ff 
ffff800000812c1d:	48 01 d8             	add    rax,rbx
ffff800000812c20:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:44
//    if (inb(base_port + COM_REG_RX) != 0xae) {
//        return;
//    }
    
    /* set in normal mode */
    outb(base_port + COM_REG_MCR, 0x0F);
ffff800000812c22:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000812c25:	83 c0 04             	add    eax,0x4
ffff800000812c28:	0f b7 c0             	movzx  eax,ax
ffff800000812c2b:	be 0f 00 00 00       	mov    esi,0xf
ffff800000812c30:	89 c7                	mov    edi,eax
ffff800000812c32:	49 89 df             	mov    r15,rbx
ffff800000812c35:	48 b8 48 ae fe ff ff 	movabs rax,0xfffffffffffeae48
ffff800000812c3c:	ff ff ff 
ffff800000812c3f:	48 01 d8             	add    rax,rbx
ffff800000812c42:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:45
}
ffff800000812c44:	90                   	nop
ffff800000812c45:	48 83 c4 10          	add    rsp,0x10
ffff800000812c49:	5b                   	pop    rbx
ffff800000812c4a:	41 5f                	pop    r15
ffff800000812c4c:	5d                   	pop    rbp
ffff800000812c4d:	c3                   	ret    

ffff800000812c4e <com_putchar>:
com_putchar():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:47
void com_putchar(unsigned short ch,int com_base)
{
ffff800000812c4e:	f3 0f 1e fa          	endbr64 
ffff800000812c52:	55                   	push   rbp
ffff800000812c53:	48 89 e5             	mov    rbp,rsp
ffff800000812c56:	41 57                	push   r15
ffff800000812c58:	53                   	push   rbx
ffff800000812c59:	48 83 ec 20          	sub    rsp,0x20
ffff800000812c5d:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000812c5d <com_putchar+0xf>
ffff800000812c64:	49 bb db c6 00 00 00 	movabs r11,0xc6db
ffff800000812c6b:	00 00 00 
ffff800000812c6e:	4c 01 db             	add    rbx,r11
ffff800000812c71:	89 f8                	mov    eax,edi
ffff800000812c73:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff800000812c76:	66 89 45 dc          	mov    WORD PTR [rbp-0x24],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:51 (discriminator 1)
    unsigned char res;
    /* wait for the port to be ready */
    do {
        res = inb(com_base + COM_REG_LSR);
ffff800000812c7a:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000812c7d:	83 c0 05             	add    eax,0x5
ffff800000812c80:	0f b6 c0             	movzx  eax,al
ffff800000812c83:	89 c7                	mov    edi,eax
ffff800000812c85:	49 89 df             	mov    r15,rbx
ffff800000812c88:	48 b8 61 ae fe ff ff 	movabs rax,0xfffffffffffeae61
ffff800000812c8f:	ff ff ff 
ffff800000812c92:	48 01 d8             	add    rax,rbx
ffff800000812c95:	ff d0                	call   rax
ffff800000812c97:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:52 (discriminator 1)
        res &= 0x20;
ffff800000812c9a:	80 65 ef 20          	and    BYTE PTR [rbp-0x11],0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:53 (discriminator 1)
    } while (res == 0);
ffff800000812c9e:	80 7d ef 00          	cmp    BYTE PTR [rbp-0x11],0x0
ffff800000812ca2:	74 d6                	je     ffff800000812c7a <com_putchar+0x2c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:54
    outb(com_base, ch);
ffff800000812ca4:	0f b7 45 dc          	movzx  eax,WORD PTR [rbp-0x24]
ffff800000812ca8:	0f b6 d0             	movzx  edx,al
ffff800000812cab:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000812cae:	0f b7 c0             	movzx  eax,ax
ffff800000812cb1:	89 d6                	mov    esi,edx
ffff800000812cb3:	89 c7                	mov    edi,eax
ffff800000812cb5:	49 89 df             	mov    r15,rbx
ffff800000812cb8:	48 b8 48 ae fe ff ff 	movabs rax,0xfffffffffffeae48
ffff800000812cbf:	ff ff ff 
ffff800000812cc2:	48 01 d8             	add    rax,rbx
ffff800000812cc5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:55
}
ffff800000812cc7:	90                   	nop
ffff800000812cc8:	48 83 c4 20          	add    rsp,0x20
ffff800000812ccc:	5b                   	pop    rbx
ffff800000812ccd:	41 5f                	pop    r15
ffff800000812ccf:	5d                   	pop    rbp
ffff800000812cd0:	c3                   	ret    

ffff800000812cd1 <com_puts>:
com_puts():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:57

void com_puts(char* s,int com_port){
ffff800000812cd1:	f3 0f 1e fa          	endbr64 
ffff800000812cd5:	55                   	push   rbp
ffff800000812cd6:	48 89 e5             	mov    rbp,rsp
ffff800000812cd9:	41 57                	push   r15
ffff800000812cdb:	53                   	push   rbx
ffff800000812cdc:	48 83 ec 10          	sub    rsp,0x10
ffff800000812ce0:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000812ce0 <com_puts+0xf>
ffff800000812ce7:	49 bb 58 c6 00 00 00 	movabs r11,0xc658
ffff800000812cee:	00 00 00 
ffff800000812cf1:	4c 01 db             	add    rbx,r11
ffff800000812cf4:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000812cf8:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:58
    for(;*s;s++){
ffff800000812cfb:	eb 2a                	jmp    ffff800000812d27 <com_puts+0x56>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:59 (discriminator 2)
        com_putchar(*s,com_port);
ffff800000812cfd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812d01:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812d04:	66 98                	cbw    
ffff800000812d06:	0f b7 c0             	movzx  eax,ax
ffff800000812d09:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffff800000812d0c:	89 d6                	mov    esi,edx
ffff800000812d0e:	89 c7                	mov    edi,eax
ffff800000812d10:	49 89 df             	mov    r15,rbx
ffff800000812d13:	48 b8 16 39 ff ff ff 	movabs rax,0xffffffffffff3916
ffff800000812d1a:	ff ff ff 
ffff800000812d1d:	48 01 d8             	add    rax,rbx
ffff800000812d20:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:58 (discriminator 2)
    for(;*s;s++){
ffff800000812d22:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:58 (discriminator 1)
ffff800000812d27:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000812d2b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812d2e:	84 c0                	test   al,al
ffff800000812d30:	75 cb                	jne    ffff800000812cfd <com_puts+0x2c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:61
    }
}
ffff800000812d32:	90                   	nop
ffff800000812d33:	90                   	nop
ffff800000812d34:	48 83 c4 10          	add    rsp,0x10
ffff800000812d38:	5b                   	pop    rbx
ffff800000812d39:	41 5f                	pop    r15
ffff800000812d3b:	5d                   	pop    rbp
ffff800000812d3c:	c3                   	ret    

ffff800000812d3d <comprintf>:
comprintf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:63

void comprintf(char* fmt,...){
ffff800000812d3d:	f3 0f 1e fa          	endbr64 
ffff800000812d41:	55                   	push   rbp
ffff800000812d42:	48 89 e5             	mov    rbp,rsp
ffff800000812d45:	41 57                	push   r15
ffff800000812d47:	53                   	push   rbx
ffff800000812d48:	48 81 ec 10 01 00 00 	sub    rsp,0x110
ffff800000812d4f:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000812d4f <comprintf+0x12>
ffff800000812d56:	49 bb e9 c5 00 00 00 	movabs r11,0xc5e9
ffff800000812d5d:	00 00 00 
ffff800000812d60:	4c 01 db             	add    rbx,r11
ffff800000812d63:	48 89 bd e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rdi
ffff800000812d6a:	48 89 b5 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rsi
ffff800000812d71:	48 89 95 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rdx
ffff800000812d78:	48 89 8d 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rcx
ffff800000812d7f:	4c 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],r8
ffff800000812d86:	4c 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],r9
ffff800000812d8d:	84 c0                	test   al,al
ffff800000812d8f:	74 23                	je     ffff800000812db4 <comprintf+0x77>
ffff800000812d91:	0f 29 85 70 ff ff ff 	movaps XMMWORD PTR [rbp-0x90],xmm0
ffff800000812d98:	0f 29 4d 80          	movaps XMMWORD PTR [rbp-0x80],xmm1
ffff800000812d9c:	0f 29 55 90          	movaps XMMWORD PTR [rbp-0x70],xmm2
ffff800000812da0:	0f 29 5d a0          	movaps XMMWORD PTR [rbp-0x60],xmm3
ffff800000812da4:	0f 29 65 b0          	movaps XMMWORD PTR [rbp-0x50],xmm4
ffff800000812da8:	0f 29 6d c0          	movaps XMMWORD PTR [rbp-0x40],xmm5
ffff800000812dac:	0f 29 75 d0          	movaps XMMWORD PTR [rbp-0x30],xmm6
ffff800000812db0:	0f 29 7d e0          	movaps XMMWORD PTR [rbp-0x20],xmm7
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:64
    if(strlen(fmt)>=1024)
ffff800000812db4:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
ffff800000812dbb:	48 89 c7             	mov    rdi,rax
ffff800000812dbe:	49 89 df             	mov    r15,rbx
ffff800000812dc1:	48 b8 f8 41 ff ff ff 	movabs rax,0xffffffffffff41f8
ffff800000812dc8:	ff ff ff 
ffff800000812dcb:	48 01 d8             	add    rax,rbx
ffff800000812dce:	ff d0                	call   rax
ffff800000812dd0:	3d ff 03 00 00       	cmp    eax,0x3ff
ffff800000812dd5:	0f 8f 77 03 00 00    	jg     ffff800000813152 <comprintf+0x415>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:67
        return;//一次性输出不了太长
    //这里不使用kmalloc
    char* tmp=combuf;
ffff800000812ddb:	48 b8 b0 fd ff ff ff 	movabs rax,0xfffffffffffffdb0
ffff800000812de2:	ff ff ff 
ffff800000812de5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000812de9:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:68
    memset(tmp,0, sizeof(combuf));
ffff800000812df0:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000812df7:	ba 00 04 00 00       	mov    edx,0x400
ffff800000812dfc:	be 00 00 00 00       	mov    esi,0x0
ffff800000812e01:	48 89 c7             	mov    rdi,rax
ffff800000812e04:	49 89 df             	mov    r15,rbx
ffff800000812e07:	48 b8 d6 3e ff ff ff 	movabs rax,0xffffffffffff3ed6
ffff800000812e0e:	ff ff ff 
ffff800000812e11:	48 01 d8             	add    rax,rbx
ffff800000812e14:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:70
    //count num of args
    char *pstr=fmt;
ffff800000812e16:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
ffff800000812e1d:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:71
    char *prev=fmt;
ffff800000812e24:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
ffff800000812e2b:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:74

    va_list vargs;
    va_start(vargs,fmt);
ffff800000812e32:	c7 85 f0 fe ff ff 08 	mov    DWORD PTR [rbp-0x110],0x8
ffff800000812e39:	00 00 00 
ffff800000812e3c:	c7 85 f4 fe ff ff 30 	mov    DWORD PTR [rbp-0x10c],0x30
ffff800000812e43:	00 00 00 
ffff800000812e46:	48 8d 45 10          	lea    rax,[rbp+0x10]
ffff800000812e4a:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
ffff800000812e51:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
ffff800000812e58:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:75
    pstr=fmt;
ffff800000812e5f:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
ffff800000812e66:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:76
    for(;*pstr!='\0';pstr++){
ffff800000812e6d:	e9 ab 02 00 00       	jmp    ffff80000081311d <comprintf+0x3e0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:77
        if(*pstr=='%'&&*(pstr+1)!='\0'){
ffff800000812e72:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000812e79:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812e7c:	3c 25                	cmp    al,0x25
ffff800000812e7e:	0f 85 66 02 00 00    	jne    ffff8000008130ea <comprintf+0x3ad>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:77 (discriminator 1)
ffff800000812e84:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000812e8b:	48 83 c0 01          	add    rax,0x1
ffff800000812e8f:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812e92:	84 c0                	test   al,al
ffff800000812e94:	0f 84 50 02 00 00    	je     ffff8000008130ea <comprintf+0x3ad>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:78
            pstr++;
ffff800000812e9a:	48 83 85 38 ff ff ff 	add    QWORD PTR [rbp-0xc8],0x1
ffff800000812ea1:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:79
            if(*pstr=='x'){
ffff800000812ea2:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000812ea9:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812eac:	3c 78                	cmp    al,0x78
ffff800000812eae:	75 75                	jne    ffff800000812f25 <comprintf+0x1e8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:80
                int v=va_arg(vargs,int);
ffff800000812eb0:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x110]
ffff800000812eb6:	83 f8 2f             	cmp    eax,0x2f
ffff800000812eb9:	77 23                	ja     ffff800000812ede <comprintf+0x1a1>
ffff800000812ebb:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff800000812ec2:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff800000812ec8:	89 d2                	mov    edx,edx
ffff800000812eca:	48 01 d0             	add    rax,rdx
ffff800000812ecd:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff800000812ed3:	83 c2 08             	add    edx,0x8
ffff800000812ed6:	89 95 f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],edx
ffff800000812edc:	eb 12                	jmp    ffff800000812ef0 <comprintf+0x1b3>
ffff800000812ede:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000812ee5:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000812ee9:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
ffff800000812ef0:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000812ef2:	89 85 0c ff ff ff    	mov    DWORD PTR [rbp-0xf4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:81
                sprint_hex(tmp,v);
ffff800000812ef8:	8b 85 0c ff ff ff    	mov    eax,DWORD PTR [rbp-0xf4]
ffff800000812efe:	48 63 d0             	movsxd rdx,eax
ffff800000812f01:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000812f08:	48 89 d6             	mov    rsi,rdx
ffff800000812f0b:	48 89 c7             	mov    rdi,rax
ffff800000812f0e:	49 89 df             	mov    r15,rbx
ffff800000812f11:	48 b8 4b 46 ff ff ff 	movabs rax,0xffffffffffff464b
ffff800000812f18:	ff ff ff 
ffff800000812f1b:	48 01 d8             	add    rax,rbx
ffff800000812f1e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:79
            if(*pstr=='x'){
ffff800000812f20:	e9 f0 01 00 00       	jmp    ffff800000813115 <comprintf+0x3d8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:82
            }else if(*pstr=='s'){
ffff800000812f25:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000812f2c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812f2f:	3c 73                	cmp    al,0x73
ffff800000812f31:	75 75                	jne    ffff800000812fa8 <comprintf+0x26b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:83
                char* v=va_arg(vargs,char*);
ffff800000812f33:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x110]
ffff800000812f39:	83 f8 2f             	cmp    eax,0x2f
ffff800000812f3c:	77 23                	ja     ffff800000812f61 <comprintf+0x224>
ffff800000812f3e:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff800000812f45:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff800000812f4b:	89 d2                	mov    edx,edx
ffff800000812f4d:	48 01 d0             	add    rax,rdx
ffff800000812f50:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff800000812f56:	83 c2 08             	add    edx,0x8
ffff800000812f59:	89 95 f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],edx
ffff800000812f5f:	eb 12                	jmp    ffff800000812f73 <comprintf+0x236>
ffff800000812f61:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000812f68:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000812f6c:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
ffff800000812f73:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812f76:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:84
                sprintn(tmp,v);
ffff800000812f7d:	48 8b 95 10 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf0]
ffff800000812f84:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000812f8b:	48 89 d6             	mov    rsi,rdx
ffff800000812f8e:	48 89 c7             	mov    rdi,rax
ffff800000812f91:	49 89 df             	mov    r15,rbx
ffff800000812f94:	48 b8 d9 46 ff ff ff 	movabs rax,0xffffffffffff46d9
ffff800000812f9b:	ff ff ff 
ffff800000812f9e:	48 01 d8             	add    rax,rbx
ffff800000812fa1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:79
            if(*pstr=='x'){
ffff800000812fa3:	e9 6d 01 00 00       	jmp    ffff800000813115 <comprintf+0x3d8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:85
            }else if(*pstr=='d'){
ffff800000812fa8:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000812faf:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812fb2:	3c 64                	cmp    al,0x64
ffff800000812fb4:	75 76                	jne    ffff80000081302c <comprintf+0x2ef>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:86
                char* v=va_arg(vargs,char*);
ffff800000812fb6:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x110]
ffff800000812fbc:	83 f8 2f             	cmp    eax,0x2f
ffff800000812fbf:	77 23                	ja     ffff800000812fe4 <comprintf+0x2a7>
ffff800000812fc1:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff800000812fc8:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff800000812fce:	89 d2                	mov    edx,edx
ffff800000812fd0:	48 01 d0             	add    rax,rdx
ffff800000812fd3:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff800000812fd9:	83 c2 08             	add    edx,0x8
ffff800000812fdc:	89 95 f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],edx
ffff800000812fe2:	eb 12                	jmp    ffff800000812ff6 <comprintf+0x2b9>
ffff800000812fe4:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000812feb:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000812fef:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
ffff800000812ff6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812ff9:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:87
                sprint_decimal(tmp,v);
ffff800000813000:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
ffff800000813007:	89 c2                	mov    edx,eax
ffff800000813009:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000813010:	89 d6                	mov    esi,edx
ffff800000813012:	48 89 c7             	mov    rdi,rax
ffff800000813015:	49 89 df             	mov    r15,rbx
ffff800000813018:	48 b8 90 45 ff ff ff 	movabs rax,0xffffffffffff4590
ffff80000081301f:	ff ff ff 
ffff800000813022:	48 01 d8             	add    rax,rbx
ffff800000813025:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:79
            if(*pstr=='x'){
ffff800000813027:	e9 e9 00 00 00       	jmp    ffff800000813115 <comprintf+0x3d8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:88
            }else if(*pstr=='c'){
ffff80000081302c:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000813033:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813036:	3c 63                	cmp    al,0x63
ffff800000813038:	75 02                	jne    ffff80000081303c <comprintf+0x2ff>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:89
                char v=va_arg(vargs,char);
ffff80000081303a:	0f 0b                	ud2    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:91
                sprintchar(tmp,v);
            }else if(*pstr=='p') {
ffff80000081303c:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000813043:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813046:	3c 70                	cmp    al,0x70
ffff800000813048:	75 73                	jne    ffff8000008130bd <comprintf+0x380>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:92
                int v=va_arg(vargs,addr_t);
ffff80000081304a:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x110]
ffff800000813050:	83 f8 2f             	cmp    eax,0x2f
ffff800000813053:	77 23                	ja     ffff800000813078 <comprintf+0x33b>
ffff800000813055:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff80000081305c:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff800000813062:	89 d2                	mov    edx,edx
ffff800000813064:	48 01 d0             	add    rax,rdx
ffff800000813067:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff80000081306d:	83 c2 08             	add    edx,0x8
ffff800000813070:	89 95 f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],edx
ffff800000813076:	eb 12                	jmp    ffff80000081308a <comprintf+0x34d>
ffff800000813078:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff80000081307f:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000813083:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
ffff80000081308a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000081308d:	89 85 24 ff ff ff    	mov    DWORD PTR [rbp-0xdc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:93
                sprint_hex(tmp,v);
ffff800000813093:	8b 85 24 ff ff ff    	mov    eax,DWORD PTR [rbp-0xdc]
ffff800000813099:	48 63 d0             	movsxd rdx,eax
ffff80000081309c:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff8000008130a3:	48 89 d6             	mov    rsi,rdx
ffff8000008130a6:	48 89 c7             	mov    rdi,rax
ffff8000008130a9:	49 89 df             	mov    r15,rbx
ffff8000008130ac:	48 b8 4b 46 ff ff ff 	movabs rax,0xffffffffffff464b
ffff8000008130b3:	ff ff ff 
ffff8000008130b6:	48 01 d8             	add    rax,rbx
ffff8000008130b9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:79
            if(*pstr=='x'){
ffff8000008130bb:	eb 58                	jmp    ffff800000813115 <comprintf+0x3d8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:95
            }else{
                    sprintchar(tmp,*pstr);
ffff8000008130bd:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff8000008130c4:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008130c7:	0f be d0             	movsx  edx,al
ffff8000008130ca:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff8000008130d1:	89 d6                	mov    esi,edx
ffff8000008130d3:	48 89 c7             	mov    rdi,rax
ffff8000008130d6:	49 89 df             	mov    r15,rbx
ffff8000008130d9:	48 b8 51 45 ff ff ff 	movabs rax,0xffffffffffff4551
ffff8000008130e0:	ff ff ff 
ffff8000008130e3:	48 01 d8             	add    rax,rbx
ffff8000008130e6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:79
            if(*pstr=='x'){
ffff8000008130e8:	eb 2b                	jmp    ffff800000813115 <comprintf+0x3d8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:98
                }
        }else{
            sprintchar(tmp,*pstr);
ffff8000008130ea:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff8000008130f1:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008130f4:	0f be d0             	movsx  edx,al
ffff8000008130f7:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff8000008130fe:	89 d6                	mov    esi,edx
ffff800000813100:	48 89 c7             	mov    rdi,rax
ffff800000813103:	49 89 df             	mov    r15,rbx
ffff800000813106:	48 b8 51 45 ff ff ff 	movabs rax,0xffffffffffff4551
ffff80000081310d:	ff ff ff 
ffff800000813110:	48 01 d8             	add    rax,rbx
ffff800000813113:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:76
    for(;*pstr!='\0';pstr++){
ffff800000813115:	48 83 85 38 ff ff ff 	add    QWORD PTR [rbp-0xc8],0x1
ffff80000081311c:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:76 (discriminator 1)
ffff80000081311d:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000813124:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813127:	84 c0                	test   al,al
ffff800000813129:	0f 85 43 fd ff ff    	jne    ffff800000812e72 <comprintf+0x135>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:102
        }
    }
    va_end(vargs);
    com_puts(tmp,PORT_COM1);
ffff80000081312f:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000813136:	be f8 03 00 00       	mov    esi,0x3f8
ffff80000081313b:	48 89 c7             	mov    rdi,rax
ffff80000081313e:	49 89 df             	mov    r15,rbx
ffff800000813141:	48 b8 99 39 ff ff ff 	movabs rax,0xffffffffffff3999
ffff800000813148:	ff ff ff 
ffff80000081314b:	48 01 d8             	add    rax,rbx
ffff80000081314e:	ff d0                	call   rax
ffff800000813150:	eb 01                	jmp    ffff800000813153 <comprintf+0x416>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:65
        return;//一次性输出不了太长
ffff800000813152:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:103
ffff800000813153:	48 81 c4 10 01 00 00 	add    rsp,0x110
ffff80000081315a:	5b                   	pop    rbx
ffff80000081315b:	41 5f                	pop    r15
ffff80000081315d:	5d                   	pop    rbp
ffff80000081315e:	c3                   	ret    

ffff80000081315f <memcpy>:
memcpy():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:5
#include "mem.h"
#include "typename.h"
static u32 mem_end;
static u32 usr_mem_base;
void memcpy(u8* dest, u8 *src,u32 size){
ffff80000081315f:	f3 0f 1e fa          	endbr64 
ffff800000813163:	55                   	push   rbp
ffff800000813164:	48 89 e5             	mov    rbp,rsp
ffff800000813167:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff80000081316b:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000081316f:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:6
    *dest=0xff;//如果页内存还没分配，这样就可以先激发缺页异常分配了，之后写数据就会完整不会少开头第一个字节。
ffff800000813172:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813176:	c6 00 ff             	mov    BYTE PTR [rax],0xff
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:7
    for(int i=0;i<size;i++){
ffff800000813179:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000813180:	eb 1b                	jmp    ffff80000081319d <memcpy+0x3e>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:8 (discriminator 3)
        *(dest)=*(src);
ffff800000813182:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000813186:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff800000813189:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081318d:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:9 (discriminator 3)
        dest++;
ffff80000081318f:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:10 (discriminator 3)
        src++;
ffff800000813194:	48 83 45 e0 01       	add    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:7 (discriminator 3)
    for(int i=0;i<size;i++){
ffff800000813199:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:7 (discriminator 1)
ffff80000081319d:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008131a0:	39 45 dc             	cmp    DWORD PTR [rbp-0x24],eax
ffff8000008131a3:	77 dd                	ja     ffff800000813182 <memcpy+0x23>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:12
    }
}
ffff8000008131a5:	90                   	nop
ffff8000008131a6:	90                   	nop
ffff8000008131a7:	5d                   	pop    rbp
ffff8000008131a8:	c3                   	ret    

ffff8000008131a9 <memcmp>:
memcmp():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:14
int memcmp(u8 *a,u8* b,int len)
{
ffff8000008131a9:	f3 0f 1e fa          	endbr64 
ffff8000008131ad:	55                   	push   rbp
ffff8000008131ae:	48 89 e5             	mov    rbp,rsp
ffff8000008131b1:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff8000008131b5:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff8000008131b9:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:15
    for(int i=0;i<len;i++)
ffff8000008131bc:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff8000008131c3:	eb 3a                	jmp    ffff8000008131ff <memcmp+0x56>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:17
    {
        if(*a!=*b)
ffff8000008131c5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008131c9:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff8000008131cc:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008131d0:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008131d3:	38 c2                	cmp    dl,al
ffff8000008131d5:	74 1a                	je     ffff8000008131f1 <memcmp+0x48>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:18
            return *a-*b;
ffff8000008131d7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008131db:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008131de:	0f b6 d0             	movzx  edx,al
ffff8000008131e1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008131e5:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008131e8:	0f b6 c8             	movzx  ecx,al
ffff8000008131eb:	89 d0                	mov    eax,edx
ffff8000008131ed:	29 c8                	sub    eax,ecx
ffff8000008131ef:	eb 1b                	jmp    ffff80000081320c <memcmp+0x63>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:19 (discriminator 2)
        a++;
ffff8000008131f1:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:20 (discriminator 2)
        b++;
ffff8000008131f6:	48 83 45 e0 01       	add    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:15 (discriminator 2)
    for(int i=0;i<len;i++)
ffff8000008131fb:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:15 (discriminator 1)
ffff8000008131ff:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000813202:	3b 45 dc             	cmp    eax,DWORD PTR [rbp-0x24]
ffff800000813205:	7c be                	jl     ffff8000008131c5 <memcmp+0x1c>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:22
    }
    return 0;
ffff800000813207:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:23
}
ffff80000081320c:	5d                   	pop    rbp
ffff80000081320d:	c3                   	ret    

ffff80000081320e <memset>:
memset():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:24
void memset(u8 *buf,u8 value,u32 size){
ffff80000081320e:	f3 0f 1e fa          	endbr64 
ffff800000813212:	55                   	push   rbp
ffff800000813213:	48 89 e5             	mov    rbp,rsp
ffff800000813216:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff80000081321a:	89 f0                	mov    eax,esi
ffff80000081321c:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
ffff80000081321f:	88 45 e4             	mov    BYTE PTR [rbp-0x1c],al
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:25
    for(u32 i=0;i<size;i++){
ffff800000813222:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000813229:	eb 16                	jmp    ffff800000813241 <memset+0x33>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:26 (discriminator 3)
        *(buf++)=value;
ffff80000081322b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081322f:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffff800000813233:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff800000813237:	0f b6 55 e4          	movzx  edx,BYTE PTR [rbp-0x1c]
ffff80000081323b:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:25 (discriminator 3)
    for(u32 i=0;i<size;i++){
ffff80000081323d:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:25 (discriminator 1)
ffff800000813241:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000813244:	3b 45 e0             	cmp    eax,DWORD PTR [rbp-0x20]
ffff800000813247:	72 e2                	jb     ffff80000081322b <memset+0x1d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:28
    }
}
ffff800000813249:	90                   	nop
ffff80000081324a:	90                   	nop
ffff80000081324b:	5d                   	pop    rbp
ffff80000081324c:	c3                   	ret    

ffff80000081324d <get_mem_size>:
get_mem_size():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:30

u32 get_mem_size(){
ffff80000081324d:	f3 0f 1e fa          	endbr64 
ffff800000813251:	55                   	push   rbp
ffff800000813252:	48 89 e5             	mov    rbp,rsp
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:31
    return mem_end;
ffff800000813255:	48 b8 00 ea 41 00 00 	movabs rax,0xffff80000041ea00
ffff80000081325c:	80 ff ff 
ffff80000081325f:	8b 00                	mov    eax,DWORD PTR [rax]
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:32
}
ffff800000813261:	5d                   	pop    rbp
ffff800000813262:	c3                   	ret    

ffff800000813263 <strcpy>:
strcpy():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:3
#include "str.h"
#include <stdarg.h>
void strcpy(unsigned char* dest, unsigned char *buf){
ffff800000813263:	f3 0f 1e fa          	endbr64 
ffff800000813267:	55                   	push   rbp
ffff800000813268:	48 89 e5             	mov    rbp,rsp
ffff80000081326b:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000081326f:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:4
    while(*buf!='\0'){
ffff800000813273:	eb 1d                	jmp    ffff800000813292 <strcpy+0x2f>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:5
        *(dest++)=*(buf++);
ffff800000813275:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff800000813279:	48 8d 42 01          	lea    rax,[rdx+0x1]
ffff80000081327d:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffff800000813281:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000813285:	48 8d 48 01          	lea    rcx,[rax+0x1]
ffff800000813289:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
ffff80000081328d:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff800000813290:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:4
    while(*buf!='\0'){
ffff800000813292:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000813296:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813299:	84 c0                	test   al,al
ffff80000081329b:	75 d8                	jne    ffff800000813275 <strcpy+0x12>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:7
    }
    *dest='\0';
ffff80000081329d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008132a1:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:8
}
ffff8000008132a4:	90                   	nop
ffff8000008132a5:	5d                   	pop    rbp
ffff8000008132a6:	c3                   	ret    

ffff8000008132a7 <strtok>:
strtok():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:12
static char strtokkee[512],*strtokkeeptr=strtokkee;
static int tokptr=0;
static char retbuf[512],*retbptr=retbuf;
char* strtok(char *str,char splitter){
ffff8000008132a7:	f3 0f 1e fa          	endbr64 
ffff8000008132ab:	55                   	push   rbp
ffff8000008132ac:	48 89 e5             	mov    rbp,rsp
ffff8000008132af:	48 83 ec 30          	sub    rsp,0x30
ffff8000008132b3:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff8000008132b7:	89 f0                	mov    eax,esi
ffff8000008132b9:	88 45 d4             	mov    BYTE PTR [rbp-0x2c],al
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:14
    //limit: cannot cut string longer than 512
    if(str!=(void*)0){
ffff8000008132bc:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff8000008132c1:	0f 84 fa 00 00 00    	je     ffff8000008133c1 <strtok+0x11a>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:16
        //cut for the first time
        strcpy(strtokkee,str);
ffff8000008132c7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008132cb:	48 89 c6             	mov    rsi,rax
ffff8000008132ce:	48 b8 20 ea 41 00 00 	movabs rax,0xffff80000041ea20
ffff8000008132d5:	80 ff ff 
ffff8000008132d8:	48 89 c7             	mov    rdi,rax
ffff8000008132db:	48 b8 63 32 81 00 00 	movabs rax,0xffff800000813263
ffff8000008132e2:	80 ff ff 
ffff8000008132e5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:17
        char* ptr=strtokkee;
ffff8000008132e7:	48 b8 20 ea 41 00 00 	movabs rax,0xffff80000041ea20
ffff8000008132ee:	80 ff ff 
ffff8000008132f1:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:18
        for(tokptr=0;strtokkee[tokptr]!=splitter&&strtokkee[tokptr]!='\0';tokptr=(tokptr+1)%512);
ffff8000008132f5:	48 b8 20 ec 41 00 00 	movabs rax,0xffff80000041ec20
ffff8000008132fc:	80 ff ff 
ffff8000008132ff:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
ffff800000813305:	eb 2a                	jmp    ffff800000813331 <strtok+0x8a>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:18 (discriminator 4)
ffff800000813307:	48 b8 20 ec 41 00 00 	movabs rax,0xffff80000041ec20
ffff80000081330e:	80 ff ff 
ffff800000813311:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000813313:	83 c0 01             	add    eax,0x1
ffff800000813316:	99                   	cdq    
ffff800000813317:	c1 ea 17             	shr    edx,0x17
ffff80000081331a:	01 d0                	add    eax,edx
ffff80000081331c:	25 ff 01 00 00       	and    eax,0x1ff
ffff800000813321:	29 d0                	sub    eax,edx
ffff800000813323:	89 c2                	mov    edx,eax
ffff800000813325:	48 b8 20 ec 41 00 00 	movabs rax,0xffff80000041ec20
ffff80000081332c:	80 ff ff 
ffff80000081332f:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:18 (discriminator 1)
ffff800000813331:	48 b8 20 ec 41 00 00 	movabs rax,0xffff80000041ec20
ffff800000813338:	80 ff ff 
ffff80000081333b:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000081333d:	48 ba 20 ea 41 00 00 	movabs rdx,0xffff80000041ea20
ffff800000813344:	80 ff ff 
ffff800000813347:	48 98                	cdqe   
ffff800000813349:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff80000081334d:	38 45 d4             	cmp    BYTE PTR [rbp-0x2c],al
ffff800000813350:	74 20                	je     ffff800000813372 <strtok+0xcb>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:18 (discriminator 3)
ffff800000813352:	48 b8 20 ec 41 00 00 	movabs rax,0xffff80000041ec20
ffff800000813359:	80 ff ff 
ffff80000081335c:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000081335e:	48 ba 20 ea 41 00 00 	movabs rdx,0xffff80000041ea20
ffff800000813365:	80 ff ff 
ffff800000813368:	48 98                	cdqe   
ffff80000081336a:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff80000081336e:	84 c0                	test   al,al
ffff800000813370:	75 95                	jne    ffff800000813307 <strtok+0x60>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:19
        strtokkee[tokptr]='\0';
ffff800000813372:	48 b8 20 ec 41 00 00 	movabs rax,0xffff80000041ec20
ffff800000813379:	80 ff ff 
ffff80000081337c:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000081337e:	48 ba 20 ea 41 00 00 	movabs rdx,0xffff80000041ea20
ffff800000813385:	80 ff ff 
ffff800000813388:	48 98                	cdqe   
ffff80000081338a:	c6 04 02 00          	mov    BYTE PTR [rdx+rax*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:20
        tokptr=(tokptr+1)%512;
ffff80000081338e:	48 b8 20 ec 41 00 00 	movabs rax,0xffff80000041ec20
ffff800000813395:	80 ff ff 
ffff800000813398:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000081339a:	83 c0 01             	add    eax,0x1
ffff80000081339d:	99                   	cdq    
ffff80000081339e:	c1 ea 17             	shr    edx,0x17
ffff8000008133a1:	01 d0                	add    eax,edx
ffff8000008133a3:	25 ff 01 00 00       	and    eax,0x1ff
ffff8000008133a8:	29 d0                	sub    eax,edx
ffff8000008133aa:	89 c2                	mov    edx,eax
ffff8000008133ac:	48 b8 20 ec 41 00 00 	movabs rax,0xffff80000041ec20
ffff8000008133b3:	80 ff ff 
ffff8000008133b6:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:21
        return ptr;
ffff8000008133b8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008133bc:	e9 ee 00 00 00       	jmp    ffff8000008134af <strtok+0x208>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:24
    }
    //go on cutting
    int c=0;
ffff8000008133c1:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:25
    char* ptr=strtokkee+tokptr;
ffff8000008133c8:	48 b8 20 ec 41 00 00 	movabs rax,0xffff80000041ec20
ffff8000008133cf:	80 ff ff 
ffff8000008133d2:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008133d4:	48 98                	cdqe   
ffff8000008133d6:	48 ba 20 ea 41 00 00 	movabs rdx,0xffff80000041ea20
ffff8000008133dd:	80 ff ff 
ffff8000008133e0:	48 01 d0             	add    rax,rdx
ffff8000008133e3:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:26
    for(;strtokkee[tokptr]!=splitter&&strtokkee[tokptr]!='\0';tokptr=(tokptr+1)%512,c++);
ffff8000008133e7:	eb 2e                	jmp    ffff800000813417 <strtok+0x170>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:26 (discriminator 3)
ffff8000008133e9:	48 b8 20 ec 41 00 00 	movabs rax,0xffff80000041ec20
ffff8000008133f0:	80 ff ff 
ffff8000008133f3:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008133f5:	83 c0 01             	add    eax,0x1
ffff8000008133f8:	99                   	cdq    
ffff8000008133f9:	c1 ea 17             	shr    edx,0x17
ffff8000008133fc:	01 d0                	add    eax,edx
ffff8000008133fe:	25 ff 01 00 00       	and    eax,0x1ff
ffff800000813403:	29 d0                	sub    eax,edx
ffff800000813405:	89 c2                	mov    edx,eax
ffff800000813407:	48 b8 20 ec 41 00 00 	movabs rax,0xffff80000041ec20
ffff80000081340e:	80 ff ff 
ffff800000813411:	89 10                	mov    DWORD PTR [rax],edx
ffff800000813413:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:26 (discriminator 1)
ffff800000813417:	48 b8 20 ec 41 00 00 	movabs rax,0xffff80000041ec20
ffff80000081341e:	80 ff ff 
ffff800000813421:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000813423:	48 ba 20 ea 41 00 00 	movabs rdx,0xffff80000041ea20
ffff80000081342a:	80 ff ff 
ffff80000081342d:	48 98                	cdqe   
ffff80000081342f:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000813433:	38 45 d4             	cmp    BYTE PTR [rbp-0x2c],al
ffff800000813436:	74 20                	je     ffff800000813458 <strtok+0x1b1>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:26 (discriminator 2)
ffff800000813438:	48 b8 20 ec 41 00 00 	movabs rax,0xffff80000041ec20
ffff80000081343f:	80 ff ff 
ffff800000813442:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000813444:	48 ba 20 ea 41 00 00 	movabs rdx,0xffff80000041ea20
ffff80000081344b:	80 ff ff 
ffff80000081344e:	48 98                	cdqe   
ffff800000813450:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000813454:	84 c0                	test   al,al
ffff800000813456:	75 91                	jne    ffff8000008133e9 <strtok+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:27
    strtokkee[tokptr]='\0';
ffff800000813458:	48 b8 20 ec 41 00 00 	movabs rax,0xffff80000041ec20
ffff80000081345f:	80 ff ff 
ffff800000813462:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000813464:	48 ba 20 ea 41 00 00 	movabs rdx,0xffff80000041ea20
ffff80000081346b:	80 ff ff 
ffff80000081346e:	48 98                	cdqe   
ffff800000813470:	c6 04 02 00          	mov    BYTE PTR [rdx+rax*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:28
    tokptr=(tokptr+1)%512;
ffff800000813474:	48 b8 20 ec 41 00 00 	movabs rax,0xffff80000041ec20
ffff80000081347b:	80 ff ff 
ffff80000081347e:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000813480:	83 c0 01             	add    eax,0x1
ffff800000813483:	99                   	cdq    
ffff800000813484:	c1 ea 17             	shr    edx,0x17
ffff800000813487:	01 d0                	add    eax,edx
ffff800000813489:	25 ff 01 00 00       	and    eax,0x1ff
ffff80000081348e:	29 d0                	sub    eax,edx
ffff800000813490:	89 c2                	mov    edx,eax
ffff800000813492:	48 b8 20 ec 41 00 00 	movabs rax,0xffff80000041ec20
ffff800000813499:	80 ff ff 
ffff80000081349c:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:29
    if(c)
ffff80000081349e:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
ffff8000008134a2:	74 06                	je     ffff8000008134aa <strtok+0x203>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:30
        return ptr;
ffff8000008134a4:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008134a8:	eb 05                	jmp    ffff8000008134af <strtok+0x208>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:32
    else
        return (void*)0;
ffff8000008134aa:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:33
}
ffff8000008134af:	c9                   	leave  
ffff8000008134b0:	c3                   	ret    

ffff8000008134b1 <strcmp>:
strcmp():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:35
int strcmp(char *s1,char *s2)
{
ffff8000008134b1:	f3 0f 1e fa          	endbr64 
ffff8000008134b5:	55                   	push   rbp
ffff8000008134b6:	48 89 e5             	mov    rbp,rsp
ffff8000008134b9:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff8000008134bd:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:36
	while(*s1!='\0'&&*s2!='\0'){
ffff8000008134c1:	eb 3c                	jmp    ffff8000008134ff <strcmp+0x4e>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:37
		if(*s1>*s2)
ffff8000008134c3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008134c7:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff8000008134ca:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008134ce:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008134d1:	38 c2                	cmp    dl,al
ffff8000008134d3:	7e 07                	jle    ffff8000008134dc <strcmp+0x2b>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:38
			return 1;
ffff8000008134d5:	b8 01 00 00 00       	mov    eax,0x1
ffff8000008134da:	eb 52                	jmp    ffff80000081352e <strcmp+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:39
		else if(*s1<*s2)
ffff8000008134dc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008134e0:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff8000008134e3:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008134e7:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008134ea:	38 c2                	cmp    dl,al
ffff8000008134ec:	7d 07                	jge    ffff8000008134f5 <strcmp+0x44>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:40
			return -1;
ffff8000008134ee:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff8000008134f3:	eb 39                	jmp    ffff80000081352e <strcmp+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:41
		s1++;
ffff8000008134f5:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:42
		s2++;
ffff8000008134fa:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:36
	while(*s1!='\0'&&*s2!='\0'){
ffff8000008134ff:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000813503:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813506:	84 c0                	test   al,al
ffff800000813508:	74 0b                	je     ffff800000813515 <strcmp+0x64>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:36 (discriminator 1)
ffff80000081350a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000081350e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813511:	84 c0                	test   al,al
ffff800000813513:	75 ae                	jne    ffff8000008134c3 <strcmp+0x12>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:44
	}
	if(*s1==*s2)
ffff800000813515:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000813519:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff80000081351c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000813520:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813523:	38 c2                	cmp    dl,al
ffff800000813525:	75 07                	jne    ffff80000081352e <strcmp+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:45
		return 0;
ffff800000813527:	b8 00 00 00 00       	mov    eax,0x0
ffff80000081352c:	eb 00                	jmp    ffff80000081352e <strcmp+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:46
}
ffff80000081352e:	5d                   	pop    rbp
ffff80000081352f:	c3                   	ret    

ffff800000813530 <strlen>:
strlen():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:49

int strlen(char *str)
{
ffff800000813530:	f3 0f 1e fa          	endbr64 
ffff800000813534:	55                   	push   rbp
ffff800000813535:	48 89 e5             	mov    rbp,rsp
ffff800000813538:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:50
    int l=0;
ffff80000081353c:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:51
    for(;*str!='\0';str++,l++);
ffff800000813543:	eb 09                	jmp    ffff80000081354e <strlen+0x1e>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:51 (discriminator 2)
ffff800000813545:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
ffff80000081354a:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:51 (discriminator 1)
ffff80000081354e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813552:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813555:	84 c0                	test   al,al
ffff800000813557:	75 ec                	jne    ffff800000813545 <strlen+0x15>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:52
    return l;
ffff800000813559:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:53
}
ffff80000081355c:	5d                   	pop    rbp
ffff80000081355d:	c3                   	ret    

ffff80000081355e <sprintf>:
sprintf():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:56

void sprintf(char *dist, char *str,...)
{
ffff80000081355e:	f3 0f 1e fa          	endbr64 
ffff800000813562:	55                   	push   rbp
ffff800000813563:	48 89 e5             	mov    rbp,rsp
ffff800000813566:	48 81 ec 10 01 00 00 	sub    rsp,0x110
ffff80000081356d:	48 89 bd f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdi
ffff800000813574:	48 89 b5 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rsi
ffff80000081357b:	48 89 95 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdx
ffff800000813582:	48 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rcx
ffff800000813589:	4c 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],r8
ffff800000813590:	4c 89 8d 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],r9
ffff800000813597:	84 c0                	test   al,al
ffff800000813599:	74 20                	je     ffff8000008135bb <sprintf+0x5d>
ffff80000081359b:	0f 29 45 80          	movaps XMMWORD PTR [rbp-0x80],xmm0
ffff80000081359f:	0f 29 4d 90          	movaps XMMWORD PTR [rbp-0x70],xmm1
ffff8000008135a3:	0f 29 55 a0          	movaps XMMWORD PTR [rbp-0x60],xmm2
ffff8000008135a7:	0f 29 5d b0          	movaps XMMWORD PTR [rbp-0x50],xmm3
ffff8000008135ab:	0f 29 65 c0          	movaps XMMWORD PTR [rbp-0x40],xmm4
ffff8000008135af:	0f 29 6d d0          	movaps XMMWORD PTR [rbp-0x30],xmm5
ffff8000008135b3:	0f 29 75 e0          	movaps XMMWORD PTR [rbp-0x20],xmm6
ffff8000008135b7:	0f 29 7d f0          	movaps XMMWORD PTR [rbp-0x10],xmm7
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:59

    //count num of args
    char *pstr=str;
ffff8000008135bb:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff8000008135c2:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:60
    char *prev=str;
ffff8000008135c9:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff8000008135d0:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:61
    int argnum=0;
ffff8000008135d7:	c7 85 3c ff ff ff 00 	mov    DWORD PTR [rbp-0xc4],0x0
ffff8000008135de:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:62
    while (*pstr!='\n')
ffff8000008135e1:	eb 39                	jmp    ffff80000081361c <sprintf+0xbe>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:64
    {
        if(*pstr=='%'&&*prev!='%')
ffff8000008135e3:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff8000008135ea:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008135ed:	3c 25                	cmp    al,0x25
ffff8000008135ef:	75 15                	jne    ffff800000813606 <sprintf+0xa8>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:64 (discriminator 1)
ffff8000008135f1:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
ffff8000008135f8:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008135fb:	3c 25                	cmp    al,0x25
ffff8000008135fd:	74 07                	je     ffff800000813606 <sprintf+0xa8>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:65
            argnum++;
ffff8000008135ff:	83 85 3c ff ff ff 01 	add    DWORD PTR [rbp-0xc4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:66
        prev=pstr;
ffff800000813606:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff80000081360d:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:67
        pstr++;
ffff800000813614:	48 83 85 48 ff ff ff 	add    QWORD PTR [rbp-0xb8],0x1
ffff80000081361b:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:62
    while (*pstr!='\n')
ffff80000081361c:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000813623:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813626:	3c 0a                	cmp    al,0xa
ffff800000813628:	75 b9                	jne    ffff8000008135e3 <sprintf+0x85>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:71
    }

    va_list vargs;
    va_start(vargs,str);
ffff80000081362a:	c7 85 08 ff ff ff 10 	mov    DWORD PTR [rbp-0xf8],0x10
ffff800000813631:	00 00 00 
ffff800000813634:	c7 85 0c ff ff ff 30 	mov    DWORD PTR [rbp-0xf4],0x30
ffff80000081363b:	00 00 00 
ffff80000081363e:	48 8d 45 10          	lea    rax,[rbp+0x10]
ffff800000813642:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
ffff800000813649:	48 8d 85 50 ff ff ff 	lea    rax,[rbp-0xb0]
ffff800000813650:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:72
    pstr=str;
ffff800000813657:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff80000081365e:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:73
    for(;*pstr!='\0';pstr++){
ffff800000813665:	e9 09 02 00 00       	jmp    ffff800000813873 <sprintf+0x315>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:74
        if(*pstr=='%'&&*(pstr+1)!='\0'){
ffff80000081366a:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000813671:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813674:	3c 25                	cmp    al,0x25
ffff800000813676:	0f 85 ca 01 00 00    	jne    ffff800000813846 <sprintf+0x2e8>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:74 (discriminator 1)
ffff80000081367c:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000813683:	48 83 c0 01          	add    rax,0x1
ffff800000813687:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081368a:	84 c0                	test   al,al
ffff80000081368c:	0f 84 b4 01 00 00    	je     ffff800000813846 <sprintf+0x2e8>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:75
            pstr++;
ffff800000813692:	48 83 85 48 ff ff ff 	add    QWORD PTR [rbp-0xb8],0x1
ffff800000813699:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:76
            if(*pstr=='x'){
ffff80000081369a:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff8000008136a1:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008136a4:	3c 78                	cmp    al,0x78
ffff8000008136a6:	75 6f                	jne    ffff800000813717 <sprintf+0x1b9>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:77
                int v=va_arg(vargs,int);
ffff8000008136a8:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
ffff8000008136ae:	83 f8 2f             	cmp    eax,0x2f
ffff8000008136b1:	77 23                	ja     ffff8000008136d6 <sprintf+0x178>
ffff8000008136b3:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
ffff8000008136ba:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff8000008136c0:	89 d2                	mov    edx,edx
ffff8000008136c2:	48 01 d0             	add    rax,rdx
ffff8000008136c5:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff8000008136cb:	83 c2 08             	add    edx,0x8
ffff8000008136ce:	89 95 08 ff ff ff    	mov    DWORD PTR [rbp-0xf8],edx
ffff8000008136d4:	eb 12                	jmp    ffff8000008136e8 <sprintf+0x18a>
ffff8000008136d6:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff8000008136dd:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff8000008136e1:	48 89 95 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rdx
ffff8000008136e8:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008136ea:	89 85 24 ff ff ff    	mov    DWORD PTR [rbp-0xdc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:78
                sprint_hex(dist,v);
ffff8000008136f0:	8b 85 24 ff ff ff    	mov    eax,DWORD PTR [rbp-0xdc]
ffff8000008136f6:	48 63 d0             	movsxd rdx,eax
ffff8000008136f9:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000813700:	48 89 d6             	mov    rsi,rdx
ffff800000813703:	48 89 c7             	mov    rdi,rax
ffff800000813706:	48 b8 83 39 81 00 00 	movabs rax,0xffff800000813983
ffff80000081370d:	80 ff ff 
ffff800000813710:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:76
            if(*pstr=='x'){
ffff800000813712:	e9 54 01 00 00       	jmp    ffff80000081386b <sprintf+0x30d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:79
            }else if(*pstr=='s'){
ffff800000813717:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff80000081371e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813721:	3c 73                	cmp    al,0x73
ffff800000813723:	75 6f                	jne    ffff800000813794 <sprintf+0x236>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:80
                char* v=va_arg(vargs,char*);
ffff800000813725:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
ffff80000081372b:	83 f8 2f             	cmp    eax,0x2f
ffff80000081372e:	77 23                	ja     ffff800000813753 <sprintf+0x1f5>
ffff800000813730:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
ffff800000813737:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff80000081373d:	89 d2                	mov    edx,edx
ffff80000081373f:	48 01 d0             	add    rax,rdx
ffff800000813742:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff800000813748:	83 c2 08             	add    edx,0x8
ffff80000081374b:	89 95 08 ff ff ff    	mov    DWORD PTR [rbp-0xf8],edx
ffff800000813751:	eb 12                	jmp    ffff800000813765 <sprintf+0x207>
ffff800000813753:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff80000081375a:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff80000081375e:	48 89 95 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rdx
ffff800000813765:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000813768:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:81
                sprintn(dist,v);
ffff80000081376f:	48 8b 95 28 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd8]
ffff800000813776:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff80000081377d:	48 89 d6             	mov    rsi,rdx
ffff800000813780:	48 89 c7             	mov    rdi,rax
ffff800000813783:	48 b8 11 3a 81 00 00 	movabs rax,0xffff800000813a11
ffff80000081378a:	80 ff ff 
ffff80000081378d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:76
            if(*pstr=='x'){
ffff80000081378f:	e9 d7 00 00 00       	jmp    ffff80000081386b <sprintf+0x30d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:82
            }else if(*pstr=='d'){
ffff800000813794:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff80000081379b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081379e:	3c 64                	cmp    al,0x64
ffff8000008137a0:	75 6d                	jne    ffff80000081380f <sprintf+0x2b1>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:83
                char* v=va_arg(vargs,char*);
ffff8000008137a2:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
ffff8000008137a8:	83 f8 2f             	cmp    eax,0x2f
ffff8000008137ab:	77 23                	ja     ffff8000008137d0 <sprintf+0x272>
ffff8000008137ad:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
ffff8000008137b4:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff8000008137ba:	89 d2                	mov    edx,edx
ffff8000008137bc:	48 01 d0             	add    rax,rdx
ffff8000008137bf:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff8000008137c5:	83 c2 08             	add    edx,0x8
ffff8000008137c8:	89 95 08 ff ff ff    	mov    DWORD PTR [rbp-0xf8],edx
ffff8000008137ce:	eb 12                	jmp    ffff8000008137e2 <sprintf+0x284>
ffff8000008137d0:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff8000008137d7:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff8000008137db:	48 89 95 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rdx
ffff8000008137e2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008137e5:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:84
                sprint_decimal(dist,v);
ffff8000008137ec:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff8000008137f3:	89 c2                	mov    edx,eax
ffff8000008137f5:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff8000008137fc:	89 d6                	mov    esi,edx
ffff8000008137fe:	48 89 c7             	mov    rdi,rax
ffff800000813801:	48 b8 c8 38 81 00 00 	movabs rax,0xffff8000008138c8
ffff800000813808:	80 ff ff 
ffff80000081380b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:76
            if(*pstr=='x'){
ffff80000081380d:	eb 5c                	jmp    ffff80000081386b <sprintf+0x30d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:85
            }else if(*pstr=='c'){
ffff80000081380f:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000813816:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813819:	3c 63                	cmp    al,0x63
ffff80000081381b:	75 02                	jne    ffff80000081381f <sprintf+0x2c1>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:86
                char v=va_arg(vargs,char);
ffff80000081381d:	0f 0b                	ud2    
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:89
                sprintchar(dist,v);
            }else{
                sprintchar(dist,*pstr);
ffff80000081381f:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000813826:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813829:	0f be d0             	movsx  edx,al
ffff80000081382c:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000813833:	89 d6                	mov    esi,edx
ffff800000813835:	48 89 c7             	mov    rdi,rax
ffff800000813838:	48 b8 89 38 81 00 00 	movabs rax,0xffff800000813889
ffff80000081383f:	80 ff ff 
ffff800000813842:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:76
            if(*pstr=='x'){
ffff800000813844:	eb 25                	jmp    ffff80000081386b <sprintf+0x30d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:92
            }
        }else{
            sprintchar(dist,*pstr);
ffff800000813846:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff80000081384d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813850:	0f be d0             	movsx  edx,al
ffff800000813853:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff80000081385a:	89 d6                	mov    esi,edx
ffff80000081385c:	48 89 c7             	mov    rdi,rax
ffff80000081385f:	48 b8 89 38 81 00 00 	movabs rax,0xffff800000813889
ffff800000813866:	80 ff ff 
ffff800000813869:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:73
    for(;*pstr!='\0';pstr++){
ffff80000081386b:	48 83 85 48 ff ff ff 	add    QWORD PTR [rbp-0xb8],0x1
ffff800000813872:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:73 (discriminator 1)
ffff800000813873:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff80000081387a:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081387d:	84 c0                	test   al,al
ffff80000081387f:	0f 85 e5 fd ff ff    	jne    ffff80000081366a <sprintf+0x10c>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:96
        }
    }
    va_end(vargs);
}
ffff800000813885:	90                   	nop
ffff800000813886:	90                   	nop
ffff800000813887:	c9                   	leave  
ffff800000813888:	c3                   	ret    

ffff800000813889 <sprintchar>:
sprintchar():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:98
void sprintchar(char *dist,char c)
{
ffff800000813889:	f3 0f 1e fa          	endbr64 
ffff80000081388d:	55                   	push   rbp
ffff80000081388e:	48 89 e5             	mov    rbp,rsp
ffff800000813891:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000813895:	89 f0                	mov    eax,esi
ffff800000813897:	88 45 f4             	mov    BYTE PTR [rbp-0xc],al
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:99
    while(*dist!='\0')
ffff80000081389a:	eb 05                	jmp    ffff8000008138a1 <sprintchar+0x18>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:100
        dist++;
ffff80000081389c:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:99
    while(*dist!='\0')
ffff8000008138a1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008138a5:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008138a8:	84 c0                	test   al,al
ffff8000008138aa:	75 f0                	jne    ffff80000081389c <sprintchar+0x13>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:101
    *dist++=c;
ffff8000008138ac:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008138b0:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffff8000008138b4:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffff8000008138b8:	0f b6 55 f4          	movzx  edx,BYTE PTR [rbp-0xc]
ffff8000008138bc:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:102
    *dist='\0';
ffff8000008138be:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008138c2:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:103
}
ffff8000008138c5:	90                   	nop
ffff8000008138c6:	5d                   	pop    rbp
ffff8000008138c7:	c3                   	ret    

ffff8000008138c8 <sprint_decimal>:
sprint_decimal():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:105
void sprint_decimal(char *dist,int c)
{
ffff8000008138c8:	f3 0f 1e fa          	endbr64 
ffff8000008138cc:	55                   	push   rbp
ffff8000008138cd:	48 89 e5             	mov    rbp,rsp
ffff8000008138d0:	48 83 ec 30          	sub    rsp,0x30
ffff8000008138d4:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff8000008138d8:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:107
    unsigned char st[22];
    int p=0;
ffff8000008138db:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:108
    while(p<sizeof(unsigned long)*2){
ffff8000008138e2:	eb 65                	jmp    ffff800000813949 <sprint_decimal+0x81>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:109
        unsigned char a=c%10+'0';
ffff8000008138e4:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff8000008138e7:	48 63 c2             	movsxd rax,edx
ffff8000008138ea:	48 69 c0 67 66 66 66 	imul   rax,rax,0x66666667
ffff8000008138f1:	48 c1 e8 20          	shr    rax,0x20
ffff8000008138f5:	c1 f8 02             	sar    eax,0x2
ffff8000008138f8:	89 d6                	mov    esi,edx
ffff8000008138fa:	c1 fe 1f             	sar    esi,0x1f
ffff8000008138fd:	29 f0                	sub    eax,esi
ffff8000008138ff:	89 c1                	mov    ecx,eax
ffff800000813901:	89 c8                	mov    eax,ecx
ffff800000813903:	c1 e0 02             	shl    eax,0x2
ffff800000813906:	01 c8                	add    eax,ecx
ffff800000813908:	01 c0                	add    eax,eax
ffff80000081390a:	89 d1                	mov    ecx,edx
ffff80000081390c:	29 c1                	sub    ecx,eax
ffff80000081390e:	89 c8                	mov    eax,ecx
ffff800000813910:	83 c0 30             	add    eax,0x30
ffff800000813913:	88 45 fb             	mov    BYTE PTR [rbp-0x5],al
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:110
        st[p++]=a;
ffff800000813916:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000813919:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000081391c:	89 55 fc             	mov    DWORD PTR [rbp-0x4],edx
ffff80000081391f:	48 98                	cdqe   
ffff800000813921:	0f b6 55 fb          	movzx  edx,BYTE PTR [rbp-0x5]
ffff800000813925:	88 54 05 e0          	mov    BYTE PTR [rbp+rax*1-0x20],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:111
        c/=10;
ffff800000813929:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000081392c:	48 63 d0             	movsxd rdx,eax
ffff80000081392f:	48 69 d2 67 66 66 66 	imul   rdx,rdx,0x66666667
ffff800000813936:	48 c1 ea 20          	shr    rdx,0x20
ffff80000081393a:	c1 fa 02             	sar    edx,0x2
ffff80000081393d:	c1 f8 1f             	sar    eax,0x1f
ffff800000813940:	89 c1                	mov    ecx,eax
ffff800000813942:	89 d0                	mov    eax,edx
ffff800000813944:	29 c8                	sub    eax,ecx
ffff800000813946:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:108
    while(p<sizeof(unsigned long)*2){
ffff800000813949:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000081394c:	83 f8 0f             	cmp    eax,0xf
ffff80000081394f:	76 93                	jbe    ffff8000008138e4 <sprint_decimal+0x1c>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:113
    }
    while(p>0)
ffff800000813951:	eb 26                	jmp    ffff800000813979 <sprint_decimal+0xb1>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:115
    {
        sprintchar(dist,st[--p]);
ffff800000813953:	83 6d fc 01          	sub    DWORD PTR [rbp-0x4],0x1
ffff800000813957:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000081395a:	48 98                	cdqe   
ffff80000081395c:	0f b6 44 05 e0       	movzx  eax,BYTE PTR [rbp+rax*1-0x20]
ffff800000813961:	0f be d0             	movsx  edx,al
ffff800000813964:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000813968:	89 d6                	mov    esi,edx
ffff80000081396a:	48 89 c7             	mov    rdi,rax
ffff80000081396d:	48 b8 89 38 81 00 00 	movabs rax,0xffff800000813889
ffff800000813974:	80 ff ff 
ffff800000813977:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:113
    while(p>0)
ffff800000813979:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
ffff80000081397d:	7f d4                	jg     ffff800000813953 <sprint_decimal+0x8b>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:117
    }
}
ffff80000081397f:	90                   	nop
ffff800000813980:	90                   	nop
ffff800000813981:	c9                   	leave  
ffff800000813982:	c3                   	ret    

ffff800000813983 <sprint_hex>:
sprint_hex():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:119
void sprint_hex(char *dist,unsigned long c)
{
ffff800000813983:	f3 0f 1e fa          	endbr64 
ffff800000813987:	55                   	push   rbp
ffff800000813988:	48 89 e5             	mov    rbp,rsp
ffff80000081398b:	48 83 ec 30          	sub    rsp,0x30
ffff80000081398f:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000813993:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:121
    unsigned char st[17];
    int p=0;
ffff800000813997:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:122
    while(p<10){
ffff80000081399e:	eb 39                	jmp    ffff8000008139d9 <sprint_hex+0x56>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:123
        unsigned char a=c%16;
ffff8000008139a0:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008139a4:	83 e0 0f             	and    eax,0xf
ffff8000008139a7:	88 45 fb             	mov    BYTE PTR [rbp-0x5],al
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:124
        if(a>9)a+='a'-10;
ffff8000008139aa:	80 7d fb 09          	cmp    BYTE PTR [rbp-0x5],0x9
ffff8000008139ae:	76 06                	jbe    ffff8000008139b6 <sprint_hex+0x33>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:124 (discriminator 1)
ffff8000008139b0:	80 45 fb 57          	add    BYTE PTR [rbp-0x5],0x57
ffff8000008139b4:	eb 04                	jmp    ffff8000008139ba <sprint_hex+0x37>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:125
        else a+='0';
ffff8000008139b6:	80 45 fb 30          	add    BYTE PTR [rbp-0x5],0x30
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:126
        st[p++]=a;
ffff8000008139ba:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008139bd:	8d 50 01             	lea    edx,[rax+0x1]
ffff8000008139c0:	89 55 fc             	mov    DWORD PTR [rbp-0x4],edx
ffff8000008139c3:	48 98                	cdqe   
ffff8000008139c5:	0f b6 55 fb          	movzx  edx,BYTE PTR [rbp-0x5]
ffff8000008139c9:	88 54 05 e0          	mov    BYTE PTR [rbp+rax*1-0x20],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:127
        c/=16;
ffff8000008139cd:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008139d1:	48 c1 e8 04          	shr    rax,0x4
ffff8000008139d5:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:122
    while(p<10){
ffff8000008139d9:	83 7d fc 09          	cmp    DWORD PTR [rbp-0x4],0x9
ffff8000008139dd:	7e c1                	jle    ffff8000008139a0 <sprint_hex+0x1d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:129
    }
    while(p>0)
ffff8000008139df:	eb 26                	jmp    ffff800000813a07 <sprint_hex+0x84>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:131
    {
        sprintchar(dist,st[--p]);
ffff8000008139e1:	83 6d fc 01          	sub    DWORD PTR [rbp-0x4],0x1
ffff8000008139e5:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008139e8:	48 98                	cdqe   
ffff8000008139ea:	0f b6 44 05 e0       	movzx  eax,BYTE PTR [rbp+rax*1-0x20]
ffff8000008139ef:	0f be d0             	movsx  edx,al
ffff8000008139f2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008139f6:	89 d6                	mov    esi,edx
ffff8000008139f8:	48 89 c7             	mov    rdi,rax
ffff8000008139fb:	48 b8 89 38 81 00 00 	movabs rax,0xffff800000813889
ffff800000813a02:	80 ff ff 
ffff800000813a05:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:129
    while(p>0)
ffff800000813a07:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
ffff800000813a0b:	7f d4                	jg     ffff8000008139e1 <sprint_hex+0x5e>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:133
    }
}
ffff800000813a0d:	90                   	nop
ffff800000813a0e:	90                   	nop
ffff800000813a0f:	c9                   	leave  
ffff800000813a10:	c3                   	ret    

ffff800000813a11 <sprintn>:
sprintn():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:135
void sprintn(char *dist,char *str)
{
ffff800000813a11:	f3 0f 1e fa          	endbr64 
ffff800000813a15:	55                   	push   rbp
ffff800000813a16:	48 89 e5             	mov    rbp,rsp
ffff800000813a19:	48 83 ec 10          	sub    rsp,0x10
ffff800000813a1d:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000813a21:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:136
    while(*str!='\0')
ffff800000813a25:	eb 27                	jmp    ffff800000813a4e <sprintn+0x3d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:138
    {
        sprintchar(dist,*str++);
ffff800000813a27:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000813a2b:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffff800000813a2f:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
ffff800000813a33:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813a36:	0f be d0             	movsx  edx,al
ffff800000813a39:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000813a3d:	89 d6                	mov    esi,edx
ffff800000813a3f:	48 89 c7             	mov    rdi,rax
ffff800000813a42:	48 b8 89 38 81 00 00 	movabs rax,0xffff800000813889
ffff800000813a49:	80 ff ff 
ffff800000813a4c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:136
    while(*str!='\0')
ffff800000813a4e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000813a52:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000813a55:	84 c0                	test   al,al
ffff800000813a57:	75 ce                	jne    ffff800000813a27 <sprintn+0x16>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:140
    }
ffff800000813a59:	90                   	nop
ffff800000813a5a:	90                   	nop
ffff800000813a5b:	c9                   	leave  
ffff800000813a5c:	c3                   	ret    
ffff800000813a5d:	0f 1f 00             	nop    DWORD PTR [rax]

ffff800000813a60 <create_zero>:
create_zero():
ffff800000813a60:	e8 60 31 ff ff       	call   ffff800000806bc5 <req_proc>
ffff800000813a65:	83 f8 ff             	cmp    eax,0xffffffff
ffff800000813a68:	74 0c                	je     ffff800000813a76 <create_zero.retu>
ffff800000813a6a:	e8 a7 32 ff ff       	call   ffff800000806d16 <set_proc>
ffff800000813a6f:	67 8b 04 24          	mov    eax,DWORD PTR [esp]
ffff800000813a73:	83 c4 40             	add    esp,0x40

ffff800000813a76 <create_zero.retu>:
create_zero.retu():
ffff800000813a76:	c3                   	ret    

ffff800000813a77 <switch_proc_asm>:
save_context():
ffff800000813a77:	67 8b 44 24 24       	mov    eax,DWORD PTR [esp+0x24]
ffff800000813a7c:	83 c0 44             	add    eax,0x44
ffff800000813a7f:	b9 08 00 00 00       	mov    ecx,0x8
ffff800000813a84:	89 e7                	mov    edi,esp

ffff800000813a86 <save_context.loops>:
save_context.loops():
ffff800000813a86:	67 8b 17             	mov    edx,DWORD PTR [edi]
ffff800000813a89:	67 89 10             	mov    DWORD PTR [eax],edx
ffff800000813a8c:	83 c7 04             	add    edi,0x4
ffff800000813a8f:	83 e8 04             	sub    eax,0x4
ffff800000813a92:	e2 f2                	loop   ffff800000813a86 <save_context.loops>
ffff800000813a94:	5b                   	pop    rbx
ffff800000813a95:	67 8b 44 24 04       	mov    eax,DWORD PTR [esp+0x4]
ffff800000813a9a:	67 89 58 24          	mov    DWORD PTR [eax+0x24],ebx
ffff800000813a9e:	67 48 8b 1c 24       	mov    rbx,QWORD PTR [esp]
ffff800000813aa3:	67 89 58 20          	mov    DWORD PTR [eax+0x20],ebx
ffff800000813aa7:	c3                   	ret    

ffff800000813aa8 <desc>:
	...

ffff800000813ab0 <ret_sys_call>:
ret_sys_call():
ffff800000813ab0:	58                   	pop    rax
ffff800000813ab1:	8e d8                	mov    ds,eax
ffff800000813ab3:	58                   	pop    rax
ffff800000813ab4:	8e c0                	mov    es,eax
ffff800000813ab6:	41 5f                	pop    r15
ffff800000813ab8:	41 5e                	pop    r14
ffff800000813aba:	41 5d                	pop    r13
ffff800000813abc:	41 5c                	pop    r12
ffff800000813abe:	41 5b                	pop    r11
ffff800000813ac0:	41 5a                	pop    r10
ffff800000813ac2:	41 59                	pop    r9
ffff800000813ac4:	41 58                	pop    r8
ffff800000813ac6:	5e                   	pop    rsi
ffff800000813ac7:	5f                   	pop    rdi
ffff800000813ac8:	5a                   	pop    rdx
ffff800000813ac9:	59                   	pop    rcx
ffff800000813aca:	5b                   	pop    rbx
ffff800000813acb:	58                   	pop    rax

ffff800000813acc <tmp>:
tmp():
ffff800000813acc:	48 0f 07             	sysretq 

ffff800000813acf <ret_normal_proc>:
ret_normal_proc():
ffff800000813acf:	58                   	pop    rax
ffff800000813ad0:	8e d8                	mov    ds,eax
ffff800000813ad2:	58                   	pop    rax
ffff800000813ad3:	8e c0                	mov    es,eax
ffff800000813ad5:	41 5f                	pop    r15
ffff800000813ad7:	41 5e                	pop    r14
ffff800000813ad9:	41 5d                	pop    r13
ffff800000813adb:	41 5c                	pop    r12
ffff800000813add:	41 5b                	pop    r11
ffff800000813adf:	41 5a                	pop    r10
ffff800000813ae1:	41 59                	pop    r9
ffff800000813ae3:	41 58                	pop    r8
ffff800000813ae5:	5e                   	pop    rsi
ffff800000813ae6:	5f                   	pop    rdi
ffff800000813ae7:	5a                   	pop    rdx
ffff800000813ae8:	59                   	pop    rcx
ffff800000813ae9:	5b                   	pop    rbx
ffff800000813aea:	58                   	pop    rax
ffff800000813aeb:	c3                   	ret    
