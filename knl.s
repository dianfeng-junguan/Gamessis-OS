
bin/gmsknl.elf:     file format elf64-x86-64


Disassembly of section .entry:

0000000000100000 <_knl_start>:
  100000:	fa                   	cli    
  100001:	89 de                	mov    esi,ebx
  100003:	89 c7                	mov    edi,eax
  100005:	b8 00 50 10 00       	mov    eax,0x105000
  10000a:	83 c0 02             	add    eax,0x2
  10000d:	c7 00 00 40 10 00    	mov    DWORD PTR [rax],0x104000
  100013:	b8 00 50 10 00       	mov    eax,0x105000
  100018:	66 0f 01 10          	data16 lgdt [rax]

000000000010001c <set_paging>:
  10001c:	66 b8 10 00          	mov    ax,0x10
  100020:	8e d8                	mov    ds,eax
  100022:	8e d0                	mov    ss,eax
  100024:	8e c0                	mov    es,eax
  100026:	8e e8                	mov    gs,eax
  100028:	8e e0                	mov    fs,eax
  10002a:	0f 20 e0             	mov    rax,cr4
  10002d:	0f ba e8 05          	bts    eax,0x5
  100031:	0f 22 e0             	mov    cr4,rax
  100034:	0f 20 c0             	mov    rax,cr0
  100037:	bb 00 00 00 80       	mov    ebx,0x80000000
  10003c:	f7 d3                	not    ebx
  10003e:	21 d8                	and    eax,ebx
  100040:	0f 22 c0             	mov    cr0,rax
  100043:	b8 00 10 10 00       	mov    eax,0x101000
  100048:	c7 00 07 20 10 00    	mov    DWORD PTR [rax],0x102007
  10004e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [rax+0x4],0x0
  100055:	b8 00 18 10 00       	mov    eax,0x101800
  10005a:	c7 00 07 20 10 00    	mov    DWORD PTR [rax],0x102007
  100060:	c7 40 04 00 00 00 00 	mov    DWORD PTR [rax+0x4],0x0
  100067:	b8 00 20 10 00       	mov    eax,0x102000
  10006c:	c7 00 87 01 00 00    	mov    DWORD PTR [rax],0x187
  100072:	c7 40 04 00 00 00 00 	mov    DWORD PTR [rax+0x4],0x0
  100079:	b8 00 10 10 00       	mov    eax,0x101000
  10007e:	0f 22 d8             	mov    cr3,rax

0000000000100081 <switch_cs>:
  100081:	bc 00 00 40 00       	mov    esp,0x400000
  100086:	b9 80 00 00 c0       	mov    ecx,0xc0000080
  10008b:	0f 32                	rdmsr  
  10008d:	0f ba e8 08          	bts    eax,0x8
  100091:	0f ba e8 00          	bts    eax,0x0
  100095:	0f 30                	wrmsr  
  100097:	0f 20 c0             	mov    rax,cr0
  10009a:	0f ba e8 00          	bts    eax,0x0
  10009e:	0f ba e8 1f          	bts    eax,0x1f
  1000a2:	0f 22 c0             	mov    cr0,rax
  1000a5:	b8 b0 b6 80 00       	mov    eax,0x80b6b0
  1000aa:	ea                   	(bad)  
  1000ab:	b0 b6                	mov    al,0xb6
  1000ad:	80 00 08             	add    BYTE PTR [rax],0x8
	...

bin/gmsknl.elf:     file format elf64-x86-64


Disassembly of section .text:

0000000000800000 <init_int>:
init_int():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:14
#include "kb.h"
#include "framebuffer.h"

gate *idt= (gate *) (KNL_BASE+IDT_ADDR);
extern int disk_int_handler();
void init_int(){
  800000:	f3 0f 1e fa          	endbr64 
  800004:	55                   	push   rbp
  800005:	48 89 e5             	mov    rbp,rsp
  800008:	48 83 ec 10          	sub    rsp,0x10
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:16
    //asm volatile("sidt %0"::"m"(idt));
    set_gate(0,(addr_t)divide_err,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
  80000c:	48 b8 89 05 80 00 00 	movabs rax,0x800589
  800013:	00 00 00 
  800016:	b9 00 8f 00 00       	mov    ecx,0x8f00
  80001b:	ba 08 00 00 00       	mov    edx,0x8
  800020:	48 89 c6             	mov    rsi,rax
  800023:	bf 00 00 00 00       	mov    edi,0x0
  800028:	48 b8 8f 04 80 00 00 	movabs rax,0x80048f
  80002f:	00 00 00 
  800032:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:17
    set_gate(1,(addr_t)debug,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
  800034:	48 b8 aa 05 80 00 00 	movabs rax,0x8005aa
  80003b:	00 00 00 
  80003e:	b9 00 8f 00 00       	mov    ecx,0x8f00
  800043:	ba 08 00 00 00       	mov    edx,0x8
  800048:	48 89 c6             	mov    rsi,rax
  80004b:	bf 01 00 00 00       	mov    edi,0x1
  800050:	48 b8 8f 04 80 00 00 	movabs rax,0x80048f
  800057:	00 00 00 
  80005a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:18
    set_gate(2,(addr_t)default_int_proc,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
  80005c:	48 b8 cb 05 80 00 00 	movabs rax,0x8005cb
  800063:	00 00 00 
  800066:	b9 00 8f 00 00       	mov    ecx,0x8f00
  80006b:	ba 08 00 00 00       	mov    edx,0x8
  800070:	48 89 c6             	mov    rsi,rax
  800073:	bf 02 00 00 00       	mov    edi,0x2
  800078:	48 b8 8f 04 80 00 00 	movabs rax,0x80048f
  80007f:	00 00 00 
  800082:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:19
    set_gate(3,(addr_t)breakpoint,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
  800084:	48 b8 ec 05 80 00 00 	movabs rax,0x8005ec
  80008b:	00 00 00 
  80008e:	b9 00 8f 00 00       	mov    ecx,0x8f00
  800093:	ba 08 00 00 00       	mov    edx,0x8
  800098:	48 89 c6             	mov    rsi,rax
  80009b:	bf 03 00 00 00       	mov    edi,0x3
  8000a0:	48 b8 8f 04 80 00 00 	movabs rax,0x80048f
  8000a7:	00 00 00 
  8000aa:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:20
    set_gate(4,(addr_t)overflow,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
  8000ac:	48 b8 0d 06 80 00 00 	movabs rax,0x80060d
  8000b3:	00 00 00 
  8000b6:	b9 00 8f 00 00       	mov    ecx,0x8f00
  8000bb:	ba 08 00 00 00       	mov    edx,0x8
  8000c0:	48 89 c6             	mov    rsi,rax
  8000c3:	bf 04 00 00 00       	mov    edi,0x4
  8000c8:	48 b8 8f 04 80 00 00 	movabs rax,0x80048f
  8000cf:	00 00 00 
  8000d2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:21
    set_gate(5,(addr_t)bounds,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
  8000d4:	48 b8 2e 06 80 00 00 	movabs rax,0x80062e
  8000db:	00 00 00 
  8000de:	b9 00 8f 00 00       	mov    ecx,0x8f00
  8000e3:	ba 08 00 00 00       	mov    edx,0x8
  8000e8:	48 89 c6             	mov    rsi,rax
  8000eb:	bf 05 00 00 00       	mov    edi,0x5
  8000f0:	48 b8 8f 04 80 00 00 	movabs rax,0x80048f
  8000f7:	00 00 00 
  8000fa:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:22
    set_gate(6,(addr_t)undefined_operator,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
  8000fc:	48 b8 4f 06 80 00 00 	movabs rax,0x80064f
  800103:	00 00 00 
  800106:	b9 00 8f 00 00       	mov    ecx,0x8f00
  80010b:	ba 08 00 00 00       	mov    edx,0x8
  800110:	48 89 c6             	mov    rsi,rax
  800113:	bf 06 00 00 00       	mov    edi,0x6
  800118:	48 b8 8f 04 80 00 00 	movabs rax,0x80048f
  80011f:	00 00 00 
  800122:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:23
    set_gate(7,(addr_t)coprocessor_notexist,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
  800124:	48 b8 81 06 80 00 00 	movabs rax,0x800681
  80012b:	00 00 00 
  80012e:	b9 00 8f 00 00       	mov    ecx,0x8f00
  800133:	ba 08 00 00 00       	mov    edx,0x8
  800138:	48 89 c6             	mov    rsi,rax
  80013b:	bf 07 00 00 00       	mov    edi,0x7
  800140:	48 b8 8f 04 80 00 00 	movabs rax,0x80048f
  800147:	00 00 00 
  80014a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:24
    set_gate(8,(addr_t)double_ints,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);//double_ints
  80014c:	48 b8 a2 06 80 00 00 	movabs rax,0x8006a2
  800153:	00 00 00 
  800156:	b9 00 8f 00 00       	mov    ecx,0x8f00
  80015b:	ba 08 00 00 00       	mov    edx,0x8
  800160:	48 89 c6             	mov    rsi,rax
  800163:	bf 08 00 00 00       	mov    edi,0x8
  800168:	48 b8 8f 04 80 00 00 	movabs rax,0x80048f
  80016f:	00 00 00 
  800172:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:25
    set_gate(9,(addr_t)coprocessor_seg_overbound,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
  800174:	48 b8 c3 06 80 00 00 	movabs rax,0x8006c3
  80017b:	00 00 00 
  80017e:	b9 00 8f 00 00       	mov    ecx,0x8f00
  800183:	ba 08 00 00 00       	mov    edx,0x8
  800188:	48 89 c6             	mov    rsi,rax
  80018b:	bf 09 00 00 00       	mov    edi,0x9
  800190:	48 b8 8f 04 80 00 00 	movabs rax,0x80048f
  800197:	00 00 00 
  80019a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:26
    set_gate(10,(addr_t)invalid_tss,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
  80019c:	48 b8 e2 06 80 00 00 	movabs rax,0x8006e2
  8001a3:	00 00 00 
  8001a6:	b9 00 8f 00 00       	mov    ecx,0x8f00
  8001ab:	ba 08 00 00 00       	mov    edx,0x8
  8001b0:	48 89 c6             	mov    rsi,rax
  8001b3:	bf 0a 00 00 00       	mov    edi,0xa
  8001b8:	48 b8 8f 04 80 00 00 	movabs rax,0x80048f
  8001bf:	00 00 00 
  8001c2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:27
    set_gate(11,(addr_t)segment_notexist,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
  8001c4:	48 b8 03 07 80 00 00 	movabs rax,0x800703
  8001cb:	00 00 00 
  8001ce:	b9 00 8f 00 00       	mov    ecx,0x8f00
  8001d3:	ba 08 00 00 00       	mov    edx,0x8
  8001d8:	48 89 c6             	mov    rsi,rax
  8001db:	bf 0b 00 00 00       	mov    edi,0xb
  8001e0:	48 b8 8f 04 80 00 00 	movabs rax,0x80048f
  8001e7:	00 00 00 
  8001ea:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:28
    set_gate(12,(addr_t)stackseg_overbound,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);//
  8001ec:	48 b8 24 07 80 00 00 	movabs rax,0x800724
  8001f3:	00 00 00 
  8001f6:	b9 00 8f 00 00       	mov    ecx,0x8f00
  8001fb:	ba 08 00 00 00       	mov    edx,0x8
  800200:	48 89 c6             	mov    rsi,rax
  800203:	bf 0c 00 00 00       	mov    edi,0xc
  800208:	48 b8 8f 04 80 00 00 	movabs rax,0x80048f
  80020f:	00 00 00 
  800212:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:29
    set_gate(13,(addr_t)general_protect,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
  800214:	48 b8 45 07 80 00 00 	movabs rax,0x800745
  80021b:	00 00 00 
  80021e:	b9 00 8f 00 00       	mov    ecx,0x8f00
  800223:	ba 08 00 00 00       	mov    edx,0x8
  800228:	48 89 c6             	mov    rsi,rax
  80022b:	bf 0d 00 00 00       	mov    edi,0xd
  800230:	48 b8 8f 04 80 00 00 	movabs rax,0x80048f
  800237:	00 00 00 
  80023a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:30
    set_gate(14,(addr_t)page_err,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
  80023c:	48 b8 66 1c 80 00 00 	movabs rax,0x801c66
  800243:	00 00 00 
  800246:	b9 00 8f 00 00       	mov    ecx,0x8f00
  80024b:	ba 08 00 00 00       	mov    edx,0x8
  800250:	48 89 c6             	mov    rsi,rax
  800253:	bf 0e 00 00 00       	mov    edi,0xe
  800258:	48 b8 8f 04 80 00 00 	movabs rax,0x80048f
  80025f:	00 00 00 
  800262:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:31
    set_gate(15,(addr_t)default_int_proc,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
  800264:	48 b8 cb 05 80 00 00 	movabs rax,0x8005cb
  80026b:	00 00 00 
  80026e:	b9 00 8f 00 00       	mov    ecx,0x8f00
  800273:	ba 08 00 00 00       	mov    edx,0x8
  800278:	48 89 c6             	mov    rsi,rax
  80027b:	bf 0f 00 00 00       	mov    edi,0xf
  800280:	48 b8 8f 04 80 00 00 	movabs rax,0x80048f
  800287:	00 00 00 
  80028a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:32
    set_gate(16,(addr_t)coprocessor_err,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
  80028c:	48 b8 73 07 80 00 00 	movabs rax,0x800773
  800293:	00 00 00 
  800296:	b9 00 8f 00 00       	mov    ecx,0x8f00
  80029b:	ba 08 00 00 00       	mov    edx,0x8
  8002a0:	48 89 c6             	mov    rsi,rax
  8002a3:	bf 10 00 00 00       	mov    edi,0x10
  8002a8:	48 b8 8f 04 80 00 00 	movabs rax,0x80048f
  8002af:	00 00 00 
  8002b2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:33
    for (int i=17;i<48;i++)
  8002b4:	c7 45 fc 11 00 00 00 	mov    DWORD PTR [rbp-0x4],0x11
  8002bb:	eb 2c                	jmp    8002e9 <init_int+0x2e9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:34 (discriminator 3)
        set_gate(i,(addr_t)default_int_proc,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);
  8002bd:	48 be cb 05 80 00 00 	movabs rsi,0x8005cb
  8002c4:	00 00 00 
  8002c7:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  8002ca:	0f b6 c0             	movzx  eax,al
  8002cd:	b9 00 8e 00 00       	mov    ecx,0x8e00
  8002d2:	ba 08 00 00 00       	mov    edx,0x8
  8002d7:	89 c7                	mov    edi,eax
  8002d9:	48 b8 8f 04 80 00 00 	movabs rax,0x80048f
  8002e0:	00 00 00 
  8002e3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:33 (discriminator 3)
    for (int i=17;i<48;i++)
  8002e5:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:33 (discriminator 1)
  8002e9:	83 7d fc 2f          	cmp    DWORD PTR [rbp-0x4],0x2f
  8002ed:	7e ce                	jle    8002bd <init_int+0x2bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:35
	set_gate(0x21,(addr_t)key_proc,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);
  8002ef:	48 b8 45 bb 80 00 00 	movabs rax,0x80bb45
  8002f6:	00 00 00 
  8002f9:	b9 00 8e 00 00       	mov    ecx,0x8e00
  8002fe:	ba 08 00 00 00       	mov    edx,0x8
  800303:	48 89 c6             	mov    rsi,rax
  800306:	bf 21 00 00 00       	mov    edi,0x21
  80030b:	48 b8 8f 04 80 00 00 	movabs rax,0x80048f
  800312:	00 00 00 
  800315:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:36
	set_gate(0x20,(addr_t)clock,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);
  800317:	48 b8 90 89 80 00 00 	movabs rax,0x808990
  80031e:	00 00 00 
  800321:	b9 00 8e 00 00       	mov    ecx,0x8e00
  800326:	ba 08 00 00 00       	mov    edx,0x8
  80032b:	48 89 c6             	mov    rsi,rax
  80032e:	bf 20 00 00 00       	mov    edi,0x20
  800333:	48 b8 8f 04 80 00 00 	movabs rax,0x80048f
  80033a:	00 00 00 
  80033d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:37
	set_gate(0x2e,(addr_t)disk_int_handler,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);
  80033f:	48 b8 30 d0 80 00 00 	movabs rax,0x80d030
  800346:	00 00 00 
  800349:	b9 00 8e 00 00       	mov    ecx,0x8e00
  80034e:	ba 08 00 00 00       	mov    edx,0x8
  800353:	48 89 c6             	mov    rsi,rax
  800356:	bf 2e 00 00 00       	mov    edi,0x2e
  80035b:	48 b8 8f 04 80 00 00 	movabs rax,0x80048f
  800362:	00 00 00 
  800365:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:38
    set_gate(0x80,(addr_t)_syscall,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);//
  800367:	48 b8 10 96 80 00 00 	movabs rax,0x809610
  80036e:	00 00 00 
  800371:	b9 00 8e 00 00       	mov    ecx,0x8e00
  800376:	ba 08 00 00 00       	mov    edx,0x8
  80037b:	48 89 c6             	mov    rsi,rax
  80037e:	bf 80 00 00 00       	mov    edi,0x80
  800383:	48 b8 8f 04 80 00 00 	movabs rax,0x80048f
  80038a:	00 00 00 
  80038d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:43
    //set_gate(0x2c,mouse_proc,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);
    //启动8259A
    
	//ICW1
	outb(0x20,0x11);
  80038f:	be 11 00 00 00       	mov    esi,0x11
  800394:	bf 20 00 00 00       	mov    edi,0x20
  800399:	48 b8 d0 86 80 00 00 	movabs rax,0x8086d0
  8003a0:	00 00 00 
  8003a3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:44
	outb(0xA0,0x11);
  8003a5:	be 11 00 00 00       	mov    esi,0x11
  8003aa:	bf a0 00 00 00       	mov    edi,0xa0
  8003af:	48 b8 d0 86 80 00 00 	movabs rax,0x8086d0
  8003b6:	00 00 00 
  8003b9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:46
	//ICW2
	outb(0x21,0x20);//former 0x20,0x20
  8003bb:	be 20 00 00 00       	mov    esi,0x20
  8003c0:	bf 21 00 00 00       	mov    edi,0x21
  8003c5:	48 b8 d0 86 80 00 00 	movabs rax,0x8086d0
  8003cc:	00 00 00 
  8003cf:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:47
	outb(0xA1,0x28);
  8003d1:	be 28 00 00 00       	mov    esi,0x28
  8003d6:	bf a1 00 00 00       	mov    edi,0xa1
  8003db:	48 b8 d0 86 80 00 00 	movabs rax,0x8086d0
  8003e2:	00 00 00 
  8003e5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:49
	//ICW3
	outb(0x21,0x04);
  8003e7:	be 04 00 00 00       	mov    esi,0x4
  8003ec:	bf 21 00 00 00       	mov    edi,0x21
  8003f1:	48 b8 d0 86 80 00 00 	movabs rax,0x8086d0
  8003f8:	00 00 00 
  8003fb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:50
	outb(0xA1,0x02);
  8003fd:	be 02 00 00 00       	mov    esi,0x2
  800402:	bf a1 00 00 00       	mov    edi,0xa1
  800407:	48 b8 d0 86 80 00 00 	movabs rax,0x8086d0
  80040e:	00 00 00 
  800411:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:52
	//ICW4
	outb(0x21,0x01);
  800413:	be 01 00 00 00       	mov    esi,0x1
  800418:	bf 21 00 00 00       	mov    edi,0x21
  80041d:	48 b8 d0 86 80 00 00 	movabs rax,0x8086d0
  800424:	00 00 00 
  800427:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:53
	outb(0xA1,0x01);
  800429:	be 01 00 00 00       	mov    esi,0x1
  80042e:	bf a1 00 00 00       	mov    edi,0xa1
  800433:	48 b8 d0 86 80 00 00 	movabs rax,0x8086d0
  80043a:	00 00 00 
  80043d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:55

    turn_on_int();
  80043f:	b8 00 00 00 00       	mov    eax,0x0
  800444:	48 ba 0a 87 80 00 00 	movabs rdx,0x80870a
  80044b:	00 00 00 
  80044e:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:59


    //设置IA32_LSTAR,为syscall做设置
    wrmsr(0xc0000082, _syscall);
  800450:	48 b8 10 96 80 00 00 	movabs rax,0x809610
  800457:	00 00 00 
  80045a:	48 89 c6             	mov    rsi,rax
  80045d:	b8 82 00 00 c0       	mov    eax,0xc0000082
  800462:	48 89 c7             	mov    rdi,rax
  800465:	48 b8 21 0b 80 00 00 	movabs rax,0x800b21
  80046c:	00 00 00 
  80046f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:61
    //设置IA32_FMASK,为syscall做设置
    wrmsr(0xc0000084, -1);
  800471:	48 c7 c6 ff ff ff ff 	mov    rsi,0xffffffffffffffff
  800478:	b8 84 00 00 c0       	mov    eax,0xc0000084
  80047d:	48 89 c7             	mov    rdi,rax
  800480:	48 b8 21 0b 80 00 00 	movabs rax,0x800b21
  800487:	00 00 00 
  80048a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:62
}
  80048c:	90                   	nop
  80048d:	c9                   	leave  
  80048e:	c3                   	ret    

000000000080048f <set_gate>:
set_gate():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:64
void set_gate(u8 index,addr_t offset,u16 selector,u16 attr)
{
  80048f:	f3 0f 1e fa          	endbr64 
  800493:	55                   	push   rbp
  800494:	48 89 e5             	mov    rbp,rsp
  800497:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  80049b:	89 c8                	mov    eax,ecx
  80049d:	89 f9                	mov    ecx,edi
  80049f:	88 4d fc             	mov    BYTE PTR [rbp-0x4],cl
  8004a2:	66 89 55 f8          	mov    WORD PTR [rbp-0x8],dx
  8004a6:	66 89 45 ec          	mov    WORD PTR [rbp-0x14],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:71
    idt[index].offset_low=offset&0xffffu;
    idt[index].offset_high=(offset>>16)&0xffffu;
    idt[index].attr=attr;
    idt[index].selector=selector;
#else
    offset|=KNL_BASE;//中断必须在内核空间
  8004aa:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
  8004b1:	80 ff ff 
  8004b4:	48 09 45 f0          	or     QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:72
    idt[index].offset_low=offset&0xffff;
  8004b8:	48 b8 40 0d 81 00 00 	movabs rax,0x810d40
  8004bf:	00 00 00 
  8004c2:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  8004c5:	0f b6 45 fc          	movzx  eax,BYTE PTR [rbp-0x4]
  8004c9:	48 c1 e0 04          	shl    rax,0x4
  8004cd:	48 01 d0             	add    rax,rdx
  8004d0:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  8004d4:	66 89 10             	mov    WORD PTR [rax],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:73
    idt[index].offset_mid=(offset>>16)&0xffff;
  8004d7:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  8004db:	48 c1 e8 10          	shr    rax,0x10
  8004df:	48 89 c2             	mov    rdx,rax
  8004e2:	48 b8 40 0d 81 00 00 	movabs rax,0x810d40
  8004e9:	00 00 00 
  8004ec:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  8004ef:	0f b6 45 fc          	movzx  eax,BYTE PTR [rbp-0x4]
  8004f3:	48 c1 e0 04          	shl    rax,0x4
  8004f7:	48 01 c8             	add    rax,rcx
  8004fa:	66 89 50 06          	mov    WORD PTR [rax+0x6],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:74
    idt[index].offset_high=(offset>>32);//0x0000ffff;
  8004fe:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  800502:	48 c1 e8 20          	shr    rax,0x20
  800506:	48 89 c2             	mov    rdx,rax
  800509:	48 b8 40 0d 81 00 00 	movabs rax,0x810d40
  800510:	00 00 00 
  800513:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  800516:	0f b6 45 fc          	movzx  eax,BYTE PTR [rbp-0x4]
  80051a:	48 c1 e0 04          	shl    rax,0x4
  80051e:	48 01 c8             	add    rax,rcx
  800521:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:75
    idt[index].attr=attr|1;//1是ist索引
  800524:	48 b8 40 0d 81 00 00 	movabs rax,0x810d40
  80052b:	00 00 00 
  80052e:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  800531:	0f b6 45 fc          	movzx  eax,BYTE PTR [rbp-0x4]
  800535:	48 c1 e0 04          	shl    rax,0x4
  800539:	48 01 d0             	add    rax,rdx
  80053c:	0f b7 55 ec          	movzx  edx,WORD PTR [rbp-0x14]
  800540:	83 ca 01             	or     edx,0x1
  800543:	66 89 50 04          	mov    WORD PTR [rax+0x4],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:76
    idt[index].selector=selector;
  800547:	48 b8 40 0d 81 00 00 	movabs rax,0x810d40
  80054e:	00 00 00 
  800551:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  800554:	0f b6 45 fc          	movzx  eax,BYTE PTR [rbp-0x4]
  800558:	48 c1 e0 04          	shl    rax,0x4
  80055c:	48 01 c2             	add    rdx,rax
  80055f:	0f b7 45 f8          	movzx  eax,WORD PTR [rbp-0x8]
  800563:	66 89 42 02          	mov    WORD PTR [rdx+0x2],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:77
    idt[index].rsvd=0;
  800567:	48 b8 40 0d 81 00 00 	movabs rax,0x810d40
  80056e:	00 00 00 
  800571:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  800574:	0f b6 45 fc          	movzx  eax,BYTE PTR [rbp-0x4]
  800578:	48 c1 e0 04          	shl    rax,0x4
  80057c:	48 01 d0             	add    rax,rdx
  80057f:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [rax+0xc],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:79
#endif
}
  800586:	90                   	nop
  800587:	5d                   	pop    rbp
  800588:	c3                   	ret    

0000000000800589 <divide_err>:
divide_err():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:81

void divide_err(){
  800589:	f3 0f 1e fa          	endbr64 
  80058d:	55                   	push   rbp
  80058e:	48 89 e5             	mov    rbp,rsp
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:82
    asm("cli");
  800591:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:84
    //puts("divide err");
    eoi();
  800592:	b8 00 00 00 00       	mov    eax,0x0
  800597:	48 ba fe 86 80 00 00 	movabs rdx,0x8086fe
  80059e:	00 00 00 
  8005a1:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:85
    __asm__ volatile ("sti \r\n leave \r\n iretq");
  8005a3:	fb                   	sti    
  8005a4:	c9                   	leave  
  8005a5:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:86
}
  8005a7:	90                   	nop
  8005a8:	5d                   	pop    rbp
  8005a9:	c3                   	ret    

00000000008005aa <debug>:
debug():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:88

void debug(){
  8005aa:	f3 0f 1e fa          	endbr64 
  8005ae:	55                   	push   rbp
  8005af:	48 89 e5             	mov    rbp,rsp
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:89
    asm("cli");
  8005b2:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:91
    //puts("debug");
    eoi();
  8005b3:	b8 00 00 00 00       	mov    eax,0x0
  8005b8:	48 ba fe 86 80 00 00 	movabs rdx,0x8086fe
  8005bf:	00 00 00 
  8005c2:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:92
    __asm__ volatile ("sti \r\n leave \r\n iretq");
  8005c4:	fb                   	sti    
  8005c5:	c9                   	leave  
  8005c6:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:93
}
  8005c8:	90                   	nop
  8005c9:	5d                   	pop    rbp
  8005ca:	c3                   	ret    

00000000008005cb <default_int_proc>:
default_int_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:94
void default_int_proc(){
  8005cb:	f3 0f 1e fa          	endbr64 
  8005cf:	55                   	push   rbp
  8005d0:	48 89 e5             	mov    rbp,rsp
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:95
    asm("cli");
  8005d3:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:97
    //puts("default_int_proc");
    eoi();
  8005d4:	b8 00 00 00 00       	mov    eax,0x0
  8005d9:	48 ba fe 86 80 00 00 	movabs rdx,0x8086fe
  8005e0:	00 00 00 
  8005e3:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:98
    __asm__ volatile ("sti \r\n leave \r\n iretq");
  8005e5:	fb                   	sti    
  8005e6:	c9                   	leave  
  8005e7:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:99
}
  8005e9:	90                   	nop
  8005ea:	5d                   	pop    rbp
  8005eb:	c3                   	ret    

00000000008005ec <breakpoint>:
breakpoint():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:100
void breakpoint(){
  8005ec:	f3 0f 1e fa          	endbr64 
  8005f0:	55                   	push   rbp
  8005f1:	48 89 e5             	mov    rbp,rsp
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:101
    asm("cli");
  8005f4:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:103
    //puts("breakpoint");
    eoi();
  8005f5:	b8 00 00 00 00       	mov    eax,0x0
  8005fa:	48 ba fe 86 80 00 00 	movabs rdx,0x8086fe
  800601:	00 00 00 
  800604:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:104
    __asm__ volatile ("sti \r\n leave \r\n iretq");
  800606:	fb                   	sti    
  800607:	c9                   	leave  
  800608:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:105
}
  80060a:	90                   	nop
  80060b:	5d                   	pop    rbp
  80060c:	c3                   	ret    

000000000080060d <overflow>:
overflow():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:106
void overflow(){
  80060d:	f3 0f 1e fa          	endbr64 
  800611:	55                   	push   rbp
  800612:	48 89 e5             	mov    rbp,rsp
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:107
    asm("cli");
  800615:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:109
    //puts("overflow");
    eoi();
  800616:	b8 00 00 00 00       	mov    eax,0x0
  80061b:	48 ba fe 86 80 00 00 	movabs rdx,0x8086fe
  800622:	00 00 00 
  800625:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:110
    __asm__ volatile ("sti \r\n leave \r\n iretq");
  800627:	fb                   	sti    
  800628:	c9                   	leave  
  800629:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:111
}
  80062b:	90                   	nop
  80062c:	5d                   	pop    rbp
  80062d:	c3                   	ret    

000000000080062e <bounds>:
bounds():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:112
void bounds(){
  80062e:	f3 0f 1e fa          	endbr64 
  800632:	55                   	push   rbp
  800633:	48 89 e5             	mov    rbp,rsp
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:113
    asm("cli");
  800636:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:115
    //puts("bounds");
    eoi();
  800637:	b8 00 00 00 00       	mov    eax,0x0
  80063c:	48 ba fe 86 80 00 00 	movabs rdx,0x8086fe
  800643:	00 00 00 
  800646:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:116
    __asm__ volatile ("sti \r\n leave \r\n iretq");
  800648:	fb                   	sti    
  800649:	c9                   	leave  
  80064a:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:117
}
  80064c:	90                   	nop
  80064d:	5d                   	pop    rbp
  80064e:	c3                   	ret    

000000000080064f <undefined_operator>:
undefined_operator():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:118
void undefined_operator(){
  80064f:	f3 0f 1e fa          	endbr64 
  800653:	55                   	push   rbp
  800654:	48 89 e5             	mov    rbp,rsp
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:120
    //puts("undef operator");
    eoi();
  800657:	b8 00 00 00 00       	mov    eax,0x0
  80065c:	48 ba fe 86 80 00 00 	movabs rdx,0x8086fe
  800663:	00 00 00 
  800666:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:121
    report_back_trace_of_err();
  800668:	b8 00 00 00 00       	mov    eax,0x0
  80066d:	48 ba 29 87 80 00 00 	movabs rdx,0x808729
  800674:	00 00 00 
  800677:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:122
    __asm__ volatile ("jmp .\r\n leave \r\n iretq");
  800679:	eb fe                	jmp    800679 <undefined_operator+0x2a>
  80067b:	c9                   	leave  
  80067c:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:123
}
  80067e:	90                   	nop
  80067f:	5d                   	pop    rbp
  800680:	c3                   	ret    

0000000000800681 <coprocessor_notexist>:
coprocessor_notexist():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:124
void coprocessor_notexist(){
  800681:	f3 0f 1e fa          	endbr64 
  800685:	55                   	push   rbp
  800686:	48 89 e5             	mov    rbp,rsp
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:125
    asm("cli");
  800689:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:127
    //puts("coprocessor doesnt exist");
    eoi();
  80068a:	b8 00 00 00 00       	mov    eax,0x0
  80068f:	48 ba fe 86 80 00 00 	movabs rdx,0x8086fe
  800696:	00 00 00 
  800699:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:128
    __asm__ volatile ("sti \r\n leave \r\n iretq");
  80069b:	fb                   	sti    
  80069c:	c9                   	leave  
  80069d:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:129
}
  80069f:	90                   	nop
  8006a0:	5d                   	pop    rbp
  8006a1:	c3                   	ret    

00000000008006a2 <double_ints>:
double_ints():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:130
void double_ints(){
  8006a2:	f3 0f 1e fa          	endbr64 
  8006a6:	55                   	push   rbp
  8006a7:	48 89 e5             	mov    rbp,rsp
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:131
    asm("cli");
  8006aa:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:133
    //puts("double interrupts");
    eoi();
  8006ab:	b8 00 00 00 00       	mov    eax,0x0
  8006b0:	48 ba fe 86 80 00 00 	movabs rdx,0x8086fe
  8006b7:	00 00 00 
  8006ba:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:134
    __asm__ volatile ("sti \r\n leave \r\n iretq");
  8006bc:	fb                   	sti    
  8006bd:	c9                   	leave  
  8006be:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:135
}
  8006c0:	90                   	nop
  8006c1:	5d                   	pop    rbp
  8006c2:	c3                   	ret    

00000000008006c3 <coprocessor_seg_overbound>:
coprocessor_seg_overbound():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:136
void coprocessor_seg_overbound(){
  8006c3:	f3 0f 1e fa          	endbr64 
  8006c7:	55                   	push   rbp
  8006c8:	48 89 e5             	mov    rbp,rsp
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:138
    //puts("coprocessfor seg overdound");
    eoi();
  8006cb:	b8 00 00 00 00       	mov    eax,0x0
  8006d0:	48 ba fe 86 80 00 00 	movabs rdx,0x8086fe
  8006d7:	00 00 00 
  8006da:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:139
    __asm__ volatile ("leave \r\n iretq");
  8006dc:	c9                   	leave  
  8006dd:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:140
}
  8006df:	90                   	nop
  8006e0:	5d                   	pop    rbp
  8006e1:	c3                   	ret    

00000000008006e2 <invalid_tss>:
invalid_tss():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:141
void invalid_tss(){
  8006e2:	f3 0f 1e fa          	endbr64 
  8006e6:	55                   	push   rbp
  8006e7:	48 89 e5             	mov    rbp,rsp
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:142
    asm("cli");
  8006ea:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:144
    //puts("invalid tss");
    eoi();
  8006eb:	b8 00 00 00 00       	mov    eax,0x0
  8006f0:	48 ba fe 86 80 00 00 	movabs rdx,0x8086fe
  8006f7:	00 00 00 
  8006fa:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:145
    __asm__ volatile ("sti \r\n leave \r\n iretq");
  8006fc:	fb                   	sti    
  8006fd:	c9                   	leave  
  8006fe:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:146
}
  800700:	90                   	nop
  800701:	5d                   	pop    rbp
  800702:	c3                   	ret    

0000000000800703 <segment_notexist>:
segment_notexist():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:147
void segment_notexist(){
  800703:	f3 0f 1e fa          	endbr64 
  800707:	55                   	push   rbp
  800708:	48 89 e5             	mov    rbp,rsp
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:148
    asm("cli");
  80070b:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:150
    //puts("seg nonexistent");
    eoi();
  80070c:	b8 00 00 00 00       	mov    eax,0x0
  800711:	48 ba fe 86 80 00 00 	movabs rdx,0x8086fe
  800718:	00 00 00 
  80071b:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:151
    __asm__ volatile ("sti \r\n leave \r\n iretq");
  80071d:	fb                   	sti    
  80071e:	c9                   	leave  
  80071f:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:152
}
  800721:	90                   	nop
  800722:	5d                   	pop    rbp
  800723:	c3                   	ret    

0000000000800724 <stackseg_overbound>:
stackseg_overbound():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:153
void stackseg_overbound(){
  800724:	f3 0f 1e fa          	endbr64 
  800728:	55                   	push   rbp
  800729:	48 89 e5             	mov    rbp,rsp
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:154
    asm("cli");
  80072c:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:156
    //puts("stack seg overbound");
    eoi();
  80072d:	b8 00 00 00 00       	mov    eax,0x0
  800732:	48 ba fe 86 80 00 00 	movabs rdx,0x8086fe
  800739:	00 00 00 
  80073c:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:157
    __asm__ volatile ("sti \r\n leave \r\n iretq");
  80073e:	fb                   	sti    
  80073f:	c9                   	leave  
  800740:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:158
}
  800742:	90                   	nop
  800743:	5d                   	pop    rbp
  800744:	c3                   	ret    

0000000000800745 <general_protect>:
general_protect():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:159
void general_protect(){
  800745:	f3 0f 1e fa          	endbr64 
  800749:	55                   	push   rbp
  80074a:	48 89 e5             	mov    rbp,rsp
  80074d:	48 83 ec 10          	sub    rsp,0x10
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:161
    //print("general protect.");
    int err_code=0;
  800751:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:179
    //杀死问题进程
    del_proc(cur_proc);
    printf("killed the problem process.\n");
	printf("shell:>");
    switch_proc_tss(0); */
    eoi();
  800758:	b8 00 00 00 00       	mov    eax,0x0
  80075d:	48 ba fe 86 80 00 00 	movabs rdx,0x8086fe
  800764:	00 00 00 
  800767:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:180
    __asm__ volatile ("leave\r\n add $8,%rsp \r\n iretq");
  800769:	c9                   	leave  
  80076a:	48 83 c4 08          	add    rsp,0x8
  80076e:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:181
}
  800770:	90                   	nop
  800771:	c9                   	leave  
  800772:	c3                   	ret    

0000000000800773 <coprocessor_err>:
coprocessor_err():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:183

void coprocessor_err(){
  800773:	f3 0f 1e fa          	endbr64 
  800777:	55                   	push   rbp
  800778:	48 89 e5             	mov    rbp,rsp
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:184
    asm("cli");
  80077b:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:186
    //puts("coprocessor err");
    eoi();
  80077c:	b8 00 00 00 00       	mov    eax,0x0
  800781:	48 ba fe 86 80 00 00 	movabs rdx,0x8086fe
  800788:	00 00 00 
  80078b:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:187
    __asm__ volatile ("sti \r\n leave \r\n iretq");
  80078d:	fb                   	sti    
  80078e:	c9                   	leave  
  80078f:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:188
}
  800791:	90                   	nop
  800792:	5d                   	pop    rbp
  800793:	c3                   	ret    

0000000000800794 <syscall>:
syscall():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:207

xchg rcx to r10

*/
int syscall(int a, int b, int c, int d, int e, int f)
{
  800794:	f3 0f 1e fa          	endbr64 
  800798:	55                   	push   rbp
  800799:	48 89 e5             	mov    rbp,rsp
  80079c:	48 83 ec 30          	sub    rsp,0x30
  8007a0:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
  8007a3:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
  8007a6:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
  8007a9:	89 4d e0             	mov    DWORD PTR [rbp-0x20],ecx
  8007ac:	44 89 45 dc          	mov    DWORD PTR [rbp-0x24],r8d
  8007b0:	44 89 4d d8          	mov    DWORD PTR [rbp-0x28],r9d
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:209
    unsigned long num;
    asm volatile("":"=a"(num));//这样rax中存的参数就到这了
  8007b4:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:210
    switch (num)
  8007b8:	48 83 7d f8 64       	cmp    QWORD PTR [rbp-0x8],0x64
  8007bd:	0f 87 5c 03 00 00    	ja     800b1f <syscall+0x38b>
  8007c3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  8007c7:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
  8007ce:	00 
  8007cf:	48 b8 e0 85 81 00 00 	movabs rax,0x8185e0
  8007d6:	00 00 00 
  8007d9:	48 01 d0             	add    rax,rdx
  8007dc:	48 8b 00             	mov    rax,QWORD PTR [rax]
  8007df:	3e ff e0             	notrack jmp rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:212
    {
        case 0:return reg_device(a);
  8007e2:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  8007e5:	48 98                	cdqe   
  8007e7:	48 89 c7             	mov    rdi,rax
  8007ea:	48 b8 3a 41 80 00 00 	movabs rax,0x80413a
  8007f1:	00 00 00 
  8007f4:	ff d0                	call   rax
  8007f6:	e9 24 03 00 00       	jmp    800b1f <syscall+0x38b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:213
        case 1:return dispose_device(a);
  8007fb:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  8007fe:	89 c7                	mov    edi,eax
  800800:	48 b8 6d 4d 80 00 00 	movabs rax,0x804d6d
  800807:	00 00 00 
  80080a:	ff d0                	call   rax
  80080c:	e9 0e 03 00 00       	jmp    800b1f <syscall+0x38b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:214
        case 2:return reg_driver(a);
  800811:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  800814:	48 98                	cdqe   
  800816:	48 89 c7             	mov    rdi,rax
  800819:	48 b8 6c 44 80 00 00 	movabs rax,0x80446c
  800820:	00 00 00 
  800823:	ff d0                	call   rax
  800825:	e9 f5 02 00 00       	jmp    800b1f <syscall+0x38b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:215
        case 3:return dispose_driver(a);
  80082a:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  80082d:	48 98                	cdqe   
  80082f:	48 89 c7             	mov    rdi,rax
  800832:	48 b8 1d 4e 80 00 00 	movabs rax,0x804e1d
  800839:	00 00 00 
  80083c:	ff d0                	call   rax
  80083e:	e9 dc 02 00 00       	jmp    800b1f <syscall+0x38b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:216
        case 4:return call_drv_func(a,b,c);
  800843:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  800846:	48 98                	cdqe   
  800848:	48 89 c2             	mov    rdx,rax
  80084b:	8b 4d e8             	mov    ecx,DWORD PTR [rbp-0x18]
  80084e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  800851:	89 ce                	mov    esi,ecx
  800853:	89 c7                	mov    edi,eax
  800855:	48 b8 78 4a 80 00 00 	movabs rax,0x804a78
  80085c:	00 00 00 
  80085f:	ff d0                	call   rax
  800861:	e9 b9 02 00 00       	jmp    800b1f <syscall+0x38b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:217
        case 5:return req_page_at(a,b);
  800866:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  800869:	48 98                	cdqe   
  80086b:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
  80086e:	89 d6                	mov    esi,edx
  800870:	48 89 c7             	mov    rdi,rax
  800873:	48 b8 b4 24 80 00 00 	movabs rax,0x8024b4
  80087a:	00 00 00 
  80087d:	ff d0                	call   rax
  80087f:	e9 9b 02 00 00       	jmp    800b1f <syscall+0x38b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:218
        case 6:return free_page(a);
  800884:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  800887:	48 98                	cdqe   
  800889:	48 89 c7             	mov    rdi,rax
  80088c:	48 b8 67 22 80 00 00 	movabs rax,0x802267
  800893:	00 00 00 
  800896:	ff d0                	call   rax
  800898:	e9 82 02 00 00       	jmp    800b1f <syscall+0x38b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:219
        case 7:return reg_proc(a, b, c);
  80089d:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  8008a0:	48 98                	cdqe   
  8008a2:	48 89 c2             	mov    rdx,rax
  8008a5:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
  8008a8:	48 98                	cdqe   
  8008aa:	48 89 c1             	mov    rcx,rax
  8008ad:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  8008b0:	48 98                	cdqe   
  8008b2:	48 89 ce             	mov    rsi,rcx
  8008b5:	48 89 c7             	mov    rdi,rax
  8008b8:	48 b8 fd 65 80 00 00 	movabs rax,0x8065fd
  8008bf:	00 00 00 
  8008c2:	ff d0                	call   rax
  8008c4:	e9 56 02 00 00       	jmp    800b1f <syscall+0x38b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:220
        case 8:del_proc(a);
  8008c9:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  8008cc:	89 c7                	mov    edi,eax
  8008ce:	48 b8 63 63 80 00 00 	movabs rax,0x806363
  8008d5:	00 00 00 
  8008d8:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:221
        case 10:chk_vm(a,b);
  8008da:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
  8008dd:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  8008e0:	89 d6                	mov    esi,edx
  8008e2:	89 c7                	mov    edi,eax
  8008e4:	48 b8 ae 25 80 00 00 	movabs rax,0x8025ae
  8008eb:	00 00 00 
  8008ee:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:222
        case 11:return sys_open(a,b);
  8008f0:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  8008f3:	48 98                	cdqe   
  8008f5:	48 89 c2             	mov    rdx,rax
  8008f8:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
  8008fb:	89 c6                	mov    esi,eax
  8008fd:	48 89 d7             	mov    rdi,rdx
  800900:	48 b8 5e a8 80 00 00 	movabs rax,0x80a85e
  800907:	00 00 00 
  80090a:	ff d0                	call   rax
  80090c:	e9 0e 02 00 00       	jmp    800b1f <syscall+0x38b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:223
        case 12:return sys_close(a);
  800911:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  800914:	89 c7                	mov    edi,eax
  800916:	48 b8 6a ae 80 00 00 	movabs rax,0x80ae6a
  80091d:	00 00 00 
  800920:	ff d0                	call   rax
  800922:	e9 f8 01 00 00       	jmp    800b1f <syscall+0x38b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:224
        case 13:return sys_read(a,b,c);
  800927:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  80092a:	48 63 d0             	movsxd rdx,eax
  80092d:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
  800930:	48 98                	cdqe   
  800932:	48 89 c1             	mov    rcx,rax
  800935:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  800938:	48 89 ce             	mov    rsi,rcx
  80093b:	89 c7                	mov    edi,eax
  80093d:	48 b8 35 af 80 00 00 	movabs rax,0x80af35
  800944:	00 00 00 
  800947:	ff d0                	call   rax
  800949:	e9 d1 01 00 00       	jmp    800b1f <syscall+0x38b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:225
        case 14:return sys_write(a,b,c);
  80094e:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  800951:	48 63 d0             	movsxd rdx,eax
  800954:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
  800957:	48 98                	cdqe   
  800959:	48 89 c1             	mov    rcx,rax
  80095c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  80095f:	48 89 ce             	mov    rsi,rcx
  800962:	89 c7                	mov    edi,eax
  800964:	48 b8 eb af 80 00 00 	movabs rax,0x80afeb
  80096b:	00 00 00 
  80096e:	ff d0                	call   rax
  800970:	e9 aa 01 00 00       	jmp    800b1f <syscall+0x38b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:226
        case 15:return sys_lseek(a,b,c);
  800975:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
  800978:	48 63 c8             	movsxd rcx,eax
  80097b:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
  80097e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  800981:	48 89 ce             	mov    rsi,rcx
  800984:	89 c7                	mov    edi,eax
  800986:	48 b8 a1 b0 80 00 00 	movabs rax,0x80b0a1
  80098d:	00 00 00 
  800990:	ff d0                	call   rax
  800992:	e9 88 01 00 00       	jmp    800b1f <syscall+0x38b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:227
        case 16:return sys_tell(a);
  800997:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  80099a:	89 c7                	mov    edi,eax
  80099c:	48 b8 83 2a 80 00 00 	movabs rax,0x802a83
  8009a3:	00 00 00 
  8009a6:	ff d0                	call   rax
  8009a8:	e9 72 01 00 00       	jmp    800b1f <syscall+0x38b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:228
        case 17:return reg_vol(a,b,c);
  8009ad:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
  8009b0:	8b 4d e8             	mov    ecx,DWORD PTR [rbp-0x18]
  8009b3:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  8009b6:	89 ce                	mov    esi,ecx
  8009b8:	89 c7                	mov    edi,eax
  8009ba:	b8 00 00 00 00       	mov    eax,0x0
  8009bf:	48 b9 31 29 80 00 00 	movabs rcx,0x802931
  8009c6:	00 00 00 
  8009c9:	ff d1                	call   rcx
  8009cb:	e9 4f 01 00 00       	jmp    800b1f <syscall+0x38b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:229
        case 18:return free_vol(a);
  8009d0:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  8009d3:	89 c7                	mov    edi,eax
  8009d5:	b8 00 00 00 00       	mov    eax,0x0
  8009da:	48 ba 0e 29 80 00 00 	movabs rdx,0x80290e
  8009e1:	00 00 00 
  8009e4:	ff d2                	call   rdx
  8009e6:	e9 34 01 00 00       	jmp    800b1f <syscall+0x38b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:230
        case 19:return execute(a, NULL);
  8009eb:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  8009ee:	48 98                	cdqe   
  8009f0:	be 00 00 00 00       	mov    esi,0x0
  8009f5:	48 89 c7             	mov    rdi,rax
  8009f8:	48 b8 e4 89 80 00 00 	movabs rax,0x8089e4
  8009ff:	00 00 00 
  800a02:	ff d0                	call   rax
  800a04:	e9 16 01 00 00       	jmp    800b1f <syscall+0x38b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:231
        case SYSCALL_EXIT:return sys_exit(a);
  800a09:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  800a0c:	89 c7                	mov    edi,eax
  800a0e:	48 b8 ae 65 80 00 00 	movabs rax,0x8065ae
  800a15:	00 00 00 
  800a18:	ff d0                	call   rax
  800a1a:	e9 00 01 00 00       	jmp    800b1f <syscall+0x38b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:232
        case SYSCALL_CALL:return exec_call(a);
  800a1f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  800a22:	48 98                	cdqe   
  800a24:	48 89 c7             	mov    rdi,rax
  800a27:	48 b8 49 8c 80 00 00 	movabs rax,0x808c49
  800a2e:	00 00 00 
  800a31:	ff d0                	call   rax
  800a33:	e9 e7 00 00 00       	jmp    800b1f <syscall+0x38b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:233
        case SYSCALL_MKFIFO:return sys_mkfifo(a);
  800a38:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  800a3b:	89 c7                	mov    edi,eax
  800a3d:	48 b8 35 27 80 00 00 	movabs rax,0x802735
  800a44:	00 00 00 
  800a47:	ff d0                	call   rax
  800a49:	e9 d1 00 00 00       	jmp    800b1f <syscall+0x38b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:234
        case SYSCALL_MALLOC:return sys_malloc(a);
  800a4e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  800a51:	89 c7                	mov    edi,eax
  800a53:	48 b8 69 68 80 00 00 	movabs rax,0x806869
  800a5a:	00 00 00 
  800a5d:	ff d0                	call   rax
  800a5f:	e9 bb 00 00 00       	jmp    800b1f <syscall+0x38b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:235
        case SYSCALL_FREE:return sys_free(a);
  800a64:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  800a67:	89 c7                	mov    edi,eax
  800a69:	48 b8 2e 6a 80 00 00 	movabs rax,0x806a2e
  800a70:	00 00 00 
  800a73:	ff d0                	call   rax
  800a75:	e9 a5 00 00 00       	jmp    800b1f <syscall+0x38b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:236
        case SYSCALL_KB_READC:return sys_analyse_key();
  800a7a:	b8 00 00 00 00       	mov    eax,0x0
  800a7f:	48 ba 0d bd 80 00 00 	movabs rdx,0x80bd0d
  800a86:	00 00 00 
  800a89:	ff d2                	call   rdx
  800a8b:	0f be c0             	movsx  eax,al
  800a8e:	e9 8c 00 00 00       	jmp    800b1f <syscall+0x38b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:237
        case SYSCALL_FIND_DEV:return sys_find_dev(a);
  800a93:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  800a96:	48 98                	cdqe   
  800a98:	48 89 c7             	mov    rdi,rax
  800a9b:	48 b8 d1 45 80 00 00 	movabs rax,0x8045d1
  800aa2:	00 00 00 
  800aa5:	ff d0                	call   rax
  800aa7:	eb 76                	jmp    800b1f <syscall+0x38b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:238
        case SYSCALL_FORK:return sys_fork();
  800aa9:	48 b8 f4 6d 80 00 00 	movabs rax,0x806df4
  800ab0:	00 00 00 
  800ab3:	ff d0                	call   rax
  800ab5:	eb 68                	jmp    800b1f <syscall+0x38b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:239
        case SYSCALL_EXECVE:return sys_execve(a,b);
  800ab7:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
  800aba:	48 98                	cdqe   
  800abc:	48 89 c2             	mov    rdx,rax
  800abf:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  800ac2:	48 98                	cdqe   
  800ac4:	48 89 d6             	mov    rsi,rdx
  800ac7:	48 89 c7             	mov    rdi,rax
  800aca:	48 b8 0d 8b 80 00 00 	movabs rax,0x808b0d
  800ad1:	00 00 00 
  800ad4:	ff d0                	call   rax
  800ad6:	eb 47                	jmp    800b1f <syscall+0x38b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:240
        case SYSCALL_OPERATE_DEV:return sys_operate_dev(a,b,c);
  800ad8:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  800adb:	48 98                	cdqe   
  800add:	48 89 c2             	mov    rdx,rax
  800ae0:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  800ae3:	48 98                	cdqe   
  800ae5:	48 89 c1             	mov    rcx,rax
  800ae8:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
  800aeb:	89 c6                	mov    esi,eax
  800aed:	48 89 cf             	mov    rdi,rcx
  800af0:	48 b8 83 46 80 00 00 	movabs rax,0x804683
  800af7:	00 00 00 
  800afa:	ff d0                	call   rax
  800afc:	eb 21                	jmp    800b1f <syscall+0x38b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:241
        case SYSCALL_WAIT:return sys_wait(a,b,c);
  800afe:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
  800b01:	48 98                	cdqe   
  800b03:	48 89 c1             	mov    rcx,rax
  800b06:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
  800b09:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  800b0c:	48 89 ce             	mov    rsi,rcx
  800b0f:	89 c7                	mov    edi,eax
  800b11:	48 b8 a7 b1 80 00 00 	movabs rax,0x80b1a7
  800b18:	00 00 00 
  800b1b:	ff d0                	call   rax
  800b1d:	eb 00                	jmp    800b1f <syscall+0x38b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:247
    }
    // __asm__ volatile("mov %0,%%eax\r\n mov %1,%%ebx\r\n mov %2,%%ecx\r\n mov %3,%%edx\r\n mov %4,%%esi\r\n mov %5,%%edi"\
    // ::"m"(func),"m"(a),"m"(b),"m"(c),"m"(d),"m"(e));
    // __asm__ volatile("int $0x80\r\n leave\r\n ret");

}
  800b1f:	c9                   	leave  
  800b20:	c3                   	ret    

0000000000800b21 <wrmsr>:
wrmsr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:249
void wrmsr(unsigned long address,unsigned long value)
{
  800b21:	f3 0f 1e fa          	endbr64 
  800b25:	55                   	push   rbp
  800b26:	48 89 e5             	mov    rbp,rsp
  800b29:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  800b2d:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:250
    __asm__ __volatile__	("wrmsr	\n\t"::"d"(value >> 32),"a"(value & 0xffffffff),"c"(address):"memory");
  800b31:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  800b35:	48 c1 e8 20          	shr    rax,0x20
  800b39:	48 89 c2             	mov    rdx,rax
  800b3c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  800b40:	89 c0                	mov    eax,eax
  800b42:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  800b46:	0f 30                	wrmsr  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:251
  800b48:	90                   	nop
  800b49:	5d                   	pop    rbp
  800b4a:	c3                   	ret    

0000000000800b4b <main>:
main():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:24
#include "exe.h"
#include "reloc.h"

int manage_proc_lock=1;
void main(unsigned int magic,void* addr)
{
  800b4b:	f3 0f 1e fa          	endbr64 
  800b4f:	55                   	push   rbp
  800b50:	48 89 e5             	mov    rbp,rsp
  800b53:	48 83 ec 70          	sub    rsp,0x70
  800b57:	89 7d 9c             	mov    DWORD PTR [rbp-0x64],edi
  800b5a:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:26

    struct multiboot_header* mbi=0ul;
  800b5e:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
  800b65:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:27
    mbi=(struct multiboot_header*)addr;
  800b66:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  800b6a:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:28
    init_logging();
  800b6e:	b8 00 00 00 00       	mov    eax,0x0
  800b73:	48 ba 15 10 80 00 00 	movabs rdx,0x801015
  800b7a:	00 00 00 
  800b7d:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:38
    }
    //获取tags
    struct multiboot_tag *tag;

    //先初始化串口，保证输出最基本的调试信息
    init_com(PORT_COM1);
  800b7f:	bf f8 03 00 00       	mov    edi,0x3f8
  800b84:	48 b8 1e fe 80 00 00 	movabs rax,0x80fe1e
  800b8b:	00 00 00 
  800b8e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:39
    comprintf("\rgamessis os loaded.\r\n");
  800b90:	48 b8 08 89 81 00 00 	movabs rax,0x818908
  800b97:	00 00 00 
  800b9a:	48 89 c7             	mov    rdi,rax
  800b9d:	b8 00 00 00 00       	mov    eax,0x0
  800ba2:	48 ba ae ff 80 00 00 	movabs rdx,0x80ffae
  800ba9:	00 00 00 
  800bac:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:41
	unsigned size;
    size = *(unsigned long*)addr;
  800bae:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  800bb2:	48 8b 00             	mov    rax,QWORD PTR [rax]
  800bb5:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:43
//    //printf("Announced mbi size 0x%x\n", size);
	for (tag = (struct multiboot_tag *)(addr + 8);
  800bb8:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  800bbc:	48 83 c0 08          	add    rax,0x8
  800bc0:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  800bc4:	e9 bc 02 00 00       	jmp    800e85 <main+0x33a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:48
		 tag->type != MULTIBOOT_TAG_TYPE_END;
		 tag = (struct multiboot_tag *)((u8 *)tag + ((tag->size + 7) & ~7)))
	{
		//printf("Tag 0x%x, Size 0x%x\n", tag->type, tag->size);
        if(tag->type==MULTIBOOT_TAG_TYPE_BASIC_MEMINFO)
  800bc9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  800bcd:	8b 00                	mov    eax,DWORD PTR [rax]
  800bcf:	83 f8 04             	cmp    eax,0x4
  800bd2:	75 1a                	jne    800bee <main+0xa3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:49
            set_high_mem_base(((struct multiboot_tag_basic_meminfo *)tag)->mem_lower);
  800bd4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  800bd8:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
  800bdb:	89 c7                	mov    edi,eax
  800bdd:	48 b8 f8 17 80 00 00 	movabs rax,0x8017f8
  800be4:	00 00 00 
  800be7:	ff d0                	call   rax
  800be9:	e9 84 02 00 00       	jmp    800e72 <main+0x327>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:50
        else if(tag->type==MULTIBOOT_TAG_TYPE_MMAP){
  800bee:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  800bf2:	8b 00                	mov    eax,DWORD PTR [rax]
  800bf4:	83 f8 06             	cmp    eax,0x6
  800bf7:	75 67                	jne    800c60 <main+0x115>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:52

            for (multiboot_memory_map_t * mmap = ((struct multiboot_tag_mmap *)tag)->entries;
  800bf9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  800bfd:	48 83 c0 10          	add    rax,0x10
  800c01:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  800c05:	eb 3e                	jmp    800c45 <main+0xfa>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:56
                 (multiboot_uint8_t *)mmap < (multiboot_uint8_t *)tag + tag->size;
                 mmap = (multiboot_memory_map_t *)((unsigned long)mmap + ((struct multiboot_tag_mmap *)tag)->entry_size))
            {
                set_mem_area(mmap->addr,mmap->len,mmap->type);
  800c07:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  800c0b:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
  800c0e:	89 c2                	mov    edx,eax
  800c10:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  800c14:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
  800c18:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  800c1c:	48 8b 00             	mov    rax,QWORD PTR [rax]
  800c1f:	48 89 ce             	mov    rsi,rcx
  800c22:	48 89 c7             	mov    rdi,rax
  800c25:	48 b8 15 18 80 00 00 	movabs rax,0x801815
  800c2c:	00 00 00 
  800c2f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:54
                 mmap = (multiboot_memory_map_t *)((unsigned long)mmap + ((struct multiboot_tag_mmap *)tag)->entry_size))
  800c31:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  800c35:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
  800c38:	89 c2                	mov    edx,eax
  800c3a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  800c3e:	48 01 d0             	add    rax,rdx
  800c41:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:53
                 (multiboot_uint8_t *)mmap < (multiboot_uint8_t *)tag + tag->size;
  800c45:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  800c49:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
  800c4c:	89 c2                	mov    edx,eax
  800c4e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  800c52:	48 01 d0             	add    rax,rdx
  800c55:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
  800c59:	72 ac                	jb     800c07 <main+0xbc>
  800c5b:	e9 12 02 00 00       	jmp    800e72 <main+0x327>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:60
            }

        }
        else if (tag->type==MULTIBOOT_TAG_TYPE_FRAMEBUFFER){
  800c60:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  800c64:	8b 00                	mov    eax,DWORD PTR [rax]
  800c66:	83 f8 08             	cmp    eax,0x8
  800c69:	0f 85 bf 01 00 00    	jne    800e2e <main+0x2e3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:64

            multiboot_uint32_t color;
            unsigned i;
            struct multiboot_tag_framebuffer *tagfb = (struct multiboot_tag_framebuffer *)tag;
  800c6f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  800c73:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:65
            void *fb = (void *) FRAMEBUFFER_ADDR;
  800c77:	48 b8 00 00 00 40 00 	movabs rax,0xffff800040000000
  800c7e:	80 ff ff 
  800c81:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:66
            set_framebuffer(*tagfb);
  800c85:	48 83 ec 08          	sub    rsp,0x8
  800c89:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  800c8d:	ff 70 20             	push   QWORD PTR [rax+0x20]
  800c90:	ff 70 18             	push   QWORD PTR [rax+0x18]
  800c93:	ff 70 10             	push   QWORD PTR [rax+0x10]
  800c96:	ff 70 08             	push   QWORD PTR [rax+0x8]
  800c99:	ff 30                	push   QWORD PTR [rax]
  800c9b:	48 b8 08 99 80 00 00 	movabs rax,0x809908
  800ca2:	00 00 00 
  800ca5:	ff d0                	call   rax
  800ca7:	48 83 c4 30          	add    rsp,0x30
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:68

            switch (tagfb->common.framebuffer_type)
  800cab:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  800caf:	0f b6 40 1d          	movzx  eax,BYTE PTR [rax+0x1d]
  800cb3:	0f b6 c0             	movzx  eax,al
  800cb6:	83 f8 02             	cmp    eax,0x2
  800cb9:	0f 84 5d 01 00 00    	je     800e1c <main+0x2d1>
  800cbf:	83 f8 02             	cmp    eax,0x2
  800cc2:	0f 8f 5d 01 00 00    	jg     800e25 <main+0x2da>
  800cc8:	85 c0                	test   eax,eax
  800cca:	74 0e                	je     800cda <main+0x18f>
  800ccc:	83 f8 01             	cmp    eax,0x1
  800ccf:	0f 84 18 01 00 00    	je     800ded <main+0x2a2>
  800cd5:	e9 4b 01 00 00       	jmp    800e25 <main+0x2da>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:75
                case MULTIBOOT_FRAMEBUFFER_TYPE_INDEXED:
                {
                    unsigned best_distance, distance;
                    struct multiboot_color *palette;

                    palette = tagfb->framebuffer_palette;
  800cda:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  800cde:	48 83 c0 22          	add    rax,0x22
  800ce2:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:77

                    color = 0;
  800ce6:	c7 45 bc 00 00 00 00 	mov    DWORD PTR [rbp-0x44],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:78
                    best_distance = 4 * 256 * 256;
  800ced:	c7 45 e8 00 00 04 00 	mov    DWORD PTR [rbp-0x18],0x40000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:80

                    for (i = 0; i < tagfb->framebuffer_palette_num_colors; i++)
  800cf4:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
  800cfb:	e9 d4 00 00 00       	jmp    800dd4 <main+0x289>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:82
                    {
                        distance = (0xff - palette[i].blue) * (0xff - palette[i].blue) + palette[i].red * palette[i].red + palette[i].green * palette[i].green;
  800d00:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
  800d03:	48 89 d0             	mov    rax,rdx
  800d06:	48 01 c0             	add    rax,rax
  800d09:	48 01 c2             	add    rdx,rax
  800d0c:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  800d10:	48 01 d0             	add    rax,rdx
  800d13:	0f b6 40 02          	movzx  eax,BYTE PTR [rax+0x2]
  800d17:	0f b6 c0             	movzx  eax,al
  800d1a:	ba ff 00 00 00       	mov    edx,0xff
  800d1f:	89 d1                	mov    ecx,edx
  800d21:	29 c1                	sub    ecx,eax
  800d23:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
  800d26:	48 89 d0             	mov    rax,rdx
  800d29:	48 01 c0             	add    rax,rax
  800d2c:	48 01 c2             	add    rdx,rax
  800d2f:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  800d33:	48 01 d0             	add    rax,rdx
  800d36:	0f b6 40 02          	movzx  eax,BYTE PTR [rax+0x2]
  800d3a:	0f b6 d0             	movzx  edx,al
  800d3d:	b8 ff 00 00 00       	mov    eax,0xff
  800d42:	29 d0                	sub    eax,edx
  800d44:	89 ce                	mov    esi,ecx
  800d46:	0f af f0             	imul   esi,eax
  800d49:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
  800d4c:	48 89 d0             	mov    rax,rdx
  800d4f:	48 01 c0             	add    rax,rax
  800d52:	48 01 c2             	add    rdx,rax
  800d55:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  800d59:	48 01 d0             	add    rax,rdx
  800d5c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  800d5f:	0f b6 c8             	movzx  ecx,al
  800d62:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
  800d65:	48 89 d0             	mov    rax,rdx
  800d68:	48 01 c0             	add    rax,rax
  800d6b:	48 01 c2             	add    rdx,rax
  800d6e:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  800d72:	48 01 d0             	add    rax,rdx
  800d75:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  800d78:	0f b6 c0             	movzx  eax,al
  800d7b:	0f af c1             	imul   eax,ecx
  800d7e:	01 c6                	add    esi,eax
  800d80:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
  800d83:	48 89 d0             	mov    rax,rdx
  800d86:	48 01 c0             	add    rax,rax
  800d89:	48 01 c2             	add    rdx,rax
  800d8c:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  800d90:	48 01 d0             	add    rax,rdx
  800d93:	0f b6 40 01          	movzx  eax,BYTE PTR [rax+0x1]
  800d97:	0f b6 c8             	movzx  ecx,al
  800d9a:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
  800d9d:	48 89 d0             	mov    rax,rdx
  800da0:	48 01 c0             	add    rax,rax
  800da3:	48 01 c2             	add    rdx,rax
  800da6:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  800daa:	48 01 d0             	add    rax,rdx
  800dad:	0f b6 40 01          	movzx  eax,BYTE PTR [rax+0x1]
  800db1:	0f b6 c0             	movzx  eax,al
  800db4:	0f af c1             	imul   eax,ecx
  800db7:	01 f0                	add    eax,esi
  800db9:	89 45 ac             	mov    DWORD PTR [rbp-0x54],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:83
                        if (distance < best_distance)
  800dbc:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
  800dbf:	3b 45 e8             	cmp    eax,DWORD PTR [rbp-0x18]
  800dc2:	73 0c                	jae    800dd0 <main+0x285>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:85
                        {
                            color = i;
  800dc4:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  800dc7:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:86
                            best_distance = distance;
  800dca:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
  800dcd:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:80 (discriminator 2)
                    for (i = 0; i < tagfb->framebuffer_palette_num_colors; i++)
  800dd0:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:80 (discriminator 1)
  800dd4:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  800dd8:	0f b7 40 20          	movzx  eax,WORD PTR [rax+0x20]
  800ddc:	0f b7 c0             	movzx  eax,ax
  800ddf:	39 45 ec             	cmp    DWORD PTR [rbp-0x14],eax
  800de2:	0f 82 18 ff ff ff    	jb     800d00 <main+0x1b5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:90
                        }
                    }
                }
                    break;
  800de8:	e9 85 00 00 00       	jmp    800e72 <main+0x327>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:93

                case MULTIBOOT_FRAMEBUFFER_TYPE_RGB:
                    color = ((1 << tagfb->framebuffer_blue_mask_size) - 1) << tagfb->framebuffer_blue_field_position;
  800ded:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  800df1:	0f b6 40 25          	movzx  eax,BYTE PTR [rax+0x25]
  800df5:	0f b6 c0             	movzx  eax,al
  800df8:	ba 01 00 00 00       	mov    edx,0x1
  800dfd:	89 c1                	mov    ecx,eax
  800dff:	d3 e2                	shl    edx,cl
  800e01:	89 d0                	mov    eax,edx
  800e03:	8d 50 ff             	lea    edx,[rax-0x1]
  800e06:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  800e0a:	0f b6 40 24          	movzx  eax,BYTE PTR [rax+0x24]
  800e0e:	0f b6 c0             	movzx  eax,al
  800e11:	89 c1                	mov    ecx,eax
  800e13:	d3 e2                	shl    edx,cl
  800e15:	89 d0                	mov    eax,edx
  800e17:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:94
                    break;
  800e1a:	eb 56                	jmp    800e72 <main+0x327>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:97

                case MULTIBOOT_FRAMEBUFFER_TYPE_EGA_TEXT:
                    color = '\\' | 0x0100;
  800e1c:	c7 45 bc 5c 01 00 00 	mov    DWORD PTR [rbp-0x44],0x15c
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:98
                    break;
  800e23:	eb 4d                	jmp    800e72 <main+0x327>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:101

                default:
                    color = 0xffffffff;
  800e25:	c7 45 bc ff ff ff ff 	mov    DWORD PTR [rbp-0x44],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:102
                    break;
  800e2c:	eb 44                	jmp    800e72 <main+0x327>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:104
            }
        } else if(tag->type==MULTIBOOT_TAG_TYPE_ELF_SECTIONS){
  800e2e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  800e32:	8b 00                	mov    eax,DWORD PTR [rax]
  800e34:	83 f8 09             	cmp    eax,0x9
  800e37:	75 39                	jne    800e72 <main+0x327>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:105
            comprintf("found elf section tag.\n");
  800e39:	48 b8 1f 89 81 00 00 	movabs rax,0x81891f
  800e40:	00 00 00 
  800e43:	48 89 c7             	mov    rdi,rax
  800e46:	b8 00 00 00 00       	mov    eax,0x0
  800e4b:	48 ba ae ff 80 00 00 	movabs rdx,0x80ffae
  800e52:	00 00 00 
  800e55:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:106
            struct multiboot_tag_elf_sections* sh=tag;
  800e57:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  800e5b:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:107
            do_reloc(sh);
  800e5f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  800e63:	48 89 c7             	mov    rdi,rax
  800e66:	48 b8 c7 b6 80 00 00 	movabs rax,0x80b6c7
  800e6d:	00 00 00 
  800e70:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:45
		 tag = (struct multiboot_tag *)((u8 *)tag + ((tag->size + 7) & ~7)))
  800e72:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  800e76:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
  800e79:	83 c0 07             	add    eax,0x7
  800e7c:	89 c0                	mov    eax,eax
  800e7e:	83 e0 f8             	and    eax,0xfffffff8
  800e81:	48 01 45 f8          	add    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:44
		 tag->type != MULTIBOOT_TAG_TYPE_END;
  800e85:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  800e89:	8b 00                	mov    eax,DWORD PTR [rax]
  800e8b:	85 c0                	test   eax,eax
  800e8d:	0f 85 36 fd ff ff    	jne    800bc9 <main+0x7e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:201

			break;
		}
		}*/
	}
	tag = (struct multiboot_tag *)((multiboot_uint8_t *)tag + ((tag->size + 7) & ~7));
  800e93:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  800e97:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
  800e9a:	83 c0 07             	add    eax,0x7
  800e9d:	89 c0                	mov    eax,eax
  800e9f:	83 e0 f8             	and    eax,0xfffffff8
  800ea2:	48 01 45 f8          	add    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:202
    init_memory();
  800ea6:	b8 00 00 00 00       	mov    eax,0x0
  800eab:	48 ba 50 1e 80 00 00 	movabs rdx,0x801e50
  800eb2:	00 00 00 
  800eb5:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:203
    init_framebuffer();
  800eb7:	b8 00 00 00 00       	mov    eax,0x0
  800ebc:	48 ba 88 96 80 00 00 	movabs rdx,0x809688
  800ec3:	00 00 00 
  800ec6:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:205
	//printf("Total mbi size 0x%x\n", (unsigned)tag - addr);
	char disk_count=*(char*)0x475;
  800ec8:	b8 75 04 00 00       	mov    eax,0x475
  800ecd:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  800ed0:	88 45 db             	mov    BYTE PTR [rbp-0x25],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:207
	//printf("disk count:%d\n",disk_count);
    init_font();
  800ed3:	b8 00 00 00 00       	mov    eax,0x0
  800ed8:	48 ba 8f 97 80 00 00 	movabs rdx,0x80978f
  800edf:	00 00 00 
  800ee2:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:210
    //初始化区域
    //fill_rect(0,0,100,100,255);
    print("gamessis os loaded.\nkernel:>");
  800ee4:	48 b8 37 89 81 00 00 	movabs rax,0x818937
  800eeb:	00 00 00 
  800eee:	48 89 c7             	mov    rdi,rax
  800ef1:	48 b8 9d 9d 80 00 00 	movabs rax,0x809d9d
  800ef8:	00 00 00 
  800efb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:211
    init_int();
  800efd:	b8 00 00 00 00       	mov    eax,0x0
  800f02:	48 ba 00 00 80 00 00 	movabs rdx,0x800000
  800f09:	00 00 00 
  800f0c:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:212
    print("int loaded.\n");
  800f0e:	48 b8 54 89 81 00 00 	movabs rax,0x818954
  800f15:	00 00 00 
  800f18:	48 89 c7             	mov    rdi,rax
  800f1b:	48 b8 9d 9d 80 00 00 	movabs rax,0x809d9d
  800f22:	00 00 00 
  800f25:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:214
//    set_tss(0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000);
	init_paging();
  800f27:	b8 00 00 00 00       	mov    eax,0x0
  800f2c:	48 ba ed 17 80 00 00 	movabs rdx,0x8017ed
  800f33:	00 00 00 
  800f36:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:215
 	init_gdt();
  800f38:	b8 00 00 00 00       	mov    eax,0x0
  800f3d:	48 ba 4d 87 80 00 00 	movabs rdx,0x80874d
  800f44:	00 00 00 
  800f47:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:216
    mount_rootfs();
  800f49:	b8 00 00 00 00       	mov    eax,0x0
  800f4e:	48 ba 52 a6 80 00 00 	movabs rdx,0x80a652
  800f55:	00 00 00 
  800f58:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:217
    init_devman();
  800f5a:	b8 00 00 00 00       	mov    eax,0x0
  800f5f:	48 ba a0 37 80 00 00 	movabs rdx,0x8037a0
  800f66:	00 00 00 
  800f69:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:218
    init_proc();
  800f6b:	b8 00 00 00 00       	mov    eax,0x0
  800f70:	48 ba 5c 52 80 00 00 	movabs rdx,0x80525c
  800f77:	00 00 00 
  800f7a:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:219
    sti();
  800f7c:	fb                   	sti    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:220
    DISK1_FAT32_FS_init();
  800f7d:	b8 00 00 00 00       	mov    eax,0x0
  800f82:	48 ba 26 f7 80 00 00 	movabs rdx,0x80f726
  800f89:	00 00 00 
  800f8c:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:224

    //自带驱动
    //init_tty();
    init_kb();
  800f8e:	b8 00 00 00 00       	mov    eax,0x0
  800f93:	48 ba 08 bb 80 00 00 	movabs rdx,0x80bb08
  800f9a:	00 00 00 
  800f9d:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:228
//    init_disk();


    manage_proc_lock=0;
  800f9f:	48 b8 48 0d 81 00 00 	movabs rax,0x810d48
  800fa6:	00 00 00 
  800fa9:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:229
    if(sys_fork()==0){
  800faf:	48 b8 f4 6d 80 00 00 	movabs rax,0x806df4
  800fb6:	00 00 00 
  800fb9:	ff d0                	call   rax
  800fbb:	85 c0                	test   eax,eax
  800fbd:	75 1e                	jne    800fdd <main+0x492>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:230
        sys_execve("/mnt/test.exe",NULL);
  800fbf:	be 00 00 00 00       	mov    esi,0x0
  800fc4:	48 b8 61 89 81 00 00 	movabs rax,0x818961
  800fcb:	00 00 00 
  800fce:	48 89 c7             	mov    rdi,rax
  800fd1:	48 b8 0d 8b 80 00 00 	movabs rax,0x808b0d
  800fd8:	00 00 00 
  800fdb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:241 (discriminator 2)
//    extern device *dev_tree[];
//    blk_dev* p=dev_tree[DEVTREE_BLKDEVI];
//    mount_fs("fat16",p->par,vmalloc());
    while (1)
    {
        char c=-1;
  800fdd:	c6 45 ab ff          	mov    BYTE PTR [rbp-0x55],0xff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:242 (discriminator 2)
        sys_read(0,&c,1);
  800fe1:	48 8d 45 ab          	lea    rax,[rbp-0x55]
  800fe5:	ba 01 00 00 00       	mov    edx,0x1
  800fea:	48 89 c6             	mov    rsi,rax
  800fed:	bf 00 00 00 00       	mov    edi,0x0
  800ff2:	48 b8 35 af 80 00 00 	movabs rax,0x80af35
  800ff9:	00 00 00 
  800ffc:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:243 (discriminator 2)
        putchar(c);
  800ffe:	0f b6 45 ab          	movzx  eax,BYTE PTR [rbp-0x55]
  801002:	0f be c0             	movsx  eax,al
  801005:	89 c7                	mov    edi,eax
  801007:	48 b8 66 11 80 00 00 	movabs rax,0x801166
  80100e:	00 00 00 
  801011:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:240 (discriminator 2)
    {
  801013:	eb c8                	jmp    800fdd <main+0x492>

0000000000801015 <init_logging>:
init_logging():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:12
static unsigned char* video;
static int xpos,ypos;
/* 将整数 D 转换为字符串并保存在 BUF 中。如果 BASE 为 'd'，则 D 为十进制，如果 BASE 为 'x'，则 D 为十六进制。 */

int init_logging()
{
  801015:	f3 0f 1e fa          	endbr64 
  801019:	55                   	push   rbp
  80101a:	48 89 e5             	mov    rbp,rsp
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:13
    video=0xb8000;
  80101d:	48 b8 00 00 40 00 00 	movabs rax,0x400000
  801024:	00 00 00 
  801027:	48 c7 00 00 80 0b 00 	mov    QWORD PTR [rax],0xb8000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:14
    xpos=0;
  80102e:	48 b8 08 00 40 00 00 	movabs rax,0x400008
  801035:	00 00 00 
  801038:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:15
    ypos=0;
  80103e:	48 b8 0c 00 40 00 00 	movabs rax,0x40000c
  801045:	00 00 00 
  801048:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:16
}
  80104e:	90                   	nop
  80104f:	5d                   	pop    rbp
  801050:	c3                   	ret    

0000000000801051 <itoa>:
itoa():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:19

void itoa (char *buf, int base, int d)
{
  801051:	f3 0f 1e fa          	endbr64 
  801055:	55                   	push   rbp
  801056:	48 89 e5             	mov    rbp,rsp
  801059:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
  80105d:	89 75 c4             	mov    DWORD PTR [rbp-0x3c],esi
  801060:	89 55 c0             	mov    DWORD PTR [rbp-0x40],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:20
    char *p = buf;
  801063:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  801067:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:22
    char *p1, *p2;
    unsigned long ud = d;
  80106b:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
  80106e:	48 98                	cdqe   
  801070:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:23
    int divisor = 10;
  801074:	c7 45 dc 0a 00 00 00 	mov    DWORD PTR [rbp-0x24],0xa
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:26
 
    /* 如果指定了 %d 并且 D 是负数，在开始添上负号。 */
    if (base == 'd' && d < 0)
  80107b:	83 7d c4 64          	cmp    DWORD PTR [rbp-0x3c],0x64
  80107f:	75 27                	jne    8010a8 <itoa+0x57>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:26 (discriminator 1)
  801081:	83 7d c0 00          	cmp    DWORD PTR [rbp-0x40],0x0
  801085:	79 21                	jns    8010a8 <itoa+0x57>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:28
    {
        *p++ = '-';
  801087:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80108b:	48 8d 50 01          	lea    rdx,[rax+0x1]
  80108f:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
  801093:	c6 00 2d             	mov    BYTE PTR [rax],0x2d
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:29
        buf++;
  801096:	48 83 45 c8 01       	add    QWORD PTR [rbp-0x38],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:30
        ud = -d;
  80109b:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
  80109e:	f7 d8                	neg    eax
  8010a0:	48 98                	cdqe   
  8010a2:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  8010a6:	eb 0d                	jmp    8010b5 <itoa+0x64>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:32
    }
    else if (base == 'x')
  8010a8:	83 7d c4 78          	cmp    DWORD PTR [rbp-0x3c],0x78
  8010ac:	75 07                	jne    8010b5 <itoa+0x64>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:33
        divisor = 16;
  8010ae:	c7 45 dc 10 00 00 00 	mov    DWORD PTR [rbp-0x24],0x10
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:38
 
    /* 用 DIVISOR 去除 UD 直到 UD == 0。 */
    do
    {
        int remainder = ud % divisor;
  8010b5:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  8010b8:	48 63 c8             	movsxd rcx,eax
  8010bb:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  8010bf:	ba 00 00 00 00       	mov    edx,0x0
  8010c4:	48 f7 f1             	div    rcx
  8010c7:	48 89 d0             	mov    rax,rdx
  8010ca:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:40
 
        *p++ = (remainder < 10) ? remainder + '0' : remainder + 'a' - 10;
  8010cd:	83 7d d8 09          	cmp    DWORD PTR [rbp-0x28],0x9
  8010d1:	7f 0a                	jg     8010dd <itoa+0x8c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:40 (discriminator 1)
  8010d3:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
  8010d6:	83 c0 30             	add    eax,0x30
  8010d9:	89 c1                	mov    ecx,eax
  8010db:	eb 08                	jmp    8010e5 <itoa+0x94>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:40 (discriminator 2)
  8010dd:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
  8010e0:	83 c0 57             	add    eax,0x57
  8010e3:	89 c1                	mov    ecx,eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:40 (discriminator 4)
  8010e5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  8010e9:	48 8d 50 01          	lea    rdx,[rax+0x1]
  8010ed:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
  8010f1:	88 08                	mov    BYTE PTR [rax],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:42 (discriminator 4)
    }
    while (ud /= divisor);
  8010f3:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  8010f6:	48 63 f0             	movsxd rsi,eax
  8010f9:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  8010fd:	ba 00 00 00 00       	mov    edx,0x0
  801102:	48 f7 f6             	div    rsi
  801105:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  801109:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
  80110e:	75 a5                	jne    8010b5 <itoa+0x64>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:45
 
    /* 在字符串尾添上终结符。 */
    *p = 0;
  801110:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  801114:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:48
 
    /* 反转 BUF。 */
    p1 = buf;
  801117:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80111b:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:49
    p2 = p - 1;
  80111f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  801123:	48 83 e8 01          	sub    rax,0x1
  801127:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:50
    while (p1 < p2)
  80112b:	eb 2b                	jmp    801158 <itoa+0x107>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:52
    {
        char tmp = *p1;
  80112d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  801131:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  801134:	88 45 d7             	mov    BYTE PTR [rbp-0x29],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:53
        *p1 = *p2;
  801137:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80113b:	0f b6 10             	movzx  edx,BYTE PTR [rax]
  80113e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  801142:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:54
        *p2 = tmp;
  801144:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  801148:	0f b6 55 d7          	movzx  edx,BYTE PTR [rbp-0x29]
  80114c:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:55
        p1++;
  80114e:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:56
        p2--;
  801153:	48 83 6d e8 01       	sub    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:50
    while (p1 < p2)
  801158:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80115c:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
  801160:	72 cb                	jb     80112d <itoa+0xdc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:58
    }
}
  801162:	90                   	nop
  801163:	90                   	nop
  801164:	5d                   	pop    rbp
  801165:	c3                   	ret    

0000000000801166 <putchar>:
putchar():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:62
 
/* 在屏幕上输出字符 C 。 */
void putchar (char c)
{
  801166:	f3 0f 1e fa          	endbr64 
  80116a:	55                   	push   rbp
  80116b:	48 89 e5             	mov    rbp,rsp
  80116e:	48 83 ec 20          	sub    rsp,0x20
  801172:	89 f8                	mov    eax,edi
  801174:	88 45 ec             	mov    BYTE PTR [rbp-0x14],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:63
    char s[2]={c,'\0'};
  801177:	0f b6 45 ec          	movzx  eax,BYTE PTR [rbp-0x14]
  80117b:	88 45 fe             	mov    BYTE PTR [rbp-0x2],al
  80117e:	c6 45 ff 00          	mov    BYTE PTR [rbp-0x1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:64
    print(s);
  801182:	48 8d 45 fe          	lea    rax,[rbp-0x2]
  801186:	48 89 c7             	mov    rdi,rax
  801189:	48 b8 9d 9d 80 00 00 	movabs rax,0x809d9d
  801190:	00 00 00 
  801193:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:82
    *(video + (xpos + ypos * COLUMNS) * 2 + 1) = ATTRIBUTE;
 
    xpos++;
    if (xpos >= COLUMNS)
        goto newline;
}
  801195:	c9                   	leave  
  801196:	c3                   	ret    

0000000000801197 <printf>:
printf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:86
 
/* 格式化字符串并在屏幕上输出，就像 libc 函数 printf 一样。 */
void printf (const char *format,...)
{
  801197:	f3 0f 1e fa          	endbr64 
  80119b:	55                   	push   rbp
  80119c:	48 89 e5             	mov    rbp,rsp
  80119f:	48 81 ec 00 01 00 00 	sub    rsp,0x100
  8011a6:	48 89 bd 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdi
  8011ad:	48 89 b5 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rsi
  8011b4:	48 89 95 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdx
  8011bb:	48 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rcx
  8011c2:	4c 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],r8
  8011c9:	4c 89 8d 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],r9
  8011d0:	84 c0                	test   al,al
  8011d2:	74 20                	je     8011f4 <printf+0x5d>
  8011d4:	0f 29 45 80          	movaps XMMWORD PTR [rbp-0x80],xmm0
  8011d8:	0f 29 4d 90          	movaps XMMWORD PTR [rbp-0x70],xmm1
  8011dc:	0f 29 55 a0          	movaps XMMWORD PTR [rbp-0x60],xmm2
  8011e0:	0f 29 5d b0          	movaps XMMWORD PTR [rbp-0x50],xmm3
  8011e4:	0f 29 65 c0          	movaps XMMWORD PTR [rbp-0x40],xmm4
  8011e8:	0f 29 6d d0          	movaps XMMWORD PTR [rbp-0x30],xmm5
  8011ec:	0f 29 75 e0          	movaps XMMWORD PTR [rbp-0x20],xmm6
  8011f0:	0f 29 7d f0          	movaps XMMWORD PTR [rbp-0x10],xmm7
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:87
    if(strlen(format)>=1024)
  8011f4:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
  8011fb:	48 89 c7             	mov    rdi,rax
  8011fe:	48 b8 8f 06 81 00 00 	movabs rax,0x81068f
  801205:	00 00 00 
  801208:	ff d0                	call   rax
  80120a:	3d ff 03 00 00       	cmp    eax,0x3ff
  80120f:	0f 8f bc 02 00 00    	jg     8014d1 <printf+0x33a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:89
        return;//一次性输出不了太长
    char* tmp=(char*) kmalloc();
  801215:	b8 00 00 00 00       	mov    eax,0x0
  80121a:	48 ba d4 18 80 00 00 	movabs rdx,0x8018d4
  801221:	00 00 00 
  801224:	ff d2                	call   rdx
  801226:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:91
    va_list vargs;
    va_start(vargs,format);
  80122d:	c7 85 10 ff ff ff 08 	mov    DWORD PTR [rbp-0xf0],0x8
  801234:	00 00 00 
  801237:	c7 85 14 ff ff ff 30 	mov    DWORD PTR [rbp-0xec],0x30
  80123e:	00 00 00 
  801241:	48 8d 45 10          	lea    rax,[rbp+0x10]
  801245:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
  80124c:	48 8d 85 50 ff ff ff 	lea    rax,[rbp-0xb0]
  801253:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:92
    char *pstr=format;
  80125a:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
  801261:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:93
    for(;*pstr!='\0';pstr++){
  801268:	e9 09 02 00 00       	jmp    801476 <printf+0x2df>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:94
        if(*pstr=='%'&&*(pstr+1)!='\0'){
  80126d:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  801274:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  801277:	3c 25                	cmp    al,0x25
  801279:	0f 85 ca 01 00 00    	jne    801449 <printf+0x2b2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:94 (discriminator 1)
  80127f:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  801286:	48 83 c0 01          	add    rax,0x1
  80128a:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  80128d:	84 c0                	test   al,al
  80128f:	0f 84 b4 01 00 00    	je     801449 <printf+0x2b2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:95
            pstr++;
  801295:	48 83 85 48 ff ff ff 	add    QWORD PTR [rbp-0xb8],0x1
  80129c:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:96
            if(*pstr=='x'){
  80129d:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  8012a4:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  8012a7:	3c 78                	cmp    al,0x78
  8012a9:	75 6f                	jne    80131a <printf+0x183>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:97
                int v=va_arg(vargs,int);
  8012ab:	8b 85 10 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf0]
  8012b1:	83 f8 2f             	cmp    eax,0x2f
  8012b4:	77 23                	ja     8012d9 <printf+0x142>
  8012b6:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  8012bd:	8b 95 10 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf0]
  8012c3:	89 d2                	mov    edx,edx
  8012c5:	48 01 d0             	add    rax,rdx
  8012c8:	8b 95 10 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf0]
  8012ce:	83 c2 08             	add    edx,0x8
  8012d1:	89 95 10 ff ff ff    	mov    DWORD PTR [rbp-0xf0],edx
  8012d7:	eb 12                	jmp    8012eb <printf+0x154>
  8012d9:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  8012e0:	48 8d 50 08          	lea    rdx,[rax+0x8]
  8012e4:	48 89 95 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdx
  8012eb:	8b 00                	mov    eax,DWORD PTR [rax]
  8012ed:	89 85 2c ff ff ff    	mov    DWORD PTR [rbp-0xd4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:98
                sprint_hex(tmp,v);
  8012f3:	8b 85 2c ff ff ff    	mov    eax,DWORD PTR [rbp-0xd4]
  8012f9:	48 63 d0             	movsxd rdx,eax
  8012fc:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  801303:	48 89 d6             	mov    rsi,rdx
  801306:	48 89 c7             	mov    rdi,rax
  801309:	48 b8 b4 0a 81 00 00 	movabs rax,0x810ab4
  801310:	00 00 00 
  801313:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:96
            if(*pstr=='x'){
  801315:	e9 54 01 00 00       	jmp    80146e <printf+0x2d7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:99
            }else if(*pstr=='s'){
  80131a:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  801321:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  801324:	3c 73                	cmp    al,0x73
  801326:	75 6f                	jne    801397 <printf+0x200>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:100
                char* v=va_arg(vargs,char*);
  801328:	8b 85 10 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf0]
  80132e:	83 f8 2f             	cmp    eax,0x2f
  801331:	77 23                	ja     801356 <printf+0x1bf>
  801333:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  80133a:	8b 95 10 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf0]
  801340:	89 d2                	mov    edx,edx
  801342:	48 01 d0             	add    rax,rdx
  801345:	8b 95 10 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf0]
  80134b:	83 c2 08             	add    edx,0x8
  80134e:	89 95 10 ff ff ff    	mov    DWORD PTR [rbp-0xf0],edx
  801354:	eb 12                	jmp    801368 <printf+0x1d1>
  801356:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  80135d:	48 8d 50 08          	lea    rdx,[rax+0x8]
  801361:	48 89 95 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdx
  801368:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80136b:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:101
                sprintn(tmp,v);
  801372:	48 8b 95 30 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd0]
  801379:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  801380:	48 89 d6             	mov    rsi,rdx
  801383:	48 89 c7             	mov    rdi,rax
  801386:	48 b8 36 0b 81 00 00 	movabs rax,0x810b36
  80138d:	00 00 00 
  801390:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:96
            if(*pstr=='x'){
  801392:	e9 d7 00 00 00       	jmp    80146e <printf+0x2d7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:102
            }else if(*pstr=='d'){
  801397:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  80139e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  8013a1:	3c 64                	cmp    al,0x64
  8013a3:	75 6d                	jne    801412 <printf+0x27b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:103
                char* v=va_arg(vargs,char*);
  8013a5:	8b 85 10 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf0]
  8013ab:	83 f8 2f             	cmp    eax,0x2f
  8013ae:	77 23                	ja     8013d3 <printf+0x23c>
  8013b0:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  8013b7:	8b 95 10 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf0]
  8013bd:	89 d2                	mov    edx,edx
  8013bf:	48 01 d0             	add    rax,rdx
  8013c2:	8b 95 10 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf0]
  8013c8:	83 c2 08             	add    edx,0x8
  8013cb:	89 95 10 ff ff ff    	mov    DWORD PTR [rbp-0xf0],edx
  8013d1:	eb 12                	jmp    8013e5 <printf+0x24e>
  8013d3:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  8013da:	48 8d 50 08          	lea    rdx,[rax+0x8]
  8013de:	48 89 95 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdx
  8013e5:	48 8b 00             	mov    rax,QWORD PTR [rax]
  8013e8:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:104
                sprint_decimal(tmp,v);
  8013ef:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  8013f6:	89 c2                	mov    edx,eax
  8013f8:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  8013ff:	89 d6                	mov    esi,edx
  801401:	48 89 c7             	mov    rdi,rax
  801404:	48 b8 00 0a 81 00 00 	movabs rax,0x810a00
  80140b:	00 00 00 
  80140e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:96
            if(*pstr=='x'){
  801410:	eb 5c                	jmp    80146e <printf+0x2d7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:105
            }else if(*pstr=='c'){
  801412:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  801419:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  80141c:	3c 63                	cmp    al,0x63
  80141e:	75 02                	jne    801422 <printf+0x28b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:106
                char v=va_arg(vargs,char);
  801420:	0f 0b                	ud2    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:109
                sprintchar(tmp,v);
            }else{
                sprintchar(tmp,*pstr);
  801422:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  801429:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  80142c:	0f be d0             	movsx  edx,al
  80142f:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  801436:	89 d6                	mov    esi,edx
  801438:	48 89 c7             	mov    rdi,rax
  80143b:	48 b8 c1 09 81 00 00 	movabs rax,0x8109c1
  801442:	00 00 00 
  801445:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:96
            if(*pstr=='x'){
  801447:	eb 25                	jmp    80146e <printf+0x2d7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:112
            }
        }else{
            sprintchar(tmp,*pstr);
  801449:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  801450:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  801453:	0f be d0             	movsx  edx,al
  801456:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  80145d:	89 d6                	mov    esi,edx
  80145f:	48 89 c7             	mov    rdi,rax
  801462:	48 b8 c1 09 81 00 00 	movabs rax,0x8109c1
  801469:	00 00 00 
  80146c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:93
    for(;*pstr!='\0';pstr++){
  80146e:	48 83 85 48 ff ff ff 	add    QWORD PTR [rbp-0xb8],0x1
  801475:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:93 (discriminator 1)
  801476:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  80147d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  801480:	84 c0                	test   al,al
  801482:	0f 85 e5 fd ff ff    	jne    80126d <printf+0xd6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:116
        }
    }
    va_end(vargs);
    print(tmp);
  801488:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  80148f:	48 89 c7             	mov    rdi,rax
  801492:	48 b8 9d 9d 80 00 00 	movabs rax,0x809d9d
  801499:	00 00 00 
  80149c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:117
    comprintf(tmp);
  80149e:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  8014a5:	48 89 c7             	mov    rdi,rax
  8014a8:	b8 00 00 00 00       	mov    eax,0x0
  8014ad:	48 ba ae ff 80 00 00 	movabs rdx,0x80ffae
  8014b4:	00 00 00 
  8014b7:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:118
    kmfree(tmp);
  8014b9:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  8014c0:	48 89 c7             	mov    rdi,rax
  8014c3:	48 b8 e0 1b 80 00 00 	movabs rax,0x801be0
  8014ca:	00 00 00 
  8014cd:	ff d0                	call   rax
  8014cf:	eb 01                	jmp    8014d2 <printf+0x33b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:88
        return;//一次性输出不了太长
  8014d1:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:160
//                putchar (*((int *) arg++));
//                break;
//            }
//        }
//    }
}
  8014d2:	c9                   	leave  
  8014d3:	c3                   	ret    

00000000008014d4 <mmap>:
mmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:27
//以kb为单位
int high_mem_base=1024;
int mmap_t_i=0;

stat_t mmap(addr_t pa,addr_t la,u32 attr)
{
  8014d4:	f3 0f 1e fa          	endbr64 
  8014d8:	55                   	push   rbp
  8014d9:	48 89 e5             	mov    rbp,rsp
  8014dc:	48 83 ec 20          	sub    rsp,0x20
  8014e0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  8014e4:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  8014e8:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:28
    return smmap(pa,la,attr,current->pml4);
  8014eb:	48 b8 48 85 40 00 00 	movabs rax,0x408548
  8014f2:	00 00 00 
  8014f5:	48 8b 00             	mov    rax,QWORD PTR [rax]
  8014f8:	48 8b 88 c0 00 00 00 	mov    rcx,QWORD PTR [rax+0xc0]
  8014ff:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
  801502:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  801506:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80150a:	48 89 c7             	mov    rdi,rax
  80150d:	48 b8 1b 15 80 00 00 	movabs rax,0x80151b
  801514:	00 00 00 
  801517:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:58
    pt=(page_item*)((addr_t)pt & ~0xff);

    //在pt中找到la指向的page
    pt[la % PDE_SIZE / PAGE_SIZE]=pa|attr;//映射
    return NORMAL;*/
}
  801519:	c9                   	leave  
  80151a:	c3                   	ret    

000000000080151b <smmap>:
smmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:61

stat_t smmap(addr_t pa,addr_t la,u32 attr,page_item* pml4p)
{
  80151b:	f3 0f 1e fa          	endbr64 
  80151f:	55                   	push   rbp
  801520:	48 89 e5             	mov    rbp,rsp
  801523:	48 83 ec 40          	sub    rsp,0x40
  801527:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  80152b:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
  80152f:	89 55 cc             	mov    DWORD PTR [rbp-0x34],edx
  801532:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:64
    //从pml4中找到la所属的pml4项目，即属于第几个512GB
    //canonical 高地址判断
    if(la>0x7ffffffffffful){
  801536:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffff
  80153d:	7f 00 00 
  801540:	48 39 45 d0          	cmp    QWORD PTR [rbp-0x30],rax
  801544:	76 0e                	jbe    801554 <smmap+0x39>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:65
        la&=~0xffff000000000000ul;
  801546:	48 b8 ff ff ff ff ff 	movabs rax,0xffffffffffff
  80154d:	ff 00 00 
  801550:	48 21 45 d0          	and    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:67
    }
    page_item *pdptp= (page_item *) (pml4p[la / PML4E_SIZE]);//指向的pdpt表
  801554:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  801558:	48 c1 e8 27          	shr    rax,0x27
  80155c:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
  801563:	00 
  801564:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  801568:	48 01 d0             	add    rax,rdx
  80156b:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80156e:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:68
    int pml4i=la / PML4E_SIZE;
  801572:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  801576:	48 c1 e8 27          	shr    rax,0x27
  80157a:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:69
    if(!((unsigned long long)pdptp&PAGE_PRESENT))
  80157d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  801581:	83 e0 01             	and    eax,0x1
  801584:	48 85 c0             	test   rax,rax
  801587:	75 68                	jne    8015f1 <smmap+0xd6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:71
    {
        pdptp=(page_item*) kmalloc();
  801589:	b8 00 00 00 00       	mov    eax,0x0
  80158e:	48 ba d4 18 80 00 00 	movabs rdx,0x8018d4
  801595:	00 00 00 
  801598:	ff d2                	call   rdx
  80159a:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:72
        memset(pdptp,0,4096);
  80159e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  8015a2:	ba 00 10 00 00       	mov    edx,0x1000
  8015a7:	be 00 00 00 00       	mov    esi,0x0
  8015ac:	48 89 c7             	mov    rdi,rax
  8015af:	48 b8 21 04 81 00 00 	movabs rax,0x810421
  8015b6:	00 00 00 
  8015b9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:74
        //这里使用了狡猾的技巧：kmalloc的内存-KNL_BASE直接就是实际的物理地址
        pml4[pml4i]=((addr_t)pdptp&~KNL_BASE)|attr;
  8015bb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  8015bf:	48 ba ff ff ff ff ff 	movabs rdx,0x7fffffffffff
  8015c6:	7f 00 00 
  8015c9:	48 21 d0             	and    rax,rdx
  8015cc:	48 89 c6             	mov    rsi,rax
  8015cf:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
  8015d2:	48 b8 60 0d 81 00 00 	movabs rax,0x810d60
  8015d9:	00 00 00 
  8015dc:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  8015df:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  8015e2:	48 98                	cdqe   
  8015e4:	48 c1 e0 03          	shl    rax,0x3
  8015e8:	48 01 c8             	add    rax,rcx
  8015eb:	48 09 f2             	or     rdx,rsi
  8015ee:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:76
    }
    pdptp=(page_item*)(((addr_t)pdptp&~0xff)|KNL_BASE);
  8015f1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  8015f5:	48 ba 00 ff ff ff ff 	movabs rdx,0x7fffffffff00
  8015fc:	7f 00 00 
  8015ff:	48 21 c2             	and    rdx,rax
  801602:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
  801609:	80 ff ff 
  80160c:	48 09 d0             	or     rax,rdx
  80160f:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:79

    //在这个512GB（一张pdpt表）中找到la所属的pdpt项目，找到指向的pd
    int pdpti=la%PML4E_SIZE/PDPTE_SIZE;
  801613:	48 b8 ff ff ff ff 7f 	movabs rax,0x7fffffffff
  80161a:	00 00 00 
  80161d:	48 23 45 d0          	and    rax,QWORD PTR [rbp-0x30]
  801621:	48 c1 e8 1e          	shr    rax,0x1e
  801625:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:80
    page_item* pdp= (page_item *) pdptp[pdpti];//指向的pd
  801628:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  80162b:	48 98                	cdqe   
  80162d:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
  801634:	00 
  801635:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  801639:	48 01 d0             	add    rax,rdx
  80163c:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80163f:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:82
    //检查pdptp是否被占用
    if(!((unsigned long long)pdp&PAGE_PRESENT))
  801643:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  801647:	83 e0 01             	and    eax,0x1
  80164a:	48 85 c0             	test   rax,rax
  80164d:	75 63                	jne    8016b2 <smmap+0x197>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:84
    {
        pdp=(page_item*) kmalloc();
  80164f:	b8 00 00 00 00       	mov    eax,0x0
  801654:	48 ba d4 18 80 00 00 	movabs rdx,0x8018d4
  80165b:	00 00 00 
  80165e:	ff d2                	call   rdx
  801660:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:85
        memset(pdp,0,4096);
  801664:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  801668:	ba 00 10 00 00       	mov    edx,0x1000
  80166d:	be 00 00 00 00       	mov    esi,0x0
  801672:	48 89 c7             	mov    rdi,rax
  801675:	48 b8 21 04 81 00 00 	movabs rax,0x810421
  80167c:	00 00 00 
  80167f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:86
        pdptp[pdpti]=((addr_t)pdp&~KNL_BASE)|attr;
  801681:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  801685:	48 ba ff ff ff ff ff 	movabs rdx,0x7fffffffffff
  80168c:	7f 00 00 
  80168f:	48 21 d0             	and    rax,rdx
  801692:	48 89 c1             	mov    rcx,rax
  801695:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
  801698:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  80169b:	48 98                	cdqe   
  80169d:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
  8016a4:	00 
  8016a5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  8016a9:	48 01 f0             	add    rax,rsi
  8016ac:	48 09 ca             	or     rdx,rcx
  8016af:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:88
    }
    pdp=(page_item*)(((addr_t)(pdp)&~0xff)|KNL_BASE);
  8016b2:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  8016b6:	48 ba 00 ff ff ff ff 	movabs rdx,0x7fffffffff00
  8016bd:	7f 00 00 
  8016c0:	48 21 c2             	and    rdx,rax
  8016c3:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
  8016ca:	80 ff ff 
  8016cd:	48 09 d0             	or     rax,rdx
  8016d0:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:91

    //在pd中找到la指向的pt
    page_item* pt=(page_item*)pdp[la % PDPTE_SIZE / PDE_SIZE];
  8016d4:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  8016d8:	25 ff ff ff 3f       	and    eax,0x3fffffff
  8016dd:	48 c1 e8 15          	shr    rax,0x15
  8016e1:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
  8016e8:	00 
  8016e9:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  8016ed:	48 01 d0             	add    rax,rdx
  8016f0:	48 8b 00             	mov    rax,QWORD PTR [rax]
  8016f3:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:92
    if(!((unsigned long long)pt & PAGE_PRESENT))
  8016f7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  8016fb:	83 e0 01             	and    eax,0x1
  8016fe:	48 85 c0             	test   rax,rax
  801701:	75 6b                	jne    80176e <smmap+0x253>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:94
    {
        pt=(page_item*) kmalloc();
  801703:	b8 00 00 00 00       	mov    eax,0x0
  801708:	48 ba d4 18 80 00 00 	movabs rdx,0x8018d4
  80170f:	00 00 00 
  801712:	ff d2                	call   rdx
  801714:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:95
        memset(pt,0,4096);
  801718:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80171c:	ba 00 10 00 00       	mov    edx,0x1000
  801721:	be 00 00 00 00       	mov    esi,0x0
  801726:	48 89 c7             	mov    rdi,rax
  801729:	48 b8 21 04 81 00 00 	movabs rax,0x810421
  801730:	00 00 00 
  801733:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:96
        pdp[la%PDPTE_SIZE/PDE_SIZE]= ((addr_t)pt&~KNL_BASE) | attr;
  801735:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  801739:	48 ba ff ff ff ff ff 	movabs rdx,0x7fffffffffff
  801740:	7f 00 00 
  801743:	48 21 d0             	and    rax,rdx
  801746:	48 89 c1             	mov    rcx,rax
  801749:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
  80174c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  801750:	25 ff ff ff 3f       	and    eax,0x3fffffff
  801755:	48 c1 e8 15          	shr    rax,0x15
  801759:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
  801760:	00 
  801761:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  801765:	48 01 f0             	add    rax,rsi
  801768:	48 09 ca             	or     rdx,rcx
  80176b:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:98
    }
    pt=(page_item*)(((addr_t)pt & ~0xff)|KNL_BASE);
  80176e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  801772:	48 ba 00 ff ff ff ff 	movabs rdx,0x7fffffffff00
  801779:	7f 00 00 
  80177c:	48 21 c2             	and    rdx,rax
  80177f:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
  801786:	80 ff ff 
  801789:	48 09 d0             	or     rax,rdx
  80178c:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:101

    //在pt中找到la指向的page
    pt[la % PDE_SIZE / PAGE_4K_SIZE]=pa|attr;//映射
  801790:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
  801793:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  801797:	81 e2 ff ff 1f 00    	and    edx,0x1fffff
  80179d:	48 c1 ea 0c          	shr    rdx,0xc
  8017a1:	48 8d 0c d5 00 00 00 	lea    rcx,[rdx*8+0x0]
  8017a8:	00 
  8017a9:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  8017ad:	48 01 ca             	add    rdx,rcx
  8017b0:	48 0b 45 d8          	or     rax,QWORD PTR [rbp-0x28]
  8017b4:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:102
    return NORMAL;
  8017b7:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:103
}
  8017bc:	c9                   	leave  
  8017bd:	c3                   	ret    

00000000008017be <mdemap>:
mdemap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:106

stat_t mdemap(addr_t la)
{
  8017be:	f3 0f 1e fa          	endbr64 
  8017c2:	55                   	push   rbp
  8017c3:	48 89 e5             	mov    rbp,rsp
  8017c6:	48 83 ec 10          	sub    rsp,0x10
  8017ca:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:107
    return mmap(0l,la,0);
  8017ce:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  8017d2:	ba 00 00 00 00       	mov    edx,0x0
  8017d7:	48 89 c6             	mov    rsi,rax
  8017da:	bf 00 00 00 00       	mov    edi,0x0
  8017df:	48 b8 d4 14 80 00 00 	movabs rax,0x8014d4
  8017e6:	00 00 00 
  8017e9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:108
}
  8017eb:	c9                   	leave  
  8017ec:	c3                   	ret    

00000000008017ed <init_paging>:
init_paging():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:110
int init_paging()
{
  8017ed:	f3 0f 1e fa          	endbr64 
  8017f1:	55                   	push   rbp
  8017f2:	48 89 e5             	mov    rbp,rsp
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:144
    //设置第一项pdpte，也就是内核空间
//    set_1gb_pdpt(pdpt,0,PAGE_RWX);//设置PDPT0x40000000ul
//    set_page_item(pdpt+1,PD_ADDR,PAGE_PRESENT|PAGE_FOR_ALL|PAGE_RWX);

    #endif
}
  8017f5:	90                   	nop
  8017f6:	5d                   	pop    rbp
  8017f7:	c3                   	ret    

00000000008017f8 <set_high_mem_base>:
set_high_mem_base():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:146
void set_high_mem_base(int base)
{
  8017f8:	f3 0f 1e fa          	endbr64 
  8017fc:	55                   	push   rbp
  8017fd:	48 89 e5             	mov    rbp,rsp
  801800:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:147
    high_mem_base=base;
  801803:	48 ba 88 0d 81 00 00 	movabs rdx,0x810d88
  80180a:	00 00 00 
  80180d:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  801810:	89 02                	mov    DWORD PTR [rdx],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:148
}
  801812:	90                   	nop
  801813:	5d                   	pop    rbp
  801814:	c3                   	ret    

0000000000801815 <set_mem_area>:
set_mem_area():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:150
void set_mem_area(unsigned long base, unsigned long len, unsigned long type)
{
  801815:	f3 0f 1e fa          	endbr64 
  801819:	55                   	push   rbp
  80181a:	48 89 e5             	mov    rbp,rsp
  80181d:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  801821:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  801825:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:151
    mmap_struct[mmap_t_i].base=base;
  801829:	48 b8 20 02 40 00 00 	movabs rax,0x400220
  801830:	00 00 00 
  801833:	8b 00                	mov    eax,DWORD PTR [rax]
  801835:	48 b9 40 00 40 00 00 	movabs rcx,0x400040
  80183c:	00 00 00 
  80183f:	48 63 d0             	movsxd rdx,eax
  801842:	48 89 d0             	mov    rax,rdx
  801845:	48 01 c0             	add    rax,rax
  801848:	48 01 d0             	add    rax,rdx
  80184b:	48 c1 e0 03          	shl    rax,0x3
  80184f:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
  801853:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  801857:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:152
    mmap_struct[mmap_t_i].len=len;
  80185a:	48 b8 20 02 40 00 00 	movabs rax,0x400220
  801861:	00 00 00 
  801864:	8b 00                	mov    eax,DWORD PTR [rax]
  801866:	48 b9 40 00 40 00 00 	movabs rcx,0x400040
  80186d:	00 00 00 
  801870:	48 63 d0             	movsxd rdx,eax
  801873:	48 89 d0             	mov    rax,rdx
  801876:	48 01 c0             	add    rax,rax
  801879:	48 01 d0             	add    rax,rdx
  80187c:	48 c1 e0 03          	shl    rax,0x3
  801880:	48 01 c8             	add    rax,rcx
  801883:	48 8d 50 08          	lea    rdx,[rax+0x8]
  801887:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80188b:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:153
    mmap_struct[mmap_t_i++].type=type;
  80188e:	48 b8 20 02 40 00 00 	movabs rax,0x400220
  801895:	00 00 00 
  801898:	8b 00                	mov    eax,DWORD PTR [rax]
  80189a:	8d 50 01             	lea    edx,[rax+0x1]
  80189d:	48 b9 20 02 40 00 00 	movabs rcx,0x400220
  8018a4:	00 00 00 
  8018a7:	89 11                	mov    DWORD PTR [rcx],edx
  8018a9:	48 b9 40 00 40 00 00 	movabs rcx,0x400040
  8018b0:	00 00 00 
  8018b3:	48 63 d0             	movsxd rdx,eax
  8018b6:	48 89 d0             	mov    rax,rdx
  8018b9:	48 01 c0             	add    rax,rax
  8018bc:	48 01 d0             	add    rax,rdx
  8018bf:	48 c1 e0 03          	shl    rax,0x3
  8018c3:	48 01 c8             	add    rax,rcx
  8018c6:	48 8d 50 10          	lea    rdx,[rax+0x10]
  8018ca:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  8018ce:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:154
}
  8018d1:	90                   	nop
  8018d2:	5d                   	pop    rbp
  8018d3:	c3                   	ret    

00000000008018d4 <kmalloc>:
kmalloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:156
addr_t kmalloc()
{
  8018d4:	f3 0f 1e fa          	endbr64 
  8018d8:	55                   	push   rbp
  8018d9:	48 89 e5             	mov    rbp,rsp
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:157
    for(int i=0;i<VMALLOC_PGN/32;i++)
  8018dc:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
  8018e3:	e9 b6 00 00 00       	jmp    80199e <kmalloc+0xca>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:159
    {
        for(int j=0;j<32;j++)
  8018e8:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
  8018ef:	e9 9c 00 00 00       	jmp    801990 <kmalloc+0xbc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:161
        {
            if(!(vmalloc_map[i]&(1<<j)))
  8018f4:	48 b8 78 0d 81 00 00 	movabs rax,0x810d78
  8018fb:	00 00 00 
  8018fe:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  801901:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  801904:	48 98                	cdqe   
  801906:	48 c1 e0 02          	shl    rax,0x2
  80190a:	48 01 d0             	add    rax,rdx
  80190d:	8b 10                	mov    edx,DWORD PTR [rax]
  80190f:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  801912:	be 01 00 00 00       	mov    esi,0x1
  801917:	89 c1                	mov    ecx,eax
  801919:	d3 e6                	shl    esi,cl
  80191b:	89 f0                	mov    eax,esi
  80191d:	21 d0                	and    eax,edx
  80191f:	85 c0                	test   eax,eax
  801921:	75 69                	jne    80198c <kmalloc+0xb8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:163
            {
                vmalloc_map[i]|=(1<<j);
  801923:	48 b8 78 0d 81 00 00 	movabs rax,0x810d78
  80192a:	00 00 00 
  80192d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  801930:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  801933:	48 98                	cdqe   
  801935:	48 c1 e0 02          	shl    rax,0x2
  801939:	48 01 d0             	add    rax,rdx
  80193c:	8b 10                	mov    edx,DWORD PTR [rax]
  80193e:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  801941:	be 01 00 00 00       	mov    esi,0x1
  801946:	89 c1                	mov    ecx,eax
  801948:	d3 e6                	shl    esi,cl
  80194a:	89 f0                	mov    eax,esi
  80194c:	89 c6                	mov    esi,eax
  80194e:	48 b8 78 0d 81 00 00 	movabs rax,0x810d78
  801955:	00 00 00 
  801958:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  80195b:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80195e:	48 98                	cdqe   
  801960:	48 c1 e0 02          	shl    rax,0x2
  801964:	48 01 c8             	add    rax,rcx
  801967:	09 f2                	or     edx,esi
  801969:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:164
                return VMALLOC_BASE+(i*32+j)*0x1000;
  80196b:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80196e:	c1 e0 05             	shl    eax,0x5
  801971:	89 c2                	mov    edx,eax
  801973:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  801976:	01 d0                	add    eax,edx
  801978:	c1 e0 0c             	shl    eax,0xc
  80197b:	48 98                	cdqe   
  80197d:	48 ba 00 00 00 02 00 	movabs rdx,0xffff800002000000
  801984:	80 ff ff 
  801987:	48 01 d0             	add    rax,rdx
  80198a:	eb 1c                	jmp    8019a8 <kmalloc+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:159 (discriminator 2)
        for(int j=0;j<32;j++)
  80198c:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:159 (discriminator 1)
  801990:	83 7d f8 1f          	cmp    DWORD PTR [rbp-0x8],0x1f
  801994:	0f 8e 5a ff ff ff    	jle    8018f4 <kmalloc+0x20>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:157 (discriminator 2)
    for(int i=0;i<VMALLOC_PGN/32;i++)
  80199a:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:157 (discriminator 1)
  80199e:	83 7d fc 7f          	cmp    DWORD PTR [rbp-0x4],0x7f
  8019a2:	0f 8e 40 ff ff ff    	jle    8018e8 <kmalloc+0x14>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:168
            }
        }
    }
}
  8019a8:	5d                   	pop    rbp
  8019a9:	c3                   	ret    

00000000008019aa <kmallocat>:
kmallocat():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:170
addr_t kmallocat(addr_t addr,int pgc)
{
  8019aa:	f3 0f 1e fa          	endbr64 
  8019ae:	55                   	push   rbp
  8019af:	48 89 e5             	mov    rbp,rsp
  8019b2:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  8019b6:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:171
    int pi=(addr-VMALLOC_BASE)/PAGE_4K_SIZE;
  8019b9:	48 ba 00 00 00 fe ff 	movabs rdx,0x7ffffe000000
  8019c0:	7f 00 00 
  8019c3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  8019c7:	48 01 d0             	add    rax,rdx
  8019ca:	48 c1 e8 0c          	shr    rax,0xc
  8019ce:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:172
    if(addr==0){
  8019d1:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
  8019d6:	0f 85 2a 01 00 00    	jne    801b06 <kmallocat+0x15c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:173
        int l=0,p=0;
  8019dc:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
  8019e3:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:174
        for(int i=0;i<kmalloc_pgc;i++){
  8019ea:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
  8019f1:	eb 5e                	jmp    801a51 <kmallocat+0xa7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:175
            if(!(vmalloc_map[i/32]&(1u<<(i%32)))){
  8019f3:	48 b8 78 0d 81 00 00 	movabs rax,0x810d78
  8019fa:	00 00 00 
  8019fd:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  801a00:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  801a03:	8d 50 1f             	lea    edx,[rax+0x1f]
  801a06:	85 c0                	test   eax,eax
  801a08:	0f 48 c2             	cmovs  eax,edx
  801a0b:	c1 f8 05             	sar    eax,0x5
  801a0e:	48 98                	cdqe   
  801a10:	48 c1 e0 02          	shl    rax,0x2
  801a14:	48 01 c8             	add    rax,rcx
  801a17:	8b 10                	mov    edx,DWORD PTR [rax]
  801a19:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  801a1c:	83 e0 1f             	and    eax,0x1f
  801a1f:	89 c1                	mov    ecx,eax
  801a21:	d3 ea                	shr    edx,cl
  801a23:	89 d0                	mov    eax,edx
  801a25:	83 e0 01             	and    eax,0x1
  801a28:	85 c0                	test   eax,eax
  801a2a:	75 12                	jne    801a3e <kmallocat+0x94>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:176
                if(l==0)
  801a2c:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
  801a30:	75 06                	jne    801a38 <kmallocat+0x8e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:177
                    p=i;//开头空页
  801a32:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  801a35:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:178
                l++;
  801a38:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
  801a3c:	eb 07                	jmp    801a45 <kmallocat+0x9b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:180
            } else
                l=0;
  801a3e:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:181
            if(l==pgc)break;
  801a45:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  801a48:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
  801a4b:	74 17                	je     801a64 <kmallocat+0xba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:174 (discriminator 2)
        for(int i=0;i<kmalloc_pgc;i++){
  801a4d:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:174 (discriminator 1)
  801a51:	48 b8 84 0d 81 00 00 	movabs rax,0x810d84
  801a58:	00 00 00 
  801a5b:	8b 00                	mov    eax,DWORD PTR [rax]
  801a5d:	39 45 f4             	cmp    DWORD PTR [rbp-0xc],eax
  801a60:	7c 91                	jl     8019f3 <kmallocat+0x49>
  801a62:	eb 01                	jmp    801a65 <kmallocat+0xbb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:181
            if(l==pgc)break;
  801a64:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:183
        }
        if(l<pgc)return -1;
  801a65:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  801a68:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
  801a6b:	7d 0c                	jge    801a79 <kmallocat+0xcf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:183 (discriminator 1)
  801a6d:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
  801a74:	e9 65 01 00 00       	jmp    801bde <kmallocat+0x234>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:185
        //开始占用
        for(int i=0;i<pgc;i++){
  801a79:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [rbp-0x10],0x0
  801a80:	eb 62                	jmp    801ae4 <kmallocat+0x13a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:186 (discriminator 3)
            vmalloc_map[(p+i)/32]|=1u<<((p+i)%32);
  801a82:	48 b8 78 0d 81 00 00 	movabs rax,0x810d78
  801a89:	00 00 00 
  801a8c:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  801a8f:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
  801a92:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  801a95:	01 d0                	add    eax,edx
  801a97:	8d 50 1f             	lea    edx,[rax+0x1f]
  801a9a:	85 c0                	test   eax,eax
  801a9c:	0f 48 c2             	cmovs  eax,edx
  801a9f:	c1 f8 05             	sar    eax,0x5
  801aa2:	48 63 d0             	movsxd rdx,eax
  801aa5:	48 c1 e2 02          	shl    rdx,0x2
  801aa9:	48 01 ca             	add    rdx,rcx
  801aac:	8b 32                	mov    esi,DWORD PTR [rdx]
  801aae:	8b 4d f8             	mov    ecx,DWORD PTR [rbp-0x8]
  801ab1:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
  801ab4:	01 ca                	add    edx,ecx
  801ab6:	83 e2 1f             	and    edx,0x1f
  801ab9:	bf 01 00 00 00       	mov    edi,0x1
  801abe:	89 d1                	mov    ecx,edx
  801ac0:	d3 e7                	shl    edi,cl
  801ac2:	89 f9                	mov    ecx,edi
  801ac4:	48 ba 78 0d 81 00 00 	movabs rdx,0x810d78
  801acb:	00 00 00 
  801ace:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
  801ad1:	48 98                	cdqe   
  801ad3:	48 c1 e0 02          	shl    rax,0x2
  801ad7:	48 01 d0             	add    rax,rdx
  801ada:	09 ce                	or     esi,ecx
  801adc:	89 f2                	mov    edx,esi
  801ade:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:185 (discriminator 3)
        for(int i=0;i<pgc;i++){
  801ae0:	83 45 f0 01          	add    DWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:185 (discriminator 1)
  801ae4:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  801ae7:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
  801aea:	7c 96                	jl     801a82 <kmallocat+0xd8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:188
        }
        return VMALLOC_BASE+PAGE_4K_SIZE*p;
  801aec:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  801aef:	c1 e0 0c             	shl    eax,0xc
  801af2:	48 98                	cdqe   
  801af4:	48 ba 00 00 00 02 00 	movabs rdx,0xffff800002000000
  801afb:	80 ff ff 
  801afe:	48 01 d0             	add    rax,rdx
  801b01:	e9 d8 00 00 00       	jmp    801bde <kmallocat+0x234>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:190
    }
    for(int i=0;i<pgc;i++){
  801b06:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
  801b0d:	eb 54                	jmp    801b63 <kmallocat+0x1b9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:191
        if(vmalloc_map[(pi+i)/32]&(1<<((pi+i)%32)))
  801b0f:	48 b8 78 0d 81 00 00 	movabs rax,0x810d78
  801b16:	00 00 00 
  801b19:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  801b1c:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
  801b1f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  801b22:	01 d0                	add    eax,edx
  801b24:	8d 50 1f             	lea    edx,[rax+0x1f]
  801b27:	85 c0                	test   eax,eax
  801b29:	0f 48 c2             	cmovs  eax,edx
  801b2c:	c1 f8 05             	sar    eax,0x5
  801b2f:	48 98                	cdqe   
  801b31:	48 c1 e0 02          	shl    rax,0x2
  801b35:	48 01 c8             	add    rax,rcx
  801b38:	8b 10                	mov    edx,DWORD PTR [rax]
  801b3a:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
  801b3d:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  801b40:	01 c8                	add    eax,ecx
  801b42:	83 e0 1f             	and    eax,0x1f
  801b45:	be 01 00 00 00       	mov    esi,0x1
  801b4a:	89 c1                	mov    ecx,eax
  801b4c:	d3 e6                	shl    esi,cl
  801b4e:	89 f0                	mov    eax,esi
  801b50:	21 d0                	and    eax,edx
  801b52:	85 c0                	test   eax,eax
  801b54:	74 09                	je     801b5f <kmallocat+0x1b5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:192
            return -1;
  801b56:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
  801b5d:	eb 7f                	jmp    801bde <kmallocat+0x234>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:190 (discriminator 2)
    for(int i=0;i<pgc;i++){
  801b5f:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:190 (discriminator 1)
  801b63:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  801b66:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
  801b69:	7c a4                	jl     801b0f <kmallocat+0x165>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:195
    }
    //
    for(int i=0;i<pgc;i++){
  801b6b:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
  801b72:	eb 5e                	jmp    801bd2 <kmallocat+0x228>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:196 (discriminator 3)
        vmalloc_map[(pi+i)]|=(1<<((pi+i)%32));
  801b74:	48 b8 78 0d 81 00 00 	movabs rax,0x810d78
  801b7b:	00 00 00 
  801b7e:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  801b81:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
  801b84:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
  801b87:	01 c8                	add    eax,ecx
  801b89:	48 98                	cdqe   
  801b8b:	48 c1 e0 02          	shl    rax,0x2
  801b8f:	48 01 d0             	add    rax,rdx
  801b92:	8b 10                	mov    edx,DWORD PTR [rax]
  801b94:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
  801b97:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
  801b9a:	01 c8                	add    eax,ecx
  801b9c:	83 e0 1f             	and    eax,0x1f
  801b9f:	be 01 00 00 00       	mov    esi,0x1
  801ba4:	89 c1                	mov    ecx,eax
  801ba6:	d3 e6                	shl    esi,cl
  801ba8:	89 f0                	mov    eax,esi
  801baa:	89 c7                	mov    edi,eax
  801bac:	48 b8 78 0d 81 00 00 	movabs rax,0x810d78
  801bb3:	00 00 00 
  801bb6:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  801bb9:	8b 75 e4             	mov    esi,DWORD PTR [rbp-0x1c]
  801bbc:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
  801bbf:	01 f0                	add    eax,esi
  801bc1:	48 98                	cdqe   
  801bc3:	48 c1 e0 02          	shl    rax,0x2
  801bc7:	48 01 c8             	add    rax,rcx
  801bca:	09 fa                	or     edx,edi
  801bcc:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:195 (discriminator 3)
    for(int i=0;i<pgc;i++){
  801bce:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:195 (discriminator 1)
  801bd2:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
  801bd5:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
  801bd8:	7c 9a                	jl     801b74 <kmallocat+0x1ca>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:198
    }
    return addr;
  801bda:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:200

}
  801bde:	5d                   	pop    rbp
  801bdf:	c3                   	ret    

0000000000801be0 <kmfree>:
kmfree():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:203

int kmfree(addr_t ptr)
{
  801be0:	f3 0f 1e fa          	endbr64 
  801be4:	55                   	push   rbp
  801be5:	48 89 e5             	mov    rbp,rsp
  801be8:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:204
    int num=ptr/PAGE_SIZE;
  801bec:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  801bf0:	48 c1 e8 0c          	shr    rax,0xc
  801bf4:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:205
    int n=num/32;
  801bf7:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  801bfa:	8d 50 1f             	lea    edx,[rax+0x1f]
  801bfd:	85 c0                	test   eax,eax
  801bff:	0f 48 c2             	cmovs  eax,edx
  801c02:	c1 f8 05             	sar    eax,0x5
  801c05:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:206
    int r=num%32;
  801c08:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  801c0b:	99                   	cdq    
  801c0c:	c1 ea 1b             	shr    edx,0x1b
  801c0f:	01 d0                	add    eax,edx
  801c11:	83 e0 1f             	and    eax,0x1f
  801c14:	29 d0                	sub    eax,edx
  801c16:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:207
    vmalloc_map[n]=vmalloc_map[n]&~(unsigned int)(1<<r);
  801c19:	48 b8 78 0d 81 00 00 	movabs rax,0x810d78
  801c20:	00 00 00 
  801c23:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  801c26:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  801c29:	48 98                	cdqe   
  801c2b:	48 c1 e0 02          	shl    rax,0x2
  801c2f:	48 01 d0             	add    rax,rdx
  801c32:	8b 10                	mov    edx,DWORD PTR [rax]
  801c34:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  801c37:	be 01 00 00 00       	mov    esi,0x1
  801c3c:	89 c1                	mov    ecx,eax
  801c3e:	d3 e6                	shl    esi,cl
  801c40:	89 f0                	mov    eax,esi
  801c42:	f7 d0                	not    eax
  801c44:	89 c6                	mov    esi,eax
  801c46:	48 b8 78 0d 81 00 00 	movabs rax,0x810d78
  801c4d:	00 00 00 
  801c50:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  801c53:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  801c56:	48 98                	cdqe   
  801c58:	48 c1 e0 02          	shl    rax,0x2
  801c5c:	48 01 c8             	add    rax,rcx
  801c5f:	21 f2                	and    edx,esi
  801c61:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:208
}
  801c63:	90                   	nop
  801c64:	5d                   	pop    rbp
  801c65:	c3                   	ret    

0000000000801c66 <page_err>:
page_err():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:209
void page_err(){
  801c66:	f3 0f 1e fa          	endbr64 
  801c6a:	55                   	push   rbp
  801c6b:	48 89 e5             	mov    rbp,rsp
  801c6e:	41 54                	push   r12
  801c70:	53                   	push   rbx
  801c71:	48 83 ec 20          	sub    rsp,0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:210
    asm("cli");
  801c75:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:211
    printf("page err\n");
  801c76:	48 b8 70 89 81 00 00 	movabs rax,0x818970
  801c7d:	00 00 00 
  801c80:	48 89 c7             	mov    rdi,rax
  801c83:	b8 00 00 00 00       	mov    eax,0x0
  801c88:	48 ba 97 11 80 00 00 	movabs rdx,0x801197
  801c8f:	00 00 00 
  801c92:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:212
    unsigned long err_code=0,l_addr=0;
  801c94:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
  801c9b:	00 
  801c9c:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
  801ca3:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:213
    asm volatile("mov 0(%%rbp),%0":"=r"(err_code));
  801ca4:	48 8b 45 00          	mov    rax,QWORD PTR [rbp+0x0]
  801ca8:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:214
    asm volatile("mov %%cr2,%0":"=r"(l_addr));//试图访问的地址
  801cac:	0f 20 d0             	mov    rax,cr2
  801caf:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:215
    int p=err_code&1;
  801cb3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  801cb7:	83 e0 01             	and    eax,0x1
  801cba:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:217

    if(!p)
  801cbd:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
  801cc1:	75 5c                	jne    801d1f <page_err+0xb9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:224
        //accessing non-existent page
        //检查地址合法性
        if(l_addr>=MEM_END)
            ;
        //在进程的页表中申请新页
        smmap(get_phyaddr(req_a_page()),l_addr&~0xfff,PAGE_PRESENT|PAGE_RWX|PAGE_FOR_ALL,current->pml4);
  801cc3:	48 b8 48 85 40 00 00 	movabs rax,0x408548
  801cca:	00 00 00 
  801ccd:	48 8b 00             	mov    rax,QWORD PTR [rax]
  801cd0:	48 8b 98 c0 00 00 00 	mov    rbx,QWORD PTR [rax+0xc0]
  801cd7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  801cdb:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
  801ce1:	49 89 c4             	mov    r12,rax
  801ce4:	b8 00 00 00 00       	mov    eax,0x0
  801ce9:	48 ba 49 21 80 00 00 	movabs rdx,0x802149
  801cf0:	00 00 00 
  801cf3:	ff d2                	call   rdx
  801cf5:	89 c7                	mov    edi,eax
  801cf7:	48 b8 9f 23 80 00 00 	movabs rax,0x80239f
  801cfe:	00 00 00 
  801d01:	ff d0                	call   rax
  801d03:	48 98                	cdqe   
  801d05:	48 89 d9             	mov    rcx,rbx
  801d08:	ba 07 00 00 00       	mov    edx,0x7
  801d0d:	4c 89 e6             	mov    rsi,r12
  801d10:	48 89 c7             	mov    rdi,rax
  801d13:	48 b8 1b 15 80 00 00 	movabs rax,0x80151b
  801d1a:	00 00 00 
  801d1d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:242
    }
    else
    {
        //page level protection
    }
    p=err_code&2;
  801d1f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  801d23:	83 e0 02             	and    eax,0x2
  801d26:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:243
    if(p)printf("when writing\n");else //puts("when reading");
  801d29:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
  801d2d:	74 20                	je     801d4f <page_err+0xe9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:243 (discriminator 1)
  801d2f:	48 b8 7a 89 81 00 00 	movabs rax,0x81897a
  801d36:	00 00 00 
  801d39:	48 89 c7             	mov    rdi,rax
  801d3c:	b8 00 00 00 00       	mov    eax,0x0
  801d41:	48 ba 97 11 80 00 00 	movabs rdx,0x801197
  801d48:	00 00 00 
  801d4b:	ff d2                	call   rdx
  801d4d:	eb 0a                	jmp    801d59 <page_err+0xf3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:244
    p=err_code&4;
  801d4f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  801d53:	83 e0 04             	and    eax,0x4
  801d56:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:245
    if(!p)printf("supervisor mode\n");else //puts("user mode");
  801d59:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
  801d5d:	75 20                	jne    801d7f <page_err+0x119>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:245 (discriminator 1)
  801d5f:	48 b8 88 89 81 00 00 	movabs rax,0x818988
  801d66:	00 00 00 
  801d69:	48 89 c7             	mov    rdi,rax
  801d6c:	b8 00 00 00 00       	mov    eax,0x0
  801d71:	48 ba 97 11 80 00 00 	movabs rdx,0x801197
  801d78:	00 00 00 
  801d7b:	ff d2                	call   rdx
  801d7d:	eb 0a                	jmp    801d89 <page_err+0x123>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:246
    p=err_code&16;
  801d7f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  801d83:	83 e0 10             	and    eax,0x10
  801d86:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:247
    if(p)printf("an instruction tries to fetch\n");
  801d89:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
  801d8d:	74 1e                	je     801dad <page_err+0x147>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:247 (discriminator 1)
  801d8f:	48 b8 a0 89 81 00 00 	movabs rax,0x8189a0
  801d96:	00 00 00 
  801d99:	48 89 c7             	mov    rdi,rax
  801d9c:	b8 00 00 00 00       	mov    eax,0x0
  801da1:	48 ba 97 11 80 00 00 	movabs rdx,0x801197
  801da8:	00 00 00 
  801dab:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:248
    unsigned int addr=0;
  801dad:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:249
    asm volatile("mov 8(%%rbp),%0":"=r"(addr));
  801db4:	8b 45 08             	mov    eax,DWORD PTR [rbp+0x8]
  801db7:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:250
    printf("occurred at %x(paddr), %x(laddr)\n",addr,l_addr);
  801dba:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  801dbe:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
  801dc1:	89 c6                	mov    esi,eax
  801dc3:	48 b8 c0 89 81 00 00 	movabs rax,0x8189c0
  801dca:	00 00 00 
  801dcd:	48 89 c7             	mov    rdi,rax
  801dd0:	b8 00 00 00 00       	mov    eax,0x0
  801dd5:	48 b9 97 11 80 00 00 	movabs rcx,0x801197
  801ddc:	00 00 00 
  801ddf:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:253
    extern int cur_proc;
    extern struct process *task;
    if(task[cur_proc].pid==1)//系统进程
  801de1:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  801de8:	00 00 00 
  801deb:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  801dee:	48 b8 cc 85 40 00 00 	movabs rax,0x4085cc
  801df5:	00 00 00 
  801df8:	8b 00                	mov    eax,DWORD PTR [rax]
  801dfa:	48 98                	cdqe   
  801dfc:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  801e03:	48 01 d0             	add    rax,rdx
  801e06:	8b 00                	mov    eax,DWORD PTR [rax]
  801e08:	83 f8 01             	cmp    eax,0x1
  801e0b:	75 20                	jne    801e2d <page_err+0x1c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:255
    {
        printf("sys died. please reboot.\n");
  801e0d:	48 b8 e2 89 81 00 00 	movabs rax,0x8189e2
  801e14:	00 00 00 
  801e17:	48 89 c7             	mov    rdi,rax
  801e1a:	b8 00 00 00 00       	mov    eax,0x0
  801e1f:	48 ba 97 11 80 00 00 	movabs rdx,0x801197
  801e26:	00 00 00 
  801e29:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:256
        asm volatile("jmp .");
  801e2b:	eb fe                	jmp    801e2b <page_err+0x1c5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:262
    }
    //杀死问题进程
//    del_proc(cur_proc);
    // printf("killed the problem process.\n");
    // printf("shell:>");
    eoi();
  801e2d:	b8 00 00 00 00       	mov    eax,0x0
  801e32:	48 ba fe 86 80 00 00 	movabs rdx,0x8086fe
  801e39:	00 00 00 
  801e3c:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:264
    //这里对esp的加法是必要的，因为page fault多push了一个错误码，但是iret识别不了
    __asm__ volatile ("sti \r\n  leave\n add $8,%rsp \n iretq");
  801e3e:	fb                   	sti    
  801e3f:	c9                   	leave  
  801e40:	48 83 c4 08          	add    rsp,0x8
  801e44:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:265
}
  801e46:	90                   	nop
  801e47:	48 83 c4 20          	add    rsp,0x20
  801e4b:	5b                   	pop    rbx
  801e4c:	41 5c                	pop    r12
  801e4e:	5d                   	pop    rbp
  801e4f:	c3                   	ret    

0000000000801e50 <init_memory>:
init_memory():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:267
void init_memory()
{
  801e50:	f3 0f 1e fa          	endbr64 
  801e54:	55                   	push   rbp
  801e55:	48 89 e5             	mov    rbp,rsp
  801e58:	48 83 ec 50          	sub    rsp,0x50
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:270
    extern addr_t _knl_end,_knl_start;//lds中声明的内核的结尾地址，放置位图
    //获取内存大小
    size_t mem_size=mmap_struct[mmap_t_i-1].base+mmap_struct[mmap_t_i-1].len;
  801e5c:	48 b8 20 02 40 00 00 	movabs rax,0x400220
  801e63:	00 00 00 
  801e66:	8b 00                	mov    eax,DWORD PTR [rax]
  801e68:	83 e8 01             	sub    eax,0x1
  801e6b:	48 b9 40 00 40 00 00 	movabs rcx,0x400040
  801e72:	00 00 00 
  801e75:	48 63 d0             	movsxd rdx,eax
  801e78:	48 89 d0             	mov    rax,rdx
  801e7b:	48 01 c0             	add    rax,rax
  801e7e:	48 01 d0             	add    rax,rdx
  801e81:	48 c1 e0 03          	shl    rax,0x3
  801e85:	48 01 c8             	add    rax,rcx
  801e88:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  801e8b:	48 b8 20 02 40 00 00 	movabs rax,0x400220
  801e92:	00 00 00 
  801e95:	8b 00                	mov    eax,DWORD PTR [rax]
  801e97:	83 e8 01             	sub    eax,0x1
  801e9a:	48 be 40 00 40 00 00 	movabs rsi,0x400040
  801ea1:	00 00 00 
  801ea4:	48 63 d0             	movsxd rdx,eax
  801ea7:	48 89 d0             	mov    rax,rdx
  801eaa:	48 01 c0             	add    rax,rax
  801ead:	48 01 d0             	add    rax,rdx
  801eb0:	48 c1 e0 03          	shl    rax,0x3
  801eb4:	48 01 f0             	add    rax,rsi
  801eb7:	48 83 c0 08          	add    rax,0x8
  801ebb:	48 8b 00             	mov    rax,QWORD PTR [rax]
  801ebe:	48 01 c8             	add    rax,rcx
  801ec1:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:277
    /*
     * 注：物理内存的一半会分给内核，所以除以2，内核空间page map不表示。
     * 前半部分是计算内存大小使多少个页，在位图中，一页表示为一位，所以除以后面部分，
     * 即一页位图可以有多少位。
     * */
    int pgc=(mem_size/2/PAGE_4K_SIZE)/(PAGE_4K_SIZE*8);
  801ec5:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  801ec9:	48 8d 90 ff ff ff 0f 	lea    rdx,[rax+0xfffffff]
  801ed0:	48 85 c0             	test   rax,rax
  801ed3:	48 0f 48 c2          	cmovs  rax,rdx
  801ed7:	48 c1 f8 1c          	sar    rax,0x1c
  801edb:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:279
    //计算出位图所需的字节数
    int pg_bytes=pgc>>5;//=/32
  801ede:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
  801ee1:	c1 f8 05             	sar    eax,0x5
  801ee4:	89 45 c0             	mov    DWORD PTR [rbp-0x40],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:282
    //初始化vmalloc内存位图
    //计算位图需要多少个int
    size_t vmec= (mem_size/2-0x1000000)/PAGE_4K_SIZE/32;//去掉内核代码16M
  801ee7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  801eeb:	48 89 c2             	mov    rdx,rax
  801eee:	48 c1 ea 3f          	shr    rdx,0x3f
  801ef2:	48 01 d0             	add    rax,rdx
  801ef5:	48 d1 f8             	sar    rax,1
  801ef8:	48 2d 00 00 00 01    	sub    rax,0x1000000
  801efe:	48 8d 90 ff ff 01 00 	lea    rdx,[rax+0x1ffff]
  801f05:	48 85 c0             	test   rax,rax
  801f08:	48 0f 48 c2          	cmovs  rax,rdx
  801f0c:	48 c1 f8 11          	sar    rax,0x11
  801f10:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:283
    size_t vmms=vmec*4/PAGE_4K_SIZE;//位图自己需要多少页
  801f14:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  801f18:	48 8d 90 ff 03 00 00 	lea    rdx,[rax+0x3ff]
  801f1f:	48 85 c0             	test   rax,rax
  801f22:	48 0f 48 c2          	cmovs  rax,rdx
  801f26:	48 c1 f8 0a          	sar    rax,0xa
  801f2a:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:284
    comprintf("tot memsize:0x%x,kmalloc pages count:%d,kmalloc bitmap taking 0x%d pages\n", mem_size,vmec,vmms);
  801f2e:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
  801f32:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  801f36:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  801f3a:	48 89 c6             	mov    rsi,rax
  801f3d:	48 b8 00 8a 81 00 00 	movabs rax,0x818a00
  801f44:	00 00 00 
  801f47:	48 89 c7             	mov    rdi,rax
  801f4a:	b8 00 00 00 00       	mov    eax,0x0
  801f4f:	49 b8 ae ff 80 00 00 	movabs r8,0x80ffae
  801f56:	00 00 00 
  801f59:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:285
    if(vmec*4%PAGE_4K_SIZE)
  801f5c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  801f60:	48 c1 e0 02          	shl    rax,0x2
  801f64:	25 fc 0f 00 00       	and    eax,0xffc
  801f69:	48 85 c0             	test   rax,rax
  801f6c:	74 05                	je     801f73 <init_memory+0x123>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:286
        vmms++;
  801f6e:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:287
    for(int i=0;i<vmec;i++){
  801f73:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
  801f7a:	eb 23                	jmp    801f9f <init_memory+0x14f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:288 (discriminator 3)
        vmalloc_map[i]=0;
  801f7c:	48 b8 78 0d 81 00 00 	movabs rax,0x810d78
  801f83:	00 00 00 
  801f86:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  801f89:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  801f8c:	48 98                	cdqe   
  801f8e:	48 c1 e0 02          	shl    rax,0x2
  801f92:	48 01 d0             	add    rax,rdx
  801f95:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:287 (discriminator 3)
    for(int i=0;i<vmec;i++){
  801f9b:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:287 (discriminator 1)
  801f9f:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  801fa2:	48 98                	cdqe   
  801fa4:	48 39 45 b8          	cmp    QWORD PTR [rbp-0x48],rax
  801fa8:	7f d2                	jg     801f7c <init_memory+0x12c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:291
    }
    //位图占用前几页
    for(int i=0,j=0;j*32+i<vmms;i++)
  801faa:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [rbp-0x10],0x0
  801fb1:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
  801fb8:	eb 59                	jmp    802013 <init_memory+0x1c3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:293
    {
        if(i==32)
  801fba:	83 7d f0 20          	cmp    DWORD PTR [rbp-0x10],0x20
  801fbe:	75 0b                	jne    801fcb <init_memory+0x17b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:295
        {
            i=0;
  801fc0:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [rbp-0x10],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:296
            j++;
  801fc7:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:298 (discriminator 2)
        }
        vmalloc_map[j]|=1u<<i;
  801fcb:	48 b8 78 0d 81 00 00 	movabs rax,0x810d78
  801fd2:	00 00 00 
  801fd5:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  801fd8:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  801fdb:	48 98                	cdqe   
  801fdd:	48 c1 e0 02          	shl    rax,0x2
  801fe1:	48 01 d0             	add    rax,rdx
  801fe4:	8b 10                	mov    edx,DWORD PTR [rax]
  801fe6:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  801fe9:	be 01 00 00 00       	mov    esi,0x1
  801fee:	89 c1                	mov    ecx,eax
  801ff0:	d3 e6                	shl    esi,cl
  801ff2:	48 b8 78 0d 81 00 00 	movabs rax,0x810d78
  801ff9:	00 00 00 
  801ffc:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  801fff:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  802002:	48 98                	cdqe   
  802004:	48 c1 e0 02          	shl    rax,0x2
  802008:	48 01 c8             	add    rax,rcx
  80200b:	09 f2                	or     edx,esi
  80200d:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:291 (discriminator 2)
    for(int i=0,j=0;j*32+i<vmms;i++)
  80200f:	83 45 f0 01          	add    DWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:291 (discriminator 1)
  802013:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  802016:	c1 e0 05             	shl    eax,0x5
  802019:	89 c2                	mov    edx,eax
  80201b:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  80201e:	01 d0                	add    eax,edx
  802020:	48 98                	cdqe   
  802022:	48 39 45 f8          	cmp    QWORD PTR [rbp-0x8],rax
  802026:	7f 92                	jg     801fba <init_memory+0x16a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:301
    }
    //kmalloc连续的内存
    page_map=kmallocat(0,pgc);//(unsigned int*)PAGE_4K_ALIGN(0xc00000);
  802028:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
  80202b:	89 c6                	mov    esi,eax
  80202d:	bf 00 00 00 00       	mov    edi,0x0
  802032:	48 b8 aa 19 80 00 00 	movabs rax,0x8019aa
  802039:	00 00 00 
  80203c:	ff d0                	call   rax
  80203e:	48 89 c2             	mov    rdx,rax
  802041:	48 b8 20 00 40 00 00 	movabs rax,0x400020
  802048:	00 00 00 
  80204b:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:302
    int* p=page_map;
  80204e:	48 b8 20 00 40 00 00 	movabs rax,0x400020
  802055:	00 00 00 
  802058:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80205b:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:303
    addr_t curp=0;
  80205f:	48 c7 45 b0 00 00 00 	mov    QWORD PTR [rbp-0x50],0x0
  802066:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:304
    for(int i=0;i<mmap_t_i;i++){
  802067:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
  80206e:	e9 9d 00 00 00       	jmp    802110 <init_memory+0x2c0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:305
        int cont=0;
  802073:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [rbp-0x28],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:306
        if(mmap_struct[i].type!=MULTIBOOT_MEMORY_AVAILABLE)
  80207a:	48 b9 40 00 40 00 00 	movabs rcx,0x400040
  802081:	00 00 00 
  802084:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  802087:	48 63 d0             	movsxd rdx,eax
  80208a:	48 89 d0             	mov    rax,rdx
  80208d:	48 01 c0             	add    rax,rax
  802090:	48 01 d0             	add    rax,rdx
  802093:	48 c1 e0 03          	shl    rax,0x3
  802097:	48 01 c8             	add    rax,rcx
  80209a:	48 83 c0 10          	add    rax,0x10
  80209e:	48 8b 00             	mov    rax,QWORD PTR [rax]
  8020a1:	48 83 f8 01          	cmp    rax,0x1
  8020a5:	74 07                	je     8020ae <init_memory+0x25e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:307
            cont=-1;
  8020a7:	c7 45 d8 ff ff ff ff 	mov    DWORD PTR [rbp-0x28],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:308
        for(int j=0;j<PAGE_4K_ALIGN(mmap_struct[i].len)/PAGE_4K_SIZE/32;j++){
  8020ae:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x0
  8020b5:	eb 15                	jmp    8020cc <init_memory+0x27c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:309 (discriminator 3)
            *(p++)=cont;
  8020b7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  8020bb:	48 8d 50 04          	lea    rdx,[rax+0x4]
  8020bf:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
  8020c3:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
  8020c6:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:308 (discriminator 3)
        for(int j=0;j<PAGE_4K_ALIGN(mmap_struct[i].len)/PAGE_4K_SIZE/32;j++){
  8020c8:	83 45 d4 01          	add    DWORD PTR [rbp-0x2c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:308 (discriminator 1)
  8020cc:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
  8020cf:	48 63 c8             	movsxd rcx,eax
  8020d2:	48 be 40 00 40 00 00 	movabs rsi,0x400040
  8020d9:	00 00 00 
  8020dc:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  8020df:	48 63 d0             	movsxd rdx,eax
  8020e2:	48 89 d0             	mov    rax,rdx
  8020e5:	48 01 c0             	add    rax,rax
  8020e8:	48 01 d0             	add    rax,rdx
  8020eb:	48 c1 e0 03          	shl    rax,0x3
  8020ef:	48 01 f0             	add    rax,rsi
  8020f2:	48 83 c0 08          	add    rax,0x8
  8020f6:	48 8b 00             	mov    rax,QWORD PTR [rax]
  8020f9:	48 05 ff 0f 00 00    	add    rax,0xfff
  8020ff:	48 c1 e8 0c          	shr    rax,0xc
  802103:	48 c1 e8 05          	shr    rax,0x5
  802107:	48 39 c1             	cmp    rcx,rax
  80210a:	72 ab                	jb     8020b7 <init_memory+0x267>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:304 (discriminator 2)
    for(int i=0;i<mmap_t_i;i++){
  80210c:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:304 (discriminator 1)
  802110:	48 b8 20 02 40 00 00 	movabs rax,0x400220
  802117:	00 00 00 
  80211a:	8b 00                	mov    eax,DWORD PTR [rax]
  80211c:	39 45 dc             	cmp    DWORD PTR [rbp-0x24],eax
  80211f:	0f 8c 4e ff ff ff    	jl     802073 <init_memory+0x223>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:313
        }
    }

    usr_mem_pa=mem_size/2;
  802125:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  802129:	48 89 c2             	mov    rdx,rax
  80212c:	48 c1 ea 3f          	shr    rdx,0x3f
  802130:	48 01 d0             	add    rax,rdx
  802133:	48 d1 f8             	sar    rax,1
  802136:	48 89 c2             	mov    rdx,rax
  802139:	48 b8 28 00 40 00 00 	movabs rax,0x400028
  802140:	00 00 00 
  802143:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:341
        pd[i+mapai]=ptpm|PAGE_PRESENT|PAGE_RWX;
    }
    page_item *pdpt=(addr_t)pml4[256]&PAGE_4K_MASK+KNL_BASE;
    pdpt[0]=pdpm|PAGE_PRESENT|PAGE_RWX;*/

}
  802146:	90                   	nop
  802147:	c9                   	leave  
  802148:	c3                   	ret    

0000000000802149 <req_a_page>:
req_a_page():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:347
/*
page_map存储方式:
0x00000000
little end
*/
addr_t req_a_page(){
  802149:	f3 0f 1e fa          	endbr64 
  80214d:	55                   	push   rbp
  80214e:	48 89 e5             	mov    rbp,rsp
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:348
    for(int i=0;i<PAGE_BITMAP_NR;i++){
  802151:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
  802158:	e9 c2 00 00 00       	jmp    80221f <req_a_page+0xd6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:349
        for(int j=0;j<32;j++){
  80215d:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
  802164:	e9 a8 00 00 00       	jmp    802211 <req_a_page+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:350
            unsigned int bit=page_map[i]&(1<<j);
  802169:	48 b8 20 00 40 00 00 	movabs rax,0x400020
  802170:	00 00 00 
  802173:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  802176:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  802179:	48 98                	cdqe   
  80217b:	48 c1 e0 02          	shl    rax,0x2
  80217f:	48 01 d0             	add    rax,rdx
  802182:	8b 10                	mov    edx,DWORD PTR [rax]
  802184:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  802187:	be 01 00 00 00       	mov    esi,0x1
  80218c:	89 c1                	mov    ecx,eax
  80218e:	d3 e6                	shl    esi,cl
  802190:	89 f0                	mov    eax,esi
  802192:	21 d0                	and    eax,edx
  802194:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:351
            if((i*32+j)*4096>=0x100000&&!bit)
  802197:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80219a:	c1 e0 05             	shl    eax,0x5
  80219d:	89 c2                	mov    edx,eax
  80219f:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  8021a2:	01 d0                	add    eax,edx
  8021a4:	c1 e0 0c             	shl    eax,0xc
  8021a7:	3d ff ff 0f 00       	cmp    eax,0xfffff
  8021ac:	7e 5f                	jle    80220d <req_a_page+0xc4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:351 (discriminator 1)
  8021ae:	83 7d f4 00          	cmp    DWORD PTR [rbp-0xc],0x0
  8021b2:	75 59                	jne    80220d <req_a_page+0xc4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:353
            {
                page_map[i]=page_map[i]|(1<<j);
  8021b4:	48 b8 20 00 40 00 00 	movabs rax,0x400020
  8021bb:	00 00 00 
  8021be:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  8021c1:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  8021c4:	48 98                	cdqe   
  8021c6:	48 c1 e0 02          	shl    rax,0x2
  8021ca:	48 01 d0             	add    rax,rdx
  8021cd:	8b 10                	mov    edx,DWORD PTR [rax]
  8021cf:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  8021d2:	be 01 00 00 00       	mov    esi,0x1
  8021d7:	89 c1                	mov    ecx,eax
  8021d9:	d3 e6                	shl    esi,cl
  8021db:	89 f0                	mov    eax,esi
  8021dd:	89 c6                	mov    esi,eax
  8021df:	48 b8 20 00 40 00 00 	movabs rax,0x400020
  8021e6:	00 00 00 
  8021e9:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  8021ec:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  8021ef:	48 98                	cdqe   
  8021f1:	48 c1 e0 02          	shl    rax,0x2
  8021f5:	48 01 c8             	add    rax,rcx
  8021f8:	09 f2                	or     edx,esi
  8021fa:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:354
                return i*32+j;//num of page
  8021fc:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  8021ff:	c1 e0 05             	shl    eax,0x5
  802202:	89 c2                	mov    edx,eax
  802204:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  802207:	01 d0                	add    eax,edx
  802209:	48 98                	cdqe   
  80220b:	eb 1c                	jmp    802229 <req_a_page+0xe0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:349 (discriminator 2)
        for(int j=0;j<32;j++){
  80220d:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:349 (discriminator 1)
  802211:	83 7d f8 1f          	cmp    DWORD PTR [rbp-0x8],0x1f
  802215:	0f 8e 4e ff ff ff    	jle    802169 <req_a_page+0x20>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:348 (discriminator 2)
    for(int i=0;i<PAGE_BITMAP_NR;i++){
  80221b:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:348 (discriminator 1)
  80221f:	83 7d fc 3f          	cmp    DWORD PTR [rbp-0x4],0x3f
  802223:	0f 8e 34 ff ff ff    	jle    80215d <req_a_page+0x14>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:359

            }
        }
    }
}
  802229:	5d                   	pop    rbp
  80222a:	c3                   	ret    

000000000080222b <pmalloc>:
pmalloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:361

void * pmalloc(){
  80222b:	f3 0f 1e fa          	endbr64 
  80222f:	55                   	push   rbp
  802230:	48 89 e5             	mov    rbp,rsp
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:362
    return (void*)(get_phyaddr(req_a_page())+usr_mem_pa);
  802233:	b8 00 00 00 00       	mov    eax,0x0
  802238:	48 ba 49 21 80 00 00 	movabs rdx,0x802149
  80223f:	00 00 00 
  802242:	ff d2                	call   rdx
  802244:	89 c7                	mov    edi,eax
  802246:	48 b8 9f 23 80 00 00 	movabs rax,0x80239f
  80224d:	00 00 00 
  802250:	ff d0                	call   rax
  802252:	48 63 d0             	movsxd rdx,eax
  802255:	48 b8 28 00 40 00 00 	movabs rax,0x400028
  80225c:	00 00 00 
  80225f:	48 8b 00             	mov    rax,QWORD PTR [rax]
  802262:	48 01 d0             	add    rax,rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:363
}
  802265:	5d                   	pop    rbp
  802266:	c3                   	ret    

0000000000802267 <free_page>:
free_page():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:364
int free_page(char *paddr){
  802267:	f3 0f 1e fa          	endbr64 
  80226b:	55                   	push   rbp
  80226c:	48 89 e5             	mov    rbp,rsp
  80226f:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:365
    int num=(int)paddr/4096;
  802273:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  802277:	8d 90 ff 0f 00 00    	lea    edx,[rax+0xfff]
  80227d:	85 c0                	test   eax,eax
  80227f:	0f 48 c2             	cmovs  eax,edx
  802282:	c1 f8 0c             	sar    eax,0xc
  802285:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:366
    int n=num/32;
  802288:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80228b:	8d 50 1f             	lea    edx,[rax+0x1f]
  80228e:	85 c0                	test   eax,eax
  802290:	0f 48 c2             	cmovs  eax,edx
  802293:	c1 f8 05             	sar    eax,0x5
  802296:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:367
    int r=num%32;
  802299:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80229c:	99                   	cdq    
  80229d:	c1 ea 1b             	shr    edx,0x1b
  8022a0:	01 d0                	add    eax,edx
  8022a2:	83 e0 1f             	and    eax,0x1f
  8022a5:	29 d0                	sub    eax,edx
  8022a7:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:368
    page_map[n]=page_map[n]&~(unsigned int)(1<<r);
  8022aa:	48 b8 20 00 40 00 00 	movabs rax,0x400020
  8022b1:	00 00 00 
  8022b4:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  8022b7:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  8022ba:	48 98                	cdqe   
  8022bc:	48 c1 e0 02          	shl    rax,0x2
  8022c0:	48 01 d0             	add    rax,rdx
  8022c3:	8b 10                	mov    edx,DWORD PTR [rax]
  8022c5:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  8022c8:	be 01 00 00 00       	mov    esi,0x1
  8022cd:	89 c1                	mov    ecx,eax
  8022cf:	d3 e6                	shl    esi,cl
  8022d1:	89 f0                	mov    eax,esi
  8022d3:	f7 d0                	not    eax
  8022d5:	89 c6                	mov    esi,eax
  8022d7:	48 b8 20 00 40 00 00 	movabs rax,0x400020
  8022de:	00 00 00 
  8022e1:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  8022e4:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  8022e7:	48 98                	cdqe   
  8022e9:	48 c1 e0 02          	shl    rax,0x2
  8022ed:	48 01 c8             	add    rax,rcx
  8022f0:	21 f2                	and    edx,esi
  8022f2:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:369
}
  8022f4:	90                   	nop
  8022f5:	5d                   	pop    rbp
  8022f6:	c3                   	ret    

00000000008022f7 <free_pages_at>:
free_pages_at():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:371

int free_pages_at(int base,int pgn){
  8022f7:	f3 0f 1e fa          	endbr64 
  8022fb:	55                   	push   rbp
  8022fc:	48 89 e5             	mov    rbp,rsp
  8022ff:	48 83 ec 18          	sub    rsp,0x18
  802303:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
  802306:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:372
    for(int i=0;i<pgn;i++){
  802309:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
  802310:	eb 22                	jmp    802334 <free_pages_at+0x3d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:373 (discriminator 3)
        free_page(base+i*PAGE_4K_SIZE);
  802312:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  802315:	c1 e0 0c             	shl    eax,0xc
  802318:	89 c2                	mov    edx,eax
  80231a:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  80231d:	01 d0                	add    eax,edx
  80231f:	48 98                	cdqe   
  802321:	48 89 c7             	mov    rdi,rax
  802324:	48 b8 67 22 80 00 00 	movabs rax,0x802267
  80232b:	00 00 00 
  80232e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:372 (discriminator 3)
    for(int i=0;i<pgn;i++){
  802330:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:372 (discriminator 1)
  802334:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  802337:	3b 45 e8             	cmp    eax,DWORD PTR [rbp-0x18]
  80233a:	7c d6                	jl     802312 <free_pages_at+0x1b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:375
    }
}
  80233c:	90                   	nop
  80233d:	c9                   	leave  
  80233e:	c3                   	ret    

000000000080233f <check_page>:
check_page():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:376
int check_page(int num){
  80233f:	f3 0f 1e fa          	endbr64 
  802343:	55                   	push   rbp
  802344:	48 89 e5             	mov    rbp,rsp
  802347:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:377
    int n=num/32;
  80234a:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  80234d:	8d 50 1f             	lea    edx,[rax+0x1f]
  802350:	85 c0                	test   eax,eax
  802352:	0f 48 c2             	cmovs  eax,edx
  802355:	c1 f8 05             	sar    eax,0x5
  802358:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:378
    int r=num%32;
  80235b:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  80235e:	99                   	cdq    
  80235f:	c1 ea 1b             	shr    edx,0x1b
  802362:	01 d0                	add    eax,edx
  802364:	83 e0 1f             	and    eax,0x1f
  802367:	29 d0                	sub    eax,edx
  802369:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:379
    int bit=page_map[n]&(1<<r);
  80236c:	48 b8 20 00 40 00 00 	movabs rax,0x400020
  802373:	00 00 00 
  802376:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  802379:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80237c:	48 98                	cdqe   
  80237e:	48 c1 e0 02          	shl    rax,0x2
  802382:	48 01 d0             	add    rax,rdx
  802385:	8b 10                	mov    edx,DWORD PTR [rax]
  802387:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  80238a:	be 01 00 00 00       	mov    esi,0x1
  80238f:	89 c1                	mov    ecx,eax
  802391:	d3 e6                	shl    esi,cl
  802393:	89 f0                	mov    eax,esi
  802395:	21 d0                	and    eax,edx
  802397:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:380
    return bit;
  80239a:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:381
}
  80239d:	5d                   	pop    rbp
  80239e:	c3                   	ret    

000000000080239f <get_phyaddr>:
get_phyaddr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:385
/*
 * 获得这个页对应的物理内存地址
 * */
int get_phyaddr(int num){
  80239f:	f3 0f 1e fa          	endbr64 
  8023a3:	55                   	push   rbp
  8023a4:	48 89 e5             	mov    rbp,rsp
  8023a7:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:386
    return num*0x1000;
  8023aa:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  8023ad:	c1 e0 0c             	shl    eax,0xc
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:387
}
  8023b0:	5d                   	pop    rbp
  8023b1:	c3                   	ret    

00000000008023b2 <set_page_item>:
set_page_item():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:390

void set_page_item(page_item *item_addr,int phy_addr,int attr)
{
  8023b2:	f3 0f 1e fa          	endbr64 
  8023b6:	55                   	push   rbp
  8023b7:	48 89 e5             	mov    rbp,rsp
  8023ba:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  8023be:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
  8023c1:	89 55 f0             	mov    DWORD PTR [rbp-0x10],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:391
    *item_addr=0;
  8023c4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  8023c8:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:392
    *item_addr|=phy_addr&0xfffff000;
  8023cf:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  8023d3:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  8023d6:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  8023d9:	89 c0                	mov    eax,eax
  8023db:	25 00 f0 ff ff       	and    eax,0xfffff000
  8023e0:	48 09 c2             	or     rdx,rax
  8023e3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  8023e7:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:393
    *item_addr|=attr;
  8023ea:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  8023ee:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  8023f1:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  8023f4:	48 98                	cdqe   
  8023f6:	48 09 c2             	or     rdx,rax
  8023f9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  8023fd:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:394
}
  802400:	90                   	nop
  802401:	5d                   	pop    rbp
  802402:	c3                   	ret    

0000000000802403 <set_1gb_pdpt>:
set_1gb_pdpt():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:396
void set_1gb_pdpt(page_item* ppdpt,int pa,unsigned int extra_attr)
{
  802403:	f3 0f 1e fa          	endbr64 
  802407:	55                   	push   rbp
  802408:	48 89 e5             	mov    rbp,rsp
  80240b:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  80240f:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
  802412:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:397
    *ppdpt=0;
  802415:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  802419:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:398
    *ppdpt|=PAGE_PRESENT|PDPTE_1GB|extra_attr;
  802420:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  802424:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  802427:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  80242a:	0c 81                	or     al,0x81
  80242c:	89 c0                	mov    eax,eax
  80242e:	48 09 c2             	or     rdx,rax
  802431:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  802435:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:399
    unsigned int hipa=pa&0xffffc0000000ul;
  802438:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  80243b:	25 00 00 00 c0       	and    eax,0xc0000000
  802440:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:400
    *ppdpt|=hipa;
  802443:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  802447:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  80244a:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80244d:	48 09 c2             	or     rdx,rax
  802450:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  802454:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:401
}
  802457:	90                   	nop
  802458:	5d                   	pop    rbp
  802459:	c3                   	ret    

000000000080245a <set_2mb_pde>:
set_2mb_pde():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:403
void set_2mb_pde(page_item *pde, int pa, int extra_attr)
{
  80245a:	f3 0f 1e fa          	endbr64 
  80245e:	55                   	push   rbp
  80245f:	48 89 e5             	mov    rbp,rsp
  802462:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  802466:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
  802469:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:404
    *pde=0;
  80246c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  802470:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:405
    *pde|=PAGE_PRESENT|PAGE_4MB_PAGE|PDE_4MB_PAT|extra_attr;
  802477:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80247b:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  80247e:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  802481:	0d 81 10 00 00       	or     eax,0x1081
  802486:	48 98                	cdqe   
  802488:	48 09 c2             	or     rdx,rax
  80248b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80248f:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:406
    unsigned int hipa=pa&0xffc00000;
  802492:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  802495:	25 00 00 c0 ff       	and    eax,0xffc00000
  80249a:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:407
    *pde|=hipa;
  80249d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  8024a1:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  8024a4:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  8024a7:	48 09 c2             	or     rdx,rax
  8024aa:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  8024ae:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:408
}
  8024b1:	90                   	nop
  8024b2:	5d                   	pop    rbp
  8024b3:	c3                   	ret    

00000000008024b4 <req_page_at>:
req_page_at():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:429
        page_map[i]&=(u32)(1<<j);
    return ret;
} */
//在bitmap申请指定的页面,base默认0x1000对齐
addr_t req_page_at(addr_t base,int pgn)
{
  8024b4:	f3 0f 1e fa          	endbr64 
  8024b8:	55                   	push   rbp
  8024b9:	48 89 e5             	mov    rbp,rsp
  8024bc:	48 83 ec 20          	sub    rsp,0x20
  8024c0:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  8024c4:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:430
    if(base==0)//不指定地址
  8024c7:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
  8024cc:	75 26                	jne    8024f4 <req_page_at+0x40>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:432
    {
        return get_phyaddr(req_a_page());
  8024ce:	b8 00 00 00 00       	mov    eax,0x0
  8024d3:	48 ba 49 21 80 00 00 	movabs rdx,0x802149
  8024da:	00 00 00 
  8024dd:	ff d2                	call   rdx
  8024df:	89 c7                	mov    edi,eax
  8024e1:	48 b8 9f 23 80 00 00 	movabs rax,0x80239f
  8024e8:	00 00 00 
  8024eb:	ff d0                	call   rax
  8024ed:	48 98                	cdqe   
  8024ef:	e9 b8 00 00 00       	jmp    8025ac <req_page_at+0xf8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:434
    }
    if(!is_pgs_ava(base,pgn))return -1;//先检查
  8024f4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  8024f8:	89 c2                	mov    edx,eax
  8024fa:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  8024fd:	89 c6                	mov    esi,eax
  8024ff:	89 d7                	mov    edi,edx
  802501:	48 b8 6b 26 80 00 00 	movabs rax,0x80266b
  802508:	00 00 00 
  80250b:	ff d0                	call   rax
  80250d:	85 c0                	test   eax,eax
  80250f:	75 0c                	jne    80251d <req_page_at+0x69>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:434 (discriminator 1)
  802511:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
  802518:	e9 8f 00 00 00       	jmp    8025ac <req_page_at+0xf8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:435
    int pgni=base/4096;
  80251d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  802521:	48 c1 e8 0c          	shr    rax,0xc
  802525:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:436
    int pgi=pgni/32;
  802528:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  80252b:	8d 50 1f             	lea    edx,[rax+0x1f]
  80252e:	85 c0                	test   eax,eax
  802530:	0f 48 c2             	cmovs  eax,edx
  802533:	c1 f8 05             	sar    eax,0x5
  802536:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:437
    int pgj=pgni%32;
  802539:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  80253c:	99                   	cdq    
  80253d:	c1 ea 1b             	shr    edx,0x1b
  802540:	01 d0                	add    eax,edx
  802542:	83 e0 1f             	and    eax,0x1f
  802545:	29 d0                	sub    eax,edx
  802547:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:438
    for(int i=0;i<pgn;i++)
  80254a:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
  802551:	eb 4c                	jmp    80259f <req_page_at+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:440 (discriminator 3)
    {
        page_map[i]|=(1<<pgj);
  802553:	48 b8 20 00 40 00 00 	movabs rax,0x400020
  80255a:	00 00 00 
  80255d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  802560:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  802563:	48 98                	cdqe   
  802565:	48 c1 e0 02          	shl    rax,0x2
  802569:	48 01 d0             	add    rax,rdx
  80256c:	8b 10                	mov    edx,DWORD PTR [rax]
  80256e:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  802571:	be 01 00 00 00       	mov    esi,0x1
  802576:	89 c1                	mov    ecx,eax
  802578:	d3 e6                	shl    esi,cl
  80257a:	89 f0                	mov    eax,esi
  80257c:	89 c6                	mov    esi,eax
  80257e:	48 b8 20 00 40 00 00 	movabs rax,0x400020
  802585:	00 00 00 
  802588:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  80258b:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80258e:	48 98                	cdqe   
  802590:	48 c1 e0 02          	shl    rax,0x2
  802594:	48 01 c8             	add    rax,rcx
  802597:	09 f2                	or     edx,esi
  802599:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:438 (discriminator 3)
    for(int i=0;i<pgn;i++)
  80259b:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:438 (discriminator 1)
  80259f:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  8025a2:	3b 45 e4             	cmp    eax,DWORD PTR [rbp-0x1c]
  8025a5:	7c ac                	jl     802553 <req_page_at+0x9f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:442
    }
    return 0;
  8025a7:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:444

}
  8025ac:	c9                   	leave  
  8025ad:	c3                   	ret    

00000000008025ae <chk_vm>:
chk_vm():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:446
int chk_vm(int base, int pgn)
{
  8025ae:	f3 0f 1e fa          	endbr64 
  8025b2:	55                   	push   rbp
  8025b3:	48 89 e5             	mov    rbp,rsp
  8025b6:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
  8025b9:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:447
    int *pdet=0;
  8025bc:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
  8025c3:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:448
    asm volatile("mov %%cr3,%0":"=r"(pdet));
  8025c4:	0f 20 d8             	mov    rax,cr3
  8025c7:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:449
    int *pt=pdet[base/PAGE_INDEX_SIZE]&0xfffff000;
  8025cb:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  8025ce:	8d 90 ff ff 1f 00    	lea    edx,[rax+0x1fffff]
  8025d4:	85 c0                	test   eax,eax
  8025d6:	0f 48 c2             	cmovs  eax,edx
  8025d9:	c1 f8 15             	sar    eax,0x15
  8025dc:	48 98                	cdqe   
  8025de:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
  8025e5:	00 
  8025e6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  8025ea:	48 01 d0             	add    rax,rdx
  8025ed:	8b 00                	mov    eax,DWORD PTR [rax]
  8025ef:	89 c0                	mov    eax,eax
  8025f1:	25 00 f0 ff ff       	and    eax,0xfffff000
  8025f6:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:450
    if(!(pdet[base/PAGE_INDEX_SIZE]&PAGE_PRESENT)||\
  8025fa:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  8025fd:	8d 90 ff ff 1f 00    	lea    edx,[rax+0x1fffff]
  802603:	85 c0                	test   eax,eax
  802605:	0f 48 c2             	cmovs  eax,edx
  802608:	c1 f8 15             	sar    eax,0x15
  80260b:	48 98                	cdqe   
  80260d:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
  802614:	00 
  802615:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  802619:	48 01 d0             	add    rax,rdx
  80261c:	8b 00                	mov    eax,DWORD PTR [rax]
  80261e:	83 e0 01             	and    eax,0x1
  802621:	85 c0                	test   eax,eax
  802623:	74 38                	je     80265d <chk_vm+0xaf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:451 (discriminator 1)
    !(pt[base%PAGE_INDEX_SIZE/PAGE_SIZE]&PAGE_PRESENT))
  802625:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  802628:	99                   	cdq    
  802629:	c1 ea 0b             	shr    edx,0xb
  80262c:	01 d0                	add    eax,edx
  80262e:	25 ff ff 1f 00       	and    eax,0x1fffff
  802633:	29 d0                	sub    eax,edx
  802635:	8d 90 ff 0f 00 00    	lea    edx,[rax+0xfff]
  80263b:	85 c0                	test   eax,eax
  80263d:	0f 48 c2             	cmovs  eax,edx
  802640:	c1 f8 0c             	sar    eax,0xc
  802643:	48 98                	cdqe   
  802645:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
  80264c:	00 
  80264d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  802651:	48 01 d0             	add    rax,rdx
  802654:	8b 00                	mov    eax,DWORD PTR [rax]
  802656:	83 e0 01             	and    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:450 (discriminator 1)
    if(!(pdet[base/PAGE_INDEX_SIZE]&PAGE_PRESENT)||\
  802659:	85 c0                	test   eax,eax
  80265b:	75 07                	jne    802664 <chk_vm+0xb6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:453
    {
        return -1;
  80265d:	b8 ff ff ff ff       	mov    eax,0xffffffff
  802662:	eb 05                	jmp    802669 <chk_vm+0xbb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:455
    }
    return 0;
  802664:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:456
}
  802669:	5d                   	pop    rbp
  80266a:	c3                   	ret    

000000000080266b <is_pgs_ava>:
is_pgs_ava():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:459
//查看指定区域的页内存是否可用
int is_pgs_ava(int base,int pgn)
{
  80266b:	f3 0f 1e fa          	endbr64 
  80266f:	55                   	push   rbp
  802670:	48 89 e5             	mov    rbp,rsp
  802673:	48 83 ec 18          	sub    rsp,0x18
  802677:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
  80267a:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:460
    int pgi=base/4096;
  80267d:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  802680:	8d 90 ff 0f 00 00    	lea    edx,[rax+0xfff]
  802686:	85 c0                	test   eax,eax
  802688:	0f 48 c2             	cmovs  eax,edx
  80268b:	c1 f8 0c             	sar    eax,0xc
  80268e:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:461
    for(int i=0;i<pgn;i++)
  802691:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
  802698:	eb 25                	jmp    8026bf <is_pgs_ava+0x54>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:463
    {
        if(check_page(pgi+i)!=0)return 0;
  80269a:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
  80269d:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  8026a0:	01 d0                	add    eax,edx
  8026a2:	89 c7                	mov    edi,eax
  8026a4:	48 b8 3f 23 80 00 00 	movabs rax,0x80233f
  8026ab:	00 00 00 
  8026ae:	ff d0                	call   rax
  8026b0:	85 c0                	test   eax,eax
  8026b2:	74 07                	je     8026bb <is_pgs_ava+0x50>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:463 (discriminator 1)
  8026b4:	b8 00 00 00 00       	mov    eax,0x0
  8026b9:	eb 11                	jmp    8026cc <is_pgs_ava+0x61>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:461 (discriminator 2)
    for(int i=0;i<pgn;i++)
  8026bb:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:461 (discriminator 1)
  8026bf:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  8026c2:	3b 45 e8             	cmp    eax,DWORD PTR [rbp-0x18]
  8026c5:	7c d3                	jl     80269a <is_pgs_ava+0x2f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:465
    }
    return 1;
  8026c7:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:467

}
  8026cc:	c9                   	leave  
  8026cd:	c3                   	ret    

00000000008026ce <setup_sys_vol>:
setup_sys_vol():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:22
super_block sbs[MAX_SUPERBLOCKS];
fs_operations fs[MAX_FS];

buffer_head buffer_heads[NR_BUFFERHEADS];
int setup_sys_vol(void *disk_drv, void *fs_drv)
{
  8026ce:	f3 0f 1e fa          	endbr64 
  8026d2:	55                   	push   rbp
  8026d3:	48 89 e5             	mov    rbp,rsp
  8026d6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  8026da:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:23
    vols[0].name[0]='C';
  8026de:	48 b8 40 02 40 00 00 	movabs rax,0x400240
  8026e5:	00 00 00 
  8026e8:	c6 00 43             	mov    BYTE PTR [rax],0x43
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:24
    vols[0].name[1]='\0';
  8026eb:	48 b8 40 02 40 00 00 	movabs rax,0x400240
  8026f2:	00 00 00 
  8026f5:	c6 40 01 00          	mov    BYTE PTR [rax+0x1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:25
    vols[0].disk_drv=disk_drv;
  8026f9:	48 ba 40 02 40 00 00 	movabs rdx,0x400240
  802700:	00 00 00 
  802703:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  802707:	48 89 42 08          	mov    QWORD PTR [rdx+0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:26
    vols[0].fs_drv=fs_drv;
  80270b:	48 ba 40 02 40 00 00 	movabs rdx,0x400240
  802712:	00 00 00 
  802715:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  802719:	48 89 42 10          	mov    QWORD PTR [rdx+0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:27
    vols[0].stat=VOLUME_STAT_READY;
  80271d:	48 b8 40 02 40 00 00 	movabs rax,0x400240
  802724:	00 00 00 
  802727:	c7 40 20 01 00 00 00 	mov    DWORD PTR [rax+0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:28
    return 0;
  80272e:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:29
}
  802733:	5d                   	pop    rbp
  802734:	c3                   	ret    

0000000000802735 <sys_mkfifo>:
sys_mkfifo():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:32
//返回管道描述符
int sys_mkfifo(int number)
{
  802735:	f3 0f 1e fa          	endbr64 
  802739:	55                   	push   rbp
  80273a:	48 89 e5             	mov    rbp,rsp
  80273d:	48 83 ec 20          	sub    rsp,0x20
  802741:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:34
    //查重
    for(int i=0;i<MAX_FIFOS;i++)
  802744:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
  80274b:	eb 4e                	jmp    80279b <sys_mkfifo+0x66>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:36
    {
        if(fifos[i].id==number&&fifos[i].flag==1) {
  80274d:	48 ba 60 1e 40 00 00 	movabs rdx,0x401e60
  802754:	00 00 00 
  802757:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80275a:	48 98                	cdqe   
  80275c:	48 c1 e0 04          	shl    rax,0x4
  802760:	48 01 d0             	add    rax,rdx
  802763:	48 83 c0 0c          	add    rax,0xc
  802767:	8b 00                	mov    eax,DWORD PTR [rax]
  802769:	39 45 ec             	cmp    DWORD PTR [rbp-0x14],eax
  80276c:	75 29                	jne    802797 <sys_mkfifo+0x62>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:36 (discriminator 1)
  80276e:	48 ba 60 1e 40 00 00 	movabs rdx,0x401e60
  802775:	00 00 00 
  802778:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80277b:	48 98                	cdqe   
  80277d:	48 c1 e0 04          	shl    rax,0x4
  802781:	48 01 d0             	add    rax,rdx
  802784:	48 83 c0 08          	add    rax,0x8
  802788:	8b 00                	mov    eax,DWORD PTR [rax]
  80278a:	83 f8 01             	cmp    eax,0x1
  80278d:	75 08                	jne    802797 <sys_mkfifo+0x62>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:37
            return i;
  80278f:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  802792:	e9 e9 00 00 00       	jmp    802880 <sys_mkfifo+0x14b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:34 (discriminator 2)
    for(int i=0;i<MAX_FIFOS;i++)
  802797:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:34 (discriminator 1)
  80279b:	83 7d fc 0f          	cmp    DWORD PTR [rbp-0x4],0xf
  80279f:	7e ac                	jle    80274d <sys_mkfifo+0x18>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:40
        }
    }
    for(int i=0;i<MAX_FIFOS;i++)
  8027a1:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
  8027a8:	e9 c4 00 00 00       	jmp    802871 <sys_mkfifo+0x13c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:42
    {
        if(fifos[i].flag==0) {
  8027ad:	48 ba 60 1e 40 00 00 	movabs rdx,0x401e60
  8027b4:	00 00 00 
  8027b7:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  8027ba:	48 98                	cdqe   
  8027bc:	48 c1 e0 04          	shl    rax,0x4
  8027c0:	48 01 d0             	add    rax,rdx
  8027c3:	48 83 c0 08          	add    rax,0x8
  8027c7:	8b 00                	mov    eax,DWORD PTR [rax]
  8027c9:	85 c0                	test   eax,eax
  8027cb:	0f 85 9c 00 00 00    	jne    80286d <sys_mkfifo+0x138>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:43
            fifos[i].flag=1;
  8027d1:	48 ba 60 1e 40 00 00 	movabs rdx,0x401e60
  8027d8:	00 00 00 
  8027db:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  8027de:	48 98                	cdqe   
  8027e0:	48 c1 e0 04          	shl    rax,0x4
  8027e4:	48 01 d0             	add    rax,rdx
  8027e7:	48 83 c0 08          	add    rax,0x8
  8027eb:	c7 00 01 00 00 00    	mov    DWORD PTR [rax],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:44
            fifos[i].id=number;
  8027f1:	48 ba 60 1e 40 00 00 	movabs rdx,0x401e60
  8027f8:	00 00 00 
  8027fb:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  8027fe:	48 98                	cdqe   
  802800:	48 c1 e0 04          	shl    rax,0x4
  802804:	48 01 d0             	add    rax,rdx
  802807:	48 8d 50 0c          	lea    rdx,[rax+0xc]
  80280b:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  80280e:	89 02                	mov    DWORD PTR [rdx],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:45
            fifos[i].size=CHUNK_SIZE;
  802810:	48 ba 60 1e 40 00 00 	movabs rdx,0x401e60
  802817:	00 00 00 
  80281a:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  80281d:	48 98                	cdqe   
  80281f:	48 c1 e0 04          	shl    rax,0x4
  802823:	48 01 d0             	add    rax,rdx
  802826:	48 83 c0 04          	add    rax,0x4
  80282a:	c7 00 00 10 00 00    	mov    DWORD PTR [rax],0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:47
            //分配内存
            fifos[i].pa= get_phyaddr(req_a_page());
  802830:	b8 00 00 00 00       	mov    eax,0x0
  802835:	48 ba 49 21 80 00 00 	movabs rdx,0x802149
  80283c:	00 00 00 
  80283f:	ff d2                	call   rdx
  802841:	89 c7                	mov    edi,eax
  802843:	48 b8 9f 23 80 00 00 	movabs rax,0x80239f
  80284a:	00 00 00 
  80284d:	ff d0                	call   rax
  80284f:	48 b9 60 1e 40 00 00 	movabs rcx,0x401e60
  802856:	00 00 00 
  802859:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
  80285c:	48 63 d2             	movsxd rdx,edx
  80285f:	48 c1 e2 04          	shl    rdx,0x4
  802863:	48 01 ca             	add    rdx,rcx
  802866:	89 02                	mov    DWORD PTR [rdx],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:48
            return i;
  802868:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  80286b:	eb 13                	jmp    802880 <sys_mkfifo+0x14b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:40 (discriminator 2)
    for(int i=0;i<MAX_FIFOS;i++)
  80286d:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:40 (discriminator 1)
  802871:	83 7d f8 0f          	cmp    DWORD PTR [rbp-0x8],0xf
  802875:	0f 8e 32 ff ff ff    	jle    8027ad <sys_mkfifo+0x78>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:51
        }
    }
    return -1;
  80287b:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:52
}
  802880:	c9                   	leave  
  802881:	c3                   	ret    

0000000000802882 <sys_rmfifo>:
sys_rmfifo():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:55

int sys_rmfifo(int number)
{
  802882:	f3 0f 1e fa          	endbr64 
  802886:	55                   	push   rbp
  802887:	48 89 e5             	mov    rbp,rsp
  80288a:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:56
    for(int i=0;i<MAX_FIFOS;i++)
  80288d:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
  802894:	eb 6b                	jmp    802901 <sys_rmfifo+0x7f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:58
    {
        if(fifos[i].id==number&&fifos[i].flag==1) {
  802896:	48 ba 60 1e 40 00 00 	movabs rdx,0x401e60
  80289d:	00 00 00 
  8028a0:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  8028a3:	48 98                	cdqe   
  8028a5:	48 c1 e0 04          	shl    rax,0x4
  8028a9:	48 01 d0             	add    rax,rdx
  8028ac:	48 83 c0 0c          	add    rax,0xc
  8028b0:	8b 00                	mov    eax,DWORD PTR [rax]
  8028b2:	39 45 ec             	cmp    DWORD PTR [rbp-0x14],eax
  8028b5:	75 46                	jne    8028fd <sys_rmfifo+0x7b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:58 (discriminator 1)
  8028b7:	48 ba 60 1e 40 00 00 	movabs rdx,0x401e60
  8028be:	00 00 00 
  8028c1:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  8028c4:	48 98                	cdqe   
  8028c6:	48 c1 e0 04          	shl    rax,0x4
  8028ca:	48 01 d0             	add    rax,rdx
  8028cd:	48 83 c0 08          	add    rax,0x8
  8028d1:	8b 00                	mov    eax,DWORD PTR [rax]
  8028d3:	83 f8 01             	cmp    eax,0x1
  8028d6:	75 25                	jne    8028fd <sys_rmfifo+0x7b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:59
            fifos[i].flag=0;
  8028d8:	48 ba 60 1e 40 00 00 	movabs rdx,0x401e60
  8028df:	00 00 00 
  8028e2:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  8028e5:	48 98                	cdqe   
  8028e7:	48 c1 e0 04          	shl    rax,0x4
  8028eb:	48 01 d0             	add    rax,rdx
  8028ee:	48 83 c0 08          	add    rax,0x8
  8028f2:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:60
            return i;
  8028f8:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  8028fb:	eb 0f                	jmp    80290c <sys_rmfifo+0x8a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:56 (discriminator 2)
    for(int i=0;i<MAX_FIFOS;i++)
  8028fd:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:56 (discriminator 1)
  802901:	83 7d fc 0f          	cmp    DWORD PTR [rbp-0x4],0xf
  802905:	7e 8f                	jle    802896 <sys_rmfifo+0x14>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:63
        }
    }
    return -1;
  802907:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:64
}
  80290c:	5d                   	pop    rbp
  80290d:	c3                   	ret    

000000000080290e <free_vol>:
free_vol():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:66
int free_vol(int voli)
{
  80290e:	f3 0f 1e fa          	endbr64 
  802912:	55                   	push   rbp
  802913:	48 89 e5             	mov    rbp,rsp
  802916:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:67
    vols[0].stat=VOLUME_STAT_EMPTY;
  802919:	48 b8 40 02 40 00 00 	movabs rax,0x400240
  802920:	00 00 00 
  802923:	c7 40 20 00 00 00 00 	mov    DWORD PTR [rax+0x20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:68
    return 0;
  80292a:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:69
}
  80292f:	5d                   	pop    rbp
  802930:	c3                   	ret    

0000000000802931 <reg_vol>:
reg_vol():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:72

int reg_vol(int disk_drvi, int fs_drvi, char *name)
{
  802931:	f3 0f 1e fa          	endbr64 
  802935:	55                   	push   rbp
  802936:	48 89 e5             	mov    rbp,rsp
  802939:	48 83 ec 20          	sub    rsp,0x20
  80293d:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
  802940:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
  802943:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:73
    for(int i=0;i<MAX_VOLUMES;i++)
  802947:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
  80294e:	e9 1f 01 00 00       	jmp    802a72 <reg_vol+0x141>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:75
    {
        if(vols[i].stat==VOLUME_STAT_EMPTY)
  802953:	48 b9 40 02 40 00 00 	movabs rcx,0x400240
  80295a:	00 00 00 
  80295d:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  802960:	48 63 d0             	movsxd rdx,eax
  802963:	48 89 d0             	mov    rax,rdx
  802966:	48 c1 e0 02          	shl    rax,0x2
  80296a:	48 01 d0             	add    rax,rdx
  80296d:	48 c1 e0 03          	shl    rax,0x3
  802971:	48 01 c8             	add    rax,rcx
  802974:	48 83 c0 20          	add    rax,0x20
  802978:	8b 00                	mov    eax,DWORD PTR [rax]
  80297a:	85 c0                	test   eax,eax
  80297c:	0f 85 ec 00 00 00    	jne    802a6e <reg_vol+0x13d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:78
        {
            extern driver *drvs;
            vols[i].stat=VOLUME_STAT_READY;
  802982:	48 b9 40 02 40 00 00 	movabs rcx,0x400240
  802989:	00 00 00 
  80298c:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80298f:	48 63 d0             	movsxd rdx,eax
  802992:	48 89 d0             	mov    rax,rdx
  802995:	48 c1 e0 02          	shl    rax,0x2
  802999:	48 01 d0             	add    rax,rdx
  80299c:	48 c1 e0 03          	shl    rax,0x3
  8029a0:	48 01 c8             	add    rax,rcx
  8029a3:	48 83 c0 20          	add    rax,0x20
  8029a7:	c7 00 01 00 00 00    	mov    DWORD PTR [rax],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:79
            vols[i].fs= &fs[fs_drvi];
  8029ad:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
  8029b0:	48 63 d0             	movsxd rdx,eax
  8029b3:	48 89 d0             	mov    rax,rdx
  8029b6:	48 01 c0             	add    rax,rax
  8029b9:	48 01 d0             	add    rax,rdx
  8029bc:	48 c1 e0 03          	shl    rax,0x3
  8029c0:	48 ba 80 23 40 00 00 	movabs rdx,0x402380
  8029c7:	00 00 00 
  8029ca:	48 8d 0c 10          	lea    rcx,[rax+rdx*1]
  8029ce:	48 be 40 02 40 00 00 	movabs rsi,0x400240
  8029d5:	00 00 00 
  8029d8:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  8029db:	48 63 d0             	movsxd rdx,eax
  8029de:	48 89 d0             	mov    rax,rdx
  8029e1:	48 c1 e0 02          	shl    rax,0x2
  8029e5:	48 01 d0             	add    rax,rdx
  8029e8:	48 c1 e0 03          	shl    rax,0x3
  8029ec:	48 01 f0             	add    rax,rsi
  8029ef:	48 83 c0 18          	add    rax,0x18
  8029f3:	48 89 08             	mov    QWORD PTR [rax],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:80
            vols[i].disk_drv= get_drv(disk_drvi);
  8029f6:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  8029f9:	89 c7                	mov    edi,eax
  8029fb:	48 b8 61 4e 80 00 00 	movabs rax,0x804e61
  802a02:	00 00 00 
  802a05:	ff d0                	call   rax
  802a07:	48 89 c2             	mov    rdx,rax
  802a0a:	48 be 40 02 40 00 00 	movabs rsi,0x400240
  802a11:	00 00 00 
  802a14:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  802a17:	48 63 c8             	movsxd rcx,eax
  802a1a:	48 89 c8             	mov    rax,rcx
  802a1d:	48 c1 e0 02          	shl    rax,0x2
  802a21:	48 01 c8             	add    rax,rcx
  802a24:	48 c1 e0 03          	shl    rax,0x3
  802a28:	48 01 f0             	add    rax,rsi
  802a2b:	48 83 c0 08          	add    rax,0x8
  802a2f:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:81
            strcpy(vols[i].name,name);
  802a32:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  802a35:	48 63 d0             	movsxd rdx,eax
  802a38:	48 89 d0             	mov    rax,rdx
  802a3b:	48 c1 e0 02          	shl    rax,0x2
  802a3f:	48 01 d0             	add    rax,rdx
  802a42:	48 c1 e0 03          	shl    rax,0x3
  802a46:	48 ba 40 02 40 00 00 	movabs rdx,0x400240
  802a4d:	00 00 00 
  802a50:	48 01 c2             	add    rdx,rax
  802a53:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  802a57:	48 89 c6             	mov    rsi,rax
  802a5a:	48 89 d7             	mov    rdi,rdx
  802a5d:	48 b8 70 04 81 00 00 	movabs rax,0x810470
  802a64:	00 00 00 
  802a67:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:82
            return i;
  802a69:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  802a6c:	eb 13                	jmp    802a81 <reg_vol+0x150>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:73 (discriminator 2)
    for(int i=0;i<MAX_VOLUMES;i++)
  802a6e:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:73 (discriminator 1)
  802a72:	83 7d fc 19          	cmp    DWORD PTR [rbp-0x4],0x19
  802a76:	0f 8e d7 fe ff ff    	jle    802953 <reg_vol+0x22>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:85
        }
    }
    return -1;
  802a7c:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:86
}
  802a81:	c9                   	leave  
  802a82:	c3                   	ret    

0000000000802a83 <sys_tell>:
sys_tell():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:210
//    if(!f)return -1;
//    f->ptr=offset+origin;
//    return 0;
//}
int sys_tell(int fno)
{
  802a83:	f3 0f 1e fa          	endbr64 
  802a87:	55                   	push   rbp
  802a88:	48 89 e5             	mov    rbp,rsp
  802a8b:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:211
    struct file* f=current->openf[fno];
  802a8e:	48 b8 48 85 40 00 00 	movabs rax,0x408548
  802a95:	00 00 00 
  802a98:	48 8b 00             	mov    rax,QWORD PTR [rax]
  802a9b:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
  802a9e:	48 63 d2             	movsxd rdx,edx
  802aa1:	48 83 c2 1a          	add    rdx,0x1a
  802aa5:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
  802aaa:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:212
    return f->position;
  802aae:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  802ab2:	48 8b 00             	mov    rax,QWORD PTR [rax]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:213
}
  802ab5:	5d                   	pop    rbp
  802ab6:	c3                   	ret    

0000000000802ab7 <get_vfs_entry>:
get_vfs_entry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:215
vfs_dir_entry *get_vfs_entry(int fno)
{
  802ab7:	f3 0f 1e fa          	endbr64 
  802abb:	55                   	push   rbp
  802abc:	48 89 e5             	mov    rbp,rsp
  802abf:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:216
    for(int i=0;i<MAX_OPEN_FILES;i++)
  802ac2:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
  802ac9:	eb 4d                	jmp    802b18 <get_vfs_entry+0x61>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:218
    {
        if(opened[i].fno==fno)
  802acb:	48 b9 60 06 40 00 00 	movabs rcx,0x400660
  802ad2:	00 00 00 
  802ad5:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  802ad8:	48 63 d0             	movsxd rdx,eax
  802adb:	48 89 d0             	mov    rax,rdx
  802ade:	48 01 c0             	add    rax,rax
  802ae1:	48 01 d0             	add    rax,rdx
  802ae4:	48 c1 e0 05          	shl    rax,0x5
  802ae8:	48 01 c8             	add    rax,rcx
  802aeb:	8b 00                	mov    eax,DWORD PTR [rax]
  802aed:	39 45 ec             	cmp    DWORD PTR [rbp-0x14],eax
  802af0:	75 22                	jne    802b14 <get_vfs_entry+0x5d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:220
        {
            return &opened[i];
  802af2:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  802af5:	48 63 d0             	movsxd rdx,eax
  802af8:	48 89 d0             	mov    rax,rdx
  802afb:	48 01 c0             	add    rax,rax
  802afe:	48 01 d0             	add    rax,rdx
  802b01:	48 c1 e0 05          	shl    rax,0x5
  802b05:	48 ba 60 06 40 00 00 	movabs rdx,0x400660
  802b0c:	00 00 00 
  802b0f:	48 01 d0             	add    rax,rdx
  802b12:	eb 0f                	jmp    802b23 <get_vfs_entry+0x6c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:216 (discriminator 2)
    for(int i=0;i<MAX_OPEN_FILES;i++)
  802b14:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:216 (discriminator 1)
  802b18:	83 7d fc 3f          	cmp    DWORD PTR [rbp-0x4],0x3f
  802b1c:	7e ad                	jle    802acb <get_vfs_entry+0x14>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:223
        }
    }
    return NULL;
  802b1e:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:224
}
  802b23:	5d                   	pop    rbp
  802b24:	c3                   	ret    

0000000000802b25 <brelse>:
brelse():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:228

//释放缓冲区（只释放这一块）
int brelse(buffer_head* bh)
{
  802b25:	f3 0f 1e fa          	endbr64 
  802b29:	55                   	push   rbp
  802b2a:	48 89 e5             	mov    rbp,rsp
  802b2d:	48 83 ec 10          	sub    rsp,0x10
  802b31:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:229
    wait_on_buf(bh);
  802b35:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  802b39:	48 89 c7             	mov    rdi,rax
  802b3c:	48 b8 15 31 80 00 00 	movabs rax,0x803115
  802b43:	00 00 00 
  802b46:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:230
    if(bh->b_count==0)return -1;
  802b48:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  802b4c:	0f b6 40 14          	movzx  eax,BYTE PTR [rax+0x14]
  802b50:	84 c0                	test   al,al
  802b52:	75 07                	jne    802b5b <brelse+0x36>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:230 (discriminator 1)
  802b54:	b8 ff ff ff ff       	mov    eax,0xffffffff
  802b59:	eb 39                	jmp    802b94 <brelse+0x6f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:231
    bh->b_count--;
  802b5b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  802b5f:	0f b6 40 14          	movzx  eax,BYTE PTR [rax+0x14]
  802b63:	8d 50 ff             	lea    edx,[rax-0x1]
  802b66:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  802b6a:	88 50 14             	mov    BYTE PTR [rax+0x14],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:232
    if(bh->b_count==0)
  802b6d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  802b71:	0f b6 40 14          	movzx  eax,BYTE PTR [rax+0x14]
  802b75:	84 c0                	test   al,al
  802b77:	75 16                	jne    802b8f <brelse+0x6a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:233
        kmfree(bh->b_data);
  802b79:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  802b7d:	48 8b 00             	mov    rax,QWORD PTR [rax]
  802b80:	48 89 c7             	mov    rdi,rax
  802b83:	48 b8 e0 1b 80 00 00 	movabs rax,0x801be0
  802b8a:	00 00 00 
  802b8d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:234
    return 0;
  802b8f:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:235
}
  802b94:	c9                   	leave  
  802b95:	c3                   	ret    

0000000000802b96 <bread>:
bread():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:238
//从设备中读取指定设备的指定块并返回缓冲区
buffer_head* bread(int dev,int blk)
{
  802b96:	f3 0f 1e fa          	endbr64 
  802b9a:	55                   	push   rbp
  802b9b:	48 89 e5             	mov    rbp,rsp
  802b9e:	48 81 ec e0 00 00 00 	sub    rsp,0xe0
  802ba5:	89 bd 2c ff ff ff    	mov    DWORD PTR [rbp-0xd4],edi
  802bab:	89 b5 28 ff ff ff    	mov    DWORD PTR [rbp-0xd8],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:240

    buffer_head *bh=get_buf(dev,blk);
  802bb1:	8b 95 28 ff ff ff    	mov    edx,DWORD PTR [rbp-0xd8]
  802bb7:	8b 85 2c ff ff ff    	mov    eax,DWORD PTR [rbp-0xd4]
  802bbd:	89 d6                	mov    esi,edx
  802bbf:	89 c7                	mov    edi,eax
  802bc1:	48 b8 a8 2e 80 00 00 	movabs rax,0x802ea8
  802bc8:	00 00 00 
  802bcb:	ff d0                	call   rax
  802bcd:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:241
    if(!bh)return -1;//申请失败
  802bd1:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
  802bd6:	75 0c                	jne    802be4 <bread+0x4e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:241 (discriminator 1)
  802bd8:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
  802bdf:	e9 8a 00 00 00       	jmp    802c6e <bread+0xd8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:242
    if(!bh->b_uptodate)
  802be4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  802be8:	0f b6 40 12          	movzx  eax,BYTE PTR [rax+0x12]
  802bec:	84 c0                	test   al,al
  802bee:	75 7a                	jne    802c6a <bread+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:245
    {
        driver_args arg;
        arg.dev=dev;
  802bf0:	8b 85 2c ff ff ff    	mov    eax,DWORD PTR [rbp-0xd4]
  802bf6:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:246
        arg.cmd=DRVF_READ;
  802bf9:	c7 45 d8 02 00 00 00 	mov    DWORD PTR [rbp-0x28],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:247
        arg.dist_addr=bh->b_data;
  802c00:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  802c04:	48 8b 00             	mov    rax,QWORD PTR [rax]
  802c07:	89 85 34 ff ff ff    	mov    DWORD PTR [rbp-0xcc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:248
        arg.len=BLOCK_SIZE;
  802c0d:	c7 85 48 ff ff ff 00 	mov    DWORD PTR [rbp-0xb8],0x200
  802c14:	02 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:249
        arg.lba=bh->b_blocknr;
  802c17:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  802c1b:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  802c1f:	89 85 30 ff ff ff    	mov    DWORD PTR [rbp-0xd0],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:250
        arg.sec_c=BLOCK_SIZE/512;//之后会改
  802c25:	c7 85 48 ff ff ff 01 	mov    DWORD PTR [rbp-0xb8],0x1
  802c2c:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:252
        //lock_buffer(bh);//锁定缓冲块直到读取完成
        int reqi=make_request(&arg);
  802c2f:	48 8d 85 30 ff ff ff 	lea    rax,[rbp-0xd0]
  802c36:	48 89 c7             	mov    rdi,rax
  802c39:	48 b8 8f 4e 80 00 00 	movabs rax,0x804e8f
  802c40:	00 00 00 
  802c43:	ff d0                	call   rax
  802c45:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:253
        wait_on_req(reqi);
  802c48:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  802c4b:	89 c7                	mov    edi,eax
  802c4d:	48 b8 e5 51 80 00 00 	movabs rax,0x8051e5
  802c54:	00 00 00 
  802c57:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:254
        clear_req(reqi);
  802c59:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  802c5c:	89 c7                	mov    edi,eax
  802c5e:	48 b8 22 52 80 00 00 	movabs rax,0x805222
  802c65:	00 00 00 
  802c68:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:256
    }
    return bh;
  802c6a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:257
}
  802c6e:	c9                   	leave  
  802c6f:	c3                   	ret    

0000000000802c70 <vfs_read_file>:
vfs_read_file():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:261


int vfs_read_file(vfs_dir_entry *f,char *buf,int len)
{
  802c70:	f3 0f 1e fa          	endbr64 
  802c74:	55                   	push   rbp
  802c75:	48 89 e5             	mov    rbp,rsp
  802c78:	48 83 ec 40          	sub    rsp,0x40
  802c7c:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  802c80:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
  802c84:	89 55 cc             	mov    DWORD PTR [rbp-0x34],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:262
    int dev=f->dev;
  802c87:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  802c8b:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
  802c8e:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:264 (discriminator 1)
    do{
        int block=get_according_bnr(f);
  802c91:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  802c95:	48 89 c7             	mov    rdi,rax
  802c98:	48 b8 5d 2e 80 00 00 	movabs rax,0x802e5d
  802c9f:	00 00 00 
  802ca2:	ff d0                	call   rax
  802ca4:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:265 (discriminator 1)
        buffer_head* bh=bread(dev,block);
  802ca7:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
  802caa:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  802cad:	89 d6                	mov    esi,edx
  802caf:	89 c7                	mov    edi,eax
  802cb1:	48 b8 96 2b 80 00 00 	movabs rax,0x802b96
  802cb8:	00 00 00 
  802cbb:	ff d0                	call   rax
  802cbd:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:266 (discriminator 1)
        int size=len>BLOCK_SIZE?BLOCK_SIZE:len;//一次最多读一块，如果len大于一块，就只能读一块
  802cc1:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
  802cc4:	ba 00 02 00 00       	mov    edx,0x200
  802cc9:	39 d0                	cmp    eax,edx
  802ccb:	0f 4f c2             	cmovg  eax,edx
  802cce:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:267 (discriminator 1)
        memcpy(buf,bh->b_data,size);
  802cd1:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
  802cd4:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  802cd8:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  802cdb:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  802cdf:	48 89 ce             	mov    rsi,rcx
  802ce2:	48 89 c7             	mov    rdi,rax
  802ce5:	48 b8 72 03 81 00 00 	movabs rax,0x810372
  802cec:	00 00 00 
  802cef:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:268 (discriminator 1)
        len-=BLOCK_SIZE;
  802cf1:	81 6d cc 00 02 00 00 	sub    DWORD PTR [rbp-0x34],0x200
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:270 (discriminator 1)
        //读写指针后移
        f->ptr+=size;
  802cf8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  802cfc:	8b 50 1c             	mov    edx,DWORD PTR [rax+0x1c]
  802cff:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  802d02:	01 c2                	add    edx,eax
  802d04:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  802d08:	89 50 1c             	mov    DWORD PTR [rax+0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:271 (discriminator 1)
        brelse(bh);
  802d0b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  802d0f:	48 89 c7             	mov    rdi,rax
  802d12:	48 b8 25 2b 80 00 00 	movabs rax,0x802b25
  802d19:	00 00 00 
  802d1c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:272 (discriminator 1)
    }while(len>0);
  802d1e:	83 7d cc 00          	cmp    DWORD PTR [rbp-0x34],0x0
  802d22:	0f 8f 69 ff ff ff    	jg     802c91 <vfs_read_file+0x21>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:273
    return 0;
  802d28:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:274
}
  802d2d:	c9                   	leave  
  802d2e:	c3                   	ret    

0000000000802d2f <vfs_write_file>:
vfs_write_file():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:276
int vfs_write_file(vfs_dir_entry *f,char *buf,int len)
{
  802d2f:	f3 0f 1e fa          	endbr64 
  802d33:	55                   	push   rbp
  802d34:	48 89 e5             	mov    rbp,rsp
  802d37:	48 83 ec 40          	sub    rsp,0x40
  802d3b:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  802d3f:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
  802d43:	89 55 cc             	mov    DWORD PTR [rbp-0x34],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:277
    int dev=f->dev;
  802d46:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  802d4a:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
  802d4d:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:279 (discriminator 1)
    do{
        int block=get_according_bnr(f);
  802d50:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  802d54:	48 89 c7             	mov    rdi,rax
  802d57:	48 b8 5d 2e 80 00 00 	movabs rax,0x802e5d
  802d5e:	00 00 00 
  802d61:	ff d0                	call   rax
  802d63:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:280 (discriminator 1)
        buffer_head* bh=get_buf(dev,block);
  802d66:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
  802d69:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  802d6c:	89 d6                	mov    esi,edx
  802d6e:	89 c7                	mov    edi,eax
  802d70:	48 b8 a8 2e 80 00 00 	movabs rax,0x802ea8
  802d77:	00 00 00 
  802d7a:	ff d0                	call   rax
  802d7c:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:281 (discriminator 1)
        int size=len>BLOCK_SIZE?BLOCK_SIZE:len;//一次最多读一块，如果len大于一块，就只能读一块
  802d80:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
  802d83:	ba 00 02 00 00       	mov    edx,0x200
  802d88:	39 d0                	cmp    eax,edx
  802d8a:	0f 4f c2             	cmovg  eax,edx
  802d8d:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:282 (discriminator 1)
        memcpy(bh->b_data,buf,size);
  802d90:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
  802d93:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  802d97:	48 8b 00             	mov    rax,QWORD PTR [rax]
  802d9a:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  802d9e:	48 89 ce             	mov    rsi,rcx
  802da1:	48 89 c7             	mov    rdi,rax
  802da4:	48 b8 72 03 81 00 00 	movabs rax,0x810372
  802dab:	00 00 00 
  802dae:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:283 (discriminator 1)
        len-=BLOCK_SIZE;
  802db0:	81 6d cc 00 02 00 00 	sub    DWORD PTR [rbp-0x34],0x200
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:285 (discriminator 1)
        //读写指针后移
        f->ptr+=size;
  802db7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  802dbb:	8b 50 1c             	mov    edx,DWORD PTR [rax+0x1c]
  802dbe:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  802dc1:	01 c2                	add    edx,eax
  802dc3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  802dc7:	89 50 1c             	mov    DWORD PTR [rax+0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:286 (discriminator 1)
        bh->b_dirt=1;//修改置位
  802dca:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  802dce:	c6 40 13 01          	mov    BYTE PTR [rax+0x13],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:287 (discriminator 1)
        brelse(bh);
  802dd2:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  802dd6:	48 89 c7             	mov    rdi,rax
  802dd9:	48 b8 25 2b 80 00 00 	movabs rax,0x802b25
  802de0:	00 00 00 
  802de3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:288 (discriminator 1)
    }while(len>0);
  802de5:	83 7d cc 00          	cmp    DWORD PTR [rbp-0x34],0x0
  802de9:	0f 8f 61 ff ff ff    	jg     802d50 <vfs_write_file+0x21>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:289
    return 0;
  802def:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:290
}
  802df4:	c9                   	leave  
  802df5:	c3                   	ret    

0000000000802df6 <vfs_seek_file>:
vfs_seek_file():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:293

int vfs_seek_file(vfs_dir_entry *f,int offset,int origin)
{
  802df6:	f3 0f 1e fa          	endbr64 
  802dfa:	55                   	push   rbp
  802dfb:	48 89 e5             	mov    rbp,rsp
  802dfe:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  802e02:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
  802e05:	89 55 f0             	mov    DWORD PTR [rbp-0x10],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:294
    switch (origin)
  802e08:	83 7d f0 02          	cmp    DWORD PTR [rbp-0x10],0x2
  802e0c:	74 35                	je     802e43 <vfs_seek_file+0x4d>
  802e0e:	83 7d f0 02          	cmp    DWORD PTR [rbp-0x10],0x2
  802e12:	7f 3f                	jg     802e53 <vfs_seek_file+0x5d>
  802e14:	83 7d f0 00          	cmp    DWORD PTR [rbp-0x10],0x0
  802e18:	74 08                	je     802e22 <vfs_seek_file+0x2c>
  802e1a:	83 7d f0 01          	cmp    DWORD PTR [rbp-0x10],0x1
  802e1e:	74 0e                	je     802e2e <vfs_seek_file+0x38>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:306
        break;
    case SEEK_END:
        f->ptr=f->size;
        break;
    default:
        break;
  802e20:	eb 31                	jmp    802e53 <vfs_seek_file+0x5d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:297
        f->ptr=offset;
  802e22:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  802e26:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
  802e29:	89 50 1c             	mov    DWORD PTR [rax+0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:298
        break;
  802e2c:	eb 26                	jmp    802e54 <vfs_seek_file+0x5e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:300
        f->ptr+=offset;
  802e2e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  802e32:	8b 50 1c             	mov    edx,DWORD PTR [rax+0x1c]
  802e35:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  802e38:	01 c2                	add    edx,eax
  802e3a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  802e3e:	89 50 1c             	mov    DWORD PTR [rax+0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:301
        break;
  802e41:	eb 11                	jmp    802e54 <vfs_seek_file+0x5e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:303
        f->ptr=f->size;
  802e43:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  802e47:	8b 50 18             	mov    edx,DWORD PTR [rax+0x18]
  802e4a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  802e4e:	89 50 1c             	mov    DWORD PTR [rax+0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:304
        break;
  802e51:	eb 01                	jmp    802e54 <vfs_seek_file+0x5e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:306
        break;
  802e53:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:308
    }
    return f->ptr;
  802e54:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  802e58:	8b 40 1c             	mov    eax,DWORD PTR [rax+0x1c]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:309
}
  802e5b:	5d                   	pop    rbp
  802e5c:	c3                   	ret    

0000000000802e5d <get_according_bnr>:
get_according_bnr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:312
//返回文件ptr在块设备中的块号
int get_according_bnr(vfs_dir_entry *f)
{
  802e5d:	f3 0f 1e fa          	endbr64 
  802e61:	55                   	push   rbp
  802e62:	48 89 e5             	mov    rbp,rsp
  802e65:	48 83 ec 10          	sub    rsp,0x10
  802e69:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:313
    return vols[f->voln].fs->get_according_bnr(f);
  802e6d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  802e71:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
  802e74:	48 b9 40 02 40 00 00 	movabs rcx,0x400240
  802e7b:	00 00 00 
  802e7e:	48 63 d0             	movsxd rdx,eax
  802e81:	48 89 d0             	mov    rax,rdx
  802e84:	48 c1 e0 02          	shl    rax,0x2
  802e88:	48 01 d0             	add    rax,rdx
  802e8b:	48 c1 e0 03          	shl    rax,0x3
  802e8f:	48 01 c8             	add    rax,rcx
  802e92:	48 83 c0 18          	add    rax,0x18
  802e96:	48 8b 00             	mov    rax,QWORD PTR [rax]
  802e99:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
  802e9d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  802ea1:	48 89 c7             	mov    rdi,rax
  802ea4:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:315

}
  802ea6:	c9                   	leave  
  802ea7:	c3                   	ret    

0000000000802ea8 <get_buf>:
get_buf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:318
//获取或者新建一个和dev上block相对应的缓冲区。
buffer_head* get_buf(int dev,int block)
{
  802ea8:	f3 0f 1e fa          	endbr64 
  802eac:	55                   	push   rbp
  802ead:	48 89 e5             	mov    rbp,rsp
  802eb0:	48 83 ec 20          	sub    rsp,0x20
  802eb4:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
  802eb7:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:319
    for(int i=0;i<NR_BUFFERHEADS;i++)
  802eba:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
  802ec1:	e9 0f 01 00 00       	jmp    802fd5 <get_buf+0x12d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:321
    {
        if(buffer_heads[i].b_dev==dev&&buffer_heads[i].b_blocknr==block)
  802ec6:	48 ba 80 26 40 00 00 	movabs rdx,0x402680
  802ecd:	00 00 00 
  802ed0:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  802ed3:	48 98                	cdqe   
  802ed5:	48 c1 e0 06          	shl    rax,0x6
  802ed9:	48 01 d0             	add    rax,rdx
  802edc:	48 83 c0 10          	add    rax,0x10
  802ee0:	0f b7 00             	movzx  eax,WORD PTR [rax]
  802ee3:	0f b7 c0             	movzx  eax,ax
  802ee6:	39 45 ec             	cmp    DWORD PTR [rbp-0x14],eax
  802ee9:	0f 85 e2 00 00 00    	jne    802fd1 <get_buf+0x129>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:321 (discriminator 1)
  802eef:	48 ba 80 26 40 00 00 	movabs rdx,0x402680
  802ef6:	00 00 00 
  802ef9:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  802efc:	48 98                	cdqe   
  802efe:	48 c1 e0 06          	shl    rax,0x6
  802f02:	48 01 d0             	add    rax,rdx
  802f05:	48 83 c0 08          	add    rax,0x8
  802f09:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  802f0c:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
  802f0f:	48 98                	cdqe   
  802f11:	48 39 c2             	cmp    rdx,rax
  802f14:	0f 85 b7 00 00 00    	jne    802fd1 <get_buf+0x129>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:323
        {
            repeat:
  802f1a:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:324
            wait_on_buf(&buffer_heads[i]);//等待解锁
  802f1b:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  802f1e:	48 98                	cdqe   
  802f20:	48 c1 e0 06          	shl    rax,0x6
  802f24:	48 89 c2             	mov    rdx,rax
  802f27:	48 b8 80 26 40 00 00 	movabs rax,0x402680
  802f2e:	00 00 00 
  802f31:	48 01 d0             	add    rax,rdx
  802f34:	48 89 c7             	mov    rdi,rax
  802f37:	48 b8 15 31 80 00 00 	movabs rax,0x803115
  802f3e:	00 00 00 
  802f41:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:325
            if(buffer_heads[i].b_count>0)//别的进程正在用
  802f43:	48 ba 80 26 40 00 00 	movabs rdx,0x402680
  802f4a:	00 00 00 
  802f4d:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  802f50:	48 98                	cdqe   
  802f52:	48 c1 e0 06          	shl    rax,0x6
  802f56:	48 01 d0             	add    rax,rdx
  802f59:	48 83 c0 14          	add    rax,0x14
  802f5d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  802f60:	84 c0                	test   al,al
  802f62:	74 02                	je     802f66 <get_buf+0xbe>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:326
                goto repeat;
  802f64:	eb b5                	jmp    802f1b <get_buf+0x73>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:327
            if(!(buffer_heads[i].b_dev==dev&&buffer_heads[i].b_blocknr==block))//别的进程修改了
  802f66:	48 ba 80 26 40 00 00 	movabs rdx,0x402680
  802f6d:	00 00 00 
  802f70:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  802f73:	48 98                	cdqe   
  802f75:	48 c1 e0 06          	shl    rax,0x6
  802f79:	48 01 d0             	add    rax,rdx
  802f7c:	48 83 c0 10          	add    rax,0x10
  802f80:	0f b7 00             	movzx  eax,WORD PTR [rax]
  802f83:	0f b7 c0             	movzx  eax,ax
  802f86:	39 45 ec             	cmp    DWORD PTR [rbp-0x14],eax
  802f89:	75 45                	jne    802fd0 <get_buf+0x128>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:327 (discriminator 2)
  802f8b:	48 ba 80 26 40 00 00 	movabs rdx,0x402680
  802f92:	00 00 00 
  802f95:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  802f98:	48 98                	cdqe   
  802f9a:	48 c1 e0 06          	shl    rax,0x6
  802f9e:	48 01 d0             	add    rax,rdx
  802fa1:	48 83 c0 08          	add    rax,0x8
  802fa5:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  802fa8:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
  802fab:	48 98                	cdqe   
  802fad:	48 39 c2             	cmp    rdx,rax
  802fb0:	75 1e                	jne    802fd0 <get_buf+0x128>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:329
                continue;
            return &buffer_heads[i];
  802fb2:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  802fb5:	48 98                	cdqe   
  802fb7:	48 c1 e0 06          	shl    rax,0x6
  802fbb:	48 89 c2             	mov    rdx,rax
  802fbe:	48 b8 80 26 40 00 00 	movabs rax,0x402680
  802fc5:	00 00 00 
  802fc8:	48 01 d0             	add    rax,rdx
  802fcb:	e9 43 01 00 00       	jmp    803113 <get_buf+0x26b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:328
                continue;
  802fd0:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:319 (discriminator 2)
    for(int i=0;i<NR_BUFFERHEADS;i++)
  802fd1:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:319 (discriminator 1)
  802fd5:	83 7d fc 1f          	cmp    DWORD PTR [rbp-0x4],0x1f
  802fd9:	0f 8e e7 fe ff ff    	jle    802ec6 <get_buf+0x1e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:333
        }
    }
    //空头中找
    for(int i=0;i<NR_BUFFERHEADS;i++)
  802fdf:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
  802fe6:	e9 1e 01 00 00       	jmp    803109 <get_buf+0x261>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:335
    {
        if(buffer_heads[i].b_count==0)
  802feb:	48 ba 80 26 40 00 00 	movabs rdx,0x402680
  802ff2:	00 00 00 
  802ff5:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  802ff8:	48 98                	cdqe   
  802ffa:	48 c1 e0 06          	shl    rax,0x6
  802ffe:	48 01 d0             	add    rax,rdx
  803001:	48 83 c0 14          	add    rax,0x14
  803005:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  803008:	84 c0                	test   al,al
  80300a:	0f 85 f5 00 00 00    	jne    803105 <get_buf+0x25d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:337
        {
            if(buffer_heads[i].b_dirt)
  803010:	48 ba 80 26 40 00 00 	movabs rdx,0x402680
  803017:	00 00 00 
  80301a:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  80301d:	48 98                	cdqe   
  80301f:	48 c1 e0 06          	shl    rax,0x6
  803023:	48 01 d0             	add    rax,rdx
  803026:	48 83 c0 13          	add    rax,0x13
  80302a:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  80302d:	84 c0                	test   al,al
  80302f:	74 50                	je     803081 <get_buf+0x1d9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:339
            {
                sync_buf(&buffer_heads[i]);
  803031:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  803034:	48 98                	cdqe   
  803036:	48 c1 e0 06          	shl    rax,0x6
  80303a:	48 89 c2             	mov    rdx,rax
  80303d:	48 b8 80 26 40 00 00 	movabs rax,0x402680
  803044:	00 00 00 
  803047:	48 01 d0             	add    rax,rdx
  80304a:	48 89 c7             	mov    rdi,rax
  80304d:	48 b8 c8 31 80 00 00 	movabs rax,0x8031c8
  803054:	00 00 00 
  803057:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:340
                wait_on_buf(&buffer_heads[i]);
  803059:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  80305c:	48 98                	cdqe   
  80305e:	48 c1 e0 06          	shl    rax,0x6
  803062:	48 89 c2             	mov    rdx,rax
  803065:	48 b8 80 26 40 00 00 	movabs rax,0x402680
  80306c:	00 00 00 
  80306f:	48 01 d0             	add    rax,rdx
  803072:	48 89 c7             	mov    rdi,rax
  803075:	48 b8 15 31 80 00 00 	movabs rax,0x803115
  80307c:	00 00 00 
  80307f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:342
            }
            buffer_heads[i].b_count++;
  803081:	48 ba 80 26 40 00 00 	movabs rdx,0x402680
  803088:	00 00 00 
  80308b:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  80308e:	48 98                	cdqe   
  803090:	48 c1 e0 06          	shl    rax,0x6
  803094:	48 01 d0             	add    rax,rdx
  803097:	48 83 c0 14          	add    rax,0x14
  80309b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  80309e:	8d 50 01             	lea    edx,[rax+0x1]
  8030a1:	48 b9 80 26 40 00 00 	movabs rcx,0x402680
  8030a8:	00 00 00 
  8030ab:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  8030ae:	48 98                	cdqe   
  8030b0:	48 c1 e0 06          	shl    rax,0x6
  8030b4:	48 01 c8             	add    rax,rcx
  8030b7:	48 83 c0 14          	add    rax,0x14
  8030bb:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:344
            //给buffer分配一个实际的缓冲区
            buffer_heads[i].b_data= kmalloc();
  8030bd:	b8 00 00 00 00       	mov    eax,0x0
  8030c2:	48 ba d4 18 80 00 00 	movabs rdx,0x8018d4
  8030c9:	00 00 00 
  8030cc:	ff d2                	call   rdx
  8030ce:	48 89 c2             	mov    rdx,rax
  8030d1:	48 b9 80 26 40 00 00 	movabs rcx,0x402680
  8030d8:	00 00 00 
  8030db:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  8030de:	48 98                	cdqe   
  8030e0:	48 c1 e0 06          	shl    rax,0x6
  8030e4:	48 01 c8             	add    rax,rcx
  8030e7:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:345
            return &buffer_heads[i];
  8030ea:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  8030ed:	48 98                	cdqe   
  8030ef:	48 c1 e0 06          	shl    rax,0x6
  8030f3:	48 89 c2             	mov    rdx,rax
  8030f6:	48 b8 80 26 40 00 00 	movabs rax,0x402680
  8030fd:	00 00 00 
  803100:	48 01 d0             	add    rax,rdx
  803103:	eb 0e                	jmp    803113 <get_buf+0x26b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:333 (discriminator 2)
    for(int i=0;i<NR_BUFFERHEADS;i++)
  803105:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:333 (discriminator 1)
  803109:	83 7d f8 1f          	cmp    DWORD PTR [rbp-0x8],0x1f
  80310d:	0f 8e d8 fe ff ff    	jle    802feb <get_buf+0x143>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:348
        }
    }
}
  803113:	c9                   	leave  
  803114:	c3                   	ret    

0000000000803115 <wait_on_buf>:
wait_on_buf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:351

void wait_on_buf(buffer_head* bh)
{
  803115:	f3 0f 1e fa          	endbr64 
  803119:	55                   	push   rbp
  80311a:	48 89 e5             	mov    rbp,rsp
  80311d:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:353
    //等待缓冲区解锁
    while (bh->b_lock);
  803121:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:353 (discriminator 1)
  803122:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  803126:	0f b6 40 15          	movzx  eax,BYTE PTR [rax+0x15]
  80312a:	84 c0                	test   al,al
  80312c:	75 f4                	jne    803122 <wait_on_buf+0xd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:355
    
}
  80312e:	90                   	nop
  80312f:	90                   	nop
  803130:	5d                   	pop    rbp
  803131:	c3                   	ret    

0000000000803132 <scan_dev>:
scan_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:359

//扫描块设备，读取分区，识别文件系统
int scan_dev(int dev)
{
  803132:	f3 0f 1e fa          	endbr64 
  803136:	55                   	push   rbp
  803137:	48 89 e5             	mov    rbp,rsp
  80313a:	48 83 ec 30          	sub    rsp,0x30
  80313e:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:363
//    device *blkdev=get_dev(dev);
//    buffer_head* bh=bread(dev,0);
//    if(!bh)return -1;
    char* buf= kmalloc();
  803141:	b8 00 00 00 00       	mov    eax,0x0
  803146:	48 ba d4 18 80 00 00 	movabs rdx,0x8018d4
  80314d:	00 00 00 
  803150:	ff d2                	call   rdx
  803152:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:364
    int r=request(DISK_MAJOR_MAJOR,DISK_CMD_READ,0,1,buf);
  803156:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80315a:	49 89 c0             	mov    r8,rax
  80315d:	b9 01 00 00 00       	mov    ecx,0x1
  803162:	ba 00 00 00 00       	mov    edx,0x0
  803167:	be 20 00 00 00       	mov    esi,0x20
  80316c:	bf 00 00 00 00       	mov    edi,0x0
  803171:	48 b8 72 c1 80 00 00 	movabs rax,0x80c172
  803178:	00 00 00 
  80317b:	ff d0                	call   rax
  80317d:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:365
    chk_result(r);
  803180:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  803183:	89 c7                	mov    edi,eax
  803185:	48 b8 f6 c9 80 00 00 	movabs rax,0x80c9f6
  80318c:	00 00 00 
  80318f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:367

    dpt_t* dpte=buf+0x1be;
  803191:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  803195:	48 05 be 01 00 00    	add    rax,0x1be
  80319b:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:368
    for(int i=0;i<4;i++)
  80319f:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
  8031a6:	eb 13                	jmp    8031bb <scan_dev+0x89>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:371 (discriminator 3)
    {
//        blkdev->par[i].type=dpte->type;
        int stlba=dpte->start_lba;
  8031a8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  8031ac:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
  8031af:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:387 (discriminator 3)
//        {
//            printf("err:unrecognised partition fs.\n");
//        }

//        blkdev->par[i].end_sec=dpte->end_lba;
        dpte++;
  8031b2:	48 83 45 f8 10       	add    QWORD PTR [rbp-0x8],0x10
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:368 (discriminator 3)
    for(int i=0;i<4;i++)
  8031b7:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:368 (discriminator 1)
  8031bb:	83 7d f4 03          	cmp    DWORD PTR [rbp-0xc],0x3
  8031bf:	7e e7                	jle    8031a8 <scan_dev+0x76>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:390
    }
//    brelse(bh);
    return 0;
  8031c1:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:391
}
  8031c6:	c9                   	leave  
  8031c7:	c3                   	ret    

00000000008031c8 <sync_buf>:
sync_buf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:394

int sync_buf(buffer_head* bh)
{
  8031c8:	f3 0f 1e fa          	endbr64 
  8031cc:	55                   	push   rbp
  8031cd:	48 89 e5             	mov    rbp,rsp
  8031d0:	48 83 ec 20          	sub    rsp,0x20
  8031d4:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:395
    int dev=bh->b_dev;
  8031d8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  8031dc:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
  8031e0:	0f b7 c0             	movzx  eax,ax
  8031e3:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:396
    int block=bh->b_blocknr;
  8031e6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  8031ea:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  8031ee:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:398
    //这里需要调用块设备写函数write_block
    return write_block(dev,block,bh->b_data,BLOCK_SIZE);
  8031f1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  8031f5:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  8031f8:	8b 75 f8             	mov    esi,DWORD PTR [rbp-0x8]
  8031fb:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  8031fe:	b9 00 02 00 00       	mov    ecx,0x200
  803203:	89 c7                	mov    edi,eax
  803205:	48 b8 13 32 80 00 00 	movabs rax,0x803213
  80320c:	00 00 00 
  80320f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:400

}
  803211:	c9                   	leave  
  803212:	c3                   	ret    

0000000000803213 <write_block>:
write_block():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:403
//操作块设备函数
int write_block(int dev,int block,char *buf,int len)
{
  803213:	f3 0f 1e fa          	endbr64 
  803217:	55                   	push   rbp
  803218:	48 89 e5             	mov    rbp,rsp
  80321b:	48 83 ec 30          	sub    rsp,0x30
  80321f:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
  803222:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
  803225:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
  803229:	89 4d dc             	mov    DWORD PTR [rbp-0x24],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:405 (discriminator 1)
    do{
        buffer_head* bh=get_buf(dev,block);
  80322c:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
  80322f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  803232:	89 d6                	mov    esi,edx
  803234:	89 c7                	mov    edi,eax
  803236:	48 b8 a8 2e 80 00 00 	movabs rax,0x802ea8
  80323d:	00 00 00 
  803240:	ff d0                	call   rax
  803242:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:406 (discriminator 1)
        int size=len>BLOCK_SIZE?BLOCK_SIZE:len;//一次最多读一块，如果len大于一块，就只能读一块
  803246:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  803249:	ba 00 02 00 00       	mov    edx,0x200
  80324e:	39 d0                	cmp    eax,edx
  803250:	0f 4f c2             	cmovg  eax,edx
  803253:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:407 (discriminator 1)
        memcpy(bh->b_data,buf,size);
  803256:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
  803259:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80325d:	48 8b 00             	mov    rax,QWORD PTR [rax]
  803260:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  803264:	48 89 ce             	mov    rsi,rcx
  803267:	48 89 c7             	mov    rdi,rax
  80326a:	48 b8 72 03 81 00 00 	movabs rax,0x810372
  803271:	00 00 00 
  803274:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:408 (discriminator 1)
        len-=BLOCK_SIZE;
  803276:	81 6d dc 00 02 00 00 	sub    DWORD PTR [rbp-0x24],0x200
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:409 (discriminator 1)
        bh->b_dirt=1;//修改置位
  80327d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  803281:	c6 40 13 01          	mov    BYTE PTR [rax+0x13],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:410 (discriminator 1)
        brelse(bh);
  803285:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  803289:	48 89 c7             	mov    rdi,rax
  80328c:	48 b8 25 2b 80 00 00 	movabs rax,0x802b25
  803293:	00 00 00 
  803296:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:411 (discriminator 1)
    }while(len>0);
  803298:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
  80329c:	7f 8e                	jg     80322c <write_block+0x19>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:412
    return 0;
  80329e:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:413
}
  8032a3:	c9                   	leave  
  8032a4:	c3                   	ret    

00000000008032a5 <read_block>:
read_block():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:415
int read_block(int dev,int block,char* buf,int len)
{
  8032a5:	f3 0f 1e fa          	endbr64 
  8032a9:	55                   	push   rbp
  8032aa:	48 89 e5             	mov    rbp,rsp
  8032ad:	48 83 ec 30          	sub    rsp,0x30
  8032b1:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
  8032b4:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
  8032b7:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
  8032bb:	89 4d dc             	mov    DWORD PTR [rbp-0x24],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:417 (discriminator 1)
    do{
        buffer_head* bh=bread(dev,block);
  8032be:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
  8032c1:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  8032c4:	89 d6                	mov    esi,edx
  8032c6:	89 c7                	mov    edi,eax
  8032c8:	48 b8 96 2b 80 00 00 	movabs rax,0x802b96
  8032cf:	00 00 00 
  8032d2:	ff d0                	call   rax
  8032d4:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:418 (discriminator 1)
        int size=len>BLOCK_SIZE?BLOCK_SIZE:len;//一次最多读一块，如果len大于一块，就只能读一块
  8032d8:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  8032db:	ba 00 02 00 00       	mov    edx,0x200
  8032e0:	39 d0                	cmp    eax,edx
  8032e2:	0f 4f c2             	cmovg  eax,edx
  8032e5:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:419 (discriminator 1)
        memcpy(buf,bh->b_data,size);
  8032e8:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
  8032eb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  8032ef:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  8032f2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  8032f6:	48 89 ce             	mov    rsi,rcx
  8032f9:	48 89 c7             	mov    rdi,rax
  8032fc:	48 b8 72 03 81 00 00 	movabs rax,0x810372
  803303:	00 00 00 
  803306:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:420 (discriminator 1)
        len-=BLOCK_SIZE;
  803308:	81 6d dc 00 02 00 00 	sub    DWORD PTR [rbp-0x24],0x200
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:421 (discriminator 1)
        brelse(bh);
  80330f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  803313:	48 89 c7             	mov    rdi,rax
  803316:	48 b8 25 2b 80 00 00 	movabs rax,0x802b25
  80331d:	00 00 00 
  803320:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:422 (discriminator 1)
    }while(len>0);
  803322:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
  803326:	7f 96                	jg     8032be <read_block+0x19>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:423
    return 0;
  803328:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:424
}
  80332d:	c9                   	leave  
  80332e:	c3                   	ret    

000000000080332f <init_vfs>:
init_vfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:427

int init_vfs()
{
  80332f:	f3 0f 1e fa          	endbr64 
  803333:	55                   	push   rbp
  803334:	48 89 e5             	mov    rbp,rsp
  803337:	48 83 ec 10          	sub    rsp,0x10
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:431
    //扫描块设备
    extern device *dev_tree[];
    extern device devs[];
    blk_dev* p=dev_tree[DEVTREE_BLKDEVI];
  80333b:	48 b8 80 84 40 00 00 	movabs rax,0x408480
  803342:	00 00 00 
  803345:	48 8b 00             	mov    rax,QWORD PTR [rax]
  803348:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:432
    for(;p;p=p->next)
  80334c:	eb 4e                	jmp    80339c <init_vfs+0x6d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:434
    {
        if(scan_dev(p-devs)!=0)return -1;
  80334e:	48 ba 80 2e 40 00 00 	movabs rdx,0x402e80
  803355:	00 00 00 
  803358:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80335c:	48 29 d0             	sub    rax,rdx
  80335f:	48 c1 f8 02          	sar    rax,0x2
  803363:	48 89 c2             	mov    rdx,rax
  803366:	48 b8 19 9c 8f c1 f9 	movabs rax,0x8f9c18f9c18f9c19
  80336d:	18 9c 8f 
  803370:	48 0f af c2          	imul   rax,rdx
  803374:	89 c7                	mov    edi,eax
  803376:	48 b8 32 31 80 00 00 	movabs rax,0x803132
  80337d:	00 00 00 
  803380:	ff d0                	call   rax
  803382:	85 c0                	test   eax,eax
  803384:	74 07                	je     80338d <init_vfs+0x5e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:434 (discriminator 1)
  803386:	b8 ff ff ff ff       	mov    eax,0xffffffff
  80338b:	eb 1b                	jmp    8033a8 <init_vfs+0x79>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:432
    for(;p;p=p->next)
  80338d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  803391:	48 8b 80 90 00 00 00 	mov    rax,QWORD PTR [rax+0x90]
  803398:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:432 (discriminator 1)
  80339c:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
  8033a1:	75 ab                	jne    80334e <init_vfs+0x1f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:437
    }

    return 0;
  8033a3:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/virfs.c:438
}
  8033a8:	c9                   	leave  
  8033a9:	c3                   	ret    

00000000008033aa <make_dentry>:
make_dentry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:34
};
struct dir_entry_operations dev_dir_dops={

};
static int devd_fd=-1;
void make_dentry(struct dir_entry* d,char* name,int namelen,struct dir_entry* parent,struct dir_entry_operations* dops){
  8033aa:	f3 0f 1e fa          	endbr64 
  8033ae:	55                   	push   rbp
  8033af:	48 89 e5             	mov    rbp,rsp
  8033b2:	48 83 c4 80          	add    rsp,0xffffffffffffff80
  8033b6:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
  8033ba:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
  8033be:	89 55 9c             	mov    DWORD PTR [rbp-0x64],edx
  8033c1:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
  8033c5:	4c 89 45 88          	mov    QWORD PTR [rbp-0x78],r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:35
    strcpy(d->name,name);
  8033c9:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  8033cd:	48 8b 00             	mov    rax,QWORD PTR [rax]
  8033d0:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
  8033d4:	48 89 d6             	mov    rsi,rdx
  8033d7:	48 89 c7             	mov    rdi,rax
  8033da:	48 b8 70 04 81 00 00 	movabs rax,0x810470
  8033e1:	00 00 00 
  8033e4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:36
    d->name_length=namelen;
  8033e6:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  8033ea:	8b 55 9c             	mov    edx,DWORD PTR [rbp-0x64]
  8033ed:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:38
    //添加dentry的操作方法，这样能够查找设备
    d->dir_ops=dops;
  8033f0:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  8033f4:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
  8033f8:	48 89 50 50          	mov    QWORD PTR [rax+0x50],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:39
    list_init(&d->subdirs_list);
  8033fc:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  803400:	48 83 c0 28          	add    rax,0x28
  803404:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    struct List * next;
};

__attribute__((always_inline)) inline void list_init(struct List * list)
{
    list->prev = NULL;
  803408:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  80340c:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
  803413:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  803417:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
  80341e:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
  80341f:	90                   	nop
make_dentry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:40
    list_init(&d->child_node);
  803420:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  803424:	48 83 c0 10          	add    rax,0x10
  803428:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
  80342c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  803430:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
  803437:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  80343b:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
  803442:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
  803443:	90                   	nop
make_dentry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:41
    d->child_node.data=d;
  803444:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  803448:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
  80344c:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:42
    d->parent=parent;
  803450:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  803454:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
  803458:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:43
    list_add(&parent->subdirs_list,&d->child_node);
  80345c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  803460:	48 83 c0 10          	add    rax,0x10
  803464:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
  803468:	48 83 c2 28          	add    rdx,0x28
  80346c:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
  803470:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:33
        new->next->prev = new;
    entry->next = new;
}
__attribute__((always_inline)) inline void list_add(struct List * entry,struct List * new)	////add to the tail of the link
{
    if(entry->next==NULL)
  803474:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  803478:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80347c:	48 85 c0             	test   rax,rax
  80347f:	75 58                	jne    8034d9 <make_dentry+0x12f>
  803481:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  803485:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  803489:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80348d:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
  803491:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  803495:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
  803499:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  80349d:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
  8034a1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  8034a5:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  8034a9:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
  8034ac:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  8034b0:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  8034b4:	48 85 c0             	test   rax,rax
  8034b7:	74 0f                	je     8034c8 <make_dentry+0x11e>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
  8034b9:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  8034bd:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  8034c1:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  8034c5:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:29
    entry->next = new;
  8034c8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  8034cc:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  8034d0:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
  8034d4:	e9 9c 00 00 00       	jmp    803575 <make_dentry+0x1cb>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:36
        list_add_to_behind(entry,new);
    else{
        struct List* p=entry;
  8034d9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  8034dd:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
  8034e1:	eb 21                	jmp    803504 <make_dentry+0x15a>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:38
            if(p->data==new->data)
  8034e3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  8034e7:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
  8034eb:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  8034ef:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  8034f3:	48 39 c2             	cmp    rdx,rax
  8034f6:	74 7c                	je     803574 <make_dentry+0x1ca>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
  8034f8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  8034fc:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  803500:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  803504:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  803508:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80350c:	48 85 c0             	test   rax,rax
  80350f:	74 0e                	je     80351f <make_dentry+0x175>
  803511:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  803515:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  803519:	48 39 45 d8          	cmp    QWORD PTR [rbp-0x28],rax
  80351d:	75 c4                	jne    8034e3 <make_dentry+0x139>
  80351f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  803523:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
  803527:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80352b:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
  80352f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  803533:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
  803537:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80353b:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
  80353f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  803543:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  803547:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
  80354a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80354e:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  803552:	48 85 c0             	test   rax,rax
  803555:	74 0f                	je     803566 <make_dentry+0x1bc>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
  803557:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80355b:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80355f:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  803563:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:29
    entry->next = new;
  803566:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  80356a:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  80356e:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
  803572:	eb 01                	jmp    803575 <make_dentry+0x1cb>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:39
                return;
  803574:	90                   	nop
make_dentry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:44
}
  803575:	90                   	nop
  803576:	c9                   	leave  
  803577:	c3                   	ret    

0000000000803578 <make_inode>:
make_inode():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:45
void make_inode(struct index_node* i,struct index_node_operations* iops,struct file_operations* fops,unsigned long attr,super_block* sb){
  803578:	f3 0f 1e fa          	endbr64 
  80357c:	55                   	push   rbp
  80357d:	48 89 e5             	mov    rbp,rsp
  803580:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  803584:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  803588:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  80358c:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  803590:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:46
    i->f_ops=fops;
  803594:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  803598:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  80359c:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:47
    i->attribute=attr;
  8035a0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  8035a4:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  8035a8:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:48
    i->sb=sb;
  8035ac:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  8035b0:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  8035b4:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:49
    i->file_size=0;
  8035b8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  8035bc:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:50
    i->inode_ops=iops;
  8035c3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  8035c7:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  8035cb:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:51
}
  8035cf:	90                   	nop
  8035d0:	5d                   	pop    rbp
  8035d1:	c3                   	ret    

00000000008035d2 <make_devf>:
make_devf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:52
void make_devf(struct dir_entry* d,struct index_node* i,char* name,struct dir_entry* ddev,struct file_operations* fops){
  8035d2:	f3 0f 1e fa          	endbr64 
  8035d6:	55                   	push   rbp
  8035d7:	48 89 e5             	mov    rbp,rsp
  8035da:	53                   	push   rbx
  8035db:	48 83 ec 78          	sub    rsp,0x78
  8035df:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
  8035e3:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
  8035e7:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
  8035eb:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
  8035ef:	4c 89 45 88          	mov    QWORD PTR [rbp-0x78],r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:53
    make_dentry(d,name, strlen(name),root_sb->root,&dev_dir_dops);
  8035f3:	48 b8 48 b6 41 00 00 	movabs rax,0x41b648
  8035fa:	00 00 00 
  8035fd:	48 8b 00             	mov    rax,QWORD PTR [rax]
  803600:	48 8b 18             	mov    rbx,QWORD PTR [rax]
  803603:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  803607:	48 89 c7             	mov    rdi,rax
  80360a:	48 b8 8f 06 81 00 00 	movabs rax,0x81068f
  803611:	00 00 00 
  803614:	ff d0                	call   rax
  803616:	89 c2                	mov    edx,eax
  803618:	48 8b 75 98          	mov    rsi,QWORD PTR [rbp-0x68]
  80361c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  803620:	49 b8 a0 84 40 00 00 	movabs r8,0x4084a0
  803627:	00 00 00 
  80362a:	48 89 d9             	mov    rcx,rbx
  80362d:	48 89 c7             	mov    rdi,rax
  803630:	48 b8 aa 33 80 00 00 	movabs rax,0x8033aa
  803637:	00 00 00 
  80363a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:54
    d->dir_inode=i;
  80363c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  803640:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
  803644:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:55
    make_inode(i,ddev->dir_inode->inode_ops,fops,FS_ATTR_DEVICE,root_sb);
  803648:	48 b8 48 b6 41 00 00 	movabs rax,0x41b648
  80364f:	00 00 00 
  803652:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  803655:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  803659:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
  80365d:	48 8b 70 28          	mov    rsi,QWORD PTR [rax+0x28]
  803661:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
  803665:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  803669:	49 89 c8             	mov    r8,rcx
  80366c:	b9 04 00 00 00       	mov    ecx,0x4
  803671:	48 89 c7             	mov    rdi,rax
  803674:	48 b8 78 35 80 00 00 	movabs rax,0x803578
  80367b:	00 00 00 
  80367e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:56
    list_add(&ddev->subdirs_list,&d->child_node);//添加到/dev下
  803680:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  803684:	48 83 c0 10          	add    rax,0x10
  803688:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
  80368c:	48 83 c2 28          	add    rdx,0x28
  803690:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  803694:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:33
    if(entry->next==NULL)
  803698:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80369c:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  8036a0:	48 85 c0             	test   rax,rax
  8036a3:	75 58                	jne    8036fd <make_devf+0x12b>
  8036a5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  8036a9:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
  8036ad:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  8036b1:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
  8036b5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  8036b9:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
  8036bd:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  8036c1:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
  8036c5:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  8036c9:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  8036cd:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
  8036d0:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  8036d4:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  8036d8:	48 85 c0             	test   rax,rax
  8036db:	74 0f                	je     8036ec <make_devf+0x11a>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
  8036dd:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  8036e1:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  8036e5:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  8036e9:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:29
    entry->next = new;
  8036ec:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  8036f0:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  8036f4:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
  8036f8:	e9 9c 00 00 00       	jmp    803799 <make_devf+0x1c7>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:36
        struct List* p=entry;
  8036fd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  803701:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
  803705:	eb 21                	jmp    803728 <make_devf+0x156>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:38
            if(p->data==new->data)
  803707:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80370b:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
  80370f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  803713:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  803717:	48 39 c2             	cmp    rdx,rax
  80371a:	74 7c                	je     803798 <make_devf+0x1c6>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
  80371c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  803720:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  803724:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  803728:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80372c:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  803730:	48 85 c0             	test   rax,rax
  803733:	74 0e                	je     803743 <make_devf+0x171>
  803735:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  803739:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80373d:	48 39 45 c8          	cmp    QWORD PTR [rbp-0x38],rax
  803741:	75 c4                	jne    803707 <make_devf+0x135>
  803743:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  803747:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
  80374b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  80374f:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
  803753:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  803757:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
  80375b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  80375f:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
  803763:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  803767:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
  80376b:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
  80376e:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  803772:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  803776:	48 85 c0             	test   rax,rax
  803779:	74 0f                	je     80378a <make_devf+0x1b8>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
  80377b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  80377f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  803783:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  803787:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:29
    entry->next = new;
  80378a:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  80378e:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  803792:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
  803796:	eb 01                	jmp    803799 <make_devf+0x1c7>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:39
                return;
  803798:	90                   	nop
make_devf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:57
}
  803799:	90                   	nop
  80379a:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
  80379e:	c9                   	leave  
  80379f:	c3                   	ret    

00000000008037a0 <init_devman>:
init_devman():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:65
 * 这个/dev文件夹的dentry和inode等数据由devman管理，根文件系统切换时，这个文件夹会跟着挂载到新文件系统的根目录下。
 * */
struct dir_entry* ddev=NULL,*dmnt,*dconsole,*dhd0,*dtty;
struct file ftty;
int init_devman()
{
  8037a0:	f3 0f 1e fa          	endbr64 
  8037a4:	55                   	push   rbp
  8037a5:	48 89 e5             	mov    rbp,rsp
  8037a8:	48 83 ec 30          	sub    rsp,0x30
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:67
    //创建dev文件夹
    ddev=(struct dir_entry*) kmalloc();
  8037ac:	b8 00 00 00 00       	mov    eax,0x0
  8037b1:	48 ba d4 18 80 00 00 	movabs rdx,0x8018d4
  8037b8:	00 00 00 
  8037bb:	ff d2                	call   rdx
  8037bd:	48 89 c2             	mov    rdx,rax
  8037c0:	48 b8 c0 84 40 00 00 	movabs rax,0x4084c0
  8037c7:	00 00 00 
  8037ca:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:68
    struct index_node* idev=ddev+1;
  8037cd:	48 b8 c0 84 40 00 00 	movabs rax,0x4084c0
  8037d4:	00 00 00 
  8037d7:	48 8b 00             	mov    rax,QWORD PTR [rax]
  8037da:	48 83 c0 58          	add    rax,0x58
  8037de:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:69
    ddev->name=idev+1;
  8037e2:	48 b8 c0 84 40 00 00 	movabs rax,0x4084c0
  8037e9:	00 00 00 
  8037ec:	48 8b 00             	mov    rax,QWORD PTR [rax]
  8037ef:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  8037f3:	48 83 c2 38          	add    rdx,0x38
  8037f7:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:70
    make_dentry(ddev,"dev",3,root_sb->root,root_sb->root->dir_ops);
  8037fa:	48 b8 48 b6 41 00 00 	movabs rax,0x41b648
  803801:	00 00 00 
  803804:	48 8b 00             	mov    rax,QWORD PTR [rax]
  803807:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80380a:	48 8b 48 50          	mov    rcx,QWORD PTR [rax+0x50]
  80380e:	48 b8 48 b6 41 00 00 	movabs rax,0x41b648
  803815:	00 00 00 
  803818:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80381b:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  80381e:	48 b8 c0 84 40 00 00 	movabs rax,0x4084c0
  803825:	00 00 00 
  803828:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80382b:	49 89 c8             	mov    r8,rcx
  80382e:	48 89 d1             	mov    rcx,rdx
  803831:	ba 03 00 00 00       	mov    edx,0x3
  803836:	48 be 50 8a 81 00 00 	movabs rsi,0x818a50
  80383d:	00 00 00 
  803840:	48 89 c7             	mov    rdi,rax
  803843:	48 b8 aa 33 80 00 00 	movabs rax,0x8033aa
  80384a:	00 00 00 
  80384d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:71
    ddev->dir_inode=idev;
  80384f:	48 b8 c0 84 40 00 00 	movabs rax,0x4084c0
  803856:	00 00 00 
  803859:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80385c:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  803860:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:72
    make_inode(idev,root_sb->root->dir_inode->inode_ops,root_sb->root->dir_inode->f_ops,FS_ATTR_DIR,root_sb);
  803864:	48 b8 48 b6 41 00 00 	movabs rax,0x41b648
  80386b:	00 00 00 
  80386e:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  803871:	48 b8 48 b6 41 00 00 	movabs rax,0x41b648
  803878:	00 00 00 
  80387b:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80387e:	48 8b 00             	mov    rax,QWORD PTR [rax]
  803881:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
  803885:	48 8b 50 20          	mov    rdx,QWORD PTR [rax+0x20]
  803889:	48 b8 48 b6 41 00 00 	movabs rax,0x41b648
  803890:	00 00 00 
  803893:	48 8b 00             	mov    rax,QWORD PTR [rax]
  803896:	48 8b 00             	mov    rax,QWORD PTR [rax]
  803899:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
  80389d:	48 8b 70 28          	mov    rsi,QWORD PTR [rax+0x28]
  8038a1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  8038a5:	49 89 c8             	mov    r8,rcx
  8038a8:	b9 02 00 00 00       	mov    ecx,0x2
  8038ad:	48 89 c7             	mov    rdi,rax
  8038b0:	48 b8 78 35 80 00 00 	movabs rax,0x803578
  8038b7:	00 00 00 
  8038ba:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:73
    idev->private_index_info=ddev;
  8038bc:	48 b8 c0 84 40 00 00 	movabs rax,0x4084c0
  8038c3:	00 00 00 
  8038c6:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  8038c9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  8038cd:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:76

    //创建mnt文件夹
    dmnt=(struct dir_entry*) kmalloc();
  8038d1:	b8 00 00 00 00       	mov    eax,0x0
  8038d6:	48 ba d4 18 80 00 00 	movabs rdx,0x8018d4
  8038dd:	00 00 00 
  8038e0:	ff d2                	call   rdx
  8038e2:	48 89 c2             	mov    rdx,rax
  8038e5:	48 b8 c8 84 40 00 00 	movabs rax,0x4084c8
  8038ec:	00 00 00 
  8038ef:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:77
    struct index_node* imnt=dmnt+1;
  8038f2:	48 b8 c8 84 40 00 00 	movabs rax,0x4084c8
  8038f9:	00 00 00 
  8038fc:	48 8b 00             	mov    rax,QWORD PTR [rax]
  8038ff:	48 83 c0 58          	add    rax,0x58
  803903:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:78
    dmnt->name=imnt+1;
  803907:	48 b8 c8 84 40 00 00 	movabs rax,0x4084c8
  80390e:	00 00 00 
  803911:	48 8b 00             	mov    rax,QWORD PTR [rax]
  803914:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  803918:	48 83 c2 38          	add    rdx,0x38
  80391c:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:79
    make_dentry(dmnt,"mnt",3,root_sb->root,root_sb->root->dir_ops);
  80391f:	48 b8 48 b6 41 00 00 	movabs rax,0x41b648
  803926:	00 00 00 
  803929:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80392c:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80392f:	48 8b 48 50          	mov    rcx,QWORD PTR [rax+0x50]
  803933:	48 b8 48 b6 41 00 00 	movabs rax,0x41b648
  80393a:	00 00 00 
  80393d:	48 8b 00             	mov    rax,QWORD PTR [rax]
  803940:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  803943:	48 b8 c8 84 40 00 00 	movabs rax,0x4084c8
  80394a:	00 00 00 
  80394d:	48 8b 00             	mov    rax,QWORD PTR [rax]
  803950:	49 89 c8             	mov    r8,rcx
  803953:	48 89 d1             	mov    rcx,rdx
  803956:	ba 03 00 00 00       	mov    edx,0x3
  80395b:	48 be 54 8a 81 00 00 	movabs rsi,0x818a54
  803962:	00 00 00 
  803965:	48 89 c7             	mov    rdi,rax
  803968:	48 b8 aa 33 80 00 00 	movabs rax,0x8033aa
  80396f:	00 00 00 
  803972:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:80
    dmnt->dir_inode=imnt;
  803974:	48 b8 c8 84 40 00 00 	movabs rax,0x4084c8
  80397b:	00 00 00 
  80397e:	48 8b 00             	mov    rax,QWORD PTR [rax]
  803981:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  803985:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:81
    make_inode(imnt,root_sb->root->dir_inode->inode_ops,root_sb->root->dir_inode->f_ops,FS_ATTR_DIR,root_sb);
  803989:	48 b8 48 b6 41 00 00 	movabs rax,0x41b648
  803990:	00 00 00 
  803993:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  803996:	48 b8 48 b6 41 00 00 	movabs rax,0x41b648
  80399d:	00 00 00 
  8039a0:	48 8b 00             	mov    rax,QWORD PTR [rax]
  8039a3:	48 8b 00             	mov    rax,QWORD PTR [rax]
  8039a6:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
  8039aa:	48 8b 50 20          	mov    rdx,QWORD PTR [rax+0x20]
  8039ae:	48 b8 48 b6 41 00 00 	movabs rax,0x41b648
  8039b5:	00 00 00 
  8039b8:	48 8b 00             	mov    rax,QWORD PTR [rax]
  8039bb:	48 8b 00             	mov    rax,QWORD PTR [rax]
  8039be:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
  8039c2:	48 8b 70 28          	mov    rsi,QWORD PTR [rax+0x28]
  8039c6:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  8039ca:	49 89 c8             	mov    r8,rcx
  8039cd:	b9 02 00 00 00       	mov    ecx,0x2
  8039d2:	48 89 c7             	mov    rdi,rax
  8039d5:	48 b8 78 35 80 00 00 	movabs rax,0x803578
  8039dc:	00 00 00 
  8039df:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:82
    imnt->private_index_info=dmnt;
  8039e1:	48 b8 c8 84 40 00 00 	movabs rax,0x4084c8
  8039e8:	00 00 00 
  8039eb:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  8039ee:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  8039f2:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:87


    //创建几个设备文件
    //console-framebuffer.c
    dconsole= (struct dir_entry *) kmalloc();
  8039f6:	b8 00 00 00 00       	mov    eax,0x0
  8039fb:	48 ba d4 18 80 00 00 	movabs rdx,0x8018d4
  803a02:	00 00 00 
  803a05:	ff d2                	call   rdx
  803a07:	48 89 c2             	mov    rdx,rax
  803a0a:	48 b8 d0 84 40 00 00 	movabs rax,0x4084d0
  803a11:	00 00 00 
  803a14:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:88
    struct index_node* iconsole=dconsole+1;
  803a17:	48 b8 d0 84 40 00 00 	movabs rax,0x4084d0
  803a1e:	00 00 00 
  803a21:	48 8b 00             	mov    rax,QWORD PTR [rax]
  803a24:	48 83 c0 58          	add    rax,0x58
  803a28:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:89
    dconsole->name=iconsole+1;
  803a2c:	48 b8 d0 84 40 00 00 	movabs rax,0x4084d0
  803a33:	00 00 00 
  803a36:	48 8b 00             	mov    rax,QWORD PTR [rax]
  803a39:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  803a3d:	48 83 c2 38          	add    rdx,0x38
  803a41:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:90
    make_devf(dconsole,iconsole,"console",ddev,&framebuffer_fops);
  803a44:	48 b8 c0 84 40 00 00 	movabs rax,0x4084c0
  803a4b:	00 00 00 
  803a4e:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  803a51:	48 b8 d0 84 40 00 00 	movabs rax,0x4084d0
  803a58:	00 00 00 
  803a5b:	48 8b 00             	mov    rax,QWORD PTR [rax]
  803a5e:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  803a62:	49 b8 60 0e 81 00 00 	movabs r8,0x810e60
  803a69:	00 00 00 
  803a6c:	48 89 d1             	mov    rcx,rdx
  803a6f:	48 ba 58 8a 81 00 00 	movabs rdx,0x818a58
  803a76:	00 00 00 
  803a79:	48 89 c7             	mov    rdi,rax
  803a7c:	48 b8 d2 35 80 00 00 	movabs rax,0x8035d2
  803a83:	00 00 00 
  803a86:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:92
    //hd0-disk.c
    dhd0= (struct dir_entry *) kmalloc();
  803a88:	b8 00 00 00 00       	mov    eax,0x0
  803a8d:	48 ba d4 18 80 00 00 	movabs rdx,0x8018d4
  803a94:	00 00 00 
  803a97:	ff d2                	call   rdx
  803a99:	48 89 c2             	mov    rdx,rax
  803a9c:	48 b8 d8 84 40 00 00 	movabs rax,0x4084d8
  803aa3:	00 00 00 
  803aa6:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:93
    struct index_node* ihd0=dhd0+1;
  803aa9:	48 b8 d8 84 40 00 00 	movabs rax,0x4084d8
  803ab0:	00 00 00 
  803ab3:	48 8b 00             	mov    rax,QWORD PTR [rax]
  803ab6:	48 83 c0 58          	add    rax,0x58
  803aba:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:94
    dhd0->name=ihd0+1;
  803abe:	48 b8 d8 84 40 00 00 	movabs rax,0x4084d8
  803ac5:	00 00 00 
  803ac8:	48 8b 00             	mov    rax,QWORD PTR [rax]
  803acb:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  803acf:	48 83 c2 38          	add    rdx,0x38
  803ad3:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:95
    make_devf(dhd0,ihd0,"hd0",ddev,&hd_fops);
  803ad6:	48 b8 c0 84 40 00 00 	movabs rax,0x4084c0
  803add:	00 00 00 
  803ae0:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  803ae3:	48 b8 d8 84 40 00 00 	movabs rax,0x4084d8
  803aea:	00 00 00 
  803aed:	48 8b 00             	mov    rax,QWORD PTR [rax]
  803af0:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  803af4:	49 b8 80 b8 41 00 00 	movabs r8,0x41b880
  803afb:	00 00 00 
  803afe:	48 89 d1             	mov    rcx,rdx
  803b01:	48 ba 60 8a 81 00 00 	movabs rdx,0x818a60
  803b08:	00 00 00 
  803b0b:	48 89 c7             	mov    rdi,rax
  803b0e:	48 b8 d2 35 80 00 00 	movabs rax,0x8035d2
  803b15:	00 00 00 
  803b18:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:97
    //tty-tty.c
    dtty= (struct dir_entry *) kmalloc();
  803b1a:	b8 00 00 00 00       	mov    eax,0x0
  803b1f:	48 ba d4 18 80 00 00 	movabs rdx,0x8018d4
  803b26:	00 00 00 
  803b29:	ff d2                	call   rdx
  803b2b:	48 89 c2             	mov    rdx,rax
  803b2e:	48 b8 e0 84 40 00 00 	movabs rax,0x4084e0
  803b35:	00 00 00 
  803b38:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:98
    struct index_node* itty=dtty+1;
  803b3b:	48 b8 e0 84 40 00 00 	movabs rax,0x4084e0
  803b42:	00 00 00 
  803b45:	48 8b 00             	mov    rax,QWORD PTR [rax]
  803b48:	48 83 c0 58          	add    rax,0x58
  803b4c:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:99
    dtty->name=itty+1;
  803b50:	48 b8 e0 84 40 00 00 	movabs rax,0x4084e0
  803b57:	00 00 00 
  803b5a:	48 8b 00             	mov    rax,QWORD PTR [rax]
  803b5d:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  803b61:	48 83 c2 38          	add    rdx,0x38
  803b65:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:100
    make_devf(dtty,itty,"tty",ddev,&tty_fops);
  803b68:	48 b8 c0 84 40 00 00 	movabs rax,0x4084c0
  803b6f:	00 00 00 
  803b72:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  803b75:	48 b8 e0 84 40 00 00 	movabs rax,0x4084e0
  803b7c:	00 00 00 
  803b7f:	48 8b 00             	mov    rax,QWORD PTR [rax]
  803b82:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  803b86:	49 b8 60 11 81 00 00 	movabs r8,0x811160
  803b8d:	00 00 00 
  803b90:	48 89 d1             	mov    rcx,rdx
  803b93:	48 ba 64 8a 81 00 00 	movabs rdx,0x818a64
  803b9a:	00 00 00 
  803b9d:	48 89 c7             	mov    rdi,rax
  803ba0:	48 b8 d2 35 80 00 00 	movabs rax,0x8035d2
  803ba7:	00 00 00 
  803baa:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:102
    //初始化一下
    tty_fops.open(itty,&ftty);
  803bac:	48 b8 60 11 81 00 00 	movabs rax,0x811160
  803bb3:	00 00 00 
  803bb6:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  803bb9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  803bbd:	48 b9 00 85 40 00 00 	movabs rcx,0x408500
  803bc4:	00 00 00 
  803bc7:	48 89 ce             	mov    rsi,rcx
  803bca:	48 89 c7             	mov    rdi,rax
  803bcd:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:104

}
  803bcf:	90                   	nop
  803bd0:	c9                   	leave  
  803bd1:	c3                   	ret    

0000000000803bd2 <open_dev>:
open_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:106
//
long open_dev(struct index_node * inode,struct file * filp){
  803bd2:	f3 0f 1e fa          	endbr64 
  803bd6:	55                   	push   rbp
  803bd7:	48 89 e5             	mov    rbp,rsp
  803bda:	48 83 ec 20          	sub    rsp,0x20
  803bde:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  803be2:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:108
    //查看文件名
    char* name=filp->dentry->name;
  803be6:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  803bea:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  803bee:	48 8b 00             	mov    rax,QWORD PTR [rax]
  803bf1:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:109
    char* p=name+ strlen(name)-1;
  803bf5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  803bf9:	48 89 c7             	mov    rdi,rax
  803bfc:	48 b8 8f 06 81 00 00 	movabs rax,0x81068f
  803c03:	00 00 00 
  803c06:	ff d0                	call   rax
  803c08:	48 98                	cdqe   
  803c0a:	48 8d 50 ff          	lea    rdx,[rax-0x1]
  803c0e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  803c12:	48 01 d0             	add    rax,rdx
  803c15:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:110
    for(;*p!='/'&&p>=name;p--);
  803c19:	eb 05                	jmp    803c20 <open_dev+0x4e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:110 (discriminator 3)
  803c1b:	48 83 6d f0 01       	sub    QWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:110 (discriminator 1)
  803c20:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  803c24:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  803c27:	3c 2f                	cmp    al,0x2f
  803c29:	74 0a                	je     803c35 <open_dev+0x63>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:110 (discriminator 2)
  803c2b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  803c2f:	48 3b 45 f8          	cmp    rax,QWORD PTR [rbp-0x8]
  803c33:	73 e6                	jae    803c1b <open_dev+0x49>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:111
    if(p>=name)
  803c35:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  803c39:	48 3b 45 f8          	cmp    rax,QWORD PTR [rbp-0x8]
  803c3d:	72 0c                	jb     803c4b <open_dev+0x79>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:112
        name=p+1;
  803c3f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  803c43:	48 83 c0 01          	add    rax,0x1
  803c47:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:113
    if(memcmp(name,"tty",3)==0){
  803c4b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  803c4f:	ba 03 00 00 00       	mov    edx,0x3
  803c54:	48 b9 64 8a 81 00 00 	movabs rcx,0x818a64
  803c5b:	00 00 00 
  803c5e:	48 89 ce             	mov    rsi,rcx
  803c61:	48 89 c7             	mov    rdi,rax
  803c64:	48 b8 bc 03 81 00 00 	movabs rax,0x8103bc
  803c6b:	00 00 00 
  803c6e:	ff d0                	call   rax
  803c70:	85 c0                	test   eax,eax
  803c72:	75 1c                	jne    803c90 <open_dev+0xbe>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:114
        return init_tty(inode,filp);
  803c74:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  803c78:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  803c7c:	48 89 d6             	mov    rsi,rdx
  803c7f:	48 89 c7             	mov    rdi,rax
  803c82:	48 b8 61 f9 80 00 00 	movabs rax,0x80f961
  803c89:	00 00 00 
  803c8c:	ff d0                	call   rax
  803c8e:	eb 47                	jmp    803cd7 <open_dev+0x105>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:115
    }else if(strcmp(name,"console")==0){
  803c90:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  803c94:	48 ba 58 8a 81 00 00 	movabs rdx,0x818a58
  803c9b:	00 00 00 
  803c9e:	48 89 d6             	mov    rsi,rdx
  803ca1:	48 89 c7             	mov    rdi,rax
  803ca4:	48 b8 10 06 81 00 00 	movabs rax,0x810610
  803cab:	00 00 00 
  803cae:	ff d0                	call   rax
  803cb0:	85 c0                	test   eax,eax
  803cb2:	75 1c                	jne    803cd0 <open_dev+0xfe>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:116
        return open_framebuffer(inode,filp);
  803cb4:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  803cb8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  803cbc:	48 89 d6             	mov    rsi,rdx
  803cbf:	48 89 c7             	mov    rdi,rax
  803cc2:	48 b8 fa 9e 80 00 00 	movabs rax,0x809efa
  803cc9:	00 00 00 
  803ccc:	ff d0                	call   rax
  803cce:	eb 07                	jmp    803cd7 <open_dev+0x105>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:118
    }
    return -1;
  803cd0:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:119
}
  803cd7:	c9                   	leave  
  803cd8:	c3                   	ret    

0000000000803cd9 <close_dev>:
close_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:120
long close_dev(struct index_node * inode,struct file * filp){
  803cd9:	f3 0f 1e fa          	endbr64 
  803cdd:	55                   	push   rbp
  803cde:	48 89 e5             	mov    rbp,rsp
  803ce1:	48 83 ec 20          	sub    rsp,0x20
  803ce5:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  803ce9:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:122
    //查看文件名
    char* name=filp->dentry->name;
  803ced:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  803cf1:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  803cf5:	48 8b 00             	mov    rax,QWORD PTR [rax]
  803cf8:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:123
    char* p=name+ strlen(name)-1;
  803cfc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  803d00:	48 89 c7             	mov    rdi,rax
  803d03:	48 b8 8f 06 81 00 00 	movabs rax,0x81068f
  803d0a:	00 00 00 
  803d0d:	ff d0                	call   rax
  803d0f:	48 98                	cdqe   
  803d11:	48 8d 50 ff          	lea    rdx,[rax-0x1]
  803d15:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  803d19:	48 01 d0             	add    rax,rdx
  803d1c:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:124
    for(;*p!='/'&&p>=name;p--);
  803d20:	eb 05                	jmp    803d27 <close_dev+0x4e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:124 (discriminator 3)
  803d22:	48 83 6d f0 01       	sub    QWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:124 (discriminator 1)
  803d27:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  803d2b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  803d2e:	3c 2f                	cmp    al,0x2f
  803d30:	74 0a                	je     803d3c <close_dev+0x63>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:124 (discriminator 2)
  803d32:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  803d36:	48 3b 45 f8          	cmp    rax,QWORD PTR [rbp-0x8]
  803d3a:	73 e6                	jae    803d22 <close_dev+0x49>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:125
    if(p>=name)
  803d3c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  803d40:	48 3b 45 f8          	cmp    rax,QWORD PTR [rbp-0x8]
  803d44:	72 0c                	jb     803d52 <close_dev+0x79>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:126
        name=p+1;
  803d46:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  803d4a:	48 83 c0 01          	add    rax,0x1
  803d4e:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:127
    if(memcmp(name,"tty",3)==0){
  803d52:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  803d56:	ba 03 00 00 00       	mov    edx,0x3
  803d5b:	48 b9 64 8a 81 00 00 	movabs rcx,0x818a64
  803d62:	00 00 00 
  803d65:	48 89 ce             	mov    rsi,rcx
  803d68:	48 89 c7             	mov    rdi,rax
  803d6b:	48 b8 bc 03 81 00 00 	movabs rax,0x8103bc
  803d72:	00 00 00 
  803d75:	ff d0                	call   rax
  803d77:	85 c0                	test   eax,eax
  803d79:	75 1c                	jne    803d97 <close_dev+0xbe>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:128
        return close_tty(inode,filp);
  803d7b:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  803d7f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  803d83:	48 89 d6             	mov    rsi,rdx
  803d86:	48 89 c7             	mov    rdi,rax
  803d89:	48 b8 ca f8 80 00 00 	movabs rax,0x80f8ca
  803d90:	00 00 00 
  803d93:	ff d0                	call   rax
  803d95:	eb 47                	jmp    803dde <close_dev+0x105>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:129
    }else if(strcmp(name,"console")==0){
  803d97:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  803d9b:	48 ba 58 8a 81 00 00 	movabs rdx,0x818a58
  803da2:	00 00 00 
  803da5:	48 89 d6             	mov    rsi,rdx
  803da8:	48 89 c7             	mov    rdi,rax
  803dab:	48 b8 10 06 81 00 00 	movabs rax,0x810610
  803db2:	00 00 00 
  803db5:	ff d0                	call   rax
  803db7:	85 c0                	test   eax,eax
  803db9:	75 1c                	jne    803dd7 <close_dev+0xfe>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:130
        return close_framebuffer(inode,filp);
  803dbb:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  803dbf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  803dc3:	48 89 d6             	mov    rsi,rdx
  803dc6:	48 89 c7             	mov    rdi,rax
  803dc9:	48 b8 2b 9f 80 00 00 	movabs rax,0x809f2b
  803dd0:	00 00 00 
  803dd3:	ff d0                	call   rax
  803dd5:	eb 07                	jmp    803dde <close_dev+0x105>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:132
    }
    return -1;
  803dd7:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:134

}
  803dde:	c9                   	leave  
  803ddf:	c3                   	ret    

0000000000803de0 <read_dev>:
read_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:135
long read_dev(struct file * filp,char * buf,unsigned long count,long * position){
  803de0:	f3 0f 1e fa          	endbr64 
  803de4:	55                   	push   rbp
  803de5:	48 89 e5             	mov    rbp,rsp
  803de8:	48 83 ec 30          	sub    rsp,0x30
  803dec:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  803df0:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  803df4:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  803df8:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:137
    //查看文件名
    char* name=filp->dentry->name;
  803dfc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  803e00:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  803e04:	48 8b 00             	mov    rax,QWORD PTR [rax]
  803e07:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:138
    char* p=name+ strlen(name)-1;
  803e0b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  803e0f:	48 89 c7             	mov    rdi,rax
  803e12:	48 b8 8f 06 81 00 00 	movabs rax,0x81068f
  803e19:	00 00 00 
  803e1c:	ff d0                	call   rax
  803e1e:	48 98                	cdqe   
  803e20:	48 8d 50 ff          	lea    rdx,[rax-0x1]
  803e24:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  803e28:	48 01 d0             	add    rax,rdx
  803e2b:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:139
    for(;*p!='/'&&p>=name;p--);
  803e2f:	eb 05                	jmp    803e36 <read_dev+0x56>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:139 (discriminator 3)
  803e31:	48 83 6d f0 01       	sub    QWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:139 (discriminator 1)
  803e36:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  803e3a:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  803e3d:	3c 2f                	cmp    al,0x2f
  803e3f:	74 0a                	je     803e4b <read_dev+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:139 (discriminator 2)
  803e41:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  803e45:	48 3b 45 f8          	cmp    rax,QWORD PTR [rbp-0x8]
  803e49:	73 e6                	jae    803e31 <read_dev+0x51>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:140
    if(p>=name)
  803e4b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  803e4f:	48 3b 45 f8          	cmp    rax,QWORD PTR [rbp-0x8]
  803e53:	72 0c                	jb     803e61 <read_dev+0x81>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:141
        name=p+1;
  803e55:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  803e59:	48 83 c0 01          	add    rax,0x1
  803e5d:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:142
    if(memcmp(name,"tty",3)==0){
  803e61:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  803e65:	ba 03 00 00 00       	mov    edx,0x3
  803e6a:	48 b9 64 8a 81 00 00 	movabs rcx,0x818a64
  803e71:	00 00 00 
  803e74:	48 89 ce             	mov    rsi,rcx
  803e77:	48 89 c7             	mov    rdi,rax
  803e7a:	48 b8 bc 03 81 00 00 	movabs rax,0x8103bc
  803e81:	00 00 00 
  803e84:	ff d0                	call   rax
  803e86:	85 c0                	test   eax,eax
  803e88:	75 21                	jne    803eab <read_dev+0xcb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:143
        return read_tty(filp,buf,count,position);
  803e8a:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  803e8e:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  803e92:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  803e96:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  803e9a:	48 89 c7             	mov    rdi,rax
  803e9d:	48 b8 6d fa 80 00 00 	movabs rax,0x80fa6d
  803ea4:	00 00 00 
  803ea7:	ff d0                	call   rax
  803ea9:	eb 4c                	jmp    803ef7 <read_dev+0x117>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:144
    }else if(strcmp(name,"console")==0){
  803eab:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  803eaf:	48 ba 58 8a 81 00 00 	movabs rdx,0x818a58
  803eb6:	00 00 00 
  803eb9:	48 89 d6             	mov    rsi,rdx
  803ebc:	48 89 c7             	mov    rdi,rax
  803ebf:	48 b8 10 06 81 00 00 	movabs rax,0x810610
  803ec6:	00 00 00 
  803ec9:	ff d0                	call   rax
  803ecb:	85 c0                	test   eax,eax
  803ecd:	75 21                	jne    803ef0 <read_dev+0x110>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:145
        return read_framebuffer(filp,buf,count,position);
  803ecf:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  803ed3:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  803ed7:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  803edb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  803edf:	48 89 c7             	mov    rdi,rax
  803ee2:	48 b8 3e 9f 80 00 00 	movabs rax,0x809f3e
  803ee9:	00 00 00 
  803eec:	ff d0                	call   rax
  803eee:	eb 07                	jmp    803ef7 <read_dev+0x117>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:147
    }
    return -1;
  803ef0:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:149

}
  803ef7:	c9                   	leave  
  803ef8:	c3                   	ret    

0000000000803ef9 <write_dev>:
write_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:150
long write_dev(struct file * filp,char * buf,unsigned long count,long * position){
  803ef9:	f3 0f 1e fa          	endbr64 
  803efd:	55                   	push   rbp
  803efe:	48 89 e5             	mov    rbp,rsp
  803f01:	48 83 ec 30          	sub    rsp,0x30
  803f05:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  803f09:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  803f0d:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  803f11:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:152
    //查看文件名
    char* name=filp->dentry->name;
  803f15:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  803f19:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  803f1d:	48 8b 00             	mov    rax,QWORD PTR [rax]
  803f20:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:153
    char* p=name+ strlen(name)-1;
  803f24:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  803f28:	48 89 c7             	mov    rdi,rax
  803f2b:	48 b8 8f 06 81 00 00 	movabs rax,0x81068f
  803f32:	00 00 00 
  803f35:	ff d0                	call   rax
  803f37:	48 98                	cdqe   
  803f39:	48 8d 50 ff          	lea    rdx,[rax-0x1]
  803f3d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  803f41:	48 01 d0             	add    rax,rdx
  803f44:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:154
    for(;*p!='/'&&p>=name;p--);
  803f48:	eb 05                	jmp    803f4f <write_dev+0x56>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:154 (discriminator 3)
  803f4a:	48 83 6d f0 01       	sub    QWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:154 (discriminator 1)
  803f4f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  803f53:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  803f56:	3c 2f                	cmp    al,0x2f
  803f58:	74 0a                	je     803f64 <write_dev+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:154 (discriminator 2)
  803f5a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  803f5e:	48 3b 45 f8          	cmp    rax,QWORD PTR [rbp-0x8]
  803f62:	73 e6                	jae    803f4a <write_dev+0x51>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:155
    if(p>=name)
  803f64:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  803f68:	48 3b 45 f8          	cmp    rax,QWORD PTR [rbp-0x8]
  803f6c:	72 0c                	jb     803f7a <write_dev+0x81>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:156
        name=p+1;
  803f6e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  803f72:	48 83 c0 01          	add    rax,0x1
  803f76:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:157
    if(memcmp(name,"tty",3)==0){
  803f7a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  803f7e:	ba 03 00 00 00       	mov    edx,0x3
  803f83:	48 b9 64 8a 81 00 00 	movabs rcx,0x818a64
  803f8a:	00 00 00 
  803f8d:	48 89 ce             	mov    rsi,rcx
  803f90:	48 89 c7             	mov    rdi,rax
  803f93:	48 b8 bc 03 81 00 00 	movabs rax,0x8103bc
  803f9a:	00 00 00 
  803f9d:	ff d0                	call   rax
  803f9f:	85 c0                	test   eax,eax
  803fa1:	75 21                	jne    803fc4 <write_dev+0xcb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:158
        return write_tty(filp,buf,count,position);
  803fa3:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  803fa7:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  803fab:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  803faf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  803fb3:	48 89 c7             	mov    rdi,rax
  803fb6:	48 b8 1a fb 80 00 00 	movabs rax,0x80fb1a
  803fbd:	00 00 00 
  803fc0:	ff d0                	call   rax
  803fc2:	eb 4c                	jmp    804010 <write_dev+0x117>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:159
    }else if(strcmp(name,"console")==0){
  803fc4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  803fc8:	48 ba 58 8a 81 00 00 	movabs rdx,0x818a58
  803fcf:	00 00 00 
  803fd2:	48 89 d6             	mov    rsi,rdx
  803fd5:	48 89 c7             	mov    rdi,rax
  803fd8:	48 b8 10 06 81 00 00 	movabs rax,0x810610
  803fdf:	00 00 00 
  803fe2:	ff d0                	call   rax
  803fe4:	85 c0                	test   eax,eax
  803fe6:	75 21                	jne    804009 <write_dev+0x110>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:160
        return write_framebuffer(filp,buf,count,position);
  803fe8:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  803fec:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  803ff0:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  803ff4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  803ff8:	48 89 c7             	mov    rdi,rax
  803ffb:	48 b8 59 9f 80 00 00 	movabs rax,0x809f59
  804002:	00 00 00 
  804005:	ff d0                	call   rax
  804007:	eb 07                	jmp    804010 <write_dev+0x117>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:162
    }
    return -1;
  804009:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:164

}
  804010:	c9                   	leave  
  804011:	c3                   	ret    

0000000000804012 <ioctl_dev>:
ioctl_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:165
long ioctl_dev(struct index_node * inode,struct file * filp,unsigned long cmd,unsigned long arg){
  804012:	f3 0f 1e fa          	endbr64 
  804016:	55                   	push   rbp
  804017:	48 89 e5             	mov    rbp,rsp
  80401a:	48 83 ec 30          	sub    rsp,0x30
  80401e:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  804022:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  804026:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  80402a:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:167
    //查看文件名
    char* name=filp->dentry->name;
  80402e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  804032:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  804036:	48 8b 00             	mov    rax,QWORD PTR [rax]
  804039:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:168
    char* p=name+ strlen(name)-1;
  80403d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  804041:	48 89 c7             	mov    rdi,rax
  804044:	48 b8 8f 06 81 00 00 	movabs rax,0x81068f
  80404b:	00 00 00 
  80404e:	ff d0                	call   rax
  804050:	48 98                	cdqe   
  804052:	48 8d 50 ff          	lea    rdx,[rax-0x1]
  804056:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80405a:	48 01 d0             	add    rax,rdx
  80405d:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:169
    for(;*p!='/'&&p>=name;p--);
  804061:	eb 05                	jmp    804068 <ioctl_dev+0x56>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:169 (discriminator 3)
  804063:	48 83 6d f0 01       	sub    QWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:169 (discriminator 1)
  804068:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80406c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  80406f:	3c 2f                	cmp    al,0x2f
  804071:	74 0a                	je     80407d <ioctl_dev+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:169 (discriminator 2)
  804073:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  804077:	48 3b 45 f8          	cmp    rax,QWORD PTR [rbp-0x8]
  80407b:	73 e6                	jae    804063 <ioctl_dev+0x51>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:170
    if(p>=name)
  80407d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  804081:	48 3b 45 f8          	cmp    rax,QWORD PTR [rbp-0x8]
  804085:	72 0c                	jb     804093 <ioctl_dev+0x81>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:171
        name=p+1;
  804087:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80408b:	48 83 c0 01          	add    rax,0x1
  80408f:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:172
    if(memcmp(name,"tty",3)==0){
  804093:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  804097:	ba 03 00 00 00       	mov    edx,0x3
  80409c:	48 b9 64 8a 81 00 00 	movabs rcx,0x818a64
  8040a3:	00 00 00 
  8040a6:	48 89 ce             	mov    rsi,rcx
  8040a9:	48 89 c7             	mov    rdi,rax
  8040ac:	48 b8 bc 03 81 00 00 	movabs rax,0x8103bc
  8040b3:	00 00 00 
  8040b6:	ff d0                	call   rax
  8040b8:	85 c0                	test   eax,eax
  8040ba:	75 21                	jne    8040dd <ioctl_dev+0xcb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:173
        return ioctl_tty(inode, filp, cmd, arg);
  8040bc:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  8040c0:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  8040c4:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  8040c8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  8040cc:	48 89 c7             	mov    rdi,rax
  8040cf:	48 b8 e9 fb 80 00 00 	movabs rax,0x80fbe9
  8040d6:	00 00 00 
  8040d9:	ff d0                	call   rax
  8040db:	eb 4c                	jmp    804129 <ioctl_dev+0x117>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:174
    }else if(strcmp(name,"console")==0){
  8040dd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  8040e1:	48 ba 58 8a 81 00 00 	movabs rdx,0x818a58
  8040e8:	00 00 00 
  8040eb:	48 89 d6             	mov    rsi,rdx
  8040ee:	48 89 c7             	mov    rdi,rax
  8040f1:	48 b8 10 06 81 00 00 	movabs rax,0x810610
  8040f8:	00 00 00 
  8040fb:	ff d0                	call   rax
  8040fd:	85 c0                	test   eax,eax
  8040ff:	75 21                	jne    804122 <ioctl_dev+0x110>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:175
        return ioctl_framebuffer(inode,filp,cmd,arg);
  804101:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  804105:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  804109:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  80410d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  804111:	48 89 c7             	mov    rdi,rax
  804114:	48 b8 44 a0 80 00 00 	movabs rax,0x80a044
  80411b:	00 00 00 
  80411e:	ff d0                	call   rax
  804120:	eb 07                	jmp    804129 <ioctl_dev+0x117>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:177
    }
    return -1;
  804122:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:179

}
  804129:	c9                   	leave  
  80412a:	c3                   	ret    

000000000080412b <load_driver>:
load_driver():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:181
int load_driver(char *path)
{
  80412b:	f3 0f 1e fa          	endbr64 
  80412f:	55                   	push   rbp
  804130:	48 89 e5             	mov    rbp,rsp
  804133:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:183
    
}
  804137:	90                   	nop
  804138:	5d                   	pop    rbp
  804139:	c3                   	ret    

000000000080413a <reg_device>:
reg_device():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:186

int reg_device(device* dev)
{
  80413a:	f3 0f 1e fa          	endbr64 
  80413e:	55                   	push   rbp
  80413f:	48 89 e5             	mov    rbp,rsp
  804142:	53                   	push   rbx
  804143:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:190
    //TODO:查重

    //放入数组
    int i=0;
  804147:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:191
    for(;i<MAX_DEVICES;i++)
  80414e:	e9 5f 01 00 00       	jmp    8042b2 <reg_device+0x178>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:193
    {
        if(devs[i].flag==DEV_FLAG_EMPTY)
  804153:	48 b9 80 2e 40 00 00 	movabs rcx,0x402e80
  80415a:	00 00 00 
  80415d:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  804160:	48 63 d0             	movsxd rdx,eax
  804163:	48 89 d0             	mov    rax,rdx
  804166:	48 c1 e0 02          	shl    rax,0x2
  80416a:	48 01 d0             	add    rax,rdx
  80416d:	48 c1 e0 02          	shl    rax,0x2
  804171:	48 01 d0             	add    rax,rdx
  804174:	48 c1 e0 03          	shl    rax,0x3
  804178:	48 01 c8             	add    rax,rcx
  80417b:	48 83 c0 10          	add    rax,0x10
  80417f:	8b 00                	mov    eax,DWORD PTR [rax]
  804181:	85 c0                	test   eax,eax
  804183:	0f 85 25 01 00 00    	jne    8042ae <reg_device+0x174>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:195
        {
            devs[i]=*dev;
  804189:	48 b9 80 2e 40 00 00 	movabs rcx,0x402e80
  804190:	00 00 00 
  804193:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  804196:	48 63 d0             	movsxd rdx,eax
  804199:	48 89 d0             	mov    rax,rdx
  80419c:	48 c1 e0 02          	shl    rax,0x2
  8041a0:	48 01 d0             	add    rax,rdx
  8041a3:	48 c1 e0 02          	shl    rax,0x2
  8041a7:	48 01 d0             	add    rax,rdx
  8041aa:	48 c1 e0 03          	shl    rax,0x3
  8041ae:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
  8041b2:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  8041b6:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  8041b9:	48 8b 58 08          	mov    rbx,QWORD PTR [rax+0x8]
  8041bd:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  8041c0:	48 89 5a 08          	mov    QWORD PTR [rdx+0x8],rbx
  8041c4:	48 8b 48 10          	mov    rcx,QWORD PTR [rax+0x10]
  8041c8:	48 8b 58 18          	mov    rbx,QWORD PTR [rax+0x18]
  8041cc:	48 89 4a 10          	mov    QWORD PTR [rdx+0x10],rcx
  8041d0:	48 89 5a 18          	mov    QWORD PTR [rdx+0x18],rbx
  8041d4:	48 8b 48 20          	mov    rcx,QWORD PTR [rax+0x20]
  8041d8:	48 8b 58 28          	mov    rbx,QWORD PTR [rax+0x28]
  8041dc:	48 89 4a 20          	mov    QWORD PTR [rdx+0x20],rcx
  8041e0:	48 89 5a 28          	mov    QWORD PTR [rdx+0x28],rbx
  8041e4:	48 8b 48 30          	mov    rcx,QWORD PTR [rax+0x30]
  8041e8:	48 8b 58 38          	mov    rbx,QWORD PTR [rax+0x38]
  8041ec:	48 89 4a 30          	mov    QWORD PTR [rdx+0x30],rcx
  8041f0:	48 89 5a 38          	mov    QWORD PTR [rdx+0x38],rbx
  8041f4:	48 8b 48 40          	mov    rcx,QWORD PTR [rax+0x40]
  8041f8:	48 8b 58 48          	mov    rbx,QWORD PTR [rax+0x48]
  8041fc:	48 89 4a 40          	mov    QWORD PTR [rdx+0x40],rcx
  804200:	48 89 5a 48          	mov    QWORD PTR [rdx+0x48],rbx
  804204:	48 8b 48 50          	mov    rcx,QWORD PTR [rax+0x50]
  804208:	48 8b 58 58          	mov    rbx,QWORD PTR [rax+0x58]
  80420c:	48 89 4a 50          	mov    QWORD PTR [rdx+0x50],rcx
  804210:	48 89 5a 58          	mov    QWORD PTR [rdx+0x58],rbx
  804214:	48 8b 48 60          	mov    rcx,QWORD PTR [rax+0x60]
  804218:	48 8b 58 68          	mov    rbx,QWORD PTR [rax+0x68]
  80421c:	48 89 4a 60          	mov    QWORD PTR [rdx+0x60],rcx
  804220:	48 89 5a 68          	mov    QWORD PTR [rdx+0x68],rbx
  804224:	48 8b 48 70          	mov    rcx,QWORD PTR [rax+0x70]
  804228:	48 8b 58 78          	mov    rbx,QWORD PTR [rax+0x78]
  80422c:	48 89 4a 70          	mov    QWORD PTR [rdx+0x70],rcx
  804230:	48 89 5a 78          	mov    QWORD PTR [rdx+0x78],rbx
  804234:	48 8b 88 80 00 00 00 	mov    rcx,QWORD PTR [rax+0x80]
  80423b:	48 8b 98 88 00 00 00 	mov    rbx,QWORD PTR [rax+0x88]
  804242:	48 89 8a 80 00 00 00 	mov    QWORD PTR [rdx+0x80],rcx
  804249:	48 89 9a 88 00 00 00 	mov    QWORD PTR [rdx+0x88],rbx
  804250:	48 8b 88 90 00 00 00 	mov    rcx,QWORD PTR [rax+0x90]
  804257:	48 8b 98 98 00 00 00 	mov    rbx,QWORD PTR [rax+0x98]
  80425e:	48 89 8a 90 00 00 00 	mov    QWORD PTR [rdx+0x90],rcx
  804265:	48 89 9a 98 00 00 00 	mov    QWORD PTR [rdx+0x98],rbx
  80426c:	48 8b 80 a0 00 00 00 	mov    rax,QWORD PTR [rax+0xa0]
  804273:	48 89 82 a0 00 00 00 	mov    QWORD PTR [rdx+0xa0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:196
            devs[i].flag=DEV_FLAG_USED;
  80427a:	48 b9 80 2e 40 00 00 	movabs rcx,0x402e80
  804281:	00 00 00 
  804284:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  804287:	48 63 d0             	movsxd rdx,eax
  80428a:	48 89 d0             	mov    rax,rdx
  80428d:	48 c1 e0 02          	shl    rax,0x2
  804291:	48 01 d0             	add    rax,rdx
  804294:	48 c1 e0 02          	shl    rax,0x2
  804298:	48 01 d0             	add    rax,rdx
  80429b:	48 c1 e0 03          	shl    rax,0x3
  80429f:	48 01 c8             	add    rax,rcx
  8042a2:	48 83 c0 10          	add    rax,0x10
  8042a6:	c7 00 01 00 00 00    	mov    DWORD PTR [rax],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:197
            break;
  8042ac:	eb 0e                	jmp    8042bc <reg_device+0x182>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:191
    for(;i<MAX_DEVICES;i++)
  8042ae:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:191 (discriminator 1)
  8042b2:	83 7d f4 3f          	cmp    DWORD PTR [rbp-0xc],0x3f
  8042b6:	0f 8e 97 fe ff ff    	jle    804153 <reg_device+0x19>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:200
        }
    }
    if(i==MAX_DEVICES)
  8042bc:	83 7d f4 40          	cmp    DWORD PTR [rbp-0xc],0x40
  8042c0:	75 0a                	jne    8042cc <reg_device+0x192>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:201
        return -1;
  8042c2:	b8 ff ff ff ff       	mov    eax,0xffffffff
  8042c7:	e9 9a 01 00 00       	jmp    804466 <reg_device+0x32c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:203
    //添加到链表
    device* p=NULL,*neo=&devs[i],**pp;
  8042cc:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
  8042d3:	00 
  8042d4:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  8042d7:	48 63 d0             	movsxd rdx,eax
  8042da:	48 89 d0             	mov    rax,rdx
  8042dd:	48 c1 e0 02          	shl    rax,0x2
  8042e1:	48 01 d0             	add    rax,rdx
  8042e4:	48 c1 e0 02          	shl    rax,0x2
  8042e8:	48 01 d0             	add    rax,rdx
  8042eb:	48 c1 e0 03          	shl    rax,0x3
  8042ef:	48 ba 80 2e 40 00 00 	movabs rdx,0x402e80
  8042f6:	00 00 00 
  8042f9:	48 01 d0             	add    rax,rdx
  8042fc:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:204
    switch (dev->type)
  804300:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  804304:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
  804307:	83 f8 03             	cmp    eax,0x3
  80430a:	74 54                	je     804360 <reg_device+0x226>
  80430c:	83 f8 03             	cmp    eax,0x3
  80430f:	7f 71                	jg     804382 <reg_device+0x248>
  804311:	83 f8 01             	cmp    eax,0x1
  804314:	74 07                	je     80431d <reg_device+0x1e3>
  804316:	83 f8 02             	cmp    eax,0x2
  804319:	74 23                	je     80433e <reg_device+0x204>
  80431b:	eb 65                	jmp    804382 <reg_device+0x248>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:207
    {
    case DEV_TYPE_BLKDEV:
        p=dev_tree[DEVTREE_BLKDEVI];pp=&dev_tree[DEVTREE_BLKDEVI];
  80431d:	48 b8 80 84 40 00 00 	movabs rax,0x408480
  804324:	00 00 00 
  804327:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80432a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  80432e:	48 b8 80 84 40 00 00 	movabs rax,0x408480
  804335:	00 00 00 
  804338:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:208
        break;
  80433c:	eb 4e                	jmp    80438c <reg_device+0x252>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:211
    
    case DEV_TYPE_CHRDEV:
        p=dev_tree[DEVTREE_CHRDEVI];pp=&dev_tree[DEVTREE_CHRDEVI];
  80433e:	48 b8 80 84 40 00 00 	movabs rax,0x408480
  804345:	00 00 00 
  804348:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  80434c:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  804350:	48 b8 88 84 40 00 00 	movabs rax,0x408488
  804357:	00 00 00 
  80435a:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:212
        break;
  80435e:	eb 2c                	jmp    80438c <reg_device+0x252>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:215
        
    case DEV_TYPE_OTHERS:
        p=dev_tree[DEVTREE_OTHERDEVI];pp=&dev_tree[DEVTREE_OTHERDEVI];
  804360:	48 b8 80 84 40 00 00 	movabs rax,0x408480
  804367:	00 00 00 
  80436a:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80436e:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  804372:	48 b8 90 84 40 00 00 	movabs rax,0x408490
  804379:	00 00 00 
  80437c:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:216
        break;
  804380:	eb 0a                	jmp    80438c <reg_device+0x252>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:217
    default:return -1;//不可能有其他情况
  804382:	b8 ff ff ff ff       	mov    eax,0xffffffff
  804387:	e9 da 00 00 00       	jmp    804466 <reg_device+0x32c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:219
    }
    if(!p){
  80438c:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
  804391:	75 2b                	jne    8043be <reg_device+0x284>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:220
        *pp=neo;
  804393:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  804397:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  80439b:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:221
        neo->prev=NULL;
  80439e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  8043a2:	48 c7 80 98 00 00 00 	mov    QWORD PTR [rax+0x98],0x0
  8043a9:	00 00 00 00 
  8043ad:	eb 3d                	jmp    8043ec <reg_device+0x2b2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:224 (discriminator 2)
    }
    else{
        for(;p->next;p=p->next);
  8043af:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  8043b3:	48 8b 80 90 00 00 00 	mov    rax,QWORD PTR [rax+0x90]
  8043ba:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:224 (discriminator 1)
  8043be:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  8043c2:	48 8b 80 90 00 00 00 	mov    rax,QWORD PTR [rax+0x90]
  8043c9:	48 85 c0             	test   rax,rax
  8043cc:	75 e1                	jne    8043af <reg_device+0x275>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:225
        p->next=neo;
  8043ce:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  8043d2:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  8043d6:	48 89 90 90 00 00 00 	mov    QWORD PTR [rax+0x90],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:226
        neo->prev=p;
  8043dd:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  8043e1:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  8043e5:	48 89 90 98 00 00 00 	mov    QWORD PTR [rax+0x98],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:228
    }
    neo->next=NULL;
  8043ec:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  8043f0:	48 c7 80 90 00 00 00 	mov    QWORD PTR [rax+0x90],0x0
  8043f7:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:230
    //设置相应的请求函数
    switch (neo->stype)
  8043fb:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  8043ff:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
  804402:	83 f8 04             	cmp    eax,0x4
  804405:	74 3b                	je     804442 <reg_device+0x308>
  804407:	83 f8 04             	cmp    eax,0x4
  80440a:	7f 56                	jg     804462 <reg_device+0x328>
  80440c:	83 f8 03             	cmp    eax,0x3
  80440f:	74 21                	je     804432 <reg_device+0x2f8>
  804411:	83 f8 03             	cmp    eax,0x3
  804414:	7f 4c                	jg     804462 <reg_device+0x328>
  804416:	83 f8 01             	cmp    eax,0x1
  804419:	74 07                	je     804422 <reg_device+0x2e8>
  80441b:	83 f8 02             	cmp    eax,0x2
  80441e:	74 32                	je     804452 <reg_device+0x318>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:246
        break;
    case DEV_STYPE_TTY:
        neo->operi=OPERATIONS_TTY;
        break;
    default:
        break;
  804420:	eb 40                	jmp    804462 <reg_device+0x328>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:233
        neo->operi=OPERATIONS_HD;
  804422:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  804426:	c7 80 a0 00 00 00 00 	mov    DWORD PTR [rax+0xa0],0x0
  80442d:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:234
        break;
  804430:	eb 31                	jmp    804463 <reg_device+0x329>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:237
        neo->operi=OPERATIONS_MOUSE;
  804432:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  804436:	c7 80 a0 00 00 00 02 	mov    DWORD PTR [rax+0xa0],0x2
  80443d:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:238
        break;
  804440:	eb 21                	jmp    804463 <reg_device+0x329>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:240
        neo->operi=OPERATIONS_KEYBOARD;
  804442:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  804446:	c7 80 a0 00 00 00 03 	mov    DWORD PTR [rax+0xa0],0x3
  80444d:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:241
        break;
  804450:	eb 11                	jmp    804463 <reg_device+0x329>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:243
        neo->operi=OPERATIONS_TTY;
  804452:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  804456:	c7 80 a0 00 00 00 01 	mov    DWORD PTR [rax+0xa0],0x1
  80445d:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:244
        break;
  804460:	eb 01                	jmp    804463 <reg_device+0x329>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:246
        break;
  804462:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:248
    }
    return i;
  804463:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:249
}
  804466:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
  80446a:	c9                   	leave  
  80446b:	c3                   	ret    

000000000080446c <reg_driver>:
reg_driver():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:253


int reg_driver(driver *drv)
{
  80446c:	f3 0f 1e fa          	endbr64 
  804470:	55                   	push   rbp
  804471:	48 89 e5             	mov    rbp,rsp
  804474:	53                   	push   rbx
  804475:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:254
    for(int i=0;i<MAX_DRIVERS;i++)
  804479:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
  804480:	e9 37 01 00 00       	jmp    8045bc <reg_driver+0x150>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:256
    {
        if(drvs[i].flag==DRV_FLAG_EMPTY)
  804485:	48 b9 80 58 40 00 00 	movabs rcx,0x405880
  80448c:	00 00 00 
  80448f:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  804492:	48 63 d0             	movsxd rdx,eax
  804495:	48 89 d0             	mov    rax,rdx
  804498:	48 c1 e0 02          	shl    rax,0x2
  80449c:	48 01 d0             	add    rax,rdx
  80449f:	48 c1 e0 05          	shl    rax,0x5
  8044a3:	48 01 c8             	add    rax,rcx
  8044a6:	8b 00                	mov    eax,DWORD PTR [rax]
  8044a8:	85 c0                	test   eax,eax
  8044aa:	0f 85 08 01 00 00    	jne    8045b8 <reg_driver+0x14c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:258
        {
            drvs[i]=*drv;
  8044b0:	48 b9 80 58 40 00 00 	movabs rcx,0x405880
  8044b7:	00 00 00 
  8044ba:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  8044bd:	48 63 d0             	movsxd rdx,eax
  8044c0:	48 89 d0             	mov    rax,rdx
  8044c3:	48 c1 e0 02          	shl    rax,0x2
  8044c7:	48 01 d0             	add    rax,rdx
  8044ca:	48 c1 e0 05          	shl    rax,0x5
  8044ce:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
  8044d2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  8044d6:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  8044d9:	48 8b 58 08          	mov    rbx,QWORD PTR [rax+0x8]
  8044dd:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  8044e0:	48 89 5a 08          	mov    QWORD PTR [rdx+0x8],rbx
  8044e4:	48 8b 48 10          	mov    rcx,QWORD PTR [rax+0x10]
  8044e8:	48 8b 58 18          	mov    rbx,QWORD PTR [rax+0x18]
  8044ec:	48 89 4a 10          	mov    QWORD PTR [rdx+0x10],rcx
  8044f0:	48 89 5a 18          	mov    QWORD PTR [rdx+0x18],rbx
  8044f4:	48 8b 48 20          	mov    rcx,QWORD PTR [rax+0x20]
  8044f8:	48 8b 58 28          	mov    rbx,QWORD PTR [rax+0x28]
  8044fc:	48 89 4a 20          	mov    QWORD PTR [rdx+0x20],rcx
  804500:	48 89 5a 28          	mov    QWORD PTR [rdx+0x28],rbx
  804504:	48 8b 48 30          	mov    rcx,QWORD PTR [rax+0x30]
  804508:	48 8b 58 38          	mov    rbx,QWORD PTR [rax+0x38]
  80450c:	48 89 4a 30          	mov    QWORD PTR [rdx+0x30],rcx
  804510:	48 89 5a 38          	mov    QWORD PTR [rdx+0x38],rbx
  804514:	48 8b 48 40          	mov    rcx,QWORD PTR [rax+0x40]
  804518:	48 8b 58 48          	mov    rbx,QWORD PTR [rax+0x48]
  80451c:	48 89 4a 40          	mov    QWORD PTR [rdx+0x40],rcx
  804520:	48 89 5a 48          	mov    QWORD PTR [rdx+0x48],rbx
  804524:	48 8b 48 50          	mov    rcx,QWORD PTR [rax+0x50]
  804528:	48 8b 58 58          	mov    rbx,QWORD PTR [rax+0x58]
  80452c:	48 89 4a 50          	mov    QWORD PTR [rdx+0x50],rcx
  804530:	48 89 5a 58          	mov    QWORD PTR [rdx+0x58],rbx
  804534:	48 8b 48 60          	mov    rcx,QWORD PTR [rax+0x60]
  804538:	48 8b 58 68          	mov    rbx,QWORD PTR [rax+0x68]
  80453c:	48 89 4a 60          	mov    QWORD PTR [rdx+0x60],rcx
  804540:	48 89 5a 68          	mov    QWORD PTR [rdx+0x68],rbx
  804544:	48 8b 48 70          	mov    rcx,QWORD PTR [rax+0x70]
  804548:	48 8b 58 78          	mov    rbx,QWORD PTR [rax+0x78]
  80454c:	48 89 4a 70          	mov    QWORD PTR [rdx+0x70],rcx
  804550:	48 89 5a 78          	mov    QWORD PTR [rdx+0x78],rbx
  804554:	48 8b 88 80 00 00 00 	mov    rcx,QWORD PTR [rax+0x80]
  80455b:	48 8b 98 88 00 00 00 	mov    rbx,QWORD PTR [rax+0x88]
  804562:	48 89 8a 80 00 00 00 	mov    QWORD PTR [rdx+0x80],rcx
  804569:	48 89 9a 88 00 00 00 	mov    QWORD PTR [rdx+0x88],rbx
  804570:	48 8b 88 90 00 00 00 	mov    rcx,QWORD PTR [rax+0x90]
  804577:	48 8b 98 98 00 00 00 	mov    rbx,QWORD PTR [rax+0x98]
  80457e:	48 89 8a 90 00 00 00 	mov    QWORD PTR [rdx+0x90],rcx
  804585:	48 89 9a 98 00 00 00 	mov    QWORD PTR [rdx+0x98],rbx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:259
            drvs[i].flag=DRV_FLAG_USED;
  80458c:	48 b9 80 58 40 00 00 	movabs rcx,0x405880
  804593:	00 00 00 
  804596:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  804599:	48 63 d0             	movsxd rdx,eax
  80459c:	48 89 d0             	mov    rax,rdx
  80459f:	48 c1 e0 02          	shl    rax,0x2
  8045a3:	48 01 d0             	add    rax,rdx
  8045a6:	48 c1 e0 05          	shl    rax,0x5
  8045aa:	48 01 c8             	add    rax,rcx
  8045ad:	c7 00 01 00 00 00    	mov    DWORD PTR [rax],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:260
            return i;
  8045b3:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  8045b6:	eb 13                	jmp    8045cb <reg_driver+0x15f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:254 (discriminator 2)
    for(int i=0;i<MAX_DRIVERS;i++)
  8045b8:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:254 (discriminator 1)
  8045bc:	83 7d f4 1f          	cmp    DWORD PTR [rbp-0xc],0x1f
  8045c0:	0f 8e bf fe ff ff    	jle    804485 <reg_driver+0x19>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:263
        }
    }
    return -1;
  8045c6:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:264
}
  8045cb:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
  8045cf:	c9                   	leave  
  8045d0:	c3                   	ret    

00000000008045d1 <sys_find_dev>:
sys_find_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:267

int sys_find_dev(char *name)
{
  8045d1:	f3 0f 1e fa          	endbr64 
  8045d5:	55                   	push   rbp
  8045d6:	48 89 e5             	mov    rbp,rsp
  8045d9:	48 83 ec 20          	sub    rsp,0x20
  8045dd:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:268
    for(int i=0;i<MAX_DEVICES;i++)
  8045e1:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
  8045e8:	e9 85 00 00 00       	jmp    804672 <sys_find_dev+0xa1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:270
    {
        if(devs[i].flag!=DEV_FLAG_EMPTY&&strcmp(name,devs[i].name)==0)
  8045ed:	48 b9 80 2e 40 00 00 	movabs rcx,0x402e80
  8045f4:	00 00 00 
  8045f7:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  8045fa:	48 63 d0             	movsxd rdx,eax
  8045fd:	48 89 d0             	mov    rax,rdx
  804600:	48 c1 e0 02          	shl    rax,0x2
  804604:	48 01 d0             	add    rax,rdx
  804607:	48 c1 e0 02          	shl    rax,0x2
  80460b:	48 01 d0             	add    rax,rdx
  80460e:	48 c1 e0 03          	shl    rax,0x3
  804612:	48 01 c8             	add    rax,rcx
  804615:	48 83 c0 10          	add    rax,0x10
  804619:	8b 00                	mov    eax,DWORD PTR [rax]
  80461b:	85 c0                	test   eax,eax
  80461d:	74 4f                	je     80466e <sys_find_dev+0x9d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:270 (discriminator 1)
  80461f:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  804622:	48 63 d0             	movsxd rdx,eax
  804625:	48 89 d0             	mov    rax,rdx
  804628:	48 c1 e0 02          	shl    rax,0x2
  80462c:	48 01 d0             	add    rax,rdx
  80462f:	48 c1 e0 02          	shl    rax,0x2
  804633:	48 01 d0             	add    rax,rdx
  804636:	48 c1 e0 03          	shl    rax,0x3
  80463a:	48 8d 50 10          	lea    rdx,[rax+0x10]
  80463e:	48 b8 80 2e 40 00 00 	movabs rax,0x402e80
  804645:	00 00 00 
  804648:	48 01 d0             	add    rax,rdx
  80464b:	48 8d 50 04          	lea    rdx,[rax+0x4]
  80464f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  804653:	48 89 d6             	mov    rsi,rdx
  804656:	48 89 c7             	mov    rdi,rax
  804659:	48 b8 10 06 81 00 00 	movabs rax,0x810610
  804660:	00 00 00 
  804663:	ff d0                	call   rax
  804665:	85 c0                	test   eax,eax
  804667:	75 05                	jne    80466e <sys_find_dev+0x9d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:271
            return i;
  804669:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80466c:	eb 13                	jmp    804681 <sys_find_dev+0xb0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:268 (discriminator 2)
    for(int i=0;i<MAX_DEVICES;i++)
  80466e:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:268 (discriminator 1)
  804672:	83 7d fc 3f          	cmp    DWORD PTR [rbp-0x4],0x3f
  804676:	0f 8e 71 ff ff ff    	jle    8045ed <sys_find_dev+0x1c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:273
    }
    return -1;
  80467c:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:274
}
  804681:	c9                   	leave  
  804682:	c3                   	ret    

0000000000804683 <sys_operate_dev>:
sys_operate_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:277

int sys_operate_dev(char *name,int func,driver_args* args)
{
  804683:	f3 0f 1e fa          	endbr64 
  804687:	55                   	push   rbp
  804688:	48 89 e5             	mov    rbp,rsp
  80468b:	48 83 ec 30          	sub    rsp,0x30
  80468f:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  804693:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
  804696:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:278
    int i=0;
  80469a:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:279
    for(;i<MAX_DEVICES;i++)
  8046a1:	e9 80 00 00 00       	jmp    804726 <sys_operate_dev+0xa3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:281
    {
        if(devs[i].flag!=DEV_FLAG_EMPTY&&strcmp(name,devs[i].name)==0)
  8046a6:	48 b9 80 2e 40 00 00 	movabs rcx,0x402e80
  8046ad:	00 00 00 
  8046b0:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  8046b3:	48 63 d0             	movsxd rdx,eax
  8046b6:	48 89 d0             	mov    rax,rdx
  8046b9:	48 c1 e0 02          	shl    rax,0x2
  8046bd:	48 01 d0             	add    rax,rdx
  8046c0:	48 c1 e0 02          	shl    rax,0x2
  8046c4:	48 01 d0             	add    rax,rdx
  8046c7:	48 c1 e0 03          	shl    rax,0x3
  8046cb:	48 01 c8             	add    rax,rcx
  8046ce:	48 83 c0 10          	add    rax,0x10
  8046d2:	8b 00                	mov    eax,DWORD PTR [rax]
  8046d4:	85 c0                	test   eax,eax
  8046d6:	74 4a                	je     804722 <sys_operate_dev+0x9f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:281 (discriminator 1)
  8046d8:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  8046db:	48 63 d0             	movsxd rdx,eax
  8046de:	48 89 d0             	mov    rax,rdx
  8046e1:	48 c1 e0 02          	shl    rax,0x2
  8046e5:	48 01 d0             	add    rax,rdx
  8046e8:	48 c1 e0 02          	shl    rax,0x2
  8046ec:	48 01 d0             	add    rax,rdx
  8046ef:	48 c1 e0 03          	shl    rax,0x3
  8046f3:	48 8d 50 10          	lea    rdx,[rax+0x10]
  8046f7:	48 b8 80 2e 40 00 00 	movabs rax,0x402e80
  8046fe:	00 00 00 
  804701:	48 01 d0             	add    rax,rdx
  804704:	48 8d 50 04          	lea    rdx,[rax+0x4]
  804708:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80470c:	48 89 d6             	mov    rsi,rdx
  80470f:	48 89 c7             	mov    rdi,rax
  804712:	48 b8 10 06 81 00 00 	movabs rax,0x810610
  804719:	00 00 00 
  80471c:	ff d0                	call   rax
  80471e:	85 c0                	test   eax,eax
  804720:	74 10                	je     804732 <sys_operate_dev+0xaf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:279
    for(;i<MAX_DEVICES;i++)
  804722:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:279 (discriminator 1)
  804726:	83 7d fc 3f          	cmp    DWORD PTR [rbp-0x4],0x3f
  80472a:	0f 8e 76 ff ff ff    	jle    8046a6 <sys_operate_dev+0x23>
  804730:	eb 01                	jmp    804733 <sys_operate_dev+0xb0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:282
            break;
  804732:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:284
    }
    if(i==MAX_DEVICES)return -1;
  804733:	83 7d fc 40          	cmp    DWORD PTR [rbp-0x4],0x40
  804737:	75 0a                	jne    804743 <sys_operate_dev+0xc0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:284 (discriminator 1)
  804739:	b8 ff ff ff ff       	mov    eax,0xffffffff
  80473e:	e9 33 03 00 00       	jmp    804a76 <sys_operate_dev+0x3f3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:285
    switch (func) {
  804743:	83 7d e4 0b          	cmp    DWORD PTR [rbp-0x1c],0xb
  804747:	0f 87 24 03 00 00    	ja     804a71 <sys_operate_dev+0x3ee>
  80474d:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  804750:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
  804757:	00 
  804758:	48 b8 68 8a 81 00 00 	movabs rax,0x818a68
  80475f:	00 00 00 
  804762:	48 01 d0             	add    rax,rdx
  804765:	48 8b 00             	mov    rax,QWORD PTR [rax]
  804768:	3e ff e0             	notrack jmp rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:286
        case DRVF_OPEN :return devs[i].drv->open(args);
  80476b:	48 b9 80 2e 40 00 00 	movabs rcx,0x402e80
  804772:	00 00 00 
  804775:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  804778:	48 63 d0             	movsxd rdx,eax
  80477b:	48 89 d0             	mov    rax,rdx
  80477e:	48 c1 e0 02          	shl    rax,0x2
  804782:	48 01 d0             	add    rax,rdx
  804785:	48 c1 e0 02          	shl    rax,0x2
  804789:	48 01 d0             	add    rax,rdx
  80478c:	48 c1 e0 03          	shl    rax,0x3
  804790:	48 01 c8             	add    rax,rcx
  804793:	48 83 c0 78          	add    rax,0x78
  804797:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80479a:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
  80479e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  8047a2:	48 89 c7             	mov    rdi,rax
  8047a5:	ff d2                	call   rdx
  8047a7:	e9 ca 02 00 00       	jmp    804a76 <sys_operate_dev+0x3f3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:287
        case DRVF_CLOSE:return devs[i].drv->close(args);
  8047ac:	48 b9 80 2e 40 00 00 	movabs rcx,0x402e80
  8047b3:	00 00 00 
  8047b6:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  8047b9:	48 63 d0             	movsxd rdx,eax
  8047bc:	48 89 d0             	mov    rax,rdx
  8047bf:	48 c1 e0 02          	shl    rax,0x2
  8047c3:	48 01 d0             	add    rax,rdx
  8047c6:	48 c1 e0 02          	shl    rax,0x2
  8047ca:	48 01 d0             	add    rax,rdx
  8047cd:	48 c1 e0 03          	shl    rax,0x3
  8047d1:	48 01 c8             	add    rax,rcx
  8047d4:	48 83 c0 78          	add    rax,0x78
  8047d8:	48 8b 00             	mov    rax,QWORD PTR [rax]
  8047db:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
  8047df:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  8047e3:	48 89 c7             	mov    rdi,rax
  8047e6:	ff d2                	call   rdx
  8047e8:	e9 89 02 00 00       	jmp    804a76 <sys_operate_dev+0x3f3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:288
        case DRVF_READ :return devs[i].drv->read(args);
  8047ed:	48 b9 80 2e 40 00 00 	movabs rcx,0x402e80
  8047f4:	00 00 00 
  8047f7:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  8047fa:	48 63 d0             	movsxd rdx,eax
  8047fd:	48 89 d0             	mov    rax,rdx
  804800:	48 c1 e0 02          	shl    rax,0x2
  804804:	48 01 d0             	add    rax,rdx
  804807:	48 c1 e0 02          	shl    rax,0x2
  80480b:	48 01 d0             	add    rax,rdx
  80480e:	48 c1 e0 03          	shl    rax,0x3
  804812:	48 01 c8             	add    rax,rcx
  804815:	48 83 c0 78          	add    rax,0x78
  804819:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80481c:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
  804820:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  804824:	48 89 c7             	mov    rdi,rax
  804827:	ff d2                	call   rdx
  804829:	e9 48 02 00 00       	jmp    804a76 <sys_operate_dev+0x3f3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:289
        case DRVF_WRITE:return devs[i].drv->write(args);
  80482e:	48 b9 80 2e 40 00 00 	movabs rcx,0x402e80
  804835:	00 00 00 
  804838:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80483b:	48 63 d0             	movsxd rdx,eax
  80483e:	48 89 d0             	mov    rax,rdx
  804841:	48 c1 e0 02          	shl    rax,0x2
  804845:	48 01 d0             	add    rax,rdx
  804848:	48 c1 e0 02          	shl    rax,0x2
  80484c:	48 01 d0             	add    rax,rdx
  80484f:	48 c1 e0 03          	shl    rax,0x3
  804853:	48 01 c8             	add    rax,rcx
  804856:	48 83 c0 78          	add    rax,0x78
  80485a:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80485d:	48 8b 50 20          	mov    rdx,QWORD PTR [rax+0x20]
  804861:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  804865:	48 89 c7             	mov    rdi,rax
  804868:	ff d2                	call   rdx
  80486a:	e9 07 02 00 00       	jmp    804a76 <sys_operate_dev+0x3f3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:290
        case DRVF_CHK  :return devs[i].drv->check(args);
  80486f:	48 b9 80 2e 40 00 00 	movabs rcx,0x402e80
  804876:	00 00 00 
  804879:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80487c:	48 63 d0             	movsxd rdx,eax
  80487f:	48 89 d0             	mov    rax,rdx
  804882:	48 c1 e0 02          	shl    rax,0x2
  804886:	48 01 d0             	add    rax,rdx
  804889:	48 c1 e0 02          	shl    rax,0x2
  80488d:	48 01 d0             	add    rax,rdx
  804890:	48 c1 e0 03          	shl    rax,0x3
  804894:	48 01 c8             	add    rax,rcx
  804897:	48 83 c0 78          	add    rax,0x78
  80489b:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80489e:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
  8048a2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  8048a6:	48 89 c7             	mov    rdi,rax
  8048a9:	ff d2                	call   rdx
  8048ab:	e9 c6 01 00 00       	jmp    804a76 <sys_operate_dev+0x3f3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:291
        case DRVF_RSVD :return devs[i].drv->reserved(args);
  8048b0:	48 b9 80 2e 40 00 00 	movabs rcx,0x402e80
  8048b7:	00 00 00 
  8048ba:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  8048bd:	48 63 d0             	movsxd rdx,eax
  8048c0:	48 89 d0             	mov    rax,rdx
  8048c3:	48 c1 e0 02          	shl    rax,0x2
  8048c7:	48 01 d0             	add    rax,rdx
  8048ca:	48 c1 e0 02          	shl    rax,0x2
  8048ce:	48 01 d0             	add    rax,rdx
  8048d1:	48 c1 e0 03          	shl    rax,0x3
  8048d5:	48 01 c8             	add    rax,rcx
  8048d8:	48 83 c0 78          	add    rax,0x78
  8048dc:	48 8b 00             	mov    rax,QWORD PTR [rax]
  8048df:	48 8b 50 30          	mov    rdx,QWORD PTR [rax+0x30]
  8048e3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  8048e7:	48 89 c7             	mov    rdi,rax
  8048ea:	ff d2                	call   rdx
  8048ec:	e9 85 01 00 00       	jmp    804a76 <sys_operate_dev+0x3f3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:292
        case DRVF_INT  :return devs[i].drv->inthandler(args);
  8048f1:	48 b9 80 2e 40 00 00 	movabs rcx,0x402e80
  8048f8:	00 00 00 
  8048fb:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  8048fe:	48 63 d0             	movsxd rdx,eax
  804901:	48 89 d0             	mov    rax,rdx
  804904:	48 c1 e0 02          	shl    rax,0x2
  804908:	48 01 d0             	add    rax,rdx
  80490b:	48 c1 e0 02          	shl    rax,0x2
  80490f:	48 01 d0             	add    rax,rdx
  804912:	48 c1 e0 03          	shl    rax,0x3
  804916:	48 01 c8             	add    rax,rcx
  804919:	48 83 c0 78          	add    rax,0x78
  80491d:	48 8b 00             	mov    rax,QWORD PTR [rax]
  804920:	48 8b 50 38          	mov    rdx,QWORD PTR [rax+0x38]
  804924:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  804928:	48 89 c7             	mov    rdi,rax
  80492b:	ff d2                	call   rdx
  80492d:	e9 44 01 00 00       	jmp    804a76 <sys_operate_dev+0x3f3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:293
        case DRVF_FIND :return devs[i].drv->find(args);
  804932:	48 b9 80 2e 40 00 00 	movabs rcx,0x402e80
  804939:	00 00 00 
  80493c:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80493f:	48 63 d0             	movsxd rdx,eax
  804942:	48 89 d0             	mov    rax,rdx
  804945:	48 c1 e0 02          	shl    rax,0x2
  804949:	48 01 d0             	add    rax,rdx
  80494c:	48 c1 e0 02          	shl    rax,0x2
  804950:	48 01 d0             	add    rax,rdx
  804953:	48 c1 e0 03          	shl    rax,0x3
  804957:	48 01 c8             	add    rax,rcx
  80495a:	48 83 c0 78          	add    rax,0x78
  80495e:	48 8b 00             	mov    rax,QWORD PTR [rax]
  804961:	48 8b 50 40          	mov    rdx,QWORD PTR [rax+0x40]
  804965:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  804969:	48 89 c7             	mov    rdi,rax
  80496c:	ff d2                	call   rdx
  80496e:	e9 03 01 00 00       	jmp    804a76 <sys_operate_dev+0x3f3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:294
        case DRVF_RM   :return devs[i].drv->rm(args);
  804973:	48 b9 80 2e 40 00 00 	movabs rcx,0x402e80
  80497a:	00 00 00 
  80497d:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  804980:	48 63 d0             	movsxd rdx,eax
  804983:	48 89 d0             	mov    rax,rdx
  804986:	48 c1 e0 02          	shl    rax,0x2
  80498a:	48 01 d0             	add    rax,rdx
  80498d:	48 c1 e0 02          	shl    rax,0x2
  804991:	48 01 d0             	add    rax,rdx
  804994:	48 c1 e0 03          	shl    rax,0x3
  804998:	48 01 c8             	add    rax,rcx
  80499b:	48 83 c0 78          	add    rax,0x78
  80499f:	48 8b 00             	mov    rax,QWORD PTR [rax]
  8049a2:	48 8b 50 48          	mov    rdx,QWORD PTR [rax+0x48]
  8049a6:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  8049aa:	48 89 c7             	mov    rdi,rax
  8049ad:	ff d2                	call   rdx
  8049af:	e9 c2 00 00 00       	jmp    804a76 <sys_operate_dev+0x3f3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:295
        case DRVF_TOUCH:return devs[i].drv->touch(args);
  8049b4:	48 b9 80 2e 40 00 00 	movabs rcx,0x402e80
  8049bb:	00 00 00 
  8049be:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  8049c1:	48 63 d0             	movsxd rdx,eax
  8049c4:	48 89 d0             	mov    rax,rdx
  8049c7:	48 c1 e0 02          	shl    rax,0x2
  8049cb:	48 01 d0             	add    rax,rdx
  8049ce:	48 c1 e0 02          	shl    rax,0x2
  8049d2:	48 01 d0             	add    rax,rdx
  8049d5:	48 c1 e0 03          	shl    rax,0x3
  8049d9:	48 01 c8             	add    rax,rcx
  8049dc:	48 83 c0 78          	add    rax,0x78
  8049e0:	48 8b 00             	mov    rax,QWORD PTR [rax]
  8049e3:	48 8b 50 50          	mov    rdx,QWORD PTR [rax+0x50]
  8049e7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  8049eb:	48 89 c7             	mov    rdi,rax
  8049ee:	ff d2                	call   rdx
  8049f0:	e9 81 00 00 00       	jmp    804a76 <sys_operate_dev+0x3f3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:296
        case DRVF_MKDIR:return devs[i].drv->mkdir(args);
  8049f5:	48 b9 80 2e 40 00 00 	movabs rcx,0x402e80
  8049fc:	00 00 00 
  8049ff:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  804a02:	48 63 d0             	movsxd rdx,eax
  804a05:	48 89 d0             	mov    rax,rdx
  804a08:	48 c1 e0 02          	shl    rax,0x2
  804a0c:	48 01 d0             	add    rax,rdx
  804a0f:	48 c1 e0 02          	shl    rax,0x2
  804a13:	48 01 d0             	add    rax,rdx
  804a16:	48 c1 e0 03          	shl    rax,0x3
  804a1a:	48 01 c8             	add    rax,rcx
  804a1d:	48 83 c0 78          	add    rax,0x78
  804a21:	48 8b 00             	mov    rax,QWORD PTR [rax]
  804a24:	48 8b 50 58          	mov    rdx,QWORD PTR [rax+0x58]
  804a28:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  804a2c:	48 89 c7             	mov    rdi,rax
  804a2f:	ff d2                	call   rdx
  804a31:	eb 43                	jmp    804a76 <sys_operate_dev+0x3f3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:297
        case DRVF_LS:return    devs[i].drv->ls(args);
  804a33:	48 b9 80 2e 40 00 00 	movabs rcx,0x402e80
  804a3a:	00 00 00 
  804a3d:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  804a40:	48 63 d0             	movsxd rdx,eax
  804a43:	48 89 d0             	mov    rax,rdx
  804a46:	48 c1 e0 02          	shl    rax,0x2
  804a4a:	48 01 d0             	add    rax,rdx
  804a4d:	48 c1 e0 02          	shl    rax,0x2
  804a51:	48 01 d0             	add    rax,rdx
  804a54:	48 c1 e0 03          	shl    rax,0x3
  804a58:	48 01 c8             	add    rax,rcx
  804a5b:	48 83 c0 78          	add    rax,0x78
  804a5f:	48 8b 00             	mov    rax,QWORD PTR [rax]
  804a62:	48 8b 50 60          	mov    rdx,QWORD PTR [rax+0x60]
  804a66:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  804a6a:	48 89 c7             	mov    rdi,rax
  804a6d:	ff d2                	call   rdx
  804a6f:	eb 05                	jmp    804a76 <sys_operate_dev+0x3f3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:299
    }
    return -1;
  804a71:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:300
}
  804a76:	c9                   	leave  
  804a77:	c3                   	ret    

0000000000804a78 <call_drv_func>:
call_drv_func():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:302
int call_drv_func(int drv_n,int func_n,driver_args *args)
{
  804a78:	f3 0f 1e fa          	endbr64 
  804a7c:	55                   	push   rbp
  804a7d:	48 89 e5             	mov    rbp,rsp
  804a80:	48 83 ec 10          	sub    rsp,0x10
  804a84:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
  804a87:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
  804a8a:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:303
    if(drvs[drv_n].flag==DRV_FLAG_EMPTY)return -1;
  804a8e:	48 b9 80 58 40 00 00 	movabs rcx,0x405880
  804a95:	00 00 00 
  804a98:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  804a9b:	48 63 d0             	movsxd rdx,eax
  804a9e:	48 89 d0             	mov    rax,rdx
  804aa1:	48 c1 e0 02          	shl    rax,0x2
  804aa5:	48 01 d0             	add    rax,rdx
  804aa8:	48 c1 e0 05          	shl    rax,0x5
  804aac:	48 01 c8             	add    rax,rcx
  804aaf:	8b 00                	mov    eax,DWORD PTR [rax]
  804ab1:	85 c0                	test   eax,eax
  804ab3:	75 0a                	jne    804abf <call_drv_func+0x47>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:303 (discriminator 1)
  804ab5:	b8 ff ff ff ff       	mov    eax,0xffffffff
  804aba:	e9 ac 02 00 00       	jmp    804d6b <call_drv_func+0x2f3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:306
    /*driverfunc f=drvs[drv_n].func_thunk[func_n];
    return f(args);*/
    switch (func_n) {
  804abf:	83 7d f8 0b          	cmp    DWORD PTR [rbp-0x8],0xb
  804ac3:	0f 87 9d 02 00 00    	ja     804d66 <call_drv_func+0x2ee>
  804ac9:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  804acc:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
  804ad3:	00 
  804ad4:	48 b8 c8 8a 81 00 00 	movabs rax,0x818ac8
  804adb:	00 00 00 
  804ade:	48 01 d0             	add    rax,rdx
  804ae1:	48 8b 00             	mov    rax,QWORD PTR [rax]
  804ae4:	3e ff e0             	notrack jmp rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:307
        case DRVF_OPEN :return drvs[drv_n].open(args);
  804ae7:	48 b9 80 58 40 00 00 	movabs rcx,0x405880
  804aee:	00 00 00 
  804af1:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  804af4:	48 63 d0             	movsxd rdx,eax
  804af7:	48 89 d0             	mov    rax,rdx
  804afa:	48 c1 e0 02          	shl    rax,0x2
  804afe:	48 01 d0             	add    rax,rdx
  804b01:	48 c1 e0 05          	shl    rax,0x5
  804b05:	48 01 c8             	add    rax,rcx
  804b08:	48 83 c0 08          	add    rax,0x8
  804b0c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  804b0f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  804b13:	48 89 c7             	mov    rdi,rax
  804b16:	ff d2                	call   rdx
  804b18:	e9 4e 02 00 00       	jmp    804d6b <call_drv_func+0x2f3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:308
        case DRVF_CLOSE:return drvs[drv_n].close(args);
  804b1d:	48 b9 80 58 40 00 00 	movabs rcx,0x405880
  804b24:	00 00 00 
  804b27:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  804b2a:	48 63 d0             	movsxd rdx,eax
  804b2d:	48 89 d0             	mov    rax,rdx
  804b30:	48 c1 e0 02          	shl    rax,0x2
  804b34:	48 01 d0             	add    rax,rdx
  804b37:	48 c1 e0 05          	shl    rax,0x5
  804b3b:	48 01 c8             	add    rax,rcx
  804b3e:	48 83 c0 10          	add    rax,0x10
  804b42:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  804b45:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  804b49:	48 89 c7             	mov    rdi,rax
  804b4c:	ff d2                	call   rdx
  804b4e:	e9 18 02 00 00       	jmp    804d6b <call_drv_func+0x2f3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:309
        case DRVF_READ :return drvs[drv_n].read(args);
  804b53:	48 b9 80 58 40 00 00 	movabs rcx,0x405880
  804b5a:	00 00 00 
  804b5d:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  804b60:	48 63 d0             	movsxd rdx,eax
  804b63:	48 89 d0             	mov    rax,rdx
  804b66:	48 c1 e0 02          	shl    rax,0x2
  804b6a:	48 01 d0             	add    rax,rdx
  804b6d:	48 c1 e0 05          	shl    rax,0x5
  804b71:	48 01 c8             	add    rax,rcx
  804b74:	48 83 c0 18          	add    rax,0x18
  804b78:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  804b7b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  804b7f:	48 89 c7             	mov    rdi,rax
  804b82:	ff d2                	call   rdx
  804b84:	e9 e2 01 00 00       	jmp    804d6b <call_drv_func+0x2f3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:310
        case DRVF_WRITE:return drvs[drv_n].write(args);
  804b89:	48 b9 80 58 40 00 00 	movabs rcx,0x405880
  804b90:	00 00 00 
  804b93:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  804b96:	48 63 d0             	movsxd rdx,eax
  804b99:	48 89 d0             	mov    rax,rdx
  804b9c:	48 c1 e0 02          	shl    rax,0x2
  804ba0:	48 01 d0             	add    rax,rdx
  804ba3:	48 c1 e0 05          	shl    rax,0x5
  804ba7:	48 01 c8             	add    rax,rcx
  804baa:	48 83 c0 20          	add    rax,0x20
  804bae:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  804bb1:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  804bb5:	48 89 c7             	mov    rdi,rax
  804bb8:	ff d2                	call   rdx
  804bba:	e9 ac 01 00 00       	jmp    804d6b <call_drv_func+0x2f3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:311
        case DRVF_CHK  :return drvs[drv_n].check(args);
  804bbf:	48 b9 80 58 40 00 00 	movabs rcx,0x405880
  804bc6:	00 00 00 
  804bc9:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  804bcc:	48 63 d0             	movsxd rdx,eax
  804bcf:	48 89 d0             	mov    rax,rdx
  804bd2:	48 c1 e0 02          	shl    rax,0x2
  804bd6:	48 01 d0             	add    rax,rdx
  804bd9:	48 c1 e0 05          	shl    rax,0x5
  804bdd:	48 01 c8             	add    rax,rcx
  804be0:	48 83 c0 28          	add    rax,0x28
  804be4:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  804be7:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  804beb:	48 89 c7             	mov    rdi,rax
  804bee:	ff d2                	call   rdx
  804bf0:	e9 76 01 00 00       	jmp    804d6b <call_drv_func+0x2f3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:312
        case DRVF_RSVD :return drvs[drv_n].reserved(args);
  804bf5:	48 b9 80 58 40 00 00 	movabs rcx,0x405880
  804bfc:	00 00 00 
  804bff:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  804c02:	48 63 d0             	movsxd rdx,eax
  804c05:	48 89 d0             	mov    rax,rdx
  804c08:	48 c1 e0 02          	shl    rax,0x2
  804c0c:	48 01 d0             	add    rax,rdx
  804c0f:	48 c1 e0 05          	shl    rax,0x5
  804c13:	48 01 c8             	add    rax,rcx
  804c16:	48 83 c0 30          	add    rax,0x30
  804c1a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  804c1d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  804c21:	48 89 c7             	mov    rdi,rax
  804c24:	ff d2                	call   rdx
  804c26:	e9 40 01 00 00       	jmp    804d6b <call_drv_func+0x2f3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:313
        case DRVF_INT  :return drvs[drv_n].inthandler(args);
  804c2b:	48 b9 80 58 40 00 00 	movabs rcx,0x405880
  804c32:	00 00 00 
  804c35:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  804c38:	48 63 d0             	movsxd rdx,eax
  804c3b:	48 89 d0             	mov    rax,rdx
  804c3e:	48 c1 e0 02          	shl    rax,0x2
  804c42:	48 01 d0             	add    rax,rdx
  804c45:	48 c1 e0 05          	shl    rax,0x5
  804c49:	48 01 c8             	add    rax,rcx
  804c4c:	48 83 c0 38          	add    rax,0x38
  804c50:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  804c53:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  804c57:	48 89 c7             	mov    rdi,rax
  804c5a:	ff d2                	call   rdx
  804c5c:	e9 0a 01 00 00       	jmp    804d6b <call_drv_func+0x2f3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:314
        case DRVF_FIND :return drvs[drv_n].find(args);
  804c61:	48 b9 80 58 40 00 00 	movabs rcx,0x405880
  804c68:	00 00 00 
  804c6b:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  804c6e:	48 63 d0             	movsxd rdx,eax
  804c71:	48 89 d0             	mov    rax,rdx
  804c74:	48 c1 e0 02          	shl    rax,0x2
  804c78:	48 01 d0             	add    rax,rdx
  804c7b:	48 c1 e0 05          	shl    rax,0x5
  804c7f:	48 01 c8             	add    rax,rcx
  804c82:	48 83 c0 40          	add    rax,0x40
  804c86:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  804c89:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  804c8d:	48 89 c7             	mov    rdi,rax
  804c90:	ff d2                	call   rdx
  804c92:	e9 d4 00 00 00       	jmp    804d6b <call_drv_func+0x2f3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:315
        case DRVF_RM   :return drvs[drv_n].rm(args);
  804c97:	48 b9 80 58 40 00 00 	movabs rcx,0x405880
  804c9e:	00 00 00 
  804ca1:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  804ca4:	48 63 d0             	movsxd rdx,eax
  804ca7:	48 89 d0             	mov    rax,rdx
  804caa:	48 c1 e0 02          	shl    rax,0x2
  804cae:	48 01 d0             	add    rax,rdx
  804cb1:	48 c1 e0 05          	shl    rax,0x5
  804cb5:	48 01 c8             	add    rax,rcx
  804cb8:	48 83 c0 48          	add    rax,0x48
  804cbc:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  804cbf:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  804cc3:	48 89 c7             	mov    rdi,rax
  804cc6:	ff d2                	call   rdx
  804cc8:	e9 9e 00 00 00       	jmp    804d6b <call_drv_func+0x2f3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:316
        case DRVF_TOUCH:return drvs[drv_n].touch(args);
  804ccd:	48 b9 80 58 40 00 00 	movabs rcx,0x405880
  804cd4:	00 00 00 
  804cd7:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  804cda:	48 63 d0             	movsxd rdx,eax
  804cdd:	48 89 d0             	mov    rax,rdx
  804ce0:	48 c1 e0 02          	shl    rax,0x2
  804ce4:	48 01 d0             	add    rax,rdx
  804ce7:	48 c1 e0 05          	shl    rax,0x5
  804ceb:	48 01 c8             	add    rax,rcx
  804cee:	48 83 c0 50          	add    rax,0x50
  804cf2:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  804cf5:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  804cf9:	48 89 c7             	mov    rdi,rax
  804cfc:	ff d2                	call   rdx
  804cfe:	eb 6b                	jmp    804d6b <call_drv_func+0x2f3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:317
        case DRVF_MKDIR:return drvs[drv_n].mkdir(args);
  804d00:	48 b9 80 58 40 00 00 	movabs rcx,0x405880
  804d07:	00 00 00 
  804d0a:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  804d0d:	48 63 d0             	movsxd rdx,eax
  804d10:	48 89 d0             	mov    rax,rdx
  804d13:	48 c1 e0 02          	shl    rax,0x2
  804d17:	48 01 d0             	add    rax,rdx
  804d1a:	48 c1 e0 05          	shl    rax,0x5
  804d1e:	48 01 c8             	add    rax,rcx
  804d21:	48 83 c0 58          	add    rax,0x58
  804d25:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  804d28:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  804d2c:	48 89 c7             	mov    rdi,rax
  804d2f:	ff d2                	call   rdx
  804d31:	eb 38                	jmp    804d6b <call_drv_func+0x2f3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:318
        case DRVF_LS:return drvs[drv_n].ls(args);
  804d33:	48 b9 80 58 40 00 00 	movabs rcx,0x405880
  804d3a:	00 00 00 
  804d3d:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  804d40:	48 63 d0             	movsxd rdx,eax
  804d43:	48 89 d0             	mov    rax,rdx
  804d46:	48 c1 e0 02          	shl    rax,0x2
  804d4a:	48 01 d0             	add    rax,rdx
  804d4d:	48 c1 e0 05          	shl    rax,0x5
  804d51:	48 01 c8             	add    rax,rcx
  804d54:	48 83 c0 60          	add    rax,0x60
  804d58:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  804d5b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  804d5f:	48 89 c7             	mov    rdi,rax
  804d62:	ff d2                	call   rdx
  804d64:	eb 05                	jmp    804d6b <call_drv_func+0x2f3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:320
    }
    return -1;
  804d66:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:321
}
  804d6b:	c9                   	leave  
  804d6c:	c3                   	ret    

0000000000804d6d <dispose_device>:
dispose_device():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:322
int dispose_device(int dev){
  804d6d:	f3 0f 1e fa          	endbr64 
  804d71:	55                   	push   rbp
  804d72:	48 89 e5             	mov    rbp,rsp
  804d75:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:323
    if(devs[dev].flag!=DEV_FLAG_USED)return -1;
  804d78:	48 b9 80 2e 40 00 00 	movabs rcx,0x402e80
  804d7f:	00 00 00 
  804d82:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  804d85:	48 63 d0             	movsxd rdx,eax
  804d88:	48 89 d0             	mov    rax,rdx
  804d8b:	48 c1 e0 02          	shl    rax,0x2
  804d8f:	48 01 d0             	add    rax,rdx
  804d92:	48 c1 e0 02          	shl    rax,0x2
  804d96:	48 01 d0             	add    rax,rdx
  804d99:	48 c1 e0 03          	shl    rax,0x3
  804d9d:	48 01 c8             	add    rax,rcx
  804da0:	48 83 c0 10          	add    rax,0x10
  804da4:	8b 00                	mov    eax,DWORD PTR [rax]
  804da6:	83 f8 01             	cmp    eax,0x1
  804da9:	74 07                	je     804db2 <dispose_device+0x45>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:323 (discriminator 1)
  804dab:	b8 ff ff ff ff       	mov    eax,0xffffffff
  804db0:	eb 69                	jmp    804e1b <dispose_device+0xae>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:324
    device* p=&devs[dev];
  804db2:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  804db5:	48 63 d0             	movsxd rdx,eax
  804db8:	48 89 d0             	mov    rax,rdx
  804dbb:	48 c1 e0 02          	shl    rax,0x2
  804dbf:	48 01 d0             	add    rax,rdx
  804dc2:	48 c1 e0 02          	shl    rax,0x2
  804dc6:	48 01 d0             	add    rax,rdx
  804dc9:	48 c1 e0 03          	shl    rax,0x3
  804dcd:	48 ba 80 2e 40 00 00 	movabs rdx,0x402e80
  804dd4:	00 00 00 
  804dd7:	48 01 d0             	add    rax,rdx
  804dda:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:326
    //从链表删除
    if(p->prev)p->prev->next=p->next;
  804dde:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  804de2:	48 8b 80 98 00 00 00 	mov    rax,QWORD PTR [rax+0x98]
  804de9:	48 85 c0             	test   rax,rax
  804dec:	74 1d                	je     804e0b <dispose_device+0x9e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:326 (discriminator 1)
  804dee:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  804df2:	48 8b 80 98 00 00 00 	mov    rax,QWORD PTR [rax+0x98]
  804df9:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  804dfd:	48 8b 92 90 00 00 00 	mov    rdx,QWORD PTR [rdx+0x90]
  804e04:	48 89 90 90 00 00 00 	mov    QWORD PTR [rax+0x90],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:327
    p->flag=DEV_FLAG_EMPTY;
  804e0b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  804e0f:	c7 40 10 00 00 00 00 	mov    DWORD PTR [rax+0x10],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:328
    return 0;
  804e16:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:329
}
  804e1b:	5d                   	pop    rbp
  804e1c:	c3                   	ret    

0000000000804e1d <dispose_driver>:
dispose_driver():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:330
int dispose_driver(driver *drv){
  804e1d:	f3 0f 1e fa          	endbr64 
  804e21:	55                   	push   rbp
  804e22:	48 89 e5             	mov    rbp,rsp
  804e25:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:332

}
  804e29:	90                   	nop
  804e2a:	5d                   	pop    rbp
  804e2b:	c3                   	ret    

0000000000804e2c <get_dev>:
get_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:335

device *get_dev(int devi)
{
  804e2c:	f3 0f 1e fa          	endbr64 
  804e30:	55                   	push   rbp
  804e31:	48 89 e5             	mov    rbp,rsp
  804e34:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:336
    return &devs[devi];
  804e37:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  804e3a:	48 63 d0             	movsxd rdx,eax
  804e3d:	48 89 d0             	mov    rax,rdx
  804e40:	48 c1 e0 02          	shl    rax,0x2
  804e44:	48 01 d0             	add    rax,rdx
  804e47:	48 c1 e0 02          	shl    rax,0x2
  804e4b:	48 01 d0             	add    rax,rdx
  804e4e:	48 c1 e0 03          	shl    rax,0x3
  804e52:	48 ba 80 2e 40 00 00 	movabs rdx,0x402e80
  804e59:	00 00 00 
  804e5c:	48 01 d0             	add    rax,rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:337
}
  804e5f:	5d                   	pop    rbp
  804e60:	c3                   	ret    

0000000000804e61 <get_drv>:
get_drv():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:339
driver *get_drv(int drvi)
{
  804e61:	f3 0f 1e fa          	endbr64 
  804e65:	55                   	push   rbp
  804e66:	48 89 e5             	mov    rbp,rsp
  804e69:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:340
    return &drvs[drvi];
  804e6c:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  804e6f:	48 63 d0             	movsxd rdx,eax
  804e72:	48 89 d0             	mov    rax,rdx
  804e75:	48 c1 e0 02          	shl    rax,0x2
  804e79:	48 01 d0             	add    rax,rdx
  804e7c:	48 c1 e0 05          	shl    rax,0x5
  804e80:	48 ba 80 58 40 00 00 	movabs rdx,0x405880
  804e87:	00 00 00 
  804e8a:	48 01 d0             	add    rax,rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:341
}
  804e8d:	5d                   	pop    rbp
  804e8e:	c3                   	ret    

0000000000804e8f <make_request>:
make_request():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:345

//发送一个操作设备的申请
int make_request(driver_args* args)
{
  804e8f:	f3 0f 1e fa          	endbr64 
  804e93:	55                   	push   rbp
  804e94:	48 89 e5             	mov    rbp,rsp
  804e97:	53                   	push   rbx
  804e98:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:347
    //在数组中寻找空项
    int i=0;
  804e9c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:348
    for(;i<NR_REQS;i++)
  804ea3:	eb 30                	jmp    804ed5 <make_request+0x46>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:350
    {
        if(reqs[i].stat==REQ_STAT_EMPTY)break;
  804ea5:	48 b9 80 6c 40 00 00 	movabs rcx,0x406c80
  804eac:	00 00 00 
  804eaf:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  804eb2:	48 63 d0             	movsxd rdx,eax
  804eb5:	48 89 d0             	mov    rax,rdx
  804eb8:	48 01 c0             	add    rax,rax
  804ebb:	48 01 d0             	add    rax,rdx
  804ebe:	48 c1 e0 06          	shl    rax,0x6
  804ec2:	48 01 c8             	add    rax,rcx
  804ec5:	48 05 ac 00 00 00    	add    rax,0xac
  804ecb:	8b 00                	mov    eax,DWORD PTR [rax]
  804ecd:	85 c0                	test   eax,eax
  804ecf:	74 0c                	je     804edd <make_request+0x4e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:348
    for(;i<NR_REQS;i++)
  804ed1:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:348 (discriminator 1)
  804ed5:	83 7d f4 1f          	cmp    DWORD PTR [rbp-0xc],0x1f
  804ed9:	7e ca                	jle    804ea5 <make_request+0x16>
  804edb:	eb 01                	jmp    804ede <make_request+0x4f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:350
        if(reqs[i].stat==REQ_STAT_EMPTY)break;
  804edd:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:352
    }
    if(i==NR_REQS)return -1;//满了
  804ede:	83 7d f4 20          	cmp    DWORD PTR [rbp-0xc],0x20
  804ee2:	75 0a                	jne    804eee <make_request+0x5f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:352 (discriminator 1)
  804ee4:	b8 ff ff ff ff       	mov    eax,0xffffffff
  804ee9:	e9 11 02 00 00       	jmp    8050ff <make_request+0x270>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:353
    reqs[i]=*args;//放入数组
  804eee:	48 b9 80 6c 40 00 00 	movabs rcx,0x406c80
  804ef5:	00 00 00 
  804ef8:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  804efb:	48 63 d0             	movsxd rdx,eax
  804efe:	48 89 d0             	mov    rax,rdx
  804f01:	48 01 c0             	add    rax,rax
  804f04:	48 01 d0             	add    rax,rdx
  804f07:	48 c1 e0 06          	shl    rax,0x6
  804f0b:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
  804f0f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  804f13:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  804f16:	48 8b 58 08          	mov    rbx,QWORD PTR [rax+0x8]
  804f1a:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  804f1d:	48 89 5a 08          	mov    QWORD PTR [rdx+0x8],rbx
  804f21:	48 8b 48 10          	mov    rcx,QWORD PTR [rax+0x10]
  804f25:	48 8b 58 18          	mov    rbx,QWORD PTR [rax+0x18]
  804f29:	48 89 4a 10          	mov    QWORD PTR [rdx+0x10],rcx
  804f2d:	48 89 5a 18          	mov    QWORD PTR [rdx+0x18],rbx
  804f31:	48 8b 48 20          	mov    rcx,QWORD PTR [rax+0x20]
  804f35:	48 8b 58 28          	mov    rbx,QWORD PTR [rax+0x28]
  804f39:	48 89 4a 20          	mov    QWORD PTR [rdx+0x20],rcx
  804f3d:	48 89 5a 28          	mov    QWORD PTR [rdx+0x28],rbx
  804f41:	48 8b 48 30          	mov    rcx,QWORD PTR [rax+0x30]
  804f45:	48 8b 58 38          	mov    rbx,QWORD PTR [rax+0x38]
  804f49:	48 89 4a 30          	mov    QWORD PTR [rdx+0x30],rcx
  804f4d:	48 89 5a 38          	mov    QWORD PTR [rdx+0x38],rbx
  804f51:	48 8b 48 40          	mov    rcx,QWORD PTR [rax+0x40]
  804f55:	48 8b 58 48          	mov    rbx,QWORD PTR [rax+0x48]
  804f59:	48 89 4a 40          	mov    QWORD PTR [rdx+0x40],rcx
  804f5d:	48 89 5a 48          	mov    QWORD PTR [rdx+0x48],rbx
  804f61:	48 8b 48 50          	mov    rcx,QWORD PTR [rax+0x50]
  804f65:	48 8b 58 58          	mov    rbx,QWORD PTR [rax+0x58]
  804f69:	48 89 4a 50          	mov    QWORD PTR [rdx+0x50],rcx
  804f6d:	48 89 5a 58          	mov    QWORD PTR [rdx+0x58],rbx
  804f71:	48 8b 48 60          	mov    rcx,QWORD PTR [rax+0x60]
  804f75:	48 8b 58 68          	mov    rbx,QWORD PTR [rax+0x68]
  804f79:	48 89 4a 60          	mov    QWORD PTR [rdx+0x60],rcx
  804f7d:	48 89 5a 68          	mov    QWORD PTR [rdx+0x68],rbx
  804f81:	48 8b 48 70          	mov    rcx,QWORD PTR [rax+0x70]
  804f85:	48 8b 58 78          	mov    rbx,QWORD PTR [rax+0x78]
  804f89:	48 89 4a 70          	mov    QWORD PTR [rdx+0x70],rcx
  804f8d:	48 89 5a 78          	mov    QWORD PTR [rdx+0x78],rbx
  804f91:	48 8b 88 80 00 00 00 	mov    rcx,QWORD PTR [rax+0x80]
  804f98:	48 8b 98 88 00 00 00 	mov    rbx,QWORD PTR [rax+0x88]
  804f9f:	48 89 8a 80 00 00 00 	mov    QWORD PTR [rdx+0x80],rcx
  804fa6:	48 89 9a 88 00 00 00 	mov    QWORD PTR [rdx+0x88],rbx
  804fad:	48 8b 88 90 00 00 00 	mov    rcx,QWORD PTR [rax+0x90]
  804fb4:	48 8b 98 98 00 00 00 	mov    rbx,QWORD PTR [rax+0x98]
  804fbb:	48 89 8a 90 00 00 00 	mov    QWORD PTR [rdx+0x90],rcx
  804fc2:	48 89 9a 98 00 00 00 	mov    QWORD PTR [rdx+0x98],rbx
  804fc9:	48 8b 88 a0 00 00 00 	mov    rcx,QWORD PTR [rax+0xa0]
  804fd0:	48 8b 98 a8 00 00 00 	mov    rbx,QWORD PTR [rax+0xa8]
  804fd7:	48 89 8a a0 00 00 00 	mov    QWORD PTR [rdx+0xa0],rcx
  804fde:	48 89 9a a8 00 00 00 	mov    QWORD PTR [rdx+0xa8],rbx
  804fe5:	48 8b 88 b0 00 00 00 	mov    rcx,QWORD PTR [rax+0xb0]
  804fec:	48 8b 98 b8 00 00 00 	mov    rbx,QWORD PTR [rax+0xb8]
  804ff3:	48 89 8a b0 00 00 00 	mov    QWORD PTR [rdx+0xb0],rcx
  804ffa:	48 89 9a b8 00 00 00 	mov    QWORD PTR [rdx+0xb8],rbx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:355
    //插入具体设备的等待链表中
    device* dev=&devs[args->dev];
  805001:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  805005:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [rax+0x8c]
  80500b:	48 63 d0             	movsxd rdx,eax
  80500e:	48 89 d0             	mov    rax,rdx
  805011:	48 c1 e0 02          	shl    rax,0x2
  805015:	48 01 d0             	add    rax,rdx
  805018:	48 c1 e0 02          	shl    rax,0x2
  80501c:	48 01 d0             	add    rax,rdx
  80501f:	48 c1 e0 03          	shl    rax,0x3
  805023:	48 ba 80 2e 40 00 00 	movabs rdx,0x402e80
  80502a:	00 00 00 
  80502d:	48 01 d0             	add    rax,rdx
  805030:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:356
    if(!dev->waiting_reqs)//空的等待队列
  805034:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  805038:	48 8b 80 88 00 00 00 	mov    rax,QWORD PTR [rax+0x88]
  80503f:	48 85 c0             	test   rax,rax
  805042:	75 30                	jne    805074 <make_request+0x1e5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:357
        dev->waiting_reqs=&reqs[i];
  805044:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  805047:	48 63 d0             	movsxd rdx,eax
  80504a:	48 89 d0             	mov    rax,rdx
  80504d:	48 01 c0             	add    rax,rax
  805050:	48 01 d0             	add    rax,rdx
  805053:	48 c1 e0 06          	shl    rax,0x6
  805057:	48 ba 80 6c 40 00 00 	movabs rdx,0x406c80
  80505e:	00 00 00 
  805061:	48 01 c2             	add    rdx,rax
  805064:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  805068:	48 89 90 88 00 00 00 	mov    QWORD PTR [rax+0x88],rdx
  80506f:	e9 88 00 00 00       	jmp    8050fc <make_request+0x26d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:359
    else{
        driver_args* p=dev->waiting_reqs;
  805074:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  805078:	48 8b 80 88 00 00 00 	mov    rax,QWORD PTR [rax+0x88]
  80507f:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:360
        for(;p->next;p=p->next);
  805083:	eb 0f                	jmp    805094 <make_request+0x205>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:360 (discriminator 2)
  805085:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  805089:	48 8b 80 b8 00 00 00 	mov    rax,QWORD PTR [rax+0xb8]
  805090:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:360 (discriminator 1)
  805094:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  805098:	48 8b 80 b8 00 00 00 	mov    rax,QWORD PTR [rax+0xb8]
  80509f:	48 85 c0             	test   rax,rax
  8050a2:	75 e1                	jne    805085 <make_request+0x1f6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:361
        p->next=&reqs[i];
  8050a4:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  8050a7:	48 63 d0             	movsxd rdx,eax
  8050aa:	48 89 d0             	mov    rax,rdx
  8050ad:	48 01 c0             	add    rax,rax
  8050b0:	48 01 d0             	add    rax,rdx
  8050b3:	48 c1 e0 06          	shl    rax,0x6
  8050b7:	48 ba 80 6c 40 00 00 	movabs rdx,0x406c80
  8050be:	00 00 00 
  8050c1:	48 01 c2             	add    rdx,rax
  8050c4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  8050c8:	48 89 90 b8 00 00 00 	mov    QWORD PTR [rax+0xb8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:362
        reqs[i].next=NULL;
  8050cf:	48 b9 80 6c 40 00 00 	movabs rcx,0x406c80
  8050d6:	00 00 00 
  8050d9:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  8050dc:	48 63 d0             	movsxd rdx,eax
  8050df:	48 89 d0             	mov    rax,rdx
  8050e2:	48 01 c0             	add    rax,rax
  8050e5:	48 01 d0             	add    rax,rdx
  8050e8:	48 c1 e0 06          	shl    rax,0x6
  8050ec:	48 01 c8             	add    rax,rcx
  8050ef:	48 05 b8 00 00 00    	add    rax,0xb8
  8050f5:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:365
    }

    return i;
  8050fc:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:366
}
  8050ff:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
  805103:	c9                   	leave  
  805104:	c3                   	ret    

0000000000805105 <do_req>:
do_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:369
//取出一个申请并且执行
int do_req()
{
  805105:	f3 0f 1e fa          	endbr64 
  805109:	55                   	push   rbp
  80510a:	48 89 e5             	mov    rbp,rsp
  80510d:	48 83 ec 10          	sub    rsp,0x10
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:372
    //查看每个设备的请求情况
    //块设备
    for(int i=0;i<3;i++)
  805111:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
  805118:	e9 b7 00 00 00       	jmp    8051d4 <do_req+0xcf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:374
    {
        device* p=dev_tree[i];
  80511d:	48 ba 80 84 40 00 00 	movabs rdx,0x408480
  805124:	00 00 00 
  805127:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80512a:	48 98                	cdqe   
  80512c:	48 8b 04 c2          	mov    rax,QWORD PTR [rdx+rax*8]
  805130:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:375
        for(;p;p=p->next)
  805134:	e9 8c 00 00 00       	jmp    8051c5 <do_req+0xc0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:378
        {
            //如果没有请求运行而且有请求要运行
            if(!p->running_req&&p->waiting_reqs)
  805139:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80513d:	48 8b 80 80 00 00 00 	mov    rax,QWORD PTR [rax+0x80]
  805144:	48 85 c0             	test   rax,rax
  805147:	75 6d                	jne    8051b6 <do_req+0xb1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:378 (discriminator 1)
  805149:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80514d:	48 8b 80 88 00 00 00 	mov    rax,QWORD PTR [rax+0x88]
  805154:	48 85 c0             	test   rax,rax
  805157:	74 5d                	je     8051b6 <do_req+0xb1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:380
            {
                p->running_req=p->waiting_reqs;
  805159:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80515d:	48 8b 90 88 00 00 00 	mov    rdx,QWORD PTR [rax+0x88]
  805164:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  805168:	48 89 90 80 00 00 00 	mov    QWORD PTR [rax+0x80],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:381
                p->waiting_reqs=p->waiting_reqs->next;//取出一个
  80516f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  805173:	48 8b 80 88 00 00 00 	mov    rax,QWORD PTR [rax+0x88]
  80517a:	48 8b 90 b8 00 00 00 	mov    rdx,QWORD PTR [rax+0xb8]
  805181:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  805185:	48 89 90 88 00 00 00 	mov    QWORD PTR [rax+0x88],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:382
                dev_funcs[p->operi](p->running_req);
  80518c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  805190:	8b 80 a0 00 00 00    	mov    eax,DWORD PTR [rax+0xa0]
  805196:	48 ba a0 0d 81 00 00 	movabs rdx,0x810da0
  80519d:	00 00 00 
  8051a0:	48 98                	cdqe   
  8051a2:	48 8b 14 c2          	mov    rdx,QWORD PTR [rdx+rax*8]
  8051a6:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  8051aa:	48 8b 80 80 00 00 00 	mov    rax,QWORD PTR [rax+0x80]
  8051b1:	48 89 c7             	mov    rdi,rax
  8051b4:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:375
        for(;p;p=p->next)
  8051b6:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  8051ba:	48 8b 80 90 00 00 00 	mov    rax,QWORD PTR [rax+0x90]
  8051c1:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:375 (discriminator 1)
  8051c5:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
  8051ca:	0f 85 69 ff ff ff    	jne    805139 <do_req+0x34>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:372 (discriminator 2)
    for(int i=0;i<3;i++)
  8051d0:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:372 (discriminator 1)
  8051d4:	83 7d fc 02          	cmp    DWORD PTR [rbp-0x4],0x2
  8051d8:	0f 8e 3f ff ff ff    	jle    80511d <do_req+0x18>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:388
            }
            //如果还在运行（DONE的状态不能直接覆盖，因为里面的运行结果可能还没被拿走）
        }
    }
    
    return 0;
  8051de:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:389
}
  8051e3:	c9                   	leave  
  8051e4:	c3                   	ret    

00000000008051e5 <wait_on_req>:
wait_on_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:393


void wait_on_req(int reqi)
{
  8051e5:	f3 0f 1e fa          	endbr64 
  8051e9:	55                   	push   rbp
  8051ea:	48 89 e5             	mov    rbp,rsp
  8051ed:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:394
    while(reqs[reqi].stat!=REQ_STAT_DONE);
  8051f0:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:394 (discriminator 1)
  8051f1:	48 b9 80 6c 40 00 00 	movabs rcx,0x406c80
  8051f8:	00 00 00 
  8051fb:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  8051fe:	48 63 d0             	movsxd rdx,eax
  805201:	48 89 d0             	mov    rax,rdx
  805204:	48 01 c0             	add    rax,rax
  805207:	48 01 d0             	add    rax,rdx
  80520a:	48 c1 e0 06          	shl    rax,0x6
  80520e:	48 01 c8             	add    rax,rcx
  805211:	48 05 ac 00 00 00    	add    rax,0xac
  805217:	8b 00                	mov    eax,DWORD PTR [rax]
  805219:	83 f8 03             	cmp    eax,0x3
  80521c:	75 d3                	jne    8051f1 <wait_on_req+0xc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:395
}
  80521e:	90                   	nop
  80521f:	90                   	nop
  805220:	5d                   	pop    rbp
  805221:	c3                   	ret    

0000000000805222 <clear_req>:
clear_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:397
void clear_req(int reqi)
{
  805222:	f3 0f 1e fa          	endbr64 
  805226:	55                   	push   rbp
  805227:	48 89 e5             	mov    rbp,rsp
  80522a:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:398
    reqs[reqi].stat=REQ_STAT_EMPTY;
  80522d:	48 b9 80 6c 40 00 00 	movabs rcx,0x406c80
  805234:	00 00 00 
  805237:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80523a:	48 63 d0             	movsxd rdx,eax
  80523d:	48 89 d0             	mov    rax,rdx
  805240:	48 01 c0             	add    rax,rax
  805243:	48 01 d0             	add    rax,rdx
  805246:	48 c1 e0 06          	shl    rax,0x6
  80524a:	48 01 c8             	add    rax,rcx
  80524d:	48 05 ac 00 00 00    	add    rax,0xac
  805253:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:399
  805259:	90                   	nop
  80525a:	5d                   	pop    rbp
  80525b:	c3                   	ret    

000000000080525c <init_proc>:
init_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:26
TSS *tss=0xffff800000108000ul;
int cur_proc=0;
int pidd=0;
int palloc_paddr=0;
static pid_t sidd=0;
void init_proc(){
  80525c:	f3 0f 1e fa          	endbr64 
  805260:	55                   	push   rbp
  805261:	48 89 e5             	mov    rbp,rsp
  805264:	48 83 ec 10          	sub    rsp,0x10
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:28
    //task=(struct process*)get_global_var(TASK_PCBS_ADDR);//[MAX_TASKS];;
    task=(struct process*)kmallocat(0,13);
  805268:	be 0d 00 00 00       	mov    esi,0xd
  80526d:	bf 00 00 00 00       	mov    edi,0x0
  805272:	48 b8 aa 19 80 00 00 	movabs rax,0x8019aa
  805279:	00 00 00 
  80527c:	ff d0                	call   rax
  80527e:	48 89 c2             	mov    rdx,rax
  805281:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  805288:	00 00 00 
  80528b:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:29
    for(int i=0;i<MAX_PROC_COUNT;i++){
  80528e:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
  805295:	eb 6f                	jmp    805306 <init_proc+0xaa>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:30 (discriminator 3)
        task[i].pid=-1;
  805297:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  80529e:	00 00 00 
  8052a1:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  8052a4:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  8052a7:	48 98                	cdqe   
  8052a9:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  8052b0:	48 01 d0             	add    rax,rdx
  8052b3:	c7 00 ff ff ff ff    	mov    DWORD PTR [rax],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:31 (discriminator 3)
        task[i].stat=TASK_EMPTY;
  8052b9:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  8052c0:	00 00 00 
  8052c3:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  8052c6:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  8052c9:	48 98                	cdqe   
  8052cb:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  8052d2:	48 01 d0             	add    rax,rdx
  8052d5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [rax+0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:32 (discriminator 3)
        task[i].parent_pid=-1;
  8052dc:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  8052e3:	00 00 00 
  8052e6:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  8052e9:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  8052ec:	48 98                	cdqe   
  8052ee:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  8052f5:	48 01 d0             	add    rax,rdx
  8052f8:	c7 80 9c 00 00 00 ff 	mov    DWORD PTR [rax+0x9c],0xffffffff
  8052ff:	ff ff ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:29 (discriminator 3)
    for(int i=0;i<MAX_PROC_COUNT;i++){
  805302:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:29 (discriminator 1)
  805306:	83 7d fc 3f          	cmp    DWORD PTR [rbp-0x4],0x3f
  80530a:	7e 8b                	jle    805297 <init_proc+0x3b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:34
    }
    cur_proc=0;//proc zero
  80530c:	48 b8 cc 85 40 00 00 	movabs rax,0x4085cc
  805313:	00 00 00 
  805316:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:35
    current=task;
  80531c:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  805323:	00 00 00 
  805326:	48 8b 00             	mov    rax,QWORD PTR [rax]
  805329:	48 ba 48 85 40 00 00 	movabs rdx,0x408548
  805330:	00 00 00 
  805333:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:36
    pidd=1;
  805336:	48 b8 d0 85 40 00 00 	movabs rax,0x4085d0
  80533d:	00 00 00 
  805340:	c7 00 01 00 00 00    	mov    DWORD PTR [rax],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:38
     //===============创建0号进程======================
    int zi= init_proc0();
  805346:	b8 00 00 00 00       	mov    eax,0x0
  80534b:	48 ba 14 57 80 00 00 	movabs rdx,0x805714
  805352:	00 00 00 
  805355:	ff d2                	call   rdx
  805357:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:39
    task[zi].stat=TASK_READY;
  80535a:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  805361:	00 00 00 
  805364:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  805367:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  80536a:	48 98                	cdqe   
  80536c:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  805373:	48 01 d0             	add    rax,rdx
  805376:	c7 40 18 02 00 00 00 	mov    DWORD PTR [rax+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:44


    //asm volatile("lldt %0"::"m"(xi));
    //asm volatile("ltr %0"::"m"(zi));
    set_tss(0x400000+KNL_BASE,0x400000+KNL_BASE,0x400000+KNL_BASE\
  80537d:	68 00 00 80 00       	push   0x800000
  805382:	c7 44 24 04 00 80 ff 	mov    DWORD PTR [rsp+0x4],0xffff8000
  805389:	ff 
  80538a:	68 00 00 80 00       	push   0x800000
  80538f:	c7 44 24 04 00 80 ff 	mov    DWORD PTR [rsp+0x4],0xffff8000
  805396:	ff 
  805397:	68 00 00 80 00       	push   0x800000
  80539c:	c7 44 24 04 00 80 ff 	mov    DWORD PTR [rsp+0x4],0xffff8000
  8053a3:	ff 
  8053a4:	68 00 00 80 00       	push   0x800000
  8053a9:	c7 44 24 04 00 80 ff 	mov    DWORD PTR [rsp+0x4],0xffff8000
  8053b0:	ff 
  8053b1:	49 b9 00 00 80 00 00 	movabs r9,0xffff800000800000
  8053b8:	80 ff ff 
  8053bb:	49 b8 00 00 80 00 00 	movabs r8,0xffff800000800000
  8053c2:	80 ff ff 
  8053c5:	48 b8 00 00 80 00 00 	movabs rax,0xffff800000800000
  8053cc:	80 ff ff 
  8053cf:	48 89 c1             	mov    rcx,rax
  8053d2:	48 b8 00 00 40 00 00 	movabs rax,0xffff800000400000
  8053d9:	80 ff ff 
  8053dc:	48 89 c2             	mov    rdx,rax
  8053df:	48 b8 00 00 40 00 00 	movabs rax,0xffff800000400000
  8053e6:	80 ff ff 
  8053e9:	48 89 c6             	mov    rsi,rax
  8053ec:	48 b8 00 00 40 00 00 	movabs rax,0xffff800000400000
  8053f3:	80 ff ff 
  8053f6:	48 89 c7             	mov    rdi,rax
  8053f9:	48 b8 f0 6c 80 00 00 	movabs rax,0x806cf0
  805400:	00 00 00 
  805403:	ff d0                	call   rax
  805405:	48 83 c4 20          	add    rsp,0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:48
    ,0x800000+KNL_BASE,0x800000+KNL_BASE,0x800000+KNL_BASE,0x800000+KNL_BASE\
    ,0x800000+KNL_BASE,0x800000+KNL_BASE,0x800000+KNL_BASE);
    //IA32_INTERRUPT_SSP_TABLE_ADDR，准备IST
    wrmsr(0x6a8,tss->rsvd2);
  805409:	48 b8 20 0e 81 00 00 	movabs rax,0x810e20
  805410:	00 00 00 
  805413:	48 8b 00             	mov    rax,QWORD PTR [rax]
  805416:	48 8b 40 1c          	mov    rax,QWORD PTR [rax+0x1c]
  80541a:	48 89 c6             	mov    rsi,rax
  80541d:	bf a8 06 00 00       	mov    edi,0x6a8
  805422:	48 b8 21 0b 80 00 00 	movabs rax,0x800b21
  805429:	00 00 00 
  80542c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:50
    //把内核代码段选择子写到MSR寄存器中准备用于特权级转换(sysexit，现在没用)
    wrmsr(0x174,0x8);
  80542e:	be 08 00 00 00       	mov    esi,0x8
  805433:	bf 74 01 00 00       	mov    edi,0x174
  805438:	48 b8 21 0b 80 00 00 	movabs rax,0x800b21
  80543f:	00 00 00 
  805442:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:52
    //准备用于特权级转换(sysret，正在使用)
    wrmsr(0xc0000081,0x0020000800000000ul);
  805444:	48 b8 00 00 00 00 08 	movabs rax,0x20000800000000
  80544b:	00 20 00 
  80544e:	48 89 c6             	mov    rsi,rax
  805451:	b8 81 00 00 c0       	mov    eax,0xc0000081
  805456:	48 89 c7             	mov    rdi,rax
  805459:	48 b8 21 0b 80 00 00 	movabs rax,0x800b21
  805460:	00 00 00 
  805463:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:54

    comprintf("proc init set.\r\ntss.ist=0x%p\r\n",tss->ists[0]);
  805465:	48 b8 20 0e 81 00 00 	movabs rax,0x810e20
  80546c:	00 00 00 
  80546f:	48 8b 00             	mov    rax,QWORD PTR [rax]
  805472:	48 8b 40 24          	mov    rax,QWORD PTR [rax+0x24]
  805476:	48 89 c6             	mov    rsi,rax
  805479:	48 b8 28 8b 81 00 00 	movabs rax,0x818b28
  805480:	00 00 00 
  805483:	48 89 c7             	mov    rdi,rax
  805486:	b8 00 00 00 00       	mov    eax,0x0
  80548b:	48 ba ae ff 80 00 00 	movabs rdx,0x80ffae
  805492:	00 00 00 
  805495:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:57
    //创建一个测试进程
//    create_test_proc();
}
  805497:	90                   	nop
  805498:	c9                   	leave  
  805499:	c3                   	ret    

000000000080549a <create_test_proc>:
create_test_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:58
void create_test_proc(){
  80549a:	f3 0f 1e fa          	endbr64 
  80549e:	55                   	push   rbp
  80549f:	48 89 e5             	mov    rbp,rsp
  8054a2:	48 83 ec 20          	sub    rsp,0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:60

    int index=req_proc();
  8054a6:	b8 00 00 00 00       	mov    eax,0x0
  8054ab:	48 ba 9d 58 80 00 00 	movabs rdx,0x80589d
  8054b2:	00 00 00 
  8054b5:	ff d2                	call   rdx
  8054b7:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:61
    task[index].stat=TASK_READY;
  8054ba:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  8054c1:	00 00 00 
  8054c4:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  8054c7:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  8054ca:	48 98                	cdqe   
  8054cc:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  8054d3:	48 01 d0             	add    rax,rdx
  8054d6:	c7 40 18 02 00 00 00 	mov    DWORD PTR [rax+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:62
    int currsp=0x9fc00-1;
  8054dd:	c7 45 ec ff fb 09 00 	mov    DWORD PTR [rbp-0x14],0x9fbff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:63
    asm volatile("mov %%rsp,%0":"=m"(currsp));
  8054e4:	48 89 65 ec          	mov    QWORD PTR [rbp-0x14],rsp
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:64
    set_proc(0, 0, 0, 0, 0x10, 0x8, 0x10, 0x10, 0x10, 0x10,
  8054e8:	48 ba f2 0c 81 00 00 	movabs rdx,0x810cf2
  8054ef:	00 00 00 
  8054f2:	48 83 ec 08          	sub    rsp,0x8
  8054f6:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  8054f9:	50                   	push   rax
  8054fa:	6a 00                	push   0x0
  8054fc:	52                   	push   rdx
  8054fd:	6a 00                	push   0x0
  8054ff:	6a 00                	push   0x0
  805501:	6a 00                	push   0x0
  805503:	68 58 7d 00 00       	push   0x7d58
  805508:	6a 10                	push   0x10
  80550a:	6a 10                	push   0x10
  80550c:	6a 10                	push   0x10
  80550e:	6a 10                	push   0x10
  805510:	41 b9 08 00 00 00    	mov    r9d,0x8
  805516:	41 b8 10 00 00 00    	mov    r8d,0x10
  80551c:	b9 00 00 00 00       	mov    ecx,0x0
  805521:	ba 00 00 00 00       	mov    edx,0x0
  805526:	be 00 00 00 00       	mov    esi,0x0
  80552b:	bf 00 00 00 00       	mov    edi,0x0
  805530:	48 b8 b6 59 80 00 00 	movabs rax,0x8059b6
  805537:	00 00 00 
  80553a:	ff d0                	call   rax
  80553c:	48 83 c4 60          	add    rsp,0x60
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:66
             0x7e00- sizeof(stack_store_regs), 0, 0, 0, (long)ret_sys_call, 0, index);
    task[index].tss.rsp0=0x400000;
  805540:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  805547:	00 00 00 
  80554a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  80554d:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  805550:	48 98                	cdqe   
  805552:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  805559:	48 01 d0             	add    rax,rdx
  80555c:	48 c7 80 dc 01 00 00 	mov    QWORD PTR [rax+0x1dc],0x400000
  805563:	00 00 40 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:67
    task[index].mem_struct.stack_top=0x7e00;
  805567:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  80556e:	00 00 00 
  805571:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  805574:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  805577:	48 98                	cdqe   
  805579:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  805580:	48 01 d0             	add    rax,rdx
  805583:	c7 40 34 00 7e 00 00 	mov    DWORD PTR [rax+0x34],0x7e00
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:68
    task[index].mem_struct.stack_bottom=0x6e00;
  80558a:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  805591:	00 00 00 
  805594:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  805597:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80559a:	48 98                	cdqe   
  80559c:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  8055a3:	48 01 d0             	add    rax,rdx
  8055a6:	c7 40 30 00 6e 00 00 	mov    DWORD PTR [rax+0x30],0x6e00
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:69
    task[index].mem_struct.heap_top=0x1101000;
  8055ad:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  8055b4:	00 00 00 
  8055b7:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  8055ba:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  8055bd:	48 98                	cdqe   
  8055bf:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  8055c6:	48 01 d0             	add    rax,rdx
  8055c9:	c7 40 2c 00 10 10 01 	mov    DWORD PTR [rax+0x2c],0x1101000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:70
    task[index].mem_struct.heap_base=0x1100000;
  8055d0:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  8055d7:	00 00 00 
  8055da:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  8055dd:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  8055e0:	48 98                	cdqe   
  8055e2:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  8055e9:	48 01 d0             	add    rax,rdx
  8055ec:	c7 40 28 00 00 10 01 	mov    DWORD PTR [rax+0x28],0x1100000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:73

    //把还原现场时用到的堆栈设置好
    stack_store_regs *str= (stack_store_regs *) (0x7e00 - sizeof(stack_store_regs));
  8055f3:	48 c7 45 f0 58 7d 00 	mov    QWORD PTR [rbp-0x10],0x7d58
  8055fa:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:74
    str->rax=0;
  8055fb:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  8055ff:	48 c7 40 78 00 00 00 	mov    QWORD PTR [rax+0x78],0x0
  805606:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:75
    str->rbx=0;
  805607:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80560b:	48 c7 40 70 00 00 00 	mov    QWORD PTR [rax+0x70],0x0
  805612:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:76
    str->rcx=proc_zero;//sysret采用的返回地址
  805613:	48 ba 36 5b 80 00 00 	movabs rdx,0x805b36
  80561a:	00 00 00 
  80561d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  805621:	48 89 50 68          	mov    QWORD PTR [rax+0x68],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:77
    str->rdx=0;
  805625:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  805629:	48 c7 40 60 00 00 00 	mov    QWORD PTR [rax+0x60],0x0
  805630:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:78
    str->rsi=0;
  805631:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  805635:	48 c7 40 50 00 00 00 	mov    QWORD PTR [rax+0x50],0x0
  80563c:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:79
    str->rdi=0;
  80563d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  805641:	48 c7 40 58 00 00 00 	mov    QWORD PTR [rax+0x58],0x0
  805648:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:80
    str->r15=0;
  805649:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80564d:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
  805654:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:81
    str->r14=0;
  805655:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  805659:	48 c7 40 18 00 00 00 	mov    QWORD PTR [rax+0x18],0x0
  805660:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:82
    str->r13=0;
  805661:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  805665:	48 c7 40 20 00 00 00 	mov    QWORD PTR [rax+0x20],0x0
  80566c:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:83
    str->r12=0;
  80566d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  805671:	48 c7 40 28 00 00 00 	mov    QWORD PTR [rax+0x28],0x0
  805678:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:84
    str->r11=0x200;
  805679:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80567d:	48 c7 40 30 00 02 00 	mov    QWORD PTR [rax+0x30],0x200
  805684:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:85
    str->r10=0;
  805685:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  805689:	48 c7 40 38 00 00 00 	mov    QWORD PTR [rax+0x38],0x0
  805690:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:86
    str->r9=0;
  805691:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  805695:	48 c7 40 40 00 00 00 	mov    QWORD PTR [rax+0x40],0x0
  80569c:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:87
    str->r8=0;
  80569d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  8056a1:	48 c7 40 48 00 00 00 	mov    QWORD PTR [rax+0x48],0x0
  8056a8:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:88
    str->rip=proc_zero;
  8056a9:	48 ba 36 5b 80 00 00 	movabs rdx,0x805b36
  8056b0:	00 00 00 
  8056b3:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  8056b7:	48 89 90 80 00 00 00 	mov    QWORD PTR [rax+0x80],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:89
    str->cs=0x8;
  8056be:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  8056c2:	48 c7 80 88 00 00 00 	mov    QWORD PTR [rax+0x88],0x8
  8056c9:	08 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:90
    str->rflags=0x00200206;
  8056cd:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  8056d1:	48 c7 80 90 00 00 00 	mov    QWORD PTR [rax+0x90],0x200206
  8056d8:	06 02 20 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:91
    str->rsp=0x7e00;
  8056dc:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  8056e0:	48 c7 80 98 00 00 00 	mov    QWORD PTR [rax+0x98],0x7e00
  8056e7:	00 7e 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:92
    str->ss=0x2b;
  8056eb:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  8056ef:	48 c7 80 a0 00 00 00 	mov    QWORD PTR [rax+0xa0],0x2b
  8056f6:	2b 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:93
    str->ds=0x2b;
  8056fa:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  8056fe:	48 c7 00 2b 00 00 00 	mov    QWORD PTR [rax],0x2b
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:94
    str->es=0x2b;
  805705:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  805709:	48 c7 40 08 2b 00 00 	mov    QWORD PTR [rax+0x8],0x2b
  805710:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:96

}
  805711:	90                   	nop
  805712:	c9                   	leave  
  805713:	c3                   	ret    

0000000000805714 <init_proc0>:
init_proc0():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:98
int init_proc0()
{
  805714:	f3 0f 1e fa          	endbr64 
  805718:	55                   	push   rbp
  805719:	48 89 e5             	mov    rbp,rsp
  80571c:	48 83 ec 10          	sub    rsp,0x10
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:100

    task[0].pid=pidd++;
  805720:	48 b8 d0 85 40 00 00 	movabs rax,0x4085d0
  805727:	00 00 00 
  80572a:	8b 00                	mov    eax,DWORD PTR [rax]
  80572c:	8d 50 01             	lea    edx,[rax+0x1]
  80572f:	48 b9 d0 85 40 00 00 	movabs rcx,0x4085d0
  805736:	00 00 00 
  805739:	89 11                	mov    DWORD PTR [rcx],edx
  80573b:	48 ba 40 85 40 00 00 	movabs rdx,0x408540
  805742:	00 00 00 
  805745:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
  805748:	89 02                	mov    DWORD PTR [rdx],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:101
    task[0].stat=TASK_ZOMBIE;
  80574a:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  805751:	00 00 00 
  805754:	48 8b 00             	mov    rax,QWORD PTR [rax]
  805757:	c7 40 18 04 00 00 00 	mov    DWORD PTR [rax+0x18],0x4
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:102
    task[0].utime=0;
  80575e:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  805765:	00 00 00 
  805768:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80576b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [rax+0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:103
    task[0].priority=0;
  805772:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  805779:	00 00 00 
  80577c:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80577f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [rax+0x20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:105

    struct process *pz=task;
  805786:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  80578d:	00 00 00 
  805790:	48 8b 00             	mov    rax,QWORD PTR [rax]
  805793:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:106
    addr_t currsp=KNL_BASE+0x400000;
  805797:	48 b8 00 00 40 00 00 	movabs rax,0xffff800000400000
  80579e:	80 ff ff 
  8057a1:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:110
//    asm volatile("mov %%rsp,%0"::"m"(currsp));
    //默认DPL=3
    //set_proc(0,0,0,0,0x23,0x1b,0x23,0x23,0x23,0x23,curesp,0,0,0,0,index);
    set_proc(0, 0, 0, 0, 0x10, 0x8, 0x10, 0x10, 0x10, 0x10,
  8057a5:	48 ba 36 5b 80 00 00 	movabs rdx,0x805b36
  8057ac:	00 00 00 
  8057af:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  8057b3:	48 83 ec 08          	sub    rsp,0x8
  8057b7:	6a 00                	push   0x0
  8057b9:	6a 00                	push   0x0
  8057bb:	52                   	push   rdx
  8057bc:	6a 00                	push   0x0
  8057be:	6a 00                	push   0x0
  8057c0:	6a 00                	push   0x0
  8057c2:	50                   	push   rax
  8057c3:	6a 10                	push   0x10
  8057c5:	6a 10                	push   0x10
  8057c7:	6a 10                	push   0x10
  8057c9:	6a 10                	push   0x10
  8057cb:	41 b9 08 00 00 00    	mov    r9d,0x8
  8057d1:	41 b8 10 00 00 00    	mov    r8d,0x10
  8057d7:	b9 00 00 00 00       	mov    ecx,0x0
  8057dc:	ba 00 00 00 00       	mov    edx,0x0
  8057e1:	be 00 00 00 00       	mov    esi,0x0
  8057e6:	bf 00 00 00 00       	mov    edi,0x0
  8057eb:	48 b8 b6 59 80 00 00 	movabs rax,0x8059b6
  8057f2:	00 00 00 
  8057f5:	ff d0                	call   rax
  8057f7:	48 83 c4 60          	add    rsp,0x60
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:118
    extern struct dir_entry* dtty;
    //stdin stdout stderr
    //这里绕开了sys open，这样是为了尽量快
    extern struct file ftty;
    //不知道为什么，这里就是没法加上高地址
    pz->openf[0]=(struct file*)((addr_t)&ftty|KNL_BASE);
  8057fb:	48 ba 00 85 40 00 00 	movabs rdx,0x408500
  805802:	00 00 00 
  805805:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
  80580c:	80 ff ff 
  80580f:	48 09 d0             	or     rax,rdx
  805812:	48 89 c2             	mov    rdx,rax
  805815:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  805819:	48 89 90 d8 00 00 00 	mov    QWORD PTR [rax+0xd8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:119
    pz->openf[1]=(struct file*)((addr_t)&ftty|KNL_BASE);
  805820:	48 ba 00 85 40 00 00 	movabs rdx,0x408500
  805827:	00 00 00 
  80582a:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
  805831:	80 ff ff 
  805834:	48 09 d0             	or     rax,rdx
  805837:	48 89 c2             	mov    rdx,rax
  80583a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80583e:	48 89 90 e0 00 00 00 	mov    QWORD PTR [rax+0xe0],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:120
    pz->openf[2]=(struct file*)((addr_t)&ftty|KNL_BASE);
  805845:	48 ba 00 85 40 00 00 	movabs rdx,0x408500
  80584c:	00 00 00 
  80584f:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
  805856:	80 ff ff 
  805859:	48 09 d0             	or     rax,rdx
  80585c:	48 89 c2             	mov    rdx,rax
  80585f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  805863:	48 89 90 e8 00 00 00 	mov    QWORD PTR [rax+0xe8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:122

    pz->mem_struct.stack_top=STACK_TOP;
  80586a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80586e:	c7 40 34 00 f0 ff ff 	mov    DWORD PTR [rax+0x34],0xfffff000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:123
    pz->mem_struct.stack_bottom=STACK_TOP-CHUNK_SIZE;
  805875:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  805879:	c7 40 30 00 e0 ff ff 	mov    DWORD PTR [rax+0x30],0xffffe000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:124
    pz->mem_struct.heap_top=HEAP_BASE+CHUNK_SIZE;
  805880:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  805884:	c7 40 2c 00 10 00 01 	mov    DWORD PTR [rax+0x2c],0x1001000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:125
    pz->mem_struct.heap_base=HEAP_BASE;
  80588b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80588f:	c7 40 28 00 00 00 01 	mov    DWORD PTR [rax+0x28],0x1000000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:128


    return 0;
  805896:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:129
}
  80589b:	c9                   	leave  
  80589c:	c3                   	ret    

000000000080589d <req_proc>:
req_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:130
int req_proc(){
  80589d:	f3 0f 1e fa          	endbr64 
  8058a1:	55                   	push   rbp
  8058a2:	48 89 e5             	mov    rbp,rsp
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:131
    int num=0;
  8058a5:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:132
    while(task[num].pid!=-1 && task[num].stat != TASK_EMPTY && \
  8058ac:	eb 04                	jmp    8058b2 <req_proc+0x15>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:134
    num<=MAX_PROC_COUNT){
        num++;
  8058ae:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:132
    while(task[num].pid!=-1 && task[num].stat != TASK_EMPTY && \
  8058b2:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  8058b9:	00 00 00 
  8058bc:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  8058bf:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  8058c2:	48 98                	cdqe   
  8058c4:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  8058cb:	48 01 d0             	add    rax,rdx
  8058ce:	8b 00                	mov    eax,DWORD PTR [rax]
  8058d0:	83 f8 ff             	cmp    eax,0xffffffff
  8058d3:	74 29                	je     8058fe <req_proc+0x61>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:132 (discriminator 1)
  8058d5:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  8058dc:	00 00 00 
  8058df:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  8058e2:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  8058e5:	48 98                	cdqe   
  8058e7:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  8058ee:	48 01 d0             	add    rax,rdx
  8058f1:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
  8058f4:	85 c0                	test   eax,eax
  8058f6:	74 06                	je     8058fe <req_proc+0x61>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:132 (discriminator 2)
  8058f8:	83 7d fc 40          	cmp    DWORD PTR [rbp-0x4],0x40
  8058fc:	7e b0                	jle    8058ae <req_proc+0x11>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:136
    }
    if(num>=MAX_PROC_COUNT)
  8058fe:	83 7d fc 3f          	cmp    DWORD PTR [rbp-0x4],0x3f
  805902:	7e 0a                	jle    80590e <req_proc+0x71>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:137
        return -1;
  805904:	b8 ff ff ff ff       	mov    eax,0xffffffff
  805909:	e9 a6 00 00 00       	jmp    8059b4 <req_proc+0x117>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:138
    task[num].pid=pidd++;
  80590e:	48 b8 d0 85 40 00 00 	movabs rax,0x4085d0
  805915:	00 00 00 
  805918:	8b 00                	mov    eax,DWORD PTR [rax]
  80591a:	8d 50 01             	lea    edx,[rax+0x1]
  80591d:	48 b9 d0 85 40 00 00 	movabs rcx,0x4085d0
  805924:	00 00 00 
  805927:	89 11                	mov    DWORD PTR [rcx],edx
  805929:	48 ba 40 85 40 00 00 	movabs rdx,0x408540
  805930:	00 00 00 
  805933:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
  805936:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
  805939:	48 63 d2             	movsxd rdx,edx
  80593c:	48 69 d2 34 03 00 00 	imul   rdx,rdx,0x334
  805943:	48 01 ca             	add    rdx,rcx
  805946:	89 02                	mov    DWORD PTR [rdx],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:139
    task[num].stat=TASK_ZOMBIE;
  805948:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  80594f:	00 00 00 
  805952:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  805955:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  805958:	48 98                	cdqe   
  80595a:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  805961:	48 01 d0             	add    rax,rdx
  805964:	c7 40 18 04 00 00 00 	mov    DWORD PTR [rax+0x18],0x4
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:140
    task[num].utime=0;
  80596b:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  805972:	00 00 00 
  805975:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  805978:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80597b:	48 98                	cdqe   
  80597d:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  805984:	48 01 d0             	add    rax,rdx
  805987:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [rax+0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:141
    task[num].priority=0;
  80598e:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  805995:	00 00 00 
  805998:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  80599b:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80599e:	48 98                	cdqe   
  8059a0:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  8059a7:	48 01 d0             	add    rax,rdx
  8059aa:	c7 40 20 00 00 00 00 	mov    DWORD PTR [rax+0x20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:142
    return num;
  8059b1:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:143
}
  8059b4:	5d                   	pop    rbp
  8059b5:	c3                   	ret    

00000000008059b6 <set_proc>:
set_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:145
void set_proc(long rax, long rbx, long rcx, long rdx, long es, long cs, long ss, long ds, long fs, long gs, long rsp,
              long rbp, long rsi, long rdi, long rip, long rflags, int proc_nr) {
  8059b6:	f3 0f 1e fa          	endbr64 
  8059ba:	55                   	push   rbp
  8059bb:	48 89 e5             	mov    rbp,rsp
  8059be:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  8059c2:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  8059c6:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  8059ca:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
  8059ce:	4c 89 45 c8          	mov    QWORD PTR [rbp-0x38],r8
  8059d2:	4c 89 4d c0          	mov    QWORD PTR [rbp-0x40],r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:146
    struct process* proc=&task[proc_nr];
  8059d6:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  8059dd:	00 00 00 
  8059e0:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  8059e3:	8b 45 60             	mov    eax,DWORD PTR [rbp+0x60]
  8059e6:	48 98                	cdqe   
  8059e8:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  8059ef:	48 01 d0             	add    rax,rdx
  8059f2:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:147
    proc->regs.rax=rax;
  8059f6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  8059fa:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  8059fe:	48 89 90 5c 02 00 00 	mov    QWORD PTR [rax+0x25c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:148
    proc->regs.rbx=rbx;
  805a05:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  805a09:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  805a0d:	48 89 90 74 02 00 00 	mov    QWORD PTR [rax+0x274],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:149
    proc->regs.rcx=rcx;
  805a14:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  805a18:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  805a1c:	48 89 90 64 02 00 00 	mov    QWORD PTR [rax+0x264],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:150
    proc->regs.rdx=rdx;
  805a23:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  805a27:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  805a2b:	48 89 90 6c 02 00 00 	mov    QWORD PTR [rax+0x26c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:151
    proc->regs.es=es;
  805a32:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  805a36:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  805a3a:	48 89 90 9c 02 00 00 	mov    QWORD PTR [rax+0x29c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:152
    proc->regs.cs=cs;
  805a41:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  805a45:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
  805a49:	48 89 90 a4 02 00 00 	mov    QWORD PTR [rax+0x2a4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:153
    proc->regs.ss=ss;
  805a50:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  805a54:	48 8b 55 10          	mov    rdx,QWORD PTR [rbp+0x10]
  805a58:	48 89 90 ac 02 00 00 	mov    QWORD PTR [rax+0x2ac],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:154
    proc->regs.ds=ds;
  805a5f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  805a63:	48 8b 55 18          	mov    rdx,QWORD PTR [rbp+0x18]
  805a67:	48 89 90 b4 02 00 00 	mov    QWORD PTR [rax+0x2b4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:155
    proc->regs.fs=fs;
  805a6e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  805a72:	48 8b 55 20          	mov    rdx,QWORD PTR [rbp+0x20]
  805a76:	48 89 90 bc 02 00 00 	mov    QWORD PTR [rax+0x2bc],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:156
    proc->regs.gs=gs;
  805a7d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  805a81:	48 8b 55 28          	mov    rdx,QWORD PTR [rbp+0x28]
  805a85:	48 89 90 c4 02 00 00 	mov    QWORD PTR [rax+0x2c4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:157
    proc->regs.rsp=rsp;
  805a8c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  805a90:	48 8b 55 30          	mov    rdx,QWORD PTR [rbp+0x30]
  805a94:	48 89 90 7c 02 00 00 	mov    QWORD PTR [rax+0x27c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:158
    proc->regs.rbp=rbp;
  805a9b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  805a9f:	48 8b 55 38          	mov    rdx,QWORD PTR [rbp+0x38]
  805aa3:	48 89 90 84 02 00 00 	mov    QWORD PTR [rax+0x284],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:159
    proc->regs.rsi=rsi;
  805aaa:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  805aae:	48 8b 55 40          	mov    rdx,QWORD PTR [rbp+0x40]
  805ab2:	48 89 90 8c 02 00 00 	mov    QWORD PTR [rax+0x28c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:160
    proc->regs.rdi=rdi;
  805ab9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  805abd:	48 8b 55 48          	mov    rdx,QWORD PTR [rbp+0x48]
  805ac1:	48 89 90 94 02 00 00 	mov    QWORD PTR [rax+0x294],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:161
    proc->regs.rflags=0x202;//设置为默认值:0b 0010 0000 0010
  805ac8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  805acc:	48 c7 80 54 02 00 00 	mov    QWORD PTR [rax+0x254],0x202
  805ad3:	02 02 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:163
    //能接受中断
    proc->regs.rip=rip;
  805ad7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  805adb:	48 8b 55 50          	mov    rdx,QWORD PTR [rbp+0x50]
  805adf:	48 89 90 4c 02 00 00 	mov    QWORD PTR [rax+0x24c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:165

    proc->regs.cs=cs;
  805ae6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  805aea:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
  805aee:	48 89 90 a4 02 00 00 	mov    QWORD PTR [rax+0x2a4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:166
    proc->regs.ds=ds;
  805af5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  805af9:	48 8b 55 18          	mov    rdx,QWORD PTR [rbp+0x18]
  805afd:	48 89 90 b4 02 00 00 	mov    QWORD PTR [rax+0x2b4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:167
    proc->regs.es=es;
  805b04:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  805b08:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  805b0c:	48 89 90 9c 02 00 00 	mov    QWORD PTR [rax+0x29c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:168
    proc->regs.cr3=PML4_ADDR;//get_phyaddr(n1);//暂时先搞成全局
  805b13:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  805b17:	48 b9 00 10 10 00 00 	movabs rcx,0xffff800000101000
  805b1e:	80 ff ff 
  805b21:	48 89 88 44 02 00 00 	mov    QWORD PTR [rax+0x244],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:169
    proc->pml4=PML4_ADDR;
  805b28:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  805b2c:	48 89 88 c0 00 00 00 	mov    QWORD PTR [rax+0xc0],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:172


}
  805b33:	90                   	nop
  805b34:	5d                   	pop    rbp
  805b35:	c3                   	ret    

0000000000805b36 <proc_zero>:
proc_zero():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:174
void proc_zero()
{
  805b36:	f3 0f 1e fa          	endbr64 
  805b3a:	55                   	push   rbp
  805b3b:	48 89 e5             	mov    rbp,rsp
  805b3e:	48 83 ec 10          	sub    rsp,0x10
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:187 (discriminator 1)
//    }else{
//        printf("parent proc ret:%d\n",rax);
//    }
    while (1)
    {
        char c= sys_analyse_key();
  805b42:	b8 00 00 00 00       	mov    eax,0x0
  805b47:	48 ba 0d bd 80 00 00 	movabs rdx,0x80bd0d
  805b4e:	00 00 00 
  805b51:	ff d2                	call   rdx
  805b53:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:188 (discriminator 1)
        putchar(c);
  805b56:	0f be 45 ff          	movsx  eax,BYTE PTR [rbp-0x1]
  805b5a:	89 c7                	mov    edi,eax
  805b5c:	48 b8 66 11 80 00 00 	movabs rax,0x801166
  805b63:	00 00 00 
  805b66:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:186 (discriminator 1)
    {
  805b68:	eb d8                	jmp    805b42 <proc_zero+0xc>

0000000000805b6a <save_rsp>:
save_rsp():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:191
    }
}
void save_rsp(){
  805b6a:	f3 0f 1e fa          	endbr64 
  805b6e:	55                   	push   rbp
  805b6f:	48 89 e5             	mov    rbp,rsp
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:193
    //在时钟中断context下
    addr_t * p=INT_STACK_TOP-16;
  805b72:	48 b8 f0 ff 7f 00 00 	movabs rax,0xffff8000007ffff0
  805b79:	80 ff ff 
  805b7c:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:194
    current->regs.rsp=*p;
  805b80:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  805b84:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  805b87:	48 b8 48 85 40 00 00 	movabs rax,0x408548
  805b8e:	00 00 00 
  805b91:	48 8b 00             	mov    rax,QWORD PTR [rax]
  805b94:	48 89 90 7c 02 00 00 	mov    QWORD PTR [rax+0x27c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:195
}
  805b9b:	90                   	nop
  805b9c:	5d                   	pop    rbp
  805b9d:	c3                   	ret    

0000000000805b9e <manage_proc>:
manage_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:196
void manage_proc(){
  805b9e:	f3 0f 1e fa          	endbr64 
  805ba2:	55                   	push   rbp
  805ba3:	48 89 e5             	mov    rbp,rsp
  805ba6:	48 83 ec 10          	sub    rsp,0x10
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:197
    if(cur_proc!=-1)
  805baa:	48 b8 cc 85 40 00 00 	movabs rax,0x4085cc
  805bb1:	00 00 00 
  805bb4:	8b 00                	mov    eax,DWORD PTR [rax]
  805bb6:	83 f8 ff             	cmp    eax,0xffffffff
  805bb9:	74 2e                	je     805be9 <manage_proc+0x4b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:198
        task[cur_proc].utime++;
  805bbb:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  805bc2:	00 00 00 
  805bc5:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  805bc8:	48 b8 cc 85 40 00 00 	movabs rax,0x4085cc
  805bcf:	00 00 00 
  805bd2:	8b 00                	mov    eax,DWORD PTR [rax]
  805bd4:	48 98                	cdqe   
  805bd6:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  805bdd:	48 01 d0             	add    rax,rdx
  805be0:	8b 50 1c             	mov    edx,DWORD PTR [rax+0x1c]
  805be3:	83 c2 01             	add    edx,0x1
  805be6:	89 50 1c             	mov    DWORD PTR [rax+0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:199
    if(cur_proc==-1||task[cur_proc].utime>MAX_UTIME||\
  805be9:	48 b8 cc 85 40 00 00 	movabs rax,0x4085cc
  805bf0:	00 00 00 
  805bf3:	8b 00                	mov    eax,DWORD PTR [rax]
  805bf5:	83 f8 ff             	cmp    eax,0xffffffff
  805bf8:	74 5e                	je     805c58 <manage_proc+0xba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:199 (discriminator 1)
  805bfa:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  805c01:	00 00 00 
  805c04:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  805c07:	48 b8 cc 85 40 00 00 	movabs rax,0x4085cc
  805c0e:	00 00 00 
  805c11:	8b 00                	mov    eax,DWORD PTR [rax]
  805c13:	48 98                	cdqe   
  805c15:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  805c1c:	48 01 d0             	add    rax,rdx
  805c1f:	8b 40 1c             	mov    eax,DWORD PTR [rax+0x1c]
  805c22:	83 f8 0a             	cmp    eax,0xa
  805c25:	77 31                	ja     805c58 <manage_proc+0xba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:200 (discriminator 2)
    task[cur_proc].stat != TASK_READY){
  805c27:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  805c2e:	00 00 00 
  805c31:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  805c34:	48 b8 cc 85 40 00 00 	movabs rax,0x4085cc
  805c3b:	00 00 00 
  805c3e:	8b 00                	mov    eax,DWORD PTR [rax]
  805c40:	48 98                	cdqe   
  805c42:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  805c49:	48 01 d0             	add    rax,rdx
  805c4c:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:199 (discriminator 2)
    if(cur_proc==-1||task[cur_proc].utime>MAX_UTIME||\
  805c4f:	83 f8 02             	cmp    eax,0x2
  805c52:	0f 84 7a 01 00 00    	je     805dd2 <manage_proc+0x234>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:201
        if(cur_proc!=-1)
  805c58:	48 b8 cc 85 40 00 00 	movabs rax,0x4085cc
  805c5f:	00 00 00 
  805c62:	8b 00                	mov    eax,DWORD PTR [rax]
  805c64:	83 f8 ff             	cmp    eax,0xffffffff
  805c67:	74 2c                	je     805c95 <manage_proc+0xf7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:202
            task[cur_proc].utime=0;
  805c69:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  805c70:	00 00 00 
  805c73:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  805c76:	48 b8 cc 85 40 00 00 	movabs rax,0x4085cc
  805c7d:	00 00 00 
  805c80:	8b 00                	mov    eax,DWORD PTR [rax]
  805c82:	48 98                	cdqe   
  805c84:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  805c8b:	48 01 d0             	add    rax,rdx
  805c8e:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [rax+0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:204
        //find
        int i=cur_proc+1;
  805c95:	48 b8 cc 85 40 00 00 	movabs rax,0x4085cc
  805c9c:	00 00 00 
  805c9f:	8b 00                	mov    eax,DWORD PTR [rax]
  805ca1:	83 c0 01             	add    eax,0x1
  805ca4:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:205
        int times=0;
  805ca7:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:207
        //轮询，直到有一个符合条件
        while(times<10){
  805cae:	eb 6d                	jmp    805d1d <manage_proc+0x17f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:208
            if(task[i].pid!=-1 && task[i].stat == TASK_READY && i != cur_proc){
  805cb0:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  805cb7:	00 00 00 
  805cba:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  805cbd:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  805cc0:	48 98                	cdqe   
  805cc2:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  805cc9:	48 01 d0             	add    rax,rdx
  805ccc:	8b 00                	mov    eax,DWORD PTR [rax]
  805cce:	83 f8 ff             	cmp    eax,0xffffffff
  805cd1:	74 35                	je     805d08 <manage_proc+0x16a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:208 (discriminator 1)
  805cd3:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  805cda:	00 00 00 
  805cdd:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  805ce0:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  805ce3:	48 98                	cdqe   
  805ce5:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  805cec:	48 01 d0             	add    rax,rdx
  805cef:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
  805cf2:	83 f8 02             	cmp    eax,0x2
  805cf5:	75 11                	jne    805d08 <manage_proc+0x16a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:208 (discriminator 2)
  805cf7:	48 b8 cc 85 40 00 00 	movabs rax,0x4085cc
  805cfe:	00 00 00 
  805d01:	8b 00                	mov    eax,DWORD PTR [rax]
  805d03:	39 45 fc             	cmp    DWORD PTR [rbp-0x4],eax
  805d06:	75 1d                	jne    805d25 <manage_proc+0x187>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:211
                break;
            }
            i++;
  805d08:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:212
            if(i>=MAX_TASKS){
  805d0c:	83 7d fc 1f          	cmp    DWORD PTR [rbp-0x4],0x1f
  805d10:	7e 0b                	jle    805d1d <manage_proc+0x17f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:213
                times++;
  805d12:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:214
                i=0;
  805d16:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:207
        while(times<10){
  805d1d:	83 7d f8 09          	cmp    DWORD PTR [rbp-0x8],0x9
  805d21:	7e 8d                	jle    805cb0 <manage_proc+0x112>
  805d23:	eb 01                	jmp    805d26 <manage_proc+0x188>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:209
                break;
  805d25:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:217
            }
        }
        if(times==10)return;//超过十次尝试都没有，暂时不切换
  805d26:	83 7d f8 0a          	cmp    DWORD PTR [rbp-0x8],0xa
  805d2a:	0f 84 a5 00 00 00    	je     805dd5 <manage_proc+0x237>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:219
        //switch
        task[cur_proc].stat=TASK_READY;
  805d30:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  805d37:	00 00 00 
  805d3a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  805d3d:	48 b8 cc 85 40 00 00 	movabs rax,0x4085cc
  805d44:	00 00 00 
  805d47:	8b 00                	mov    eax,DWORD PTR [rax]
  805d49:	48 98                	cdqe   
  805d4b:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  805d52:	48 01 d0             	add    rax,rdx
  805d55:	c7 40 18 02 00 00 00 	mov    DWORD PTR [rax+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:220
        task[i].stat=TASK_RUNNING;
  805d5c:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  805d63:	00 00 00 
  805d66:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  805d69:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  805d6c:	48 98                	cdqe   
  805d6e:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  805d75:	48 01 d0             	add    rax,rdx
  805d78:	c7 40 18 01 00 00 00 	mov    DWORD PTR [rax+0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:221
        switch_to(&task[cur_proc], &task[i]);
  805d7f:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  805d86:	00 00 00 
  805d89:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  805d8c:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  805d8f:	48 98                	cdqe   
  805d91:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  805d98:	48 01 c2             	add    rdx,rax
  805d9b:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  805da2:	00 00 00 
  805da5:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  805da8:	48 b8 cc 85 40 00 00 	movabs rax,0x4085cc
  805daf:	00 00 00 
  805db2:	8b 00                	mov    eax,DWORD PTR [rax]
  805db4:	48 98                	cdqe   
  805db6:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  805dbd:	48 01 c8             	add    rax,rcx
  805dc0:	48 89 d6             	mov    rsi,rdx
  805dc3:	48 89 c7             	mov    rdi,rax
  805dc6:	48 b8 e5 6a 80 00 00 	movabs rax,0x806ae5
  805dcd:	00 00 00 
  805dd0:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:223
    }
    return;
  805dd2:	90                   	nop
  805dd3:	eb 01                	jmp    805dd6 <manage_proc+0x238>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:217
        if(times==10)return;//超过十次尝试都没有，暂时不切换
  805dd5:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:224
}
  805dd6:	c9                   	leave  
  805dd7:	c3                   	ret    

0000000000805dd8 <switch_proc_tss>:
switch_proc_tss():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:227

void switch_proc_tss(int pnr)
{
  805dd8:	f3 0f 1e fa          	endbr64 
  805ddc:	55                   	push   rbp
  805ddd:	48 89 e5             	mov    rbp,rsp
  805de0:	48 83 ec 20          	sub    rsp,0x20
  805de4:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:228
    int sel=_TSS_IND(pnr)*8;
  805de7:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  805dea:	01 c0                	add    eax,eax
  805dec:	83 c0 05             	add    eax,0x5
  805def:	c1 e0 03             	shl    eax,0x3
  805df2:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:229
    cur_proc=pnr;
  805df5:	48 ba cc 85 40 00 00 	movabs rdx,0x4085cc
  805dfc:	00 00 00 
  805dff:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  805e02:	89 02                	mov    DWORD PTR [rdx],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:230
    switch_proc_asm(sel);
  805e04:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  805e07:	89 c7                	mov    edi,eax
  805e09:	48 b8 0a 0c 81 00 00 	movabs rax,0x810c0a
  805e10:	00 00 00 
  805e13:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:231
}
  805e15:	90                   	nop
  805e16:	c9                   	leave  
  805e17:	c3                   	ret    

0000000000805e18 <switch_proc>:
switch_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:232
void switch_proc(int pnr){
  805e18:	f3 0f 1e fa          	endbr64 
  805e1c:	55                   	push   rbp
  805e1d:	48 89 e5             	mov    rbp,rsp
  805e20:	48 81 ec 50 03 00 00 	sub    rsp,0x350
  805e27:	89 bd bc fc ff ff    	mov    DWORD PTR [rbp-0x344],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:235
    //printf("switching proc to %d\n",pnr);
    //printf("eip:%x\n",task[pnr].tss.eip);
    struct process p=task[pnr];
  805e2d:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  805e34:	00 00 00 
  805e37:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  805e3a:	8b 85 bc fc ff ff    	mov    eax,DWORD PTR [rbp-0x344]
  805e40:	48 98                	cdqe   
  805e42:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  805e49:	48 01 c2             	add    rdx,rax
  805e4c:	48 8d 85 c0 fc ff ff 	lea    rax,[rbp-0x340]
  805e53:	b9 66 00 00 00       	mov    ecx,0x66
  805e58:	48 89 c7             	mov    rdi,rax
  805e5b:	48 89 d6             	mov    rsi,rdx
  805e5e:	f3 48 a5             	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
  805e61:	48 89 f2             	mov    rdx,rsi
  805e64:	48 89 f8             	mov    rax,rdi
  805e67:	8b 0a                	mov    ecx,DWORD PTR [rdx]
  805e69:	89 08                	mov    DWORD PTR [rax],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:236
    save_context(&task[cur_proc].tss);
  805e6b:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  805e72:	00 00 00 
  805e75:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  805e78:	48 b8 cc 85 40 00 00 	movabs rax,0x4085cc
  805e7f:	00 00 00 
  805e82:	8b 00                	mov    eax,DWORD PTR [rax]
  805e84:	48 98                	cdqe   
  805e86:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  805e8d:	48 01 d0             	add    rax,rdx
  805e90:	48 05 d8 01 00 00    	add    rax,0x1d8
  805e96:	48 89 c7             	mov    rdi,rax
  805e99:	48 b8 04 5f 80 00 00 	movabs rax,0x805f04
  805ea0:	00 00 00 
  805ea3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:241
//    //重新设置0号进程
//    task[0].tss.eip=proc_zero;
//    task[0].tss.cr3=PAGE_INDEX_ADDR;
//    task[0].tss.eflags=0x202;
    cur_proc=pnr;
  805ea5:	48 ba cc 85 40 00 00 	movabs rdx,0x4085cc
  805eac:	00 00 00 
  805eaf:	8b 85 bc fc ff ff    	mov    eax,DWORD PTR [rbp-0x344]
  805eb5:	89 02                	mov    DWORD PTR [rdx],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:242
    int sel=_TSS_IND(pnr)*8;
  805eb7:	8b 85 bc fc ff ff    	mov    eax,DWORD PTR [rbp-0x344]
  805ebd:	01 c0                	add    eax,eax
  805ebf:	83 c0 05             	add    eax,0x5
  805ec2:	c1 e0 03             	shl    eax,0x3
  805ec5:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:243
    switch_to(NULL, &task[pnr].tss);
  805ec8:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  805ecf:	00 00 00 
  805ed2:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  805ed5:	8b 85 bc fc ff ff    	mov    eax,DWORD PTR [rbp-0x344]
  805edb:	48 98                	cdqe   
  805edd:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  805ee4:	48 01 d0             	add    rax,rdx
  805ee7:	48 05 d8 01 00 00    	add    rax,0x1d8
  805eed:	48 89 c6             	mov    rsi,rax
  805ef0:	bf 00 00 00 00       	mov    edi,0x0
  805ef5:	48 b8 e5 6a 80 00 00 	movabs rax,0x806ae5
  805efc:	00 00 00 
  805eff:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:246
    //asm volatile("push %0":"=r"(task[pnr].tss.eip));
    //switch_proc_asm(pnr*8+0x8*3);
}
  805f01:	90                   	nop
  805f02:	c9                   	leave  
  805f03:	c3                   	ret    

0000000000805f04 <save_context>:
save_context():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:248
void save_context(TSS *tss)
{
  805f04:	f3 0f 1e fa          	endbr64 
  805f08:	55                   	push   rbp
  805f09:	48 89 e5             	mov    rbp,rsp
  805f0c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:259
//    tss->esi=scene_saver.esi;
//    tss->edi=scene_saver.edi;
//    tss->eflags=scene_saver.eflags;
//    tss->esp=scene_saver.esp;
//    tss->ebp=scene_saver.ebp;
}
  805f10:	90                   	nop
  805f11:	5d                   	pop    rbp
  805f12:	c3                   	ret    

0000000000805f13 <palloc>:
palloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:420
    task[index].stat=TASK_READY;
    return index;
} */
//为指定进程申请新的内存，并返回这块内存的线性地址。
void* palloc(int proc_index,int size)
{
  805f13:	f3 0f 1e fa          	endbr64 
  805f17:	55                   	push   rbp
  805f18:	48 89 e5             	mov    rbp,rsp
  805f1b:	48 83 ec 60          	sub    rsp,0x60
  805f1f:	89 7d ac             	mov    DWORD PTR [rbp-0x54],edi
  805f22:	89 75 a8             	mov    DWORD PTR [rbp-0x58],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:421
    int page_c=size/4096+size%4096?1:0;
  805f25:	8b 45 a8             	mov    eax,DWORD PTR [rbp-0x58]
  805f28:	8d 90 ff 0f 00 00    	lea    edx,[rax+0xfff]
  805f2e:	85 c0                	test   eax,eax
  805f30:	0f 48 c2             	cmovs  eax,edx
  805f33:	c1 f8 0c             	sar    eax,0xc
  805f36:	89 c1                	mov    ecx,eax
  805f38:	8b 45 a8             	mov    eax,DWORD PTR [rbp-0x58]
  805f3b:	99                   	cdq    
  805f3c:	c1 ea 14             	shr    edx,0x14
  805f3f:	01 d0                	add    eax,edx
  805f41:	25 ff 0f 00 00       	and    eax,0xfff
  805f46:	29 d0                	sub    eax,edx
  805f48:	01 c8                	add    eax,ecx
  805f4a:	85 c0                	test   eax,eax
  805f4c:	0f 95 c0             	setne  al
  805f4f:	0f b6 c0             	movzx  eax,al
  805f52:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:422
    int c=0;
  805f55:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:423
    void *ptr=NULL;
  805f5c:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
  805f63:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:424
    page_item *pgind=NULL;//task[proc_index].tss.cr3;
  805f64:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
  805f6b:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:425
    pgind++;
  805f6c:	48 83 45 f0 08       	add    QWORD PTR [rbp-0x10],0x8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:426
    for(int i=1;i<1024;i++)
  805f71:	c7 45 ec 01 00 00 00 	mov    DWORD PTR [rbp-0x14],0x1
  805f78:	e9 ab 02 00 00       	jmp    806228 <palloc+0x315>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:428
    {
        page_item* tblp=*pgind&0xfffff000;
  805f7d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  805f81:	48 8b 00             	mov    rax,QWORD PTR [rax]
  805f84:	25 00 f0 ff ff       	and    eax,0xfffff000
  805f89:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:429
        for(int j=0;j<1024;j++)
  805f8d:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
  805f94:	e9 79 02 00 00       	jmp    806212 <palloc+0x2ff>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:431
        {
            int v=*tblp&PAGE_PRESENT;
  805f99:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  805f9d:	48 8b 00             	mov    rax,QWORD PTR [rax]
  805fa0:	83 e0 01             	and    eax,0x1
  805fa3:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:432
            if(!v)
  805fa6:	83 7d cc 00          	cmp    DWORD PTR [rbp-0x34],0x0
  805faa:	0f 85 59 02 00 00    	jne    806209 <palloc+0x2f6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:434
            {
                int new_pg=req_a_page();
  805fb0:	b8 00 00 00 00       	mov    eax,0x0
  805fb5:	48 ba 49 21 80 00 00 	movabs rdx,0x802149
  805fbc:	00 00 00 
  805fbf:	ff d2                	call   rdx
  805fc1:	89 45 c8             	mov    DWORD PTR [rbp-0x38],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:435
                if(new_pg==-1)
  805fc4:	83 7d c8 ff          	cmp    DWORD PTR [rbp-0x38],0xffffffff
  805fc8:	0f 85 e9 00 00 00    	jne    8060b7 <palloc+0x1a4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:438
                {
                    //修改ldt,增加数据空间
                    unsigned int size=task[proc_index].ldt[2].limit_lo16;
  805fce:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  805fd5:	00 00 00 
  805fd8:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  805fdb:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
  805fde:	48 98                	cdqe   
  805fe0:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  805fe7:	48 01 d0             	add    rax,rdx
  805fea:	0f b7 40 68          	movzx  eax,WORD PTR [rax+0x68]
  805fee:	0f b7 c0             	movzx  eax,ax
  805ff1:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:439
                    size+=(task[proc_index].ldt[2].attr&0xf)<<16;
  805ff4:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  805ffb:	00 00 00 
  805ffe:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  806001:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
  806004:	48 98                	cdqe   
  806006:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  80600d:	48 01 d0             	add    rax,rdx
  806010:	0f b7 40 6d          	movzx  eax,WORD PTR [rax+0x6d]
  806014:	0f b7 c0             	movzx  eax,ax
  806017:	c1 e0 10             	shl    eax,0x10
  80601a:	25 00 00 0f 00       	and    eax,0xf0000
  80601f:	01 45 b4             	add    DWORD PTR [rbp-0x4c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:440
                    size+=c;
  806022:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  806025:	01 45 b4             	add    DWORD PTR [rbp-0x4c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:441
                    task[proc_index].ldt[2].limit_lo16=size&0xffff;
  806028:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  80602f:	00 00 00 
  806032:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  806035:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
  806038:	48 98                	cdqe   
  80603a:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  806041:	48 01 d0             	add    rax,rdx
  806044:	8b 55 b4             	mov    edx,DWORD PTR [rbp-0x4c]
  806047:	66 89 50 68          	mov    WORD PTR [rax+0x68],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:442
                    int tmp_attr=task[proc_index].ldt[2].attr;
  80604b:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  806052:	00 00 00 
  806055:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  806058:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
  80605b:	48 98                	cdqe   
  80605d:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  806064:	48 01 d0             	add    rax,rdx
  806067:	0f b7 40 6d          	movzx  eax,WORD PTR [rax+0x6d]
  80606b:	0f b7 c0             	movzx  eax,ax
  80606e:	89 45 b0             	mov    DWORD PTR [rbp-0x50],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:443
                    tmp_attr&=0xfff0;
  806071:	81 65 b0 f0 ff 00 00 	and    DWORD PTR [rbp-0x50],0xfff0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:444
                    tmp_attr+=(size>>16)&0xf;
  806078:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
  80607b:	c1 e8 10             	shr    eax,0x10
  80607e:	83 e0 0f             	and    eax,0xf
  806081:	89 c2                	mov    edx,eax
  806083:	8b 45 b0             	mov    eax,DWORD PTR [rbp-0x50]
  806086:	01 d0                	add    eax,edx
  806088:	89 45 b0             	mov    DWORD PTR [rbp-0x50],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:445
                    task[proc_index].ldt[2].attr=tmp_attr;
  80608b:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  806092:	00 00 00 
  806095:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  806098:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
  80609b:	48 98                	cdqe   
  80609d:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  8060a4:	48 01 d0             	add    rax,rdx
  8060a7:	8b 55 b0             	mov    edx,DWORD PTR [rbp-0x50]
  8060aa:	66 89 50 6d          	mov    WORD PTR [rax+0x6d],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:446
                    return ptr;//失败了，只能申请一部分的内存或者返回NULL
  8060ae:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  8060b2:	e9 83 01 00 00       	jmp    80623a <palloc+0x327>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:448
                }
                int addr=get_phyaddr(new_pg);
  8060b7:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
  8060ba:	89 c7                	mov    edi,eax
  8060bc:	48 b8 9f 23 80 00 00 	movabs rax,0x80239f
  8060c3:	00 00 00 
  8060c6:	ff d0                	call   rax
  8060c8:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:449
                set_page_item(tblp,addr,PAGE_PRESENT|\
  8060cb:	8b 4d c4             	mov    ecx,DWORD PTR [rbp-0x3c]
  8060ce:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  8060d2:	ba 07 00 00 00       	mov    edx,0x7
  8060d7:	89 ce                	mov    esi,ecx
  8060d9:	48 89 c7             	mov    rdi,rax
  8060dc:	48 b8 b2 23 80 00 00 	movabs rax,0x8023b2
  8060e3:	00 00 00 
  8060e6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:451
                PAGE_RWX|PAGE_FOR_ALL);
                int laddr=i*0x400000+j*0x1000;//线性地址
  8060e8:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  8060eb:	c1 e0 0a             	shl    eax,0xa
  8060ee:	89 c2                	mov    edx,eax
  8060f0:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  8060f3:	01 d0                	add    eax,edx
  8060f5:	c1 e0 0c             	shl    eax,0xc
  8060f8:	89 45 c0             	mov    DWORD PTR [rbp-0x40],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:452
                if(ptr==NULL)
  8060fb:	48 83 7d d0 00       	cmp    QWORD PTR [rbp-0x30],0x0
  806100:	75 0f                	jne    806111 <palloc+0x1fe>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:455
                {
                   // ptr=laddr;
                    palloc_paddr=addr;
  806102:	48 ba d4 85 40 00 00 	movabs rdx,0x4085d4
  806109:	00 00 00 
  80610c:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
  80610f:	89 02                	mov    DWORD PTR [rdx],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:457
                }
                page_c--;
  806111:	83 6d fc 01          	sub    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:458
                c++;
  806115:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:459
                if(page_c==0)
  806119:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
  80611d:	0f 85 e6 00 00 00    	jne    806209 <palloc+0x2f6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:462
                {
                    //修改ldt,增加数据空间
                    unsigned int size=task[proc_index].ldt[2].limit_lo16;
  806123:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  80612a:	00 00 00 
  80612d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  806130:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
  806133:	48 98                	cdqe   
  806135:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  80613c:	48 01 d0             	add    rax,rdx
  80613f:	0f b7 40 68          	movzx  eax,WORD PTR [rax+0x68]
  806143:	0f b7 c0             	movzx  eax,ax
  806146:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:463
                    size+=(task[proc_index].ldt[2].attr&0xf)<<16;
  806149:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  806150:	00 00 00 
  806153:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  806156:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
  806159:	48 98                	cdqe   
  80615b:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  806162:	48 01 d0             	add    rax,rdx
  806165:	0f b7 40 6d          	movzx  eax,WORD PTR [rax+0x6d]
  806169:	0f b7 c0             	movzx  eax,ax
  80616c:	c1 e0 10             	shl    eax,0x10
  80616f:	25 00 00 0f 00       	and    eax,0xf0000
  806174:	01 45 bc             	add    DWORD PTR [rbp-0x44],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:464
                    size+=c;
  806177:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  80617a:	01 45 bc             	add    DWORD PTR [rbp-0x44],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:465
                    task[proc_index].ldt[2].limit_lo16=size&0xffff;
  80617d:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  806184:	00 00 00 
  806187:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  80618a:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
  80618d:	48 98                	cdqe   
  80618f:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  806196:	48 01 d0             	add    rax,rdx
  806199:	8b 55 bc             	mov    edx,DWORD PTR [rbp-0x44]
  80619c:	66 89 50 68          	mov    WORD PTR [rax+0x68],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:466
                    int tmp_attr=task[proc_index].ldt[2].attr;
  8061a0:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  8061a7:	00 00 00 
  8061aa:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  8061ad:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
  8061b0:	48 98                	cdqe   
  8061b2:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  8061b9:	48 01 d0             	add    rax,rdx
  8061bc:	0f b7 40 6d          	movzx  eax,WORD PTR [rax+0x6d]
  8061c0:	0f b7 c0             	movzx  eax,ax
  8061c3:	89 45 b8             	mov    DWORD PTR [rbp-0x48],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:467
                    tmp_attr&=0xfff0;
  8061c6:	81 65 b8 f0 ff 00 00 	and    DWORD PTR [rbp-0x48],0xfff0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:468
                    tmp_attr+=(size>>16)&0xf;
  8061cd:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
  8061d0:	c1 e8 10             	shr    eax,0x10
  8061d3:	83 e0 0f             	and    eax,0xf
  8061d6:	89 c2                	mov    edx,eax
  8061d8:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
  8061db:	01 d0                	add    eax,edx
  8061dd:	89 45 b8             	mov    DWORD PTR [rbp-0x48],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:469
                    task[proc_index].ldt[2].attr=tmp_attr;
  8061e0:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  8061e7:	00 00 00 
  8061ea:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  8061ed:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
  8061f0:	48 98                	cdqe   
  8061f2:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  8061f9:	48 01 d0             	add    rax,rdx
  8061fc:	8b 55 b8             	mov    edx,DWORD PTR [rbp-0x48]
  8061ff:	66 89 50 6d          	mov    WORD PTR [rax+0x6d],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:470
                    return ptr;
  806203:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  806207:	eb 31                	jmp    80623a <palloc+0x327>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:473 (discriminator 2)
                }
            }
            tblp++;
  806209:	48 83 45 e0 08       	add    QWORD PTR [rbp-0x20],0x8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:429 (discriminator 2)
        for(int j=0;j<1024;j++)
  80620e:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:429 (discriminator 1)
  806212:	81 7d dc ff 03 00 00 	cmp    DWORD PTR [rbp-0x24],0x3ff
  806219:	0f 8e 7a fd ff ff    	jle    805f99 <palloc+0x86>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:475 (discriminator 2)
        }
        pgind++;
  80621f:	48 83 45 f0 08       	add    QWORD PTR [rbp-0x10],0x8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:426 (discriminator 2)
    for(int i=1;i<1024;i++)
  806224:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:426 (discriminator 1)
  806228:	81 7d ec ff 03 00 00 	cmp    DWORD PTR [rbp-0x14],0x3ff
  80622f:	0f 8e 48 fd ff ff    	jle    805f7d <palloc+0x6a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:477
    }
    return NULL;
  806235:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:478
}
  80623a:	c9                   	leave  
  80623b:	c3                   	ret    

000000000080623c <malloc>:
malloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:481
//为当前进程申请新的内存，并返回这块内存的线性地址。
void* malloc(int size)
{
  80623c:	f3 0f 1e fa          	endbr64 
  806240:	55                   	push   rbp
  806241:	48 89 e5             	mov    rbp,rsp
  806244:	48 83 ec 10          	sub    rsp,0x10
  806248:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:482
    return palloc(cur_proc,size);
  80624b:	48 b8 cc 85 40 00 00 	movabs rax,0x4085cc
  806252:	00 00 00 
  806255:	8b 00                	mov    eax,DWORD PTR [rax]
  806257:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
  80625a:	89 d6                	mov    esi,edx
  80625c:	89 c7                	mov    edi,eax
  80625e:	48 b8 13 5f 80 00 00 	movabs rax,0x805f13
  806265:	00 00 00 
  806268:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:483
}
  80626a:	c9                   	leave  
  80626b:	c3                   	ret    

000000000080626c <proc_end>:
proc_end():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:485
void proc_end()
{
  80626c:	f3 0f 1e fa          	endbr64 
  806270:	55                   	push   rbp
  806271:	48 89 e5             	mov    rbp,rsp
  806274:	48 83 ec 10          	sub    rsp,0x10
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:487
    int ret;
    asm volatile("mov %%eax,%0":"=m"(ret));
  806278:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:491
    //printf("proc #%d ended with retv %d.\n",cur_proc,ret);
    //切换堆栈
    //asm volatile("mov %0,%%rsp"::"r"(task[0].tss.esp));
    del_proc(cur_proc);
  80627b:	48 b8 cc 85 40 00 00 	movabs rax,0x4085cc
  806282:	00 00 00 
  806285:	8b 00                	mov    eax,DWORD PTR [rax]
  806287:	89 c7                	mov    edi,eax
  806289:	48 b8 63 63 80 00 00 	movabs rax,0x806363
  806290:	00 00 00 
  806293:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:492
    if(task[cur_proc].parent_pid!=-1){
  806295:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  80629c:	00 00 00 
  80629f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  8062a2:	48 b8 cc 85 40 00 00 	movabs rax,0x4085cc
  8062a9:	00 00 00 
  8062ac:	8b 00                	mov    eax,DWORD PTR [rax]
  8062ae:	48 98                	cdqe   
  8062b0:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  8062b7:	48 01 d0             	add    rax,rdx
  8062ba:	8b 80 9c 00 00 00    	mov    eax,DWORD PTR [rax+0x9c]
  8062c0:	83 f8 ff             	cmp    eax,0xffffffff
  8062c3:	0f 84 86 00 00 00    	je     80634f <proc_end+0xe3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:493
        task[task[cur_proc].parent_pid].stat=TASK_READY;
  8062c9:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  8062d0:	00 00 00 
  8062d3:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  8062d6:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  8062dd:	00 00 00 
  8062e0:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  8062e3:	48 b8 cc 85 40 00 00 	movabs rax,0x4085cc
  8062ea:	00 00 00 
  8062ed:	8b 00                	mov    eax,DWORD PTR [rax]
  8062ef:	48 98                	cdqe   
  8062f1:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  8062f8:	48 01 c8             	add    rax,rcx
  8062fb:	8b 80 9c 00 00 00    	mov    eax,DWORD PTR [rax+0x9c]
  806301:	89 c0                	mov    eax,eax
  806303:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  80630a:	48 01 d0             	add    rax,rdx
  80630d:	c7 40 18 02 00 00 00 	mov    DWORD PTR [rax+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:494
        switch_proc_tss(task[cur_proc].parent_pid);
  806314:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  80631b:	00 00 00 
  80631e:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  806321:	48 b8 cc 85 40 00 00 	movabs rax,0x4085cc
  806328:	00 00 00 
  80632b:	8b 00                	mov    eax,DWORD PTR [rax]
  80632d:	48 98                	cdqe   
  80632f:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  806336:	48 01 d0             	add    rax,rdx
  806339:	8b 80 9c 00 00 00    	mov    eax,DWORD PTR [rax+0x9c]
  80633f:	89 c7                	mov    edi,eax
  806341:	48 b8 d8 5d 80 00 00 	movabs rax,0x805dd8
  806348:	00 00 00 
  80634b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:499
    }
    else
        switch_proc_tss(0);
    //syscall(SYSCALL_DEL_PROC,cur_proc,0,0,0,0);
}
  80634d:	eb 11                	jmp    806360 <proc_end+0xf4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:497
        switch_proc_tss(0);
  80634f:	bf 00 00 00 00       	mov    edi,0x0
  806354:	48 b8 d8 5d 80 00 00 	movabs rax,0x805dd8
  80635b:	00 00 00 
  80635e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:499
}
  806360:	90                   	nop
  806361:	c9                   	leave  
  806362:	c3                   	ret    

0000000000806363 <del_proc>:
del_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:501
void del_proc(int pnr)
{
  806363:	f3 0f 1e fa          	endbr64 
  806367:	55                   	push   rbp
  806368:	48 89 e5             	mov    rbp,rsp
  80636b:	48 83 ec 20          	sub    rsp,0x20
  80636f:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:502
    task[pnr].stat=TASK_ZOMBIE;
  806372:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  806379:	00 00 00 
  80637c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  80637f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  806382:	48 98                	cdqe   
  806384:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  80638b:	48 01 d0             	add    rax,rdx
  80638e:	c7 40 18 04 00 00 00 	mov    DWORD PTR [rax+0x18],0x4
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:505
//    task[pnr].pid=-1;
    //释放申请的页面
    release_mmap(&task[pnr]);
  806395:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  80639c:	00 00 00 
  80639f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  8063a2:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  8063a5:	48 98                	cdqe   
  8063a7:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  8063ae:	48 01 d0             	add    rax,rdx
  8063b1:	48 89 c7             	mov    rdi,rax
  8063b4:	48 b8 57 7b 80 00 00 	movabs rax,0x807b57
  8063bb:	00 00 00 
  8063be:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:507
    //释放存放页目录的页面
    kmfree(task[pnr].pml4);
  8063c0:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  8063c7:	00 00 00 
  8063ca:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  8063cd:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  8063d0:	48 98                	cdqe   
  8063d2:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  8063d9:	48 01 d0             	add    rax,rdx
  8063dc:	48 8b 80 c0 00 00 00 	mov    rax,QWORD PTR [rax+0xc0]
  8063e3:	48 89 c7             	mov    rdi,rax
  8063e6:	48 b8 e0 1b 80 00 00 	movabs rax,0x801be0
  8063ed:	00 00 00 
  8063f0:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:509
    //关闭打开的文件
    for(int i=3;i<MAX_PROC_OPENF;i++){
  8063f2:	c7 45 fc 03 00 00 00 	mov    DWORD PTR [rbp-0x4],0x3
  8063f9:	eb 45                	jmp    806440 <del_proc+0xdd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:510
        if(task[pnr].openf[i]){
  8063fb:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  806402:	00 00 00 
  806405:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  806408:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  80640b:	48 98                	cdqe   
  80640d:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  806414:	48 01 d0             	add    rax,rdx
  806417:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
  80641a:	48 63 d2             	movsxd rdx,edx
  80641d:	48 83 c2 1a          	add    rdx,0x1a
  806421:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
  806426:	48 85 c0             	test   rax,rax
  806429:	74 11                	je     80643c <del_proc+0xd9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:511
            sys_close(i);
  80642b:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80642e:	89 c7                	mov    edi,eax
  806430:	48 b8 6a ae 80 00 00 	movabs rax,0x80ae6a
  806437:	00 00 00 
  80643a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:509 (discriminator 2)
    for(int i=3;i<MAX_PROC_OPENF;i++){
  80643c:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:509 (discriminator 1)
  806440:	83 7d fc 1f          	cmp    DWORD PTR [rbp-0x4],0x1f
  806444:	7e b5                	jle    8063fb <del_proc+0x98>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:515
        }
    }
    //三个std判断一下是否是会话leader，是的话再关闭
    if(task[pnr].sid==task[pnr].pid){
  806446:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  80644d:	00 00 00 
  806450:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  806453:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  806456:	48 98                	cdqe   
  806458:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  80645f:	48 01 d0             	add    rax,rdx
  806462:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
  806465:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  80646c:	00 00 00 
  80646f:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  806472:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  806475:	48 98                	cdqe   
  806477:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  80647e:	48 01 c8             	add    rax,rcx
  806481:	8b 00                	mov    eax,DWORD PTR [rax]
  806483:	39 c2                	cmp    edx,eax
  806485:	75 61                	jne    8064e8 <del_proc+0x185>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:517
        //tty和console断联
        sys_ioctl(0,TTY_DISCONNECT,0);
  806487:	ba 00 00 00 00       	mov    edx,0x0
  80648c:	be 02 00 00 00       	mov    esi,0x2
  806491:	bf 00 00 00 00       	mov    edi,0x0
  806496:	48 b8 39 86 80 00 00 	movabs rax,0x808639
  80649d:	00 00 00 
  8064a0:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:518
        sys_close(0);
  8064a2:	bf 00 00 00 00       	mov    edi,0x0
  8064a7:	48 b8 6a ae 80 00 00 	movabs rax,0x80ae6a
  8064ae:	00 00 00 
  8064b1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:519
        sys_close(1);
  8064b3:	bf 01 00 00 00       	mov    edi,0x1
  8064b8:	48 b8 6a ae 80 00 00 	movabs rax,0x80ae6a
  8064bf:	00 00 00 
  8064c2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:520
        sys_close(2);
  8064c4:	bf 02 00 00 00       	mov    edi,0x2
  8064c9:	48 b8 6a ae 80 00 00 	movabs rax,0x80ae6a
  8064d0:	00 00 00 
  8064d3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:522
        //然后,关闭所有前台进程组的进程
        for(int i=0;i<MAX_TASKS;i++){
  8064d5:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
  8064dc:	eb 04                	jmp    8064e2 <del_proc+0x17f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:522 (discriminator 3)
  8064de:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:522 (discriminator 1)
  8064e2:	83 7d f8 1f          	cmp    DWORD PTR [rbp-0x8],0x1f
  8064e6:	7e f6                	jle    8064de <del_proc+0x17b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:532
    }
    //TODO 给子进程发送SIGHUP信号结束他们
    //
    //从进程中解除cr3,tss和ldt
    //switch_proc_tss(task[pnr]);
}
  8064e8:	90                   	nop
  8064e9:	c9                   	leave  
  8064ea:	c3                   	ret    

00000000008064eb <set_proc_stat>:
set_proc_stat():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:535

int set_proc_stat(int pid,int stat)
{
  8064eb:	f3 0f 1e fa          	endbr64 
  8064ef:	55                   	push   rbp
  8064f0:	48 89 e5             	mov    rbp,rsp
  8064f3:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
  8064f6:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:536
    if(pid==-1)return -1;
  8064f9:	83 7d ec ff          	cmp    DWORD PTR [rbp-0x14],0xffffffff
  8064fd:	75 0a                	jne    806509 <set_proc_stat+0x1e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:536 (discriminator 1)
  8064ff:	b8 ff ff ff ff       	mov    eax,0xffffffff
  806504:	e9 a3 00 00 00       	jmp    8065ac <set_proc_stat+0xc1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:537
    int i=0;
  806509:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:538
    for(;task[i].pid!=pid;i++);
  806510:	eb 04                	jmp    806516 <set_proc_stat+0x2b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:538 (discriminator 2)
  806512:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:538 (discriminator 1)
  806516:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  80651d:	00 00 00 
  806520:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  806523:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  806526:	48 98                	cdqe   
  806528:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  80652f:	48 01 d0             	add    rax,rdx
  806532:	8b 10                	mov    edx,DWORD PTR [rax]
  806534:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  806537:	39 c2                	cmp    edx,eax
  806539:	75 d7                	jne    806512 <set_proc_stat+0x27>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:539
    if(i==MAX_PROC_COUNT)return -1;
  80653b:	83 7d fc 40          	cmp    DWORD PTR [rbp-0x4],0x40
  80653f:	75 07                	jne    806548 <set_proc_stat+0x5d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:539 (discriminator 1)
  806541:	b8 ff ff ff ff       	mov    eax,0xffffffff
  806546:	eb 64                	jmp    8065ac <set_proc_stat+0xc1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:540
    task[i].stat=stat;
  806548:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  80654f:	00 00 00 
  806552:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  806555:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  806558:	48 98                	cdqe   
  80655a:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  806561:	48 01 c2             	add    rdx,rax
  806564:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
  806567:	89 42 18             	mov    DWORD PTR [rdx+0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:542
    //如果这就是正在运行的进程，那么马上停止
    if(cur_proc==i)
  80656a:	48 b8 cc 85 40 00 00 	movabs rax,0x4085cc
  806571:	00 00 00 
  806574:	8b 00                	mov    eax,DWORD PTR [rax]
  806576:	39 45 fc             	cmp    DWORD PTR [rbp-0x4],eax
  806579:	75 2c                	jne    8065a7 <set_proc_stat+0xbc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:543
        task[cur_proc].utime=MAX_UTIME;
  80657b:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  806582:	00 00 00 
  806585:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  806588:	48 b8 cc 85 40 00 00 	movabs rax,0x4085cc
  80658f:	00 00 00 
  806592:	8b 00                	mov    eax,DWORD PTR [rax]
  806594:	48 98                	cdqe   
  806596:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  80659d:	48 01 d0             	add    rax,rdx
  8065a0:	c7 40 1c 0a 00 00 00 	mov    DWORD PTR [rax+0x1c],0xa
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:544
    return 0;
  8065a7:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:545
}
  8065ac:	5d                   	pop    rbp
  8065ad:	c3                   	ret    

00000000008065ae <sys_exit>:
sys_exit():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:577
//}
/*
 * 进程结束。
 * */
int sys_exit(int code)
{
  8065ae:	f3 0f 1e fa          	endbr64 
  8065b2:	55                   	push   rbp
  8065b3:	48 89 e5             	mov    rbp,rsp
  8065b6:	48 83 ec 10          	sub    rsp,0x10
  8065ba:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:578
    current->exit_code=code;
  8065bd:	48 b8 48 85 40 00 00 	movabs rax,0x408548
  8065c4:	00 00 00 
  8065c7:	48 8b 00             	mov    rax,QWORD PTR [rax]
  8065ca:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
  8065cd:	89 50 24             	mov    DWORD PTR [rax+0x24],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:579
    del_proc(cur_proc);
  8065d0:	48 b8 cc 85 40 00 00 	movabs rax,0x4085cc
  8065d7:	00 00 00 
  8065da:	8b 00                	mov    eax,DWORD PTR [rax]
  8065dc:	89 c7                	mov    edi,eax
  8065de:	48 b8 63 63 80 00 00 	movabs rax,0x806363
  8065e5:	00 00 00 
  8065e8:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:581 (discriminator 1)
    while(1)
        manage_proc();
  8065ea:	b8 00 00 00 00       	mov    eax,0x0
  8065ef:	48 ba 9e 5b 80 00 00 	movabs rdx,0x805b9e
  8065f6:	00 00 00 
  8065f9:	ff d2                	call   rdx
  8065fb:	eb ed                	jmp    8065ea <sys_exit+0x3c>

00000000008065fd <reg_proc>:
reg_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:637
    dllmain(NULL,0,NULL);
    
}*/

int reg_proc(addr_t entry, struct index_node *cwd, struct index_node *exef)
{
  8065fd:	f3 0f 1e fa          	endbr64 
  806601:	55                   	push   rbp
  806602:	48 89 e5             	mov    rbp,rsp
  806605:	53                   	push   rbx
  806606:	48 83 ec 48          	sub    rsp,0x48
  80660a:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
  80660e:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
  806612:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:639
    
    int i=req_proc();
  806616:	b8 00 00 00 00       	mov    eax,0x0
  80661b:	48 ba 9d 58 80 00 00 	movabs rdx,0x80589d
  806622:	00 00 00 
  806625:	ff d2                	call   rdx
  806627:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:640
    if(i==-1)return -1;
  80662a:	83 7d ec ff          	cmp    DWORD PTR [rbp-0x14],0xffffffff
  80662e:	75 0a                	jne    80663a <reg_proc+0x3d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:640 (discriminator 1)
  806630:	b8 ff ff ff ff       	mov    eax,0xffffffff
  806635:	e9 29 02 00 00       	jmp    806863 <reg_proc+0x266>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:643

    //栈顶设置在了4G处
    set_proc(0, 0, 0, 0, DS_USER, CS_USER, DS_USER, DS_USER\
  80663a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80663e:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
  806641:	52                   	push   rdx
  806642:	6a 00                	push   0x0
  806644:	50                   	push   rax
  806645:	6a 00                	push   0x0
  806647:	6a 00                	push   0x0
  806649:	6a 00                	push   0x0
  80664b:	68 00 f0 ff ff       	push   0xfffffffffffff000
  806650:	c7 44 24 04 ff 7f 00 	mov    DWORD PTR [rsp+0x4],0x7fff
  806657:	00 
  806658:	6a 28                	push   0x28
  80665a:	6a 28                	push   0x28
  80665c:	6a 28                	push   0x28
  80665e:	6a 28                	push   0x28
  806660:	41 b9 30 00 00 00    	mov    r9d,0x30
  806666:	41 b8 28 00 00 00    	mov    r8d,0x28
  80666c:	b9 00 00 00 00       	mov    ecx,0x0
  806671:	ba 00 00 00 00       	mov    edx,0x0
  806676:	be 00 00 00 00       	mov    esi,0x0
  80667b:	bf 00 00 00 00       	mov    edi,0x0
  806680:	48 b8 b6 59 80 00 00 	movabs rax,0x8059b6
  806687:	00 00 00 
  80668a:	ff d0                	call   rax
  80668c:	48 83 c4 58          	add    rsp,0x58
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:645
, DS_USER, DS_USER, STACK_TOP, 0, 0, 0, entry, 0, i);
    task[i].pml4= kmalloc();
  806690:	b8 00 00 00 00       	mov    eax,0x0
  806695:	48 ba d4 18 80 00 00 	movabs rdx,0x8018d4
  80669c:	00 00 00 
  80669f:	ff d2                	call   rdx
  8066a1:	48 ba 40 85 40 00 00 	movabs rdx,0x408540
  8066a8:	00 00 00 
  8066ab:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
  8066ae:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
  8066b1:	48 63 d2             	movsxd rdx,edx
  8066b4:	48 69 d2 34 03 00 00 	imul   rdx,rdx,0x334
  8066bb:	48 01 ca             	add    rdx,rcx
  8066be:	48 89 82 c0 00 00 00 	mov    QWORD PTR [rdx+0xc0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:646
    task[i].pml4[0]= kmalloc();
  8066c5:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  8066cc:	00 00 00 
  8066cf:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  8066d2:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  8066d5:	48 98                	cdqe   
  8066d7:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  8066de:	48 01 d0             	add    rax,rdx
  8066e1:	48 8b 98 c0 00 00 00 	mov    rbx,QWORD PTR [rax+0xc0]
  8066e8:	b8 00 00 00 00       	mov    eax,0x0
  8066ed:	48 ba d4 18 80 00 00 	movabs rdx,0x8018d4
  8066f4:	00 00 00 
  8066f7:	ff d2                	call   rdx
  8066f9:	48 89 03             	mov    QWORD PTR [rbx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:647
    unsigned long *pdpt=task[i].pml4;
  8066fc:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  806703:	00 00 00 
  806706:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  806709:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  80670c:	48 98                	cdqe   
  80670e:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  806715:	48 01 d0             	add    rax,rdx
  806718:	48 8b 80 c0 00 00 00 	mov    rax,QWORD PTR [rax+0xc0]
  80671f:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:649
    //pdpt第一项(0-1GB)设置为内核空间，这样才能访问中断
    set_1gb_pdpt(pdpt,0,PAGE_PRESENT|PAGE_RWX);
  806723:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  806727:	ba 03 00 00 00       	mov    edx,0x3
  80672c:	be 00 00 00 00       	mov    esi,0x0
  806731:	48 89 c7             	mov    rdi,rax
  806734:	48 b8 03 24 80 00 00 	movabs rax,0x802403
  80673b:	00 00 00 
  80673e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:652

    //申请一项pd,里面申请一2mb页用于堆栈
    addr_t *stackb= kmalloc();
  806740:	b8 00 00 00 00       	mov    eax,0x0
  806745:	48 ba d4 18 80 00 00 	movabs rdx,0x8018d4
  80674c:	00 00 00 
  80674f:	ff d2                	call   rdx
  806751:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:653
    pdpt[3]=(unsigned long)stackb|PAGE_PRESENT|PAGE_FOR_ALL|PAGE_RWX;//3-4G分配栈空间
  806755:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  806759:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  80675d:	48 83 c0 18          	add    rax,0x18
  806761:	48 83 ca 07          	or     rdx,0x7
  806765:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:654
    set_2mb_pde(stackb + 511, get_phyaddr(req_a_page()), PAGE_FOR_ALL|PAGE_RWX);
  806768:	b8 00 00 00 00       	mov    eax,0x0
  80676d:	48 ba 49 21 80 00 00 	movabs rdx,0x802149
  806774:	00 00 00 
  806777:	ff d2                	call   rdx
  806779:	89 c7                	mov    edi,eax
  80677b:	48 b8 9f 23 80 00 00 	movabs rax,0x80239f
  806782:	00 00 00 
  806785:	ff d0                	call   rax
  806787:	89 c1                	mov    ecx,eax
  806789:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  80678d:	48 05 f8 0f 00 00    	add    rax,0xff8
  806793:	ba 06 00 00 00       	mov    edx,0x6
  806798:	89 ce                	mov    esi,ecx
  80679a:	48 89 c7             	mov    rdi,rax
  80679d:	48 b8 5a 24 80 00 00 	movabs rax,0x80245a
  8067a4:	00 00 00 
  8067a7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:655
    task[i].regs.cr3=task[i].pml4;
  8067a9:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  8067b0:	00 00 00 
  8067b3:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  8067b6:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  8067b9:	48 98                	cdqe   
  8067bb:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  8067c2:	48 01 d0             	add    rax,rdx
  8067c5:	48 8b 90 c0 00 00 00 	mov    rdx,QWORD PTR [rax+0xc0]
  8067cc:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  8067d3:	00 00 00 
  8067d6:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  8067d9:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  8067dc:	48 98                	cdqe   
  8067de:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  8067e5:	48 01 c8             	add    rax,rcx
  8067e8:	48 89 90 44 02 00 00 	mov    QWORD PTR [rax+0x244],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:657

    task[i].stat=TASK_READY;
  8067ef:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  8067f6:	00 00 00 
  8067f9:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  8067fc:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  8067ff:	48 98                	cdqe   
  806801:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  806808:	48 01 d0             	add    rax,rdx
  80680b:	c7 40 18 02 00 00 00 	mov    DWORD PTR [rax+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:658
    task[i].cwd=cwd;
  806812:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  806819:	00 00 00 
  80681c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  80681f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  806822:	48 98                	cdqe   
  806824:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  80682b:	48 01 c2             	add    rdx,rax
  80682e:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  806832:	48 89 82 c8 00 00 00 	mov    QWORD PTR [rdx+0xc8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:659
    task[i].exef=exef;
  806839:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  806840:	00 00 00 
  806843:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  806846:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  806849:	48 98                	cdqe   
  80684b:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  806852:	48 01 c2             	add    rdx,rax
  806855:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  806859:	48 89 82 d0 00 00 00 	mov    QWORD PTR [rdx+0xd0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:661

    return i;
  806860:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:716
    proc_ret_stack *pstack=stack_paddr+stack_size-12;
    pstack->argc=0;
    pstack->argv=0;
    pstack->proc_end_addr=proc_end;
    int *pptr=pstack;*/
}
  806863:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
  806867:	c9                   	leave  
  806868:	c3                   	ret    

0000000000806869 <sys_malloc>:
sys_malloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:719

void * sys_malloc(int size)
{
  806869:	f3 0f 1e fa          	endbr64 
  80686d:	55                   	push   rbp
  80686e:	48 89 e5             	mov    rbp,rsp
  806871:	89 7d cc             	mov    DWORD PTR [rbp-0x34],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:721
    //
    int n=size/CHUNK_SIZE+size%CHUNK_SIZE?1:0;
  806874:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
  806877:	8d 90 ff 0f 00 00    	lea    edx,[rax+0xfff]
  80687d:	85 c0                	test   eax,eax
  80687f:	0f 48 c2             	cmovs  eax,edx
  806882:	c1 f8 0c             	sar    eax,0xc
  806885:	89 c1                	mov    ecx,eax
  806887:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
  80688a:	99                   	cdq    
  80688b:	c1 ea 14             	shr    edx,0x14
  80688e:	01 d0                	add    eax,edx
  806890:	25 ff 0f 00 00       	and    eax,0xfff
  806895:	29 d0                	sub    eax,edx
  806897:	01 c8                	add    eax,ecx
  806899:	85 c0                	test   eax,eax
  80689b:	0f 95 c0             	setne  al
  80689e:	0f b6 c0             	movzx  eax,al
  8068a1:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:722
    chunk_header *hp=(chunk_header*)task[cur_proc].mem_struct.heap_base;
  8068a4:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  8068ab:	00 00 00 
  8068ae:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  8068b1:	48 b8 cc 85 40 00 00 	movabs rax,0x4085cc
  8068b8:	00 00 00 
  8068bb:	8b 00                	mov    eax,DWORD PTR [rax]
  8068bd:	48 98                	cdqe   
  8068bf:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  8068c6:	48 01 d0             	add    rax,rdx
  8068c9:	8b 40 28             	mov    eax,DWORD PTR [rax+0x28]
  8068cc:	48 98                	cdqe   
  8068ce:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:723
    while (hp->next!=NULL&&hp->alloc==0&&hp->pgn>=n)
  8068d2:	eb 0c                	jmp    8068e0 <sys_malloc+0x77>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:724
        hp=hp->next;
  8068d4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  8068d8:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  8068dc:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:723
    while (hp->next!=NULL&&hp->alloc==0&&hp->pgn>=n)
  8068e0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  8068e4:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  8068e8:	48 85 c0             	test   rax,rax
  8068eb:	74 16                	je     806903 <sys_malloc+0x9a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:723 (discriminator 1)
  8068ed:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  8068f1:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
  8068f4:	85 c0                	test   eax,eax
  8068f6:	75 0b                	jne    806903 <sys_malloc+0x9a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:723 (discriminator 2)
  8068f8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  8068fc:	8b 00                	mov    eax,DWORD PTR [rax]
  8068fe:	39 45 e8             	cmp    DWORD PTR [rbp-0x18],eax
  806901:	7e d1                	jle    8068d4 <sys_malloc+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:725
    if(hp->pgn<n)
  806903:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  806907:	8b 00                	mov    eax,DWORD PTR [rax]
  806909:	39 45 e8             	cmp    DWORD PTR [rbp-0x18],eax
  80690c:	0f 8e a1 00 00 00    	jle    8069b3 <sys_malloc+0x14a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:728
    {
        //上抬heap top
        if(task[cur_proc].mem_struct.heap_top+CHUNK_SIZE*n>=HEAP_MAXTOP)
  806912:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  806919:	00 00 00 
  80691c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  80691f:	48 b8 cc 85 40 00 00 	movabs rax,0x4085cc
  806926:	00 00 00 
  806929:	8b 00                	mov    eax,DWORD PTR [rax]
  80692b:	48 98                	cdqe   
  80692d:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  806934:	48 01 d0             	add    rax,rdx
  806937:	8b 50 2c             	mov    edx,DWORD PTR [rax+0x2c]
  80693a:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
  80693d:	c1 e0 0c             	shl    eax,0xc
  806940:	01 d0                	add    eax,edx
  806942:	3d ff ff ef 01       	cmp    eax,0x1efffff
  806947:	7e 0a                	jle    806953 <sys_malloc+0xea>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:731
        {
            //超过顶部
            return NULL;
  806949:	b8 00 00 00 00       	mov    eax,0x0
  80694e:	e9 d9 00 00 00       	jmp    806a2c <sys_malloc+0x1c3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:733
        }
        int needed=n-hp->pgn;
  806953:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  806957:	8b 10                	mov    edx,DWORD PTR [rax]
  806959:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
  80695c:	29 d0                	sub    eax,edx
  80695e:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:734
        char* p=task[cur_proc].mem_struct.heap_top;
  806961:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  806968:	00 00 00 
  80696b:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  80696e:	48 b8 cc 85 40 00 00 	movabs rax,0x4085cc
  806975:	00 00 00 
  806978:	8b 00                	mov    eax,DWORD PTR [rax]
  80697a:	48 98                	cdqe   
  80697c:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  806983:	48 01 d0             	add    rax,rdx
  806986:	8b 40 2c             	mov    eax,DWORD PTR [rax+0x2c]
  806989:	48 98                	cdqe   
  80698b:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:735
        for(int i=0;i<needed*CHUNK_SIZE/PAGE_SIZE;i++)
  80698f:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
  806996:	eb 13                	jmp    8069ab <sys_malloc+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:737 (discriminator 3)
        {
            *p=0;//触发缺页中断
  806998:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80699c:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:738 (discriminator 3)
            p+=PAGE_SIZE;
  80699f:	48 81 45 f0 00 10 00 	add    QWORD PTR [rbp-0x10],0x1000
  8069a6:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:735 (discriminator 3)
        for(int i=0;i<needed*CHUNK_SIZE/PAGE_SIZE;i++)
  8069a7:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:735 (discriminator 1)
  8069ab:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  8069ae:	3b 45 e4             	cmp    eax,DWORD PTR [rbp-0x1c]
  8069b1:	7c e5                	jl     806998 <sys_malloc+0x12f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:741
        }
    }
    if(hp->pgn>n)
  8069b3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  8069b7:	8b 00                	mov    eax,DWORD PTR [rax]
  8069b9:	39 45 e8             	cmp    DWORD PTR [rbp-0x18],eax
  8069bc:	7d 59                	jge    806a17 <sys_malloc+0x1ae>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:744
    {
        //在后面新建一个头
        char *p=hp;
  8069be:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  8069c2:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:745
        p+=(n+1)*CHUNK_SIZE;//算上存储头一个
  8069c6:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
  8069c9:	83 c0 01             	add    eax,0x1
  8069cc:	c1 e0 0c             	shl    eax,0xc
  8069cf:	48 98                	cdqe   
  8069d1:	48 01 45 d8          	add    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:746
        chunk_header *np=p;
  8069d5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  8069d9:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:747
        np->pgn=hp->pgn-n-1;
  8069dd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  8069e1:	8b 00                	mov    eax,DWORD PTR [rax]
  8069e3:	2b 45 e8             	sub    eax,DWORD PTR [rbp-0x18]
  8069e6:	8d 50 ff             	lea    edx,[rax-0x1]
  8069e9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  8069ed:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:748
        np->next=hp->next;
  8069ef:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  8069f3:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
  8069f7:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  8069fb:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:749
        np->prev=hp;
  8069ff:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  806a03:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  806a07:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:750
        hp->next=np;
  806a0b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  806a0f:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  806a13:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:752
    }
    hp->alloc=1;//分配完毕
  806a17:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  806a1b:	c7 40 04 01 00 00 00 	mov    DWORD PTR [rax+0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:753
    return (char*)hp+CHUNK_SIZE;//返回后边的第一个数据块地址
  806a22:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  806a26:	48 05 00 10 00 00    	add    rax,0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:754
}
  806a2c:	5d                   	pop    rbp
  806a2d:	c3                   	ret    

0000000000806a2e <sys_free>:
sys_free():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:756
int sys_free(int ptr)
{
  806a2e:	f3 0f 1e fa          	endbr64 
  806a32:	55                   	push   rbp
  806a33:	48 89 e5             	mov    rbp,rsp
  806a36:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:757
    chunk_header *hp=ptr-CHUNK_SIZE;//回退到头
  806a39:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  806a3c:	2d 00 10 00 00       	sub    eax,0x1000
  806a41:	48 98                	cdqe   
  806a43:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:758
    hp->alloc=0;    //合并
  806a47:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  806a4b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [rax+0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:760
    //向后合并
    chunk_header *p=hp->next;
  806a52:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  806a56:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  806a5a:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:761
    while(p!=NULL)
  806a5e:	eb 2e                	jmp    806a8e <sys_free+0x60>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:763
    {
        if(p->alloc==0)
  806a60:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  806a64:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
  806a67:	85 c0                	test   eax,eax
  806a69:	75 2c                	jne    806a97 <sys_free+0x69>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:765
        {
            hp->pgn+=p->pgn+1;//把区域合并
  806a6b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  806a6f:	8b 10                	mov    edx,DWORD PTR [rax]
  806a71:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  806a75:	8b 00                	mov    eax,DWORD PTR [rax]
  806a77:	83 c0 01             	add    eax,0x1
  806a7a:	01 c2                	add    edx,eax
  806a7c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  806a80:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:768
        }else
            break;
        p=p->next;
  806a82:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  806a86:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  806a8a:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:761
    while(p!=NULL)
  806a8e:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
  806a93:	75 cb                	jne    806a60 <sys_free+0x32>
  806a95:	eb 01                	jmp    806a98 <sys_free+0x6a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:767
            break;
  806a97:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:771
    }
    //向前合并
    p=hp->prev;
  806a98:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  806a9c:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  806aa0:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:772
    while(p!=NULL)
  806aa4:	eb 2e                	jmp    806ad4 <sys_free+0xa6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:774
    {
        if(p->alloc==0)
  806aa6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  806aaa:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
  806aad:	85 c0                	test   eax,eax
  806aaf:	75 2c                	jne    806add <sys_free+0xaf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:776
        {
            p->pgn+=hp->pgn+1;//把区域合并
  806ab1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  806ab5:	8b 10                	mov    edx,DWORD PTR [rax]
  806ab7:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  806abb:	8b 00                	mov    eax,DWORD PTR [rax]
  806abd:	83 c0 01             	add    eax,0x1
  806ac0:	01 c2                	add    edx,eax
  806ac2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  806ac6:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:779
        }else
            break;
        p=p->prev;
  806ac8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  806acc:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  806ad0:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:772
    while(p!=NULL)
  806ad4:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
  806ad9:	75 cb                	jne    806aa6 <sys_free+0x78>
  806adb:	eb 01                	jmp    806ade <sys_free+0xb0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:778
            break;
  806add:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:782
    }
    //合并完成
    return 0;
  806ade:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:783
}
  806ae3:	5d                   	pop    rbp
  806ae4:	c3                   	ret    

0000000000806ae5 <switch_to>:
switch_to():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:785

void switch_to(struct process *from, struct process *to) {
  806ae5:	f3 0f 1e fa          	endbr64 
  806ae9:	55                   	push   rbp
  806aea:	48 89 e5             	mov    rbp,rsp
  806aed:	53                   	push   rbx
  806aee:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
  806af2:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:786
    cur_proc=to-task;
  806af6:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  806afd:	00 00 00 
  806b00:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  806b03:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  806b07:	48 29 d0             	sub    rax,rdx
  806b0a:	48 c1 f8 02          	sar    rax,0x2
  806b0e:	48 89 c2             	mov    rdx,rax
  806b11:	48 b8 05 ec 4f c0 fe 	movabs rax,0x4fec04fec04fec05
  806b18:	04 ec 4f 
  806b1b:	48 0f af c2          	imul   rax,rdx
  806b1f:	89 c2                	mov    edx,eax
  806b21:	48 b8 cc 85 40 00 00 	movabs rax,0x4085cc
  806b28:	00 00 00 
  806b2b:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:787
    current=&task[cur_proc];
  806b2d:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  806b34:	00 00 00 
  806b37:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  806b3a:	48 b8 cc 85 40 00 00 	movabs rax,0x4085cc
  806b41:	00 00 00 
  806b44:	8b 00                	mov    eax,DWORD PTR [rax]
  806b46:	48 98                	cdqe   
  806b48:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  806b4f:	48 01 c2             	add    rdx,rax
  806b52:	48 b8 48 85 40 00 00 	movabs rax,0x408548
  806b59:	00 00 00 
  806b5c:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:788
    addr_t pml4n=((addr_t )to->pml4)&~KNL_BASE;//cr3需要物理地址
  806b5f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  806b63:	48 8b 80 c0 00 00 00 	mov    rax,QWORD PTR [rax+0xc0]
  806b6a:	48 89 c2             	mov    rdx,rax
  806b6d:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffff
  806b74:	7f 00 00 
  806b77:	48 21 d0             	and    rax,rdx
  806b7a:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:789
    asm volatile("mov %0,%%rax\n"
  806b7e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  806b82:	0f 22 d8             	mov    cr3,rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:791
                 "mov %%rax,%%cr3\n":"=m"(pml4n));
    asm volatile("mov %%rsp,%0\r\n"
  806b85:	4c 8b 4d e0          	mov    r9,QWORD PTR [rbp-0x20]
  806b89:	4c 8b 55 e0          	mov    r10,QWORD PTR [rbp-0x20]
  806b8d:	4c 8b 5d e0          	mov    r11,QWORD PTR [rbp-0x20]
  806b91:	48 8b 5d e0          	mov    rbx,QWORD PTR [rbp-0x20]
  806b95:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  806b99:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  806b9d:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  806ba1:	4c 8b 45 d8          	mov    r8,QWORD PTR [rbp-0x28]
  806ba5:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
  806ba9:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
  806bad:	49 89 a1 7c 02 00 00 	mov    QWORD PTR [r9+0x27c],rsp
  806bb4:	48 8d 05 24 00 00 00 	lea    rax,[rip+0x24]        # 806bdf <done>
  806bbb:	49 89 82 4c 02 00 00 	mov    QWORD PTR [r10+0x24c],rax
  806bc2:	41 8c a3 bc 02 00 00 	mov    WORD PTR [r11+0x2bc],fs
  806bc9:	8c ab c4 02 00 00    	mov    WORD PTR [rbx+0x2c4],gs
  806bcf:	48 8b a1 7c 02 00 00 	mov    rsp,QWORD PTR [rcx+0x27c]
  806bd6:	41 ff b0 4c 02 00 00 	push   QWORD PTR [r8+0x24c]
  806bdd:	eb 08                	jmp    806be7 <__switch_to>

0000000000806bdf <done>:
  806bdf:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:805
                 "nop":"=m"(from->regs.rsp),"=m"(from->regs.rip),
                 "=m"(from->regs.fs),"=m"(from->regs.gs):
                "m"(to->regs.fs),"m"(to->regs.gs),"m"(to->regs.rsp),"m"(to->regs.rip),
                "D"(from),"S"(to));

}
  806be0:	90                   	nop
  806be1:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
  806be5:	c9                   	leave  
  806be6:	c3                   	ret    

0000000000806be7 <__switch_to>:
__switch_to():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:806
void __switch_to(struct process *from, struct process *to) {
  806be7:	f3 0f 1e fa          	endbr64 
  806beb:	55                   	push   rbp
  806bec:	48 89 e5             	mov    rbp,rsp
  806bef:	53                   	push   rbx
  806bf0:	48 83 ec 18          	sub    rsp,0x18
  806bf4:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  806bf8:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:808
    set_tss(to->tss.rsp0,tss->rsp1,tss->rsp2,tss->ists[0],tss->ists[1],
            tss->ists[2],tss->ists[3],tss->ists[4],tss->ists[5],tss->ists[6]);
  806bfc:	48 b8 20 0e 81 00 00 	movabs rax,0x810e20
  806c03:	00 00 00 
  806c06:	48 8b 00             	mov    rax,QWORD PTR [rax]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:807
    set_tss(to->tss.rsp0,tss->rsp1,tss->rsp2,tss->ists[0],tss->ists[1],
  806c09:	4c 8b 50 54          	mov    r10,QWORD PTR [rax+0x54]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:808
            tss->ists[2],tss->ists[3],tss->ists[4],tss->ists[5],tss->ists[6]);
  806c0d:	48 b8 20 0e 81 00 00 	movabs rax,0x810e20
  806c14:	00 00 00 
  806c17:	48 8b 00             	mov    rax,QWORD PTR [rax]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:807
    set_tss(to->tss.rsp0,tss->rsp1,tss->rsp2,tss->ists[0],tss->ists[1],
  806c1a:	4c 8b 48 4c          	mov    r9,QWORD PTR [rax+0x4c]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:808
            tss->ists[2],tss->ists[3],tss->ists[4],tss->ists[5],tss->ists[6]);
  806c1e:	48 b8 20 0e 81 00 00 	movabs rax,0x810e20
  806c25:	00 00 00 
  806c28:	48 8b 00             	mov    rax,QWORD PTR [rax]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:807
    set_tss(to->tss.rsp0,tss->rsp1,tss->rsp2,tss->ists[0],tss->ists[1],
  806c2b:	4c 8b 40 44          	mov    r8,QWORD PTR [rax+0x44]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:808
            tss->ists[2],tss->ists[3],tss->ists[4],tss->ists[5],tss->ists[6]);
  806c2f:	48 b8 20 0e 81 00 00 	movabs rax,0x810e20
  806c36:	00 00 00 
  806c39:	48 8b 00             	mov    rax,QWORD PTR [rax]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:807
    set_tss(to->tss.rsp0,tss->rsp1,tss->rsp2,tss->ists[0],tss->ists[1],
  806c3c:	48 8b 78 3c          	mov    rdi,QWORD PTR [rax+0x3c]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:808
            tss->ists[2],tss->ists[3],tss->ists[4],tss->ists[5],tss->ists[6]);
  806c40:	48 b8 20 0e 81 00 00 	movabs rax,0x810e20
  806c47:	00 00 00 
  806c4a:	48 8b 00             	mov    rax,QWORD PTR [rax]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:807
    set_tss(to->tss.rsp0,tss->rsp1,tss->rsp2,tss->ists[0],tss->ists[1],
  806c4d:	48 8b 58 34          	mov    rbx,QWORD PTR [rax+0x34]
  806c51:	48 b8 20 0e 81 00 00 	movabs rax,0x810e20
  806c58:	00 00 00 
  806c5b:	48 8b 00             	mov    rax,QWORD PTR [rax]
  806c5e:	4c 8b 58 2c          	mov    r11,QWORD PTR [rax+0x2c]
  806c62:	48 b8 20 0e 81 00 00 	movabs rax,0x810e20
  806c69:	00 00 00 
  806c6c:	48 8b 00             	mov    rax,QWORD PTR [rax]
  806c6f:	48 8b 48 24          	mov    rcx,QWORD PTR [rax+0x24]
  806c73:	48 b8 20 0e 81 00 00 	movabs rax,0x810e20
  806c7a:	00 00 00 
  806c7d:	48 8b 00             	mov    rax,QWORD PTR [rax]
  806c80:	48 8b 50 14          	mov    rdx,QWORD PTR [rax+0x14]
  806c84:	48 b8 20 0e 81 00 00 	movabs rax,0x810e20
  806c8b:	00 00 00 
  806c8e:	48 8b 00             	mov    rax,QWORD PTR [rax]
  806c91:	48 8b 70 0c          	mov    rsi,QWORD PTR [rax+0xc]
  806c95:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  806c99:	48 8b 80 dc 01 00 00 	mov    rax,QWORD PTR [rax+0x1dc]
  806ca0:	41 52                	push   r10
  806ca2:	41 51                	push   r9
  806ca4:	41 50                	push   r8
  806ca6:	57                   	push   rdi
  806ca7:	49 89 d9             	mov    r9,rbx
  806caa:	4d 89 d8             	mov    r8,r11
  806cad:	48 89 c7             	mov    rdi,rax
  806cb0:	48 b8 f0 6c 80 00 00 	movabs rax,0x806cf0
  806cb7:	00 00 00 
  806cba:	ff d0                	call   rax
  806cbc:	48 83 c4 20          	add    rsp,0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:809
    asm volatile("mov %%fs,%0\r\n"
  806cc0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  806cc4:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  806cc8:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  806ccc:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  806cd0:	8c a0 bc 02 00 00    	mov    WORD PTR [rax+0x2bc],fs
  806cd6:	8c ae c4 02 00 00    	mov    WORD PTR [rsi+0x2c4],gs
  806cdc:	8e a2 bc 02 00 00    	mov    fs,WORD PTR [rdx+0x2bc]
  806ce2:	8e a9 c4 02 00 00    	mov    gs,WORD PTR [rcx+0x2c4]
  806ce8:	fb                   	sti    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:815
                 "mov %%gs,%1\r\n"
                 "mov %2,%%fs\r\n"
                 "mov %3,%%gs\r\n"
                 "sti":"=m"(to->regs.fs),"=m"(to->regs.gs):
                 "m"(from->regs.fs),"m"(from->regs.gs));
}
  806ce9:	90                   	nop
  806cea:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
  806cee:	c9                   	leave  
  806cef:	c3                   	ret    

0000000000806cf0 <set_tss>:
set_tss():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:817

void set_tss(u64 rsp0,u64 rsp1,u64 rsp2,u64 ist0,u64 ist1,u64 ist2,u64 ist3,u64 ist4,u64 ist5,u64 ist6){
  806cf0:	f3 0f 1e fa          	endbr64 
  806cf4:	55                   	push   rbp
  806cf5:	48 89 e5             	mov    rbp,rsp
  806cf8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  806cfc:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  806d00:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  806d04:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  806d08:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
  806d0c:	4c 89 4d d0          	mov    QWORD PTR [rbp-0x30],r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:818
    tss->rsp0=rsp0;
  806d10:	48 b8 20 0e 81 00 00 	movabs rax,0x810e20
  806d17:	00 00 00 
  806d1a:	48 8b 00             	mov    rax,QWORD PTR [rax]
  806d1d:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  806d21:	48 89 50 04          	mov    QWORD PTR [rax+0x4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:819
    tss->rsp1=rsp1;
  806d25:	48 b8 20 0e 81 00 00 	movabs rax,0x810e20
  806d2c:	00 00 00 
  806d2f:	48 8b 00             	mov    rax,QWORD PTR [rax]
  806d32:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  806d36:	48 89 50 0c          	mov    QWORD PTR [rax+0xc],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:820
    tss->rsp2=rsp2;
  806d3a:	48 b8 20 0e 81 00 00 	movabs rax,0x810e20
  806d41:	00 00 00 
  806d44:	48 8b 00             	mov    rax,QWORD PTR [rax]
  806d47:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  806d4b:	48 89 50 14          	mov    QWORD PTR [rax+0x14],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:821
    tss->ists[0]=ist0;
  806d4f:	48 b8 20 0e 81 00 00 	movabs rax,0x810e20
  806d56:	00 00 00 
  806d59:	48 8b 00             	mov    rax,QWORD PTR [rax]
  806d5c:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  806d60:	48 89 50 24          	mov    QWORD PTR [rax+0x24],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:822
    tss->ists[1]=ist1;
  806d64:	48 b8 20 0e 81 00 00 	movabs rax,0x810e20
  806d6b:	00 00 00 
  806d6e:	48 8b 00             	mov    rax,QWORD PTR [rax]
  806d71:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  806d75:	48 89 50 2c          	mov    QWORD PTR [rax+0x2c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:823
    tss->ists[2]=ist2;
  806d79:	48 b8 20 0e 81 00 00 	movabs rax,0x810e20
  806d80:	00 00 00 
  806d83:	48 8b 00             	mov    rax,QWORD PTR [rax]
  806d86:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  806d8a:	48 89 50 34          	mov    QWORD PTR [rax+0x34],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:824
    tss->ists[3]=ist3;
  806d8e:	48 b8 20 0e 81 00 00 	movabs rax,0x810e20
  806d95:	00 00 00 
  806d98:	48 8b 00             	mov    rax,QWORD PTR [rax]
  806d9b:	48 8b 55 10          	mov    rdx,QWORD PTR [rbp+0x10]
  806d9f:	48 89 50 3c          	mov    QWORD PTR [rax+0x3c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:825
    tss->ists[4]=ist4;
  806da3:	48 b8 20 0e 81 00 00 	movabs rax,0x810e20
  806daa:	00 00 00 
  806dad:	48 8b 00             	mov    rax,QWORD PTR [rax]
  806db0:	48 8b 55 18          	mov    rdx,QWORD PTR [rbp+0x18]
  806db4:	48 89 50 44          	mov    QWORD PTR [rax+0x44],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:826
    tss->ists[5]=ist5;
  806db8:	48 b8 20 0e 81 00 00 	movabs rax,0x810e20
  806dbf:	00 00 00 
  806dc2:	48 8b 00             	mov    rax,QWORD PTR [rax]
  806dc5:	48 8b 55 20          	mov    rdx,QWORD PTR [rbp+0x20]
  806dc9:	48 89 50 4c          	mov    QWORD PTR [rax+0x4c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:827
    tss->ists[6]=ist6;
  806dcd:	48 b8 20 0e 81 00 00 	movabs rax,0x810e20
  806dd4:	00 00 00 
  806dd7:	48 8b 00             	mov    rax,QWORD PTR [rax]
  806dda:	48 8b 55 28          	mov    rdx,QWORD PTR [rbp+0x28]
  806dde:	48 89 50 54          	mov    QWORD PTR [rax+0x54],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:828
}
  806de2:	90                   	nop
  806de3:	5d                   	pop    rbp
  806de4:	c3                   	ret    

0000000000806de5 <fork_child_ret>:
fork_child_ret():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:830

int fork_child_ret(){
  806de5:	f3 0f 1e fa          	endbr64 
  806de9:	55                   	push   rbp
  806dea:	48 89 e5             	mov    rbp,rsp
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:831
    return 0;
  806ded:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:833

}
  806df2:	5d                   	pop    rbp
  806df3:	c3                   	ret    

0000000000806df4 <sys_fork>:
sys_fork():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:835

int sys_fork(void){
  806df4:	f3 0f 1e fa          	endbr64 
  806df8:	55                   	push   rbp
  806df9:	48 89 e5             	mov    rbp,rsp
  806dfc:	53                   	push   rbx
  806dfd:	48 81 ec a8 00 00 00 	sub    rsp,0xa8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:836
    int pid=req_proc();
  806e04:	b8 00 00 00 00       	mov    eax,0x0
  806e09:	48 ba 9d 58 80 00 00 	movabs rdx,0x80589d
  806e10:	00 00 00 
  806e13:	ff d2                	call   rdx
  806e15:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:837
    if(pid==-1)return -1;
  806e18:	83 7d cc ff          	cmp    DWORD PTR [rbp-0x34],0xffffffff
  806e1c:	75 0a                	jne    806e28 <sys_fork+0x34>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:837 (discriminator 1)
  806e1e:	b8 ff ff ff ff       	mov    eax,0xffffffff
  806e23:	e9 29 0d 00 00       	jmp    807b51 <sys_fork+0xd5d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:838
    task[pid].regs=current->regs;
  806e28:	48 b8 48 85 40 00 00 	movabs rax,0x408548
  806e2f:	00 00 00 
  806e32:	48 8b 00             	mov    rax,QWORD PTR [rax]
  806e35:	48 ba 40 85 40 00 00 	movabs rdx,0x408540
  806e3c:	00 00 00 
  806e3f:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
  806e42:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
  806e45:	48 63 d2             	movsxd rdx,edx
  806e48:	48 69 d2 34 03 00 00 	imul   rdx,rdx,0x334
  806e4f:	48 01 ca             	add    rdx,rcx
  806e52:	48 8b 88 44 02 00 00 	mov    rcx,QWORD PTR [rax+0x244]
  806e59:	48 8b 98 4c 02 00 00 	mov    rbx,QWORD PTR [rax+0x24c]
  806e60:	48 89 8a 44 02 00 00 	mov    QWORD PTR [rdx+0x244],rcx
  806e67:	48 89 9a 4c 02 00 00 	mov    QWORD PTR [rdx+0x24c],rbx
  806e6e:	48 8b 88 54 02 00 00 	mov    rcx,QWORD PTR [rax+0x254]
  806e75:	48 8b 98 5c 02 00 00 	mov    rbx,QWORD PTR [rax+0x25c]
  806e7c:	48 89 8a 54 02 00 00 	mov    QWORD PTR [rdx+0x254],rcx
  806e83:	48 89 9a 5c 02 00 00 	mov    QWORD PTR [rdx+0x25c],rbx
  806e8a:	48 8b 88 64 02 00 00 	mov    rcx,QWORD PTR [rax+0x264]
  806e91:	48 8b 98 6c 02 00 00 	mov    rbx,QWORD PTR [rax+0x26c]
  806e98:	48 89 8a 64 02 00 00 	mov    QWORD PTR [rdx+0x264],rcx
  806e9f:	48 89 9a 6c 02 00 00 	mov    QWORD PTR [rdx+0x26c],rbx
  806ea6:	48 8b 88 74 02 00 00 	mov    rcx,QWORD PTR [rax+0x274]
  806ead:	48 8b 98 7c 02 00 00 	mov    rbx,QWORD PTR [rax+0x27c]
  806eb4:	48 89 8a 74 02 00 00 	mov    QWORD PTR [rdx+0x274],rcx
  806ebb:	48 89 9a 7c 02 00 00 	mov    QWORD PTR [rdx+0x27c],rbx
  806ec2:	48 8b 88 84 02 00 00 	mov    rcx,QWORD PTR [rax+0x284]
  806ec9:	48 8b 98 8c 02 00 00 	mov    rbx,QWORD PTR [rax+0x28c]
  806ed0:	48 89 8a 84 02 00 00 	mov    QWORD PTR [rdx+0x284],rcx
  806ed7:	48 89 9a 8c 02 00 00 	mov    QWORD PTR [rdx+0x28c],rbx
  806ede:	48 8b 88 94 02 00 00 	mov    rcx,QWORD PTR [rax+0x294]
  806ee5:	48 8b 98 9c 02 00 00 	mov    rbx,QWORD PTR [rax+0x29c]
  806eec:	48 89 8a 94 02 00 00 	mov    QWORD PTR [rdx+0x294],rcx
  806ef3:	48 89 9a 9c 02 00 00 	mov    QWORD PTR [rdx+0x29c],rbx
  806efa:	48 8b 88 a4 02 00 00 	mov    rcx,QWORD PTR [rax+0x2a4]
  806f01:	48 8b 98 ac 02 00 00 	mov    rbx,QWORD PTR [rax+0x2ac]
  806f08:	48 89 8a a4 02 00 00 	mov    QWORD PTR [rdx+0x2a4],rcx
  806f0f:	48 89 9a ac 02 00 00 	mov    QWORD PTR [rdx+0x2ac],rbx
  806f16:	48 8b 88 b4 02 00 00 	mov    rcx,QWORD PTR [rax+0x2b4]
  806f1d:	48 8b 98 bc 02 00 00 	mov    rbx,QWORD PTR [rax+0x2bc]
  806f24:	48 89 8a b4 02 00 00 	mov    QWORD PTR [rdx+0x2b4],rcx
  806f2b:	48 89 9a bc 02 00 00 	mov    QWORD PTR [rdx+0x2bc],rbx
  806f32:	48 8b 88 c4 02 00 00 	mov    rcx,QWORD PTR [rax+0x2c4]
  806f39:	48 8b 98 cc 02 00 00 	mov    rbx,QWORD PTR [rax+0x2cc]
  806f40:	48 89 8a c4 02 00 00 	mov    QWORD PTR [rdx+0x2c4],rcx
  806f47:	48 89 9a cc 02 00 00 	mov    QWORD PTR [rdx+0x2cc],rbx
  806f4e:	48 8b 88 d4 02 00 00 	mov    rcx,QWORD PTR [rax+0x2d4]
  806f55:	48 8b 98 dc 02 00 00 	mov    rbx,QWORD PTR [rax+0x2dc]
  806f5c:	48 89 8a d4 02 00 00 	mov    QWORD PTR [rdx+0x2d4],rcx
  806f63:	48 89 9a dc 02 00 00 	mov    QWORD PTR [rdx+0x2dc],rbx
  806f6a:	48 8b 88 e4 02 00 00 	mov    rcx,QWORD PTR [rax+0x2e4]
  806f71:	48 8b 98 ec 02 00 00 	mov    rbx,QWORD PTR [rax+0x2ec]
  806f78:	48 89 8a e4 02 00 00 	mov    QWORD PTR [rdx+0x2e4],rcx
  806f7f:	48 89 9a ec 02 00 00 	mov    QWORD PTR [rdx+0x2ec],rbx
  806f86:	48 8b 88 f4 02 00 00 	mov    rcx,QWORD PTR [rax+0x2f4]
  806f8d:	48 8b 98 fc 02 00 00 	mov    rbx,QWORD PTR [rax+0x2fc]
  806f94:	48 89 8a f4 02 00 00 	mov    QWORD PTR [rdx+0x2f4],rcx
  806f9b:	48 89 9a fc 02 00 00 	mov    QWORD PTR [rdx+0x2fc],rbx
  806fa2:	48 8b 88 04 03 00 00 	mov    rcx,QWORD PTR [rax+0x304]
  806fa9:	48 8b 98 0c 03 00 00 	mov    rbx,QWORD PTR [rax+0x30c]
  806fb0:	48 89 8a 04 03 00 00 	mov    QWORD PTR [rdx+0x304],rcx
  806fb7:	48 89 9a 0c 03 00 00 	mov    QWORD PTR [rdx+0x30c],rbx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:840
    //使得子程序处于刚调用完系统调用的状态
    task[pid].regs.rip=ret_normal_proc;
  806fbe:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  806fc5:	00 00 00 
  806fc8:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  806fcb:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
  806fce:	48 98                	cdqe   
  806fd0:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  806fd7:	48 01 d0             	add    rax,rdx
  806fda:	48 ba 11 0d 81 00 00 	movabs rdx,0x810d11
  806fe1:	00 00 00 
  806fe4:	48 89 90 4c 02 00 00 	mov    QWORD PTR [rax+0x24c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:841
    task[pid].regs.rsp-=sizeof(stack_store_regs);
  806feb:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  806ff2:	00 00 00 
  806ff5:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  806ff8:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
  806ffb:	48 98                	cdqe   
  806ffd:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  807004:	48 01 d0             	add    rax,rdx
  807007:	48 8b 80 7c 02 00 00 	mov    rax,QWORD PTR [rax+0x27c]
  80700e:	48 8d 90 58 ff ff ff 	lea    rdx,[rax-0xa8]
  807015:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  80701c:	00 00 00 
  80701f:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  807022:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
  807025:	48 98                	cdqe   
  807027:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  80702e:	48 01 c8             	add    rax,rcx
  807031:	48 89 90 7c 02 00 00 	mov    QWORD PTR [rax+0x27c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:842
    task[pid].sid=current->sid;
  807038:	48 b8 48 85 40 00 00 	movabs rax,0x408548
  80703f:	00 00 00 
  807042:	48 8b 00             	mov    rax,QWORD PTR [rax]
  807045:	48 ba 40 85 40 00 00 	movabs rdx,0x408540
  80704c:	00 00 00 
  80704f:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
  807052:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
  807055:	48 63 d2             	movsxd rdx,edx
  807058:	48 69 d2 34 03 00 00 	imul   rdx,rdx,0x334
  80705f:	48 01 ca             	add    rdx,rcx
  807062:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
  807065:	89 42 08             	mov    DWORD PTR [rdx+0x8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:843
    task[pid].gpid=current->gpid;
  807068:	48 b8 48 85 40 00 00 	movabs rax,0x408548
  80706f:	00 00 00 
  807072:	48 8b 00             	mov    rax,QWORD PTR [rax]
  807075:	48 ba 40 85 40 00 00 	movabs rdx,0x408540
  80707c:	00 00 00 
  80707f:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
  807082:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
  807085:	48 63 d2             	movsxd rdx,edx
  807088:	48 69 d2 34 03 00 00 	imul   rdx,rdx,0x334
  80708f:	48 01 ca             	add    rdx,rcx
  807092:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
  807095:	89 42 04             	mov    DWORD PTR [rdx+0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:844
    stack_store_regs *r=task[pid].regs.rsp;
  807098:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  80709f:	00 00 00 
  8070a2:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  8070a5:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
  8070a8:	48 98                	cdqe   
  8070aa:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  8070b1:	48 01 d0             	add    rax,rdx
  8070b4:	48 8b 80 7c 02 00 00 	mov    rax,QWORD PTR [rax+0x27c]
  8070bb:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:845
    r->rax=0;
  8070bf:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  8070c3:	48 c7 40 78 00 00 00 	mov    QWORD PTR [rax+0x78],0x0
  8070ca:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:846
    r->ds=DS_USER;
  8070cb:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  8070cf:	48 c7 00 28 00 00 00 	mov    QWORD PTR [rax],0x28
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:847
    r->ss=DS_USER;
  8070d6:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  8070da:	48 c7 80 a0 00 00 00 	mov    QWORD PTR [rax+0xa0],0x28
  8070e1:	28 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:848
    r->es=DS_USER;
  8070e5:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  8070e9:	48 c7 40 08 28 00 00 	mov    QWORD PTR [rax+0x8],0x28
  8070f0:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:849
    r->rax=task[pid].regs.rax;
  8070f1:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  8070f8:	00 00 00 
  8070fb:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  8070fe:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
  807101:	48 98                	cdqe   
  807103:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  80710a:	48 01 d0             	add    rax,rdx
  80710d:	48 8b 80 5c 02 00 00 	mov    rax,QWORD PTR [rax+0x25c]
  807114:	48 89 c2             	mov    rdx,rax
  807117:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  80711b:	48 89 50 78          	mov    QWORD PTR [rax+0x78],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:850
    r->rbx=task[pid].regs.rbx;
  80711f:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  807126:	00 00 00 
  807129:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  80712c:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
  80712f:	48 98                	cdqe   
  807131:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  807138:	48 01 d0             	add    rax,rdx
  80713b:	48 8b 80 74 02 00 00 	mov    rax,QWORD PTR [rax+0x274]
  807142:	48 89 c2             	mov    rdx,rax
  807145:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  807149:	48 89 50 70          	mov    QWORD PTR [rax+0x70],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:851
    r->rcx=task[pid].regs.rcx;
  80714d:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  807154:	00 00 00 
  807157:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  80715a:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
  80715d:	48 98                	cdqe   
  80715f:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  807166:	48 01 d0             	add    rax,rdx
  807169:	48 8b 80 64 02 00 00 	mov    rax,QWORD PTR [rax+0x264]
  807170:	48 89 c2             	mov    rdx,rax
  807173:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  807177:	48 89 50 68          	mov    QWORD PTR [rax+0x68],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:852
    r->rdx=task[pid].regs.rdx;
  80717b:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  807182:	00 00 00 
  807185:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  807188:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
  80718b:	48 98                	cdqe   
  80718d:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  807194:	48 01 d0             	add    rax,rdx
  807197:	48 8b 80 6c 02 00 00 	mov    rax,QWORD PTR [rax+0x26c]
  80719e:	48 89 c2             	mov    rdx,rax
  8071a1:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  8071a5:	48 89 50 60          	mov    QWORD PTR [rax+0x60],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:853
    r->rsi=task[pid].regs.rsi;
  8071a9:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  8071b0:	00 00 00 
  8071b3:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  8071b6:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
  8071b9:	48 98                	cdqe   
  8071bb:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  8071c2:	48 01 d0             	add    rax,rdx
  8071c5:	48 8b 80 8c 02 00 00 	mov    rax,QWORD PTR [rax+0x28c]
  8071cc:	48 89 c2             	mov    rdx,rax
  8071cf:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  8071d3:	48 89 50 50          	mov    QWORD PTR [rax+0x50],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:854
    r->rdi=task[pid].regs.rdi;
  8071d7:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  8071de:	00 00 00 
  8071e1:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  8071e4:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
  8071e7:	48 98                	cdqe   
  8071e9:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  8071f0:	48 01 d0             	add    rax,rdx
  8071f3:	48 8b 80 94 02 00 00 	mov    rax,QWORD PTR [rax+0x294]
  8071fa:	48 89 c2             	mov    rdx,rax
  8071fd:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  807201:	48 89 50 58          	mov    QWORD PTR [rax+0x58],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:856

    r->r8 =task[pid].regs.r8 ;
  807205:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  80720c:	00 00 00 
  80720f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  807212:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
  807215:	48 98                	cdqe   
  807217:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  80721e:	48 01 d0             	add    rax,rdx
  807221:	48 8b 80 cc 02 00 00 	mov    rax,QWORD PTR [rax+0x2cc]
  807228:	48 89 c2             	mov    rdx,rax
  80722b:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  80722f:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:857
    r->r9 =task[pid].regs.r9 ;
  807233:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  80723a:	00 00 00 
  80723d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  807240:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
  807243:	48 98                	cdqe   
  807245:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  80724c:	48 01 d0             	add    rax,rdx
  80724f:	48 8b 80 d4 02 00 00 	mov    rax,QWORD PTR [rax+0x2d4]
  807256:	48 89 c2             	mov    rdx,rax
  807259:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  80725d:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:858
    r->r10=task[pid].regs.r10;
  807261:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  807268:	00 00 00 
  80726b:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  80726e:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
  807271:	48 98                	cdqe   
  807273:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  80727a:	48 01 d0             	add    rax,rdx
  80727d:	48 8b 80 dc 02 00 00 	mov    rax,QWORD PTR [rax+0x2dc]
  807284:	48 89 c2             	mov    rdx,rax
  807287:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  80728b:	48 89 50 38          	mov    QWORD PTR [rax+0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:859
    r->r11=task[pid].regs.r11;
  80728f:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  807296:	00 00 00 
  807299:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  80729c:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
  80729f:	48 98                	cdqe   
  8072a1:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  8072a8:	48 01 d0             	add    rax,rdx
  8072ab:	48 8b 80 e4 02 00 00 	mov    rax,QWORD PTR [rax+0x2e4]
  8072b2:	48 89 c2             	mov    rdx,rax
  8072b5:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  8072b9:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:860
    r->r12=task[pid].regs.r12;
  8072bd:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  8072c4:	00 00 00 
  8072c7:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  8072ca:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
  8072cd:	48 98                	cdqe   
  8072cf:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  8072d6:	48 01 d0             	add    rax,rdx
  8072d9:	48 8b 80 ec 02 00 00 	mov    rax,QWORD PTR [rax+0x2ec]
  8072e0:	48 89 c2             	mov    rdx,rax
  8072e3:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  8072e7:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:861
    r->r13=task[pid].regs.r13;
  8072eb:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  8072f2:	00 00 00 
  8072f5:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  8072f8:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
  8072fb:	48 98                	cdqe   
  8072fd:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  807304:	48 01 d0             	add    rax,rdx
  807307:	48 8b 80 f4 02 00 00 	mov    rax,QWORD PTR [rax+0x2f4]
  80730e:	48 89 c2             	mov    rdx,rax
  807311:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  807315:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:862
    r->r14=task[pid].regs.r14;
  807319:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  807320:	00 00 00 
  807323:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  807326:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
  807329:	48 98                	cdqe   
  80732b:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  807332:	48 01 d0             	add    rax,rdx
  807335:	48 8b 80 fc 02 00 00 	mov    rax,QWORD PTR [rax+0x2fc]
  80733c:	48 89 c2             	mov    rdx,rax
  80733f:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  807343:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:863
    r->r15=task[pid].regs.r15;
  807347:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  80734e:	00 00 00 
  807351:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  807354:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
  807357:	48 98                	cdqe   
  807359:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  807360:	48 01 d0             	add    rax,rdx
  807363:	48 8b 80 04 03 00 00 	mov    rax,QWORD PTR [rax+0x304]
  80736a:	48 89 c2             	mov    rdx,rax
  80736d:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  807371:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:865

    asm volatile("mov %%r10,%0"::"m"(r->rip));
  807375:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  807379:	4c 89 90 80 00 00 00 	mov    QWORD PTR [rax+0x80],r10
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:867

    task[pid].tss=current->tss;
  807380:	48 b8 48 85 40 00 00 	movabs rax,0x408548
  807387:	00 00 00 
  80738a:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80738d:	48 ba 40 85 40 00 00 	movabs rdx,0x408540
  807394:	00 00 00 
  807397:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
  80739a:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
  80739d:	48 63 d2             	movsxd rdx,edx
  8073a0:	48 69 d2 34 03 00 00 	imul   rdx,rdx,0x334
  8073a7:	48 01 ca             	add    rdx,rcx
  8073aa:	48 8b 88 d8 01 00 00 	mov    rcx,QWORD PTR [rax+0x1d8]
  8073b1:	48 8b 98 e0 01 00 00 	mov    rbx,QWORD PTR [rax+0x1e0]
  8073b8:	48 89 8a d8 01 00 00 	mov    QWORD PTR [rdx+0x1d8],rcx
  8073bf:	48 89 9a e0 01 00 00 	mov    QWORD PTR [rdx+0x1e0],rbx
  8073c6:	48 8b 88 e8 01 00 00 	mov    rcx,QWORD PTR [rax+0x1e8]
  8073cd:	48 8b 98 f0 01 00 00 	mov    rbx,QWORD PTR [rax+0x1f0]
  8073d4:	48 89 8a e8 01 00 00 	mov    QWORD PTR [rdx+0x1e8],rcx
  8073db:	48 89 9a f0 01 00 00 	mov    QWORD PTR [rdx+0x1f0],rbx
  8073e2:	48 8b 88 f8 01 00 00 	mov    rcx,QWORD PTR [rax+0x1f8]
  8073e9:	48 8b 98 00 02 00 00 	mov    rbx,QWORD PTR [rax+0x200]
  8073f0:	48 89 8a f8 01 00 00 	mov    QWORD PTR [rdx+0x1f8],rcx
  8073f7:	48 89 9a 00 02 00 00 	mov    QWORD PTR [rdx+0x200],rbx
  8073fe:	48 8b 88 08 02 00 00 	mov    rcx,QWORD PTR [rax+0x208]
  807405:	48 8b 98 10 02 00 00 	mov    rbx,QWORD PTR [rax+0x210]
  80740c:	48 89 8a 08 02 00 00 	mov    QWORD PTR [rdx+0x208],rcx
  807413:	48 89 9a 10 02 00 00 	mov    QWORD PTR [rdx+0x210],rbx
  80741a:	48 8b 88 18 02 00 00 	mov    rcx,QWORD PTR [rax+0x218]
  807421:	48 8b 98 20 02 00 00 	mov    rbx,QWORD PTR [rax+0x220]
  807428:	48 89 8a 18 02 00 00 	mov    QWORD PTR [rdx+0x218],rcx
  80742f:	48 89 9a 20 02 00 00 	mov    QWORD PTR [rdx+0x220],rbx
  807436:	48 8b 88 28 02 00 00 	mov    rcx,QWORD PTR [rax+0x228]
  80743d:	48 8b 98 30 02 00 00 	mov    rbx,QWORD PTR [rax+0x230]
  807444:	48 89 8a 28 02 00 00 	mov    QWORD PTR [rdx+0x228],rcx
  80744b:	48 89 9a 30 02 00 00 	mov    QWORD PTR [rdx+0x230],rbx
  807452:	48 8b 88 38 02 00 00 	mov    rcx,QWORD PTR [rax+0x238]
  807459:	48 89 8a 38 02 00 00 	mov    QWORD PTR [rdx+0x238],rcx
  807460:	8b 80 40 02 00 00    	mov    eax,DWORD PTR [rax+0x240]
  807466:	89 82 40 02 00 00    	mov    DWORD PTR [rdx+0x240],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:868
    task[pid].stat=TASK_READY;
  80746c:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  807473:	00 00 00 
  807476:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  807479:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
  80747c:	48 98                	cdqe   
  80747e:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  807485:	48 01 d0             	add    rax,rdx
  807488:	c7 40 18 02 00 00 00 	mov    DWORD PTR [rax+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:869
    task[pid].parent_pid=cur_proc;
  80748f:	48 b8 cc 85 40 00 00 	movabs rax,0x4085cc
  807496:	00 00 00 
  807499:	8b 10                	mov    edx,DWORD PTR [rax]
  80749b:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  8074a2:	00 00 00 
  8074a5:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  8074a8:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
  8074ab:	48 98                	cdqe   
  8074ad:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  8074b4:	48 01 c8             	add    rax,rcx
  8074b7:	89 90 9c 00 00 00    	mov    DWORD PTR [rax+0x9c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:871
    //设置父子关系以及初始化子进程的的list节点
    list_init(&task[pid].node);
  8074bd:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  8074c4:	00 00 00 
  8074c7:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  8074ca:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
  8074cd:	48 98                	cdqe   
  8074cf:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  8074d6:	48 01 d0             	add    rax,rdx
  8074d9:	48 05 14 03 00 00    	add    rax,0x314
  8074df:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
  8074e6:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
  8074ed:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
  8074f4:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
  8074fb:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
  807502:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
  807503:	90                   	nop
sys_fork():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:872
    task[pid].child_procs=NULL;
  807504:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  80750b:	00 00 00 
  80750e:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  807511:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
  807514:	48 98                	cdqe   
  807516:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  80751d:	48 01 d0             	add    rax,rdx
  807520:	48 c7 80 2c 03 00 00 	mov    QWORD PTR [rax+0x32c],0x0
  807527:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:873
    task[pid].node.data=&task[pid];
  80752b:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  807532:	00 00 00 
  807535:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  807538:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
  80753b:	48 98                	cdqe   
  80753d:	48 69 d0 34 03 00 00 	imul   rdx,rax,0x334
  807544:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  80754b:	00 00 00 
  80754e:	48 8b 30             	mov    rsi,QWORD PTR [rax]
  807551:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
  807554:	48 98                	cdqe   
  807556:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  80755d:	48 01 f0             	add    rax,rsi
  807560:	48 01 ca             	add    rdx,rcx
  807563:	48 89 90 1c 03 00 00 	mov    QWORD PTR [rax+0x31c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:874
    list_add(current->child_procs,&task[pid].node);
  80756a:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  807571:	00 00 00 
  807574:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  807577:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
  80757a:	48 98                	cdqe   
  80757c:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  807583:	48 01 d0             	add    rax,rdx
  807586:	48 8d 90 14 03 00 00 	lea    rdx,[rax+0x314]
  80758d:	48 b8 48 85 40 00 00 	movabs rax,0x408548
  807594:	00 00 00 
  807597:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80759a:	48 8b 80 2c 03 00 00 	mov    rax,QWORD PTR [rax+0x32c]
  8075a1:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  8075a5:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:33
    if(entry->next==NULL)
  8075a9:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  8075ad:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  8075b1:	48 85 c0             	test   rax,rax
  8075b4:	75 6d                	jne    807623 <sys_fork+0x82f>
  8075b6:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  8075ba:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
  8075be:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  8075c2:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
  8075c9:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  8075cd:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
  8075d1:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  8075d8:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
  8075dc:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  8075e3:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
  8075e7:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
  8075ea:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  8075f1:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  8075f5:	48 85 c0             	test   rax,rax
  8075f8:	74 15                	je     80760f <sys_fork+0x81b>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
  8075fa:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  807601:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  807605:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
  80760c:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:29
    entry->next = new;
  80760f:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  807613:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
  80761a:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
  80761e:	e9 d9 00 00 00       	jmp    8076fc <sys_fork+0x908>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:36
        struct List* p=entry;
  807623:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  807627:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
  80762e:	eb 2e                	jmp    80765e <sys_fork+0x86a>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:38
            if(p->data==new->data)
  807630:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  807637:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
  80763b:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  80763f:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  807643:	48 39 c2             	cmp    rdx,rax
  807646:	0f 84 af 00 00 00    	je     8076fb <sys_fork+0x907>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
  80764c:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  807653:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  807657:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
  80765e:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  807665:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  807669:	48 85 c0             	test   rax,rax
  80766c:	74 14                	je     807682 <sys_fork+0x88e>
  80766e:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  807675:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  807679:	48 39 85 70 ff ff ff 	cmp    QWORD PTR [rbp-0x90],rax
  807680:	75 ae                	jne    807630 <sys_fork+0x83c>
  807682:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  807689:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
  807690:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  807694:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
  80769b:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  8076a2:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
  8076a6:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
  8076ad:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
  8076b1:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
  8076b8:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  8076bf:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
  8076c2:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
  8076c9:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  8076cd:	48 85 c0             	test   rax,rax
  8076d0:	74 15                	je     8076e7 <sys_fork+0x8f3>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
  8076d2:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
  8076d9:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  8076dd:	48 8b 95 60 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  8076e4:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:29
    entry->next = new;
  8076e7:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  8076ee:	48 8b 95 60 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa0]
  8076f5:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
  8076f9:	eb 01                	jmp    8076fc <sys_fork+0x908>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:39
                return;
  8076fb:	90                   	nop
sys_fork():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:876
    //复制打开文件
    memcpy(task[pid].openf,current->openf,sizeof(struct file*)*MAX_PROC_OPENF);
  8076fc:	48 b8 48 85 40 00 00 	movabs rax,0x408548
  807703:	00 00 00 
  807706:	48 8b 00             	mov    rax,QWORD PTR [rax]
  807709:	48 8d 88 d8 00 00 00 	lea    rcx,[rax+0xd8]
  807710:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  807717:	00 00 00 
  80771a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  80771d:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
  807720:	48 98                	cdqe   
  807722:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  807729:	48 01 d0             	add    rax,rdx
  80772c:	48 05 d8 00 00 00    	add    rax,0xd8
  807732:	ba 00 01 00 00       	mov    edx,0x100
  807737:	48 89 ce             	mov    rsi,rcx
  80773a:	48 89 c7             	mov    rdi,rax
  80773d:	48 b8 72 03 81 00 00 	movabs rax,0x810372
  807744:	00 00 00 
  807747:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:877
    task[pid].utime=0;
  807749:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  807750:	00 00 00 
  807753:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  807756:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
  807759:	48 98                	cdqe   
  80775b:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  807762:	48 01 d0             	add    rax,rdx
  807765:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [rax+0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:878
    task[pid].mem_struct=current->mem_struct;
  80776c:	48 b8 48 85 40 00 00 	movabs rax,0x408548
  807773:	00 00 00 
  807776:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  807779:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  807780:	00 00 00 
  807783:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  807786:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
  807789:	48 98                	cdqe   
  80778b:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  807792:	48 8d 34 02          	lea    rsi,[rdx+rax*1]
  807796:	48 8b 41 28          	mov    rax,QWORD PTR [rcx+0x28]
  80779a:	48 8b 51 30          	mov    rdx,QWORD PTR [rcx+0x30]
  80779e:	48 89 46 28          	mov    QWORD PTR [rsi+0x28],rax
  8077a2:	48 89 56 30          	mov    QWORD PTR [rsi+0x30],rdx
  8077a6:	48 8b 41 38          	mov    rax,QWORD PTR [rcx+0x38]
  8077aa:	48 8b 51 40          	mov    rdx,QWORD PTR [rcx+0x40]
  8077ae:	48 89 46 38          	mov    QWORD PTR [rsi+0x38],rax
  8077b2:	48 89 56 40          	mov    QWORD PTR [rsi+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:883
    //根据是子进程还是父进程设置返回值的不同

    //TODO:设置新堆栈
    //复制父进程的内存映射到子进程，然后重新映射并复制子进程的堆栈和数据段
    copy_mmap(current,&task[pid]);
  8077b6:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  8077bd:	00 00 00 
  8077c0:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  8077c3:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
  8077c6:	48 98                	cdqe   
  8077c8:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  8077cf:	48 01 c2             	add    rdx,rax
  8077d2:	48 b8 48 85 40 00 00 	movabs rax,0x408548
  8077d9:	00 00 00 
  8077dc:	48 8b 00             	mov    rax,QWORD PTR [rax]
  8077df:	48 89 d6             	mov    rsi,rdx
  8077e2:	48 89 c7             	mov    rdi,rax
  8077e5:	48 b8 4b 7e 80 00 00 	movabs rax,0x807e4b
  8077ec:	00 00 00 
  8077ef:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:887
    //复制完毕，开始更改堆栈
    //栈
    //首先获取物理内存，然后临时映射到一个地方，然后拷贝数据，再解除映射，再映射到目标进程的页表。
    addr_t stk=task[pid].mem_struct.stack_top-PAGE_4K_SIZE;
  8077f1:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  8077f8:	00 00 00 
  8077fb:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  8077fe:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
  807801:	48 98                	cdqe   
  807803:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  80780a:	48 01 d0             	add    rax,rdx
  80780d:	8b 40 34             	mov    eax,DWORD PTR [rax+0x34]
  807810:	2d 00 10 00 00       	sub    eax,0x1000
  807815:	48 98                	cdqe   
  807817:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:888
    addr_t tmpla=KNL_BASE+0x80000000;
  80781b:	48 b8 00 00 00 80 00 	movabs rax,0xffff800080000000
  807822:	80 ff ff 
  807825:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:889
    for(;stk>=task[pid].mem_struct.stack_bottom;stk-=PAGE_4K_SIZE){
  807829:	e9 b1 00 00 00       	jmp    8078df <sys_fork+0xaeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:890 (discriminator 2)
        addr_t new_stkpg= pmalloc();
  80782e:	b8 00 00 00 00       	mov    eax,0x0
  807833:	48 ba 2b 22 80 00 00 	movabs rdx,0x80222b
  80783a:	00 00 00 
  80783d:	ff d2                	call   rdx
  80783f:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:891 (discriminator 2)
        smmap(new_stkpg,tmpla,PAGE_PRESENT|PAGE_RWX,current->pml4);
  807843:	48 b8 48 85 40 00 00 	movabs rax,0x408548
  80784a:	00 00 00 
  80784d:	48 8b 00             	mov    rax,QWORD PTR [rax]
  807850:	48 8b 90 c0 00 00 00 	mov    rdx,QWORD PTR [rax+0xc0]
  807857:	48 8b 75 b8          	mov    rsi,QWORD PTR [rbp-0x48]
  80785b:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  80785f:	48 89 d1             	mov    rcx,rdx
  807862:	ba 03 00 00 00       	mov    edx,0x3
  807867:	48 89 c7             	mov    rdi,rax
  80786a:	48 b8 1b 15 80 00 00 	movabs rax,0x80151b
  807871:	00 00 00 
  807874:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:892 (discriminator 2)
        memcpy(tmpla,stk,PAGE_4K_SIZE);//把当前进程的栈空间复制到新栈里面
  807876:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
  80787a:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  80787e:	ba 00 10 00 00       	mov    edx,0x1000
  807883:	48 89 ce             	mov    rsi,rcx
  807886:	48 89 c7             	mov    rdi,rax
  807889:	48 b8 72 03 81 00 00 	movabs rax,0x810372
  807890:	00 00 00 
  807893:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:894 (discriminator 2)
        //把新的页面映射到进程页表里
        smmap(new_stkpg,stk,PAGE_PRESENT|PAGE_RWX|PAGE_FOR_ALL,task[pid].pml4);
  807895:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  80789c:	00 00 00 
  80789f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  8078a2:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
  8078a5:	48 98                	cdqe   
  8078a7:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  8078ae:	48 01 d0             	add    rax,rdx
  8078b1:	48 8b 90 c0 00 00 00 	mov    rdx,QWORD PTR [rax+0xc0]
  8078b8:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
  8078bc:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  8078c0:	48 89 d1             	mov    rcx,rdx
  8078c3:	ba 07 00 00 00       	mov    edx,0x7
  8078c8:	48 89 c7             	mov    rdi,rax
  8078cb:	48 b8 1b 15 80 00 00 	movabs rax,0x80151b
  8078d2:	00 00 00 
  8078d5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:889 (discriminator 2)
    for(;stk>=task[pid].mem_struct.stack_bottom;stk-=PAGE_4K_SIZE){
  8078d7:	48 81 6d e8 00 10 00 	sub    QWORD PTR [rbp-0x18],0x1000
  8078de:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:889 (discriminator 1)
  8078df:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  8078e6:	00 00 00 
  8078e9:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  8078ec:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
  8078ef:	48 98                	cdqe   
  8078f1:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  8078f8:	48 01 d0             	add    rax,rdx
  8078fb:	8b 40 30             	mov    eax,DWORD PTR [rax+0x30]
  8078fe:	48 98                	cdqe   
  807900:	48 39 45 e8          	cmp    QWORD PTR [rbp-0x18],rax
  807904:	0f 83 24 ff ff ff    	jae    80782e <sys_fork+0xa3a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:897
    }
    //中断使用的栈空间
    addr_t intstk=INT_STACK_TOP-PAGE_4K_SIZE;
  80790a:	48 b8 00 f0 7f 00 00 	movabs rax,0xffff8000007ff000
  807911:	80 ff ff 
  807914:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:898
    int f=1;
  807918:	c7 45 dc 01 00 00 00 	mov    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:899
    for(;intstk>=INT_STACK_BASE;intstk-=PAGE_4K_SIZE){
  80791f:	e9 d7 00 00 00       	jmp    8079fb <sys_fork+0xc07>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:900
        addr_t new_stkpg= pmalloc();
  807924:	b8 00 00 00 00       	mov    eax,0x0
  807929:	48 ba 2b 22 80 00 00 	movabs rdx,0x80222b
  807930:	00 00 00 
  807933:	ff d2                	call   rdx
  807935:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:901
        smmap(new_stkpg,tmpla,PAGE_PRESENT|PAGE_RWX,current->pml4);
  807939:	48 b8 48 85 40 00 00 	movabs rax,0x408548
  807940:	00 00 00 
  807943:	48 8b 00             	mov    rax,QWORD PTR [rax]
  807946:	48 8b 90 c0 00 00 00 	mov    rdx,QWORD PTR [rax+0xc0]
  80794d:	48 8b 75 b8          	mov    rsi,QWORD PTR [rbp-0x48]
  807951:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  807955:	48 89 d1             	mov    rcx,rdx
  807958:	ba 03 00 00 00       	mov    edx,0x3
  80795d:	48 89 c7             	mov    rdi,rax
  807960:	48 b8 1b 15 80 00 00 	movabs rax,0x80151b
  807967:	00 00 00 
  80796a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:902
        memcpy(tmpla,intstk,PAGE_4K_SIZE);//把当前进程的栈空间复制到新栈里面
  80796c:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  807970:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  807974:	ba 00 10 00 00       	mov    edx,0x1000
  807979:	48 89 ce             	mov    rsi,rcx
  80797c:	48 89 c7             	mov    rdi,rax
  80797f:	48 b8 72 03 81 00 00 	movabs rax,0x810372
  807986:	00 00 00 
  807989:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:903
        if(f){
  80798b:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
  80798f:	74 20                	je     8079b1 <sys_fork+0xbbd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:904
            f=0;
  807991:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:905
            addr_t *raxp=new_stkpg+PAGE_4K_SIZE-56;//指向中断堆栈，里面存着rax的值
  807998:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  80799c:	48 05 c8 0f 00 00    	add    rax,0xfc8
  8079a2:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:906
            *raxp=0;//这样进程切换到子进程的done标签，从时钟中断返回弹出堆栈的时候rax弹出来的就是0，成为返回值。
  8079a6:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  8079aa:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:909
        }
        //把新的页面映射到进程页表里
        smmap(new_stkpg,intstk,PAGE_PRESENT|PAGE_RWX|PAGE_FOR_ALL,task[pid].pml4);
  8079b1:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  8079b8:	00 00 00 
  8079bb:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  8079be:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
  8079c1:	48 98                	cdqe   
  8079c3:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  8079ca:	48 01 d0             	add    rax,rdx
  8079cd:	48 8b 90 c0 00 00 00 	mov    rdx,QWORD PTR [rax+0xc0]
  8079d4:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  8079d8:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  8079dc:	48 89 d1             	mov    rcx,rdx
  8079df:	ba 07 00 00 00       	mov    edx,0x7
  8079e4:	48 89 c7             	mov    rdi,rax
  8079e7:	48 b8 1b 15 80 00 00 	movabs rax,0x80151b
  8079ee:	00 00 00 
  8079f1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:899
    for(;intstk>=INT_STACK_BASE;intstk-=PAGE_4K_SIZE){
  8079f3:	48 81 6d e0 00 10 00 	sub    QWORD PTR [rbp-0x20],0x1000
  8079fa:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:899 (discriminator 1)
  8079fb:	48 b8 ff ef 7f 00 00 	movabs rax,0xffff8000007fefff
  807a02:	80 ff ff 
  807a05:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
  807a09:	0f 87 15 ff ff ff    	ja     807924 <sys_fork+0xb30>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:912
    }
    //堆
    addr_t hp=task[pid].mem_struct.heap_top-PAGE_4K_SIZE;
  807a0f:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  807a16:	00 00 00 
  807a19:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  807a1c:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
  807a1f:	48 98                	cdqe   
  807a21:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  807a28:	48 01 d0             	add    rax,rdx
  807a2b:	8b 40 2c             	mov    eax,DWORD PTR [rax+0x2c]
  807a2e:	2d 00 10 00 00       	sub    eax,0x1000
  807a33:	48 98                	cdqe   
  807a35:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:913
    for(;hp>=task[pid].mem_struct.heap_base;hp-=PAGE_4K_SIZE){
  807a39:	e9 b1 00 00 00       	jmp    807aef <sys_fork+0xcfb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:914 (discriminator 2)
        addr_t new_hppg= pmalloc();
  807a3e:	b8 00 00 00 00       	mov    eax,0x0
  807a43:	48 ba 2b 22 80 00 00 	movabs rdx,0x80222b
  807a4a:	00 00 00 
  807a4d:	ff d2                	call   rdx
  807a4f:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:915 (discriminator 2)
        smmap(new_hppg,tmpla,PAGE_PRESENT|PAGE_RWX,current->pml4);
  807a53:	48 b8 48 85 40 00 00 	movabs rax,0x408548
  807a5a:	00 00 00 
  807a5d:	48 8b 00             	mov    rax,QWORD PTR [rax]
  807a60:	48 8b 90 c0 00 00 00 	mov    rdx,QWORD PTR [rax+0xc0]
  807a67:	48 8b 75 b8          	mov    rsi,QWORD PTR [rbp-0x48]
  807a6b:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  807a6f:	48 89 d1             	mov    rcx,rdx
  807a72:	ba 03 00 00 00       	mov    edx,0x3
  807a77:	48 89 c7             	mov    rdi,rax
  807a7a:	48 b8 1b 15 80 00 00 	movabs rax,0x80151b
  807a81:	00 00 00 
  807a84:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:916 (discriminator 2)
        memcpy(tmpla,hp,PAGE_4K_SIZE);//把当前进程的栈空间复制到新栈里面
  807a86:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
  807a8a:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  807a8e:	ba 00 10 00 00       	mov    edx,0x1000
  807a93:	48 89 ce             	mov    rsi,rcx
  807a96:	48 89 c7             	mov    rdi,rax
  807a99:	48 b8 72 03 81 00 00 	movabs rax,0x810372
  807aa0:	00 00 00 
  807aa3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:918 (discriminator 2)
        //把新的页面映射到进程页表里
        smmap(new_hppg,hp,PAGE_PRESENT|PAGE_RWX|PAGE_FOR_ALL,task[pid].pml4);
  807aa5:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  807aac:	00 00 00 
  807aaf:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  807ab2:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
  807ab5:	48 98                	cdqe   
  807ab7:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  807abe:	48 01 d0             	add    rax,rdx
  807ac1:	48 8b 90 c0 00 00 00 	mov    rdx,QWORD PTR [rax+0xc0]
  807ac8:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
  807acc:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  807ad0:	48 89 d1             	mov    rcx,rdx
  807ad3:	ba 07 00 00 00       	mov    edx,0x7
  807ad8:	48 89 c7             	mov    rdi,rax
  807adb:	48 b8 1b 15 80 00 00 	movabs rax,0x80151b
  807ae2:	00 00 00 
  807ae5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:913 (discriminator 2)
    for(;hp>=task[pid].mem_struct.heap_base;hp-=PAGE_4K_SIZE){
  807ae7:	48 81 6d d0 00 10 00 	sub    QWORD PTR [rbp-0x30],0x1000
  807aee:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:913 (discriminator 1)
  807aef:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  807af6:	00 00 00 
  807af9:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  807afc:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
  807aff:	48 98                	cdqe   
  807b01:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  807b08:	48 01 d0             	add    rax,rdx
  807b0b:	8b 40 28             	mov    eax,DWORD PTR [rax+0x28]
  807b0e:	48 98                	cdqe   
  807b10:	48 39 45 d0          	cmp    QWORD PTR [rbp-0x30],rax
  807b14:	0f 83 24 ff ff ff    	jae    807a3e <sys_fork+0xc4a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:920
    }
    smmap(0,tmpla,0,current->pml4);//解除映射
  807b1a:	48 b8 48 85 40 00 00 	movabs rax,0x408548
  807b21:	00 00 00 
  807b24:	48 8b 00             	mov    rax,QWORD PTR [rax]
  807b27:	48 8b 90 c0 00 00 00 	mov    rdx,QWORD PTR [rax+0xc0]
  807b2e:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  807b32:	48 89 d1             	mov    rcx,rdx
  807b35:	ba 00 00 00 00       	mov    edx,0x0
  807b3a:	48 89 c6             	mov    rsi,rax
  807b3d:	bf 00 00 00 00       	mov    edi,0x0
  807b42:	48 b8 1b 15 80 00 00 	movabs rax,0x80151b
  807b49:	00 00 00 
  807b4c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:922
    //父进程运行到这里
    return pid;
  807b4e:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:923
}
  807b51:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
  807b55:	c9                   	leave  
  807b56:	c3                   	ret    

0000000000807b57 <release_mmap>:
release_mmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:925
//释放进程页表映射的内存，内核空间除外。
void release_mmap(struct process* p){
  807b57:	f3 0f 1e fa          	endbr64 
  807b5b:	55                   	push   rbp
  807b5c:	48 89 e5             	mov    rbp,rsp
  807b5f:	48 83 ec 50          	sub    rsp,0x50
  807b63:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:926
    page_item * pml4p=p->pml4;
  807b67:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  807b6b:	48 8b 80 c0 00 00 00 	mov    rax,QWORD PTR [rax+0xc0]
  807b72:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:928
    //复制pdpt
    page_item *pml4e= pml4p;
  807b76:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  807b7a:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:929
    for(int i=0;i<512;i++)
  807b7e:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
  807b85:	e9 b0 02 00 00       	jmp    807e3a <release_mmap+0x2e3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:931
    {
        if(pml4e[i]&PAGE_PRESENT){
  807b8a:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  807b8d:	48 98                	cdqe   
  807b8f:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
  807b96:	00 
  807b97:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  807b9b:	48 01 d0             	add    rax,rdx
  807b9e:	48 8b 00             	mov    rax,QWORD PTR [rax]
  807ba1:	83 e0 01             	and    eax,0x1
  807ba4:	48 85 c0             	test   rax,rax
  807ba7:	0f 84 89 02 00 00    	je     807e36 <release_mmap+0x2df>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:932
            page_item *pdpte=pml4e[i]&PAGE_4K_MASK;
  807bad:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  807bb0:	48 98                	cdqe   
  807bb2:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
  807bb9:	00 
  807bba:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  807bbe:	48 01 d0             	add    rax,rdx
  807bc1:	48 8b 00             	mov    rax,QWORD PTR [rax]
  807bc4:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
  807bca:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:933
            int j=i==0?1:0;//低1GB的空间不释放（内核空间）
  807bce:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
  807bd2:	0f 94 c0             	sete   al
  807bd5:	0f b6 c0             	movzx  eax,al
  807bd8:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:934
            for(;j<512;j++)
  807bdb:	e9 1d 02 00 00       	jmp    807dfd <release_mmap+0x2a6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:936
            {
                if(pdpte[j]&PAGE_PRESENT&&!(pdpte[j]&PDPTE_1GB)){
  807be0:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  807be3:	48 98                	cdqe   
  807be5:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
  807bec:	00 
  807bed:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  807bf1:	48 01 d0             	add    rax,rdx
  807bf4:	48 8b 00             	mov    rax,QWORD PTR [rax]
  807bf7:	83 e0 01             	and    eax,0x1
  807bfa:	48 85 c0             	test   rax,rax
  807bfd:	0f 84 f6 01 00 00    	je     807df9 <release_mmap+0x2a2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:936 (discriminator 1)
  807c03:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  807c06:	48 98                	cdqe   
  807c08:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
  807c0f:	00 
  807c10:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  807c14:	48 01 d0             	add    rax,rdx
  807c17:	48 8b 00             	mov    rax,QWORD PTR [rax]
  807c1a:	25 80 00 00 00       	and    eax,0x80
  807c1f:	48 85 c0             	test   rax,rax
  807c22:	0f 85 d1 01 00 00    	jne    807df9 <release_mmap+0x2a2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:937
                    page_item *pde=pdpte[j]&PAGE_4K_MASK;
  807c28:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  807c2b:	48 98                	cdqe   
  807c2d:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
  807c34:	00 
  807c35:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  807c39:	48 01 d0             	add    rax,rdx
  807c3c:	48 8b 00             	mov    rax,QWORD PTR [rax]
  807c3f:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
  807c45:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:938
                    for(int k=0;k<512;k++)
  807c49:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
  807c50:	e9 6b 01 00 00       	jmp    807dc0 <release_mmap+0x269>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:940
                    {
                        if(pde[k]&PAGE_PRESENT&&!(pde[k]&PDE_4MB)){
  807c55:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  807c58:	48 98                	cdqe   
  807c5a:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
  807c61:	00 
  807c62:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  807c66:	48 01 d0             	add    rax,rdx
  807c69:	48 8b 00             	mov    rax,QWORD PTR [rax]
  807c6c:	83 e0 01             	and    eax,0x1
  807c6f:	48 85 c0             	test   rax,rax
  807c72:	0f 84 d5 00 00 00    	je     807d4d <release_mmap+0x1f6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:940 (discriminator 1)
  807c78:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  807c7b:	48 98                	cdqe   
  807c7d:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
  807c84:	00 
  807c85:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  807c89:	48 01 d0             	add    rax,rdx
  807c8c:	48 8b 00             	mov    rax,QWORD PTR [rax]
  807c8f:	25 80 00 00 00       	and    eax,0x80
  807c94:	48 85 c0             	test   rax,rax
  807c97:	0f 85 b0 00 00 00    	jne    807d4d <release_mmap+0x1f6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:941
                            page_item *pte=pde[k]&PAGE_4K_MASK;
  807c9d:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  807ca0:	48 98                	cdqe   
  807ca2:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
  807ca9:	00 
  807caa:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  807cae:	48 01 d0             	add    rax,rdx
  807cb1:	48 8b 00             	mov    rax,QWORD PTR [rax]
  807cb4:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
  807cba:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:942
                            for(int l=0;l<512;l++){
  807cbe:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [rbp-0x10],0x0
  807cc5:	eb 4f                	jmp    807d16 <release_mmap+0x1bf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:943
                                if(pte[l]&PAGE_PRESENT){
  807cc7:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  807cca:	48 98                	cdqe   
  807ccc:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
  807cd3:	00 
  807cd4:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  807cd8:	48 01 d0             	add    rax,rdx
  807cdb:	48 8b 00             	mov    rax,QWORD PTR [rax]
  807cde:	83 e0 01             	and    eax,0x1
  807ce1:	48 85 c0             	test   rax,rax
  807ce4:	74 2c                	je     807d12 <release_mmap+0x1bb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:946
                                    //释放申请的物理内存
                                    //TODO:这里有一个问题：目前fork时候堆栈空间使用的是vmalloc内存，这样的话free_page是释放不了的。
                                    free_page(pte[l]&PAGE_4K_MASK);
  807ce6:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  807ce9:	48 98                	cdqe   
  807ceb:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
  807cf2:	00 
  807cf3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  807cf7:	48 01 d0             	add    rax,rdx
  807cfa:	48 8b 00             	mov    rax,QWORD PTR [rax]
  807cfd:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
  807d03:	48 89 c7             	mov    rdi,rax
  807d06:	48 b8 67 22 80 00 00 	movabs rax,0x802267
  807d0d:	00 00 00 
  807d10:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:942 (discriminator 2)
                            for(int l=0;l<512;l++){
  807d12:	83 45 f0 01          	add    DWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:942 (discriminator 1)
  807d16:	81 7d f0 ff 01 00 00 	cmp    DWORD PTR [rbp-0x10],0x1ff
  807d1d:	7e a8                	jle    807cc7 <release_mmap+0x170>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:950
                                }
                            }
                            //里面的项释放完了，这一项指向的vmalloc内存可以释放了
                            kmfree(pde[k] & PAGE_4K_MASK);
  807d1f:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  807d22:	48 98                	cdqe   
  807d24:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
  807d2b:	00 
  807d2c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  807d30:	48 01 d0             	add    rax,rdx
  807d33:	48 8b 00             	mov    rax,QWORD PTR [rax]
  807d36:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
  807d3c:	48 89 c7             	mov    rdi,rax
  807d3f:	48 b8 e0 1b 80 00 00 	movabs rax,0x801be0
  807d46:	00 00 00 
  807d49:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:940
                        if(pde[k]&PAGE_PRESENT&&!(pde[k]&PDE_4MB)){
  807d4b:	eb 6f                	jmp    807dbc <release_mmap+0x265>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:951
                        }else if((pde[k]&PAGE_PRESENT)&&(pde[k]&PDE_4MB)){
  807d4d:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  807d50:	48 98                	cdqe   
  807d52:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
  807d59:	00 
  807d5a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  807d5e:	48 01 d0             	add    rax,rdx
  807d61:	48 8b 00             	mov    rax,QWORD PTR [rax]
  807d64:	83 e0 01             	and    eax,0x1
  807d67:	48 85 c0             	test   rax,rax
  807d6a:	74 50                	je     807dbc <release_mmap+0x265>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:951 (discriminator 1)
  807d6c:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  807d6f:	48 98                	cdqe   
  807d71:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
  807d78:	00 
  807d79:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  807d7d:	48 01 d0             	add    rax,rdx
  807d80:	48 8b 00             	mov    rax,QWORD PTR [rax]
  807d83:	25 80 00 00 00       	and    eax,0x80
  807d88:	48 85 c0             	test   rax,rax
  807d8b:	74 2f                	je     807dbc <release_mmap+0x265>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:953
                            //释放2MB页
                            free_pages_at(pde[k]&PAGE_4K_MASK,512);
  807d8d:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  807d90:	48 98                	cdqe   
  807d92:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
  807d99:	00 
  807d9a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  807d9e:	48 01 d0             	add    rax,rdx
  807da1:	48 8b 00             	mov    rax,QWORD PTR [rax]
  807da4:	25 00 f0 ff ff       	and    eax,0xfffff000
  807da9:	be 00 02 00 00       	mov    esi,0x200
  807dae:	89 c7                	mov    edi,eax
  807db0:	48 b8 f7 22 80 00 00 	movabs rax,0x8022f7
  807db7:	00 00 00 
  807dba:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:938 (discriminator 2)
                    for(int k=0;k<512;k++)
  807dbc:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:938 (discriminator 1)
  807dc0:	81 7d f4 ff 01 00 00 	cmp    DWORD PTR [rbp-0xc],0x1ff
  807dc7:	0f 8e 88 fe ff ff    	jle    807c55 <release_mmap+0xfe>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:957
                        }
                    }
                    //这一页pde的内容释放完了，这一项指向的vmalloc可以释放了
                    kmfree(pdpte[j] & PAGE_4K_MASK);
  807dcd:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  807dd0:	48 98                	cdqe   
  807dd2:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
  807dd9:	00 
  807dda:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  807dde:	48 01 d0             	add    rax,rdx
  807de1:	48 8b 00             	mov    rax,QWORD PTR [rax]
  807de4:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
  807dea:	48 89 c7             	mov    rdi,rax
  807ded:	48 b8 e0 1b 80 00 00 	movabs rax,0x801be0
  807df4:	00 00 00 
  807df7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:934
            for(;j<512;j++)
  807df9:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:934 (discriminator 1)
  807dfd:	81 7d f8 ff 01 00 00 	cmp    DWORD PTR [rbp-0x8],0x1ff
  807e04:	0f 8e d6 fd ff ff    	jle    807be0 <release_mmap+0x89>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:962
                }//1GB先不写，目前还没有初始化之后动态申请1GB页的

            }
            //这一页pdpte的内容释放完了，这一项指向的vmalloc可以释放了
            kmfree(pml4e[i] & PAGE_4K_MASK);
  807e0a:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  807e0d:	48 98                	cdqe   
  807e0f:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
  807e16:	00 
  807e17:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  807e1b:	48 01 d0             	add    rax,rdx
  807e1e:	48 8b 00             	mov    rax,QWORD PTR [rax]
  807e21:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
  807e27:	48 89 c7             	mov    rdi,rax
  807e2a:	48 b8 e0 1b 80 00 00 	movabs rax,0x801be0
  807e31:	00 00 00 
  807e34:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:929 (discriminator 2)
    for(int i=0;i<512;i++)
  807e36:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:929 (discriminator 1)
  807e3a:	81 7d fc ff 01 00 00 	cmp    DWORD PTR [rbp-0x4],0x1ff
  807e41:	0f 8e 43 fd ff ff    	jle    807b8a <release_mmap+0x33>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:965
        }
    }
}
  807e47:	90                   	nop
  807e48:	90                   	nop
  807e49:	c9                   	leave  
  807e4a:	c3                   	ret    

0000000000807e4b <copy_mmap>:
copy_mmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:966
void copy_mmap(struct process* from, struct process *to){
  807e4b:	f3 0f 1e fa          	endbr64 
  807e4f:	55                   	push   rbp
  807e50:	48 89 e5             	mov    rbp,rsp
  807e53:	48 83 ec 60          	sub    rsp,0x60
  807e57:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
  807e5b:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:967
    page_item * pml4p= kmalloc();
  807e5f:	b8 00 00 00 00       	mov    eax,0x0
  807e64:	48 ba d4 18 80 00 00 	movabs rdx,0x8018d4
  807e6b:	00 00 00 
  807e6e:	ff d2                	call   rdx
  807e70:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:968
    memcpy(pml4p, (unsigned char *) ((addr_t) from->pml4 | KNL_BASE), PAGE_4K_SIZE);//复制pml4
  807e74:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  807e78:	48 8b 80 c0 00 00 00 	mov    rax,QWORD PTR [rax+0xc0]
  807e7f:	48 89 c2             	mov    rdx,rax
  807e82:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
  807e89:	80 ff ff 
  807e8c:	48 09 d0             	or     rax,rdx
  807e8f:	48 89 c1             	mov    rcx,rax
  807e92:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  807e96:	ba 00 10 00 00       	mov    edx,0x1000
  807e9b:	48 89 ce             	mov    rsi,rcx
  807e9e:	48 89 c7             	mov    rdi,rax
  807ea1:	48 b8 72 03 81 00 00 	movabs rax,0x810372
  807ea8:	00 00 00 
  807eab:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:969
    to->regs.cr3=pml4p;
  807ead:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  807eb1:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  807eb5:	48 89 90 44 02 00 00 	mov    QWORD PTR [rax+0x244],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:970
    to->pml4=pml4p;
  807ebc:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  807ec0:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  807ec4:	48 89 90 c0 00 00 00 	mov    QWORD PTR [rax+0xc0],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:973
    //复制pdpt

    page_item *pml4e= pml4p;
  807ecb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  807ecf:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:974
    for(int i=0;i<512;i++)
  807ed3:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
  807eda:	e9 28 03 00 00       	jmp    808207 <copy_mmap+0x3bc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:976
    {
        if(pml4e[i]&PAGE_PRESENT){
  807edf:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  807ee2:	48 98                	cdqe   
  807ee4:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
  807eeb:	00 
  807eec:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  807ef0:	48 01 d0             	add    rax,rdx
  807ef3:	48 8b 00             	mov    rax,QWORD PTR [rax]
  807ef6:	83 e0 01             	and    eax,0x1
  807ef9:	48 85 c0             	test   rax,rax
  807efc:	0f 84 01 03 00 00    	je     808203 <copy_mmap+0x3b8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:977
            addr_t old_data=pml4e[i];//旧的数据，里面保存了属性和要拷贝的数据的地址
  807f02:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  807f05:	48 98                	cdqe   
  807f07:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
  807f0e:	00 
  807f0f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  807f13:	48 01 d0             	add    rax,rdx
  807f16:	48 8b 00             	mov    rax,QWORD PTR [rax]
  807f19:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:978
            pml4e[i]= kmalloc() | (old_data & ~PAGE_4K_MASK);
  807f1d:	b8 00 00 00 00       	mov    eax,0x0
  807f22:	48 ba d4 18 80 00 00 	movabs rdx,0x8018d4
  807f29:	00 00 00 
  807f2c:	ff d2                	call   rdx
  807f2e:	48 89 c2             	mov    rdx,rax
  807f31:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  807f35:	25 ff 0f 00 00       	and    eax,0xfff
  807f3a:	48 89 c1             	mov    rcx,rax
  807f3d:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  807f40:	48 98                	cdqe   
  807f42:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
  807f49:	00 
  807f4a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  807f4e:	48 01 f0             	add    rax,rsi
  807f51:	48 09 ca             	or     rdx,rcx
  807f54:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:979
            memcpy(pml4e[i]&PAGE_4K_MASK,old_data&PAGE_4K_MASK|KNL_BASE,PAGE_4K_SIZE);//把老的数据拷贝到新的页面里
  807f57:	48 b8 00 f0 ff ff ff 	movabs rax,0x7ffffffff000
  807f5e:	7f 00 00 
  807f61:	48 23 45 d8          	and    rax,QWORD PTR [rbp-0x28]
  807f65:	48 ba 00 00 00 00 00 	movabs rdx,0xffff800000000000
  807f6c:	80 ff ff 
  807f6f:	48 09 d0             	or     rax,rdx
  807f72:	48 89 c1             	mov    rcx,rax
  807f75:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  807f78:	48 98                	cdqe   
  807f7a:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
  807f81:	00 
  807f82:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  807f86:	48 01 d0             	add    rax,rdx
  807f89:	48 8b 00             	mov    rax,QWORD PTR [rax]
  807f8c:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
  807f92:	ba 00 10 00 00       	mov    edx,0x1000
  807f97:	48 89 ce             	mov    rsi,rcx
  807f9a:	48 89 c7             	mov    rdi,rax
  807f9d:	48 b8 72 03 81 00 00 	movabs rax,0x810372
  807fa4:	00 00 00 
  807fa7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:980
            page_item *pdpte=pml4e[i]&PAGE_4K_MASK;
  807fa9:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  807fac:	48 98                	cdqe   
  807fae:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
  807fb5:	00 
  807fb6:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  807fba:	48 01 d0             	add    rax,rdx
  807fbd:	48 8b 00             	mov    rax,QWORD PTR [rax]
  807fc0:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
  807fc6:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:981
            for(int j=0;j<512;j++)
  807fca:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
  807fd1:	e9 20 02 00 00       	jmp    8081f6 <copy_mmap+0x3ab>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:983
            {
                if(pdpte[j]&PAGE_PRESENT&&!(pdpte[j]&PDPTE_1GB)){
  807fd6:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  807fd9:	48 98                	cdqe   
  807fdb:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
  807fe2:	00 
  807fe3:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  807fe7:	48 01 d0             	add    rax,rdx
  807fea:	48 8b 00             	mov    rax,QWORD PTR [rax]
  807fed:	83 e0 01             	and    eax,0x1
  807ff0:	48 85 c0             	test   rax,rax
  807ff3:	0f 84 f9 01 00 00    	je     8081f2 <copy_mmap+0x3a7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:983 (discriminator 1)
  807ff9:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  807ffc:	48 98                	cdqe   
  807ffe:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
  808005:	00 
  808006:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  80800a:	48 01 d0             	add    rax,rdx
  80800d:	48 8b 00             	mov    rax,QWORD PTR [rax]
  808010:	25 80 00 00 00       	and    eax,0x80
  808015:	48 85 c0             	test   rax,rax
  808018:	0f 85 d4 01 00 00    	jne    8081f2 <copy_mmap+0x3a7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:984
                    addr_t old_data2=pdpte[j];//旧的数据，里面保存了属性和要拷贝的数据的地址
  80801e:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  808021:	48 98                	cdqe   
  808023:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
  80802a:	00 
  80802b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  80802f:	48 01 d0             	add    rax,rdx
  808032:	48 8b 00             	mov    rax,QWORD PTR [rax]
  808035:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:985
                    pdpte[j]= kmalloc() | (old_data2 & ~PAGE_4K_MASK);
  808039:	b8 00 00 00 00       	mov    eax,0x0
  80803e:	48 ba d4 18 80 00 00 	movabs rdx,0x8018d4
  808045:	00 00 00 
  808048:	ff d2                	call   rdx
  80804a:	48 89 c2             	mov    rdx,rax
  80804d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  808051:	25 ff 0f 00 00       	and    eax,0xfff
  808056:	48 89 c1             	mov    rcx,rax
  808059:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  80805c:	48 98                	cdqe   
  80805e:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
  808065:	00 
  808066:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  80806a:	48 01 f0             	add    rax,rsi
  80806d:	48 09 ca             	or     rdx,rcx
  808070:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:986
                    memcpy(pdpte[j]&PAGE_4K_MASK,old_data2&PAGE_4K_MASK|KNL_BASE,PAGE_4K_SIZE);//把老的数据拷贝到新的页面里
  808073:	48 b8 00 f0 ff ff ff 	movabs rax,0x7ffffffff000
  80807a:	7f 00 00 
  80807d:	48 23 45 c8          	and    rax,QWORD PTR [rbp-0x38]
  808081:	48 ba 00 00 00 00 00 	movabs rdx,0xffff800000000000
  808088:	80 ff ff 
  80808b:	48 09 d0             	or     rax,rdx
  80808e:	48 89 c1             	mov    rcx,rax
  808091:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  808094:	48 98                	cdqe   
  808096:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
  80809d:	00 
  80809e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  8080a2:	48 01 d0             	add    rax,rdx
  8080a5:	48 8b 00             	mov    rax,QWORD PTR [rax]
  8080a8:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
  8080ae:	ba 00 10 00 00       	mov    edx,0x1000
  8080b3:	48 89 ce             	mov    rsi,rcx
  8080b6:	48 89 c7             	mov    rdi,rax
  8080b9:	48 b8 72 03 81 00 00 	movabs rax,0x810372
  8080c0:	00 00 00 
  8080c3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:987
                    page_item *pde=pdpte[j]&PAGE_4K_MASK;
  8080c5:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  8080c8:	48 98                	cdqe   
  8080ca:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
  8080d1:	00 
  8080d2:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  8080d6:	48 01 d0             	add    rax,rdx
  8080d9:	48 8b 00             	mov    rax,QWORD PTR [rax]
  8080dc:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
  8080e2:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:988
                    for(int k=0;k<512;k++)
  8080e6:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
  8080ed:	e9 f3 00 00 00       	jmp    8081e5 <copy_mmap+0x39a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:990
                    {
                        if(pde[k]&PAGE_PRESENT&&!(pde[k]&PDE_4MB)){
  8080f2:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  8080f5:	48 98                	cdqe   
  8080f7:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
  8080fe:	00 
  8080ff:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  808103:	48 01 d0             	add    rax,rdx
  808106:	48 8b 00             	mov    rax,QWORD PTR [rax]
  808109:	83 e0 01             	and    eax,0x1
  80810c:	48 85 c0             	test   rax,rax
  80810f:	0f 84 cc 00 00 00    	je     8081e1 <copy_mmap+0x396>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:990 (discriminator 1)
  808115:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  808118:	48 98                	cdqe   
  80811a:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
  808121:	00 
  808122:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  808126:	48 01 d0             	add    rax,rdx
  808129:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80812c:	25 80 00 00 00       	and    eax,0x80
  808131:	48 85 c0             	test   rax,rax
  808134:	0f 85 a7 00 00 00    	jne    8081e1 <copy_mmap+0x396>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:991
                            addr_t old_data3=pde[k];//旧的数据，里面保存了属性和要拷贝的数据的地址
  80813a:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  80813d:	48 98                	cdqe   
  80813f:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
  808146:	00 
  808147:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  80814b:	48 01 d0             	add    rax,rdx
  80814e:	48 8b 00             	mov    rax,QWORD PTR [rax]
  808151:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:992
                            pde[k]= kmalloc() | (old_data3 & ~PAGE_4K_MASK);
  808155:	b8 00 00 00 00       	mov    eax,0x0
  80815a:	48 ba d4 18 80 00 00 	movabs rdx,0x8018d4
  808161:	00 00 00 
  808164:	ff d2                	call   rdx
  808166:	48 89 c2             	mov    rdx,rax
  808169:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  80816d:	25 ff 0f 00 00       	and    eax,0xfff
  808172:	48 89 c1             	mov    rcx,rax
  808175:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  808178:	48 98                	cdqe   
  80817a:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
  808181:	00 
  808182:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  808186:	48 01 f0             	add    rax,rsi
  808189:	48 09 ca             	or     rdx,rcx
  80818c:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:993
                            memcpy(pde[k]&PAGE_4K_MASK,old_data3&PAGE_4K_MASK|KNL_BASE,PAGE_4K_SIZE);//把老的数据拷贝到新的页面里
  80818f:	48 b8 00 f0 ff ff ff 	movabs rax,0x7ffffffff000
  808196:	7f 00 00 
  808199:	48 23 45 b8          	and    rax,QWORD PTR [rbp-0x48]
  80819d:	48 ba 00 00 00 00 00 	movabs rdx,0xffff800000000000
  8081a4:	80 ff ff 
  8081a7:	48 09 d0             	or     rax,rdx
  8081aa:	48 89 c1             	mov    rcx,rax
  8081ad:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  8081b0:	48 98                	cdqe   
  8081b2:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
  8081b9:	00 
  8081ba:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  8081be:	48 01 d0             	add    rax,rdx
  8081c1:	48 8b 00             	mov    rax,QWORD PTR [rax]
  8081c4:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
  8081ca:	ba 00 10 00 00       	mov    edx,0x1000
  8081cf:	48 89 ce             	mov    rsi,rcx
  8081d2:	48 89 c7             	mov    rdi,rax
  8081d5:	48 b8 72 03 81 00 00 	movabs rax,0x810372
  8081dc:	00 00 00 
  8081df:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:988 (discriminator 2)
                    for(int k=0;k<512;k++)
  8081e1:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:988 (discriminator 1)
  8081e5:	81 7d f4 ff 01 00 00 	cmp    DWORD PTR [rbp-0xc],0x1ff
  8081ec:	0f 8e 00 ff ff ff    	jle    8080f2 <copy_mmap+0x2a7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:981 (discriminator 2)
            for(int j=0;j<512;j++)
  8081f2:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:981 (discriminator 1)
  8081f6:	81 7d f8 ff 01 00 00 	cmp    DWORD PTR [rbp-0x8],0x1ff
  8081fd:	0f 8e d3 fd ff ff    	jle    807fd6 <copy_mmap+0x18b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:974 (discriminator 2)
    for(int i=0;i<512;i++)
  808203:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:974 (discriminator 1)
  808207:	81 7d fc ff 01 00 00 	cmp    DWORD PTR [rbp-0x4],0x1ff
  80820e:	0f 8e cb fc ff ff    	jle    807edf <copy_mmap+0x94>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1000
                    }
                }
            }
        }
    }
}
  808214:	90                   	nop
  808215:	90                   	nop
  808216:	c9                   	leave  
  808217:	c3                   	ret    

0000000000808218 <getpgrp>:
getpgrp():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1002

pid_t getpgrp(void){
  808218:	f3 0f 1e fa          	endbr64 
  80821c:	55                   	push   rbp
  80821d:	48 89 e5             	mov    rbp,rsp
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1003
    return current->gpid;
  808220:	48 b8 48 85 40 00 00 	movabs rax,0x408548
  808227:	00 00 00 
  80822a:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80822d:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1004
}
  808230:	5d                   	pop    rbp
  808231:	c3                   	ret    

0000000000808232 <getpgid>:
getpgid():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1006

int getpgid(pid_t pid,gid_t gid){
  808232:	f3 0f 1e fa          	endbr64 
  808236:	55                   	push   rbp
  808237:	48 89 e5             	mov    rbp,rsp
  80823a:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
  80823d:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1007
    if(pid==0)
  808240:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
  808244:	75 12                	jne    808258 <getpgid+0x26>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1008
        return current->gpid;
  808246:	48 b8 48 85 40 00 00 	movabs rax,0x408548
  80824d:	00 00 00 
  808250:	48 8b 00             	mov    rax,QWORD PTR [rax]
  808253:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
  808256:	eb 5e                	jmp    8082b6 <getpgid+0x84>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1009
    for (int i = 0; i <MAX_TASKS; ++i) {
  808258:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
  80825f:	eb 4a                	jmp    8082ab <getpgid+0x79>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1010
        if(task[i].pid==pid)
  808261:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  808268:	00 00 00 
  80826b:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  80826e:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  808271:	48 98                	cdqe   
  808273:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  80827a:	48 01 d0             	add    rax,rdx
  80827d:	8b 10                	mov    edx,DWORD PTR [rax]
  80827f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  808282:	39 c2                	cmp    edx,eax
  808284:	75 21                	jne    8082a7 <getpgid+0x75>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1011
            return task[i].gpid;
  808286:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  80828d:	00 00 00 
  808290:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  808293:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  808296:	48 98                	cdqe   
  808298:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  80829f:	48 01 d0             	add    rax,rdx
  8082a2:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
  8082a5:	eb 0f                	jmp    8082b6 <getpgid+0x84>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1009 (discriminator 2)
    for (int i = 0; i <MAX_TASKS; ++i) {
  8082a7:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1009 (discriminator 1)
  8082ab:	83 7d fc 1f          	cmp    DWORD PTR [rbp-0x4],0x1f
  8082af:	7e b0                	jle    808261 <getpgid+0x2f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1013
    }
    return -1;
  8082b1:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1014
}
  8082b6:	5d                   	pop    rbp
  8082b7:	c3                   	ret    

00000000008082b8 <setpgid>:
setpgid():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1015
int setpgid(pid_t pid,gid_t gid){
  8082b8:	f3 0f 1e fa          	endbr64 
  8082bc:	55                   	push   rbp
  8082bd:	48 89 e5             	mov    rbp,rsp
  8082c0:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
  8082c3:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1016
    if(pid==0)
  8082c6:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
  8082ca:	75 4a                	jne    808316 <setpgid+0x5e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1018
    {
        if(current->sid==current->pid)
  8082cc:	48 b8 48 85 40 00 00 	movabs rax,0x408548
  8082d3:	00 00 00 
  8082d6:	48 8b 00             	mov    rax,QWORD PTR [rax]
  8082d9:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
  8082dc:	48 b8 48 85 40 00 00 	movabs rax,0x408548
  8082e3:	00 00 00 
  8082e6:	48 8b 00             	mov    rax,QWORD PTR [rax]
  8082e9:	8b 00                	mov    eax,DWORD PTR [rax]
  8082eb:	39 c2                	cmp    edx,eax
  8082ed:	75 0a                	jne    8082f9 <setpgid+0x41>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1019
            return -1;
  8082ef:	b8 ff ff ff ff       	mov    eax,0xffffffff
  8082f4:	e9 d2 00 00 00       	jmp    8083cb <setpgid+0x113>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1020
        current->gpid=gid;
  8082f9:	48 b8 48 85 40 00 00 	movabs rax,0x408548
  808300:	00 00 00 
  808303:	48 8b 00             	mov    rax,QWORD PTR [rax]
  808306:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
  808309:	89 50 04             	mov    DWORD PTR [rax+0x4],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1021
        return 0;
  80830c:	b8 00 00 00 00       	mov    eax,0x0
  808311:	e9 b5 00 00 00       	jmp    8083cb <setpgid+0x113>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1023
    }
    for (int i = 0; i <MAX_TASKS; ++i) {
  808316:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
  80831d:	e9 9a 00 00 00       	jmp    8083bc <setpgid+0x104>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1024
        if(task[i].pid==pid)
  808322:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  808329:	00 00 00 
  80832c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  80832f:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  808332:	48 98                	cdqe   
  808334:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  80833b:	48 01 d0             	add    rax,rdx
  80833e:	8b 10                	mov    edx,DWORD PTR [rax]
  808340:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  808343:	39 c2                	cmp    edx,eax
  808345:	75 71                	jne    8083b8 <setpgid+0x100>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1026
        {
            if(task[i].sid==task[i].pid)
  808347:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  80834e:	00 00 00 
  808351:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  808354:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  808357:	48 98                	cdqe   
  808359:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  808360:	48 01 d0             	add    rax,rdx
  808363:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
  808366:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  80836d:	00 00 00 
  808370:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  808373:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  808376:	48 98                	cdqe   
  808378:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  80837f:	48 01 c8             	add    rax,rcx
  808382:	8b 00                	mov    eax,DWORD PTR [rax]
  808384:	39 c2                	cmp    edx,eax
  808386:	75 07                	jne    80838f <setpgid+0xd7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1027
                return -1;
  808388:	b8 ff ff ff ff       	mov    eax,0xffffffff
  80838d:	eb 3c                	jmp    8083cb <setpgid+0x113>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1028
            task[i].gpid=gid;
  80838f:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  808396:	00 00 00 
  808399:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  80839c:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80839f:	48 98                	cdqe   
  8083a1:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  8083a8:	48 01 c2             	add    rdx,rax
  8083ab:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
  8083ae:	89 42 04             	mov    DWORD PTR [rdx+0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1029
            return 0;
  8083b1:	b8 00 00 00 00       	mov    eax,0x0
  8083b6:	eb 13                	jmp    8083cb <setpgid+0x113>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1023 (discriminator 2)
    for (int i = 0; i <MAX_TASKS; ++i) {
  8083b8:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1023 (discriminator 1)
  8083bc:	83 7d fc 1f          	cmp    DWORD PTR [rbp-0x4],0x1f
  8083c0:	0f 8e 5c ff ff ff    	jle    808322 <setpgid+0x6a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1032
        }
    }
    return -1;
  8083c6:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1033
}
  8083cb:	5d                   	pop    rbp
  8083cc:	c3                   	ret    

00000000008083cd <setsid>:
setsid():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1035

pid_t setsid(void){
  8083cd:	f3 0f 1e fa          	endbr64 
  8083d1:	55                   	push   rbp
  8083d2:	48 89 e5             	mov    rbp,rsp
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1036
    current->sid=current->pid;
  8083d5:	48 b8 48 85 40 00 00 	movabs rax,0x408548
  8083dc:	00 00 00 
  8083df:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  8083e2:	48 b8 48 85 40 00 00 	movabs rax,0x408548
  8083e9:	00 00 00 
  8083ec:	48 8b 00             	mov    rax,QWORD PTR [rax]
  8083ef:	8b 12                	mov    edx,DWORD PTR [rdx]
  8083f1:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1037
}
  8083f4:	90                   	nop
  8083f5:	5d                   	pop    rbp
  8083f6:	c3                   	ret    

00000000008083f7 <getsid>:
getsid():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1038
pid_t getsid(pid_t pid){
  8083f7:	f3 0f 1e fa          	endbr64 
  8083fb:	55                   	push   rbp
  8083fc:	48 89 e5             	mov    rbp,rsp
  8083ff:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1039
    if(pid==0)
  808402:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
  808406:	75 12                	jne    80841a <getsid+0x23>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1040
        return current->sid;
  808408:	48 b8 48 85 40 00 00 	movabs rax,0x408548
  80840f:	00 00 00 
  808412:	48 8b 00             	mov    rax,QWORD PTR [rax]
  808415:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
  808418:	eb 5e                	jmp    808478 <getsid+0x81>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1041
    for (int i = 0; i <MAX_TASKS; ++i) {
  80841a:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
  808421:	eb 4a                	jmp    80846d <getsid+0x76>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1042
        if(task[i].pid==pid)
  808423:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  80842a:	00 00 00 
  80842d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  808430:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  808433:	48 98                	cdqe   
  808435:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  80843c:	48 01 d0             	add    rax,rdx
  80843f:	8b 10                	mov    edx,DWORD PTR [rax]
  808441:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  808444:	39 c2                	cmp    edx,eax
  808446:	75 21                	jne    808469 <getsid+0x72>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1043
            return task[i].sid;
  808448:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  80844f:	00 00 00 
  808452:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  808455:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  808458:	48 98                	cdqe   
  80845a:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  808461:	48 01 d0             	add    rax,rdx
  808464:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
  808467:	eb 0f                	jmp    808478 <getsid+0x81>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1041 (discriminator 2)
    for (int i = 0; i <MAX_TASKS; ++i) {
  808469:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1041 (discriminator 1)
  80846d:	83 7d fc 1f          	cmp    DWORD PTR [rbp-0x4],0x1f
  808471:	7e b0                	jle    808423 <getsid+0x2c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1045
    }
    return -1;
  808473:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1046
}
  808478:	5d                   	pop    rbp
  808479:	c3                   	ret    

000000000080847a <tcsetpgrp>:
tcsetpgrp():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1047
int tcsetpgrp(int fildes,pid_t pgid_id){
  80847a:	f3 0f 1e fa          	endbr64 
  80847e:	55                   	push   rbp
  80847f:	48 89 e5             	mov    rbp,rsp
  808482:	48 83 ec 20          	sub    rsp,0x20
  808486:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
  808489:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1049
    //当前controlling terminal断联
    sys_ioctl(fildes,TTY_DISCONNECT,0);
  80848c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  80848f:	ba 00 00 00 00       	mov    edx,0x0
  808494:	be 02 00 00 00       	mov    esi,0x2
  808499:	89 c7                	mov    edi,eax
  80849b:	48 b8 39 86 80 00 00 	movabs rax,0x808639
  8084a2:	00 00 00 
  8084a5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1050
    int sid= getsid(0);//获取session id
  8084a7:	bf 00 00 00 00       	mov    edi,0x0
  8084ac:	48 b8 f7 83 80 00 00 	movabs rax,0x8083f7
  8084b3:	00 00 00 
  8084b6:	ff d0                	call   rax
  8084b8:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1051
    struct process* new_fgl=NULL;
  8084bb:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
  8084c2:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1052
    for (int i = 0; i <MAX_TASKS; ++i) {
  8084c3:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
  8084ca:	e9 e3 00 00 00       	jmp    8085b2 <tcsetpgrp+0x138>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1053
        if(task[i].stat == TASK_ZOMBIE||task[i].stat == TASK_EMPTY)continue;
  8084cf:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  8084d6:	00 00 00 
  8084d9:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  8084dc:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  8084df:	48 98                	cdqe   
  8084e1:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  8084e8:	48 01 d0             	add    rax,rdx
  8084eb:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
  8084ee:	83 f8 04             	cmp    eax,0x4
  8084f1:	0f 84 b6 00 00 00    	je     8085ad <tcsetpgrp+0x133>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1053 (discriminator 2)
  8084f7:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  8084fe:	00 00 00 
  808501:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  808504:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  808507:	48 98                	cdqe   
  808509:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  808510:	48 01 d0             	add    rax,rdx
  808513:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
  808516:	85 c0                	test   eax,eax
  808518:	0f 84 8f 00 00 00    	je     8085ad <tcsetpgrp+0x133>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1054
        if(task[i].sid==sid){
  80851e:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  808525:	00 00 00 
  808528:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  80852b:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  80852e:	48 98                	cdqe   
  808530:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  808537:	48 01 d0             	add    rax,rdx
  80853a:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
  80853d:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  808540:	39 c2                	cmp    edx,eax
  808542:	75 6a                	jne    8085ae <tcsetpgrp+0x134>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1055
            task[i].fg_pgid=pgid_id;
  808544:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  80854b:	00 00 00 
  80854e:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  808551:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  808554:	48 98                	cdqe   
  808556:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  80855d:	48 01 c2             	add    rdx,rax
  808560:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
  808563:	89 42 0c             	mov    DWORD PTR [rdx+0xc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1056
            if(task[i].pid==pgid_id){
  808566:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  80856d:	00 00 00 
  808570:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  808573:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  808576:	48 98                	cdqe   
  808578:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  80857f:	48 01 d0             	add    rax,rdx
  808582:	8b 10                	mov    edx,DWORD PTR [rax]
  808584:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
  808587:	39 c2                	cmp    edx,eax
  808589:	75 23                	jne    8085ae <tcsetpgrp+0x134>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1058
                //这是新前台进程组的leader
                new_fgl=&task[i];
  80858b:	48 b8 40 85 40 00 00 	movabs rax,0x408540
  808592:	00 00 00 
  808595:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  808598:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  80859b:	48 98                	cdqe   
  80859d:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  8085a4:	48 01 d0             	add    rax,rdx
  8085a7:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  8085ab:	eb 01                	jmp    8085ae <tcsetpgrp+0x134>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1053
        if(task[i].stat == TASK_ZOMBIE||task[i].stat == TASK_EMPTY)continue;
  8085ad:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1052 (discriminator 2)
    for (int i = 0; i <MAX_TASKS; ++i) {
  8085ae:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1052 (discriminator 1)
  8085b2:	83 7d f4 1f          	cmp    DWORD PTR [rbp-0xc],0x1f
  8085b6:	0f 8e 13 ff ff ff    	jle    8084cf <tcsetpgrp+0x55>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1063
            }
        }
    }
    //新leader把tty连接
    new_fgl->openf[new_fgl->tty_fd]->f_ops->ioctl(new_fgl->openf[fildes]->dentry->dir_inode,new_fgl->openf[fildes]\
  8085bc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  8085c0:	8b 50 14             	mov    edx,DWORD PTR [rax+0x14]
  8085c3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  8085c7:	48 63 d2             	movsxd rdx,edx
  8085ca:	48 83 c2 1a          	add    rdx,0x1a
  8085ce:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
  8085d3:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  8085d7:	4c 8b 40 28          	mov    r8,QWORD PTR [rax+0x28]
  8085db:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  8085df:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
  8085e2:	48 63 d2             	movsxd rdx,edx
  8085e5:	48 83 c2 1a          	add    rdx,0x1a
  8085e9:	48 8b 74 d0 08       	mov    rsi,QWORD PTR [rax+rdx*8+0x8]
  8085ee:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  8085f2:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
  8085f5:	48 63 d2             	movsxd rdx,edx
  8085f8:	48 83 c2 1a          	add    rdx,0x1a
  8085fc:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
  808601:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  808605:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
  808609:	b9 00 00 00 00       	mov    ecx,0x0
  80860e:	ba 01 00 00 00       	mov    edx,0x1
  808613:	48 89 c7             	mov    rdi,rax
  808616:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1065
    ,TTY_CONNECT,0);
}
  808619:	90                   	nop
  80861a:	c9                   	leave  
  80861b:	c3                   	ret    

000000000080861c <tcgetpgrp>:
tcgetpgrp():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1066
pid_t tcgetpgrp(int fildes){
  80861c:	f3 0f 1e fa          	endbr64 
  808620:	55                   	push   rbp
  808621:	48 89 e5             	mov    rbp,rsp
  808624:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1067
    return current->fg_pgid;
  808627:	48 b8 48 85 40 00 00 	movabs rax,0x408548
  80862e:	00 00 00 
  808631:	48 8b 00             	mov    rax,QWORD PTR [rax]
  808634:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1068
}
  808637:	5d                   	pop    rbp
  808638:	c3                   	ret    

0000000000808639 <sys_ioctl>:
sys_ioctl():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1071
//===============

int sys_ioctl(int fildes, int request, unsigned long args){
  808639:	f3 0f 1e fa          	endbr64 
  80863d:	55                   	push   rbp
  80863e:	48 89 e5             	mov    rbp,rsp
  808641:	48 83 ec 10          	sub    rsp,0x10
  808645:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
  808648:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
  80864b:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1072
    current->openf[fildes]->f_ops->ioctl(current->openf[fildes]->dentry->dir_inode,current->openf[fildes]\
  80864f:	48 b8 48 85 40 00 00 	movabs rax,0x408548
  808656:	00 00 00 
  808659:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80865c:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
  80865f:	48 63 d2             	movsxd rdx,edx
  808662:	48 83 c2 1a          	add    rdx,0x1a
  808666:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
  80866b:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  80866f:	4c 8b 40 28          	mov    r8,QWORD PTR [rax+0x28]
  808673:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  808676:	48 63 d0             	movsxd rdx,eax
  808679:	48 b8 48 85 40 00 00 	movabs rax,0x408548
  808680:	00 00 00 
  808683:	48 8b 00             	mov    rax,QWORD PTR [rax]
  808686:	8b 4d fc             	mov    ecx,DWORD PTR [rbp-0x4]
  808689:	48 63 c9             	movsxd rcx,ecx
  80868c:	48 83 c1 1a          	add    rcx,0x1a
  808690:	48 8b 74 c8 08       	mov    rsi,QWORD PTR [rax+rcx*8+0x8]
  808695:	48 b8 48 85 40 00 00 	movabs rax,0x408548
  80869c:	00 00 00 
  80869f:	48 8b 00             	mov    rax,QWORD PTR [rax]
  8086a2:	8b 4d fc             	mov    ecx,DWORD PTR [rbp-0x4]
  8086a5:	48 63 c9             	movsxd rcx,ecx
  8086a8:	48 83 c1 1a          	add    rcx,0x1a
  8086ac:	48 8b 44 c8 08       	mov    rax,QWORD PTR [rax+rcx*8+0x8]
  8086b1:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  8086b5:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
  8086b9:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  8086bd:	48 89 c7             	mov    rdi,rax
  8086c0:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1074
    ,request,args);
  8086c3:	90                   	nop
  8086c4:	c9                   	leave  
  8086c5:	c3                   	ret    
  8086c6:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
  8086cd:	00 00 00 

00000000008086d0 <outb>:
outb():
  8086d0:	66 89 fa             	mov    dx,di
  8086d3:	66 89 f0             	mov    ax,si
  8086d6:	ee                   	out    dx,al
  8086d7:	e8 29 00 00 00       	call   808705 <io_delay>
  8086dc:	c3                   	ret    

00000000008086dd <outw>:
outw():
  8086dd:	66 89 fa             	mov    dx,di
  8086e0:	66 89 f0             	mov    ax,si
  8086e3:	66 ef                	out    dx,ax
  8086e5:	90                   	nop
  8086e6:	90                   	nop
  8086e7:	90                   	nop
  8086e8:	c3                   	ret    

00000000008086e9 <inb>:
inb():
  8086e9:	31 c0                	xor    eax,eax
  8086eb:	66 89 fa             	mov    dx,di
  8086ee:	ec                   	in     al,dx
  8086ef:	90                   	nop
  8086f0:	90                   	nop
  8086f1:	90                   	nop
  8086f2:	c3                   	ret    

00000000008086f3 <inw>:
inw():
  8086f3:	31 c0                	xor    eax,eax
  8086f5:	66 89 fa             	mov    dx,di
  8086f8:	66 ed                	in     ax,dx
  8086fa:	90                   	nop
  8086fb:	90                   	nop
  8086fc:	90                   	nop
  8086fd:	c3                   	ret    

00000000008086fe <eoi>:
eoi():
  8086fe:	b0 20                	mov    al,0x20
  808700:	e6 a0                	out    0xa0,al
  808702:	e6 20                	out    0x20,al
  808704:	c3                   	ret    

0000000000808705 <io_delay>:
io_delay():
  808705:	90                   	nop
  808706:	90                   	nop
  808707:	90                   	nop
  808708:	90                   	nop
  808709:	c3                   	ret    

000000000080870a <turn_on_int>:
turn_on_int():
  80870a:	b0 f8                	mov    al,0xf8
  80870c:	e6 21                	out    0x21,al
  80870e:	e8 f2 ff ff ff       	call   808705 <io_delay>
  808713:	b0 af                	mov    al,0xaf
  808715:	e6 a1                	out    0xa1,al
  808717:	e8 e9 ff ff ff       	call   808705 <io_delay>
  80871c:	b8 00 70 10 00       	mov    eax,0x107000
  808721:	0f 01 18             	lidt   [rax]
  808724:	90                   	nop
  808725:	90                   	nop
  808726:	90                   	nop
  808727:	90                   	nop
  808728:	c3                   	ret    

0000000000808729 <report_back_trace_of_err>:
report_back_trace_of_err():
  808729:	67 8b 44 24 04       	mov    eax,DWORD PTR [esp+0x4]
  80872e:	50                   	push   rax
  80872f:	68 38 87 80 00       	push   0x808738
  808734:	83 c4 08             	add    esp,0x8
  808737:	c3                   	ret    

0000000000808738 <bt_msg>:
bt_msg():
  808738:	65 72 72             	gs jb  8087ad <fill_desc+0x4e>
  80873b:	6f                   	outs   dx,DWORD PTR ds:[rsi]
  80873c:	72 20                	jb     80875e <init_gdt+0x11>
  80873e:	6f                   	outs   dx,DWORD PTR ds:[rsi]
  80873f:	63 63 75             	movsxd esp,DWORD PTR [rbx+0x75]
  808742:	72 73                	jb     8087b7 <fill_desc+0x58>
  808744:	20 61 74             	and    BYTE PTR [rcx+0x74],ah
  808747:	3a 25 78 5c 6e 00    	cmp    ah,BYTE PTR [rip+0x6e5c78]        # eee3c5 <_knl_end+0x2ee3c5>

000000000080874d <init_gdt>:
init_gdt():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:8
#include "memory.h"

descriptor *gdt=GDT_ADDR+KNL_BASE;
extern char *gdtptr;
int init_gdt()
{
  80874d:	f3 0f 1e fa          	endbr64 
  808751:	55                   	push   rbp
  808752:	48 89 e5             	mov    rbp,rsp
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:10
//    fill_desc(0x108000,108,SEG_SYS_TSS|SEG_PRESENT,4);
    asm volatile("mov $0x48,%ax\r\n"
  808755:	66 b8 48 00          	mov    ax,0x48
  808759:	0f 00 d8             	ltr    ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:12
                 "ltr %ax");  
}
  80875c:	90                   	nop
  80875d:	5d                   	pop    rbp
  80875e:	c3                   	ret    

000000000080875f <fill_desc>:
fill_desc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:14
void fill_desc(u64 base, u64 limit, u16 attr, u32 index)
{
  80875f:	f3 0f 1e fa          	endbr64 
  808763:	55                   	push   rbp
  808764:	48 89 e5             	mov    rbp,rsp
  808767:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  80876b:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  80876f:	89 d0                	mov    eax,edx
  808771:	89 4d e8             	mov    DWORD PTR [rbp-0x18],ecx
  808774:	66 89 45 ec          	mov    WORD PTR [rbp-0x14],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:15
    gdt[index].base_12=base&0xffff;
  808778:	48 b8 28 0e 81 00 00 	movabs rax,0x810e28
  80877f:	00 00 00 
  808782:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  808785:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
  808788:	48 c1 e0 04          	shl    rax,0x4
  80878c:	48 01 d0             	add    rax,rdx
  80878f:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  808793:	66 89 50 02          	mov    WORD PTR [rax+0x2],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:16
    gdt[index].base_3=(base>>16)&0xff;
  808797:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80879b:	48 c1 e8 10          	shr    rax,0x10
  80879f:	48 89 c1             	mov    rcx,rax
  8087a2:	48 b8 28 0e 81 00 00 	movabs rax,0x810e28
  8087a9:	00 00 00 
  8087ac:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  8087af:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
  8087b2:	48 c1 e0 04          	shl    rax,0x4
  8087b6:	48 01 d0             	add    rax,rdx
  8087b9:	89 ca                	mov    edx,ecx
  8087bb:	88 50 04             	mov    BYTE PTR [rax+0x4],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:17
    gdt[index].base_4=(base>>24)&0xff;
  8087be:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  8087c2:	48 c1 e8 18          	shr    rax,0x18
  8087c6:	48 89 c1             	mov    rcx,rax
  8087c9:	48 b8 28 0e 81 00 00 	movabs rax,0x810e28
  8087d0:	00 00 00 
  8087d3:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  8087d6:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
  8087d9:	48 c1 e0 04          	shl    rax,0x4
  8087dd:	48 01 d0             	add    rax,rdx
  8087e0:	89 ca                	mov    edx,ecx
  8087e2:	88 50 07             	mov    BYTE PTR [rax+0x7],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:18
    gdt[index].base_5678=(base>>32)&0xffffffff;
  8087e5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  8087e9:	48 c1 e8 20          	shr    rax,0x20
  8087ed:	48 89 c2             	mov    rdx,rax
  8087f0:	48 b8 28 0e 81 00 00 	movabs rax,0x810e28
  8087f7:	00 00 00 
  8087fa:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  8087fd:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
  808800:	48 c1 e0 04          	shl    rax,0x4
  808804:	48 01 c8             	add    rax,rcx
  808807:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:19
    gdt[index].limit_lo16=limit&0xffff;
  80880a:	48 b8 28 0e 81 00 00 	movabs rax,0x810e28
  808811:	00 00 00 
  808814:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  808817:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
  80881a:	48 c1 e0 04          	shl    rax,0x4
  80881e:	48 01 d0             	add    rax,rdx
  808821:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  808825:	66 89 10             	mov    WORD PTR [rax],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:20
    gdt[index].attr=attr|((limit>>8)&0xf0);
  808828:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80882c:	48 c1 e8 08          	shr    rax,0x8
  808830:	66 25 f0 00          	and    ax,0xf0
  808834:	48 ba 28 0e 81 00 00 	movabs rdx,0x810e28
  80883b:	00 00 00 
  80883e:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
  808841:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
  808844:	48 c1 e2 04          	shl    rdx,0x4
  808848:	48 01 ca             	add    rdx,rcx
  80884b:	66 0b 45 ec          	or     ax,WORD PTR [rbp-0x14]
  80884f:	66 89 42 05          	mov    WORD PTR [rdx+0x5],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:22

}
  808853:	90                   	nop
  808854:	5d                   	pop    rbp
  808855:	c3                   	ret    

0000000000808856 <fill_gate>:
fill_gate():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:25

void fill_gate(u32 index,u32 offset,u16 selector,u16 attr)
{
  808856:	f3 0f 1e fa          	endbr64 
  80885a:	55                   	push   rbp
  80885b:	48 89 e5             	mov    rbp,rsp
  80885e:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
  808861:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
  808864:	89 c8                	mov    eax,ecx
  808866:	66 89 55 e4          	mov    WORD PTR [rbp-0x1c],dx
  80886a:	66 89 45 e0          	mov    WORD PTR [rbp-0x20],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:26
    gate* ptr=gdt;
  80886e:	48 b8 28 0e 81 00 00 	movabs rax,0x810e28
  808875:	00 00 00 
  808878:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80887b:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:27
    ptr[index].offset_low=offset&0xffff;
  80887f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  808882:	48 c1 e0 04          	shl    rax,0x4
  808886:	48 89 c2             	mov    rdx,rax
  808889:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80888d:	48 01 d0             	add    rax,rdx
  808890:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
  808893:	66 89 10             	mov    WORD PTR [rax],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:28
    ptr[index].offset_high=(offset>>16)&0xffff;
  808896:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  808899:	48 c1 e0 04          	shl    rax,0x4
  80889d:	48 89 c2             	mov    rdx,rax
  8088a0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  8088a4:	48 01 d0             	add    rax,rdx
  8088a7:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
  8088aa:	c1 ea 10             	shr    edx,0x10
  8088ad:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:29
    ptr[index].selector=selector;
  8088b0:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  8088b3:	48 c1 e0 04          	shl    rax,0x4
  8088b7:	48 89 c2             	mov    rdx,rax
  8088ba:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  8088be:	48 01 c2             	add    rdx,rax
  8088c1:	0f b7 45 e4          	movzx  eax,WORD PTR [rbp-0x1c]
  8088c5:	66 89 42 02          	mov    WORD PTR [rdx+0x2],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:30
    ptr[index].attr=attr;
  8088c9:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  8088cc:	48 c1 e0 04          	shl    rax,0x4
  8088d0:	48 89 c2             	mov    rdx,rax
  8088d3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  8088d7:	48 01 c2             	add    rdx,rax
  8088da:	0f b7 45 e0          	movzx  eax,WORD PTR [rbp-0x20]
  8088de:	66 89 42 04          	mov    WORD PTR [rdx+0x4],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:31
}
  8088e2:	90                   	nop
  8088e3:	5d                   	pop    rbp
  8088e4:	c3                   	ret    

00000000008088e5 <fill_ldt_desc>:
fill_ldt_desc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:34

void fill_ldt_desc(u32 base, u32 limit,u16 attr,descriptor *desc)
{
  8088e5:	f3 0f 1e fa          	endbr64 
  8088e9:	55                   	push   rbp
  8088ea:	48 89 e5             	mov    rbp,rsp
  8088ed:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
  8088f0:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
  8088f3:	89 d0                	mov    eax,edx
  8088f5:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
  8088f9:	66 89 45 f4          	mov    WORD PTR [rbp-0xc],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:40
//    desc->base_lo16=base&0xffff;
//    desc->base_mid8=(base>>16)&0xff;
//    desc->base_hi8=(base>>24)&0xff;
//    desc->limit_lo16=limit&0xffff;
//    desc->attr=attr|(limit>>16&0xf)<<8;
  8088fd:	90                   	nop
  8088fe:	5d                   	pop    rbp
  8088ff:	c3                   	ret    

0000000000808900 <fill_desc>:
fill_desc():
  808900:	67 8b 44 24 04       	mov    eax,DWORD PTR [esp+0x4]
  808905:	67 8b 5c 24 08       	mov    ebx,DWORD PTR [esp+0x8]
  80890a:	67 8b 4c 24 0c       	mov    ecx,DWORD PTR [esp+0xc]
  80890f:	67 8b 54 24 10       	mov    edx,DWORD PTR [esp+0x10]
  808914:	be 00 60 00 00       	mov    esi,0x6000
  808919:	c1 e2 03             	shl    edx,0x3
  80891c:	01 d6                	add    esi,edx
  80891e:	66 67 89 1e          	mov    WORD PTR [esi],bx
  808922:	66 67 89 46 02       	mov    WORD PTR [esi+0x2],ax
  808927:	c1 e8 10             	shr    eax,0x10
  80892a:	67 88 46 04          	mov    BYTE PTR [esi+0x4],al
  80892e:	c1 eb 10             	shr    ebx,0x10
  808931:	67 88 5e 06          	mov    BYTE PTR [esi+0x6],bl
  808935:	67 88 66 07          	mov    BYTE PTR [esi+0x7],ah
  808939:	67 09 4e 05          	or     DWORD PTR [esi+0x5],ecx
  80893d:	c3                   	ret    

000000000080893e <clock_c>:
clock_c():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/clock.c:9
#include <devman.h>
#include <disk.h>
extern int manage_proc_lock;
extern int cur_proc;
extern struct process *task;
void clock_c(){
  80893e:	f3 0f 1e fa          	endbr64 
  808942:	55                   	push   rbp
  808943:	48 89 e5             	mov    rbp,rsp
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/clock.c:11
    //refresh_wnds();
    execute_request();
  808946:	b8 00 00 00 00       	mov    eax,0x0
  80894b:	48 ba 56 c3 80 00 00 	movabs rdx,0x80c356
  808952:	00 00 00 
  808955:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/clock.c:12
    do_req();
  808957:	b8 00 00 00 00       	mov    eax,0x0
  80895c:	48 ba 05 51 80 00 00 	movabs rdx,0x805105
  808963:	00 00 00 
  808966:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/clock.c:13
    if(!manage_proc_lock)
  808968:	48 b8 48 0d 81 00 00 	movabs rax,0x810d48
  80896f:	00 00 00 
  808972:	8b 00                	mov    eax,DWORD PTR [rax]
  808974:	85 c0                	test   eax,eax
  808976:	75 11                	jne    808989 <clock_c+0x4b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/clock.c:15
    {
        manage_proc();
  808978:	b8 00 00 00 00       	mov    eax,0x0
  80897d:	48 ba 9e 5b 80 00 00 	movabs rdx,0x805b9e
  808984:	00 00 00 
  808987:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/clock.c:18
    }
    //puts("1 disk req executed.");
  808989:	90                   	nop
  80898a:	5d                   	pop    rbp
  80898b:	c3                   	ret    
  80898c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000808990 <clock>:
clock():
  808990:	50                   	push   rax
  808991:	53                   	push   rbx
  808992:	51                   	push   rcx
  808993:	52                   	push   rdx
  808994:	57                   	push   rdi
  808995:	56                   	push   rsi
  808996:	41 50                	push   r8
  808998:	41 51                	push   r9
  80899a:	41 52                	push   r10
  80899c:	41 53                	push   r11
  80899e:	41 54                	push   r12
  8089a0:	41 55                	push   r13
  8089a2:	41 56                	push   r14
  8089a4:	41 57                	push   r15
  8089a6:	e8 bf d1 ff ff       	call   805b6a <save_rsp>
  8089ab:	66 8c c0             	mov    ax,es
  8089ae:	50                   	push   rax
  8089af:	66 8c d8             	mov    ax,ds
  8089b2:	50                   	push   rax
  8089b3:	66 b8 10 00          	mov    ax,0x10
  8089b7:	8e c0                	mov    es,eax
  8089b9:	8e d8                	mov    ds,eax

00000000008089bb <clock.normal_part>:
clock.normal_part():
  8089bb:	b0 20                	mov    al,0x20
  8089bd:	e6 a0                	out    0xa0,al
  8089bf:	e6 20                	out    0x20,al
  8089c1:	e8 78 ff ff ff       	call   80893e <clock_c>
  8089c6:	58                   	pop    rax
  8089c7:	8e d8                	mov    ds,eax
  8089c9:	58                   	pop    rax
  8089ca:	8e c0                	mov    es,eax
  8089cc:	41 5f                	pop    r15
  8089ce:	41 5e                	pop    r14
  8089d0:	41 5d                	pop    r13
  8089d2:	41 5c                	pop    r12
  8089d4:	41 5b                	pop    r11
  8089d6:	41 5a                	pop    r10
  8089d8:	41 59                	pop    r9
  8089da:	41 58                	pop    r8
  8089dc:	5e                   	pop    rsi
  8089dd:	5f                   	pop    rdi
  8089de:	5a                   	pop    rdx
  8089df:	59                   	pop    rcx
  8089e0:	5b                   	pop    rbx
  8089e1:	58                   	pop    rax
  8089e2:	48 cf                	iretq  

00000000008089e4 <execute>:
execute():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:116
    return ind;
}
*/

int execute(char *path, char **argv)
{
  8089e4:	f3 0f 1e fa          	endbr64 
  8089e8:	55                   	push   rbp
  8089e9:	48 89 e5             	mov    rbp,rsp
  8089ec:	48 83 ec 30          	sub    rsp,0x30
  8089f0:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  8089f4:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:119
    //尚未切换到目标进程
    //syscall(SYSCALL_REG_PROC, load_pe,0,0,0,0);
    int fno=-1,cwd_fno=-1;
  8089f8:	c7 45 ec ff ff ff ff 	mov    DWORD PTR [rbp-0x14],0xffffffff
  8089ff:	c7 45 fc ff ff ff ff 	mov    DWORD PTR [rbp-0x4],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:120
    if((fno=sys_open(path, O_EXEC)) <0)return -1;
  808a06:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  808a0a:	be 00 10 00 00       	mov    esi,0x1000
  808a0f:	48 89 c7             	mov    rdi,rax
  808a12:	48 b8 5e a8 80 00 00 	movabs rax,0x80a85e
  808a19:	00 00 00 
  808a1c:	ff d0                	call   rax
  808a1e:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
  808a21:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
  808a25:	79 0a                	jns    808a31 <execute+0x4d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:120 (discriminator 1)
  808a27:	b8 ff ff ff ff       	mov    eax,0xffffffff
  808a2c:	e9 da 00 00 00       	jmp    808b0b <execute+0x127>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:122
    //
    char *p=path;
  808a31:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  808a35:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:123
    for(;*p!='\0';p++);
  808a39:	eb 05                	jmp    808a40 <execute+0x5c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:123 (discriminator 2)
  808a3b:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:123 (discriminator 1)
  808a40:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  808a44:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  808a47:	84 c0                	test   al,al
  808a49:	75 f0                	jne    808a3b <execute+0x57>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:124
    for(;*p!='/'&&p>path;p--);
  808a4b:	eb 05                	jmp    808a52 <execute+0x6e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:124 (discriminator 3)
  808a4d:	48 83 6d f0 01       	sub    QWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:124 (discriminator 1)
  808a52:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  808a56:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  808a59:	3c 2f                	cmp    al,0x2f
  808a5b:	74 0a                	je     808a67 <execute+0x83>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:124 (discriminator 2)
  808a5d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  808a61:	48 3b 45 d8          	cmp    rax,QWORD PTR [rbp-0x28]
  808a65:	77 e6                	ja     808a4d <execute+0x69>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:125
    if(p>path)
  808a67:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  808a6b:	48 3b 45 d8          	cmp    rax,QWORD PTR [rbp-0x28]
  808a6f:	76 36                	jbe    808aa7 <execute+0xc3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:127
    {
        *p='\0';
  808a71:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  808a75:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:128
        if((cwd_fno=sys_open(path, O_DIRECTORY)) <0)return -1;
  808a78:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  808a7c:	be 00 40 00 00       	mov    esi,0x4000
  808a81:	48 89 c7             	mov    rdi,rax
  808a84:	48 b8 5e a8 80 00 00 	movabs rax,0x80a85e
  808a8b:	00 00 00 
  808a8e:	ff d0                	call   rax
  808a90:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
  808a93:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
  808a97:	79 07                	jns    808aa0 <execute+0xbc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:128 (discriminator 1)
  808a99:	b8 ff ff ff ff       	mov    eax,0xffffffff
  808a9e:	eb 6b                	jmp    808b0b <execute+0x127>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:129
        *p='/';
  808aa0:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  808aa4:	c6 00 2f             	mov    BYTE PTR [rax],0x2f
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:133
    }
    extern struct file opened[];
    extern struct process task[];
    int pi= reg_proc(proc_start, &opened[cwd_fno], &opened[fno]);
  808aa7:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  808aaa:	48 63 d0             	movsxd rdx,eax
  808aad:	48 89 d0             	mov    rax,rdx
  808ab0:	48 c1 e0 02          	shl    rax,0x2
  808ab4:	48 01 d0             	add    rax,rdx
  808ab7:	48 c1 e0 03          	shl    rax,0x3
  808abb:	48 ba 60 06 40 00 00 	movabs rdx,0x400660
  808ac2:	00 00 00 
  808ac5:	48 01 c2             	add    rdx,rax
  808ac8:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  808acb:	48 63 c8             	movsxd rcx,eax
  808ace:	48 89 c8             	mov    rax,rcx
  808ad1:	48 c1 e0 02          	shl    rax,0x2
  808ad5:	48 01 c8             	add    rax,rcx
  808ad8:	48 c1 e0 03          	shl    rax,0x3
  808adc:	48 b9 60 06 40 00 00 	movabs rcx,0x400660
  808ae3:	00 00 00 
  808ae6:	48 01 c1             	add    rcx,rax
  808ae9:	48 b8 db 8c 80 00 00 	movabs rax,0x808cdb
  808af0:	00 00 00 
  808af3:	48 89 ce             	mov    rsi,rcx
  808af6:	48 89 c7             	mov    rdi,rax
  808af9:	48 b8 fd 65 80 00 00 	movabs rax,0x8065fd
  808b00:	00 00 00 
  808b03:	ff d0                	call   rax
  808b05:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:134
    return pi;
  808b08:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:135
}
  808b0b:	c9                   	leave  
  808b0c:	c3                   	ret    

0000000000808b0d <sys_execve>:
sys_execve():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:137

int sys_execve(char *path,char **argv){
  808b0d:	f3 0f 1e fa          	endbr64 
  808b11:	55                   	push   rbp
  808b12:	48 89 e5             	mov    rbp,rsp
  808b15:	48 83 ec 30          	sub    rsp,0x30
  808b19:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  808b1d:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:138
    int fno=-1,cwd_fno=-1;
  808b21:	c7 45 fc ff ff ff ff 	mov    DWORD PTR [rbp-0x4],0xffffffff
  808b28:	c7 45 f8 ff ff ff ff 	mov    DWORD PTR [rbp-0x8],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:139
    if((fno=sys_open(path, O_EXEC)) <0)return -ENOENT;
  808b2f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  808b33:	be 00 10 00 00       	mov    esi,0x1000
  808b38:	48 89 c7             	mov    rdi,rax
  808b3b:	48 b8 5e a8 80 00 00 	movabs rax,0x80a85e
  808b42:	00 00 00 
  808b45:	ff d0                	call   rax
  808b47:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
  808b4a:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
  808b4e:	79 0a                	jns    808b5a <sys_execve+0x4d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:139 (discriminator 1)
  808b50:	b8 d3 ff ff ff       	mov    eax,0xffffffd3
  808b55:	e9 ed 00 00 00       	jmp    808c47 <sys_execve+0x13a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:152
//        if((cwd_fno=sys_open(path, O_DIRECTORY)) <0)return -1;
//        *p='/';
//    }
    extern struct file opened[];
    extern struct process task[];
    if(sys_close(current->exef-opened)<0)return -1;
  808b5a:	48 b8 48 85 40 00 00 	movabs rax,0x408548
  808b61:	00 00 00 
  808b64:	48 8b 00             	mov    rax,QWORD PTR [rax]
  808b67:	48 8b 80 d0 00 00 00 	mov    rax,QWORD PTR [rax+0xd0]
  808b6e:	48 ba 60 06 40 00 00 	movabs rdx,0x400660
  808b75:	00 00 00 
  808b78:	48 29 d0             	sub    rax,rdx
  808b7b:	48 c1 f8 03          	sar    rax,0x3
  808b7f:	48 89 c2             	mov    rdx,rax
  808b82:	48 b8 cd cc cc cc cc 	movabs rax,0xcccccccccccccccd
  808b89:	cc cc cc 
  808b8c:	48 0f af c2          	imul   rax,rdx
  808b90:	89 c7                	mov    edi,eax
  808b92:	48 b8 6a ae 80 00 00 	movabs rax,0x80ae6a
  808b99:	00 00 00 
  808b9c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:154

    void *retp= load_pe;
  808b9e:	48 b8 28 8d 80 00 00 	movabs rax,0x808d28
  808ba5:	00 00 00 
  808ba8:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:155
    current->exef=&opened[fno];//改变执行文件
  808bac:	48 b8 48 85 40 00 00 	movabs rax,0x408548
  808bb3:	00 00 00 
  808bb6:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  808bb9:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  808bbc:	48 63 c8             	movsxd rcx,eax
  808bbf:	48 89 c8             	mov    rax,rcx
  808bc2:	48 c1 e0 02          	shl    rax,0x2
  808bc6:	48 01 c8             	add    rax,rcx
  808bc9:	48 c1 e0 03          	shl    rax,0x3
  808bcd:	48 b9 60 06 40 00 00 	movabs rcx,0x400660
  808bd4:	00 00 00 
  808bd7:	48 01 c8             	add    rax,rcx
  808bda:	48 89 82 d0 00 00 00 	mov    QWORD PTR [rdx+0xd0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:158
    //重新设置进程数据
    //清空原来的页表
    release_mmap(current);
  808be1:	48 b8 48 85 40 00 00 	movabs rax,0x408548
  808be8:	00 00 00 
  808beb:	48 8b 00             	mov    rax,QWORD PTR [rax]
  808bee:	48 89 c7             	mov    rdi,rax
  808bf1:	48 b8 57 7b 80 00 00 	movabs rax,0x807b57
  808bf8:	00 00 00 
  808bfb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:159
    current->regs.rsp=STACK_TOP;//清空栈
  808bfd:	48 b8 48 85 40 00 00 	movabs rax,0x408548
  808c04:	00 00 00 
  808c07:	48 8b 00             	mov    rax,QWORD PTR [rax]
  808c0a:	48 be 00 f0 ff ff ff 	movabs rsi,0x7ffffffff000
  808c11:	7f 00 00 
  808c14:	48 89 b0 7c 02 00 00 	mov    QWORD PTR [rax+0x27c],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:162
    extern TSS* tss;
    //sysret直接返回到load_pe加载新程序，然后直接开始运行新程序的main
    stack_store_regs *rs=tss->ists[0]- sizeof(stack_store_regs);
  808c1b:	48 b8 20 0e 81 00 00 	movabs rax,0x810e20
  808c22:	00 00 00 
  808c25:	48 8b 00             	mov    rax,QWORD PTR [rax]
  808c28:	48 8b 40 24          	mov    rax,QWORD PTR [rax+0x24]
  808c2c:	48 2d a8 00 00 00    	sub    rax,0xa8
  808c32:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:163
    rs->rcx=retp;
  808c36:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  808c3a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  808c3e:	48 89 50 68          	mov    QWORD PTR [rax+0x68],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:164
    return 0;
  808c42:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:165
}
  808c47:	c9                   	leave  
  808c48:	c3                   	ret    

0000000000808c49 <exec_call>:
exec_call():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:167
int exec_call(char *path)
{
  808c49:	f3 0f 1e fa          	endbr64 
  808c4d:	55                   	push   rbp
  808c4e:	48 89 e5             	mov    rbp,rsp
  808c51:	48 83 ec 20          	sub    rsp,0x20
  808c55:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:168
    int pi= execute(path, NULL);
  808c59:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  808c5d:	be 00 00 00 00       	mov    esi,0x0
  808c62:	48 89 c7             	mov    rdi,rax
  808c65:	48 b8 e4 89 80 00 00 	movabs rax,0x8089e4
  808c6c:	00 00 00 
  808c6f:	ff d0                	call   rax
  808c71:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:169
    int tss= _TSS_IND(pi)*8;
  808c74:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  808c77:	01 c0                	add    eax,eax
  808c79:	83 c0 05             	add    eax,0x5
  808c7c:	c1 e0 03             	shl    eax,0x3
  808c7f:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:172
    extern struct process task[];
    extern int cur_proc;
    switch_proc_tss(pi);
  808c82:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  808c85:	89 c7                	mov    edi,eax
  808c87:	48 b8 d8 5d 80 00 00 	movabs rax,0x805dd8
  808c8e:	00 00 00 
  808c91:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:173
    while(task[pi].stat != TASK_ZOMBIE);
  808c93:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:173 (discriminator 1)
  808c94:	48 ba 40 85 40 00 00 	movabs rdx,0x408540
  808c9b:	00 00 00 
  808c9e:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  808ca1:	48 98                	cdqe   
  808ca3:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  808caa:	48 01 d0             	add    rax,rdx
  808cad:	48 83 c0 10          	add    rax,0x10
  808cb1:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
  808cb4:	83 f8 04             	cmp    eax,0x4
  808cb7:	75 db                	jne    808c94 <exec_call+0x4b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:174
    return task[pi].exit_code;
  808cb9:	48 ba 40 85 40 00 00 	movabs rdx,0x408540
  808cc0:	00 00 00 
  808cc3:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  808cc6:	48 98                	cdqe   
  808cc8:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  808ccf:	48 01 d0             	add    rax,rdx
  808cd2:	48 83 c0 20          	add    rax,0x20
  808cd6:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:175
}
  808cd9:	c9                   	leave  
  808cda:	c3                   	ret    

0000000000808cdb <proc_start>:
proc_start():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:177
int proc_start()
{
  808cdb:	f3 0f 1e fa          	endbr64 
  808cdf:	55                   	push   rbp
  808ce0:	48 89 e5             	mov    rbp,rsp
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:180
    extern struct process task[];
    extern int cur_proc;
    load_pe(&task[cur_proc]);
  808ce3:	48 b8 cc 85 40 00 00 	movabs rax,0x4085cc
  808cea:	00 00 00 
  808ced:	8b 00                	mov    eax,DWORD PTR [rax]
  808cef:	48 98                	cdqe   
  808cf1:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  808cf8:	48 ba 40 85 40 00 00 	movabs rdx,0x408540
  808cff:	00 00 00 
  808d02:	48 01 d0             	add    rax,rdx
  808d05:	48 89 c7             	mov    rdi,rax
  808d08:	48 b8 28 8d 80 00 00 	movabs rax,0x808d28
  808d0f:	00 00 00 
  808d12:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:182
    //释放进程资源
    sys_exit(0);
  808d14:	bf 00 00 00 00       	mov    edi,0x0
  808d19:	48 b8 ae 65 80 00 00 	movabs rax,0x8065ae
  808d20:	00 00 00 
  808d23:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:183
}
  808d25:	90                   	nop
  808d26:	5d                   	pop    rbp
  808d27:	c3                   	ret    

0000000000808d28 <load_pe>:
load_pe():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:186
//在cr3切换到目标进程下的加载程序
int load_pe(struct process *proc)
{
  808d28:	f3 0f 1e fa          	endbr64 
  808d2c:	55                   	push   rbp
  808d2d:	48 89 e5             	mov    rbp,rsp
  808d30:	48 81 ec e0 02 00 00 	sub    rsp,0x2e0
  808d37:	48 89 bd 28 fd ff ff 	mov    QWORD PTR [rbp-0x2d8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:188
    // 读取文件头
    struct file *f=proc->exef;
  808d3e:	48 8b 85 28 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2d8]
  808d45:	48 8b 80 d0 00 00 00 	mov    rax,QWORD PTR [rax+0xd0]
  808d4c:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:189
    int exefno=-1;
  808d50:	c7 45 fc ff ff ff ff 	mov    DWORD PTR [rbp-0x4],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:190
    for(int i=0;i<MAX_PROC_OPENF;i++)
  808d57:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
  808d5e:	eb 2e                	jmp    808d8e <load_pe+0x66>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:191
        if(current->openf[i]==f)
  808d60:	48 b8 48 85 40 00 00 	movabs rax,0x408548
  808d67:	00 00 00 
  808d6a:	48 8b 00             	mov    rax,QWORD PTR [rax]
  808d6d:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
  808d70:	48 63 d2             	movsxd rdx,edx
  808d73:	48 83 c2 1a          	add    rdx,0x1a
  808d77:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
  808d7c:	48 39 45 98          	cmp    QWORD PTR [rbp-0x68],rax
  808d80:	75 08                	jne    808d8a <load_pe+0x62>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:193
        {
            exefno=i;
  808d82:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  808d85:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:194
            break;
  808d88:	eb 0a                	jmp    808d94 <load_pe+0x6c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:190 (discriminator 2)
    for(int i=0;i<MAX_PROC_OPENF;i++)
  808d8a:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:190 (discriminator 1)
  808d8e:	83 7d f8 1f          	cmp    DWORD PTR [rbp-0x8],0x1f
  808d92:	7e cc                	jle    808d60 <load_pe+0x38>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:196
        }
    if(exefno==-1)return ERR;
  808d94:	83 7d fc ff          	cmp    DWORD PTR [rbp-0x4],0xffffffff
  808d98:	75 0a                	jne    808da4 <load_pe+0x7c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:196 (discriminator 1)
  808d9a:	b8 ff ff ff ff       	mov    eax,0xffffffff
  808d9f:	e9 d4 07 00 00       	jmp    809578 <load_pe+0x850>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:200

    IMAGE_DOS_HEADER tdh;
    IMAGE_NT_HEADERS32 tnth;
    sys_read(exefno, &tdh, sizeof(tdh));
  808da4:	48 8d 8d 60 fe ff ff 	lea    rcx,[rbp-0x1a0]
  808dab:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  808dae:	ba 44 00 00 00       	mov    edx,0x44
  808db3:	48 89 ce             	mov    rsi,rcx
  808db6:	89 c7                	mov    edi,eax
  808db8:	48 b8 35 af 80 00 00 	movabs rax,0x80af35
  808dbf:	00 00 00 
  808dc2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:201
    sys_lseek(exefno,tdh.e_lfanew,SEEK_SET);
  808dc4:	48 8b 85 9c fe ff ff 	mov    rax,QWORD PTR [rbp-0x164]
  808dcb:	48 89 c1             	mov    rcx,rax
  808dce:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  808dd1:	ba 00 00 00 00       	mov    edx,0x0
  808dd6:	48 89 ce             	mov    rsi,rcx
  808dd9:	89 c7                	mov    edi,eax
  808ddb:	48 b8 a1 b0 80 00 00 	movabs rax,0x80b0a1
  808de2:	00 00 00 
  808de5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:202
    sys_read(exefno, &tnth, sizeof(tnth));
  808de7:	48 8d 8d 50 fd ff ff 	lea    rcx,[rbp-0x2b0]
  808dee:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  808df1:	ba 0c 01 00 00       	mov    edx,0x10c
  808df6:	48 89 ce             	mov    rsi,rcx
  808df9:	89 c7                	mov    edi,eax
  808dfb:	48 b8 35 af 80 00 00 	movabs rax,0x80af35
  808e02:	00 00 00 
  808e05:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:205

    //是否需要移动base(先不检查)
    addr_t nbase=tnth.OptionalHeader.ImageBase;
  808e07:	48 8b 85 84 fd ff ff 	mov    rax,QWORD PTR [rbp-0x27c]
  808e0e:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:206
    int pgn=tnth.OptionalHeader.SizeOfImage/PAGE_SIZE;
  808e12:	8b 85 a4 fd ff ff    	mov    eax,DWORD PTR [rbp-0x25c]
  808e18:	c1 e8 0c             	shr    eax,0xc
  808e1b:	89 45 8c             	mov    DWORD PTR [rbp-0x74],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:231
//        break;
//    }

    //proc->tss.eip=tnth.OptionalHeader.AddressOfEntryPoint+nbase;
    //存放文件头
    sys_lseek(exefno,0,SEEK_SET);
  808e1e:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  808e21:	ba 00 00 00 00       	mov    edx,0x0
  808e26:	be 00 00 00 00       	mov    esi,0x0
  808e2b:	89 c7                	mov    edi,eax
  808e2d:	48 b8 a1 b0 80 00 00 	movabs rax,0x80b0a1
  808e34:	00 00 00 
  808e37:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:232
    sys_read(exefno, nbase, PAGE_SIZE);
  808e39:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
  808e3d:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  808e40:	ba 00 10 00 00       	mov    edx,0x1000
  808e45:	48 89 ce             	mov    rsi,rcx
  808e48:	89 c7                	mov    edi,eax
  808e4a:	48 b8 35 af 80 00 00 	movabs rax,0x80af35
  808e51:	00 00 00 
  808e54:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:234
    //dos头
    PIMAGE_DOS_HEADER dosh=nbase;
  808e56:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  808e5a:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:235
    PIMAGE_NT_HEADERS64 nth=nbase+dosh->e_lfanew;
  808e5e:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  808e62:	48 8b 50 3c          	mov    rdx,QWORD PTR [rax+0x3c]
  808e66:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  808e6a:	48 01 d0             	add    rax,rdx
  808e6d:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:236
    PIMAGE_FILE_HEADER fh=&nth->FileHeader;
  808e74:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  808e7b:	48 83 c0 04          	add    rax,0x4
  808e7f:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:239
    //为新进程分配内存页
    //计算所需的页
    int prog_size=nth->OptionalHeader.SizeOfImage;
  808e86:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  808e8d:	8b 40 50             	mov    eax,DWORD PTR [rax+0x50]
  808e90:	89 85 6c ff ff ff    	mov    DWORD PTR [rbp-0x94],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:240
    int page_count=prog_size/4096;
  808e96:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
  808e9c:	8d 90 ff 0f 00 00    	lea    edx,[rax+0xfff]
  808ea2:	85 c0                	test   eax,eax
  808ea4:	0f 48 c2             	cmovs  eax,edx
  808ea7:	c1 f8 0c             	sar    eax,0xc
  808eaa:	89 85 68 ff ff ff    	mov    DWORD PTR [rbp-0x98],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:242

    addr_t shell_addr=nth->OptionalHeader.AddressOfEntryPoint+nbase;
  808eb0:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  808eb7:	8b 40 28             	mov    eax,DWORD PTR [rax+0x28]
  808eba:	89 c2                	mov    edx,eax
  808ebc:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  808ec0:	48 01 d0             	add    rax,rdx
  808ec3:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:243
    int page_index_item_count=page_count/1024+page_count%1024==0?0:1;
  808eca:	8b 85 68 ff ff ff    	mov    eax,DWORD PTR [rbp-0x98]
  808ed0:	8d 90 ff 03 00 00    	lea    edx,[rax+0x3ff]
  808ed6:	85 c0                	test   eax,eax
  808ed8:	0f 48 c2             	cmovs  eax,edx
  808edb:	c1 f8 0a             	sar    eax,0xa
  808ede:	89 c1                	mov    ecx,eax
  808ee0:	8b 85 68 ff ff ff    	mov    eax,DWORD PTR [rbp-0x98]
  808ee6:	99                   	cdq    
  808ee7:	c1 ea 16             	shr    edx,0x16
  808eea:	01 d0                	add    eax,edx
  808eec:	25 ff 03 00 00       	and    eax,0x3ff
  808ef1:	29 d0                	sub    eax,edx
  808ef3:	01 c8                	add    eax,ecx
  808ef5:	85 c0                	test   eax,eax
  808ef7:	0f 95 c0             	setne  al
  808efa:	0f b6 c0             	movzx  eax,al
  808efd:	89 85 5c ff ff ff    	mov    DWORD PTR [rbp-0xa4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:244
    int start_pgind_item=shell_addr/PAGE_INDEX_SIZE;
  808f03:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
  808f0a:	48 c1 e8 15          	shr    rax,0x15
  808f0e:	89 85 58 ff ff ff    	mov    DWORD PTR [rbp-0xa8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:247

    //sys_read sections
    PIMAGE_SECTION_HEADER psec=(u32)nth+sizeof(IMAGE_NT_HEADERS32);
  808f14:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  808f1b:	89 c0                	mov    eax,eax
  808f1d:	48 05 0c 01 00 00    	add    rax,0x10c
  808f23:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:249
    int data_start=sizeof(IMAGE_DOS_HEADER)+sizeof(IMAGE_NT_HEADERS32)+\
    nth->FileHeader.NumberOfSections*sizeof(IMAGE_SECTION_HEADER);
  808f27:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  808f2e:	0f b7 40 06          	movzx  eax,WORD PTR [rax+0x6]
  808f32:	0f b7 d0             	movzx  edx,ax
  808f35:	89 d0                	mov    eax,edx
  808f37:	c1 e0 02             	shl    eax,0x2
  808f3a:	01 d0                	add    eax,edx
  808f3c:	c1 e0 03             	shl    eax,0x3
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:248
    int data_start=sizeof(IMAGE_DOS_HEADER)+sizeof(IMAGE_NT_HEADERS32)+\
  808f3f:	05 50 01 00 00       	add    eax,0x150
  808f44:	89 85 54 ff ff ff    	mov    DWORD PTR [rbp-0xac],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:250
    int align=nth->OptionalHeader.FileAlignment;
  808f4a:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  808f51:	8b 40 3c             	mov    eax,DWORD PTR [rax+0x3c]
  808f54:	89 85 50 ff ff ff    	mov    DWORD PTR [rbp-0xb0],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:251
    data_start=data_start%align?data_start-data_start%align+align:data_start;
  808f5a:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
  808f60:	99                   	cdq    
  808f61:	f7 bd 50 ff ff ff    	idiv   DWORD PTR [rbp-0xb0]
  808f67:	89 d0                	mov    eax,edx
  808f69:	85 c0                	test   eax,eax
  808f6b:	74 23                	je     808f90 <load_pe+0x268>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:251 (discriminator 1)
  808f6d:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
  808f73:	99                   	cdq    
  808f74:	f7 bd 50 ff ff ff    	idiv   DWORD PTR [rbp-0xb0]
  808f7a:	89 d1                	mov    ecx,edx
  808f7c:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
  808f82:	29 c8                	sub    eax,ecx
  808f84:	89 c2                	mov    edx,eax
  808f86:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
  808f8c:	01 d0                	add    eax,edx
  808f8e:	eb 06                	jmp    808f96 <load_pe+0x26e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:251 (discriminator 2)
  808f90:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:251 (discriminator 4)
  808f96:	89 85 54 ff ff ff    	mov    DWORD PTR [rbp-0xac],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:252 (discriminator 4)
    for(int i=0;i<nth->FileHeader.NumberOfSections;i++,psec++)
  808f9c:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
  808fa3:	eb 79                	jmp    80901e <load_pe+0x2f6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:254
    {
        int disca=psec->Characteristics&IMAGE_SCN_MEM_DISCARDABLE;
  808fa5:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  808fa9:	8b 40 24             	mov    eax,DWORD PTR [rax+0x24]
  808fac:	25 00 00 00 02       	and    eax,0x2000000
  808fb1:	89 85 c0 fe ff ff    	mov    DWORD PTR [rbp-0x140],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:255
        if(disca)
  808fb7:	83 bd c0 fe ff ff 00 	cmp    DWORD PTR [rbp-0x140],0x0
  808fbe:	75 54                	jne    809014 <load_pe+0x2ec>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:258
            continue;
        //直接读，缺页内核解决
        sys_lseek(exefno,psec->PointerToRawData,SEEK_SET);
  808fc0:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  808fc4:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
  808fc7:	89 c1                	mov    ecx,eax
  808fc9:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  808fcc:	ba 00 00 00 00       	mov    edx,0x0
  808fd1:	48 89 ce             	mov    rsi,rcx
  808fd4:	89 c7                	mov    edi,eax
  808fd6:	48 b8 a1 b0 80 00 00 	movabs rax,0x80b0a1
  808fdd:	00 00 00 
  808fe0:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:259
        sys_read(exefno, psec->VirtualAddress + nbase,  psec->SizeOfRawData);
  808fe2:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  808fe6:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
  808fe9:	89 c2                	mov    edx,eax
  808feb:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  808fef:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
  808ff2:	89 c1                	mov    ecx,eax
  808ff4:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  808ff8:	48 01 c8             	add    rax,rcx
  808ffb:	48 89 c1             	mov    rcx,rax
  808ffe:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  809001:	48 89 ce             	mov    rsi,rcx
  809004:	89 c7                	mov    edi,eax
  809006:	48 b8 35 af 80 00 00 	movabs rax,0x80af35
  80900d:	00 00 00 
  809010:	ff d0                	call   rax
  809012:	eb 01                	jmp    809015 <load_pe+0x2ed>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:256
            continue;
  809014:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:252 (discriminator 2)
    for(int i=0;i<nth->FileHeader.NumberOfSections;i++,psec++)
  809015:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
  809019:	48 83 45 f0 28       	add    QWORD PTR [rbp-0x10],0x28
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:252 (discriminator 1)
  80901e:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  809025:	0f b7 40 06          	movzx  eax,WORD PTR [rax+0x6]
  809029:	0f b7 c0             	movzx  eax,ax
  80902c:	39 45 ec             	cmp    DWORD PTR [rbp-0x14],eax
  80902f:	0f 8c 70 ff ff ff    	jl     808fa5 <load_pe+0x27d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:264

    }

    //通过导入表加载需要的dll
    PIMAGE_DATA_DIRECTORY impd=&nth->OptionalHeader.DataDirectory[1];
  809035:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  80903c:	48 05 90 00 00 00    	add    rax,0x90
  809042:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:265
    if(impd->Size>0)
  809049:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  809050:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
  809053:	85 c0                	test   eax,eax
  809055:	0f 84 a2 02 00 00    	je     8092fd <load_pe+0x5d5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:267
    {
        int tmpi=impd->VirtualAddress+nbase;
  80905b:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  809062:	8b 10                	mov    edx,DWORD PTR [rax]
  809064:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  809068:	01 d0                	add    eax,edx
  80906a:	89 85 44 ff ff ff    	mov    DWORD PTR [rbp-0xbc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:268
        PIMAGE_IMPORT_DESCRIPTOR impdes=tmpi;
  809070:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
  809076:	48 98                	cdqe   
  809078:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:270
        int dllp;
        while (impdes->Characteristics)
  80907c:	e9 6e 02 00 00       	jmp    8092ef <load_pe+0x5c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:273
        {
            //加载dll
            char *dllname=impdes->Name+nbase;
  809081:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  809085:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
  809088:	89 c2                	mov    edx,eax
  80908a:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  80908e:	48 01 d0             	add    rax,rdx
  809091:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:276
            //此处应有加载dll代码
            int dlli;
            if(strcmp(dllname,"sys.dll")==0)//加载系统dll的部分由内核已经完成
  809098:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
  80909f:	48 ba 47 8b 81 00 00 	movabs rdx,0x818b47
  8090a6:	00 00 00 
  8090a9:	48 89 d6             	mov    rsi,rdx
  8090ac:	48 89 c7             	mov    rdi,rax
  8090af:	48 b8 10 06 81 00 00 	movabs rax,0x810610
  8090b6:	00 00 00 
  8090b9:	ff d0                	call   rax
  8090bb:	85 c0                	test   eax,eax
  8090bd:	75 09                	jne    8090c8 <load_pe+0x3a0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:278
            {
                dllp=0x1c00000;
  8090bf:	c7 45 dc 00 00 c0 01 	mov    DWORD PTR [rbp-0x24],0x1c00000
  8090c6:	eb 33                	jmp    8090fb <load_pe+0x3d3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:281
            }else{
                //load_pe要记录module的加载
                dlli= load_pe(proc);
  8090c8:	48 8b 85 28 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2d8]
  8090cf:	48 89 c7             	mov    rdi,rax
  8090d2:	48 b8 28 8d 80 00 00 	movabs rax,0x808d28
  8090d9:	00 00 00 
  8090dc:	ff d0                	call   rax
  8090de:	89 85 34 ff ff ff    	mov    DWORD PTR [rbp-0xcc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:284
                //dlli=load_library(dllname);
                //这个是线性地址
                dllp=get_module_addr(dlli);
  8090e4:	8b 85 34 ff ff ff    	mov    eax,DWORD PTR [rbp-0xcc]
  8090ea:	89 c7                	mov    edi,eax
  8090ec:	48 b8 7a 95 80 00 00 	movabs rax,0x80957a
  8090f3:	00 00 00 
  8090f6:	ff d0                	call   rax
  8090f8:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:287
            }
            //从线性地址查页表找到物理地址
            PIMAGE_DOS_HEADER dlldos=dllp;
  8090fb:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  8090fe:	48 98                	cdqe   
  809100:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:288
            PIMAGE_NT_HEADERS32 dllnth=dllp+dlldos->e_lfanew;
  809107:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  80910a:	48 63 d0             	movsxd rdx,eax
  80910d:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  809114:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
  809118:	48 01 d0             	add    rax,rdx
  80911b:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:289
            PIMAGE_EXPORT_DIRECTORY dllexp=(dllnth->OptionalHeader.DataDirectory[0].VirtualAddress+dllp);
  809122:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
  809129:	8b 90 8c 00 00 00    	mov    edx,DWORD PTR [rax+0x8c]
  80912f:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  809132:	01 d0                	add    eax,edx
  809134:	89 c0                	mov    eax,eax
  809136:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:290
            int funcn=dllexp->NumberOfNames;
  80913d:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  809144:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
  809147:	89 85 14 ff ff ff    	mov    DWORD PTR [rbp-0xec],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:291
            char **fnames=dllexp->AddressOfNames+dllp;
  80914d:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  809154:	8b 50 20             	mov    edx,DWORD PTR [rax+0x20]
  809157:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  80915a:	01 d0                	add    eax,edx
  80915c:	89 c0                	mov    eax,eax
  80915e:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:292
            int *funcaddrs=dllexp->AddressOfFunctions+dllp;
  809165:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  80916c:	8b 50 1c             	mov    edx,DWORD PTR [rax+0x1c]
  80916f:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  809172:	01 d0                	add    eax,edx
  809174:	89 c0                	mov    eax,eax
  809176:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:293
            short *funcords=dllexp->AddressOfNameOrdinals+dllp;
  80917d:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  809184:	8b 50 24             	mov    edx,DWORD PTR [rax+0x24]
  809187:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  80918a:	01 d0                	add    eax,edx
  80918c:	89 c0                	mov    eax,eax
  80918e:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:295
            //寻找nameordinal的base（最小值），里面的数据加上base才是真正的序号
            unsigned int ord_base=dllexp->Base;
  809195:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  80919c:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
  80919f:	89 85 f4 fe ff ff    	mov    DWORD PTR [rbp-0x10c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:297
            //开始将导入表IAT的内容更新为函数地址
            unsigned int *iataddrs=impdes->FirstThunk+nbase;//IAT和INT内容一样，只用IAT
  8091a5:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  8091a9:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
  8091ac:	89 c2                	mov    edx,eax
  8091ae:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  8091b2:	48 01 d0             	add    rax,rdx
  8091b5:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:298
            char **siataddrs=impdes->FirstThunk+nbase;
  8091b9:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  8091bd:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
  8091c0:	89 c2                	mov    edx,eax
  8091c2:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  8091c6:	48 01 d0             	add    rax,rdx
  8091c9:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:299
            while (*iataddrs)
  8091cd:	e9 0a 01 00 00       	jmp    8092dc <load_pe+0x5b4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:302
            {
                //判断是序号导入还是名称导入
                if(((unsigned)*iataddrs)&0x80000000)
  8091d2:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  8091d6:	8b 00                	mov    eax,DWORD PTR [rax]
  8091d8:	85 c0                	test   eax,eax
  8091da:	79 43                	jns    80921f <load_pe+0x4f7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:305
                {
                    //序号导入
                    unsigned int ord=((*iataddrs)&0x7fffffff)-ord_base;
  8091dc:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  8091e0:	8b 00                	mov    eax,DWORD PTR [rax]
  8091e2:	25 ff ff ff 7f       	and    eax,0x7fffffff
  8091e7:	2b 85 f4 fe ff ff    	sub    eax,DWORD PTR [rbp-0x10c]
  8091ed:	89 85 e0 fe ff ff    	mov    DWORD PTR [rbp-0x120],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:306
                    *iataddrs=funcaddrs[ord]+dllp;
  8091f3:	8b 85 e0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x120]
  8091f9:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
  809200:	00 
  809201:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
  809208:	48 01 d0             	add    rax,rdx
  80920b:	8b 10                	mov    edx,DWORD PTR [rax]
  80920d:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  809210:	01 d0                	add    eax,edx
  809212:	89 c2                	mov    edx,eax
  809214:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  809218:	89 10                	mov    DWORD PTR [rax],edx
  80921a:	e9 b3 00 00 00       	jmp    8092d2 <load_pe+0x5aa>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:310
                }else
                {
                    //名称导入
                    char *import_by_name_p=*iataddrs;//指向IMPORT_BY_NAME
  80921f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  809223:	8b 00                	mov    eax,DWORD PTR [rax]
  809225:	89 c0                	mov    eax,eax
  809227:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:311
                    import_by_name_p+=2;//跳过开头两字节序号
  80922e:	48 83 85 e8 fe ff ff 	add    QWORD PTR [rbp-0x118],0x2
  809235:	02 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:312
                    int i=0;
  809236:	c7 45 c4 00 00 00 00 	mov    DWORD PTR [rbp-0x3c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:313
                    for(;i<funcn;i++)
  80923d:	e9 81 00 00 00       	jmp    8092c3 <load_pe+0x59b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:315
                    {
                        if(strcmp(import_by_name_p,fnames[i])==0)
  809242:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
  809245:	48 98                	cdqe   
  809247:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
  80924e:	00 
  80924f:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
  809256:	48 01 d0             	add    rax,rdx
  809259:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  80925c:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
  809263:	48 89 d6             	mov    rsi,rdx
  809266:	48 89 c7             	mov    rdi,rax
  809269:	48 b8 10 06 81 00 00 	movabs rax,0x810610
  809270:	00 00 00 
  809273:	ff d0                	call   rax
  809275:	85 c0                	test   eax,eax
  809277:	75 46                	jne    8092bf <load_pe+0x597>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:317
                        {
                            int ordi=funcords[i];
  809279:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
  80927c:	48 98                	cdqe   
  80927e:	48 8d 14 00          	lea    rdx,[rax+rax*1]
  809282:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  809289:	48 01 d0             	add    rax,rdx
  80928c:	0f b7 00             	movzx  eax,WORD PTR [rax]
  80928f:	98                   	cwde   
  809290:	89 85 e4 fe ff ff    	mov    DWORD PTR [rbp-0x11c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:318
                            *iataddrs=funcaddrs[ordi]+dllp;//导入表中的IAT内容修改成地址
  809296:	8b 85 e4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x11c]
  80929c:	48 98                	cdqe   
  80929e:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
  8092a5:	00 
  8092a6:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
  8092ad:	48 01 d0             	add    rax,rdx
  8092b0:	8b 10                	mov    edx,DWORD PTR [rax]
  8092b2:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  8092b5:	01 d0                	add    eax,edx
  8092b7:	89 c2                	mov    edx,eax
  8092b9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  8092bd:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:313
                    for(;i<funcn;i++)
  8092bf:	83 45 c4 01          	add    DWORD PTR [rbp-0x3c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:313 (discriminator 1)
  8092c3:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
  8092c6:	3b 85 14 ff ff ff    	cmp    eax,DWORD PTR [rbp-0xec]
  8092cc:	0f 8c 70 ff ff ff    	jl     809242 <load_pe+0x51a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:322
                        }
                    }
                }
                iataddrs++;
  8092d2:	48 83 45 d0 04       	add    QWORD PTR [rbp-0x30],0x4
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:323
                siataddrs++;
  8092d7:	48 83 45 c8 08       	add    QWORD PTR [rbp-0x38],0x8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:299
            while (*iataddrs)
  8092dc:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  8092e0:	8b 00                	mov    eax,DWORD PTR [rax]
  8092e2:	85 c0                	test   eax,eax
  8092e4:	0f 85 e8 fe ff ff    	jne    8091d2 <load_pe+0x4aa>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:325
            }
            impdes++;
  8092ea:	48 83 45 e0 14       	add    QWORD PTR [rbp-0x20],0x14
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:270
        while (impdes->Characteristics)
  8092ef:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  8092f3:	8b 00                	mov    eax,DWORD PTR [rax]
  8092f5:	85 c0                	test   eax,eax
  8092f7:	0f 85 84 fd ff ff    	jne    809081 <load_pe+0x359>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:332
        }
    }


    //开始重定位
    PIMAGE_BASE_RELOCATION relp=0;
  8092fd:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
  809304:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:333
    if(nth->OptionalHeader.DataDirectory[5].Size>0)
  809305:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  80930c:	8b 80 b4 00 00 00    	mov    eax,DWORD PTR [rax+0xb4]
  809312:	85 c0                	test   eax,eax
  809314:	0f 84 ec 00 00 00    	je     809406 <load_pe+0x6de>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:335
    {
        relp=(u32)(nth->OptionalHeader.DataDirectory[5].VirtualAddress\
  80931a:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  809321:	8b 90 b0 00 00 00    	mov    edx,DWORD PTR [rax+0xb0]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:336
                                +(u32)nbase);
  809327:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:335
        relp=(u32)(nth->OptionalHeader.DataDirectory[5].VirtualAddress\
  80932b:	01 d0                	add    eax,edx
  80932d:	89 c0                	mov    eax,eax
  80932f:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:337
        u16 *reloc=relp+sizeof(IMAGE_BASE_RELOCATION);
  809333:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  809337:	48 83 c0 40          	add    rax,0x40
  80933b:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:338
        u16 *rtype=reloc+1;
  80933f:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  809343:	48 83 c0 02          	add    rax,0x2
  809347:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:339
        int old_base=nth->OptionalHeader.ImageBase;
  80934b:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  809352:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
  809356:	89 85 dc fe ff ff    	mov    DWORD PTR [rbp-0x124],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:340
        while(relp->VirtualAddress){
  80935c:	e9 97 00 00 00       	jmp    8093f8 <load_pe+0x6d0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:341
            int pgva=relp->VirtualAddress+nbase;
  809361:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  809365:	8b 10                	mov    edx,DWORD PTR [rax]
  809367:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  80936b:	01 d0                	add    eax,edx
  80936d:	89 85 d8 fe ff ff    	mov    DWORD PTR [rbp-0x128],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:342
            for(int i=0;i<relp->SizeOfBlock/4;i++)
  809373:	c7 45 a4 00 00 00 00 	mov    DWORD PTR [rbp-0x5c],0x0
  80937a:	eb 5a                	jmp    8093d6 <load_pe+0x6ae>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:344
            {
                if(*rtype==IMAGE_REL_BASED_ABSOLUTE)continue;//不用重定位
  80937c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  809380:	0f b7 00             	movzx  eax,WORD PTR [rax]
  809383:	66 85 c0             	test   ax,ax
  809386:	74 49                	je     8093d1 <load_pe+0x6a9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:345
                int *at=*reloc+pgva;//要重定位的数据的地址
  809388:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  80938c:	0f b7 00             	movzx  eax,WORD PTR [rax]
  80938f:	0f b7 d0             	movzx  edx,ax
  809392:	8b 85 d8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x128]
  809398:	01 d0                	add    eax,edx
  80939a:	48 98                	cdqe   
  80939c:	48 89 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:346
                *at=*at-old_base+nbase;
  8093a3:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  8093aa:	8b 00                	mov    eax,DWORD PTR [rax]
  8093ac:	2b 85 dc fe ff ff    	sub    eax,DWORD PTR [rbp-0x124]
  8093b2:	89 c2                	mov    edx,eax
  8093b4:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  8093b8:	01 d0                	add    eax,edx
  8093ba:	89 c2                	mov    edx,eax
  8093bc:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
  8093c3:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:348
                //下一个
                reloc+=2;
  8093c5:	48 83 45 b0 04       	add    QWORD PTR [rbp-0x50],0x4
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:349
                rtype+=2;
  8093ca:	48 83 45 a8 04       	add    QWORD PTR [rbp-0x58],0x4
  8093cf:	eb 01                	jmp    8093d2 <load_pe+0x6aa>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:344
                if(*rtype==IMAGE_REL_BASED_ABSOLUTE)continue;//不用重定位
  8093d1:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:342 (discriminator 2)
            for(int i=0;i<relp->SizeOfBlock/4;i++)
  8093d2:	83 45 a4 01          	add    DWORD PTR [rbp-0x5c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:342 (discriminator 1)
  8093d6:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  8093da:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
  8093dd:	c1 e8 02             	shr    eax,0x2
  8093e0:	89 c2                	mov    edx,eax
  8093e2:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
  8093e5:	39 c2                	cmp    edx,eax
  8093e7:	77 93                	ja     80937c <load_pe+0x654>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:351
            }
            relp=(int)relp+0x1000;
  8093e9:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  8093ed:	05 00 10 00 00       	add    eax,0x1000
  8093f2:	48 98                	cdqe   
  8093f4:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:340
        while(relp->VirtualAddress){
  8093f8:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  8093fc:	8b 00                	mov    eax,DWORD PTR [rax]
  8093fe:	85 c0                	test   eax,eax
  809400:	0f 85 5b ff ff ff    	jne    809361 <load_pe+0x639>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:357
        }
    }
    extern struct process task[];
    extern int cur_proc;
    //初始化堆
    chunk_header hdrtmp={
  809406:	c7 85 30 fd ff ff 00 	mov    DWORD PTR [rbp-0x2d0],0x0
  80940d:	00 00 00 
  809410:	c7 85 34 fd ff ff 00 	mov    DWORD PTR [rbp-0x2cc],0x0
  809417:	00 00 00 
  80941a:	48 c7 85 38 fd ff ff 	mov    QWORD PTR [rbp-0x2c8],0x0
  809421:	00 00 00 00 
  809425:	48 c7 85 40 fd ff ff 	mov    QWORD PTR [rbp-0x2c0],0x0
  80942c:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:364
            .next=NULL,
            .pgn=0,
            .prev=NULL
    };//空堆
    //拷贝触发页中断然后分配
    memcpy((chunk_header*)HEAP_BASE,&hdrtmp,sizeof(hdrtmp));
  809430:	48 8d 85 30 fd ff ff 	lea    rax,[rbp-0x2d0]
  809437:	ba 18 00 00 00       	mov    edx,0x18
  80943c:	48 89 c6             	mov    rsi,rax
  80943f:	bf 00 00 00 01       	mov    edi,0x1000000
  809444:	48 b8 72 03 81 00 00 	movabs rax,0x810372
  80944b:	00 00 00 
  80944e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:365
    task[cur_proc].mem_struct.heap_base=HEAP_BASE;
  809450:	48 b8 cc 85 40 00 00 	movabs rax,0x4085cc
  809457:	00 00 00 
  80945a:	8b 00                	mov    eax,DWORD PTR [rax]
  80945c:	48 ba 40 85 40 00 00 	movabs rdx,0x408540
  809463:	00 00 00 
  809466:	48 98                	cdqe   
  809468:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  80946f:	48 01 d0             	add    rax,rdx
  809472:	48 83 c0 20          	add    rax,0x20
  809476:	c7 40 08 00 00 00 01 	mov    DWORD PTR [rax+0x8],0x1000000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:366
    task[cur_proc].mem_struct.heap_top=HEAP_BASE+CHUNK_SIZE;
  80947d:	48 b8 cc 85 40 00 00 	movabs rax,0x4085cc
  809484:	00 00 00 
  809487:	8b 00                	mov    eax,DWORD PTR [rax]
  809489:	48 ba 40 85 40 00 00 	movabs rdx,0x408540
  809490:	00 00 00 
  809493:	48 98                	cdqe   
  809495:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  80949c:	48 01 d0             	add    rax,rdx
  80949f:	48 83 c0 20          	add    rax,0x20
  8094a3:	c7 40 0c 00 10 00 01 	mov    DWORD PTR [rax+0xc],0x1001000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:368
    //设置栈
    task[cur_proc].mem_struct.stack_top=STACK_TOP;
  8094aa:	48 b8 cc 85 40 00 00 	movabs rax,0x4085cc
  8094b1:	00 00 00 
  8094b4:	8b 00                	mov    eax,DWORD PTR [rax]
  8094b6:	48 ba 40 85 40 00 00 	movabs rdx,0x408540
  8094bd:	00 00 00 
  8094c0:	48 98                	cdqe   
  8094c2:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  8094c9:	48 01 d0             	add    rax,rdx
  8094cc:	48 83 c0 20          	add    rax,0x20
  8094d0:	c7 40 14 00 f0 ff ff 	mov    DWORD PTR [rax+0x14],0xfffff000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:375


    //完毕,调用入口函数
    //重定位完毕，准备调用DllMain
    typedef int (*Main)(int,void*);
    Main main=shell_addr;
  8094d7:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
  8094de:	48 89 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:376
    int ecode=main(0,NULL);
  8094e5:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
  8094ec:	be 00 00 00 00       	mov    esi,0x0
  8094f1:	bf 00 00 00 00       	mov    edi,0x0
  8094f6:	ff d0                	call   rax
  8094f8:	89 85 c4 fe ff ff    	mov    DWORD PTR [rbp-0x13c],eax
  8094fe:	c7 85 bc fe ff ff 14 	mov    DWORD PTR [rbp-0x144],0x14
  809505:	00 00 00 
  809508:	8b 85 c4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x13c]
  80950e:	89 85 b8 fe ff ff    	mov    DWORD PTR [rbp-0x148],eax
  809514:	c7 85 b4 fe ff ff 00 	mov    DWORD PTR [rbp-0x14c],0x0
  80951b:	00 00 00 
  80951e:	c7 85 b0 fe ff ff 00 	mov    DWORD PTR [rbp-0x150],0x0
  809525:	00 00 00 
  809528:	c7 85 ac fe ff ff 00 	mov    DWORD PTR [rbp-0x154],0x0
  80952f:	00 00 00 
  809532:	c7 85 a8 fe ff ff 00 	mov    DWORD PTR [rbp-0x158],0x0
  809539:	00 00 00 
  80953c:	c7 85 a4 fe ff ff 00 	mov    DWORD PTR [rbp-0x15c],0x0
  809543:	00 00 00 
do_syscall():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:184
    unsigned int argv;
    unsigned int argc;
}proc_ret_stack;

__attribute__((__always_inline__))inline int do_syscall(int func,int a1,int a2,int a3,int a4,int a5,int a6){
        asm volatile(".byte 0x48\n"
  809546:	8b 85 bc fe ff ff    	mov    eax,DWORD PTR [rbp-0x144]
  80954c:	8b bd b8 fe ff ff    	mov    edi,DWORD PTR [rbp-0x148]
  809552:	8b b5 b4 fe ff ff    	mov    esi,DWORD PTR [rbp-0x14c]
  809558:	8b 95 b0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x150]
  80955e:	8b 8d ac fe ff ff    	mov    ecx,DWORD PTR [rbp-0x154]
  809564:	44 8b 85 a8 fe ff ff 	mov    r8d,DWORD PTR [rbp-0x158]
  80956b:	44 8b 8d a4 fe ff ff 	mov    r9d,DWORD PTR [rbp-0x15c]
  809572:	48 0f 05             	rex.W syscall 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:186
                 "syscall"::"a"(func),"D"(a1),"S"(a2),"d"(a3),"c"(a4),"r"(a5),"r"(a6));
}
  809575:	90                   	nop
load_pe():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:380 (discriminator 1)
    do_syscall(SYSCALL_EXIT,ecode,0,0,0,0,0);
    //
    //不应该执行到这
    while(1);
  809576:	eb fe                	jmp    809576 <load_pe+0x84e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:382 (discriminator 2)
    return task[cur_proc].exit_code;
}
  809578:	c9                   	leave  
  809579:	c3                   	ret    

000000000080957a <get_module_addr>:
get_module_addr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:385

int get_module_addr(int mi)
{
  80957a:	f3 0f 1e fa          	endbr64 
  80957e:	55                   	push   rbp
  80957f:	48 89 e5             	mov    rbp,rsp
  809582:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:386
    return modules[mi].base;
  809585:	48 ba e0 b1 41 00 00 	movabs rdx,0x41b1e0
  80958c:	00 00 00 
  80958f:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  809592:	48 98                	cdqe   
  809594:	8b 04 c2             	mov    eax,DWORD PTR [rdx+rax*8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:387
}
  809597:	5d                   	pop    rbp
  809598:	c3                   	ret    

0000000000809599 <dispose_library>:
dispose_library():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:389
int dispose_library(int dlln)
{
  809599:	f3 0f 1e fa          	endbr64 
  80959d:	55                   	push   rbp
  80959e:	48 89 e5             	mov    rbp,rsp
  8095a1:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:390
    if(dlln<0||dlln>=MAX_DLLS)return -1;
  8095a4:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
  8095a8:	78 09                	js     8095b3 <dispose_library+0x1a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:390 (discriminator 2)
  8095aa:	81 7d fc ff 00 00 00 	cmp    DWORD PTR [rbp-0x4],0xff
  8095b1:	7e 07                	jle    8095ba <dispose_library+0x21>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:390 (discriminator 3)
  8095b3:	b8 ff ff ff ff       	mov    eax,0xffffffff
  8095b8:	eb 28                	jmp    8095e2 <dispose_library+0x49>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:395
    //空间不够，释放之前申请的
    // for(int j=0;j<dlls[dlln].page_used;j++)
    //     dispose_page(get_phyaddr(dlls[dlln].page_num[j]));
    //释放dll
    dlls[dlln].flag=DLL_STAT_EMPTY;
  8095ba:	48 ba e0 85 40 00 00 	movabs rdx,0x4085e0
  8095c1:	00 00 00 
  8095c4:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  8095c7:	48 98                	cdqe   
  8095c9:	48 69 c0 2c 01 00 00 	imul   rax,rax,0x12c
  8095d0:	48 01 d0             	add    rax,rdx
  8095d3:	48 83 c0 08          	add    rax,0x8
  8095d7:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:396
    return 0;
  8095dd:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:397
}
  8095e2:	5d                   	pop    rbp
  8095e3:	c3                   	ret    

00000000008095e4 <sys_insmod>:
sys_insmod():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:445

    return 0;
} */

int sys_insmod(char *path)
{
  8095e4:	f3 0f 1e fa          	endbr64 
  8095e8:	55                   	push   rbp
  8095e9:	48 89 e5             	mov    rbp,rsp
  8095ec:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:447

}
  8095f0:	90                   	nop
  8095f1:	5d                   	pop    rbp
  8095f2:	c3                   	ret    

00000000008095f3 <sys_rmmod>:
sys_rmmod():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:449
int sys_rmmod(char *name)
{
  8095f3:	f3 0f 1e fa          	endbr64 
  8095f7:	55                   	push   rbp
  8095f8:	48 89 e5             	mov    rbp,rsp
  8095fb:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:451

  8095ff:	90                   	nop
  809600:	5d                   	pop    rbp
  809601:	c3                   	ret    
  809602:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
  809609:	00 00 00 
  80960c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000809610 <_syscall>:
_syscall():
  809610:	55                   	push   rbp
  809611:	bd 00 80 10 00       	mov    ebp,0x108000
  809616:	48 89 65 14          	mov    QWORD PTR [rbp+0x14],rsp
  80961a:	48 8b 65 04          	mov    rsp,QWORD PTR [rbp+0x4]
  80961e:	50                   	push   rax
  80961f:	53                   	push   rbx
  809620:	51                   	push   rcx
  809621:	52                   	push   rdx
  809622:	57                   	push   rdi
  809623:	56                   	push   rsi
  809624:	41 50                	push   r8
  809626:	41 51                	push   r9
  809628:	41 52                	push   r10
  80962a:	41 53                	push   r11
  80962c:	41 54                	push   r12
  80962e:	41 55                	push   r13
  809630:	41 56                	push   r14
  809632:	41 57                	push   r15
  809634:	66 8c c0             	mov    ax,es
  809637:	50                   	push   rax
  809638:	66 8c d8             	mov    ax,ds
  80963b:	50                   	push   rax
  80963c:	66 b8 10 00          	mov    ax,0x10
  809640:	8e c0                	mov    es,eax
  809642:	8e d8                	mov    ds,eax
  809644:	48 8b 44 24 78       	mov    rax,QWORD PTR [rsp+0x78]
  809649:	41 53                	push   r11
  80964b:	51                   	push   rcx
  80964c:	49 87 ca             	xchg   r10,rcx
  80964f:	e8 40 71 ff ff       	call   800794 <syscall>
  809654:	4c 87 d1             	xchg   rcx,r10
  809657:	59                   	pop    rcx
  809658:	41 5b                	pop    r11
  80965a:	48 89 44 24 78       	mov    QWORD PTR [rsp+0x78],rax
  80965f:	58                   	pop    rax
  809660:	8e d8                	mov    ds,eax
  809662:	58                   	pop    rax
  809663:	8e c0                	mov    es,eax
  809665:	41 5f                	pop    r15
  809667:	41 5e                	pop    r14
  809669:	41 5d                	pop    r13
  80966b:	41 5c                	pop    r12
  80966d:	41 5b                	pop    r11
  80966f:	41 5a                	pop    r10
  809671:	41 59                	pop    r9
  809673:	41 58                	pop    r8
  809675:	5e                   	pop    rsi
  809676:	5f                   	pop    rdi
  809677:	5a                   	pop    rdx
  809678:	59                   	pop    rcx
  809679:	5b                   	pop    rbx
  80967a:	58                   	pop    rax
  80967b:	48 89 65 04          	mov    QWORD PTR [rbp+0x4],rsp
  80967f:	48 8b 65 14          	mov    rsp,QWORD PTR [rbp+0x14]
  809683:	5d                   	pop    rbp
  809684:	fb                   	sti    
  809685:	48 0f 07             	sysretq 

0000000000809688 <init_framebuffer>:
init_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:27
static u32 font_width_bytes;
static u8 *glyph_table;
static u32 bytes_per_glyph, glyph_nr;
int font_size=1;
void init_framebuffer()
{
  809688:	f3 0f 1e fa          	endbr64 
  80968c:	55                   	push   rbp
  80968d:	48 89 e5             	mov    rbp,rsp
  809690:	48 83 ec 50          	sub    rsp,0x50
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:29
    //映射页帧内存
    size_t w=framebuffer.common.framebuffer_width;
  809694:	48 b8 e0 b5 41 00 00 	movabs rax,0x41b5e0
  80969b:	00 00 00 
  80969e:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
  8096a1:	89 c0                	mov    eax,eax
  8096a3:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:30
    size_t h=framebuffer.common.framebuffer_height;
  8096a7:	48 b8 e0 b5 41 00 00 	movabs rax,0x41b5e0
  8096ae:	00 00 00 
  8096b1:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
  8096b4:	89 c0                	mov    eax,eax
  8096b6:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:31
    size_t bypp=framebuffer.common.framebuffer_bpp/8;
  8096ba:	48 b8 e0 b5 41 00 00 	movabs rax,0x41b5e0
  8096c1:	00 00 00 
  8096c4:	0f b6 40 1c          	movzx  eax,BYTE PTR [rax+0x1c]
  8096c8:	c0 e8 03             	shr    al,0x3
  8096cb:	0f b6 c0             	movzx  eax,al
  8096ce:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:32
    size_t inter=framebuffer.common.framebuffer_pitch;
  8096d2:	48 b8 e0 b5 41 00 00 	movabs rax,0x41b5e0
  8096d9:	00 00 00 
  8096dc:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
  8096df:	89 c0                	mov    eax,eax
  8096e1:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:33
    size_t pc=w*h;
  8096e5:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  8096e9:	48 0f af 45 d8       	imul   rax,QWORD PTR [rbp-0x28]
  8096ee:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:34
    size_t size=h*inter;
  8096f2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  8096f6:	48 0f af 45 c8       	imul   rax,QWORD PTR [rbp-0x38]
  8096fb:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:35
    int pgc=size/PAGE_SIZE;
  8096ff:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  809703:	48 8d 90 ff 0f 00 00 	lea    rdx,[rax+0xfff]
  80970a:	48 85 c0             	test   rax,rax
  80970d:	48 0f 48 c2          	cmovs  rax,rdx
  809711:	48 c1 f8 0c          	sar    rax,0xc
  809715:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:36
    addr_t p=FRAMEBUFFER_ADDR;
  809718:	48 b8 00 00 00 40 00 	movabs rax,0xffff800040000000
  80971f:	80 ff ff 
  809722:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:37
    addr_t pp=framebuffer.common.framebuffer_addr;
  809726:	48 b8 e0 b5 41 00 00 	movabs rax,0x41b5e0
  80972d:	00 00 00 
  809730:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  809734:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:38
    for (size_t i = 0; i < pgc; i++)
  809738:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
  80973f:	00 
  809740:	eb 3e                	jmp    809780 <init_framebuffer+0xf8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:40 (discriminator 3)
    {
        smmap(pp,p,PAGE_PRESENT|PAGE_RWX|PAGE_FOR_ALL,PML4_ADDR);
  809742:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
  809746:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80974a:	48 ba 00 10 10 00 00 	movabs rdx,0xffff800000101000
  809751:	80 ff ff 
  809754:	48 89 d1             	mov    rcx,rdx
  809757:	ba 07 00 00 00       	mov    edx,0x7
  80975c:	48 89 c7             	mov    rdi,rax
  80975f:	48 b8 1b 15 80 00 00 	movabs rax,0x80151b
  809766:	00 00 00 
  809769:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:41 (discriminator 3)
        pp+=PAGE_SIZE;
  80976b:	48 81 45 f0 00 10 00 	add    QWORD PTR [rbp-0x10],0x1000
  809772:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:42 (discriminator 3)
        p+=PAGE_SIZE;
  809773:	48 81 45 f8 00 10 00 	add    QWORD PTR [rbp-0x8],0x1000
  80977a:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:38 (discriminator 3)
    for (size_t i = 0; i < pgc; i++)
  80977b:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:38 (discriminator 1)
  809780:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
  809783:	48 98                	cdqe   
  809785:	48 39 45 e8          	cmp    QWORD PTR [rbp-0x18],rax
  809789:	7c b7                	jl     809742 <init_framebuffer+0xba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:46
    }
    
    
}
  80978b:	90                   	nop
  80978c:	90                   	nop
  80978d:	c9                   	leave  
  80978e:	c3                   	ret    

000000000080978f <init_font>:
init_font():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:47
void init_font(){
  80978f:	f3 0f 1e fa          	endbr64 
  809793:	55                   	push   rbp
  809794:	48 89 e5             	mov    rbp,rsp
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:48
    boot_font = (struct psf2_header*) (_binary_res_font_psf_start);
  809797:	48 b8 20 b6 41 00 00 	movabs rax,0x41b620
  80979e:	00 00 00 
  8097a1:	48 b9 a8 11 81 00 00 	movabs rcx,0x8111a8
  8097a8:	00 00 00 
  8097ab:	48 89 08             	mov    QWORD PTR [rax],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:50

    font_width_bytes = (boot_font->width + 7) / 8;
  8097ae:	48 b8 20 b6 41 00 00 	movabs rax,0x41b620
  8097b5:	00 00 00 
  8097b8:	48 8b 00             	mov    rax,QWORD PTR [rax]
  8097bb:	8b 40 1c             	mov    eax,DWORD PTR [rax+0x1c]
  8097be:	83 c0 07             	add    eax,0x7
  8097c1:	c1 e8 03             	shr    eax,0x3
  8097c4:	89 c2                	mov    edx,eax
  8097c6:	48 b8 30 b6 41 00 00 	movabs rax,0x41b630
  8097cd:	00 00 00 
  8097d0:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:51
    font_width = font_width_bytes * 8;
  8097d2:	48 b8 30 b6 41 00 00 	movabs rax,0x41b630
  8097d9:	00 00 00 
  8097dc:	8b 00                	mov    eax,DWORD PTR [rax]
  8097de:	8d 14 c5 00 00 00 00 	lea    edx,[rax*8+0x0]
  8097e5:	48 b8 28 b6 41 00 00 	movabs rax,0x41b628
  8097ec:	00 00 00 
  8097ef:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:52
    font_height = boot_font->height;
  8097f1:	48 b8 20 b6 41 00 00 	movabs rax,0x41b620
  8097f8:	00 00 00 
  8097fb:	48 8b 00             	mov    rax,QWORD PTR [rax]
  8097fe:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
  809801:	48 ba 2c b6 41 00 00 	movabs rdx,0x41b62c
  809808:	00 00 00 
  80980b:	89 02                	mov    DWORD PTR [rdx],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:54

    glyph_table = (u8*)(_binary_res_font_psf_start)+boot_font->header_size;
  80980d:	48 b8 20 b6 41 00 00 	movabs rax,0x41b620
  809814:	00 00 00 
  809817:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80981a:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
  80981d:	89 c2                	mov    edx,eax
  80981f:	48 b8 a8 11 81 00 00 	movabs rax,0x8111a8
  809826:	00 00 00 
  809829:	48 01 c2             	add    rdx,rax
  80982c:	48 b8 38 b6 41 00 00 	movabs rax,0x41b638
  809833:	00 00 00 
  809836:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:55
    glyph_nr = boot_font->glyph_nr;
  809839:	48 b8 20 b6 41 00 00 	movabs rax,0x41b620
  809840:	00 00 00 
  809843:	48 8b 00             	mov    rax,QWORD PTR [rax]
  809846:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
  809849:	48 ba 44 b6 41 00 00 	movabs rdx,0x41b644
  809850:	00 00 00 
  809853:	89 02                	mov    DWORD PTR [rdx],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:56
    bytes_per_glyph = boot_font->bytes_per_glyph;
  809855:	48 b8 20 b6 41 00 00 	movabs rax,0x41b620
  80985c:	00 00 00 
  80985f:	48 8b 00             	mov    rax,QWORD PTR [rax]
  809862:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
  809865:	48 ba 40 b6 41 00 00 	movabs rdx,0x41b640
  80986c:	00 00 00 
  80986f:	89 02                	mov    DWORD PTR [rdx],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:58

    fb_cursor_x = fb_cursor_y = 0;
  809871:	48 b8 10 b6 41 00 00 	movabs rax,0x41b610
  809878:	00 00 00 
  80987b:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
  809881:	48 b8 10 b6 41 00 00 	movabs rax,0x41b610
  809888:	00 00 00 
  80988b:	8b 00                	mov    eax,DWORD PTR [rax]
  80988d:	48 ba 0c b6 41 00 00 	movabs rdx,0x41b60c
  809894:	00 00 00 
  809897:	89 02                	mov    DWORD PTR [rdx],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:59
    max_ch_nr_x = framebuffer.common.framebuffer_width / font_width;
  809899:	48 b8 e0 b5 41 00 00 	movabs rax,0x41b5e0
  8098a0:	00 00 00 
  8098a3:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
  8098a6:	48 ba 28 b6 41 00 00 	movabs rdx,0x41b628
  8098ad:	00 00 00 
  8098b0:	8b 32                	mov    esi,DWORD PTR [rdx]
  8098b2:	ba 00 00 00 00       	mov    edx,0x0
  8098b7:	f7 f6                	div    esi
  8098b9:	89 c2                	mov    edx,eax
  8098bb:	48 b8 14 b6 41 00 00 	movabs rax,0x41b614
  8098c2:	00 00 00 
  8098c5:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:60
    max_ch_nr_y = framebuffer.common.framebuffer_height / font_height;
  8098c7:	48 b8 e0 b5 41 00 00 	movabs rax,0x41b5e0
  8098ce:	00 00 00 
  8098d1:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
  8098d4:	48 ba 2c b6 41 00 00 	movabs rdx,0x41b62c
  8098db:	00 00 00 
  8098de:	8b 3a                	mov    edi,DWORD PTR [rdx]
  8098e0:	ba 00 00 00 00       	mov    edx,0x0
  8098e5:	f7 f7                	div    edi
  8098e7:	89 c2                	mov    edx,eax
  8098e9:	48 b8 18 b6 41 00 00 	movabs rax,0x41b618
  8098f0:	00 00 00 
  8098f3:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:61
    font_size=1;
  8098f5:	48 b8 40 0e 81 00 00 	movabs rax,0x810e40
  8098fc:	00 00 00 
  8098ff:	c7 00 01 00 00 00    	mov    DWORD PTR [rax],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:62
}
  809905:	90                   	nop
  809906:	5d                   	pop    rbp
  809907:	c3                   	ret    

0000000000809908 <set_framebuffer>:
set_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:64
void set_framebuffer(struct multiboot_tag_framebuffer tag)
{
  809908:	f3 0f 1e fa          	endbr64 
  80990c:	55                   	push   rbp
  80990d:	48 89 e5             	mov    rbp,rsp
  809910:	53                   	push   rbx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:65
    framebuffer=tag;
  809911:	48 b8 e0 b5 41 00 00 	movabs rax,0x41b5e0
  809918:	00 00 00 
  80991b:	48 8b 4d 10          	mov    rcx,QWORD PTR [rbp+0x10]
  80991f:	48 8b 5d 18          	mov    rbx,QWORD PTR [rbp+0x18]
  809923:	48 89 08             	mov    QWORD PTR [rax],rcx
  809926:	48 89 58 08          	mov    QWORD PTR [rax+0x8],rbx
  80992a:	48 8b 4d 20          	mov    rcx,QWORD PTR [rbp+0x20]
  80992e:	48 8b 5d 28          	mov    rbx,QWORD PTR [rbp+0x28]
  809932:	48 89 48 10          	mov    QWORD PTR [rax+0x10],rcx
  809936:	48 89 58 18          	mov    QWORD PTR [rax+0x18],rbx
  80993a:	48 8b 55 30          	mov    rdx,QWORD PTR [rbp+0x30]
  80993e:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:66
}
  809942:	90                   	nop
  809943:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
  809947:	c9                   	leave  
  809948:	c3                   	ret    

0000000000809949 <fill_rect>:
fill_rect():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:68

void fill_rect(int x,int y,int w,int h,unsigned int color){
  809949:	f3 0f 1e fa          	endbr64 
  80994d:	55                   	push   rbp
  80994e:	48 89 e5             	mov    rbp,rsp
  809951:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
  809954:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
  809957:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
  80995a:	89 4d d0             	mov    DWORD PTR [rbp-0x30],ecx
  80995d:	44 89 45 cc          	mov    DWORD PTR [rbp-0x34],r8d
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:69
    unsigned int* fb= (unsigned int*) FRAMEBUFFER_ADDR;
  809961:	48 b8 00 00 00 40 00 	movabs rax,0xffff800040000000
  809968:	80 ff ff 
  80996b:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:71
    //目前只写32bpp
    for(int py=x;py<h+x;py++){
  80996f:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  809972:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
  809975:	eb 7a                	jmp    8099f1 <fill_rect+0xa8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:72
        for(int px=y;px<w+y;px++){
  809977:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
  80997a:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
  80997d:	eb 61                	jmp    8099e0 <fill_rect+0x97>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:73 (discriminator 3)
            addr_t ptr=FRAMEBUFFER_ADDR+py*framebuffer.common.framebuffer_pitch
  80997f:	48 b8 e0 b5 41 00 00 	movabs rax,0x41b5e0
  809986:	00 00 00 
  809989:	8b 50 10             	mov    edx,DWORD PTR [rax+0x10]
  80998c:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80998f:	0f af c2             	imul   eax,edx
  809992:	89 c1                	mov    ecx,eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:74 (discriminator 3)
                       +px*framebuffer.common.framebuffer_bpp/8;
  809994:	48 b8 e0 b5 41 00 00 	movabs rax,0x41b5e0
  80999b:	00 00 00 
  80999e:	0f b6 40 1c          	movzx  eax,BYTE PTR [rax+0x1c]
  8099a2:	0f b6 c0             	movzx  eax,al
  8099a5:	0f af 45 f8          	imul   eax,DWORD PTR [rbp-0x8]
  8099a9:	8d 50 07             	lea    edx,[rax+0x7]
  8099ac:	85 c0                	test   eax,eax
  8099ae:	0f 48 c2             	cmovs  eax,edx
  8099b1:	c1 f8 03             	sar    eax,0x3
  8099b4:	48 98                	cdqe   
  8099b6:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:73 (discriminator 3)
            addr_t ptr=FRAMEBUFFER_ADDR+py*framebuffer.common.framebuffer_pitch
  8099ba:	48 b8 00 00 00 40 00 	movabs rax,0xffff800040000000
  8099c1:	80 ff ff 
  8099c4:	48 01 d0             	add    rax,rdx
  8099c7:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:75 (discriminator 3)
            fb=(unsigned int*)ptr;
  8099cb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  8099cf:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:76 (discriminator 3)
            *fb=color;
  8099d3:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  8099d7:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
  8099da:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:72 (discriminator 3)
        for(int px=y;px<w+y;px++){
  8099dc:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:72 (discriminator 1)
  8099e0:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
  8099e3:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
  8099e6:	01 d0                	add    eax,edx
  8099e8:	39 45 f8             	cmp    DWORD PTR [rbp-0x8],eax
  8099eb:	7c 92                	jl     80997f <fill_rect+0x36>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:71 (discriminator 2)
    for(int py=x;py<h+x;py++){
  8099ed:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:71 (discriminator 1)
  8099f1:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
  8099f4:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  8099f7:	01 d0                	add    eax,edx
  8099f9:	39 45 fc             	cmp    DWORD PTR [rbp-0x4],eax
  8099fc:	0f 8c 75 ff ff ff    	jl     809977 <fill_rect+0x2e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:79
        }
    }
}
  809a02:	90                   	nop
  809a03:	90                   	nop
  809a04:	5d                   	pop    rbp
  809a05:	c3                   	ret    

0000000000809a06 <draw_text>:
draw_text():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:82
unsigned char letters[];
void draw_text(int x, int y, int size, char *str)
{
  809a06:	f3 0f 1e fa          	endbr64 
  809a0a:	55                   	push   rbp
  809a0b:	48 89 e5             	mov    rbp,rsp
  809a0e:	48 83 ec 30          	sub    rsp,0x30
  809a12:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
  809a15:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
  809a18:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
  809a1b:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:83
    int tx=x;
  809a1f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  809a22:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:84
    while(*str!='\0')
  809a25:	eb 6d                	jmp    809a94 <draw_text+0x8e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:86
    {
        if(*str=='\n')
  809a27:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  809a2b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  809a2e:	3c 0a                	cmp    al,0xa
  809a30:	75 22                	jne    809a54 <draw_text+0x4e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:88
        {
            y+=font_height*size;
  809a32:	48 b8 2c b6 41 00 00 	movabs rax,0x41b62c
  809a39:	00 00 00 
  809a3c:	8b 10                	mov    edx,DWORD PTR [rax]
  809a3e:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  809a41:	0f af d0             	imul   edx,eax
  809a44:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
  809a47:	01 d0                	add    eax,edx
  809a49:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:89
            tx=x;
  809a4c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  809a4f:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
  809a52:	eb 3b                	jmp    809a8f <draw_text+0x89>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:93
        }
        else
        {
            draw_letter(tx,y,size,*str);
  809a54:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  809a58:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  809a5b:	0f be c8             	movsx  ecx,al
  809a5e:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
  809a61:	8b 75 e8             	mov    esi,DWORD PTR [rbp-0x18]
  809a64:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  809a67:	89 c7                	mov    edi,eax
  809a69:	48 b8 a3 9a 80 00 00 	movabs rax,0x809aa3
  809a70:	00 00 00 
  809a73:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:94
            tx+=size*font_width;
  809a75:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
  809a78:	48 b8 28 b6 41 00 00 	movabs rax,0x41b628
  809a7f:	00 00 00 
  809a82:	8b 00                	mov    eax,DWORD PTR [rax]
  809a84:	0f af d0             	imul   edx,eax
  809a87:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  809a8a:	01 d0                	add    eax,edx
  809a8c:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:96
        }
        str++;
  809a8f:	48 83 45 d8 01       	add    QWORD PTR [rbp-0x28],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:84
    while(*str!='\0')
  809a94:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  809a98:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  809a9b:	84 c0                	test   al,al
  809a9d:	75 88                	jne    809a27 <draw_text+0x21>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:98
    }
}
  809a9f:	90                   	nop
  809aa0:	90                   	nop
  809aa1:	c9                   	leave  
  809aa2:	c3                   	ret    

0000000000809aa3 <draw_letter>:
draw_letter():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:99
void draw_letter(int x, volatile int y, int size, char c) {
  809aa3:	f3 0f 1e fa          	endbr64 
  809aa7:	55                   	push   rbp
  809aa8:	48 89 e5             	mov    rbp,rsp
  809aab:	89 7d cc             	mov    DWORD PTR [rbp-0x34],edi
  809aae:	89 75 c8             	mov    DWORD PTR [rbp-0x38],esi
  809ab1:	89 55 c4             	mov    DWORD PTR [rbp-0x3c],edx
  809ab4:	89 c8                	mov    eax,ecx
  809ab6:	88 45 c0             	mov    BYTE PTR [rbp-0x40],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:100
    u8 *glyph = glyph_table;
  809ab9:	48 b8 38 b6 41 00 00 	movabs rax,0x41b638
  809ac0:	00 00 00 
  809ac3:	48 8b 00             	mov    rax,QWORD PTR [rax]
  809ac6:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:101
    if (c < glyph_nr) {
  809aca:	0f be 55 c0          	movsx  edx,BYTE PTR [rbp-0x40]
  809ace:	48 b8 44 b6 41 00 00 	movabs rax,0x41b644
  809ad5:	00 00 00 
  809ad8:	8b 00                	mov    eax,DWORD PTR [rax]
  809ada:	39 c2                	cmp    edx,eax
  809adc:	73 19                	jae    809af7 <draw_letter+0x54>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:102
        glyph += c * bytes_per_glyph;
  809ade:	0f be 55 c0          	movsx  edx,BYTE PTR [rbp-0x40]
  809ae2:	48 b8 40 b6 41 00 00 	movabs rax,0x41b640
  809ae9:	00 00 00 
  809aec:	8b 00                	mov    eax,DWORD PTR [rax]
  809aee:	0f af c2             	imul   eax,edx
  809af1:	89 c0                	mov    eax,eax
  809af3:	48 01 45 f8          	add    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:105
    }
    /* output the font to frame buffer */
    for (u32 ch_y = 0; ch_y < font_height; ch_y++) {
  809af7:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
  809afe:	e9 ed 00 00 00       	jmp    809bf0 <draw_letter+0x14d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:106
        u8 mask = 1 << 7;
  809b03:	c6 45 f3 80          	mov    BYTE PTR [rbp-0xd],0x80
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:108

        for (u32 ch_x = 0; ch_x < font_width; ch_x++) {
  809b07:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
  809b0e:	e9 b2 00 00 00       	jmp    809bc5 <draw_letter+0x122>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:109
            int px=x+ch_x*size;
  809b13:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
  809b16:	0f af 45 ec          	imul   eax,DWORD PTR [rbp-0x14]
  809b1a:	89 c2                	mov    edx,eax
  809b1c:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
  809b1f:	01 d0                	add    eax,edx
  809b21:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:110
            int py=y+ch_y*size;
  809b24:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
  809b27:	0f af 45 f4          	imul   eax,DWORD PTR [rbp-0xc]
  809b2b:	89 c2                	mov    edx,eax
  809b2d:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
  809b30:	01 d0                	add    eax,edx
  809b32:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:111
            int* ptr=FRAMEBUFFER_ADDR+py*framebuffer.common.framebuffer_pitch
  809b35:	48 b8 e0 b5 41 00 00 	movabs rax,0x41b5e0
  809b3c:	00 00 00 
  809b3f:	8b 50 10             	mov    edx,DWORD PTR [rax+0x10]
  809b42:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  809b45:	0f af c2             	imul   eax,edx
  809b48:	89 c1                	mov    ecx,eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:112
                     +px*framebuffer.common.framebuffer_bpp/8;
  809b4a:	48 b8 e0 b5 41 00 00 	movabs rax,0x41b5e0
  809b51:	00 00 00 
  809b54:	0f b6 40 1c          	movzx  eax,BYTE PTR [rax+0x1c]
  809b58:	0f b6 c0             	movzx  eax,al
  809b5b:	0f af 45 e8          	imul   eax,DWORD PTR [rbp-0x18]
  809b5f:	8d 50 07             	lea    edx,[rax+0x7]
  809b62:	85 c0                	test   eax,eax
  809b64:	0f 48 c2             	cmovs  eax,edx
  809b67:	c1 f8 03             	sar    eax,0x3
  809b6a:	48 98                	cdqe   
  809b6c:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
  809b70:	48 b8 00 00 00 40 00 	movabs rax,0xffff800040000000
  809b77:	80 ff ff 
  809b7a:	48 01 d0             	add    rax,rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:111
            int* ptr=FRAMEBUFFER_ADDR+py*framebuffer.common.framebuffer_pitch
  809b7d:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:113
            if ((*(glyph + ch_x / 8) & mask) != 0) {
  809b81:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  809b84:	c1 e8 03             	shr    eax,0x3
  809b87:	89 c2                	mov    edx,eax
  809b89:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  809b8d:	48 01 d0             	add    rax,rdx
  809b90:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  809b93:	22 45 f3             	and    al,BYTE PTR [rbp-0xd]
  809b96:	84 c0                	test   al,al
  809b98:	74 0c                	je     809ba6 <draw_letter+0x103>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:114
                *ptr=-1;
  809b9a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  809b9e:	c7 00 ff ff ff ff    	mov    DWORD PTR [rax],0xffffffff
  809ba4:	eb 0a                	jmp    809bb0 <draw_letter+0x10d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:116
            } else {
                *ptr=0;
  809ba6:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  809baa:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:119
            }

            mask >>= 1;
  809bb0:	d0 6d f3             	shr    BYTE PTR [rbp-0xd],1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:120
            if (ch_x % 8 == 0) {
  809bb3:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  809bb6:	83 e0 07             	and    eax,0x7
  809bb9:	85 c0                	test   eax,eax
  809bbb:	75 04                	jne    809bc1 <draw_letter+0x11e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:121
                mask = 1 << 7;
  809bbd:	c6 45 f3 80          	mov    BYTE PTR [rbp-0xd],0x80
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:108 (discriminator 2)
        for (u32 ch_x = 0; ch_x < font_width; ch_x++) {
  809bc1:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:108 (discriminator 1)
  809bc5:	48 b8 28 b6 41 00 00 	movabs rax,0x41b628
  809bcc:	00 00 00 
  809bcf:	8b 00                	mov    eax,DWORD PTR [rax]
  809bd1:	39 45 ec             	cmp    DWORD PTR [rbp-0x14],eax
  809bd4:	0f 82 39 ff ff ff    	jb     809b13 <draw_letter+0x70>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:125 (discriminator 2)
            }
        }

        glyph += font_width_bytes;
  809bda:	48 b8 30 b6 41 00 00 	movabs rax,0x41b630
  809be1:	00 00 00 
  809be4:	8b 00                	mov    eax,DWORD PTR [rax]
  809be6:	89 c0                	mov    eax,eax
  809be8:	48 01 45 f8          	add    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:105 (discriminator 2)
    for (u32 ch_y = 0; ch_y < font_height; ch_y++) {
  809bec:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:105 (discriminator 1)
  809bf0:	48 b8 2c b6 41 00 00 	movabs rax,0x41b62c
  809bf7:	00 00 00 
  809bfa:	8b 00                	mov    eax,DWORD PTR [rax]
  809bfc:	39 45 f4             	cmp    DWORD PTR [rbp-0xc],eax
  809bff:	0f 82 fe fe ff ff    	jb     809b03 <draw_letter+0x60>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:127
    }
}
  809c05:	90                   	nop
  809c06:	90                   	nop
  809c07:	5d                   	pop    rbp
  809c08:	c3                   	ret    

0000000000809c09 <scr_up>:
scr_up():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:129
//向上滚动一个像素
void scr_up(){
  809c09:	f3 0f 1e fa          	endbr64 
  809c0d:	55                   	push   rbp
  809c0e:	48 89 e5             	mov    rbp,rsp
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:130
    for(int dy=0;dy<framebuffer.common.framebuffer_height-1;dy++){
  809c11:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
  809c18:	e9 99 00 00 00       	jmp    809cb6 <scr_up+0xad>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:131
        for(int dx=0;dx<framebuffer.common.framebuffer_width;dx++){
  809c1d:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
  809c24:	eb 74                	jmp    809c9a <scr_up+0x91>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:133 (discriminator 3)
            char *p=(char*)(FRAMEBUFFER_ADDR+
                    dy*framebuffer.common.framebuffer_pitch
  809c26:	48 b8 e0 b5 41 00 00 	movabs rax,0x41b5e0
  809c2d:	00 00 00 
  809c30:	8b 50 10             	mov    edx,DWORD PTR [rax+0x10]
  809c33:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  809c36:	0f af c2             	imul   eax,edx
  809c39:	89 c1                	mov    ecx,eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:134 (discriminator 3)
                    +dx*framebuffer.common.framebuffer_bpp/8);
  809c3b:	48 b8 e0 b5 41 00 00 	movabs rax,0x41b5e0
  809c42:	00 00 00 
  809c45:	0f b6 40 1c          	movzx  eax,BYTE PTR [rax+0x1c]
  809c49:	0f b6 c0             	movzx  eax,al
  809c4c:	0f af 45 f8          	imul   eax,DWORD PTR [rbp-0x8]
  809c50:	8d 50 07             	lea    edx,[rax+0x7]
  809c53:	85 c0                	test   eax,eax
  809c55:	0f 48 c2             	cmovs  eax,edx
  809c58:	c1 f8 03             	sar    eax,0x3
  809c5b:	48 98                	cdqe   
  809c5d:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
  809c61:	48 b8 00 00 00 40 00 	movabs rax,0xffff800040000000
  809c68:	80 ff ff 
  809c6b:	48 01 d0             	add    rax,rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:132 (discriminator 3)
            char *p=(char*)(FRAMEBUFFER_ADDR+
  809c6e:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:135 (discriminator 3)
            *p=*(p+framebuffer.common.framebuffer_pitch);
  809c72:	48 b8 e0 b5 41 00 00 	movabs rax,0x41b5e0
  809c79:	00 00 00 
  809c7c:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
  809c7f:	89 c2                	mov    edx,eax
  809c81:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  809c85:	48 01 d0             	add    rax,rdx
  809c88:	0f b6 10             	movzx  edx,BYTE PTR [rax]
  809c8b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  809c8f:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:136 (discriminator 3)
            p++;
  809c91:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:131 (discriminator 3)
        for(int dx=0;dx<framebuffer.common.framebuffer_width;dx++){
  809c96:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:131 (discriminator 1)
  809c9a:	48 b8 e0 b5 41 00 00 	movabs rax,0x41b5e0
  809ca1:	00 00 00 
  809ca4:	8b 50 14             	mov    edx,DWORD PTR [rax+0x14]
  809ca7:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  809caa:	39 c2                	cmp    edx,eax
  809cac:	0f 87 74 ff ff ff    	ja     809c26 <scr_up+0x1d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:130 (discriminator 2)
    for(int dy=0;dy<framebuffer.common.framebuffer_height-1;dy++){
  809cb2:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:130 (discriminator 1)
  809cb6:	48 b8 e0 b5 41 00 00 	movabs rax,0x41b5e0
  809cbd:	00 00 00 
  809cc0:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
  809cc3:	8d 50 ff             	lea    edx,[rax-0x1]
  809cc6:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  809cc9:	39 c2                	cmp    edx,eax
  809ccb:	0f 87 4c ff ff ff    	ja     809c1d <scr_up+0x14>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:142
        }

    }
//    for(int i=0;i< framebuffer.common.framebuffer_width*framebuffer.common.framebuffer_bpp/8;i++)
//        *(p++)=0;
}
  809cd1:	90                   	nop
  809cd2:	90                   	nop
  809cd3:	5d                   	pop    rbp
  809cd4:	c3                   	ret    

0000000000809cd5 <scr_down>:
scr_down():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:143
void scr_down(){
  809cd5:	f3 0f 1e fa          	endbr64 
  809cd9:	55                   	push   rbp
  809cda:	48 89 e5             	mov    rbp,rsp
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:144
    for(int dy=1;dy<max_ch_nr_y;dy++){
  809cdd:	c7 45 fc 01 00 00 00 	mov    DWORD PTR [rbp-0x4],0x1
  809ce4:	e9 99 00 00 00       	jmp    809d82 <scr_down+0xad>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:145
        for(int dx=0;dx<max_ch_nr_x;dx++){
  809ce9:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
  809cf0:	eb 75                	jmp    809d67 <scr_down+0x92>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:146 (discriminator 3)
            char *p=(char*)(FRAMEBUFFER_ADDR+dy*framebuffer.common.framebuffer_pitch
  809cf2:	48 b8 e0 b5 41 00 00 	movabs rax,0x41b5e0
  809cf9:	00 00 00 
  809cfc:	8b 50 10             	mov    edx,DWORD PTR [rax+0x10]
  809cff:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  809d02:	0f af c2             	imul   eax,edx
  809d05:	89 c1                	mov    ecx,eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:147 (discriminator 3)
                            +dx*framebuffer.common.framebuffer_bpp/8);
  809d07:	48 b8 e0 b5 41 00 00 	movabs rax,0x41b5e0
  809d0e:	00 00 00 
  809d11:	0f b6 40 1c          	movzx  eax,BYTE PTR [rax+0x1c]
  809d15:	0f b6 c0             	movzx  eax,al
  809d18:	0f af 45 f8          	imul   eax,DWORD PTR [rbp-0x8]
  809d1c:	8d 50 07             	lea    edx,[rax+0x7]
  809d1f:	85 c0                	test   eax,eax
  809d21:	0f 48 c2             	cmovs  eax,edx
  809d24:	c1 f8 03             	sar    eax,0x3
  809d27:	48 98                	cdqe   
  809d29:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
  809d2d:	48 b8 00 00 00 40 00 	movabs rax,0xffff800040000000
  809d34:	80 ff ff 
  809d37:	48 01 d0             	add    rax,rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:146 (discriminator 3)
            char *p=(char*)(FRAMEBUFFER_ADDR+dy*framebuffer.common.framebuffer_pitch
  809d3a:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:148 (discriminator 3)
            *p=*(p-framebuffer.common.framebuffer_pitch);
  809d3e:	48 b8 e0 b5 41 00 00 	movabs rax,0x41b5e0
  809d45:	00 00 00 
  809d48:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
  809d4b:	89 c0                	mov    eax,eax
  809d4d:	48 f7 d8             	neg    rax
  809d50:	48 89 c2             	mov    rdx,rax
  809d53:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  809d57:	48 01 d0             	add    rax,rdx
  809d5a:	0f b6 10             	movzx  edx,BYTE PTR [rax]
  809d5d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  809d61:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:145 (discriminator 3)
        for(int dx=0;dx<max_ch_nr_x;dx++){
  809d63:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:145 (discriminator 1)
  809d67:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
  809d6a:	48 b8 14 b6 41 00 00 	movabs rax,0x41b614
  809d71:	00 00 00 
  809d74:	8b 00                	mov    eax,DWORD PTR [rax]
  809d76:	39 c2                	cmp    edx,eax
  809d78:	0f 82 74 ff ff ff    	jb     809cf2 <scr_down+0x1d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:144 (discriminator 2)
    for(int dy=1;dy<max_ch_nr_y;dy++){
  809d7e:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:144 (discriminator 1)
  809d82:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
  809d85:	48 b8 18 b6 41 00 00 	movabs rax,0x41b618
  809d8c:	00 00 00 
  809d8f:	8b 00                	mov    eax,DWORD PTR [rax]
  809d91:	39 c2                	cmp    edx,eax
  809d93:	0f 82 50 ff ff ff    	jb     809ce9 <scr_down+0x14>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:152
        }

    }
}
  809d99:	90                   	nop
  809d9a:	90                   	nop
  809d9b:	5d                   	pop    rbp
  809d9c:	c3                   	ret    

0000000000809d9d <print>:
print():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:153
void print(char* s){
  809d9d:	f3 0f 1e fa          	endbr64 
  809da1:	55                   	push   rbp
  809da2:	48 89 e5             	mov    rbp,rsp
  809da5:	48 83 ec 08          	sub    rsp,0x8
  809da9:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:154
    for(;*s;s++){
  809dad:	e9 35 01 00 00       	jmp    809ee7 <print+0x14a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:155
        if(fb_cursor_x>max_ch_nr_x||*s=='\n')
  809db2:	48 b8 0c b6 41 00 00 	movabs rax,0x41b60c
  809db9:	00 00 00 
  809dbc:	8b 10                	mov    edx,DWORD PTR [rax]
  809dbe:	48 b8 14 b6 41 00 00 	movabs rax,0x41b614
  809dc5:	00 00 00 
  809dc8:	8b 00                	mov    eax,DWORD PTR [rax]
  809dca:	39 c2                	cmp    edx,eax
  809dcc:	77 0b                	ja     809dd9 <print+0x3c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:155 (discriminator 1)
  809dce:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  809dd2:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  809dd5:	3c 0a                	cmp    al,0xa
  809dd7:	75 2b                	jne    809e04 <print+0x67>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:157
        {
            fb_cursor_y+=1;
  809dd9:	48 b8 10 b6 41 00 00 	movabs rax,0x41b610
  809de0:	00 00 00 
  809de3:	8b 00                	mov    eax,DWORD PTR [rax]
  809de5:	8d 50 01             	lea    edx,[rax+0x1]
  809de8:	48 b8 10 b6 41 00 00 	movabs rax,0x41b610
  809def:	00 00 00 
  809df2:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:158
            fb_cursor_x=0;
  809df4:	48 b8 0c b6 41 00 00 	movabs rax,0x41b60c
  809dfb:	00 00 00 
  809dfe:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:160
        }
        if(*s=='\n')continue;
  809e04:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  809e08:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  809e0b:	3c 0a                	cmp    al,0xa
  809e0d:	0f 84 ce 00 00 00    	je     809ee1 <print+0x144>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:161
        if(fb_cursor_y>=max_ch_nr_y-1){
  809e13:	48 b8 18 b6 41 00 00 	movabs rax,0x41b618
  809e1a:	00 00 00 
  809e1d:	8b 00                	mov    eax,DWORD PTR [rax]
  809e1f:	8d 50 ff             	lea    edx,[rax-0x1]
  809e22:	48 b8 10 b6 41 00 00 	movabs rax,0x41b610
  809e29:	00 00 00 
  809e2c:	8b 00                	mov    eax,DWORD PTR [rax]
  809e2e:	39 c2                	cmp    edx,eax
  809e30:	77 10                	ja     809e42 <print+0xa5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:165
//            for(int i=0;i<font_height*font_size;i++)
////                scr_up();
////            fb_cursor_y=max_ch_nr_y-1;
            fb_cursor_y=0;
  809e32:	48 b8 10 b6 41 00 00 	movabs rax,0x41b610
  809e39:	00 00 00 
  809e3c:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:167
        }
        draw_letter(fb_cursor_x*font_width*font_size,fb_cursor_y*font_height*font_size,font_size,*s);
  809e42:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  809e46:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  809e49:	0f be d0             	movsx  edx,al
  809e4c:	48 b8 40 0e 81 00 00 	movabs rax,0x810e40
  809e53:	00 00 00 
  809e56:	8b 00                	mov    eax,DWORD PTR [rax]
  809e58:	48 b9 10 b6 41 00 00 	movabs rcx,0x41b610
  809e5f:	00 00 00 
  809e62:	8b 31                	mov    esi,DWORD PTR [rcx]
  809e64:	48 b9 2c b6 41 00 00 	movabs rcx,0x41b62c
  809e6b:	00 00 00 
  809e6e:	8b 09                	mov    ecx,DWORD PTR [rcx]
  809e70:	0f af ce             	imul   ecx,esi
  809e73:	48 be 40 0e 81 00 00 	movabs rsi,0x810e40
  809e7a:	00 00 00 
  809e7d:	8b 36                	mov    esi,DWORD PTR [rsi]
  809e7f:	0f af ce             	imul   ecx,esi
  809e82:	41 89 c8             	mov    r8d,ecx
  809e85:	48 b9 0c b6 41 00 00 	movabs rcx,0x41b60c
  809e8c:	00 00 00 
  809e8f:	8b 31                	mov    esi,DWORD PTR [rcx]
  809e91:	48 b9 28 b6 41 00 00 	movabs rcx,0x41b628
  809e98:	00 00 00 
  809e9b:	8b 09                	mov    ecx,DWORD PTR [rcx]
  809e9d:	0f af ce             	imul   ecx,esi
  809ea0:	48 be 40 0e 81 00 00 	movabs rsi,0x810e40
  809ea7:	00 00 00 
  809eaa:	8b 36                	mov    esi,DWORD PTR [rsi]
  809eac:	0f af ce             	imul   ecx,esi
  809eaf:	89 cf                	mov    edi,ecx
  809eb1:	89 d1                	mov    ecx,edx
  809eb3:	89 c2                	mov    edx,eax
  809eb5:	44 89 c6             	mov    esi,r8d
  809eb8:	48 b8 a3 9a 80 00 00 	movabs rax,0x809aa3
  809ebf:	00 00 00 
  809ec2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:168
        fb_cursor_x+=1;
  809ec4:	48 b8 0c b6 41 00 00 	movabs rax,0x41b60c
  809ecb:	00 00 00 
  809ece:	8b 00                	mov    eax,DWORD PTR [rax]
  809ed0:	8d 50 01             	lea    edx,[rax+0x1]
  809ed3:	48 b8 0c b6 41 00 00 	movabs rax,0x41b60c
  809eda:	00 00 00 
  809edd:	89 10                	mov    DWORD PTR [rax],edx
  809edf:	eb 01                	jmp    809ee2 <print+0x145>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:160
        if(*s=='\n')continue;
  809ee1:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:154
    for(;*s;s++){
  809ee2:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:154 (discriminator 1)
  809ee7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  809eeb:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  809eee:	84 c0                	test   al,al
  809ef0:	0f 85 bc fe ff ff    	jne    809db2 <print+0x15>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:170
    }
}
  809ef6:	90                   	nop
  809ef7:	90                   	nop
  809ef8:	c9                   	leave  
  809ef9:	c3                   	ret    

0000000000809efa <open_framebuffer>:
open_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:175
struct file_operations framebuffer_fops={
        .open=open_framebuffer,.close=close_framebuffer,.read=read_framebuffer,.write=write_framebuffer,
        .ioctl=ioctl_framebuffer
};
long open_framebuffer(struct index_node * inode,struct file * filp){
  809efa:	f3 0f 1e fa          	endbr64 
  809efe:	55                   	push   rbp
  809eff:	48 89 e5             	mov    rbp,rsp
  809f02:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  809f06:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:176
    inode->f_ops=&framebuffer_fops;
  809f0a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  809f0e:	48 ba 60 0e 81 00 00 	movabs rdx,0x810e60
  809f15:	00 00 00 
  809f18:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:177
    filp->f_ops=&framebuffer_fops;
  809f1c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  809f20:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:178
    return 1;
  809f24:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:179
}
  809f29:	5d                   	pop    rbp
  809f2a:	c3                   	ret    

0000000000809f2b <close_framebuffer>:
close_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:180
long close_framebuffer(struct index_node * inode,struct file * filp){
  809f2b:	f3 0f 1e fa          	endbr64 
  809f2f:	55                   	push   rbp
  809f30:	48 89 e5             	mov    rbp,rsp
  809f33:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  809f37:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:182

}
  809f3b:	90                   	nop
  809f3c:	5d                   	pop    rbp
  809f3d:	c3                   	ret    

0000000000809f3e <read_framebuffer>:
read_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:183
long read_framebuffer(struct file * filp,char * buf,unsigned long count,long * position){
  809f3e:	f3 0f 1e fa          	endbr64 
  809f42:	55                   	push   rbp
  809f43:	48 89 e5             	mov    rbp,rsp
  809f46:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  809f4a:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  809f4e:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  809f52:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:185

}
  809f56:	90                   	nop
  809f57:	5d                   	pop    rbp
  809f58:	c3                   	ret    

0000000000809f59 <write_framebuffer>:
write_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:186
long write_framebuffer(struct file * filp,char * buf,unsigned long count,long * position){
  809f59:	f3 0f 1e fa          	endbr64 
  809f5d:	55                   	push   rbp
  809f5e:	48 89 e5             	mov    rbp,rsp
  809f61:	48 83 ec 40          	sub    rsp,0x40
  809f65:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  809f69:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
  809f6d:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
  809f71:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:187
    char *tmp= (char*) kmalloc();
  809f75:	b8 00 00 00 00       	mov    eax,0x0
  809f7a:	48 ba d4 18 80 00 00 	movabs rdx,0x8018d4
  809f81:	00 00 00 
  809f84:	ff d2                	call   rdx
  809f86:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:188
    int c=count/(PAGE_4K_SIZE-1),p=0;
  809f8a:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  809f8e:	48 ba 11 00 01 10 00 	movabs rdx,0x10010010010011
  809f95:	01 10 00 
  809f98:	48 89 c8             	mov    rax,rcx
  809f9b:	48 f7 e2             	mul    rdx
  809f9e:	48 89 c8             	mov    rax,rcx
  809fa1:	48 29 d0             	sub    rax,rdx
  809fa4:	48 d1 e8             	shr    rax,1
  809fa7:	48 01 d0             	add    rax,rdx
  809faa:	48 c1 e8 0b          	shr    rax,0xb
  809fae:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
  809fb1:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190
    //一块一块输出
    for(int i=0;i<(c?c:1);i++){
  809fb8:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
  809fbf:	eb 54                	jmp    80a015 <write_framebuffer+0xbc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:191 (discriminator 7)
        memcpy(tmp,buf+p,PAGE_4K_SIZE-1);
  809fc1:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  809fc4:	48 63 d0             	movsxd rdx,eax
  809fc7:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  809fcb:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
  809fcf:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  809fd3:	ba ff 0f 00 00       	mov    edx,0xfff
  809fd8:	48 89 ce             	mov    rsi,rcx
  809fdb:	48 89 c7             	mov    rdi,rax
  809fde:	48 b8 72 03 81 00 00 	movabs rax,0x810372
  809fe5:	00 00 00 
  809fe8:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:192 (discriminator 7)
        tmp[PAGE_4K_SIZE-1]=0;
  809fea:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  809fee:	48 05 ff 0f 00 00    	add    rax,0xfff
  809ff4:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:193 (discriminator 7)
        print(tmp);
  809ff7:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  809ffb:	48 89 c7             	mov    rdi,rax
  809ffe:	48 b8 9d 9d 80 00 00 	movabs rax,0x809d9d
  80a005:	00 00 00 
  80a008:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:194 (discriminator 7)
        p+=PAGE_4K_SIZE-1;
  80a00a:	81 45 fc ff 0f 00 00 	add    DWORD PTR [rbp-0x4],0xfff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190 (discriminator 7)
    for(int i=0;i<(c?c:1);i++){
  80a011:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190 (discriminator 1)
  80a015:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
  80a019:	74 05                	je     80a020 <write_framebuffer+0xc7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190 (discriminator 3)
  80a01b:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  80a01e:	eb 05                	jmp    80a025 <write_framebuffer+0xcc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190 (discriminator 4)
  80a020:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190 (discriminator 6)
  80a025:	3b 45 f8             	cmp    eax,DWORD PTR [rbp-0x8]
  80a028:	7f 97                	jg     809fc1 <write_framebuffer+0x68>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:196
    }
    kmfree(tmp);
  80a02a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80a02e:	48 89 c7             	mov    rdi,rax
  80a031:	48 b8 e0 1b 80 00 00 	movabs rax,0x801be0
  80a038:	00 00 00 
  80a03b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:197
    return 0;
  80a03d:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:198
}
  80a042:	c9                   	leave  
  80a043:	c3                   	ret    

000000000080a044 <ioctl_framebuffer>:
ioctl_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:199
long ioctl_framebuffer(struct index_node * inode,struct file * filp,unsigned long cmd,unsigned long arg){
  80a044:	f3 0f 1e fa          	endbr64 
  80a048:	55                   	push   rbp
  80a049:	48 89 e5             	mov    rbp,rsp
  80a04c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  80a050:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  80a054:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  80a058:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:201

}
  80a05c:	90                   	nop
  80a05d:	5d                   	pop    rbp
  80a05e:	c3                   	ret    

000000000080a05f <path_walk>:
path_walk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:13
#include "log.h"
#include "mem.h"
#include "str.h"

struct dir_entry * path_walk(char * name,unsigned long flags)
{
  80a05f:	f3 0f 1e fa          	endbr64 
  80a063:	55                   	push   rbp
  80a064:	48 89 e5             	mov    rbp,rsp
  80a067:	48 83 ec 70          	sub    rsp,0x70
  80a06b:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
  80a06f:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:14
    char * tmpname = NULL;
  80a073:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
  80a07a:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:15
    int tmpnamelen = 0;
  80a07b:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:16
    struct dir_entry * parent = root_sb->root;
  80a082:	48 b8 48 b6 41 00 00 	movabs rax,0x41b648
  80a089:	00 00 00 
  80a08c:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80a08f:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80a092:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:17
    struct dir_entry * path = NULL;
  80a096:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
  80a09d:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:19

    while(*name == '/')
  80a09e:	eb 05                	jmp    80a0a5 <path_walk+0x46>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:20
        name++;
  80a0a0:	48 83 45 98 01       	add    QWORD PTR [rbp-0x68],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:19
    while(*name == '/')
  80a0a5:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  80a0a9:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  80a0ac:	3c 2f                	cmp    al,0x2f
  80a0ae:	74 f0                	je     80a0a0 <path_walk+0x41>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:22

    if(!*name)
  80a0b0:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  80a0b4:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  80a0b7:	84 c0                	test   al,al
  80a0b9:	75 09                	jne    80a0c4 <path_walk+0x65>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:24
    {
        return parent;
  80a0bb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80a0bf:	e9 d2 02 00 00       	jmp    80a396 <path_walk+0x337>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:29
    }

    for(;;)
    {
        tmpname = name;
  80a0c4:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  80a0c8:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:30
        while(*name && (*name != '/'))
  80a0cc:	eb 05                	jmp    80a0d3 <path_walk+0x74>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:31
            name++;
  80a0ce:	48 83 45 98 01       	add    QWORD PTR [rbp-0x68],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:30
        while(*name && (*name != '/'))
  80a0d3:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  80a0d7:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  80a0da:	84 c0                	test   al,al
  80a0dc:	74 0b                	je     80a0e9 <path_walk+0x8a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:30 (discriminator 1)
  80a0de:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  80a0e2:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  80a0e5:	3c 2f                	cmp    al,0x2f
  80a0e7:	75 e5                	jne    80a0ce <path_walk+0x6f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:32
        tmpnamelen = name - tmpname;
  80a0e9:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  80a0ed:	48 2b 45 f0          	sub    rax,QWORD PTR [rbp-0x10]
  80a0f1:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:34

        path = (struct dir_entry *) kmalloc(sizeof(struct dir_entry), 0);
  80a0f4:	be 00 00 00 00       	mov    esi,0x0
  80a0f9:	bf 58 00 00 00       	mov    edi,0x58
  80a0fe:	b8 00 00 00 00       	mov    eax,0x0
  80a103:	48 ba d4 18 80 00 00 	movabs rdx,0x8018d4
  80a10a:	00 00 00 
  80a10d:	ff d2                	call   rdx
  80a10f:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:35
        memset(path,0,sizeof(struct dir_entry));
  80a113:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  80a117:	ba 58 00 00 00       	mov    edx,0x58
  80a11c:	be 00 00 00 00       	mov    esi,0x0
  80a121:	48 89 c7             	mov    rdi,rax
  80a124:	48 b8 21 04 81 00 00 	movabs rax,0x810421
  80a12b:	00 00 00 
  80a12e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:37

        path->name = kmalloc();
  80a130:	b8 00 00 00 00       	mov    eax,0x0
  80a135:	48 ba d4 18 80 00 00 	movabs rdx,0x8018d4
  80a13c:	00 00 00 
  80a13f:	ff d2                	call   rdx
  80a141:	48 89 c2             	mov    rdx,rax
  80a144:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  80a148:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:38
        memset(path->name,0,tmpnamelen+1);
  80a14b:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  80a14e:	83 c0 01             	add    eax,0x1
  80a151:	89 c2                	mov    edx,eax
  80a153:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  80a157:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80a15a:	be 00 00 00 00       	mov    esi,0x0
  80a15f:	48 89 c7             	mov    rdi,rax
  80a162:	48 b8 21 04 81 00 00 	movabs rax,0x810421
  80a169:	00 00 00 
  80a16c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:39
        memcpy(path->name,tmpname,tmpnamelen);
  80a16e:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
  80a171:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  80a175:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80a178:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  80a17c:	48 89 ce             	mov    rsi,rcx
  80a17f:	48 89 c7             	mov    rdi,rax
  80a182:	48 b8 72 03 81 00 00 	movabs rax,0x810372
  80a189:	00 00 00 
  80a18c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:40
        path->name_length = tmpnamelen;
  80a18e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  80a192:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
  80a195:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:42

        path=parent->dir_inode->inode_ops->lookup(parent->dir_inode,path);
  80a198:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80a19c:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
  80a1a0:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
  80a1a4:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
  80a1a8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80a1ac:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
  80a1b0:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
  80a1b4:	48 89 d6             	mov    rsi,rdx
  80a1b7:	48 89 c7             	mov    rdi,rax
  80a1ba:	ff d1                	call   rcx
  80a1bc:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:43
        if(path == NULL)
  80a1c0:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
  80a1c5:	75 5b                	jne    80a222 <path_walk+0x1c3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:45
        {
            printf("can not find file or dir:%s\n",path->name);
  80a1c7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  80a1cb:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80a1ce:	48 89 c6             	mov    rsi,rax
  80a1d1:	48 b8 4f 8b 81 00 00 	movabs rax,0x818b4f
  80a1d8:	00 00 00 
  80a1db:	48 89 c7             	mov    rdi,rax
  80a1de:	b8 00 00 00 00       	mov    eax,0x0
  80a1e3:	48 ba 97 11 80 00 00 	movabs rdx,0x801197
  80a1ea:	00 00 00 
  80a1ed:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:46
            kmfree(path->name);
  80a1ef:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  80a1f3:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80a1f6:	48 89 c7             	mov    rdi,rax
  80a1f9:	48 b8 e0 1b 80 00 00 	movabs rax,0x801be0
  80a200:	00 00 00 
  80a203:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:47
            kmfree(path);
  80a205:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  80a209:	48 89 c7             	mov    rdi,rax
  80a20c:	48 b8 e0 1b 80 00 00 	movabs rax,0x801be0
  80a213:	00 00 00 
  80a216:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:48
            return NULL;
  80a218:	b8 00 00 00 00       	mov    eax,0x0
  80a21d:	e9 74 01 00 00       	jmp    80a396 <path_walk+0x337>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:53
        }

//        list_init(&path->child_node);
//        list_init(&path->subdirs_list);
        path->parent = parent;
  80a222:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  80a226:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  80a22a:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:56
        //list_add会查重，如果链表里面已经有了data指针值相同的项，就不添加。
        //对于/dev这样的文件夹，lookup返回的就是链表里的dentry，data会一样
        list_add(&parent->subdirs_list,&path->child_node);
  80a22e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  80a232:	48 83 c0 10          	add    rax,0x10
  80a236:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  80a23a:	48 83 c2 28          	add    rdx,0x28
  80a23e:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  80a242:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:33
    if(entry->next==NULL)
  80a246:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  80a24a:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80a24e:	48 85 c0             	test   rax,rax
  80a251:	75 58                	jne    80a2ab <path_walk+0x24c>
  80a253:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  80a257:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
  80a25b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  80a25f:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
  80a263:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80a267:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
  80a26b:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  80a26f:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
  80a273:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  80a277:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  80a27b:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
  80a27e:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  80a282:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80a286:	48 85 c0             	test   rax,rax
  80a289:	74 0f                	je     80a29a <path_walk+0x23b>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
  80a28b:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  80a28f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80a293:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
  80a297:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:29
    entry->next = new;
  80a29a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80a29e:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
  80a2a2:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
  80a2a6:	e9 9c 00 00 00       	jmp    80a347 <path_walk+0x2e8>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:36
        struct List* p=entry;
  80a2ab:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  80a2af:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
  80a2b3:	eb 21                	jmp    80a2d6 <path_walk+0x277>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:38
            if(p->data==new->data)
  80a2b5:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  80a2b9:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
  80a2bd:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  80a2c1:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  80a2c5:	48 39 c2             	cmp    rdx,rax
  80a2c8:	74 7c                	je     80a346 <path_walk+0x2e7>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
  80a2ca:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  80a2ce:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80a2d2:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  80a2d6:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  80a2da:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80a2de:	48 85 c0             	test   rax,rax
  80a2e1:	74 0e                	je     80a2f1 <path_walk+0x292>
  80a2e3:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  80a2e7:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80a2eb:	48 39 45 b8          	cmp    QWORD PTR [rbp-0x48],rax
  80a2ef:	75 c4                	jne    80a2b5 <path_walk+0x256>
  80a2f1:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  80a2f5:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
  80a2f9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  80a2fd:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
  80a301:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  80a305:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
  80a309:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  80a30d:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
  80a311:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  80a315:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
  80a319:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
  80a31c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  80a320:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80a324:	48 85 c0             	test   rax,rax
  80a327:	74 0f                	je     80a338 <path_walk+0x2d9>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
  80a329:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  80a32d:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80a331:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
  80a335:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:29
    entry->next = new;
  80a338:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  80a33c:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
  80a340:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
  80a344:	eb 01                	jmp    80a347 <path_walk+0x2e8>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:39
                return;
  80a346:	90                   	nop
path_walk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:58

        if(!*name)
  80a347:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  80a34b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  80a34e:	84 c0                	test   al,al
  80a350:	74 2a                	je     80a37c <path_walk+0x31d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:60
            goto last_component;
        while(*name == '/')
  80a352:	eb 05                	jmp    80a359 <path_walk+0x2fa>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:61
            name++;
  80a354:	48 83 45 98 01       	add    QWORD PTR [rbp-0x68],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:60
        while(*name == '/')
  80a359:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  80a35d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  80a360:	3c 2f                	cmp    al,0x2f
  80a362:	74 f0                	je     80a354 <path_walk+0x2f5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:62
        if(!*name)
  80a364:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  80a368:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  80a36b:	84 c0                	test   al,al
  80a36d:	74 10                	je     80a37f <path_walk+0x320>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:65
            goto last_slash;

        parent = path;
  80a36f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  80a373:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:29
        tmpname = name;
  80a377:	e9 48 fd ff ff       	jmp    80a0c4 <path_walk+0x65>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:59
            goto last_component;
  80a37c:	90                   	nop
  80a37d:	eb 01                	jmp    80a380 <path_walk+0x321>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:63
            goto last_slash;
  80a37f:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:71
    }

    last_slash:
    last_component:

    if(flags & 1)
  80a380:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  80a384:	83 e0 01             	and    eax,0x1
  80a387:	48 85 c0             	test   rax,rax
  80a38a:	74 06                	je     80a392 <path_walk+0x333>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:73
    {
        return parent;
  80a38c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80a390:	eb 04                	jmp    80a396 <path_walk+0x337>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:76
    }

    return path;
  80a392:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:77
}
  80a396:	c9                   	leave  
  80a397:	c3                   	ret    

000000000080a398 <fill_dentry>:
fill_dentry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:81


int fill_dentry(void *buf,char *name, long namelen,long type,long offset)
{
  80a398:	f3 0f 1e fa          	endbr64 
  80a39c:	55                   	push   rbp
  80a39d:	48 89 e5             	mov    rbp,rsp
  80a3a0:	48 83 ec 40          	sub    rsp,0x40
  80a3a4:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  80a3a8:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  80a3ac:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  80a3b0:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
  80a3b4:	4c 89 45 c8          	mov    QWORD PTR [rbp-0x38],r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:82
    struct dirent* dent = (struct dirent*)buf;
  80a3b8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80a3bc:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:84

    if((unsigned long)buf < PAGE_4K_SIZE)
  80a3c0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80a3c4:	48 3d ff 0f 00 00    	cmp    rax,0xfff
  80a3ca:	77 07                	ja     80a3d3 <fill_dentry+0x3b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:85
        return -EFAULT;
  80a3cc:	b8 eb ff ff ff       	mov    eax,0xffffffeb
  80a3d1:	eb 4e                	jmp    80a421 <fill_dentry+0x89>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:87

    memcpy(name,dent->d_name,namelen);
  80a3d3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  80a3d7:	89 c2                	mov    edx,eax
  80a3d9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80a3dd:	48 8d 48 18          	lea    rcx,[rax+0x18]
  80a3e1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  80a3e5:	48 89 ce             	mov    rsi,rcx
  80a3e8:	48 89 c7             	mov    rdi,rax
  80a3eb:	48 b8 72 03 81 00 00 	movabs rax,0x810372
  80a3f2:	00 00 00 
  80a3f5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:88
    dent->d_namelen = namelen;
  80a3f7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80a3fb:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  80a3ff:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:89
    dent->d_type = type;
  80a403:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80a407:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  80a40b:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:90
    dent->d_offset = offset;
  80a40f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80a413:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  80a417:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:91
    return sizeof(struct dirent) + namelen;
  80a41a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  80a41e:	83 c0 18             	add    eax,0x18
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:92
}
  80a421:	c9                   	leave  
  80a422:	c3                   	ret    

000000000080a423 <mount_fs>:
mount_fs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:99
//function mount_root
struct super_block * root_sb = NULL;
struct file_system_type filesystem = {"filesystem",0};

struct super_block* mount_fs(char * name,struct Disk_Partition_Table_Entry * DPTE,void * buf)
{
  80a423:	f3 0f 1e fa          	endbr64 
  80a427:	55                   	push   rbp
  80a428:	48 89 e5             	mov    rbp,rsp
  80a42b:	48 83 ec 30          	sub    rsp,0x30
  80a42f:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  80a433:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  80a437:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:100
    struct file_system_type * p = NULL;
  80a43b:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
  80a442:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:102

    for(p = &filesystem;p;p = p->next)
  80a443:	48 b8 a0 0e 81 00 00 	movabs rax,0x810ea0
  80a44a:	00 00 00 
  80a44d:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  80a451:	eb 47                	jmp    80a49a <mount_fs+0x77>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:103
        if(!strcmp(p->name,name))
  80a453:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80a457:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80a45a:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  80a45e:	48 89 d6             	mov    rsi,rdx
  80a461:	48 89 c7             	mov    rdi,rax
  80a464:	48 b8 10 06 81 00 00 	movabs rax,0x810610
  80a46b:	00 00 00 
  80a46e:	ff d0                	call   rax
  80a470:	85 c0                	test   eax,eax
  80a472:	75 1a                	jne    80a48e <mount_fs+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:105
        {
            return p->read_superblock(DPTE,buf);
  80a474:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80a478:	48 8b 48 10          	mov    rcx,QWORD PTR [rax+0x10]
  80a47c:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  80a480:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  80a484:	48 89 d6             	mov    rsi,rdx
  80a487:	48 89 c7             	mov    rdi,rax
  80a48a:	ff d1                	call   rcx
  80a48c:	eb 18                	jmp    80a4a6 <mount_fs+0x83>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:102 (discriminator 2)
    for(p = &filesystem;p;p = p->next)
  80a48e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80a492:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  80a496:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:102 (discriminator 1)
  80a49a:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
  80a49f:	75 b2                	jne    80a453 <mount_fs+0x30>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:107
        }
    return 0;
  80a4a1:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:108
}
  80a4a6:	c9                   	leave  
  80a4a7:	c3                   	ret    

000000000080a4a8 <register_filesystem>:
register_filesystem():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:111

unsigned long register_filesystem(struct file_system_type * fs)
{
  80a4a8:	f3 0f 1e fa          	endbr64 
  80a4ac:	55                   	push   rbp
  80a4ad:	48 89 e5             	mov    rbp,rsp
  80a4b0:	48 83 ec 20          	sub    rsp,0x20
  80a4b4:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:112
    struct file_system_type * p = NULL;
  80a4b8:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
  80a4bf:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:114

    for(p = &filesystem;p;p = p->next)
  80a4c0:	48 b8 a0 0e 81 00 00 	movabs rax,0x810ea0
  80a4c7:	00 00 00 
  80a4ca:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  80a4ce:	eb 37                	jmp    80a507 <register_filesystem+0x5f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:115
        if(!strcmp(fs->name,p->name))
  80a4d0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80a4d4:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  80a4d7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80a4db:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80a4de:	48 89 d6             	mov    rsi,rdx
  80a4e1:	48 89 c7             	mov    rdi,rax
  80a4e4:	48 b8 10 06 81 00 00 	movabs rax,0x810610
  80a4eb:	00 00 00 
  80a4ee:	ff d0                	call   rax
  80a4f0:	85 c0                	test   eax,eax
  80a4f2:	75 07                	jne    80a4fb <register_filesystem+0x53>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:116
            return 0;
  80a4f4:	b8 00 00 00 00       	mov    eax,0x0
  80a4f9:	eb 40                	jmp    80a53b <register_filesystem+0x93>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:114 (discriminator 2)
    for(p = &filesystem;p;p = p->next)
  80a4fb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80a4ff:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  80a503:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:114 (discriminator 1)
  80a507:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
  80a50c:	75 c2                	jne    80a4d0 <register_filesystem+0x28>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:118

    fs->next = filesystem.next;
  80a50e:	48 b8 a0 0e 81 00 00 	movabs rax,0x810ea0
  80a515:	00 00 00 
  80a518:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
  80a51c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80a520:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:119
    filesystem.next = fs;
  80a524:	48 ba a0 0e 81 00 00 	movabs rdx,0x810ea0
  80a52b:	00 00 00 
  80a52e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80a532:	48 89 42 18          	mov    QWORD PTR [rdx+0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:121

    return 1;
  80a536:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:122
}
  80a53b:	c9                   	leave  
  80a53c:	c3                   	ret    

000000000080a53d <unregister_filesystem>:
unregister_filesystem():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:125

unsigned long unregister_filesystem(struct file_system_type * fs)
{
  80a53d:	f3 0f 1e fa          	endbr64 
  80a541:	55                   	push   rbp
  80a542:	48 89 e5             	mov    rbp,rsp
  80a545:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:126
    struct file_system_type * p = &filesystem;
  80a549:	48 b8 a0 0e 81 00 00 	movabs rax,0x810ea0
  80a550:	00 00 00 
  80a553:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:128

    while(p->next)
  80a557:	eb 41                	jmp    80a59a <unregister_filesystem+0x5d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:129
        if(p->next == fs)
  80a559:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80a55d:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  80a561:	48 39 45 e8          	cmp    QWORD PTR [rbp-0x18],rax
  80a565:	75 27                	jne    80a58e <unregister_filesystem+0x51>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:131
        {
            p->next = p->next->next;
  80a567:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80a56b:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  80a56f:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
  80a573:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80a577:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:132
            fs->next = NULL;
  80a57b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80a57f:	48 c7 40 18 00 00 00 	mov    QWORD PTR [rax+0x18],0x0
  80a586:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:133
            return 1;
  80a587:	b8 01 00 00 00       	mov    eax,0x1
  80a58c:	eb 1e                	jmp    80a5ac <unregister_filesystem+0x6f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:136
        }
        else
            p = p->next;
  80a58e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80a592:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  80a596:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:128
    while(p->next)
  80a59a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80a59e:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  80a5a2:	48 85 c0             	test   rax,rax
  80a5a5:	75 b2                	jne    80a559 <unregister_filesystem+0x1c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:137
    return 0;
  80a5a7:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:138
}
  80a5ac:	5d                   	pop    rbp
  80a5ad:	c3                   	ret    

000000000080a5ae <root_lookup>:
root_lookup():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:140
//在parent inode下查找dest dentry
struct dir_entry* root_lookup(struct index_node * parent_inode,struct dir_entry * dest_dentry){
  80a5ae:	f3 0f 1e fa          	endbr64 
  80a5b2:	55                   	push   rbp
  80a5b3:	48 89 e5             	mov    rbp,rsp
  80a5b6:	48 83 ec 30          	sub    rsp,0x30
  80a5ba:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  80a5be:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:141
    struct dir_entry* tmp= (struct dir_entry *) parent_inode->private_index_info;
  80a5c2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  80a5c6:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
  80a5ca:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:142
    struct List* p= tmp->subdirs_list.next;
  80a5ce:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80a5d2:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
  80a5d6:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:143
    while (p){
  80a5da:	eb 55                	jmp    80a631 <root_lookup+0x83>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:144
        struct dir_entry* dp=p->data;
  80a5dc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80a5e0:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  80a5e4:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:145
        if(strcmp(dp->name,dest_dentry->name)==0){
  80a5e8:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  80a5ec:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  80a5ef:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80a5f3:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80a5f6:	48 89 d6             	mov    rsi,rdx
  80a5f9:	48 89 c7             	mov    rdi,rax
  80a5fc:	48 b8 10 06 81 00 00 	movabs rax,0x810610
  80a603:	00 00 00 
  80a606:	ff d0                	call   rax
  80a608:	85 c0                	test   eax,eax
  80a60a:	75 19                	jne    80a625 <root_lookup+0x77>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:146
            kmfree(dest_dentry);
  80a60c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  80a610:	48 89 c7             	mov    rdi,rax
  80a613:	48 b8 e0 1b 80 00 00 	movabs rax,0x801be0
  80a61a:	00 00 00 
  80a61d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:147
            return dp;
  80a61f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80a623:	eb 2b                	jmp    80a650 <root_lookup+0xa2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:149
        }
        p=p->next;
  80a625:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80a629:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80a62d:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:143
    while (p){
  80a631:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
  80a636:	75 a4                	jne    80a5dc <root_lookup+0x2e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:151
    }
    kmfree(dest_dentry);
  80a638:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  80a63c:	48 89 c7             	mov    rdi,rax
  80a63f:	48 b8 e0 1b 80 00 00 	movabs rax,0x801be0
  80a646:	00 00 00 
  80a649:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:152
    return NULL;
  80a64b:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:153
}
  80a650:	c9                   	leave  
  80a651:	c3                   	ret    

000000000080a652 <mount_rootfs>:
mount_rootfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:157
struct index_node_operations root_iops={
    .lookup=root_lookup
};
void mount_rootfs(){
  80a652:	f3 0f 1e fa          	endbr64 
  80a656:	55                   	push   rbp
  80a657:	48 89 e5             	mov    rbp,rsp
  80a65a:	48 83 ec 20          	sub    rsp,0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:158
    root_sb=(struct super_block*) kmalloc();
  80a65e:	b8 00 00 00 00       	mov    eax,0x0
  80a663:	48 ba d4 18 80 00 00 	movabs rdx,0x8018d4
  80a66a:	00 00 00 
  80a66d:	ff d2                	call   rdx
  80a66f:	48 89 c2             	mov    rdx,rax
  80a672:	48 b8 48 b6 41 00 00 	movabs rax,0x41b648
  80a679:	00 00 00 
  80a67c:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:159
    root_sb->root=root_sb+1;//紧凑跟在后面
  80a67f:	48 b8 48 b6 41 00 00 	movabs rax,0x41b648
  80a686:	00 00 00 
  80a689:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  80a68c:	48 b8 48 b6 41 00 00 	movabs rax,0x41b648
  80a693:	00 00 00 
  80a696:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80a699:	48 83 c2 18          	add    rdx,0x18
  80a69d:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:160
    root_sb->sb_ops=NULL;
  80a6a0:	48 b8 48 b6 41 00 00 	movabs rax,0x41b648
  80a6a7:	00 00 00 
  80a6aa:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80a6ad:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
  80a6b4:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:161
    struct index_node* ir=root_sb->root+1;
  80a6b5:	48 b8 48 b6 41 00 00 	movabs rax,0x41b648
  80a6bc:	00 00 00 
  80a6bf:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80a6c2:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80a6c5:	48 83 c0 58          	add    rax,0x58
  80a6c9:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:162
    root_sb->root->dir_inode=ir;
  80a6cd:	48 b8 48 b6 41 00 00 	movabs rax,0x41b648
  80a6d4:	00 00 00 
  80a6d7:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80a6da:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80a6dd:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  80a6e1:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:163
    ir->sb=root_sb;
  80a6e5:	48 b8 48 b6 41 00 00 	movabs rax,0x41b648
  80a6ec:	00 00 00 
  80a6ef:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  80a6f2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80a6f6:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:164
    ir->attribute=FS_ATTR_DIR;
  80a6fa:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80a6fe:	48 c7 40 10 02 00 00 	mov    QWORD PTR [rax+0x10],0x2
  80a705:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:165
    ir->file_size=0;
  80a706:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80a70a:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:166
    ir->inode_ops=&root_iops;//lookup函数是必要的
  80a711:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80a715:	48 b9 c0 0e 81 00 00 	movabs rcx,0x810ec0
  80a71c:	00 00 00 
  80a71f:	48 89 48 28          	mov    QWORD PTR [rax+0x28],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:167
    ir->f_ops=NULL;
  80a723:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80a727:	48 c7 40 20 00 00 00 	mov    QWORD PTR [rax+0x20],0x0
  80a72e:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:168
    ir->private_index_info=root_sb->root;
  80a72f:	48 b8 48 b6 41 00 00 	movabs rax,0x41b648
  80a736:	00 00 00 
  80a739:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80a73c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  80a73f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80a743:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:170

    root_sb->root->name=ir+1;//紧凑跟在后面
  80a747:	48 b8 48 b6 41 00 00 	movabs rax,0x41b648
  80a74e:	00 00 00 
  80a751:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80a754:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80a757:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  80a75b:	48 83 c2 38          	add    rdx,0x38
  80a75f:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:171
    strcpy(root_sb->root->name,"/");
  80a762:	48 b8 48 b6 41 00 00 	movabs rax,0x41b648
  80a769:	00 00 00 
  80a76c:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80a76f:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80a772:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80a775:	48 ba 77 8b 81 00 00 	movabs rdx,0x818b77
  80a77c:	00 00 00 
  80a77f:	48 89 d6             	mov    rsi,rdx
  80a782:	48 89 c7             	mov    rdi,rax
  80a785:	48 b8 70 04 81 00 00 	movabs rax,0x810470
  80a78c:	00 00 00 
  80a78f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:172
    root_sb->root->name_length=1;
  80a791:	48 b8 48 b6 41 00 00 	movabs rax,0x41b648
  80a798:	00 00 00 
  80a79b:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80a79e:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80a7a1:	c7 40 08 01 00 00 00 	mov    DWORD PTR [rax+0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:173
    root_sb->root->parent=root_sb->root;
  80a7a8:	48 b8 48 b6 41 00 00 	movabs rax,0x41b648
  80a7af:	00 00 00 
  80a7b2:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  80a7b5:	48 b8 48 b6 41 00 00 	movabs rax,0x41b648
  80a7bc:	00 00 00 
  80a7bf:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80a7c2:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80a7c5:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
  80a7c8:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:174
    list_init(&root_sb->root->subdirs_list);
  80a7cc:	48 b8 48 b6 41 00 00 	movabs rax,0x41b648
  80a7d3:	00 00 00 
  80a7d6:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80a7d9:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80a7dc:	48 83 c0 28          	add    rax,0x28
  80a7e0:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
  80a7e4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80a7e8:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
  80a7ef:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80a7f3:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
  80a7fa:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
  80a7fb:	90                   	nop
mount_rootfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:175
    list_init(&root_sb->root->child_node);
  80a7fc:	48 b8 48 b6 41 00 00 	movabs rax,0x41b648
  80a803:	00 00 00 
  80a806:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80a809:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80a80c:	48 83 c0 10          	add    rax,0x10
  80a810:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
  80a814:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80a818:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
  80a81f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80a823:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
  80a82a:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
  80a82b:	90                   	nop
mount_rootfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:177

}
  80a82c:	90                   	nop
  80a82d:	c9                   	leave  
  80a82e:	c3                   	ret    

000000000080a82f <sys_putstring>:
sys_putstring():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:20
#include "syscall.h"
#include "int.h"


unsigned long sys_putstring(char *string)
{
  80a82f:	f3 0f 1e fa          	endbr64 
  80a833:	55                   	push   rbp
  80a834:	48 89 e5             	mov    rbp,rsp
  80a837:	48 83 ec 10          	sub    rsp,0x10
  80a83b:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:21
    printf(string);
  80a83f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80a843:	48 89 c7             	mov    rdi,rax
  80a846:	b8 00 00 00 00       	mov    eax,0x0
  80a84b:	48 ba 97 11 80 00 00 	movabs rdx,0x801197
  80a852:	00 00 00 
  80a855:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:22
    return 0;
  80a857:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:23
}
  80a85c:	c9                   	leave  
  80a85d:	c3                   	ret    

000000000080a85e <sys_open>:
sys_open():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:26

unsigned long sys_open(char *filename,int flags)
{
  80a85e:	f3 0f 1e fa          	endbr64 
  80a862:	55                   	push   rbp
  80a863:	48 89 e5             	mov    rbp,rsp
  80a866:	48 81 ec a0 00 00 00 	sub    rsp,0xa0
  80a86d:	48 89 bd 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdi
  80a874:	89 b5 64 ff ff ff    	mov    DWORD PTR [rbp-0x9c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:27
    char * path = NULL;
  80a87a:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
  80a881:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:28
    long pathlen = 0;
  80a882:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
  80a889:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:29
    long error = 0;
  80a88a:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
  80a891:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:30
    struct dir_entry * dentry = NULL;
  80a892:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
  80a899:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:31
    struct file * filp = NULL;
  80a89a:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
  80a8a1:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:32
    struct file ** f = NULL;
  80a8a2:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
  80a8a9:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:33
    int fd = -1;
  80a8aa:	c7 45 ec ff ff ff ff 	mov    DWORD PTR [rbp-0x14],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:37
    int i;

//	printf("sys_open\n");
    path = (char *) kmalloc();
  80a8b1:	b8 00 00 00 00       	mov    eax,0x0
  80a8b6:	48 ba d4 18 80 00 00 	movabs rdx,0x8018d4
  80a8bd:	00 00 00 
  80a8c0:	ff d2                	call   rdx
  80a8c2:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:38
    if(path == NULL)
  80a8c6:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
  80a8cb:	75 0c                	jne    80a8d9 <sys_open+0x7b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:39
        return -ENOMEM;
  80a8cd:	48 c7 c0 cf ff ff ff 	mov    rax,0xffffffffffffffcf
  80a8d4:	e9 8f 05 00 00       	jmp    80ae68 <sys_open+0x60a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:40
    memset(path,0,PAGE_4K_SIZE);
  80a8d9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  80a8dd:	ba 00 10 00 00       	mov    edx,0x1000
  80a8e2:	be 00 00 00 00       	mov    esi,0x0
  80a8e7:	48 89 c7             	mov    rdi,rax
  80a8ea:	48 b8 21 04 81 00 00 	movabs rax,0x810421
  80a8f1:	00 00 00 
  80a8f4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:41
    pathlen = strlen(filename);
  80a8f6:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
  80a8fd:	48 89 c7             	mov    rdi,rax
  80a900:	48 b8 8f 06 81 00 00 	movabs rax,0x81068f
  80a907:	00 00 00 
  80a90a:	ff d0                	call   rax
  80a90c:	48 98                	cdqe   
  80a90e:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:42
    if(pathlen <= 0)
  80a912:	48 83 7d d0 00       	cmp    QWORD PTR [rbp-0x30],0x0
  80a917:	7f 1f                	jg     80a938 <sys_open+0xda>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:44
    {
        kmfree(path);
  80a919:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  80a91d:	48 89 c7             	mov    rdi,rax
  80a920:	48 b8 e0 1b 80 00 00 	movabs rax,0x801be0
  80a927:	00 00 00 
  80a92a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:45
        return -EFAULT;
  80a92c:	48 c7 c0 eb ff ff ff 	mov    rax,0xffffffffffffffeb
  80a933:	e9 30 05 00 00       	jmp    80ae68 <sys_open+0x60a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:47
    }
    else if(pathlen >= PAGE_4K_SIZE)
  80a938:	48 81 7d d0 ff 0f 00 	cmp    QWORD PTR [rbp-0x30],0xfff
  80a93f:	00 
  80a940:	7e 1f                	jle    80a961 <sys_open+0x103>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:49
    {
        kmfree(path);
  80a942:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  80a946:	48 89 c7             	mov    rdi,rax
  80a949:	48 b8 e0 1b 80 00 00 	movabs rax,0x801be0
  80a950:	00 00 00 
  80a953:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:50
        return -ENAMETOOLONG;
  80a955:	48 c7 c0 db ff ff ff 	mov    rax,0xffffffffffffffdb
  80a95c:	e9 07 05 00 00       	jmp    80ae68 <sys_open+0x60a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:52
    }
    strcpy(path,filename);
  80a961:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
  80a968:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  80a96c:	48 89 d6             	mov    rsi,rdx
  80a96f:	48 89 c7             	mov    rdi,rax
  80a972:	48 b8 70 04 81 00 00 	movabs rax,0x810470
  80a979:	00 00 00 
  80a97c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:54

    dentry = path_walk(path,0);
  80a97e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  80a982:	be 00 00 00 00       	mov    esi,0x0
  80a987:	48 89 c7             	mov    rdi,rax
  80a98a:	48 b8 5f a0 80 00 00 	movabs rax,0x80a05f
  80a991:	00 00 00 
  80a994:	ff d0                	call   rax
  80a996:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:56

    if(dentry == NULL){
  80a99a:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
  80a99f:	0f 85 85 02 00 00    	jne    80ac2a <sys_open+0x3cc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:61
        if(!flags&O_CREAT)
            return -ENOENT;
        //创建文件
        //找到上一级目录
        char* p=path+strlen(path)-1;
  80a9a5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  80a9a9:	48 89 c7             	mov    rdi,rax
  80a9ac:	48 b8 8f 06 81 00 00 	movabs rax,0x81068f
  80a9b3:	00 00 00 
  80a9b6:	ff d0                	call   rax
  80a9b8:	48 98                	cdqe   
  80a9ba:	48 8d 50 ff          	lea    rdx,[rax-0x1]
  80a9be:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  80a9c2:	48 01 d0             	add    rax,rdx
  80a9c5:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:62
        for(;*p!='/'&&p>path;p--);
  80a9c9:	eb 05                	jmp    80a9d0 <sys_open+0x172>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:62 (discriminator 3)
  80a9cb:	48 83 6d e0 01       	sub    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:62 (discriminator 1)
  80a9d0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  80a9d4:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  80a9d7:	3c 2f                	cmp    al,0x2f
  80a9d9:	74 0a                	je     80a9e5 <sys_open+0x187>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:62 (discriminator 2)
  80a9db:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  80a9df:	48 3b 45 d8          	cmp    rax,QWORD PTR [rbp-0x28]
  80a9e3:	77 e6                	ja     80a9cb <sys_open+0x16d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:63
        *p='\0';
  80a9e5:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  80a9e9:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:64
        struct dir_entry *parent= path_walk(path,O_DIRECTORY);
  80a9ec:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  80a9f0:	be 00 40 00 00       	mov    esi,0x4000
  80a9f5:	48 89 c7             	mov    rdi,rax
  80a9f8:	48 b8 5f a0 80 00 00 	movabs rax,0x80a05f
  80a9ff:	00 00 00 
  80aa02:	ff d0                	call   rax
  80aa04:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:65
        if(parent==NULL)
  80aa08:	48 83 7d b8 00       	cmp    QWORD PTR [rbp-0x48],0x0
  80aa0d:	75 0c                	jne    80aa1b <sys_open+0x1bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:66
            return -ENOENT;//上级目录也不在
  80aa0f:	48 c7 c0 d3 ff ff ff 	mov    rax,0xffffffffffffffd3
  80aa16:	e9 4d 04 00 00       	jmp    80ae68 <sys_open+0x60a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:68
        //创建新的文件
        dentry=(struct dir_entry*) kmalloc();
  80aa1b:	b8 00 00 00 00       	mov    eax,0x0
  80aa20:	48 ba d4 18 80 00 00 	movabs rdx,0x8018d4
  80aa27:	00 00 00 
  80aa2a:	ff d2                	call   rdx
  80aa2c:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:69
        list_init(&dentry->subdirs_list);
  80aa30:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80aa34:	48 83 c0 28          	add    rax,0x28
  80aa38:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
  80aa3f:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  80aa46:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
  80aa4d:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  80aa54:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
  80aa5b:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
  80aa5c:	90                   	nop
sys_open():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:70
        list_init(&dentry->child_node);
  80aa5d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80aa61:	48 83 c0 10          	add    rax,0x10
  80aa65:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
  80aa6c:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  80aa73:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
  80aa7a:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  80aa81:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
  80aa88:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
  80aa89:	90                   	nop
sys_open():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:71
        dentry->child_node.data=dentry;
  80aa8a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80aa8e:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  80aa92:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:72
        list_add(&parent->subdirs_list,&dentry->child_node);
  80aa96:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80aa9a:	48 83 c0 10          	add    rax,0x10
  80aa9e:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  80aaa2:	48 83 c2 28          	add    rdx,0x28
  80aaa6:	48 89 55 b0          	mov    QWORD PTR [rbp-0x50],rdx
  80aaaa:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:33
    if(entry->next==NULL)
  80aaae:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  80aab2:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80aab6:	48 85 c0             	test   rax,rax
  80aab9:	75 58                	jne    80ab13 <sys_open+0x2b5>
  80aabb:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  80aabf:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
  80aac3:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  80aac7:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
  80aacb:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  80aacf:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
  80aad3:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  80aad7:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
  80aadb:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  80aadf:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
  80aae3:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
  80aae6:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  80aaea:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80aaee:	48 85 c0             	test   rax,rax
  80aaf1:	74 0f                	je     80ab02 <sys_open+0x2a4>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
  80aaf3:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  80aaf7:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80aafb:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
  80aaff:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:29
    entry->next = new;
  80ab02:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  80ab06:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
  80ab0a:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
  80ab0e:	e9 9c 00 00 00       	jmp    80abaf <sys_open+0x351>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:36
        struct List* p=entry;
  80ab13:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  80ab17:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
  80ab1b:	eb 21                	jmp    80ab3e <sys_open+0x2e0>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:38
            if(p->data==new->data)
  80ab1d:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  80ab21:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
  80ab25:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  80ab29:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  80ab2d:	48 39 c2             	cmp    rdx,rax
  80ab30:	74 7c                	je     80abae <sys_open+0x350>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:37
        for(;p->next&&p->next!=p;p=p->next){
  80ab32:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  80ab36:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80ab3a:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
  80ab3e:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  80ab42:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80ab46:	48 85 c0             	test   rax,rax
  80ab49:	74 0e                	je     80ab59 <sys_open+0x2fb>
  80ab4b:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  80ab4f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80ab53:	48 39 45 90          	cmp    QWORD PTR [rbp-0x70],rax
  80ab57:	75 c4                	jne    80ab1d <sys_open+0x2bf>
  80ab59:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  80ab5d:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  80ab61:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  80ab65:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
  80ab69:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  80ab6d:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
  80ab71:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  80ab75:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
  80ab79:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  80ab7d:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
  80ab81:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
  80ab84:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  80ab88:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80ab8c:	48 85 c0             	test   rax,rax
  80ab8f:	74 0f                	je     80aba0 <sys_open+0x342>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
  80ab91:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  80ab95:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80ab99:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
  80ab9d:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:29
    entry->next = new;
  80aba0:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  80aba4:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
  80aba8:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
  80abac:	eb 01                	jmp    80abaf <sys_open+0x351>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:39
                return;
  80abae:	90                   	nop
sys_open():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:73
        dentry->parent=parent;
  80abaf:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80abb3:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  80abb7:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:74
        dentry->dir_inode=dentry+1;//放在后面
  80abbb:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80abbf:	48 8d 50 58          	lea    rdx,[rax+0x58]
  80abc3:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80abc7:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:75
        dentry->dir_inode->file_size=0;
  80abcb:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80abcf:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
  80abd3:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:77
        //继承操作方法
        dentry->dir_inode->f_ops=parent->dir_inode->f_ops;
  80abda:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  80abde:	48 8b 50 40          	mov    rdx,QWORD PTR [rax+0x40]
  80abe2:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80abe6:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
  80abea:	48 8b 52 20          	mov    rdx,QWORD PTR [rdx+0x20]
  80abee:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:78
        dentry->dir_inode->inode_ops=parent->dir_inode->inode_ops;
  80abf2:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  80abf6:	48 8b 50 40          	mov    rdx,QWORD PTR [rax+0x40]
  80abfa:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80abfe:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
  80ac02:	48 8b 52 28          	mov    rdx,QWORD PTR [rdx+0x28]
  80ac06:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:79
        dentry->dir_ops=parent->dir_ops;
  80ac0a:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  80ac0e:	48 8b 50 50          	mov    rdx,QWORD PTR [rax+0x50]
  80ac12:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80ac16:	48 89 50 50          	mov    QWORD PTR [rax+0x50],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:81
        //这样的创建文件只能创建普通文件，设备文件要通过devman创建
        dentry->dir_inode->attribute=FS_ATTR_FILE;
  80ac1a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80ac1e:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
  80ac22:	48 c7 40 10 01 00 00 	mov    QWORD PTR [rax+0x10],0x1
  80ac29:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:83
    }
    kmfree(path);
  80ac2a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  80ac2e:	48 89 c7             	mov    rdi,rax
  80ac31:	48 b8 e0 1b 80 00 00 	movabs rax,0x801be0
  80ac38:	00 00 00 
  80ac3b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:85

    if((flags & O_DIRECTORY) && (dentry->dir_inode->attribute != FS_ATTR_DIR))
  80ac3d:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
  80ac43:	25 00 40 00 00       	and    eax,0x4000
  80ac48:	85 c0                	test   eax,eax
  80ac4a:	74 1e                	je     80ac6a <sys_open+0x40c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:85 (discriminator 1)
  80ac4c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80ac50:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
  80ac54:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80ac58:	48 83 f8 02          	cmp    rax,0x2
  80ac5c:	74 0c                	je     80ac6a <sys_open+0x40c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:86
        return -ENOTDIR;
  80ac5e:	48 c7 c0 c7 ff ff ff 	mov    rax,0xffffffffffffffc7
  80ac65:	e9 fe 01 00 00       	jmp    80ae68 <sys_open+0x60a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:87
    if(!(flags & O_DIRECTORY) && (dentry->dir_inode->attribute == FS_ATTR_DIR))
  80ac6a:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
  80ac70:	25 00 40 00 00       	and    eax,0x4000
  80ac75:	85 c0                	test   eax,eax
  80ac77:	75 1e                	jne    80ac97 <sys_open+0x439>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:87 (discriminator 1)
  80ac79:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80ac7d:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
  80ac81:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80ac85:	48 83 f8 02          	cmp    rax,0x2
  80ac89:	75 0c                	jne    80ac97 <sys_open+0x439>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:88
        return -EISDIR;
  80ac8b:	48 c7 c0 e1 ff ff ff 	mov    rax,0xffffffffffffffe1
  80ac92:	e9 d1 01 00 00       	jmp    80ae68 <sys_open+0x60a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:90

    filp = (struct file *) kmalloc();
  80ac97:	b8 00 00 00 00       	mov    eax,0x0
  80ac9c:	48 ba d4 18 80 00 00 	movabs rdx,0x8018d4
  80aca3:	00 00 00 
  80aca6:	ff d2                	call   rdx
  80aca8:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:91
    memset(filp,0,sizeof(struct file));
  80acac:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80acb0:	ba 28 00 00 00       	mov    edx,0x28
  80acb5:	be 00 00 00 00       	mov    esi,0x0
  80acba:	48 89 c7             	mov    rdi,rax
  80acbd:	48 b8 21 04 81 00 00 	movabs rax,0x810421
  80acc4:	00 00 00 
  80acc7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:92
    filp->dentry = dentry;
  80acc9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80accd:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  80acd1:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:93
    filp->mode = flags;
  80acd5:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
  80acdb:	48 63 d0             	movsxd rdx,eax
  80acde:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80ace2:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:95

    if(dentry->dir_inode->attribute & FS_ATTR_DEVICE){
  80ace6:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80acea:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
  80acee:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80acf2:	83 e0 04             	and    eax,0x4
  80acf5:	48 85 c0             	test   rax,rax
  80acf8:	74 14                	je     80ad0e <sys_open+0x4b0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:97
        extern struct file_operations dev_dir_fops;
        filp->f_ops = &dev_dir_fops;	//////	find device file operation function
  80acfa:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80acfe:	48 b9 e0 0d 81 00 00 	movabs rcx,0x810de0
  80ad05:	00 00 00 
  80ad08:	48 89 48 18          	mov    QWORD PTR [rax+0x18],rcx
  80ad0c:	eb 14                	jmp    80ad22 <sys_open+0x4c4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:100
    }
    else
        filp->f_ops = dentry->dir_inode->f_ops;
  80ad0e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80ad12:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
  80ad16:	48 8b 50 20          	mov    rdx,QWORD PTR [rax+0x20]
  80ad1a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80ad1e:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:101
    if(filp->f_ops && filp->f_ops->open)
  80ad22:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80ad26:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  80ad2a:	48 85 c0             	test   rax,rax
  80ad2d:	74 33                	je     80ad62 <sys_open+0x504>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:101 (discriminator 1)
  80ad2f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80ad33:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  80ad37:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80ad3a:	48 85 c0             	test   rax,rax
  80ad3d:	74 23                	je     80ad62 <sys_open+0x504>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:102
        error = filp->f_ops->open(dentry->dir_inode,filp);
  80ad3f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80ad43:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  80ad47:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  80ad4a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80ad4e:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
  80ad52:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  80ad56:	48 89 d6             	mov    rsi,rdx
  80ad59:	48 89 c7             	mov    rdi,rax
  80ad5c:	ff d1                	call   rcx
  80ad5e:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:103
    if(error != 1)
  80ad62:	48 83 7d f8 01       	cmp    QWORD PTR [rbp-0x8],0x1
  80ad67:	74 1f                	je     80ad88 <sys_open+0x52a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:105
    {
        kmfree(filp);
  80ad69:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80ad6d:	48 89 c7             	mov    rdi,rax
  80ad70:	48 b8 e0 1b 80 00 00 	movabs rax,0x801be0
  80ad77:	00 00 00 
  80ad7a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:106
        return -EFAULT;
  80ad7c:	48 c7 c0 eb ff ff ff 	mov    rax,0xffffffffffffffeb
  80ad83:	e9 e0 00 00 00       	jmp    80ae68 <sys_open+0x60a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:109
    }

    if(filp->mode & O_TRUNC)
  80ad88:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80ad8c:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  80ad90:	25 00 02 00 00       	and    eax,0x200
  80ad95:	48 85 c0             	test   rax,rax
  80ad98:	74 13                	je     80adad <sys_open+0x54f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:111
    {
        filp->dentry->dir_inode->file_size = 0;
  80ad9a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80ad9e:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80ada2:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
  80ada6:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:113
    }
    if(filp->mode & O_APPEND)
  80adad:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80adb1:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  80adb5:	25 00 04 00 00       	and    eax,0x400
  80adba:	48 85 c0             	test   rax,rax
  80adbd:	74 19                	je     80add8 <sys_open+0x57a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:115
    {
        filp->position = filp->dentry->dir_inode->file_size;
  80adbf:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80adc3:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80adc7:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
  80adcb:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80adce:	48 89 c2             	mov    rdx,rax
  80add1:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80add5:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:118
    }

    f = current->openf;
  80add8:	48 b8 48 85 40 00 00 	movabs rax,0x408548
  80addf:	00 00 00 
  80ade2:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80ade5:	48 05 d8 00 00 00    	add    rax,0xd8
  80adeb:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:119
    for(i = 0;i < MAX_TASKS;i++)
  80adef:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
  80adf6:	eb 28                	jmp    80ae20 <sys_open+0x5c2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:120
        if(f[i] == NULL)
  80adf8:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
  80adfb:	48 98                	cdqe   
  80adfd:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
  80ae04:	00 
  80ae05:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  80ae09:	48 01 d0             	add    rax,rdx
  80ae0c:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80ae0f:	48 85 c0             	test   rax,rax
  80ae12:	75 08                	jne    80ae1c <sys_open+0x5be>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:122
        {
            fd = i;
  80ae14:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
  80ae17:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:123
            break;
  80ae1a:	eb 0a                	jmp    80ae26 <sys_open+0x5c8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:119 (discriminator 2)
    for(i = 0;i < MAX_TASKS;i++)
  80ae1c:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:119 (discriminator 1)
  80ae20:	83 7d e8 1f          	cmp    DWORD PTR [rbp-0x18],0x1f
  80ae24:	7e d2                	jle    80adf8 <sys_open+0x59a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:125
        }
    if(i == MAX_TASKS)
  80ae26:	83 7d e8 20          	cmp    DWORD PTR [rbp-0x18],0x20
  80ae2a:	75 1c                	jne    80ae48 <sys_open+0x5ea>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:127
    {
        kmfree(filp);
  80ae2c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80ae30:	48 89 c7             	mov    rdi,rax
  80ae33:	48 b8 e0 1b 80 00 00 	movabs rax,0x801be0
  80ae3a:	00 00 00 
  80ae3d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:129
        //// reclaim struct index_node & struct dir_entry
        return -EMFILE;
  80ae3f:	48 c7 c0 df ff ff ff 	mov    rax,0xffffffffffffffdf
  80ae46:	eb 20                	jmp    80ae68 <sys_open+0x60a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:131
    }
    f[fd] = filp;
  80ae48:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  80ae4b:	48 98                	cdqe   
  80ae4d:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
  80ae54:	00 
  80ae55:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  80ae59:	48 01 c2             	add    rdx,rax
  80ae5c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80ae60:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:133

    return fd;
  80ae63:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  80ae66:	48 98                	cdqe   
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:134
}
  80ae68:	c9                   	leave  
  80ae69:	c3                   	ret    

000000000080ae6a <sys_close>:
sys_close():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:137

unsigned long sys_close(int fd)
{
  80ae6a:	f3 0f 1e fa          	endbr64 
  80ae6e:	55                   	push   rbp
  80ae6f:	48 89 e5             	mov    rbp,rsp
  80ae72:	48 83 ec 20          	sub    rsp,0x20
  80ae76:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:138
    struct file * filp = NULL;
  80ae79:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
  80ae80:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:141

//	printf("sys_close:%d\n",fd);
    if(fd < 0 || fd >= MAX_TASKS)
  80ae81:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
  80ae85:	78 06                	js     80ae8d <sys_close+0x23>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:141 (discriminator 1)
  80ae87:	83 7d ec 1f          	cmp    DWORD PTR [rbp-0x14],0x1f
  80ae8b:	7e 0c                	jle    80ae99 <sys_close+0x2f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:142
        return -EBADF;
  80ae8d:	48 c7 c0 f8 ff ff ff 	mov    rax,0xfffffffffffffff8
  80ae94:	e9 9a 00 00 00       	jmp    80af33 <sys_close+0xc9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:144

    filp = current->openf[fd];
  80ae99:	48 b8 48 85 40 00 00 	movabs rax,0x408548
  80aea0:	00 00 00 
  80aea3:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80aea6:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
  80aea9:	48 63 d2             	movsxd rdx,edx
  80aeac:	48 83 c2 1a          	add    rdx,0x1a
  80aeb0:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
  80aeb5:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:145
    if(filp->f_ops && filp->f_ops->close)
  80aeb9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80aebd:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  80aec1:	48 85 c0             	test   rax,rax
  80aec4:	74 35                	je     80aefb <sys_close+0x91>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:145 (discriminator 1)
  80aec6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80aeca:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  80aece:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  80aed2:	48 85 c0             	test   rax,rax
  80aed5:	74 24                	je     80aefb <sys_close+0x91>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:146
        filp->f_ops->close(filp->dentry->dir_inode,filp);
  80aed7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80aedb:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  80aedf:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
  80aee3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80aee7:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80aeeb:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
  80aeef:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  80aef3:	48 89 d6             	mov    rsi,rdx
  80aef6:	48 89 c7             	mov    rdi,rax
  80aef9:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:148

    kmfree(filp);
  80aefb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80aeff:	48 89 c7             	mov    rdi,rax
  80af02:	48 b8 e0 1b 80 00 00 	movabs rax,0x801be0
  80af09:	00 00 00 
  80af0c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:149
    current->openf[fd] = NULL;
  80af0e:	48 b8 48 85 40 00 00 	movabs rax,0x408548
  80af15:	00 00 00 
  80af18:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80af1b:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
  80af1e:	48 63 d2             	movsxd rdx,edx
  80af21:	48 83 c2 1a          	add    rdx,0x1a
  80af25:	48 c7 44 d0 08 00 00 	mov    QWORD PTR [rax+rdx*8+0x8],0x0
  80af2c:	00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:151

    return 0;
  80af2e:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:152
}
  80af33:	c9                   	leave  
  80af34:	c3                   	ret    

000000000080af35 <sys_read>:
sys_read():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:155

unsigned long sys_read(int fd,void * buf,long count)
{
  80af35:	f3 0f 1e fa          	endbr64 
  80af39:	55                   	push   rbp
  80af3a:	48 89 e5             	mov    rbp,rsp
  80af3d:	48 83 ec 30          	sub    rsp,0x30
  80af41:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
  80af44:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  80af48:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:156
    struct file * filp = NULL;
  80af4c:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
  80af53:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:157
    unsigned long ret = 0;
  80af54:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
  80af5b:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:160

//	printf("sys_read:%d\n",fd);
    if(fd < 0 || fd >= MAX_TASKS)
  80af5c:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
  80af60:	78 06                	js     80af68 <sys_read+0x33>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:160 (discriminator 1)
  80af62:	83 7d ec 1f          	cmp    DWORD PTR [rbp-0x14],0x1f
  80af66:	7e 09                	jle    80af71 <sys_read+0x3c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:161
        return -EBADF;
  80af68:	48 c7 c0 f8 ff ff ff 	mov    rax,0xfffffffffffffff8
  80af6f:	eb 78                	jmp    80afe9 <sys_read+0xb4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:162
    if(count < 0)
  80af71:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
  80af76:	79 09                	jns    80af81 <sys_read+0x4c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:163
        return -EINVAL;
  80af78:	48 c7 c0 e4 ff ff ff 	mov    rax,0xffffffffffffffe4
  80af7f:	eb 68                	jmp    80afe9 <sys_read+0xb4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:165

    filp = current->openf[fd];
  80af81:	48 b8 48 85 40 00 00 	movabs rax,0x408548
  80af88:	00 00 00 
  80af8b:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80af8e:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
  80af91:	48 63 d2             	movsxd rdx,edx
  80af94:	48 83 c2 1a          	add    rdx,0x1a
  80af98:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
  80af9d:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:166
    if(filp->f_ops && filp->f_ops->read)
  80afa1:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80afa5:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  80afa9:	48 85 c0             	test   rax,rax
  80afac:	74 37                	je     80afe5 <sys_read+0xb0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:166 (discriminator 1)
  80afae:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80afb2:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  80afb6:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80afba:	48 85 c0             	test   rax,rax
  80afbd:	74 26                	je     80afe5 <sys_read+0xb0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:167
        ret = filp->f_ops->read(filp,buf,count,&filp->position);
  80afbf:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80afc3:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  80afc7:	4c 8b 40 10          	mov    r8,QWORD PTR [rax+0x10]
  80afcb:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  80afcf:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  80afd3:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  80afd7:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80afdb:	48 89 c7             	mov    rdi,rax
  80afde:	41 ff d0             	call   r8
  80afe1:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:168
    return ret;
  80afe5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:169
}
  80afe9:	c9                   	leave  
  80afea:	c3                   	ret    

000000000080afeb <sys_write>:
sys_write():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:172

unsigned long sys_write(int fd,void * buf,long count)
{
  80afeb:	f3 0f 1e fa          	endbr64 
  80afef:	55                   	push   rbp
  80aff0:	48 89 e5             	mov    rbp,rsp
  80aff3:	48 83 ec 30          	sub    rsp,0x30
  80aff7:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
  80affa:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  80affe:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:173
    struct file * filp = NULL;
  80b002:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
  80b009:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:174
    unsigned long ret = 0;
  80b00a:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
  80b011:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:177

//	printf("sys_write:%d\n",fd);
    if(fd < 0 || fd >= MAX_TASKS)
  80b012:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
  80b016:	78 06                	js     80b01e <sys_write+0x33>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:177 (discriminator 1)
  80b018:	83 7d ec 1f          	cmp    DWORD PTR [rbp-0x14],0x1f
  80b01c:	7e 09                	jle    80b027 <sys_write+0x3c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:178
        return -EBADF;
  80b01e:	48 c7 c0 f8 ff ff ff 	mov    rax,0xfffffffffffffff8
  80b025:	eb 78                	jmp    80b09f <sys_write+0xb4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:179
    if(count < 0)
  80b027:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
  80b02c:	79 09                	jns    80b037 <sys_write+0x4c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:180
        return -EINVAL;
  80b02e:	48 c7 c0 e4 ff ff ff 	mov    rax,0xffffffffffffffe4
  80b035:	eb 68                	jmp    80b09f <sys_write+0xb4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:182

    filp = current->openf[fd];
  80b037:	48 b8 48 85 40 00 00 	movabs rax,0x408548
  80b03e:	00 00 00 
  80b041:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80b044:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
  80b047:	48 63 d2             	movsxd rdx,edx
  80b04a:	48 83 c2 1a          	add    rdx,0x1a
  80b04e:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
  80b053:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:183
    if(filp->f_ops && filp->f_ops->write)
  80b057:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80b05b:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  80b05f:	48 85 c0             	test   rax,rax
  80b062:	74 37                	je     80b09b <sys_write+0xb0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:183 (discriminator 1)
  80b064:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80b068:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  80b06c:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  80b070:	48 85 c0             	test   rax,rax
  80b073:	74 26                	je     80b09b <sys_write+0xb0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:184
        ret = filp->f_ops->write(filp,buf,count,&filp->position);
  80b075:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80b079:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  80b07d:	4c 8b 40 18          	mov    r8,QWORD PTR [rax+0x18]
  80b081:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
  80b085:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  80b089:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
  80b08d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80b091:	48 89 c7             	mov    rdi,rax
  80b094:	41 ff d0             	call   r8
  80b097:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:185
    return ret;
  80b09b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:186
}
  80b09f:	c9                   	leave  
  80b0a0:	c3                   	ret    

000000000080b0a1 <sys_lseek>:
sys_lseek():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:190


unsigned long sys_lseek(int filds,long offset,int whence)
{
  80b0a1:	f3 0f 1e fa          	endbr64 
  80b0a5:	55                   	push   rbp
  80b0a6:	48 89 e5             	mov    rbp,rsp
  80b0a9:	48 83 ec 20          	sub    rsp,0x20
  80b0ad:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
  80b0b0:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  80b0b4:	89 55 e8             	mov    DWORD PTR [rbp-0x18],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:191
    struct file * filp = NULL;
  80b0b7:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
  80b0be:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:192
    unsigned long ret = 0;
  80b0bf:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
  80b0c6:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:195

//	printf("sys_lseek:%d\n",filds);
    if(filds < 0 || filds >= MAX_TASKS)
  80b0c7:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
  80b0cb:	78 06                	js     80b0d3 <sys_lseek+0x32>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:195 (discriminator 1)
  80b0cd:	83 7d ec 1f          	cmp    DWORD PTR [rbp-0x14],0x1f
  80b0d1:	7e 09                	jle    80b0dc <sys_lseek+0x3b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:196
        return -EBADF;
  80b0d3:	48 c7 c0 f8 ff ff ff 	mov    rax,0xfffffffffffffff8
  80b0da:	eb 7e                	jmp    80b15a <sys_lseek+0xb9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:197
    if(whence < 0 || whence >= SEEK_MAX)
  80b0dc:	83 7d e8 00          	cmp    DWORD PTR [rbp-0x18],0x0
  80b0e0:	78 06                	js     80b0e8 <sys_lseek+0x47>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:197 (discriminator 1)
  80b0e2:	83 7d e8 02          	cmp    DWORD PTR [rbp-0x18],0x2
  80b0e6:	7e 09                	jle    80b0f1 <sys_lseek+0x50>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:198
        return -EINVAL;
  80b0e8:	48 c7 c0 e4 ff ff ff 	mov    rax,0xffffffffffffffe4
  80b0ef:	eb 69                	jmp    80b15a <sys_lseek+0xb9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:200

    filp = current->openf[filds];
  80b0f1:	48 b8 48 85 40 00 00 	movabs rax,0x408548
  80b0f8:	00 00 00 
  80b0fb:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80b0fe:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
  80b101:	48 63 d2             	movsxd rdx,edx
  80b104:	48 83 c2 1a          	add    rdx,0x1a
  80b108:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
  80b10d:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:201
    if(filp->f_ops && filp->f_ops->lseek)
  80b111:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80b115:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  80b119:	48 85 c0             	test   rax,rax
  80b11c:	74 38                	je     80b156 <sys_lseek+0xb5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:201 (discriminator 1)
  80b11e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80b122:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  80b126:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
  80b12a:	48 85 c0             	test   rax,rax
  80b12d:	74 27                	je     80b156 <sys_lseek+0xb5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:202
        ret = filp->f_ops->lseek(filp,offset,whence);
  80b12f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80b133:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  80b137:	4c 8b 40 20          	mov    r8,QWORD PTR [rax+0x20]
  80b13b:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
  80b13e:	48 63 d0             	movsxd rdx,eax
  80b141:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  80b145:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80b149:	48 89 ce             	mov    rsi,rcx
  80b14c:	48 89 c7             	mov    rdi,rax
  80b14f:	41 ff d0             	call   r8
  80b152:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:203
    return ret;
  80b156:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:204
}
  80b15a:	c9                   	leave  
  80b15b:	c3                   	ret    

000000000080b15c <sys_vfork>:
sys_vfork():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:214
//    printf("sys_fork\n");
//    //return do_fork(regs,0,regs->rsp,0);
//}

unsigned long sys_vfork()
{
  80b15c:	f3 0f 1e fa          	endbr64 
  80b160:	55                   	push   rbp
  80b161:	48 89 e5             	mov    rbp,rsp
  80b164:	48 83 ec 10          	sub    rsp,0x10
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:215
    regs_t *regs = (regs_t *)current->tss.rsp0 -1;
  80b168:	48 b8 48 85 40 00 00 	movabs rax,0x408548
  80b16f:	00 00 00 
  80b172:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80b175:	48 8b 80 dc 01 00 00 	mov    rax,QWORD PTR [rax+0x1dc]
  80b17c:	48 2d d0 00 00 00    	sub    rax,0xd0
  80b182:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:216
    printf("sys_vfork\n");
  80b186:	48 b8 80 8b 81 00 00 	movabs rax,0x818b80
  80b18d:	00 00 00 
  80b190:	48 89 c7             	mov    rdi,rax
  80b193:	b8 00 00 00 00       	mov    eax,0x0
  80b198:	48 ba 97 11 80 00 00 	movabs rdx,0x801197
  80b19f:	00 00 00 
  80b1a2:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:218
    //return do_fork(regs,CLONE_VM | CLONE_FS | CLONE_SIGNAL,regs->rsp,0);
}
  80b1a4:	90                   	nop
  80b1a5:	c9                   	leave  
  80b1a6:	c3                   	ret    

000000000080b1a7 <sys_wait>:
sys_wait():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:261

/*
	rusage reserved
*/

unsigned long sys_wait(pid_t pid, int *stat_loc, int options){
  80b1a7:	f3 0f 1e fa          	endbr64 
  80b1ab:	55                   	push   rbp
  80b1ac:	48 89 e5             	mov    rbp,rsp
  80b1af:	89 7d bc             	mov    DWORD PTR [rbp-0x44],edi
  80b1b2:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
  80b1b6:	89 55 b8             	mov    DWORD PTR [rbp-0x48],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:262
    struct process* waitee=NULL;
  80b1b9:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
  80b1c0:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:264
    extern struct process task[];
    if(!current->child_procs)
  80b1c1:	48 b8 48 85 40 00 00 	movabs rax,0x408548
  80b1c8:	00 00 00 
  80b1cb:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80b1ce:	48 8b 80 2c 03 00 00 	mov    rax,QWORD PTR [rax+0x32c]
  80b1d5:	48 85 c0             	test   rax,rax
  80b1d8:	75 0c                	jne    80b1e6 <sys_wait+0x3f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:265
        return -ECHILD;//没有子进程可以等
  80b1da:	48 c7 c0 f4 ff ff ff 	mov    rax,0xfffffffffffffff4
  80b1e1:	e9 d5 01 00 00       	jmp    80b3bb <sys_wait+0x214>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:266
    if(pid==-1){
  80b1e6:	83 7d bc ff          	cmp    DWORD PTR [rbp-0x44],0xffffffff
  80b1ea:	75 54                	jne    80b240 <sys_wait+0x99>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:269
        //任意一个子进程
        while (1) {
            for(struct List* l=current->child_procs;l;l=l->next) {
  80b1ec:	48 b8 48 85 40 00 00 	movabs rax,0x408548
  80b1f3:	00 00 00 
  80b1f6:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80b1f9:	48 8b 80 2c 03 00 00 	mov    rax,QWORD PTR [rax+0x32c]
  80b200:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  80b204:	eb 31                	jmp    80b237 <sys_wait+0x90>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:270
                struct process* p=l->data;
  80b206:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80b20a:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  80b20e:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:271
                if(p->stat == TASK_ZOMBIE) {
  80b212:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  80b216:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
  80b219:	83 f8 04             	cmp    eax,0x4
  80b21c:	75 0d                	jne    80b22b <sys_wait+0x84>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:272
                    waitee=p;
  80b21e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  80b222:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:273
                    goto done;
  80b226:	e9 30 01 00 00       	jmp    80b35b <sys_wait+0x1b4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:269 (discriminator 2)
            for(struct List* l=current->child_procs;l;l=l->next) {
  80b22b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80b22f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80b233:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:269 (discriminator 1)
  80b237:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
  80b23c:	75 c8                	jne    80b206 <sys_wait+0x5f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:269
  80b23e:	eb ac                	jmp    80b1ec <sys_wait+0x45>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:278
                }
            }
        }

    }else if(pid==0) {
  80b240:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
  80b244:	75 6f                	jne    80b2b5 <sys_wait+0x10e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:281
        //等待任意一个和父进程同一个进程组的子进程
        while (1) {
            for(struct List* l=current->child_procs;l;l=l->next) {
  80b246:	48 b8 48 85 40 00 00 	movabs rax,0x408548
  80b24d:	00 00 00 
  80b250:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80b253:	48 8b 80 2c 03 00 00 	mov    rax,QWORD PTR [rax+0x32c]
  80b25a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
  80b25e:	eb 4c                	jmp    80b2ac <sys_wait+0x105>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:282
                struct process* p=l->data;
  80b260:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80b264:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  80b268:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:283
                if(p->gpid==current->gpid&& p->stat == TASK_ZOMBIE) {
  80b26c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  80b270:	8b 50 04             	mov    edx,DWORD PTR [rax+0x4]
  80b273:	48 b8 48 85 40 00 00 	movabs rax,0x408548
  80b27a:	00 00 00 
  80b27d:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80b280:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
  80b283:	39 c2                	cmp    edx,eax
  80b285:	75 19                	jne    80b2a0 <sys_wait+0xf9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:283 (discriminator 1)
  80b287:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  80b28b:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
  80b28e:	83 f8 04             	cmp    eax,0x4
  80b291:	75 0d                	jne    80b2a0 <sys_wait+0xf9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:284
                    waitee=p;
  80b293:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  80b297:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:285
                    goto done;
  80b29b:	e9 bb 00 00 00       	jmp    80b35b <sys_wait+0x1b4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:281 (discriminator 2)
            for(struct List* l=current->child_procs;l;l=l->next) {
  80b2a0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80b2a4:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80b2a8:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:281 (discriminator 1)
  80b2ac:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
  80b2b1:	75 ad                	jne    80b260 <sys_wait+0xb9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:281
  80b2b3:	eb 91                	jmp    80b246 <sys_wait+0x9f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:290
                }
            }
        }
    }else{
        if(pid<0)pid=-pid;
  80b2b5:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
  80b2b9:	79 03                	jns    80b2be <sys_wait+0x117>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:290 (discriminator 1)
  80b2bb:	f7 5d bc             	neg    DWORD PTR [rbp-0x44]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:292
        //检查是不是本进程的子进程
        for(int i=0;i<MAX_TASKS;i++){
  80b2be:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
  80b2c5:	eb 45                	jmp    80b30c <sys_wait+0x165>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:293
            if(task[i].pid==pid){
  80b2c7:	48 ba 40 85 40 00 00 	movabs rdx,0x408540
  80b2ce:	00 00 00 
  80b2d1:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  80b2d4:	48 98                	cdqe   
  80b2d6:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  80b2dd:	48 01 d0             	add    rax,rdx
  80b2e0:	8b 10                	mov    edx,DWORD PTR [rax]
  80b2e2:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
  80b2e5:	39 c2                	cmp    edx,eax
  80b2e7:	75 1f                	jne    80b308 <sys_wait+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:294
                waitee=&task[i];
  80b2e9:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  80b2ec:	48 98                	cdqe   
  80b2ee:	48 69 c0 34 03 00 00 	imul   rax,rax,0x334
  80b2f5:	48 ba 40 85 40 00 00 	movabs rdx,0x408540
  80b2fc:	00 00 00 
  80b2ff:	48 01 d0             	add    rax,rdx
  80b302:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:295
                break;
  80b306:	eb 0a                	jmp    80b312 <sys_wait+0x16b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:292 (discriminator 2)
        for(int i=0;i<MAX_TASKS;i++){
  80b308:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:292 (discriminator 1)
  80b30c:	83 7d e4 1f          	cmp    DWORD PTR [rbp-0x1c],0x1f
  80b310:	7e b5                	jle    80b2c7 <sys_wait+0x120>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:298
            }
        }
        if(waitee==NULL||waitee->parent_pid!=current->pid)
  80b312:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
  80b317:	74 1d                	je     80b336 <sys_wait+0x18f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:298 (discriminator 1)
  80b319:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80b31d:	8b 90 9c 00 00 00    	mov    edx,DWORD PTR [rax+0x9c]
  80b323:	48 b8 48 85 40 00 00 	movabs rax,0x408548
  80b32a:	00 00 00 
  80b32d:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80b330:	8b 00                	mov    eax,DWORD PTR [rax]
  80b332:	39 c2                	cmp    edx,eax
  80b334:	74 09                	je     80b33f <sys_wait+0x198>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:299
            return -ECHILD;//没有这个进程或者不是子进程
  80b336:	48 c7 c0 f4 ff ff ff 	mov    rax,0xfffffffffffffff4
  80b33d:	eb 7c                	jmp    80b3bb <sys_wait+0x214>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:301
        //TODO 等待结束以及等待信号
        while (waitee->stat != TASK_ZOMBIE);
  80b33f:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:301 (discriminator 1)
  80b340:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80b344:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
  80b347:	83 f8 04             	cmp    eax,0x4
  80b34a:	75 f4                	jne    80b340 <sys_wait+0x199>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:302
        *stat_loc=waitee->exit_code;
  80b34c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80b350:	8b 40 24             	mov    eax,DWORD PTR [rax+0x24]
  80b353:	89 c2                	mov    edx,eax
  80b355:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  80b359:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:306
    }
    done:
    //清除子进程
    waitee->stat=TASK_EMPTY;
  80b35b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80b35f:	c7 40 18 00 00 00 00 	mov    DWORD PTR [rax+0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:308
    //从链表中删除，不再是子进程
    list_drop(&waitee->node);
  80b366:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80b36a:	48 05 14 03 00 00    	add    rax,0x314
  80b370:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
list_drop():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:47
    }
}
__attribute__((always_inline)) inline void list_drop(struct List * entry)
{
    //从链表中删除
    if(entry->prev)
  80b374:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80b378:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80b37b:	48 85 c0             	test   rax,rax
  80b37e:	74 13                	je     80b393 <sys_wait+0x1ec>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:48
        entry->prev->next=entry->next;
  80b380:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80b384:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80b387:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  80b38b:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
  80b38f:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:49
    if(entry->next)
  80b393:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80b397:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80b39b:	48 85 c0             	test   rax,rax
  80b39e:	74 12                	je     80b3b2 <sys_wait+0x20b>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:50
        entry->next->prev=entry->prev;
  80b3a0:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80b3a4:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80b3a8:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  80b3ac:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
  80b3af:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:51
}
  80b3b2:	90                   	nop
sys_wait():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:310
    //TODO 被信号中断时返回-1
    return waitee->pid;
  80b3b3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80b3b7:	8b 00                	mov    eax,DWORD PTR [rax]
  80b3b9:	89 c0                	mov    eax,eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:311
}
  80b3bb:	5d                   	pop    rbp
  80b3bc:	c3                   	ret    

000000000080b3bd <sys_wait4>:
sys_wait4():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:313
unsigned long sys_wait4(unsigned long pid,int *status,int options,void *rusage)
{
  80b3bd:	f3 0f 1e fa          	endbr64 
  80b3c1:	55                   	push   rbp
  80b3c2:	48 89 e5             	mov    rbp,rsp
  80b3c5:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  80b3c9:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  80b3cd:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
  80b3d0:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:349
//    copy_to_user(&child->exit_code,status,sizeof(long));
//    tsk->next = child->next;
//    exit_mm(child);
//    vmfree(child);
//    return retval;
}
  80b3d4:	90                   	nop
  80b3d5:	5d                   	pop    rbp
  80b3d6:	c3                   	ret    

000000000080b3d7 <sys_brk>:
sys_brk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:352

unsigned long sys_brk(unsigned long brk)
{
  80b3d7:	f3 0f 1e fa          	endbr64 
  80b3db:	55                   	push   rbp
  80b3dc:	48 89 e5             	mov    rbp,rsp
  80b3df:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:366
//
//    new_brk = do_brk(current->mm->end_brk,new_brk - current->mm->end_brk);	//expand brk space
//
//    current->mm->end_brk = new_brk;
//    return new_brk;
}
  80b3e3:	90                   	nop
  80b3e4:	5d                   	pop    rbp
  80b3e5:	c3                   	ret    

000000000080b3e6 <sys_reboot>:
sys_reboot():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:369

unsigned long sys_reboot(unsigned long cmd,void * arg)
{
  80b3e6:	f3 0f 1e fa          	endbr64 
  80b3ea:	55                   	push   rbp
  80b3eb:	48 89 e5             	mov    rbp,rsp
  80b3ee:	48 83 ec 10          	sub    rsp,0x10
  80b3f2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  80b3f6:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:370
    printf("sys_reboot\n");
  80b3fa:	48 b8 8b 8b 81 00 00 	movabs rax,0x818b8b
  80b401:	00 00 00 
  80b404:	48 89 c7             	mov    rdi,rax
  80b407:	b8 00 00 00 00       	mov    eax,0x0
  80b40c:	48 ba 97 11 80 00 00 	movabs rdx,0x801197
  80b413:	00 00 00 
  80b416:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:371
    switch(cmd)
  80b418:	48 83 7d f8 01       	cmp    QWORD PTR [rbp-0x8],0x1
  80b41d:	74 09                	je     80b428 <sys_reboot+0x42>
  80b41f:	48 83 7d f8 02       	cmp    QWORD PTR [rbp-0x8],0x2
  80b424:	74 1a                	je     80b440 <sys_reboot+0x5a>
  80b426:	eb 38                	jmp    80b460 <sys_reboot+0x7a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:374
    {
        case SYSTEM_REBOOT:
            outb(0x64,0xFE);
  80b428:	be fe 00 00 00       	mov    esi,0xfe
  80b42d:	bf 64 00 00 00       	mov    edi,0x64
  80b432:	48 b8 d0 86 80 00 00 	movabs rax,0x8086d0
  80b439:	00 00 00 
  80b43c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:375
            break;
  80b43e:	eb 3f                	jmp    80b47f <sys_reboot+0x99>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:378

        case SYSTEM_POWEROFF:
            printf("sys_reboot cmd SYSTEM_POWEROFF\n");
  80b440:	48 b8 98 8b 81 00 00 	movabs rax,0x818b98
  80b447:	00 00 00 
  80b44a:	48 89 c7             	mov    rdi,rax
  80b44d:	b8 00 00 00 00       	mov    eax,0x0
  80b452:	48 ba 97 11 80 00 00 	movabs rdx,0x801197
  80b459:	00 00 00 
  80b45c:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:379
            break;
  80b45e:	eb 1f                	jmp    80b47f <sys_reboot+0x99>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:382

        default:
            printf("sys_reboot cmd ERROR!\n");
  80b460:	48 b8 b8 8b 81 00 00 	movabs rax,0x818bb8
  80b467:	00 00 00 
  80b46a:	48 89 c7             	mov    rdi,rax
  80b46d:	b8 00 00 00 00       	mov    eax,0x0
  80b472:	48 ba 97 11 80 00 00 	movabs rdx,0x801197
  80b479:	00 00 00 
  80b47c:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:383
            break;
  80b47e:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:385
    }
    return 0;
  80b47f:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:386
}
  80b484:	c9                   	leave  
  80b485:	c3                   	ret    

000000000080b486 <sys_chdir>:
sys_chdir():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:390


unsigned long sys_chdir(char *filename)
{
  80b486:	f3 0f 1e fa          	endbr64 
  80b48a:	55                   	push   rbp
  80b48b:	48 89 e5             	mov    rbp,rsp
  80b48e:	48 83 ec 30          	sub    rsp,0x30
  80b492:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:391
    char * path = NULL;
  80b496:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
  80b49d:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:392
    long pathlen = 0;
  80b49e:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
  80b4a5:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:393
    struct dir_entry * dentry = NULL;
  80b4a6:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
  80b4ad:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:395

    printf("sys_chdir\n");
  80b4ae:	48 b8 cf 8b 81 00 00 	movabs rax,0x818bcf
  80b4b5:	00 00 00 
  80b4b8:	48 89 c7             	mov    rdi,rax
  80b4bb:	b8 00 00 00 00       	mov    eax,0x0
  80b4c0:	48 ba 97 11 80 00 00 	movabs rdx,0x801197
  80b4c7:	00 00 00 
  80b4ca:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:396
    path = (char *) kmalloc();
  80b4cc:	b8 00 00 00 00       	mov    eax,0x0
  80b4d1:	48 ba d4 18 80 00 00 	movabs rdx,0x8018d4
  80b4d8:	00 00 00 
  80b4db:	ff d2                	call   rdx
  80b4dd:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:398

    if(path == NULL)
  80b4e1:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
  80b4e6:	75 0c                	jne    80b4f4 <sys_chdir+0x6e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:399
        return -ENOMEM;
  80b4e8:	48 c7 c0 cf ff ff ff 	mov    rax,0xffffffffffffffcf
  80b4ef:	e9 fb 00 00 00       	jmp    80b5ef <sys_chdir+0x169>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:400
    memset(path,0,PAGE_4K_SIZE);
  80b4f4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80b4f8:	ba 00 10 00 00       	mov    edx,0x1000
  80b4fd:	be 00 00 00 00       	mov    esi,0x0
  80b502:	48 89 c7             	mov    rdi,rax
  80b505:	48 b8 21 04 81 00 00 	movabs rax,0x810421
  80b50c:	00 00 00 
  80b50f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:401
    pathlen = strlen(filename);
  80b511:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  80b515:	48 89 c7             	mov    rdi,rax
  80b518:	48 b8 8f 06 81 00 00 	movabs rax,0x81068f
  80b51f:	00 00 00 
  80b522:	ff d0                	call   rax
  80b524:	48 98                	cdqe   
  80b526:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:402
    if(pathlen <= 0)
  80b52a:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
  80b52f:	7f 1f                	jg     80b550 <sys_chdir+0xca>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:404
    {
        kmfree(path);
  80b531:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80b535:	48 89 c7             	mov    rdi,rax
  80b538:	48 b8 e0 1b 80 00 00 	movabs rax,0x801be0
  80b53f:	00 00 00 
  80b542:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:405
        return -EFAULT;
  80b544:	48 c7 c0 eb ff ff ff 	mov    rax,0xffffffffffffffeb
  80b54b:	e9 9f 00 00 00       	jmp    80b5ef <sys_chdir+0x169>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:407
    }
    else if(pathlen >= PAGE_4K_SIZE)
  80b550:	48 81 7d f0 ff 0f 00 	cmp    QWORD PTR [rbp-0x10],0xfff
  80b557:	00 
  80b558:	7e 1c                	jle    80b576 <sys_chdir+0xf0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:409
    {
        kmfree(path);
  80b55a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80b55e:	48 89 c7             	mov    rdi,rax
  80b561:	48 b8 e0 1b 80 00 00 	movabs rax,0x801be0
  80b568:	00 00 00 
  80b56b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:410
        return -ENAMETOOLONG;
  80b56d:	48 c7 c0 db ff ff ff 	mov    rax,0xffffffffffffffdb
  80b574:	eb 79                	jmp    80b5ef <sys_chdir+0x169>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:412
    }
    strcpy(filename,path);
  80b576:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  80b57a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  80b57e:	48 89 d6             	mov    rsi,rdx
  80b581:	48 89 c7             	mov    rdi,rax
  80b584:	48 b8 70 04 81 00 00 	movabs rax,0x810470
  80b58b:	00 00 00 
  80b58e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:414

    dentry = path_walk(path,0);
  80b590:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80b594:	be 00 00 00 00       	mov    esi,0x0
  80b599:	48 89 c7             	mov    rdi,rax
  80b59c:	48 b8 5f a0 80 00 00 	movabs rax,0x80a05f
  80b5a3:	00 00 00 
  80b5a6:	ff d0                	call   rax
  80b5a8:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:415
    kmfree(path);
  80b5ac:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80b5b0:	48 89 c7             	mov    rdi,rax
  80b5b3:	48 b8 e0 1b 80 00 00 	movabs rax,0x801be0
  80b5ba:	00 00 00 
  80b5bd:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:417

    if(dentry == NULL)
  80b5bf:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
  80b5c4:	75 09                	jne    80b5cf <sys_chdir+0x149>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:418
        return -ENOENT;
  80b5c6:	48 c7 c0 d3 ff ff ff 	mov    rax,0xffffffffffffffd3
  80b5cd:	eb 20                	jmp    80b5ef <sys_chdir+0x169>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:419
    if(dentry->dir_inode->attribute != FS_ATTR_DIR)
  80b5cf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80b5d3:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
  80b5d7:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80b5db:	48 83 f8 02          	cmp    rax,0x2
  80b5df:	74 09                	je     80b5ea <sys_chdir+0x164>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:420
        return -ENOTDIR;
  80b5e1:	48 c7 c0 c7 ff ff ff 	mov    rax,0xffffffffffffffc7
  80b5e8:	eb 05                	jmp    80b5ef <sys_chdir+0x169>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:421
    return 0;
  80b5ea:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:422
}
  80b5ef:	c9                   	leave  
  80b5f0:	c3                   	ret    

000000000080b5f1 <sys_getdents>:
sys_getdents():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:425

unsigned long sys_getdents(int fd, void * dirent, long count)
{
  80b5f1:	f3 0f 1e fa          	endbr64 
  80b5f5:	55                   	push   rbp
  80b5f6:	48 89 e5             	mov    rbp,rsp
  80b5f9:	48 83 ec 30          	sub    rsp,0x30
  80b5fd:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
  80b600:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  80b604:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:426
    struct file * filp = NULL;
  80b608:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
  80b60f:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:427
    unsigned long ret = 0;
  80b610:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
  80b617:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:430

//	printf("sys_getdents:%d\n",fd);
    if(fd < 0 || fd > MAX_TASKS)
  80b618:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
  80b61c:	78 06                	js     80b624 <sys_getdents+0x33>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:430 (discriminator 1)
  80b61e:	83 7d ec 20          	cmp    DWORD PTR [rbp-0x14],0x20
  80b622:	7e 09                	jle    80b62d <sys_getdents+0x3c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:431
        return -EBADF;
  80b624:	48 c7 c0 f8 ff ff ff 	mov    rax,0xfffffffffffffff8
  80b62b:	eb 7d                	jmp    80b6aa <sys_getdents+0xb9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:432
    if(count < 0)
  80b62d:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
  80b632:	79 09                	jns    80b63d <sys_getdents+0x4c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:433
        return -EINVAL;
  80b634:	48 c7 c0 e4 ff ff ff 	mov    rax,0xffffffffffffffe4
  80b63b:	eb 6d                	jmp    80b6aa <sys_getdents+0xb9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:435

    filp = current->openf[fd];
  80b63d:	48 b8 48 85 40 00 00 	movabs rax,0x408548
  80b644:	00 00 00 
  80b647:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80b64a:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
  80b64d:	48 63 d2             	movsxd rdx,edx
  80b650:	48 83 c2 1a          	add    rdx,0x1a
  80b654:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
  80b659:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:436
    if(filp->f_ops && filp->f_ops->readdir)
  80b65d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80b661:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  80b665:	48 85 c0             	test   rax,rax
  80b668:	74 3c                	je     80b6a6 <sys_getdents+0xb5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:436 (discriminator 1)
  80b66a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80b66e:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  80b672:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
  80b676:	48 85 c0             	test   rax,rax
  80b679:	74 2b                	je     80b6a6 <sys_getdents+0xb5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:437
        ret = filp->f_ops->readdir(filp,dirent,&fill_dentry);
  80b67b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80b67f:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  80b683:	4c 8b 40 30          	mov    r8,QWORD PTR [rax+0x30]
  80b687:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
  80b68b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80b68f:	48 ba 98 a3 80 00 00 	movabs rdx,0x80a398
  80b696:	00 00 00 
  80b699:	48 89 ce             	mov    rsi,rcx
  80b69c:	48 89 c7             	mov    rdi,rax
  80b69f:	41 ff d0             	call   r8
  80b6a2:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:438
    return ret;
  80b6a6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:439
}
  80b6aa:	c9                   	leave  
  80b6ab:	c3                   	ret    
  80b6ac:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

000000000080b6b0 <init64>:
init64():
  80b6b0:	b8 00 80 ff ff       	mov    eax,0xffff8000
  80b6b5:	48 c1 e0 20          	shl    rax,0x20
  80b6b9:	48 01 c4             	add    rsp,rax
  80b6bc:	48 01 c5             	add    rbp,rax
  80b6bf:	48 05 4b 0b 80 00    	add    rax,0x800b4b
  80b6c5:	50                   	push   rax
  80b6c6:	c3                   	ret    

000000000080b6c7 <do_reloc>:
do_reloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/reloc.c:12
#include "memory.h"
#include "str.h"
#include "mem.h"
#include "log.h"

void do_reloc(struct multiboot_tag_elf_sections *shtag) {
  80b6c7:	f3 0f 1e fa          	endbr64 
  80b6cb:	55                   	push   rbp
  80b6cc:	48 89 e5             	mov    rbp,rsp
  80b6cf:	48 83 ec 70          	sub    rsp,0x70
  80b6d3:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/reloc.c:16
    /*
     * TODO 这部分要完成变量引用的重定位，这样才能顺利进行到高地址。（虽然此时已经跳转到高地址了）
     * */
    u16 entn=shtag->num;
  80b6d7:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  80b6db:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
  80b6de:	66 89 45 da          	mov    WORD PTR [rbp-0x26],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/reloc.c:17
    u16 ents=shtag->entsize;
  80b6e2:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  80b6e6:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
  80b6e9:	66 89 45 d8          	mov    WORD PTR [rbp-0x28],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/reloc.c:18
    u16 strtabi=shtag->shndx;
  80b6ed:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  80b6f1:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
  80b6f4:	66 89 45 d6          	mov    WORD PTR [rbp-0x2a],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/reloc.c:19
    struct Elf64_Shdr* sh=shtag->sections;
  80b6f8:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  80b6fc:	48 83 c0 14          	add    rax,0x14
  80b700:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/reloc.c:20
    char* strtab= (char *) sh[strtabi].sh_addr;
  80b704:	0f b7 55 d6          	movzx  edx,WORD PTR [rbp-0x2a]
  80b708:	48 89 d0             	mov    rax,rdx
  80b70b:	48 c1 e0 02          	shl    rax,0x2
  80b70f:	48 01 d0             	add    rax,rdx
  80b712:	48 c1 e0 04          	shl    rax,0x4
  80b716:	48 89 c2             	mov    rdx,rax
  80b719:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80b71d:	48 01 d0             	add    rax,rdx
  80b720:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  80b724:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/reloc.c:21
    comprintf("strtabi=%d,addr=0x%x\n",strtabi,strtab);
  80b728:	0f b7 45 d6          	movzx  eax,WORD PTR [rbp-0x2a]
  80b72c:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
  80b730:	89 c6                	mov    esi,eax
  80b732:	48 b8 da 8b 81 00 00 	movabs rax,0x818bda
  80b739:	00 00 00 
  80b73c:	48 89 c7             	mov    rdi,rax
  80b73f:	b8 00 00 00 00       	mov    eax,0x0
  80b744:	48 b9 ae ff 80 00 00 	movabs rcx,0x80ffae
  80b74b:	00 00 00 
  80b74e:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/reloc.c:22
    for(int i=0;i<entn;i++){
  80b750:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
  80b757:	e9 e7 01 00 00       	jmp    80b943 <do_reloc+0x27c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/reloc.c:23
        int shtbi=sh[i].sh_name;//在字符串段中的index
  80b75c:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80b75f:	48 63 d0             	movsxd rdx,eax
  80b762:	48 89 d0             	mov    rax,rdx
  80b765:	48 c1 e0 02          	shl    rax,0x2
  80b769:	48 01 d0             	add    rax,rdx
  80b76c:	48 c1 e0 04          	shl    rax,0x4
  80b770:	48 89 c2             	mov    rdx,rax
  80b773:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80b777:	48 01 d0             	add    rax,rdx
  80b77a:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80b77d:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/reloc.c:24
        char *name=strtab;
  80b780:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  80b784:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/reloc.c:25
        for(int i=0;i<shtbi;){
  80b788:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
  80b78f:	eb 14                	jmp    80b7a5 <do_reloc+0xde>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/reloc.c:26
            if(!*name)
  80b791:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80b795:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  80b798:	84 c0                	test   al,al
  80b79a:	75 04                	jne    80b7a0 <do_reloc+0xd9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/reloc.c:27
                i++;
  80b79c:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/reloc.c:28
            name++;
  80b7a0:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/reloc.c:25 (discriminator 1)
        for(int i=0;i<shtbi;){
  80b7a5:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  80b7a8:	3b 45 bc             	cmp    eax,DWORD PTR [rbp-0x44]
  80b7ab:	7c e4                	jl     80b791 <do_reloc+0xca>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/reloc.c:30
        }
        comprintf("section 0x%x,name %s\n",i,name);
  80b7ad:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  80b7b1:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80b7b4:	89 c6                	mov    esi,eax
  80b7b6:	48 b8 f0 8b 81 00 00 	movabs rax,0x818bf0
  80b7bd:	00 00 00 
  80b7c0:	48 89 c7             	mov    rdi,rax
  80b7c3:	b8 00 00 00 00       	mov    eax,0x0
  80b7c8:	48 b9 ae ff 80 00 00 	movabs rcx,0x80ffae
  80b7cf:	00 00 00 
  80b7d2:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/reloc.c:31
        if(strlen(name)>5&&memcmp(name,".rela",5)==0){
  80b7d4:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80b7d8:	48 89 c7             	mov    rdi,rax
  80b7db:	48 b8 8f 06 81 00 00 	movabs rax,0x81068f
  80b7e2:	00 00 00 
  80b7e5:	ff d0                	call   rax
  80b7e7:	83 f8 05             	cmp    eax,0x5
  80b7ea:	0f 8e 4f 01 00 00    	jle    80b93f <do_reloc+0x278>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/reloc.c:31 (discriminator 1)
  80b7f0:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80b7f4:	ba 05 00 00 00       	mov    edx,0x5
  80b7f9:	48 b9 06 8c 81 00 00 	movabs rcx,0x818c06
  80b800:	00 00 00 
  80b803:	48 89 ce             	mov    rsi,rcx
  80b806:	48 89 c7             	mov    rdi,rax
  80b809:	48 b8 bc 03 81 00 00 	movabs rax,0x8103bc
  80b810:	00 00 00 
  80b813:	ff d0                	call   rax
  80b815:	85 c0                	test   eax,eax
  80b817:	0f 85 22 01 00 00    	jne    80b93f <do_reloc+0x278>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/reloc.c:32
            comprintf("found reloc section\n");
  80b81d:	48 b8 0c 8c 81 00 00 	movabs rax,0x818c0c
  80b824:	00 00 00 
  80b827:	48 89 c7             	mov    rdi,rax
  80b82a:	b8 00 00 00 00       	mov    eax,0x0
  80b82f:	48 ba ae ff 80 00 00 	movabs rdx,0x80ffae
  80b836:	00 00 00 
  80b839:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/reloc.c:34
            //重定位表
            int n=sh[i].sh_size/ sizeof(Elf64_Rela);
  80b83b:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80b83e:	48 63 d0             	movsxd rdx,eax
  80b841:	48 89 d0             	mov    rax,rdx
  80b844:	48 c1 e0 02          	shl    rax,0x2
  80b848:	48 01 d0             	add    rax,rdx
  80b84b:	48 c1 e0 04          	shl    rax,0x4
  80b84f:	48 89 c2             	mov    rdx,rax
  80b852:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80b856:	48 01 d0             	add    rax,rdx
  80b859:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
  80b85d:	48 ba ab aa aa aa aa 	movabs rdx,0xaaaaaaaaaaaaaaab
  80b864:	aa aa aa 
  80b867:	48 f7 e2             	mul    rdx
  80b86a:	48 89 d0             	mov    rax,rdx
  80b86d:	48 c1 e8 04          	shr    rax,0x4
  80b871:	89 45 b8             	mov    DWORD PTR [rbp-0x48],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/reloc.c:35
            Elf64_Rela *rel= (Elf64_Rela *) sh[i].sh_addr;
  80b874:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80b877:	48 63 d0             	movsxd rdx,eax
  80b87a:	48 89 d0             	mov    rax,rdx
  80b87d:	48 c1 e0 02          	shl    rax,0x2
  80b881:	48 01 d0             	add    rax,rdx
  80b884:	48 c1 e0 04          	shl    rax,0x4
  80b888:	48 89 c2             	mov    rdx,rax
  80b88b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80b88f:	48 01 d0             	add    rax,rdx
  80b892:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  80b896:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/reloc.c:36
            for(int i=0;i<n;i++){
  80b89a:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
  80b8a1:	e9 8d 00 00 00       	jmp    80b933 <do_reloc+0x26c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/reloc.c:37
                unsigned int info=rel->r_info;
  80b8a6:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  80b8aa:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  80b8ae:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/reloc.c:38
                int mode=info&0xff;
  80b8b1:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
  80b8b4:	25 ff 00 00 00       	and    eax,0xff
  80b8b9:	89 45 b0             	mov    DWORD PTR [rbp-0x50],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/reloc.c:39
                if(mode==R_X86_64_64||mode==R_X86_64_32S){
  80b8bc:	83 7d b0 01          	cmp    DWORD PTR [rbp-0x50],0x1
  80b8c0:	74 06                	je     80b8c8 <do_reloc+0x201>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/reloc.c:39 (discriminator 1)
  80b8c2:	83 7d b0 0b          	cmp    DWORD PTR [rbp-0x50],0xb
  80b8c6:	75 62                	jne    80b92a <do_reloc+0x263>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/reloc.c:40
                    addr_t *p= (addr_t *) rel->r_offset;
  80b8c8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  80b8cc:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80b8cf:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/reloc.c:41
                    comprintf("changing 0x%x to 0x%x\n",*p,*p|KNL_BASE);
  80b8d3:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  80b8d7:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80b8da:	48 ba 00 00 00 00 00 	movabs rdx,0xffff800000000000
  80b8e1:	80 ff ff 
  80b8e4:	48 09 c2             	or     rdx,rax
  80b8e7:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  80b8eb:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80b8ee:	48 89 c6             	mov    rsi,rax
  80b8f1:	48 b8 21 8c 81 00 00 	movabs rax,0x818c21
  80b8f8:	00 00 00 
  80b8fb:	48 89 c7             	mov    rdi,rax
  80b8fe:	b8 00 00 00 00       	mov    eax,0x0
  80b903:	48 b9 ae ff 80 00 00 	movabs rcx,0x80ffae
  80b90a:	00 00 00 
  80b90d:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/reloc.c:42
                    *p=*p|KNL_BASE;
  80b90f:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  80b913:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80b916:	48 ba 00 00 00 00 00 	movabs rdx,0xffff800000000000
  80b91d:	80 ff ff 
  80b920:	48 09 c2             	or     rdx,rax
  80b923:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  80b927:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/reloc.c:44 (discriminator 2)
                }
                rel++;
  80b92a:	48 83 45 e0 18       	add    QWORD PTR [rbp-0x20],0x18
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/reloc.c:36 (discriminator 2)
            for(int i=0;i<n;i++){
  80b92f:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/reloc.c:36 (discriminator 1)
  80b933:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  80b936:	3b 45 b8             	cmp    eax,DWORD PTR [rbp-0x48]
  80b939:	0f 8c 67 ff ff ff    	jl     80b8a6 <do_reloc+0x1df>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/reloc.c:22 (discriminator 2)
    for(int i=0;i<entn;i++){
  80b93f:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/reloc.c:22 (discriminator 1)
  80b943:	0f b7 45 da          	movzx  eax,WORD PTR [rbp-0x26]
  80b947:	39 45 fc             	cmp    DWORD PTR [rbp-0x4],eax
  80b94a:	0f 8c 0c fe ff ff    	jl     80b75c <do_reloc+0x95>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/reloc.c:49
            }

        }
    }
  80b950:	90                   	nop
  80b951:	90                   	nop
  80b952:	c9                   	leave  
  80b953:	c3                   	ret    

000000000080b954 <shift>:
shift():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:133
/* 0x5D - Apps      */ {  0,        0,       0x5D,      0x5D }
        };
char k_shift=0,k_ctrl=0,k_capslock=0;

void shift()
{
  80b954:	f3 0f 1e fa          	endbr64 
  80b958:	55                   	push   rbp
  80b959:	48 89 e5             	mov    rbp,rsp
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:134
    k_shift=!k_shift;
  80b95c:	48 b8 6d b8 41 00 00 	movabs rax,0x41b86d
  80b963:	00 00 00 
  80b966:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  80b969:	84 c0                	test   al,al
  80b96b:	0f 94 c0             	sete   al
  80b96e:	89 c2                	mov    edx,eax
  80b970:	48 b8 6d b8 41 00 00 	movabs rax,0x41b86d
  80b977:	00 00 00 
  80b97a:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:135
}
  80b97c:	90                   	nop
  80b97d:	5d                   	pop    rbp
  80b97e:	c3                   	ret    

000000000080b97f <ctrl>:
ctrl():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:137
void ctrl()
{
  80b97f:	f3 0f 1e fa          	endbr64 
  80b983:	55                   	push   rbp
  80b984:	48 89 e5             	mov    rbp,rsp
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:138
    k_ctrl=!k_ctrl;
  80b987:	48 b8 6e b8 41 00 00 	movabs rax,0x41b86e
  80b98e:	00 00 00 
  80b991:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  80b994:	84 c0                	test   al,al
  80b996:	0f 94 c0             	sete   al
  80b999:	89 c2                	mov    edx,eax
  80b99b:	48 b8 6e b8 41 00 00 	movabs rax,0x41b86e
  80b9a2:	00 00 00 
  80b9a5:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:139
}
  80b9a7:	90                   	nop
  80b9a8:	5d                   	pop    rbp
  80b9a9:	c3                   	ret    

000000000080b9aa <capslock>:
capslock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:141
void capslock()
{
  80b9aa:	f3 0f 1e fa          	endbr64 
  80b9ae:	55                   	push   rbp
  80b9af:	48 89 e5             	mov    rbp,rsp
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:142
    k_capslock=k_capslock==0?1:0;
  80b9b2:	48 b8 6f b8 41 00 00 	movabs rax,0x41b86f
  80b9b9:	00 00 00 
  80b9bc:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  80b9bf:	84 c0                	test   al,al
  80b9c1:	0f 94 c0             	sete   al
  80b9c4:	89 c2                	mov    edx,eax
  80b9c6:	48 b8 6f b8 41 00 00 	movabs rax,0x41b86f
  80b9cd:	00 00 00 
  80b9d0:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:143
}
  80b9d2:	90                   	nop
  80b9d3:	5d                   	pop    rbp
  80b9d4:	c3                   	ret    

000000000080b9d5 <to_ascii>:
to_ascii():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:145
char to_ascii(char scan_code)
{
  80b9d5:	f3 0f 1e fa          	endbr64 
  80b9d9:	55                   	push   rbp
  80b9da:	48 89 e5             	mov    rbp,rsp
  80b9dd:	89 f8                	mov    eax,edi
  80b9df:	88 45 ec             	mov    BYTE PTR [rbp-0x14],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:146
    for(int i=0;i<0x5e;i++)//sizeof(key_map)/sizeof(key_code)
  80b9e2:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
  80b9e9:	e9 09 01 00 00       	jmp    80baf7 <to_ascii+0x122>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:147
        if(key_map[i].scan_code==scan_code)
  80b9ee:	48 b9 a0 8d 81 00 00 	movabs rcx,0x818da0
  80b9f5:	00 00 00 
  80b9f8:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80b9fb:	48 63 d0             	movsxd rdx,eax
  80b9fe:	48 89 d0             	mov    rax,rdx
  80ba01:	48 c1 e0 02          	shl    rax,0x2
  80ba05:	48 01 d0             	add    rax,rdx
  80ba08:	48 01 c8             	add    rax,rcx
  80ba0b:	48 83 c0 02          	add    rax,0x2
  80ba0f:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  80ba12:	38 45 ec             	cmp    BYTE PTR [rbp-0x14],al
  80ba15:	0f 85 d8 00 00 00    	jne    80baf3 <to_ascii+0x11e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:149
        {
            if(k_capslock&&key_map[i].ascii>='a'&&key_map[i].ascii<='z')return key_map[i].ascii_shift;
  80ba1b:	48 b8 6f b8 41 00 00 	movabs rax,0x41b86f
  80ba22:	00 00 00 
  80ba25:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  80ba28:	84 c0                	test   al,al
  80ba2a:	74 6e                	je     80ba9a <to_ascii+0xc5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:149 (discriminator 1)
  80ba2c:	48 b9 a0 8d 81 00 00 	movabs rcx,0x818da0
  80ba33:	00 00 00 
  80ba36:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80ba39:	48 63 d0             	movsxd rdx,eax
  80ba3c:	48 89 d0             	mov    rax,rdx
  80ba3f:	48 c1 e0 02          	shl    rax,0x2
  80ba43:	48 01 d0             	add    rax,rdx
  80ba46:	48 01 c8             	add    rax,rcx
  80ba49:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  80ba4c:	3c 60                	cmp    al,0x60
  80ba4e:	7e 4a                	jle    80ba9a <to_ascii+0xc5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:149 (discriminator 2)
  80ba50:	48 b9 a0 8d 81 00 00 	movabs rcx,0x818da0
  80ba57:	00 00 00 
  80ba5a:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80ba5d:	48 63 d0             	movsxd rdx,eax
  80ba60:	48 89 d0             	mov    rax,rdx
  80ba63:	48 c1 e0 02          	shl    rax,0x2
  80ba67:	48 01 d0             	add    rax,rdx
  80ba6a:	48 01 c8             	add    rax,rcx
  80ba6d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  80ba70:	3c 7a                	cmp    al,0x7a
  80ba72:	7f 26                	jg     80ba9a <to_ascii+0xc5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:149 (discriminator 3)
  80ba74:	48 b9 a0 8d 81 00 00 	movabs rcx,0x818da0
  80ba7b:	00 00 00 
  80ba7e:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80ba81:	48 63 d0             	movsxd rdx,eax
  80ba84:	48 89 d0             	mov    rax,rdx
  80ba87:	48 c1 e0 02          	shl    rax,0x2
  80ba8b:	48 01 d0             	add    rax,rdx
  80ba8e:	48 01 c8             	add    rax,rcx
  80ba91:	48 83 c0 01          	add    rax,0x1
  80ba95:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  80ba98:	eb 6c                	jmp    80bb06 <to_ascii+0x131>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:150
            else if(k_shift)return key_map[i].ascii_shift;
  80ba9a:	48 b8 6d b8 41 00 00 	movabs rax,0x41b86d
  80baa1:	00 00 00 
  80baa4:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  80baa7:	84 c0                	test   al,al
  80baa9:	74 26                	je     80bad1 <to_ascii+0xfc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:150 (discriminator 1)
  80baab:	48 b9 a0 8d 81 00 00 	movabs rcx,0x818da0
  80bab2:	00 00 00 
  80bab5:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80bab8:	48 63 d0             	movsxd rdx,eax
  80babb:	48 89 d0             	mov    rax,rdx
  80babe:	48 c1 e0 02          	shl    rax,0x2
  80bac2:	48 01 d0             	add    rax,rdx
  80bac5:	48 01 c8             	add    rax,rcx
  80bac8:	48 83 c0 01          	add    rax,0x1
  80bacc:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  80bacf:	eb 35                	jmp    80bb06 <to_ascii+0x131>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:151
            else return key_map[i].ascii;
  80bad1:	48 b9 a0 8d 81 00 00 	movabs rcx,0x818da0
  80bad8:	00 00 00 
  80badb:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80bade:	48 63 d0             	movsxd rdx,eax
  80bae1:	48 89 d0             	mov    rax,rdx
  80bae4:	48 c1 e0 02          	shl    rax,0x2
  80bae8:	48 01 d0             	add    rax,rdx
  80baeb:	48 01 c8             	add    rax,rcx
  80baee:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  80baf1:	eb 13                	jmp    80bb06 <to_ascii+0x131>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:146 (discriminator 2)
    for(int i=0;i<0x5e;i++)//sizeof(key_map)/sizeof(key_code)
  80baf3:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:146 (discriminator 1)
  80baf7:	83 7d fc 5d          	cmp    DWORD PTR [rbp-0x4],0x5d
  80bafb:	0f 8e ed fe ff ff    	jle    80b9ee <to_ascii+0x19>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:154
        }

    return '\0';
  80bb01:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:155
}
  80bb06:	5d                   	pop    rbp
  80bb07:	c3                   	ret    

000000000080bb08 <init_kb>:
init_kb():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:157
int init_kb()
{
  80bb08:	f3 0f 1e fa          	endbr64 
  80bb0c:	55                   	push   rbp
  80bb0d:	48 89 e5             	mov    rbp,rsp
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:158
    reg_device(&dev_keyboard);
  80bb10:	48 b8 e0 8c 81 00 00 	movabs rax,0x818ce0
  80bb17:	00 00 00 
  80bb1a:	48 89 c7             	mov    rdi,rax
  80bb1d:	48 b8 3a 41 80 00 00 	movabs rax,0x80413a
  80bb24:	00 00 00 
  80bb27:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:159
    reg_driver(&drv_keyboard);
  80bb29:	48 b8 40 8c 81 00 00 	movabs rax,0x818c40
  80bb30:	00 00 00 
  80bb33:	48 89 c7             	mov    rdi,rax
  80bb36:	48 b8 6c 44 80 00 00 	movabs rax,0x80446c
  80bb3d:	00 00 00 
  80bb40:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:160
}
  80bb42:	90                   	nop
  80bb43:	5d                   	pop    rbp
  80bb44:	c3                   	ret    

000000000080bb45 <key_proc>:
key_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:162
int key_proc()
{
  80bb45:	f3 0f 1e fa          	endbr64 
  80bb49:	55                   	push   rbp
  80bb4a:	48 89 e5             	mov    rbp,rsp
  80bb4d:	48 83 ec 20          	sub    rsp,0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:163
    asm volatile("cli");
  80bb51:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:165
    //获取完整的扫描码
    u8 scan1=0,scan2=0,ch=0;
  80bb52:	c6 45 ff 00          	mov    BYTE PTR [rbp-0x1],0x0
  80bb56:	c6 45 fe 00          	mov    BYTE PTR [rbp-0x2],0x0
  80bb5a:	c6 45 fd 00          	mov    BYTE PTR [rbp-0x3],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:167
    key_code tmpc;
    scan1=inb(0x60);
  80bb5e:	bf 60 00 00 00       	mov    edi,0x60
  80bb63:	48 b8 e9 86 80 00 00 	movabs rax,0x8086e9
  80bb6a:	00 00 00 
  80bb6d:	ff d0                	call   rax
  80bb6f:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:179
//    tmpc.scan_code2=scan2;
//    tmpc.ascii= ch;


//    ENQUEUE(key_bufq,tmpc)
    if((key_bufq.tail+1)%key_bufq.size!=key_bufq.head)
  80bb72:	48 b8 00 0f 81 00 00 	movabs rax,0x810f00
  80bb79:	00 00 00 
  80bb7c:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
  80bb7f:	83 c0 01             	add    eax,0x1
  80bb82:	48 ba 00 0f 81 00 00 	movabs rdx,0x810f00
  80bb89:	00 00 00 
  80bb8c:	8b 4a 10             	mov    ecx,DWORD PTR [rdx+0x10]
  80bb8f:	99                   	cdq    
  80bb90:	f7 f9                	idiv   ecx
  80bb92:	48 b8 00 0f 81 00 00 	movabs rax,0x810f00
  80bb99:	00 00 00 
  80bb9c:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
  80bb9f:	39 c2                	cmp    edx,eax
  80bba1:	74 52                	je     80bbf5 <key_proc+0xb0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:181
    {
        key_bufq.data[key_bufq.tail]=scan1;
  80bba3:	48 b8 00 0f 81 00 00 	movabs rax,0x810f00
  80bbaa:	00 00 00 
  80bbad:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  80bbb0:	48 b8 00 0f 81 00 00 	movabs rax,0x810f00
  80bbb7:	00 00 00 
  80bbba:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
  80bbbd:	48 98                	cdqe   
  80bbbf:	48 01 c2             	add    rdx,rax
  80bbc2:	0f b6 45 ff          	movzx  eax,BYTE PTR [rbp-0x1]
  80bbc6:	88 02                	mov    BYTE PTR [rdx],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:182
        key_bufq.tail=(key_bufq.tail+1)%key_bufq.size;
  80bbc8:	48 b8 00 0f 81 00 00 	movabs rax,0x810f00
  80bbcf:	00 00 00 
  80bbd2:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
  80bbd5:	83 c0 01             	add    eax,0x1
  80bbd8:	48 ba 00 0f 81 00 00 	movabs rdx,0x810f00
  80bbdf:	00 00 00 
  80bbe2:	8b 4a 10             	mov    ecx,DWORD PTR [rdx+0x10]
  80bbe5:	99                   	cdq    
  80bbe6:	f7 f9                	idiv   ecx
  80bbe8:	48 b8 00 0f 81 00 00 	movabs rax,0x810f00
  80bbef:	00 00 00 
  80bbf2:	89 50 0c             	mov    DWORD PTR [rax+0xc],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:185
    }

    if(scan1==0x48)
  80bbf5:	80 7d ff 48          	cmp    BYTE PTR [rbp-0x1],0x48
  80bbf9:	75 11                	jne    80bc0c <key_proc+0xc7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:186
        scr_up();
  80bbfb:	b8 00 00 00 00       	mov    eax,0x0
  80bc00:	48 ba 09 9c 80 00 00 	movabs rdx,0x809c09
  80bc07:	00 00 00 
  80bc0a:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:187
    if(scan1==0x50)
  80bc0c:	80 7d ff 50          	cmp    BYTE PTR [rbp-0x1],0x50
  80bc10:	75 11                	jne    80bc23 <key_proc+0xde>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:188
        scr_down();
  80bc12:	b8 00 00 00 00       	mov    eax,0x0
  80bc17:	48 ba d5 9c 80 00 00 	movabs rdx,0x809cd5
  80bc1e:	00 00 00 
  80bc21:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:189
    switch (scan1)
  80bc23:	0f b6 45 ff          	movzx  eax,BYTE PTR [rbp-0x1]
  80bc27:	3d b6 00 00 00       	cmp    eax,0xb6
  80bc2c:	74 41                	je     80bc6f <key_proc+0x12a>
  80bc2e:	3d b6 00 00 00       	cmp    eax,0xb6
  80bc33:	7f 73                	jg     80bca8 <key_proc+0x163>
  80bc35:	3d aa 00 00 00       	cmp    eax,0xaa
  80bc3a:	74 33                	je     80bc6f <key_proc+0x12a>
  80bc3c:	3d aa 00 00 00       	cmp    eax,0xaa
  80bc41:	7f 65                	jg     80bca8 <key_proc+0x163>
  80bc43:	3d 9d 00 00 00       	cmp    eax,0x9d
  80bc48:	74 38                	je     80bc82 <key_proc+0x13d>
  80bc4a:	3d 9d 00 00 00       	cmp    eax,0x9d
  80bc4f:	7f 57                	jg     80bca8 <key_proc+0x163>
  80bc51:	83 f8 3a             	cmp    eax,0x3a
  80bc54:	74 3f                	je     80bc95 <key_proc+0x150>
  80bc56:	83 f8 3a             	cmp    eax,0x3a
  80bc59:	7f 4d                	jg     80bca8 <key_proc+0x163>
  80bc5b:	83 f8 36             	cmp    eax,0x36
  80bc5e:	74 0f                	je     80bc6f <key_proc+0x12a>
  80bc60:	83 f8 36             	cmp    eax,0x36
  80bc63:	7f 43                	jg     80bca8 <key_proc+0x163>
  80bc65:	83 f8 1d             	cmp    eax,0x1d
  80bc68:	74 18                	je     80bc82 <key_proc+0x13d>
  80bc6a:	83 f8 2a             	cmp    eax,0x2a
  80bc6d:	75 39                	jne    80bca8 <key_proc+0x163>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:195
    {
        case 0x36:
        case 0x2a:
        case 0xaa:
        case 0xb6:
            shift();
  80bc6f:	b8 00 00 00 00       	mov    eax,0x0
  80bc74:	48 ba 54 b9 80 00 00 	movabs rdx,0x80b954
  80bc7b:	00 00 00 
  80bc7e:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:196
            break;
  80bc80:	eb 27                	jmp    80bca9 <key_proc+0x164>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:199
        case 0x1d:
        case 0x9d:
            ctrl();
  80bc82:	b8 00 00 00 00       	mov    eax,0x0
  80bc87:	48 ba 7f b9 80 00 00 	movabs rdx,0x80b97f
  80bc8e:	00 00 00 
  80bc91:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:200
            break;
  80bc93:	eb 14                	jmp    80bca9 <key_proc+0x164>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:202
        case 0x3a:
            capslock();
  80bc95:	b8 00 00 00 00       	mov    eax,0x0
  80bc9a:	48 ba aa b9 80 00 00 	movabs rdx,0x80b9aa
  80bca1:	00 00 00 
  80bca4:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:203
            break;
  80bca6:	eb 01                	jmp    80bca9 <key_proc+0x164>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:205
        default:
            break;
  80bca8:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:208
    }
    //发送到std
    if(!(scan1&FLAG_BREAK)){
  80bca9:	0f b6 45 ff          	movzx  eax,BYTE PTR [rbp-0x1]
  80bcad:	84 c0                	test   al,al
  80bcaf:	78 45                	js     80bcf6 <key_proc+0x1b1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:209
        char ch= to_ascii(scan1);
  80bcb1:	0f b6 45 ff          	movzx  eax,BYTE PTR [rbp-0x1]
  80bcb5:	0f be c0             	movsx  eax,al
  80bcb8:	89 c7                	mov    edi,eax
  80bcba:	48 b8 d5 b9 80 00 00 	movabs rax,0x80b9d5
  80bcc1:	00 00 00 
  80bcc4:	ff d0                	call   rax
  80bcc6:	88 45 f7             	mov    BYTE PTR [rbp-0x9],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:210
        unsigned long args[]={(unsigned long) &ch, 1};
  80bcc9:	48 8d 45 f7          	lea    rax,[rbp-0x9]
  80bccd:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
  80bcd1:	48 c7 45 e8 01 00 00 	mov    QWORD PTR [rbp-0x18],0x1
  80bcd8:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:212
        //写入stdin
        sys_ioctl(0,TTY_WSTDIN,(unsigned long)args);
  80bcd9:	48 8d 45 e0          	lea    rax,[rbp-0x20]
  80bcdd:	48 89 c2             	mov    rdx,rax
  80bce0:	be 03 00 00 00       	mov    esi,0x3
  80bce5:	bf 00 00 00 00       	mov    edi,0x0
  80bcea:	48 b8 39 86 80 00 00 	movabs rax,0x808639
  80bcf1:	00 00 00 
  80bcf4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:231
//        //logf("%x\n",stdin.w_ptr);
//        //print_stdin();
//        //printchar(ch);
//        //flush_screen(0);*/
//    }
    eoi();
  80bcf6:	b8 00 00 00 00       	mov    eax,0x0
  80bcfb:	48 ba fe 86 80 00 00 	movabs rdx,0x8086fe
  80bd02:	00 00 00 
  80bd05:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:232
    asm volatile("leave\r\n iretq");
  80bd07:	c9                   	leave  
  80bd08:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:233
}
  80bd0a:	90                   	nop
  80bd0b:	c9                   	leave  
  80bd0c:	c3                   	ret    

000000000080bd0d <sys_analyse_key>:
sys_analyse_key():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:236

char sys_analyse_key()
{
  80bd0d:	f3 0f 1e fa          	endbr64 
  80bd11:	55                   	push   rbp
  80bd12:	48 89 e5             	mov    rbp,rsp
  80bd15:	48 83 ec 30          	sub    rsp,0x30
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:237
    if(key_bufq.tail==key_bufq.head)return -1;
  80bd19:	48 b8 00 0f 81 00 00 	movabs rax,0x810f00
  80bd20:	00 00 00 
  80bd23:	8b 50 0c             	mov    edx,DWORD PTR [rax+0xc]
  80bd26:	48 b8 00 0f 81 00 00 	movabs rax,0x810f00
  80bd2d:	00 00 00 
  80bd30:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
  80bd33:	39 c2                	cmp    edx,eax
  80bd35:	75 0a                	jne    80bd41 <sys_analyse_key+0x34>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:237 (discriminator 1)
  80bd37:	b8 ff ff ff ff       	mov    eax,0xffffffff
  80bd3c:	e9 58 01 00 00       	jmp    80be99 <sys_analyse_key+0x18c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:238
    char c=key_buf[key_bufq.head];
  80bd41:	48 b8 00 0f 81 00 00 	movabs rax,0x810f00
  80bd48:	00 00 00 
  80bd4b:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
  80bd4e:	48 ba 60 b6 41 00 00 	movabs rdx,0x41b660
  80bd55:	00 00 00 
  80bd58:	48 98                	cdqe   
  80bd5a:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
  80bd5e:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:239
    key_bufq.head=(key_bufq.head+1)%key_bufq.size;
  80bd61:	48 b8 00 0f 81 00 00 	movabs rax,0x810f00
  80bd68:	00 00 00 
  80bd6b:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
  80bd6e:	83 c0 01             	add    eax,0x1
  80bd71:	48 ba 00 0f 81 00 00 	movabs rdx,0x810f00
  80bd78:	00 00 00 
  80bd7b:	8b 4a 10             	mov    ecx,DWORD PTR [rdx+0x10]
  80bd7e:	99                   	cdq    
  80bd7f:	f7 f9                	idiv   ecx
  80bd81:	48 b8 00 0f 81 00 00 	movabs rax,0x810f00
  80bd88:	00 00 00 
  80bd8b:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:241
//    QHEAD(key_bufq)=(QHEAD(key_bufq)+1)%QSIZE(key_bufq);
    printf("scan code:");
  80bd8e:	48 b8 76 8f 81 00 00 	movabs rax,0x818f76
  80bd95:	00 00 00 
  80bd98:	48 89 c7             	mov    rdi,rax
  80bd9b:	b8 00 00 00 00       	mov    eax,0x0
  80bda0:	48 ba 97 11 80 00 00 	movabs rdx,0x801197
  80bda7:	00 00 00 
  80bdaa:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:242
    char res[33]={0};
  80bdac:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
  80bdb3:	00 
  80bdb4:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
  80bdbb:	00 
  80bdbc:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
  80bdc3:	00 
  80bdc4:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
  80bdcb:	00 
  80bdcc:	c6 45 f0 00          	mov    BYTE PTR [rbp-0x10],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:243
    itoa(res,16,c);
  80bdd0:	0f be 55 ff          	movsx  edx,BYTE PTR [rbp-0x1]
  80bdd4:	48 8d 45 d0          	lea    rax,[rbp-0x30]
  80bdd8:	be 10 00 00 00       	mov    esi,0x10
  80bddd:	48 89 c7             	mov    rdi,rax
  80bde0:	48 b8 51 10 80 00 00 	movabs rax,0x801051
  80bde7:	00 00 00 
  80bdea:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:244
    printf(res);
  80bdec:	48 8d 45 d0          	lea    rax,[rbp-0x30]
  80bdf0:	48 89 c7             	mov    rdi,rax
  80bdf3:	b8 00 00 00 00       	mov    eax,0x0
  80bdf8:	48 ba 97 11 80 00 00 	movabs rdx,0x801197
  80bdff:	00 00 00 
  80be02:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:245
    if(c&FLAG_BREAK){
  80be04:	80 7d ff 00          	cmp    BYTE PTR [rbp-0x1],0x0
  80be08:	79 25                	jns    80be2f <sys_analyse_key+0x122>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:246
        printf("\n");
  80be0a:	48 b8 81 8f 81 00 00 	movabs rax,0x818f81
  80be11:	00 00 00 
  80be14:	48 89 c7             	mov    rdi,rax
  80be17:	b8 00 00 00 00       	mov    eax,0x0
  80be1c:	48 ba 97 11 80 00 00 	movabs rdx,0x801197
  80be23:	00 00 00 
  80be26:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:247
        return -1;
  80be28:	b8 ff ff ff ff       	mov    eax,0xffffffff
  80be2d:	eb 6a                	jmp    80be99 <sys_analyse_key+0x18c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:249
    }
    c= to_ascii(c&0x7f);
  80be2f:	0f be 45 ff          	movsx  eax,BYTE PTR [rbp-0x1]
  80be33:	83 e0 7f             	and    eax,0x7f
  80be36:	89 c7                	mov    edi,eax
  80be38:	48 b8 d5 b9 80 00 00 	movabs rax,0x80b9d5
  80be3f:	00 00 00 
  80be42:	ff d0                	call   rax
  80be44:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:250
    printf(" char:");
  80be47:	48 b8 83 8f 81 00 00 	movabs rax,0x818f83
  80be4e:	00 00 00 
  80be51:	48 89 c7             	mov    rdi,rax
  80be54:	b8 00 00 00 00       	mov    eax,0x0
  80be59:	48 ba 97 11 80 00 00 	movabs rdx,0x801197
  80be60:	00 00 00 
  80be63:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:251
    putchar(c);
  80be65:	0f be 45 ff          	movsx  eax,BYTE PTR [rbp-0x1]
  80be69:	89 c7                	mov    edi,eax
  80be6b:	48 b8 66 11 80 00 00 	movabs rax,0x801166
  80be72:	00 00 00 
  80be75:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:252
    printf("\n");
  80be77:	48 b8 81 8f 81 00 00 	movabs rax,0x818f81
  80be7e:	00 00 00 
  80be81:	48 89 c7             	mov    rdi,rax
  80be84:	b8 00 00 00 00       	mov    eax,0x0
  80be89:	48 ba 97 11 80 00 00 	movabs rdx,0x801197
  80be90:	00 00 00 
  80be93:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:253
    return c;
  80be95:	0f b6 45 ff          	movzx  eax,BYTE PTR [rbp-0x1]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:254 (discriminator 1)
  80be99:	c9                   	leave  
  80be9a:	c3                   	ret    

000000000080be9b <init_disk>:
init_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:27
        .read=async_read_disk,
        .write=async_write_disk
};
int disks[4];//四块硬盘的dev号
int init_disk()
{
  80be9b:	f3 0f 1e fa          	endbr64 
  80be9f:	55                   	push   rbp
  80bea0:	48 89 e5             	mov    rbp,rsp
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:31
    //disk_devi= reg_device(&dev_disk);
    //disk_drvi= reg_driver(&drv_disk);
    //dev_disk.drv=&drv_disk;
    hd_iterate();
  80bea3:	b8 00 00 00 00       	mov    eax,0x0
  80bea8:	48 ba 64 cb 80 00 00 	movabs rdx,0x80cb64
  80beaf:	00 00 00 
  80beb2:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:32
    return 0;
  80beb4:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:33
}
  80beb9:	5d                   	pop    rbp
  80beba:	c3                   	ret    

000000000080bebb <disk_int_handler_c>:
disk_int_handler_c():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:36

int disk_int_handler_c()
{
  80bebb:	f3 0f 1e fa          	endbr64 
  80bebf:	55                   	push   rbp
  80bec0:	48 89 e5             	mov    rbp,rsp
  80bec3:	48 83 ec 20          	sub    rsp,0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:37
    if(running_req==NULL)
  80bec7:	48 b8 c0 e5 41 00 00 	movabs rax,0x41e5c0
  80bece:	00 00 00 
  80bed1:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80bed4:	48 85 c0             	test   rax,rax
  80bed7:	75 0a                	jne    80bee3 <disk_int_handler_c+0x28>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:40
    {
        //printf("err:null running dreq\n");
        return 1;//同步读写硬盘
  80bed9:	b8 01 00 00 00       	mov    eax,0x1
  80bede:	e9 5a 02 00 00       	jmp    80c13d <disk_int_handler_c+0x282>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:42
    }
    short *p=running_req->buf;
  80bee3:	48 b8 c0 e5 41 00 00 	movabs rax,0x41e5c0
  80beea:	00 00 00 
  80beed:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80bef0:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80bef4:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:43
    int port=PORT_DISK_MAJOR;
  80bef8:	c7 45 f4 f0 01 00 00 	mov    DWORD PTR [rbp-0xc],0x1f0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:44
    if(running_req->disk==DISK_SLAVE_MAJOR||\
  80beff:	48 b8 c0 e5 41 00 00 	movabs rax,0x41e5c0
  80bf06:	00 00 00 
  80bf09:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80bf0c:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
  80bf0f:	83 f8 02             	cmp    eax,0x2
  80bf12:	74 15                	je     80bf29 <disk_int_handler_c+0x6e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:45 (discriminator 1)
    running_req->disk==DISK_SLAVE_SLAVE)
  80bf14:	48 b8 c0 e5 41 00 00 	movabs rax,0x41e5c0
  80bf1b:	00 00 00 
  80bf1e:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80bf21:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:44 (discriminator 1)
    if(running_req->disk==DISK_SLAVE_MAJOR||\
  80bf24:	83 f8 03             	cmp    eax,0x3
  80bf27:	75 07                	jne    80bf30 <disk_int_handler_c+0x75>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:46
        port=PORT_DISK_SLAVE;
  80bf29:	c7 45 f4 70 01 00 00 	mov    DWORD PTR [rbp-0xc],0x170
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:47
    if(running_req->func==DISKREQ_READ)
  80bf30:	48 b8 c0 e5 41 00 00 	movabs rax,0x41e5c0
  80bf37:	00 00 00 
  80bf3a:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80bf3d:	8b 00                	mov    eax,DWORD PTR [rax]
  80bf3f:	85 c0                	test   eax,eax
  80bf41:	75 63                	jne    80bfa6 <disk_int_handler_c+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:51
    {
        ////printf("sys_read dist:%x\n",p);
        //读取
        for(int i=0;i<running_req->sec_n*256;i++)
  80bf43:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [rbp-0x10],0x0
  80bf4a:	eb 29                	jmp    80bf75 <disk_int_handler_c+0xba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:53 (discriminator 3)
        {
            *p++=inw(port);
  80bf4c:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  80bf4f:	0f b7 c0             	movzx  eax,ax
  80bf52:	89 c7                	mov    edi,eax
  80bf54:	48 b8 f3 86 80 00 00 	movabs rax,0x8086f3
  80bf5b:	00 00 00 
  80bf5e:	ff d0                	call   rax
  80bf60:	89 c2                	mov    edx,eax
  80bf62:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80bf66:	48 8d 48 02          	lea    rcx,[rax+0x2]
  80bf6a:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
  80bf6e:	66 89 10             	mov    WORD PTR [rax],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:51 (discriminator 3)
        for(int i=0;i<running_req->sec_n*256;i++)
  80bf71:	83 45 f0 01          	add    DWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:51 (discriminator 1)
  80bf75:	48 b8 c0 e5 41 00 00 	movabs rax,0x41e5c0
  80bf7c:	00 00 00 
  80bf7f:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80bf82:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
  80bf85:	c1 e0 08             	shl    eax,0x8
  80bf88:	39 45 f0             	cmp    DWORD PTR [rbp-0x10],eax
  80bf8b:	7c bf                	jl     80bf4c <disk_int_handler_c+0x91>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:55
        }
        running_req->result=DISK_CHK_OK;
  80bf8d:	48 b8 c0 e5 41 00 00 	movabs rax,0x41e5c0
  80bf94:	00 00 00 
  80bf97:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80bf9a:	c7 40 20 01 00 00 00 	mov    DWORD PTR [rax+0x20],0x1
  80bfa1:	e9 2a 01 00 00       	jmp    80c0d0 <disk_int_handler_c+0x215>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:56
    }else if(running_req->func==DISKREQ_WRITE)
  80bfa6:	48 b8 c0 e5 41 00 00 	movabs rax,0x41e5c0
  80bfad:	00 00 00 
  80bfb0:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80bfb3:	8b 00                	mov    eax,DWORD PTR [rax]
  80bfb5:	83 f8 01             	cmp    eax,0x1
  80bfb8:	75 66                	jne    80c020 <disk_int_handler_c+0x165>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:58
    {
        for(int i=0;i<running_req->sec_n*256;i++)
  80bfba:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
  80bfc1:	eb 2c                	jmp    80bfef <disk_int_handler_c+0x134>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:59 (discriminator 3)
            outw(port,*p++);
  80bfc3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80bfc7:	48 8d 50 02          	lea    rdx,[rax+0x2]
  80bfcb:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
  80bfcf:	0f b7 00             	movzx  eax,WORD PTR [rax]
  80bfd2:	0f b7 d0             	movzx  edx,ax
  80bfd5:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  80bfd8:	0f b7 c0             	movzx  eax,ax
  80bfdb:	89 d6                	mov    esi,edx
  80bfdd:	89 c7                	mov    edi,eax
  80bfdf:	48 b8 dd 86 80 00 00 	movabs rax,0x8086dd
  80bfe6:	00 00 00 
  80bfe9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:58 (discriminator 3)
        for(int i=0;i<running_req->sec_n*256;i++)
  80bfeb:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:58 (discriminator 1)
  80bfef:	48 b8 c0 e5 41 00 00 	movabs rax,0x41e5c0
  80bff6:	00 00 00 
  80bff9:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80bffc:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
  80bfff:	c1 e0 08             	shl    eax,0x8
  80c002:	39 45 ec             	cmp    DWORD PTR [rbp-0x14],eax
  80c005:	7c bc                	jl     80bfc3 <disk_int_handler_c+0x108>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:60
        running_req->result=DISK_CHK_OK;
  80c007:	48 b8 c0 e5 41 00 00 	movabs rax,0x41e5c0
  80c00e:	00 00 00 
  80c011:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80c014:	c7 40 20 01 00 00 00 	mov    DWORD PTR [rax+0x20],0x1
  80c01b:	e9 b0 00 00 00       	jmp    80c0d0 <disk_int_handler_c+0x215>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:61
    }else if(running_req->func==DISKREQ_CHECK)
  80c020:	48 b8 c0 e5 41 00 00 	movabs rax,0x41e5c0
  80c027:	00 00 00 
  80c02a:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80c02d:	8b 00                	mov    eax,DWORD PTR [rax]
  80c02f:	83 f8 02             	cmp    eax,0x2
  80c032:	75 48                	jne    80c07c <disk_int_handler_c+0x1c1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:63
    {
        char stat=inb(port+7);
  80c034:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  80c037:	83 c0 07             	add    eax,0x7
  80c03a:	0f b6 c0             	movzx  eax,al
  80c03d:	89 c7                	mov    edi,eax
  80c03f:	48 b8 e9 86 80 00 00 	movabs rax,0x8086e9
  80c046:	00 00 00 
  80c049:	ff d0                	call   rax
  80c04b:	88 45 e7             	mov    BYTE PTR [rbp-0x19],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:64
        short dat=inw(port);
  80c04e:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  80c051:	0f b7 c0             	movzx  eax,ax
  80c054:	89 c7                	mov    edi,eax
  80c056:	48 b8 f3 86 80 00 00 	movabs rax,0x8086f3
  80c05d:	00 00 00 
  80c060:	ff d0                	call   rax
  80c062:	66 89 45 e4          	mov    WORD PTR [rbp-0x1c],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:67
        if(1)
        {
            running_req->result=DISK_CHK_OK;
  80c066:	48 b8 c0 e5 41 00 00 	movabs rax,0x41e5c0
  80c06d:	00 00 00 
  80c070:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80c073:	c7 40 20 01 00 00 00 	mov    DWORD PTR [rax+0x20],0x1
  80c07a:	eb 54                	jmp    80c0d0 <disk_int_handler_c+0x215>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:75
            char err=inb(port+1);//错误原因
            printf("checking disk err:%x\nresetting hd\n",err);
            running_req->result=DISK_CHK_ERR;
            request(running_req->disk,DISKREQ_RESET,0,0,0);
        }
    }else if(running_req->func==DISKREQ_RESET)
  80c07c:	48 b8 c0 e5 41 00 00 	movabs rax,0x41e5c0
  80c083:	00 00 00 
  80c086:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80c089:	8b 00                	mov    eax,DWORD PTR [rax]
  80c08b:	83 f8 03             	cmp    eax,0x3
  80c08e:	75 40                	jne    80c0d0 <disk_int_handler_c+0x215>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:77
    {
        int stat=inb(port+7);
  80c090:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  80c093:	83 c0 07             	add    eax,0x7
  80c096:	0f b6 c0             	movzx  eax,al
  80c099:	89 c7                	mov    edi,eax
  80c09b:	48 b8 e9 86 80 00 00 	movabs rax,0x8086e9
  80c0a2:	00 00 00 
  80c0a5:	ff d0                	call   rax
  80c0a7:	0f b6 c0             	movzx  eax,al
  80c0aa:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:78
        printf("reset disk done.\nstat now:%x\n",stat);
  80c0ad:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
  80c0b0:	89 c6                	mov    esi,eax
  80c0b2:	48 b8 8a 8f 81 00 00 	movabs rax,0x818f8a
  80c0b9:	00 00 00 
  80c0bc:	48 89 c7             	mov    rdi,rax
  80c0bf:	b8 00 00 00 00       	mov    eax,0x0
  80c0c4:	48 ba 97 11 80 00 00 	movabs rdx,0x801197
  80c0cb:	00 00 00 
  80c0ce:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:80
    }
    running_req->stat=REQ_STAT_DONE;
  80c0d0:	48 b8 c0 e5 41 00 00 	movabs rax,0x41e5c0
  80c0d7:	00 00 00 
  80c0da:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80c0dd:	c7 40 1c 03 00 00 00 	mov    DWORD PTR [rax+0x1c],0x3
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:81
    running_req->args->stat=REQ_STAT_EMPTY;
  80c0e4:	48 b8 c0 e5 41 00 00 	movabs rax,0x41e5c0
  80c0eb:	00 00 00 
  80c0ee:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80c0f1:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
  80c0f5:	c7 80 ac 00 00 00 00 	mov    DWORD PTR [rax+0xac],0x0
  80c0fc:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:82
    running_devman_req->stat=REQ_STAT_DONE;
  80c0ff:	48 b8 c8 e5 41 00 00 	movabs rax,0x41e5c8
  80c106:	00 00 00 
  80c109:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80c10c:	c7 80 ac 00 00 00 03 	mov    DWORD PTR [rax+0xac],0x3
  80c113:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:83
    running_devman_req=NULL;
  80c116:	48 b8 c8 e5 41 00 00 	movabs rax,0x41e5c8
  80c11d:	00 00 00 
  80c120:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:85
    //set_proc_stat(running_req->pid,TASK_READY);
    running_req=NULL;
  80c127:	48 b8 c0 e5 41 00 00 	movabs rax,0x41e5c0
  80c12e:	00 00 00 
  80c131:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:86
    return 0;
  80c138:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:87
}
  80c13d:	c9                   	leave  
  80c13e:	c3                   	ret    

000000000080c13f <check_dreq_stat>:
check_dreq_stat():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:89
int check_dreq_stat(int req_id)
{
  80c13f:	f3 0f 1e fa          	endbr64 
  80c143:	55                   	push   rbp
  80c144:	48 89 e5             	mov    rbp,rsp
  80c147:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:90
    return disk_reqs[req_id].stat;
  80c14a:	48 b9 c0 b8 41 00 00 	movabs rcx,0x41b8c0
  80c151:	00 00 00 
  80c154:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80c157:	48 63 d0             	movsxd rdx,eax
  80c15a:	48 89 d0             	mov    rax,rdx
  80c15d:	48 01 c0             	add    rax,rax
  80c160:	48 01 d0             	add    rax,rdx
  80c163:	48 c1 e0 04          	shl    rax,0x4
  80c167:	48 01 c8             	add    rax,rcx
  80c16a:	48 83 c0 1c          	add    rax,0x1c
  80c16e:	8b 00                	mov    eax,DWORD PTR [rax]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:91
}
  80c170:	5d                   	pop    rbp
  80c171:	c3                   	ret    

000000000080c172 <request>:
request():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:92
int request(int disk,int func,int lba,int secn,char *buf){
  80c172:	f3 0f 1e fa          	endbr64 
  80c176:	55                   	push   rbp
  80c177:	48 89 e5             	mov    rbp,rsp
  80c17a:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
  80c17d:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
  80c180:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
  80c183:	89 4d e0             	mov    DWORD PTR [rbp-0x20],ecx
  80c186:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:93
    if((tail+1)%MAX_DISK_REQUEST_COUNT==head)
  80c18a:	48 b8 f4 e5 41 00 00 	movabs rax,0x41e5f4
  80c191:	00 00 00 
  80c194:	8b 00                	mov    eax,DWORD PTR [rax]
  80c196:	83 c0 01             	add    eax,0x1
  80c199:	48 63 d0             	movsxd rdx,eax
  80c19c:	48 69 d2 89 88 88 88 	imul   rdx,rdx,0xffffffff88888889
  80c1a3:	48 c1 ea 20          	shr    rdx,0x20
  80c1a7:	01 c2                	add    edx,eax
  80c1a9:	c1 fa 07             	sar    edx,0x7
  80c1ac:	89 c1                	mov    ecx,eax
  80c1ae:	c1 f9 1f             	sar    ecx,0x1f
  80c1b1:	29 ca                	sub    edx,ecx
  80c1b3:	69 ca f0 00 00 00    	imul   ecx,edx,0xf0
  80c1b9:	29 c8                	sub    eax,ecx
  80c1bb:	89 c2                	mov    edx,eax
  80c1bd:	48 b8 f0 e5 41 00 00 	movabs rax,0x41e5f0
  80c1c4:	00 00 00 
  80c1c7:	8b 00                	mov    eax,DWORD PTR [rax]
  80c1c9:	39 c2                	cmp    edx,eax
  80c1cb:	75 0a                	jne    80c1d7 <request+0x65>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:95
    {
        return -1;
  80c1cd:	b8 ff ff ff ff       	mov    eax,0xffffffff
  80c1d2:	e9 7d 01 00 00       	jmp    80c354 <request+0x1e2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:97
    }
    disk_reqs[tail].disk=disk;
  80c1d7:	48 b8 f4 e5 41 00 00 	movabs rax,0x41e5f4
  80c1de:	00 00 00 
  80c1e1:	8b 00                	mov    eax,DWORD PTR [rax]
  80c1e3:	48 b9 c0 b8 41 00 00 	movabs rcx,0x41b8c0
  80c1ea:	00 00 00 
  80c1ed:	48 63 d0             	movsxd rdx,eax
  80c1f0:	48 89 d0             	mov    rax,rdx
  80c1f3:	48 01 c0             	add    rax,rax
  80c1f6:	48 01 d0             	add    rax,rdx
  80c1f9:	48 c1 e0 04          	shl    rax,0x4
  80c1fd:	48 01 c8             	add    rax,rcx
  80c200:	48 8d 50 04          	lea    rdx,[rax+0x4]
  80c204:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  80c207:	89 02                	mov    DWORD PTR [rdx],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:98
    disk_reqs[tail].func=func;
  80c209:	48 b8 f4 e5 41 00 00 	movabs rax,0x41e5f4
  80c210:	00 00 00 
  80c213:	8b 00                	mov    eax,DWORD PTR [rax]
  80c215:	48 b9 c0 b8 41 00 00 	movabs rcx,0x41b8c0
  80c21c:	00 00 00 
  80c21f:	48 63 d0             	movsxd rdx,eax
  80c222:	48 89 d0             	mov    rax,rdx
  80c225:	48 01 c0             	add    rax,rax
  80c228:	48 01 d0             	add    rax,rdx
  80c22b:	48 c1 e0 04          	shl    rax,0x4
  80c22f:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
  80c233:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
  80c236:	89 02                	mov    DWORD PTR [rdx],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:99
    disk_reqs[tail].lba=lba;
  80c238:	48 b8 f4 e5 41 00 00 	movabs rax,0x41e5f4
  80c23f:	00 00 00 
  80c242:	8b 00                	mov    eax,DWORD PTR [rax]
  80c244:	48 b9 c0 b8 41 00 00 	movabs rcx,0x41b8c0
  80c24b:	00 00 00 
  80c24e:	48 63 d0             	movsxd rdx,eax
  80c251:	48 89 d0             	mov    rax,rdx
  80c254:	48 01 c0             	add    rax,rax
  80c257:	48 01 d0             	add    rax,rdx
  80c25a:	48 c1 e0 04          	shl    rax,0x4
  80c25e:	48 01 c8             	add    rax,rcx
  80c261:	48 8d 50 08          	lea    rdx,[rax+0x8]
  80c265:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  80c268:	89 02                	mov    DWORD PTR [rdx],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:100
    disk_reqs[tail].sec_n=secn;
  80c26a:	48 b8 f4 e5 41 00 00 	movabs rax,0x41e5f4
  80c271:	00 00 00 
  80c274:	8b 00                	mov    eax,DWORD PTR [rax]
  80c276:	48 b9 c0 b8 41 00 00 	movabs rcx,0x41b8c0
  80c27d:	00 00 00 
  80c280:	48 63 d0             	movsxd rdx,eax
  80c283:	48 89 d0             	mov    rax,rdx
  80c286:	48 01 c0             	add    rax,rax
  80c289:	48 01 d0             	add    rax,rdx
  80c28c:	48 c1 e0 04          	shl    rax,0x4
  80c290:	48 01 c8             	add    rax,rcx
  80c293:	48 8d 50 0c          	lea    rdx,[rax+0xc]
  80c297:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  80c29a:	89 02                	mov    DWORD PTR [rdx],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:101
    disk_reqs[tail].stat=REQ_STAT_READY;
  80c29c:	48 b8 f4 e5 41 00 00 	movabs rax,0x41e5f4
  80c2a3:	00 00 00 
  80c2a6:	8b 00                	mov    eax,DWORD PTR [rax]
  80c2a8:	48 b9 c0 b8 41 00 00 	movabs rcx,0x41b8c0
  80c2af:	00 00 00 
  80c2b2:	48 63 d0             	movsxd rdx,eax
  80c2b5:	48 89 d0             	mov    rax,rdx
  80c2b8:	48 01 c0             	add    rax,rax
  80c2bb:	48 01 d0             	add    rax,rdx
  80c2be:	48 c1 e0 04          	shl    rax,0x4
  80c2c2:	48 01 c8             	add    rax,rcx
  80c2c5:	48 83 c0 1c          	add    rax,0x1c
  80c2c9:	c7 00 01 00 00 00    	mov    DWORD PTR [rax],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:102
    disk_reqs[tail].buf=buf;
  80c2cf:	48 b8 f4 e5 41 00 00 	movabs rax,0x41e5f4
  80c2d6:	00 00 00 
  80c2d9:	8b 00                	mov    eax,DWORD PTR [rax]
  80c2db:	48 b9 c0 b8 41 00 00 	movabs rcx,0x41b8c0
  80c2e2:	00 00 00 
  80c2e5:	48 63 d0             	movsxd rdx,eax
  80c2e8:	48 89 d0             	mov    rax,rdx
  80c2eb:	48 01 c0             	add    rax,rax
  80c2ee:	48 01 d0             	add    rax,rdx
  80c2f1:	48 c1 e0 04          	shl    rax,0x4
  80c2f5:	48 01 c8             	add    rax,rcx
  80c2f8:	48 8d 50 10          	lea    rdx,[rax+0x10]
  80c2fc:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  80c300:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:103
    int r=tail;
  80c303:	48 b8 f4 e5 41 00 00 	movabs rax,0x41e5f4
  80c30a:	00 00 00 
  80c30d:	8b 00                	mov    eax,DWORD PTR [rax]
  80c30f:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:104
    tail=(tail+1)%MAX_DISK_REQUEST_COUNT;
  80c312:	48 b8 f4 e5 41 00 00 	movabs rax,0x41e5f4
  80c319:	00 00 00 
  80c31c:	8b 00                	mov    eax,DWORD PTR [rax]
  80c31e:	8d 50 01             	lea    edx,[rax+0x1]
  80c321:	48 63 c2             	movsxd rax,edx
  80c324:	48 69 c0 89 88 88 88 	imul   rax,rax,0xffffffff88888889
  80c32b:	48 c1 e8 20          	shr    rax,0x20
  80c32f:	01 d0                	add    eax,edx
  80c331:	c1 f8 07             	sar    eax,0x7
  80c334:	89 d1                	mov    ecx,edx
  80c336:	c1 f9 1f             	sar    ecx,0x1f
  80c339:	29 c8                	sub    eax,ecx
  80c33b:	69 c8 f0 00 00 00    	imul   ecx,eax,0xf0
  80c341:	89 d0                	mov    eax,edx
  80c343:	29 c8                	sub    eax,ecx
  80c345:	48 ba f4 e5 41 00 00 	movabs rdx,0x41e5f4
  80c34c:	00 00 00 
  80c34f:	89 02                	mov    DWORD PTR [rdx],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:105
    return r;
  80c351:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:106
}
  80c354:	5d                   	pop    rbp
  80c355:	c3                   	ret    

000000000080c356 <execute_request>:
execute_request():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:107
int execute_request(){
  80c356:	f3 0f 1e fa          	endbr64 
  80c35a:	55                   	push   rbp
  80c35b:	48 89 e5             	mov    rbp,rsp
  80c35e:	48 83 ec 10          	sub    rsp,0x10
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:109
    //查看是否有已经在运行的请求
    if(running_req!=NULL)
  80c362:	48 b8 c0 e5 41 00 00 	movabs rax,0x41e5c0
  80c369:	00 00 00 
  80c36c:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80c36f:	48 85 c0             	test   rax,rax
  80c372:	0f 84 8e 00 00 00    	je     80c406 <execute_request+0xb0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:111
    {
        running_req->time++;
  80c378:	48 b8 c0 e5 41 00 00 	movabs rax,0x41e5c0
  80c37f:	00 00 00 
  80c382:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80c385:	8b 50 24             	mov    edx,DWORD PTR [rax+0x24]
  80c388:	83 c2 01             	add    edx,0x1
  80c38b:	89 50 24             	mov    DWORD PTR [rax+0x24],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:112
        if(running_req->func!=DISKREQ_CHECK)
  80c38e:	48 b8 c0 e5 41 00 00 	movabs rax,0x41e5c0
  80c395:	00 00 00 
  80c398:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80c39b:	8b 00                	mov    eax,DWORD PTR [rax]
  80c39d:	83 f8 02             	cmp    eax,0x2
  80c3a0:	74 0a                	je     80c3ac <execute_request+0x56>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:113
            return 2;
  80c3a2:	b8 02 00 00 00       	mov    eax,0x2
  80c3a7:	e9 5e 02 00 00       	jmp    80c60a <execute_request+0x2b4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:114
        if(running_req->time>MAX_DISK_CHKTIME)
  80c3ac:	48 b8 c0 e5 41 00 00 	movabs rax,0x41e5c0
  80c3b3:	00 00 00 
  80c3b6:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80c3b9:	8b 40 24             	mov    eax,DWORD PTR [rax+0x24]
  80c3bc:	83 f8 0a             	cmp    eax,0xa
  80c3bf:	7e 3b                	jle    80c3fc <execute_request+0xa6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:117
        {
            //检测硬盘超时，视为没有硬盘连接
            running_req->result=DISK_CHK_ERR;
  80c3c1:	48 b8 c0 e5 41 00 00 	movabs rax,0x41e5c0
  80c3c8:	00 00 00 
  80c3cb:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80c3ce:	c7 40 20 02 00 00 00 	mov    DWORD PTR [rax+0x20],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:118
            running_req->stat=REQ_STAT_DONE;
  80c3d5:	48 b8 c0 e5 41 00 00 	movabs rax,0x41e5c0
  80c3dc:	00 00 00 
  80c3df:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80c3e2:	c7 40 1c 03 00 00 00 	mov    DWORD PTR [rax+0x1c],0x3
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:119
            running_req=NULL;
  80c3e9:	48 b8 c0 e5 41 00 00 	movabs rax,0x41e5c0
  80c3f0:	00 00 00 
  80c3f3:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
  80c3fa:	eb 0a                	jmp    80c406 <execute_request+0xb0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:123
        }else
        {
            //未到时间继续等待
            return 2;
  80c3fc:	b8 02 00 00 00       	mov    eax,0x2
  80c401:	e9 04 02 00 00       	jmp    80c60a <execute_request+0x2b4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:126
        }
    }
    if(head==tail)return 1;//检查是否为空
  80c406:	48 b8 f0 e5 41 00 00 	movabs rax,0x41e5f0
  80c40d:	00 00 00 
  80c410:	8b 10                	mov    edx,DWORD PTR [rax]
  80c412:	48 b8 f4 e5 41 00 00 	movabs rax,0x41e5f4
  80c419:	00 00 00 
  80c41c:	8b 00                	mov    eax,DWORD PTR [rax]
  80c41e:	39 c2                	cmp    edx,eax
  80c420:	75 0a                	jne    80c42c <execute_request+0xd6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:126 (discriminator 1)
  80c422:	b8 01 00 00 00       	mov    eax,0x1
  80c427:	e9 de 01 00 00       	jmp    80c60a <execute_request+0x2b4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:127
    running_req=&disk_reqs[head];
  80c42c:	48 b8 f0 e5 41 00 00 	movabs rax,0x41e5f0
  80c433:	00 00 00 
  80c436:	8b 00                	mov    eax,DWORD PTR [rax]
  80c438:	48 63 d0             	movsxd rdx,eax
  80c43b:	48 89 d0             	mov    rax,rdx
  80c43e:	48 01 c0             	add    rax,rax
  80c441:	48 01 d0             	add    rax,rdx
  80c444:	48 c1 e0 04          	shl    rax,0x4
  80c448:	48 ba c0 b8 41 00 00 	movabs rdx,0x41b8c0
  80c44f:	00 00 00 
  80c452:	48 01 c2             	add    rdx,rax
  80c455:	48 b8 c0 e5 41 00 00 	movabs rax,0x41e5c0
  80c45c:	00 00 00 
  80c45f:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:128
    head=(head+1)%MAX_DISK_REQUEST_COUNT;
  80c462:	48 b8 f0 e5 41 00 00 	movabs rax,0x41e5f0
  80c469:	00 00 00 
  80c46c:	8b 00                	mov    eax,DWORD PTR [rax]
  80c46e:	8d 50 01             	lea    edx,[rax+0x1]
  80c471:	48 63 c2             	movsxd rax,edx
  80c474:	48 69 c0 89 88 88 88 	imul   rax,rax,0xffffffff88888889
  80c47b:	48 c1 e8 20          	shr    rax,0x20
  80c47f:	01 d0                	add    eax,edx
  80c481:	c1 f8 07             	sar    eax,0x7
  80c484:	89 d1                	mov    ecx,edx
  80c486:	c1 f9 1f             	sar    ecx,0x1f
  80c489:	29 c8                	sub    eax,ecx
  80c48b:	69 c8 f0 00 00 00    	imul   ecx,eax,0xf0
  80c491:	89 d0                	mov    eax,edx
  80c493:	29 c8                	sub    eax,ecx
  80c495:	48 ba f0 e5 41 00 00 	movabs rdx,0x41e5f0
  80c49c:	00 00 00 
  80c49f:	89 02                	mov    DWORD PTR [rdx],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:129
    running_req->stat=REQ_STAT_WORKING;
  80c4a1:	48 b8 c0 e5 41 00 00 	movabs rax,0x41e5c0
  80c4a8:	00 00 00 
  80c4ab:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80c4ae:	c7 40 1c 02 00 00 00 	mov    DWORD PTR [rax+0x1c],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:131
    //set_proc_stat(running_req->pid,TASK_SUSPENDED);
    int r=0;
  80c4b5:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:132
    switch (running_req->func)
  80c4bc:	48 b8 c0 e5 41 00 00 	movabs rax,0x41e5c0
  80c4c3:	00 00 00 
  80c4c6:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80c4c9:	8b 00                	mov    eax,DWORD PTR [rax]
  80c4cb:	83 f8 03             	cmp    eax,0x3
  80c4ce:	0f 84 fb 00 00 00    	je     80c5cf <execute_request+0x279>
  80c4d4:	83 f8 03             	cmp    eax,0x3
  80c4d7:	0f 8f 1a 01 00 00    	jg     80c5f7 <execute_request+0x2a1>
  80c4dd:	83 f8 02             	cmp    eax,0x2
  80c4e0:	0f 84 c6 00 00 00    	je     80c5ac <execute_request+0x256>
  80c4e6:	83 f8 02             	cmp    eax,0x2
  80c4e9:	0f 8f 08 01 00 00    	jg     80c5f7 <execute_request+0x2a1>
  80c4ef:	85 c0                	test   eax,eax
  80c4f1:	74 0a                	je     80c4fd <execute_request+0x1a7>
  80c4f3:	83 f8 01             	cmp    eax,0x1
  80c4f6:	74 5e                	je     80c556 <execute_request+0x200>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:150
        break;
    case DISKREQ_RESET:
        r=async_reset_disk(running_req->disk);
        break;
    default:
        break;
  80c4f8:	e9 fa 00 00 00       	jmp    80c5f7 <execute_request+0x2a1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:136
        running_req->lba,running_req->sec_n,running_req->buf);
  80c4fd:	48 b8 c0 e5 41 00 00 	movabs rax,0x41e5c0
  80c504:	00 00 00 
  80c507:	48 8b 00             	mov    rax,QWORD PTR [rax]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:135
        r=async_read_disk(running_req->disk,\
  80c50a:	48 8b 48 10          	mov    rcx,QWORD PTR [rax+0x10]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:136
        running_req->lba,running_req->sec_n,running_req->buf);
  80c50e:	48 b8 c0 e5 41 00 00 	movabs rax,0x41e5c0
  80c515:	00 00 00 
  80c518:	48 8b 00             	mov    rax,QWORD PTR [rax]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:135
        r=async_read_disk(running_req->disk,\
  80c51b:	8b 50 0c             	mov    edx,DWORD PTR [rax+0xc]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:136
        running_req->lba,running_req->sec_n,running_req->buf);
  80c51e:	48 b8 c0 e5 41 00 00 	movabs rax,0x41e5c0
  80c525:	00 00 00 
  80c528:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80c52b:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:135
        r=async_read_disk(running_req->disk,\
  80c52e:	89 c6                	mov    esi,eax
  80c530:	48 b8 c0 e5 41 00 00 	movabs rax,0x41e5c0
  80c537:	00 00 00 
  80c53a:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80c53d:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
  80c540:	89 c7                	mov    edi,eax
  80c542:	48 b8 38 c6 80 00 00 	movabs rax,0x80c638
  80c549:	00 00 00 
  80c54c:	ff d0                	call   rax
  80c54e:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:137
        break;
  80c551:	e9 a2 00 00 00       	jmp    80c5f8 <execute_request+0x2a2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:140
         running_req->lba,running_req->sec_n,running_req->buf);
  80c556:	48 b8 c0 e5 41 00 00 	movabs rax,0x41e5c0
  80c55d:	00 00 00 
  80c560:	48 8b 00             	mov    rax,QWORD PTR [rax]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:139
        r=async_write_disk(running_req->disk,\
  80c563:	48 8b 48 10          	mov    rcx,QWORD PTR [rax+0x10]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:140
         running_req->lba,running_req->sec_n,running_req->buf);
  80c567:	48 b8 c0 e5 41 00 00 	movabs rax,0x41e5c0
  80c56e:	00 00 00 
  80c571:	48 8b 00             	mov    rax,QWORD PTR [rax]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:139
        r=async_write_disk(running_req->disk,\
  80c574:	8b 50 0c             	mov    edx,DWORD PTR [rax+0xc]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:140
         running_req->lba,running_req->sec_n,running_req->buf);
  80c577:	48 b8 c0 e5 41 00 00 	movabs rax,0x41e5c0
  80c57e:	00 00 00 
  80c581:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80c584:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:139
        r=async_write_disk(running_req->disk,\
  80c587:	89 c6                	mov    esi,eax
  80c589:	48 b8 c0 e5 41 00 00 	movabs rax,0x41e5c0
  80c590:	00 00 00 
  80c593:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80c596:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
  80c599:	89 c7                	mov    edi,eax
  80c59b:	48 b8 7a c7 80 00 00 	movabs rax,0x80c77a
  80c5a2:	00 00 00 
  80c5a5:	ff d0                	call   rax
  80c5a7:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:142
        break;
  80c5aa:	eb 4c                	jmp    80c5f8 <execute_request+0x2a2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:144
        r=async_check_disk(running_req->disk);
  80c5ac:	48 b8 c0 e5 41 00 00 	movabs rax,0x41e5c0
  80c5b3:	00 00 00 
  80c5b6:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80c5b9:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
  80c5bc:	89 c7                	mov    edi,eax
  80c5be:	48 b8 fc cd 80 00 00 	movabs rax,0x80cdfc
  80c5c5:	00 00 00 
  80c5c8:	ff d0                	call   rax
  80c5ca:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:145
        break;
  80c5cd:	eb 29                	jmp    80c5f8 <execute_request+0x2a2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:147
        r=async_reset_disk(running_req->disk);
  80c5cf:	48 b8 c0 e5 41 00 00 	movabs rax,0x41e5c0
  80c5d6:	00 00 00 
  80c5d9:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80c5dc:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
  80c5df:	89 c7                	mov    edi,eax
  80c5e1:	b8 00 00 00 00       	mov    eax,0x0
  80c5e6:	48 ba 0c c6 80 00 00 	movabs rdx,0x80c60c
  80c5ed:	00 00 00 
  80c5f0:	ff d2                	call   rdx
  80c5f2:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:148
        break;
  80c5f5:	eb 01                	jmp    80c5f8 <execute_request+0x2a2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:150
        break;
  80c5f7:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:152
    }
    if(r==-1)return -1;
  80c5f8:	83 7d fc ff          	cmp    DWORD PTR [rbp-0x4],0xffffffff
  80c5fc:	75 07                	jne    80c605 <execute_request+0x2af>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:152 (discriminator 1)
  80c5fe:	b8 ff ff ff ff       	mov    eax,0xffffffff
  80c603:	eb 05                	jmp    80c60a <execute_request+0x2b4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:153
    return 0;
  80c605:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:154
}
  80c60a:	c9                   	leave  
  80c60b:	c3                   	ret    

000000000080c60c <async_reset_disk>:
async_reset_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:156
int async_reset_disk(int disk)
{
  80c60c:	f3 0f 1e fa          	endbr64 
  80c610:	55                   	push   rbp
  80c611:	48 89 e5             	mov    rbp,rsp
  80c614:	48 83 ec 10          	sub    rsp,0x10
  80c618:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:157
    outb(PORT_DISK_CONTROL,DISK_CMD_RESET);
  80c61b:	be 0c 00 00 00       	mov    esi,0xc
  80c620:	bf f6 03 00 00       	mov    edi,0x3f6
  80c625:	48 b8 d0 86 80 00 00 	movabs rax,0x8086d0
  80c62c:	00 00 00 
  80c62f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:158
    return 0;
  80c631:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:159
}
  80c636:	c9                   	leave  
  80c637:	c3                   	ret    

000000000080c638 <async_read_disk>:
async_read_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:161
int async_read_disk(int disk,unsigned int lba,int sec_n,char* mem_addr)
{
  80c638:	f3 0f 1e fa          	endbr64 
  80c63c:	55                   	push   rbp
  80c63d:	48 89 e5             	mov    rbp,rsp
  80c640:	48 83 ec 30          	sub    rsp,0x30
  80c644:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
  80c647:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
  80c64a:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
  80c64d:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:162
    unsigned short port=PORT_DISK_MAJOR;
  80c651:	66 c7 45 fe f0 01    	mov    WORD PTR [rbp-0x2],0x1f0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:163
    int slave_disk=0;
  80c657:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:164
    if(disk==DISK_SLAVE_MAJOR||disk==DISK_SLAVE_SLAVE)
  80c65e:	83 7d ec 02          	cmp    DWORD PTR [rbp-0x14],0x2
  80c662:	74 06                	je     80c66a <async_read_disk+0x32>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:164 (discriminator 1)
  80c664:	83 7d ec 03          	cmp    DWORD PTR [rbp-0x14],0x3
  80c668:	75 06                	jne    80c670 <async_read_disk+0x38>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:165
        port=PORT_DISK_SLAVE;
  80c66a:	66 c7 45 fe 70 01    	mov    WORD PTR [rbp-0x2],0x170
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:166
    if(disk==DISK_SLAVE_SLAVE||disk==DISK_MAJOR_SLAVE)
  80c670:	83 7d ec 03          	cmp    DWORD PTR [rbp-0x14],0x3
  80c674:	74 06                	je     80c67c <async_read_disk+0x44>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:166 (discriminator 1)
  80c676:	83 7d ec 01          	cmp    DWORD PTR [rbp-0x14],0x1
  80c67a:	75 07                	jne    80c683 <async_read_disk+0x4b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:167
        slave_disk=1;
  80c67c:	c7 45 f8 01 00 00 00 	mov    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:168
    outb(port+2,sec_n);
  80c683:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  80c686:	0f b6 d0             	movzx  edx,al
  80c689:	0f b7 45 fe          	movzx  eax,WORD PTR [rbp-0x2]
  80c68d:	83 c0 02             	add    eax,0x2
  80c690:	0f b7 c0             	movzx  eax,ax
  80c693:	89 d6                	mov    esi,edx
  80c695:	89 c7                	mov    edi,eax
  80c697:	48 b8 d0 86 80 00 00 	movabs rax,0x8086d0
  80c69e:	00 00 00 
  80c6a1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:169
    outb(port+3,lba&0xff);
  80c6a3:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
  80c6a6:	0f b6 d0             	movzx  edx,al
  80c6a9:	0f b7 45 fe          	movzx  eax,WORD PTR [rbp-0x2]
  80c6ad:	83 c0 03             	add    eax,0x3
  80c6b0:	0f b7 c0             	movzx  eax,ax
  80c6b3:	89 d6                	mov    esi,edx
  80c6b5:	89 c7                	mov    edi,eax
  80c6b7:	48 b8 d0 86 80 00 00 	movabs rax,0x8086d0
  80c6be:	00 00 00 
  80c6c1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:170
    outb(port+4,(lba>>8)&0xff);
  80c6c3:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
  80c6c6:	c1 e8 08             	shr    eax,0x8
  80c6c9:	0f b6 d0             	movzx  edx,al
  80c6cc:	0f b7 45 fe          	movzx  eax,WORD PTR [rbp-0x2]
  80c6d0:	83 c0 04             	add    eax,0x4
  80c6d3:	0f b7 c0             	movzx  eax,ax
  80c6d6:	89 d6                	mov    esi,edx
  80c6d8:	89 c7                	mov    edi,eax
  80c6da:	48 b8 d0 86 80 00 00 	movabs rax,0x8086d0
  80c6e1:	00 00 00 
  80c6e4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:171
    outb(port+5,(lba>>16)&0xff);
  80c6e6:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
  80c6e9:	c1 e8 10             	shr    eax,0x10
  80c6ec:	0f b6 d0             	movzx  edx,al
  80c6ef:	0f b7 45 fe          	movzx  eax,WORD PTR [rbp-0x2]
  80c6f3:	83 c0 05             	add    eax,0x5
  80c6f6:	0f b7 c0             	movzx  eax,ax
  80c6f9:	89 d6                	mov    esi,edx
  80c6fb:	89 c7                	mov    edi,eax
  80c6fd:	48 b8 d0 86 80 00 00 	movabs rax,0x8086d0
  80c704:	00 00 00 
  80c707:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:172
    char drv=slave_disk?0x10:0;
  80c709:	83 7d f8 00          	cmp    DWORD PTR [rbp-0x8],0x0
  80c70d:	74 07                	je     80c716 <async_read_disk+0xde>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:172 (discriminator 1)
  80c70f:	b8 10 00 00 00       	mov    eax,0x10
  80c714:	eb 05                	jmp    80c71b <async_read_disk+0xe3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:172 (discriminator 2)
  80c716:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:172 (discriminator 4)
  80c71b:	88 45 f7             	mov    BYTE PTR [rbp-0x9],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:173 (discriminator 4)
    char lba_hi=(lba>>24)&0xf|drv|0xe0;
  80c71e:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
  80c721:	c1 e8 18             	shr    eax,0x18
  80c724:	83 e0 0f             	and    eax,0xf
  80c727:	89 c2                	mov    edx,eax
  80c729:	0f b6 45 f7          	movzx  eax,BYTE PTR [rbp-0x9]
  80c72d:	09 d0                	or     eax,edx
  80c72f:	83 c8 e0             	or     eax,0xffffffe0
  80c732:	88 45 f6             	mov    BYTE PTR [rbp-0xa],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:174 (discriminator 4)
    outb(port+6,lba_hi);
  80c735:	0f b6 45 f6          	movzx  eax,BYTE PTR [rbp-0xa]
  80c739:	0f b6 d0             	movzx  edx,al
  80c73c:	0f b7 45 fe          	movzx  eax,WORD PTR [rbp-0x2]
  80c740:	83 c0 06             	add    eax,0x6
  80c743:	0f b7 c0             	movzx  eax,ax
  80c746:	89 d6                	mov    esi,edx
  80c748:	89 c7                	mov    edi,eax
  80c74a:	48 b8 d0 86 80 00 00 	movabs rax,0x8086d0
  80c751:	00 00 00 
  80c754:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:175 (discriminator 4)
    outb(port+7,DISK_CMD_READ);
  80c756:	0f b7 45 fe          	movzx  eax,WORD PTR [rbp-0x2]
  80c75a:	83 c0 07             	add    eax,0x7
  80c75d:	0f b7 c0             	movzx  eax,ax
  80c760:	be 20 00 00 00       	mov    esi,0x20
  80c765:	89 c7                	mov    edi,eax
  80c767:	48 b8 d0 86 80 00 00 	movabs rax,0x8086d0
  80c76e:	00 00 00 
  80c771:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:195 (discriminator 4)
    // }
    // for(int i=0;i<running_req->sec_n*256;i++)
    // {
    //     *mem_addr++=inw(port);
    // }
    return 0;
  80c773:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:196 (discriminator 4)
}
  80c778:	c9                   	leave  
  80c779:	c3                   	ret    

000000000080c77a <async_write_disk>:
async_write_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:198
int async_write_disk(int disk,unsigned int lba, int sec_n, char* mem_ptr)
{
  80c77a:	f3 0f 1e fa          	endbr64 
  80c77e:	55                   	push   rbp
  80c77f:	48 89 e5             	mov    rbp,rsp
  80c782:	48 83 ec 30          	sub    rsp,0x30
  80c786:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
  80c789:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
  80c78c:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
  80c78f:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:199
    unsigned short port=PORT_DISK_MAJOR;
  80c793:	66 c7 45 fe f0 01    	mov    WORD PTR [rbp-0x2],0x1f0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:200
    int slave_disk=0;
  80c799:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:201
    if(disk==DISK_SLAVE_MAJOR||disk==DISK_SLAVE_SLAVE)
  80c7a0:	83 7d ec 02          	cmp    DWORD PTR [rbp-0x14],0x2
  80c7a4:	74 06                	je     80c7ac <async_write_disk+0x32>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:201 (discriminator 1)
  80c7a6:	83 7d ec 03          	cmp    DWORD PTR [rbp-0x14],0x3
  80c7aa:	75 06                	jne    80c7b2 <async_write_disk+0x38>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:202
        port=PORT_DISK_SLAVE;
  80c7ac:	66 c7 45 fe 70 01    	mov    WORD PTR [rbp-0x2],0x170
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:203
    if(disk==DISK_SLAVE_SLAVE||disk==DISK_MAJOR_SLAVE)
  80c7b2:	83 7d ec 03          	cmp    DWORD PTR [rbp-0x14],0x3
  80c7b6:	74 06                	je     80c7be <async_write_disk+0x44>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:203 (discriminator 1)
  80c7b8:	83 7d ec 01          	cmp    DWORD PTR [rbp-0x14],0x1
  80c7bc:	75 07                	jne    80c7c5 <async_write_disk+0x4b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:204
        slave_disk=1;
  80c7be:	c7 45 f8 01 00 00 00 	mov    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:207
    while (1)
    {
        byte t=inb(0x1f7);
  80c7c5:	bf f7 00 00 00       	mov    edi,0xf7
  80c7ca:	48 b8 e9 86 80 00 00 	movabs rax,0x8086e9
  80c7d1:	00 00 00 
  80c7d4:	ff d0                	call   rax
  80c7d6:	88 45 f7             	mov    BYTE PTR [rbp-0x9],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:209
        //logf("istat:%x",t);
        byte err=t&1;
  80c7d9:	0f b6 45 f7          	movzx  eax,BYTE PTR [rbp-0x9]
  80c7dd:	83 e0 01             	and    eax,0x1
  80c7e0:	88 45 f6             	mov    BYTE PTR [rbp-0xa],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:210
        if(err!=0)
  80c7e3:	80 7d f6 00          	cmp    BYTE PTR [rbp-0xa],0x0
  80c7e7:	74 0a                	je     80c7f3 <async_write_disk+0x79>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:213
        {
            //printf("ERR iwriting disk\n");
            return -1;
  80c7e9:	b8 ff ff ff ff       	mov    eax,0xffffffff
  80c7ee:	e9 ff 00 00 00       	jmp    80c8f2 <async_write_disk+0x178>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:215
        }
        t&=0x88;
  80c7f3:	80 65 f7 88          	and    BYTE PTR [rbp-0x9],0x88
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:216
        if(t==0x8)break;
  80c7f7:	80 7d f7 08          	cmp    BYTE PTR [rbp-0x9],0x8
  80c7fb:	74 02                	je     80c7ff <async_write_disk+0x85>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:206
    {
  80c7fd:	eb c6                	jmp    80c7c5 <async_write_disk+0x4b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:216
        if(t==0x8)break;
  80c7ff:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:218
    }
    outb(port+2,sec_n);
  80c800:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  80c803:	0f b6 d0             	movzx  edx,al
  80c806:	0f b7 45 fe          	movzx  eax,WORD PTR [rbp-0x2]
  80c80a:	83 c0 02             	add    eax,0x2
  80c80d:	0f b7 c0             	movzx  eax,ax
  80c810:	89 d6                	mov    esi,edx
  80c812:	89 c7                	mov    edi,eax
  80c814:	48 b8 d0 86 80 00 00 	movabs rax,0x8086d0
  80c81b:	00 00 00 
  80c81e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:219
    outb(port+3,lba&0xff);
  80c820:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
  80c823:	0f b6 d0             	movzx  edx,al
  80c826:	0f b7 45 fe          	movzx  eax,WORD PTR [rbp-0x2]
  80c82a:	83 c0 03             	add    eax,0x3
  80c82d:	0f b7 c0             	movzx  eax,ax
  80c830:	89 d6                	mov    esi,edx
  80c832:	89 c7                	mov    edi,eax
  80c834:	48 b8 d0 86 80 00 00 	movabs rax,0x8086d0
  80c83b:	00 00 00 
  80c83e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:220
    outb(port+4,(lba>>8)&0xff);
  80c840:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
  80c843:	c1 e8 08             	shr    eax,0x8
  80c846:	0f b6 d0             	movzx  edx,al
  80c849:	0f b7 45 fe          	movzx  eax,WORD PTR [rbp-0x2]
  80c84d:	83 c0 04             	add    eax,0x4
  80c850:	0f b7 c0             	movzx  eax,ax
  80c853:	89 d6                	mov    esi,edx
  80c855:	89 c7                	mov    edi,eax
  80c857:	48 b8 d0 86 80 00 00 	movabs rax,0x8086d0
  80c85e:	00 00 00 
  80c861:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:221
    outb(port+5,(lba>>16)&0xff);
  80c863:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
  80c866:	c1 e8 10             	shr    eax,0x10
  80c869:	0f b6 d0             	movzx  edx,al
  80c86c:	0f b7 45 fe          	movzx  eax,WORD PTR [rbp-0x2]
  80c870:	83 c0 05             	add    eax,0x5
  80c873:	0f b7 c0             	movzx  eax,ax
  80c876:	89 d6                	mov    esi,edx
  80c878:	89 c7                	mov    edi,eax
  80c87a:	48 b8 d0 86 80 00 00 	movabs rax,0x8086d0
  80c881:	00 00 00 
  80c884:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:222
    char drv=slave_disk?0x10:0;
  80c886:	83 7d f8 00          	cmp    DWORD PTR [rbp-0x8],0x0
  80c88a:	74 07                	je     80c893 <async_write_disk+0x119>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:222 (discriminator 1)
  80c88c:	b8 10 00 00 00       	mov    eax,0x10
  80c891:	eb 05                	jmp    80c898 <async_write_disk+0x11e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:222 (discriminator 2)
  80c893:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:222 (discriminator 4)
  80c898:	88 45 f5             	mov    BYTE PTR [rbp-0xb],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:223 (discriminator 4)
    unsigned char lba_hi=(lba>>24)&0xf|drv|0xe0;
  80c89b:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
  80c89e:	c1 e8 18             	shr    eax,0x18
  80c8a1:	83 e0 0f             	and    eax,0xf
  80c8a4:	89 c2                	mov    edx,eax
  80c8a6:	0f b6 45 f5          	movzx  eax,BYTE PTR [rbp-0xb]
  80c8aa:	09 d0                	or     eax,edx
  80c8ac:	83 c8 e0             	or     eax,0xffffffe0
  80c8af:	88 45 f4             	mov    BYTE PTR [rbp-0xc],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:224 (discriminator 4)
    outb(port+6,lba_hi);
  80c8b2:	0f b6 55 f4          	movzx  edx,BYTE PTR [rbp-0xc]
  80c8b6:	0f b7 45 fe          	movzx  eax,WORD PTR [rbp-0x2]
  80c8ba:	83 c0 06             	add    eax,0x6
  80c8bd:	0f b7 c0             	movzx  eax,ax
  80c8c0:	89 d6                	mov    esi,edx
  80c8c2:	89 c7                	mov    edi,eax
  80c8c4:	48 b8 d0 86 80 00 00 	movabs rax,0x8086d0
  80c8cb:	00 00 00 
  80c8ce:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:225 (discriminator 4)
    outb(port+7,DISK_CMD_WRITE);
  80c8d0:	0f b7 45 fe          	movzx  eax,WORD PTR [rbp-0x2]
  80c8d4:	83 c0 07             	add    eax,0x7
  80c8d7:	0f b7 c0             	movzx  eax,ax
  80c8da:	be 30 00 00 00       	mov    esi,0x30
  80c8df:	89 c7                	mov    edi,eax
  80c8e1:	48 b8 d0 86 80 00 00 	movabs rax,0x8086d0
  80c8e8:	00 00 00 
  80c8eb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:242 (discriminator 4)
    //     if(t==0x8)break;
    // }
    // short *p=mem_ptr;
    // for(int i=0;i<running_req->sec_n*256;i++)
    //         outw(port,*p++);
    return 0;
  80c8ed:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:243
}
  80c8f2:	c9                   	leave  
  80c8f3:	c3                   	ret    

000000000080c8f4 <read_disk>:
read_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:245
int read_disk(driver_args* args)
{
  80c8f4:	f3 0f 1e fa          	endbr64 
  80c8f8:	55                   	push   rbp
  80c8f9:	48 89 e5             	mov    rbp,rsp
  80c8fc:	48 83 ec 20          	sub    rsp,0x20
  80c900:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:246
    int ret=read_disk_asm(args->lba,args->sec_c,args->dist_addr);
  80c904:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80c908:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
  80c90b:	48 98                	cdqe   
  80c90d:	48 89 c2             	mov    rdx,rax
  80c910:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80c914:	8b 48 18             	mov    ecx,DWORD PTR [rax+0x18]
  80c917:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80c91b:	8b 00                	mov    eax,DWORD PTR [rax]
  80c91d:	89 ce                	mov    esi,ecx
  80c91f:	89 c7                	mov    edi,eax
  80c921:	48 b8 3c d0 80 00 00 	movabs rax,0x80d03c
  80c928:	00 00 00 
  80c92b:	ff d0                	call   rax
  80c92d:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:248
    
    running_req->stat=REQ_STAT_DONE;
  80c930:	48 b8 c0 e5 41 00 00 	movabs rax,0x41e5c0
  80c937:	00 00 00 
  80c93a:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80c93d:	c7 40 1c 03 00 00 00 	mov    DWORD PTR [rax+0x1c],0x3
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:249
    running_req->args->stat=REQ_STAT_EMPTY;
  80c944:	48 b8 c0 e5 41 00 00 	movabs rax,0x41e5c0
  80c94b:	00 00 00 
  80c94e:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80c951:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
  80c955:	c7 80 ac 00 00 00 00 	mov    DWORD PTR [rax+0xac],0x0
  80c95c:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:251
    //set_proc_stat(running_req->pid,TASK_READY);
    running_req=NULL;
  80c95f:	48 b8 c0 e5 41 00 00 	movabs rax,0x41e5c0
  80c966:	00 00 00 
  80c969:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:252
    return ret;
  80c970:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:253
}
  80c973:	c9                   	leave  
  80c974:	c3                   	ret    

000000000080c975 <write_disk>:
write_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:255
int write_disk(driver_args* args)
{
  80c975:	f3 0f 1e fa          	endbr64 
  80c979:	55                   	push   rbp
  80c97a:	48 89 e5             	mov    rbp,rsp
  80c97d:	48 83 ec 20          	sub    rsp,0x20
  80c981:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:256
    int ret=write_disk_asm(args->lba,args->sec_c,args->src_addr);
  80c985:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80c989:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
  80c98c:	48 98                	cdqe   
  80c98e:	48 89 c2             	mov    rdx,rax
  80c991:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80c995:	8b 48 18             	mov    ecx,DWORD PTR [rax+0x18]
  80c998:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80c99c:	8b 00                	mov    eax,DWORD PTR [rax]
  80c99e:	89 ce                	mov    esi,ecx
  80c9a0:	89 c7                	mov    edi,eax
  80c9a2:	48 b8 bc d0 80 00 00 	movabs rax,0x80d0bc
  80c9a9:	00 00 00 
  80c9ac:	ff d0                	call   rax
  80c9ae:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:258
    
    running_req->stat=REQ_STAT_DONE;
  80c9b1:	48 b8 c0 e5 41 00 00 	movabs rax,0x41e5c0
  80c9b8:	00 00 00 
  80c9bb:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80c9be:	c7 40 1c 03 00 00 00 	mov    DWORD PTR [rax+0x1c],0x3
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:259
    running_req->args->stat=REQ_STAT_EMPTY;
  80c9c5:	48 b8 c0 e5 41 00 00 	movabs rax,0x41e5c0
  80c9cc:	00 00 00 
  80c9cf:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80c9d2:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
  80c9d6:	c7 80 ac 00 00 00 00 	mov    DWORD PTR [rax+0xac],0x0
  80c9dd:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:261
    //set_proc_stat(running_req->pid,TASK_READY);
    running_req=NULL;
  80c9e0:	48 b8 c0 e5 41 00 00 	movabs rax,0x41e5c0
  80c9e7:	00 00 00 
  80c9ea:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:262
    return ret;
  80c9f1:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:263
}
  80c9f4:	c9                   	leave  
  80c9f5:	c3                   	ret    

000000000080c9f6 <chk_result>:
chk_result():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:265
int chk_result(int r)
{
  80c9f6:	f3 0f 1e fa          	endbr64 
  80c9fa:	55                   	push   rbp
  80c9fb:	48 89 e5             	mov    rbp,rsp
  80c9fe:	48 83 ec 10          	sub    rsp,0x10
  80ca02:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:266
    while(disk_reqs[r].stat!=REQ_STAT_DONE);
  80ca05:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:266 (discriminator 1)
  80ca06:	48 b9 c0 b8 41 00 00 	movabs rcx,0x41b8c0
  80ca0d:	00 00 00 
  80ca10:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80ca13:	48 63 d0             	movsxd rdx,eax
  80ca16:	48 89 d0             	mov    rax,rdx
  80ca19:	48 01 c0             	add    rax,rax
  80ca1c:	48 01 d0             	add    rax,rdx
  80ca1f:	48 c1 e0 04          	shl    rax,0x4
  80ca23:	48 01 c8             	add    rax,rcx
  80ca26:	48 83 c0 1c          	add    rax,0x1c
  80ca2a:	8b 00                	mov    eax,DWORD PTR [rax]
  80ca2c:	83 f8 03             	cmp    eax,0x3
  80ca2f:	75 d5                	jne    80ca06 <chk_result+0x10>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:267
    if(disk_reqs[r].result==DISK_CHK_OK)
  80ca31:	48 b9 c0 b8 41 00 00 	movabs rcx,0x41b8c0
  80ca38:	00 00 00 
  80ca3b:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80ca3e:	48 63 d0             	movsxd rdx,eax
  80ca41:	48 89 d0             	mov    rax,rdx
  80ca44:	48 01 c0             	add    rax,rax
  80ca47:	48 01 d0             	add    rax,rdx
  80ca4a:	48 c1 e0 04          	shl    rax,0x4
  80ca4e:	48 01 c8             	add    rax,rcx
  80ca51:	48 83 c0 20          	add    rax,0x20
  80ca55:	8b 00                	mov    eax,DWORD PTR [rax]
  80ca57:	83 f8 01             	cmp    eax,0x1
  80ca5a:	75 07                	jne    80ca63 <chk_result+0x6d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:268
        return 1;
  80ca5c:	b8 01 00 00 00       	mov    eax,0x1
  80ca61:	eb 23                	jmp    80ca86 <chk_result+0x90>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:269
    comprintf("disk err\n");
  80ca63:	48 b8 a8 8f 81 00 00 	movabs rax,0x818fa8
  80ca6a:	00 00 00 
  80ca6d:	48 89 c7             	mov    rdi,rax
  80ca70:	b8 00 00 00 00       	mov    eax,0x0
  80ca75:	48 ba ae ff 80 00 00 	movabs rdx,0x80ffae
  80ca7c:	00 00 00 
  80ca7f:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:270
    return 0;
  80ca81:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:271
}
  80ca86:	c9                   	leave  
  80ca87:	c3                   	ret    

000000000080ca88 <disk_existent>:
disk_existent():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:273
int disk_existent(int disk)
{
  80ca88:	f3 0f 1e fa          	endbr64 
  80ca8c:	55                   	push   rbp
  80ca8d:	48 89 e5             	mov    rbp,rsp
  80ca90:	48 83 ec 10          	sub    rsp,0x10
  80ca94:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:274
    switch (disk)
  80ca97:	83 7d fc 03          	cmp    DWORD PTR [rbp-0x4],0x3
  80ca9b:	0f 84 97 00 00 00    	je     80cb38 <disk_existent+0xb0>
  80caa1:	83 7d fc 03          	cmp    DWORD PTR [rbp-0x4],0x3
  80caa5:	0f 8f b1 00 00 00    	jg     80cb5c <disk_existent+0xd4>
  80caab:	83 7d fc 02          	cmp    DWORD PTR [rbp-0x4],0x2
  80caaf:	74 63                	je     80cb14 <disk_existent+0x8c>
  80cab1:	83 7d fc 02          	cmp    DWORD PTR [rbp-0x4],0x2
  80cab5:	0f 8f a1 00 00 00    	jg     80cb5c <disk_existent+0xd4>
  80cabb:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
  80cabf:	74 0b                	je     80cacc <disk_existent+0x44>
  80cac1:	83 7d fc 01          	cmp    DWORD PTR [rbp-0x4],0x1
  80cac5:	74 29                	je     80caf0 <disk_existent+0x68>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:292
        
    case DISK_SLAVE_SLAVE:
        return sys_find_dev("hd3")!=-1;
        break;
    default:
        break;
  80cac7:	e9 90 00 00 00       	jmp    80cb5c <disk_existent+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:277
        return sys_find_dev("hd0")!=-1;
  80cacc:	48 b8 b2 8f 81 00 00 	movabs rax,0x818fb2
  80cad3:	00 00 00 
  80cad6:	48 89 c7             	mov    rdi,rax
  80cad9:	48 b8 d1 45 80 00 00 	movabs rax,0x8045d1
  80cae0:	00 00 00 
  80cae3:	ff d0                	call   rax
  80cae5:	83 f8 ff             	cmp    eax,0xffffffff
  80cae8:	0f 95 c0             	setne  al
  80caeb:	0f b6 c0             	movzx  eax,al
  80caee:	eb 72                	jmp    80cb62 <disk_existent+0xda>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:281
        return sys_find_dev("hd1")!=-1;
  80caf0:	48 b8 b6 8f 81 00 00 	movabs rax,0x818fb6
  80caf7:	00 00 00 
  80cafa:	48 89 c7             	mov    rdi,rax
  80cafd:	48 b8 d1 45 80 00 00 	movabs rax,0x8045d1
  80cb04:	00 00 00 
  80cb07:	ff d0                	call   rax
  80cb09:	83 f8 ff             	cmp    eax,0xffffffff
  80cb0c:	0f 95 c0             	setne  al
  80cb0f:	0f b6 c0             	movzx  eax,al
  80cb12:	eb 4e                	jmp    80cb62 <disk_existent+0xda>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:285
        return sys_find_dev("hd2")!=-1;
  80cb14:	48 b8 ba 8f 81 00 00 	movabs rax,0x818fba
  80cb1b:	00 00 00 
  80cb1e:	48 89 c7             	mov    rdi,rax
  80cb21:	48 b8 d1 45 80 00 00 	movabs rax,0x8045d1
  80cb28:	00 00 00 
  80cb2b:	ff d0                	call   rax
  80cb2d:	83 f8 ff             	cmp    eax,0xffffffff
  80cb30:	0f 95 c0             	setne  al
  80cb33:	0f b6 c0             	movzx  eax,al
  80cb36:	eb 2a                	jmp    80cb62 <disk_existent+0xda>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:289
        return sys_find_dev("hd3")!=-1;
  80cb38:	48 b8 be 8f 81 00 00 	movabs rax,0x818fbe
  80cb3f:	00 00 00 
  80cb42:	48 89 c7             	mov    rdi,rax
  80cb45:	48 b8 d1 45 80 00 00 	movabs rax,0x8045d1
  80cb4c:	00 00 00 
  80cb4f:	ff d0                	call   rax
  80cb51:	83 f8 ff             	cmp    eax,0xffffffff
  80cb54:	0f 95 c0             	setne  al
  80cb57:	0f b6 c0             	movzx  eax,al
  80cb5a:	eb 06                	jmp    80cb62 <disk_existent+0xda>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:292
        break;
  80cb5c:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:294
    }
    return 0;
  80cb5d:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:295
}
  80cb62:	c9                   	leave  
  80cb63:	c3                   	ret    

000000000080cb64 <hd_iterate>:
hd_iterate():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:297
int hd_iterate()
{
  80cb64:	f3 0f 1e fa          	endbr64 
  80cb68:	55                   	push   rbp
  80cb69:	48 89 e5             	mov    rbp,rsp
  80cb6c:	48 81 ec e0 00 00 00 	sub    rsp,0xe0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:301
    char *name;
    
    int r[4];
    r[0]=request(DISK_MAJOR_MAJOR,DISKREQ_CHECK,0,1,0);
  80cb73:	41 b8 00 00 00 00    	mov    r8d,0x0
  80cb79:	b9 01 00 00 00       	mov    ecx,0x1
  80cb7e:	ba 00 00 00 00       	mov    edx,0x0
  80cb83:	be 02 00 00 00       	mov    esi,0x2
  80cb88:	bf 00 00 00 00       	mov    edi,0x0
  80cb8d:	48 b8 72 c1 80 00 00 	movabs rax,0x80c172
  80cb94:	00 00 00 
  80cb97:	ff d0                	call   rax
  80cb99:	89 45 d0             	mov    DWORD PTR [rbp-0x30],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:302
    r[1]=request(DISK_MAJOR_SLAVE,DISKREQ_CHECK,0,1,0);
  80cb9c:	41 b8 00 00 00 00    	mov    r8d,0x0
  80cba2:	b9 01 00 00 00       	mov    ecx,0x1
  80cba7:	ba 00 00 00 00       	mov    edx,0x0
  80cbac:	be 02 00 00 00       	mov    esi,0x2
  80cbb1:	bf 01 00 00 00       	mov    edi,0x1
  80cbb6:	48 b8 72 c1 80 00 00 	movabs rax,0x80c172
  80cbbd:	00 00 00 
  80cbc0:	ff d0                	call   rax
  80cbc2:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:303
    r[2]=request(DISK_SLAVE_MAJOR,DISKREQ_CHECK,0,1,0);
  80cbc5:	41 b8 00 00 00 00    	mov    r8d,0x0
  80cbcb:	b9 01 00 00 00       	mov    ecx,0x1
  80cbd0:	ba 00 00 00 00       	mov    edx,0x0
  80cbd5:	be 02 00 00 00       	mov    esi,0x2
  80cbda:	bf 02 00 00 00       	mov    edi,0x2
  80cbdf:	48 b8 72 c1 80 00 00 	movabs rax,0x80c172
  80cbe6:	00 00 00 
  80cbe9:	ff d0                	call   rax
  80cbeb:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:304
    r[3]=request(DISK_SLAVE_SLAVE,DISKREQ_CHECK,0,1,0);
  80cbee:	41 b8 00 00 00 00    	mov    r8d,0x0
  80cbf4:	b9 01 00 00 00       	mov    ecx,0x1
  80cbf9:	ba 00 00 00 00       	mov    edx,0x0
  80cbfe:	be 02 00 00 00       	mov    esi,0x2
  80cc03:	bf 03 00 00 00       	mov    edi,0x3
  80cc08:	48 b8 72 c1 80 00 00 	movabs rax,0x80c172
  80cc0f:	00 00 00 
  80cc12:	ff d0                	call   rax
  80cc14:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:305
    for(int i=0;i<1;i++)
  80cc17:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
  80cc1e:	e9 cd 01 00 00       	jmp    80cdf0 <hd_iterate+0x28c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:308
    {
        int disk;
        switch (i)
  80cc23:	83 7d f4 03          	cmp    DWORD PTR [rbp-0xc],0x3
  80cc27:	74 3b                	je     80cc64 <hd_iterate+0x100>
  80cc29:	83 7d f4 03          	cmp    DWORD PTR [rbp-0xc],0x3
  80cc2d:	7f 3e                	jg     80cc6d <hd_iterate+0x109>
  80cc2f:	83 7d f4 02          	cmp    DWORD PTR [rbp-0xc],0x2
  80cc33:	74 26                	je     80cc5b <hd_iterate+0xf7>
  80cc35:	83 7d f4 02          	cmp    DWORD PTR [rbp-0xc],0x2
  80cc39:	7f 32                	jg     80cc6d <hd_iterate+0x109>
  80cc3b:	83 7d f4 00          	cmp    DWORD PTR [rbp-0xc],0x0
  80cc3f:	74 08                	je     80cc49 <hd_iterate+0xe5>
  80cc41:	83 7d f4 01          	cmp    DWORD PTR [rbp-0xc],0x1
  80cc45:	74 0b                	je     80cc52 <hd_iterate+0xee>
  80cc47:	eb 24                	jmp    80cc6d <hd_iterate+0x109>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:310
        {
        case 0:disk=DISK_MAJOR_MAJOR;break;
  80cc49:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [rbp-0x10],0x0
  80cc50:	eb 25                	jmp    80cc77 <hd_iterate+0x113>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:311
        case 1:disk=DISK_MAJOR_SLAVE;break;
  80cc52:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [rbp-0x10],0x1
  80cc59:	eb 1c                	jmp    80cc77 <hd_iterate+0x113>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:312
        case 2:disk=DISK_SLAVE_MAJOR;break;
  80cc5b:	c7 45 f0 02 00 00 00 	mov    DWORD PTR [rbp-0x10],0x2
  80cc62:	eb 13                	jmp    80cc77 <hd_iterate+0x113>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:313
        case 3:disk=DISK_SLAVE_SLAVE;break;
  80cc64:	c7 45 f0 03 00 00 00 	mov    DWORD PTR [rbp-0x10],0x3
  80cc6b:	eb 0a                	jmp    80cc77 <hd_iterate+0x113>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:315
        default:
            return -1;
  80cc6d:	b8 ff ff ff ff       	mov    eax,0xffffffff
  80cc72:	e9 83 01 00 00       	jmp    80cdfa <hd_iterate+0x296>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:318
            break;
        }
        if(chk_result(r[i]))//&&!disk_existent(disk)
  80cc77:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  80cc7a:	48 98                	cdqe   
  80cc7c:	8b 44 85 d0          	mov    eax,DWORD PTR [rbp+rax*4-0x30]
  80cc80:	89 c7                	mov    edi,eax
  80cc82:	48 b8 f6 c9 80 00 00 	movabs rax,0x80c9f6
  80cc89:	00 00 00 
  80cc8c:	ff d0                	call   rax
  80cc8e:	85 c0                	test   eax,eax
  80cc90:	0f 84 9d 00 00 00    	je     80cd33 <hd_iterate+0x1cf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:320
        {
            printf("disk %d checked.\n",i);
  80cc96:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  80cc99:	89 c6                	mov    esi,eax
  80cc9b:	48 b8 c2 8f 81 00 00 	movabs rax,0x818fc2
  80cca2:	00 00 00 
  80cca5:	48 89 c7             	mov    rdi,rax
  80cca8:	b8 00 00 00 00       	mov    eax,0x0
  80ccad:	48 ba 97 11 80 00 00 	movabs rdx,0x801197
  80ccb4:	00 00 00 
  80ccb7:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:322
            //新硬盘
            device hd={
  80ccb9:	48 8d 95 20 ff ff ff 	lea    rdx,[rbp-0xe0]
  80ccc0:	b8 00 00 00 00       	mov    eax,0x0
  80ccc5:	b9 15 00 00 00       	mov    ecx,0x15
  80ccca:	48 89 d7             	mov    rdi,rdx
  80cccd:	f3 48 ab             	rep stos QWORD PTR es:[rdi],rax
  80ccd0:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  80ccd3:	89 85 24 ff ff ff    	mov    DWORD PTR [rbp-0xdc],eax
  80ccd9:	c7 85 28 ff ff ff 01 	mov    DWORD PTR [rbp-0xd8],0x1
  80cce0:	00 00 00 
  80cce3:	c7 85 2c ff ff ff 01 	mov    DWORD PTR [rbp-0xd4],0x1
  80ccea:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:326
                .type=DEV_TYPE_BLKDEV,
                .stype=DEV_STYPE_HD,
                .slave_dev=disk,
                .start_port=i<2?PORT_DISK_MAJOR:PORT_DISK_SLAVE
  80cced:	83 7d f4 01          	cmp    DWORD PTR [rbp-0xc],0x1
  80ccf1:	7f 07                	jg     80ccfa <hd_iterate+0x196>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:326 (discriminator 1)
  80ccf3:	b8 f0 01 00 00       	mov    eax,0x1f0
  80ccf8:	eb 05                	jmp    80ccff <hd_iterate+0x19b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:326 (discriminator 2)
  80ccfa:	b8 70 01 00 00       	mov    eax,0x170
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:322
            device hd={
  80ccff:	89 85 58 ff ff ff    	mov    DWORD PTR [rbp-0xa8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:328
            };
            disks[i]=reg_device(&hd);
  80cd05:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
  80cd0c:	48 89 c7             	mov    rdi,rax
  80cd0f:	48 b8 3a 41 80 00 00 	movabs rax,0x80413a
  80cd16:	00 00 00 
  80cd19:	ff d0                	call   rax
  80cd1b:	48 b9 e0 e5 41 00 00 	movabs rcx,0x41e5e0
  80cd22:	00 00 00 
  80cd25:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
  80cd28:	48 63 d2             	movsxd rdx,edx
  80cd2b:	89 04 91             	mov    DWORD PTR [rcx+rdx*4],eax
  80cd2e:	e9 b9 00 00 00       	jmp    80cdec <hd_iterate+0x288>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:329
        }else if(!chk_result(r[i]))//&&disk_existent(disk)
  80cd33:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  80cd36:	48 98                	cdqe   
  80cd38:	8b 44 85 d0          	mov    eax,DWORD PTR [rbp+rax*4-0x30]
  80cd3c:	89 c7                	mov    edi,eax
  80cd3e:	48 b8 f6 c9 80 00 00 	movabs rax,0x80c9f6
  80cd45:	00 00 00 
  80cd48:	ff d0                	call   rax
  80cd4a:	85 c0                	test   eax,eax
  80cd4c:	0f 85 9a 00 00 00    	jne    80cdec <hd_iterate+0x288>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:331
        {
            switch (i)
  80cd52:	83 7d f4 03          	cmp    DWORD PTR [rbp-0xc],0x3
  80cd56:	74 50                	je     80cda8 <hd_iterate+0x244>
  80cd58:	83 7d f4 03          	cmp    DWORD PTR [rbp-0xc],0x3
  80cd5c:	7f 59                	jg     80cdb7 <hd_iterate+0x253>
  80cd5e:	83 7d f4 02          	cmp    DWORD PTR [rbp-0xc],0x2
  80cd62:	74 34                	je     80cd98 <hd_iterate+0x234>
  80cd64:	83 7d f4 02          	cmp    DWORD PTR [rbp-0xc],0x2
  80cd68:	7f 4d                	jg     80cdb7 <hd_iterate+0x253>
  80cd6a:	83 7d f4 00          	cmp    DWORD PTR [rbp-0xc],0x0
  80cd6e:	74 08                	je     80cd78 <hd_iterate+0x214>
  80cd70:	83 7d f4 01          	cmp    DWORD PTR [rbp-0xc],0x1
  80cd74:	74 12                	je     80cd88 <hd_iterate+0x224>
  80cd76:	eb 3f                	jmp    80cdb7 <hd_iterate+0x253>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:333
            {
            case 0:name="hd0";break;
  80cd78:	48 b8 b2 8f 81 00 00 	movabs rax,0x818fb2
  80cd7f:	00 00 00 
  80cd82:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  80cd86:	eb 2f                	jmp    80cdb7 <hd_iterate+0x253>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:334
            case 1:name="hd1";break;
  80cd88:	48 b8 b6 8f 81 00 00 	movabs rax,0x818fb6
  80cd8f:	00 00 00 
  80cd92:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  80cd96:	eb 1f                	jmp    80cdb7 <hd_iterate+0x253>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:335
            case 2:name="hd2";break;
  80cd98:	48 b8 ba 8f 81 00 00 	movabs rax,0x818fba
  80cd9f:	00 00 00 
  80cda2:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  80cda6:	eb 0f                	jmp    80cdb7 <hd_iterate+0x253>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:336
            case 3:name="hd3";break;
  80cda8:	48 b8 be 8f 81 00 00 	movabs rax,0x818fbe
  80cdaf:	00 00 00 
  80cdb2:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  80cdb6:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:339
            }
            //有硬盘被卸载了
            int devi=sys_find_dev(name);
  80cdb7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80cdbb:	48 89 c7             	mov    rdi,rax
  80cdbe:	48 b8 d1 45 80 00 00 	movabs rax,0x8045d1
  80cdc5:	00 00 00 
  80cdc8:	ff d0                	call   rax
  80cdca:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:340
            dispose_device(get_dev(devi));
  80cdcd:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  80cdd0:	89 c7                	mov    edi,eax
  80cdd2:	48 b8 2c 4e 80 00 00 	movabs rax,0x804e2c
  80cdd9:	00 00 00 
  80cddc:	ff d0                	call   rax
  80cdde:	89 c7                	mov    edi,eax
  80cde0:	48 b8 6d 4d 80 00 00 	movabs rax,0x804d6d
  80cde7:	00 00 00 
  80cdea:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:305 (discriminator 2)
    for(int i=0;i<1;i++)
  80cdec:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:305 (discriminator 1)
  80cdf0:	83 7d f4 00          	cmp    DWORD PTR [rbp-0xc],0x0
  80cdf4:	0f 8e 29 fe ff ff    	jle    80cc23 <hd_iterate+0xbf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:344
        }

    }
}
  80cdfa:	c9                   	leave  
  80cdfb:	c3                   	ret    

000000000080cdfc <async_check_disk>:
async_check_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:347

int async_check_disk(int disk)
{
  80cdfc:	f3 0f 1e fa          	endbr64 
  80ce00:	55                   	push   rbp
  80ce01:	48 89 e5             	mov    rbp,rsp
  80ce04:	48 83 ec 20          	sub    rsp,0x20
  80ce08:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:348
    unsigned short disknr=PORT_DISK_MAJOR;
  80ce0b:	66 c7 45 fe f0 01    	mov    WORD PTR [rbp-0x2],0x1f0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:349
    unsigned short chkcmd=0xe0;
  80ce11:	66 c7 45 fc e0 00    	mov    WORD PTR [rbp-0x4],0xe0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:350
    if(disk==DISK_SLAVE_MAJOR||disk==DISK_SLAVE_SLAVE)
  80ce17:	83 7d ec 02          	cmp    DWORD PTR [rbp-0x14],0x2
  80ce1b:	74 06                	je     80ce23 <async_check_disk+0x27>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:350 (discriminator 1)
  80ce1d:	83 7d ec 03          	cmp    DWORD PTR [rbp-0x14],0x3
  80ce21:	75 06                	jne    80ce29 <async_check_disk+0x2d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:351
        disknr=PORT_DISK_SLAVE;
  80ce23:	66 c7 45 fe 70 01    	mov    WORD PTR [rbp-0x2],0x170
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:352
    if(disk==DISK_MAJOR_SLAVE||disk==DISK_SLAVE_SLAVE)
  80ce29:	83 7d ec 01          	cmp    DWORD PTR [rbp-0x14],0x1
  80ce2d:	74 06                	je     80ce35 <async_check_disk+0x39>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:352 (discriminator 1)
  80ce2f:	83 7d ec 03          	cmp    DWORD PTR [rbp-0x14],0x3
  80ce33:	75 06                	jne    80ce3b <async_check_disk+0x3f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:353
        chkcmd=0xf0;
  80ce35:	66 c7 45 fc f0 00    	mov    WORD PTR [rbp-0x4],0xf0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:354
    outb(disknr+2,1);
  80ce3b:	0f b7 45 fe          	movzx  eax,WORD PTR [rbp-0x2]
  80ce3f:	83 c0 02             	add    eax,0x2
  80ce42:	0f b7 c0             	movzx  eax,ax
  80ce45:	be 01 00 00 00       	mov    esi,0x1
  80ce4a:	89 c7                	mov    edi,eax
  80ce4c:	48 b8 d0 86 80 00 00 	movabs rax,0x8086d0
  80ce53:	00 00 00 
  80ce56:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:355
    outb(disknr+3,0);
  80ce58:	0f b7 45 fe          	movzx  eax,WORD PTR [rbp-0x2]
  80ce5c:	83 c0 03             	add    eax,0x3
  80ce5f:	0f b7 c0             	movzx  eax,ax
  80ce62:	be 00 00 00 00       	mov    esi,0x0
  80ce67:	89 c7                	mov    edi,eax
  80ce69:	48 b8 d0 86 80 00 00 	movabs rax,0x8086d0
  80ce70:	00 00 00 
  80ce73:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:356
    outb(disknr+4,0);
  80ce75:	0f b7 45 fe          	movzx  eax,WORD PTR [rbp-0x2]
  80ce79:	83 c0 04             	add    eax,0x4
  80ce7c:	0f b7 c0             	movzx  eax,ax
  80ce7f:	be 00 00 00 00       	mov    esi,0x0
  80ce84:	89 c7                	mov    edi,eax
  80ce86:	48 b8 d0 86 80 00 00 	movabs rax,0x8086d0
  80ce8d:	00 00 00 
  80ce90:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:357
    outb(disknr+5,0);
  80ce92:	0f b7 45 fe          	movzx  eax,WORD PTR [rbp-0x2]
  80ce96:	83 c0 05             	add    eax,0x5
  80ce99:	0f b7 c0             	movzx  eax,ax
  80ce9c:	be 00 00 00 00       	mov    esi,0x0
  80cea1:	89 c7                	mov    edi,eax
  80cea3:	48 b8 d0 86 80 00 00 	movabs rax,0x8086d0
  80ceaa:	00 00 00 
  80cead:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:358
    outb(disknr+6,chkcmd);//主硬盘
  80ceaf:	0f b7 45 fc          	movzx  eax,WORD PTR [rbp-0x4]
  80ceb3:	0f b6 d0             	movzx  edx,al
  80ceb6:	0f b7 45 fe          	movzx  eax,WORD PTR [rbp-0x2]
  80ceba:	83 c0 06             	add    eax,0x6
  80cebd:	0f b7 c0             	movzx  eax,ax
  80cec0:	89 d6                	mov    esi,edx
  80cec2:	89 c7                	mov    edi,eax
  80cec4:	48 b8 d0 86 80 00 00 	movabs rax,0x8086d0
  80cecb:	00 00 00 
  80cece:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:359
    outb(disknr+7,DISK_CMD_CHECK);
  80ced0:	0f b7 45 fe          	movzx  eax,WORD PTR [rbp-0x2]
  80ced4:	83 c0 07             	add    eax,0x7
  80ced7:	0f b7 c0             	movzx  eax,ax
  80ceda:	be 90 00 00 00       	mov    esi,0x90
  80cedf:	89 c7                	mov    edi,eax
  80cee1:	48 b8 d0 86 80 00 00 	movabs rax,0x8086d0
  80cee8:	00 00 00 
  80ceeb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:370
    //     // {
    //     //     printf("DISK ERR\n");
    //     //     return -1;
    //     // }
    // }
    return 0;
  80ceed:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:371
}
  80cef2:	c9                   	leave  
  80cef3:	c3                   	ret    

000000000080cef4 <hd_do_req>:
hd_do_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:375

//接口函数：负责接收VFS的请求然后执行
int hd_do_req(driver_args *args)
{
  80cef4:	f3 0f 1e fa          	endbr64 
  80cef8:	55                   	push   rbp
  80cef9:	48 89 e5             	mov    rbp,rsp
  80cefc:	48 83 ec 18          	sub    rsp,0x18
  80cf00:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:376
    int diski=0;
  80cf04:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:377
    for(;disks[diski]!=args->dev;diski++);
  80cf0b:	eb 04                	jmp    80cf11 <hd_do_req+0x1d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:377 (discriminator 2)
  80cf0d:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:377 (discriminator 1)
  80cf11:	48 ba e0 e5 41 00 00 	movabs rdx,0x41e5e0
  80cf18:	00 00 00 
  80cf1b:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80cf1e:	48 98                	cdqe   
  80cf20:	8b 14 82             	mov    edx,DWORD PTR [rdx+rax*4]
  80cf23:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80cf27:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [rax+0x8c]
  80cf2d:	39 c2                	cmp    edx,eax
  80cf2f:	75 dc                	jne    80cf0d <hd_do_req+0x19>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:378
    switch (args->cmd)
  80cf31:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80cf35:	8b 80 a8 00 00 00    	mov    eax,DWORD PTR [rax+0xa8]
  80cf3b:	83 f8 04             	cmp    eax,0x4
  80cf3e:	0f 84 80 00 00 00    	je     80cfc4 <hd_do_req+0xd0>
  80cf44:	83 f8 04             	cmp    eax,0x4
  80cf47:	0f 8f ab 00 00 00    	jg     80cff8 <hd_do_req+0x104>
  80cf4d:	83 f8 02             	cmp    eax,0x2
  80cf50:	74 0a                	je     80cf5c <hd_do_req+0x68>
  80cf52:	83 f8 03             	cmp    eax,0x3
  80cf55:	74 39                	je     80cf90 <hd_do_req+0x9c>
  80cf57:	e9 9c 00 00 00       	jmp    80cff8 <hd_do_req+0x104>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:381
    {
    case DRVF_READ:
        request(diski,DISKREQ_READ,args->lba,args->sec_c,args->dist_addr);
  80cf5c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80cf60:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
  80cf63:	48 98                	cdqe   
  80cf65:	48 89 c6             	mov    rsi,rax
  80cf68:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80cf6c:	8b 48 18             	mov    ecx,DWORD PTR [rax+0x18]
  80cf6f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80cf73:	8b 10                	mov    edx,DWORD PTR [rax]
  80cf75:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80cf78:	49 89 f0             	mov    r8,rsi
  80cf7b:	be 00 00 00 00       	mov    esi,0x0
  80cf80:	89 c7                	mov    edi,eax
  80cf82:	48 b8 72 c1 80 00 00 	movabs rax,0x80c172
  80cf89:	00 00 00 
  80cf8c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:382
        break;
  80cf8e:	eb 6f                	jmp    80cfff <hd_do_req+0x10b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:384
    case DRVF_WRITE:
        request(diski,DISKREQ_WRITE,args->lba,args->sec_c,args->src_addr);
  80cf90:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80cf94:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
  80cf97:	48 98                	cdqe   
  80cf99:	48 89 c6             	mov    rsi,rax
  80cf9c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80cfa0:	8b 48 18             	mov    ecx,DWORD PTR [rax+0x18]
  80cfa3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80cfa7:	8b 10                	mov    edx,DWORD PTR [rax]
  80cfa9:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80cfac:	49 89 f0             	mov    r8,rsi
  80cfaf:	be 01 00 00 00       	mov    esi,0x1
  80cfb4:	89 c7                	mov    edi,eax
  80cfb6:	48 b8 72 c1 80 00 00 	movabs rax,0x80c172
  80cfbd:	00 00 00 
  80cfc0:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:385
        break;
  80cfc2:	eb 3b                	jmp    80cfff <hd_do_req+0x10b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:387
    case DRVF_CHK:
        request(diski,DISKREQ_CHECK,args->lba,args->sec_c,args->dist_addr);
  80cfc4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80cfc8:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
  80cfcb:	48 98                	cdqe   
  80cfcd:	48 89 c6             	mov    rsi,rax
  80cfd0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80cfd4:	8b 48 18             	mov    ecx,DWORD PTR [rax+0x18]
  80cfd7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80cfdb:	8b 10                	mov    edx,DWORD PTR [rax]
  80cfdd:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80cfe0:	49 89 f0             	mov    r8,rsi
  80cfe3:	be 02 00 00 00       	mov    esi,0x2
  80cfe8:	89 c7                	mov    edi,eax
  80cfea:	48 b8 72 c1 80 00 00 	movabs rax,0x80c172
  80cff1:	00 00 00 
  80cff4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:388
        break;
  80cff6:	eb 07                	jmp    80cfff <hd_do_req+0x10b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:389
    default:return -1;
  80cff8:	b8 ff ff ff ff       	mov    eax,0xffffffff
  80cffd:	eb 24                	jmp    80d023 <hd_do_req+0x12f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:391
    }
    args->stat=REQ_STAT_WORKING;
  80cfff:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80d003:	c7 80 ac 00 00 00 02 	mov    DWORD PTR [rax+0xac],0x2
  80d00a:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:392
    running_devman_req=args;
  80d00d:	48 ba c8 e5 41 00 00 	movabs rdx,0x41e5c8
  80d014:	00 00 00 
  80d017:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80d01b:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:393
    return 0;
  80d01e:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:394
  80d023:	c9                   	leave  
  80d024:	c3                   	ret    
  80d025:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
  80d02c:	00 00 00 
  80d02f:	90                   	nop

000000000080d030 <disk_int_handler>:
disk_int_handler():
  80d030:	e8 c9 b6 ff ff       	call   8086fe <eoi>
  80d035:	e8 81 ee ff ff       	call   80bebb <disk_int_handler_c>
  80d03a:	48 cf                	iretq  

000000000080d03c <read_disk_asm>:
read_disk_asm():
  80d03c:	55                   	push   rbp
  80d03d:	89 e5                	mov    ebp,esp
  80d03f:	66 ba f7 01          	mov    dx,0x1f7
  80d043:	31 c9                	xor    ecx,ecx
  80d045:	67 8b 44 24 08       	mov    eax,DWORD PTR [esp+0x8]
  80d04a:	67 8b 4c 24 0c       	mov    ecx,DWORD PTR [esp+0xc]
  80d04f:	67 8b 5c 24 10       	mov    ebx,DWORD PTR [esp+0x10]
  80d054:	89 c6                	mov    esi,eax
  80d056:	66 ba f2 01          	mov    dx,0x1f2
  80d05a:	88 c8                	mov    al,cl
  80d05c:	ee                   	out    dx,al
  80d05d:	66 ba f3 01          	mov    dx,0x1f3
  80d061:	89 f0                	mov    eax,esi
  80d063:	ee                   	out    dx,al
  80d064:	66 ff c2             	inc    dx
  80d067:	c1 e8 08             	shr    eax,0x8
  80d06a:	ee                   	out    dx,al
  80d06b:	66 ff c2             	inc    dx
  80d06e:	c1 e8 08             	shr    eax,0x8
  80d071:	ee                   	out    dx,al
  80d072:	66 ff c2             	inc    dx
  80d075:	66 c1 e8 08          	shr    ax,0x8
  80d079:	24 0f                	and    al,0xf
  80d07b:	0c e0                	or     al,0xe0
  80d07d:	ee                   	out    dx,al
  80d07e:	66 ff c2             	inc    dx
  80d081:	b0 20                	mov    al,0x20
  80d083:	ee                   	out    dx,al

000000000080d084 <read_disk_asm.wait>:
read_disk_asm.wait():
  80d084:	90                   	nop
  80d085:	ec                   	in     al,dx
  80d086:	24 88                	and    al,0x88
  80d088:	3c 08                	cmp    al,0x8
  80d08a:	75 f8                	jne    80d084 <read_disk_asm.wait>
  80d08c:	66 89 d7             	mov    di,dx
  80d08f:	89 c8                	mov    eax,ecx
  80d091:	66 b9 00 01          	mov    cx,0x100
  80d095:	66 f7 e1             	mul    cx
  80d098:	89 c1                	mov    ecx,eax
  80d09a:	66 ba f0 01          	mov    dx,0x1f0

000000000080d09e <read_disk_asm.read>:
read_disk_asm.read():
  80d09e:	66 ed                	in     ax,dx
  80d0a0:	66 67 89 03          	mov    WORD PTR [ebx],ax
  80d0a4:	83 c3 02             	add    ebx,0x2
  80d0a7:	e2 f5                	loop   80d09e <read_disk_asm.read>
  80d0a9:	c9                   	leave  
  80d0aa:	b8 00 00 00 00       	mov    eax,0x0
  80d0af:	c3                   	ret    

000000000080d0b0 <read_disk_asm.err_disk_reading>:
read_disk_asm.err_disk_reading():
  80d0b0:	66 ba f1 01          	mov    dx,0x1f1
  80d0b4:	31 c0                	xor    eax,eax
  80d0b6:	66 ed                	in     ax,dx
  80d0b8:	89 ec                	mov    esp,ebp
  80d0ba:	5d                   	pop    rbp
  80d0bb:	c3                   	ret    

000000000080d0bc <write_disk_asm>:
write_disk_asm():
  80d0bc:	55                   	push   rbp
  80d0bd:	89 e5                	mov    ebp,esp
  80d0bf:	67 8b 44 24 08       	mov    eax,DWORD PTR [esp+0x8]
  80d0c4:	67 8b 4c 24 0c       	mov    ecx,DWORD PTR [esp+0xc]
  80d0c9:	67 8b 5c 24 10       	mov    ebx,DWORD PTR [esp+0x10]
  80d0ce:	50                   	push   rax
  80d0cf:	66 ba f2 01          	mov    dx,0x1f2
  80d0d3:	88 c8                	mov    al,cl
  80d0d5:	ee                   	out    dx,al
  80d0d6:	58                   	pop    rax
  80d0d7:	66 ba f3 01          	mov    dx,0x1f3
  80d0db:	ee                   	out    dx,al
  80d0dc:	c1 e8 08             	shr    eax,0x8
  80d0df:	66 ba f4 01          	mov    dx,0x1f4
  80d0e3:	ee                   	out    dx,al
  80d0e4:	c1 e8 08             	shr    eax,0x8
  80d0e7:	66 ba f5 01          	mov    dx,0x1f5
  80d0eb:	ee                   	out    dx,al
  80d0ec:	c1 e8 08             	shr    eax,0x8
  80d0ef:	24 0f                	and    al,0xf
  80d0f1:	0c e0                	or     al,0xe0
  80d0f3:	66 ba f6 01          	mov    dx,0x1f6
  80d0f7:	ee                   	out    dx,al
  80d0f8:	66 ba f7 01          	mov    dx,0x1f7
  80d0fc:	b0 30                	mov    al,0x30
  80d0fe:	ee                   	out    dx,al

000000000080d0ff <write_disk_asm.not_ready2>:
write_disk_asm.not_ready2():
  80d0ff:	90                   	nop
  80d100:	ec                   	in     al,dx
  80d101:	24 88                	and    al,0x88
  80d103:	3c 08                	cmp    al,0x8
  80d105:	75 f8                	jne    80d0ff <write_disk_asm.not_ready2>
  80d107:	89 c8                	mov    eax,ecx
  80d109:	66 b9 00 01          	mov    cx,0x100
  80d10d:	66 f7 e1             	mul    cx
  80d110:	89 c1                	mov    ecx,eax
  80d112:	66 ba f0 01          	mov    dx,0x1f0

000000000080d116 <write_disk_asm.go_on_write>:
write_disk_asm.go_on_write():
  80d116:	66 67 8b 03          	mov    ax,WORD PTR [ebx]
  80d11a:	66 ef                	out    dx,ax
  80d11c:	83 c3 02             	add    ebx,0x2
  80d11f:	e2 f5                	loop   80d116 <write_disk_asm.go_on_write>
  80d121:	89 ec                	mov    esp,ebp
  80d123:	5d                   	pop    rbp
  80d124:	c3                   	ret    

000000000080d125 <DISK1_FAT32_read_FAT_Entry>:
DISK1_FAT32_read_FAT_Entry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:12
#include "memory.h"
#include "proc.h"
#include "devman.h"

unsigned int DISK1_FAT32_read_FAT_Entry(struct FAT32_sb_info * fsbi,unsigned int fat_entry)
{
  80d125:	f3 0f 1e fa          	endbr64 
  80d129:	55                   	push   rbp
  80d12a:	48 89 e5             	mov    rbp,rsp
  80d12d:	48 81 ec 20 02 00 00 	sub    rsp,0x220
  80d134:	48 89 bd e8 fd ff ff 	mov    QWORD PTR [rbp-0x218],rdi
  80d13b:	89 b5 e4 fd ff ff    	mov    DWORD PTR [rbp-0x21c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:14
	unsigned int buf[128];
	memset(buf,0,512);
  80d141:	48 8d 85 f0 fd ff ff 	lea    rax,[rbp-0x210]
  80d148:	ba 00 02 00 00       	mov    edx,0x200
  80d14d:	be 00 00 00 00       	mov    esi,0x0
  80d152:	48 89 c7             	mov    rdi,rax
  80d155:	48 b8 21 04 81 00 00 	movabs rax,0x810421
  80d15c:	00 00 00 
  80d15f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:15
	int r=request(DISK_MAJOR_MAJOR,DISKREQ_READ,fsbi->FAT1_firstsector + (fat_entry >> 7),1,(unsigned char *)buf);
  80d161:	48 8b 85 e8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x218]
  80d168:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
  80d16c:	89 c2                	mov    edx,eax
  80d16e:	8b 85 e4 fd ff ff    	mov    eax,DWORD PTR [rbp-0x21c]
  80d174:	c1 e8 07             	shr    eax,0x7
  80d177:	01 d0                	add    eax,edx
  80d179:	89 c2                	mov    edx,eax
  80d17b:	48 8d 85 f0 fd ff ff 	lea    rax,[rbp-0x210]
  80d182:	49 89 c0             	mov    r8,rax
  80d185:	b9 01 00 00 00       	mov    ecx,0x1
  80d18a:	be 00 00 00 00       	mov    esi,0x0
  80d18f:	bf 00 00 00 00       	mov    edi,0x0
  80d194:	48 b8 72 c1 80 00 00 	movabs rax,0x80c172
  80d19b:	00 00 00 
  80d19e:	ff d0                	call   rax
  80d1a0:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:16
    chk_result(r);
  80d1a3:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80d1a6:	89 c7                	mov    edi,eax
  80d1a8:	48 b8 f6 c9 80 00 00 	movabs rax,0x80c9f6
  80d1af:	00 00 00 
  80d1b2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:17
    printf("DISK1_FAT32_read_FAT_Entry fat_entry:%x,%#010x\n",fat_entry,buf[fat_entry & 0x7f]);
  80d1b4:	8b 85 e4 fd ff ff    	mov    eax,DWORD PTR [rbp-0x21c]
  80d1ba:	83 e0 7f             	and    eax,0x7f
  80d1bd:	89 c0                	mov    eax,eax
  80d1bf:	8b 94 85 f0 fd ff ff 	mov    edx,DWORD PTR [rbp+rax*4-0x210]
  80d1c6:	8b 85 e4 fd ff ff    	mov    eax,DWORD PTR [rbp-0x21c]
  80d1cc:	89 c6                	mov    esi,eax
  80d1ce:	48 b8 d8 8f 81 00 00 	movabs rax,0x818fd8
  80d1d5:	00 00 00 
  80d1d8:	48 89 c7             	mov    rdi,rax
  80d1db:	b8 00 00 00 00       	mov    eax,0x0
  80d1e0:	48 b9 97 11 80 00 00 	movabs rcx,0x801197
  80d1e7:	00 00 00 
  80d1ea:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:18
	return buf[fat_entry & 0x7f] & 0x0fffffff;
  80d1ec:	8b 85 e4 fd ff ff    	mov    eax,DWORD PTR [rbp-0x21c]
  80d1f2:	83 e0 7f             	and    eax,0x7f
  80d1f5:	89 c0                	mov    eax,eax
  80d1f7:	8b 84 85 f0 fd ff ff 	mov    eax,DWORD PTR [rbp+rax*4-0x210]
  80d1fe:	25 ff ff ff 0f       	and    eax,0xfffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:19
}
  80d203:	c9                   	leave  
  80d204:	c3                   	ret    

000000000080d205 <DISK1_FAT32_write_FAT_Entry>:
DISK1_FAT32_write_FAT_Entry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:23


unsigned long DISK1_FAT32_write_FAT_Entry(struct FAT32_sb_info * fsbi,unsigned int fat_entry,unsigned int value)
{
  80d205:	f3 0f 1e fa          	endbr64 
  80d209:	55                   	push   rbp
  80d20a:	48 89 e5             	mov    rbp,rsp
  80d20d:	48 81 ec 20 02 00 00 	sub    rsp,0x220
  80d214:	48 89 bd e8 fd ff ff 	mov    QWORD PTR [rbp-0x218],rdi
  80d21b:	89 b5 e4 fd ff ff    	mov    DWORD PTR [rbp-0x21c],esi
  80d221:	89 95 e0 fd ff ff    	mov    DWORD PTR [rbp-0x220],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:27
	unsigned int buf[128];
	int i;

	memset(buf,0,512);
  80d227:	48 8d 85 f0 fd ff ff 	lea    rax,[rbp-0x210]
  80d22e:	ba 00 02 00 00       	mov    edx,0x200
  80d233:	be 00 00 00 00       	mov    esi,0x0
  80d238:	48 89 c7             	mov    rdi,rax
  80d23b:	48 b8 21 04 81 00 00 	movabs rax,0x810421
  80d242:	00 00 00 
  80d245:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:28
	int r=request(DISK_MAJOR_MAJOR,DISKREQ_READ,fsbi->FAT1_firstsector + (fat_entry >> 7),1,(unsigned char *)buf);
  80d247:	48 8b 85 e8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x218]
  80d24e:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
  80d252:	89 c2                	mov    edx,eax
  80d254:	8b 85 e4 fd ff ff    	mov    eax,DWORD PTR [rbp-0x21c]
  80d25a:	c1 e8 07             	shr    eax,0x7
  80d25d:	01 d0                	add    eax,edx
  80d25f:	89 c2                	mov    edx,eax
  80d261:	48 8d 85 f0 fd ff ff 	lea    rax,[rbp-0x210]
  80d268:	49 89 c0             	mov    r8,rax
  80d26b:	b9 01 00 00 00       	mov    ecx,0x1
  80d270:	be 00 00 00 00       	mov    esi,0x0
  80d275:	bf 00 00 00 00       	mov    edi,0x0
  80d27a:	48 b8 72 c1 80 00 00 	movabs rax,0x80c172
  80d281:	00 00 00 
  80d284:	ff d0                	call   rax
  80d286:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:29
    chk_result(r);
  80d289:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  80d28c:	89 c7                	mov    edi,eax
  80d28e:	48 b8 f6 c9 80 00 00 	movabs rax,0x80c9f6
  80d295:	00 00 00 
  80d298:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:30
    buf[fat_entry & 0x7f] = (buf[fat_entry & 0x7f] & 0xf0000000) | (value & 0x0fffffff);
  80d29a:	8b 85 e4 fd ff ff    	mov    eax,DWORD PTR [rbp-0x21c]
  80d2a0:	83 e0 7f             	and    eax,0x7f
  80d2a3:	89 c0                	mov    eax,eax
  80d2a5:	8b 84 85 f0 fd ff ff 	mov    eax,DWORD PTR [rbp+rax*4-0x210]
  80d2ac:	25 00 00 00 f0       	and    eax,0xf0000000
  80d2b1:	89 c6                	mov    esi,eax
  80d2b3:	8b 85 e0 fd ff ff    	mov    eax,DWORD PTR [rbp-0x220]
  80d2b9:	25 ff ff ff 0f       	and    eax,0xfffffff
  80d2be:	89 c1                	mov    ecx,eax
  80d2c0:	8b 85 e4 fd ff ff    	mov    eax,DWORD PTR [rbp-0x21c]
  80d2c6:	83 e0 7f             	and    eax,0x7f
  80d2c9:	89 c2                	mov    edx,eax
  80d2cb:	89 f0                	mov    eax,esi
  80d2cd:	09 c8                	or     eax,ecx
  80d2cf:	89 d2                	mov    edx,edx
  80d2d1:	89 84 95 f0 fd ff ff 	mov    DWORD PTR [rbp+rdx*4-0x210],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:32

	for(i = 0;i < fsbi->NumFATs;i++){
  80d2d8:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
  80d2df:	eb 6f                	jmp    80d350 <DISK1_FAT32_write_FAT_Entry+0x14b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:33 (discriminator 3)
        int r1=request(DISK_MAJOR_MAJOR,DISKREQ_WRITE,fsbi->FAT1_firstsector + fsbi->sector_per_FAT * i + (fat_entry >> 7),1,(unsigned char *)buf);
  80d2e1:	48 8b 85 e8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x218]
  80d2e8:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
  80d2ec:	89 c1                	mov    ecx,eax
  80d2ee:	48 8b 85 e8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x218]
  80d2f5:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
  80d2f9:	89 c2                	mov    edx,eax
  80d2fb:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80d2fe:	48 98                	cdqe   
  80d300:	0f af c2             	imul   eax,edx
  80d303:	8d 14 01             	lea    edx,[rcx+rax*1]
  80d306:	8b 85 e4 fd ff ff    	mov    eax,DWORD PTR [rbp-0x21c]
  80d30c:	c1 e8 07             	shr    eax,0x7
  80d30f:	01 d0                	add    eax,edx
  80d311:	89 c2                	mov    edx,eax
  80d313:	48 8d 85 f0 fd ff ff 	lea    rax,[rbp-0x210]
  80d31a:	49 89 c0             	mov    r8,rax
  80d31d:	b9 01 00 00 00       	mov    ecx,0x1
  80d322:	be 01 00 00 00       	mov    esi,0x1
  80d327:	bf 00 00 00 00       	mov    edi,0x0
  80d32c:	48 b8 72 c1 80 00 00 	movabs rax,0x80c172
  80d333:	00 00 00 
  80d336:	ff d0                	call   rax
  80d338:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:34 (discriminator 3)
        chk_result(r1);
  80d33b:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  80d33e:	89 c7                	mov    edi,eax
  80d340:	48 b8 f6 c9 80 00 00 	movabs rax,0x80c9f6
  80d347:	00 00 00 
  80d34a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:32 (discriminator 3)
	for(i = 0;i < fsbi->NumFATs;i++){
  80d34c:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:32 (discriminator 1)
  80d350:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80d353:	48 63 d0             	movsxd rdx,eax
  80d356:	48 8b 85 e8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x218]
  80d35d:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
  80d361:	48 39 c2             	cmp    rdx,rax
  80d364:	0f 82 77 ff ff ff    	jb     80d2e1 <DISK1_FAT32_write_FAT_Entry+0xdc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:36
    }
	return 1;
  80d36a:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:37
}
  80d36f:	c9                   	leave  
  80d370:	c3                   	ret    

000000000080d371 <FAT32_open>:
FAT32_open():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:41


long FAT32_open(struct index_node * inode,struct file * filp)
{
  80d371:	f3 0f 1e fa          	endbr64 
  80d375:	55                   	push   rbp
  80d376:	48 89 e5             	mov    rbp,rsp
  80d379:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  80d37d:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:42
	return 1;
  80d381:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:43
}
  80d386:	5d                   	pop    rbp
  80d387:	c3                   	ret    

000000000080d388 <FAT32_close>:
FAT32_close():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:47


long FAT32_close(struct index_node * inode,struct file * filp)
{
  80d388:	f3 0f 1e fa          	endbr64 
  80d38c:	55                   	push   rbp
  80d38d:	48 89 e5             	mov    rbp,rsp
  80d390:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  80d394:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:48
	return 1;
  80d398:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:49
}
  80d39d:	5d                   	pop    rbp
  80d39e:	c3                   	ret    

000000000080d39f <FAT32_read>:
FAT32_read():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:53


long FAT32_read(struct file * filp,char * buf,unsigned long count,long * position)
{
  80d39f:	f3 0f 1e fa          	endbr64 
  80d3a3:	55                   	push   rbp
  80d3a4:	48 89 e5             	mov    rbp,rsp
  80d3a7:	48 83 c4 80          	add    rsp,0xffffffffffffff80
  80d3ab:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
  80d3af:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
  80d3b3:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
  80d3b7:	48 89 4d 80          	mov    QWORD PTR [rbp-0x80],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:54
	struct FAT32_inode_info * finode = filp->dentry->dir_inode->private_index_info;
  80d3bb:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  80d3bf:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80d3c3:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
  80d3c7:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
  80d3cb:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:55
	struct FAT32_sb_info * fsbi = filp->dentry->dir_inode->sb->private_sb_info;
  80d3cf:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  80d3d3:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80d3d7:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
  80d3db:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  80d3df:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80d3e3:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:57

	unsigned long cluster = finode->first_cluster;
  80d3e7:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  80d3eb:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80d3ee:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:58
	unsigned long sector = 0;
  80d3f2:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
  80d3f9:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:59
	int i,length = 0;
  80d3fa:	c7 45 bc 00 00 00 00 	mov    DWORD PTR [rbp-0x44],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:60
	long retval = 0;
  80d401:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
  80d408:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:61
	int index = *position / fsbi->bytes_per_cluster;
  80d409:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  80d40d:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80d410:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  80d414:	48 8b 72 18          	mov    rsi,QWORD PTR [rdx+0x18]
  80d418:	48 99                	cqo    
  80d41a:	48 f7 fe             	idiv   rsi
  80d41d:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:62
	long offset = *position % fsbi->bytes_per_cluster;
  80d420:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  80d424:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80d427:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  80d42b:	48 8b 4a 18          	mov    rcx,QWORD PTR [rdx+0x18]
  80d42f:	48 99                	cqo    
  80d431:	48 f7 f9             	idiv   rcx
  80d434:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:63
	char * buffer = (char *) kmalloc(fsbi->bytes_per_cluster, 0);
  80d438:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80d43c:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  80d440:	be 00 00 00 00       	mov    esi,0x0
  80d445:	48 89 c7             	mov    rdi,rax
  80d448:	b8 00 00 00 00       	mov    eax,0x0
  80d44d:	48 ba d4 18 80 00 00 	movabs rdx,0x8018d4
  80d454:	00 00 00 
  80d457:	ff d2                	call   rdx
  80d459:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:65

	if(!cluster)
  80d45d:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
  80d462:	75 0c                	jne    80d470 <FAT32_read+0xd1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:66
		return -EFAULT;
  80d464:	48 c7 c0 eb ff ff ff 	mov    rax,0xffffffffffffffeb
  80d46b:	e9 37 02 00 00       	jmp    80d6a7 <FAT32_read+0x308>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:67
	for(i = 0;i < index;i++)
  80d470:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
  80d477:	eb 25                	jmp    80d49e <FAT32_read+0xff>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:68 (discriminator 3)
		cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
  80d479:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80d47d:	89 c2                	mov    edx,eax
  80d47f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80d483:	89 d6                	mov    esi,edx
  80d485:	48 89 c7             	mov    rdi,rax
  80d488:	48 b8 25 d1 80 00 00 	movabs rax,0x80d125
  80d48f:	00 00 00 
  80d492:	ff d0                	call   rax
  80d494:	89 c0                	mov    eax,eax
  80d496:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:67 (discriminator 3)
	for(i = 0;i < index;i++)
  80d49a:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:67 (discriminator 1)
  80d49e:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  80d4a1:	3b 45 e4             	cmp    eax,DWORD PTR [rbp-0x1c]
  80d4a4:	7c d3                	jl     80d479 <FAT32_read+0xda>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:70

	if(*position + count > filp->dentry->dir_inode->file_size)
  80d4a6:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  80d4aa:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80d4ad:	48 89 c2             	mov    rdx,rax
  80d4b0:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  80d4b4:	48 01 c2             	add    rdx,rax
  80d4b7:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  80d4bb:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80d4bf:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
  80d4c3:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80d4c6:	48 39 c2             	cmp    rdx,rax
  80d4c9:	76 2c                	jbe    80d4f7 <FAT32_read+0x158>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:71
		index = count = filp->dentry->dir_inode->file_size - *position;
  80d4cb:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  80d4cf:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80d4d3:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
  80d4d7:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  80d4da:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  80d4de:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80d4e1:	48 89 c1             	mov    rcx,rax
  80d4e4:	48 89 d0             	mov    rax,rdx
  80d4e7:	48 29 c8             	sub    rax,rcx
  80d4ea:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
  80d4ee:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  80d4f2:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
  80d4f5:	eb 07                	jmp    80d4fe <FAT32_read+0x15f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:73
	else
		index = count;
  80d4f7:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  80d4fb:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:79

//	printf("FAT32_read first_cluster:%d,size:%d,preempt_count:%d\n",finode->first_cluster,filp->dentry->dir_inode->file_size,current->preempt_count);

	do
	{
		memset(buffer,0,fsbi->bytes_per_cluster);
  80d4fe:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80d502:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  80d506:	89 c2                	mov    edx,eax
  80d508:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  80d50c:	be 00 00 00 00       	mov    esi,0x0
  80d511:	48 89 c7             	mov    rdi,rax
  80d514:	48 b8 21 04 81 00 00 	movabs rax,0x810421
  80d51b:	00 00 00 
  80d51e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:80
		sector = fsbi->Data_firstsector + (cluster - 2) * fsbi->sector_per_cluster;
  80d520:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80d524:	48 8b 48 28          	mov    rcx,QWORD PTR [rax+0x28]
  80d528:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80d52c:	48 8d 50 fe          	lea    rdx,[rax-0x2]
  80d530:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80d534:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80d538:	48 0f af c2          	imul   rax,rdx
  80d53c:	48 01 c8             	add    rax,rcx
  80d53f:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:81
        int r=request(DISK_MAJOR_MAJOR,DISKREQ_READ,sector,fsbi->sector_per_cluster,(unsigned char *)buffer);
  80d543:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80d547:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80d54b:	89 c1                	mov    ecx,eax
  80d54d:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  80d551:	89 c2                	mov    edx,eax
  80d553:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  80d557:	49 89 c0             	mov    r8,rax
  80d55a:	be 00 00 00 00       	mov    esi,0x0
  80d55f:	bf 00 00 00 00       	mov    edi,0x0
  80d564:	48 b8 72 c1 80 00 00 	movabs rax,0x80c172
  80d56b:	00 00 00 
  80d56e:	ff d0                	call   rax
  80d570:	89 45 ac             	mov    DWORD PTR [rbp-0x54],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:82
		if(!chk_result(r))
  80d573:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
  80d576:	89 c7                	mov    edi,eax
  80d578:	48 b8 f6 c9 80 00 00 	movabs rax,0x80c9f6
  80d57f:	00 00 00 
  80d582:	ff d0                	call   rax
  80d584:	85 c0                	test   eax,eax
  80d586:	75 2b                	jne    80d5b3 <FAT32_read+0x214>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:84
		{
			printf("FAT32 FS(read) read disk ERROR!!!!!!!!!!\n");
  80d588:	48 b8 08 90 81 00 00 	movabs rax,0x819008
  80d58f:	00 00 00 
  80d592:	48 89 c7             	mov    rdi,rax
  80d595:	b8 00 00 00 00       	mov    eax,0x0
  80d59a:	48 ba 97 11 80 00 00 	movabs rdx,0x801197
  80d5a1:	00 00 00 
  80d5a4:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:85
			retval = -EIO;
  80d5a6:	48 c7 45 e8 e3 ff ff 	mov    QWORD PTR [rbp-0x18],0xffffffffffffffe3
  80d5ad:	ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:86
			break;
  80d5ae:	e9 cf 00 00 00       	jmp    80d682 <FAT32_read+0x2e3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:89
		}

		length = index <= fsbi->bytes_per_cluster - offset ? index : fsbi->bytes_per_cluster - offset;
  80d5b3:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  80d5b6:	48 63 d0             	movsxd rdx,eax
  80d5b9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80d5bd:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  80d5c1:	48 2b 45 d8          	sub    rax,QWORD PTR [rbp-0x28]
  80d5c5:	48 39 c2             	cmp    rdx,rax
  80d5c8:	48 0f 4e c2          	cmovle rax,rdx
  80d5cc:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:91

		if((unsigned long)buf < MAX_TASKS)
  80d5cf:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  80d5d3:	48 83 f8 1f          	cmp    rax,0x1f
  80d5d7:	77 26                	ja     80d5ff <FAT32_read+0x260>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:92
			memcpy(buffer + offset,buf,length);
  80d5d9:	8b 55 bc             	mov    edx,DWORD PTR [rbp-0x44]
  80d5dc:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  80d5e0:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  80d5e4:	48 01 c1             	add    rcx,rax
  80d5e7:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  80d5eb:	48 89 c6             	mov    rsi,rax
  80d5ee:	48 89 cf             	mov    rdi,rcx
  80d5f1:	48 b8 72 03 81 00 00 	movabs rax,0x810372
  80d5f8:	00 00 00 
  80d5fb:	ff d0                	call   rax
  80d5fd:	eb 24                	jmp    80d623 <FAT32_read+0x284>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:94
		else
			memcpy(buffer + offset,buf,length);
  80d5ff:	8b 55 bc             	mov    edx,DWORD PTR [rbp-0x44]
  80d602:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
  80d606:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  80d60a:	48 01 c1             	add    rcx,rax
  80d60d:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  80d611:	48 89 c6             	mov    rsi,rax
  80d614:	48 89 cf             	mov    rdi,rcx
  80d617:	48 b8 72 03 81 00 00 	movabs rax,0x810372
  80d61e:	00 00 00 
  80d621:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:96

		index -= length;
  80d623:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
  80d626:	29 45 e4             	sub    DWORD PTR [rbp-0x1c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:97
		buf += length;
  80d629:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
  80d62c:	48 98                	cdqe   
  80d62e:	48 01 45 90          	add    QWORD PTR [rbp-0x70],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:98
		offset -= offset;
  80d632:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
  80d639:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:99
		*position += length;
  80d63a:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  80d63e:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  80d641:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
  80d644:	48 98                	cdqe   
  80d646:	48 01 c2             	add    rdx,rax
  80d649:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  80d64d:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:100
	}while(index && (cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster)));
  80d650:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
  80d654:	74 2c                	je     80d682 <FAT32_read+0x2e3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:100 (discriminator 1)
  80d656:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80d65a:	89 c2                	mov    edx,eax
  80d65c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80d660:	89 d6                	mov    esi,edx
  80d662:	48 89 c7             	mov    rdi,rax
  80d665:	48 b8 25 d1 80 00 00 	movabs rax,0x80d125
  80d66c:	00 00 00 
  80d66f:	ff d0                	call   rax
  80d671:	89 c0                	mov    eax,eax
  80d673:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
  80d677:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
  80d67c:	0f 85 7c fe ff ff    	jne    80d4fe <FAT32_read+0x15f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:102

    kmfree(buffer);
  80d682:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  80d686:	48 89 c7             	mov    rdi,rax
  80d689:	48 b8 e0 1b 80 00 00 	movabs rax,0x801be0
  80d690:	00 00 00 
  80d693:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:103
	if(!index)
  80d695:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
  80d699:	75 08                	jne    80d6a3 <FAT32_read+0x304>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:104
		retval = count;
  80d69b:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  80d69f:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:105
	return retval;
  80d6a3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:106
}
  80d6a7:	c9                   	leave  
  80d6a8:	c3                   	ret    

000000000080d6a9 <FAT32_find_available_cluster>:
FAT32_find_available_cluster():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:110


unsigned long FAT32_find_available_cluster(struct FAT32_sb_info * fsbi)
{
  80d6a9:	f3 0f 1e fa          	endbr64 
  80d6ad:	55                   	push   rbp
  80d6ae:	48 89 e5             	mov    rbp,rsp
  80d6b1:	48 81 ec 30 02 00 00 	sub    rsp,0x230
  80d6b8:	48 89 bd d8 fd ff ff 	mov    QWORD PTR [rbp-0x228],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:113
	int i,j;
	int fat_entry;
	unsigned long sector_per_fat = fsbi->sector_per_FAT;
  80d6bf:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
  80d6c6:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
  80d6ca:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:118
	unsigned int buf[128];

//	fsbi->fat_fsinfo->FSI_Free_Count & fsbi->fat_fsinfo->FSI_Nxt_Free not exactly,so unuse

	for(i = 0;i < sector_per_fat;i++)
  80d6ce:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
  80d6d5:	e9 99 00 00 00       	jmp    80d773 <FAT32_find_available_cluster+0xca>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:120
	{
		memset(buf,0,512);
  80d6da:	48 8d 85 e0 fd ff ff 	lea    rax,[rbp-0x220]
  80d6e1:	ba 00 02 00 00       	mov    edx,0x200
  80d6e6:	be 00 00 00 00       	mov    esi,0x0
  80d6eb:	48 89 c7             	mov    rdi,rax
  80d6ee:	48 b8 21 04 81 00 00 	movabs rax,0x810421
  80d6f5:	00 00 00 
  80d6f8:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:121
		int r=request(DISK_MAJOR_MAJOR,DISKREQ_READ,fsbi->FAT1_firstsector + i,1,(unsigned char *)buf);
  80d6fa:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
  80d701:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
  80d705:	89 c2                	mov    edx,eax
  80d707:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80d70a:	01 d0                	add    eax,edx
  80d70c:	89 c2                	mov    edx,eax
  80d70e:	48 8d 85 e0 fd ff ff 	lea    rax,[rbp-0x220]
  80d715:	49 89 c0             	mov    r8,rax
  80d718:	b9 01 00 00 00       	mov    ecx,0x1
  80d71d:	be 00 00 00 00       	mov    esi,0x0
  80d722:	bf 00 00 00 00       	mov    edi,0x0
  80d727:	48 b8 72 c1 80 00 00 	movabs rax,0x80c172
  80d72e:	00 00 00 
  80d731:	ff d0                	call   rax
  80d733:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:123

		for(j = 0;j < 128;j++)
  80d736:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
  80d73d:	eb 2a                	jmp    80d769 <FAT32_find_available_cluster+0xc0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:125
		{
			if((buf[j] & 0x0fffffff) == 0)
  80d73f:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  80d742:	48 98                	cdqe   
  80d744:	8b 84 85 e0 fd ff ff 	mov    eax,DWORD PTR [rbp+rax*4-0x220]
  80d74b:	25 ff ff ff 0f       	and    eax,0xfffffff
  80d750:	85 c0                	test   eax,eax
  80d752:	75 11                	jne    80d765 <FAT32_find_available_cluster+0xbc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:126
				return (i << 7) + j;
  80d754:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80d757:	c1 e0 07             	shl    eax,0x7
  80d75a:	89 c2                	mov    edx,eax
  80d75c:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  80d75f:	01 d0                	add    eax,edx
  80d761:	48 98                	cdqe   
  80d763:	eb 22                	jmp    80d787 <FAT32_find_available_cluster+0xde>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:123 (discriminator 2)
		for(j = 0;j < 128;j++)
  80d765:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:123 (discriminator 1)
  80d769:	83 7d f8 7f          	cmp    DWORD PTR [rbp-0x8],0x7f
  80d76d:	7e d0                	jle    80d73f <FAT32_find_available_cluster+0x96>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:118 (discriminator 2)
	for(i = 0;i < sector_per_fat;i++)
  80d76f:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:118 (discriminator 1)
  80d773:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80d776:	48 98                	cdqe   
  80d778:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
  80d77c:	0f 87 58 ff ff ff    	ja     80d6da <FAT32_find_available_cluster+0x31>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:129
		}
	}
	return 0;
  80d782:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:130 (discriminator 1)
}
  80d787:	c9                   	leave  
  80d788:	c3                   	ret    

000000000080d789 <FAT32_write>:
FAT32_write():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:134


long FAT32_write(struct file * filp,char * buf,unsigned long count,long * position)
{
  80d789:	f3 0f 1e fa          	endbr64 
  80d78d:	55                   	push   rbp
  80d78e:	48 89 e5             	mov    rbp,rsp
  80d791:	48 81 ec 90 00 00 00 	sub    rsp,0x90
  80d798:	48 89 7d 88          	mov    QWORD PTR [rbp-0x78],rdi
  80d79c:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
  80d7a0:	48 89 95 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdx
  80d7a7:	48 89 8d 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:135
	struct FAT32_inode_info * finode = filp->dentry->dir_inode->private_index_info;
  80d7ae:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  80d7b2:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80d7b6:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
  80d7ba:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
  80d7be:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:136
	struct FAT32_sb_info * fsbi = filp->dentry->dir_inode->sb->private_sb_info;
  80d7c2:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  80d7c6:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80d7ca:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
  80d7ce:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  80d7d2:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80d7d6:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:138

	unsigned long cluster = finode->first_cluster;
  80d7da:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  80d7de:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80d7e1:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:139
	unsigned long next_cluster = 0;
  80d7e5:	48 c7 45 b0 00 00 00 	mov    QWORD PTR [rbp-0x50],0x0
  80d7ec:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:140
	unsigned long sector = 0;
  80d7ed:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
  80d7f4:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:141
	int i,length = 0;
  80d7f5:	c7 45 ac 00 00 00 00 	mov    DWORD PTR [rbp-0x54],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:142
	long retval = 0;
  80d7fc:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
  80d803:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:143
	long flags = 0;
  80d804:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
  80d80b:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:144
	int index = *position / fsbi->bytes_per_cluster;
  80d80c:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  80d813:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80d816:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  80d81a:	48 8b 72 18          	mov    rsi,QWORD PTR [rdx+0x18]
  80d81e:	48 99                	cqo    
  80d820:	48 f7 fe             	idiv   rsi
  80d823:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:145
	long offset = *position % fsbi->bytes_per_cluster;
  80d826:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  80d82d:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80d830:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  80d834:	48 8b 4a 18          	mov    rcx,QWORD PTR [rdx+0x18]
  80d838:	48 99                	cqo    
  80d83a:	48 f7 f9             	idiv   rcx
  80d83d:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:146
	char * buffer = (char *) kmalloc(fsbi->bytes_per_cluster, 0);
  80d841:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  80d845:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  80d849:	be 00 00 00 00       	mov    esi,0x0
  80d84e:	48 89 c7             	mov    rdi,rax
  80d851:	b8 00 00 00 00       	mov    eax,0x0
  80d856:	48 ba d4 18 80 00 00 	movabs rdx,0x8018d4
  80d85d:	00 00 00 
  80d860:	ff d2                	call   rdx
  80d862:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:148

	if(!cluster)
  80d866:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
  80d86b:	75 21                	jne    80d88e <FAT32_write+0x105>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:150
	{
		cluster = FAT32_find_available_cluster(fsbi);
  80d86d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  80d871:	48 89 c7             	mov    rdi,rax
  80d874:	48 b8 a9 d6 80 00 00 	movabs rax,0x80d6a9
  80d87b:	00 00 00 
  80d87e:	ff d0                	call   rax
  80d880:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:151
		flags = 1;
  80d884:	48 c7 45 d8 01 00 00 	mov    QWORD PTR [rbp-0x28],0x1
  80d88b:	00 
  80d88c:	eb 36                	jmp    80d8c4 <FAT32_write+0x13b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:154
	}
	else
		for(i = 0;i < index;i++)
  80d88e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
  80d895:	eb 25                	jmp    80d8bc <FAT32_write+0x133>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:155 (discriminator 3)
			cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
  80d897:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80d89b:	89 c2                	mov    edx,eax
  80d89d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  80d8a1:	89 d6                	mov    esi,edx
  80d8a3:	48 89 c7             	mov    rdi,rax
  80d8a6:	48 b8 25 d1 80 00 00 	movabs rax,0x80d125
  80d8ad:	00 00 00 
  80d8b0:	ff d0                	call   rax
  80d8b2:	89 c0                	mov    eax,eax
  80d8b4:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:154 (discriminator 3)
		for(i = 0;i < index;i++)
  80d8b8:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:154 (discriminator 1)
  80d8bc:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  80d8bf:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
  80d8c2:	7c d3                	jl     80d897 <FAT32_write+0x10e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:157

	if(!cluster)
  80d8c4:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
  80d8c9:	75 1f                	jne    80d8ea <FAT32_write+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:159
	{
        kmfree(buffer);
  80d8cb:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  80d8cf:	48 89 c7             	mov    rdi,rax
  80d8d2:	48 b8 e0 1b 80 00 00 	movabs rax,0x801be0
  80d8d9:	00 00 00 
  80d8dc:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:160
		return -ENOSPC;
  80d8de:	48 c7 c0 cc ff ff ff 	mov    rax,0xffffffffffffffcc
  80d8e5:	e9 97 03 00 00       	jmp    80dc81 <FAT32_write+0x4f8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:163
	}

	if(flags)
  80d8ea:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
  80d8ef:	74 54                	je     80d945 <FAT32_write+0x1bc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:165
	{
		finode->first_cluster = cluster;
  80d8f1:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  80d8f5:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  80d8f9:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:166
		filp->dentry->dir_inode->sb->sb_ops->write_inode(filp->dentry->dir_inode);
  80d8fc:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  80d900:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80d904:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
  80d908:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  80d90c:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  80d910:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
  80d914:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  80d918:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80d91c:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
  80d920:	48 89 c7             	mov    rdi,rax
  80d923:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:167
		DISK1_FAT32_write_FAT_Entry(fsbi,cluster,0x0ffffff8);
  80d925:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80d929:	89 c1                	mov    ecx,eax
  80d92b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  80d92f:	ba f8 ff ff 0f       	mov    edx,0xffffff8
  80d934:	89 ce                	mov    esi,ecx
  80d936:	48 89 c7             	mov    rdi,rax
  80d939:	48 b8 05 d2 80 00 00 	movabs rax,0x80d205
  80d940:	00 00 00 
  80d943:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:170
	}

	index = count;
  80d945:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  80d94c:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:174

	do
	{
		if(!flags)
  80d94f:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
  80d954:	0f 85 b5 00 00 00    	jne    80da0f <FAT32_write+0x286>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:176
		{
			memset(buffer,0,fsbi->bytes_per_cluster);
  80d95a:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  80d95e:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  80d962:	89 c2                	mov    edx,eax
  80d964:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  80d968:	be 00 00 00 00       	mov    esi,0x0
  80d96d:	48 89 c7             	mov    rdi,rax
  80d970:	48 b8 21 04 81 00 00 	movabs rax,0x810421
  80d977:	00 00 00 
  80d97a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:177
			sector = fsbi->Data_firstsector + (cluster - 2) * fsbi->sector_per_cluster;
  80d97c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  80d980:	48 8b 48 28          	mov    rcx,QWORD PTR [rax+0x28]
  80d984:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80d988:	48 8d 50 fe          	lea    rdx,[rax-0x2]
  80d98c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  80d990:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80d994:	48 0f af c2          	imul   rax,rdx
  80d998:	48 01 c8             	add    rax,rcx
  80d99b:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:178
            int r=request(DISK_MAJOR_MAJOR,DISKREQ_READ,sector,fsbi->sector_per_cluster,(unsigned char *)buffer);
  80d99f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  80d9a3:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80d9a7:	89 c1                	mov    ecx,eax
  80d9a9:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80d9ad:	89 c2                	mov    edx,eax
  80d9af:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  80d9b3:	49 89 c0             	mov    r8,rax
  80d9b6:	be 00 00 00 00       	mov    esi,0x0
  80d9bb:	bf 00 00 00 00       	mov    edi,0x0
  80d9c0:	48 b8 72 c1 80 00 00 	movabs rax,0x80c172
  80d9c7:	00 00 00 
  80d9ca:	ff d0                	call   rax
  80d9cc:	89 45 9c             	mov    DWORD PTR [rbp-0x64],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:180

			if(!chk_result(r))
  80d9cf:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
  80d9d2:	89 c7                	mov    edi,eax
  80d9d4:	48 b8 f6 c9 80 00 00 	movabs rax,0x80c9f6
  80d9db:	00 00 00 
  80d9de:	ff d0                	call   rax
  80d9e0:	85 c0                	test   eax,eax
  80d9e2:	75 2b                	jne    80da0f <FAT32_write+0x286>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:182
			{
				printf("FAT32 FS(write) read disk ERROR!!!!!!!!!!\n");
  80d9e4:	48 b8 38 90 81 00 00 	movabs rax,0x819038
  80d9eb:	00 00 00 
  80d9ee:	48 89 c7             	mov    rdi,rax
  80d9f1:	b8 00 00 00 00       	mov    eax,0x0
  80d9f6:	48 ba 97 11 80 00 00 	movabs rdx,0x801197
  80d9fd:	00 00 00 
  80da00:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:183
				retval = -EIO;
  80da02:	48 c7 45 e0 e3 ff ff 	mov    QWORD PTR [rbp-0x20],0xffffffffffffffe3
  80da09:	ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:184
				break;
  80da0a:	e9 e7 01 00 00       	jmp    80dbf6 <FAT32_write+0x46d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:188
			}
		}

		length = index <= fsbi->bytes_per_cluster - offset ? index : fsbi->bytes_per_cluster - offset;
  80da0f:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
  80da12:	48 63 d0             	movsxd rdx,eax
  80da15:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  80da19:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  80da1d:	48 2b 45 c8          	sub    rax,QWORD PTR [rbp-0x38]
  80da21:	48 39 c2             	cmp    rdx,rax
  80da24:	48 0f 4e c2          	cmovle rax,rdx
  80da28:	89 45 ac             	mov    DWORD PTR [rbp-0x54],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:190

		if((unsigned long)buf < MAX_TASKS)
  80da2b:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  80da2f:	48 83 f8 1f          	cmp    rax,0x1f
  80da33:	77 26                	ja     80da5b <FAT32_write+0x2d2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:191
			memcpy(buf,buffer + offset,length);
  80da35:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
  80da38:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  80da3c:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  80da40:	48 01 c1             	add    rcx,rax
  80da43:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  80da47:	48 89 ce             	mov    rsi,rcx
  80da4a:	48 89 c7             	mov    rdi,rax
  80da4d:	48 b8 72 03 81 00 00 	movabs rax,0x810372
  80da54:	00 00 00 
  80da57:	ff d0                	call   rax
  80da59:	eb 24                	jmp    80da7f <FAT32_write+0x2f6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:193
		else
			memcpy(buf,buffer + offset,length);
  80da5b:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
  80da5e:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
  80da62:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  80da66:	48 01 c1             	add    rcx,rax
  80da69:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
  80da6d:	48 89 ce             	mov    rsi,rcx
  80da70:	48 89 c7             	mov    rdi,rax
  80da73:	48 b8 72 03 81 00 00 	movabs rax,0x810372
  80da7a:	00 00 00 
  80da7d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:195

		int r=request(DISK_MAJOR_MAJOR,DISKREQ_WRITE,sector,fsbi->sector_per_cluster,(unsigned char *)buffer);
  80da7f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  80da83:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80da87:	89 c1                	mov    ecx,eax
  80da89:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80da8d:	89 c2                	mov    edx,eax
  80da8f:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  80da93:	49 89 c0             	mov    r8,rax
  80da96:	be 01 00 00 00       	mov    esi,0x1
  80da9b:	bf 00 00 00 00       	mov    edi,0x0
  80daa0:	48 b8 72 c1 80 00 00 	movabs rax,0x80c172
  80daa7:	00 00 00 
  80daaa:	ff d0                	call   rax
  80daac:	89 45 98             	mov    DWORD PTR [rbp-0x68],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:196
        if(!chk_result(r))
  80daaf:	8b 45 98             	mov    eax,DWORD PTR [rbp-0x68]
  80dab2:	89 c7                	mov    edi,eax
  80dab4:	48 b8 f6 c9 80 00 00 	movabs rax,0x80c9f6
  80dabb:	00 00 00 
  80dabe:	ff d0                	call   rax
  80dac0:	85 c0                	test   eax,eax
  80dac2:	75 2b                	jne    80daef <FAT32_write+0x366>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:198
		{
			printf("FAT32 FS(write) write disk ERROR!!!!!!!!!!\n");
  80dac4:	48 b8 68 90 81 00 00 	movabs rax,0x819068
  80dacb:	00 00 00 
  80dace:	48 89 c7             	mov    rdi,rax
  80dad1:	b8 00 00 00 00       	mov    eax,0x0
  80dad6:	48 ba 97 11 80 00 00 	movabs rdx,0x801197
  80dadd:	00 00 00 
  80dae0:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:199
			retval = -EIO;
  80dae2:	48 c7 45 e0 e3 ff ff 	mov    QWORD PTR [rbp-0x20],0xffffffffffffffe3
  80dae9:	ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:200
			break;
  80daea:	e9 07 01 00 00       	jmp    80dbf6 <FAT32_write+0x46d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:203
		}

		index -= length;
  80daef:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
  80daf2:	29 45 d4             	sub    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:204
		buf += length;
  80daf5:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
  80daf8:	48 98                	cdqe   
  80dafa:	48 01 45 80          	add    QWORD PTR [rbp-0x80],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:205
		offset -= offset;
  80dafe:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
  80db05:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:206
		*position += length;
  80db06:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  80db0d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  80db10:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
  80db13:	48 98                	cdqe   
  80db15:	48 01 c2             	add    rdx,rax
  80db18:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  80db1f:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:208

		if(index)
  80db22:	83 7d d4 00          	cmp    DWORD PTR [rbp-0x2c],0x0
  80db26:	0f 84 c9 00 00 00    	je     80dbf5 <FAT32_write+0x46c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:209
			next_cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
  80db2c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80db30:	89 c2                	mov    edx,eax
  80db32:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  80db36:	89 d6                	mov    esi,edx
  80db38:	48 89 c7             	mov    rdi,rax
  80db3b:	48 b8 25 d1 80 00 00 	movabs rax,0x80d125
  80db42:	00 00 00 
  80db45:	ff d0                	call   rax
  80db47:	89 c0                	mov    eax,eax
  80db49:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:213
		else
			break;

		if(next_cluster >= 0x0ffffff8)
  80db4d:	48 81 7d b0 f7 ff ff 	cmp    QWORD PTR [rbp-0x50],0xffffff7
  80db54:	0f 
  80db55:	0f 86 8e 00 00 00    	jbe    80dbe9 <FAT32_write+0x460>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:215
		{
			next_cluster = FAT32_find_available_cluster(fsbi);
  80db5b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  80db5f:	48 89 c7             	mov    rdi,rax
  80db62:	48 b8 a9 d6 80 00 00 	movabs rax,0x80d6a9
  80db69:	00 00 00 
  80db6c:	ff d0                	call   rax
  80db6e:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:216
			if(!next_cluster)
  80db72:	48 83 7d b0 00       	cmp    QWORD PTR [rbp-0x50],0x0
  80db77:	75 1f                	jne    80db98 <FAT32_write+0x40f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:218
			{
                kmfree(buffer);
  80db79:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  80db7d:	48 89 c7             	mov    rdi,rax
  80db80:	48 b8 e0 1b 80 00 00 	movabs rax,0x801be0
  80db87:	00 00 00 
  80db8a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:219
				return -ENOSPC;
  80db8c:	48 c7 c0 cc ff ff ff 	mov    rax,0xffffffffffffffcc
  80db93:	e9 e9 00 00 00       	jmp    80dc81 <FAT32_write+0x4f8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:222
			}			
				
			DISK1_FAT32_write_FAT_Entry(fsbi,cluster,next_cluster);
  80db98:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  80db9c:	89 c2                	mov    edx,eax
  80db9e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80dba2:	89 c1                	mov    ecx,eax
  80dba4:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  80dba8:	89 ce                	mov    esi,ecx
  80dbaa:	48 89 c7             	mov    rdi,rax
  80dbad:	48 b8 05 d2 80 00 00 	movabs rax,0x80d205
  80dbb4:	00 00 00 
  80dbb7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:223
			DISK1_FAT32_write_FAT_Entry(fsbi,next_cluster,0x0ffffff8);
  80dbb9:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  80dbbd:	89 c1                	mov    ecx,eax
  80dbbf:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  80dbc3:	ba f8 ff ff 0f       	mov    edx,0xffffff8
  80dbc8:	89 ce                	mov    esi,ecx
  80dbca:	48 89 c7             	mov    rdi,rax
  80dbcd:	48 b8 05 d2 80 00 00 	movabs rax,0x80d205
  80dbd4:	00 00 00 
  80dbd7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:224
			cluster = next_cluster;
  80dbd9:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  80dbdd:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:225
			flags = 1;
  80dbe1:	48 c7 45 d8 01 00 00 	mov    QWORD PTR [rbp-0x28],0x1
  80dbe8:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:228
		}

	}while(index);
  80dbe9:	83 7d d4 00          	cmp    DWORD PTR [rbp-0x2c],0x0
  80dbed:	0f 85 5c fd ff ff    	jne    80d94f <FAT32_write+0x1c6>
  80dbf3:	eb 01                	jmp    80dbf6 <FAT32_write+0x46d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:211
			break;
  80dbf5:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:230

	if(*position > filp->dentry->dir_inode->file_size)
  80dbf6:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  80dbfd:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80dc00:	48 89 c2             	mov    rdx,rax
  80dc03:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  80dc07:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80dc0b:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
  80dc0f:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80dc12:	48 39 c2             	cmp    rdx,rax
  80dc15:	76 42                	jbe    80dc59 <FAT32_write+0x4d0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:232
	{
		filp->dentry->dir_inode->file_size = *position;
  80dc17:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
  80dc1e:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  80dc21:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  80dc25:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80dc29:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
  80dc2d:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:233
		filp->dentry->dir_inode->sb->sb_ops->write_inode(filp->dentry->dir_inode);
  80dc30:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  80dc34:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80dc38:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
  80dc3c:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  80dc40:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  80dc44:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
  80dc48:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
  80dc4c:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80dc50:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
  80dc54:	48 89 c7             	mov    rdi,rax
  80dc57:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:236
	}

    kmfree(buffer);
  80dc59:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  80dc5d:	48 89 c7             	mov    rdi,rax
  80dc60:	48 b8 e0 1b 80 00 00 	movabs rax,0x801be0
  80dc67:	00 00 00 
  80dc6a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:237
	if(!index)
  80dc6c:	83 7d d4 00          	cmp    DWORD PTR [rbp-0x2c],0x0
  80dc70:	75 0b                	jne    80dc7d <FAT32_write+0x4f4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:238
		retval = count;
  80dc72:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
  80dc79:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:239
	return retval;
  80dc7d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:240
}
  80dc81:	c9                   	leave  
  80dc82:	c3                   	ret    

000000000080dc83 <FAT32_lseek>:
FAT32_lseek():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:244


long FAT32_lseek(struct file * filp,long offset,long origin)
{
  80dc83:	f3 0f 1e fa          	endbr64 
  80dc87:	55                   	push   rbp
  80dc88:	48 89 e5             	mov    rbp,rsp
  80dc8b:	48 83 ec 30          	sub    rsp,0x30
  80dc8f:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  80dc93:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  80dc97:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:245
	struct index_node *inode = filp->dentry->dir_inode;
  80dc9b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80dc9f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80dca3:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
  80dca7:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:246
	long pos = 0;
  80dcab:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
  80dcb2:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:248

	switch(origin)
  80dcb3:	48 83 7d d8 02       	cmp    QWORD PTR [rbp-0x28],0x2
  80dcb8:	74 21                	je     80dcdb <FAT32_lseek+0x58>
  80dcba:	48 83 7d d8 02       	cmp    QWORD PTR [rbp-0x28],0x2
  80dcbf:	7f 4a                	jg     80dd0b <FAT32_lseek+0x88>
  80dcc1:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
  80dcc6:	74 09                	je     80dcd1 <FAT32_lseek+0x4e>
  80dcc8:	48 83 7d d8 01       	cmp    QWORD PTR [rbp-0x28],0x1
  80dccd:	74 20                	je     80dcef <FAT32_lseek+0x6c>
  80dccf:	eb 3a                	jmp    80dd0b <FAT32_lseek+0x88>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:251
	{
		case SEEK_SET:
				pos = offset;
  80dcd1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  80dcd5:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:252
			break;
  80dcd9:	eb 39                	jmp    80dd14 <FAT32_lseek+0x91>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:255

		case SEEK_CUR:
				pos =  filp->position + offset;
  80dcdb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80dcdf:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  80dce2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  80dce6:	48 01 d0             	add    rax,rdx
  80dce9:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:256
			break;
  80dced:	eb 25                	jmp    80dd14 <FAT32_lseek+0x91>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:259

		case SEEK_END:
				pos = filp->dentry->dir_inode->file_size + offset;
  80dcef:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80dcf3:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80dcf7:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
  80dcfb:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  80dcfe:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  80dd02:	48 01 d0             	add    rax,rdx
  80dd05:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:260
			break;
  80dd09:	eb 09                	jmp    80dd14 <FAT32_lseek+0x91>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:263

		default:
			return -EINVAL;
  80dd0b:	48 c7 c0 e4 ff ff ff 	mov    rax,0xffffffffffffffe4
  80dd12:	eb 5f                	jmp    80dd73 <FAT32_lseek+0xf0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:267
			break;
	}

	if(pos < 0 || pos > filp->dentry->dir_inode->file_size)
  80dd14:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
  80dd19:	78 18                	js     80dd33 <FAT32_lseek+0xb0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:267 (discriminator 1)
  80dd1b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80dd1f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80dd23:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
  80dd27:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  80dd2a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80dd2e:	48 39 c2             	cmp    rdx,rax
  80dd31:	73 09                	jae    80dd3c <FAT32_lseek+0xb9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:268
		return -EOVERFLOW;
  80dd33:	48 c7 c0 bf ff ff ff 	mov    rax,0xffffffffffffffbf
  80dd3a:	eb 37                	jmp    80dd73 <FAT32_lseek+0xf0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:270

	filp->position = pos;
  80dd3c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80dd40:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  80dd44:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:271
	printf("FAT32 FS(lseek) alert position:%d\n",filp->position);
  80dd47:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80dd4b:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80dd4e:	48 89 c6             	mov    rsi,rax
  80dd51:	48 b8 98 90 81 00 00 	movabs rax,0x819098
  80dd58:	00 00 00 
  80dd5b:	48 89 c7             	mov    rdi,rax
  80dd5e:	b8 00 00 00 00       	mov    eax,0x0
  80dd63:	48 ba 97 11 80 00 00 	movabs rdx,0x801197
  80dd6a:	00 00 00 
  80dd6d:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:273

	return pos;
  80dd6f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:274
}
  80dd73:	c9                   	leave  
  80dd74:	c3                   	ret    

000000000080dd75 <FAT32_ioctl>:
FAT32_ioctl():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:278


long FAT32_ioctl(struct index_node * inode,struct file * filp,unsigned long cmd,unsigned long arg)
{}
  80dd75:	f3 0f 1e fa          	endbr64 
  80dd79:	55                   	push   rbp
  80dd7a:	48 89 e5             	mov    rbp,rsp
  80dd7d:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  80dd81:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  80dd85:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  80dd89:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  80dd8d:	90                   	nop
  80dd8e:	5d                   	pop    rbp
  80dd8f:	c3                   	ret    

000000000080dd90 <FAT32_readdir>:
FAT32_readdir():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:281

long FAT32_readdir(struct file * filp,void * dirent,filldir_t filler)
{
  80dd90:	f3 0f 1e fa          	endbr64 
  80dd94:	55                   	push   rbp
  80dd95:	48 89 e5             	mov    rbp,rsp
  80dd98:	48 83 c4 80          	add    rsp,0xffffffffffffff80
  80dd9c:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
  80dda0:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
  80dda4:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:282
	struct FAT32_inode_info * finode = filp->dentry->dir_inode->private_index_info;
  80dda8:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  80ddac:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80ddb0:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
  80ddb4:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
  80ddb8:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:283
	struct FAT32_sb_info * fsbi = filp->dentry->dir_inode->sb->private_sb_info;
  80ddbc:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  80ddc0:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80ddc4:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
  80ddc8:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  80ddcc:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80ddd0:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:285

	unsigned int cluster = 0;
  80ddd4:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:286
	unsigned long sector = 0;
  80dddb:	48 c7 45 b0 00 00 00 	mov    QWORD PTR [rbp-0x50],0x0
  80dde2:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:287
	unsigned char * buf =NULL; 
  80dde3:	48 c7 45 a8 00 00 00 	mov    QWORD PTR [rbp-0x58],0x0
  80ddea:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:288
	char *name = NULL;
  80ddeb:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
  80ddf2:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:289
	int namelen = 0;
  80ddf3:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:290
	int i = 0,j = 0,x = 0,y = 0;
  80ddfa:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
  80de01:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
  80de08:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
  80de0f:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:291
	struct FAT32_Directory * tmpdentry = NULL;
  80de16:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
  80de1d:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:292
	struct FAT32_LongDirectory * tmpldentry = NULL;
  80de1e:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
  80de25:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:294

	buf = kmalloc(fsbi->bytes_per_cluster, 0);
  80de26:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  80de2a:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  80de2e:	be 00 00 00 00       	mov    esi,0x0
  80de33:	48 89 c7             	mov    rdi,rax
  80de36:	b8 00 00 00 00       	mov    eax,0x0
  80de3b:	48 ba d4 18 80 00 00 	movabs rdx,0x8018d4
  80de42:	00 00 00 
  80de45:	ff d2                	call   rdx
  80de47:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:296

	cluster = finode->first_cluster;
  80de4b:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  80de4f:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80de52:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:298

	j = filp->position/fsbi->bytes_per_cluster;
  80de55:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  80de59:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80de5c:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  80de60:	48 8b 72 18          	mov    rsi,QWORD PTR [rdx+0x18]
  80de64:	48 99                	cqo    
  80de66:	48 f7 fe             	idiv   rsi
  80de69:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:300
	
	for(i = 0;i<j;i++)
  80de6c:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
  80de73:	eb 50                	jmp    80dec5 <FAT32_readdir+0x135>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:302
	{
		cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
  80de75:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
  80de78:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  80de7c:	89 d6                	mov    esi,edx
  80de7e:	48 89 c7             	mov    rdi,rax
  80de81:	48 b8 25 d1 80 00 00 	movabs rax,0x80d125
  80de88:	00 00 00 
  80de8b:	ff d0                	call   rax
  80de8d:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:303
		if(cluster > 0x0ffffff7)
  80de90:	81 7d fc f7 ff ff 0f 	cmp    DWORD PTR [rbp-0x4],0xffffff7
  80de97:	76 28                	jbe    80dec1 <FAT32_readdir+0x131>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:305
		{
			printf("FAT32 FS(readdir) cluster didn`t exist\n");
  80de99:	48 b8 c0 90 81 00 00 	movabs rax,0x8190c0
  80dea0:	00 00 00 
  80dea3:	48 89 c7             	mov    rdi,rax
  80dea6:	b8 00 00 00 00       	mov    eax,0x0
  80deab:	48 ba 97 11 80 00 00 	movabs rdx,0x801197
  80deb2:	00 00 00 
  80deb5:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:306
			return NULL;
  80deb7:	b8 00 00 00 00       	mov    eax,0x0
  80debc:	e9 d4 05 00 00       	jmp    80e495 <FAT32_readdir+0x705>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:300 (discriminator 2)
	for(i = 0;i<j;i++)
  80dec1:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:300 (discriminator 1)
  80dec5:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
  80dec8:	3b 45 e4             	cmp    eax,DWORD PTR [rbp-0x1c]
  80decb:	7c a8                	jl     80de75 <FAT32_readdir+0xe5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:310
		}
	}

next_cluster:
  80decd:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:311
	sector = fsbi->Data_firstsector + (cluster - 2) * fsbi->sector_per_cluster;
  80dece:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  80ded2:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
  80ded6:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80ded9:	83 e8 02             	sub    eax,0x2
  80dedc:	89 c1                	mov    ecx,eax
  80dede:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  80dee2:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80dee6:	48 0f af c1          	imul   rax,rcx
  80deea:	48 01 d0             	add    rax,rdx
  80deed:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:312
	int r=request(DISK_MAJOR_MAJOR,DISKREQ_READ,sector,fsbi->sector_per_cluster,(unsigned char *)buf);
  80def1:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  80def5:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80def9:	89 c1                	mov    ecx,eax
  80defb:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  80deff:	89 c2                	mov    edx,eax
  80df01:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  80df05:	49 89 c0             	mov    r8,rax
  80df08:	be 00 00 00 00       	mov    esi,0x0
  80df0d:	bf 00 00 00 00       	mov    edi,0x0
  80df12:	48 b8 72 c1 80 00 00 	movabs rax,0x80c172
  80df19:	00 00 00 
  80df1c:	ff d0                	call   rax
  80df1e:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:313
    if(!chk_result(r))
  80df21:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
  80df24:	89 c7                	mov    edi,eax
  80df26:	48 b8 f6 c9 80 00 00 	movabs rax,0x80c9f6
  80df2d:	00 00 00 
  80df30:	ff d0                	call   rax
  80df32:	85 c0                	test   eax,eax
  80df34:	75 3b                	jne    80df71 <FAT32_readdir+0x1e1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:315
	{
		printf("FAT32 FS(readdir) read disk ERROR!!!!!!!!!!\n");
  80df36:	48 b8 e8 90 81 00 00 	movabs rax,0x8190e8
  80df3d:	00 00 00 
  80df40:	48 89 c7             	mov    rdi,rax
  80df43:	b8 00 00 00 00       	mov    eax,0x0
  80df48:	48 ba 97 11 80 00 00 	movabs rdx,0x801197
  80df4f:	00 00 00 
  80df52:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:316
        kmfree(buf);
  80df54:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  80df58:	48 89 c7             	mov    rdi,rax
  80df5b:	48 b8 e0 1b 80 00 00 	movabs rax,0x801be0
  80df62:	00 00 00 
  80df65:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:317
		return NULL;
  80df67:	b8 00 00 00 00       	mov    eax,0x0
  80df6c:	e9 24 05 00 00       	jmp    80e495 <FAT32_readdir+0x705>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:320
	}

	tmpdentry = (struct FAT32_Directory *)(buf + filp->position%fsbi->bytes_per_cluster);
  80df71:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  80df75:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80df78:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  80df7c:	48 8b 4a 18          	mov    rcx,QWORD PTR [rdx+0x18]
  80df80:	48 99                	cqo    
  80df82:	48 f7 f9             	idiv   rcx
  80df85:	48 89 d0             	mov    rax,rdx
  80df88:	48 89 c2             	mov    rdx,rax
  80df8b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  80df8f:	48 01 d0             	add    rax,rdx
  80df92:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:322

	for(i = filp->position%fsbi->bytes_per_cluster;i < fsbi->bytes_per_cluster;i += 32,tmpdentry++,filp->position += 32)
  80df96:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  80df9a:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80df9d:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  80dfa1:	48 8b 4a 18          	mov    rcx,QWORD PTR [rdx+0x18]
  80dfa5:	48 99                	cqo    
  80dfa7:	48 f7 f9             	idiv   rcx
  80dfaa:	48 89 d0             	mov    rax,rdx
  80dfad:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
  80dfb0:	e9 4b 04 00 00       	jmp    80e400 <FAT32_readdir+0x670>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:324
	{
		if(tmpdentry->DIR_Attr == ATTR_LONG_NAME)
  80dfb5:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  80dfb9:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
  80dfbd:	3c 0f                	cmp    al,0xf
  80dfbf:	0f 84 1c 04 00 00    	je     80e3e1 <FAT32_readdir+0x651>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:326
			continue;
		if(tmpdentry->DIR_Name[0] == 0xe5 || tmpdentry->DIR_Name[0] == 0x00 || tmpdentry->DIR_Name[0] == 0x05)
  80dfc5:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  80dfc9:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  80dfcc:	3c e5                	cmp    al,0xe5
  80dfce:	0f 84 10 04 00 00    	je     80e3e4 <FAT32_readdir+0x654>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:326 (discriminator 2)
  80dfd4:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  80dfd8:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  80dfdb:	84 c0                	test   al,al
  80dfdd:	0f 84 01 04 00 00    	je     80e3e4 <FAT32_readdir+0x654>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:326 (discriminator 4)
  80dfe3:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  80dfe7:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  80dfea:	3c 05                	cmp    al,0x5
  80dfec:	0f 84 f2 03 00 00    	je     80e3e4 <FAT32_readdir+0x654>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:329
			continue;

		namelen = 0;
  80dff2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:330
		tmpldentry = (struct FAT32_LongDirectory *)tmpdentry-1;
  80dff9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  80dffd:	48 83 e8 20          	sub    rax,0x20
  80e001:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:332

		if(tmpldentry->LDIR_Attr == ATTR_LONG_NAME && tmpldentry->LDIR_Ord != 0xe5 && tmpldentry->LDIR_Ord != 0x00 && tmpldentry->LDIR_Ord != 0x05)
  80e005:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80e009:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
  80e00d:	3c 0f                	cmp    al,0xf
  80e00f:	0f 85 38 02 00 00    	jne    80e24d <FAT32_readdir+0x4bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:332 (discriminator 1)
  80e015:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80e019:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  80e01c:	3c e5                	cmp    al,0xe5
  80e01e:	0f 84 29 02 00 00    	je     80e24d <FAT32_readdir+0x4bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:332 (discriminator 2)
  80e024:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80e028:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  80e02b:	84 c0                	test   al,al
  80e02d:	0f 84 1a 02 00 00    	je     80e24d <FAT32_readdir+0x4bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:332 (discriminator 3)
  80e033:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80e037:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  80e03a:	3c 05                	cmp    al,0x5
  80e03c:	0f 84 0b 02 00 00    	je     80e24d <FAT32_readdir+0x4bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:334
		{
			j = 0;
  80e042:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:336
			//long file/dir name read
			while(tmpldentry->LDIR_Attr == ATTR_LONG_NAME  && tmpldentry->LDIR_Ord != 0xe5 && tmpldentry->LDIR_Ord != 0x00 && tmpldentry->LDIR_Ord != 0x05)
  80e049:	eb 1a                	jmp    80e065 <FAT32_readdir+0x2d5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:338
			{
				j++;
  80e04b:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:339
				if(tmpldentry->LDIR_Ord & 0x40)
  80e04f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80e053:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  80e056:	0f b6 c0             	movzx  eax,al
  80e059:	83 e0 40             	and    eax,0x40
  80e05c:	85 c0                	test   eax,eax
  80e05e:	75 34                	jne    80e094 <FAT32_readdir+0x304>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:341
					break;
				tmpldentry --;
  80e060:	48 83 6d c8 20       	sub    QWORD PTR [rbp-0x38],0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:336
			while(tmpldentry->LDIR_Attr == ATTR_LONG_NAME  && tmpldentry->LDIR_Ord != 0xe5 && tmpldentry->LDIR_Ord != 0x00 && tmpldentry->LDIR_Ord != 0x05)
  80e065:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80e069:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
  80e06d:	3c 0f                	cmp    al,0xf
  80e06f:	75 24                	jne    80e095 <FAT32_readdir+0x305>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:336 (discriminator 1)
  80e071:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80e075:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  80e078:	3c e5                	cmp    al,0xe5
  80e07a:	74 19                	je     80e095 <FAT32_readdir+0x305>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:336 (discriminator 2)
  80e07c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80e080:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  80e083:	84 c0                	test   al,al
  80e085:	74 0e                	je     80e095 <FAT32_readdir+0x305>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:336 (discriminator 3)
  80e087:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80e08b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  80e08e:	3c 05                	cmp    al,0x5
  80e090:	75 b9                	jne    80e04b <FAT32_readdir+0x2bb>
  80e092:	eb 01                	jmp    80e095 <FAT32_readdir+0x305>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:340
					break;
  80e094:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:344
			}

			name = kmalloc(j * 13 + 1, 0);
  80e095:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
  80e098:	89 d0                	mov    eax,edx
  80e09a:	01 c0                	add    eax,eax
  80e09c:	01 d0                	add    eax,edx
  80e09e:	c1 e0 02             	shl    eax,0x2
  80e0a1:	01 d0                	add    eax,edx
  80e0a3:	83 c0 01             	add    eax,0x1
  80e0a6:	be 00 00 00 00       	mov    esi,0x0
  80e0ab:	89 c7                	mov    edi,eax
  80e0ad:	b8 00 00 00 00       	mov    eax,0x0
  80e0b2:	48 ba d4 18 80 00 00 	movabs rdx,0x8018d4
  80e0b9:	00 00 00 
  80e0bc:	ff d2                	call   rdx
  80e0be:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:345
			memset(name,0,j*13+1);
  80e0c2:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
  80e0c5:	89 d0                	mov    eax,edx
  80e0c7:	01 c0                	add    eax,eax
  80e0c9:	01 d0                	add    eax,edx
  80e0cb:	c1 e0 02             	shl    eax,0x2
  80e0ce:	01 d0                	add    eax,edx
  80e0d0:	83 c0 01             	add    eax,0x1
  80e0d3:	89 c2                	mov    edx,eax
  80e0d5:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80e0d9:	be 00 00 00 00       	mov    esi,0x0
  80e0de:	48 89 c7             	mov    rdi,rax
  80e0e1:	48 b8 21 04 81 00 00 	movabs rax,0x810421
  80e0e8:	00 00 00 
  80e0eb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:346
			tmpldentry = (struct FAT32_LongDirectory *)tmpdentry-1;
  80e0ed:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  80e0f1:	48 83 e8 20          	sub    rax,0x20
  80e0f5:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:348

			for(x = 0;x<j;x++,tmpldentry --)
  80e0f9:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
  80e100:	e9 37 01 00 00       	jmp    80e23c <FAT32_readdir+0x4ac>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:350
			{
				for(y = 0;y<5;y++)
  80e105:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
  80e10c:	eb 53                	jmp    80e161 <FAT32_readdir+0x3d1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:351
					if(tmpldentry->LDIR_Name1[y] != 0xffff && tmpldentry->LDIR_Name1[y] != 0x0000)
  80e10e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80e112:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
  80e115:	48 63 d2             	movsxd rdx,edx
  80e118:	0f b7 44 50 01       	movzx  eax,WORD PTR [rax+rdx*2+0x1]
  80e11d:	66 83 f8 ff          	cmp    ax,0xffff
  80e121:	74 3a                	je     80e15d <FAT32_readdir+0x3cd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:351 (discriminator 1)
  80e123:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80e127:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
  80e12a:	48 63 d2             	movsxd rdx,edx
  80e12d:	0f b7 44 50 01       	movzx  eax,WORD PTR [rax+rdx*2+0x1]
  80e132:	66 85 c0             	test   ax,ax
  80e135:	74 26                	je     80e15d <FAT32_readdir+0x3cd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:352
						name[namelen++] = (char)tmpldentry->LDIR_Name1[y];
  80e137:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80e13b:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
  80e13e:	48 63 d2             	movsxd rdx,edx
  80e141:	0f b7 4c 50 01       	movzx  ecx,WORD PTR [rax+rdx*2+0x1]
  80e146:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  80e149:	8d 50 01             	lea    edx,[rax+0x1]
  80e14c:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
  80e14f:	48 63 d0             	movsxd rdx,eax
  80e152:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80e156:	48 01 d0             	add    rax,rdx
  80e159:	89 ca                	mov    edx,ecx
  80e15b:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:350 (discriminator 2)
				for(y = 0;y<5;y++)
  80e15d:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:350 (discriminator 1)
  80e161:	83 7d dc 04          	cmp    DWORD PTR [rbp-0x24],0x4
  80e165:	7e a7                	jle    80e10e <FAT32_readdir+0x37e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:354

				for(y = 0;y<6;y++)
  80e167:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
  80e16e:	eb 53                	jmp    80e1c3 <FAT32_readdir+0x433>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:355
					if(tmpldentry->LDIR_Name2[y] != 0xffff && tmpldentry->LDIR_Name1[y] != 0x0000)
  80e170:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80e174:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
  80e177:	48 63 d2             	movsxd rdx,edx
  80e17a:	0f b7 44 50 0e       	movzx  eax,WORD PTR [rax+rdx*2+0xe]
  80e17f:	66 83 f8 ff          	cmp    ax,0xffff
  80e183:	74 3a                	je     80e1bf <FAT32_readdir+0x42f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:355 (discriminator 1)
  80e185:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80e189:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
  80e18c:	48 63 d2             	movsxd rdx,edx
  80e18f:	0f b7 44 50 01       	movzx  eax,WORD PTR [rax+rdx*2+0x1]
  80e194:	66 85 c0             	test   ax,ax
  80e197:	74 26                	je     80e1bf <FAT32_readdir+0x42f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:356
						name[namelen++] = (char)tmpldentry->LDIR_Name2[y];
  80e199:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80e19d:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
  80e1a0:	48 63 d2             	movsxd rdx,edx
  80e1a3:	0f b7 4c 50 0e       	movzx  ecx,WORD PTR [rax+rdx*2+0xe]
  80e1a8:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  80e1ab:	8d 50 01             	lea    edx,[rax+0x1]
  80e1ae:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
  80e1b1:	48 63 d0             	movsxd rdx,eax
  80e1b4:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80e1b8:	48 01 d0             	add    rax,rdx
  80e1bb:	89 ca                	mov    edx,ecx
  80e1bd:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:354 (discriminator 2)
				for(y = 0;y<6;y++)
  80e1bf:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:354 (discriminator 1)
  80e1c3:	83 7d dc 05          	cmp    DWORD PTR [rbp-0x24],0x5
  80e1c7:	7e a7                	jle    80e170 <FAT32_readdir+0x3e0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:358

				for(y = 0;y<2;y++)
  80e1c9:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
  80e1d0:	eb 5b                	jmp    80e22d <FAT32_readdir+0x49d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:359
					if(tmpldentry->LDIR_Name3[y] != 0xffff && tmpldentry->LDIR_Name1[y] != 0x0000)
  80e1d2:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80e1d6:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
  80e1d9:	48 63 d2             	movsxd rdx,edx
  80e1dc:	48 83 c2 08          	add    rdx,0x8
  80e1e0:	0f b7 44 50 0c       	movzx  eax,WORD PTR [rax+rdx*2+0xc]
  80e1e5:	66 83 f8 ff          	cmp    ax,0xffff
  80e1e9:	74 3e                	je     80e229 <FAT32_readdir+0x499>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:359 (discriminator 1)
  80e1eb:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80e1ef:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
  80e1f2:	48 63 d2             	movsxd rdx,edx
  80e1f5:	0f b7 44 50 01       	movzx  eax,WORD PTR [rax+rdx*2+0x1]
  80e1fa:	66 85 c0             	test   ax,ax
  80e1fd:	74 2a                	je     80e229 <FAT32_readdir+0x499>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:360
						name[namelen++] = (char)tmpldentry->LDIR_Name3[y];
  80e1ff:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80e203:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
  80e206:	48 63 d2             	movsxd rdx,edx
  80e209:	48 83 c2 08          	add    rdx,0x8
  80e20d:	0f b7 4c 50 0c       	movzx  ecx,WORD PTR [rax+rdx*2+0xc]
  80e212:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  80e215:	8d 50 01             	lea    edx,[rax+0x1]
  80e218:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
  80e21b:	48 63 d0             	movsxd rdx,eax
  80e21e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80e222:	48 01 d0             	add    rax,rdx
  80e225:	89 ca                	mov    edx,ecx
  80e227:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:358 (discriminator 2)
				for(y = 0;y<2;y++)
  80e229:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:358 (discriminator 1)
  80e22d:	83 7d dc 01          	cmp    DWORD PTR [rbp-0x24],0x1
  80e231:	7e 9f                	jle    80e1d2 <FAT32_readdir+0x442>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:348 (discriminator 2)
			for(x = 0;x<j;x++,tmpldentry --)
  80e233:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
  80e237:	48 83 6d c8 20       	sub    QWORD PTR [rbp-0x38],0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:348 (discriminator 1)
  80e23c:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  80e23f:	3b 45 e4             	cmp    eax,DWORD PTR [rbp-0x1c]
  80e242:	0f 8c bd fe ff ff    	jl     80e105 <FAT32_readdir+0x375>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:362
			}
			goto find_lookup_success;
  80e248:	e9 11 02 00 00       	jmp    80e45e <FAT32_readdir+0x6ce>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:365
		}

		name = kmalloc(15, 0);
  80e24d:	be 00 00 00 00       	mov    esi,0x0
  80e252:	bf 0f 00 00 00       	mov    edi,0xf
  80e257:	b8 00 00 00 00       	mov    eax,0x0
  80e25c:	48 ba d4 18 80 00 00 	movabs rdx,0x8018d4
  80e263:	00 00 00 
  80e266:	ff d2                	call   rdx
  80e268:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:366
		memset(name,0,15);
  80e26c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80e270:	ba 0f 00 00 00       	mov    edx,0xf
  80e275:	be 00 00 00 00       	mov    esi,0x0
  80e27a:	48 89 c7             	mov    rdi,rax
  80e27d:	48 b8 21 04 81 00 00 	movabs rax,0x810421
  80e284:	00 00 00 
  80e287:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:368
		//short file/dir base name compare
		for(x=0;x<8;x++)
  80e289:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
  80e290:	eb 74                	jmp    80e306 <FAT32_readdir+0x576>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:370
		{
			if(tmpdentry->DIR_Name[x] == ' ')
  80e292:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  80e296:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  80e299:	48 98                	cdqe   
  80e29b:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
  80e29f:	3c 20                	cmp    al,0x20
  80e2a1:	74 6b                	je     80e30e <FAT32_readdir+0x57e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:372
				break;
			if(tmpdentry->DIR_NTRes & LOWERCASE_BASE)
  80e2a3:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  80e2a7:	0f b6 40 0c          	movzx  eax,BYTE PTR [rax+0xc]
  80e2ab:	0f b6 c0             	movzx  eax,al
  80e2ae:	83 e0 08             	and    eax,0x8
  80e2b1:	85 c0                	test   eax,eax
  80e2b3:	74 29                	je     80e2de <FAT32_readdir+0x54e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:373
				name[namelen++] = tmpdentry->DIR_Name[x] + 32;
  80e2b5:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  80e2b9:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  80e2bc:	48 98                	cdqe   
  80e2be:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
  80e2c2:	8d 48 20             	lea    ecx,[rax+0x20]
  80e2c5:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  80e2c8:	8d 50 01             	lea    edx,[rax+0x1]
  80e2cb:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
  80e2ce:	48 63 d0             	movsxd rdx,eax
  80e2d1:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80e2d5:	48 01 d0             	add    rax,rdx
  80e2d8:	89 ca                	mov    edx,ecx
  80e2da:	88 10                	mov    BYTE PTR [rax],dl
  80e2dc:	eb 24                	jmp    80e302 <FAT32_readdir+0x572>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:375
			else
				name[namelen++] = tmpdentry->DIR_Name[x];
  80e2de:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  80e2e2:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  80e2e5:	48 98                	cdqe   
  80e2e7:	0f b6 0c 02          	movzx  ecx,BYTE PTR [rdx+rax*1]
  80e2eb:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  80e2ee:	8d 50 01             	lea    edx,[rax+0x1]
  80e2f1:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
  80e2f4:	48 63 d0             	movsxd rdx,eax
  80e2f7:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80e2fb:	48 01 d0             	add    rax,rdx
  80e2fe:	89 ca                	mov    edx,ecx
  80e300:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:368 (discriminator 2)
		for(x=0;x<8;x++)
  80e302:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:368 (discriminator 1)
  80e306:	83 7d e0 07          	cmp    DWORD PTR [rbp-0x20],0x7
  80e30a:	7e 86                	jle    80e292 <FAT32_readdir+0x502>
  80e30c:	eb 01                	jmp    80e30f <FAT32_readdir+0x57f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:371
				break;
  80e30e:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:378
		}

		if(tmpdentry->DIR_Attr & ATTR_DIRECTORY)
  80e30f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  80e313:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
  80e317:	0f b6 c0             	movzx  eax,al
  80e31a:	83 e0 10             	and    eax,0x10
  80e31d:	85 c0                	test   eax,eax
  80e31f:	0f 85 35 01 00 00    	jne    80e45a <FAT32_readdir+0x6ca>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:381
			goto find_lookup_success;

		name[namelen++] = '.';
  80e325:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  80e328:	8d 50 01             	lea    edx,[rax+0x1]
  80e32b:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
  80e32e:	48 63 d0             	movsxd rdx,eax
  80e331:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80e335:	48 01 d0             	add    rax,rdx
  80e338:	c6 00 2e             	mov    BYTE PTR [rax],0x2e
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:384

		//short file ext name compare
		for(x=8;x<11;x++)
  80e33b:	c7 45 e0 08 00 00 00 	mov    DWORD PTR [rbp-0x20],0x8
  80e342:	eb 74                	jmp    80e3b8 <FAT32_readdir+0x628>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:386
		{
			if(tmpdentry->DIR_Name[x] == ' ')
  80e344:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  80e348:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  80e34b:	48 98                	cdqe   
  80e34d:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
  80e351:	3c 20                	cmp    al,0x20
  80e353:	74 6b                	je     80e3c0 <FAT32_readdir+0x630>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:388
				break;
			if(tmpdentry->DIR_NTRes & LOWERCASE_EXT)
  80e355:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  80e359:	0f b6 40 0c          	movzx  eax,BYTE PTR [rax+0xc]
  80e35d:	0f b6 c0             	movzx  eax,al
  80e360:	83 e0 10             	and    eax,0x10
  80e363:	85 c0                	test   eax,eax
  80e365:	74 29                	je     80e390 <FAT32_readdir+0x600>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:389
				name[namelen++] = tmpdentry->DIR_Name[x] + 32;
  80e367:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  80e36b:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  80e36e:	48 98                	cdqe   
  80e370:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
  80e374:	8d 48 20             	lea    ecx,[rax+0x20]
  80e377:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  80e37a:	8d 50 01             	lea    edx,[rax+0x1]
  80e37d:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
  80e380:	48 63 d0             	movsxd rdx,eax
  80e383:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80e387:	48 01 d0             	add    rax,rdx
  80e38a:	89 ca                	mov    edx,ecx
  80e38c:	88 10                	mov    BYTE PTR [rax],dl
  80e38e:	eb 24                	jmp    80e3b4 <FAT32_readdir+0x624>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:391
			else
				name[namelen++] = tmpdentry->DIR_Name[x];
  80e390:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
  80e394:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
  80e397:	48 98                	cdqe   
  80e399:	0f b6 0c 02          	movzx  ecx,BYTE PTR [rdx+rax*1]
  80e39d:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  80e3a0:	8d 50 01             	lea    edx,[rax+0x1]
  80e3a3:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
  80e3a6:	48 63 d0             	movsxd rdx,eax
  80e3a9:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80e3ad:	48 01 d0             	add    rax,rdx
  80e3b0:	89 ca                	mov    edx,ecx
  80e3b2:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:384 (discriminator 2)
		for(x=8;x<11;x++)
  80e3b4:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:384 (discriminator 1)
  80e3b8:	83 7d e0 0a          	cmp    DWORD PTR [rbp-0x20],0xa
  80e3bc:	7e 86                	jle    80e344 <FAT32_readdir+0x5b4>
  80e3be:	eb 01                	jmp    80e3c1 <FAT32_readdir+0x631>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:387
				break;
  80e3c0:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:393
		}
		if(x == 8)
  80e3c1:	83 7d e0 08          	cmp    DWORD PTR [rbp-0x20],0x8
  80e3c5:	0f 85 92 00 00 00    	jne    80e45d <FAT32_readdir+0x6cd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:394
			name[--namelen] = 0;
  80e3cb:	83 6d ec 01          	sub    DWORD PTR [rbp-0x14],0x1
  80e3cf:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  80e3d2:	48 63 d0             	movsxd rdx,eax
  80e3d5:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80e3d9:	48 01 d0             	add    rax,rdx
  80e3dc:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:395
		goto find_lookup_success;
  80e3df:	eb 7c                	jmp    80e45d <FAT32_readdir+0x6cd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:325
			continue;
  80e3e1:	90                   	nop
  80e3e2:	eb 01                	jmp    80e3e5 <FAT32_readdir+0x655>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:327
			continue;
  80e3e4:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:322 (discriminator 2)
	for(i = filp->position%fsbi->bytes_per_cluster;i < fsbi->bytes_per_cluster;i += 32,tmpdentry++,filp->position += 32)
  80e3e5:	83 45 e8 20          	add    DWORD PTR [rbp-0x18],0x20
  80e3e9:	48 83 45 d0 20       	add    QWORD PTR [rbp-0x30],0x20
  80e3ee:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  80e3f2:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80e3f5:	48 8d 50 20          	lea    rdx,[rax+0x20]
  80e3f9:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  80e3fd:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:322 (discriminator 1)
  80e400:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
  80e403:	48 63 d0             	movsxd rdx,eax
  80e406:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  80e40a:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  80e40e:	48 39 c2             	cmp    rdx,rax
  80e411:	0f 8c 9e fb ff ff    	jl     80dfb5 <FAT32_readdir+0x225>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:398
	}
	
	cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
  80e417:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
  80e41a:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  80e41e:	89 d6                	mov    esi,edx
  80e420:	48 89 c7             	mov    rdi,rax
  80e423:	48 b8 25 d1 80 00 00 	movabs rax,0x80d125
  80e42a:	00 00 00 
  80e42d:	ff d0                	call   rax
  80e42f:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:399
	if(cluster < 0x0ffffff7)
  80e432:	81 7d fc f6 ff ff 0f 	cmp    DWORD PTR [rbp-0x4],0xffffff6
  80e439:	77 05                	ja     80e440 <FAT32_readdir+0x6b0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:400
		goto next_cluster;
  80e43b:	e9 8e fa ff ff       	jmp    80dece <FAT32_readdir+0x13e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:402

    kmfree(buf);
  80e440:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  80e444:	48 89 c7             	mov    rdi,rax
  80e447:	48 b8 e0 1b 80 00 00 	movabs rax,0x801be0
  80e44e:	00 00 00 
  80e451:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:403
	return NULL;
  80e453:	b8 00 00 00 00       	mov    eax,0x0
  80e458:	eb 3b                	jmp    80e495 <FAT32_readdir+0x705>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:379
			goto find_lookup_success;
  80e45a:	90                   	nop
  80e45b:	eb 01                	jmp    80e45e <FAT32_readdir+0x6ce>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:395
		goto find_lookup_success;
  80e45d:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:407

find_lookup_success:

	filp->position += 32;
  80e45e:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  80e462:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80e465:	48 8d 50 20          	lea    rdx,[rax+0x20]
  80e469:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
  80e46d:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:408
	return filler(dirent,name,namelen,0,0);
  80e470:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  80e473:	48 63 d0             	movsxd rdx,eax
  80e476:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
  80e47a:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
  80e47e:	4c 8b 4d 88          	mov    r9,QWORD PTR [rbp-0x78]
  80e482:	41 b8 00 00 00 00    	mov    r8d,0x0
  80e488:	b9 00 00 00 00       	mov    ecx,0x0
  80e48d:	48 89 c7             	mov    rdi,rax
  80e490:	41 ff d1             	call   r9
  80e493:	48 98                	cdqe   
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:409
}
  80e495:	c9                   	leave  
  80e496:	c3                   	ret    

000000000080e497 <FAT32_create>:
FAT32_create():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:426
	.readdir = FAT32_readdir,
};


long FAT32_create(struct index_node * inode,struct dir_entry * dentry,int mode)
{}
  80e497:	f3 0f 1e fa          	endbr64 
  80e49b:	55                   	push   rbp
  80e49c:	48 89 e5             	mov    rbp,rsp
  80e49f:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  80e4a3:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  80e4a7:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
  80e4aa:	90                   	nop
  80e4ab:	5d                   	pop    rbp
  80e4ac:	c3                   	ret    

000000000080e4ad <FAT32_lookup>:
FAT32_lookup():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:430


struct dir_entry * FAT32_lookup(struct index_node * parent_inode,struct dir_entry * dest_dentry)
{
  80e4ad:	f3 0f 1e fa          	endbr64 
  80e4b1:	55                   	push   rbp
  80e4b2:	48 89 e5             	mov    rbp,rsp
  80e4b5:	48 83 ec 60          	sub    rsp,0x60
  80e4b9:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
  80e4bd:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:431
	struct FAT32_inode_info * finode = parent_inode->private_index_info;
  80e4c1:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  80e4c5:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
  80e4c9:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:432
	struct FAT32_sb_info * fsbi = parent_inode->sb->private_sb_info;
  80e4cd:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  80e4d1:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  80e4d5:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80e4d9:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:434

	unsigned int cluster = 0;
  80e4dd:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:435
	unsigned long sector = 0;
  80e4e4:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
  80e4eb:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:436
	unsigned char * buf =NULL; 
  80e4ec:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
  80e4f3:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:437
	int i = 0,j = 0,x = 0;
  80e4f4:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
  80e4fb:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
  80e502:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [rbp-0x10],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:438
	struct FAT32_Directory * tmpdentry = NULL;
  80e509:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
  80e510:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:439
	struct FAT32_LongDirectory * tmpldentry = NULL;
  80e511:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
  80e518:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:440
	struct index_node * p = NULL;
  80e519:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
  80e520:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:442

	buf = kmalloc(fsbi->bytes_per_cluster, 0);
  80e521:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  80e525:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  80e529:	be 00 00 00 00       	mov    esi,0x0
  80e52e:	48 89 c7             	mov    rdi,rax
  80e531:	b8 00 00 00 00       	mov    eax,0x0
  80e536:	48 ba d4 18 80 00 00 	movabs rdx,0x8018d4
  80e53d:	00 00 00 
  80e540:	ff d2                	call   rdx
  80e542:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:444

	cluster = finode->first_cluster;
  80e546:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  80e54a:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80e54d:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:447

next_cluster:
	sector = fsbi->Data_firstsector + (cluster - 2) * fsbi->sector_per_cluster;
  80e550:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  80e554:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
  80e558:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80e55b:	83 e8 02             	sub    eax,0x2
  80e55e:	89 c1                	mov    ecx,eax
  80e560:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  80e564:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80e568:	48 0f af c1          	imul   rax,rcx
  80e56c:	48 01 d0             	add    rax,rdx
  80e56f:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:448
	printf("lookup cluster:0x%x,sector:0x%x\r\n",cluster,sector);
  80e573:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  80e577:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80e57a:	89 c6                	mov    esi,eax
  80e57c:	48 b8 18 91 81 00 00 	movabs rax,0x819118
  80e583:	00 00 00 
  80e586:	48 89 c7             	mov    rdi,rax
  80e589:	b8 00 00 00 00       	mov    eax,0x0
  80e58e:	48 b9 97 11 80 00 00 	movabs rcx,0x801197
  80e595:	00 00 00 
  80e598:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:449
	int r=request(DISK_MAJOR_MAJOR,DISKREQ_READ,sector,fsbi->sector_per_cluster,(unsigned char *)buf);
  80e59a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  80e59e:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80e5a2:	89 c1                	mov    ecx,eax
  80e5a4:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80e5a8:	89 c2                	mov    edx,eax
  80e5aa:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  80e5ae:	49 89 c0             	mov    r8,rax
  80e5b1:	be 00 00 00 00       	mov    esi,0x0
  80e5b6:	bf 00 00 00 00       	mov    edi,0x0
  80e5bb:	48 b8 72 c1 80 00 00 	movabs rax,0x80c172
  80e5c2:	00 00 00 
  80e5c5:	ff d0                	call   rax
  80e5c7:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:450
    if(!chk_result(r))
  80e5ca:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
  80e5cd:	89 c7                	mov    edi,eax
  80e5cf:	48 b8 f6 c9 80 00 00 	movabs rax,0x80c9f6
  80e5d6:	00 00 00 
  80e5d9:	ff d0                	call   rax
  80e5db:	85 c0                	test   eax,eax
  80e5dd:	75 3b                	jne    80e61a <FAT32_lookup+0x16d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:452
	{
		printf("FAT32 FS(lookup) read disk ERROR!!!!!!!!!!\n");
  80e5df:	48 b8 40 91 81 00 00 	movabs rax,0x819140
  80e5e6:	00 00 00 
  80e5e9:	48 89 c7             	mov    rdi,rax
  80e5ec:	b8 00 00 00 00       	mov    eax,0x0
  80e5f1:	48 ba 97 11 80 00 00 	movabs rdx,0x801197
  80e5f8:	00 00 00 
  80e5fb:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:453
        kmfree(buf);
  80e5fd:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  80e601:	48 89 c7             	mov    rdi,rax
  80e604:	48 b8 e0 1b 80 00 00 	movabs rax,0x801be0
  80e60b:	00 00 00 
  80e60e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:454
		return NULL;
  80e610:	b8 00 00 00 00       	mov    eax,0x0
  80e615:	e9 2d 08 00 00       	jmp    80ee47 <FAT32_lookup+0x99a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:457
	}

	tmpdentry = (struct FAT32_Directory *)buf;
  80e61a:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  80e61e:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:459

	for(i = 0;i < fsbi->bytes_per_cluster;i+= 32,tmpdentry++)
  80e622:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
  80e629:	e9 9d 05 00 00       	jmp    80ebcb <FAT32_lookup+0x71e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:461
	{
		if(tmpdentry->DIR_Attr == ATTR_LONG_NAME)
  80e62e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80e632:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
  80e636:	3c 0f                	cmp    al,0xf
  80e638:	0f 84 59 05 00 00    	je     80eb97 <FAT32_lookup+0x6ea>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:463
			continue;
		if(tmpdentry->DIR_Name[0] == 0xe5 || tmpdentry->DIR_Name[0] == 0x00 || tmpdentry->DIR_Name[0] == 0x05)
  80e63e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80e642:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  80e645:	3c e5                	cmp    al,0xe5
  80e647:	0f 84 4d 05 00 00    	je     80eb9a <FAT32_lookup+0x6ed>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:463 (discriminator 2)
  80e64d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80e651:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  80e654:	84 c0                	test   al,al
  80e656:	0f 84 3e 05 00 00    	je     80eb9a <FAT32_lookup+0x6ed>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:463 (discriminator 4)
  80e65c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80e660:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  80e663:	3c 05                	cmp    al,0x5
  80e665:	0f 84 2f 05 00 00    	je     80eb9a <FAT32_lookup+0x6ed>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:466
			continue;

		tmpldentry = (struct FAT32_LongDirectory *)tmpdentry-1;
  80e66b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80e66f:	48 83 e8 20          	sub    rax,0x20
  80e673:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:467
		j = 0;
  80e677:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:470

		//long file/dir name compare
		while(tmpldentry->LDIR_Attr == ATTR_LONG_NAME && tmpldentry->LDIR_Ord != 0xe5)
  80e67e:	e9 88 01 00 00       	jmp    80e80b <FAT32_lookup+0x35e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:472
		{
			for(x=0;x<5;x++)
  80e683:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [rbp-0x10],0x0
  80e68a:	eb 6a                	jmp    80e6f6 <FAT32_lookup+0x249>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:474
			{
				if(j>dest_dentry->name_length && tmpldentry->LDIR_Name1[x] == 0xffff)
  80e68c:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  80e690:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
  80e693:	39 45 f4             	cmp    DWORD PTR [rbp-0xc],eax
  80e696:	7e 15                	jle    80e6ad <FAT32_lookup+0x200>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:474 (discriminator 1)
  80e698:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  80e69c:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
  80e69f:	48 63 d2             	movsxd rdx,edx
  80e6a2:	0f b7 44 50 01       	movzx  eax,WORD PTR [rax+rdx*2+0x1]
  80e6a7:	66 83 f8 ff          	cmp    ax,0xffff
  80e6ab:	74 44                	je     80e6f1 <FAT32_lookup+0x244>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:476
					continue;
				else if(j>dest_dentry->name_length || tmpldentry->LDIR_Name1[x] != (unsigned short)(dest_dentry->name[j++]))
  80e6ad:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  80e6b1:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
  80e6b4:	39 45 f4             	cmp    DWORD PTR [rbp-0xc],eax
  80e6b7:	0f 8f e0 04 00 00    	jg     80eb9d <FAT32_lookup+0x6f0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:476 (discriminator 1)
  80e6bd:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  80e6c1:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
  80e6c4:	48 63 d2             	movsxd rdx,edx
  80e6c7:	0f b7 4c 50 01       	movzx  ecx,WORD PTR [rax+rdx*2+0x1]
  80e6cc:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  80e6d0:	48 8b 30             	mov    rsi,QWORD PTR [rax]
  80e6d3:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  80e6d6:	8d 50 01             	lea    edx,[rax+0x1]
  80e6d9:	89 55 f4             	mov    DWORD PTR [rbp-0xc],edx
  80e6dc:	48 98                	cdqe   
  80e6de:	48 01 f0             	add    rax,rsi
  80e6e1:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  80e6e4:	66 98                	cbw    
  80e6e6:	66 39 c1             	cmp    cx,ax
  80e6e9:	0f 85 ae 04 00 00    	jne    80eb9d <FAT32_lookup+0x6f0>
  80e6ef:	eb 01                	jmp    80e6f2 <FAT32_lookup+0x245>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:475
					continue;
  80e6f1:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:472 (discriminator 2)
			for(x=0;x<5;x++)
  80e6f2:	83 45 f0 01          	add    DWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:472 (discriminator 1)
  80e6f6:	83 7d f0 04          	cmp    DWORD PTR [rbp-0x10],0x4
  80e6fa:	7e 90                	jle    80e68c <FAT32_lookup+0x1df>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:479
					goto continue_cmp_fail;
			}
			for(x=0;x<6;x++)
  80e6fc:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [rbp-0x10],0x0
  80e703:	eb 6a                	jmp    80e76f <FAT32_lookup+0x2c2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:481
			{
				if(j>dest_dentry->name_length && tmpldentry->LDIR_Name2[x] == 0xffff)
  80e705:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  80e709:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
  80e70c:	39 45 f4             	cmp    DWORD PTR [rbp-0xc],eax
  80e70f:	7e 15                	jle    80e726 <FAT32_lookup+0x279>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:481 (discriminator 1)
  80e711:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  80e715:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
  80e718:	48 63 d2             	movsxd rdx,edx
  80e71b:	0f b7 44 50 0e       	movzx  eax,WORD PTR [rax+rdx*2+0xe]
  80e720:	66 83 f8 ff          	cmp    ax,0xffff
  80e724:	74 44                	je     80e76a <FAT32_lookup+0x2bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:483
					continue;
				else if(j>dest_dentry->name_length || tmpldentry->LDIR_Name2[x] != (unsigned short)(dest_dentry->name[j++]))
  80e726:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  80e72a:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
  80e72d:	39 45 f4             	cmp    DWORD PTR [rbp-0xc],eax
  80e730:	0f 8f 6a 04 00 00    	jg     80eba0 <FAT32_lookup+0x6f3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:483 (discriminator 1)
  80e736:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  80e73a:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
  80e73d:	48 63 d2             	movsxd rdx,edx
  80e740:	0f b7 4c 50 0e       	movzx  ecx,WORD PTR [rax+rdx*2+0xe]
  80e745:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  80e749:	48 8b 30             	mov    rsi,QWORD PTR [rax]
  80e74c:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  80e74f:	8d 50 01             	lea    edx,[rax+0x1]
  80e752:	89 55 f4             	mov    DWORD PTR [rbp-0xc],edx
  80e755:	48 98                	cdqe   
  80e757:	48 01 f0             	add    rax,rsi
  80e75a:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  80e75d:	66 98                	cbw    
  80e75f:	66 39 c1             	cmp    cx,ax
  80e762:	0f 85 38 04 00 00    	jne    80eba0 <FAT32_lookup+0x6f3>
  80e768:	eb 01                	jmp    80e76b <FAT32_lookup+0x2be>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:482
					continue;
  80e76a:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:479 (discriminator 2)
			for(x=0;x<6;x++)
  80e76b:	83 45 f0 01          	add    DWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:479 (discriminator 1)
  80e76f:	83 7d f0 05          	cmp    DWORD PTR [rbp-0x10],0x5
  80e773:	7e 90                	jle    80e705 <FAT32_lookup+0x258>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:486
					goto continue_cmp_fail;
			}
			for(x=0;x<2;x++)
  80e775:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [rbp-0x10],0x0
  80e77c:	eb 72                	jmp    80e7f0 <FAT32_lookup+0x343>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:488
			{
				if(j>dest_dentry->name_length && tmpldentry->LDIR_Name3[x] == 0xffff)
  80e77e:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  80e782:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
  80e785:	39 45 f4             	cmp    DWORD PTR [rbp-0xc],eax
  80e788:	7e 19                	jle    80e7a3 <FAT32_lookup+0x2f6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:488 (discriminator 1)
  80e78a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  80e78e:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
  80e791:	48 63 d2             	movsxd rdx,edx
  80e794:	48 83 c2 08          	add    rdx,0x8
  80e798:	0f b7 44 50 0c       	movzx  eax,WORD PTR [rax+rdx*2+0xc]
  80e79d:	66 83 f8 ff          	cmp    ax,0xffff
  80e7a1:	74 48                	je     80e7eb <FAT32_lookup+0x33e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:490
					continue;
				else if(j>dest_dentry->name_length || tmpldentry->LDIR_Name3[x] != (unsigned short)(dest_dentry->name[j++]))
  80e7a3:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  80e7a7:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
  80e7aa:	39 45 f4             	cmp    DWORD PTR [rbp-0xc],eax
  80e7ad:	0f 8f f0 03 00 00    	jg     80eba3 <FAT32_lookup+0x6f6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:490 (discriminator 1)
  80e7b3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  80e7b7:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
  80e7ba:	48 63 d2             	movsxd rdx,edx
  80e7bd:	48 83 c2 08          	add    rdx,0x8
  80e7c1:	0f b7 4c 50 0c       	movzx  ecx,WORD PTR [rax+rdx*2+0xc]
  80e7c6:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  80e7ca:	48 8b 30             	mov    rsi,QWORD PTR [rax]
  80e7cd:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  80e7d0:	8d 50 01             	lea    edx,[rax+0x1]
  80e7d3:	89 55 f4             	mov    DWORD PTR [rbp-0xc],edx
  80e7d6:	48 98                	cdqe   
  80e7d8:	48 01 f0             	add    rax,rsi
  80e7db:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  80e7de:	66 98                	cbw    
  80e7e0:	66 39 c1             	cmp    cx,ax
  80e7e3:	0f 85 ba 03 00 00    	jne    80eba3 <FAT32_lookup+0x6f6>
  80e7e9:	eb 01                	jmp    80e7ec <FAT32_lookup+0x33f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:489
					continue;
  80e7eb:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:486 (discriminator 2)
			for(x=0;x<2;x++)
  80e7ec:	83 45 f0 01          	add    DWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:486 (discriminator 1)
  80e7f0:	83 7d f0 01          	cmp    DWORD PTR [rbp-0x10],0x1
  80e7f4:	7e 88                	jle    80e77e <FAT32_lookup+0x2d1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:494
					goto continue_cmp_fail;
			}

			if(j >= dest_dentry->name_length)
  80e7f6:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  80e7fa:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
  80e7fd:	39 45 f4             	cmp    DWORD PTR [rbp-0xc],eax
  80e800:	0f 8d 22 04 00 00    	jge    80ec28 <FAT32_lookup+0x77b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:499
			{
				goto find_lookup_success;
			}

			tmpldentry --;
  80e806:	48 83 6d e0 20       	sub    QWORD PTR [rbp-0x20],0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:470
		while(tmpldentry->LDIR_Attr == ATTR_LONG_NAME && tmpldentry->LDIR_Ord != 0xe5)
  80e80b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  80e80f:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
  80e813:	3c 0f                	cmp    al,0xf
  80e815:	75 0f                	jne    80e826 <FAT32_lookup+0x379>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:470 (discriminator 1)
  80e817:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  80e81b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  80e81e:	3c e5                	cmp    al,0xe5
  80e820:	0f 85 5d fe ff ff    	jne    80e683 <FAT32_lookup+0x1d6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:503
		}

		//short file/dir base name compare
		j = 0;
  80e826:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:504
		for(x=0;x<8;x++)
  80e82d:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [rbp-0x10],0x0
  80e834:	e9 f4 01 00 00       	jmp    80ea2d <FAT32_lookup+0x580>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:506
		{
			switch(tmpdentry->DIR_Name[x])
  80e839:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  80e83d:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  80e840:	48 98                	cdqe   
  80e842:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
  80e846:	0f b6 c0             	movzx  eax,al
  80e849:	83 f8 7a             	cmp    eax,0x7a
  80e84c:	0f 8f d0 01 00 00    	jg     80ea22 <FAT32_lookup+0x575>
  80e852:	83 f8 61             	cmp    eax,0x61
  80e855:	0f 8d e6 00 00 00    	jge    80e941 <FAT32_lookup+0x494>
  80e85b:	83 f8 5a             	cmp    eax,0x5a
  80e85e:	0f 8f be 01 00 00    	jg     80ea22 <FAT32_lookup+0x575>
  80e864:	83 f8 41             	cmp    eax,0x41
  80e867:	0f 8d d4 00 00 00    	jge    80e941 <FAT32_lookup+0x494>
  80e86d:	83 f8 20             	cmp    eax,0x20
  80e870:	74 1a                	je     80e88c <FAT32_lookup+0x3df>
  80e872:	83 f8 20             	cmp    eax,0x20
  80e875:	0f 8c a7 01 00 00    	jl     80ea22 <FAT32_lookup+0x575>
  80e87b:	83 e8 30             	sub    eax,0x30
  80e87e:	83 f8 09             	cmp    eax,0x9
  80e881:	0f 87 9b 01 00 00    	ja     80ea22 <FAT32_lookup+0x575>
  80e887:	e9 53 01 00 00       	jmp    80e9df <FAT32_lookup+0x532>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:509
			{
				case ' ':
					if(!(tmpdentry->DIR_Attr & ATTR_DIRECTORY))
  80e88c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80e890:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
  80e894:	0f b6 c0             	movzx  eax,al
  80e897:	83 e0 10             	and    eax,0x10
  80e89a:	85 c0                	test   eax,eax
  80e89c:	75 50                	jne    80e8ee <FAT32_lookup+0x441>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:511
					{
						if(dest_dentry->name[j]=='.')
  80e89e:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  80e8a2:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  80e8a5:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  80e8a8:	48 98                	cdqe   
  80e8aa:	48 01 d0             	add    rax,rdx
  80e8ad:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  80e8b0:	3c 2e                	cmp    al,0x2e
  80e8b2:	0f 84 70 01 00 00    	je     80ea28 <FAT32_lookup+0x57b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:513
							continue;
						else if(tmpdentry->DIR_Name[x] == dest_dentry->name[j])
  80e8b8:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  80e8bc:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  80e8bf:	48 98                	cdqe   
  80e8c1:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
  80e8c5:	0f b6 d0             	movzx  edx,al
  80e8c8:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  80e8cc:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  80e8cf:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  80e8d2:	48 98                	cdqe   
  80e8d4:	48 01 c8             	add    rax,rcx
  80e8d7:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  80e8da:	0f be c0             	movsx  eax,al
  80e8dd:	39 c2                	cmp    edx,eax
  80e8df:	0f 85 c1 02 00 00    	jne    80eba6 <FAT32_lookup+0x6f9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:515
						{
							j++;
  80e8e5:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:516
							break;
  80e8e9:	e9 3b 01 00 00       	jmp    80ea29 <FAT32_lookup+0x57c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:523
						else
							goto continue_cmp_fail;
					}
					else
					{
						if(j < dest_dentry->name_length && tmpdentry->DIR_Name[x] == dest_dentry->name[j])
  80e8ee:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  80e8f2:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
  80e8f5:	39 45 f4             	cmp    DWORD PTR [rbp-0xc],eax
  80e8f8:	7d 32                	jge    80e92c <FAT32_lookup+0x47f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:523 (discriminator 1)
  80e8fa:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  80e8fe:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  80e901:	48 98                	cdqe   
  80e903:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
  80e907:	0f b6 d0             	movzx  edx,al
  80e90a:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  80e90e:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  80e911:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  80e914:	48 98                	cdqe   
  80e916:	48 01 c8             	add    rax,rcx
  80e919:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  80e91c:	0f be c0             	movsx  eax,al
  80e91f:	39 c2                	cmp    edx,eax
  80e921:	75 09                	jne    80e92c <FAT32_lookup+0x47f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:525
						{
							j++;
  80e923:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:526
							break;
  80e927:	e9 fd 00 00 00       	jmp    80ea29 <FAT32_lookup+0x57c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:528
						}
						else if(j == dest_dentry->name_length)
  80e92c:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  80e930:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
  80e933:	39 45 f4             	cmp    DWORD PTR [rbp-0xc],eax
  80e936:	0f 85 6d 02 00 00    	jne    80eba9 <FAT32_lookup+0x6fc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:529
							continue;
  80e93c:	e9 e8 00 00 00       	jmp    80ea29 <FAT32_lookup+0x57c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:536
							goto continue_cmp_fail;
					}

				case 'A' ... 'Z':
				case 'a' ... 'z':
					if(tmpdentry->DIR_NTRes & LOWERCASE_BASE)
  80e941:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80e945:	0f b6 40 0c          	movzx  eax,BYTE PTR [rax+0xc]
  80e949:	0f b6 c0             	movzx  eax,al
  80e94c:	83 e0 08             	and    eax,0x8
  80e94f:	85 c0                	test   eax,eax
  80e951:	74 49                	je     80e99c <FAT32_lookup+0x4ef>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:537
						if(j < dest_dentry->name_length && tmpdentry->DIR_Name[x] + 32 == dest_dentry->name[j])
  80e953:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  80e957:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
  80e95a:	39 45 f4             	cmp    DWORD PTR [rbp-0xc],eax
  80e95d:	0f 8d 49 02 00 00    	jge    80ebac <FAT32_lookup+0x6ff>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:537 (discriminator 1)
  80e963:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  80e967:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  80e96a:	48 98                	cdqe   
  80e96c:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
  80e970:	0f b6 c0             	movzx  eax,al
  80e973:	8d 50 20             	lea    edx,[rax+0x20]
  80e976:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  80e97a:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  80e97d:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  80e980:	48 98                	cdqe   
  80e982:	48 01 c8             	add    rax,rcx
  80e985:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  80e988:	0f be c0             	movsx  eax,al
  80e98b:	39 c2                	cmp    edx,eax
  80e98d:	0f 85 19 02 00 00    	jne    80ebac <FAT32_lookup+0x6ff>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:539
						{
							j++;
  80e993:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:540
							break;
  80e997:	e9 8d 00 00 00       	jmp    80ea29 <FAT32_lookup+0x57c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:546
						}
						else
							goto continue_cmp_fail;
					else
					{
						if(j < dest_dentry->name_length && tmpdentry->DIR_Name[x] == dest_dentry->name[j])
  80e99c:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  80e9a0:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
  80e9a3:	39 45 f4             	cmp    DWORD PTR [rbp-0xc],eax
  80e9a6:	0f 8d 03 02 00 00    	jge    80ebaf <FAT32_lookup+0x702>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:546 (discriminator 1)
  80e9ac:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  80e9b0:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  80e9b3:	48 98                	cdqe   
  80e9b5:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
  80e9b9:	0f b6 d0             	movzx  edx,al
  80e9bc:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  80e9c0:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  80e9c3:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  80e9c6:	48 98                	cdqe   
  80e9c8:	48 01 c8             	add    rax,rcx
  80e9cb:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  80e9ce:	0f be c0             	movsx  eax,al
  80e9d1:	39 c2                	cmp    edx,eax
  80e9d3:	0f 85 d6 01 00 00    	jne    80ebaf <FAT32_lookup+0x702>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:548
						{
							j++;
  80e9d9:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:549
							break;
  80e9dd:	eb 4a                	jmp    80ea29 <FAT32_lookup+0x57c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:556
						else
							goto continue_cmp_fail;
					}

				case '0' ... '9':
					if(j < dest_dentry->name_length && tmpdentry->DIR_Name[x] == dest_dentry->name[j])
  80e9df:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  80e9e3:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
  80e9e6:	39 45 f4             	cmp    DWORD PTR [rbp-0xc],eax
  80e9e9:	0f 8d c3 01 00 00    	jge    80ebb2 <FAT32_lookup+0x705>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:556 (discriminator 1)
  80e9ef:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  80e9f3:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  80e9f6:	48 98                	cdqe   
  80e9f8:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
  80e9fc:	0f b6 d0             	movzx  edx,al
  80e9ff:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  80ea03:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  80ea06:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  80ea09:	48 98                	cdqe   
  80ea0b:	48 01 c8             	add    rax,rcx
  80ea0e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  80ea11:	0f be c0             	movsx  eax,al
  80ea14:	39 c2                	cmp    edx,eax
  80ea16:	0f 85 96 01 00 00    	jne    80ebb2 <FAT32_lookup+0x705>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:558
					{
						j++;
  80ea1c:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:559
						break;
  80ea20:	eb 07                	jmp    80ea29 <FAT32_lookup+0x57c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:565
					}
					else
						goto continue_cmp_fail;

				default :
					j++;
  80ea22:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:566
					break;
  80ea26:	eb 01                	jmp    80ea29 <FAT32_lookup+0x57c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:512
							continue;
  80ea28:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:504 (discriminator 2)
		for(x=0;x<8;x++)
  80ea29:	83 45 f0 01          	add    DWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:504 (discriminator 1)
  80ea2d:	83 7d f0 07          	cmp    DWORD PTR [rbp-0x10],0x7
  80ea31:	0f 8e 02 fe ff ff    	jle    80e839 <FAT32_lookup+0x38c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:570
			}
		}
		//short file ext name compare
		if(!(tmpdentry->DIR_Attr & ATTR_DIRECTORY))
  80ea37:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80ea3b:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
  80ea3f:	0f b6 c0             	movzx  eax,al
  80ea42:	83 e0 10             	and    eax,0x10
  80ea45:	85 c0                	test   eax,eax
  80ea47:	0f 85 de 01 00 00    	jne    80ec2b <FAT32_lookup+0x77e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:572
		{
			j++;
  80ea4d:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:573
			for(x=8;x<11;x++)
  80ea51:	c7 45 f0 08 00 00 00 	mov    DWORD PTR [rbp-0x10],0x8
  80ea58:	e9 2b 01 00 00       	jmp    80eb88 <FAT32_lookup+0x6db>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:575
			{
				switch(tmpdentry->DIR_Name[x])
  80ea5d:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  80ea61:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  80ea64:	48 98                	cdqe   
  80ea66:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
  80ea6a:	0f b6 c0             	movzx  eax,al
  80ea6d:	83 f8 7a             	cmp    eax,0x7a
  80ea70:	0f 8f 3f 01 00 00    	jg     80ebb5 <FAT32_lookup+0x708>
  80ea76:	83 f8 61             	cmp    eax,0x61
  80ea79:	7d 2e                	jge    80eaa9 <FAT32_lookup+0x5fc>
  80ea7b:	83 f8 5a             	cmp    eax,0x5a
  80ea7e:	0f 8f 31 01 00 00    	jg     80ebb5 <FAT32_lookup+0x708>
  80ea84:	83 f8 41             	cmp    eax,0x41
  80ea87:	7d 20                	jge    80eaa9 <FAT32_lookup+0x5fc>
  80ea89:	83 f8 20             	cmp    eax,0x20
  80ea8c:	0f 84 c4 00 00 00    	je     80eb56 <FAT32_lookup+0x6a9>
  80ea92:	83 f8 20             	cmp    eax,0x20
  80ea95:	0f 8c 1a 01 00 00    	jl     80ebb5 <FAT32_lookup+0x708>
  80ea9b:	83 e8 30             	sub    eax,0x30
  80ea9e:	83 f8 09             	cmp    eax,0x9
  80eaa1:	0f 87 0e 01 00 00    	ja     80ebb5 <FAT32_lookup+0x708>
  80eaa7:	eb 7e                	jmp    80eb27 <FAT32_lookup+0x67a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:579
				{
					case 'A' ... 'Z':
					case 'a' ... 'z':
						if(tmpdentry->DIR_NTRes & LOWERCASE_EXT)
  80eaa9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80eaad:	0f b6 40 0c          	movzx  eax,BYTE PTR [rax+0xc]
  80eab1:	0f b6 c0             	movzx  eax,al
  80eab4:	83 e0 10             	and    eax,0x10
  80eab7:	85 c0                	test   eax,eax
  80eab9:	74 39                	je     80eaf4 <FAT32_lookup+0x647>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:580
							if(tmpdentry->DIR_Name[x] + 32 == dest_dentry->name[j])
  80eabb:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  80eabf:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  80eac2:	48 98                	cdqe   
  80eac4:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
  80eac8:	0f b6 c0             	movzx  eax,al
  80eacb:	8d 50 20             	lea    edx,[rax+0x20]
  80eace:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  80ead2:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  80ead5:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  80ead8:	48 98                	cdqe   
  80eada:	48 01 c8             	add    rax,rcx
  80eadd:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  80eae0:	0f be c0             	movsx  eax,al
  80eae3:	39 c2                	cmp    edx,eax
  80eae5:	0f 85 cd 00 00 00    	jne    80ebb8 <FAT32_lookup+0x70b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:582
							{
								j++;
  80eaeb:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:583
								break;
  80eaef:	e9 90 00 00 00       	jmp    80eb84 <FAT32_lookup+0x6d7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:589
							}
							else
								goto continue_cmp_fail;
						else
						{
							if(tmpdentry->DIR_Name[x] == dest_dentry->name[j])
  80eaf4:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  80eaf8:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  80eafb:	48 98                	cdqe   
  80eafd:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
  80eb01:	0f b6 d0             	movzx  edx,al
  80eb04:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  80eb08:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  80eb0b:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  80eb0e:	48 98                	cdqe   
  80eb10:	48 01 c8             	add    rax,rcx
  80eb13:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  80eb16:	0f be c0             	movsx  eax,al
  80eb19:	39 c2                	cmp    edx,eax
  80eb1b:	0f 85 9a 00 00 00    	jne    80ebbb <FAT32_lookup+0x70e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:591
							{
								j++;
  80eb21:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:592
								break;
  80eb25:	eb 5d                	jmp    80eb84 <FAT32_lookup+0x6d7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:599
							else
								goto continue_cmp_fail;
						}

					case '0' ... '9':
						if(tmpdentry->DIR_Name[x] == dest_dentry->name[j])
  80eb27:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  80eb2b:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  80eb2e:	48 98                	cdqe   
  80eb30:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
  80eb34:	0f b6 d0             	movzx  edx,al
  80eb37:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  80eb3b:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  80eb3e:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  80eb41:	48 98                	cdqe   
  80eb43:	48 01 c8             	add    rax,rcx
  80eb46:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  80eb49:	0f be c0             	movsx  eax,al
  80eb4c:	39 c2                	cmp    edx,eax
  80eb4e:	75 6e                	jne    80ebbe <FAT32_lookup+0x711>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:601
						{
							j++;
  80eb50:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:602
							break;
  80eb54:	eb 2e                	jmp    80eb84 <FAT32_lookup+0x6d7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:608
						}
						else
							goto continue_cmp_fail;

					case ' ':
						if(tmpdentry->DIR_Name[x] == dest_dentry->name[j])
  80eb56:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
  80eb5a:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  80eb5d:	48 98                	cdqe   
  80eb5f:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
  80eb63:	0f b6 d0             	movzx  edx,al
  80eb66:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  80eb6a:	48 8b 08             	mov    rcx,QWORD PTR [rax]
  80eb6d:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  80eb70:	48 98                	cdqe   
  80eb72:	48 01 c8             	add    rax,rcx
  80eb75:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  80eb78:	0f be c0             	movsx  eax,al
  80eb7b:	39 c2                	cmp    edx,eax
  80eb7d:	75 42                	jne    80ebc1 <FAT32_lookup+0x714>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:610
						{
							j++;
  80eb7f:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:611
							break;
  80eb83:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:573 (discriminator 2)
			for(x=8;x<11;x++)
  80eb84:	83 45 f0 01          	add    DWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:573 (discriminator 1)
  80eb88:	83 7d f0 0a          	cmp    DWORD PTR [rbp-0x10],0xa
  80eb8c:	0f 8e cb fe ff ff    	jle    80ea5d <FAT32_lookup+0x5b0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:621
					default :
						goto continue_cmp_fail;
				}
			}
		}
		goto find_lookup_success;
  80eb92:	e9 94 00 00 00       	jmp    80ec2b <FAT32_lookup+0x77e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:462
			continue;
  80eb97:	90                   	nop
  80eb98:	eb 28                	jmp    80ebc2 <FAT32_lookup+0x715>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:464
			continue;
  80eb9a:	90                   	nop
  80eb9b:	eb 25                	jmp    80ebc2 <FAT32_lookup+0x715>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:477
					goto continue_cmp_fail;
  80eb9d:	90                   	nop
  80eb9e:	eb 22                	jmp    80ebc2 <FAT32_lookup+0x715>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:484
					goto continue_cmp_fail;
  80eba0:	90                   	nop
  80eba1:	eb 1f                	jmp    80ebc2 <FAT32_lookup+0x715>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:491
					goto continue_cmp_fail;
  80eba3:	90                   	nop
  80eba4:	eb 1c                	jmp    80ebc2 <FAT32_lookup+0x715>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:519
							goto continue_cmp_fail;
  80eba6:	90                   	nop
  80eba7:	eb 19                	jmp    80ebc2 <FAT32_lookup+0x715>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:531
							goto continue_cmp_fail;
  80eba9:	90                   	nop
  80ebaa:	eb 16                	jmp    80ebc2 <FAT32_lookup+0x715>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:543
							goto continue_cmp_fail;
  80ebac:	90                   	nop
  80ebad:	eb 13                	jmp    80ebc2 <FAT32_lookup+0x715>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:552
							goto continue_cmp_fail;
  80ebaf:	90                   	nop
  80ebb0:	eb 10                	jmp    80ebc2 <FAT32_lookup+0x715>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:562
						goto continue_cmp_fail;
  80ebb2:	90                   	nop
  80ebb3:	eb 0d                	jmp    80ebc2 <FAT32_lookup+0x715>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:617
						goto continue_cmp_fail;
  80ebb5:	90                   	nop
  80ebb6:	eb 0a                	jmp    80ebc2 <FAT32_lookup+0x715>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:586
								goto continue_cmp_fail;
  80ebb8:	90                   	nop
  80ebb9:	eb 07                	jmp    80ebc2 <FAT32_lookup+0x715>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:595
								goto continue_cmp_fail;
  80ebbb:	90                   	nop
  80ebbc:	eb 04                	jmp    80ebc2 <FAT32_lookup+0x715>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:605
							goto continue_cmp_fail;
  80ebbe:	90                   	nop
  80ebbf:	eb 01                	jmp    80ebc2 <FAT32_lookup+0x715>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:614
							goto continue_cmp_fail;
  80ebc1:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:459 (discriminator 2)
	for(i = 0;i < fsbi->bytes_per_cluster;i+= 32,tmpdentry++)
  80ebc2:	83 45 f8 20          	add    DWORD PTR [rbp-0x8],0x20
  80ebc6:	48 83 45 e8 20       	add    QWORD PTR [rbp-0x18],0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:459 (discriminator 1)
  80ebcb:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  80ebce:	48 63 d0             	movsxd rdx,eax
  80ebd1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  80ebd5:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  80ebd9:	48 39 c2             	cmp    rdx,rax
  80ebdc:	0f 8c 4c fa ff ff    	jl     80e62e <FAT32_lookup+0x181>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:626

continue_cmp_fail:;
	}
	
	cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
  80ebe2:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
  80ebe5:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  80ebe9:	89 d6                	mov    esi,edx
  80ebeb:	48 89 c7             	mov    rdi,rax
  80ebee:	48 b8 25 d1 80 00 00 	movabs rax,0x80d125
  80ebf5:	00 00 00 
  80ebf8:	ff d0                	call   rax
  80ebfa:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:627
	if(cluster < 0x0ffffff7)
  80ebfd:	81 7d fc f6 ff ff 0f 	cmp    DWORD PTR [rbp-0x4],0xffffff6
  80ec04:	77 05                	ja     80ec0b <FAT32_lookup+0x75e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:628
		goto next_cluster;
  80ec06:	e9 45 f9 ff ff       	jmp    80e550 <FAT32_lookup+0xa3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:630

    kmfree(buf);
  80ec0b:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  80ec0f:	48 89 c7             	mov    rdi,rax
  80ec12:	48 b8 e0 1b 80 00 00 	movabs rax,0x801be0
  80ec19:	00 00 00 
  80ec1c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:631
	return NULL;
  80ec1e:	b8 00 00 00 00       	mov    eax,0x0
  80ec23:	e9 1f 02 00 00       	jmp    80ee47 <FAT32_lookup+0x99a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:496
				goto find_lookup_success;
  80ec28:	90                   	nop
  80ec29:	eb 01                	jmp    80ec2c <FAT32_lookup+0x77f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:621
		goto find_lookup_success;
  80ec2b:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:634

find_lookup_success:
	p = (struct index_node *) kmalloc(sizeof(struct index_node), 0);
  80ec2c:	be 00 00 00 00       	mov    esi,0x0
  80ec31:	bf 38 00 00 00       	mov    edi,0x38
  80ec36:	b8 00 00 00 00       	mov    eax,0x0
  80ec3b:	48 ba d4 18 80 00 00 	movabs rdx,0x8018d4
  80ec42:	00 00 00 
  80ec45:	ff d2                	call   rdx
  80ec47:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:635
	memset(p,0,sizeof(struct index_node));
  80ec4b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  80ec4f:	ba 38 00 00 00       	mov    edx,0x38
  80ec54:	be 00 00 00 00       	mov    esi,0x0
  80ec59:	48 89 c7             	mov    rdi,rax
  80ec5c:	48 b8 21 04 81 00 00 	movabs rax,0x810421
  80ec63:	00 00 00 
  80ec66:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:636
	p->file_size = tmpdentry->DIR_FileSize;
  80ec68:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80ec6c:	8b 40 1c             	mov    eax,DWORD PTR [rax+0x1c]
  80ec6f:	89 c2                	mov    edx,eax
  80ec71:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  80ec75:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:637
	p->blocks = (p->file_size + fsbi->bytes_per_cluster - 1)/fsbi->bytes_per_sector;
  80ec78:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  80ec7c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  80ec7f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  80ec83:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  80ec87:	48 01 d0             	add    rax,rdx
  80ec8a:	48 8d 50 ff          	lea    rdx,[rax-0x1]
  80ec8e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  80ec92:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
  80ec96:	48 89 c1             	mov    rcx,rax
  80ec99:	48 89 d0             	mov    rax,rdx
  80ec9c:	ba 00 00 00 00       	mov    edx,0x0
  80eca1:	48 f7 f1             	div    rcx
  80eca4:	48 89 c2             	mov    rdx,rax
  80eca7:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  80ecab:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:638
	p->attribute = (tmpdentry->DIR_Attr & ATTR_DIRECTORY) ? FS_ATTR_DIR : FS_ATTR_FILE;
  80ecaf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80ecb3:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
  80ecb7:	0f b6 c0             	movzx  eax,al
  80ecba:	83 e0 10             	and    eax,0x10
  80ecbd:	85 c0                	test   eax,eax
  80ecbf:	74 07                	je     80ecc8 <FAT32_lookup+0x81b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:638 (discriminator 1)
  80ecc1:	ba 02 00 00 00       	mov    edx,0x2
  80ecc6:	eb 05                	jmp    80eccd <FAT32_lookup+0x820>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:638 (discriminator 2)
  80ecc8:	ba 01 00 00 00       	mov    edx,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:638 (discriminator 4)
  80eccd:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  80ecd1:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:639 (discriminator 4)
	p->sb = parent_inode->sb;
  80ecd5:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
  80ecd9:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
  80ecdd:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  80ece1:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:640 (discriminator 4)
	p->f_ops = &FAT32_file_ops;
  80ece5:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  80ece9:	48 bf 80 10 81 00 00 	movabs rdi,0x811080
  80ecf0:	00 00 00 
  80ecf3:	48 89 78 20          	mov    QWORD PTR [rax+0x20],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:641 (discriminator 4)
	p->inode_ops = &FAT32_inode_ops;
  80ecf7:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  80ecfb:	48 be c0 10 81 00 00 	movabs rsi,0x8110c0
  80ed02:	00 00 00 
  80ed05:	48 89 70 28          	mov    QWORD PTR [rax+0x28],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:643 (discriminator 4)

	p->private_index_info = (struct FAT32_inode_info *) kmalloc(sizeof(struct FAT32_inode_info), 0);
  80ed09:	be 00 00 00 00       	mov    esi,0x0
  80ed0e:	bf 20 00 00 00       	mov    edi,0x20
  80ed13:	b8 00 00 00 00       	mov    eax,0x0
  80ed18:	48 ba d4 18 80 00 00 	movabs rdx,0x8018d4
  80ed1f:	00 00 00 
  80ed22:	ff d2                	call   rdx
  80ed24:	48 89 c2             	mov    rdx,rax
  80ed27:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  80ed2b:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:644 (discriminator 4)
	memset(p->private_index_info,0,sizeof(struct FAT32_inode_info));
  80ed2f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  80ed33:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
  80ed37:	ba 20 00 00 00       	mov    edx,0x20
  80ed3c:	be 00 00 00 00       	mov    esi,0x0
  80ed41:	48 89 c7             	mov    rdi,rax
  80ed44:	48 b8 21 04 81 00 00 	movabs rax,0x810421
  80ed4b:	00 00 00 
  80ed4e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:645 (discriminator 4)
	finode = p->private_index_info;
  80ed50:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  80ed54:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
  80ed58:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:647 (discriminator 4)

	finode->first_cluster = (tmpdentry->DIR_FstClusHI<< 16 | tmpdentry->DIR_FstClusLO) & 0x0fffffff;
  80ed5c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80ed60:	0f b7 40 14          	movzx  eax,WORD PTR [rax+0x14]
  80ed64:	0f b7 c0             	movzx  eax,ax
  80ed67:	c1 e0 10             	shl    eax,0x10
  80ed6a:	89 c2                	mov    edx,eax
  80ed6c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80ed70:	0f b7 40 1a          	movzx  eax,WORD PTR [rax+0x1a]
  80ed74:	0f b7 c0             	movzx  eax,ax
  80ed77:	09 d0                	or     eax,edx
  80ed79:	48 98                	cdqe   
  80ed7b:	25 ff ff ff 0f       	and    eax,0xfffffff
  80ed80:	48 89 c2             	mov    rdx,rax
  80ed83:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  80ed87:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:648 (discriminator 4)
	finode->dentry_location = cluster;
  80ed8a:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
  80ed8d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  80ed91:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:649 (discriminator 4)
	finode->dentry_position = tmpdentry - (struct FAT32_Directory *)buf;
  80ed95:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80ed99:	48 2b 45 c0          	sub    rax,QWORD PTR [rbp-0x40]
  80ed9d:	48 c1 f8 05          	sar    rax,0x5
  80eda1:	48 89 c2             	mov    rdx,rax
  80eda4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  80eda8:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:650 (discriminator 4)
	finode->create_date = tmpdentry->DIR_CrtTime;
  80edac:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80edb0:	0f b7 50 0e          	movzx  edx,WORD PTR [rax+0xe]
  80edb4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  80edb8:	66 89 50 18          	mov    WORD PTR [rax+0x18],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:651 (discriminator 4)
	finode->create_time = tmpdentry->DIR_CrtDate;
  80edbc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80edc0:	0f b7 50 10          	movzx  edx,WORD PTR [rax+0x10]
  80edc4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  80edc8:	66 89 50 1a          	mov    WORD PTR [rax+0x1a],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:652 (discriminator 4)
	finode->write_date = tmpdentry->DIR_WrtTime;
  80edcc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80edd0:	0f b7 50 16          	movzx  edx,WORD PTR [rax+0x16]
  80edd4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  80edd8:	66 89 50 1c          	mov    WORD PTR [rax+0x1c],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:653 (discriminator 4)
	finode->write_time = tmpdentry->DIR_WrtDate;
  80eddc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80ede0:	0f b7 50 18          	movzx  edx,WORD PTR [rax+0x18]
  80ede4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  80ede8:	66 89 50 1e          	mov    WORD PTR [rax+0x1e],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:655 (discriminator 4)

	if((tmpdentry->DIR_FstClusHI >> 12) && (p->attribute & FS_ATTR_FILE))
  80edec:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80edf0:	0f b7 40 14          	movzx  eax,WORD PTR [rax+0x14]
  80edf4:	66 c1 e8 0c          	shr    ax,0xc
  80edf8:	66 85 c0             	test   ax,ax
  80edfb:	74 27                	je     80ee24 <FAT32_lookup+0x977>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:655 (discriminator 1)
  80edfd:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  80ee01:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80ee05:	83 e0 01             	and    eax,0x1
  80ee08:	48 85 c0             	test   rax,rax
  80ee0b:	74 17                	je     80ee24 <FAT32_lookup+0x977>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:657
	{
		p->attribute |= FS_ATTR_DEVICE;
  80ee0d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  80ee11:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80ee15:	48 83 c8 04          	or     rax,0x4
  80ee19:	48 89 c2             	mov    rdx,rax
  80ee1c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  80ee20:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:660
	}

	dest_dentry->dir_inode = p;
  80ee24:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
  80ee28:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
  80ee2c:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:661
    kmfree(buf);
  80ee30:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  80ee34:	48 89 c7             	mov    rdi,rax
  80ee37:	48 b8 e0 1b 80 00 00 	movabs rax,0x801be0
  80ee3e:	00 00 00 
  80ee41:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:662
	return dest_dentry;	
  80ee43:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:663
}
  80ee47:	c9                   	leave  
  80ee48:	c3                   	ret    

000000000080ee49 <FAT32_mkdir>:
FAT32_mkdir():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:667


long FAT32_mkdir(struct index_node * inode,struct dir_entry * dentry,int mode)
{}
  80ee49:	f3 0f 1e fa          	endbr64 
  80ee4d:	55                   	push   rbp
  80ee4e:	48 89 e5             	mov    rbp,rsp
  80ee51:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  80ee55:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  80ee59:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
  80ee5c:	90                   	nop
  80ee5d:	5d                   	pop    rbp
  80ee5e:	c3                   	ret    

000000000080ee5f <FAT32_rmdir>:
FAT32_rmdir():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:671


long FAT32_rmdir(struct index_node * inode,struct dir_entry * dentry)
{}
  80ee5f:	f3 0f 1e fa          	endbr64 
  80ee63:	55                   	push   rbp
  80ee64:	48 89 e5             	mov    rbp,rsp
  80ee67:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  80ee6b:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  80ee6f:	90                   	nop
  80ee70:	5d                   	pop    rbp
  80ee71:	c3                   	ret    

000000000080ee72 <FAT32_rename>:
FAT32_rename():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:674

long FAT32_rename(struct index_node * old_inode,struct dir_entry * old_dentry,struct index_node * new_inode,struct dir_entry * new_dentry)
{}
  80ee72:	f3 0f 1e fa          	endbr64 
  80ee76:	55                   	push   rbp
  80ee77:	48 89 e5             	mov    rbp,rsp
  80ee7a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  80ee7e:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  80ee82:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  80ee86:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
  80ee8a:	90                   	nop
  80ee8b:	5d                   	pop    rbp
  80ee8c:	c3                   	ret    

000000000080ee8d <FAT32_getattr>:
FAT32_getattr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:677

long FAT32_getattr(struct dir_entry * dentry,unsigned long * attr)
{}
  80ee8d:	f3 0f 1e fa          	endbr64 
  80ee91:	55                   	push   rbp
  80ee92:	48 89 e5             	mov    rbp,rsp
  80ee95:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  80ee99:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  80ee9d:	90                   	nop
  80ee9e:	5d                   	pop    rbp
  80ee9f:	c3                   	ret    

000000000080eea0 <FAT32_setattr>:
FAT32_setattr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:680

long FAT32_setattr(struct dir_entry * dentry,unsigned long * attr)
{}
  80eea0:	f3 0f 1e fa          	endbr64 
  80eea4:	55                   	push   rbp
  80eea5:	48 89 e5             	mov    rbp,rsp
  80eea8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  80eeac:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  80eeb0:	90                   	nop
  80eeb1:	5d                   	pop    rbp
  80eeb2:	c3                   	ret    

000000000080eeb3 <FAT32_compare>:
FAT32_compare():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:695
	.setattr = FAT32_setattr,
};


//// these operation need cache and list
long FAT32_compare(struct dir_entry * parent_dentry,char * source_filename,char * destination_filename){}
  80eeb3:	f3 0f 1e fa          	endbr64 
  80eeb7:	55                   	push   rbp
  80eeb8:	48 89 e5             	mov    rbp,rsp
  80eebb:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  80eebf:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  80eec3:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  80eec7:	90                   	nop
  80eec8:	5d                   	pop    rbp
  80eec9:	c3                   	ret    

000000000080eeca <FAT32_hash>:
FAT32_hash():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:696
long FAT32_hash(struct dir_entry * dentry,char * filename){}
  80eeca:	f3 0f 1e fa          	endbr64 
  80eece:	55                   	push   rbp
  80eecf:	48 89 e5             	mov    rbp,rsp
  80eed2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  80eed6:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  80eeda:	90                   	nop
  80eedb:	5d                   	pop    rbp
  80eedc:	c3                   	ret    

000000000080eedd <FAT32_release>:
FAT32_release():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:697
long FAT32_release(struct dir_entry * dentry){}
  80eedd:	f3 0f 1e fa          	endbr64 
  80eee1:	55                   	push   rbp
  80eee2:	48 89 e5             	mov    rbp,rsp
  80eee5:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  80eee9:	90                   	nop
  80eeea:	5d                   	pop    rbp
  80eeeb:	c3                   	ret    

000000000080eeec <FAT32_iput>:
FAT32_iput():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:698
long FAT32_iput(struct dir_entry * dentry,struct index_node * inode){}
  80eeec:	f3 0f 1e fa          	endbr64 
  80eef0:	55                   	push   rbp
  80eef1:	48 89 e5             	mov    rbp,rsp
  80eef4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  80eef8:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
  80eefc:	90                   	nop
  80eefd:	5d                   	pop    rbp
  80eefe:	c3                   	ret    

000000000080eeff <fat32_write_superblock>:
fat32_write_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:710
	.release = FAT32_release,
	.iput = FAT32_iput,
};


void fat32_write_superblock(struct super_block * sb){}
  80eeff:	f3 0f 1e fa          	endbr64 
  80ef03:	55                   	push   rbp
  80ef04:	48 89 e5             	mov    rbp,rsp
  80ef07:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  80ef0b:	90                   	nop
  80ef0c:	5d                   	pop    rbp
  80ef0d:	c3                   	ret    

000000000080ef0e <fat32_put_superblock>:
fat32_put_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:713

void fat32_put_superblock(struct super_block * sb)
{
  80ef0e:	f3 0f 1e fa          	endbr64 
  80ef12:	55                   	push   rbp
  80ef13:	48 89 e5             	mov    rbp,rsp
  80ef16:	48 83 ec 10          	sub    rsp,0x10
  80ef1a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:714
    kmfree(sb->private_sb_info);
  80ef1e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80ef22:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80ef26:	48 89 c7             	mov    rdi,rax
  80ef29:	48 b8 e0 1b 80 00 00 	movabs rax,0x801be0
  80ef30:	00 00 00 
  80ef33:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:715
    kmfree(sb->root->dir_inode->private_index_info);
  80ef35:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80ef39:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80ef3c:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
  80ef40:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
  80ef44:	48 89 c7             	mov    rdi,rax
  80ef47:	48 b8 e0 1b 80 00 00 	movabs rax,0x801be0
  80ef4e:	00 00 00 
  80ef51:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:716
    kmfree(sb->root->dir_inode);
  80ef53:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80ef57:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80ef5a:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
  80ef5e:	48 89 c7             	mov    rdi,rax
  80ef61:	48 b8 e0 1b 80 00 00 	movabs rax,0x801be0
  80ef68:	00 00 00 
  80ef6b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:717
    kmfree(sb->root);
  80ef6d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80ef71:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80ef74:	48 89 c7             	mov    rdi,rax
  80ef77:	48 b8 e0 1b 80 00 00 	movabs rax,0x801be0
  80ef7e:	00 00 00 
  80ef81:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:718
    kmfree(sb);
  80ef83:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80ef87:	48 89 c7             	mov    rdi,rax
  80ef8a:	48 b8 e0 1b 80 00 00 	movabs rax,0x801be0
  80ef91:	00 00 00 
  80ef94:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:719
}
  80ef96:	90                   	nop
  80ef97:	c9                   	leave  
  80ef98:	c3                   	ret    

000000000080ef99 <fat32_write_inode>:
fat32_write_inode():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:722

void fat32_write_inode(struct index_node * inode)
{
  80ef99:	f3 0f 1e fa          	endbr64 
  80ef9d:	55                   	push   rbp
  80ef9e:	48 89 e5             	mov    rbp,rsp
  80efa1:	48 83 ec 40          	sub    rsp,0x40
  80efa5:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:723
	struct FAT32_Directory * fdentry = NULL;
  80efa9:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
  80efb0:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:724
	struct FAT32_Directory * buf = NULL;
  80efb1:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
  80efb8:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:725
	struct FAT32_inode_info * finode = inode->private_index_info;
  80efb9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80efbd:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
  80efc1:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:726
	struct FAT32_sb_info * fsbi = inode->sb->private_sb_info;
  80efc5:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80efc9:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  80efcd:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80efd1:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:727
	unsigned long sector = 0;
  80efd5:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
  80efdc:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:729

	if(finode->dentry_location == 0)
  80efdd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80efe1:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  80efe5:	48 85 c0             	test   rax,rax
  80efe8:	75 23                	jne    80f00d <fat32_write_inode+0x74>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:731
	{
		printf("FS ERROR:write root inode!\n");	
  80efea:	48 b8 6c 91 81 00 00 	movabs rax,0x81916c
  80eff1:	00 00 00 
  80eff4:	48 89 c7             	mov    rdi,rax
  80eff7:	b8 00 00 00 00       	mov    eax,0x0
  80effc:	48 ba 97 11 80 00 00 	movabs rdx,0x801197
  80f003:	00 00 00 
  80f006:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:732
		return ;
  80f008:	e9 61 01 00 00       	jmp    80f16e <fat32_write_inode+0x1d5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:735
	}

	sector = fsbi->Data_firstsector + (finode->dentry_location - 2) * fsbi->sector_per_cluster;
  80f00d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  80f011:	48 8b 48 28          	mov    rcx,QWORD PTR [rax+0x28]
  80f015:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80f019:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
  80f01d:	48 8d 50 fe          	lea    rdx,[rax-0x2]
  80f021:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  80f025:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80f029:	48 0f af c2          	imul   rax,rdx
  80f02d:	48 01 c8             	add    rax,rcx
  80f030:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:736
	buf = (struct FAT32_Directory *) kmalloc(fsbi->bytes_per_cluster, 0);
  80f034:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  80f038:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  80f03c:	be 00 00 00 00       	mov    esi,0x0
  80f041:	48 89 c7             	mov    rdi,rax
  80f044:	b8 00 00 00 00       	mov    eax,0x0
  80f049:	48 ba d4 18 80 00 00 	movabs rdx,0x8018d4
  80f050:	00 00 00 
  80f053:	ff d2                	call   rdx
  80f055:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:737
	memset(buf,0,fsbi->bytes_per_cluster);
  80f059:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  80f05d:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  80f061:	89 c2                	mov    edx,eax
  80f063:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80f067:	be 00 00 00 00       	mov    esi,0x0
  80f06c:	48 89 c7             	mov    rdi,rax
  80f06f:	48 b8 21 04 81 00 00 	movabs rax,0x810421
  80f076:	00 00 00 
  80f079:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:738
	int r=request(DISK_MAJOR_MAJOR,DISKREQ_READ,sector,fsbi->sector_per_cluster,(unsigned char *)buf);
  80f07b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  80f07f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80f083:	89 c1                	mov    ecx,eax
  80f085:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  80f089:	89 c2                	mov    edx,eax
  80f08b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80f08f:	49 89 c0             	mov    r8,rax
  80f092:	be 00 00 00 00       	mov    esi,0x0
  80f097:	bf 00 00 00 00       	mov    edi,0x0
  80f09c:	48 b8 72 c1 80 00 00 	movabs rax,0x80c172
  80f0a3:	00 00 00 
  80f0a6:	ff d0                	call   rax
  80f0a8:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:739
    chk_result(r);
  80f0ab:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
  80f0ae:	89 c7                	mov    edi,eax
  80f0b0:	48 b8 f6 c9 80 00 00 	movabs rax,0x80c9f6
  80f0b7:	00 00 00 
  80f0ba:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:740
    fdentry = buf+finode->dentry_position;
  80f0bc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80f0c0:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80f0c4:	48 c1 e0 05          	shl    rax,0x5
  80f0c8:	48 89 c2             	mov    rdx,rax
  80f0cb:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80f0cf:	48 01 d0             	add    rax,rdx
  80f0d2:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:743

	////alert fat32 dentry data
	fdentry->DIR_FileSize = inode->file_size;
  80f0d6:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80f0da:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80f0dd:	89 c2                	mov    edx,eax
  80f0df:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80f0e3:	89 50 1c             	mov    DWORD PTR [rax+0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:744
	fdentry->DIR_FstClusLO = finode->first_cluster & 0xffff;
  80f0e6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80f0ea:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80f0ed:	89 c2                	mov    edx,eax
  80f0ef:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80f0f3:	66 89 50 1a          	mov    WORD PTR [rax+0x1a],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:745
	fdentry->DIR_FstClusHI = (fdentry->DIR_FstClusHI & 0xf000) | (finode->first_cluster >> 16);
  80f0f7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80f0fb:	0f b7 40 14          	movzx  eax,WORD PTR [rax+0x14]
  80f0ff:	66 25 00 f0          	and    ax,0xf000
  80f103:	89 c2                	mov    edx,eax
  80f105:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80f109:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80f10c:	48 c1 e8 10          	shr    rax,0x10
  80f110:	09 c2                	or     edx,eax
  80f112:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80f116:	66 89 50 14          	mov    WORD PTR [rax+0x14],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:747

	int r1=request(DISK_MAJOR_MAJOR,DISKREQ_WRITE,sector,fsbi->sector_per_cluster,(unsigned char *)buf);
  80f11a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  80f11e:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80f122:	89 c1                	mov    ecx,eax
  80f124:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  80f128:	89 c2                	mov    edx,eax
  80f12a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80f12e:	49 89 c0             	mov    r8,rax
  80f131:	be 01 00 00 00       	mov    esi,0x1
  80f136:	bf 00 00 00 00       	mov    edi,0x0
  80f13b:	48 b8 72 c1 80 00 00 	movabs rax,0x80c172
  80f142:	00 00 00 
  80f145:	ff d0                	call   rax
  80f147:	89 45 d0             	mov    DWORD PTR [rbp-0x30],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:748
    chk_result(r1);
  80f14a:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
  80f14d:	89 c7                	mov    edi,eax
  80f14f:	48 b8 f6 c9 80 00 00 	movabs rax,0x80c9f6
  80f156:	00 00 00 
  80f159:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:749
    kmfree(buf);
  80f15b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80f15f:	48 89 c7             	mov    rdi,rax
  80f162:	48 b8 e0 1b 80 00 00 	movabs rax,0x801be0
  80f169:	00 00 00 
  80f16c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:750
}
  80f16e:	c9                   	leave  
  80f16f:	c3                   	ret    

000000000080f170 <fat32_read_superblock>:
fat32_read_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:761

	.write_inode = fat32_write_inode,
};

struct super_block * fat32_read_superblock(struct Disk_Partition_Table_Entry * DPTE,void * buf)
{
  80f170:	f3 0f 1e fa          	endbr64 
  80f174:	55                   	push   rbp
  80f175:	48 89 e5             	mov    rbp,rsp
  80f178:	48 83 ec 50          	sub    rsp,0x50
  80f17c:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
  80f180:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:762
	struct super_block * sbp = NULL;
  80f184:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
  80f18b:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:763
	struct FAT32_inode_info * finode = NULL;
  80f18c:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
  80f193:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:764
	struct FAT32_BootSector * fbs = NULL;
  80f194:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
  80f19b:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:765
	struct FAT32_sb_info * fsbi = NULL;
  80f19c:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
  80f1a3:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:768

	////super block
	sbp = (struct super_block *) kmalloc(sizeof(struct super_block), 0);
  80f1a4:	be 00 00 00 00       	mov    esi,0x0
  80f1a9:	bf 18 00 00 00       	mov    edi,0x18
  80f1ae:	b8 00 00 00 00       	mov    eax,0x0
  80f1b3:	48 ba d4 18 80 00 00 	movabs rdx,0x8018d4
  80f1ba:	00 00 00 
  80f1bd:	ff d2                	call   rdx
  80f1bf:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:769
	memset(sbp,0,sizeof(struct super_block));
  80f1c3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80f1c7:	ba 18 00 00 00       	mov    edx,0x18
  80f1cc:	be 00 00 00 00       	mov    esi,0x0
  80f1d1:	48 89 c7             	mov    rdi,rax
  80f1d4:	48 b8 21 04 81 00 00 	movabs rax,0x810421
  80f1db:	00 00 00 
  80f1de:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:771

	sbp->sb_ops = &FAT32_sb_ops;
  80f1e0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80f1e4:	48 b9 20 11 81 00 00 	movabs rcx,0x811120
  80f1eb:	00 00 00 
  80f1ee:	48 89 48 08          	mov    QWORD PTR [rax+0x8],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:772
	sbp->private_sb_info = (struct FAT32_sb_info *) kmalloc(sizeof(struct FAT32_sb_info), 0);
  80f1f2:	be 00 00 00 00       	mov    esi,0x0
  80f1f7:	bf 60 00 00 00       	mov    edi,0x60
  80f1fc:	b8 00 00 00 00       	mov    eax,0x0
  80f201:	48 ba d4 18 80 00 00 	movabs rdx,0x8018d4
  80f208:	00 00 00 
  80f20b:	ff d2                	call   rdx
  80f20d:	48 89 c2             	mov    rdx,rax
  80f210:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80f214:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:773
	memset(sbp->private_sb_info,0,sizeof(struct FAT32_sb_info));
  80f218:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80f21c:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80f220:	ba 60 00 00 00       	mov    edx,0x60
  80f225:	be 00 00 00 00       	mov    esi,0x0
  80f22a:	48 89 c7             	mov    rdi,rax
  80f22d:	48 b8 21 04 81 00 00 	movabs rax,0x810421
  80f234:	00 00 00 
  80f237:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:776

	////fat32 boot sector
	fbs = (struct FAT32_BootSector *)buf;
  80f239:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  80f23d:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:777
 	fsbi = sbp->private_sb_info;
  80f241:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80f245:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
  80f249:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:778
	fsbi->start_sector = DPTE->start_LBA;
  80f24d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  80f251:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
  80f254:	89 c2                	mov    edx,eax
  80f256:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  80f25a:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:779
	fsbi->sector_count = DPTE->sectors_limit;
  80f25d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  80f261:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
  80f264:	89 c2                	mov    edx,eax
  80f266:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  80f26a:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:780
	fsbi->sector_per_cluster = fbs->BPB_SecPerClus;
  80f26e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80f272:	0f b6 40 0d          	movzx  eax,BYTE PTR [rax+0xd]
  80f276:	0f b6 d0             	movzx  edx,al
  80f279:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  80f27d:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:781
	fsbi->bytes_per_cluster = fbs->BPB_SecPerClus * fbs->BPB_BytesPerSec;
  80f281:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80f285:	0f b6 40 0d          	movzx  eax,BYTE PTR [rax+0xd]
  80f289:	0f b6 d0             	movzx  edx,al
  80f28c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80f290:	0f b7 40 0b          	movzx  eax,WORD PTR [rax+0xb]
  80f294:	0f b7 c0             	movzx  eax,ax
  80f297:	0f af c2             	imul   eax,edx
  80f29a:	48 63 d0             	movsxd rdx,eax
  80f29d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  80f2a1:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:782
	fsbi->bytes_per_sector = fbs->BPB_BytesPerSec;
  80f2a5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80f2a9:	0f b7 40 0b          	movzx  eax,WORD PTR [rax+0xb]
  80f2ad:	0f b7 d0             	movzx  edx,ax
  80f2b0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  80f2b4:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:783
	fsbi->Data_firstsector = DPTE->start_LBA + fbs->BPB_RsvdSecCnt + fbs->BPB_FATSz32 * fbs->BPB_NumFATs;
  80f2b8:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  80f2bc:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
  80f2bf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80f2c3:	0f b7 40 0e          	movzx  eax,WORD PTR [rax+0xe]
  80f2c7:	0f b7 c0             	movzx  eax,ax
  80f2ca:	8d 0c 02             	lea    ecx,[rdx+rax*1]
  80f2cd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80f2d1:	8b 50 24             	mov    edx,DWORD PTR [rax+0x24]
  80f2d4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80f2d8:	0f b6 40 10          	movzx  eax,BYTE PTR [rax+0x10]
  80f2dc:	0f b6 c0             	movzx  eax,al
  80f2df:	0f af c2             	imul   eax,edx
  80f2e2:	01 c8                	add    eax,ecx
  80f2e4:	89 c2                	mov    edx,eax
  80f2e6:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  80f2ea:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:784
	fsbi->FAT1_firstsector = DPTE->start_LBA + fbs->BPB_RsvdSecCnt;
  80f2ee:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  80f2f2:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
  80f2f5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80f2f9:	0f b7 40 0e          	movzx  eax,WORD PTR [rax+0xe]
  80f2fd:	0f b7 c0             	movzx  eax,ax
  80f300:	01 d0                	add    eax,edx
  80f302:	89 c2                	mov    edx,eax
  80f304:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  80f308:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:785
	fsbi->sector_per_FAT = fbs->BPB_FATSz32;
  80f30c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80f310:	8b 40 24             	mov    eax,DWORD PTR [rax+0x24]
  80f313:	89 c2                	mov    edx,eax
  80f315:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  80f319:	48 89 50 38          	mov    QWORD PTR [rax+0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:786
	fsbi->NumFATs = fbs->BPB_NumFATs;
  80f31d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80f321:	0f b6 40 10          	movzx  eax,BYTE PTR [rax+0x10]
  80f325:	0f b6 d0             	movzx  edx,al
  80f328:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  80f32c:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:787
	fsbi->fsinfo_sector_infat = fbs->BPB_FSInfo;
  80f330:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80f334:	0f b7 40 30          	movzx  eax,WORD PTR [rax+0x30]
  80f338:	0f b7 d0             	movzx  edx,ax
  80f33b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  80f33f:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:788
	fsbi->bootsector_bk_infat = fbs->BPB_BkBootSec;	
  80f343:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80f347:	0f b7 40 32          	movzx  eax,WORD PTR [rax+0x32]
  80f34b:	0f b7 d0             	movzx  edx,ax
  80f34e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  80f352:	48 89 50 50          	mov    QWORD PTR [rax+0x50],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:790
	
	printf("FAT32 Boot Sector\n\tBPB_FSInfo:%x\n\tBPB_BkBootSec:%x\n\tBPB_TotSec32:%x\n",fbs->BPB_FSInfo,fbs->BPB_BkBootSec,fbs->BPB_TotSec32);
  80f356:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80f35a:	8b 48 20             	mov    ecx,DWORD PTR [rax+0x20]
  80f35d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80f361:	0f b7 40 32          	movzx  eax,WORD PTR [rax+0x32]
  80f365:	0f b7 d0             	movzx  edx,ax
  80f368:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80f36c:	0f b7 40 30          	movzx  eax,WORD PTR [rax+0x30]
  80f370:	0f b7 c0             	movzx  eax,ax
  80f373:	89 c6                	mov    esi,eax
  80f375:	48 b8 88 91 81 00 00 	movabs rax,0x819188
  80f37c:	00 00 00 
  80f37f:	48 89 c7             	mov    rdi,rax
  80f382:	b8 00 00 00 00       	mov    eax,0x0
  80f387:	49 b8 97 11 80 00 00 	movabs r8,0x801197
  80f38e:	00 00 00 
  80f391:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:793
	
	////fat32 fsinfo sector
	fsbi->fat_fsinfo = (struct FAT32_FSInfo *) kmalloc(sizeof(struct FAT32_FSInfo), 0);
  80f394:	be 00 00 00 00       	mov    esi,0x0
  80f399:	bf 00 02 00 00       	mov    edi,0x200
  80f39e:	b8 00 00 00 00       	mov    eax,0x0
  80f3a3:	48 ba d4 18 80 00 00 	movabs rdx,0x8018d4
  80f3aa:	00 00 00 
  80f3ad:	ff d2                	call   rdx
  80f3af:	48 89 c2             	mov    rdx,rax
  80f3b2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  80f3b6:	48 89 50 58          	mov    QWORD PTR [rax+0x58],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:794
	memset(fsbi->fat_fsinfo,0,512);
  80f3ba:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  80f3be:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
  80f3c2:	ba 00 02 00 00       	mov    edx,0x200
  80f3c7:	be 00 00 00 00       	mov    esi,0x0
  80f3cc:	48 89 c7             	mov    rdi,rax
  80f3cf:	48 b8 21 04 81 00 00 	movabs rax,0x810421
  80f3d6:	00 00 00 
  80f3d9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:795
	int r=request(DISK_MAJOR_MAJOR,DISKREQ_READ,DPTE->start_LBA + fbs->BPB_FSInfo,1,(unsigned char *)fsbi->fat_fsinfo);
  80f3db:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  80f3df:	48 8b 50 58          	mov    rdx,QWORD PTR [rax+0x58]
  80f3e3:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  80f3e7:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
  80f3ea:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80f3ee:	0f b7 40 30          	movzx  eax,WORD PTR [rax+0x30]
  80f3f2:	0f b7 c0             	movzx  eax,ax
  80f3f5:	01 c8                	add    eax,ecx
  80f3f7:	49 89 d0             	mov    r8,rdx
  80f3fa:	b9 01 00 00 00       	mov    ecx,0x1
  80f3ff:	89 c2                	mov    edx,eax
  80f401:	be 00 00 00 00       	mov    esi,0x0
  80f406:	bf 00 00 00 00       	mov    edi,0x0
  80f40b:	48 b8 72 c1 80 00 00 	movabs rax,0x80c172
  80f412:	00 00 00 
  80f415:	ff d0                	call   rax
  80f417:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:796
    chk_result(r);
  80f41a:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
  80f41d:	89 c7                	mov    edi,eax
  80f41f:	48 b8 f6 c9 80 00 00 	movabs rax,0x80c9f6
  80f426:	00 00 00 
  80f429:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:797
	printf("FAT32 FSInfo\n\tFSI_LeadSig:%x\n\tFSI_StrucSig:%x\n\tFSI_Free_Count:%x\n",fsbi->fat_fsinfo->FSI_LeadSig,fsbi->fat_fsinfo->FSI_StrucSig,fsbi->fat_fsinfo->FSI_Free_Count);
  80f42b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  80f42f:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
  80f433:	8b 88 e8 01 00 00    	mov    ecx,DWORD PTR [rax+0x1e8]
  80f439:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  80f43d:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
  80f441:	8b 90 e4 01 00 00    	mov    edx,DWORD PTR [rax+0x1e4]
  80f447:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  80f44b:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
  80f44f:	8b 00                	mov    eax,DWORD PTR [rax]
  80f451:	89 c6                	mov    esi,eax
  80f453:	48 b8 d0 91 81 00 00 	movabs rax,0x8191d0
  80f45a:	00 00 00 
  80f45d:	48 89 c7             	mov    rdi,rax
  80f460:	b8 00 00 00 00       	mov    eax,0x0
  80f465:	49 b8 97 11 80 00 00 	movabs r8,0x801197
  80f46c:	00 00 00 
  80f46f:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:800
	
	////directory entry
	sbp->root = (struct dir_entry *) kmalloc(sizeof(struct dir_entry), 0);
  80f472:	be 00 00 00 00       	mov    esi,0x0
  80f477:	bf 58 00 00 00       	mov    edi,0x58
  80f47c:	b8 00 00 00 00       	mov    eax,0x0
  80f481:	48 ba d4 18 80 00 00 	movabs rdx,0x8018d4
  80f488:	00 00 00 
  80f48b:	ff d2                	call   rdx
  80f48d:	48 89 c2             	mov    rdx,rax
  80f490:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80f494:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:801
	memset(sbp->root,0,sizeof(struct dir_entry));
  80f497:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80f49b:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80f49e:	ba 58 00 00 00       	mov    edx,0x58
  80f4a3:	be 00 00 00 00       	mov    esi,0x0
  80f4a8:	48 89 c7             	mov    rdi,rax
  80f4ab:	48 b8 21 04 81 00 00 	movabs rax,0x810421
  80f4b2:	00 00 00 
  80f4b5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:803

	list_init(&sbp->root->child_node);
  80f4b7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80f4bb:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80f4be:	48 83 c0 10          	add    rax,0x10
  80f4c2:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
  80f4c6:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80f4ca:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
  80f4d1:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
  80f4d5:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
  80f4dc:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
  80f4dd:	90                   	nop
fat32_read_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:804
	list_init(&sbp->root->subdirs_list);
  80f4de:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80f4e2:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80f4e5:	48 83 c0 28          	add    rax,0x28
  80f4e9:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
  80f4ed:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  80f4f1:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
  80f4f8:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  80f4fc:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
  80f503:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
  80f504:	90                   	nop
fat32_read_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:805
	sbp->root->parent = sbp->root;
  80f505:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80f509:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80f50c:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  80f510:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
  80f513:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:806
	sbp->root->dir_ops = &FAT32_dentry_ops;
  80f517:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80f51b:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80f51e:	48 b9 00 11 81 00 00 	movabs rcx,0x811100
  80f525:	00 00 00 
  80f528:	48 89 48 50          	mov    QWORD PTR [rax+0x50],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:807
	sbp->root->name = (char *) kmalloc(2, 0);
  80f52c:	be 00 00 00 00       	mov    esi,0x0
  80f531:	bf 02 00 00 00       	mov    edi,0x2
  80f536:	b8 00 00 00 00       	mov    eax,0x0
  80f53b:	48 ba d4 18 80 00 00 	movabs rdx,0x8018d4
  80f542:	00 00 00 
  80f545:	ff d2                	call   rdx
  80f547:	48 89 c2             	mov    rdx,rax
  80f54a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80f54e:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80f551:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:808
	sbp->root->name[0] = '/';
  80f554:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80f558:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80f55b:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80f55e:	c6 00 2f             	mov    BYTE PTR [rax],0x2f
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:809
	sbp->root->name_length = 1;
  80f561:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80f565:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80f568:	c7 40 08 01 00 00 00 	mov    DWORD PTR [rax+0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:812

	////index node
	sbp->root->dir_inode = (struct index_node *) kmalloc(sizeof(struct index_node), 0);
  80f56f:	be 00 00 00 00       	mov    esi,0x0
  80f574:	bf 38 00 00 00       	mov    edi,0x38
  80f579:	b8 00 00 00 00       	mov    eax,0x0
  80f57e:	48 ba d4 18 80 00 00 	movabs rdx,0x8018d4
  80f585:	00 00 00 
  80f588:	ff d2                	call   rdx
  80f58a:	48 89 c2             	mov    rdx,rax
  80f58d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80f591:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80f594:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:813
	memset(sbp->root->dir_inode,0,sizeof(struct index_node));
  80f598:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80f59c:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80f59f:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
  80f5a3:	ba 38 00 00 00       	mov    edx,0x38
  80f5a8:	be 00 00 00 00       	mov    esi,0x0
  80f5ad:	48 89 c7             	mov    rdi,rax
  80f5b0:	48 b8 21 04 81 00 00 	movabs rax,0x810421
  80f5b7:	00 00 00 
  80f5ba:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:814
	sbp->root->dir_inode->inode_ops = &FAT32_inode_ops;
  80f5bc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80f5c0:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80f5c3:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
  80f5c7:	48 b9 c0 10 81 00 00 	movabs rcx,0x8110c0
  80f5ce:	00 00 00 
  80f5d1:	48 89 48 28          	mov    QWORD PTR [rax+0x28],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:815
	sbp->root->dir_inode->f_ops = &FAT32_file_ops;
  80f5d5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80f5d9:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80f5dc:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
  80f5e0:	48 bf 80 10 81 00 00 	movabs rdi,0x811080
  80f5e7:	00 00 00 
  80f5ea:	48 89 78 20          	mov    QWORD PTR [rax+0x20],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:816
	sbp->root->dir_inode->file_size = 0;
  80f5ee:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80f5f2:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80f5f5:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
  80f5f9:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:817
	sbp->root->dir_inode->blocks = (sbp->root->dir_inode->file_size + fsbi->bytes_per_cluster - 1)/fsbi->bytes_per_sector;
  80f600:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80f604:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80f607:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
  80f60b:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  80f60e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  80f612:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
  80f616:	48 01 d0             	add    rax,rdx
  80f619:	48 8d 50 ff          	lea    rdx,[rax-0x1]
  80f61d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  80f621:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
  80f625:	48 89 c6             	mov    rsi,rax
  80f628:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80f62c:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80f62f:	48 8b 48 40          	mov    rcx,QWORD PTR [rax+0x40]
  80f633:	48 89 d0             	mov    rax,rdx
  80f636:	ba 00 00 00 00       	mov    edx,0x0
  80f63b:	48 f7 f6             	div    rsi
  80f63e:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:818
	sbp->root->dir_inode->attribute = FS_ATTR_DIR;
  80f642:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80f646:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80f649:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
  80f64d:	48 c7 40 10 02 00 00 	mov    QWORD PTR [rax+0x10],0x2
  80f654:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:819
	sbp->root->dir_inode->sb = sbp;
  80f655:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80f659:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80f65c:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
  80f660:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  80f664:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:822

	////fat32 root inode
	sbp->root->dir_inode->private_index_info = (struct FAT32_inode_info *) kmalloc(sizeof(struct FAT32_inode_info), 0);
  80f668:	be 00 00 00 00       	mov    esi,0x0
  80f66d:	bf 20 00 00 00       	mov    edi,0x20
  80f672:	b8 00 00 00 00       	mov    eax,0x0
  80f677:	48 ba d4 18 80 00 00 	movabs rdx,0x8018d4
  80f67e:	00 00 00 
  80f681:	ff d2                	call   rdx
  80f683:	48 89 c2             	mov    rdx,rax
  80f686:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80f68a:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80f68d:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
  80f691:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:823
	memset(sbp->root->dir_inode->private_index_info,0,sizeof(struct FAT32_inode_info));
  80f695:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80f699:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80f69c:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
  80f6a0:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
  80f6a4:	ba 20 00 00 00       	mov    edx,0x20
  80f6a9:	be 00 00 00 00       	mov    esi,0x0
  80f6ae:	48 89 c7             	mov    rdi,rax
  80f6b1:	48 b8 21 04 81 00 00 	movabs rax,0x810421
  80f6b8:	00 00 00 
  80f6bb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:824
	finode = (struct FAT32_inode_info *)sbp->root->dir_inode->private_index_info;
  80f6bd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80f6c1:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80f6c4:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
  80f6c8:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
  80f6cc:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:825
	finode->first_cluster = fbs->BPB_RootClus;
  80f6d0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80f6d4:	8b 40 2c             	mov    eax,DWORD PTR [rax+0x2c]
  80f6d7:	89 c2                	mov    edx,eax
  80f6d9:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80f6dd:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:826
	finode->dentry_location = 0;
  80f6e0:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80f6e4:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
  80f6eb:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:827
	finode->dentry_position = 0; 
  80f6ec:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80f6f0:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
  80f6f7:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:828
	finode->create_date = 0;
  80f6f8:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80f6fc:	66 c7 40 18 00 00    	mov    WORD PTR [rax+0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:829
	finode->create_time = 0;
  80f702:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80f706:	66 c7 40 1a 00 00    	mov    WORD PTR [rax+0x1a],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:830
	finode->write_date = 0;
  80f70c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80f710:	66 c7 40 1c 00 00    	mov    WORD PTR [rax+0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:831
	finode->write_time = 0;
  80f716:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80f71a:	66 c7 40 1e 00 00    	mov    WORD PTR [rax+0x1e],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:833

	return sbp;
  80f720:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:834
}
  80f724:	c9                   	leave  
  80f725:	c3                   	ret    

000000000080f726 <DISK1_FAT32_FS_init>:
DISK1_FAT32_FS_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:846
	.read_superblock = fat32_read_superblock,
	.next = NULL,
};

void DISK1_FAT32_FS_init()
{
  80f726:	f3 0f 1e fa          	endbr64 
  80f72a:	55                   	push   rbp
  80f72b:	48 89 e5             	mov    rbp,rsp
  80f72e:	48 81 ec 20 04 00 00 	sub    rsp,0x420
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:849
	int i;
	unsigned char buf[512];
	struct dir_entry * dentry = NULL;
  80f735:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
  80f73c:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:850
	struct Disk_Partition_Table DPT = {0};
  80f73d:	48 8d 95 e0 fb ff ff 	lea    rdx,[rbp-0x420]
  80f744:	b8 00 00 00 00       	mov    eax,0x0
  80f749:	b9 40 00 00 00       	mov    ecx,0x40
  80f74e:	48 89 d7             	mov    rdi,rdx
  80f751:	f3 48 ab             	rep stos QWORD PTR es:[rdi],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:852

	register_filesystem(&FAT32_fs_type);
  80f754:	48 b8 40 11 81 00 00 	movabs rax,0x811140
  80f75b:	00 00 00 
  80f75e:	48 89 c7             	mov    rdi,rax
  80f761:	48 b8 a8 a4 80 00 00 	movabs rax,0x80a4a8
  80f768:	00 00 00 
  80f76b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:854
	
	memset(buf,0,512);
  80f76d:	48 8d 85 e0 fd ff ff 	lea    rax,[rbp-0x220]
  80f774:	ba 00 02 00 00       	mov    edx,0x200
  80f779:	be 00 00 00 00       	mov    esi,0x0
  80f77e:	48 89 c7             	mov    rdi,rax
  80f781:	48 b8 21 04 81 00 00 	movabs rax,0x810421
  80f788:	00 00 00 
  80f78b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:855
	int r=request(DISK_MAJOR_MAJOR,DISKREQ_READ,0x0,1,(unsigned char *)buf);
  80f78d:	48 8d 85 e0 fd ff ff 	lea    rax,[rbp-0x220]
  80f794:	49 89 c0             	mov    r8,rax
  80f797:	b9 01 00 00 00       	mov    ecx,0x1
  80f79c:	ba 00 00 00 00       	mov    edx,0x0
  80f7a1:	be 00 00 00 00       	mov    esi,0x0
  80f7a6:	bf 00 00 00 00       	mov    edi,0x0
  80f7ab:	48 b8 72 c1 80 00 00 	movabs rax,0x80c172
  80f7b2:	00 00 00 
  80f7b5:	ff d0                	call   rax
  80f7b7:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:856
    chk_result(r);
  80f7ba:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  80f7bd:	89 c7                	mov    edi,eax
  80f7bf:	48 b8 f6 c9 80 00 00 	movabs rax,0x80c9f6
  80f7c6:	00 00 00 
  80f7c9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:857
    DPT = *(struct Disk_Partition_Table *)buf;
  80f7cb:	48 8d 95 e0 fd ff ff 	lea    rdx,[rbp-0x220]
  80f7d2:	48 8d 85 e0 fb ff ff 	lea    rax,[rbp-0x420]
  80f7d9:	48 89 d6             	mov    rsi,rdx
  80f7dc:	ba 40 00 00 00       	mov    edx,0x40
  80f7e1:	48 89 c7             	mov    rdi,rax
  80f7e4:	48 89 d1             	mov    rcx,rdx
  80f7e7:	f3 48 a5             	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:858
	printf("DPTE[0] start_LBA:%x\ttype:%x\n",DPT.DPTE[0].start_LBA,DPT.DPTE[0].type);
  80f7ea:	0f b6 85 a2 fd ff ff 	movzx  eax,BYTE PTR [rbp-0x25e]
  80f7f1:	0f b6 d0             	movzx  edx,al
  80f7f4:	8b 85 a6 fd ff ff    	mov    eax,DWORD PTR [rbp-0x25a]
  80f7fa:	89 c6                	mov    esi,eax
  80f7fc:	48 b8 18 92 81 00 00 	movabs rax,0x819218
  80f803:	00 00 00 
  80f806:	48 89 c7             	mov    rdi,rax
  80f809:	b8 00 00 00 00       	mov    eax,0x0
  80f80e:	48 b9 97 11 80 00 00 	movabs rcx,0x801197
  80f815:	00 00 00 
  80f818:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:860

	memset(buf,0,512);
  80f81a:	48 8d 85 e0 fd ff ff 	lea    rax,[rbp-0x220]
  80f821:	ba 00 02 00 00       	mov    edx,0x200
  80f826:	be 00 00 00 00       	mov    esi,0x0
  80f82b:	48 89 c7             	mov    rdi,rax
  80f82e:	48 b8 21 04 81 00 00 	movabs rax,0x810421
  80f835:	00 00 00 
  80f838:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:861
	int r1=request(DISK_MAJOR_MAJOR,DISKREQ_READ,DPT.DPTE[0].start_LBA,1,(unsigned char *)buf);
  80f83a:	8b 85 a6 fd ff ff    	mov    eax,DWORD PTR [rbp-0x25a]
  80f840:	89 c2                	mov    edx,eax
  80f842:	48 8d 85 e0 fd ff ff 	lea    rax,[rbp-0x220]
  80f849:	49 89 c0             	mov    r8,rax
  80f84c:	b9 01 00 00 00       	mov    ecx,0x1
  80f851:	be 00 00 00 00       	mov    esi,0x0
  80f856:	bf 00 00 00 00       	mov    edi,0x0
  80f85b:	48 b8 72 c1 80 00 00 	movabs rax,0x80c172
  80f862:	00 00 00 
  80f865:	ff d0                	call   rax
  80f867:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:862
    chk_result(r1);
  80f86a:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  80f86d:	89 c7                	mov    edi,eax
  80f86f:	48 b8 f6 c9 80 00 00 	movabs rax,0x80c9f6
  80f876:	00 00 00 
  80f879:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:865

    //挂载新文件系统到/mnt
	struct super_block *fat32_sb= mount_fs("FAT32",&DPT.DPTE[0],buf);	//not dev node
  80f87b:	48 8d 85 e0 fd ff ff 	lea    rax,[rbp-0x220]
  80f882:	48 8d 95 e0 fb ff ff 	lea    rdx,[rbp-0x420]
  80f889:	48 8d 8a be 01 00 00 	lea    rcx,[rdx+0x1be]
  80f890:	48 89 c2             	mov    rdx,rax
  80f893:	48 89 ce             	mov    rsi,rcx
  80f896:	48 b8 12 92 81 00 00 	movabs rax,0x819212
  80f89d:	00 00 00 
  80f8a0:	48 89 c7             	mov    rdi,rax
  80f8a3:	48 b8 23 a4 80 00 00 	movabs rax,0x80a423
  80f8aa:	00 00 00 
  80f8ad:	ff d0                	call   rax
  80f8af:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:866
    fat32_sb->root=dmnt;
  80f8b3:	48 b8 c8 84 40 00 00 	movabs rax,0x4084c8
  80f8ba:	00 00 00 
  80f8bd:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  80f8c0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80f8c4:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:868
//    list_add_to_behind(&root_sb->root->subdirs_list,ddev);//把dev文件夹挂到新的rfs下
}
  80f8c7:	90                   	nop
  80f8c8:	c9                   	leave  
  80f8c9:	c3                   	ret    

000000000080f8ca <close_tty>:
close_tty():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:12
int stdd=0;
struct file_operations tty_fops={
        .open=init_tty, .close=close_tty,.write=write_tty,.read=read_tty,.ioctl=ioctl_tty
};

long close_tty(struct index_node * inode,struct file * filp){
  80f8ca:	f3 0f 1e fa          	endbr64 
  80f8ce:	55                   	push   rbp
  80f8cf:	48 89 e5             	mov    rbp,rsp
  80f8d2:	48 83 ec 30          	sub    rsp,0x30
  80f8d6:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  80f8da:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:13
    stdbuf_t * bi=&((tty_t*)filp->private_data)->stdin_buf;
  80f8de:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  80f8e2:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
  80f8e6:	48 83 c0 18          	add    rax,0x18
  80f8ea:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:14
    stdbuf_t * bo=&((tty_t*)filp->private_data)->stdout_buf;
  80f8ee:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  80f8f2:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
  80f8f6:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:15
    stdbuf_t * be=&((tty_t*)filp->private_data)->stderr_buf;
  80f8fa:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  80f8fe:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
  80f902:	48 83 c0 30          	add    rax,0x30
  80f906:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:16
    kmfree((addr_t) bi);
  80f90a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80f90e:	48 89 c7             	mov    rdi,rax
  80f911:	48 b8 e0 1b 80 00 00 	movabs rax,0x801be0
  80f918:	00 00 00 
  80f91b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:17
    kmfree((addr_t) bo);
  80f91d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80f921:	48 89 c7             	mov    rdi,rax
  80f924:	48 b8 e0 1b 80 00 00 	movabs rax,0x801be0
  80f92b:	00 00 00 
  80f92e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:18
    kmfree((addr_t) be);
  80f930:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80f934:	48 89 c7             	mov    rdi,rax
  80f937:	48 b8 e0 1b 80 00 00 	movabs rax,0x801be0
  80f93e:	00 00 00 
  80f941:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:19
    kmfree((addr_t) filp->private_data);
  80f943:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  80f947:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
  80f94b:	48 89 c7             	mov    rdi,rax
  80f94e:	48 b8 e0 1b 80 00 00 	movabs rax,0x801be0
  80f955:	00 00 00 
  80f958:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:20
    return 0;
  80f95a:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:21
}
  80f95f:	c9                   	leave  
  80f960:	c3                   	ret    

000000000080f961 <init_tty>:
init_tty():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:24
//打开文件
long init_tty(struct index_node * inode,struct file * filp)
{
  80f961:	f3 0f 1e fa          	endbr64 
  80f965:	55                   	push   rbp
  80f966:	48 89 e5             	mov    rbp,rsp
  80f969:	48 83 ec 20          	sub    rsp,0x20
  80f96d:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  80f971:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:25
    tty_t *ntty=(tty_t*) kmalloc();
  80f975:	b8 00 00 00 00       	mov    eax,0x0
  80f97a:	48 ba d4 18 80 00 00 	movabs rdx,0x8018d4
  80f981:	00 00 00 
  80f984:	ff d2                	call   rdx
  80f986:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:27
    //创建三个缓冲区
    ntty->stdin_buf.data= (char*) kmalloc();
  80f98a:	b8 00 00 00 00       	mov    eax,0x0
  80f98f:	48 ba d4 18 80 00 00 	movabs rdx,0x8018d4
  80f996:	00 00 00 
  80f999:	ff d2                	call   rdx
  80f99b:	48 89 c2             	mov    rdx,rax
  80f99e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80f9a2:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:28
    ntty->stdout_buf.data=(char*) kmalloc();
  80f9a6:	b8 00 00 00 00       	mov    eax,0x0
  80f9ab:	48 ba d4 18 80 00 00 	movabs rdx,0x8018d4
  80f9b2:	00 00 00 
  80f9b5:	ff d2                	call   rdx
  80f9b7:	48 89 c2             	mov    rdx,rax
  80f9ba:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80f9be:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:29
    ntty->stderr_buf.data=(char*) kmalloc();
  80f9c1:	b8 00 00 00 00       	mov    eax,0x0
  80f9c6:	48 ba d4 18 80 00 00 	movabs rdx,0x8018d4
  80f9cd:	00 00 00 
  80f9d0:	ff d2                	call   rdx
  80f9d2:	48 89 c2             	mov    rdx,rax
  80f9d5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80f9d9:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:30
    ntty->stdin_buf. wptr= 0;
  80f9dd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80f9e1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [rax+0x20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:31
    ntty->stdout_buf.wptr= 0;
  80f9e8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80f9ec:	c7 40 08 00 00 00 00 	mov    DWORD PTR [rax+0x8],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:32
    ntty->stderr_buf.wptr= 0;
  80f9f3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80f9f7:	c7 40 38 00 00 00 00 	mov    DWORD PTR [rax+0x38],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:33
    ntty->stdin_buf. rptr= 0;
  80f9fe:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80fa02:	c7 40 24 00 00 00 00 	mov    DWORD PTR [rax+0x24],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:34
    ntty->stdout_buf.rptr= 0;
  80fa09:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80fa0d:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [rax+0xc],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:35
    ntty->stderr_buf.rptr= 0;
  80fa14:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80fa18:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [rax+0x3c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:36
    ntty->stdin_buf.size= PAGE_4K_SIZE;
  80fa1f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80fa23:	c7 40 28 00 10 00 00 	mov    DWORD PTR [rax+0x28],0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:37
    ntty->stdout_buf.size= PAGE_4K_SIZE;
  80fa2a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80fa2e:	c7 40 10 00 10 00 00 	mov    DWORD PTR [rax+0x10],0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:38
    ntty->stderr_buf.size= PAGE_4K_SIZE;
  80fa35:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80fa39:	c7 40 40 00 10 00 00 	mov    DWORD PTR [rax+0x40],0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:40
    //设置inode文件操作方式为tty方式
    inode->f_ops=&tty_fops;
  80fa40:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80fa44:	48 b9 60 11 81 00 00 	movabs rcx,0x811160
  80fa4b:	00 00 00 
  80fa4e:	48 89 48 20          	mov    QWORD PTR [rax+0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:41
    filp->f_ops=&tty_fops;
  80fa52:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  80fa56:	48 89 48 18          	mov    QWORD PTR [rax+0x18],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:42
    filp->private_data=ntty;
  80fa5a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  80fa5e:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
  80fa62:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:43
    return 0;
  80fa66:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:44
}
  80fa6b:	c9                   	leave  
  80fa6c:	c3                   	ret    

000000000080fa6d <read_tty>:
read_tty():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:47

long read_tty(struct file * filp,char * buf,unsigned long count,long * position)
{
  80fa6d:	f3 0f 1e fa          	endbr64 
  80fa71:	55                   	push   rbp
  80fa72:	48 89 e5             	mov    rbp,rsp
  80fa75:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  80fa79:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  80fa7d:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
  80fa81:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:48
    stdbuf_t * b=&((tty_t*)filp->private_data)->stdin_buf;
  80fa85:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80fa89:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
  80fa8d:	48 83 c0 18          	add    rax,0x18
  80fa91:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:49
    int i=0;
  80fa95:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:50
    while (i<count){
  80fa9c:	eb 6e                	jmp    80fb0c <read_tty+0x9f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:51
        if(b->rptr==b->size)
  80fa9e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80faa2:	8b 50 0c             	mov    edx,DWORD PTR [rax+0xc]
  80faa5:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80faa9:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
  80faac:	39 c2                	cmp    edx,eax
  80faae:	75 0b                	jne    80fabb <read_tty+0x4e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:52
            b->rptr=0;
  80fab0:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80fab4:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [rax+0xc],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:53
        if(b->rptr==b->wptr)continue;
  80fabb:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80fabf:	8b 50 0c             	mov    edx,DWORD PTR [rax+0xc]
  80fac2:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80fac6:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
  80fac9:	39 c2                	cmp    edx,eax
  80facb:	75 02                	jne    80facf <read_tty+0x62>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:53 (discriminator 1)
  80facd:	eb 3d                	jmp    80fb0c <read_tty+0x9f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:54
        buf[i++]=b->data[b->rptr];
  80facf:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80fad3:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  80fad6:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80fada:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
  80fadd:	48 98                	cdqe   
  80fadf:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
  80fae3:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80fae6:	8d 50 01             	lea    edx,[rax+0x1]
  80fae9:	89 55 fc             	mov    DWORD PTR [rbp-0x4],edx
  80faec:	48 63 d0             	movsxd rdx,eax
  80faef:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  80faf3:	48 01 c2             	add    rdx,rax
  80faf6:	0f b6 01             	movzx  eax,BYTE PTR [rcx]
  80faf9:	88 02                	mov    BYTE PTR [rdx],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:55
        b->rptr++;
  80fafb:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80faff:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
  80fb02:	8d 50 01             	lea    edx,[rax+0x1]
  80fb05:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80fb09:	89 50 0c             	mov    DWORD PTR [rax+0xc],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:50
    while (i<count){
  80fb0c:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80fb0f:	48 98                	cdqe   
  80fb11:	48 39 45 d8          	cmp    QWORD PTR [rbp-0x28],rax
  80fb15:	77 87                	ja     80fa9e <read_tty+0x31>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:57
    }
}
  80fb17:	90                   	nop
  80fb18:	5d                   	pop    rbp
  80fb19:	c3                   	ret    

000000000080fb1a <write_tty>:
write_tty():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:59
long write_tty(struct file * filp,char * buf,unsigned long count,long * position)
{
  80fb1a:	f3 0f 1e fa          	endbr64 
  80fb1e:	55                   	push   rbp
  80fb1f:	48 89 e5             	mov    rbp,rsp
  80fb22:	48 83 ec 40          	sub    rsp,0x40
  80fb26:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  80fb2a:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
  80fb2e:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
  80fb32:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:60
    stdbuf_t * b=&((tty_t*)filp->private_data)->stdout_buf;
  80fb36:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  80fb3a:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
  80fb3e:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:61
    int i=0;
  80fb42:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:62
    int saved_wptr=b->wptr;
  80fb49:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80fb4d:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
  80fb50:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:63
    while (i<count){
  80fb53:	eb 5a                	jmp    80fbaf <write_tty+0x95>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:64
        if(b->wptr==b->size)
  80fb55:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80fb59:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
  80fb5c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80fb60:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
  80fb63:	39 c2                	cmp    edx,eax
  80fb65:	75 0b                	jne    80fb72 <write_tty+0x58>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:65
            b->wptr=0;
  80fb67:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80fb6b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [rax+0x8],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:66
        b->data[b->wptr]=buf[i++];
  80fb72:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80fb75:	8d 50 01             	lea    edx,[rax+0x1]
  80fb78:	89 55 fc             	mov    DWORD PTR [rbp-0x4],edx
  80fb7b:	48 63 d0             	movsxd rdx,eax
  80fb7e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
  80fb82:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
  80fb86:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80fb8a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  80fb8d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80fb91:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
  80fb94:	48 98                	cdqe   
  80fb96:	48 01 c2             	add    rdx,rax
  80fb99:	0f b6 01             	movzx  eax,BYTE PTR [rcx]
  80fb9c:	88 02                	mov    BYTE PTR [rdx],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:67
        b->wptr++;
  80fb9e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80fba2:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
  80fba5:	8d 50 01             	lea    edx,[rax+0x1]
  80fba8:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80fbac:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:63
    while (i<count){
  80fbaf:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80fbb2:	48 98                	cdqe   
  80fbb4:	48 39 45 c8          	cmp    QWORD PTR [rbp-0x38],rax
  80fbb8:	77 9b                	ja     80fb55 <write_tty+0x3b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:70
    }
    //刷新到framebuffer
    write_framebuffer(filp,b->data+saved_wptr,count,0);
  80fbba:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80fbbe:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  80fbc1:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  80fbc4:	48 98                	cdqe   
  80fbc6:	48 8d 34 02          	lea    rsi,[rdx+rax*1]
  80fbca:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
  80fbce:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  80fbd2:	b9 00 00 00 00       	mov    ecx,0x0
  80fbd7:	48 89 c7             	mov    rdi,rax
  80fbda:	48 b8 59 9f 80 00 00 	movabs rax,0x809f59
  80fbe1:	00 00 00 
  80fbe4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:71
}
  80fbe6:	90                   	nop
  80fbe7:	c9                   	leave  
  80fbe8:	c3                   	ret    

000000000080fbe9 <ioctl_tty>:
ioctl_tty():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:81
 * TTY_CONNECT:尝试连接到dev/console,这样会成为controlling terminal,里面的数据才能输出到屏幕上，
 * 因为除了特殊指定的进程都会有一个自己的天tty。
 * 成功返回0。
 * */
long ioctl_tty(struct index_node * inode, struct file * filp, unsigned long cmd, unsigned long arg)
{
  80fbe9:	f3 0f 1e fa          	endbr64 
  80fbed:	55                   	push   rbp
  80fbee:	48 89 e5             	mov    rbp,rsp
  80fbf1:	48 83 ec 50          	sub    rsp,0x50
  80fbf5:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
  80fbf9:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
  80fbfd:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
  80fc01:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:82
    stdbuf_t * b=&((tty_t*)filp->private_data)->stderr_buf;
  80fc05:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  80fc09:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
  80fc0d:	48 83 c0 30          	add    rax,0x30
  80fc11:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:83
    stdbuf_t * ib=&((tty_t*)filp->private_data)->stdin_buf;
  80fc15:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  80fc19:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
  80fc1d:	48 83 c0 18          	add    rax,0x18
  80fc21:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:84
    int i=0;
  80fc25:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:85
    char* buf=*((char**)arg);
  80fc2c:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  80fc30:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80fc33:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:86
    unsigned long count=*((unsigned long*)(arg+8));
  80fc37:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  80fc3b:	48 83 c0 08          	add    rax,0x8
  80fc3f:	48 8b 00             	mov    rax,QWORD PTR [rax]
  80fc42:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:87
    int saved_wptr=b->wptr;
  80fc46:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80fc4a:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
  80fc4d:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:88
    int fd=-1;
  80fc50:	c7 45 d0 ff ff ff ff 	mov    DWORD PTR [rbp-0x30],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:89
    switch (cmd)
  80fc57:	48 83 7d b8 03       	cmp    QWORD PTR [rbp-0x48],0x3
  80fc5c:	0f 84 a1 01 00 00    	je     80fe03 <ioctl_tty+0x21a>
  80fc62:	48 83 7d b8 03       	cmp    QWORD PTR [rbp-0x48],0x3
  80fc67:	0f 87 a1 01 00 00    	ja     80fe0e <ioctl_tty+0x225>
  80fc6d:	48 83 7d b8 02       	cmp    QWORD PTR [rbp-0x48],0x2
  80fc72:	0f 84 fe 00 00 00    	je     80fd76 <ioctl_tty+0x18d>
  80fc78:	48 83 7d b8 02       	cmp    QWORD PTR [rbp-0x48],0x2
  80fc7d:	0f 87 8b 01 00 00    	ja     80fe0e <ioctl_tty+0x225>
  80fc83:	48 83 7d b8 00       	cmp    QWORD PTR [rbp-0x48],0x0
  80fc88:	74 6a                	je     80fcf4 <ioctl_tty+0x10b>
  80fc8a:	48 83 7d b8 01       	cmp    QWORD PTR [rbp-0x48],0x1
  80fc8f:	0f 84 9b 00 00 00    	je     80fd30 <ioctl_tty+0x147>
  80fc95:	e9 74 01 00 00       	jmp    80fe0e <ioctl_tty+0x225>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:93
    {
        case TTY_WSTDERR:
            while (i<count){
                if(b->wptr==b->size)
  80fc9a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80fc9e:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
  80fca1:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80fca5:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
  80fca8:	39 c2                	cmp    edx,eax
  80fcaa:	75 0b                	jne    80fcb7 <ioctl_tty+0xce>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:94
                    b->wptr=0;
  80fcac:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80fcb0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [rax+0x8],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:95
                b->data[b->wptr]=buf[i++];
  80fcb7:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80fcba:	8d 50 01             	lea    edx,[rax+0x1]
  80fcbd:	89 55 fc             	mov    DWORD PTR [rbp-0x4],edx
  80fcc0:	48 63 d0             	movsxd rdx,eax
  80fcc3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  80fcc7:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
  80fccb:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80fccf:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  80fcd2:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80fcd6:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
  80fcd9:	48 98                	cdqe   
  80fcdb:	48 01 c2             	add    rdx,rax
  80fcde:	0f b6 01             	movzx  eax,BYTE PTR [rcx]
  80fce1:	88 02                	mov    BYTE PTR [rdx],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:96
                b->wptr++;
  80fce3:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80fce7:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
  80fcea:	8d 50 01             	lea    edx,[rax+0x1]
  80fced:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80fcf1:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:92
            while (i<count){
  80fcf4:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80fcf7:	48 98                	cdqe   
  80fcf9:	48 39 45 d8          	cmp    QWORD PTR [rbp-0x28],rax
  80fcfd:	77 9b                	ja     80fc9a <ioctl_tty+0xb1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:99
            }
            //刷新到framebuffer
            write_framebuffer(filp,b->data+saved_wptr,count,0);
  80fcff:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  80fd03:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  80fd06:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
  80fd09:	48 98                	cdqe   
  80fd0b:	48 8d 34 02          	lea    rsi,[rdx+rax*1]
  80fd0f:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
  80fd13:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  80fd17:	b9 00 00 00 00       	mov    ecx,0x0
  80fd1c:	48 89 c7             	mov    rdi,rax
  80fd1f:	48 b8 59 9f 80 00 00 	movabs rax,0x809f59
  80fd26:	00 00 00 
  80fd29:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:100
        break;
  80fd2b:	e9 e7 00 00 00       	jmp    80fe17 <ioctl_tty+0x22e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:102
        case TTY_CONNECT:
            fd=sys_open("dev/console",O_WRONLY|O_CREAT|O_EXCL);
  80fd30:	be c1 00 00 00       	mov    esi,0xc1
  80fd35:	48 b8 36 92 81 00 00 	movabs rax,0x819236
  80fd3c:	00 00 00 
  80fd3f:	48 89 c7             	mov    rdi,rax
  80fd42:	48 b8 5e a8 80 00 00 	movabs rax,0x80a85e
  80fd49:	00 00 00 
  80fd4c:	ff d0                	call   rax
  80fd4e:	89 45 d0             	mov    DWORD PTR [rbp-0x30],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:103
            if(fd==-1)return -1;
  80fd51:	83 7d d0 ff          	cmp    DWORD PTR [rbp-0x30],0xffffffff
  80fd55:	75 0c                	jne    80fd63 <ioctl_tty+0x17a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:103 (discriminator 1)
  80fd57:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
  80fd5e:	e9 b9 00 00 00       	jmp    80fe1c <ioctl_tty+0x233>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:104
            ((tty_t*)filp->private_data)->console_fd=fd;
  80fd63:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  80fd67:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
  80fd6b:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
  80fd6e:	89 50 48             	mov    DWORD PTR [rax+0x48],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:105
            break;
  80fd71:	e9 a1 00 00 00       	jmp    80fe17 <ioctl_tty+0x22e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:107
        case TTY_DISCONNECT:
            fd=((tty_t*)filp->private_data)->console_fd;
  80fd76:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
  80fd7a:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
  80fd7e:	8b 40 48             	mov    eax,DWORD PTR [rax+0x48]
  80fd81:	89 45 d0             	mov    DWORD PTR [rbp-0x30],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:108
            if(fd==-1)return -1;
  80fd84:	83 7d d0 ff          	cmp    DWORD PTR [rbp-0x30],0xffffffff
  80fd88:	75 0c                	jne    80fd96 <ioctl_tty+0x1ad>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:108 (discriminator 1)
  80fd8a:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
  80fd91:	e9 86 00 00 00       	jmp    80fe1c <ioctl_tty+0x233>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:109
            sys_close(fd);
  80fd96:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
  80fd99:	89 c7                	mov    edi,eax
  80fd9b:	48 b8 6a ae 80 00 00 	movabs rax,0x80ae6a
  80fda2:	00 00 00 
  80fda5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:111
        case TTY_WSTDIN:
            while (i<count){
  80fda7:	eb 5a                	jmp    80fe03 <ioctl_tty+0x21a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:112
                if(ib->wptr==ib->size)
  80fda9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80fdad:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
  80fdb0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80fdb4:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
  80fdb7:	39 c2                	cmp    edx,eax
  80fdb9:	75 0b                	jne    80fdc6 <ioctl_tty+0x1dd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:113
                    ib->wptr=0;
  80fdbb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80fdbf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [rax+0x8],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:114
                ib->data[ib->wptr]=buf[i++];
  80fdc6:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80fdc9:	8d 50 01             	lea    edx,[rax+0x1]
  80fdcc:	89 55 fc             	mov    DWORD PTR [rbp-0x4],edx
  80fdcf:	48 63 d0             	movsxd rdx,eax
  80fdd2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  80fdd6:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
  80fdda:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80fdde:	48 8b 10             	mov    rdx,QWORD PTR [rax]
  80fde1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80fde5:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
  80fde8:	48 98                	cdqe   
  80fdea:	48 01 c2             	add    rdx,rax
  80fded:	0f b6 01             	movzx  eax,BYTE PTR [rcx]
  80fdf0:	88 02                	mov    BYTE PTR [rdx],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:115
                ib->wptr++;
  80fdf2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80fdf6:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
  80fdf9:	8d 50 01             	lea    edx,[rax+0x1]
  80fdfc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  80fe00:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:111
            while (i<count){
  80fe03:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80fe06:	48 98                	cdqe   
  80fe08:	48 39 45 d8          	cmp    QWORD PTR [rbp-0x28],rax
  80fe0c:	77 9b                	ja     80fda9 <ioctl_tty+0x1c0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:117
            }
    default:return -1;
  80fe0e:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
  80fe15:	eb 05                	jmp    80fe1c <ioctl_tty+0x233>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:119
    }
    return 0;
  80fe17:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:120
}
  80fe1c:	c9                   	leave  
  80fe1d:	c3                   	ret    

000000000080fe1e <init_com>:
init_com():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:12
#include "str.h"
#include "memory.h"
#include "mem.h"

char combuf[1024];
void init_com(int base_port){
  80fe1e:	f3 0f 1e fa          	endbr64 
  80fe22:	55                   	push   rbp
  80fe23:	48 89 e5             	mov    rbp,rsp
  80fe26:	48 83 ec 10          	sub    rsp,0x10
  80fe2a:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:14
    /* disable all interrupts */
    outb(base_port + COM_REG_IER, 0x00);
  80fe2d:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80fe30:	83 c0 01             	add    eax,0x1
  80fe33:	0f b7 c0             	movzx  eax,ax
  80fe36:	be 00 00 00 00       	mov    esi,0x0
  80fe3b:	89 c7                	mov    edi,eax
  80fe3d:	48 b8 d0 86 80 00 00 	movabs rax,0x8086d0
  80fe44:	00 00 00 
  80fe47:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:17
    
    /* enable DLAB to set bound rate divisor */
    outb(base_port + COM_REG_LCR, 0x80);
  80fe49:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80fe4c:	83 c0 03             	add    eax,0x3
  80fe4f:	0f b7 c0             	movzx  eax,ax
  80fe52:	be 80 00 00 00       	mov    esi,0x80
  80fe57:	89 c7                	mov    edi,eax
  80fe59:	48 b8 d0 86 80 00 00 	movabs rax,0x8086d0
  80fe60:	00 00 00 
  80fe63:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:20
    
    /* set divisor to 38400 baud */
    outb(base_port + COM_REG_DLL, 0x03);
  80fe65:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80fe68:	0f b7 c0             	movzx  eax,ax
  80fe6b:	be 03 00 00 00       	mov    esi,0x3
  80fe70:	89 c7                	mov    edi,eax
  80fe72:	48 b8 d0 86 80 00 00 	movabs rax,0x8086d0
  80fe79:	00 00 00 
  80fe7c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:21
    outb(base_port + COM_REG_DLM, 0x00);
  80fe7e:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80fe81:	83 c0 01             	add    eax,0x1
  80fe84:	0f b7 c0             	movzx  eax,ax
  80fe87:	be 00 00 00 00       	mov    esi,0x0
  80fe8c:	89 c7                	mov    edi,eax
  80fe8e:	48 b8 d0 86 80 00 00 	movabs rax,0x8086d0
  80fe95:	00 00 00 
  80fe98:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:24
    
    /* 8 data bits, parity off, 1 stop bit, DLAB latch off */
    outb(base_port + COM_REG_LCR, 0x03);
  80fe9a:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80fe9d:	83 c0 03             	add    eax,0x3
  80fea0:	0f b7 c0             	movzx  eax,ax
  80fea3:	be 03 00 00 00       	mov    esi,0x3
  80fea8:	89 c7                	mov    edi,eax
  80feaa:	48 b8 d0 86 80 00 00 	movabs rax,0x8086d0
  80feb1:	00 00 00 
  80feb4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:27
    
    /* enable FIFO */
    outb(base_port + COM_REG_FCR, 0x87);//0xc7
  80feb6:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80feb9:	83 c0 02             	add    eax,0x2
  80febc:	0f b7 c0             	movzx  eax,ax
  80febf:	be 87 00 00 00       	mov    esi,0x87
  80fec4:	89 c7                	mov    edi,eax
  80fec6:	48 b8 d0 86 80 00 00 	movabs rax,0x8086d0
  80fecd:	00 00 00 
  80fed0:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:30

    /* enable IRQs, set RTS/DSR */
    outb(base_port + COM_REG_MCR, 0x0B);
  80fed2:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80fed5:	83 c0 04             	add    eax,0x4
  80fed8:	0f b7 c0             	movzx  eax,ax
  80fedb:	be 0b 00 00 00       	mov    esi,0xb
  80fee0:	89 c7                	mov    edi,eax
  80fee2:	48 b8 d0 86 80 00 00 	movabs rax,0x8086d0
  80fee9:	00 00 00 
  80feec:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:44
//    if (inb(base_port + COM_REG_RX) != 0xae) {
//        return;
//    }
    
    /* set in normal mode */
    outb(base_port + COM_REG_MCR, 0x0F);
  80feee:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  80fef1:	83 c0 04             	add    eax,0x4
  80fef4:	0f b7 c0             	movzx  eax,ax
  80fef7:	be 0f 00 00 00       	mov    esi,0xf
  80fefc:	89 c7                	mov    edi,eax
  80fefe:	48 b8 d0 86 80 00 00 	movabs rax,0x8086d0
  80ff05:	00 00 00 
  80ff08:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:45
}
  80ff0a:	90                   	nop
  80ff0b:	c9                   	leave  
  80ff0c:	c3                   	ret    

000000000080ff0d <com_putchar>:
com_putchar():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:47
void com_putchar(unsigned short ch,int com_base)
{
  80ff0d:	f3 0f 1e fa          	endbr64 
  80ff11:	55                   	push   rbp
  80ff12:	48 89 e5             	mov    rbp,rsp
  80ff15:	48 83 ec 20          	sub    rsp,0x20
  80ff19:	89 f8                	mov    eax,edi
  80ff1b:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
  80ff1e:	66 89 45 ec          	mov    WORD PTR [rbp-0x14],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:51 (discriminator 1)
    unsigned char res;
    /* wait for the port to be ready */
    do {
        res = inb(com_base + COM_REG_LSR);
  80ff22:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
  80ff25:	83 c0 05             	add    eax,0x5
  80ff28:	0f b6 c0             	movzx  eax,al
  80ff2b:	89 c7                	mov    edi,eax
  80ff2d:	48 b8 e9 86 80 00 00 	movabs rax,0x8086e9
  80ff34:	00 00 00 
  80ff37:	ff d0                	call   rax
  80ff39:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:52 (discriminator 1)
        res &= 0x20;
  80ff3c:	80 65 ff 20          	and    BYTE PTR [rbp-0x1],0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:53 (discriminator 1)
    } while (res == 0);
  80ff40:	80 7d ff 00          	cmp    BYTE PTR [rbp-0x1],0x0
  80ff44:	74 dc                	je     80ff22 <com_putchar+0x15>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:54
    outb(com_base, ch);
  80ff46:	0f b7 45 ec          	movzx  eax,WORD PTR [rbp-0x14]
  80ff4a:	0f b6 d0             	movzx  edx,al
  80ff4d:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
  80ff50:	0f b7 c0             	movzx  eax,ax
  80ff53:	89 d6                	mov    esi,edx
  80ff55:	89 c7                	mov    edi,eax
  80ff57:	48 b8 d0 86 80 00 00 	movabs rax,0x8086d0
  80ff5e:	00 00 00 
  80ff61:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:55
}
  80ff63:	90                   	nop
  80ff64:	c9                   	leave  
  80ff65:	c3                   	ret    

000000000080ff66 <com_puts>:
com_puts():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:57

void com_puts(char* s,int com_port){
  80ff66:	f3 0f 1e fa          	endbr64 
  80ff6a:	55                   	push   rbp
  80ff6b:	48 89 e5             	mov    rbp,rsp
  80ff6e:	48 83 ec 10          	sub    rsp,0x10
  80ff72:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  80ff76:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:58
    for(;*s;s++){
  80ff79:	eb 24                	jmp    80ff9f <com_puts+0x39>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:59 (discriminator 2)
        com_putchar(*s,com_port);
  80ff7b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80ff7f:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  80ff82:	66 98                	cbw    
  80ff84:	0f b7 c0             	movzx  eax,ax
  80ff87:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
  80ff8a:	89 d6                	mov    esi,edx
  80ff8c:	89 c7                	mov    edi,eax
  80ff8e:	48 b8 0d ff 80 00 00 	movabs rax,0x80ff0d
  80ff95:	00 00 00 
  80ff98:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:58 (discriminator 2)
    for(;*s;s++){
  80ff9a:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:58 (discriminator 1)
  80ff9f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  80ffa3:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  80ffa6:	84 c0                	test   al,al
  80ffa8:	75 d1                	jne    80ff7b <com_puts+0x15>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:61
    }
}
  80ffaa:	90                   	nop
  80ffab:	90                   	nop
  80ffac:	c9                   	leave  
  80ffad:	c3                   	ret    

000000000080ffae <comprintf>:
comprintf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:63

void comprintf(char* fmt,...){
  80ffae:	f3 0f 1e fa          	endbr64 
  80ffb2:	55                   	push   rbp
  80ffb3:	48 89 e5             	mov    rbp,rsp
  80ffb6:	48 81 ec 10 01 00 00 	sub    rsp,0x110
  80ffbd:	48 89 bd f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdi
  80ffc4:	48 89 b5 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rsi
  80ffcb:	48 89 95 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdx
  80ffd2:	48 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rcx
  80ffd9:	4c 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],r8
  80ffe0:	4c 89 8d 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],r9
  80ffe7:	84 c0                	test   al,al
  80ffe9:	74 20                	je     81000b <comprintf+0x5d>
  80ffeb:	0f 29 45 80          	movaps XMMWORD PTR [rbp-0x80],xmm0
  80ffef:	0f 29 4d 90          	movaps XMMWORD PTR [rbp-0x70],xmm1
  80fff3:	0f 29 55 a0          	movaps XMMWORD PTR [rbp-0x60],xmm2
  80fff7:	0f 29 5d b0          	movaps XMMWORD PTR [rbp-0x50],xmm3
  80fffb:	0f 29 65 c0          	movaps XMMWORD PTR [rbp-0x40],xmm4
  80ffff:	0f 29 6d d0          	movaps XMMWORD PTR [rbp-0x30],xmm5
  810003:	0f 29 75 e0          	movaps XMMWORD PTR [rbp-0x20],xmm6
  810007:	0f 29 7d f0          	movaps XMMWORD PTR [rbp-0x10],xmm7
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:64
    if(strlen(fmt)>=1024)
  81000b:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  810012:	48 89 c7             	mov    rdi,rax
  810015:	48 b8 8f 06 81 00 00 	movabs rax,0x81068f
  81001c:	00 00 00 
  81001f:	ff d0                	call   rax
  810021:	3d ff 03 00 00       	cmp    eax,0x3ff
  810026:	0f 8f 43 03 00 00    	jg     81036f <comprintf+0x3c1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:67
        return;//一次性输出不了太长
    //这里不使用kmalloc
    char* tmp=combuf;
  81002c:	48 b8 00 e6 41 00 00 	movabs rax,0x41e600
  810033:	00 00 00 
  810036:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:68
    memset(tmp,0, sizeof(combuf));
  81003d:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  810044:	ba 00 04 00 00       	mov    edx,0x400
  810049:	be 00 00 00 00       	mov    esi,0x0
  81004e:	48 89 c7             	mov    rdi,rax
  810051:	48 b8 21 04 81 00 00 	movabs rax,0x810421
  810058:	00 00 00 
  81005b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:70
    //count num of args
    char *pstr=fmt;
  81005d:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  810064:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:71
    char *prev=fmt;
  81006b:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  810072:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:74

    va_list vargs;
    va_start(vargs,fmt);
  810079:	c7 85 00 ff ff ff 08 	mov    DWORD PTR [rbp-0x100],0x8
  810080:	00 00 00 
  810083:	c7 85 04 ff ff ff 30 	mov    DWORD PTR [rbp-0xfc],0x30
  81008a:	00 00 00 
  81008d:	48 8d 45 10          	lea    rax,[rbp+0x10]
  810091:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
  810098:	48 8d 85 50 ff ff ff 	lea    rax,[rbp-0xb0]
  81009f:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:75
    pstr=fmt;
  8100a6:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  8100ad:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:76
    for(;*pstr!='\0';pstr++){
  8100b4:	e9 87 02 00 00       	jmp    810340 <comprintf+0x392>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:77
        if(*pstr=='%'&&*(pstr+1)!='\0'){
  8100b9:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  8100c0:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  8100c3:	3c 25                	cmp    al,0x25
  8100c5:	0f 85 48 02 00 00    	jne    810313 <comprintf+0x365>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:77 (discriminator 1)
  8100cb:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  8100d2:	48 83 c0 01          	add    rax,0x1
  8100d6:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  8100d9:	84 c0                	test   al,al
  8100db:	0f 84 32 02 00 00    	je     810313 <comprintf+0x365>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:78
            pstr++;
  8100e1:	48 83 85 48 ff ff ff 	add    QWORD PTR [rbp-0xb8],0x1
  8100e8:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:79
            if(*pstr=='x'){
  8100e9:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  8100f0:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  8100f3:	3c 78                	cmp    al,0x78
  8100f5:	75 6f                	jne    810166 <comprintf+0x1b8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:80
                int v=va_arg(vargs,int);
  8100f7:	8b 85 00 ff ff ff    	mov    eax,DWORD PTR [rbp-0x100]
  8100fd:	83 f8 2f             	cmp    eax,0x2f
  810100:	77 23                	ja     810125 <comprintf+0x177>
  810102:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
  810109:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
  81010f:	89 d2                	mov    edx,edx
  810111:	48 01 d0             	add    rax,rdx
  810114:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
  81011a:	83 c2 08             	add    edx,0x8
  81011d:	89 95 00 ff ff ff    	mov    DWORD PTR [rbp-0x100],edx
  810123:	eb 12                	jmp    810137 <comprintf+0x189>
  810125:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
  81012c:	48 8d 50 08          	lea    rdx,[rax+0x8]
  810130:	48 89 95 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdx
  810137:	8b 00                	mov    eax,DWORD PTR [rax]
  810139:	89 85 1c ff ff ff    	mov    DWORD PTR [rbp-0xe4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:81
                sprint_hex(tmp,v);
  81013f:	8b 85 1c ff ff ff    	mov    eax,DWORD PTR [rbp-0xe4]
  810145:	48 63 d0             	movsxd rdx,eax
  810148:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  81014f:	48 89 d6             	mov    rsi,rdx
  810152:	48 89 c7             	mov    rdi,rax
  810155:	48 b8 b4 0a 81 00 00 	movabs rax,0x810ab4
  81015c:	00 00 00 
  81015f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:79
            if(*pstr=='x'){
  810161:	e9 d2 01 00 00       	jmp    810338 <comprintf+0x38a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:82
            }else if(*pstr=='s'){
  810166:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  81016d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  810170:	3c 73                	cmp    al,0x73
  810172:	75 6f                	jne    8101e3 <comprintf+0x235>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:83
                char* v=va_arg(vargs,char*);
  810174:	8b 85 00 ff ff ff    	mov    eax,DWORD PTR [rbp-0x100]
  81017a:	83 f8 2f             	cmp    eax,0x2f
  81017d:	77 23                	ja     8101a2 <comprintf+0x1f4>
  81017f:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
  810186:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
  81018c:	89 d2                	mov    edx,edx
  81018e:	48 01 d0             	add    rax,rdx
  810191:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
  810197:	83 c2 08             	add    edx,0x8
  81019a:	89 95 00 ff ff ff    	mov    DWORD PTR [rbp-0x100],edx
  8101a0:	eb 12                	jmp    8101b4 <comprintf+0x206>
  8101a2:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
  8101a9:	48 8d 50 08          	lea    rdx,[rax+0x8]
  8101ad:	48 89 95 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdx
  8101b4:	48 8b 00             	mov    rax,QWORD PTR [rax]
  8101b7:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:84
                sprintn(tmp,v);
  8101be:	48 8b 95 20 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe0]
  8101c5:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  8101cc:	48 89 d6             	mov    rsi,rdx
  8101cf:	48 89 c7             	mov    rdi,rax
  8101d2:	48 b8 36 0b 81 00 00 	movabs rax,0x810b36
  8101d9:	00 00 00 
  8101dc:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:79
            if(*pstr=='x'){
  8101de:	e9 55 01 00 00       	jmp    810338 <comprintf+0x38a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:85
            }else if(*pstr=='d'){
  8101e3:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  8101ea:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  8101ed:	3c 64                	cmp    al,0x64
  8101ef:	75 70                	jne    810261 <comprintf+0x2b3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:86
                char* v=va_arg(vargs,char*);
  8101f1:	8b 85 00 ff ff ff    	mov    eax,DWORD PTR [rbp-0x100]
  8101f7:	83 f8 2f             	cmp    eax,0x2f
  8101fa:	77 23                	ja     81021f <comprintf+0x271>
  8101fc:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
  810203:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
  810209:	89 d2                	mov    edx,edx
  81020b:	48 01 d0             	add    rax,rdx
  81020e:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
  810214:	83 c2 08             	add    edx,0x8
  810217:	89 95 00 ff ff ff    	mov    DWORD PTR [rbp-0x100],edx
  81021d:	eb 12                	jmp    810231 <comprintf+0x283>
  81021f:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
  810226:	48 8d 50 08          	lea    rdx,[rax+0x8]
  81022a:	48 89 95 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdx
  810231:	48 8b 00             	mov    rax,QWORD PTR [rax]
  810234:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:87
                sprint_decimal(tmp,v);
  81023b:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
  810242:	89 c2                	mov    edx,eax
  810244:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  81024b:	89 d6                	mov    esi,edx
  81024d:	48 89 c7             	mov    rdi,rax
  810250:	48 b8 00 0a 81 00 00 	movabs rax,0x810a00
  810257:	00 00 00 
  81025a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:79
            if(*pstr=='x'){
  81025c:	e9 d7 00 00 00       	jmp    810338 <comprintf+0x38a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:88
            }else if(*pstr=='c'){
  810261:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  810268:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  81026b:	3c 63                	cmp    al,0x63
  81026d:	75 02                	jne    810271 <comprintf+0x2c3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:89
                char v=va_arg(vargs,char);
  81026f:	0f 0b                	ud2    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:91
                sprintchar(tmp,v);
            }else if(*pstr=='p') {
  810271:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  810278:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  81027b:	3c 70                	cmp    al,0x70
  81027d:	75 6d                	jne    8102ec <comprintf+0x33e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:92
                int v=va_arg(vargs,addr_t);
  81027f:	8b 85 00 ff ff ff    	mov    eax,DWORD PTR [rbp-0x100]
  810285:	83 f8 2f             	cmp    eax,0x2f
  810288:	77 23                	ja     8102ad <comprintf+0x2ff>
  81028a:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
  810291:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
  810297:	89 d2                	mov    edx,edx
  810299:	48 01 d0             	add    rax,rdx
  81029c:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
  8102a2:	83 c2 08             	add    edx,0x8
  8102a5:	89 95 00 ff ff ff    	mov    DWORD PTR [rbp-0x100],edx
  8102ab:	eb 12                	jmp    8102bf <comprintf+0x311>
  8102ad:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
  8102b4:	48 8d 50 08          	lea    rdx,[rax+0x8]
  8102b8:	48 89 95 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdx
  8102bf:	48 8b 00             	mov    rax,QWORD PTR [rax]
  8102c2:	89 85 34 ff ff ff    	mov    DWORD PTR [rbp-0xcc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:93
                sprint_hex(tmp,v);
  8102c8:	8b 85 34 ff ff ff    	mov    eax,DWORD PTR [rbp-0xcc]
  8102ce:	48 63 d0             	movsxd rdx,eax
  8102d1:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  8102d8:	48 89 d6             	mov    rsi,rdx
  8102db:	48 89 c7             	mov    rdi,rax
  8102de:	48 b8 b4 0a 81 00 00 	movabs rax,0x810ab4
  8102e5:	00 00 00 
  8102e8:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:79
            if(*pstr=='x'){
  8102ea:	eb 4c                	jmp    810338 <comprintf+0x38a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:95
            }else{
                    sprintchar(tmp,*pstr);
  8102ec:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  8102f3:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  8102f6:	0f be d0             	movsx  edx,al
  8102f9:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  810300:	89 d6                	mov    esi,edx
  810302:	48 89 c7             	mov    rdi,rax
  810305:	48 b8 c1 09 81 00 00 	movabs rax,0x8109c1
  81030c:	00 00 00 
  81030f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:79
            if(*pstr=='x'){
  810311:	eb 25                	jmp    810338 <comprintf+0x38a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:98
                }
        }else{
            sprintchar(tmp,*pstr);
  810313:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  81031a:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  81031d:	0f be d0             	movsx  edx,al
  810320:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  810327:	89 d6                	mov    esi,edx
  810329:	48 89 c7             	mov    rdi,rax
  81032c:	48 b8 c1 09 81 00 00 	movabs rax,0x8109c1
  810333:	00 00 00 
  810336:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:76
    for(;*pstr!='\0';pstr++){
  810338:	48 83 85 48 ff ff ff 	add    QWORD PTR [rbp-0xb8],0x1
  81033f:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:76 (discriminator 1)
  810340:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  810347:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  81034a:	84 c0                	test   al,al
  81034c:	0f 85 67 fd ff ff    	jne    8100b9 <comprintf+0x10b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:102
        }
    }
    va_end(vargs);
    com_puts(tmp,PORT_COM1);
  810352:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  810359:	be f8 03 00 00       	mov    esi,0x3f8
  81035e:	48 89 c7             	mov    rdi,rax
  810361:	48 b8 66 ff 80 00 00 	movabs rax,0x80ff66
  810368:	00 00 00 
  81036b:	ff d0                	call   rax
  81036d:	eb 01                	jmp    810370 <comprintf+0x3c2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:65
        return;//一次性输出不了太长
  81036f:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:103
  810370:	c9                   	leave  
  810371:	c3                   	ret    

0000000000810372 <memcpy>:
memcpy():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:5
#include "mem.h"
#include "typename.h"
static u32 mem_end;
static u32 usr_mem_base;
void memcpy(u8* dest, u8 *src,u32 size){
  810372:	f3 0f 1e fa          	endbr64 
  810376:	55                   	push   rbp
  810377:	48 89 e5             	mov    rbp,rsp
  81037a:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  81037e:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  810382:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:6
    *dest=0xff;//如果页内存还没分配，这样就可以先激发缺页异常分配了，之后写数据就会完整不会少开头第一个字节。
  810385:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  810389:	c6 00 ff             	mov    BYTE PTR [rax],0xff
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:7
    for(int i=0;i<size;i++){
  81038c:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
  810393:	eb 1b                	jmp    8103b0 <memcpy+0x3e>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:8 (discriminator 3)
        *(dest)=*(src);
  810395:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  810399:	0f b6 10             	movzx  edx,BYTE PTR [rax]
  81039c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  8103a0:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:9 (discriminator 3)
        dest++;
  8103a2:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:10 (discriminator 3)
        src++;
  8103a7:	48 83 45 e0 01       	add    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:7 (discriminator 3)
    for(int i=0;i<size;i++){
  8103ac:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:7 (discriminator 1)
  8103b0:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  8103b3:	39 45 dc             	cmp    DWORD PTR [rbp-0x24],eax
  8103b6:	77 dd                	ja     810395 <memcpy+0x23>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:12
    }
}
  8103b8:	90                   	nop
  8103b9:	90                   	nop
  8103ba:	5d                   	pop    rbp
  8103bb:	c3                   	ret    

00000000008103bc <memcmp>:
memcmp():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:14
int memcmp(u8 *a,u8* b,int len)
{
  8103bc:	f3 0f 1e fa          	endbr64 
  8103c0:	55                   	push   rbp
  8103c1:	48 89 e5             	mov    rbp,rsp
  8103c4:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  8103c8:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
  8103cc:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:15
    for(int i=0;i<len;i++)
  8103cf:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
  8103d6:	eb 3a                	jmp    810412 <memcmp+0x56>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:17
    {
        if(*a!=*b)
  8103d8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  8103dc:	0f b6 10             	movzx  edx,BYTE PTR [rax]
  8103df:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  8103e3:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  8103e6:	38 c2                	cmp    dl,al
  8103e8:	74 1a                	je     810404 <memcmp+0x48>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:18
            return *a-*b;
  8103ea:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  8103ee:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  8103f1:	0f b6 d0             	movzx  edx,al
  8103f4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
  8103f8:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  8103fb:	0f b6 c8             	movzx  ecx,al
  8103fe:	89 d0                	mov    eax,edx
  810400:	29 c8                	sub    eax,ecx
  810402:	eb 1b                	jmp    81041f <memcmp+0x63>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:19 (discriminator 2)
        a++;
  810404:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:20 (discriminator 2)
        b++;
  810409:	48 83 45 e0 01       	add    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:15 (discriminator 2)
    for(int i=0;i<len;i++)
  81040e:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:15 (discriminator 1)
  810412:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  810415:	3b 45 dc             	cmp    eax,DWORD PTR [rbp-0x24]
  810418:	7c be                	jl     8103d8 <memcmp+0x1c>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:22
    }
    return 0;
  81041a:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:23
}
  81041f:	5d                   	pop    rbp
  810420:	c3                   	ret    

0000000000810421 <memset>:
memset():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:24
void memset(u8 *buf,u8 value,u32 size){
  810421:	f3 0f 1e fa          	endbr64 
  810425:	55                   	push   rbp
  810426:	48 89 e5             	mov    rbp,rsp
  810429:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  81042d:	89 f0                	mov    eax,esi
  81042f:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
  810432:	88 45 e4             	mov    BYTE PTR [rbp-0x1c],al
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:25
    for(u32 i=0;i<size;i++){
  810435:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
  81043c:	eb 16                	jmp    810454 <memset+0x33>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:26 (discriminator 3)
        *(buf++)=value;
  81043e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  810442:	48 8d 50 01          	lea    rdx,[rax+0x1]
  810446:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
  81044a:	0f b6 55 e4          	movzx  edx,BYTE PTR [rbp-0x1c]
  81044e:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:25 (discriminator 3)
    for(u32 i=0;i<size;i++){
  810450:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:25 (discriminator 1)
  810454:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  810457:	3b 45 e0             	cmp    eax,DWORD PTR [rbp-0x20]
  81045a:	72 e2                	jb     81043e <memset+0x1d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:28
    }
}
  81045c:	90                   	nop
  81045d:	90                   	nop
  81045e:	5d                   	pop    rbp
  81045f:	c3                   	ret    

0000000000810460 <get_mem_size>:
get_mem_size():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:30

u32 get_mem_size(){
  810460:	f3 0f 1e fa          	endbr64 
  810464:	55                   	push   rbp
  810465:	48 89 e5             	mov    rbp,rsp
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:31
    return mem_end;
  810468:	8b 05 92 e5 c0 ff    	mov    eax,DWORD PTR [rip+0xffffffffffc0e592]        # 41ea00 <mem_end>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:32
}
  81046e:	5d                   	pop    rbp
  81046f:	c3                   	ret    

0000000000810470 <strcpy>:
strcpy():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:3
#include "str.h"
#include <stdarg.h>
void strcpy(unsigned char* dest, unsigned char *buf){
  810470:	f3 0f 1e fa          	endbr64 
  810474:	55                   	push   rbp
  810475:	48 89 e5             	mov    rbp,rsp
  810478:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  81047c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:4
    while(*buf!='\0'){
  810480:	eb 1d                	jmp    81049f <strcpy+0x2f>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:5
        *(dest++)=*(buf++);
  810482:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
  810486:	48 8d 42 01          	lea    rax,[rdx+0x1]
  81048a:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
  81048e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  810492:	48 8d 48 01          	lea    rcx,[rax+0x1]
  810496:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
  81049a:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
  81049d:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:4
    while(*buf!='\0'){
  81049f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  8104a3:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  8104a6:	84 c0                	test   al,al
  8104a8:	75 d8                	jne    810482 <strcpy+0x12>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:7
    }
    *dest='\0';
  8104aa:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  8104ae:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:8
}
  8104b1:	90                   	nop
  8104b2:	5d                   	pop    rbp
  8104b3:	c3                   	ret    

00000000008104b4 <strtok>:
strtok():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:12
static char strtokkee[512],*strtokkeeptr=strtokkee;
static int tokptr=0;
static char retbuf[512],*retbptr=retbuf;
char* strtok(char *str,char splitter){
  8104b4:	f3 0f 1e fa          	endbr64 
  8104b8:	55                   	push   rbp
  8104b9:	48 89 e5             	mov    rbp,rsp
  8104bc:	48 83 ec 30          	sub    rsp,0x30
  8104c0:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  8104c4:	89 f0                	mov    eax,esi
  8104c6:	88 45 d4             	mov    BYTE PTR [rbp-0x2c],al
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:14
    //limit: cannot cut string longer than 512
    if(str!=(void*)0){
  8104c9:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
  8104ce:	0f 84 9c 00 00 00    	je     810570 <strtok+0xbc>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:16
        //cut for the first time
        strcpy(strtokkee,str);
  8104d4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  8104d8:	48 89 c6             	mov    rsi,rax
  8104db:	bf 20 ea 41 00       	mov    edi,0x41ea20
  8104e0:	e8 8b ff ff ff       	call   810470 <strcpy>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:17
        char* ptr=strtokkee;
  8104e5:	48 c7 45 e8 20 ea 41 	mov    QWORD PTR [rbp-0x18],0x41ea20
  8104ec:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:18
        for(tokptr=0;strtokkee[tokptr]!=splitter&&strtokkee[tokptr]!='\0';tokptr=(tokptr+1)%512);
  8104ed:	c7 05 29 e7 c0 ff 00 	mov    DWORD PTR [rip+0xffffffffffc0e729],0x0        # 41ec20 <tokptr>
  8104f4:	00 00 00 
  8104f7:	eb 1c                	jmp    810515 <strtok+0x61>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:18 (discriminator 4)
  8104f9:	8b 05 21 e7 c0 ff    	mov    eax,DWORD PTR [rip+0xffffffffffc0e721]        # 41ec20 <tokptr>
  8104ff:	83 c0 01             	add    eax,0x1
  810502:	99                   	cdq    
  810503:	c1 ea 17             	shr    edx,0x17
  810506:	01 d0                	add    eax,edx
  810508:	25 ff 01 00 00       	and    eax,0x1ff
  81050d:	29 d0                	sub    eax,edx
  81050f:	89 05 0b e7 c0 ff    	mov    DWORD PTR [rip+0xffffffffffc0e70b],eax        # 41ec20 <tokptr>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:18 (discriminator 1)
  810515:	8b 05 05 e7 c0 ff    	mov    eax,DWORD PTR [rip+0xffffffffffc0e705]        # 41ec20 <tokptr>
  81051b:	48 98                	cdqe   
  81051d:	0f b6 80 20 ea 41 00 	movzx  eax,BYTE PTR [rax+0x41ea20]
  810524:	38 45 d4             	cmp    BYTE PTR [rbp-0x2c],al
  810527:	74 13                	je     81053c <strtok+0x88>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:18 (discriminator 3)
  810529:	8b 05 f1 e6 c0 ff    	mov    eax,DWORD PTR [rip+0xffffffffffc0e6f1]        # 41ec20 <tokptr>
  81052f:	48 98                	cdqe   
  810531:	0f b6 80 20 ea 41 00 	movzx  eax,BYTE PTR [rax+0x41ea20]
  810538:	84 c0                	test   al,al
  81053a:	75 bd                	jne    8104f9 <strtok+0x45>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:19
        strtokkee[tokptr]='\0';
  81053c:	8b 05 de e6 c0 ff    	mov    eax,DWORD PTR [rip+0xffffffffffc0e6de]        # 41ec20 <tokptr>
  810542:	48 98                	cdqe   
  810544:	c6 80 20 ea 41 00 00 	mov    BYTE PTR [rax+0x41ea20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:20
        tokptr=(tokptr+1)%512;
  81054b:	8b 05 cf e6 c0 ff    	mov    eax,DWORD PTR [rip+0xffffffffffc0e6cf]        # 41ec20 <tokptr>
  810551:	83 c0 01             	add    eax,0x1
  810554:	99                   	cdq    
  810555:	c1 ea 17             	shr    edx,0x17
  810558:	01 d0                	add    eax,edx
  81055a:	25 ff 01 00 00       	and    eax,0x1ff
  81055f:	29 d0                	sub    eax,edx
  810561:	89 05 b9 e6 c0 ff    	mov    DWORD PTR [rip+0xffffffffffc0e6b9],eax        # 41ec20 <tokptr>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:21
        return ptr;
  810567:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  81056b:	e9 9e 00 00 00       	jmp    81060e <strtok+0x15a>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:24
    }
    //go on cutting
    int c=0;
  810570:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:25
    char* ptr=strtokkee+tokptr;
  810577:	8b 05 a3 e6 c0 ff    	mov    eax,DWORD PTR [rip+0xffffffffffc0e6a3]        # 41ec20 <tokptr>
  81057d:	48 98                	cdqe   
  81057f:	48 05 20 ea 41 00    	add    rax,0x41ea20
  810585:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:26
    for(;strtokkee[tokptr]!=splitter&&strtokkee[tokptr]!='\0';tokptr=(tokptr+1)%512,c++);
  810589:	eb 20                	jmp    8105ab <strtok+0xf7>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:26 (discriminator 3)
  81058b:	8b 05 8f e6 c0 ff    	mov    eax,DWORD PTR [rip+0xffffffffffc0e68f]        # 41ec20 <tokptr>
  810591:	83 c0 01             	add    eax,0x1
  810594:	99                   	cdq    
  810595:	c1 ea 17             	shr    edx,0x17
  810598:	01 d0                	add    eax,edx
  81059a:	25 ff 01 00 00       	and    eax,0x1ff
  81059f:	29 d0                	sub    eax,edx
  8105a1:	89 05 79 e6 c0 ff    	mov    DWORD PTR [rip+0xffffffffffc0e679],eax        # 41ec20 <tokptr>
  8105a7:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:26 (discriminator 1)
  8105ab:	8b 05 6f e6 c0 ff    	mov    eax,DWORD PTR [rip+0xffffffffffc0e66f]        # 41ec20 <tokptr>
  8105b1:	48 98                	cdqe   
  8105b3:	0f b6 80 20 ea 41 00 	movzx  eax,BYTE PTR [rax+0x41ea20]
  8105ba:	38 45 d4             	cmp    BYTE PTR [rbp-0x2c],al
  8105bd:	74 13                	je     8105d2 <strtok+0x11e>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:26 (discriminator 2)
  8105bf:	8b 05 5b e6 c0 ff    	mov    eax,DWORD PTR [rip+0xffffffffffc0e65b]        # 41ec20 <tokptr>
  8105c5:	48 98                	cdqe   
  8105c7:	0f b6 80 20 ea 41 00 	movzx  eax,BYTE PTR [rax+0x41ea20]
  8105ce:	84 c0                	test   al,al
  8105d0:	75 b9                	jne    81058b <strtok+0xd7>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:27
    strtokkee[tokptr]='\0';
  8105d2:	8b 05 48 e6 c0 ff    	mov    eax,DWORD PTR [rip+0xffffffffffc0e648]        # 41ec20 <tokptr>
  8105d8:	48 98                	cdqe   
  8105da:	c6 80 20 ea 41 00 00 	mov    BYTE PTR [rax+0x41ea20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:28
    tokptr=(tokptr+1)%512;
  8105e1:	8b 05 39 e6 c0 ff    	mov    eax,DWORD PTR [rip+0xffffffffffc0e639]        # 41ec20 <tokptr>
  8105e7:	83 c0 01             	add    eax,0x1
  8105ea:	99                   	cdq    
  8105eb:	c1 ea 17             	shr    edx,0x17
  8105ee:	01 d0                	add    eax,edx
  8105f0:	25 ff 01 00 00       	and    eax,0x1ff
  8105f5:	29 d0                	sub    eax,edx
  8105f7:	89 05 23 e6 c0 ff    	mov    DWORD PTR [rip+0xffffffffffc0e623],eax        # 41ec20 <tokptr>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:29
    if(c)
  8105fd:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
  810601:	74 06                	je     810609 <strtok+0x155>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:30
        return ptr;
  810603:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  810607:	eb 05                	jmp    81060e <strtok+0x15a>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:32
    else
        return (void*)0;
  810609:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:33
}
  81060e:	c9                   	leave  
  81060f:	c3                   	ret    

0000000000810610 <strcmp>:
strcmp():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:35
int strcmp(char *s1,char *s2)
{
  810610:	f3 0f 1e fa          	endbr64 
  810614:	55                   	push   rbp
  810615:	48 89 e5             	mov    rbp,rsp
  810618:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  81061c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:36
	while(*s1!='\0'&&*s2!='\0'){
  810620:	eb 3c                	jmp    81065e <strcmp+0x4e>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:37
		if(*s1>*s2)
  810622:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  810626:	0f b6 10             	movzx  edx,BYTE PTR [rax]
  810629:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  81062d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  810630:	38 c2                	cmp    dl,al
  810632:	7e 07                	jle    81063b <strcmp+0x2b>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:38
			return 1;
  810634:	b8 01 00 00 00       	mov    eax,0x1
  810639:	eb 52                	jmp    81068d <strcmp+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:39
		else if(*s1<*s2)
  81063b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  81063f:	0f b6 10             	movzx  edx,BYTE PTR [rax]
  810642:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  810646:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  810649:	38 c2                	cmp    dl,al
  81064b:	7d 07                	jge    810654 <strcmp+0x44>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:40
			return -1;
  81064d:	b8 ff ff ff ff       	mov    eax,0xffffffff
  810652:	eb 39                	jmp    81068d <strcmp+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:41
		s1++;
  810654:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:42
		s2++;
  810659:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:36
	while(*s1!='\0'&&*s2!='\0'){
  81065e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  810662:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  810665:	84 c0                	test   al,al
  810667:	74 0b                	je     810674 <strcmp+0x64>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:36 (discriminator 1)
  810669:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  81066d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  810670:	84 c0                	test   al,al
  810672:	75 ae                	jne    810622 <strcmp+0x12>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:44
	}
	if(*s1==*s2)
  810674:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  810678:	0f b6 10             	movzx  edx,BYTE PTR [rax]
  81067b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  81067f:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  810682:	38 c2                	cmp    dl,al
  810684:	75 07                	jne    81068d <strcmp+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:45
		return 0;
  810686:	b8 00 00 00 00       	mov    eax,0x0
  81068b:	eb 00                	jmp    81068d <strcmp+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:46
}
  81068d:	5d                   	pop    rbp
  81068e:	c3                   	ret    

000000000081068f <strlen>:
strlen():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:49

int strlen(char *str)
{
  81068f:	f3 0f 1e fa          	endbr64 
  810693:	55                   	push   rbp
  810694:	48 89 e5             	mov    rbp,rsp
  810697:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:50
    int l=0;
  81069b:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:51
    for(;*str!='\0';str++,l++);
  8106a2:	eb 09                	jmp    8106ad <strlen+0x1e>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:51 (discriminator 2)
  8106a4:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
  8106a9:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:51 (discriminator 1)
  8106ad:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  8106b1:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  8106b4:	84 c0                	test   al,al
  8106b6:	75 ec                	jne    8106a4 <strlen+0x15>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:52
    return l;
  8106b8:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:53
}
  8106bb:	5d                   	pop    rbp
  8106bc:	c3                   	ret    

00000000008106bd <sprintf>:
sprintf():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:56

void sprintf(char *dist, char *str,...)
{
  8106bd:	f3 0f 1e fa          	endbr64 
  8106c1:	55                   	push   rbp
  8106c2:	48 89 e5             	mov    rbp,rsp
  8106c5:	48 81 ec 10 01 00 00 	sub    rsp,0x110
  8106cc:	48 89 bd f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdi
  8106d3:	48 89 b5 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rsi
  8106da:	48 89 95 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdx
  8106e1:	48 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rcx
  8106e8:	4c 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],r8
  8106ef:	4c 89 8d 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],r9
  8106f6:	84 c0                	test   al,al
  8106f8:	74 20                	je     81071a <sprintf+0x5d>
  8106fa:	0f 29 45 80          	movaps XMMWORD PTR [rbp-0x80],xmm0
  8106fe:	0f 29 4d 90          	movaps XMMWORD PTR [rbp-0x70],xmm1
  810702:	0f 29 55 a0          	movaps XMMWORD PTR [rbp-0x60],xmm2
  810706:	0f 29 5d b0          	movaps XMMWORD PTR [rbp-0x50],xmm3
  81070a:	0f 29 65 c0          	movaps XMMWORD PTR [rbp-0x40],xmm4
  81070e:	0f 29 6d d0          	movaps XMMWORD PTR [rbp-0x30],xmm5
  810712:	0f 29 75 e0          	movaps XMMWORD PTR [rbp-0x20],xmm6
  810716:	0f 29 7d f0          	movaps XMMWORD PTR [rbp-0x10],xmm7
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:59

    //count num of args
    char *pstr=str;
  81071a:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  810721:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:60
    char *prev=str;
  810728:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  81072f:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:61
    int argnum=0;
  810736:	c7 85 3c ff ff ff 00 	mov    DWORD PTR [rbp-0xc4],0x0
  81073d:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:62
    while (*pstr!='\n')
  810740:	eb 39                	jmp    81077b <sprintf+0xbe>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:64
    {
        if(*pstr=='%'&&*prev!='%')
  810742:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  810749:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  81074c:	3c 25                	cmp    al,0x25
  81074e:	75 15                	jne    810765 <sprintf+0xa8>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:64 (discriminator 1)
  810750:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
  810757:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  81075a:	3c 25                	cmp    al,0x25
  81075c:	74 07                	je     810765 <sprintf+0xa8>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:65
            argnum++;
  81075e:	83 85 3c ff ff ff 01 	add    DWORD PTR [rbp-0xc4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:66
        prev=pstr;
  810765:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  81076c:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:67
        pstr++;
  810773:	48 83 85 48 ff ff ff 	add    QWORD PTR [rbp-0xb8],0x1
  81077a:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:62
    while (*pstr!='\n')
  81077b:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  810782:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  810785:	3c 0a                	cmp    al,0xa
  810787:	75 b9                	jne    810742 <sprintf+0x85>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:71
    }

    va_list vargs;
    va_start(vargs,str);
  810789:	c7 85 08 ff ff ff 10 	mov    DWORD PTR [rbp-0xf8],0x10
  810790:	00 00 00 
  810793:	c7 85 0c ff ff ff 30 	mov    DWORD PTR [rbp-0xf4],0x30
  81079a:	00 00 00 
  81079d:	48 8d 45 10          	lea    rax,[rbp+0x10]
  8107a1:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
  8107a8:	48 8d 85 50 ff ff ff 	lea    rax,[rbp-0xb0]
  8107af:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:72
    pstr=str;
  8107b6:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
  8107bd:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:73
    for(;*pstr!='\0';pstr++){
  8107c4:	e9 e2 01 00 00       	jmp    8109ab <sprintf+0x2ee>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:74
        if(*pstr=='%'&&*(pstr+1)!='\0'){
  8107c9:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  8107d0:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  8107d3:	3c 25                	cmp    al,0x25
  8107d5:	0f 85 aa 01 00 00    	jne    810985 <sprintf+0x2c8>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:74 (discriminator 1)
  8107db:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  8107e2:	48 83 c0 01          	add    rax,0x1
  8107e6:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  8107e9:	84 c0                	test   al,al
  8107eb:	0f 84 94 01 00 00    	je     810985 <sprintf+0x2c8>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:75
            pstr++;
  8107f1:	48 83 85 48 ff ff ff 	add    QWORD PTR [rbp-0xb8],0x1
  8107f8:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:76
            if(*pstr=='x'){
  8107f9:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  810800:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  810803:	3c 78                	cmp    al,0x78
  810805:	75 64                	jne    81086b <sprintf+0x1ae>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:77
                int v=va_arg(vargs,int);
  810807:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
  81080d:	83 f8 2f             	cmp    eax,0x2f
  810810:	77 23                	ja     810835 <sprintf+0x178>
  810812:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  810819:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
  81081f:	89 d2                	mov    edx,edx
  810821:	48 01 d0             	add    rax,rdx
  810824:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
  81082a:	83 c2 08             	add    edx,0x8
  81082d:	89 95 08 ff ff ff    	mov    DWORD PTR [rbp-0xf8],edx
  810833:	eb 12                	jmp    810847 <sprintf+0x18a>
  810835:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
  81083c:	48 8d 50 08          	lea    rdx,[rax+0x8]
  810840:	48 89 95 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rdx
  810847:	8b 00                	mov    eax,DWORD PTR [rax]
  810849:	89 85 24 ff ff ff    	mov    DWORD PTR [rbp-0xdc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:78
                sprint_hex(dist,v);
  81084f:	8b 95 24 ff ff ff    	mov    edx,DWORD PTR [rbp-0xdc]
  810855:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  81085c:	89 d6                	mov    esi,edx
  81085e:	48 89 c7             	mov    rdi,rax
  810861:	e8 4e 02 00 00       	call   810ab4 <sprint_hex>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:76
            if(*pstr=='x'){
  810866:	e9 38 01 00 00       	jmp    8109a3 <sprintf+0x2e6>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:79
            }else if(*pstr=='s'){
  81086b:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  810872:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  810875:	3c 73                	cmp    al,0x73
  810877:	75 68                	jne    8108e1 <sprintf+0x224>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:80
                char* v=va_arg(vargs,char*);
  810879:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
  81087f:	83 f8 2f             	cmp    eax,0x2f
  810882:	77 23                	ja     8108a7 <sprintf+0x1ea>
  810884:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  81088b:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
  810891:	89 d2                	mov    edx,edx
  810893:	48 01 d0             	add    rax,rdx
  810896:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
  81089c:	83 c2 08             	add    edx,0x8
  81089f:	89 95 08 ff ff ff    	mov    DWORD PTR [rbp-0xf8],edx
  8108a5:	eb 12                	jmp    8108b9 <sprintf+0x1fc>
  8108a7:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
  8108ae:	48 8d 50 08          	lea    rdx,[rax+0x8]
  8108b2:	48 89 95 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rdx
  8108b9:	48 8b 00             	mov    rax,QWORD PTR [rax]
  8108bc:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:81
                sprintn(dist,v);
  8108c3:	48 8b 95 28 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd8]
  8108ca:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  8108d1:	48 89 d6             	mov    rsi,rdx
  8108d4:	48 89 c7             	mov    rdi,rax
  8108d7:	e8 5a 02 00 00       	call   810b36 <sprintn>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:76
            if(*pstr=='x'){
  8108dc:	e9 c2 00 00 00       	jmp    8109a3 <sprintf+0x2e6>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:82
            }else if(*pstr=='d'){
  8108e1:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  8108e8:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  8108eb:	3c 64                	cmp    al,0x64
  8108ed:	75 66                	jne    810955 <sprintf+0x298>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:83
                char* v=va_arg(vargs,char*);
  8108ef:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
  8108f5:	83 f8 2f             	cmp    eax,0x2f
  8108f8:	77 23                	ja     81091d <sprintf+0x260>
  8108fa:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
  810901:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
  810907:	89 d2                	mov    edx,edx
  810909:	48 01 d0             	add    rax,rdx
  81090c:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
  810912:	83 c2 08             	add    edx,0x8
  810915:	89 95 08 ff ff ff    	mov    DWORD PTR [rbp-0xf8],edx
  81091b:	eb 12                	jmp    81092f <sprintf+0x272>
  81091d:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
  810924:	48 8d 50 08          	lea    rdx,[rax+0x8]
  810928:	48 89 95 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rdx
  81092f:	48 8b 00             	mov    rax,QWORD PTR [rax]
  810932:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:84
                sprint_decimal(dist,v);
  810939:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
  810940:	89 c2                	mov    edx,eax
  810942:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  810949:	89 d6                	mov    esi,edx
  81094b:	48 89 c7             	mov    rdi,rax
  81094e:	e8 ad 00 00 00       	call   810a00 <sprint_decimal>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:76
            if(*pstr=='x'){
  810953:	eb 4e                	jmp    8109a3 <sprintf+0x2e6>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:85
            }else if(*pstr=='c'){
  810955:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  81095c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  81095f:	3c 63                	cmp    al,0x63
  810961:	75 02                	jne    810965 <sprintf+0x2a8>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:86
                char v=va_arg(vargs,char);
  810963:	0f 0b                	ud2    
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:89
                sprintchar(dist,v);
            }else{
                sprintchar(dist,*pstr);
  810965:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  81096c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  81096f:	0f be d0             	movsx  edx,al
  810972:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  810979:	89 d6                	mov    esi,edx
  81097b:	48 89 c7             	mov    rdi,rax
  81097e:	e8 3e 00 00 00       	call   8109c1 <sprintchar>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:76
            if(*pstr=='x'){
  810983:	eb 1e                	jmp    8109a3 <sprintf+0x2e6>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:92
            }
        }else{
            sprintchar(dist,*pstr);
  810985:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  81098c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  81098f:	0f be d0             	movsx  edx,al
  810992:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
  810999:	89 d6                	mov    esi,edx
  81099b:	48 89 c7             	mov    rdi,rax
  81099e:	e8 1e 00 00 00       	call   8109c1 <sprintchar>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:73
    for(;*pstr!='\0';pstr++){
  8109a3:	48 83 85 48 ff ff ff 	add    QWORD PTR [rbp-0xb8],0x1
  8109aa:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:73 (discriminator 1)
  8109ab:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
  8109b2:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  8109b5:	84 c0                	test   al,al
  8109b7:	0f 85 0c fe ff ff    	jne    8107c9 <sprintf+0x10c>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:96
        }
    }
    va_end(vargs);
}
  8109bd:	90                   	nop
  8109be:	90                   	nop
  8109bf:	c9                   	leave  
  8109c0:	c3                   	ret    

00000000008109c1 <sprintchar>:
sprintchar():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:98
void sprintchar(char *dist,char c)
{
  8109c1:	f3 0f 1e fa          	endbr64 
  8109c5:	55                   	push   rbp
  8109c6:	48 89 e5             	mov    rbp,rsp
  8109c9:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  8109cd:	89 f0                	mov    eax,esi
  8109cf:	88 45 f4             	mov    BYTE PTR [rbp-0xc],al
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:99
    while(*dist!='\0')
  8109d2:	eb 05                	jmp    8109d9 <sprintchar+0x18>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:100
        dist++;
  8109d4:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:99
    while(*dist!='\0')
  8109d9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  8109dd:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  8109e0:	84 c0                	test   al,al
  8109e2:	75 f0                	jne    8109d4 <sprintchar+0x13>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:101
    *dist++=c;
  8109e4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  8109e8:	48 8d 50 01          	lea    rdx,[rax+0x1]
  8109ec:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
  8109f0:	0f b6 55 f4          	movzx  edx,BYTE PTR [rbp-0xc]
  8109f4:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:102
    *dist='\0';
  8109f6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  8109fa:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:103
}
  8109fd:	90                   	nop
  8109fe:	5d                   	pop    rbp
  8109ff:	c3                   	ret    

0000000000810a00 <sprint_decimal>:
sprint_decimal():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:105
void sprint_decimal(char *dist,int c)
{
  810a00:	f3 0f 1e fa          	endbr64 
  810a04:	55                   	push   rbp
  810a05:	48 89 e5             	mov    rbp,rsp
  810a08:	48 83 ec 30          	sub    rsp,0x30
  810a0c:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
  810a10:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:107
    unsigned char st[22];
    int p=0;
  810a13:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:108
    while(p<sizeof(unsigned long)*2){
  810a1a:	eb 65                	jmp    810a81 <sprint_decimal+0x81>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:109
        unsigned char a=c%10+'0';
  810a1c:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
  810a1f:	48 63 c2             	movsxd rax,edx
  810a22:	48 69 c0 67 66 66 66 	imul   rax,rax,0x66666667
  810a29:	48 c1 e8 20          	shr    rax,0x20
  810a2d:	c1 f8 02             	sar    eax,0x2
  810a30:	89 d6                	mov    esi,edx
  810a32:	c1 fe 1f             	sar    esi,0x1f
  810a35:	29 f0                	sub    eax,esi
  810a37:	89 c1                	mov    ecx,eax
  810a39:	89 c8                	mov    eax,ecx
  810a3b:	c1 e0 02             	shl    eax,0x2
  810a3e:	01 c8                	add    eax,ecx
  810a40:	01 c0                	add    eax,eax
  810a42:	89 d1                	mov    ecx,edx
  810a44:	29 c1                	sub    ecx,eax
  810a46:	89 c8                	mov    eax,ecx
  810a48:	83 c0 30             	add    eax,0x30
  810a4b:	88 45 fb             	mov    BYTE PTR [rbp-0x5],al
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:110
        st[p++]=a;
  810a4e:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  810a51:	8d 50 01             	lea    edx,[rax+0x1]
  810a54:	89 55 fc             	mov    DWORD PTR [rbp-0x4],edx
  810a57:	48 98                	cdqe   
  810a59:	0f b6 55 fb          	movzx  edx,BYTE PTR [rbp-0x5]
  810a5d:	88 54 05 e0          	mov    BYTE PTR [rbp+rax*1-0x20],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:111
        c/=10;
  810a61:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
  810a64:	48 63 d0             	movsxd rdx,eax
  810a67:	48 69 d2 67 66 66 66 	imul   rdx,rdx,0x66666667
  810a6e:	48 c1 ea 20          	shr    rdx,0x20
  810a72:	c1 fa 02             	sar    edx,0x2
  810a75:	c1 f8 1f             	sar    eax,0x1f
  810a78:	89 c1                	mov    ecx,eax
  810a7a:	89 d0                	mov    eax,edx
  810a7c:	29 c8                	sub    eax,ecx
  810a7e:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:108
    while(p<sizeof(unsigned long)*2){
  810a81:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  810a84:	83 f8 0f             	cmp    eax,0xf
  810a87:	76 93                	jbe    810a1c <sprint_decimal+0x1c>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:113
    }
    while(p>0)
  810a89:	eb 1f                	jmp    810aaa <sprint_decimal+0xaa>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:115
    {
        sprintchar(dist,st[--p]);
  810a8b:	83 6d fc 01          	sub    DWORD PTR [rbp-0x4],0x1
  810a8f:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  810a92:	48 98                	cdqe   
  810a94:	0f b6 44 05 e0       	movzx  eax,BYTE PTR [rbp+rax*1-0x20]
  810a99:	0f be d0             	movsx  edx,al
  810a9c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  810aa0:	89 d6                	mov    esi,edx
  810aa2:	48 89 c7             	mov    rdi,rax
  810aa5:	e8 17 ff ff ff       	call   8109c1 <sprintchar>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:113
    while(p>0)
  810aaa:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
  810aae:	7f db                	jg     810a8b <sprint_decimal+0x8b>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:117
    }
}
  810ab0:	90                   	nop
  810ab1:	90                   	nop
  810ab2:	c9                   	leave  
  810ab3:	c3                   	ret    

0000000000810ab4 <sprint_hex>:
sprint_hex():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:119
void sprint_hex(char *dist,unsigned long c)
{
  810ab4:	f3 0f 1e fa          	endbr64 
  810ab8:	55                   	push   rbp
  810ab9:	48 89 e5             	mov    rbp,rsp
  810abc:	48 83 ec 20          	sub    rsp,0x20
  810ac0:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
  810ac4:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:121
    unsigned char st[17];
    int p=0;
  810ac7:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:122
    while(p<10){
  810ace:	eb 35                	jmp    810b05 <sprint_hex+0x51>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:123
        unsigned char a=c%16;
  810ad0:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  810ad3:	83 e0 0f             	and    eax,0xf
  810ad6:	88 45 fb             	mov    BYTE PTR [rbp-0x5],al
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:124
        if(a>9)a+='a'-10;
  810ad9:	80 7d fb 09          	cmp    BYTE PTR [rbp-0x5],0x9
  810add:	76 06                	jbe    810ae5 <sprint_hex+0x31>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:124 (discriminator 1)
  810adf:	80 45 fb 57          	add    BYTE PTR [rbp-0x5],0x57
  810ae3:	eb 04                	jmp    810ae9 <sprint_hex+0x35>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:125
        else a+='0';
  810ae5:	80 45 fb 30          	add    BYTE PTR [rbp-0x5],0x30
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:126
        st[p++]=a;
  810ae9:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  810aec:	8d 50 01             	lea    edx,[rax+0x1]
  810aef:	89 55 fc             	mov    DWORD PTR [rbp-0x4],edx
  810af2:	48 98                	cdqe   
  810af4:	0f b6 55 fb          	movzx  edx,BYTE PTR [rbp-0x5]
  810af8:	88 54 05 f1          	mov    BYTE PTR [rbp+rax*1-0xf],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:127
        c/=16;
  810afc:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  810aff:	c1 e8 04             	shr    eax,0x4
  810b02:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:122
    while(p<10){
  810b05:	83 7d fc 09          	cmp    DWORD PTR [rbp-0x4],0x9
  810b09:	7e c5                	jle    810ad0 <sprint_hex+0x1c>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:129
    }
    while(p>0)
  810b0b:	eb 1f                	jmp    810b2c <sprint_hex+0x78>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:131
    {
        sprintchar(dist,st[--p]);
  810b0d:	83 6d fc 01          	sub    DWORD PTR [rbp-0x4],0x1
  810b11:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  810b14:	48 98                	cdqe   
  810b16:	0f b6 44 05 f1       	movzx  eax,BYTE PTR [rbp+rax*1-0xf]
  810b1b:	0f be d0             	movsx  edx,al
  810b1e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
  810b22:	89 d6                	mov    esi,edx
  810b24:	48 89 c7             	mov    rdi,rax
  810b27:	e8 95 fe ff ff       	call   8109c1 <sprintchar>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:129
    while(p>0)
  810b2c:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
  810b30:	7f db                	jg     810b0d <sprint_hex+0x59>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:133
    }
}
  810b32:	90                   	nop
  810b33:	90                   	nop
  810b34:	c9                   	leave  
  810b35:	c3                   	ret    

0000000000810b36 <sprintn>:
sprintn():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:135
void sprintn(char *dist,char *str)
{
  810b36:	f3 0f 1e fa          	endbr64 
  810b3a:	55                   	push   rbp
  810b3b:	48 89 e5             	mov    rbp,rsp
  810b3e:	48 83 ec 10          	sub    rsp,0x10
  810b42:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
  810b46:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:136
    while(*str!='\0')
  810b4a:	eb 20                	jmp    810b6c <sprintn+0x36>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:138
    {
        sprintchar(dist,*str++);
  810b4c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  810b50:	48 8d 50 01          	lea    rdx,[rax+0x1]
  810b54:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
  810b58:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  810b5b:	0f be d0             	movsx  edx,al
  810b5e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
  810b62:	89 d6                	mov    esi,edx
  810b64:	48 89 c7             	mov    rdi,rax
  810b67:	e8 55 fe ff ff       	call   8109c1 <sprintchar>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:136
    while(*str!='\0')
  810b6c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
  810b70:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  810b73:	84 c0                	test   al,al
  810b75:	75 d5                	jne    810b4c <sprintn+0x16>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:140
    }
  810b77:	90                   	nop
  810b78:	90                   	nop
  810b79:	c9                   	leave  
  810b7a:	c3                   	ret    
  810b7b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000810b80 <create_zero>:
create_zero():
  810b80:	e8 18 4d ff ff       	call   80589d <req_proc>
  810b85:	83 f8 ff             	cmp    eax,0xffffffff
  810b88:	74 0c                	je     810b96 <create_zero.retu>
  810b8a:	e8 27 4e ff ff       	call   8059b6 <set_proc>
  810b8f:	67 8b 04 24          	mov    eax,DWORD PTR [esp]
  810b93:	83 c4 40             	add    esp,0x40

0000000000810b96 <create_zero.retu>:
create_zero.retu():
  810b96:	c3                   	ret    

0000000000810b97 <fill_desc>:
fill_desc():
  810b97:	55                   	push   rbp
  810b98:	48 89 e5             	mov    rbp,rsp
  810b9b:	67 8b 45 14          	mov    eax,DWORD PTR [ebp+0x14]
  810b9f:	67 8b 5d 10          	mov    ebx,DWORD PTR [ebp+0x10]
  810ba3:	67 8b 4d 0c          	mov    ecx,DWORD PTR [ebp+0xc]
  810ba7:	67 8b 55 08          	mov    edx,DWORD PTR [ebp+0x8]
  810bab:	be ea 0c 81 00       	mov    esi,0x810cea
  810bb0:	c7 04 25 ea 0c 81 00 	mov    DWORD PTR ds:0x810cea,0x0
  810bb7:	00 00 00 00 
  810bbb:	c7 04 25 ee 0c 81 00 	mov    DWORD PTR ds:0x810cee,0x0
  810bc2:	00 00 00 00 
  810bc6:	66 67 89 0e          	mov    WORD PTR [esi],cx
  810bca:	c1 e9 10             	shr    ecx,0x10
  810bcd:	66 67 89 56 02       	mov    WORD PTR [esi+0x2],dx
  810bd2:	c1 ea 10             	shr    edx,0x10
  810bd5:	67 88 56 04          	mov    BYTE PTR [esi+0x4],dl
  810bd9:	66 c1 ea 08          	shr    dx,0x8
  810bdd:	67 88 56 07          	mov    BYTE PTR [esi+0x7],dl
  810be1:	66 67 89 5e 05       	mov    WORD PTR [esi+0x5],bx
  810be6:	67 8b 7e 04          	mov    edi,DWORD PTR [esi+0x4]
  810bea:	c1 e1 08             	shl    ecx,0x8
  810bed:	09 cf                	or     edi,ecx
  810bef:	67 89 7e 04          	mov    DWORD PTR [esi+0x4],edi
  810bf3:	8b 14 25 ea 0c 81 00 	mov    edx,DWORD PTR ds:0x810cea
  810bfa:	67 89 10             	mov    DWORD PTR [eax],edx
  810bfd:	8b 14 25 ee 0c 81 00 	mov    edx,DWORD PTR ds:0x810cee
  810c04:	67 89 50 04          	mov    DWORD PTR [eax+0x4],edx
  810c08:	c9                   	leave  
  810c09:	c3                   	ret    

0000000000810c0a <switch_proc_asm>:
switch_proc_asm():
  810c0a:	66 67 8b 44 24 04    	mov    ax,WORD PTR [esp+0x4]
  810c10:	66 89 04 25 28 0c 81 	mov    WORD PTR ds:0x810c28,ax
  810c17:	00 
  810c18:	c7 04 25 24 0c 81 00 	mov    DWORD PTR ds:0x810c24,0x0
  810c1f:	00 00 00 00 

0000000000810c23 <switch_proc_asm.ljmp>:
switch_proc_asm.ljmp():
  810c23:	ea                   	(bad)  
  810c24:	00 00                	add    BYTE PTR [rax],al
  810c26:	00 00                	add    BYTE PTR [rax],al
  810c28:	00 00                	add    BYTE PTR [rax],al
  810c2a:	c3                   	ret    

0000000000810c2b <switch_to_old>:
switch_to_old():
  810c2b:	67 8b 74 24 04       	mov    esi,DWORD PTR [esp+0x4]
  810c30:	67 8b 5e 20          	mov    ebx,DWORD PTR [esi+0x20]
  810c34:	bf 9c 0c 81 00       	mov    edi,0x810c9c
  810c39:	67 89 5f 01          	mov    DWORD PTR [edi+0x1],ebx
  810c3d:	67 8b 46 38          	mov    eax,DWORD PTR [esi+0x38]
  810c41:	89 c1                	mov    ecx,eax
  810c43:	83 e9 04             	sub    ecx,0x4
  810c46:	67 89 19             	mov    DWORD PTR [ecx],ebx
  810c49:	50                   	push   rax
  810c4a:	89 f5                	mov    ebp,esi
  810c4c:	83 c5 28             	add    ebp,0x28
  810c4f:	67 8b 45 00          	mov    eax,DWORD PTR [ebp+0x0]
  810c53:	50                   	push   rax
  810c54:	83 c5 04             	add    ebp,0x4
  810c57:	67 8b 45 00          	mov    eax,DWORD PTR [ebp+0x0]
  810c5b:	50                   	push   rax
  810c5c:	83 c5 04             	add    ebp,0x4
  810c5f:	67 8b 45 00          	mov    eax,DWORD PTR [ebp+0x0]
  810c63:	50                   	push   rax
  810c64:	83 c5 04             	add    ebp,0x4
  810c67:	67 8b 45 00          	mov    eax,DWORD PTR [ebp+0x0]
  810c6b:	50                   	push   rax
  810c6c:	83 c5 04             	add    ebp,0x4
  810c6f:	67 8b 45 00          	mov    eax,DWORD PTR [ebp+0x0]
  810c73:	50                   	push   rax
  810c74:	83 c5 04             	add    ebp,0x4
  810c77:	67 8b 45 00          	mov    eax,DWORD PTR [ebp+0x0]
  810c7b:	50                   	push   rax
  810c7c:	83 c5 04             	add    ebp,0x4
  810c7f:	67 8b 45 00          	mov    eax,DWORD PTR [ebp+0x0]
  810c83:	50                   	push   rax
  810c84:	83 c5 04             	add    ebp,0x4
  810c87:	67 8b 45 00          	mov    eax,DWORD PTR [ebp+0x0]
  810c8b:	50                   	push   rax
  810c8c:	83 c5 04             	add    ebp,0x4
  810c8f:	67 8b 46 1c          	mov    eax,DWORD PTR [esi+0x1c]
  810c93:	0f 22 d8             	mov    cr3,rax
  810c96:	67 8b 46 24          	mov    eax,DWORD PTR [esi+0x24]
  810c9a:	50                   	push   rax
  810c9b:	5c                   	pop    rsp

0000000000810c9c <switch_to_old.leap>:
switch_to_old.leap():
  810c9c:	ea                   	(bad)  
  810c9d:	00 00                	add    BYTE PTR [rax],al
  810c9f:	00 00                	add    BYTE PTR [rax],al
  810ca1:	08 00                	or     BYTE PTR [rax],al

0000000000810ca3 <save_context>:
save_context():
  810ca3:	67 8b 44 24 24       	mov    eax,DWORD PTR [esp+0x24]
  810ca8:	83 c0 44             	add    eax,0x44
  810cab:	b9 08 00 00 00       	mov    ecx,0x8
  810cb0:	89 e7                	mov    edi,esp

0000000000810cb2 <save_context.loops>:
save_context.loops():
  810cb2:	67 8b 17             	mov    edx,DWORD PTR [edi]
  810cb5:	67 89 10             	mov    DWORD PTR [eax],edx
  810cb8:	83 c7 04             	add    edi,0x4
  810cbb:	83 e8 04             	sub    eax,0x4
  810cbe:	e2 f2                	loop   810cb2 <save_context.loops>
  810cc0:	5b                   	pop    rbx
  810cc1:	67 8b 44 24 04       	mov    eax,DWORD PTR [esp+0x4]
  810cc6:	67 89 58 24          	mov    DWORD PTR [eax+0x24],ebx
  810cca:	67 48 8b 1c 24       	mov    rbx,QWORD PTR [esp]
  810ccf:	67 89 58 20          	mov    DWORD PTR [eax+0x20],ebx
  810cd3:	c3                   	ret    

0000000000810cd4 <move_to_user_mode>:
move_to_user_mode():
  810cd4:	66 b8 20 00          	mov    ax,0x20
  810cd8:	8e d8                	mov    ds,eax
  810cda:	8e c0                	mov    es,eax
  810cdc:	8e e8                	mov    gs,eax
  810cde:	6a 20                	push   0x20
  810ce0:	54                   	push   rsp
  810ce1:	6a 18                	push   0x18
  810ce3:	68 e9 0c 81 00       	push   0x810ce9
  810ce8:	cf                   	iret   

0000000000810ce9 <move_to_user_mode.done>:
move_to_user_mode.done():
  810ce9:	c3                   	ret    

0000000000810cea <desc>:
	...

0000000000810cf2 <ret_sys_call>:
ret_sys_call():
  810cf2:	58                   	pop    rax
  810cf3:	8e d8                	mov    ds,eax
  810cf5:	58                   	pop    rax
  810cf6:	8e c0                	mov    es,eax
  810cf8:	41 5f                	pop    r15
  810cfa:	41 5e                	pop    r14
  810cfc:	41 5d                	pop    r13
  810cfe:	41 5c                	pop    r12
  810d00:	41 5b                	pop    r11
  810d02:	41 5a                	pop    r10
  810d04:	41 59                	pop    r9
  810d06:	41 58                	pop    r8
  810d08:	5e                   	pop    rsi
  810d09:	5f                   	pop    rdi
  810d0a:	5a                   	pop    rdx
  810d0b:	59                   	pop    rcx
  810d0c:	5b                   	pop    rbx
  810d0d:	58                   	pop    rax

0000000000810d0e <tmp>:
tmp():
  810d0e:	48 0f 07             	sysretq 

0000000000810d11 <ret_normal_proc>:
ret_normal_proc():
  810d11:	58                   	pop    rax
  810d12:	8e d8                	mov    ds,eax
  810d14:	58                   	pop    rax
  810d15:	8e c0                	mov    es,eax
  810d17:	41 5f                	pop    r15
  810d19:	41 5e                	pop    r14
  810d1b:	41 5d                	pop    r13
  810d1d:	41 5c                	pop    r12
  810d1f:	41 5b                	pop    r11
  810d21:	41 5a                	pop    r10
  810d23:	41 59                	pop    r9
  810d25:	41 58                	pop    r8
  810d27:	5e                   	pop    rsi
  810d28:	5f                   	pop    rdi
  810d29:	5a                   	pop    rdx
  810d2a:	59                   	pop    rcx
  810d2b:	5b                   	pop    rbx
  810d2c:	58                   	pop    rax
  810d2d:	c3                   	ret    
