
bin/gmsknl.elf:     file format elf64-x86-64


Disassembly of section .text:

ffff800000800000 <init_int>:
init_int():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:13
#include "kb.h"
#include <log.h>
#pragma pack(1)
gate *idt= (gate *) (KNL_BASE+IDT_ADDR);
extern int disk_int_handler();
void init_int(){
ffff800000800000:	f3 0f 1e fa          	endbr64 
ffff800000800004:	55                   	push   rbp
ffff800000800005:	48 89 e5             	mov    rbp,rsp
ffff800000800008:	41 57                	push   r15
ffff80000080000a:	53                   	push   rbx
ffff80000080000b:	48 83 ec 10          	sub    rsp,0x10
ffff80000080000f:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080000f <init_int+0xf>
ffff800000800016:	49 bb e9 2b 12 00 00 	movabs r11,0x122be9
ffff80000080001d:	00 00 00 
ffff800000800020:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:15
    //__asm__ volatile("sidt %0"::"m"(idt));
    set_gate(0,(addr_t)divide_err,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800023:	48 b8 f8 fe ff ff ff 	movabs rax,0xfffffffffffffef8
ffff80000080002a:	ff ff ff 
ffff80000080002d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800031:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800036:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080003b:	48 89 c6             	mov    rsi,rax
ffff80000080003e:	bf 00 00 00 00       	mov    edi,0x0
ffff800000800043:	49 89 df             	mov    r15,rbx
ffff800000800046:	48 b8 da d9 ed ff ff 	movabs rax,0xffffffffffedd9da
ffff80000080004d:	ff ff ff 
ffff800000800050:	48 01 d8             	add    rax,rbx
ffff800000800053:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:16
    set_gate(1,(addr_t)debug,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800055:	48 b8 60 fd ff ff ff 	movabs rax,0xfffffffffffffd60
ffff80000080005c:	ff ff ff 
ffff80000080005f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800063:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800068:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080006d:	48 89 c6             	mov    rsi,rax
ffff800000800070:	bf 01 00 00 00       	mov    edi,0x1
ffff800000800075:	49 89 df             	mov    r15,rbx
ffff800000800078:	48 b8 da d9 ed ff ff 	movabs rax,0xffffffffffedd9da
ffff80000080007f:	ff ff ff 
ffff800000800082:	48 01 d8             	add    rax,rbx
ffff800000800085:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:17
    set_gate(2,(addr_t)default_int_proc,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800087:	48 b8 40 fe ff ff ff 	movabs rax,0xfffffffffffffe40
ffff80000080008e:	ff ff ff 
ffff800000800091:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800095:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff80000080009a:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080009f:	48 89 c6             	mov    rsi,rax
ffff8000008000a2:	bf 02 00 00 00       	mov    edi,0x2
ffff8000008000a7:	49 89 df             	mov    r15,rbx
ffff8000008000aa:	48 b8 da d9 ed ff ff 	movabs rax,0xffffffffffedd9da
ffff8000008000b1:	ff ff ff 
ffff8000008000b4:	48 01 d8             	add    rax,rbx
ffff8000008000b7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:18
    set_gate(3,(addr_t)breakpoint,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff8000008000b9:	48 b8 20 fe ff ff ff 	movabs rax,0xfffffffffffffe20
ffff8000008000c0:	ff ff ff 
ffff8000008000c3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008000c7:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008000cc:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008000d1:	48 89 c6             	mov    rsi,rax
ffff8000008000d4:	bf 03 00 00 00       	mov    edi,0x3
ffff8000008000d9:	49 89 df             	mov    r15,rbx
ffff8000008000dc:	48 b8 da d9 ed ff ff 	movabs rax,0xffffffffffedd9da
ffff8000008000e3:	ff ff ff 
ffff8000008000e6:	48 01 d8             	add    rax,rbx
ffff8000008000e9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:19
    set_gate(4,(addr_t)overflow,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff8000008000eb:	48 b8 58 fd ff ff ff 	movabs rax,0xfffffffffffffd58
ffff8000008000f2:	ff ff ff 
ffff8000008000f5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008000f9:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008000fe:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800103:	48 89 c6             	mov    rsi,rax
ffff800000800106:	bf 04 00 00 00       	mov    edi,0x4
ffff80000080010b:	49 89 df             	mov    r15,rbx
ffff80000080010e:	48 b8 da d9 ed ff ff 	movabs rax,0xffffffffffedd9da
ffff800000800115:	ff ff ff 
ffff800000800118:	48 01 d8             	add    rax,rbx
ffff80000080011b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:20
    set_gate(5,(addr_t)bounds,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff80000080011d:	48 b8 68 fd ff ff ff 	movabs rax,0xfffffffffffffd68
ffff800000800124:	ff ff ff 
ffff800000800127:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080012b:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800130:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800135:	48 89 c6             	mov    rsi,rax
ffff800000800138:	bf 05 00 00 00       	mov    edi,0x5
ffff80000080013d:	49 89 df             	mov    r15,rbx
ffff800000800140:	48 b8 da d9 ed ff ff 	movabs rax,0xffffffffffedd9da
ffff800000800147:	ff ff ff 
ffff80000080014a:	48 01 d8             	add    rax,rbx
ffff80000080014d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:21
    set_gate(6,(addr_t)undefined_operator,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff80000080014f:	48 b8 30 ff ff ff ff 	movabs rax,0xffffffffffffff30
ffff800000800156:	ff ff ff 
ffff800000800159:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080015d:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800162:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800167:	48 89 c6             	mov    rsi,rax
ffff80000080016a:	bf 06 00 00 00       	mov    edi,0x6
ffff80000080016f:	49 89 df             	mov    r15,rbx
ffff800000800172:	48 b8 da d9 ed ff ff 	movabs rax,0xffffffffffedd9da
ffff800000800179:	ff ff ff 
ffff80000080017c:	48 01 d8             	add    rax,rbx
ffff80000080017f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:22
    set_gate(7,(addr_t)coprocessor_notexist,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800181:	48 b8 e8 ff ff ff ff 	movabs rax,0xffffffffffffffe8
ffff800000800188:	ff ff ff 
ffff80000080018b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080018f:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800194:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800199:	48 89 c6             	mov    rsi,rax
ffff80000080019c:	bf 07 00 00 00       	mov    edi,0x7
ffff8000008001a1:	49 89 df             	mov    r15,rbx
ffff8000008001a4:	48 b8 da d9 ed ff ff 	movabs rax,0xffffffffffedd9da
ffff8000008001ab:	ff ff ff 
ffff8000008001ae:	48 01 d8             	add    rax,rbx
ffff8000008001b1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:23
    set_gate(8,(addr_t)double_ints,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);//double_ints
ffff8000008001b3:	48 b8 08 fe ff ff ff 	movabs rax,0xfffffffffffffe08
ffff8000008001ba:	ff ff ff 
ffff8000008001bd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008001c1:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008001c6:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008001cb:	48 89 c6             	mov    rsi,rax
ffff8000008001ce:	bf 08 00 00 00       	mov    edi,0x8
ffff8000008001d3:	49 89 df             	mov    r15,rbx
ffff8000008001d6:	48 b8 da d9 ed ff ff 	movabs rax,0xffffffffffedd9da
ffff8000008001dd:	ff ff ff 
ffff8000008001e0:	48 01 d8             	add    rax,rbx
ffff8000008001e3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:24
    set_gate(9,(addr_t)coprocessor_seg_overbound,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff8000008001e5:	48 b8 b0 fd ff ff ff 	movabs rax,0xfffffffffffffdb0
ffff8000008001ec:	ff ff ff 
ffff8000008001ef:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008001f3:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008001f8:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008001fd:	48 89 c6             	mov    rsi,rax
ffff800000800200:	bf 09 00 00 00       	mov    edi,0x9
ffff800000800205:	49 89 df             	mov    r15,rbx
ffff800000800208:	48 b8 da d9 ed ff ff 	movabs rax,0xffffffffffedd9da
ffff80000080020f:	ff ff ff 
ffff800000800212:	48 01 d8             	add    rax,rbx
ffff800000800215:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:25
    set_gate(10,(addr_t)invalid_tss,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800217:	48 b8 b0 ff ff ff ff 	movabs rax,0xffffffffffffffb0
ffff80000080021e:	ff ff ff 
ffff800000800221:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800225:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff80000080022a:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080022f:	48 89 c6             	mov    rsi,rax
ffff800000800232:	bf 0a 00 00 00       	mov    edi,0xa
ffff800000800237:	49 89 df             	mov    r15,rbx
ffff80000080023a:	48 b8 da d9 ed ff ff 	movabs rax,0xffffffffffedd9da
ffff800000800241:	ff ff ff 
ffff800000800244:	48 01 d8             	add    rax,rbx
ffff800000800247:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:26
    set_gate(11,(addr_t)segment_notexist,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800249:	48 b8 d0 ff ff ff ff 	movabs rax,0xffffffffffffffd0
ffff800000800250:	ff ff ff 
ffff800000800253:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800257:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff80000080025c:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800261:	48 89 c6             	mov    rsi,rax
ffff800000800264:	bf 0b 00 00 00       	mov    edi,0xb
ffff800000800269:	49 89 df             	mov    r15,rbx
ffff80000080026c:	48 b8 da d9 ed ff ff 	movabs rax,0xffffffffffedd9da
ffff800000800273:	ff ff ff 
ffff800000800276:	48 01 d8             	add    rax,rbx
ffff800000800279:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:27
    set_gate(12,(addr_t)stackseg_overbound,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);//
ffff80000080027b:	48 b8 98 ff ff ff ff 	movabs rax,0xffffffffffffff98
ffff800000800282:	ff ff ff 
ffff800000800285:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800289:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff80000080028e:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800293:	48 89 c6             	mov    rsi,rax
ffff800000800296:	bf 0c 00 00 00       	mov    edi,0xc
ffff80000080029b:	49 89 df             	mov    r15,rbx
ffff80000080029e:	48 b8 da d9 ed ff ff 	movabs rax,0xffffffffffedd9da
ffff8000008002a5:	ff ff ff 
ffff8000008002a8:	48 01 d8             	add    rax,rbx
ffff8000008002ab:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:28
    set_gate(13,(addr_t)general_protect,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff8000008002ad:	48 b8 48 ff ff ff ff 	movabs rax,0xffffffffffffff48
ffff8000008002b4:	ff ff ff 
ffff8000008002b7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008002bb:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008002c0:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008002c5:	48 89 c6             	mov    rsi,rax
ffff8000008002c8:	bf 0d 00 00 00       	mov    edi,0xd
ffff8000008002cd:	49 89 df             	mov    r15,rbx
ffff8000008002d0:	48 b8 da d9 ed ff ff 	movabs rax,0xffffffffffedd9da
ffff8000008002d7:	ff ff ff 
ffff8000008002da:	48 01 d8             	add    rax,rbx
ffff8000008002dd:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:29
    set_gate(14,(addr_t)page_err,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff8000008002df:	48 b8 d8 fc ff ff ff 	movabs rax,0xfffffffffffffcd8
ffff8000008002e6:	ff ff ff 
ffff8000008002e9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008002ed:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff8000008002f2:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008002f7:	48 89 c6             	mov    rsi,rax
ffff8000008002fa:	bf 0e 00 00 00       	mov    edi,0xe
ffff8000008002ff:	49 89 df             	mov    r15,rbx
ffff800000800302:	48 b8 da d9 ed ff ff 	movabs rax,0xffffffffffedd9da
ffff800000800309:	ff ff ff 
ffff80000080030c:	48 01 d8             	add    rax,rbx
ffff80000080030f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:30
    set_gate(15,(addr_t)default_int_proc,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800311:	48 b8 40 fe ff ff ff 	movabs rax,0xfffffffffffffe40
ffff800000800318:	ff ff ff 
ffff80000080031b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080031f:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800324:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800329:	48 89 c6             	mov    rsi,rax
ffff80000080032c:	bf 0f 00 00 00       	mov    edi,0xf
ffff800000800331:	49 89 df             	mov    r15,rbx
ffff800000800334:	48 b8 da d9 ed ff ff 	movabs rax,0xffffffffffedd9da
ffff80000080033b:	ff ff ff 
ffff80000080033e:	48 01 d8             	add    rax,rbx
ffff800000800341:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:31
    set_gate(16,(addr_t)coprocessor_err,GDT_SEL_CODE,GATE_PRESENT|TRAP_GATE);
ffff800000800343:	48 b8 38 ff ff ff ff 	movabs rax,0xffffffffffffff38
ffff80000080034a:	ff ff ff 
ffff80000080034d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800351:	b9 00 8f 00 00       	mov    ecx,0x8f00
ffff800000800356:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080035b:	48 89 c6             	mov    rsi,rax
ffff80000080035e:	bf 10 00 00 00       	mov    edi,0x10
ffff800000800363:	49 89 df             	mov    r15,rbx
ffff800000800366:	48 b8 da d9 ed ff ff 	movabs rax,0xffffffffffedd9da
ffff80000080036d:	ff ff ff 
ffff800000800370:	48 01 d8             	add    rax,rbx
ffff800000800373:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:32
    for (int i=17;i<48;i++)
ffff800000800375:	c7 45 ec 11 00 00 00 	mov    DWORD PTR [rbp-0x14],0x11
ffff80000080037c:	eb 39                	jmp    ffff8000008003b7 <init_int+0x3b7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:33 (discriminator 3)
        set_gate(i,(addr_t)default_int_proc,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);
ffff80000080037e:	48 b8 40 fe ff ff ff 	movabs rax,0xfffffffffffffe40
ffff800000800385:	ff ff ff 
ffff800000800388:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080038c:	48 89 c6             	mov    rsi,rax
ffff80000080038f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000800392:	0f b6 c0             	movzx  eax,al
ffff800000800395:	b9 00 8e 00 00       	mov    ecx,0x8e00
ffff80000080039a:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080039f:	89 c7                	mov    edi,eax
ffff8000008003a1:	49 89 df             	mov    r15,rbx
ffff8000008003a4:	48 b8 da d9 ed ff ff 	movabs rax,0xffffffffffedd9da
ffff8000008003ab:	ff ff ff 
ffff8000008003ae:	48 01 d8             	add    rax,rbx
ffff8000008003b1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:32 (discriminator 3)
    for (int i=17;i<48;i++)
ffff8000008003b3:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:32 (discriminator 1)
ffff8000008003b7:	83 7d ec 2f          	cmp    DWORD PTR [rbp-0x14],0x2f
ffff8000008003bb:	7e c1                	jle    ffff80000080037e <init_int+0x37e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:34
	set_gate(0x21,(addr_t)key_proc,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);
ffff8000008003bd:	48 b8 e8 fc ff ff ff 	movabs rax,0xfffffffffffffce8
ffff8000008003c4:	ff ff ff 
ffff8000008003c7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008003cb:	b9 00 8e 00 00       	mov    ecx,0x8e00
ffff8000008003d0:	ba 08 00 00 00       	mov    edx,0x8
ffff8000008003d5:	48 89 c6             	mov    rsi,rax
ffff8000008003d8:	bf 21 00 00 00       	mov    edi,0x21
ffff8000008003dd:	49 89 df             	mov    r15,rbx
ffff8000008003e0:	48 b8 da d9 ed ff ff 	movabs rax,0xffffffffffedd9da
ffff8000008003e7:	ff ff ff 
ffff8000008003ea:	48 01 d8             	add    rax,rbx
ffff8000008003ed:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:35
	set_gate(0x20,(addr_t)clock,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);
ffff8000008003ef:	48 b8 c8 ff ff ff ff 	movabs rax,0xffffffffffffffc8
ffff8000008003f6:	ff ff ff 
ffff8000008003f9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008003fd:	b9 00 8e 00 00       	mov    ecx,0x8e00
ffff800000800402:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800407:	48 89 c6             	mov    rsi,rax
ffff80000080040a:	bf 20 00 00 00       	mov    edi,0x20
ffff80000080040f:	49 89 df             	mov    r15,rbx
ffff800000800412:	48 b8 da d9 ed ff ff 	movabs rax,0xffffffffffedd9da
ffff800000800419:	ff ff ff 
ffff80000080041c:	48 01 d8             	add    rax,rbx
ffff80000080041f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:36
	set_gate(0x2e,(addr_t)disk_int_handler,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);
ffff800000800421:	48 b8 f8 ff ff ff ff 	movabs rax,0xfffffffffffffff8
ffff800000800428:	ff ff ff 
ffff80000080042b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080042f:	b9 00 8e 00 00       	mov    ecx,0x8e00
ffff800000800434:	ba 08 00 00 00       	mov    edx,0x8
ffff800000800439:	48 89 c6             	mov    rsi,rax
ffff80000080043c:	bf 2e 00 00 00       	mov    edi,0x2e
ffff800000800441:	49 89 df             	mov    r15,rbx
ffff800000800444:	48 b8 da d9 ed ff ff 	movabs rax,0xffffffffffedd9da
ffff80000080044b:	ff ff ff 
ffff80000080044e:	48 01 d8             	add    rax,rbx
ffff800000800451:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:37
    set_gate(0x80,(addr_t)_syscall,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);//
ffff800000800453:	48 b8 08 fd ff ff ff 	movabs rax,0xfffffffffffffd08
ffff80000080045a:	ff ff ff 
ffff80000080045d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000800461:	b9 00 8e 00 00       	mov    ecx,0x8e00
ffff800000800466:	ba 08 00 00 00       	mov    edx,0x8
ffff80000080046b:	48 89 c6             	mov    rsi,rax
ffff80000080046e:	bf 80 00 00 00       	mov    edi,0x80
ffff800000800473:	49 89 df             	mov    r15,rbx
ffff800000800476:	48 b8 da d9 ed ff ff 	movabs rax,0xffffffffffedd9da
ffff80000080047d:	ff ff ff 
ffff800000800480:	48 01 d8             	add    rax,rbx
ffff800000800483:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:42
    //set_gate(0x2c,mouse_proc,GDT_SEL_CODE,GATE_PRESENT|INT_GATE);
    //启动8259A
    
	//ICW1
	outb(0x20,0x11);
ffff800000800485:	be 11 00 00 00       	mov    esi,0x11
ffff80000080048a:	bf 20 00 00 00       	mov    edi,0x20
ffff80000080048f:	49 89 df             	mov    r15,rbx
ffff800000800492:	48 b8 78 65 ee ff ff 	movabs rax,0xffffffffffee6578
ffff800000800499:	ff ff ff 
ffff80000080049c:	48 01 d8             	add    rax,rbx
ffff80000080049f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:43
	outb(0xA0,0x11);
ffff8000008004a1:	be 11 00 00 00       	mov    esi,0x11
ffff8000008004a6:	bf a0 00 00 00       	mov    edi,0xa0
ffff8000008004ab:	49 89 df             	mov    r15,rbx
ffff8000008004ae:	48 b8 78 65 ee ff ff 	movabs rax,0xffffffffffee6578
ffff8000008004b5:	ff ff ff 
ffff8000008004b8:	48 01 d8             	add    rax,rbx
ffff8000008004bb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:45
	//ICW2
	outb(0x21,0x20);//former 0x20,0x20
ffff8000008004bd:	be 20 00 00 00       	mov    esi,0x20
ffff8000008004c2:	bf 21 00 00 00       	mov    edi,0x21
ffff8000008004c7:	49 89 df             	mov    r15,rbx
ffff8000008004ca:	48 b8 78 65 ee ff ff 	movabs rax,0xffffffffffee6578
ffff8000008004d1:	ff ff ff 
ffff8000008004d4:	48 01 d8             	add    rax,rbx
ffff8000008004d7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:46
	outb(0xA1,0x28);
ffff8000008004d9:	be 28 00 00 00       	mov    esi,0x28
ffff8000008004de:	bf a1 00 00 00       	mov    edi,0xa1
ffff8000008004e3:	49 89 df             	mov    r15,rbx
ffff8000008004e6:	48 b8 78 65 ee ff ff 	movabs rax,0xffffffffffee6578
ffff8000008004ed:	ff ff ff 
ffff8000008004f0:	48 01 d8             	add    rax,rbx
ffff8000008004f3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:48
	//ICW3
	outb(0x21,0x04);
ffff8000008004f5:	be 04 00 00 00       	mov    esi,0x4
ffff8000008004fa:	bf 21 00 00 00       	mov    edi,0x21
ffff8000008004ff:	49 89 df             	mov    r15,rbx
ffff800000800502:	48 b8 78 65 ee ff ff 	movabs rax,0xffffffffffee6578
ffff800000800509:	ff ff ff 
ffff80000080050c:	48 01 d8             	add    rax,rbx
ffff80000080050f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:49
	outb(0xA1,0x02);
ffff800000800511:	be 02 00 00 00       	mov    esi,0x2
ffff800000800516:	bf a1 00 00 00       	mov    edi,0xa1
ffff80000080051b:	49 89 df             	mov    r15,rbx
ffff80000080051e:	48 b8 78 65 ee ff ff 	movabs rax,0xffffffffffee6578
ffff800000800525:	ff ff ff 
ffff800000800528:	48 01 d8             	add    rax,rbx
ffff80000080052b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:51
	//ICW4
	outb(0x21,0x01);
ffff80000080052d:	be 01 00 00 00       	mov    esi,0x1
ffff800000800532:	bf 21 00 00 00       	mov    edi,0x21
ffff800000800537:	49 89 df             	mov    r15,rbx
ffff80000080053a:	48 b8 78 65 ee ff ff 	movabs rax,0xffffffffffee6578
ffff800000800541:	ff ff ff 
ffff800000800544:	48 01 d8             	add    rax,rbx
ffff800000800547:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:52
	outb(0xA1,0x01);
ffff800000800549:	be 01 00 00 00       	mov    esi,0x1
ffff80000080054e:	bf a1 00 00 00       	mov    edi,0xa1
ffff800000800553:	49 89 df             	mov    r15,rbx
ffff800000800556:	48 b8 78 65 ee ff ff 	movabs rax,0xffffffffffee6578
ffff80000080055d:	ff ff ff 
ffff800000800560:	48 01 d8             	add    rax,rbx
ffff800000800563:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:54

    turn_on_int();
ffff800000800565:	49 89 df             	mov    r15,rbx
ffff800000800568:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080056d:	48 ba b2 65 ee ff ff 	movabs rdx,0xffffffffffee65b2
ffff800000800574:	ff ff ff 
ffff800000800577:	48 01 da             	add    rdx,rbx
ffff80000080057a:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:58


    //设置IA32_LSTAR,为syscall做设置
    wrmsr(0xc0000082, _syscall);
ffff80000080057c:	48 b8 08 fd ff ff ff 	movabs rax,0xfffffffffffffd08
ffff800000800583:	ff ff ff 
ffff800000800586:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080058a:	48 89 c6             	mov    rsi,rax
ffff80000080058d:	b8 82 00 00 c0       	mov    eax,0xc0000082
ffff800000800592:	48 89 c7             	mov    rdi,rax
ffff800000800595:	49 89 df             	mov    r15,rbx
ffff800000800598:	48 b8 8e e2 ed ff ff 	movabs rax,0xffffffffffede28e
ffff80000080059f:	ff ff ff 
ffff8000008005a2:	48 01 d8             	add    rax,rbx
ffff8000008005a5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:60
    //设置IA32_FMASK,为syscall做设置
    wrmsr(0xc0000084, -1);
ffff8000008005a7:	48 c7 c6 ff ff ff ff 	mov    rsi,0xffffffffffffffff
ffff8000008005ae:	b8 84 00 00 c0       	mov    eax,0xc0000084
ffff8000008005b3:	48 89 c7             	mov    rdi,rax
ffff8000008005b6:	49 89 df             	mov    r15,rbx
ffff8000008005b9:	48 b8 8e e2 ed ff ff 	movabs rax,0xffffffffffede28e
ffff8000008005c0:	ff ff ff 
ffff8000008005c3:	48 01 d8             	add    rax,rbx
ffff8000008005c6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:61
}
ffff8000008005c8:	90                   	nop
ffff8000008005c9:	48 83 c4 10          	add    rsp,0x10
ffff8000008005cd:	5b                   	pop    rbx
ffff8000008005ce:	41 5f                	pop    r15
ffff8000008005d0:	5d                   	pop    rbp
ffff8000008005d1:	c3                   	ret    

ffff8000008005d2 <set_gate>:
set_gate():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:63
void set_gate(u8 index,addr_t offset,u16 selector,u16 attr)
{
ffff8000008005d2:	f3 0f 1e fa          	endbr64 
ffff8000008005d6:	55                   	push   rbp
ffff8000008005d7:	48 89 e5             	mov    rbp,rsp
ffff8000008005da:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008005da <set_gate+0x8>
ffff8000008005e1:	49 bb 1e 26 12 00 00 	movabs r11,0x12261e
ffff8000008005e8:	00 00 00 
ffff8000008005eb:	4c 01 d8             	add    rax,r11
ffff8000008005ee:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff8000008005f2:	89 d6                	mov    esi,edx
ffff8000008005f4:	89 ca                	mov    edx,ecx
ffff8000008005f6:	89 f9                	mov    ecx,edi
ffff8000008005f8:	88 4d fc             	mov    BYTE PTR [rbp-0x4],cl
ffff8000008005fb:	89 f1                	mov    ecx,esi
ffff8000008005fd:	66 89 4d f8          	mov    WORD PTR [rbp-0x8],cx
ffff800000800601:	66 89 55 ec          	mov    WORD PTR [rbp-0x14],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:70
    /* idt[index].offset_low=offset&0xffffu;
    idt[index].offset_high=(offset>>16)&0xffffu;
    idt[index].attr=attr;
    idt[index].selector=selector; */
#else
    offset|=KNL_BASE;//中断必须在内核空间
ffff800000800605:	48 ba 00 00 00 00 00 	movabs rdx,0xffff800000000000
ffff80000080060c:	80 ff ff 
ffff80000080060f:	48 09 55 f0          	or     QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:71
    idt[index].offset_low=offset&0xffff;
ffff800000800613:	48 ba 08 ff ff ff ff 	movabs rdx,0xffffffffffffff08
ffff80000080061a:	ff ff ff 
ffff80000080061d:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000800621:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000800624:	0f b6 55 fc          	movzx  edx,BYTE PTR [rbp-0x4]
ffff800000800628:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080062c:	48 01 ca             	add    rdx,rcx
ffff80000080062f:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff800000800633:	66 89 0a             	mov    WORD PTR [rdx],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:72
    idt[index].offset_mid=(offset>>16)&0xffff;
ffff800000800636:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080063a:	48 89 d1             	mov    rcx,rdx
ffff80000080063d:	48 c1 e9 10          	shr    rcx,0x10
ffff800000800641:	48 ba 08 ff ff ff ff 	movabs rdx,0xffffffffffffff08
ffff800000800648:	ff ff ff 
ffff80000080064b:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080064f:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff800000800652:	0f b6 55 fc          	movzx  edx,BYTE PTR [rbp-0x4]
ffff800000800656:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080065a:	48 01 f2             	add    rdx,rsi
ffff80000080065d:	66 89 4a 06          	mov    WORD PTR [rdx+0x6],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:73
    idt[index].offset_high=(offset>>32);//0x0000ffff;
ffff800000800661:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff800000800665:	48 89 d1             	mov    rcx,rdx
ffff800000800668:	48 c1 e9 20          	shr    rcx,0x20
ffff80000080066c:	48 ba 08 ff ff ff ff 	movabs rdx,0xffffffffffffff08
ffff800000800673:	ff ff ff 
ffff800000800676:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080067a:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff80000080067d:	0f b6 55 fc          	movzx  edx,BYTE PTR [rbp-0x4]
ffff800000800681:	48 c1 e2 04          	shl    rdx,0x4
ffff800000800685:	48 01 f2             	add    rdx,rsi
ffff800000800688:	89 4a 08             	mov    DWORD PTR [rdx+0x8],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:74
    idt[index].attr=attr|1;//1是ist索引
ffff80000080068b:	48 ba 08 ff ff ff ff 	movabs rdx,0xffffffffffffff08
ffff800000800692:	ff ff ff 
ffff800000800695:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000800699:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080069c:	0f b6 55 fc          	movzx  edx,BYTE PTR [rbp-0x4]
ffff8000008006a0:	48 c1 e2 04          	shl    rdx,0x4
ffff8000008006a4:	48 01 ca             	add    rdx,rcx
ffff8000008006a7:	0f b7 4d ec          	movzx  ecx,WORD PTR [rbp-0x14]
ffff8000008006ab:	83 c9 01             	or     ecx,0x1
ffff8000008006ae:	66 89 4a 04          	mov    WORD PTR [rdx+0x4],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:75
    idt[index].selector=selector;
ffff8000008006b2:	48 ba 08 ff ff ff ff 	movabs rdx,0xffffffffffffff08
ffff8000008006b9:	ff ff ff 
ffff8000008006bc:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008006c0:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008006c3:	0f b6 55 fc          	movzx  edx,BYTE PTR [rbp-0x4]
ffff8000008006c7:	48 c1 e2 04          	shl    rdx,0x4
ffff8000008006cb:	48 01 d1             	add    rcx,rdx
ffff8000008006ce:	0f b7 55 f8          	movzx  edx,WORD PTR [rbp-0x8]
ffff8000008006d2:	66 89 51 02          	mov    WORD PTR [rcx+0x2],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:76
    idt[index].rsvd=0;
ffff8000008006d6:	48 ba 08 ff ff ff ff 	movabs rdx,0xffffffffffffff08
ffff8000008006dd:	ff ff ff 
ffff8000008006e0:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff8000008006e4:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008006e7:	0f b6 45 fc          	movzx  eax,BYTE PTR [rbp-0x4]
ffff8000008006eb:	48 c1 e0 04          	shl    rax,0x4
ffff8000008006ef:	48 01 d0             	add    rax,rdx
ffff8000008006f2:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [rax+0xc],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:78
#endif
}
ffff8000008006f9:	90                   	nop
ffff8000008006fa:	5d                   	pop    rbp
ffff8000008006fb:	c3                   	ret    

ffff8000008006fc <divide_err>:
divide_err():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:80

void divide_err(){
ffff8000008006fc:	f3 0f 1e fa          	endbr64 
ffff800000800700:	55                   	push   rbp
ffff800000800701:	48 89 e5             	mov    rbp,rsp
ffff800000800704:	41 57                	push   r15
ffff800000800706:	48 83 ec 08          	sub    rsp,0x8
ffff80000080070a:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080070a <divide_err+0xe>
ffff800000800711:	49 bb ee 24 12 00 00 	movabs r11,0x1224ee
ffff800000800718:	00 00 00 
ffff80000080071b:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:81
    __asm__("cli");
ffff80000080071e:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:83
    //puts("divide err");
    eoi();
ffff80000080071f:	49 89 d7             	mov    r15,rdx
ffff800000800722:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800727:	48 b9 a6 65 ee ff ff 	movabs rcx,0xffffffffffee65a6
ffff80000080072e:	ff ff ff 
ffff800000800731:	48 01 d1             	add    rcx,rdx
ffff800000800734:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:84
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800736:	fb                   	sti    
ffff800000800737:	c9                   	leave  
ffff800000800738:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:85
}
ffff80000080073a:	90                   	nop
ffff80000080073b:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080073f:	c9                   	leave  
ffff800000800740:	c3                   	ret    

ffff800000800741 <debug>:
debug():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:87

void debug(){
ffff800000800741:	f3 0f 1e fa          	endbr64 
ffff800000800745:	55                   	push   rbp
ffff800000800746:	48 89 e5             	mov    rbp,rsp
ffff800000800749:	41 57                	push   r15
ffff80000080074b:	48 83 ec 08          	sub    rsp,0x8
ffff80000080074f:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080074f <debug+0xe>
ffff800000800756:	49 bb a9 24 12 00 00 	movabs r11,0x1224a9
ffff80000080075d:	00 00 00 
ffff800000800760:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:88
    __asm__("cli");
ffff800000800763:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:90
    //puts("debug");
    eoi();
ffff800000800764:	49 89 d7             	mov    r15,rdx
ffff800000800767:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080076c:	48 b9 a6 65 ee ff ff 	movabs rcx,0xffffffffffee65a6
ffff800000800773:	ff ff ff 
ffff800000800776:	48 01 d1             	add    rcx,rdx
ffff800000800779:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:91
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff80000080077b:	fb                   	sti    
ffff80000080077c:	c9                   	leave  
ffff80000080077d:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:92
}
ffff80000080077f:	90                   	nop
ffff800000800780:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800784:	c9                   	leave  
ffff800000800785:	c3                   	ret    

ffff800000800786 <default_int_proc>:
default_int_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:93
void default_int_proc(){
ffff800000800786:	f3 0f 1e fa          	endbr64 
ffff80000080078a:	55                   	push   rbp
ffff80000080078b:	48 89 e5             	mov    rbp,rsp
ffff80000080078e:	41 57                	push   r15
ffff800000800790:	48 83 ec 08          	sub    rsp,0x8
ffff800000800794:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800794 <default_int_proc+0xe>
ffff80000080079b:	49 bb 64 24 12 00 00 	movabs r11,0x122464
ffff8000008007a2:	00 00 00 
ffff8000008007a5:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:94
    __asm__("cli");
ffff8000008007a8:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:96
    //puts("default_int_proc");
    eoi();
ffff8000008007a9:	49 89 d7             	mov    r15,rdx
ffff8000008007ac:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008007b1:	48 b9 a6 65 ee ff ff 	movabs rcx,0xffffffffffee65a6
ffff8000008007b8:	ff ff ff 
ffff8000008007bb:	48 01 d1             	add    rcx,rdx
ffff8000008007be:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:97
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff8000008007c0:	fb                   	sti    
ffff8000008007c1:	c9                   	leave  
ffff8000008007c2:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:98
}
ffff8000008007c4:	90                   	nop
ffff8000008007c5:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff8000008007c9:	c9                   	leave  
ffff8000008007ca:	c3                   	ret    

ffff8000008007cb <breakpoint>:
breakpoint():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:99
void breakpoint(){
ffff8000008007cb:	f3 0f 1e fa          	endbr64 
ffff8000008007cf:	55                   	push   rbp
ffff8000008007d0:	48 89 e5             	mov    rbp,rsp
ffff8000008007d3:	41 57                	push   r15
ffff8000008007d5:	48 83 ec 08          	sub    rsp,0x8
ffff8000008007d9:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff8000008007d9 <breakpoint+0xe>
ffff8000008007e0:	49 bb 1f 24 12 00 00 	movabs r11,0x12241f
ffff8000008007e7:	00 00 00 
ffff8000008007ea:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:100
    __asm__("cli");
ffff8000008007ed:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:102
    //puts("breakpoint");
    eoi();
ffff8000008007ee:	49 89 d7             	mov    r15,rdx
ffff8000008007f1:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008007f6:	48 b9 a6 65 ee ff ff 	movabs rcx,0xffffffffffee65a6
ffff8000008007fd:	ff ff ff 
ffff800000800800:	48 01 d1             	add    rcx,rdx
ffff800000800803:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:103
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800805:	fb                   	sti    
ffff800000800806:	c9                   	leave  
ffff800000800807:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:104
}
ffff800000800809:	90                   	nop
ffff80000080080a:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080080e:	c9                   	leave  
ffff80000080080f:	c3                   	ret    

ffff800000800810 <overflow>:
overflow():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:105
void overflow(){
ffff800000800810:	f3 0f 1e fa          	endbr64 
ffff800000800814:	55                   	push   rbp
ffff800000800815:	48 89 e5             	mov    rbp,rsp
ffff800000800818:	41 57                	push   r15
ffff80000080081a:	48 83 ec 08          	sub    rsp,0x8
ffff80000080081e:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080081e <overflow+0xe>
ffff800000800825:	49 bb da 23 12 00 00 	movabs r11,0x1223da
ffff80000080082c:	00 00 00 
ffff80000080082f:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:106
    __asm__("cli");
ffff800000800832:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:108
    //puts("overflow");
    eoi();
ffff800000800833:	49 89 d7             	mov    r15,rdx
ffff800000800836:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080083b:	48 b9 a6 65 ee ff ff 	movabs rcx,0xffffffffffee65a6
ffff800000800842:	ff ff ff 
ffff800000800845:	48 01 d1             	add    rcx,rdx
ffff800000800848:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:109
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff80000080084a:	fb                   	sti    
ffff80000080084b:	c9                   	leave  
ffff80000080084c:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:110
}
ffff80000080084e:	90                   	nop
ffff80000080084f:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800853:	c9                   	leave  
ffff800000800854:	c3                   	ret    

ffff800000800855 <bounds>:
bounds():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:111
void bounds(){
ffff800000800855:	f3 0f 1e fa          	endbr64 
ffff800000800859:	55                   	push   rbp
ffff80000080085a:	48 89 e5             	mov    rbp,rsp
ffff80000080085d:	41 57                	push   r15
ffff80000080085f:	48 83 ec 08          	sub    rsp,0x8
ffff800000800863:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800863 <bounds+0xe>
ffff80000080086a:	49 bb 95 23 12 00 00 	movabs r11,0x122395
ffff800000800871:	00 00 00 
ffff800000800874:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:112
    __asm__("cli");
ffff800000800877:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:114
    //puts("bounds");
    eoi();
ffff800000800878:	49 89 d7             	mov    r15,rdx
ffff80000080087b:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800880:	48 b9 a6 65 ee ff ff 	movabs rcx,0xffffffffffee65a6
ffff800000800887:	ff ff ff 
ffff80000080088a:	48 01 d1             	add    rcx,rdx
ffff80000080088d:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:115
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff80000080088f:	fb                   	sti    
ffff800000800890:	c9                   	leave  
ffff800000800891:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:116
}
ffff800000800893:	90                   	nop
ffff800000800894:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800898:	c9                   	leave  
ffff800000800899:	c3                   	ret    

ffff80000080089a <undefined_operator>:
undefined_operator():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:117
void undefined_operator(){
ffff80000080089a:	f3 0f 1e fa          	endbr64 
ffff80000080089e:	55                   	push   rbp
ffff80000080089f:	48 89 e5             	mov    rbp,rsp
ffff8000008008a2:	41 57                	push   r15
ffff8000008008a4:	53                   	push   rbx
ffff8000008008a5:	48 83 ec 10          	sub    rsp,0x10
ffff8000008008a9:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008008a9 <undefined_operator+0xf>
ffff8000008008b0:	49 bb 4f 23 12 00 00 	movabs r11,0x12234f
ffff8000008008b7:	00 00 00 
ffff8000008008ba:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:119
    //puts("undef operator");
    eoi();
ffff8000008008bd:	49 89 df             	mov    r15,rbx
ffff8000008008c0:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008008c5:	48 ba a6 65 ee ff ff 	movabs rdx,0xffffffffffee65a6
ffff8000008008cc:	ff ff ff 
ffff8000008008cf:	48 01 da             	add    rdx,rbx
ffff8000008008d2:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:120
    off_t stk=0;
ffff8000008008d4:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff8000008008db:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:121
    __asm__ volatile("mov %%rbp,%0":"=m"(stk));
ffff8000008008dc:	48 89 6d e8          	mov    QWORD PTR [rbp-0x18],rbp
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:122
    stk-=16;
ffff8000008008e0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008008e4:	48 83 e8 10          	sub    rax,0x10
ffff8000008008e8:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:123
    backtrace(stk);
ffff8000008008ec:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008008f0:	48 89 c7             	mov    rdi,rax
ffff8000008008f3:	49 89 df             	mov    r15,rbx
ffff8000008008f6:	48 b8 8f e4 ed ff ff 	movabs rax,0xffffffffffede48f
ffff8000008008fd:	ff ff ff 
ffff800000800900:	48 01 d8             	add    rax,rbx
ffff800000800903:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:124
    __asm__ volatile ("jmp .\r\n leave \r\n iretq");
ffff800000800905:	eb fe                	jmp    ffff800000800905 <undefined_operator+0x6b>
ffff800000800907:	c9                   	leave  
ffff800000800908:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:125
}
ffff80000080090a:	90                   	nop
ffff80000080090b:	48 83 c4 10          	add    rsp,0x10
ffff80000080090f:	5b                   	pop    rbx
ffff800000800910:	41 5f                	pop    r15
ffff800000800912:	5d                   	pop    rbp
ffff800000800913:	c3                   	ret    

ffff800000800914 <coprocessor_notexist>:
coprocessor_notexist():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:126
void coprocessor_notexist(){
ffff800000800914:	f3 0f 1e fa          	endbr64 
ffff800000800918:	55                   	push   rbp
ffff800000800919:	48 89 e5             	mov    rbp,rsp
ffff80000080091c:	41 57                	push   r15
ffff80000080091e:	48 83 ec 08          	sub    rsp,0x8
ffff800000800922:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800922 <coprocessor_notexist+0xe>
ffff800000800929:	49 bb d6 22 12 00 00 	movabs r11,0x1222d6
ffff800000800930:	00 00 00 
ffff800000800933:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:127
    __asm__("cli");
ffff800000800936:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:129
    //puts("coprocessor doesnt exist");
    eoi();
ffff800000800937:	49 89 d7             	mov    r15,rdx
ffff80000080093a:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080093f:	48 b9 a6 65 ee ff ff 	movabs rcx,0xffffffffffee65a6
ffff800000800946:	ff ff ff 
ffff800000800949:	48 01 d1             	add    rcx,rdx
ffff80000080094c:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:130
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff80000080094e:	fb                   	sti    
ffff80000080094f:	c9                   	leave  
ffff800000800950:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:131
}
ffff800000800952:	90                   	nop
ffff800000800953:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800957:	c9                   	leave  
ffff800000800958:	c3                   	ret    

ffff800000800959 <double_ints>:
double_ints():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:132
void double_ints(){
ffff800000800959:	f3 0f 1e fa          	endbr64 
ffff80000080095d:	55                   	push   rbp
ffff80000080095e:	48 89 e5             	mov    rbp,rsp
ffff800000800961:	41 57                	push   r15
ffff800000800963:	48 83 ec 08          	sub    rsp,0x8
ffff800000800967:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800967 <double_ints+0xe>
ffff80000080096e:	49 bb 91 22 12 00 00 	movabs r11,0x122291
ffff800000800975:	00 00 00 
ffff800000800978:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:133
    __asm__("cli");
ffff80000080097b:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:135
    //puts("double interrupts");
    eoi();
ffff80000080097c:	49 89 d7             	mov    r15,rdx
ffff80000080097f:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800984:	48 b9 a6 65 ee ff ff 	movabs rcx,0xffffffffffee65a6
ffff80000080098b:	ff ff ff 
ffff80000080098e:	48 01 d1             	add    rcx,rdx
ffff800000800991:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:136
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800993:	fb                   	sti    
ffff800000800994:	c9                   	leave  
ffff800000800995:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:137
}
ffff800000800997:	90                   	nop
ffff800000800998:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080099c:	c9                   	leave  
ffff80000080099d:	c3                   	ret    

ffff80000080099e <coprocessor_seg_overbound>:
coprocessor_seg_overbound():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:138
void coprocessor_seg_overbound(){
ffff80000080099e:	f3 0f 1e fa          	endbr64 
ffff8000008009a2:	55                   	push   rbp
ffff8000008009a3:	48 89 e5             	mov    rbp,rsp
ffff8000008009a6:	41 57                	push   r15
ffff8000008009a8:	48 83 ec 08          	sub    rsp,0x8
ffff8000008009ac:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff8000008009ac <coprocessor_seg_overbound+0xe>
ffff8000008009b3:	49 bb 4c 22 12 00 00 	movabs r11,0x12224c
ffff8000008009ba:	00 00 00 
ffff8000008009bd:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:140
    //puts("coprocessfor seg overdound");
    eoi();
ffff8000008009c0:	49 89 d7             	mov    r15,rdx
ffff8000008009c3:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008009c8:	48 b9 a6 65 ee ff ff 	movabs rcx,0xffffffffffee65a6
ffff8000008009cf:	ff ff ff 
ffff8000008009d2:	48 01 d1             	add    rcx,rdx
ffff8000008009d5:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:141
    __asm__ volatile ("leave \r\n iretq");
ffff8000008009d7:	c9                   	leave  
ffff8000008009d8:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:142
}
ffff8000008009da:	90                   	nop
ffff8000008009db:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff8000008009df:	c9                   	leave  
ffff8000008009e0:	c3                   	ret    

ffff8000008009e1 <invalid_tss>:
invalid_tss():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:143
void invalid_tss(){
ffff8000008009e1:	f3 0f 1e fa          	endbr64 
ffff8000008009e5:	55                   	push   rbp
ffff8000008009e6:	48 89 e5             	mov    rbp,rsp
ffff8000008009e9:	41 57                	push   r15
ffff8000008009eb:	48 83 ec 08          	sub    rsp,0x8
ffff8000008009ef:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff8000008009ef <invalid_tss+0xe>
ffff8000008009f6:	49 bb 09 22 12 00 00 	movabs r11,0x122209
ffff8000008009fd:	00 00 00 
ffff800000800a00:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:144
    __asm__("cli");
ffff800000800a03:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:146
    //puts("invalid tss");
    eoi();
ffff800000800a04:	49 89 d7             	mov    r15,rdx
ffff800000800a07:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800a0c:	48 b9 a6 65 ee ff ff 	movabs rcx,0xffffffffffee65a6
ffff800000800a13:	ff ff ff 
ffff800000800a16:	48 01 d1             	add    rcx,rdx
ffff800000800a19:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:147
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800a1b:	fb                   	sti    
ffff800000800a1c:	c9                   	leave  
ffff800000800a1d:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:148
}
ffff800000800a1f:	90                   	nop
ffff800000800a20:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800a24:	c9                   	leave  
ffff800000800a25:	c3                   	ret    

ffff800000800a26 <segment_notexist>:
segment_notexist():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:149
void segment_notexist(){
ffff800000800a26:	f3 0f 1e fa          	endbr64 
ffff800000800a2a:	55                   	push   rbp
ffff800000800a2b:	48 89 e5             	mov    rbp,rsp
ffff800000800a2e:	41 57                	push   r15
ffff800000800a30:	48 83 ec 08          	sub    rsp,0x8
ffff800000800a34:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800a34 <segment_notexist+0xe>
ffff800000800a3b:	49 bb c4 21 12 00 00 	movabs r11,0x1221c4
ffff800000800a42:	00 00 00 
ffff800000800a45:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:150
    __asm__("cli");
ffff800000800a48:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:152
    //puts("seg nonexistent");
    eoi();
ffff800000800a49:	49 89 d7             	mov    r15,rdx
ffff800000800a4c:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800a51:	48 b9 a6 65 ee ff ff 	movabs rcx,0xffffffffffee65a6
ffff800000800a58:	ff ff ff 
ffff800000800a5b:	48 01 d1             	add    rcx,rdx
ffff800000800a5e:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:153
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800a60:	fb                   	sti    
ffff800000800a61:	c9                   	leave  
ffff800000800a62:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:154
}
ffff800000800a64:	90                   	nop
ffff800000800a65:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800a69:	c9                   	leave  
ffff800000800a6a:	c3                   	ret    

ffff800000800a6b <stackseg_overbound>:
stackseg_overbound():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:155
void stackseg_overbound(){
ffff800000800a6b:	f3 0f 1e fa          	endbr64 
ffff800000800a6f:	55                   	push   rbp
ffff800000800a70:	48 89 e5             	mov    rbp,rsp
ffff800000800a73:	41 57                	push   r15
ffff800000800a75:	48 83 ec 08          	sub    rsp,0x8
ffff800000800a79:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800a79 <stackseg_overbound+0xe>
ffff800000800a80:	49 bb 7f 21 12 00 00 	movabs r11,0x12217f
ffff800000800a87:	00 00 00 
ffff800000800a8a:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:156
    __asm__("cli");
ffff800000800a8d:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:158
    //puts("stack seg overbound");
    eoi();
ffff800000800a8e:	49 89 d7             	mov    r15,rdx
ffff800000800a91:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800a96:	48 b9 a6 65 ee ff ff 	movabs rcx,0xffffffffffee65a6
ffff800000800a9d:	ff ff ff 
ffff800000800aa0:	48 01 d1             	add    rcx,rdx
ffff800000800aa3:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:159
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800aa5:	fb                   	sti    
ffff800000800aa6:	c9                   	leave  
ffff800000800aa7:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:160
}
ffff800000800aa9:	90                   	nop
ffff800000800aaa:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800aae:	c9                   	leave  
ffff800000800aaf:	c3                   	ret    

ffff800000800ab0 <general_protect>:
general_protect():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:161
void general_protect(){
ffff800000800ab0:	f3 0f 1e fa          	endbr64 
ffff800000800ab4:	55                   	push   rbp
ffff800000800ab5:	48 89 e5             	mov    rbp,rsp
ffff800000800ab8:	41 57                	push   r15
ffff800000800aba:	48 83 ec 18          	sub    rsp,0x18
ffff800000800abe:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800abe <general_protect+0xe>
ffff800000800ac5:	49 bb 3a 21 12 00 00 	movabs r11,0x12213a
ffff800000800acc:	00 00 00 
ffff800000800acf:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:163
    //print("general protect.");
    int err_code=0;
ffff800000800ad2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:181
    //杀死问题进程
    del_proc(cur_proc);
    printf("killed the problem process.\n");
	printf("shell:>");
    switch_proc_tss(0); */
    eoi();
ffff800000800ad9:	49 89 d7             	mov    r15,rdx
ffff800000800adc:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800ae1:	48 b9 a6 65 ee ff ff 	movabs rcx,0xffffffffffee65a6
ffff800000800ae8:	ff ff ff 
ffff800000800aeb:	48 01 d1             	add    rcx,rdx
ffff800000800aee:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:182
    __asm__ volatile ("leave\r\n add $8,%rsp \r\n iretq");
ffff800000800af0:	c9                   	leave  
ffff800000800af1:	48 83 c4 08          	add    rsp,0x8
ffff800000800af5:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:183
}
ffff800000800af7:	90                   	nop
ffff800000800af8:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800afc:	c9                   	leave  
ffff800000800afd:	c3                   	ret    

ffff800000800afe <coprocessor_err>:
coprocessor_err():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:185

void coprocessor_err(){
ffff800000800afe:	f3 0f 1e fa          	endbr64 
ffff800000800b02:	55                   	push   rbp
ffff800000800b03:	48 89 e5             	mov    rbp,rsp
ffff800000800b06:	41 57                	push   r15
ffff800000800b08:	48 83 ec 08          	sub    rsp,0x8
ffff800000800b0c:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000800b0c <coprocessor_err+0xe>
ffff800000800b13:	49 bb ec 20 12 00 00 	movabs r11,0x1220ec
ffff800000800b1a:	00 00 00 
ffff800000800b1d:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:186
    __asm__("cli");
ffff800000800b20:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:188
    //puts("coprocessor err");
    eoi();
ffff800000800b21:	49 89 d7             	mov    r15,rdx
ffff800000800b24:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800b29:	48 b9 a6 65 ee ff ff 	movabs rcx,0xffffffffffee65a6
ffff800000800b30:	ff ff ff 
ffff800000800b33:	48 01 d1             	add    rcx,rdx
ffff800000800b36:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:189
    __asm__ volatile ("sti \r\n leave \r\n iretq");
ffff800000800b38:	fb                   	sti    
ffff800000800b39:	c9                   	leave  
ffff800000800b3a:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:190
}
ffff800000800b3c:	90                   	nop
ffff800000800b3d:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000800b41:	c9                   	leave  
ffff800000800b42:	c3                   	ret    

ffff800000800b43 <syscall>:
syscall():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:209

xchg rcx to r10

*/
int syscall(long a, long b, long c, long d, long e, long f)
{
ffff800000800b43:	f3 0f 1e fa          	endbr64 
ffff800000800b47:	55                   	push   rbp
ffff800000800b48:	48 89 e5             	mov    rbp,rsp
ffff800000800b4b:	41 57                	push   r15
ffff800000800b4d:	53                   	push   rbx
ffff800000800b4e:	48 83 ec 40          	sub    rsp,0x40
ffff800000800b52:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000800b52 <syscall+0xf>
ffff800000800b59:	49 bb a6 20 12 00 00 	movabs r11,0x1220a6
ffff800000800b60:	00 00 00 
ffff800000800b63:	4c 01 db             	add    rbx,r11
ffff800000800b66:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000800b6a:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffff800000800b6e:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
ffff800000800b72:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
ffff800000800b76:	4c 89 45 b8          	mov    QWORD PTR [rbp-0x48],r8
ffff800000800b7a:	4c 89 4d b0          	mov    QWORD PTR [rbp-0x50],r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:211
    unsigned long num;
    __asm__ volatile("":"=a"(num));//这样rax中存的参数就到这了
ffff800000800b7e:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:212
    switch (num)
ffff800000800b82:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000800b86:	48 83 e8 05          	sub    rax,0x5
ffff800000800b8a:	48 83 f8 5f          	cmp    rax,0x5f
ffff800000800b8e:	0f 87 e9 02 00 00    	ja     ffff800000800e7d <syscall+0x33a>
ffff800000800b94:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000800b9b:	00 
ffff800000800b9c:	48 8d 05 3d ef 11 00 	lea    rax,[rip+0x11ef3d]        # ffff80000091fae0 <filesystem+0x20>
ffff800000800ba3:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000800ba7:	48 8d 15 32 ef 11 00 	lea    rdx,[rip+0x11ef32]        # ffff80000091fae0 <filesystem+0x20>
ffff800000800bae:	48 01 d0             	add    rax,rdx
ffff800000800bb1:	3e ff e0             	notrack jmp rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:219
        // case 0:return reg_device(a);
        // case 1:return dispose_device(a);
        // case 2:return reg_driver(a);
        // case 3:return dispose_driver(a);
        // case 4:return call_drv_func(a,b,c);
        case 5:return req_page_at(a,b);
ffff800000800bb4:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800bb8:	89 c2                	mov    edx,eax
ffff800000800bba:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800bbe:	89 d6                	mov    esi,edx
ffff800000800bc0:	48 89 c7             	mov    rdi,rax
ffff800000800bc3:	49 89 df             	mov    r15,rbx
ffff800000800bc6:	48 b8 87 0f ee ff ff 	movabs rax,0xffffffffffee0f87
ffff800000800bcd:	ff ff ff 
ffff800000800bd0:	48 01 d8             	add    rax,rbx
ffff800000800bd3:	ff d0                	call   rax
ffff800000800bd5:	e9 a3 02 00 00       	jmp    ffff800000800e7d <syscall+0x33a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:220
        case 6:return free_page(a);
ffff800000800bda:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800bde:	48 89 c7             	mov    rdi,rax
ffff800000800be1:	49 89 df             	mov    r15,rbx
ffff800000800be4:	48 b8 7b 0c ee ff ff 	movabs rax,0xffffffffffee0c7b
ffff800000800beb:	ff ff ff 
ffff800000800bee:	48 01 d8             	add    rax,rbx
ffff800000800bf1:	ff d0                	call   rax
ffff800000800bf3:	e9 85 02 00 00       	jmp    ffff800000800e7d <syscall+0x33a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:221
        case 7:return reg_proc(a, b, c);
ffff800000800bf8:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000800bfc:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffff800000800c00:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800c04:	48 89 ce             	mov    rsi,rcx
ffff800000800c07:	48 89 c7             	mov    rdi,rax
ffff800000800c0a:	49 89 df             	mov    r15,rbx
ffff800000800c0d:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800c12:	48 b9 9b 3e ee ff ff 	movabs rcx,0xffffffffffee3e9b
ffff800000800c19:	ff ff ff 
ffff800000800c1c:	48 01 d9             	add    rcx,rbx
ffff800000800c1f:	ff d1                	call   rcx
ffff800000800c21:	e9 57 02 00 00       	jmp    ffff800000800e7d <syscall+0x33a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:222
        case 8:del_proc(a);
ffff800000800c26:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800c2a:	89 c7                	mov    edi,eax
ffff800000800c2c:	49 89 df             	mov    r15,rbx
ffff800000800c2f:	48 b8 a8 3a ee ff ff 	movabs rax,0xffffffffffee3aa8
ffff800000800c36:	ff ff ff 
ffff800000800c39:	48 01 d8             	add    rax,rbx
ffff800000800c3c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:223
        case 10:chk_vm(a,b);
ffff800000800c3e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800c42:	89 c2                	mov    edx,eax
ffff800000800c44:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800c48:	89 d6                	mov    esi,edx
ffff800000800c4a:	89 c7                	mov    edi,eax
ffff800000800c4c:	49 89 df             	mov    r15,rbx
ffff800000800c4f:	48 b8 b9 10 ee ff ff 	movabs rax,0xffffffffffee10b9
ffff800000800c56:	ff ff ff 
ffff800000800c59:	48 01 d8             	add    rax,rbx
ffff800000800c5c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:224
        case 11:return sys_open(a,b);
ffff800000800c5e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800c62:	89 c2                	mov    edx,eax
ffff800000800c64:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800c68:	89 d6                	mov    esi,edx
ffff800000800c6a:	48 89 c7             	mov    rdi,rax
ffff800000800c6d:	49 89 df             	mov    r15,rbx
ffff800000800c70:	48 b8 fe a5 ee ff ff 	movabs rax,0xffffffffffeea5fe
ffff800000800c77:	ff ff ff 
ffff800000800c7a:	48 01 d8             	add    rax,rbx
ffff800000800c7d:	ff d0                	call   rax
ffff800000800c7f:	e9 f9 01 00 00       	jmp    ffff800000800e7d <syscall+0x33a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:225
        case 12:return sys_close(a);
ffff800000800c84:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800c88:	89 c7                	mov    edi,eax
ffff800000800c8a:	49 89 df             	mov    r15,rbx
ffff800000800c8d:	48 b8 32 ac ee ff ff 	movabs rax,0xffffffffffeeac32
ffff800000800c94:	ff ff ff 
ffff800000800c97:	48 01 d8             	add    rax,rbx
ffff800000800c9a:	ff d0                	call   rax
ffff800000800c9c:	e9 dc 01 00 00       	jmp    ffff800000800e7d <syscall+0x33a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:226
        case 13:return sys_read(a,b,c);
ffff800000800ca1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800ca5:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000800ca9:	89 d1                	mov    ecx,edx
ffff800000800cab:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000800caf:	48 89 c6             	mov    rsi,rax
ffff800000800cb2:	89 cf                	mov    edi,ecx
ffff800000800cb4:	49 89 df             	mov    r15,rbx
ffff800000800cb7:	48 b8 3b ad ee ff ff 	movabs rax,0xffffffffffeead3b
ffff800000800cbe:	ff ff ff 
ffff800000800cc1:	48 01 d8             	add    rax,rbx
ffff800000800cc4:	ff d0                	call   rax
ffff800000800cc6:	e9 b2 01 00 00       	jmp    ffff800000800e7d <syscall+0x33a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:227
        case 14:return sys_write(a,b,c);
ffff800000800ccb:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800ccf:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000800cd3:	89 d1                	mov    ecx,edx
ffff800000800cd5:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000800cd9:	48 89 c6             	mov    rsi,rax
ffff800000800cdc:	89 cf                	mov    edi,ecx
ffff800000800cde:	49 89 df             	mov    r15,rbx
ffff800000800ce1:	48 b8 09 ae ee ff ff 	movabs rax,0xffffffffffeeae09
ffff800000800ce8:	ff ff ff 
ffff800000800ceb:	48 01 d8             	add    rax,rbx
ffff800000800cee:	ff d0                	call   rax
ffff800000800cf0:	e9 88 01 00 00       	jmp    ffff800000800e7d <syscall+0x33a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:228
        case 15:return sys_lseek(a,b,c);
ffff800000800cf5:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000800cf9:	89 c2                	mov    edx,eax
ffff800000800cfb:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800cff:	89 c1                	mov    ecx,eax
ffff800000800d01:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800d05:	48 89 c6             	mov    rsi,rax
ffff800000800d08:	89 cf                	mov    edi,ecx
ffff800000800d0a:	49 89 df             	mov    r15,rbx
ffff800000800d0d:	48 b8 d7 ae ee ff ff 	movabs rax,0xffffffffffeeaed7
ffff800000800d14:	ff ff ff 
ffff800000800d17:	48 01 d8             	add    rax,rbx
ffff800000800d1a:	ff d0                	call   rax
ffff800000800d1c:	e9 5c 01 00 00       	jmp    ffff800000800e7d <syscall+0x33a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:232
        // case 16:return sys_tell(a);
        // case 17:return reg_vol(a,b,c);
        // case 18:return free_vol(a);
        case 19:return execute(a, NULL);
ffff800000800d21:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800d25:	be 00 00 00 00       	mov    esi,0x0
ffff800000800d2a:	48 89 c7             	mov    rdi,rax
ffff800000800d2d:	49 89 df             	mov    r15,rbx
ffff800000800d30:	48 b8 1c 69 ee ff ff 	movabs rax,0xffffffffffee691c
ffff800000800d37:	ff ff ff 
ffff800000800d3a:	48 01 d8             	add    rax,rbx
ffff800000800d3d:	ff d0                	call   rax
ffff800000800d3f:	e9 39 01 00 00       	jmp    ffff800000800e7d <syscall+0x33a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:233
        case SYSCALL_EXIT:return sys_exit(a);
ffff800000800d44:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800d48:	89 c7                	mov    edi,eax
ffff800000800d4a:	49 89 df             	mov    r15,rbx
ffff800000800d4d:	48 b8 21 3e ee ff ff 	movabs rax,0xffffffffffee3e21
ffff800000800d54:	ff ff ff 
ffff800000800d57:	48 01 d8             	add    rax,rbx
ffff800000800d5a:	ff d0                	call   rax
ffff800000800d5c:	e9 1c 01 00 00       	jmp    ffff800000800e7d <syscall+0x33a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:234
        case SYSCALL_CALL:return exec_call(a);
ffff800000800d61:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800d65:	48 89 c7             	mov    rdi,rax
ffff800000800d68:	49 89 df             	mov    r15,rbx
ffff800000800d6b:	48 b8 93 6e ee ff ff 	movabs rax,0xffffffffffee6e93
ffff800000800d72:	ff ff ff 
ffff800000800d75:	48 01 d8             	add    rax,rbx
ffff800000800d78:	ff d0                	call   rax
ffff800000800d7a:	e9 fe 00 00 00       	jmp    ffff800000800e7d <syscall+0x33a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:236
        // case SYSCALL_MKFIFO:return sys_mkfifo(a);
        case SYSCALL_BRK:return sys_malloc(a);
ffff800000800d7f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800d83:	48 89 c7             	mov    rdi,rax
ffff800000800d86:	49 89 df             	mov    r15,rbx
ffff800000800d89:	48 b8 26 42 ee ff ff 	movabs rax,0xffffffffffee4226
ffff800000800d90:	ff ff ff 
ffff800000800d93:	48 01 d8             	add    rax,rbx
ffff800000800d96:	ff d0                	call   rax
ffff800000800d98:	e9 e0 00 00 00       	jmp    ffff800000800e7d <syscall+0x33a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:237
        case SYSCALL_FREE:return sys_free(a);
ffff800000800d9d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800da1:	89 c7                	mov    edi,eax
ffff800000800da3:	49 89 df             	mov    r15,rbx
ffff800000800da6:	48 b8 47 44 ee ff ff 	movabs rax,0xffffffffffee4447
ffff800000800dad:	ff ff ff 
ffff800000800db0:	48 01 d8             	add    rax,rbx
ffff800000800db3:	ff d0                	call   rax
ffff800000800db5:	e9 c3 00 00 00       	jmp    ffff800000800e7d <syscall+0x33a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:238
        case SYSCALL_KB_READC:return sys_analyse_key();
ffff800000800dba:	49 89 df             	mov    r15,rbx
ffff800000800dbd:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800dc2:	48 ba 0f d5 ee ff ff 	movabs rdx,0xffffffffffeed50f
ffff800000800dc9:	ff ff ff 
ffff800000800dcc:	48 01 da             	add    rdx,rbx
ffff800000800dcf:	ff d2                	call   rdx
ffff800000800dd1:	0f be c0             	movsx  eax,al
ffff800000800dd4:	e9 a4 00 00 00       	jmp    ffff800000800e7d <syscall+0x33a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:240
        // case SYSCALL_FIND_DEV:return sys_find_dev(a);
        case SYSCALL_FORK:return sys_fork();
ffff800000800dd9:	49 89 df             	mov    r15,rbx
ffff800000800ddc:	48 b8 7f 48 ee ff ff 	movabs rax,0xffffffffffee487f
ffff800000800de3:	ff ff ff 
ffff800000800de6:	48 01 d8             	add    rax,rbx
ffff800000800de9:	ff d0                	call   rax
ffff800000800deb:	e9 8d 00 00 00       	jmp    ffff800000800e7d <syscall+0x33a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:241
        case SYSCALL_EXECVE:return sys_execve(a, b, c);
ffff800000800df0:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000800df4:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800df8:	89 c1                	mov    ecx,eax
ffff800000800dfa:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800dfe:	89 ce                	mov    esi,ecx
ffff800000800e00:	48 89 c7             	mov    rdi,rax
ffff800000800e03:	49 89 df             	mov    r15,rbx
ffff800000800e06:	48 b8 10 6a ee ff ff 	movabs rax,0xffffffffffee6a10
ffff800000800e0d:	ff ff ff 
ffff800000800e10:	48 01 d8             	add    rax,rbx
ffff800000800e13:	ff d0                	call   rax
ffff800000800e15:	eb 66                	jmp    ffff800000800e7d <syscall+0x33a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:243
        // case SYSCALL_OPERATE_DEV:return sys_operate_dev(a,b,c);
        case SYSCALL_WAIT:return sys_wait(a,b,c);
ffff800000800e17:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000800e1b:	89 c6                	mov    esi,eax
ffff800000800e1d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000800e21:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000800e25:	89 d1                	mov    ecx,edx
ffff800000800e27:	89 f2                	mov    edx,esi
ffff800000800e29:	48 89 c6             	mov    rsi,rax
ffff800000800e2c:	89 cf                	mov    edi,ecx
ffff800000800e2e:	49 89 df             	mov    r15,rbx
ffff800000800e31:	48 b8 37 b0 ee ff ff 	movabs rax,0xffffffffffeeb037
ffff800000800e38:	ff ff ff 
ffff800000800e3b:	48 01 d8             	add    rax,rbx
ffff800000800e3e:	ff d0                	call   rax
ffff800000800e40:	eb 3b                	jmp    ffff800000800e7d <syscall+0x33a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:244
        case SYSCALL_MMAP:return sys_mmap(a,b,c,d,e,f);
ffff800000800e42:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffff800000800e46:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000800e4a:	41 89 c0             	mov    r8d,eax
ffff800000800e4d:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000800e51:	89 c1                	mov    ecx,eax
ffff800000800e53:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000800e57:	89 c7                	mov    edi,eax
ffff800000800e59:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff800000800e5d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000800e61:	49 89 d1             	mov    r9,rdx
ffff800000800e64:	89 fa                	mov    edx,edi
ffff800000800e66:	48 89 c7             	mov    rdi,rax
ffff800000800e69:	49 89 df             	mov    r15,rbx
ffff800000800e6c:	48 b8 7b b6 ee ff ff 	movabs rax,0xffffffffffeeb67b
ffff800000800e73:	ff ff ff 
ffff800000800e76:	48 01 d8             	add    rax,rbx
ffff800000800e79:	ff d0                	call   rax
ffff800000800e7b:	eb 00                	jmp    ffff800000800e7d <syscall+0x33a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:250
    }
    // __asm__ volatile("mov %0,%%eax\r\n mov %1,%%ebx\r\n mov %2,%%ecx\r\n mov %3,%%edx\r\n mov %4,%%esi\r\n mov %5,%%edi"\
    // ::"m"(func),"m"(a),"m"(b),"m"(c),"m"(d),"m"(e));
    // __asm__ volatile("int $0x80\r\n leave\r\n ret");

}
ffff800000800e7d:	48 83 c4 40          	add    rsp,0x40
ffff800000800e81:	5b                   	pop    rbx
ffff800000800e82:	41 5f                	pop    r15
ffff800000800e84:	5d                   	pop    rbp
ffff800000800e85:	c3                   	ret    

ffff800000800e86 <wrmsr>:
wrmsr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:252
void wrmsr(unsigned long address,unsigned long value)
{
ffff800000800e86:	f3 0f 1e fa          	endbr64 
ffff800000800e8a:	55                   	push   rbp
ffff800000800e8b:	48 89 e5             	mov    rbp,rsp
ffff800000800e8e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000800e8e <wrmsr+0x8>
ffff800000800e95:	49 bb 6a 1d 12 00 00 	movabs r11,0x121d6a
ffff800000800e9c:	00 00 00 
ffff800000800e9f:	4c 01 d8             	add    rax,r11
ffff800000800ea2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000800ea6:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:253
    __asm__ __volatile__	("wrmsr	\n\t"::"d"(value >> 32),"a"(value & 0xffffffff),"c"(address):"memory");
ffff800000800eaa:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000800eae:	48 c1 e8 20          	shr    rax,0x20
ffff800000800eb2:	48 89 c2             	mov    rdx,rax
ffff800000800eb5:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000800eb9:	89 c0                	mov    eax,eax
ffff800000800ebb:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
ffff800000800ebf:	0f 30                	wrmsr  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:254
}
ffff800000800ec1:	90                   	nop
ffff800000800ec2:	5d                   	pop    rbp
ffff800000800ec3:	c3                   	ret    

ffff800000800ec4 <get_ksym>:
get_ksym():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:255
ksym *get_ksym(off_t addr){
ffff800000800ec4:	f3 0f 1e fa          	endbr64 
ffff800000800ec8:	55                   	push   rbp
ffff800000800ec9:	48 89 e5             	mov    rbp,rsp
ffff800000800ecc:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000800ecc <get_ksym+0x8>
ffff800000800ed3:	49 bb 2c 1d 12 00 00 	movabs r11,0x121d2c
ffff800000800eda:	00 00 00 
ffff800000800edd:	4c 01 d8             	add    rax,r11
ffff800000800ee0:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:258
    extern char _binary_bin_kallsyms_bin_start[]__attribute__((weak)), \
    _binary_bin_kallsyms_bin_end[] __attribute__((weak));
    ksym *sym=_binary_bin_kallsyms_bin_start,*bef=sym;
ffff800000800ee4:	48 ba 68 fe ff ff ff 	movabs rdx,0xfffffffffffffe68
ffff800000800eeb:	ff ff ff 
ffff800000800eee:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000800ef2:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffff800000800ef6:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000800efa:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:259
    off_t func_belonged=sym->addr;//所属函数
ffff800000800efe:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000800f02:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000800f05:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:260
    while (sym<_binary_bin_kallsyms_bin_end&&sym->addr<addr)
ffff800000800f09:	eb 33                	jmp    ffff800000800f3e <get_ksym+0x7a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:262
    {
        bef=sym;
ffff800000800f0b:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000800f0f:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:263
        func_belonged=sym->addr;
ffff800000800f13:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000800f17:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000800f1a:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:264
        int namelen=sym->namelen;
ffff800000800f1e:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000800f22:	8b 52 09             	mov    edx,DWORD PTR [rdx+0x9]
ffff800000800f25:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:265
        sym+=1;
ffff800000800f28:	48 83 45 f8 0d       	add    QWORD PTR [rbp-0x8],0xd
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:266
        sym=(off_t)sym+namelen;
ffff800000800f2d:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffff800000800f30:	48 63 ca             	movsxd rcx,edx
ffff800000800f33:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000800f37:	48 01 ca             	add    rdx,rcx
ffff800000800f3a:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:260
    while (sym<_binary_bin_kallsyms_bin_end&&sym->addr<addr)
ffff800000800f3e:	48 ba 00 fe ff ff ff 	movabs rdx,0xfffffffffffffe00
ffff800000800f45:	ff ff ff 
ffff800000800f48:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000800f4c:	48 39 55 f8          	cmp    QWORD PTR [rbp-0x8],rdx
ffff800000800f50:	73 0d                	jae    ffff800000800f5f <get_ksym+0x9b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:260 (discriminator 1)
ffff800000800f52:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000800f56:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000800f59:	48 39 55 d8          	cmp    QWORD PTR [rbp-0x28],rdx
ffff800000800f5d:	77 ac                	ja     ffff800000800f0b <get_ksym+0x47>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:268
    }
    return bef;
ffff800000800f5f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:269
}
ffff800000800f63:	5d                   	pop    rbp
ffff800000800f64:	c3                   	ret    

ffff800000800f65 <print_ksym>:
print_ksym():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:271
//根据给定的地址找到相应的内核符号，然后输出，如果找不到，就当成单纯的值输出。
int print_ksym(off_t addr){
ffff800000800f65:	f3 0f 1e fa          	endbr64 
ffff800000800f69:	55                   	push   rbp
ffff800000800f6a:	48 89 e5             	mov    rbp,rsp
ffff800000800f6d:	41 57                	push   r15
ffff800000800f6f:	53                   	push   rbx
ffff800000800f70:	48 83 c4 80          	add    rsp,0xffffffffffffff80
ffff800000800f74:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000800f74 <print_ksym+0xf>
ffff800000800f7b:	49 bb 84 1c 12 00 00 	movabs r11,0x121c84
ffff800000800f82:	00 00 00 
ffff800000800f85:	4c 01 db             	add    rbx,r11
ffff800000800f88:	48 89 bd 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:272
    ksym *ks=get_ksym(addr);
ffff800000800f8f:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000800f96:	48 89 c7             	mov    rdi,rax
ffff800000800f99:	49 89 df             	mov    r15,rbx
ffff800000800f9c:	48 b8 cc e2 ed ff ff 	movabs rax,0xffffffffffede2cc
ffff800000800fa3:	ff ff ff 
ffff800000800fa6:	48 01 d8             	add    rax,rbx
ffff800000800fa9:	ff d0                	call   rax
ffff800000800fab:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:273
    if(!ks){
ffff800000800faf:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff800000800fb4:	75 3c                	jne    ffff800000800ff2 <print_ksym+0x8d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:274
        comprintf("%l\n",addr); 
ffff800000800fb6:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000800fbd:	48 89 c6             	mov    rsi,rax
ffff800000800fc0:	48 b8 e8 d1 ff ff ff 	movabs rax,0xffffffffffffd1e8
ffff800000800fc7:	ff ff ff 
ffff800000800fca:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000800fce:	48 89 c7             	mov    rdi,rax
ffff800000800fd1:	49 89 df             	mov    r15,rbx
ffff800000800fd4:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800fd9:	48 ba 3a 19 ef ff ff 	movabs rdx,0xffffffffffef193a
ffff800000800fe0:	ff ff ff 
ffff800000800fe3:	48 01 da             	add    rdx,rbx
ffff800000800fe6:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:275
        return 0;
ffff800000800fe8:	b8 00 00 00 00       	mov    eax,0x0
ffff800000800fed:	e9 8c 00 00 00       	jmp    ffff80000080107e <print_ksym+0x119>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:278
    }else{
        char buf[100];
        memcpy(buf,ks+1,ks->namelen);
ffff800000800ff2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000800ff6:	8b 40 09             	mov    eax,DWORD PTR [rax+0x9]
ffff800000800ff9:	48 63 d0             	movsxd rdx,eax
ffff800000800ffc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801000:	48 8d 48 0d          	lea    rcx,[rax+0xd]
ffff800000801004:	48 8d 45 80          	lea    rax,[rbp-0x80]
ffff800000801008:	48 89 ce             	mov    rsi,rcx
ffff80000080100b:	48 89 c7             	mov    rdi,rax
ffff80000080100e:	49 89 df             	mov    r15,rbx
ffff800000801011:	48 b8 da 1d ef ff ff 	movabs rax,0xffffffffffef1dda
ffff800000801018:	ff ff ff 
ffff80000080101b:	48 01 d8             	add    rax,rbx
ffff80000080101e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:279
        buf[ks->namelen]=0;
ffff800000801020:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801024:	8b 40 09             	mov    eax,DWORD PTR [rax+0x9]
ffff800000801027:	48 98                	cdqe   
ffff800000801029:	c6 44 05 80 00       	mov    BYTE PTR [rbp+rax*1-0x80],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:280
        comprintf("%l %s:%l\n",ks->addr,buf,addr-ks->addr);
ffff80000080102e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801032:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000801035:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff80000080103c:	48 29 d0             	sub    rax,rdx
ffff80000080103f:	48 89 c1             	mov    rcx,rax
ffff800000801042:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801046:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801049:	48 8d 55 80          	lea    rdx,[rbp-0x80]
ffff80000080104d:	48 89 c6             	mov    rsi,rax
ffff800000801050:	48 b8 ec d1 ff ff ff 	movabs rax,0xffffffffffffd1ec
ffff800000801057:	ff ff ff 
ffff80000080105a:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080105e:	48 89 c7             	mov    rdi,rax
ffff800000801061:	49 89 df             	mov    r15,rbx
ffff800000801064:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801069:	49 b8 3a 19 ef ff ff 	movabs r8,0xffffffffffef193a
ffff800000801070:	ff ff ff 
ffff800000801073:	49 01 d8             	add    r8,rbx
ffff800000801076:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:281
        return 1;
ffff800000801079:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:283 (discriminator 1)
    }
}
ffff80000080107e:	48 83 ec 80          	sub    rsp,0xffffffffffffff80
ffff800000801082:	5b                   	pop    rbx
ffff800000801083:	41 5f                	pop    r15
ffff800000801085:	5d                   	pop    rbp
ffff800000801086:	c3                   	ret    

ffff800000801087 <backtrace>:
backtrace():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:284
void backtrace(off_t* ret_stack){
ffff800000801087:	f3 0f 1e fa          	endbr64 
ffff80000080108b:	55                   	push   rbp
ffff80000080108c:	48 89 e5             	mov    rbp,rsp
ffff80000080108f:	41 57                	push   r15
ffff800000801091:	53                   	push   rbx
ffff800000801092:	48 83 ec 20          	sub    rsp,0x20
ffff800000801096:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000801096 <backtrace+0xf>
ffff80000080109d:	49 bb 62 1b 12 00 00 	movabs r11,0x121b62
ffff8000008010a4:	00 00 00 
ffff8000008010a7:	4c 01 db             	add    rbx,r11
ffff8000008010aa:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:285
    __asm__ volatile("mov %%rbp,%0":"=m"(ret_stack));
ffff8000008010ae:	48 89 6d d8          	mov    QWORD PTR [rbp-0x28],rbp
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:286
    ret_stack=ret_stack[0];
ffff8000008010b2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008010b6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008010b9:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:287
    off_t addr=ret_stack[2];//第一级返回函数地址
ffff8000008010bd:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008010c1:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008010c5:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:288
    comprintf("Backtrace:\n");
ffff8000008010c9:	48 b8 f6 d1 ff ff ff 	movabs rax,0xffffffffffffd1f6
ffff8000008010d0:	ff ff ff 
ffff8000008010d3:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008010d7:	48 89 c7             	mov    rdi,rax
ffff8000008010da:	49 89 df             	mov    r15,rbx
ffff8000008010dd:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008010e2:	48 ba 3a 19 ef ff ff 	movabs rdx,0xffffffffffef193a
ffff8000008010e9:	ff ff ff 
ffff8000008010ec:	48 01 da             	add    rdx,rbx
ffff8000008010ef:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:289
    print_ksym(addr);
ffff8000008010f1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008010f5:	48 89 c7             	mov    rdi,rax
ffff8000008010f8:	49 89 df             	mov    r15,rbx
ffff8000008010fb:	48 b8 6d e3 ed ff ff 	movabs rax,0xffffffffffede36d
ffff800000801102:	ff ff ff 
ffff800000801105:	48 01 d8             	add    rax,rbx
ffff800000801108:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:291
    //回到用户栈，回溯
    ret_stack=ret_stack[0];
ffff80000080110a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080110e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801111:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:292
    for (int i = 0; i < 10;i++)
ffff800000801115:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff80000080111c:	eb 42                	jmp    ffff800000801160 <backtrace+0xd9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:294
    {
        print_ksym(ret_stack[1]);
ffff80000080111e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000801122:	48 83 c0 08          	add    rax,0x8
ffff800000801126:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801129:	48 89 c7             	mov    rdi,rax
ffff80000080112c:	49 89 df             	mov    r15,rbx
ffff80000080112f:	48 b8 6d e3 ed ff ff 	movabs rax,0xffffffffffede36d
ffff800000801136:	ff ff ff 
ffff800000801139:	48 01 d8             	add    rax,rbx
ffff80000080113c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:295
        ret_stack=ret_stack[0];
ffff80000080113e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000801142:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801145:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:296
        if(ret_stack<KNL_BASE)break;//超过栈顶
ffff800000801149:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080114d:	48 ba ff ff ff ff ff 	movabs rdx,0xffff7fffffffffff
ffff800000801154:	7f ff ff 
ffff800000801157:	48 39 d0             	cmp    rax,rdx
ffff80000080115a:	76 0c                	jbe    ffff800000801168 <backtrace+0xe1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:292 (discriminator 2)
    for (int i = 0; i < 10;i++)
ffff80000080115c:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:292 (discriminator 1)
ffff800000801160:	83 7d ec 09          	cmp    DWORD PTR [rbp-0x14],0x9
ffff800000801164:	7e b8                	jle    ffff80000080111e <backtrace+0x97>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:300
    }
    

ffff800000801166:	eb 01                	jmp    ffff800000801169 <backtrace+0xe2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:296
        if(ret_stack<KNL_BASE)break;//超过栈顶
ffff800000801168:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/int.c:300
ffff800000801169:	90                   	nop
ffff80000080116a:	48 83 c4 20          	add    rsp,0x20
ffff80000080116e:	5b                   	pop    rbx
ffff80000080116f:	41 5f                	pop    r15
ffff800000801171:	5d                   	pop    rbp
ffff800000801172:	c3                   	ret    

ffff800000801173 <main>:
main():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:24
#include "ramdisk.h"
#include "ramfs.h"

int manage_proc_lock=1;
void main(unsigned int magic,void* addr)
{
ffff800000801173:	f3 0f 1e fa          	endbr64 
ffff800000801177:	55                   	push   rbp
ffff800000801178:	48 89 e5             	mov    rbp,rsp
ffff80000080117b:	41 57                	push   r15
ffff80000080117d:	53                   	push   rbx
ffff80000080117e:	48 81 ec 00 01 00 00 	sub    rsp,0x100
ffff800000801185:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000801185 <main+0x12>
ffff80000080118c:	49 bb 73 1a 12 00 00 	movabs r11,0x121a73
ffff800000801193:	00 00 00 
ffff800000801196:	4c 01 db             	add    rbx,r11
ffff800000801199:	89 bd fc fe ff ff    	mov    DWORD PTR [rbp-0x104],edi
ffff80000080119f:	48 89 b5 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:26

    struct multiboot_header* mbi=0ul;
ffff8000008011a6:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff8000008011ad:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:27
    mbi=(struct multiboot_header*)addr;
ffff8000008011ae:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff8000008011b5:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:28
    init_logging();
ffff8000008011b9:	49 89 df             	mov    r15,rbx
ffff8000008011bc:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008011c1:	48 ba fc eb ed ff ff 	movabs rdx,0xffffffffffedebfc
ffff8000008011c8:	ff ff ff 
ffff8000008011cb:	48 01 da             	add    rdx,rbx
ffff8000008011ce:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:38
    }
    //获取tags
    struct multiboot_tag *tag;

    //先初始化串口，保证输出最基本的调试信息
    init_com(PORT_COM1);
ffff8000008011d0:	bf f8 03 00 00       	mov    edi,0x3f8
ffff8000008011d5:	49 89 df             	mov    r15,rbx
ffff8000008011d8:	48 b8 0e 17 ef ff ff 	movabs rax,0xffffffffffef170e
ffff8000008011df:	ff ff ff 
ffff8000008011e2:	48 01 d8             	add    rax,rbx
ffff8000008011e5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:39
    comprintf("\rgamessis os loaded.\r\n");
ffff8000008011e7:	48 b8 08 d2 ff ff ff 	movabs rax,0xffffffffffffd208
ffff8000008011ee:	ff ff ff 
ffff8000008011f1:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008011f5:	48 89 c7             	mov    rdi,rax
ffff8000008011f8:	49 89 df             	mov    r15,rbx
ffff8000008011fb:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801200:	48 ba 3a 19 ef ff ff 	movabs rdx,0xffffffffffef193a
ffff800000801207:	ff ff ff 
ffff80000080120a:	48 01 da             	add    rdx,rbx
ffff80000080120d:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:41
	unsigned size;
    size = *(unsigned long*)addr;
ffff80000080120f:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff800000801216:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801219:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:43
//    //printf("Announced mbi size 0x%x\n", size);
	for (tag = (struct multiboot_tag *)(addr + 8);
ffff80000080121c:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff800000801223:	48 83 c0 08          	add    rax,0x8
ffff800000801227:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff80000080122b:	e9 93 02 00 00       	jmp    ffff8000008014c3 <main+0x350>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:48
		 tag->type != MULTIBOOT_TAG_TYPE_END;
		 tag = (struct multiboot_tag *)((u8 *)tag + ((tag->size + 7) & ~7)))
	{
		//printf("Tag 0x%x, Size 0x%x\n", tag->type, tag->size);
		switch (tag->type)
ffff800000801230:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801234:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000801236:	83 f8 08             	cmp    eax,0x8
ffff800000801239:	0f 87 71 02 00 00    	ja     ffff8000008014b0 <main+0x33d>
ffff80000080123f:	89 c0                	mov    eax,eax
ffff800000801241:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000801248:	00 
ffff800000801249:	48 8d 05 10 ec 11 00 	lea    rax,[rip+0x11ec10]        # ffff80000091fe60 <.LC4+0x11>
ffff800000801250:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000801254:	48 8d 15 05 ec 11 00 	lea    rdx,[rip+0x11ec05]        # ffff80000091fe60 <.LC4+0x11>
ffff80000080125b:	48 01 d0             	add    rax,rdx
ffff80000080125e:	3e ff e0             	notrack jmp rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:66
			break;
		case MULTIBOOT_TAG_TYPE_BASIC_MEMINFO:
			//printf("mem_lower = %uKB, mem_upper = %uKB\n",
//				   ((struct multiboot_tag_basic_meminfo *)tag)->mem_lower,
//				   ((struct multiboot_tag_basic_meminfo *)tag)->mem_upper);
			set_high_mem_base(((struct multiboot_tag_basic_meminfo *)tag)->mem_lower);
ffff800000801261:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801265:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000801268:	89 c7                	mov    edi,eax
ffff80000080126a:	49 89 df             	mov    r15,rbx
ffff80000080126d:	48 b8 fa f4 ed ff ff 	movabs rax,0xffffffffffedf4fa
ffff800000801274:	ff ff ff 
ffff800000801277:	48 01 d8             	add    rax,rbx
ffff80000080127a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:67
			break;
ffff80000080127c:	e9 2f 02 00 00       	jmp    ffff8000008014b0 <main+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:80

			break;
		case MULTIBOOT_TAG_TYPE_MMAP:
		{
			//printf("mmap\n");
            for (multiboot_memory_map_t * mmap = ((struct multiboot_tag_mmap *)tag)->entries;
ffff800000801281:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801285:	48 83 c0 10          	add    rax,0x10
ffff800000801289:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffff80000080128d:	eb 44                	jmp    ffff8000008012d3 <main+0x160>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:84
                    (multiboot_uint8_t *)mmap < (multiboot_uint8_t *)tag + tag->size;
                    mmap = (multiboot_memory_map_t *)((unsigned long)mmap + ((struct multiboot_tag_mmap *)tag)->entry_size))
            {
                set_mem_area(mmap->addr,mmap->len,mmap->type);
ffff80000080128f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801293:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff800000801296:	89 c2                	mov    edx,eax
ffff800000801298:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080129c:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
ffff8000008012a0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008012a4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008012a7:	48 89 ce             	mov    rsi,rcx
ffff8000008012aa:	48 89 c7             	mov    rdi,rax
ffff8000008012ad:	49 89 df             	mov    r15,rbx
ffff8000008012b0:	48 b8 2f f5 ed ff ff 	movabs rax,0xffffffffffedf52f
ffff8000008012b7:	ff ff ff 
ffff8000008012ba:	48 01 d8             	add    rax,rbx
ffff8000008012bd:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:82
                    mmap = (multiboot_memory_map_t *)((unsigned long)mmap + ((struct multiboot_tag_mmap *)tag)->entry_size))
ffff8000008012bf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008012c3:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff8000008012c6:	89 c2                	mov    edx,eax
ffff8000008012c8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008012cc:	48 01 d0             	add    rax,rdx
ffff8000008012cf:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:81
                    (multiboot_uint8_t *)mmap < (multiboot_uint8_t *)tag + tag->size;
ffff8000008012d3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008012d7:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff8000008012da:	89 c2                	mov    edx,eax
ffff8000008012dc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008012e0:	48 01 d0             	add    rax,rdx
ffff8000008012e3:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
ffff8000008012e7:	72 a6                	jb     ffff80000080128f <main+0x11c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:88
            }

		}
		break;
ffff8000008012e9:	e9 c2 01 00 00       	jmp    ffff8000008014b0 <main+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:93
		case MULTIBOOT_TAG_TYPE_FRAMEBUFFER:
		{
			multiboot_uint32_t color;
			unsigned i;
			struct multiboot_tag_framebuffer *tagfb = (struct multiboot_tag_framebuffer *)tag;
ffff8000008012ee:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008012f2:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:94
			void *fb = (void *) FRAMEBUFFER_ADDR;
ffff8000008012f6:	48 b8 00 00 00 40 00 	movabs rax,0xffff800040000000
ffff8000008012fd:	80 ff ff 
ffff800000801300:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:95
			set_framebuffer(*tagfb);
ffff800000801304:	48 83 ec 08          	sub    rsp,0x8
ffff800000801308:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080130c:	ff 70 20             	push   QWORD PTR [rax+0x20]
ffff80000080130f:	ff 70 18             	push   QWORD PTR [rax+0x18]
ffff800000801312:	ff 70 10             	push   QWORD PTR [rax+0x10]
ffff800000801315:	ff 70 08             	push   QWORD PTR [rax+0x8]
ffff800000801318:	ff 30                	push   QWORD PTR [rax]
ffff80000080131a:	49 89 df             	mov    r15,rbx
ffff80000080131d:	48 b8 82 8f ee ff ff 	movabs rax,0xffffffffffee8f82
ffff800000801324:	ff ff ff 
ffff800000801327:	48 01 d8             	add    rax,rbx
ffff80000080132a:	ff d0                	call   rax
ffff80000080132c:	48 83 c4 30          	add    rsp,0x30
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:97

			switch (tagfb->common.framebuffer_type)
ffff800000801330:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801334:	0f b6 40 1d          	movzx  eax,BYTE PTR [rax+0x1d]
ffff800000801338:	0f b6 c0             	movzx  eax,al
ffff80000080133b:	83 f8 02             	cmp    eax,0x2
ffff80000080133e:	0f 84 5a 01 00 00    	je     ffff80000080149e <main+0x32b>
ffff800000801344:	83 f8 02             	cmp    eax,0x2
ffff800000801347:	0f 8f 5a 01 00 00    	jg     ffff8000008014a7 <main+0x334>
ffff80000080134d:	85 c0                	test   eax,eax
ffff80000080134f:	74 0e                	je     ffff80000080135f <main+0x1ec>
ffff800000801351:	83 f8 01             	cmp    eax,0x1
ffff800000801354:	0f 84 15 01 00 00    	je     ffff80000080146f <main+0x2fc>
ffff80000080135a:	e9 48 01 00 00       	jmp    ffff8000008014a7 <main+0x334>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:104
			case MULTIBOOT_FRAMEBUFFER_TYPE_INDEXED:
			{
				unsigned best_distance, distance;
				struct multiboot_color *palette;

				palette = tagfb->framebuffer_palette;
ffff80000080135f:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801363:	48 83 c0 22          	add    rax,0x22
ffff800000801367:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:106

				color = 0;
ffff80000080136b:	c7 45 b4 00 00 00 00 	mov    DWORD PTR [rbp-0x4c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:107
				best_distance = 4 * 256 * 256;
ffff800000801372:	c7 45 d8 00 00 04 00 	mov    DWORD PTR [rbp-0x28],0x40000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:109

				for (i = 0; i < tagfb->framebuffer_palette_num_colors; i++)
ffff800000801379:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
ffff800000801380:	e9 d4 00 00 00       	jmp    ffff800000801459 <main+0x2e6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:111
				{
					distance = (0xff - palette[i].blue) * (0xff - palette[i].blue) + palette[i].red * palette[i].red + palette[i].green * palette[i].green;
ffff800000801385:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000801388:	48 89 d0             	mov    rax,rdx
ffff80000080138b:	48 01 c0             	add    rax,rax
ffff80000080138e:	48 01 c2             	add    rdx,rax
ffff800000801391:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000801395:	48 01 d0             	add    rax,rdx
ffff800000801398:	0f b6 40 02          	movzx  eax,BYTE PTR [rax+0x2]
ffff80000080139c:	0f b6 c0             	movzx  eax,al
ffff80000080139f:	ba ff 00 00 00       	mov    edx,0xff
ffff8000008013a4:	89 d1                	mov    ecx,edx
ffff8000008013a6:	29 c1                	sub    ecx,eax
ffff8000008013a8:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff8000008013ab:	48 89 d0             	mov    rax,rdx
ffff8000008013ae:	48 01 c0             	add    rax,rax
ffff8000008013b1:	48 01 c2             	add    rdx,rax
ffff8000008013b4:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008013b8:	48 01 d0             	add    rax,rdx
ffff8000008013bb:	0f b6 40 02          	movzx  eax,BYTE PTR [rax+0x2]
ffff8000008013bf:	0f b6 d0             	movzx  edx,al
ffff8000008013c2:	b8 ff 00 00 00       	mov    eax,0xff
ffff8000008013c7:	29 d0                	sub    eax,edx
ffff8000008013c9:	89 ce                	mov    esi,ecx
ffff8000008013cb:	0f af f0             	imul   esi,eax
ffff8000008013ce:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff8000008013d1:	48 89 d0             	mov    rax,rdx
ffff8000008013d4:	48 01 c0             	add    rax,rax
ffff8000008013d7:	48 01 c2             	add    rdx,rax
ffff8000008013da:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008013de:	48 01 d0             	add    rax,rdx
ffff8000008013e1:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008013e4:	0f b6 c8             	movzx  ecx,al
ffff8000008013e7:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff8000008013ea:	48 89 d0             	mov    rax,rdx
ffff8000008013ed:	48 01 c0             	add    rax,rax
ffff8000008013f0:	48 01 c2             	add    rdx,rax
ffff8000008013f3:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008013f7:	48 01 d0             	add    rax,rdx
ffff8000008013fa:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008013fd:	0f b6 c0             	movzx  eax,al
ffff800000801400:	0f af c1             	imul   eax,ecx
ffff800000801403:	01 c6                	add    esi,eax
ffff800000801405:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000801408:	48 89 d0             	mov    rax,rdx
ffff80000080140b:	48 01 c0             	add    rax,rax
ffff80000080140e:	48 01 c2             	add    rdx,rax
ffff800000801411:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000801415:	48 01 d0             	add    rax,rdx
ffff800000801418:	0f b6 40 01          	movzx  eax,BYTE PTR [rax+0x1]
ffff80000080141c:	0f b6 c8             	movzx  ecx,al
ffff80000080141f:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000801422:	48 89 d0             	mov    rax,rdx
ffff800000801425:	48 01 c0             	add    rax,rax
ffff800000801428:	48 01 c2             	add    rdx,rax
ffff80000080142b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080142f:	48 01 d0             	add    rax,rdx
ffff800000801432:	0f b6 40 01          	movzx  eax,BYTE PTR [rax+0x1]
ffff800000801436:	0f b6 c0             	movzx  eax,al
ffff800000801439:	0f af c1             	imul   eax,ecx
ffff80000080143c:	01 f0                	add    eax,esi
ffff80000080143e:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:112
					if (distance < best_distance)
ffff800000801441:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
ffff800000801444:	3b 45 d8             	cmp    eax,DWORD PTR [rbp-0x28]
ffff800000801447:	73 0c                	jae    ffff800000801455 <main+0x2e2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:114
					{
						color = i;
ffff800000801449:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080144c:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:115
						best_distance = distance;
ffff80000080144f:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
ffff800000801452:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:109 (discriminator 2)
				for (i = 0; i < tagfb->framebuffer_palette_num_colors; i++)
ffff800000801455:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:109 (discriminator 1)
ffff800000801459:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080145d:	0f b7 40 20          	movzx  eax,WORD PTR [rax+0x20]
ffff800000801461:	0f b7 c0             	movzx  eax,ax
ffff800000801464:	39 45 dc             	cmp    DWORD PTR [rbp-0x24],eax
ffff800000801467:	0f 82 18 ff ff ff    	jb     ffff800000801385 <main+0x212>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:119
					}
				}
			}
			break;
ffff80000080146d:	eb 40                	jmp    ffff8000008014af <main+0x33c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:122

			case MULTIBOOT_FRAMEBUFFER_TYPE_RGB:
				color = ((1 << tagfb->framebuffer_blue_mask_size) - 1) << tagfb->framebuffer_blue_field_position;
ffff80000080146f:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801473:	0f b6 40 25          	movzx  eax,BYTE PTR [rax+0x25]
ffff800000801477:	0f b6 c0             	movzx  eax,al
ffff80000080147a:	ba 01 00 00 00       	mov    edx,0x1
ffff80000080147f:	89 c1                	mov    ecx,eax
ffff800000801481:	d3 e2                	shl    edx,cl
ffff800000801483:	89 d0                	mov    eax,edx
ffff800000801485:	8d 50 ff             	lea    edx,[rax-0x1]
ffff800000801488:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080148c:	0f b6 40 24          	movzx  eax,BYTE PTR [rax+0x24]
ffff800000801490:	0f b6 c0             	movzx  eax,al
ffff800000801493:	89 c1                	mov    ecx,eax
ffff800000801495:	d3 e2                	shl    edx,cl
ffff800000801497:	89 d0                	mov    eax,edx
ffff800000801499:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:123
				break;
ffff80000080149c:	eb 11                	jmp    ffff8000008014af <main+0x33c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:126

			case MULTIBOOT_FRAMEBUFFER_TYPE_EGA_TEXT:
				color = '\\' | 0x0100;
ffff80000080149e:	c7 45 b4 5c 01 00 00 	mov    DWORD PTR [rbp-0x4c],0x15c
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:127
				break;
ffff8000008014a5:	eb 08                	jmp    ffff8000008014af <main+0x33c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:130

			default:
				color = 0xffffffff;
ffff8000008014a7:	c7 45 b4 ff ff ff ff 	mov    DWORD PTR [rbp-0x4c],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:131
				break;
ffff8000008014ae:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:134 (discriminator 1)
			}

			break;
ffff8000008014af:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:45
		 tag = (struct multiboot_tag *)((u8 *)tag + ((tag->size + 7) & ~7)))
ffff8000008014b0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008014b4:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff8000008014b7:	83 c0 07             	add    eax,0x7
ffff8000008014ba:	89 c0                	mov    eax,eax
ffff8000008014bc:	83 e0 f8             	and    eax,0xfffffff8
ffff8000008014bf:	48 01 45 e8          	add    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:44
		 tag->type != MULTIBOOT_TAG_TYPE_END;
ffff8000008014c3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008014c7:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008014c9:	85 c0                	test   eax,eax
ffff8000008014cb:	0f 85 5f fd ff ff    	jne    ffff800000801230 <main+0xbd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:138
		}
		}
	}
	tag = (struct multiboot_tag *)((multiboot_uint8_t *)tag + ((tag->size + 7) & ~7));
ffff8000008014d1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008014d5:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff8000008014d8:	83 c0 07             	add    eax,0x7
ffff8000008014db:	89 c0                	mov    eax,eax
ffff8000008014dd:	83 e0 f8             	and    eax,0xfffffff8
ffff8000008014e0:	48 01 45 e8          	add    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:139
    init_memory();
ffff8000008014e4:	49 89 df             	mov    r15,rbx
ffff8000008014e7:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008014ec:	48 ba d1 fe ed ff ff 	movabs rdx,0xffffffffffedfed1
ffff8000008014f3:	ff ff ff 
ffff8000008014f6:	48 01 da             	add    rdx,rbx
ffff8000008014f9:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:140
    init_framebuffer();
ffff8000008014fb:	49 89 df             	mov    r15,rbx
ffff8000008014fe:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801503:	48 ba 9c 8c ee ff ff 	movabs rdx,0xffffffffffee8c9c
ffff80000080150a:	ff ff ff 
ffff80000080150d:	48 01 da             	add    rdx,rbx
ffff800000801510:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:142
	//printf("Total mbi size 0x%x\n", (unsigned)tag - addr);
	char disk_count=*(char*)0x475;
ffff800000801512:	b8 75 04 00 00       	mov    eax,0x475
ffff800000801517:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080151a:	88 45 cb             	mov    BYTE PTR [rbp-0x35],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:144
	//printf("disk count:%d\n",disk_count);
    init_font();
ffff80000080151d:	49 89 df             	mov    r15,rbx
ffff800000801520:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801525:	48 ba cd 8d ee ff ff 	movabs rdx,0xffffffffffee8dcd
ffff80000080152c:	ff ff ff 
ffff80000080152f:	48 01 da             	add    rdx,rbx
ffff800000801532:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:147
    //初始化区域
    //fill_rect(0,0,100,100,255);
    print("gamessis os loaded.\nkernel:>");
ffff800000801534:	48 b8 1f d2 ff ff ff 	movabs rax,0xffffffffffffd21f
ffff80000080153b:	ff ff ff 
ffff80000080153e:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000801542:	48 89 c7             	mov    rdi,rax
ffff800000801545:	49 89 df             	mov    r15,rbx
ffff800000801548:	48 b8 e9 94 ee ff ff 	movabs rax,0xffffffffffee94e9
ffff80000080154f:	ff ff ff 
ffff800000801552:	48 01 d8             	add    rax,rbx
ffff800000801555:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:148
    init_int();
ffff800000801557:	49 89 df             	mov    r15,rbx
ffff80000080155a:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080155f:	48 ba 08 d4 ed ff ff 	movabs rdx,0xffffffffffedd408
ffff800000801566:	ff ff ff 
ffff800000801569:	48 01 da             	add    rdx,rbx
ffff80000080156c:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:149
    print("int loaded.\n");
ffff80000080156e:	48 b8 3c d2 ff ff ff 	movabs rax,0xffffffffffffd23c
ffff800000801575:	ff ff ff 
ffff800000801578:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080157c:	48 89 c7             	mov    rdi,rax
ffff80000080157f:	49 89 df             	mov    r15,rbx
ffff800000801582:	48 b8 e9 94 ee ff ff 	movabs rax,0xffffffffffee94e9
ffff800000801589:	ff ff ff 
ffff80000080158c:	48 01 d8             	add    rax,rbx
ffff80000080158f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:151
//    set_tss(0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000,0x400000);
	init_paging();
ffff800000801591:	49 89 df             	mov    r15,rbx
ffff800000801594:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801599:	48 ba c3 f4 ed ff ff 	movabs rdx,0xffffffffffedf4c3
ffff8000008015a0:	ff ff ff 
ffff8000008015a3:	48 01 da             	add    rdx,rbx
ffff8000008015a6:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:152
 	init_gdt();
ffff8000008015a8:	49 89 df             	mov    r15,rbx
ffff8000008015ab:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008015b0:	48 ba f5 65 ee ff ff 	movabs rdx,0xffffffffffee65f5
ffff8000008015b7:	ff ff ff 
ffff8000008015ba:	48 01 da             	add    rdx,rbx
ffff8000008015bd:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:154

	init_blkdev();
ffff8000008015bf:	49 89 df             	mov    r15,rbx
ffff8000008015c2:	48 b8 7f c5 ee ff ff 	movabs rax,0xffffffffffeec57f
ffff8000008015c9:	ff ff ff 
ffff8000008015cc:	48 01 d8             	add    rax,rbx
ffff8000008015cf:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:155
	init_blkbuf();
ffff8000008015d1:	49 89 df             	mov    r15,rbx
ffff8000008015d4:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008015d9:	48 ba d2 c5 ee ff ff 	movabs rdx,0xffffffffffeec5d2
ffff8000008015e0:	ff ff ff 
ffff8000008015e3:	48 01 da             	add    rdx,rbx
ffff8000008015e6:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:157
	// init_disk();
    init_ramdisk();
ffff8000008015e8:	49 89 df             	mov    r15,rbx
ffff8000008015eb:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008015f0:	48 ba 4c c0 ee ff ff 	movabs rdx,0xffffffffffeec04c
ffff8000008015f7:	ff ff ff 
ffff8000008015fa:	48 01 da             	add    rdx,rbx
ffff8000008015fd:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:158
    init_rootfs();
ffff8000008015ff:	49 89 df             	mov    r15,rbx
ffff800000801602:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801607:	48 ba 07 a4 ee ff ff 	movabs rdx,0xffffffffffeea407
ffff80000080160e:	ff ff ff 
ffff800000801611:	48 01 da             	add    rdx,rbx
ffff800000801614:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:159
    init_devfs();
ffff800000801616:	49 89 df             	mov    r15,rbx
ffff800000801619:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080161e:	48 ba fe 16 ee ff ff 	movabs rdx,0xffffffffffee16fe
ffff800000801625:	ff ff ff 
ffff800000801628:	48 01 da             	add    rdx,rbx
ffff80000080162b:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:161

    init_proc();
ffff80000080162d:	49 89 df             	mov    r15,rbx
ffff800000801630:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801635:	48 ba 41 22 ee ff ff 	movabs rdx,0xffffffffffee2241
ffff80000080163c:	ff ff ff 
ffff80000080163f:	48 01 da             	add    rdx,rbx
ffff800000801642:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:163
	// init_ramfs();
  	DISK1_FAT32_FS_init();
ffff800000801644:	49 89 df             	mov    r15,rbx
ffff800000801647:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080164c:	48 ba 69 0e ef ff ff 	movabs rdx,0xffffffffffef0e69
ffff800000801653:	ff ff ff 
ffff800000801656:	48 01 da             	add    rdx,rbx
ffff800000801659:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:167

    //自带驱动
    //init_tty();
    init_kb();
ffff80000080165b:	49 89 df             	mov    r15,rbx
ffff80000080165e:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801663:	48 ba ac d2 ee ff ff 	movabs rdx,0xffffffffffeed2ac
ffff80000080166a:	ff ff ff 
ffff80000080166d:	48 01 da             	add    rdx,rbx
ffff800000801670:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:169
//    init_disk();
    sti();
ffff800000801672:	fb                   	sti    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:170
    manage_proc_lock=0;
ffff800000801673:	48 b8 c8 fc ff ff ff 	movabs rax,0xfffffffffffffcc8
ffff80000080167a:	ff ff ff 
ffff80000080167d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000801681:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:173


    move_to_user_mode();
ffff800000801687:	49 89 df             	mov    r15,rbx
ffff80000080168a:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080168f:	48 ba 45 27 ef ff ff 	movabs rdx,0xffffffffffef2745
ffff800000801696:	ff ff ff 
ffff800000801699:	48 01 da             	add    rdx,rbx
ffff80000080169c:	ff d2                	call   rdx
ffff80000080169e:	48 c7 45 98 1b 00 00 	mov    QWORD PTR [rbp-0x68],0x1b
ffff8000008016a5:	00 
ffff8000008016a6:	48 c7 45 90 00 00 00 	mov    QWORD PTR [rbp-0x70],0x0
ffff8000008016ad:	00 
ffff8000008016ae:	48 c7 45 88 00 00 00 	mov    QWORD PTR [rbp-0x78],0x0
ffff8000008016b5:	00 
ffff8000008016b6:	48 c7 45 80 00 00 00 	mov    QWORD PTR [rbp-0x80],0x0
ffff8000008016bd:	00 
ffff8000008016be:	48 c7 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],0x0
ffff8000008016c5:	00 00 00 00 
ffff8000008016c9:	48 c7 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],0x0
ffff8000008016d0:	00 00 00 00 
ffff8000008016d4:	48 c7 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],0x0
ffff8000008016db:	00 00 00 00 
do_syscall():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:63

#define	SYSTEM_REBOOT	(1UL << 0)
#define	SYSTEM_POWEROFF	(1UL << 1)

__attribute__((__always_inline__))inline int do_syscall(long func,long a1,long a2,long a3,long a4,long a5,long a6){
        __asm__ volatile(".byte 0x48\n"
ffff8000008016df:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008016e3:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
ffff8000008016e7:	48 8b 75 88          	mov    rsi,QWORD PTR [rbp-0x78]
ffff8000008016eb:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
ffff8000008016ef:	48 8b 8d 78 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x88]
ffff8000008016f6:	4c 8b 85 70 ff ff ff 	mov    r8,QWORD PTR [rbp-0x90]
ffff8000008016fd:	4c 8b 8d 68 ff ff ff 	mov    r9,QWORD PTR [rbp-0x98]
ffff800000801704:	48 0f 05             	rex.W syscall 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:65
                 "syscall"::"a"(func),"D"(a1),"S"(a2),"d"(a3),"c"(a4),"r"(a5),"r"(a6));
        long ret=0;
ffff800000801707:	48 c7 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],0x0
ffff80000080170e:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:66
        __asm__ volatile("mov %%rax,%0"::"m"(ret));
ffff800000801712:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:67
        return ret;
ffff800000801719:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
main():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:174
    if(do_syscall(SYSCALL_FORK,0,0,0,0,0,0)==0){
ffff800000801720:	85 c0                	test   eax,eax
ffff800000801722:	0f 85 ca 00 00 00    	jne    ffff8000008017f2 <main+0x67f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:175
        char *argv[]={"/mnt/test.elf","gamessis os"};
ffff800000801728:	48 b8 49 d2 ff ff ff 	movabs rax,0xffffffffffffd249
ffff80000080172f:	ff ff ff 
ffff800000801732:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000801736:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
ffff80000080173d:	48 b8 57 d2 ff ff ff 	movabs rax,0xffffffffffffd257
ffff800000801744:	ff ff ff 
ffff800000801747:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080174b:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:176
        do_syscall(SYSCALL_EXECVE, (long) "/mnt/test.elf", 2, (long) &argv[0], 0, 0, 0);
ffff800000801752:	48 8d 85 10 ff ff ff 	lea    rax,[rbp-0xf0]
ffff800000801759:	48 ba 49 d2 ff ff ff 	movabs rdx,0xffffffffffffd249
ffff800000801760:	ff ff ff 
ffff800000801763:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000801767:	48 c7 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],0x1c
ffff80000080176e:	1c 00 00 00 
ffff800000801772:	48 89 95 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdx
ffff800000801779:	48 c7 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],0x2
ffff800000801780:	02 00 00 00 
ffff800000801784:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
ffff80000080178b:	48 c7 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],0x0
ffff800000801792:	00 00 00 00 
ffff800000801796:	48 c7 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],0x0
ffff80000080179d:	00 00 00 00 
ffff8000008017a1:	48 c7 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],0x0
ffff8000008017a8:	00 00 00 00 
do_syscall():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:63
        __asm__ volatile(".byte 0x48\n"
ffff8000008017ac:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff8000008017b3:	48 8b bd 58 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xa8]
ffff8000008017ba:	48 8b b5 50 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xb0]
ffff8000008017c1:	48 8b 95 48 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb8]
ffff8000008017c8:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
ffff8000008017cf:	4c 8b 85 38 ff ff ff 	mov    r8,QWORD PTR [rbp-0xc8]
ffff8000008017d6:	4c 8b 8d 30 ff ff ff 	mov    r9,QWORD PTR [rbp-0xd0]
ffff8000008017dd:	48 0f 05             	rex.W syscall 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:65
        long ret=0;
ffff8000008017e0:	48 c7 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],0x0
ffff8000008017e7:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:66
        __asm__ volatile("mov %%rax,%0"::"m"(ret));
ffff8000008017eb:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
main():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/main.c:187 (discriminator 3)
//    init_fat16();

//    extern device *dev_tree[];
//    blk_dev* p=dev_tree[DEVTREE_BLKDEVI];
//    mount_fs("fat16",p->par,vmalloc());
    while (1)
ffff8000008017f2:	eb fe                	jmp    ffff8000008017f2 <main+0x67f>

ffff8000008017f4 <init_logging>:
init_logging():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:12
static unsigned char* video;
static int xpos,ypos;
/* 将整数 D 转换为字符串并保存在 BUF 中。如果 BASE 为 'd'，则 D 为十进制，如果 BASE 为 'x'，则 D 为十六进制。 */

int init_logging()
{
ffff8000008017f4:	f3 0f 1e fa          	endbr64 
ffff8000008017f8:	55                   	push   rbp
ffff8000008017f9:	48 89 e5             	mov    rbp,rsp
ffff8000008017fc:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008017fc <init_logging+0x8>
ffff800000801803:	49 bb fc 13 12 00 00 	movabs r11,0x1213fc
ffff80000080180a:	00 00 00 
ffff80000080180d:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:13
    video=0xb8000;
ffff800000801810:	48 ba 08 d4 ad ff ff 	movabs rdx,0xffffffffffadd408
ffff800000801817:	ff ff ff 
ffff80000080181a:	48 c7 04 10 00 80 0b 	mov    QWORD PTR [rax+rdx*1],0xb8000
ffff800000801821:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:14
    xpos=0;
ffff800000801822:	48 ba 10 d4 ad ff ff 	movabs rdx,0xffffffffffadd410
ffff800000801829:	ff ff ff 
ffff80000080182c:	c7 04 10 00 00 00 00 	mov    DWORD PTR [rax+rdx*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:15
    ypos=0;
ffff800000801833:	48 ba 14 d4 ad ff ff 	movabs rdx,0xffffffffffadd414
ffff80000080183a:	ff ff ff 
ffff80000080183d:	c7 04 10 00 00 00 00 	mov    DWORD PTR [rax+rdx*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:16
}
ffff800000801844:	90                   	nop
ffff800000801845:	5d                   	pop    rbp
ffff800000801846:	c3                   	ret    

ffff800000801847 <itoa>:
itoa():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:19

void itoa (char *buf, int base, int d)
{
ffff800000801847:	f3 0f 1e fa          	endbr64 
ffff80000080184b:	55                   	push   rbp
ffff80000080184c:	48 89 e5             	mov    rbp,rsp
ffff80000080184f:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080184f <itoa+0x8>
ffff800000801856:	49 bb a9 13 12 00 00 	movabs r11,0x1213a9
ffff80000080185d:	00 00 00 
ffff800000801860:	4c 01 d8             	add    rax,r11
ffff800000801863:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000801867:	89 75 c4             	mov    DWORD PTR [rbp-0x3c],esi
ffff80000080186a:	89 55 c0             	mov    DWORD PTR [rbp-0x40],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:20
    char *p = buf;
ffff80000080186d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000801871:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:22
    char *p1, *p2;
    unsigned long ud = d;
ffff800000801875:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
ffff800000801878:	48 98                	cdqe   
ffff80000080187a:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:23
    int divisor = 10;
ffff80000080187e:	c7 45 dc 0a 00 00 00 	mov    DWORD PTR [rbp-0x24],0xa
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:26
 
    /* 如果指定了 %d 并且 D 是负数，在开始添上负号。 */
    if (base == 'd' && d < 0)
ffff800000801885:	83 7d c4 64          	cmp    DWORD PTR [rbp-0x3c],0x64
ffff800000801889:	75 27                	jne    ffff8000008018b2 <itoa+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:26 (discriminator 1)
ffff80000080188b:	83 7d c0 00          	cmp    DWORD PTR [rbp-0x40],0x0
ffff80000080188f:	79 21                	jns    ffff8000008018b2 <itoa+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:28
    {
        *p++ = '-';
ffff800000801891:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000801895:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffff800000801899:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffff80000080189d:	c6 00 2d             	mov    BYTE PTR [rax],0x2d
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:29
        buf++;
ffff8000008018a0:	48 83 45 c8 01       	add    QWORD PTR [rbp-0x38],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:30
        ud = -d;
ffff8000008018a5:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
ffff8000008018a8:	f7 d8                	neg    eax
ffff8000008018aa:	48 98                	cdqe   
ffff8000008018ac:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffff8000008018b0:	eb 0d                	jmp    ffff8000008018bf <itoa+0x78>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:32
    }
    else if (base == 'x')
ffff8000008018b2:	83 7d c4 78          	cmp    DWORD PTR [rbp-0x3c],0x78
ffff8000008018b6:	75 07                	jne    ffff8000008018bf <itoa+0x78>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:33
        divisor = 16;
ffff8000008018b8:	c7 45 dc 10 00 00 00 	mov    DWORD PTR [rbp-0x24],0x10
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:38
 
    /* 用 DIVISOR 去除 UD 直到 UD == 0。 */
    do
    {
        int remainder = ud % divisor;
ffff8000008018bf:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008018c2:	48 63 c8             	movsxd rcx,eax
ffff8000008018c5:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008018c9:	ba 00 00 00 00       	mov    edx,0x0
ffff8000008018ce:	48 f7 f1             	div    rcx
ffff8000008018d1:	48 89 d0             	mov    rax,rdx
ffff8000008018d4:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:40
 
        *p++ = (remainder < 10) ? remainder + '0' : remainder + 'a' - 10;
ffff8000008018d7:	83 7d d8 09          	cmp    DWORD PTR [rbp-0x28],0x9
ffff8000008018db:	7f 0a                	jg     ffff8000008018e7 <itoa+0xa0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:40 (discriminator 1)
ffff8000008018dd:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff8000008018e0:	83 c0 30             	add    eax,0x30
ffff8000008018e3:	89 c1                	mov    ecx,eax
ffff8000008018e5:	eb 08                	jmp    ffff8000008018ef <itoa+0xa8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:40 (discriminator 2)
ffff8000008018e7:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff8000008018ea:	83 c0 57             	add    eax,0x57
ffff8000008018ed:	89 c1                	mov    ecx,eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:40 (discriminator 4)
ffff8000008018ef:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008018f3:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffff8000008018f7:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffff8000008018fb:	88 08                	mov    BYTE PTR [rax],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:42 (discriminator 4)
    }
    while (ud /= divisor);
ffff8000008018fd:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000801900:	48 63 f0             	movsxd rsi,eax
ffff800000801903:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801907:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080190c:	48 f7 f6             	div    rsi
ffff80000080190f:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffff800000801913:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
ffff800000801918:	75 a5                	jne    ffff8000008018bf <itoa+0x78>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:45
 
    /* 在字符串尾添上终结符。 */
    *p = 0;
ffff80000080191a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080191e:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:48
 
    /* 反转 BUF。 */
    p1 = buf;
ffff800000801921:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000801925:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:49
    p2 = p - 1;
ffff800000801929:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080192d:	48 83 e8 01          	sub    rax,0x1
ffff800000801931:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:50
    while (p1 < p2)
ffff800000801935:	eb 2b                	jmp    ffff800000801962 <itoa+0x11b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:52
    {
        char tmp = *p1;
ffff800000801937:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080193b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080193e:	88 45 d7             	mov    BYTE PTR [rbp-0x29],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:53
        *p1 = *p2;
ffff800000801941:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801945:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff800000801948:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080194c:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:54
        *p2 = tmp;
ffff80000080194e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801952:	0f b6 55 d7          	movzx  edx,BYTE PTR [rbp-0x29]
ffff800000801956:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:55
        p1++;
ffff800000801958:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:56
        p2--;
ffff80000080195d:	48 83 6d e8 01       	sub    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:50
    while (p1 < p2)
ffff800000801962:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000801966:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff80000080196a:	72 cb                	jb     ffff800000801937 <itoa+0xf0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:58
    }
}
ffff80000080196c:	90                   	nop
ffff80000080196d:	90                   	nop
ffff80000080196e:	5d                   	pop    rbp
ffff80000080196f:	c3                   	ret    

ffff800000801970 <putchar>:
putchar():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:62
 
/* 在屏幕上输出字符 C 。 */
void putchar (char c)
{
ffff800000801970:	f3 0f 1e fa          	endbr64 
ffff800000801974:	55                   	push   rbp
ffff800000801975:	48 89 e5             	mov    rbp,rsp
ffff800000801978:	41 57                	push   r15
ffff80000080197a:	48 83 ec 28          	sub    rsp,0x28
ffff80000080197e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080197e <putchar+0xe>
ffff800000801985:	49 bb 7a 12 12 00 00 	movabs r11,0x12127a
ffff80000080198c:	00 00 00 
ffff80000080198f:	4c 01 d8             	add    rax,r11
ffff800000801992:	89 fa                	mov    edx,edi
ffff800000801994:	88 55 dc             	mov    BYTE PTR [rbp-0x24],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:63
    char s[2]={c,'\0'};
ffff800000801997:	0f b6 55 dc          	movzx  edx,BYTE PTR [rbp-0x24]
ffff80000080199b:	88 55 ee             	mov    BYTE PTR [rbp-0x12],dl
ffff80000080199e:	c6 45 ef 00          	mov    BYTE PTR [rbp-0x11],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:64
    print(s);
ffff8000008019a2:	48 8d 55 ee          	lea    rdx,[rbp-0x12]
ffff8000008019a6:	48 89 d7             	mov    rdi,rdx
ffff8000008019a9:	49 89 c7             	mov    r15,rax
ffff8000008019ac:	48 ba e9 94 ee ff ff 	movabs rdx,0xffffffffffee94e9
ffff8000008019b3:	ff ff ff 
ffff8000008019b6:	48 01 c2             	add    rdx,rax
ffff8000008019b9:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:82
    *(video + (xpos + ypos * COLUMNS) * 2 + 1) = ATTRIBUTE;
 
    xpos++;
    if (xpos >= COLUMNS)
        goto newline;
}
ffff8000008019bb:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff8000008019bf:	c9                   	leave  
ffff8000008019c0:	c3                   	ret    

ffff8000008019c1 <printf>:
printf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:86
 
/* 格式化字符串并在屏幕上输出，就像 libc 函数 printf 一样。 */
void printf (const char *format,...)
{
ffff8000008019c1:	f3 0f 1e fa          	endbr64 
ffff8000008019c5:	55                   	push   rbp
ffff8000008019c6:	48 89 e5             	mov    rbp,rsp
ffff8000008019c9:	41 57                	push   r15
ffff8000008019cb:	53                   	push   rbx
ffff8000008019cc:	48 81 ec 00 01 00 00 	sub    rsp,0x100
ffff8000008019d3:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008019d3 <printf+0x12>
ffff8000008019da:	49 bb 25 12 12 00 00 	movabs r11,0x121225
ffff8000008019e1:	00 00 00 
ffff8000008019e4:	4c 01 db             	add    rbx,r11
ffff8000008019e7:	48 89 bd f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdi
ffff8000008019ee:	48 89 b5 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rsi
ffff8000008019f5:	48 89 95 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rdx
ffff8000008019fc:	48 89 8d 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rcx
ffff800000801a03:	4c 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],r8
ffff800000801a0a:	4c 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],r9
ffff800000801a11:	84 c0                	test   al,al
ffff800000801a13:	74 23                	je     ffff800000801a38 <printf+0x77>
ffff800000801a15:	0f 29 85 70 ff ff ff 	movaps XMMWORD PTR [rbp-0x90],xmm0
ffff800000801a1c:	0f 29 4d 80          	movaps XMMWORD PTR [rbp-0x80],xmm1
ffff800000801a20:	0f 29 55 90          	movaps XMMWORD PTR [rbp-0x70],xmm2
ffff800000801a24:	0f 29 5d a0          	movaps XMMWORD PTR [rbp-0x60],xmm3
ffff800000801a28:	0f 29 65 b0          	movaps XMMWORD PTR [rbp-0x50],xmm4
ffff800000801a2c:	0f 29 6d c0          	movaps XMMWORD PTR [rbp-0x40],xmm5
ffff800000801a30:	0f 29 75 d0          	movaps XMMWORD PTR [rbp-0x30],xmm6
ffff800000801a34:	0f 29 7d e0          	movaps XMMWORD PTR [rbp-0x20],xmm7
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:87
    if(strlen(format)>=1024)
ffff800000801a38:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000801a3f:	48 89 c7             	mov    rdi,rax
ffff800000801a42:	49 89 df             	mov    r15,rbx
ffff800000801a45:	48 b8 ab 21 ef ff ff 	movabs rax,0xffffffffffef21ab
ffff800000801a4c:	ff ff ff 
ffff800000801a4f:	48 01 d8             	add    rax,rbx
ffff800000801a52:	ff d0                	call   rax
ffff800000801a54:	3d ff 03 00 00       	cmp    eax,0x3ff
ffff800000801a59:	0f 8f f7 02 00 00    	jg     ffff800000801d56 <printf+0x395>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:89
        return;//一次性输出不了太长
    char* tmp=(char*) kmalloc(0,PAGE_4K_SIZE);
ffff800000801a5f:	be 00 10 00 00       	mov    esi,0x1000
ffff800000801a64:	bf 00 00 00 00       	mov    edi,0x0
ffff800000801a69:	49 89 df             	mov    r15,rbx
ffff800000801a6c:	48 b8 ce 07 ee ff ff 	movabs rax,0xffffffffffee07ce
ffff800000801a73:	ff ff ff 
ffff800000801a76:	48 01 d8             	add    rax,rbx
ffff800000801a79:	ff d0                	call   rax
ffff800000801a7b:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:91
    va_list vargs;
    va_start(vargs,format);
ffff800000801a82:	c7 85 00 ff ff ff 08 	mov    DWORD PTR [rbp-0x100],0x8
ffff800000801a89:	00 00 00 
ffff800000801a8c:	c7 85 04 ff ff ff 30 	mov    DWORD PTR [rbp-0xfc],0x30
ffff800000801a93:	00 00 00 
ffff800000801a96:	48 8d 45 10          	lea    rax,[rbp+0x10]
ffff800000801a9a:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
ffff800000801aa1:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
ffff800000801aa8:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:92
    char *pstr=format;
ffff800000801aaf:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000801ab6:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:93
    for(;*pstr!='\0';pstr++){
ffff800000801abd:	e9 27 02 00 00       	jmp    ffff800000801ce9 <printf+0x328>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:94
        if(*pstr=='%'&&*(pstr+1)!='\0'){
ffff800000801ac2:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000801ac9:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801acc:	3c 25                	cmp    al,0x25
ffff800000801ace:	0f 85 e2 01 00 00    	jne    ffff800000801cb6 <printf+0x2f5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:94 (discriminator 1)
ffff800000801ad4:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000801adb:	48 83 c0 01          	add    rax,0x1
ffff800000801adf:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801ae2:	84 c0                	test   al,al
ffff800000801ae4:	0f 84 cc 01 00 00    	je     ffff800000801cb6 <printf+0x2f5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:95
            pstr++;
ffff800000801aea:	48 83 85 38 ff ff ff 	add    QWORD PTR [rbp-0xc8],0x1
ffff800000801af1:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:96
            if(*pstr=='x'){
ffff800000801af2:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000801af9:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801afc:	3c 78                	cmp    al,0x78
ffff800000801afe:	75 75                	jne    ffff800000801b75 <printf+0x1b4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:97
                int v=va_arg(vargs,int);
ffff800000801b00:	8b 85 00 ff ff ff    	mov    eax,DWORD PTR [rbp-0x100]
ffff800000801b06:	83 f8 2f             	cmp    eax,0x2f
ffff800000801b09:	77 23                	ja     ffff800000801b2e <printf+0x16d>
ffff800000801b0b:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff800000801b12:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff800000801b18:	89 d2                	mov    edx,edx
ffff800000801b1a:	48 01 d0             	add    rax,rdx
ffff800000801b1d:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff800000801b23:	83 c2 08             	add    edx,0x8
ffff800000801b26:	89 95 00 ff ff ff    	mov    DWORD PTR [rbp-0x100],edx
ffff800000801b2c:	eb 12                	jmp    ffff800000801b40 <printf+0x17f>
ffff800000801b2e:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff800000801b35:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000801b39:	48 89 95 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdx
ffff800000801b40:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000801b42:	89 85 1c ff ff ff    	mov    DWORD PTR [rbp-0xe4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:98
                sprint_hex(tmp,v);
ffff800000801b48:	8b 85 1c ff ff ff    	mov    eax,DWORD PTR [rbp-0xe4]
ffff800000801b4e:	48 63 d0             	movsxd rdx,eax
ffff800000801b51:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801b58:	48 89 d6             	mov    rsi,rdx
ffff800000801b5b:	48 89 c7             	mov    rdi,rax
ffff800000801b5e:	49 89 df             	mov    r15,rbx
ffff800000801b61:	48 b8 fe 25 ef ff ff 	movabs rax,0xffffffffffef25fe
ffff800000801b68:	ff ff ff 
ffff800000801b6b:	48 01 d8             	add    rax,rbx
ffff800000801b6e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:96
            if(*pstr=='x'){
ffff800000801b70:	e9 6c 01 00 00       	jmp    ffff800000801ce1 <printf+0x320>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:99
            }else if(*pstr=='s'){
ffff800000801b75:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000801b7c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801b7f:	3c 73                	cmp    al,0x73
ffff800000801b81:	75 75                	jne    ffff800000801bf8 <printf+0x237>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:100
                char* v=va_arg(vargs,char*);
ffff800000801b83:	8b 85 00 ff ff ff    	mov    eax,DWORD PTR [rbp-0x100]
ffff800000801b89:	83 f8 2f             	cmp    eax,0x2f
ffff800000801b8c:	77 23                	ja     ffff800000801bb1 <printf+0x1f0>
ffff800000801b8e:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff800000801b95:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff800000801b9b:	89 d2                	mov    edx,edx
ffff800000801b9d:	48 01 d0             	add    rax,rdx
ffff800000801ba0:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff800000801ba6:	83 c2 08             	add    edx,0x8
ffff800000801ba9:	89 95 00 ff ff ff    	mov    DWORD PTR [rbp-0x100],edx
ffff800000801baf:	eb 12                	jmp    ffff800000801bc3 <printf+0x202>
ffff800000801bb1:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff800000801bb8:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000801bbc:	48 89 95 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdx
ffff800000801bc3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801bc6:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:101
                sprintn(tmp,v);
ffff800000801bcd:	48 8b 95 20 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe0]
ffff800000801bd4:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801bdb:	48 89 d6             	mov    rsi,rdx
ffff800000801bde:	48 89 c7             	mov    rdi,rax
ffff800000801be1:	49 89 df             	mov    r15,rbx
ffff800000801be4:	48 b8 8c 26 ef ff ff 	movabs rax,0xffffffffffef268c
ffff800000801beb:	ff ff ff 
ffff800000801bee:	48 01 d8             	add    rax,rbx
ffff800000801bf1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:96
            if(*pstr=='x'){
ffff800000801bf3:	e9 e9 00 00 00       	jmp    ffff800000801ce1 <printf+0x320>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:102
            }else if(*pstr=='d'){
ffff800000801bf8:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000801bff:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801c02:	3c 64                	cmp    al,0x64
ffff800000801c04:	75 73                	jne    ffff800000801c79 <printf+0x2b8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:103
                char* v=va_arg(vargs,char*);
ffff800000801c06:	8b 85 00 ff ff ff    	mov    eax,DWORD PTR [rbp-0x100]
ffff800000801c0c:	83 f8 2f             	cmp    eax,0x2f
ffff800000801c0f:	77 23                	ja     ffff800000801c34 <printf+0x273>
ffff800000801c11:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff800000801c18:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff800000801c1e:	89 d2                	mov    edx,edx
ffff800000801c20:	48 01 d0             	add    rax,rdx
ffff800000801c23:	8b 95 00 ff ff ff    	mov    edx,DWORD PTR [rbp-0x100]
ffff800000801c29:	83 c2 08             	add    edx,0x8
ffff800000801c2c:	89 95 00 ff ff ff    	mov    DWORD PTR [rbp-0x100],edx
ffff800000801c32:	eb 12                	jmp    ffff800000801c46 <printf+0x285>
ffff800000801c34:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff800000801c3b:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000801c3f:	48 89 95 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdx
ffff800000801c46:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801c49:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:104
                sprint_decimal(tmp,v);
ffff800000801c50:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
ffff800000801c57:	89 c2                	mov    edx,eax
ffff800000801c59:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801c60:	89 d6                	mov    esi,edx
ffff800000801c62:	48 89 c7             	mov    rdi,rax
ffff800000801c65:	49 89 df             	mov    r15,rbx
ffff800000801c68:	48 b8 43 25 ef ff ff 	movabs rax,0xffffffffffef2543
ffff800000801c6f:	ff ff ff 
ffff800000801c72:	48 01 d8             	add    rax,rbx
ffff800000801c75:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:96
            if(*pstr=='x'){
ffff800000801c77:	eb 68                	jmp    ffff800000801ce1 <printf+0x320>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:105
            }else if(*pstr=='c'){
ffff800000801c79:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000801c80:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801c83:	3c 63                	cmp    al,0x63
ffff800000801c85:	75 02                	jne    ffff800000801c89 <printf+0x2c8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:106
                char v=va_arg(vargs,char);
ffff800000801c87:	0f 0b                	ud2    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:109
                sprintchar(tmp,v);
            }else{
                sprintchar(tmp,*pstr);
ffff800000801c89:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000801c90:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801c93:	0f be d0             	movsx  edx,al
ffff800000801c96:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801c9d:	89 d6                	mov    esi,edx
ffff800000801c9f:	48 89 c7             	mov    rdi,rax
ffff800000801ca2:	49 89 df             	mov    r15,rbx
ffff800000801ca5:	48 b8 04 25 ef ff ff 	movabs rax,0xffffffffffef2504
ffff800000801cac:	ff ff ff 
ffff800000801caf:	48 01 d8             	add    rax,rbx
ffff800000801cb2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:96
            if(*pstr=='x'){
ffff800000801cb4:	eb 2b                	jmp    ffff800000801ce1 <printf+0x320>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:112
            }
        }else{
            sprintchar(tmp,*pstr);
ffff800000801cb6:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000801cbd:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801cc0:	0f be d0             	movsx  edx,al
ffff800000801cc3:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801cca:	89 d6                	mov    esi,edx
ffff800000801ccc:	48 89 c7             	mov    rdi,rax
ffff800000801ccf:	49 89 df             	mov    r15,rbx
ffff800000801cd2:	48 b8 04 25 ef ff ff 	movabs rax,0xffffffffffef2504
ffff800000801cd9:	ff ff ff 
ffff800000801cdc:	48 01 d8             	add    rax,rbx
ffff800000801cdf:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:93
    for(;*pstr!='\0';pstr++){
ffff800000801ce1:	48 83 85 38 ff ff ff 	add    QWORD PTR [rbp-0xc8],0x1
ffff800000801ce8:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:93 (discriminator 1)
ffff800000801ce9:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000801cf0:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000801cf3:	84 c0                	test   al,al
ffff800000801cf5:	0f 85 c7 fd ff ff    	jne    ffff800000801ac2 <printf+0x101>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:116
        }
    }
    va_end(vargs);
    print(tmp);
ffff800000801cfb:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801d02:	48 89 c7             	mov    rdi,rax
ffff800000801d05:	49 89 df             	mov    r15,rbx
ffff800000801d08:	48 b8 e9 94 ee ff ff 	movabs rax,0xffffffffffee94e9
ffff800000801d0f:	ff ff ff 
ffff800000801d12:	48 01 d8             	add    rax,rbx
ffff800000801d15:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:117
    comprintf(tmp);
ffff800000801d17:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801d1e:	48 89 c7             	mov    rdi,rax
ffff800000801d21:	49 89 df             	mov    r15,rbx
ffff800000801d24:	b8 00 00 00 00       	mov    eax,0x0
ffff800000801d29:	48 ba 3a 19 ef ff ff 	movabs rdx,0xffffffffffef193a
ffff800000801d30:	ff ff ff 
ffff800000801d33:	48 01 da             	add    rdx,rbx
ffff800000801d36:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:118
    kmfree(tmp);
ffff800000801d38:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000801d3f:	48 89 c7             	mov    rdi,rax
ffff800000801d42:	49 89 df             	mov    r15,rbx
ffff800000801d45:	48 b8 6f 09 ee ff ff 	movabs rax,0xffffffffffee096f
ffff800000801d4c:	ff ff ff 
ffff800000801d4f:	48 01 d8             	add    rax,rbx
ffff800000801d52:	ff d0                	call   rax
ffff800000801d54:	eb 01                	jmp    ffff800000801d57 <printf+0x396>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:88
        return;//一次性输出不了太长
ffff800000801d56:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/log.c:160
//                putchar (*((int *) arg++));
//                break;
//            }
//        }
//    }
}
ffff800000801d57:	48 81 c4 00 01 00 00 	add    rsp,0x100
ffff800000801d5e:	5b                   	pop    rbx
ffff800000801d5f:	41 5f                	pop    r15
ffff800000801d61:	5d                   	pop    rbp
ffff800000801d62:	c3                   	ret    

ffff800000801d63 <mmap>:
mmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:31
int mmap_t_i=0;

malloc_hdr *pmhdrs,*kmhdrs;
malloc_hdr* pmalloc_mhdr,*kmalloc_mhdr;
stat_t mmap(addr_t pa,addr_t la,u32 attr)
{
ffff800000801d63:	f3 0f 1e fa          	endbr64 
ffff800000801d67:	55                   	push   rbp
ffff800000801d68:	48 89 e5             	mov    rbp,rsp
ffff800000801d6b:	41 57                	push   r15
ffff800000801d6d:	48 83 ec 28          	sub    rsp,0x28
ffff800000801d71:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000801d71 <mmap+0xe>
ffff800000801d78:	49 bb 87 0e 12 00 00 	movabs r11,0x120e87
ffff800000801d7f:	00 00 00 
ffff800000801d82:	4c 01 d8             	add    rax,r11
ffff800000801d85:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000801d89:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff800000801d8d:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:32
    return smmap(pa,la,attr,current->pml4);
ffff800000801d90:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000801d97:	ff ff ff 
ffff800000801d9a:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000801d9e:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000801da1:	48 8b 8a e0 00 00 00 	mov    rcx,QWORD PTR [rdx+0xe0]
ffff800000801da8:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000801dab:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff800000801daf:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
ffff800000801db3:	49 89 c7             	mov    r15,rax
ffff800000801db6:	49 b8 d4 f1 ed ff ff 	movabs r8,0xffffffffffedf1d4
ffff800000801dbd:	ff ff ff 
ffff800000801dc0:	49 01 c0             	add    r8,rax
ffff800000801dc3:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:62
    pt=(page_item*)((addr_t)pt & ~0xff);

    //在pt中找到la指向的page
    pt[la % PDE_SIZE / PAGE_SIZE]=pa|attr;//映射
    return NORMAL;*/
}
ffff800000801dc6:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000801dca:	c9                   	leave  
ffff800000801dcb:	c3                   	ret    

ffff800000801dcc <smmap>:
smmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:64
stat_t smmap(addr_t pa,addr_t la,u32 attr,page_item* pml4p)
{
ffff800000801dcc:	f3 0f 1e fa          	endbr64 
ffff800000801dd0:	55                   	push   rbp
ffff800000801dd1:	48 89 e5             	mov    rbp,rsp
ffff800000801dd4:	41 57                	push   r15
ffff800000801dd6:	53                   	push   rbx
ffff800000801dd7:	48 83 ec 40          	sub    rsp,0x40
ffff800000801ddb:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000801ddb <smmap+0xf>
ffff800000801de2:	49 bb 1d 0e 12 00 00 	movabs r11,0x120e1d
ffff800000801de9:	00 00 00 
ffff800000801dec:	4c 01 db             	add    rbx,r11
ffff800000801def:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000801df3:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffff800000801df7:	89 55 bc             	mov    DWORD PTR [rbp-0x44],edx
ffff800000801dfa:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:67
    //从pml4中找到la所属的pml4项目，即属于第几个512GB
    //canonical 高地址判断
    if(la>0x7ffffffffffful){
ffff800000801dfe:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffff
ffff800000801e05:	7f 00 00 
ffff800000801e08:	48 39 45 c0          	cmp    QWORD PTR [rbp-0x40],rax
ffff800000801e0c:	76 0e                	jbe    ffff800000801e1c <smmap+0x50>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:68
        la&=~0xffff000000000000ul;
ffff800000801e0e:	48 b8 ff ff ff ff ff 	movabs rax,0xffffffffffff
ffff800000801e15:	ff 00 00 
ffff800000801e18:	48 21 45 c0          	and    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:70
    }
    page_item *pdptp= (page_item *) (pml4p[la / PML4E_SIZE]);//指向的pdpt表
ffff800000801e1c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801e20:	48 c1 e8 27          	shr    rax,0x27
ffff800000801e24:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000801e2b:	00 
ffff800000801e2c:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000801e30:	48 01 d0             	add    rax,rdx
ffff800000801e33:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801e36:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:71
    int pml4i=la / PML4E_SIZE;
ffff800000801e3a:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801e3e:	48 c1 e8 27          	shr    rax,0x27
ffff800000801e42:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:72
    if(!((unsigned long long)pdptp&PAGE_PRESENT))
ffff800000801e45:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801e49:	83 e0 01             	and    eax,0x1
ffff800000801e4c:	48 85 c0             	test   rax,rax
ffff800000801e4f:	75 74                	jne    ffff800000801ec5 <smmap+0xf9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:74
    {
        pdptp=(page_item*) kmalloc(0,PAGE_4K_SIZE);
ffff800000801e51:	be 00 10 00 00       	mov    esi,0x1000
ffff800000801e56:	bf 00 00 00 00       	mov    edi,0x0
ffff800000801e5b:	49 89 df             	mov    r15,rbx
ffff800000801e5e:	48 b8 ce 07 ee ff ff 	movabs rax,0xffffffffffee07ce
ffff800000801e65:	ff ff ff 
ffff800000801e68:	48 01 d8             	add    rax,rbx
ffff800000801e6b:	ff d0                	call   rax
ffff800000801e6d:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:75
        memset(pdptp,0,4096);
ffff800000801e71:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801e75:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000801e7a:	be 00 00 00 00       	mov    esi,0x0
ffff800000801e7f:	48 89 c7             	mov    rdi,rax
ffff800000801e82:	49 89 df             	mov    r15,rbx
ffff800000801e85:	48 b8 89 1e ef ff ff 	movabs rax,0xffffffffffef1e89
ffff800000801e8c:	ff ff ff 
ffff800000801e8f:	48 01 d8             	add    rax,rbx
ffff800000801e92:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:77
        //这里使用了狡猾的技巧：kmalloc的内存-KNL_BASE直接就是实际的物理地址
        pml4p[pml4i]=((addr_t)pdptp&~KNL_BASE)|attr;
ffff800000801e94:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801e98:	48 ba ff ff ff ff ff 	movabs rdx,0x7fffffffffff
ffff800000801e9f:	7f 00 00 
ffff800000801ea2:	48 21 d0             	and    rax,rdx
ffff800000801ea5:	48 89 c1             	mov    rcx,rax
ffff800000801ea8:	8b 55 bc             	mov    edx,DWORD PTR [rbp-0x44]
ffff800000801eab:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000801eae:	48 98                	cdqe   
ffff800000801eb0:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
ffff800000801eb7:	00 
ffff800000801eb8:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000801ebc:	48 01 f0             	add    rax,rsi
ffff800000801ebf:	48 09 ca             	or     rdx,rcx
ffff800000801ec2:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:79
    }
    pdptp=(page_item*)(((addr_t)pdptp&~0xff)|KNL_BASE);
ffff800000801ec5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801ec9:	48 ba 00 ff ff ff ff 	movabs rdx,0x7fffffffff00
ffff800000801ed0:	7f 00 00 
ffff800000801ed3:	48 21 c2             	and    rdx,rax
ffff800000801ed6:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff800000801edd:	80 ff ff 
ffff800000801ee0:	48 09 d0             	or     rax,rdx
ffff800000801ee3:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:82

    //在这个512GB（一张pdpt表）中找到la所属的pdpt项目，找到指向的pd
    int pdpti=la%PML4E_SIZE/PDPTE_SIZE;
ffff800000801ee7:	48 b8 ff ff ff ff 7f 	movabs rax,0x7fffffffff
ffff800000801eee:	00 00 00 
ffff800000801ef1:	48 23 45 c0          	and    rax,QWORD PTR [rbp-0x40]
ffff800000801ef5:	48 c1 e8 1e          	shr    rax,0x1e
ffff800000801ef9:	89 45 d0             	mov    DWORD PTR [rbp-0x30],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:83
    page_item* pdp= (page_item *) pdptp[pdpti];//指向的pd
ffff800000801efc:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000801eff:	48 98                	cdqe   
ffff800000801f01:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000801f08:	00 
ffff800000801f09:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801f0d:	48 01 d0             	add    rax,rdx
ffff800000801f10:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801f13:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:85
    //检查pdptp是否被占用
    if(!((unsigned long long)pdp&PAGE_PRESENT))
ffff800000801f17:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801f1b:	83 e0 01             	and    eax,0x1
ffff800000801f1e:	48 85 c0             	test   rax,rax
ffff800000801f21:	75 74                	jne    ffff800000801f97 <smmap+0x1cb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:87
    {
        pdp=(page_item*) kmalloc(0,PAGE_4K_SIZE);
ffff800000801f23:	be 00 10 00 00       	mov    esi,0x1000
ffff800000801f28:	bf 00 00 00 00       	mov    edi,0x0
ffff800000801f2d:	49 89 df             	mov    r15,rbx
ffff800000801f30:	48 b8 ce 07 ee ff ff 	movabs rax,0xffffffffffee07ce
ffff800000801f37:	ff ff ff 
ffff800000801f3a:	48 01 d8             	add    rax,rbx
ffff800000801f3d:	ff d0                	call   rax
ffff800000801f3f:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:88
        memset(pdp,0,4096);
ffff800000801f43:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801f47:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000801f4c:	be 00 00 00 00       	mov    esi,0x0
ffff800000801f51:	48 89 c7             	mov    rdi,rax
ffff800000801f54:	49 89 df             	mov    r15,rbx
ffff800000801f57:	48 b8 89 1e ef ff ff 	movabs rax,0xffffffffffef1e89
ffff800000801f5e:	ff ff ff 
ffff800000801f61:	48 01 d8             	add    rax,rbx
ffff800000801f64:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:89
        pdptp[pdpti]=((addr_t)pdp&~KNL_BASE)|attr;
ffff800000801f66:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801f6a:	48 ba ff ff ff ff ff 	movabs rdx,0x7fffffffffff
ffff800000801f71:	7f 00 00 
ffff800000801f74:	48 21 d0             	and    rax,rdx
ffff800000801f77:	48 89 c1             	mov    rcx,rax
ffff800000801f7a:	8b 55 bc             	mov    edx,DWORD PTR [rbp-0x44]
ffff800000801f7d:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000801f80:	48 98                	cdqe   
ffff800000801f82:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
ffff800000801f89:	00 
ffff800000801f8a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000801f8e:	48 01 f0             	add    rax,rsi
ffff800000801f91:	48 09 ca             	or     rdx,rcx
ffff800000801f94:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:91
    }
    pdp=(page_item*)(((addr_t)(pdp)&~0xff)|KNL_BASE);
ffff800000801f97:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801f9b:	48 ba 00 ff ff ff ff 	movabs rdx,0x7fffffffff00
ffff800000801fa2:	7f 00 00 
ffff800000801fa5:	48 21 c2             	and    rdx,rax
ffff800000801fa8:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff800000801faf:	80 ff ff 
ffff800000801fb2:	48 09 d0             	or     rax,rdx
ffff800000801fb5:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:94

    //在pd中找到la指向的pt
    page_item* pt=(page_item*)pdp[la % PDPTE_SIZE / PDE_SIZE];
ffff800000801fb9:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000801fbd:	25 ff ff ff 3f       	and    eax,0x3fffffff
ffff800000801fc2:	48 c1 e8 15          	shr    rax,0x15
ffff800000801fc6:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000801fcd:	00 
ffff800000801fce:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000801fd2:	48 01 d0             	add    rax,rdx
ffff800000801fd5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000801fd8:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:95
    if(!((unsigned long long)pt & PAGE_PRESENT))
ffff800000801fdc:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000801fe0:	83 e0 01             	and    eax,0x1
ffff800000801fe3:	48 85 c0             	test   rax,rax
ffff800000801fe6:	75 7c                	jne    ffff800000802064 <smmap+0x298>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:97
    {
        pt=(page_item*) kmalloc(0,PAGE_4K_SIZE);
ffff800000801fe8:	be 00 10 00 00       	mov    esi,0x1000
ffff800000801fed:	bf 00 00 00 00       	mov    edi,0x0
ffff800000801ff2:	49 89 df             	mov    r15,rbx
ffff800000801ff5:	48 b8 ce 07 ee ff ff 	movabs rax,0xffffffffffee07ce
ffff800000801ffc:	ff ff ff 
ffff800000801fff:	48 01 d8             	add    rax,rbx
ffff800000802002:	ff d0                	call   rax
ffff800000802004:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:98
        memset(pt,0,4096);
ffff800000802008:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080200c:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000802011:	be 00 00 00 00       	mov    esi,0x0
ffff800000802016:	48 89 c7             	mov    rdi,rax
ffff800000802019:	49 89 df             	mov    r15,rbx
ffff80000080201c:	48 b8 89 1e ef ff ff 	movabs rax,0xffffffffffef1e89
ffff800000802023:	ff ff ff 
ffff800000802026:	48 01 d8             	add    rax,rbx
ffff800000802029:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:99
        pdp[la%PDPTE_SIZE/PDE_SIZE]= ((addr_t)pt&~KNL_BASE) | attr;
ffff80000080202b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080202f:	48 ba ff ff ff ff ff 	movabs rdx,0x7fffffffffff
ffff800000802036:	7f 00 00 
ffff800000802039:	48 21 d0             	and    rax,rdx
ffff80000080203c:	48 89 c1             	mov    rcx,rax
ffff80000080203f:	8b 55 bc             	mov    edx,DWORD PTR [rbp-0x44]
ffff800000802042:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000802046:	25 ff ff ff 3f       	and    eax,0x3fffffff
ffff80000080204b:	48 c1 e8 15          	shr    rax,0x15
ffff80000080204f:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
ffff800000802056:	00 
ffff800000802057:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080205b:	48 01 f0             	add    rax,rsi
ffff80000080205e:	48 09 ca             	or     rdx,rcx
ffff800000802061:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:101
    }
    pt=(page_item*)(((addr_t)pt & ~0xff)|KNL_BASE);
ffff800000802064:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000802068:	48 ba 00 ff ff ff ff 	movabs rdx,0x7fffffffff00
ffff80000080206f:	7f 00 00 
ffff800000802072:	48 21 c2             	and    rdx,rax
ffff800000802075:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff80000080207c:	80 ff ff 
ffff80000080207f:	48 09 d0             	or     rax,rdx
ffff800000802082:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:104

    //在pt中找到la指向的page
    pt[la % PDE_SIZE / PAGE_4K_SIZE]=pa|attr;//映射
ffff800000802086:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
ffff800000802089:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff80000080208d:	81 e2 ff ff 1f 00    	and    edx,0x1fffff
ffff800000802093:	48 c1 ea 0c          	shr    rdx,0xc
ffff800000802097:	48 8d 0c d5 00 00 00 	lea    rcx,[rdx*8+0x0]
ffff80000080209e:	00 
ffff80000080209f:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff8000008020a3:	48 01 ca             	add    rdx,rcx
ffff8000008020a6:	48 0b 45 c8          	or     rax,QWORD PTR [rbp-0x38]
ffff8000008020aa:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:105
    return NORMAL;
ffff8000008020ad:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:106
}
ffff8000008020b2:	48 83 c4 40          	add    rsp,0x40
ffff8000008020b6:	5b                   	pop    rbx
ffff8000008020b7:	41 5f                	pop    r15
ffff8000008020b9:	5d                   	pop    rbp
ffff8000008020ba:	c3                   	ret    

ffff8000008020bb <init_paging>:
init_paging():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:110


int init_paging()
{
ffff8000008020bb:	f3 0f 1e fa          	endbr64 
ffff8000008020bf:	55                   	push   rbp
ffff8000008020c0:	48 89 e5             	mov    rbp,rsp
ffff8000008020c3:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008020c3 <init_paging+0x8>
ffff8000008020ca:	49 bb 35 0b 12 00 00 	movabs r11,0x120b35
ffff8000008020d1:	00 00 00 
ffff8000008020d4:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:143
//    set_page_item(pml4,PDPT_ADDR,PAGE_PRESENT|PAGE_FOR_ALL|PAGE_RWX);
    //设置第一项pdpte，也就是内核空间
//    set_1gb_pdpt(pdpt,0,PAGE_RWX);//设置PDPT0x40000000ul
//    set_page_item(pdpt+1,PD_ADDR,PAGE_PRESENT|PAGE_FOR_ALL|PAGE_RWX);
    //把低512GB的空间取消映射，留给用户
    pml4[0]=0;
ffff8000008020d7:	48 ba 88 ff ff ff ff 	movabs rdx,0xffffffffffffff88
ffff8000008020de:	ff ff ff 
ffff8000008020e1:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff8000008020e5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008020e8:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:145
    #endif
}
ffff8000008020ef:	90                   	nop
ffff8000008020f0:	5d                   	pop    rbp
ffff8000008020f1:	c3                   	ret    

ffff8000008020f2 <set_high_mem_base>:
set_high_mem_base():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:147
void set_high_mem_base(int base)
{
ffff8000008020f2:	f3 0f 1e fa          	endbr64 
ffff8000008020f6:	55                   	push   rbp
ffff8000008020f7:	48 89 e5             	mov    rbp,rsp
ffff8000008020fa:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008020fa <set_high_mem_base+0x8>
ffff800000802101:	49 bb fe 0a 12 00 00 	movabs r11,0x120afe
ffff800000802108:	00 00 00 
ffff80000080210b:	4c 01 d8             	add    rax,r11
ffff80000080210e:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:148
    high_mem_base=base;
ffff800000802111:	48 ba 80 fd ff ff ff 	movabs rdx,0xfffffffffffffd80
ffff800000802118:	ff ff ff 
ffff80000080211b:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080211f:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000802122:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:149
}
ffff800000802124:	90                   	nop
ffff800000802125:	5d                   	pop    rbp
ffff800000802126:	c3                   	ret    

ffff800000802127 <set_mem_area>:
set_mem_area():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:151
void set_mem_area(unsigned long base, unsigned long len, unsigned long type)
{
ffff800000802127:	f3 0f 1e fa          	endbr64 
ffff80000080212b:	55                   	push   rbp
ffff80000080212c:	48 89 e5             	mov    rbp,rsp
ffff80000080212f:	41 57                	push   r15
ffff800000802131:	48 83 ec 28          	sub    rsp,0x28
ffff800000802135:	4c 8d 05 f9 ff ff ff 	lea    r8,[rip+0xfffffffffffffff9]        # ffff800000802135 <set_mem_area+0xe>
ffff80000080213c:	49 bb c3 0a 12 00 00 	movabs r11,0x120ac3
ffff800000802143:	00 00 00 
ffff800000802146:	4d 01 d8             	add    r8,r11
ffff800000802149:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff80000080214d:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff800000802151:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:152
    phy_mmap_struct[mmap_t_i].base=base;
ffff800000802155:	48 b8 28 fe ff ff ff 	movabs rax,0xfffffffffffffe28
ffff80000080215c:	ff ff ff 
ffff80000080215f:	49 8b 04 00          	mov    rax,QWORD PTR [r8+rax*1]
ffff800000802163:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000802165:	48 ba f0 ff ff ff ff 	movabs rdx,0xfffffffffffffff0
ffff80000080216c:	ff ff ff 
ffff80000080216f:	49 8b 0c 10          	mov    rcx,QWORD PTR [r8+rdx*1]
ffff800000802173:	48 63 d0             	movsxd rdx,eax
ffff800000802176:	48 89 d0             	mov    rax,rdx
ffff800000802179:	48 01 c0             	add    rax,rax
ffff80000080217c:	48 01 d0             	add    rax,rdx
ffff80000080217f:	48 c1 e0 03          	shl    rax,0x3
ffff800000802183:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
ffff800000802187:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080218b:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:153
    phy_mmap_struct[mmap_t_i].len=len;
ffff80000080218e:	48 b8 28 fe ff ff ff 	movabs rax,0xfffffffffffffe28
ffff800000802195:	ff ff ff 
ffff800000802198:	49 8b 04 00          	mov    rax,QWORD PTR [r8+rax*1]
ffff80000080219c:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080219e:	48 ba f0 ff ff ff ff 	movabs rdx,0xfffffffffffffff0
ffff8000008021a5:	ff ff ff 
ffff8000008021a8:	49 8b 0c 10          	mov    rcx,QWORD PTR [r8+rdx*1]
ffff8000008021ac:	48 63 d0             	movsxd rdx,eax
ffff8000008021af:	48 89 d0             	mov    rax,rdx
ffff8000008021b2:	48 01 c0             	add    rax,rax
ffff8000008021b5:	48 01 d0             	add    rax,rdx
ffff8000008021b8:	48 c1 e0 03          	shl    rax,0x3
ffff8000008021bc:	48 01 c8             	add    rax,rcx
ffff8000008021bf:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff8000008021c3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008021c7:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:154
    phy_mmap_struct[mmap_t_i++].type=type;
ffff8000008021ca:	48 b8 28 fe ff ff ff 	movabs rax,0xfffffffffffffe28
ffff8000008021d1:	ff ff ff 
ffff8000008021d4:	49 8b 04 00          	mov    rax,QWORD PTR [r8+rax*1]
ffff8000008021d8:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008021da:	8d 48 01             	lea    ecx,[rax+0x1]
ffff8000008021dd:	48 ba 28 fe ff ff ff 	movabs rdx,0xfffffffffffffe28
ffff8000008021e4:	ff ff ff 
ffff8000008021e7:	49 8b 14 10          	mov    rdx,QWORD PTR [r8+rdx*1]
ffff8000008021eb:	89 0a                	mov    DWORD PTR [rdx],ecx
ffff8000008021ed:	48 ba f0 ff ff ff ff 	movabs rdx,0xfffffffffffffff0
ffff8000008021f4:	ff ff ff 
ffff8000008021f7:	49 8b 0c 10          	mov    rcx,QWORD PTR [r8+rdx*1]
ffff8000008021fb:	48 63 d0             	movsxd rdx,eax
ffff8000008021fe:	48 89 d0             	mov    rax,rdx
ffff800000802201:	48 01 c0             	add    rax,rax
ffff800000802204:	48 01 d0             	add    rax,rdx
ffff800000802207:	48 c1 e0 03          	shl    rax,0x3
ffff80000080220b:	48 01 c8             	add    rax,rcx
ffff80000080220e:	48 8d 50 10          	lea    rdx,[rax+0x10]
ffff800000802212:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000802216:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:155
    comprintf("mem info:base=0x%l,len=0x%l,type=%d\n",base,len,type);
ffff800000802219:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff80000080221d:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000802221:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802225:	48 89 c6             	mov    rsi,rax
ffff800000802228:	48 b8 b0 d2 ff ff ff 	movabs rax,0xffffffffffffd2b0
ffff80000080222f:	ff ff ff 
ffff800000802232:	49 8d 04 00          	lea    rax,[r8+rax*1]
ffff800000802236:	48 89 c7             	mov    rdi,rax
ffff800000802239:	4d 89 c7             	mov    r15,r8
ffff80000080223c:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802241:	49 b9 3a 19 ef ff ff 	movabs r9,0xffffffffffef193a
ffff800000802248:	ff ff ff 
ffff80000080224b:	4d 01 c1             	add    r9,r8
ffff80000080224e:	41 ff d1             	call   r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:156
}
ffff800000802251:	90                   	nop
ffff800000802252:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000802256:	c9                   	leave  
ffff800000802257:	c3                   	ret    

ffff800000802258 <_kmalloc>:
_kmalloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:158
addr_t _kmalloc()
{
ffff800000802258:	f3 0f 1e fa          	endbr64 
ffff80000080225c:	55                   	push   rbp
ffff80000080225d:	48 89 e5             	mov    rbp,rsp
ffff800000802260:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000802260 <_kmalloc+0x8>
ffff800000802267:	49 bb 98 09 12 00 00 	movabs r11,0x120998
ffff80000080226e:	00 00 00 
ffff800000802271:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:159
    for(int i=0;i<VMALLOC_PGN/32;i++)
ffff800000802274:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff80000080227b:	e9 c6 00 00 00       	jmp    ffff800000802346 <_kmalloc+0xee>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:161
    {
        for(int j=0;j<32;j++)
ffff800000802280:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
ffff800000802287:	e9 ac 00 00 00       	jmp    ffff800000802338 <_kmalloc+0xe0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:163
        {
            if(!(vmalloc_map[i]&(1<<j)))
ffff80000080228c:	48 ba f0 fc ff ff ff 	movabs rdx,0xfffffffffffffcf0
ffff800000802293:	ff ff ff 
ffff800000802296:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080229a:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080229d:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff8000008022a0:	48 63 d2             	movsxd rdx,edx
ffff8000008022a3:	48 c1 e2 02          	shl    rdx,0x2
ffff8000008022a7:	48 01 ca             	add    rdx,rcx
ffff8000008022aa:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff8000008022ac:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff8000008022af:	bf 01 00 00 00       	mov    edi,0x1
ffff8000008022b4:	89 d1                	mov    ecx,edx
ffff8000008022b6:	d3 e7                	shl    edi,cl
ffff8000008022b8:	89 fa                	mov    edx,edi
ffff8000008022ba:	21 f2                	and    edx,esi
ffff8000008022bc:	85 d2                	test   edx,edx
ffff8000008022be:	75 74                	jne    ffff800000802334 <_kmalloc+0xdc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:165
            {
                vmalloc_map[i]|=(1<<j);
ffff8000008022c0:	48 ba f0 fc ff ff ff 	movabs rdx,0xfffffffffffffcf0
ffff8000008022c7:	ff ff ff 
ffff8000008022ca:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008022ce:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008022d1:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff8000008022d4:	48 63 d2             	movsxd rdx,edx
ffff8000008022d7:	48 c1 e2 02          	shl    rdx,0x2
ffff8000008022db:	48 01 ca             	add    rdx,rcx
ffff8000008022de:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff8000008022e0:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff8000008022e3:	bf 01 00 00 00       	mov    edi,0x1
ffff8000008022e8:	89 d1                	mov    ecx,edx
ffff8000008022ea:	d3 e7                	shl    edi,cl
ffff8000008022ec:	89 fa                	mov    edx,edi
ffff8000008022ee:	89 d1                	mov    ecx,edx
ffff8000008022f0:	48 ba f0 fc ff ff ff 	movabs rdx,0xfffffffffffffcf0
ffff8000008022f7:	ff ff ff 
ffff8000008022fa:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff8000008022fe:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802301:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802304:	48 98                	cdqe   
ffff800000802306:	48 c1 e0 02          	shl    rax,0x2
ffff80000080230a:	48 01 d0             	add    rax,rdx
ffff80000080230d:	09 ce                	or     esi,ecx
ffff80000080230f:	89 f2                	mov    edx,esi
ffff800000802311:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:166
                return VMALLOC_BASE+(i*32+j)*0x1000;
ffff800000802313:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802316:	c1 e0 05             	shl    eax,0x5
ffff800000802319:	89 c2                	mov    edx,eax
ffff80000080231b:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff80000080231e:	01 d0                	add    eax,edx
ffff800000802320:	c1 e0 0c             	shl    eax,0xc
ffff800000802323:	48 98                	cdqe   
ffff800000802325:	48 ba 00 00 00 02 00 	movabs rdx,0xffff800002000000
ffff80000080232c:	80 ff ff 
ffff80000080232f:	48 01 d0             	add    rax,rdx
ffff800000802332:	eb 1c                	jmp    ffff800000802350 <_kmalloc+0xf8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:161 (discriminator 2)
        for(int j=0;j<32;j++)
ffff800000802334:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:161 (discriminator 1)
ffff800000802338:	83 7d f8 1f          	cmp    DWORD PTR [rbp-0x8],0x1f
ffff80000080233c:	0f 8e 4a ff ff ff    	jle    ffff80000080228c <_kmalloc+0x34>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:159 (discriminator 2)
    for(int i=0;i<VMALLOC_PGN/32;i++)
ffff800000802342:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:159 (discriminator 1)
ffff800000802346:	83 7d fc 7f          	cmp    DWORD PTR [rbp-0x4],0x7f
ffff80000080234a:	0f 8e 30 ff ff ff    	jle    ffff800000802280 <_kmalloc+0x28>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:170
            }
        }
    }
}
ffff800000802350:	5d                   	pop    rbp
ffff800000802351:	c3                   	ret    

ffff800000802352 <kmallocat>:
kmallocat():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:172
addr_t kmallocat(addr_t addr,int pgc)
{
ffff800000802352:	f3 0f 1e fa          	endbr64 
ffff800000802356:	55                   	push   rbp
ffff800000802357:	48 89 e5             	mov    rbp,rsp
ffff80000080235a:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080235a <kmallocat+0x8>
ffff800000802361:	49 bb 9e 08 12 00 00 	movabs r11,0x12089e
ffff800000802368:	00 00 00 
ffff80000080236b:	4c 01 d8             	add    rax,r11
ffff80000080236e:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000802372:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:173
    int pi=(addr-VMALLOC_BASE)/PAGE_4K_SIZE;
ffff800000802375:	48 b9 00 00 00 fe ff 	movabs rcx,0x7ffffe000000
ffff80000080237c:	7f 00 00 
ffff80000080237f:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000802383:	48 01 ca             	add    rdx,rcx
ffff800000802386:	48 c1 ea 0c          	shr    rdx,0xc
ffff80000080238a:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:174
    if(addr==0){
ffff80000080238d:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff800000802392:	0f 85 3f 01 00 00    	jne    ffff8000008024d7 <kmallocat+0x185>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:175
        int l=0,p=0;
ffff800000802398:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff80000080239f:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:176
        for(int i=0;i<kmalloc_pgc;i++){
ffff8000008023a6:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
ffff8000008023ad:	eb 63                	jmp    ffff800000802412 <kmallocat+0xc0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:177
            if(!(vmalloc_map[i/32]&(1u<<(i%32)))){
ffff8000008023af:	48 ba f0 fc ff ff ff 	movabs rdx,0xfffffffffffffcf0
ffff8000008023b6:	ff ff ff 
ffff8000008023b9:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008023bd:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff8000008023c0:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff8000008023c3:	8d 4a 1f             	lea    ecx,[rdx+0x1f]
ffff8000008023c6:	85 d2                	test   edx,edx
ffff8000008023c8:	0f 48 d1             	cmovs  edx,ecx
ffff8000008023cb:	c1 fa 05             	sar    edx,0x5
ffff8000008023ce:	48 63 d2             	movsxd rdx,edx
ffff8000008023d1:	48 c1 e2 02          	shl    rdx,0x2
ffff8000008023d5:	48 01 f2             	add    rdx,rsi
ffff8000008023d8:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff8000008023da:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff8000008023dd:	83 e2 1f             	and    edx,0x1f
ffff8000008023e0:	89 d1                	mov    ecx,edx
ffff8000008023e2:	d3 ee                	shr    esi,cl
ffff8000008023e4:	89 f2                	mov    edx,esi
ffff8000008023e6:	83 e2 01             	and    edx,0x1
ffff8000008023e9:	85 d2                	test   edx,edx
ffff8000008023eb:	75 12                	jne    ffff8000008023ff <kmallocat+0xad>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:178
                if(l==0)
ffff8000008023ed:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
ffff8000008023f1:	75 06                	jne    ffff8000008023f9 <kmallocat+0xa7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:179
                    p=i;//开头空页
ffff8000008023f3:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff8000008023f6:	89 55 f8             	mov    DWORD PTR [rbp-0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:180
                l++;
ffff8000008023f9:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
ffff8000008023fd:	eb 07                	jmp    ffff800000802406 <kmallocat+0xb4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:182
            } else
                l=0;
ffff8000008023ff:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:183
            if(l==pgc)break;
ffff800000802406:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000802409:	3b 55 d4             	cmp    edx,DWORD PTR [rbp-0x2c]
ffff80000080240c:	74 1b                	je     ffff800000802429 <kmallocat+0xd7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:176 (discriminator 2)
        for(int i=0;i<kmalloc_pgc;i++){
ffff80000080240e:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:176 (discriminator 1)
ffff800000802412:	48 ba 28 ff ff ff ff 	movabs rdx,0xffffffffffffff28
ffff800000802419:	ff ff ff 
ffff80000080241c:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000802420:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000802422:	39 55 f4             	cmp    DWORD PTR [rbp-0xc],edx
ffff800000802425:	7c 88                	jl     ffff8000008023af <kmallocat+0x5d>
ffff800000802427:	eb 01                	jmp    ffff80000080242a <kmallocat+0xd8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:183
            if(l==pgc)break;
ffff800000802429:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:185
        }
        if(l<pgc)return -1;
ffff80000080242a:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080242d:	3b 55 d4             	cmp    edx,DWORD PTR [rbp-0x2c]
ffff800000802430:	7d 0c                	jge    ffff80000080243e <kmallocat+0xec>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:185 (discriminator 1)
ffff800000802432:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff800000802439:	e9 87 01 00 00       	jmp    ffff8000008025c5 <kmallocat+0x273>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:187
        //开始占用
        for(int i=0;i<pgc;i++){
ffff80000080243e:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [rbp-0x10],0x0
ffff800000802445:	eb 6e                	jmp    ffff8000008024b5 <kmallocat+0x163>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:188 (discriminator 3)
            vmalloc_map[(p+i)/32]|=1u<<((p+i)%32);
ffff800000802447:	48 ba f0 fc ff ff ff 	movabs rdx,0xfffffffffffffcf0
ffff80000080244e:	ff ff ff 
ffff800000802451:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000802455:	48 8b 3a             	mov    rdi,QWORD PTR [rdx]
ffff800000802458:	8b 4d f8             	mov    ecx,DWORD PTR [rbp-0x8]
ffff80000080245b:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
ffff80000080245e:	01 ca                	add    edx,ecx
ffff800000802460:	8d 4a 1f             	lea    ecx,[rdx+0x1f]
ffff800000802463:	85 d2                	test   edx,edx
ffff800000802465:	0f 48 d1             	cmovs  edx,ecx
ffff800000802468:	c1 fa 05             	sar    edx,0x5
ffff80000080246b:	89 d6                	mov    esi,edx
ffff80000080246d:	48 63 d6             	movsxd rdx,esi
ffff800000802470:	48 c1 e2 02          	shl    rdx,0x2
ffff800000802474:	48 01 fa             	add    rdx,rdi
ffff800000802477:	8b 3a                	mov    edi,DWORD PTR [rdx]
ffff800000802479:	8b 4d f8             	mov    ecx,DWORD PTR [rbp-0x8]
ffff80000080247c:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
ffff80000080247f:	01 ca                	add    edx,ecx
ffff800000802481:	83 e2 1f             	and    edx,0x1f
ffff800000802484:	41 b8 01 00 00 00    	mov    r8d,0x1
ffff80000080248a:	89 d1                	mov    ecx,edx
ffff80000080248c:	41 d3 e0             	shl    r8d,cl
ffff80000080248f:	48 ba f0 fc ff ff ff 	movabs rdx,0xfffffffffffffcf0
ffff800000802496:	ff ff ff 
ffff800000802499:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080249d:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008024a0:	48 63 d6             	movsxd rdx,esi
ffff8000008024a3:	48 c1 e2 02          	shl    rdx,0x2
ffff8000008024a7:	48 01 ca             	add    rdx,rcx
ffff8000008024aa:	44 09 c7             	or     edi,r8d
ffff8000008024ad:	89 f9                	mov    ecx,edi
ffff8000008024af:	89 0a                	mov    DWORD PTR [rdx],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:187 (discriminator 3)
        for(int i=0;i<pgc;i++){
ffff8000008024b1:	83 45 f0 01          	add    DWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:187 (discriminator 1)
ffff8000008024b5:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
ffff8000008024b8:	3b 55 d4             	cmp    edx,DWORD PTR [rbp-0x2c]
ffff8000008024bb:	7c 8a                	jl     ffff800000802447 <kmallocat+0xf5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:190
        }
        return VMALLOC_BASE+PAGE_4K_SIZE*p;
ffff8000008024bd:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff8000008024c0:	c1 e0 0c             	shl    eax,0xc
ffff8000008024c3:	48 98                	cdqe   
ffff8000008024c5:	48 ba 00 00 00 02 00 	movabs rdx,0xffff800002000000
ffff8000008024cc:	80 ff ff 
ffff8000008024cf:	48 01 d0             	add    rax,rdx
ffff8000008024d2:	e9 ee 00 00 00       	jmp    ffff8000008025c5 <kmallocat+0x273>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:192
    }
    for(int i=0;i<pgc;i++){
ffff8000008024d7:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff8000008024de:	eb 5c                	jmp    ffff80000080253c <kmallocat+0x1ea>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:193
        if(vmalloc_map[(pi+i)/32]&(1<<((pi+i)%32)))
ffff8000008024e0:	48 ba f0 fc ff ff ff 	movabs rdx,0xfffffffffffffcf0
ffff8000008024e7:	ff ff ff 
ffff8000008024ea:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008024ee:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff8000008024f1:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
ffff8000008024f4:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff8000008024f7:	01 ca                	add    edx,ecx
ffff8000008024f9:	8d 4a 1f             	lea    ecx,[rdx+0x1f]
ffff8000008024fc:	85 d2                	test   edx,edx
ffff8000008024fe:	0f 48 d1             	cmovs  edx,ecx
ffff800000802501:	c1 fa 05             	sar    edx,0x5
ffff800000802504:	48 63 d2             	movsxd rdx,edx
ffff800000802507:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080250b:	48 01 f2             	add    rdx,rsi
ffff80000080250e:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff800000802510:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
ffff800000802513:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000802516:	01 ca                	add    edx,ecx
ffff800000802518:	83 e2 1f             	and    edx,0x1f
ffff80000080251b:	bf 01 00 00 00       	mov    edi,0x1
ffff800000802520:	89 d1                	mov    ecx,edx
ffff800000802522:	d3 e7                	shl    edi,cl
ffff800000802524:	89 fa                	mov    edx,edi
ffff800000802526:	21 f2                	and    edx,esi
ffff800000802528:	85 d2                	test   edx,edx
ffff80000080252a:	74 0c                	je     ffff800000802538 <kmallocat+0x1e6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:194
            return -1;
ffff80000080252c:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff800000802533:	e9 8d 00 00 00       	jmp    ffff8000008025c5 <kmallocat+0x273>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:192 (discriminator 2)
    for(int i=0;i<pgc;i++){
ffff800000802538:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:192 (discriminator 1)
ffff80000080253c:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080253f:	3b 55 d4             	cmp    edx,DWORD PTR [rbp-0x2c]
ffff800000802542:	7c 9c                	jl     ffff8000008024e0 <kmallocat+0x18e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:197
    }
    //
    for(int i=0;i<pgc;i++){
ffff800000802544:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff80000080254b:	eb 6c                	jmp    ffff8000008025b9 <kmallocat+0x267>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:198 (discriminator 3)
        vmalloc_map[(pi+i)]|=(1<<((pi+i)%32));
ffff80000080254d:	48 ba f0 fc ff ff ff 	movabs rdx,0xfffffffffffffcf0
ffff800000802554:	ff ff ff 
ffff800000802557:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080255b:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080255e:	8b 75 e4             	mov    esi,DWORD PTR [rbp-0x1c]
ffff800000802561:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000802564:	01 f2                	add    edx,esi
ffff800000802566:	48 63 d2             	movsxd rdx,edx
ffff800000802569:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080256d:	48 01 ca             	add    rdx,rcx
ffff800000802570:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff800000802572:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
ffff800000802575:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000802578:	01 ca                	add    edx,ecx
ffff80000080257a:	83 e2 1f             	and    edx,0x1f
ffff80000080257d:	bf 01 00 00 00       	mov    edi,0x1
ffff800000802582:	89 d1                	mov    ecx,edx
ffff800000802584:	d3 e7                	shl    edi,cl
ffff800000802586:	89 fa                	mov    edx,edi
ffff800000802588:	41 89 d0             	mov    r8d,edx
ffff80000080258b:	48 ba f0 fc ff ff ff 	movabs rdx,0xfffffffffffffcf0
ffff800000802592:	ff ff ff 
ffff800000802595:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000802599:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080259c:	8b 7d e4             	mov    edi,DWORD PTR [rbp-0x1c]
ffff80000080259f:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff8000008025a2:	01 fa                	add    edx,edi
ffff8000008025a4:	48 63 d2             	movsxd rdx,edx
ffff8000008025a7:	48 c1 e2 02          	shl    rdx,0x2
ffff8000008025ab:	48 01 ca             	add    rdx,rcx
ffff8000008025ae:	44 09 c6             	or     esi,r8d
ffff8000008025b1:	89 f1                	mov    ecx,esi
ffff8000008025b3:	89 0a                	mov    DWORD PTR [rdx],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:197 (discriminator 3)
    for(int i=0;i<pgc;i++){
ffff8000008025b5:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:197 (discriminator 1)
ffff8000008025b9:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff8000008025bc:	3b 55 d4             	cmp    edx,DWORD PTR [rbp-0x2c]
ffff8000008025bf:	7c 8c                	jl     ffff80000080254d <kmallocat+0x1fb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:200
    }
    return addr;
ffff8000008025c1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:202

}
ffff8000008025c5:	5d                   	pop    rbp
ffff8000008025c6:	c3                   	ret    

ffff8000008025c7 <_kmfree>:
_kmfree():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:205

int _kmfree(addr_t ptr)
{
ffff8000008025c7:	f3 0f 1e fa          	endbr64 
ffff8000008025cb:	55                   	push   rbp
ffff8000008025cc:	48 89 e5             	mov    rbp,rsp
ffff8000008025cf:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff8000008025cf <_kmfree+0x8>
ffff8000008025d6:	49 bb 29 06 12 00 00 	movabs r11,0x120629
ffff8000008025dd:	00 00 00 
ffff8000008025e0:	4c 01 da             	add    rdx,r11
ffff8000008025e3:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:206
    int num=ptr/PAGE_SIZE;
ffff8000008025e7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008025eb:	48 c1 e8 0c          	shr    rax,0xc
ffff8000008025ef:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:207
    int n=num/32;
ffff8000008025f2:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008025f5:	8d 48 1f             	lea    ecx,[rax+0x1f]
ffff8000008025f8:	85 c0                	test   eax,eax
ffff8000008025fa:	0f 48 c1             	cmovs  eax,ecx
ffff8000008025fd:	c1 f8 05             	sar    eax,0x5
ffff800000802600:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:208
    int r=num%32;
ffff800000802603:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000802606:	89 c1                	mov    ecx,eax
ffff800000802608:	c1 f9 1f             	sar    ecx,0x1f
ffff80000080260b:	c1 e9 1b             	shr    ecx,0x1b
ffff80000080260e:	01 c8                	add    eax,ecx
ffff800000802610:	83 e0 1f             	and    eax,0x1f
ffff800000802613:	29 c8                	sub    eax,ecx
ffff800000802615:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:209
    vmalloc_map[n]=vmalloc_map[n]&~(unsigned int)(1<<r);
ffff800000802618:	48 b8 f0 fc ff ff ff 	movabs rax,0xfffffffffffffcf0
ffff80000080261f:	ff ff ff 
ffff800000802622:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000802626:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000802629:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff80000080262c:	48 98                	cdqe   
ffff80000080262e:	48 c1 e0 02          	shl    rax,0x2
ffff800000802632:	48 01 c8             	add    rax,rcx
ffff800000802635:	8b 30                	mov    esi,DWORD PTR [rax]
ffff800000802637:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffff80000080263a:	bf 01 00 00 00       	mov    edi,0x1
ffff80000080263f:	89 c1                	mov    ecx,eax
ffff800000802641:	d3 e7                	shl    edi,cl
ffff800000802643:	89 f8                	mov    eax,edi
ffff800000802645:	f7 d0                	not    eax
ffff800000802647:	89 c1                	mov    ecx,eax
ffff800000802649:	48 b8 f0 fc ff ff ff 	movabs rax,0xfffffffffffffcf0
ffff800000802650:	ff ff ff 
ffff800000802653:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000802657:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080265a:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff80000080265d:	48 98                	cdqe   
ffff80000080265f:	48 c1 e0 02          	shl    rax,0x2
ffff800000802663:	48 01 d0             	add    rax,rdx
ffff800000802666:	21 ce                	and    esi,ecx
ffff800000802668:	89 f2                	mov    edx,esi
ffff80000080266a:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:210
}
ffff80000080266c:	90                   	nop
ffff80000080266d:	5d                   	pop    rbp
ffff80000080266e:	c3                   	ret    

ffff80000080266f <get_mmap>:
get_mmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:213

///查询当前进程该地址是否有对应的映射
mmap_struct* get_mmap(off_t addr){
ffff80000080266f:	f3 0f 1e fa          	endbr64 
ffff800000802673:	55                   	push   rbp
ffff800000802674:	48 89 e5             	mov    rbp,rsp
ffff800000802677:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000802677 <get_mmap+0x8>
ffff80000080267e:	49 bb 81 05 12 00 00 	movabs r11,0x120581
ffff800000802685:	00 00 00 
ffff800000802688:	4c 01 d8             	add    rax,r11
ffff80000080268b:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:214
    struct List* mp=current->mmaps;
ffff80000080268f:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000802696:	ff ff ff 
ffff800000802699:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080269d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008026a0:	48 8b 80 34 03 00 00 	mov    rax,QWORD PTR [rax+0x334]
ffff8000008026a7:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:215
    for (; mp&&((mmap_struct*)mp->data)->base!=addr; mp=mp->next);
ffff8000008026ab:	eb 0c                	jmp    ffff8000008026b9 <get_mmap+0x4a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:215 (discriminator 3)
ffff8000008026ad:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008026b1:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008026b5:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:215 (discriminator 1)
ffff8000008026b9:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffff8000008026be:	74 11                	je     ffff8000008026d1 <get_mmap+0x62>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:215 (discriminator 2)
ffff8000008026c0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008026c4:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff8000008026c8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008026cb:	48 39 45 e8          	cmp    QWORD PTR [rbp-0x18],rax
ffff8000008026cf:	75 dc                	jne    ffff8000008026ad <get_mmap+0x3e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:216
    if(!mp)return NULL;
ffff8000008026d1:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffff8000008026d6:	75 07                	jne    ffff8000008026df <get_mmap+0x70>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:216 (discriminator 1)
ffff8000008026d8:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008026dd:	eb 08                	jmp    ffff8000008026e7 <get_mmap+0x78>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:217
    return mp->data;
ffff8000008026df:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008026e3:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:218
}   
ffff8000008026e7:	5d                   	pop    rbp
ffff8000008026e8:	c3                   	ret    

ffff8000008026e9 <get_pmhdr>:
get_pmhdr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:220
///获取该物理地址的malloc header。
malloc_hdr* get_pmhdr(off_t pm){
ffff8000008026e9:	f3 0f 1e fa          	endbr64 
ffff8000008026ed:	55                   	push   rbp
ffff8000008026ee:	48 89 e5             	mov    rbp,rsp
ffff8000008026f1:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008026f1 <get_pmhdr+0x8>
ffff8000008026f8:	49 bb 07 05 12 00 00 	movabs r11,0x120507
ffff8000008026ff:	00 00 00 
ffff800000802702:	4c 01 d8             	add    rax,r11
ffff800000802705:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:221
    malloc_hdr* mp=pmhdrs;
ffff800000802709:	48 ba 10 ff ff ff ff 	movabs rdx,0xffffffffffffff10
ffff800000802710:	ff ff ff 
ffff800000802713:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000802717:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080271a:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:222
    for (; mp&&mp->base!=pm; mp=mp->next);
ffff80000080271e:	eb 0c                	jmp    ffff80000080272c <get_pmhdr+0x43>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:222 (discriminator 3)
ffff800000802720:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000802724:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000802728:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:222 (discriminator 1)
ffff80000080272c:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffff800000802731:	74 0d                	je     ffff800000802740 <get_pmhdr+0x57>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:222 (discriminator 2)
ffff800000802733:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000802737:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080273a:	48 39 45 e8          	cmp    QWORD PTR [rbp-0x18],rax
ffff80000080273e:	75 e0                	jne    ffff800000802720 <get_pmhdr+0x37>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:223
    return mp;
ffff800000802740:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:224
}
ffff800000802744:	5d                   	pop    rbp
ffff800000802745:	c3                   	ret    

ffff800000802746 <page_err>:
page_err():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:225
void page_err(){
ffff800000802746:	f3 0f 1e fa          	endbr64 
ffff80000080274a:	55                   	push   rbp
ffff80000080274b:	48 89 e5             	mov    rbp,rsp
ffff80000080274e:	41 57                	push   r15
ffff800000802750:	53                   	push   rbx
ffff800000802751:	48 83 ec 40          	sub    rsp,0x40
ffff800000802755:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000802755 <page_err+0xf>
ffff80000080275c:	49 bb a3 04 12 00 00 	movabs r11,0x1204a3
ffff800000802763:	00 00 00 
ffff800000802766:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:226
    __asm__("cli");
ffff800000802769:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:227
    printf("page err\n");
ffff80000080276a:	48 b8 d5 d2 ff ff ff 	movabs rax,0xffffffffffffd2d5
ffff800000802771:	ff ff ff 
ffff800000802774:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000802778:	48 89 c7             	mov    rdi,rax
ffff80000080277b:	49 89 df             	mov    r15,rbx
ffff80000080277e:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802783:	48 ba c9 ed ed ff ff 	movabs rdx,0xffffffffffededc9
ffff80000080278a:	ff ff ff 
ffff80000080278d:	48 01 da             	add    rdx,rbx
ffff800000802790:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:228
    unsigned long err_code=0,l_addr=0;
ffff800000802792:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff800000802799:	00 
ffff80000080279a:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff8000008027a1:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:229
    __asm__ volatile("mov 8(%%rbp),%0":"=r"(err_code));
ffff8000008027a2:	48 8b 45 08          	mov    rax,QWORD PTR [rbp+0x8]
ffff8000008027a6:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:230
    __asm__ volatile("mov %%cr2,%0":"=r"(l_addr));//试图访问的地址
ffff8000008027aa:	0f 20 d0             	mov    rax,cr2
ffff8000008027ad:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:231
    int p=err_code&1;
ffff8000008027b1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008027b5:	83 e0 01             	and    eax,0x1
ffff8000008027b8:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:233
    
    off_t *stk=0;
ffff8000008027bb:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffff8000008027c2:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:234
    __asm__ volatile("mov %%rbp,%0":"=m"(stk));
ffff8000008027c3:	48 89 6d b8          	mov    QWORD PTR [rbp-0x48],rbp
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:235
    stk-=2;
ffff8000008027c7:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008027cb:	48 83 e8 10          	sub    rax,0x10
ffff8000008027cf:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:236
    backtrace(stk);
ffff8000008027d3:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008027d7:	48 89 c7             	mov    rdi,rax
ffff8000008027da:	49 89 df             	mov    r15,rbx
ffff8000008027dd:	48 b8 8f e4 ed ff ff 	movabs rax,0xffffffffffede48f
ffff8000008027e4:	ff ff ff 
ffff8000008027e7:	48 01 d8             	add    rax,rbx
ffff8000008027ea:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:238

    if(!p)
ffff8000008027ec:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
ffff8000008027f0:	0f 85 c0 01 00 00    	jne    ffff8000008029b6 <page_err+0x270>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:244
    {
        //accessing non-existent page
        //检查地址合法性
        if(l_addr>=MEM_END)
            ;
        mmap_struct* mp=NULL;
ffff8000008027f6:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff8000008027fd:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:245
        if((mp=get_mmap(l_addr))==NULL){
ffff8000008027fe:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802802:	48 89 c7             	mov    rdi,rax
ffff800000802805:	49 89 df             	mov    r15,rbx
ffff800000802808:	48 b8 77 fa ed ff ff 	movabs rax,0xffffffffffedfa77
ffff80000080280f:	ff ff ff 
ffff800000802812:	48 01 d8             	add    rax,rbx
ffff800000802815:	ff d0                	call   rax
ffff800000802817:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
ffff80000080281b:	48 83 7d d0 00       	cmp    QWORD PTR [rbp-0x30],0x0
ffff800000802820:	75 2d                	jne    ffff80000080284f <page_err+0x109>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:247
            //TODO  没有映射，报错
            comprintf("page_err:page acceessed without mmap\n");
ffff800000802822:	48 b8 e0 d2 ff ff ff 	movabs rax,0xffffffffffffd2e0
ffff800000802829:	ff ff ff 
ffff80000080282c:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000802830:	48 89 c7             	mov    rdi,rax
ffff800000802833:	49 89 df             	mov    r15,rbx
ffff800000802836:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080283b:	48 ba 3a 19 ef ff ff 	movabs rdx,0xffffffffffef193a
ffff800000802842:	ff ff ff 
ffff800000802845:	48 01 da             	add    rdx,rbx
ffff800000802848:	ff d2                	call   rdx
ffff80000080284a:	e9 67 01 00 00       	jmp    ffff8000008029b6 <page_err+0x270>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:251

        }else {
            //在进程的页表中申请新页
            void *pm=pmalloc(PAGE_4K_ALIGN(mp->len));
ffff80000080284f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000802853:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000802857:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff80000080285d:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
ffff800000802863:	48 89 c7             	mov    rdi,rax
ffff800000802866:	49 89 df             	mov    r15,rbx
ffff800000802869:	48 b8 83 0a ee ff ff 	movabs rax,0xffffffffffee0a83
ffff800000802870:	ff ff ff 
ffff800000802873:	48 01 d8             	add    rax,rbx
ffff800000802876:	ff d0                	call   rax
ffff800000802878:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:252
            l_addr&=PAGE_4K_MASK;
ffff80000080287c:	48 81 65 e8 00 f0 ff 	and    QWORD PTR [rbp-0x18],0xfffffffffffff000
ffff800000802883:	ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:253
            for (int i=0; i<PAGE_4K_ALIGN(mp->len)/PAGE_4K_SIZE; i++) {
ffff800000802884:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff80000080288b:	eb 5a                	jmp    ffff8000008028e7 <page_err+0x1a1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:254 (discriminator 3)
                smmap(pm+i*PAGE_4K_SIZE,l_addr+i*PAGE_4K_SIZE,PAGE_PRESENT|PAGE_RWX|PAGE_FOR_ALL,current->pml4);
ffff80000080288d:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff800000802894:	ff ff ff 
ffff800000802897:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080289b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080289e:	48 8b 80 e0 00 00 00 	mov    rax,QWORD PTR [rax+0xe0]
ffff8000008028a5:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff8000008028a8:	c1 e2 0c             	shl    edx,0xc
ffff8000008028ab:	48 63 ca             	movsxd rcx,edx
ffff8000008028ae:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff8000008028b2:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff8000008028b6:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff8000008028b9:	c1 e2 0c             	shl    edx,0xc
ffff8000008028bc:	48 63 ca             	movsxd rcx,edx
ffff8000008028bf:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff8000008028c3:	48 01 ca             	add    rdx,rcx
ffff8000008028c6:	48 89 d7             	mov    rdi,rdx
ffff8000008028c9:	48 89 c1             	mov    rcx,rax
ffff8000008028cc:	ba 07 00 00 00       	mov    edx,0x7
ffff8000008028d1:	49 89 df             	mov    r15,rbx
ffff8000008028d4:	48 b8 d4 f1 ed ff ff 	movabs rax,0xffffffffffedf1d4
ffff8000008028db:	ff ff ff 
ffff8000008028de:	48 01 d8             	add    rax,rbx
ffff8000008028e1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:253 (discriminator 3)
            for (int i=0; i<PAGE_4K_ALIGN(mp->len)/PAGE_4K_SIZE; i++) {
ffff8000008028e3:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:253 (discriminator 1)
ffff8000008028e7:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff8000008028ea:	48 63 d0             	movsxd rdx,eax
ffff8000008028ed:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008028f1:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff8000008028f5:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff8000008028fb:	48 c1 e8 0c          	shr    rax,0xc
ffff8000008028ff:	48 39 c2             	cmp    rdx,rax
ffff800000802902:	72 89                	jb     ffff80000080288d <page_err+0x147>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:256
            }
            mp->pmhdr=get_pmhdr(pm);//填写pmhdr
ffff800000802904:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000802908:	48 89 c7             	mov    rdi,rax
ffff80000080290b:	49 89 df             	mov    r15,rbx
ffff80000080290e:	48 b8 f1 fa ed ff ff 	movabs rax,0xffffffffffedfaf1
ffff800000802915:	ff ff ff 
ffff800000802918:	48 01 d8             	add    rax,rbx
ffff80000080291b:	ff d0                	call   rax
ffff80000080291d:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000802921:	48 89 42 28          	mov    QWORD PTR [rdx+0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:258
            //读取文件
            if(mp->file){
ffff800000802925:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000802929:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080292d:	48 85 c0             	test   rax,rax
ffff800000802930:	0f 84 80 00 00 00    	je     ffff8000008029b6 <page_err+0x270>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:259
                int fd=mp->file-current->openf;
ffff800000802936:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080293a:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080293e:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff800000802945:	ff ff ff 
ffff800000802948:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080294c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080294f:	48 8d 88 f8 00 00 00 	lea    rcx,[rax+0xf8]
ffff800000802956:	48 89 d0             	mov    rax,rdx
ffff800000802959:	48 29 c8             	sub    rax,rcx
ffff80000080295c:	48 c1 f8 03          	sar    rax,0x3
ffff800000802960:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:260
                sys_lseek(fd, mp->offset, SEEK_SET);
ffff800000802963:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000802967:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080296b:	48 89 c1             	mov    rcx,rax
ffff80000080296e:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff800000802971:	ba 00 00 00 00       	mov    edx,0x0
ffff800000802976:	48 89 ce             	mov    rsi,rcx
ffff800000802979:	89 c7                	mov    edi,eax
ffff80000080297b:	49 89 df             	mov    r15,rbx
ffff80000080297e:	48 b8 d7 ae ee ff ff 	movabs rax,0xffffffffffeeaed7
ffff800000802985:	ff ff ff 
ffff800000802988:	48 01 d8             	add    rax,rbx
ffff80000080298b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:261
                sys_read(fd, l_addr, mp->len);
ffff80000080298d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000802991:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000802995:	48 89 c2             	mov    rdx,rax
ffff800000802998:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff80000080299c:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080299f:	48 89 ce             	mov    rsi,rcx
ffff8000008029a2:	89 c7                	mov    edi,eax
ffff8000008029a4:	49 89 df             	mov    r15,rbx
ffff8000008029a7:	48 b8 3b ad ee ff ff 	movabs rax,0xffffffffffeead3b
ffff8000008029ae:	ff ff ff 
ffff8000008029b1:	48 01 d8             	add    rax,rbx
ffff8000008029b4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:269
    }
    else
    {
        //page level protection
    }
    p=err_code&2;
ffff8000008029b6:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008029ba:	83 e0 02             	and    eax,0x2
ffff8000008029bd:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:270
    if(p)printf("when writing\n");else //puts("when reading");
ffff8000008029c0:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
ffff8000008029c4:	74 2a                	je     ffff8000008029f0 <page_err+0x2aa>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:270 (discriminator 1)
ffff8000008029c6:	48 b8 06 d3 ff ff ff 	movabs rax,0xffffffffffffd306
ffff8000008029cd:	ff ff ff 
ffff8000008029d0:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008029d4:	48 89 c7             	mov    rdi,rax
ffff8000008029d7:	49 89 df             	mov    r15,rbx
ffff8000008029da:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008029df:	48 ba c9 ed ed ff ff 	movabs rdx,0xffffffffffededc9
ffff8000008029e6:	ff ff ff 
ffff8000008029e9:	48 01 da             	add    rdx,rbx
ffff8000008029ec:	ff d2                	call   rdx
ffff8000008029ee:	eb 0a                	jmp    ffff8000008029fa <page_err+0x2b4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:271
    p=err_code&4;
ffff8000008029f0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008029f4:	83 e0 04             	and    eax,0x4
ffff8000008029f7:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:272
    if(!p)printf("supervisor mode\n");else //puts("user mode");
ffff8000008029fa:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
ffff8000008029fe:	75 2a                	jne    ffff800000802a2a <page_err+0x2e4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:272 (discriminator 1)
ffff800000802a00:	48 b8 14 d3 ff ff ff 	movabs rax,0xffffffffffffd314
ffff800000802a07:	ff ff ff 
ffff800000802a0a:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000802a0e:	48 89 c7             	mov    rdi,rax
ffff800000802a11:	49 89 df             	mov    r15,rbx
ffff800000802a14:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802a19:	48 ba c9 ed ed ff ff 	movabs rdx,0xffffffffffededc9
ffff800000802a20:	ff ff ff 
ffff800000802a23:	48 01 da             	add    rdx,rbx
ffff800000802a26:	ff d2                	call   rdx
ffff800000802a28:	eb 0a                	jmp    ffff800000802a34 <page_err+0x2ee>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:273
    p=err_code&16;
ffff800000802a2a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000802a2e:	83 e0 10             	and    eax,0x10
ffff800000802a31:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:274
    if(p)printf("an instruction tries to fetch\n");
ffff800000802a34:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
ffff800000802a38:	74 28                	je     ffff800000802a62 <page_err+0x31c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:274 (discriminator 1)
ffff800000802a3a:	48 b8 28 d3 ff ff ff 	movabs rax,0xffffffffffffd328
ffff800000802a41:	ff ff ff 
ffff800000802a44:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000802a48:	48 89 c7             	mov    rdi,rax
ffff800000802a4b:	49 89 df             	mov    r15,rbx
ffff800000802a4e:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802a53:	48 ba c9 ed ed ff ff 	movabs rdx,0xffffffffffededc9
ffff800000802a5a:	ff ff ff 
ffff800000802a5d:	48 01 da             	add    rdx,rbx
ffff800000802a60:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:275
    unsigned int addr=0;
ffff800000802a62:	c7 45 c0 00 00 00 00 	mov    DWORD PTR [rbp-0x40],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:276
    __asm__ volatile("mov 8(%%rbp),%0":"=r"(addr));
ffff800000802a69:	8b 45 08             	mov    eax,DWORD PTR [rbp+0x8]
ffff800000802a6c:	89 45 c0             	mov    DWORD PTR [rbp-0x40],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:277
    printf("occurred at %x(paddr), %x(laddr)\n",addr,l_addr);
ffff800000802a6f:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000802a73:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
ffff800000802a76:	89 c6                	mov    esi,eax
ffff800000802a78:	48 b8 48 d3 ff ff ff 	movabs rax,0xffffffffffffd348
ffff800000802a7f:	ff ff ff 
ffff800000802a82:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000802a86:	48 89 c7             	mov    rdi,rax
ffff800000802a89:	49 89 df             	mov    r15,rbx
ffff800000802a8c:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802a91:	48 b9 c9 ed ed ff ff 	movabs rcx,0xffffffffffededc9
ffff800000802a98:	ff ff ff 
ffff800000802a9b:	48 01 d9             	add    rcx,rbx
ffff800000802a9e:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:289
    }*/
    //杀死问题进程
//    del_proc(cur_proc);
    // printf("killed the problem process.\n");
    // printf("shell:>");
    eoi();
ffff800000802aa0:	49 89 df             	mov    r15,rbx
ffff800000802aa3:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802aa8:	48 ba a6 65 ee ff ff 	movabs rdx,0xffffffffffee65a6
ffff800000802aaf:	ff ff ff 
ffff800000802ab2:	48 01 da             	add    rdx,rbx
ffff800000802ab5:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:291
    //这里对esp的加法是必要的，因为page fault多push了一个错误码，但是iret识别不了
    __asm__ volatile ("sti \r\n  leave\n add $8,%rsp \n iretq");
ffff800000802ab7:	fb                   	sti    
ffff800000802ab8:	c9                   	leave  
ffff800000802ab9:	48 83 c4 08          	add    rsp,0x8
ffff800000802abd:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:292
}
ffff800000802abf:	90                   	nop
ffff800000802ac0:	48 83 c4 40          	add    rsp,0x40
ffff800000802ac4:	5b                   	pop    rbx
ffff800000802ac5:	41 5f                	pop    r15
ffff800000802ac7:	5d                   	pop    rbp
ffff800000802ac8:	c3                   	ret    

ffff800000802ac9 <init_memory>:
init_memory():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:294
void init_memory()
{
ffff800000802ac9:	f3 0f 1e fa          	endbr64 
ffff800000802acd:	55                   	push   rbp
ffff800000802ace:	48 89 e5             	mov    rbp,rsp
ffff800000802ad1:	41 57                	push   r15
ffff800000802ad3:	53                   	push   rbx
ffff800000802ad4:	48 83 ec 30          	sub    rsp,0x30
ffff800000802ad8:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000802ad8 <init_memory+0xf>
ffff800000802adf:	49 bb 20 01 12 00 00 	movabs r11,0x120120
ffff800000802ae6:	00 00 00 
ffff800000802ae9:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:297
    extern addr_t _knl_end,_knl_start;//lds中声明的内核的结尾地址，放置位图
    //获取可用内存大小mem_size
    size_t tot_mem_size=phy_mmap_struct[mmap_t_i-1].base+phy_mmap_struct[mmap_t_i-1].len,mem_size=0;
ffff800000802aec:	48 b8 28 fe ff ff ff 	movabs rax,0xfffffffffffffe28
ffff800000802af3:	ff ff ff 
ffff800000802af6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802afa:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000802afc:	8d 50 ff             	lea    edx,[rax-0x1]
ffff800000802aff:	48 b8 f0 ff ff ff ff 	movabs rax,0xfffffffffffffff0
ffff800000802b06:	ff ff ff 
ffff800000802b09:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000802b0d:	48 63 d2             	movsxd rdx,edx
ffff800000802b10:	48 89 d0             	mov    rax,rdx
ffff800000802b13:	48 01 c0             	add    rax,rax
ffff800000802b16:	48 01 d0             	add    rax,rdx
ffff800000802b19:	48 c1 e0 03          	shl    rax,0x3
ffff800000802b1d:	48 01 c8             	add    rax,rcx
ffff800000802b20:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000802b23:	48 b8 28 fe ff ff ff 	movabs rax,0xfffffffffffffe28
ffff800000802b2a:	ff ff ff 
ffff800000802b2d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802b31:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000802b33:	8d 50 ff             	lea    edx,[rax-0x1]
ffff800000802b36:	48 b8 f0 ff ff ff ff 	movabs rax,0xfffffffffffffff0
ffff800000802b3d:	ff ff ff 
ffff800000802b40:	48 8b 34 03          	mov    rsi,QWORD PTR [rbx+rax*1]
ffff800000802b44:	48 63 d2             	movsxd rdx,edx
ffff800000802b47:	48 89 d0             	mov    rax,rdx
ffff800000802b4a:	48 01 c0             	add    rax,rax
ffff800000802b4d:	48 01 d0             	add    rax,rdx
ffff800000802b50:	48 c1 e0 03          	shl    rax,0x3
ffff800000802b54:	48 01 f0             	add    rax,rsi
ffff800000802b57:	48 83 c0 08          	add    rax,0x8
ffff800000802b5b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000802b5e:	48 01 c8             	add    rax,rcx
ffff800000802b61:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
ffff800000802b65:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff800000802b6c:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:298
    for(int i=0;i<mmap_t_i;i++)
ffff800000802b6d:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff800000802b74:	eb 64                	jmp    ffff800000802bda <init_memory+0x111>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:300
    {
        if(phy_mmap_struct[i].type==MULTIBOOT_MEMORY_AVAILABLE)
ffff800000802b76:	48 b8 f0 ff ff ff ff 	movabs rax,0xfffffffffffffff0
ffff800000802b7d:	ff ff ff 
ffff800000802b80:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000802b84:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000802b87:	48 63 d0             	movsxd rdx,eax
ffff800000802b8a:	48 89 d0             	mov    rax,rdx
ffff800000802b8d:	48 01 c0             	add    rax,rax
ffff800000802b90:	48 01 d0             	add    rax,rdx
ffff800000802b93:	48 c1 e0 03          	shl    rax,0x3
ffff800000802b97:	48 01 c8             	add    rax,rcx
ffff800000802b9a:	48 83 c0 10          	add    rax,0x10
ffff800000802b9e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000802ba1:	48 83 f8 01          	cmp    rax,0x1
ffff800000802ba5:	75 2f                	jne    ffff800000802bd6 <init_memory+0x10d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:301
            mem_size+=phy_mmap_struct[i].len;
ffff800000802ba7:	48 b8 f0 ff ff ff ff 	movabs rax,0xfffffffffffffff0
ffff800000802bae:	ff ff ff 
ffff800000802bb1:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000802bb5:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000802bb8:	48 63 d0             	movsxd rdx,eax
ffff800000802bbb:	48 89 d0             	mov    rax,rdx
ffff800000802bbe:	48 01 c0             	add    rax,rax
ffff800000802bc1:	48 01 d0             	add    rax,rdx
ffff800000802bc4:	48 c1 e0 03          	shl    rax,0x3
ffff800000802bc8:	48 01 c8             	add    rax,rcx
ffff800000802bcb:	48 83 c0 08          	add    rax,0x8
ffff800000802bcf:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000802bd2:	48 01 45 e8          	add    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:298 (discriminator 2)
    for(int i=0;i<mmap_t_i;i++)
ffff800000802bd6:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:298 (discriminator 1)
ffff800000802bda:	48 b8 28 fe ff ff ff 	movabs rax,0xfffffffffffffe28
ffff800000802be1:	ff ff ff 
ffff800000802be4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802be8:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000802bea:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000802bed:	7c 87                	jl     ffff800000802b76 <init_memory+0xad>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:303
    }
    usr_mem_pa=PAGE_4K_ALIGN(mem_size/2);
ffff800000802bef:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802bf3:	48 d1 e8             	shr    rax,1
ffff800000802bf6:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff800000802bfc:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
ffff800000802c02:	48 89 c2             	mov    rdx,rax
ffff800000802c05:	48 b8 b8 fc ff ff ff 	movabs rax,0xfffffffffffffcb8
ffff800000802c0c:	ff ff ff 
ffff800000802c0f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802c13:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:312
    /*
     * 注：物理内存的一半会分给内核。
     * 前半部分是计算内存大小使多少个页，在位图中，一页表示为一位，所以除以后面部分，
     * 即一页位图可以有多少位。
     * */
    pmalloc_entc= tot_mem_size / PAGE_4K_SIZE/32;
ffff800000802c16:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000802c1a:	48 c1 e8 11          	shr    rax,0x11
ffff800000802c1e:	89 c2                	mov    edx,eax
ffff800000802c20:	48 b8 f0 fe ff ff ff 	movabs rax,0xfffffffffffffef0
ffff800000802c27:	ff ff ff 
ffff800000802c2a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802c2e:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:313
    int pgc=(tot_mem_size/PAGE_4K_SIZE)/(PAGE_4K_SIZE*8);
ffff800000802c30:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000802c34:	48 c1 e8 1b          	shr    rax,0x1b
ffff800000802c38:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:315
    //计算出位图所需的字节数
    int pg_bytes=pgc>>5;//=/32
ffff800000802c3b:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000802c3e:	c1 f8 05             	sar    eax,0x5
ffff800000802c41:	89 45 c8             	mov    DWORD PTR [rbp-0x38],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:319
    //初始化vmalloc内存位图
    //计算位图需要多少个int
    // size_t vmec= (mem_size/2-0x1000000)/PAGE_4K_SIZE/32;//去掉内核代码16M
    size_t vmms=(mem_size/2-0x1000000);//位图自己需要多少页
ffff800000802c44:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000802c48:	48 d1 e8             	shr    rax,1
ffff800000802c4b:	48 2d 00 00 00 01    	sub    rax,0x1000000
ffff800000802c51:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:320
    comprintf("tot memsize:0x%l,available size 0x%l,kmalloc bitmap taking 0x%d pages\n", tot_mem_size,mem_size,vmms);
ffff800000802c55:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
ffff800000802c59:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000802c5d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000802c61:	48 89 c6             	mov    rsi,rax
ffff800000802c64:	48 b8 70 d3 ff ff ff 	movabs rax,0xffffffffffffd370
ffff800000802c6b:	ff ff ff 
ffff800000802c6e:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000802c72:	48 89 c7             	mov    rdi,rax
ffff800000802c75:	49 89 df             	mov    r15,rbx
ffff800000802c78:	b8 00 00 00 00       	mov    eax,0x0
ffff800000802c7d:	49 b8 3a 19 ef ff ff 	movabs r8,0xffffffffffef193a
ffff800000802c84:	ff ff ff 
ffff800000802c87:	49 01 d8             	add    r8,rbx
ffff800000802c8a:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:322
    //创建mhdr
    for(int i=0;i< MAX_KMHDRS;i++)
ffff800000802c8d:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff800000802c94:	eb 30                	jmp    ffff800000802cc6 <init_memory+0x1fd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:323 (discriminator 3)
        kmhdrs[i].type=-1;
ffff800000802c96:	48 b8 e0 fd ff ff ff 	movabs rax,0xfffffffffffffde0
ffff800000802c9d:	ff ff ff 
ffff800000802ca0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802ca4:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000802ca7:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000802caa:	48 63 d0             	movsxd rdx,eax
ffff800000802cad:	48 89 d0             	mov    rax,rdx
ffff800000802cb0:	48 c1 e0 02          	shl    rax,0x2
ffff800000802cb4:	48 01 d0             	add    rax,rdx
ffff800000802cb7:	48 c1 e0 03          	shl    rax,0x3
ffff800000802cbb:	48 01 c8             	add    rax,rcx
ffff800000802cbe:	c6 40 10 ff          	mov    BYTE PTR [rax+0x10],0xff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:322 (discriminator 3)
    for(int i=0;i< MAX_KMHDRS;i++)
ffff800000802cc2:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:322 (discriminator 1)
ffff800000802cc6:	81 7d e0 a9 00 00 00 	cmp    DWORD PTR [rbp-0x20],0xa9
ffff800000802ccd:	7e c7                	jle    ffff800000802c96 <init_memory+0x1cd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:324
    kmalloc_mhdr=kmhdrs=VMALLOC_BASE;
ffff800000802ccf:	48 b8 e0 fd ff ff ff 	movabs rax,0xfffffffffffffde0
ffff800000802cd6:	ff ff ff 
ffff800000802cd9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802cdd:	48 bf 00 00 00 02 00 	movabs rdi,0xffff800002000000
ffff800000802ce4:	80 ff ff 
ffff800000802ce7:	48 89 38             	mov    QWORD PTR [rax],rdi
ffff800000802cea:	48 b8 e0 fd ff ff ff 	movabs rax,0xfffffffffffffde0
ffff800000802cf1:	ff ff ff 
ffff800000802cf4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802cf8:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000802cfb:	48 b8 e8 fe ff ff ff 	movabs rax,0xfffffffffffffee8
ffff800000802d02:	ff ff ff 
ffff800000802d05:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802d09:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:325
    kmhdrs->base=VMALLOC_BASE;
ffff800000802d0c:	48 b8 e0 fd ff ff ff 	movabs rax,0xfffffffffffffde0
ffff800000802d13:	ff ff ff 
ffff800000802d16:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802d1a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000802d1d:	48 89 38             	mov    QWORD PTR [rax],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:326
    kmhdrs->len=vmms;
ffff800000802d20:	48 b8 e0 fd ff ff ff 	movabs rax,0xfffffffffffffde0
ffff800000802d27:	ff ff ff 
ffff800000802d2a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802d2e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000802d31:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000802d35:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:327
    kmhdrs->prev=NULL;
ffff800000802d39:	48 b8 e0 fd ff ff ff 	movabs rax,0xfffffffffffffde0
ffff800000802d40:	ff ff ff 
ffff800000802d43:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802d47:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000802d4a:	48 c7 40 20 00 00 00 	mov    QWORD PTR [rax+0x20],0x0
ffff800000802d51:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:328
    kmhdrs->next=NULL;
ffff800000802d52:	48 b8 e0 fd ff ff ff 	movabs rax,0xfffffffffffffde0
ffff800000802d59:	ff ff ff 
ffff800000802d5c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802d60:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000802d63:	48 c7 40 18 00 00 00 	mov    QWORD PTR [rax+0x18],0x0
ffff800000802d6a:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:329
    kmhdrs->type=MEM_TYPE_AVAILABLE;
ffff800000802d6b:	48 b8 e0 fd ff ff ff 	movabs rax,0xfffffffffffffde0
ffff800000802d72:	ff ff ff 
ffff800000802d75:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802d79:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000802d7c:	c6 40 10 01          	mov    BYTE PTR [rax+0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:330
    kmhdrs->flag=MEM_FLAG_R|MEM_FLAG_W;
ffff800000802d80:	48 b8 e0 fd ff ff ff 	movabs rax,0xfffffffffffffde0
ffff800000802d87:	ff ff ff 
ffff800000802d8a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802d8e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000802d91:	c6 40 11 03          	mov    BYTE PTR [rax+0x11],0x3
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:332
    //先占用两页作为mhdrs
    kmalloc(VMALLOC_BASE,PAGE_4K_SIZE*2);
ffff800000802d95:	be 00 20 00 00       	mov    esi,0x2000
ffff800000802d9a:	48 b8 00 00 00 02 00 	movabs rax,0xffff800002000000
ffff800000802da1:	80 ff ff 
ffff800000802da4:	48 89 c7             	mov    rdi,rax
ffff800000802da7:	49 89 df             	mov    r15,rbx
ffff800000802daa:	48 b8 ce 07 ee ff ff 	movabs rax,0xffffffffffee07ce
ffff800000802db1:	ff ff ff 
ffff800000802db4:	48 01 d8             	add    rax,rbx
ffff800000802db7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:351
        }
        vmalloc_map[j]|=1u<<i;
    } */
    
    //TODO 完成pmalloc的记录分配方式转变
    pmhdrs=kmalloc(0,PAGE_4K_SIZE);
ffff800000802db9:	be 00 10 00 00       	mov    esi,0x1000
ffff800000802dbe:	bf 00 00 00 00       	mov    edi,0x0
ffff800000802dc3:	49 89 df             	mov    r15,rbx
ffff800000802dc6:	48 b8 ce 07 ee ff ff 	movabs rax,0xffffffffffee07ce
ffff800000802dcd:	ff ff ff 
ffff800000802dd0:	48 01 d8             	add    rax,rbx
ffff800000802dd3:	ff d0                	call   rax
ffff800000802dd5:	48 ba 10 ff ff ff ff 	movabs rdx,0xffffffffffffff10
ffff800000802ddc:	ff ff ff 
ffff800000802ddf:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000802de3:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:352
    for(int i=0;i< MAX_PMHDRS;i++)
ffff800000802de6:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
ffff800000802ded:	eb 30                	jmp    ffff800000802e1f <init_memory+0x356>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:353 (discriminator 3)
        pmhdrs[i].type=-1;
ffff800000802def:	48 b8 10 ff ff ff ff 	movabs rax,0xffffffffffffff10
ffff800000802df6:	ff ff ff 
ffff800000802df9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802dfd:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000802e00:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000802e03:	48 63 d0             	movsxd rdx,eax
ffff800000802e06:	48 89 d0             	mov    rax,rdx
ffff800000802e09:	48 c1 e0 02          	shl    rax,0x2
ffff800000802e0d:	48 01 d0             	add    rax,rdx
ffff800000802e10:	48 c1 e0 03          	shl    rax,0x3
ffff800000802e14:	48 01 c8             	add    rax,rcx
ffff800000802e17:	c6 40 10 ff          	mov    BYTE PTR [rax+0x10],0xff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:352 (discriminator 3)
    for(int i=0;i< MAX_PMHDRS;i++)
ffff800000802e1b:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:352 (discriminator 1)
ffff800000802e1f:	83 7d dc 54          	cmp    DWORD PTR [rbp-0x24],0x54
ffff800000802e23:	7e ca                	jle    ffff800000802def <init_memory+0x326>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:354
    for(int i=0;i<mmap_t_i;i++)
ffff800000802e25:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [rbp-0x28],0x0
ffff800000802e2c:	e9 45 02 00 00       	jmp    ffff800000803076 <init_memory+0x5ad>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:356
    {
        pmhdrs[i].base=phy_mmap_struct[i].base;
ffff800000802e31:	48 b8 10 ff ff ff ff 	movabs rax,0xffffffffffffff10
ffff800000802e38:	ff ff ff 
ffff800000802e3b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802e3f:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000802e42:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000802e45:	48 63 d0             	movsxd rdx,eax
ffff800000802e48:	48 89 d0             	mov    rax,rdx
ffff800000802e4b:	48 c1 e0 02          	shl    rax,0x2
ffff800000802e4f:	48 01 d0             	add    rax,rdx
ffff800000802e52:	48 c1 e0 03          	shl    rax,0x3
ffff800000802e56:	48 01 c1             	add    rcx,rax
ffff800000802e59:	48 b8 f0 ff ff ff ff 	movabs rax,0xfffffffffffffff0
ffff800000802e60:	ff ff ff 
ffff800000802e63:	48 8b 34 03          	mov    rsi,QWORD PTR [rbx+rax*1]
ffff800000802e67:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000802e6a:	48 63 d0             	movsxd rdx,eax
ffff800000802e6d:	48 89 d0             	mov    rax,rdx
ffff800000802e70:	48 01 c0             	add    rax,rax
ffff800000802e73:	48 01 d0             	add    rax,rdx
ffff800000802e76:	48 c1 e0 03          	shl    rax,0x3
ffff800000802e7a:	48 01 f0             	add    rax,rsi
ffff800000802e7d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000802e80:	48 89 01             	mov    QWORD PTR [rcx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:357
        pmhdrs[i].len=phy_mmap_struct[i].len;
ffff800000802e83:	48 b8 10 ff ff ff ff 	movabs rax,0xffffffffffffff10
ffff800000802e8a:	ff ff ff 
ffff800000802e8d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802e91:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000802e94:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000802e97:	48 63 d0             	movsxd rdx,eax
ffff800000802e9a:	48 89 d0             	mov    rax,rdx
ffff800000802e9d:	48 c1 e0 02          	shl    rax,0x2
ffff800000802ea1:	48 01 d0             	add    rax,rdx
ffff800000802ea4:	48 c1 e0 03          	shl    rax,0x3
ffff800000802ea8:	48 01 c1             	add    rcx,rax
ffff800000802eab:	48 b8 f0 ff ff ff ff 	movabs rax,0xfffffffffffffff0
ffff800000802eb2:	ff ff ff 
ffff800000802eb5:	48 8b 34 03          	mov    rsi,QWORD PTR [rbx+rax*1]
ffff800000802eb9:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000802ebc:	48 63 d0             	movsxd rdx,eax
ffff800000802ebf:	48 89 d0             	mov    rax,rdx
ffff800000802ec2:	48 01 c0             	add    rax,rax
ffff800000802ec5:	48 01 d0             	add    rax,rdx
ffff800000802ec8:	48 c1 e0 03          	shl    rax,0x3
ffff800000802ecc:	48 01 f0             	add    rax,rsi
ffff800000802ecf:	48 83 c0 08          	add    rax,0x8
ffff800000802ed3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000802ed6:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:358
        pmhdrs[i].flag=0;
ffff800000802eda:	48 b8 10 ff ff ff ff 	movabs rax,0xffffffffffffff10
ffff800000802ee1:	ff ff ff 
ffff800000802ee4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802ee8:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000802eeb:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000802eee:	48 63 d0             	movsxd rdx,eax
ffff800000802ef1:	48 89 d0             	mov    rax,rdx
ffff800000802ef4:	48 c1 e0 02          	shl    rax,0x2
ffff800000802ef8:	48 01 d0             	add    rax,rdx
ffff800000802efb:	48 c1 e0 03          	shl    rax,0x3
ffff800000802eff:	48 01 c8             	add    rax,rcx
ffff800000802f02:	c6 40 11 00          	mov    BYTE PTR [rax+0x11],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:359
        pmhdrs[i].next=pmhdrs+i+1;
ffff800000802f06:	48 b8 10 ff ff ff ff 	movabs rax,0xffffffffffffff10
ffff800000802f0d:	ff ff ff 
ffff800000802f10:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802f14:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000802f17:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000802f1a:	48 98                	cdqe   
ffff800000802f1c:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffff800000802f20:	48 89 d0             	mov    rax,rdx
ffff800000802f23:	48 c1 e0 02          	shl    rax,0x2
ffff800000802f27:	48 01 d0             	add    rax,rdx
ffff800000802f2a:	48 c1 e0 03          	shl    rax,0x3
ffff800000802f2e:	48 89 c7             	mov    rdi,rax
ffff800000802f31:	48 b8 10 ff ff ff ff 	movabs rax,0xffffffffffffff10
ffff800000802f38:	ff ff ff 
ffff800000802f3b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802f3f:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff800000802f42:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000802f45:	48 63 d0             	movsxd rdx,eax
ffff800000802f48:	48 89 d0             	mov    rax,rdx
ffff800000802f4b:	48 c1 e0 02          	shl    rax,0x2
ffff800000802f4f:	48 01 d0             	add    rax,rdx
ffff800000802f52:	48 c1 e0 03          	shl    rax,0x3
ffff800000802f56:	48 01 f0             	add    rax,rsi
ffff800000802f59:	48 8d 14 39          	lea    rdx,[rcx+rdi*1]
ffff800000802f5d:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:360
        pmhdrs[i].prev=pmhdrs+i-1;
ffff800000802f61:	48 b8 10 ff ff ff ff 	movabs rax,0xffffffffffffff10
ffff800000802f68:	ff ff ff 
ffff800000802f6b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802f6f:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000802f72:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000802f75:	48 63 d0             	movsxd rdx,eax
ffff800000802f78:	48 89 d0             	mov    rax,rdx
ffff800000802f7b:	48 c1 e0 02          	shl    rax,0x2
ffff800000802f7f:	48 01 d0             	add    rax,rdx
ffff800000802f82:	48 c1 e0 03          	shl    rax,0x3
ffff800000802f86:	48 8d 78 d8          	lea    rdi,[rax-0x28]
ffff800000802f8a:	48 b8 10 ff ff ff ff 	movabs rax,0xffffffffffffff10
ffff800000802f91:	ff ff ff 
ffff800000802f94:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802f98:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff800000802f9b:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000802f9e:	48 63 d0             	movsxd rdx,eax
ffff800000802fa1:	48 89 d0             	mov    rax,rdx
ffff800000802fa4:	48 c1 e0 02          	shl    rax,0x2
ffff800000802fa8:	48 01 d0             	add    rax,rdx
ffff800000802fab:	48 c1 e0 03          	shl    rax,0x3
ffff800000802faf:	48 01 f0             	add    rax,rsi
ffff800000802fb2:	48 8d 14 39          	lea    rdx,[rcx+rdi*1]
ffff800000802fb6:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:361
        switch (phy_mmap_struct[i].type)
ffff800000802fba:	48 b8 f0 ff ff ff ff 	movabs rax,0xfffffffffffffff0
ffff800000802fc1:	ff ff ff 
ffff800000802fc4:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000802fc8:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000802fcb:	48 63 d0             	movsxd rdx,eax
ffff800000802fce:	48 89 d0             	mov    rax,rdx
ffff800000802fd1:	48 01 c0             	add    rax,rax
ffff800000802fd4:	48 01 d0             	add    rax,rdx
ffff800000802fd7:	48 c1 e0 03          	shl    rax,0x3
ffff800000802fdb:	48 01 c8             	add    rax,rcx
ffff800000802fde:	48 83 c0 10          	add    rax,0x10
ffff800000802fe2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000802fe5:	48 83 f8 01          	cmp    rax,0x1
ffff800000802fe9:	75 5a                	jne    ffff800000803045 <init_memory+0x57c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:364
        {
        case MULTIBOOT_MEMORY_AVAILABLE:
            pmhdrs[i].type=MEM_TYPE_AVAILABLE;
ffff800000802feb:	48 b8 10 ff ff ff ff 	movabs rax,0xffffffffffffff10
ffff800000802ff2:	ff ff ff 
ffff800000802ff5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000802ff9:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000802ffc:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000802fff:	48 63 d0             	movsxd rdx,eax
ffff800000803002:	48 89 d0             	mov    rax,rdx
ffff800000803005:	48 c1 e0 02          	shl    rax,0x2
ffff800000803009:	48 01 d0             	add    rax,rdx
ffff80000080300c:	48 c1 e0 03          	shl    rax,0x3
ffff800000803010:	48 01 c8             	add    rax,rcx
ffff800000803013:	c6 40 10 01          	mov    BYTE PTR [rax+0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:365
            pmhdrs[i].flag=MEM_FLAG_R;
ffff800000803017:	48 b8 10 ff ff ff ff 	movabs rax,0xffffffffffffff10
ffff80000080301e:	ff ff ff 
ffff800000803021:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803025:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000803028:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080302b:	48 63 d0             	movsxd rdx,eax
ffff80000080302e:	48 89 d0             	mov    rax,rdx
ffff800000803031:	48 c1 e0 02          	shl    rax,0x2
ffff800000803035:	48 01 d0             	add    rax,rdx
ffff800000803038:	48 c1 e0 03          	shl    rax,0x3
ffff80000080303c:	48 01 c8             	add    rax,rcx
ffff80000080303f:	c6 40 11 01          	mov    BYTE PTR [rax+0x11],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:366
            break;
ffff800000803043:	eb 2d                	jmp    ffff800000803072 <init_memory+0x5a9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:368
        default:
            pmhdrs[i].type=MEM_TYPE_RSVD;
ffff800000803045:	48 b8 10 ff ff ff ff 	movabs rax,0xffffffffffffff10
ffff80000080304c:	ff ff ff 
ffff80000080304f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803053:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000803056:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000803059:	48 63 d0             	movsxd rdx,eax
ffff80000080305c:	48 89 d0             	mov    rax,rdx
ffff80000080305f:	48 c1 e0 02          	shl    rax,0x2
ffff800000803063:	48 01 d0             	add    rax,rdx
ffff800000803066:	48 c1 e0 03          	shl    rax,0x3
ffff80000080306a:	48 01 c8             	add    rax,rcx
ffff80000080306d:	c6 40 10 00          	mov    BYTE PTR [rax+0x10],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:369
            break;
ffff800000803071:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:354 (discriminator 2)
    for(int i=0;i<mmap_t_i;i++)
ffff800000803072:	83 45 d8 01          	add    DWORD PTR [rbp-0x28],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:354 (discriminator 1)
ffff800000803076:	48 b8 28 fe ff ff ff 	movabs rax,0xfffffffffffffe28
ffff80000080307d:	ff ff ff 
ffff800000803080:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803084:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000803086:	39 45 d8             	cmp    DWORD PTR [rbp-0x28],eax
ffff800000803089:	0f 8c a2 fd ff ff    	jl     ffff800000802e31 <init_memory+0x368>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:372
        }
    }
    pmhdrs[0].prev=NULL;
ffff80000080308f:	48 b8 10 ff ff ff ff 	movabs rax,0xffffffffffffff10
ffff800000803096:	ff ff ff 
ffff800000803099:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080309d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008030a0:	48 c7 40 20 00 00 00 	mov    QWORD PTR [rax+0x20],0x0
ffff8000008030a7:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:373
    pmhdrs[mmap_t_i-1].next=NULL;
ffff8000008030a8:	48 b8 10 ff ff ff ff 	movabs rax,0xffffffffffffff10
ffff8000008030af:	ff ff ff 
ffff8000008030b2:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008030b6:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008030b9:	48 b8 28 fe ff ff ff 	movabs rax,0xfffffffffffffe28
ffff8000008030c0:	ff ff ff 
ffff8000008030c3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008030c7:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008030c9:	48 63 d0             	movsxd rdx,eax
ffff8000008030cc:	48 89 d0             	mov    rax,rdx
ffff8000008030cf:	48 c1 e0 02          	shl    rax,0x2
ffff8000008030d3:	48 01 d0             	add    rax,rdx
ffff8000008030d6:	48 c1 e0 03          	shl    rax,0x3
ffff8000008030da:	48 83 e8 28          	sub    rax,0x28
ffff8000008030de:	48 01 c8             	add    rax,rcx
ffff8000008030e1:	48 c7 40 18 00 00 00 	mov    QWORD PTR [rax+0x18],0x0
ffff8000008030e8:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:374
    pmalloc_mhdr=pmhdrs;
ffff8000008030e9:	48 b8 10 ff ff ff ff 	movabs rax,0xffffffffffffff10
ffff8000008030f0:	ff ff ff 
ffff8000008030f3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008030f7:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008030fa:	48 b8 c0 ff ff ff ff 	movabs rax,0xffffffffffffffc0
ffff800000803101:	ff ff ff 
ffff800000803104:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803108:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:396
    //低1gb提前占用掉 knl
    for(int j=0;j<0x2000;j++){
        page_map[j]=-1;
    }*/
   //占用1GB
    if(pmalloc(0x40000000)!=0){
ffff80000080310b:	bf 00 00 00 40       	mov    edi,0x40000000
ffff800000803110:	49 89 df             	mov    r15,rbx
ffff800000803113:	48 b8 83 0a ee ff ff 	movabs rax,0xffffffffffee0a83
ffff80000080311a:	ff ff ff 
ffff80000080311d:	48 01 d8             	add    rax,rbx
ffff800000803120:	ff d0                	call   rax
ffff800000803122:	48 85 c0             	test   rax,rax
ffff800000803125:	74 28                	je     ffff80000080314f <init_memory+0x686>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:397
        comprintf("error: failed to req pm for knl at 0\n");
ffff800000803127:	48 b8 b8 d3 ff ff ff 	movabs rax,0xffffffffffffd3b8
ffff80000080312e:	ff ff ff 
ffff800000803131:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000803135:	48 89 c7             	mov    rdi,rax
ffff800000803138:	49 89 df             	mov    r15,rbx
ffff80000080313b:	b8 00 00 00 00       	mov    eax,0x0
ffff800000803140:	48 ba 3a 19 ef ff ff 	movabs rdx,0xffffffffffef193a
ffff800000803147:	ff ff ff 
ffff80000080314a:	48 01 da             	add    rdx,rbx
ffff80000080314d:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:427
        pd[i+mapai]=ptpm|PAGE_PRESENT|PAGE_RWX;
    }
    page_item *pdpt=(addr_t)pml4[256]&PAGE_4K_MASK+KNL_BASE;
    pdpt[0]=pdpm|PAGE_PRESENT|PAGE_RWX;*/

}
ffff80000080314f:	90                   	nop
ffff800000803150:	48 83 c4 30          	add    rsp,0x30
ffff800000803154:	5b                   	pop    rbx
ffff800000803155:	41 5f                	pop    r15
ffff800000803157:	5d                   	pop    rbp
ffff800000803158:	c3                   	ret    

ffff800000803159 <req_a_page>:
req_a_page():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:433
/*
page_map存储方式:
0x00000000
little end
*/
addr_t req_a_page(){
ffff800000803159:	f3 0f 1e fa          	endbr64 
ffff80000080315d:	55                   	push   rbp
ffff80000080315e:	48 89 e5             	mov    rbp,rsp
ffff800000803161:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000803161 <req_a_page+0x8>
ffff800000803168:	49 bb 97 fa 11 00 00 	movabs r11,0x11fa97
ffff80000080316f:	00 00 00 
ffff800000803172:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:434
    for(int i=0; i < pmalloc_entc; i++){
ffff800000803175:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff80000080317c:	e9 d3 00 00 00       	jmp    ffff800000803254 <req_a_page+0xfb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:435
        for(int j=0;j<32;j++){
ffff800000803181:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
ffff800000803188:	e9 b9 00 00 00       	jmp    ffff800000803246 <req_a_page+0xed>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:436
            unsigned int bit=page_map[i]&(1<<j);
ffff80000080318d:	48 ba 50 fe ff ff ff 	movabs rdx,0xfffffffffffffe50
ffff800000803194:	ff ff ff 
ffff800000803197:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080319b:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080319e:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff8000008031a1:	48 63 d2             	movsxd rdx,edx
ffff8000008031a4:	48 c1 e2 02          	shl    rdx,0x2
ffff8000008031a8:	48 01 ca             	add    rdx,rcx
ffff8000008031ab:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff8000008031ad:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff8000008031b0:	bf 01 00 00 00       	mov    edi,0x1
ffff8000008031b5:	89 d1                	mov    ecx,edx
ffff8000008031b7:	d3 e7                	shl    edi,cl
ffff8000008031b9:	89 fa                	mov    edx,edi
ffff8000008031bb:	21 f2                	and    edx,esi
ffff8000008031bd:	89 55 f4             	mov    DWORD PTR [rbp-0xc],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:437
            if((i*32+j)*4096>=0x100000&&(bit==0u))
ffff8000008031c0:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff8000008031c3:	89 d1                	mov    ecx,edx
ffff8000008031c5:	c1 e1 05             	shl    ecx,0x5
ffff8000008031c8:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff8000008031cb:	01 ca                	add    edx,ecx
ffff8000008031cd:	c1 e2 0c             	shl    edx,0xc
ffff8000008031d0:	81 fa ff ff 0f 00    	cmp    edx,0xfffff
ffff8000008031d6:	7e 6a                	jle    ffff800000803242 <req_a_page+0xe9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:437 (discriminator 1)
ffff8000008031d8:	83 7d f4 00          	cmp    DWORD PTR [rbp-0xc],0x0
ffff8000008031dc:	75 64                	jne    ffff800000803242 <req_a_page+0xe9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:440
            {
                // comprintf("req_a_page:before:page_map[%d]=0x%x,",i,page_map[i]);
                page_map[i]=page_map[i]|(1<<j);
ffff8000008031de:	48 ba 50 fe ff ff ff 	movabs rdx,0xfffffffffffffe50
ffff8000008031e5:	ff ff ff 
ffff8000008031e8:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008031ec:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008031ef:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff8000008031f2:	48 63 d2             	movsxd rdx,edx
ffff8000008031f5:	48 c1 e2 02          	shl    rdx,0x2
ffff8000008031f9:	48 01 ca             	add    rdx,rcx
ffff8000008031fc:	8b 32                	mov    esi,DWORD PTR [rdx]
ffff8000008031fe:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff800000803201:	bf 01 00 00 00       	mov    edi,0x1
ffff800000803206:	89 d1                	mov    ecx,edx
ffff800000803208:	d3 e7                	shl    edi,cl
ffff80000080320a:	89 fa                	mov    edx,edi
ffff80000080320c:	89 d1                	mov    ecx,edx
ffff80000080320e:	48 ba 50 fe ff ff ff 	movabs rdx,0xfffffffffffffe50
ffff800000803215:	ff ff ff 
ffff800000803218:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080321c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080321f:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000803222:	48 98                	cdqe   
ffff800000803224:	48 c1 e0 02          	shl    rax,0x2
ffff800000803228:	48 01 d0             	add    rax,rdx
ffff80000080322b:	09 ce                	or     esi,ecx
ffff80000080322d:	89 f2                	mov    edx,esi
ffff80000080322f:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:442
                // comprintf("now = 0x%x",page_map[i]);
                return i*32+j;//num of page
ffff800000803231:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000803234:	c1 e0 05             	shl    eax,0x5
ffff800000803237:	89 c2                	mov    edx,eax
ffff800000803239:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff80000080323c:	01 d0                	add    eax,edx
ffff80000080323e:	48 98                	cdqe   
ffff800000803240:	eb 32                	jmp    ffff800000803274 <req_a_page+0x11b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:435 (discriminator 2)
        for(int j=0;j<32;j++){
ffff800000803242:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:435 (discriminator 1)
ffff800000803246:	83 7d f8 1f          	cmp    DWORD PTR [rbp-0x8],0x1f
ffff80000080324a:	0f 8e 3d ff ff ff    	jle    ffff80000080318d <req_a_page+0x34>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:434 (discriminator 2)
    for(int i=0; i < pmalloc_entc; i++){
ffff800000803250:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:434 (discriminator 1)
ffff800000803254:	48 ba f0 fe ff ff ff 	movabs rdx,0xfffffffffffffef0
ffff80000080325b:	ff ff ff 
ffff80000080325e:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000803262:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000803264:	39 55 fc             	cmp    DWORD PTR [rbp-0x4],edx
ffff800000803267:	0f 8c 14 ff ff ff    	jl     ffff800000803181 <req_a_page+0x28>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:447

            }
        }
    }
    return -1;
ffff80000080326d:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:448
}
ffff800000803274:	5d                   	pop    rbp
ffff800000803275:	c3                   	ret    

ffff800000803276 <mhdr_split>:
mhdr_split():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:453
/// @brief 将mhdr对应内存分成两块，返回高地址块内存的mhdr，其属性等复制自原来mhdr，低地址的mhdr来自被分割的mhdr。
/// @param target 被分割的mhdr
/// @param split_point 分割地址点
/// @return 低地址mhdr,即被分割的mhdr;如果割出来高地址内存大小为0，返回低地址mhdr，如果低地址内存大小为0，返回高地址mhdr。
malloc_hdr *mhdr_split(malloc_hdr* target,off_t split_point,malloc_hdr* array,size_t arraylen){
ffff800000803276:	f3 0f 1e fa          	endbr64 
ffff80000080327a:	55                   	push   rbp
ffff80000080327b:	48 89 e5             	mov    rbp,rsp
ffff80000080327e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080327e <mhdr_split+0x8>
ffff800000803285:	49 bb 7a f9 11 00 00 	movabs r11,0x11f97a
ffff80000080328c:	00 00 00 
ffff80000080328f:	4c 01 d8             	add    rax,r11
ffff800000803292:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000803296:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080329a:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffff80000080329e:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:455
    //内部实现的时候出现大小为0的mhdr不创建
    if(target->base>=split_point||target->base+target->len<=split_point)return target;
ffff8000008032a2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008032a6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008032a9:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
ffff8000008032ad:	76 18                	jbe    ffff8000008032c7 <mhdr_split+0x51>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:455 (discriminator 2)
ffff8000008032af:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008032b3:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008032b6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008032ba:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff8000008032be:	48 01 d0             	add    rax,rdx
ffff8000008032c1:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
ffff8000008032c5:	72 09                	jb     ffff8000008032d0 <mhdr_split+0x5a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:455 (discriminator 3)
ffff8000008032c7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008032cb:	e9 f4 00 00 00       	jmp    ffff8000008033c4 <mhdr_split+0x14e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:456
    malloc_hdr* nmh=0;
ffff8000008032d0:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff8000008032d7:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:457
    for (int i=0;i<arraylen;i++){
ffff8000008032d8:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
ffff8000008032df:	eb 4e                	jmp    ffff80000080332f <mhdr_split+0xb9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:458
        if(array[i].type==-1){
ffff8000008032e1:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffff8000008032e4:	48 63 d0             	movsxd rdx,eax
ffff8000008032e7:	48 89 d0             	mov    rax,rdx
ffff8000008032ea:	48 c1 e0 02          	shl    rax,0x2
ffff8000008032ee:	48 01 d0             	add    rax,rdx
ffff8000008032f1:	48 c1 e0 03          	shl    rax,0x3
ffff8000008032f5:	48 89 c2             	mov    rdx,rax
ffff8000008032f8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008032fc:	48 01 d0             	add    rax,rdx
ffff8000008032ff:	0f b6 40 10          	movzx  eax,BYTE PTR [rax+0x10]
ffff800000803303:	3c ff                	cmp    al,0xff
ffff800000803305:	75 24                	jne    ffff80000080332b <mhdr_split+0xb5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:459
            nmh=array+i;
ffff800000803307:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffff80000080330a:	48 63 d0             	movsxd rdx,eax
ffff80000080330d:	48 89 d0             	mov    rax,rdx
ffff800000803310:	48 c1 e0 02          	shl    rax,0x2
ffff800000803314:	48 01 d0             	add    rax,rdx
ffff800000803317:	48 c1 e0 03          	shl    rax,0x3
ffff80000080331b:	48 89 c2             	mov    rdx,rax
ffff80000080331e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000803322:	48 01 d0             	add    rax,rdx
ffff800000803325:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:460
            break;
ffff800000803329:	eb 0f                	jmp    ffff80000080333a <mhdr_split+0xc4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:457 (discriminator 2)
    for (int i=0;i<arraylen;i++){
ffff80000080332b:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:457 (discriminator 1)
ffff80000080332f:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffff800000803332:	48 98                	cdqe   
ffff800000803334:	48 39 45 d0          	cmp    QWORD PTR [rbp-0x30],rax
ffff800000803338:	77 a7                	ja     ffff8000008032e1 <mhdr_split+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:463
        }
    }
    if(!nmh)return NULL;
ffff80000080333a:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffff80000080333f:	75 07                	jne    ffff800000803348 <mhdr_split+0xd2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:463 (discriminator 1)
ffff800000803341:	b8 00 00 00 00       	mov    eax,0x0
ffff800000803346:	eb 7c                	jmp    ffff8000008033c4 <mhdr_split+0x14e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:464
    nmh->next=target->next;
ffff800000803348:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080334c:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
ffff800000803350:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803354:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:465
    target->next->prev=nmh;
ffff800000803358:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080335c:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000803360:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000803364:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:466
    nmh->prev=target;
ffff800000803368:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080336c:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000803370:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:467
    target->next=nmh;
ffff800000803374:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803378:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080337c:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:469
    
    nmh->base=split_point;
ffff800000803380:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803384:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000803388:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:470
    nmh->len= target->len- split_point;
ffff80000080338b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080338f:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000803393:	48 2b 45 e0          	sub    rax,QWORD PTR [rbp-0x20]
ffff800000803397:	48 89 c2             	mov    rdx,rax
ffff80000080339a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080339e:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:471
    nmh->flag=target->flag;
ffff8000008033a2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008033a6:	0f b6 50 11          	movzx  edx,BYTE PTR [rax+0x11]
ffff8000008033aa:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008033ae:	88 50 11             	mov    BYTE PTR [rax+0x11],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:472
    nmh->type=target->flag;
ffff8000008033b1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008033b5:	0f b6 50 11          	movzx  edx,BYTE PTR [rax+0x11]
ffff8000008033b9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008033bd:	88 50 10             	mov    BYTE PTR [rax+0x10],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:474

    return nmh;
ffff8000008033c0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:476

}
ffff8000008033c4:	5d                   	pop    rbp
ffff8000008033c5:	c3                   	ret    

ffff8000008033c6 <kmalloc>:
kmalloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:477
void *kmalloc(off_t addr,size_t size){
ffff8000008033c6:	f3 0f 1e fa          	endbr64 
ffff8000008033ca:	55                   	push   rbp
ffff8000008033cb:	48 89 e5             	mov    rbp,rsp
ffff8000008033ce:	41 57                	push   r15
ffff8000008033d0:	53                   	push   rbx
ffff8000008033d1:	48 83 ec 30          	sub    rsp,0x30
ffff8000008033d5:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008033d5 <kmalloc+0xf>
ffff8000008033dc:	49 bb 23 f8 11 00 00 	movabs r11,0x11f823
ffff8000008033e3:	00 00 00 
ffff8000008033e6:	4c 01 db             	add    rbx,r11
ffff8000008033e9:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff8000008033ed:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:478
    for (malloc_hdr *mh = kmalloc_mhdr; mh; mh=mh->next)
ffff8000008033f1:	48 b8 e8 fe ff ff ff 	movabs rax,0xfffffffffffffee8
ffff8000008033f8:	ff ff ff 
ffff8000008033fb:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008033ff:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803402:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff800000803406:	e9 43 01 00 00       	jmp    ffff80000080354e <kmalloc+0x188>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:480
    {
        if(!addr&&(mh->type!=MEM_TYPE_AVAILABLE||mh->len<size))continue;
ffff80000080340b:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffff800000803410:	75 22                	jne    ffff800000803434 <kmalloc+0x6e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:480 (discriminator 1)
ffff800000803412:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803416:	0f b6 40 10          	movzx  eax,BYTE PTR [rax+0x10]
ffff80000080341a:	3c 01                	cmp    al,0x1
ffff80000080341c:	0f 85 1c 01 00 00    	jne    ffff80000080353e <kmalloc+0x178>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:480 (discriminator 3)
ffff800000803422:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803426:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080342a:	48 39 45 c0          	cmp    QWORD PTR [rbp-0x40],rax
ffff80000080342e:	0f 87 0a 01 00 00    	ja     ffff80000080353e <kmalloc+0x178>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:481
        if(mh->type!=MEM_TYPE_AVAILABLE||mh->len-(addr-mh->base)<size||addr<mh->base||addr>mh->base+mh->len)continue;
ffff800000803434:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803438:	0f b6 40 10          	movzx  eax,BYTE PTR [rax+0x10]
ffff80000080343c:	3c 01                	cmp    al,0x1
ffff80000080343e:	0f 85 fd 00 00 00    	jne    ffff800000803541 <kmalloc+0x17b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:481 (discriminator 2)
ffff800000803444:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803448:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff80000080344c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803450:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803453:	48 2b 45 c8          	sub    rax,QWORD PTR [rbp-0x38]
ffff800000803457:	48 01 d0             	add    rax,rdx
ffff80000080345a:	48 39 45 c0          	cmp    QWORD PTR [rbp-0x40],rax
ffff80000080345e:	0f 87 dd 00 00 00    	ja     ffff800000803541 <kmalloc+0x17b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:481 (discriminator 4)
ffff800000803464:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803468:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080346b:	48 39 45 c8          	cmp    QWORD PTR [rbp-0x38],rax
ffff80000080346f:	0f 82 cc 00 00 00    	jb     ffff800000803541 <kmalloc+0x17b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:481 (discriminator 6)
ffff800000803475:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803479:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080347c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803480:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000803484:	48 01 d0             	add    rax,rdx
ffff800000803487:	48 39 45 c8          	cmp    QWORD PTR [rbp-0x38],rax
ffff80000080348b:	0f 87 b0 00 00 00    	ja     ffff800000803541 <kmalloc+0x17b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:482
        if(!addr){
ffff800000803491:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffff800000803496:	75 0b                	jne    ffff8000008034a3 <kmalloc+0xdd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:483
            addr=mh->base;
ffff800000803498:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080349c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080349f:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:487
        }
        //以下为符合要求
        //分割空闲内存
        malloc_hdr* nmh=mhdr_split(mh,addr,kmhdrs,MAX_KMHDRS);
ffff8000008034a3:	48 b8 e0 fd ff ff ff 	movabs rax,0xfffffffffffffde0
ffff8000008034aa:	ff ff ff 
ffff8000008034ad:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008034b1:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008034b4:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
ffff8000008034b8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008034bc:	b9 aa 00 00 00       	mov    ecx,0xaa
ffff8000008034c1:	48 89 c7             	mov    rdi,rax
ffff8000008034c4:	49 89 df             	mov    r15,rbx
ffff8000008034c7:	48 b8 7e 06 ee ff ff 	movabs rax,0xffffffffffee067e
ffff8000008034ce:	ff ff ff 
ffff8000008034d1:	48 01 d8             	add    rax,rbx
ffff8000008034d4:	ff d0                	call   rax
ffff8000008034d6:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:488
        malloc_hdr* top=mhdr_split(nmh,addr+size,kmhdrs,MAX_KMHDRS);
ffff8000008034da:	48 b8 e0 fd ff ff ff 	movabs rax,0xfffffffffffffde0
ffff8000008034e1:	ff ff ff 
ffff8000008034e4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008034e8:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008034eb:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
ffff8000008034ef:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008034f3:	48 8d 34 01          	lea    rsi,[rcx+rax*1]
ffff8000008034f7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008034fb:	b9 aa 00 00 00       	mov    ecx,0xaa
ffff800000803500:	48 89 c7             	mov    rdi,rax
ffff800000803503:	49 89 df             	mov    r15,rbx
ffff800000803506:	48 b8 7e 06 ee ff ff 	movabs rax,0xffffffffffee067e
ffff80000080350d:	ff ff ff 
ffff800000803510:	48 01 d8             	add    rax,rbx
ffff800000803513:	ff d0                	call   rax
ffff800000803515:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:490

        nmh->type=MEM_TYPE_USED;
ffff800000803519:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080351d:	c6 40 10 06          	mov    BYTE PTR [rax+0x10],0x6
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:491
        nmh->flag|=MEM_FLAG_W|MEM_FLAG_X|MEM_FLAG_R;
ffff800000803521:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803525:	0f b6 40 11          	movzx  eax,BYTE PTR [rax+0x11]
ffff800000803529:	83 c8 07             	or     eax,0x7
ffff80000080352c:	89 c2                	mov    edx,eax
ffff80000080352e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803532:	88 50 11             	mov    BYTE PTR [rax+0x11],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:492
        return nmh->base;
ffff800000803535:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803539:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080353c:	eb 20                	jmp    ffff80000080355e <kmalloc+0x198>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:480
        if(!addr&&(mh->type!=MEM_TYPE_AVAILABLE||mh->len<size))continue;
ffff80000080353e:	90                   	nop
ffff80000080353f:	eb 01                	jmp    ffff800000803542 <kmalloc+0x17c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:481
        if(mh->type!=MEM_TYPE_AVAILABLE||mh->len-(addr-mh->base)<size||addr<mh->base||addr>mh->base+mh->len)continue;
ffff800000803541:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:478 (discriminator 2)
    for (malloc_hdr *mh = kmalloc_mhdr; mh; mh=mh->next)
ffff800000803542:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803546:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080354a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:478 (discriminator 1)
ffff80000080354e:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff800000803553:	0f 85 b2 fe ff ff    	jne    ffff80000080340b <kmalloc+0x45>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:495
        
    }
    return NULL;
ffff800000803559:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:496
}
ffff80000080355e:	48 83 c4 30          	add    rsp,0x30
ffff800000803562:	5b                   	pop    rbx
ffff800000803563:	41 5f                	pop    r15
ffff800000803565:	5d                   	pop    rbp
ffff800000803566:	c3                   	ret    

ffff800000803567 <kmfree>:
kmfree():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:497
int kmfree(off_t addr){
ffff800000803567:	f3 0f 1e fa          	endbr64 
ffff80000080356b:	55                   	push   rbp
ffff80000080356c:	48 89 e5             	mov    rbp,rsp
ffff80000080356f:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080356f <kmfree+0x8>
ffff800000803576:	49 bb 89 f6 11 00 00 	movabs r11,0x11f689
ffff80000080357d:	00 00 00 
ffff800000803580:	4c 01 d8             	add    rax,r11
ffff800000803583:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:498
    for (malloc_hdr* mh = kmalloc_mhdr; mh; mh=mh->next)
ffff800000803587:	48 ba e8 fe ff ff ff 	movabs rdx,0xfffffffffffffee8
ffff80000080358e:	ff ff ff 
ffff800000803591:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000803595:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803598:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffff80000080359c:	e9 c8 00 00 00       	jmp    ffff800000803669 <kmfree+0x102>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:500
    {
        if(mh->base!=addr)continue;
ffff8000008035a1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008035a5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008035a8:	48 39 45 e8          	cmp    QWORD PTR [rbp-0x18],rax
ffff8000008035ac:	0f 85 aa 00 00 00    	jne    ffff80000080365c <kmfree+0xf5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:501
        mh->type=MEM_TYPE_AVAILABLE;
ffff8000008035b2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008035b6:	c6 40 10 01          	mov    BYTE PTR [rax+0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:504
        //合并空闲项
        malloc_hdr* mp;
        for(mp=mh;mp->prev&&mh->type==MEM_TYPE_AVAILABLE;mp=mp->prev);
ffff8000008035ba:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008035be:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffff8000008035c2:	eb 0c                	jmp    ffff8000008035d0 <kmfree+0x69>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:504 (discriminator 4)
ffff8000008035c4:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008035c8:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff8000008035cc:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:504 (discriminator 1)
ffff8000008035d0:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008035d4:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff8000008035d8:	48 85 c0             	test   rax,rax
ffff8000008035db:	74 5d                	je     ffff80000080363a <kmfree+0xd3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:504 (discriminator 3)
ffff8000008035dd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008035e1:	0f b6 40 10          	movzx  eax,BYTE PTR [rax+0x10]
ffff8000008035e5:	3c 01                	cmp    al,0x1
ffff8000008035e7:	74 db                	je     ffff8000008035c4 <kmfree+0x5d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:505
        while (mp->next&&mp->next==MEM_TYPE_AVAILABLE)
ffff8000008035e9:	eb 4f                	jmp    ffff80000080363a <kmfree+0xd3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:507
        {
            mp->len+=mp->next->len;
ffff8000008035eb:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008035ef:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff8000008035f3:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008035f7:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff8000008035fb:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff8000008035ff:	48 01 c2             	add    rdx,rax
ffff800000803602:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000803606:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:509
            //drop the next
            mp->next->type=-1;
ffff80000080360a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080360e:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000803612:	c6 40 10 ff          	mov    BYTE PTR [rax+0x10],0xff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:510
            mp->next->prev=mp;
ffff800000803616:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080361a:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080361e:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff800000803622:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:511
            mp->next=mp->next->next;
ffff800000803626:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080362a:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080362e:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
ffff800000803632:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000803636:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:505
        while (mp->next&&mp->next==MEM_TYPE_AVAILABLE)
ffff80000080363a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080363e:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000803642:	48 85 c0             	test   rax,rax
ffff800000803645:	74 0e                	je     ffff800000803655 <kmfree+0xee>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:505 (discriminator 1)
ffff800000803647:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080364b:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080364f:	48 83 f8 01          	cmp    rax,0x1
ffff800000803653:	74 96                	je     ffff8000008035eb <kmfree+0x84>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:513
        }
        return 1;
ffff800000803655:	b8 01 00 00 00       	mov    eax,0x1
ffff80000080365a:	eb 1d                	jmp    ffff800000803679 <kmfree+0x112>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:500
        if(mh->base!=addr)continue;
ffff80000080365c:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:498
    for (malloc_hdr* mh = kmalloc_mhdr; mh; mh=mh->next)
ffff80000080365d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803661:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000803665:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:498 (discriminator 1)
ffff800000803669:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffff80000080366e:	0f 85 2d ff ff ff    	jne    ffff8000008035a1 <kmfree+0x3a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:515
    }
    return 0;
ffff800000803674:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:517
    
}
ffff800000803679:	5d                   	pop    rbp
ffff80000080367a:	c3                   	ret    

ffff80000080367b <pmalloc>:
pmalloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:518
void * pmalloc(size_t size){
ffff80000080367b:	f3 0f 1e fa          	endbr64 
ffff80000080367f:	55                   	push   rbp
ffff800000803680:	48 89 e5             	mov    rbp,rsp
ffff800000803683:	41 57                	push   r15
ffff800000803685:	48 83 ec 28          	sub    rsp,0x28
ffff800000803689:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000803689 <pmalloc+0xe>
ffff800000803690:	49 bb 6f f5 11 00 00 	movabs r11,0x11f56f
ffff800000803697:	00 00 00 
ffff80000080369a:	4c 01 d8             	add    rax,r11
ffff80000080369d:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:519
    for (malloc_hdr *mh = pmalloc_mhdr; mh; mh=mh->next)
ffff8000008036a1:	48 ba c0 ff ff ff ff 	movabs rdx,0xffffffffffffffc0
ffff8000008036a8:	ff ff ff 
ffff8000008036ab:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008036af:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008036b2:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff8000008036b6:	e9 8c 00 00 00       	jmp    ffff800000803747 <pmalloc+0xcc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:521
    {
        if(mh->type!=MEM_TYPE_AVAILABLE||mh->len<size)continue;
ffff8000008036bb:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff8000008036bf:	0f b6 52 10          	movzx  edx,BYTE PTR [rdx+0x10]
ffff8000008036c3:	80 fa 01             	cmp    dl,0x1
ffff8000008036c6:	75 72                	jne    ffff80000080373a <pmalloc+0xbf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:521 (discriminator 2)
ffff8000008036c8:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff8000008036cc:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff8000008036d0:	48 39 55 d8          	cmp    QWORD PTR [rbp-0x28],rdx
ffff8000008036d4:	77 64                	ja     ffff80000080373a <pmalloc+0xbf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:524
        //以下为符合要求
        //分割空闲内存
        malloc_hdr* nmh=mhdr_split(mh,mh->base+size,pmhdrs,MAX_PMHDRS);
ffff8000008036d6:	48 ba 10 ff ff ff ff 	movabs rdx,0xffffffffffffff10
ffff8000008036dd:	ff ff ff 
ffff8000008036e0:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008036e4:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008036e7:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff8000008036eb:	48 8b 31             	mov    rsi,QWORD PTR [rcx]
ffff8000008036ee:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff8000008036f2:	48 01 ce             	add    rsi,rcx
ffff8000008036f5:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
ffff8000008036f9:	b9 55 00 00 00       	mov    ecx,0x55
ffff8000008036fe:	49 89 c7             	mov    r15,rax
ffff800000803701:	49 b8 7e 06 ee ff ff 	movabs r8,0xffffffffffee067e
ffff800000803708:	ff ff ff 
ffff80000080370b:	49 01 c0             	add    r8,rax
ffff80000080370e:	41 ff d0             	call   r8
ffff800000803711:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:527


        mh->type=MEM_TYPE_USED;
ffff800000803715:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803719:	c6 40 10 06          	mov    BYTE PTR [rax+0x10],0x6
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:528
        mh->flag|=MEM_FLAG_W|MEM_FLAG_X|MEM_FLAG_R;
ffff80000080371d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803721:	0f b6 40 11          	movzx  eax,BYTE PTR [rax+0x11]
ffff800000803725:	83 c8 07             	or     eax,0x7
ffff800000803728:	89 c2                	mov    edx,eax
ffff80000080372a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080372e:	88 50 11             	mov    BYTE PTR [rax+0x11],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:529
        return mh->base;
ffff800000803731:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803735:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803738:	eb 1f                	jmp    ffff800000803759 <pmalloc+0xde>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:521
        if(mh->type!=MEM_TYPE_AVAILABLE||mh->len<size)continue;
ffff80000080373a:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:519
    for (malloc_hdr *mh = pmalloc_mhdr; mh; mh=mh->next)
ffff80000080373b:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080373f:	48 8b 52 18          	mov    rdx,QWORD PTR [rdx+0x18]
ffff800000803743:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:519 (discriminator 1)
ffff800000803747:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080374c:	0f 85 69 ff ff ff    	jne    ffff8000008036bb <pmalloc+0x40>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:532
        
    }
    return -1;
ffff800000803752:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:537
    
    /* void *ret=(void*)(get_phyaddr(req_a_page()));
    // comprintf("pmalloc(PAGE_4K_SIZE):%l\n",ret);
    return ret; */
}
ffff800000803759:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080375d:	c9                   	leave  
ffff80000080375e:	c3                   	ret    

ffff80000080375f <pmfree>:
pmfree():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:538
int pmfree(void *addr){
ffff80000080375f:	f3 0f 1e fa          	endbr64 
ffff800000803763:	55                   	push   rbp
ffff800000803764:	48 89 e5             	mov    rbp,rsp
ffff800000803767:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000803767 <pmfree+0x8>
ffff80000080376e:	49 bb 91 f4 11 00 00 	movabs r11,0x11f491
ffff800000803775:	00 00 00 
ffff800000803778:	4c 01 d8             	add    rax,r11
ffff80000080377b:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:539
    for (malloc_hdr* mh = pmalloc_mhdr; mh; mh=mh->next)
ffff80000080377f:	48 ba c0 ff ff ff ff 	movabs rdx,0xffffffffffffffc0
ffff800000803786:	ff ff ff 
ffff800000803789:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080378d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000803790:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffff800000803794:	e9 c8 00 00 00       	jmp    ffff800000803861 <pmfree+0x102>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:541
    {
        if(mh->base!=addr)continue;
ffff800000803799:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080379d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008037a0:	48 39 45 e8          	cmp    QWORD PTR [rbp-0x18],rax
ffff8000008037a4:	0f 85 aa 00 00 00    	jne    ffff800000803854 <pmfree+0xf5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:542
        mh->type=MEM_TYPE_AVAILABLE;
ffff8000008037aa:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008037ae:	c6 40 10 01          	mov    BYTE PTR [rax+0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:545
        //合并空闲项
        malloc_hdr* mp;
        for(mp=mh;mp->prev&&mh->type==MEM_TYPE_AVAILABLE;mp=mp->prev);
ffff8000008037b2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008037b6:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffff8000008037ba:	eb 0c                	jmp    ffff8000008037c8 <pmfree+0x69>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:545 (discriminator 4)
ffff8000008037bc:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008037c0:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff8000008037c4:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:545 (discriminator 1)
ffff8000008037c8:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008037cc:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff8000008037d0:	48 85 c0             	test   rax,rax
ffff8000008037d3:	74 5d                	je     ffff800000803832 <pmfree+0xd3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:545 (discriminator 3)
ffff8000008037d5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008037d9:	0f b6 40 10          	movzx  eax,BYTE PTR [rax+0x10]
ffff8000008037dd:	3c 01                	cmp    al,0x1
ffff8000008037df:	74 db                	je     ffff8000008037bc <pmfree+0x5d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:546
        while (mp->next&&mp->next==MEM_TYPE_AVAILABLE)
ffff8000008037e1:	eb 4f                	jmp    ffff800000803832 <pmfree+0xd3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:548
        {
            mp->len+=mp->next->len;
ffff8000008037e3:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008037e7:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff8000008037eb:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008037ef:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff8000008037f3:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff8000008037f7:	48 01 c2             	add    rdx,rax
ffff8000008037fa:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008037fe:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:550
            //drop the next
            mp->next->type=-1;
ffff800000803802:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000803806:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080380a:	c6 40 10 ff          	mov    BYTE PTR [rax+0x10],0xff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:551
            mp->next->prev=mp;
ffff80000080380e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000803812:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000803816:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080381a:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:552
            mp->next=mp->next->next;
ffff80000080381e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000803822:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000803826:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
ffff80000080382a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080382e:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:546
        while (mp->next&&mp->next==MEM_TYPE_AVAILABLE)
ffff800000803832:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000803836:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080383a:	48 85 c0             	test   rax,rax
ffff80000080383d:	74 0e                	je     ffff80000080384d <pmfree+0xee>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:546 (discriminator 1)
ffff80000080383f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000803843:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000803847:	48 83 f8 01          	cmp    rax,0x1
ffff80000080384b:	74 96                	je     ffff8000008037e3 <pmfree+0x84>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:554
        }
        return 1;
ffff80000080384d:	b8 01 00 00 00       	mov    eax,0x1
ffff800000803852:	eb 1d                	jmp    ffff800000803871 <pmfree+0x112>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:541
        if(mh->base!=addr)continue;
ffff800000803854:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:539
    for (malloc_hdr* mh = pmalloc_mhdr; mh; mh=mh->next)
ffff800000803855:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803859:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080385d:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:539 (discriminator 1)
ffff800000803861:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffff800000803866:	0f 85 2d ff ff ff    	jne    ffff800000803799 <pmfree+0x3a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:556
    }
    return 0;
ffff80000080386c:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:558
    
}
ffff800000803871:	5d                   	pop    rbp
ffff800000803872:	c3                   	ret    

ffff800000803873 <free_page>:
free_page():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:559
int free_page(char *paddr){
ffff800000803873:	f3 0f 1e fa          	endbr64 
ffff800000803877:	55                   	push   rbp
ffff800000803878:	48 89 e5             	mov    rbp,rsp
ffff80000080387b:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080387b <free_page+0x8>
ffff800000803882:	49 bb 7d f3 11 00 00 	movabs r11,0x11f37d
ffff800000803889:	00 00 00 
ffff80000080388c:	4c 01 da             	add    rdx,r11
ffff80000080388f:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:560
    int num=(int)paddr/4096;
ffff800000803893:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803897:	8d 88 ff 0f 00 00    	lea    ecx,[rax+0xfff]
ffff80000080389d:	85 c0                	test   eax,eax
ffff80000080389f:	0f 48 c1             	cmovs  eax,ecx
ffff8000008038a2:	c1 f8 0c             	sar    eax,0xc
ffff8000008038a5:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:561
    int n=num/32;
ffff8000008038a8:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008038ab:	8d 48 1f             	lea    ecx,[rax+0x1f]
ffff8000008038ae:	85 c0                	test   eax,eax
ffff8000008038b0:	0f 48 c1             	cmovs  eax,ecx
ffff8000008038b3:	c1 f8 05             	sar    eax,0x5
ffff8000008038b6:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:562
    int r=num%32;
ffff8000008038b9:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008038bc:	89 c1                	mov    ecx,eax
ffff8000008038be:	c1 f9 1f             	sar    ecx,0x1f
ffff8000008038c1:	c1 e9 1b             	shr    ecx,0x1b
ffff8000008038c4:	01 c8                	add    eax,ecx
ffff8000008038c6:	83 e0 1f             	and    eax,0x1f
ffff8000008038c9:	29 c8                	sub    eax,ecx
ffff8000008038cb:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:563
    page_map[n]=page_map[n]&~(unsigned int)(1<<r);
ffff8000008038ce:	48 b8 50 fe ff ff ff 	movabs rax,0xfffffffffffffe50
ffff8000008038d5:	ff ff ff 
ffff8000008038d8:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff8000008038dc:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008038df:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff8000008038e2:	48 98                	cdqe   
ffff8000008038e4:	48 c1 e0 02          	shl    rax,0x2
ffff8000008038e8:	48 01 c8             	add    rax,rcx
ffff8000008038eb:	8b 30                	mov    esi,DWORD PTR [rax]
ffff8000008038ed:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffff8000008038f0:	bf 01 00 00 00       	mov    edi,0x1
ffff8000008038f5:	89 c1                	mov    ecx,eax
ffff8000008038f7:	d3 e7                	shl    edi,cl
ffff8000008038f9:	89 f8                	mov    eax,edi
ffff8000008038fb:	f7 d0                	not    eax
ffff8000008038fd:	89 c1                	mov    ecx,eax
ffff8000008038ff:	48 b8 50 fe ff ff ff 	movabs rax,0xfffffffffffffe50
ffff800000803906:	ff ff ff 
ffff800000803909:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff80000080390d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803910:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff800000803913:	48 98                	cdqe   
ffff800000803915:	48 c1 e0 02          	shl    rax,0x2
ffff800000803919:	48 01 d0             	add    rax,rdx
ffff80000080391c:	21 ce                	and    esi,ecx
ffff80000080391e:	89 f2                	mov    edx,esi
ffff800000803920:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:564
}
ffff800000803922:	90                   	nop
ffff800000803923:	5d                   	pop    rbp
ffff800000803924:	c3                   	ret    

ffff800000803925 <free_pages_at>:
free_pages_at():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:566

int free_pages_at(int base,int pgn){
ffff800000803925:	f3 0f 1e fa          	endbr64 
ffff800000803929:	55                   	push   rbp
ffff80000080392a:	48 89 e5             	mov    rbp,rsp
ffff80000080392d:	41 57                	push   r15
ffff80000080392f:	53                   	push   rbx
ffff800000803930:	48 83 ec 20          	sub    rsp,0x20
ffff800000803934:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000803934 <free_pages_at+0xf>
ffff80000080393b:	49 bb c4 f2 11 00 00 	movabs r11,0x11f2c4
ffff800000803942:	00 00 00 
ffff800000803945:	4c 01 db             	add    rbx,r11
ffff800000803948:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff80000080394b:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:567
    for(int i=0;i<pgn;i++){
ffff80000080394e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000803955:	eb 28                	jmp    ffff80000080397f <free_pages_at+0x5a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:568 (discriminator 3)
        free_page(base+i*PAGE_4K_SIZE);
ffff800000803957:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080395a:	c1 e0 0c             	shl    eax,0xc
ffff80000080395d:	89 c2                	mov    edx,eax
ffff80000080395f:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000803962:	01 d0                	add    eax,edx
ffff800000803964:	48 98                	cdqe   
ffff800000803966:	48 89 c7             	mov    rdi,rax
ffff800000803969:	49 89 df             	mov    r15,rbx
ffff80000080396c:	48 b8 7b 0c ee ff ff 	movabs rax,0xffffffffffee0c7b
ffff800000803973:	ff ff ff 
ffff800000803976:	48 01 d8             	add    rax,rbx
ffff800000803979:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:567 (discriminator 3)
    for(int i=0;i<pgn;i++){
ffff80000080397b:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:567 (discriminator 1)
ffff80000080397f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803982:	3b 45 d8             	cmp    eax,DWORD PTR [rbp-0x28]
ffff800000803985:	7c d0                	jl     ffff800000803957 <free_pages_at+0x32>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:570
    }
}
ffff800000803987:	90                   	nop
ffff800000803988:	48 83 c4 20          	add    rsp,0x20
ffff80000080398c:	5b                   	pop    rbx
ffff80000080398d:	41 5f                	pop    r15
ffff80000080398f:	5d                   	pop    rbp
ffff800000803990:	c3                   	ret    

ffff800000803991 <check_page>:
check_page():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:571
int check_page(int num){
ffff800000803991:	f3 0f 1e fa          	endbr64 
ffff800000803995:	55                   	push   rbp
ffff800000803996:	48 89 e5             	mov    rbp,rsp
ffff800000803999:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000803999 <check_page+0x8>
ffff8000008039a0:	49 bb 5f f2 11 00 00 	movabs r11,0x11f25f
ffff8000008039a7:	00 00 00 
ffff8000008039aa:	4c 01 da             	add    rdx,r11
ffff8000008039ad:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:572
    int n=num/32;
ffff8000008039b0:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008039b3:	8d 48 1f             	lea    ecx,[rax+0x1f]
ffff8000008039b6:	85 c0                	test   eax,eax
ffff8000008039b8:	0f 48 c1             	cmovs  eax,ecx
ffff8000008039bb:	c1 f8 05             	sar    eax,0x5
ffff8000008039be:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:573
    int r=num%32;
ffff8000008039c1:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008039c4:	89 c1                	mov    ecx,eax
ffff8000008039c6:	c1 f9 1f             	sar    ecx,0x1f
ffff8000008039c9:	c1 e9 1b             	shr    ecx,0x1b
ffff8000008039cc:	01 c8                	add    eax,ecx
ffff8000008039ce:	83 e0 1f             	and    eax,0x1f
ffff8000008039d1:	29 c8                	sub    eax,ecx
ffff8000008039d3:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:574
    int bit=page_map[n]&(1<<r);
ffff8000008039d6:	48 b8 50 fe ff ff ff 	movabs rax,0xfffffffffffffe50
ffff8000008039dd:	ff ff ff 
ffff8000008039e0:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff8000008039e4:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008039e7:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008039ea:	48 98                	cdqe   
ffff8000008039ec:	48 c1 e0 02          	shl    rax,0x2
ffff8000008039f0:	48 01 d0             	add    rax,rdx
ffff8000008039f3:	8b 10                	mov    edx,DWORD PTR [rax]
ffff8000008039f5:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffff8000008039f8:	be 01 00 00 00       	mov    esi,0x1
ffff8000008039fd:	89 c1                	mov    ecx,eax
ffff8000008039ff:	d3 e6                	shl    esi,cl
ffff800000803a01:	89 f0                	mov    eax,esi
ffff800000803a03:	21 d0                	and    eax,edx
ffff800000803a05:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:575
    return bit;
ffff800000803a08:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:576
}
ffff800000803a0b:	5d                   	pop    rbp
ffff800000803a0c:	c3                   	ret    

ffff800000803a0d <get_phyaddr>:
get_phyaddr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:580
/*
 * 获得这个页对应的物理内存地址
 * */
int get_phyaddr(int num){
ffff800000803a0d:	f3 0f 1e fa          	endbr64 
ffff800000803a11:	55                   	push   rbp
ffff800000803a12:	48 89 e5             	mov    rbp,rsp
ffff800000803a15:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000803a15 <get_phyaddr+0x8>
ffff800000803a1c:	49 bb e3 f1 11 00 00 	movabs r11,0x11f1e3
ffff800000803a23:	00 00 00 
ffff800000803a26:	4c 01 d8             	add    rax,r11
ffff800000803a29:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:581
    if(num==-1)return -1;
ffff800000803a2c:	83 7d fc ff          	cmp    DWORD PTR [rbp-0x4],0xffffffff
ffff800000803a30:	75 07                	jne    ffff800000803a39 <get_phyaddr+0x2c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:581 (discriminator 1)
ffff800000803a32:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000803a37:	eb 06                	jmp    ffff800000803a3f <get_phyaddr+0x32>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:582
    return num*0x1000;
ffff800000803a39:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000803a3c:	c1 e0 0c             	shl    eax,0xc
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:583
}
ffff800000803a3f:	5d                   	pop    rbp
ffff800000803a40:	c3                   	ret    

ffff800000803a41 <set_page_item>:
set_page_item():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:586

void set_page_item(page_item *item_addr,int phy_addr,int attr)
{
ffff800000803a41:	f3 0f 1e fa          	endbr64 
ffff800000803a45:	55                   	push   rbp
ffff800000803a46:	48 89 e5             	mov    rbp,rsp
ffff800000803a49:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000803a49 <set_page_item+0x8>
ffff800000803a50:	49 bb af f1 11 00 00 	movabs r11,0x11f1af
ffff800000803a57:	00 00 00 
ffff800000803a5a:	4c 01 d8             	add    rax,r11
ffff800000803a5d:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000803a61:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
ffff800000803a64:	89 55 f0             	mov    DWORD PTR [rbp-0x10],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:587
    *item_addr=0;
ffff800000803a67:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803a6b:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:588
    *item_addr|=phy_addr&0xfffff000;
ffff800000803a72:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803a76:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803a79:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffff800000803a7c:	89 c0                	mov    eax,eax
ffff800000803a7e:	25 00 f0 ff ff       	and    eax,0xfffff000
ffff800000803a83:	48 09 c2             	or     rdx,rax
ffff800000803a86:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803a8a:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:589
    *item_addr|=attr;
ffff800000803a8d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803a91:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803a94:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
ffff800000803a97:	48 98                	cdqe   
ffff800000803a99:	48 09 c2             	or     rdx,rax
ffff800000803a9c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803aa0:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:590
}
ffff800000803aa3:	90                   	nop
ffff800000803aa4:	5d                   	pop    rbp
ffff800000803aa5:	c3                   	ret    

ffff800000803aa6 <set_1gb_pdpt>:
set_1gb_pdpt():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:592
void set_1gb_pdpt(page_item* ppdpt,int pa,unsigned int extra_attr)
{
ffff800000803aa6:	f3 0f 1e fa          	endbr64 
ffff800000803aaa:	55                   	push   rbp
ffff800000803aab:	48 89 e5             	mov    rbp,rsp
ffff800000803aae:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000803aae <set_1gb_pdpt+0x8>
ffff800000803ab5:	49 bb 4a f1 11 00 00 	movabs r11,0x11f14a
ffff800000803abc:	00 00 00 
ffff800000803abf:	4c 01 d8             	add    rax,r11
ffff800000803ac2:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000803ac6:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
ffff800000803ac9:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:593
    *ppdpt=0;
ffff800000803acc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803ad0:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:594
    *ppdpt|=PAGE_PRESENT|PDPTE_1GB|extra_attr;
ffff800000803ad7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803adb:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803ade:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000803ae1:	0c 81                	or     al,0x81
ffff800000803ae3:	89 c0                	mov    eax,eax
ffff800000803ae5:	48 09 c2             	or     rdx,rax
ffff800000803ae8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803aec:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:595
    unsigned int hipa=pa&0xffffc0000000ul;
ffff800000803aef:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000803af2:	25 00 00 00 c0       	and    eax,0xc0000000
ffff800000803af7:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:596
    *ppdpt|=hipa;
ffff800000803afa:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803afe:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803b01:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000803b04:	48 09 c2             	or     rdx,rax
ffff800000803b07:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803b0b:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:597
}
ffff800000803b0e:	90                   	nop
ffff800000803b0f:	5d                   	pop    rbp
ffff800000803b10:	c3                   	ret    

ffff800000803b11 <set_2mb_pde>:
set_2mb_pde():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:599
void set_2mb_pde(page_item *pde, int pa, int extra_attr)
{
ffff800000803b11:	f3 0f 1e fa          	endbr64 
ffff800000803b15:	55                   	push   rbp
ffff800000803b16:	48 89 e5             	mov    rbp,rsp
ffff800000803b19:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000803b19 <set_2mb_pde+0x8>
ffff800000803b20:	49 bb df f0 11 00 00 	movabs r11,0x11f0df
ffff800000803b27:	00 00 00 
ffff800000803b2a:	4c 01 d8             	add    rax,r11
ffff800000803b2d:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000803b31:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
ffff800000803b34:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:600
    *pde=0;
ffff800000803b37:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803b3b:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:601
    *pde|=PAGE_PRESENT|PAGE_4MB_PAGE|PDE_4MB_PAT|extra_attr;
ffff800000803b42:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803b46:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803b49:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000803b4c:	0d 81 10 00 00       	or     eax,0x1081
ffff800000803b51:	48 98                	cdqe   
ffff800000803b53:	48 09 c2             	or     rdx,rax
ffff800000803b56:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803b5a:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:602
    unsigned int hipa=pa&0xffc00000;
ffff800000803b5d:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000803b60:	25 00 00 c0 ff       	and    eax,0xffc00000
ffff800000803b65:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:603
    *pde|=hipa;
ffff800000803b68:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803b6c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803b6f:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000803b72:	48 09 c2             	or     rdx,rax
ffff800000803b75:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803b79:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:604
}
ffff800000803b7c:	90                   	nop
ffff800000803b7d:	5d                   	pop    rbp
ffff800000803b7e:	c3                   	ret    

ffff800000803b7f <req_page_at>:
req_page_at():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:625
        page_map[i]&=(u32)(1<<j);
    return ret;
} */
//在bitmap申请指定的页面,base默认0x1000对齐
addr_t req_page_at(addr_t base,int pgn)
{
ffff800000803b7f:	f3 0f 1e fa          	endbr64 
ffff800000803b83:	55                   	push   rbp
ffff800000803b84:	48 89 e5             	mov    rbp,rsp
ffff800000803b87:	41 57                	push   r15
ffff800000803b89:	53                   	push   rbx
ffff800000803b8a:	48 83 ec 20          	sub    rsp,0x20
ffff800000803b8e:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000803b8e <req_page_at+0xf>
ffff800000803b95:	49 bb 6a f0 11 00 00 	movabs r11,0x11f06a
ffff800000803b9c:	00 00 00 
ffff800000803b9f:	4c 01 db             	add    rbx,r11
ffff800000803ba2:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000803ba6:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:626
    if(base==0)//不指定地址
ffff800000803ba9:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff800000803bae:	75 32                	jne    ffff800000803be2 <req_page_at+0x63>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:628
    {
        return get_phyaddr(req_a_page());
ffff800000803bb0:	49 89 df             	mov    r15,rbx
ffff800000803bb3:	b8 00 00 00 00       	mov    eax,0x0
ffff800000803bb8:	48 ba 61 05 ee ff ff 	movabs rdx,0xffffffffffee0561
ffff800000803bbf:	ff ff ff 
ffff800000803bc2:	48 01 da             	add    rdx,rbx
ffff800000803bc5:	ff d2                	call   rdx
ffff800000803bc7:	89 c7                	mov    edi,eax
ffff800000803bc9:	49 89 df             	mov    r15,rbx
ffff800000803bcc:	48 b8 15 0e ee ff ff 	movabs rax,0xffffffffffee0e15
ffff800000803bd3:	ff ff ff 
ffff800000803bd6:	48 01 d8             	add    rax,rbx
ffff800000803bd9:	ff d0                	call   rax
ffff800000803bdb:	48 98                	cdqe   
ffff800000803bdd:	e9 c6 00 00 00       	jmp    ffff800000803ca8 <req_page_at+0x129>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:630
    }
    if(!is_pgs_ava(base,pgn))return -1;//先检查
ffff800000803be2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000803be6:	89 c2                	mov    edx,eax
ffff800000803be8:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000803beb:	89 c6                	mov    esi,eax
ffff800000803bed:	89 d7                	mov    edi,edx
ffff800000803bef:	49 89 df             	mov    r15,rbx
ffff800000803bf2:	48 b8 8a 11 ee ff ff 	movabs rax,0xffffffffffee118a
ffff800000803bf9:	ff ff ff 
ffff800000803bfc:	48 01 d8             	add    rax,rbx
ffff800000803bff:	ff d0                	call   rax
ffff800000803c01:	85 c0                	test   eax,eax
ffff800000803c03:	75 0c                	jne    ffff800000803c11 <req_page_at+0x92>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:630 (discriminator 1)
ffff800000803c05:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff800000803c0c:	e9 97 00 00 00       	jmp    ffff800000803ca8 <req_page_at+0x129>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:631
    int pgni=base/4096;
ffff800000803c11:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000803c15:	48 c1 e8 0c          	shr    rax,0xc
ffff800000803c19:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:632
    int pgi=pgni/32;
ffff800000803c1c:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000803c1f:	8d 50 1f             	lea    edx,[rax+0x1f]
ffff800000803c22:	85 c0                	test   eax,eax
ffff800000803c24:	0f 48 c2             	cmovs  eax,edx
ffff800000803c27:	c1 f8 05             	sar    eax,0x5
ffff800000803c2a:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:633
    int pgj=pgni%32;
ffff800000803c2d:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000803c30:	99                   	cdq    
ffff800000803c31:	c1 ea 1b             	shr    edx,0x1b
ffff800000803c34:	01 d0                	add    eax,edx
ffff800000803c36:	83 e0 1f             	and    eax,0x1f
ffff800000803c39:	29 d0                	sub    eax,edx
ffff800000803c3b:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:634
    for(int i=0;i<pgn;i++)
ffff800000803c3e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000803c45:	eb 54                	jmp    ffff800000803c9b <req_page_at+0x11c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:636 (discriminator 3)
    {
        page_map[i]|=(1<<pgj);
ffff800000803c47:	48 b8 50 fe ff ff ff 	movabs rax,0xfffffffffffffe50
ffff800000803c4e:	ff ff ff 
ffff800000803c51:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803c55:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000803c58:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803c5b:	48 98                	cdqe   
ffff800000803c5d:	48 c1 e0 02          	shl    rax,0x2
ffff800000803c61:	48 01 d0             	add    rax,rdx
ffff800000803c64:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000803c66:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000803c69:	be 01 00 00 00       	mov    esi,0x1
ffff800000803c6e:	89 c1                	mov    ecx,eax
ffff800000803c70:	d3 e6                	shl    esi,cl
ffff800000803c72:	89 f0                	mov    eax,esi
ffff800000803c74:	89 c6                	mov    esi,eax
ffff800000803c76:	48 b8 50 fe ff ff ff 	movabs rax,0xfffffffffffffe50
ffff800000803c7d:	ff ff ff 
ffff800000803c80:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000803c84:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000803c87:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803c8a:	48 98                	cdqe   
ffff800000803c8c:	48 c1 e0 02          	shl    rax,0x2
ffff800000803c90:	48 01 c8             	add    rax,rcx
ffff800000803c93:	09 f2                	or     edx,esi
ffff800000803c95:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:634 (discriminator 3)
    for(int i=0;i<pgn;i++)
ffff800000803c97:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:634 (discriminator 1)
ffff800000803c9b:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803c9e:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
ffff800000803ca1:	7c a4                	jl     ffff800000803c47 <req_page_at+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:638
    }
    return 0;
ffff800000803ca3:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:640

}
ffff800000803ca8:	48 83 c4 20          	add    rsp,0x20
ffff800000803cac:	5b                   	pop    rbx
ffff800000803cad:	41 5f                	pop    r15
ffff800000803caf:	5d                   	pop    rbp
ffff800000803cb0:	c3                   	ret    

ffff800000803cb1 <chk_vm>:
chk_vm():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:642
int chk_vm(int base, int pgn)
{
ffff800000803cb1:	f3 0f 1e fa          	endbr64 
ffff800000803cb5:	55                   	push   rbp
ffff800000803cb6:	48 89 e5             	mov    rbp,rsp
ffff800000803cb9:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000803cb9 <chk_vm+0x8>
ffff800000803cc0:	49 bb 3f ef 11 00 00 	movabs r11,0x11ef3f
ffff800000803cc7:	00 00 00 
ffff800000803cca:	4c 01 d8             	add    rax,r11
ffff800000803ccd:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff800000803cd0:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:643
    int *pdet=0;
ffff800000803cd3:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff800000803cda:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:644
    __asm__ volatile("mov %%cr3,%0":"=r"(pdet));
ffff800000803cdb:	0f 20 d8             	mov    rax,cr3
ffff800000803cde:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:645
    int *pt=pdet[base/PAGE_INDEX_SIZE]&0xfffff000;
ffff800000803ce2:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803ce5:	8d 90 ff ff 1f 00    	lea    edx,[rax+0x1fffff]
ffff800000803ceb:	85 c0                	test   eax,eax
ffff800000803ced:	0f 48 c2             	cmovs  eax,edx
ffff800000803cf0:	c1 f8 15             	sar    eax,0x15
ffff800000803cf3:	48 98                	cdqe   
ffff800000803cf5:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff800000803cfc:	00 
ffff800000803cfd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803d01:	48 01 d0             	add    rax,rdx
ffff800000803d04:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000803d06:	89 c0                	mov    eax,eax
ffff800000803d08:	25 00 f0 ff ff       	and    eax,0xfffff000
ffff800000803d0d:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:646
    if(!(pdet[base/PAGE_INDEX_SIZE]&PAGE_PRESENT)||\
ffff800000803d11:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803d14:	8d 90 ff ff 1f 00    	lea    edx,[rax+0x1fffff]
ffff800000803d1a:	85 c0                	test   eax,eax
ffff800000803d1c:	0f 48 c2             	cmovs  eax,edx
ffff800000803d1f:	c1 f8 15             	sar    eax,0x15
ffff800000803d22:	48 98                	cdqe   
ffff800000803d24:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff800000803d2b:	00 
ffff800000803d2c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803d30:	48 01 d0             	add    rax,rdx
ffff800000803d33:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000803d35:	83 e0 01             	and    eax,0x1
ffff800000803d38:	85 c0                	test   eax,eax
ffff800000803d3a:	74 38                	je     ffff800000803d74 <chk_vm+0xc3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:647 (discriminator 1)
    !(pt[base%PAGE_INDEX_SIZE/PAGE_SIZE]&PAGE_PRESENT))
ffff800000803d3c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803d3f:	99                   	cdq    
ffff800000803d40:	c1 ea 0b             	shr    edx,0xb
ffff800000803d43:	01 d0                	add    eax,edx
ffff800000803d45:	25 ff ff 1f 00       	and    eax,0x1fffff
ffff800000803d4a:	29 d0                	sub    eax,edx
ffff800000803d4c:	8d 90 ff 0f 00 00    	lea    edx,[rax+0xfff]
ffff800000803d52:	85 c0                	test   eax,eax
ffff800000803d54:	0f 48 c2             	cmovs  eax,edx
ffff800000803d57:	c1 f8 0c             	sar    eax,0xc
ffff800000803d5a:	48 98                	cdqe   
ffff800000803d5c:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff800000803d63:	00 
ffff800000803d64:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000803d68:	48 01 d0             	add    rax,rdx
ffff800000803d6b:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000803d6d:	83 e0 01             	and    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:646 (discriminator 1)
    if(!(pdet[base/PAGE_INDEX_SIZE]&PAGE_PRESENT)||\
ffff800000803d70:	85 c0                	test   eax,eax
ffff800000803d72:	75 07                	jne    ffff800000803d7b <chk_vm+0xca>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:649
    {
        return -1;
ffff800000803d74:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000803d79:	eb 05                	jmp    ffff800000803d80 <chk_vm+0xcf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:651
    }
    return 0;
ffff800000803d7b:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:652
}
ffff800000803d80:	5d                   	pop    rbp
ffff800000803d81:	c3                   	ret    

ffff800000803d82 <is_pgs_ava>:
is_pgs_ava():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:655
//查看指定区域的页内存是否可用
int is_pgs_ava(int base,int pgn)
{
ffff800000803d82:	f3 0f 1e fa          	endbr64 
ffff800000803d86:	55                   	push   rbp
ffff800000803d87:	48 89 e5             	mov    rbp,rsp
ffff800000803d8a:	41 57                	push   r15
ffff800000803d8c:	53                   	push   rbx
ffff800000803d8d:	48 83 ec 20          	sub    rsp,0x20
ffff800000803d91:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000803d91 <is_pgs_ava+0xf>
ffff800000803d98:	49 bb 67 ee 11 00 00 	movabs r11,0x11ee67
ffff800000803d9f:	00 00 00 
ffff800000803da2:	4c 01 db             	add    rbx,r11
ffff800000803da5:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff800000803da8:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:656
    int pgi=base/4096;
ffff800000803dab:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000803dae:	8d 90 ff 0f 00 00    	lea    edx,[rax+0xfff]
ffff800000803db4:	85 c0                	test   eax,eax
ffff800000803db6:	0f 48 c2             	cmovs  eax,edx
ffff800000803db9:	c1 f8 0c             	sar    eax,0xc
ffff800000803dbc:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:657
    for(int i=0;i<pgn;i++)
ffff800000803dbf:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000803dc6:	eb 2b                	jmp    ffff800000803df3 <is_pgs_ava+0x71>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:659
    {
        if(check_page(pgi+i)!=0)return 0;
ffff800000803dc8:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000803dcb:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803dce:	01 d0                	add    eax,edx
ffff800000803dd0:	89 c7                	mov    edi,eax
ffff800000803dd2:	49 89 df             	mov    r15,rbx
ffff800000803dd5:	48 b8 99 0d ee ff ff 	movabs rax,0xffffffffffee0d99
ffff800000803ddc:	ff ff ff 
ffff800000803ddf:	48 01 d8             	add    rax,rbx
ffff800000803de2:	ff d0                	call   rax
ffff800000803de4:	85 c0                	test   eax,eax
ffff800000803de6:	74 07                	je     ffff800000803def <is_pgs_ava+0x6d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:659 (discriminator 1)
ffff800000803de8:	b8 00 00 00 00       	mov    eax,0x0
ffff800000803ded:	eb 11                	jmp    ffff800000803e00 <is_pgs_ava+0x7e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:657 (discriminator 2)
    for(int i=0;i<pgn;i++)
ffff800000803def:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:657 (discriminator 1)
ffff800000803df3:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000803df6:	3b 45 d8             	cmp    eax,DWORD PTR [rbp-0x28]
ffff800000803df9:	7c cd                	jl     ffff800000803dc8 <is_pgs_ava+0x46>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:661
    }
    return 1;
ffff800000803dfb:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/memory.c:663

}
ffff800000803e00:	48 83 c4 20          	add    rsp,0x20
ffff800000803e04:	5b                   	pop    rbx
ffff800000803e05:	41 5f                	pop    r15
ffff800000803e07:	5d                   	pop    rbp
ffff800000803e08:	c3                   	ret    

ffff800000803e09 <make_dentry>:
make_dentry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:25
};
struct dir_entry_operations dev_dir_dops={

};
static int devd_fd=-1;
void make_dentry(struct dir_entry* d,char* name,int namelen,struct dir_entry* parent,struct dir_entry_operations* dops){
ffff800000803e09:	f3 0f 1e fa          	endbr64 
ffff800000803e0d:	55                   	push   rbp
ffff800000803e0e:	48 89 e5             	mov    rbp,rsp
ffff800000803e11:	41 57                	push   r15
ffff800000803e13:	48 83 ec 78          	sub    rsp,0x78
ffff800000803e17:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000803e17 <make_dentry+0xe>
ffff800000803e1e:	49 bb e1 ed 11 00 00 	movabs r11,0x11ede1
ffff800000803e25:	00 00 00 
ffff800000803e28:	4c 01 d8             	add    rax,r11
ffff800000803e2b:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
ffff800000803e2f:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
ffff800000803e33:	89 55 9c             	mov    DWORD PTR [rbp-0x64],edx
ffff800000803e36:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
ffff800000803e3a:	4c 89 45 88          	mov    QWORD PTR [rbp-0x78],r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:26
    strcpy(d->name,name);
ffff800000803e3e:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff800000803e42:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000803e45:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
ffff800000803e49:	48 89 ce             	mov    rsi,rcx
ffff800000803e4c:	48 89 d7             	mov    rdi,rdx
ffff800000803e4f:	49 89 c7             	mov    r15,rax
ffff800000803e52:	48 ba de 1e ef ff ff 	movabs rdx,0xffffffffffef1ede
ffff800000803e59:	ff ff ff 
ffff800000803e5c:	48 01 c2             	add    rdx,rax
ffff800000803e5f:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:27
    d->name_length=namelen;
ffff800000803e61:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000803e65:	8b 55 9c             	mov    edx,DWORD PTR [rbp-0x64]
ffff800000803e68:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:29
    //添加dentry的操作方法，这样能够查找设备
    d->dir_ops=dops;
ffff800000803e6b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000803e6f:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
ffff800000803e73:	48 89 50 60          	mov    QWORD PTR [rax+0x60],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:30
    list_init(&d->subdirs_list);
ffff800000803e77:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000803e7b:	48 83 c0 28          	add    rax,0x28
ffff800000803e7f:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    struct List * next;
};

__attribute__((always_inline)) inline void list_init(struct List * list)
{
    list->prev = NULL;
ffff800000803e83:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000803e87:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff800000803e8e:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000803e92:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff800000803e99:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff800000803e9a:	90                   	nop
make_dentry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:31
    list_init(&d->child_node);
ffff800000803e9b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000803e9f:	48 83 c0 10          	add    rax,0x10
ffff800000803ea3:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff800000803ea7:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000803eab:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff800000803eb2:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000803eb6:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff800000803ebd:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff800000803ebe:	90                   	nop
make_dentry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:32
    d->child_node.data=d;
ffff800000803ebf:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000803ec3:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff800000803ec7:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:33
    d->parent=parent;
ffff800000803ecb:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000803ecf:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
ffff800000803ed3:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:34
    list_add(&parent->subdirs_list,&d->child_node);
ffff800000803ed7:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000803edb:	48 83 c0 10          	add    rax,0x10
ffff800000803edf:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
ffff800000803ee3:	48 83 c2 28          	add    rdx,0x28
ffff800000803ee7:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff800000803eeb:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:33
        new->next->prev = new;
    entry->next = new;
}
__attribute__((always_inline)) inline void list_add(struct List * entry,struct List * new)	////add to the tail of the link
{
    struct List* p=entry;
ffff800000803eef:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000803ef3:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:34
    for(;p->next&&p->next!=p;p=p->next){
ffff800000803ef7:	eb 21                	jmp    ffff800000803f1a <make_dentry+0x111>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:35
        if(p->data==new->data)
ffff800000803ef9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000803efd:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff800000803f01:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803f05:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000803f09:	48 39 c2             	cmp    rdx,rax
ffff800000803f0c:	74 7c                	je     ffff800000803f8a <make_dentry+0x181>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:34
    for(;p->next&&p->next!=p;p=p->next){
ffff800000803f0e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000803f12:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000803f16:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffff800000803f1a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000803f1e:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000803f22:	48 85 c0             	test   rax,rax
ffff800000803f25:	74 0e                	je     ffff800000803f35 <make_dentry+0x12c>
ffff800000803f27:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000803f2b:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000803f2f:	48 39 45 d8          	cmp    QWORD PTR [rbp-0x28],rax
ffff800000803f33:	75 c4                	jne    ffff800000803ef9 <make_dentry+0xf0>
ffff800000803f35:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000803f39:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
ffff800000803f3d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000803f41:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff800000803f45:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000803f49:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff800000803f4d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803f51:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff800000803f55:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803f59:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000803f5d:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff800000803f60:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803f64:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000803f68:	48 85 c0             	test   rax,rax
ffff800000803f6b:	74 0f                	je     ffff800000803f7c <make_dentry+0x173>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff800000803f6d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000803f71:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000803f75:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000803f79:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:29
    entry->next = new;
ffff800000803f7c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000803f80:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000803f84:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff800000803f88:	eb 01                	jmp    ffff800000803f8b <make_dentry+0x182>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:36
            return;
ffff800000803f8a:	90                   	nop
make_dentry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:35
}
ffff800000803f8b:	90                   	nop
ffff800000803f8c:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000803f90:	c9                   	leave  
ffff800000803f91:	c3                   	ret    

ffff800000803f92 <make_inode>:
make_inode():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:36
void make_inode(struct index_node* i,struct index_node_operations* iops,struct file_operations* fops,unsigned long attr,struct super_block* sb){
ffff800000803f92:	f3 0f 1e fa          	endbr64 
ffff800000803f96:	55                   	push   rbp
ffff800000803f97:	48 89 e5             	mov    rbp,rsp
ffff800000803f9a:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000803f9a <make_inode+0x8>
ffff800000803fa1:	49 bb 5e ec 11 00 00 	movabs r11,0x11ec5e
ffff800000803fa8:	00 00 00 
ffff800000803fab:	4c 01 d8             	add    rax,r11
ffff800000803fae:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000803fb2:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000803fb6:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff800000803fba:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
ffff800000803fbe:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:37
    i->f_ops=fops;
ffff800000803fc2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803fc6:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000803fca:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:38
    i->attribute=attr;
ffff800000803fce:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803fd2:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000803fd6:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:39
    i->sb=sb;
ffff800000803fda:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803fde:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000803fe2:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:40
    i->file_size=0;
ffff800000803fe6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803fea:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:41
    i->inode_ops=iops;
ffff800000803ff1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000803ff5:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff800000803ff9:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:42
}
ffff800000803ffd:	90                   	nop
ffff800000803ffe:	5d                   	pop    rbp
ffff800000803fff:	c3                   	ret    

ffff800000804000 <make_devf>:
make_devf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:47
/*
 * 创建/dev文件夹，添加必要的设备文件。
 * 这个/dev文件夹的dentry和inode等数据由devman管理，根文件系统切换时，这个文件夹会跟着挂载到新文件系统的根目录下。
 * */
void make_devf(struct dir_entry* d,struct index_node* i,char* name,struct dir_entry* dir_dev,struct file_operations* fops){
ffff800000804000:	f3 0f 1e fa          	endbr64 
ffff800000804004:	55                   	push   rbp
ffff800000804005:	48 89 e5             	mov    rbp,rsp
ffff800000804008:	41 57                	push   r15
ffff80000080400a:	53                   	push   rbx
ffff80000080400b:	48 83 ec 30          	sub    rsp,0x30
ffff80000080400f:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080400f <make_devf+0xf>
ffff800000804016:	49 bb e9 eb 11 00 00 	movabs r11,0x11ebe9
ffff80000080401d:	00 00 00 
ffff800000804020:	4c 01 db             	add    rbx,r11
ffff800000804023:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000804027:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080402b:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffff80000080402f:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
ffff800000804033:	4c 89 45 c8          	mov    QWORD PTR [rbp-0x38],r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:48
    make_dentry(d,name, strlen(name),dir_dev,&dev_dir_dops);
ffff800000804037:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080403b:	48 89 c7             	mov    rdi,rax
ffff80000080403e:	49 89 df             	mov    r15,rbx
ffff800000804041:	48 b8 ab 21 ef ff ff 	movabs rax,0xffffffffffef21ab
ffff800000804048:	ff ff ff 
ffff80000080404b:	48 01 d8             	add    rax,rbx
ffff80000080404e:	ff d0                	call   rax
ffff800000804050:	89 c7                	mov    edi,eax
ffff800000804052:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000804056:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
ffff80000080405a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080405e:	48 b9 a0 ff ff ff ff 	movabs rcx,0xffffffffffffffa0
ffff800000804065:	ff ff ff 
ffff800000804068:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff80000080406c:	49 89 c8             	mov    r8,rcx
ffff80000080406f:	48 89 d1             	mov    rcx,rdx
ffff800000804072:	89 fa                	mov    edx,edi
ffff800000804074:	48 89 c7             	mov    rdi,rax
ffff800000804077:	49 89 df             	mov    r15,rbx
ffff80000080407a:	48 b8 11 12 ee ff ff 	movabs rax,0xffffffffffee1211
ffff800000804081:	ff ff ff 
ffff800000804084:	48 01 d8             	add    rax,rbx
ffff800000804087:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:49
    d->dir_inode=i;
ffff800000804089:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080408d:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000804091:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:50
    make_inode(i,dir_dev->dir_inode->inode_ops,fops,FS_ATTR_DEVICE,root_sb);
ffff800000804095:	48 b8 90 fd ff ff ff 	movabs rax,0xfffffffffffffd90
ffff80000080409c:	ff ff ff 
ffff80000080409f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008040a3:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008040a6:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008040aa:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008040ae:	48 8b 70 30          	mov    rsi,QWORD PTR [rax+0x30]
ffff8000008040b2:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff8000008040b6:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008040ba:	49 89 c8             	mov    r8,rcx
ffff8000008040bd:	b9 04 00 00 00       	mov    ecx,0x4
ffff8000008040c2:	48 89 c7             	mov    rdi,rax
ffff8000008040c5:	49 89 df             	mov    r15,rbx
ffff8000008040c8:	48 b8 9a 13 ee ff ff 	movabs rax,0xffffffffffee139a
ffff8000008040cf:	ff ff ff 
ffff8000008040d2:	48 01 d8             	add    rax,rbx
ffff8000008040d5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:52
    // list_add(&dir_dev->subdirs_list,&d->child_node);//添加到/dev下
}
ffff8000008040d7:	90                   	nop
ffff8000008040d8:	48 83 c4 30          	add    rsp,0x30
ffff8000008040dc:	5b                   	pop    rbx
ffff8000008040dd:	41 5f                	pop    r15
ffff8000008040df:	5d                   	pop    rbp
ffff8000008040e0:	c3                   	ret    

ffff8000008040e1 <devfs_lookup>:
devfs_lookup():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:53
struct dir_entry* devfs_lookup(struct index_node* parent_inode,struct dir_entry* dest_dentry){
ffff8000008040e1:	f3 0f 1e fa          	endbr64 
ffff8000008040e5:	55                   	push   rbp
ffff8000008040e6:	48 89 e5             	mov    rbp,rsp
ffff8000008040e9:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008040e9 <devfs_lookup+0x8>
ffff8000008040f0:	49 bb 0f eb 11 00 00 	movabs r11,0x11eb0f
ffff8000008040f7:	00 00 00 
ffff8000008040fa:	4c 01 d8             	add    rax,r11
ffff8000008040fd:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000804101:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:55
    //TODO 待完成
}
ffff800000804105:	90                   	nop
ffff800000804106:	5d                   	pop    rbp
ffff800000804107:	c3                   	ret    

ffff800000804108 <devfs_read_superblock>:
devfs_read_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:68
};
struct super_block_operations devfs_sops={
    //TODO 待完成
    
};
struct super_block* devfs_read_superblock(struct Disk_Partition_Table_Entry *PDTE,void *buf){
ffff800000804108:	f3 0f 1e fa          	endbr64 
ffff80000080410c:	55                   	push   rbp
ffff80000080410d:	48 89 e5             	mov    rbp,rsp
ffff800000804110:	41 57                	push   r15
ffff800000804112:	53                   	push   rbx
ffff800000804113:	48 83 ec 30          	sub    rsp,0x30
ffff800000804117:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000804117 <devfs_read_superblock+0xf>
ffff80000080411e:	49 bb e1 ea 11 00 00 	movabs r11,0x11eae1
ffff800000804125:	00 00 00 
ffff800000804128:	4c 01 db             	add    rbx,r11
ffff80000080412b:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff80000080412f:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:69
    struct super_block* sb=kmalloc(0,PAGE_4K_SIZE);
ffff800000804133:	be 00 10 00 00       	mov    esi,0x1000
ffff800000804138:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080413d:	49 89 df             	mov    r15,rbx
ffff800000804140:	48 b8 ce 07 ee ff ff 	movabs rax,0xffffffffffee07ce
ffff800000804147:	ff ff ff 
ffff80000080414a:	48 01 d8             	add    rax,rbx
ffff80000080414d:	ff d0                	call   rax
ffff80000080414f:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:70
    sb->dev=0;//不存在具体的存储设备
ffff800000804153:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804157:	66 c7 40 10 00 00    	mov    WORD PTR [rax+0x10],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:71
    sb->p_dev=0;
ffff80000080415d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804161:	48 c7 40 18 00 00 00 	mov    QWORD PTR [rax+0x18],0x0
ffff800000804168:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:72
    sb->root=sb+1;
ffff800000804169:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080416d:	48 8d 50 28          	lea    rdx,[rax+0x28]
ffff800000804171:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804175:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:73
    sb->sb_ops=&devfs_sops;
ffff800000804178:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080417c:	48 ba a8 fd ff ff ff 	movabs rdx,0xfffffffffffffda8
ffff800000804183:	ff ff ff 
ffff800000804186:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080418a:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:75

    sb->root->dir_inode=sb->root+1;
ffff80000080418e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804192:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804195:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804199:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080419c:	48 83 c2 68          	add    rdx,0x68
ffff8000008041a0:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:76
    sb->root->dir_ops=&devfs_dops;
ffff8000008041a4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008041a8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008041ab:	48 ba d8 fe ff ff ff 	movabs rdx,0xfffffffffffffed8
ffff8000008041b2:	ff ff ff 
ffff8000008041b5:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff8000008041b9:	48 89 50 60          	mov    QWORD PTR [rax+0x60],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:77
    list_init(&sb->root->child_node);
ffff8000008041bd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008041c1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008041c4:	48 83 c0 10          	add    rax,0x10
ffff8000008041c8:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff8000008041cc:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008041d0:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff8000008041d7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008041db:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff8000008041e2:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff8000008041e3:	90                   	nop
devfs_read_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:78
    list_init(&sb->root->subdirs_list);
ffff8000008041e4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008041e8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008041eb:	48 83 c0 28          	add    rax,0x28
ffff8000008041ef:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff8000008041f3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008041f7:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff8000008041fe:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804202:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff800000804209:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000080420a:	90                   	nop
devfs_read_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:79
    sb->root->name="dev";
ffff80000080420b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080420f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804212:	48 ba de d3 ff ff ff 	movabs rdx,0xffffffffffffd3de
ffff800000804219:	ff ff ff 
ffff80000080421c:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000804220:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:80
    sb->root->name_length=3;
ffff800000804223:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804227:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080422a:	c7 40 08 03 00 00 00 	mov    DWORD PTR [rax+0x8],0x3
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:82

    sb->root->dir_inode->dev=0;
ffff800000804231:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804235:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804238:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080423c:	66 c7 40 18 00 00    	mov    WORD PTR [rax+0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:83
    sb->root->dir_inode->inode_ops=&devfs_iops;
ffff800000804242:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804246:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804249:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080424d:	48 ba 68 ff ff ff ff 	movabs rdx,0xffffffffffffff68
ffff800000804254:	ff ff ff 
ffff800000804257:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080425b:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:84
    sb->root->dir_inode->sb=sb;
ffff80000080425f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804263:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804266:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080426a:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080426e:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:85
    sb->root->dir_inode->file_size=0;
ffff800000804272:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804276:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804279:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080427d:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:86
    sb->root->dir_inode->f_ops=&devfs_fops;
ffff800000804284:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804288:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080428b:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080428f:	48 ba 78 fd ff ff ff 	movabs rdx,0xfffffffffffffd78
ffff800000804296:	ff ff ff 
ffff800000804299:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080429d:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:87
    sb->root->dir_inode->blocks=0;
ffff8000008042a1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008042a5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008042a8:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008042ac:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
ffff8000008042b3:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:88
    sb->root->dir_inode->attribute|=FS_ATTR_DIR;
ffff8000008042b4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008042b8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008042bb:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008042bf:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff8000008042c3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008042c7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008042ca:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008042ce:	48 83 ca 02          	or     rdx,0x2
ffff8000008042d2:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:89
    sb->root->dir_inode->private_index_info=0;
ffff8000008042d6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008042da:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008042dd:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008042e1:	48 c7 40 38 00 00 00 	mov    QWORD PTR [rax+0x38],0x0
ffff8000008042e8:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:91

    return sb;
ffff8000008042e9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:92
}
ffff8000008042ed:	48 83 c4 30          	add    rsp,0x30
ffff8000008042f1:	5b                   	pop    rbx
ffff8000008042f2:	41 5f                	pop    r15
ffff8000008042f4:	5d                   	pop    rbp
ffff8000008042f5:	c3                   	ret    

ffff8000008042f6 <init_devfs>:
init_devfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:101
    .name="devfs",
    .next=0,
    .read_superblock=devfs_read_superblock
};
int init_devfs()
{
ffff8000008042f6:	f3 0f 1e fa          	endbr64 
ffff8000008042fa:	55                   	push   rbp
ffff8000008042fb:	48 89 e5             	mov    rbp,rsp
ffff8000008042fe:	41 57                	push   r15
ffff800000804300:	53                   	push   rbx
ffff800000804301:	48 83 ec 30          	sub    rsp,0x30
ffff800000804305:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000804305 <init_devfs+0xf>
ffff80000080430c:	49 bb f3 e8 11 00 00 	movabs r11,0x11e8f3
ffff800000804313:	00 00 00 
ffff800000804316:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:120
    make_dentry(dmnt,"mnt",3,root_sb->root,root_sb->root->dir_ops);
    dmnt->dir_inode=imnt;
    make_inode(imnt,root_sb->root->dir_inode->inode_ops,root_sb->root->dir_inode->f_ops,FS_ATTR_DIR,root_sb);
    imnt->private_index_info=dmnt; */

    register_filesystem(&fs_devfs);
ffff800000804319:	48 b8 e0 ff ff ff ff 	movabs rax,0xffffffffffffffe0
ffff800000804320:	ff ff ff 
ffff800000804323:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804327:	48 89 c7             	mov    rdi,rax
ffff80000080432a:	49 89 df             	mov    r15,rbx
ffff80000080432d:	48 b8 e5 a1 ee ff ff 	movabs rax,0xffffffffffeea1e5
ffff800000804334:	ff ff ff 
ffff800000804337:	48 01 d8             	add    rax,rbx
ffff80000080433a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:121
    struct super_block *sb_devfs=mount_fs("devfs",0,0);
ffff80000080433c:	ba 00 00 00 00       	mov    edx,0x0
ffff800000804341:	be 00 00 00 00       	mov    esi,0x0
ffff800000804346:	48 b8 e2 d3 ff ff ff 	movabs rax,0xffffffffffffd3e2
ffff80000080434d:	ff ff ff 
ffff800000804350:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000804354:	48 89 c7             	mov    rdi,rax
ffff800000804357:	49 89 df             	mov    r15,rbx
ffff80000080435a:	48 b8 00 a0 ee ff ff 	movabs rax,0xffffffffffeea000
ffff800000804361:	ff ff ff 
ffff800000804364:	48 01 d8             	add    rax,rbx
ffff800000804367:	ff d0                	call   rax
ffff800000804369:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:122
    ddev=path_walk("/dev",1);
ffff80000080436d:	be 01 00 00 00       	mov    esi,0x1
ffff800000804372:	48 b8 e8 d3 ff ff ff 	movabs rax,0xffffffffffffd3e8
ffff800000804379:	ff ff ff 
ffff80000080437c:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000804380:	48 89 c7             	mov    rdi,rax
ffff800000804383:	49 89 df             	mov    r15,rbx
ffff800000804386:	48 b8 b7 9b ee ff ff 	movabs rax,0xffffffffffee9bb7
ffff80000080438d:	ff ff ff 
ffff800000804390:	48 01 d8             	add    rax,rbx
ffff800000804393:	ff d0                	call   rax
ffff800000804395:	48 ba 60 ff ff ff ff 	movabs rdx,0xffffffffffffff60
ffff80000080439c:	ff ff ff 
ffff80000080439f:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff8000008043a3:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:123
    mount_fs_on(ddev,&fs_devfs);
ffff8000008043a6:	48 b8 60 ff ff ff ff 	movabs rax,0xffffffffffffff60
ffff8000008043ad:	ff ff ff 
ffff8000008043b0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008043b4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008043b7:	48 ba e0 ff ff ff ff 	movabs rdx,0xffffffffffffffe0
ffff8000008043be:	ff ff ff 
ffff8000008043c1:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff8000008043c5:	48 89 d6             	mov    rsi,rdx
ffff8000008043c8:	48 89 c7             	mov    rdi,rax
ffff8000008043cb:	49 89 df             	mov    r15,rbx
ffff8000008043ce:	48 b8 ad a0 ee ff ff 	movabs rax,0xffffffffffeea0ad
ffff8000008043d5:	ff ff ff 
ffff8000008043d8:	48 01 d8             	add    rax,rbx
ffff8000008043db:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:125
    
    struct dir_entry* rt_devfs=sb_devfs->root;
ffff8000008043dd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008043e1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008043e4:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:130

    
    //创建几个设备文件
    //console-framebuffer.c
    dconsole= (struct dir_entry *) kmalloc(0,PAGE_4K_SIZE);
ffff8000008043e8:	be 00 10 00 00       	mov    esi,0x1000
ffff8000008043ed:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008043f2:	49 89 df             	mov    r15,rbx
ffff8000008043f5:	48 b8 ce 07 ee ff ff 	movabs rax,0xffffffffffee07ce
ffff8000008043fc:	ff ff ff 
ffff8000008043ff:	48 01 d8             	add    rax,rbx
ffff800000804402:	ff d0                	call   rax
ffff800000804404:	48 ba b0 fe ff ff ff 	movabs rdx,0xfffffffffffffeb0
ffff80000080440b:	ff ff ff 
ffff80000080440e:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000804412:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:131
    struct index_node* iconsole=dconsole+1;
ffff800000804415:	48 b8 b0 fe ff ff ff 	movabs rax,0xfffffffffffffeb0
ffff80000080441c:	ff ff ff 
ffff80000080441f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804423:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804426:	48 83 c0 68          	add    rax,0x68
ffff80000080442a:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:132
    dconsole->name=iconsole+1;
ffff80000080442e:	48 b8 b0 fe ff ff ff 	movabs rax,0xfffffffffffffeb0
ffff800000804435:	ff ff ff 
ffff800000804438:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080443c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080443f:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000804443:	48 83 c2 40          	add    rdx,0x40
ffff800000804447:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:133
    iconsole->dev=0x10000;
ffff80000080444a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080444e:	66 c7 40 18 00 00    	mov    WORD PTR [rax+0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:134
    make_devf(dconsole,iconsole,"console",rt_devfs,&devfs_fops);
ffff800000804454:	48 b8 b0 fe ff ff ff 	movabs rax,0xfffffffffffffeb0
ffff80000080445b:	ff ff ff 
ffff80000080445e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804462:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804465:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000804469:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
ffff80000080446d:	48 b9 78 fd ff ff ff 	movabs rcx,0xfffffffffffffd78
ffff800000804474:	ff ff ff 
ffff800000804477:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff80000080447b:	49 89 c8             	mov    r8,rcx
ffff80000080447e:	48 89 d1             	mov    rcx,rdx
ffff800000804481:	48 ba ed d3 ff ff ff 	movabs rdx,0xffffffffffffd3ed
ffff800000804488:	ff ff ff 
ffff80000080448b:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff80000080448f:	48 89 c7             	mov    rdi,rax
ffff800000804492:	49 89 df             	mov    r15,rbx
ffff800000804495:	48 b8 08 14 ee ff ff 	movabs rax,0xffffffffffee1408
ffff80000080449c:	ff ff ff 
ffff80000080449f:	48 01 d8             	add    rax,rbx
ffff8000008044a2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:136
    //hd0-disk.c
    dhd0= (struct dir_entry *) kmalloc(0,PAGE_4K_SIZE);
ffff8000008044a4:	be 00 10 00 00       	mov    esi,0x1000
ffff8000008044a9:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008044ae:	49 89 df             	mov    r15,rbx
ffff8000008044b1:	48 b8 ce 07 ee ff ff 	movabs rax,0xffffffffffee07ce
ffff8000008044b8:	ff ff ff 
ffff8000008044bb:	48 01 d8             	add    rax,rbx
ffff8000008044be:	ff d0                	call   rax
ffff8000008044c0:	48 ba a0 fe ff ff ff 	movabs rdx,0xfffffffffffffea0
ffff8000008044c7:	ff ff ff 
ffff8000008044ca:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff8000008044ce:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:137
    struct index_node* ihd0=dhd0+1;
ffff8000008044d1:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff8000008044d8:	ff ff ff 
ffff8000008044db:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008044df:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008044e2:	48 83 c0 68          	add    rax,0x68
ffff8000008044e6:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:138
    dhd0->name=ihd0+1;
ffff8000008044ea:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff8000008044f1:	ff ff ff 
ffff8000008044f4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008044f8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008044fb:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff8000008044ff:	48 83 c2 40          	add    rdx,0x40
ffff800000804503:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:140
    extern int dev_hd;
    ihd0->dev=dev_hd<<8;
ffff800000804506:	48 b8 c8 fe ff ff ff 	movabs rax,0xfffffffffffffec8
ffff80000080450d:	ff ff ff 
ffff800000804510:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804514:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000804516:	c1 e0 08             	shl    eax,0x8
ffff800000804519:	89 c2                	mov    edx,eax
ffff80000080451b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080451f:	66 89 50 18          	mov    WORD PTR [rax+0x18],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:141
    make_devf(dhd0,ihd0,"hd0",rt_devfs,&devfs_fops);
ffff800000804523:	48 b8 a0 fe ff ff ff 	movabs rax,0xfffffffffffffea0
ffff80000080452a:	ff ff ff 
ffff80000080452d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804531:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804534:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000804538:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff80000080453c:	48 b9 78 fd ff ff ff 	movabs rcx,0xfffffffffffffd78
ffff800000804543:	ff ff ff 
ffff800000804546:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff80000080454a:	49 89 c8             	mov    r8,rcx
ffff80000080454d:	48 89 d1             	mov    rcx,rdx
ffff800000804550:	48 ba f5 d3 ff ff ff 	movabs rdx,0xffffffffffffd3f5
ffff800000804557:	ff ff ff 
ffff80000080455a:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff80000080455e:	48 89 c7             	mov    rdi,rax
ffff800000804561:	49 89 df             	mov    r15,rbx
ffff800000804564:	48 b8 08 14 ee ff ff 	movabs rax,0xffffffffffee1408
ffff80000080456b:	ff ff ff 
ffff80000080456e:	48 01 d8             	add    rax,rbx
ffff800000804571:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:143
    //tty-tty.c
    dtty= (struct dir_entry *) kmalloc(0,PAGE_4K_SIZE);
ffff800000804573:	be 00 10 00 00       	mov    esi,0x1000
ffff800000804578:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080457d:	49 89 df             	mov    r15,rbx
ffff800000804580:	48 b8 ce 07 ee ff ff 	movabs rax,0xffffffffffee07ce
ffff800000804587:	ff ff ff 
ffff80000080458a:	48 01 d8             	add    rax,rbx
ffff80000080458d:	ff d0                	call   rax
ffff80000080458f:	48 ba 00 fd ff ff ff 	movabs rdx,0xfffffffffffffd00
ffff800000804596:	ff ff ff 
ffff800000804599:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080459d:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:144
    struct index_node* itty=dtty+1;
ffff8000008045a0:	48 b8 00 fd ff ff ff 	movabs rax,0xfffffffffffffd00
ffff8000008045a7:	ff ff ff 
ffff8000008045aa:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008045ae:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008045b1:	48 83 c0 68          	add    rax,0x68
ffff8000008045b5:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:145
    dtty->name=itty+1;
ffff8000008045b9:	48 b8 00 fd ff ff ff 	movabs rax,0xfffffffffffffd00
ffff8000008045c0:	ff ff ff 
ffff8000008045c3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008045c7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008045ca:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff8000008045ce:	48 83 c2 40          	add    rdx,0x40
ffff8000008045d2:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:146
    itty->dev|=0x10000;
ffff8000008045d5:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008045d9:	0f b7 50 18          	movzx  edx,WORD PTR [rax+0x18]
ffff8000008045dd:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008045e1:	66 89 50 18          	mov    WORD PTR [rax+0x18],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:147
    make_devf(dtty,itty,"tty",rt_devfs,&devfs_fops);
ffff8000008045e5:	48 b8 00 fd ff ff ff 	movabs rax,0xfffffffffffffd00
ffff8000008045ec:	ff ff ff 
ffff8000008045ef:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008045f3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008045f6:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008045fa:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
ffff8000008045fe:	48 b9 78 fd ff ff ff 	movabs rcx,0xfffffffffffffd78
ffff800000804605:	ff ff ff 
ffff800000804608:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff80000080460c:	49 89 c8             	mov    r8,rcx
ffff80000080460f:	48 89 d1             	mov    rcx,rdx
ffff800000804612:	48 ba f9 d3 ff ff ff 	movabs rdx,0xffffffffffffd3f9
ffff800000804619:	ff ff ff 
ffff80000080461c:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000804620:	48 89 c7             	mov    rdi,rax
ffff800000804623:	49 89 df             	mov    r15,rbx
ffff800000804626:	48 b8 08 14 ee ff ff 	movabs rax,0xffffffffffee1408
ffff80000080462d:	ff ff ff 
ffff800000804630:	48 01 d8             	add    rax,rbx
ffff800000804633:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:149
    //初始化一下
    tty_fops.open(itty,&ftty);
ffff800000804635:	48 b8 70 fe ff ff ff 	movabs rax,0xfffffffffffffe70
ffff80000080463c:	ff ff ff 
ffff80000080463f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804643:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804646:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080464a:	48 b9 d0 fd ff ff ff 	movabs rcx,0xfffffffffffffdd0
ffff800000804651:	ff ff ff 
ffff800000804654:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff800000804658:	48 89 ce             	mov    rsi,rcx
ffff80000080465b:	48 89 c7             	mov    rdi,rax
ffff80000080465e:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:152

    //ramdisk- ramdisk.c
    dramdisk= (struct dir_entry *) kmalloc(0,PAGE_4K_SIZE);
ffff800000804660:	be 00 10 00 00       	mov    esi,0x1000
ffff800000804665:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080466a:	49 89 df             	mov    r15,rbx
ffff80000080466d:	48 b8 ce 07 ee ff ff 	movabs rax,0xffffffffffee07ce
ffff800000804674:	ff ff ff 
ffff800000804677:	48 01 d8             	add    rax,rbx
ffff80000080467a:	ff d0                	call   rax
ffff80000080467c:	48 ba 58 ff ff ff ff 	movabs rdx,0xffffffffffffff58
ffff800000804683:	ff ff ff 
ffff800000804686:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080468a:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:153
    struct index_node* iramdisk=dramdisk+1;
ffff80000080468d:	48 b8 58 ff ff ff ff 	movabs rax,0xffffffffffffff58
ffff800000804694:	ff ff ff 
ffff800000804697:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080469b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080469e:	48 83 c0 68          	add    rax,0x68
ffff8000008046a2:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:154
    dramdisk->name=iramdisk+1;
ffff8000008046a6:	48 b8 58 ff ff ff ff 	movabs rax,0xffffffffffffff58
ffff8000008046ad:	ff ff ff 
ffff8000008046b0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008046b4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008046b7:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff8000008046bb:	48 83 c2 40          	add    rdx,0x40
ffff8000008046bf:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:155
    iramdisk->dev=dev_ramdisk<<8;
ffff8000008046c2:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff8000008046c9:	ff ff ff 
ffff8000008046cc:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008046d0:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008046d2:	c1 e0 08             	shl    eax,0x8
ffff8000008046d5:	89 c2                	mov    edx,eax
ffff8000008046d7:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008046db:	66 89 50 18          	mov    WORD PTR [rax+0x18],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:156
    make_devf(dramdisk,iramdisk,"ram",rt_devfs,&devfs_fops);
ffff8000008046df:	48 b8 58 ff ff ff ff 	movabs rax,0xffffffffffffff58
ffff8000008046e6:	ff ff ff 
ffff8000008046e9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008046ed:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008046f0:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008046f4:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
ffff8000008046f8:	48 b9 78 fd ff ff ff 	movabs rcx,0xfffffffffffffd78
ffff8000008046ff:	ff ff ff 
ffff800000804702:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff800000804706:	49 89 c8             	mov    r8,rcx
ffff800000804709:	48 89 d1             	mov    rcx,rdx
ffff80000080470c:	48 ba fd d3 ff ff ff 	movabs rdx,0xffffffffffffd3fd
ffff800000804713:	ff ff ff 
ffff800000804716:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff80000080471a:	48 89 c7             	mov    rdi,rax
ffff80000080471d:	49 89 df             	mov    r15,rbx
ffff800000804720:	48 b8 08 14 ee ff ff 	movabs rax,0xffffffffffee1408
ffff800000804727:	ff ff ff 
ffff80000080472a:	48 01 d8             	add    rax,rbx
ffff80000080472d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:158

}
ffff80000080472f:	90                   	nop
ffff800000804730:	48 83 c4 30          	add    rsp,0x30
ffff800000804734:	5b                   	pop    rbx
ffff800000804735:	41 5f                	pop    r15
ffff800000804737:	5d                   	pop    rbp
ffff800000804738:	c3                   	ret    

ffff800000804739 <open_dev>:
open_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:160
//
long open_dev(struct index_node * inode,struct file * filp){
ffff800000804739:	f3 0f 1e fa          	endbr64 
ffff80000080473d:	55                   	push   rbp
ffff80000080473e:	48 89 e5             	mov    rbp,rsp
ffff800000804741:	41 57                	push   r15
ffff800000804743:	53                   	push   rbx
ffff800000804744:	48 83 ec 20          	sub    rsp,0x20
ffff800000804748:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000804748 <open_dev+0xf>
ffff80000080474f:	49 bb b0 e4 11 00 00 	movabs r11,0x11e4b0
ffff800000804756:	00 00 00 
ffff800000804759:	4c 01 db             	add    rbx,r11
ffff80000080475c:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000804760:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:162
    //查看文件名
    char* name=filp->dentry->name;
ffff800000804764:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000804768:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080476c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080476f:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:163
    char* p=name+ strlen(name)-1;
ffff800000804773:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804777:	48 89 c7             	mov    rdi,rax
ffff80000080477a:	49 89 df             	mov    r15,rbx
ffff80000080477d:	48 b8 ab 21 ef ff ff 	movabs rax,0xffffffffffef21ab
ffff800000804784:	ff ff ff 
ffff800000804787:	48 01 d8             	add    rax,rbx
ffff80000080478a:	ff d0                	call   rax
ffff80000080478c:	48 98                	cdqe   
ffff80000080478e:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff800000804792:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804796:	48 01 d0             	add    rax,rdx
ffff800000804799:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:164
    for(;*p!='/'&&p>=name;p--);
ffff80000080479d:	eb 05                	jmp    ffff8000008047a4 <open_dev+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:164 (discriminator 3)
ffff80000080479f:	48 83 6d e0 01       	sub    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:164 (discriminator 1)
ffff8000008047a4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008047a8:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008047ab:	3c 2f                	cmp    al,0x2f
ffff8000008047ad:	74 0a                	je     ffff8000008047b9 <open_dev+0x80>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:164 (discriminator 2)
ffff8000008047af:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008047b3:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff8000008047b7:	73 e6                	jae    ffff80000080479f <open_dev+0x66>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:165
    if(p>=name)
ffff8000008047b9:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008047bd:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff8000008047c1:	72 0c                	jb     ffff8000008047cf <open_dev+0x96>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:166
        name=p+1;
ffff8000008047c3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008047c7:	48 83 c0 01          	add    rax,0x1
ffff8000008047cb:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:167
    if(memcmp(name,"tty",3)==0){
ffff8000008047cf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008047d3:	ba 03 00 00 00       	mov    edx,0x3
ffff8000008047d8:	48 b9 f9 d3 ff ff ff 	movabs rcx,0xffffffffffffd3f9
ffff8000008047df:	ff ff ff 
ffff8000008047e2:	48 8d 0c 0b          	lea    rcx,[rbx+rcx*1]
ffff8000008047e6:	48 89 ce             	mov    rsi,rcx
ffff8000008047e9:	48 89 c7             	mov    rdi,rax
ffff8000008047ec:	49 89 df             	mov    r15,rbx
ffff8000008047ef:	48 b8 24 1e ef ff ff 	movabs rax,0xffffffffffef1e24
ffff8000008047f6:	ff ff ff 
ffff8000008047f9:	48 01 d8             	add    rax,rbx
ffff8000008047fc:	ff d0                	call   rax
ffff8000008047fe:	85 c0                	test   eax,eax
ffff800000804800:	75 22                	jne    ffff800000804824 <open_dev+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:168
        return init_tty(inode,filp);
ffff800000804802:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000804806:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080480a:	48 89 d6             	mov    rsi,rdx
ffff80000080480d:	48 89 c7             	mov    rdi,rax
ffff800000804810:	49 89 df             	mov    r15,rbx
ffff800000804813:	48 b8 98 11 ef ff ff 	movabs rax,0xffffffffffef1198
ffff80000080481a:	ff ff ff 
ffff80000080481d:	48 01 d8             	add    rax,rbx
ffff800000804820:	ff d0                	call   rax
ffff800000804822:	eb 57                	jmp    ffff80000080487b <open_dev+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:169
    }else if(strcmp(name,"console")==0){
ffff800000804824:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804828:	48 ba ed d3 ff ff ff 	movabs rdx,0xffffffffffffd3ed
ffff80000080482f:	ff ff ff 
ffff800000804832:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000804836:	48 89 d6             	mov    rsi,rdx
ffff800000804839:	48 89 c7             	mov    rdi,rax
ffff80000080483c:	49 89 df             	mov    r15,rbx
ffff80000080483f:	48 b8 2c 21 ef ff ff 	movabs rax,0xffffffffffef212c
ffff800000804846:	ff ff ff 
ffff800000804849:	48 01 d8             	add    rax,rbx
ffff80000080484c:	ff d0                	call   rax
ffff80000080484e:	85 c0                	test   eax,eax
ffff800000804850:	75 22                	jne    ffff800000804874 <open_dev+0x13b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:170
        return open_framebuffer(inode,filp);
ffff800000804852:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000804856:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080485a:	48 89 d6             	mov    rsi,rdx
ffff80000080485d:	48 89 c7             	mov    rdi,rax
ffff800000804860:	49 89 df             	mov    r15,rbx
ffff800000804863:	48 b8 84 96 ee ff ff 	movabs rax,0xffffffffffee9684
ffff80000080486a:	ff ff ff 
ffff80000080486d:	48 01 d8             	add    rax,rbx
ffff800000804870:	ff d0                	call   rax
ffff800000804872:	eb 07                	jmp    ffff80000080487b <open_dev+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:172
    }
    return -1;
ffff800000804874:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:173
}
ffff80000080487b:	48 83 c4 20          	add    rsp,0x20
ffff80000080487f:	5b                   	pop    rbx
ffff800000804880:	41 5f                	pop    r15
ffff800000804882:	5d                   	pop    rbp
ffff800000804883:	c3                   	ret    

ffff800000804884 <close_dev>:
close_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:174
long close_dev(struct index_node * inode,struct file * filp){
ffff800000804884:	f3 0f 1e fa          	endbr64 
ffff800000804888:	55                   	push   rbp
ffff800000804889:	48 89 e5             	mov    rbp,rsp
ffff80000080488c:	41 57                	push   r15
ffff80000080488e:	53                   	push   rbx
ffff80000080488f:	48 83 ec 20          	sub    rsp,0x20
ffff800000804893:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000804893 <close_dev+0xf>
ffff80000080489a:	49 bb 65 e3 11 00 00 	movabs r11,0x11e365
ffff8000008048a1:	00 00 00 
ffff8000008048a4:	4c 01 db             	add    rbx,r11
ffff8000008048a7:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff8000008048ab:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:176
    //查看文件名
    char* name=filp->dentry->name;
ffff8000008048af:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008048b3:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008048b7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008048ba:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:177
    char* p=name+ strlen(name)-1;
ffff8000008048be:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008048c2:	48 89 c7             	mov    rdi,rax
ffff8000008048c5:	49 89 df             	mov    r15,rbx
ffff8000008048c8:	48 b8 ab 21 ef ff ff 	movabs rax,0xffffffffffef21ab
ffff8000008048cf:	ff ff ff 
ffff8000008048d2:	48 01 d8             	add    rax,rbx
ffff8000008048d5:	ff d0                	call   rax
ffff8000008048d7:	48 98                	cdqe   
ffff8000008048d9:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff8000008048dd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008048e1:	48 01 d0             	add    rax,rdx
ffff8000008048e4:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:178
    for(;*p!='/'&&p>=name;p--);
ffff8000008048e8:	eb 05                	jmp    ffff8000008048ef <close_dev+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:178 (discriminator 3)
ffff8000008048ea:	48 83 6d e0 01       	sub    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:178 (discriminator 1)
ffff8000008048ef:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008048f3:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008048f6:	3c 2f                	cmp    al,0x2f
ffff8000008048f8:	74 0a                	je     ffff800000804904 <close_dev+0x80>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:178 (discriminator 2)
ffff8000008048fa:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008048fe:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000804902:	73 e6                	jae    ffff8000008048ea <close_dev+0x66>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:179
    if(p>=name)
ffff800000804904:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804908:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff80000080490c:	72 0c                	jb     ffff80000080491a <close_dev+0x96>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:180
        name=p+1;
ffff80000080490e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804912:	48 83 c0 01          	add    rax,0x1
ffff800000804916:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:181
    if(memcmp(name,"tty",3)==0){
ffff80000080491a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080491e:	ba 03 00 00 00       	mov    edx,0x3
ffff800000804923:	48 b9 f9 d3 ff ff ff 	movabs rcx,0xffffffffffffd3f9
ffff80000080492a:	ff ff ff 
ffff80000080492d:	48 8d 0c 0b          	lea    rcx,[rbx+rcx*1]
ffff800000804931:	48 89 ce             	mov    rsi,rcx
ffff800000804934:	48 89 c7             	mov    rdi,rax
ffff800000804937:	49 89 df             	mov    r15,rbx
ffff80000080493a:	48 b8 24 1e ef ff ff 	movabs rax,0xffffffffffef1e24
ffff800000804941:	ff ff ff 
ffff800000804944:	48 01 d8             	add    rax,rbx
ffff800000804947:	ff d0                	call   rax
ffff800000804949:	85 c0                	test   eax,eax
ffff80000080494b:	75 22                	jne    ffff80000080496f <close_dev+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:182
        return close_tty(inode,filp);
ffff80000080494d:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000804951:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000804955:	48 89 d6             	mov    rsi,rdx
ffff800000804958:	48 89 c7             	mov    rdi,rax
ffff80000080495b:	49 89 df             	mov    r15,rbx
ffff80000080495e:	48 b8 cb 10 ef ff ff 	movabs rax,0xffffffffffef10cb
ffff800000804965:	ff ff ff 
ffff800000804968:	48 01 d8             	add    rax,rbx
ffff80000080496b:	ff d0                	call   rax
ffff80000080496d:	eb 57                	jmp    ffff8000008049c6 <close_dev+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:183
    }else if(strcmp(name,"console")==0){
ffff80000080496f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804973:	48 ba ed d3 ff ff ff 	movabs rdx,0xffffffffffffd3ed
ffff80000080497a:	ff ff ff 
ffff80000080497d:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000804981:	48 89 d6             	mov    rsi,rdx
ffff800000804984:	48 89 c7             	mov    rdi,rax
ffff800000804987:	49 89 df             	mov    r15,rbx
ffff80000080498a:	48 b8 2c 21 ef ff ff 	movabs rax,0xffffffffffef212c
ffff800000804991:	ff ff ff 
ffff800000804994:	48 01 d8             	add    rax,rbx
ffff800000804997:	ff d0                	call   rax
ffff800000804999:	85 c0                	test   eax,eax
ffff80000080499b:	75 22                	jne    ffff8000008049bf <close_dev+0x13b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:184
        return close_framebuffer(inode,filp);
ffff80000080499d:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff8000008049a1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008049a5:	48 89 d6             	mov    rsi,rdx
ffff8000008049a8:	48 89 c7             	mov    rdi,rax
ffff8000008049ab:	49 89 df             	mov    r15,rbx
ffff8000008049ae:	48 b8 db 96 ee ff ff 	movabs rax,0xffffffffffee96db
ffff8000008049b5:	ff ff ff 
ffff8000008049b8:	48 01 d8             	add    rax,rbx
ffff8000008049bb:	ff d0                	call   rax
ffff8000008049bd:	eb 07                	jmp    ffff8000008049c6 <close_dev+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:186
    }
    return -1;
ffff8000008049bf:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:188

}
ffff8000008049c6:	48 83 c4 20          	add    rsp,0x20
ffff8000008049ca:	5b                   	pop    rbx
ffff8000008049cb:	41 5f                	pop    r15
ffff8000008049cd:	5d                   	pop    rbp
ffff8000008049ce:	c3                   	ret    

ffff8000008049cf <read_dev>:
read_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:189
long read_dev(struct file * filp,char * buf,unsigned long count,long * position){
ffff8000008049cf:	f3 0f 1e fa          	endbr64 
ffff8000008049d3:	55                   	push   rbp
ffff8000008049d4:	48 89 e5             	mov    rbp,rsp
ffff8000008049d7:	41 57                	push   r15
ffff8000008049d9:	53                   	push   rbx
ffff8000008049da:	48 83 ec 40          	sub    rsp,0x40
ffff8000008049de:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008049de <read_dev+0xf>
ffff8000008049e5:	49 bb 1a e2 11 00 00 	movabs r11,0x11e21a
ffff8000008049ec:	00 00 00 
ffff8000008049ef:	4c 01 db             	add    rbx,r11
ffff8000008049f2:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff8000008049f6:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffff8000008049fa:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
ffff8000008049fe:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:191
    //判断是不是块设备文件
    struct index_node* i_dev=filp->dentry->dir_inode;
ffff800000804a02:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000804a06:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000804a0a:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000804a0e:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:198
        //这里需要调用缓冲区层的函数读取块设备
        return blkdev_read(i_dev->dev,*position,count,buf);
    }
    
    //查看文件名
    char* name=filp->dentry->name;
ffff800000804a12:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000804a16:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000804a1a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804a1d:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:199
    char* p=name+ strlen(name)-1;
ffff800000804a21:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804a25:	48 89 c7             	mov    rdi,rax
ffff800000804a28:	49 89 df             	mov    r15,rbx
ffff800000804a2b:	48 b8 ab 21 ef ff ff 	movabs rax,0xffffffffffef21ab
ffff800000804a32:	ff ff ff 
ffff800000804a35:	48 01 d8             	add    rax,rbx
ffff800000804a38:	ff d0                	call   rax
ffff800000804a3a:	48 98                	cdqe   
ffff800000804a3c:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff800000804a40:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804a44:	48 01 d0             	add    rax,rdx
ffff800000804a47:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:200
    for(;*p!='/'&&p>=name;p--);
ffff800000804a4b:	eb 05                	jmp    ffff800000804a52 <read_dev+0x83>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:200 (discriminator 3)
ffff800000804a4d:	48 83 6d e0 01       	sub    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:200 (discriminator 1)
ffff800000804a52:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804a56:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000804a59:	3c 2f                	cmp    al,0x2f
ffff800000804a5b:	74 0a                	je     ffff800000804a67 <read_dev+0x98>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:200 (discriminator 2)
ffff800000804a5d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804a61:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000804a65:	73 e6                	jae    ffff800000804a4d <read_dev+0x7e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:201
    if(p>=name)
ffff800000804a67:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804a6b:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000804a6f:	72 0c                	jb     ffff800000804a7d <read_dev+0xae>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:202
        name=p+1;
ffff800000804a71:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804a75:	48 83 c0 01          	add    rax,0x1
ffff800000804a79:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:203
    if(memcmp(name,"tty",3)==0){
ffff800000804a7d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804a81:	ba 03 00 00 00       	mov    edx,0x3
ffff800000804a86:	48 b9 f9 d3 ff ff ff 	movabs rcx,0xffffffffffffd3f9
ffff800000804a8d:	ff ff ff 
ffff800000804a90:	48 8d 0c 0b          	lea    rcx,[rbx+rcx*1]
ffff800000804a94:	48 89 ce             	mov    rsi,rcx
ffff800000804a97:	48 89 c7             	mov    rdi,rax
ffff800000804a9a:	49 89 df             	mov    r15,rbx
ffff800000804a9d:	48 b8 24 1e ef ff ff 	movabs rax,0xffffffffffef1e24
ffff800000804aa4:	ff ff ff 
ffff800000804aa7:	48 01 d8             	add    rax,rbx
ffff800000804aaa:	ff d0                	call   rax
ffff800000804aac:	85 c0                	test   eax,eax
ffff800000804aae:	75 27                	jne    ffff800000804ad7 <read_dev+0x108>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:204
        return read_tty(filp,buf,count,position);
ffff800000804ab0:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
ffff800000804ab4:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff800000804ab8:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
ffff800000804abc:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000804ac0:	48 89 c7             	mov    rdi,rax
ffff800000804ac3:	49 89 df             	mov    r15,rbx
ffff800000804ac6:	48 b8 f7 12 ef ff ff 	movabs rax,0xffffffffffef12f7
ffff800000804acd:	ff ff ff 
ffff800000804ad0:	48 01 d8             	add    rax,rbx
ffff800000804ad3:	ff d0                	call   rax
ffff800000804ad5:	eb 5c                	jmp    ffff800000804b33 <read_dev+0x164>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:205
    }else if(strcmp(name,"console")==0){
ffff800000804ad7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804adb:	48 ba ed d3 ff ff ff 	movabs rdx,0xffffffffffffd3ed
ffff800000804ae2:	ff ff ff 
ffff800000804ae5:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000804ae9:	48 89 d6             	mov    rsi,rdx
ffff800000804aec:	48 89 c7             	mov    rdi,rax
ffff800000804aef:	49 89 df             	mov    r15,rbx
ffff800000804af2:	48 b8 2c 21 ef ff ff 	movabs rax,0xffffffffffef212c
ffff800000804af9:	ff ff ff 
ffff800000804afc:	48 01 d8             	add    rax,rbx
ffff800000804aff:	ff d0                	call   rax
ffff800000804b01:	85 c0                	test   eax,eax
ffff800000804b03:	75 27                	jne    ffff800000804b2c <read_dev+0x15d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:206
        return read_framebuffer(filp,buf,count,position);
ffff800000804b05:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
ffff800000804b09:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff800000804b0d:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
ffff800000804b11:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000804b15:	48 89 c7             	mov    rdi,rax
ffff800000804b18:	49 89 df             	mov    r15,rbx
ffff800000804b1b:	48 b8 02 97 ee ff ff 	movabs rax,0xffffffffffee9702
ffff800000804b22:	ff ff ff 
ffff800000804b25:	48 01 d8             	add    rax,rbx
ffff800000804b28:	ff d0                	call   rax
ffff800000804b2a:	eb 07                	jmp    ffff800000804b33 <read_dev+0x164>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:208
    }
    return -1;
ffff800000804b2c:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:210

}
ffff800000804b33:	48 83 c4 40          	add    rsp,0x40
ffff800000804b37:	5b                   	pop    rbx
ffff800000804b38:	41 5f                	pop    r15
ffff800000804b3a:	5d                   	pop    rbp
ffff800000804b3b:	c3                   	ret    

ffff800000804b3c <write_dev>:
write_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:211
long write_dev(struct file * filp,char * buf,unsigned long count,long * position){
ffff800000804b3c:	f3 0f 1e fa          	endbr64 
ffff800000804b40:	55                   	push   rbp
ffff800000804b41:	48 89 e5             	mov    rbp,rsp
ffff800000804b44:	41 57                	push   r15
ffff800000804b46:	53                   	push   rbx
ffff800000804b47:	48 83 ec 40          	sub    rsp,0x40
ffff800000804b4b:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000804b4b <write_dev+0xf>
ffff800000804b52:	49 bb ad e0 11 00 00 	movabs r11,0x11e0ad
ffff800000804b59:	00 00 00 
ffff800000804b5c:	4c 01 db             	add    rbx,r11
ffff800000804b5f:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000804b63:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffff800000804b67:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
ffff800000804b6b:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:213
    //判断是不是块设备文件
    struct index_node* idev=filp->dentry->dir_inode;
ffff800000804b6f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000804b73:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000804b77:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000804b7b:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:220
        //这里需要调用缓冲区层的函数写块设备
        return blkdev_write(idev->dev,*position,count,buf);
    }

    //查看文件名
    char* name=filp->dentry->name;
ffff800000804b7f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000804b83:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000804b87:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804b8a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:221
    char* p=name+ strlen(name)-1;
ffff800000804b8e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804b92:	48 89 c7             	mov    rdi,rax
ffff800000804b95:	49 89 df             	mov    r15,rbx
ffff800000804b98:	48 b8 ab 21 ef ff ff 	movabs rax,0xffffffffffef21ab
ffff800000804b9f:	ff ff ff 
ffff800000804ba2:	48 01 d8             	add    rax,rbx
ffff800000804ba5:	ff d0                	call   rax
ffff800000804ba7:	48 98                	cdqe   
ffff800000804ba9:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff800000804bad:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804bb1:	48 01 d0             	add    rax,rdx
ffff800000804bb4:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:222
    for(;*p!='/'&&p>=name;p--);
ffff800000804bb8:	eb 05                	jmp    ffff800000804bbf <write_dev+0x83>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:222 (discriminator 3)
ffff800000804bba:	48 83 6d e0 01       	sub    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:222 (discriminator 1)
ffff800000804bbf:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804bc3:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000804bc6:	3c 2f                	cmp    al,0x2f
ffff800000804bc8:	74 0a                	je     ffff800000804bd4 <write_dev+0x98>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:222 (discriminator 2)
ffff800000804bca:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804bce:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000804bd2:	73 e6                	jae    ffff800000804bba <write_dev+0x7e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:223
    if(p>=name)
ffff800000804bd4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804bd8:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000804bdc:	72 0c                	jb     ffff800000804bea <write_dev+0xae>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:224
        name=p+1;
ffff800000804bde:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804be2:	48 83 c0 01          	add    rax,0x1
ffff800000804be6:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:225
    if(memcmp(name,"tty",3)==0){
ffff800000804bea:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804bee:	ba 03 00 00 00       	mov    edx,0x3
ffff800000804bf3:	48 b9 f9 d3 ff ff ff 	movabs rcx,0xffffffffffffd3f9
ffff800000804bfa:	ff ff ff 
ffff800000804bfd:	48 8d 0c 0b          	lea    rcx,[rbx+rcx*1]
ffff800000804c01:	48 89 ce             	mov    rsi,rcx
ffff800000804c04:	48 89 c7             	mov    rdi,rax
ffff800000804c07:	49 89 df             	mov    r15,rbx
ffff800000804c0a:	48 b8 24 1e ef ff ff 	movabs rax,0xffffffffffef1e24
ffff800000804c11:	ff ff ff 
ffff800000804c14:	48 01 d8             	add    rax,rbx
ffff800000804c17:	ff d0                	call   rax
ffff800000804c19:	85 c0                	test   eax,eax
ffff800000804c1b:	75 27                	jne    ffff800000804c44 <write_dev+0x108>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:226
        return write_tty(filp,buf,count,position);
ffff800000804c1d:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
ffff800000804c21:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff800000804c25:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
ffff800000804c29:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000804c2d:	48 89 c7             	mov    rdi,rax
ffff800000804c30:	49 89 df             	mov    r15,rbx
ffff800000804c33:	48 b8 b8 13 ef ff ff 	movabs rax,0xffffffffffef13b8
ffff800000804c3a:	ff ff ff 
ffff800000804c3d:	48 01 d8             	add    rax,rbx
ffff800000804c40:	ff d0                	call   rax
ffff800000804c42:	eb 5c                	jmp    ffff800000804ca0 <write_dev+0x164>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:227
    }else if(strcmp(name,"console")==0){
ffff800000804c44:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804c48:	48 ba ed d3 ff ff ff 	movabs rdx,0xffffffffffffd3ed
ffff800000804c4f:	ff ff ff 
ffff800000804c52:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000804c56:	48 89 d6             	mov    rsi,rdx
ffff800000804c59:	48 89 c7             	mov    rdi,rax
ffff800000804c5c:	49 89 df             	mov    r15,rbx
ffff800000804c5f:	48 b8 2c 21 ef ff ff 	movabs rax,0xffffffffffef212c
ffff800000804c66:	ff ff ff 
ffff800000804c69:	48 01 d8             	add    rax,rbx
ffff800000804c6c:	ff d0                	call   rax
ffff800000804c6e:	85 c0                	test   eax,eax
ffff800000804c70:	75 27                	jne    ffff800000804c99 <write_dev+0x15d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:228
        return write_framebuffer(filp,buf,count,position);
ffff800000804c72:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
ffff800000804c76:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff800000804c7a:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
ffff800000804c7e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000804c82:	48 89 c7             	mov    rdi,rax
ffff800000804c85:	49 89 df             	mov    r15,rbx
ffff800000804c88:	48 b8 31 97 ee ff ff 	movabs rax,0xffffffffffee9731
ffff800000804c8f:	ff ff ff 
ffff800000804c92:	48 01 d8             	add    rax,rbx
ffff800000804c95:	ff d0                	call   rax
ffff800000804c97:	eb 07                	jmp    ffff800000804ca0 <write_dev+0x164>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:230
    }
    return -1;
ffff800000804c99:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:232

}
ffff800000804ca0:	48 83 c4 40          	add    rsp,0x40
ffff800000804ca4:	5b                   	pop    rbx
ffff800000804ca5:	41 5f                	pop    r15
ffff800000804ca7:	5d                   	pop    rbp
ffff800000804ca8:	c3                   	ret    

ffff800000804ca9 <ioctl_dev>:
ioctl_dev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:233
long ioctl_dev(struct index_node * inode,struct file * filp,unsigned long cmd,unsigned long arg){
ffff800000804ca9:	f3 0f 1e fa          	endbr64 
ffff800000804cad:	55                   	push   rbp
ffff800000804cae:	48 89 e5             	mov    rbp,rsp
ffff800000804cb1:	41 57                	push   r15
ffff800000804cb3:	53                   	push   rbx
ffff800000804cb4:	48 83 ec 40          	sub    rsp,0x40
ffff800000804cb8:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000804cb8 <ioctl_dev+0xf>
ffff800000804cbf:	49 bb 40 df 11 00 00 	movabs r11,0x11df40
ffff800000804cc6:	00 00 00 
ffff800000804cc9:	4c 01 db             	add    rbx,r11
ffff800000804ccc:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000804cd0:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffff800000804cd4:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
ffff800000804cd8:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:235
    //判断是不是块设备文件
    struct index_node* idev=filp->dentry->dir_inode;
ffff800000804cdc:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000804ce0:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000804ce4:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000804ce8:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:241
    if(IS_BLKDEV(idev->dev)){
        //这里需要调用缓冲区层的函数ioctl块设备
        return 1;
    }
    //查看文件名
    char* name=filp->dentry->name;
ffff800000804cec:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000804cf0:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000804cf4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000804cf7:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:242
    char* p=name+ strlen(name)-1;
ffff800000804cfb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804cff:	48 89 c7             	mov    rdi,rax
ffff800000804d02:	49 89 df             	mov    r15,rbx
ffff800000804d05:	48 b8 ab 21 ef ff ff 	movabs rax,0xffffffffffef21ab
ffff800000804d0c:	ff ff ff 
ffff800000804d0f:	48 01 d8             	add    rax,rbx
ffff800000804d12:	ff d0                	call   rax
ffff800000804d14:	48 98                	cdqe   
ffff800000804d16:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff800000804d1a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804d1e:	48 01 d0             	add    rax,rdx
ffff800000804d21:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:243
    for(;*p!='/'&&p>=name;p--);
ffff800000804d25:	eb 05                	jmp    ffff800000804d2c <ioctl_dev+0x83>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:243 (discriminator 3)
ffff800000804d27:	48 83 6d e0 01       	sub    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:243 (discriminator 1)
ffff800000804d2c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804d30:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000804d33:	3c 2f                	cmp    al,0x2f
ffff800000804d35:	74 0a                	je     ffff800000804d41 <ioctl_dev+0x98>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:243 (discriminator 2)
ffff800000804d37:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804d3b:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000804d3f:	73 e6                	jae    ffff800000804d27 <ioctl_dev+0x7e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:244
    if(p>=name)
ffff800000804d41:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804d45:	48 3b 45 e8          	cmp    rax,QWORD PTR [rbp-0x18]
ffff800000804d49:	72 0c                	jb     ffff800000804d57 <ioctl_dev+0xae>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:245
        name=p+1;
ffff800000804d4b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000804d4f:	48 83 c0 01          	add    rax,0x1
ffff800000804d53:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:246
    if(memcmp(name,"tty",3)==0){
ffff800000804d57:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804d5b:	ba 03 00 00 00       	mov    edx,0x3
ffff800000804d60:	48 b9 f9 d3 ff ff ff 	movabs rcx,0xffffffffffffd3f9
ffff800000804d67:	ff ff ff 
ffff800000804d6a:	48 8d 0c 0b          	lea    rcx,[rbx+rcx*1]
ffff800000804d6e:	48 89 ce             	mov    rsi,rcx
ffff800000804d71:	48 89 c7             	mov    rdi,rax
ffff800000804d74:	49 89 df             	mov    r15,rbx
ffff800000804d77:	48 b8 24 1e ef ff ff 	movabs rax,0xffffffffffef1e24
ffff800000804d7e:	ff ff ff 
ffff800000804d81:	48 01 d8             	add    rax,rbx
ffff800000804d84:	ff d0                	call   rax
ffff800000804d86:	85 c0                	test   eax,eax
ffff800000804d88:	75 27                	jne    ffff800000804db1 <ioctl_dev+0x108>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:247
        return ioctl_tty(inode, filp, cmd, arg);
ffff800000804d8a:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
ffff800000804d8e:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff800000804d92:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
ffff800000804d96:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000804d9a:	48 89 c7             	mov    rdi,rax
ffff800000804d9d:	49 89 df             	mov    r15,rbx
ffff800000804da0:	48 b8 a8 14 ef ff ff 	movabs rax,0xffffffffffef14a8
ffff800000804da7:	ff ff ff 
ffff800000804daa:	48 01 d8             	add    rax,rbx
ffff800000804dad:	ff d0                	call   rax
ffff800000804daf:	eb 5c                	jmp    ffff800000804e0d <ioctl_dev+0x164>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:248
    }else if(strcmp(name,"console")==0){
ffff800000804db1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000804db5:	48 ba ed d3 ff ff ff 	movabs rdx,0xffffffffffffd3ed
ffff800000804dbc:	ff ff ff 
ffff800000804dbf:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000804dc3:	48 89 d6             	mov    rsi,rdx
ffff800000804dc6:	48 89 c7             	mov    rdi,rax
ffff800000804dc9:	49 89 df             	mov    r15,rbx
ffff800000804dcc:	48 b8 2c 21 ef ff ff 	movabs rax,0xffffffffffef212c
ffff800000804dd3:	ff ff ff 
ffff800000804dd6:	48 01 d8             	add    rax,rbx
ffff800000804dd9:	ff d0                	call   rax
ffff800000804ddb:	85 c0                	test   eax,eax
ffff800000804ddd:	75 27                	jne    ffff800000804e06 <ioctl_dev+0x15d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:249
        return ioctl_framebuffer(inode,filp,cmd,arg);
ffff800000804ddf:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
ffff800000804de3:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff800000804de7:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
ffff800000804deb:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000804def:	48 89 c7             	mov    rdi,rax
ffff800000804df2:	49 89 df             	mov    r15,rbx
ffff800000804df5:	48 b8 57 98 ee ff ff 	movabs rax,0xffffffffffee9857
ffff800000804dfc:	ff ff ff 
ffff800000804dff:	48 01 d8             	add    rax,rbx
ffff800000804e02:	ff d0                	call   rax
ffff800000804e04:	eb 07                	jmp    ffff800000804e0d <ioctl_dev+0x164>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:251
    }
    return -1;
ffff800000804e06:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:253

}
ffff800000804e0d:	48 83 c4 40          	add    rsp,0x40
ffff800000804e11:	5b                   	pop    rbx
ffff800000804e12:	41 5f                	pop    r15
ffff800000804e14:	5d                   	pop    rbp
ffff800000804e15:	c3                   	ret    

ffff800000804e16 <load_driver>:
load_driver():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:255
int load_driver(char *path)
{
ffff800000804e16:	f3 0f 1e fa          	endbr64 
ffff800000804e1a:	55                   	push   rbp
ffff800000804e1b:	48 89 e5             	mov    rbp,rsp
ffff800000804e1e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000804e1e <load_driver+0x8>
ffff800000804e25:	49 bb da dd 11 00 00 	movabs r11,0x11ddda
ffff800000804e2c:	00 00 00 
ffff800000804e2f:	4c 01 d8             	add    rax,r11
ffff800000804e32:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/devman.c:257
    
}
ffff800000804e36:	90                   	nop
ffff800000804e37:	5d                   	pop    rbp
ffff800000804e38:	c3                   	ret    

ffff800000804e39 <init_proc>:
init_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:27
int cur_proc=0;
int pidd=0;
int palloc_paddr=0;
static pid_t sidd=0;
mmap_struct* all_mmaps=NULL;
void init_proc(){
ffff800000804e39:	f3 0f 1e fa          	endbr64 
ffff800000804e3d:	55                   	push   rbp
ffff800000804e3e:	48 89 e5             	mov    rbp,rsp
ffff800000804e41:	41 57                	push   r15
ffff800000804e43:	53                   	push   rbx
ffff800000804e44:	48 83 ec 10          	sub    rsp,0x10
ffff800000804e48:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000804e48 <init_proc+0xf>
ffff800000804e4f:	49 bb b0 dd 11 00 00 	movabs r11,0x11ddb0
ffff800000804e56:	00 00 00 
ffff800000804e59:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:29
    //task=(struct process*)get_global_var(TASK_PCBS_ADDR);//[MAX_TASKS];;
    task=(struct process*)kmallocat(0,13);
ffff800000804e5c:	be 0d 00 00 00       	mov    esi,0xd
ffff800000804e61:	bf 00 00 00 00       	mov    edi,0x0
ffff800000804e66:	49 89 df             	mov    r15,rbx
ffff800000804e69:	48 b8 5a f7 ed ff ff 	movabs rax,0xffffffffffedf75a
ffff800000804e70:	ff ff ff 
ffff800000804e73:	48 01 d8             	add    rax,rbx
ffff800000804e76:	ff d0                	call   rax
ffff800000804e78:	48 89 c2             	mov    rdx,rax
ffff800000804e7b:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000804e82:	ff ff ff 
ffff800000804e85:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804e89:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:30
    for(int i=0;i<MAX_PROC_COUNT;i++){
ffff800000804e8c:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000804e93:	e9 b1 00 00 00       	jmp    ffff800000804f49 <init_proc+0x110>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:31 (discriminator 3)
        task[i].pid=-1;
ffff800000804e98:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000804e9f:	ff ff ff 
ffff800000804ea2:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804ea6:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000804ea9:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000804eac:	48 63 d0             	movsxd rdx,eax
ffff800000804eaf:	48 89 d0             	mov    rax,rdx
ffff800000804eb2:	48 01 c0             	add    rax,rax
ffff800000804eb5:	48 01 d0             	add    rax,rdx
ffff800000804eb8:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000804ebf:	00 
ffff800000804ec0:	48 01 d0             	add    rax,rdx
ffff800000804ec3:	48 c1 e0 05          	shl    rax,0x5
ffff800000804ec7:	48 01 c8             	add    rax,rcx
ffff800000804eca:	c7 00 ff ff ff ff    	mov    DWORD PTR [rax],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:32 (discriminator 3)
        task[i].stat=TASK_EMPTY;
ffff800000804ed0:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000804ed7:	ff ff ff 
ffff800000804eda:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804ede:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000804ee1:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000804ee4:	48 63 d0             	movsxd rdx,eax
ffff800000804ee7:	48 89 d0             	mov    rax,rdx
ffff800000804eea:	48 01 c0             	add    rax,rax
ffff800000804eed:	48 01 d0             	add    rax,rdx
ffff800000804ef0:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000804ef7:	00 
ffff800000804ef8:	48 01 d0             	add    rax,rdx
ffff800000804efb:	48 c1 e0 05          	shl    rax,0x5
ffff800000804eff:	48 01 c8             	add    rax,rcx
ffff800000804f02:	c7 40 18 00 00 00 00 	mov    DWORD PTR [rax+0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:33 (discriminator 3)
        task[i].parent_pid=-1;
ffff800000804f09:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000804f10:	ff ff ff 
ffff800000804f13:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804f17:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000804f1a:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000804f1d:	48 63 d0             	movsxd rdx,eax
ffff800000804f20:	48 89 d0             	mov    rax,rdx
ffff800000804f23:	48 01 c0             	add    rax,rax
ffff800000804f26:	48 01 d0             	add    rax,rdx
ffff800000804f29:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000804f30:	00 
ffff800000804f31:	48 01 d0             	add    rax,rdx
ffff800000804f34:	48 c1 e0 05          	shl    rax,0x5
ffff800000804f38:	48 01 c8             	add    rax,rcx
ffff800000804f3b:	c7 80 bc 00 00 00 ff 	mov    DWORD PTR [rax+0xbc],0xffffffff
ffff800000804f42:	ff ff ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:30 (discriminator 3)
    for(int i=0;i<MAX_PROC_COUNT;i++){
ffff800000804f45:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:30 (discriminator 1)
ffff800000804f49:	83 7d ec 3f          	cmp    DWORD PTR [rbp-0x14],0x3f
ffff800000804f4d:	0f 8e 45 ff ff ff    	jle    ffff800000804e98 <init_proc+0x5f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:35
    }
    cur_proc=0;//proc zero
ffff800000804f53:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff800000804f5a:	ff ff ff 
ffff800000804f5d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804f61:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:36
    current=task;
ffff800000804f67:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000804f6e:	ff ff ff 
ffff800000804f71:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804f75:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000804f78:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff800000804f7f:	ff ff ff 
ffff800000804f82:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804f86:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:37
    pidd=1;
ffff800000804f89:	48 b8 10 fe ff ff ff 	movabs rax,0xfffffffffffffe10
ffff800000804f90:	ff ff ff 
ffff800000804f93:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000804f97:	c7 00 01 00 00 00    	mov    DWORD PTR [rax],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:42


    //__asm__ volatile("lldt %0"::"m"(xi));
    //__asm__ volatile("ltr %0"::"m"(zi));
    set_tss(0x400000+KNL_BASE,0x400000+KNL_BASE,0x400000+KNL_BASE\
ffff800000804f9d:	68 00 00 80 00       	push   0x800000
ffff800000804fa2:	c7 44 24 04 00 80 ff 	mov    DWORD PTR [rsp+0x4],0xffff8000
ffff800000804fa9:	ff 
ffff800000804faa:	68 00 00 80 00       	push   0x800000
ffff800000804faf:	c7 44 24 04 00 80 ff 	mov    DWORD PTR [rsp+0x4],0xffff8000
ffff800000804fb6:	ff 
ffff800000804fb7:	68 00 00 80 00       	push   0x800000
ffff800000804fbc:	c7 44 24 04 00 80 ff 	mov    DWORD PTR [rsp+0x4],0xffff8000
ffff800000804fc3:	ff 
ffff800000804fc4:	68 00 00 80 00       	push   0x800000
ffff800000804fc9:	c7 44 24 04 00 80 ff 	mov    DWORD PTR [rsp+0x4],0xffff8000
ffff800000804fd0:	ff 
ffff800000804fd1:	49 b9 00 00 80 00 00 	movabs r9,0xffff800000800000
ffff800000804fd8:	80 ff ff 
ffff800000804fdb:	49 b8 00 00 80 00 00 	movabs r8,0xffff800000800000
ffff800000804fe2:	80 ff ff 
ffff800000804fe5:	48 b8 00 00 80 00 00 	movabs rax,0xffff800000800000
ffff800000804fec:	80 ff ff 
ffff800000804fef:	48 89 c1             	mov    rcx,rax
ffff800000804ff2:	48 b8 00 00 40 00 00 	movabs rax,0xffff800000400000
ffff800000804ff9:	80 ff ff 
ffff800000804ffc:	48 89 c2             	mov    rdx,rax
ffff800000804fff:	48 b8 00 00 40 00 00 	movabs rax,0xffff800000400000
ffff800000805006:	80 ff ff 
ffff800000805009:	48 89 c6             	mov    rsi,rax
ffff80000080500c:	48 b8 00 00 40 00 00 	movabs rax,0xffff800000400000
ffff800000805013:	80 ff ff 
ffff800000805016:	48 89 c7             	mov    rdi,rax
ffff800000805019:	49 89 df             	mov    r15,rbx
ffff80000080501c:	48 b8 2b 47 ee ff ff 	movabs rax,0xffffffffffee472b
ffff800000805023:	ff ff ff 
ffff800000805026:	48 01 d8             	add    rax,rbx
ffff800000805029:	ff d0                	call   rax
ffff80000080502b:	48 83 c4 20          	add    rsp,0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:47
    ,0x800000+KNL_BASE,0x800000+KNL_BASE,0x800000+KNL_BASE,0x800000+KNL_BASE\
    ,0x800000+KNL_BASE,0x800000+KNL_BASE,0x800000+KNL_BASE);

    //===============创建0号进程======================
    int zi= init_proc0();
ffff80000080502f:	49 89 df             	mov    r15,rbx
ffff800000805032:	b8 00 00 00 00       	mov    eax,0x0
ffff800000805037:	48 ba 87 28 ee ff ff 	movabs rdx,0xffffffffffee2887
ffff80000080503e:	ff ff ff 
ffff800000805041:	48 01 da             	add    rdx,rbx
ffff800000805044:	ff d2                	call   rdx
ffff800000805046:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:48
    task[zi].stat=TASK_READY;
ffff800000805049:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000805050:	ff ff ff 
ffff800000805053:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805057:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080505a:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080505d:	48 63 d0             	movsxd rdx,eax
ffff800000805060:	48 89 d0             	mov    rax,rdx
ffff800000805063:	48 01 c0             	add    rax,rax
ffff800000805066:	48 01 d0             	add    rax,rdx
ffff800000805069:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000805070:	00 
ffff800000805071:	48 01 d0             	add    rax,rdx
ffff800000805074:	48 c1 e0 05          	shl    rax,0x5
ffff800000805078:	48 01 c8             	add    rax,rcx
ffff80000080507b:	c7 40 18 02 00 00 00 	mov    DWORD PTR [rax+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:50
    //IA32_INTERRUPT_SSP_TABLE_ADDR，准备IST
    wrmsr(0x6a8,tss->rsvd2);
ffff800000805082:	48 b8 b8 fd ff ff ff 	movabs rax,0xfffffffffffffdb8
ffff800000805089:	ff ff ff 
ffff80000080508c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805090:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000805093:	48 8b 40 1c          	mov    rax,QWORD PTR [rax+0x1c]
ffff800000805097:	48 89 c6             	mov    rsi,rax
ffff80000080509a:	bf a8 06 00 00       	mov    edi,0x6a8
ffff80000080509f:	49 89 df             	mov    r15,rbx
ffff8000008050a2:	48 b8 8e e2 ed ff ff 	movabs rax,0xffffffffffede28e
ffff8000008050a9:	ff ff ff 
ffff8000008050ac:	48 01 d8             	add    rax,rbx
ffff8000008050af:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:52
    //把内核代码段选择子写到MSR寄存器中准备用于特权级转换(sysexit，现在没用)
    wrmsr(0x174,0x8);
ffff8000008050b1:	be 08 00 00 00       	mov    esi,0x8
ffff8000008050b6:	bf 74 01 00 00       	mov    edi,0x174
ffff8000008050bb:	49 89 df             	mov    r15,rbx
ffff8000008050be:	48 b8 8e e2 ed ff ff 	movabs rax,0xffffffffffede28e
ffff8000008050c5:	ff ff ff 
ffff8000008050c8:	48 01 d8             	add    rax,rbx
ffff8000008050cb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:54
    //准备用于特权级转换(sysret，正在使用)
    wrmsr(0xc0000081,0x0020000800000000ul);
ffff8000008050cd:	48 b8 00 00 00 00 08 	movabs rax,0x20000800000000
ffff8000008050d4:	00 20 00 
ffff8000008050d7:	48 89 c6             	mov    rsi,rax
ffff8000008050da:	b8 81 00 00 c0       	mov    eax,0xc0000081
ffff8000008050df:	48 89 c7             	mov    rdi,rax
ffff8000008050e2:	49 89 df             	mov    r15,rbx
ffff8000008050e5:	48 b8 8e e2 ed ff ff 	movabs rax,0xffffffffffede28e
ffff8000008050ec:	ff ff ff 
ffff8000008050ef:	48 01 d8             	add    rax,rbx
ffff8000008050f2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:56

    comprintf("proc init set.\r\ntss.ist=0x%p\r\n",tss->ists[0]);
ffff8000008050f4:	48 b8 b8 fd ff ff ff 	movabs rax,0xfffffffffffffdb8
ffff8000008050fb:	ff ff ff 
ffff8000008050fe:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805102:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000805105:	48 8b 40 24          	mov    rax,QWORD PTR [rax+0x24]
ffff800000805109:	48 89 c6             	mov    rsi,rax
ffff80000080510c:	48 b8 08 d4 ff ff ff 	movabs rax,0xffffffffffffd408
ffff800000805113:	ff ff ff 
ffff800000805116:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080511a:	48 89 c7             	mov    rdi,rax
ffff80000080511d:	49 89 df             	mov    r15,rbx
ffff800000805120:	b8 00 00 00 00       	mov    eax,0x0
ffff800000805125:	48 ba 3a 19 ef ff ff 	movabs rdx,0xffffffffffef193a
ffff80000080512c:	ff ff ff 
ffff80000080512f:	48 01 da             	add    rdx,rbx
ffff800000805132:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:59
    //创建一个测试进程
//    create_test_proc();
}
ffff800000805134:	90                   	nop
ffff800000805135:	48 8d 65 f0          	lea    rsp,[rbp-0x10]
ffff800000805139:	5b                   	pop    rbx
ffff80000080513a:	41 5f                	pop    r15
ffff80000080513c:	5d                   	pop    rbp
ffff80000080513d:	c3                   	ret    

ffff80000080513e <create_test_proc>:
create_test_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:60
void create_test_proc(){
ffff80000080513e:	f3 0f 1e fa          	endbr64 
ffff800000805142:	55                   	push   rbp
ffff800000805143:	48 89 e5             	mov    rbp,rsp
ffff800000805146:	41 57                	push   r15
ffff800000805148:	53                   	push   rbx
ffff800000805149:	48 83 ec 20          	sub    rsp,0x20
ffff80000080514d:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080514d <create_test_proc+0xf>
ffff800000805154:	49 bb ab da 11 00 00 	movabs r11,0x11daab
ffff80000080515b:	00 00 00 
ffff80000080515e:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:62

    int index=req_proc();
ffff800000805161:	49 89 df             	mov    r15,rbx
ffff800000805164:	b8 00 00 00 00       	mov    eax,0x0
ffff800000805169:	48 ba c9 2a ee ff ff 	movabs rdx,0xffffffffffee2ac9
ffff800000805170:	ff ff ff 
ffff800000805173:	48 01 da             	add    rdx,rbx
ffff800000805176:	ff d2                	call   rdx
ffff800000805178:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:63
    task[index].stat=TASK_READY;
ffff80000080517b:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000805182:	ff ff ff 
ffff800000805185:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805189:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080518c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080518f:	48 63 d0             	movsxd rdx,eax
ffff800000805192:	48 89 d0             	mov    rax,rdx
ffff800000805195:	48 01 c0             	add    rax,rax
ffff800000805198:	48 01 d0             	add    rax,rdx
ffff80000080519b:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008051a2:	00 
ffff8000008051a3:	48 01 d0             	add    rax,rdx
ffff8000008051a6:	48 c1 e0 05          	shl    rax,0x5
ffff8000008051aa:	48 01 c8             	add    rax,rcx
ffff8000008051ad:	c7 40 18 02 00 00 00 	mov    DWORD PTR [rax+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:64
    int currsp=0x9fc00-1;
ffff8000008051b4:	c7 45 dc ff fb 09 00 	mov    DWORD PTR [rbp-0x24],0x9fbff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:65
    __asm__ volatile("mov %%rsp,%0":"=m"(currsp));
ffff8000008051bb:	48 89 65 dc          	mov    QWORD PTR [rbp-0x24],rsp
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:66
    set_proc(0, 0, 0, 0, 0x10, 0x8, 0x10, 0x10, 0x10, 0x10,
ffff8000008051bf:	48 b8 98 fd ff ff ff 	movabs rax,0xfffffffffffffd98
ffff8000008051c6:	ff ff ff 
ffff8000008051c9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008051cd:	48 89 c2             	mov    rdx,rax
ffff8000008051d0:	48 83 ec 08          	sub    rsp,0x8
ffff8000008051d4:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008051d7:	50                   	push   rax
ffff8000008051d8:	6a 00                	push   0x0
ffff8000008051da:	52                   	push   rdx
ffff8000008051db:	6a 00                	push   0x0
ffff8000008051dd:	6a 00                	push   0x0
ffff8000008051df:	6a 00                	push   0x0
ffff8000008051e1:	68 58 7d 00 00       	push   0x7d58
ffff8000008051e6:	6a 10                	push   0x10
ffff8000008051e8:	6a 10                	push   0x10
ffff8000008051ea:	6a 10                	push   0x10
ffff8000008051ec:	6a 10                	push   0x10
ffff8000008051ee:	41 b9 08 00 00 00    	mov    r9d,0x8
ffff8000008051f4:	41 b8 10 00 00 00    	mov    r8d,0x10
ffff8000008051fa:	b9 00 00 00 00       	mov    ecx,0x0
ffff8000008051ff:	ba 00 00 00 00       	mov    edx,0x0
ffff800000805204:	be 00 00 00 00       	mov    esi,0x0
ffff800000805209:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080520e:	49 89 df             	mov    r15,rbx
ffff800000805211:	48 b8 81 2c ee ff ff 	movabs rax,0xffffffffffee2c81
ffff800000805218:	ff ff ff 
ffff80000080521b:	48 01 d8             	add    rax,rbx
ffff80000080521e:	ff d0                	call   rax
ffff800000805220:	48 83 c4 60          	add    rsp,0x60
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:68
             0x7e00- sizeof(stack_store_regs), 0, 0, 0, (long)_syscall_sysret, 0, index);
    task[index].tss.rsp0=0x400000;
ffff800000805224:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff80000080522b:	ff ff ff 
ffff80000080522e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805232:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000805235:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000805238:	48 63 d0             	movsxd rdx,eax
ffff80000080523b:	48 89 d0             	mov    rax,rdx
ffff80000080523e:	48 01 c0             	add    rax,rax
ffff800000805241:	48 01 d0             	add    rax,rdx
ffff800000805244:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080524b:	00 
ffff80000080524c:	48 01 d0             	add    rax,rdx
ffff80000080524f:	48 c1 e0 05          	shl    rax,0x5
ffff800000805253:	48 01 c8             	add    rax,rcx
ffff800000805256:	48 c7 80 fc 01 00 00 	mov    QWORD PTR [rax+0x1fc],0x400000
ffff80000080525d:	00 00 40 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:69
    task[index].mem_struct.stack_top=0x7e00;
ffff800000805261:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000805268:	ff ff ff 
ffff80000080526b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080526f:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000805272:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000805275:	48 63 d0             	movsxd rdx,eax
ffff800000805278:	48 89 d0             	mov    rax,rdx
ffff80000080527b:	48 01 c0             	add    rax,rax
ffff80000080527e:	48 01 d0             	add    rax,rdx
ffff800000805281:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000805288:	00 
ffff800000805289:	48 01 d0             	add    rax,rdx
ffff80000080528c:	48 c1 e0 05          	shl    rax,0x5
ffff800000805290:	48 01 c8             	add    rax,rcx
ffff800000805293:	48 c7 40 40 00 7e 00 	mov    QWORD PTR [rax+0x40],0x7e00
ffff80000080529a:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:70
    task[index].mem_struct.stack_bottom=0x6e00;
ffff80000080529b:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff8000008052a2:	ff ff ff 
ffff8000008052a5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008052a9:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008052ac:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008052af:	48 63 d0             	movsxd rdx,eax
ffff8000008052b2:	48 89 d0             	mov    rax,rdx
ffff8000008052b5:	48 01 c0             	add    rax,rax
ffff8000008052b8:	48 01 d0             	add    rax,rdx
ffff8000008052bb:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008052c2:	00 
ffff8000008052c3:	48 01 d0             	add    rax,rdx
ffff8000008052c6:	48 c1 e0 05          	shl    rax,0x5
ffff8000008052ca:	48 01 c8             	add    rax,rcx
ffff8000008052cd:	48 c7 40 38 00 6e 00 	mov    QWORD PTR [rax+0x38],0x6e00
ffff8000008052d4:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:71
    task[index].mem_struct.heap_top=0x1101000;
ffff8000008052d5:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff8000008052dc:	ff ff ff 
ffff8000008052df:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008052e3:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008052e6:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008052e9:	48 63 d0             	movsxd rdx,eax
ffff8000008052ec:	48 89 d0             	mov    rax,rdx
ffff8000008052ef:	48 01 c0             	add    rax,rax
ffff8000008052f2:	48 01 d0             	add    rax,rdx
ffff8000008052f5:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008052fc:	00 
ffff8000008052fd:	48 01 d0             	add    rax,rdx
ffff800000805300:	48 c1 e0 05          	shl    rax,0x5
ffff800000805304:	48 01 c8             	add    rax,rcx
ffff800000805307:	48 c7 40 30 00 10 10 	mov    QWORD PTR [rax+0x30],0x1101000
ffff80000080530e:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:72
    task[index].mem_struct.heap_base=0x1100000;
ffff80000080530f:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000805316:	ff ff ff 
ffff800000805319:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080531d:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000805320:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000805323:	48 63 d0             	movsxd rdx,eax
ffff800000805326:	48 89 d0             	mov    rax,rdx
ffff800000805329:	48 01 c0             	add    rax,rax
ffff80000080532c:	48 01 d0             	add    rax,rdx
ffff80000080532f:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000805336:	00 
ffff800000805337:	48 01 d0             	add    rax,rdx
ffff80000080533a:	48 c1 e0 05          	shl    rax,0x5
ffff80000080533e:	48 01 c8             	add    rax,rcx
ffff800000805341:	48 c7 40 28 00 00 10 	mov    QWORD PTR [rax+0x28],0x1100000
ffff800000805348:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:75

    //把还原现场时用到的堆栈设置好
    stack_store_regs *str= (stack_store_regs *) (0x7e00 - sizeof(stack_store_regs));
ffff800000805349:	48 c7 45 e0 58 7d 00 	mov    QWORD PTR [rbp-0x20],0x7d58
ffff800000805350:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:76
    str->rax=0;
ffff800000805351:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000805355:	48 c7 40 78 00 00 00 	mov    QWORD PTR [rax+0x78],0x0
ffff80000080535c:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:77
    str->rbx=0;
ffff80000080535d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000805361:	48 c7 40 70 00 00 00 	mov    QWORD PTR [rax+0x70],0x0
ffff800000805368:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:78
    str->rcx=proc_zero;//sysret采用的返回地址
ffff800000805369:	48 b8 e0 fe ff ff ff 	movabs rax,0xfffffffffffffee0
ffff800000805370:	ff ff ff 
ffff800000805373:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805377:	48 89 c2             	mov    rdx,rax
ffff80000080537a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080537e:	48 89 50 68          	mov    QWORD PTR [rax+0x68],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:79
    str->rdx=0;
ffff800000805382:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000805386:	48 c7 40 60 00 00 00 	mov    QWORD PTR [rax+0x60],0x0
ffff80000080538d:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:80
    str->rsi=0;
ffff80000080538e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000805392:	48 c7 40 50 00 00 00 	mov    QWORD PTR [rax+0x50],0x0
ffff800000805399:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:81
    str->rdi=0;
ffff80000080539a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080539e:	48 c7 40 58 00 00 00 	mov    QWORD PTR [rax+0x58],0x0
ffff8000008053a5:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:82
    str->r15=0;
ffff8000008053a6:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008053aa:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff8000008053b1:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:83
    str->r14=0;
ffff8000008053b2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008053b6:	48 c7 40 18 00 00 00 	mov    QWORD PTR [rax+0x18],0x0
ffff8000008053bd:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:84
    str->r13=0;
ffff8000008053be:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008053c2:	48 c7 40 20 00 00 00 	mov    QWORD PTR [rax+0x20],0x0
ffff8000008053c9:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:85
    str->r12=0;
ffff8000008053ca:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008053ce:	48 c7 40 28 00 00 00 	mov    QWORD PTR [rax+0x28],0x0
ffff8000008053d5:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:86
    str->r11=0x200;
ffff8000008053d6:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008053da:	48 c7 40 30 00 02 00 	mov    QWORD PTR [rax+0x30],0x200
ffff8000008053e1:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:87
    str->r10=0;
ffff8000008053e2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008053e6:	48 c7 40 38 00 00 00 	mov    QWORD PTR [rax+0x38],0x0
ffff8000008053ed:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:88
    str->r9=0;
ffff8000008053ee:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008053f2:	48 c7 40 40 00 00 00 	mov    QWORD PTR [rax+0x40],0x0
ffff8000008053f9:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:89
    str->r8=0;
ffff8000008053fa:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008053fe:	48 c7 40 48 00 00 00 	mov    QWORD PTR [rax+0x48],0x0
ffff800000805405:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:90
    str->rip=proc_zero;
ffff800000805406:	48 b8 e0 fe ff ff ff 	movabs rax,0xfffffffffffffee0
ffff80000080540d:	ff ff ff 
ffff800000805410:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805414:	48 89 c2             	mov    rdx,rax
ffff800000805417:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080541b:	48 89 90 80 00 00 00 	mov    QWORD PTR [rax+0x80],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:91
    str->cs=0x8;
ffff800000805422:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000805426:	48 c7 80 88 00 00 00 	mov    QWORD PTR [rax+0x88],0x8
ffff80000080542d:	08 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:92
    str->rflags=0x00200206;
ffff800000805431:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000805435:	48 c7 80 90 00 00 00 	mov    QWORD PTR [rax+0x90],0x200206
ffff80000080543c:	06 02 20 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:93
    str->rsp=0x7e00;
ffff800000805440:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000805444:	48 c7 80 98 00 00 00 	mov    QWORD PTR [rax+0x98],0x7e00
ffff80000080544b:	00 7e 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:94
    str->ss=0x2b;
ffff80000080544f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000805453:	48 c7 80 a0 00 00 00 	mov    QWORD PTR [rax+0xa0],0x2b
ffff80000080545a:	2b 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:95
    str->ds=0x2b;
ffff80000080545e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000805462:	48 c7 00 2b 00 00 00 	mov    QWORD PTR [rax],0x2b
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:96
    str->es=0x2b;
ffff800000805469:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080546d:	48 c7 40 08 2b 00 00 	mov    QWORD PTR [rax+0x8],0x2b
ffff800000805474:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:98

}
ffff800000805475:	90                   	nop
ffff800000805476:	48 8d 65 f0          	lea    rsp,[rbp-0x10]
ffff80000080547a:	5b                   	pop    rbx
ffff80000080547b:	41 5f                	pop    r15
ffff80000080547d:	5d                   	pop    rbp
ffff80000080547e:	c3                   	ret    

ffff80000080547f <init_proc0>:
init_proc0():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:100
int init_proc0()
{
ffff80000080547f:	f3 0f 1e fa          	endbr64 
ffff800000805483:	55                   	push   rbp
ffff800000805484:	48 89 e5             	mov    rbp,rsp
ffff800000805487:	41 57                	push   r15
ffff800000805489:	53                   	push   rbx
ffff80000080548a:	48 83 ec 10          	sub    rsp,0x10
ffff80000080548e:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080548e <init_proc0+0xf>
ffff800000805495:	49 bb 6a d7 11 00 00 	movabs r11,0x11d76a
ffff80000080549c:	00 00 00 
ffff80000080549f:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:102

    task[0].pid=pidd++;
ffff8000008054a2:	48 b8 10 fe ff ff ff 	movabs rax,0xfffffffffffffe10
ffff8000008054a9:	ff ff ff 
ffff8000008054ac:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008054b0:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008054b2:	8d 48 01             	lea    ecx,[rax+0x1]
ffff8000008054b5:	48 ba 10 fe ff ff ff 	movabs rdx,0xfffffffffffffe10
ffff8000008054bc:	ff ff ff 
ffff8000008054bf:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff8000008054c3:	89 0a                	mov    DWORD PTR [rdx],ecx
ffff8000008054c5:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff8000008054cc:	ff ff ff 
ffff8000008054cf:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff8000008054d3:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008054d6:	89 02                	mov    DWORD PTR [rdx],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:103
    task[0].stat=TASK_RUNNING;
ffff8000008054d8:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff8000008054df:	ff ff ff 
ffff8000008054e2:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008054e6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008054e9:	c7 40 18 01 00 00 00 	mov    DWORD PTR [rax+0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:104
    task[0].utime=0;
ffff8000008054f0:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff8000008054f7:	ff ff ff 
ffff8000008054fa:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008054fe:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000805501:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [rax+0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:105
    task[0].priority=0;
ffff800000805508:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff80000080550f:	ff ff ff 
ffff800000805512:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805516:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000805519:	c7 40 20 00 00 00 00 	mov    DWORD PTR [rax+0x20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:107

    struct process *pz=task;
ffff800000805520:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000805527:	ff ff ff 
ffff80000080552a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080552e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000805531:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:116
//    task[index].tss.eip=(long)proc_zero;
    extern struct dir_entry* dtty;
    //stdin stdout stderr
    //这里绕开了sys open，这样是为了尽量快
    extern struct file ftty;
    pz->openf[0]=(struct file*)&ftty;
ffff800000805535:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000805539:	48 ba d0 fd ff ff ff 	movabs rdx,0xfffffffffffffdd0
ffff800000805540:	ff ff ff 
ffff800000805543:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000805547:	48 89 90 f8 00 00 00 	mov    QWORD PTR [rax+0xf8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:117
    pz->openf[1]=(struct file*)&ftty;
ffff80000080554e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000805552:	48 ba d0 fd ff ff ff 	movabs rdx,0xfffffffffffffdd0
ffff800000805559:	ff ff ff 
ffff80000080555c:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000805560:	48 89 90 00 01 00 00 	mov    QWORD PTR [rax+0x100],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:118
    pz->openf[2]=(struct file*)&ftty;
ffff800000805567:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080556b:	48 ba d0 fd ff ff ff 	movabs rdx,0xfffffffffffffdd0
ffff800000805572:	ff ff ff 
ffff800000805575:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000805579:	48 89 90 08 01 00 00 	mov    QWORD PTR [rax+0x108],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:120

    pz->mem_struct.stack_top=STACK_TOP;
ffff800000805580:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000805584:	48 be 00 f0 ff ff ff 	movabs rsi,0x7ffffffff000
ffff80000080558b:	7f 00 00 
ffff80000080558e:	48 89 70 40          	mov    QWORD PTR [rax+0x40],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:121
    pz->mem_struct.stack_bottom=STACK_TOP;
ffff800000805592:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000805596:	48 89 70 38          	mov    QWORD PTR [rax+0x38],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:122
    pz->mem_struct.heap_top=HEAP_BASE;
ffff80000080559a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080559e:	48 c7 40 30 00 00 00 	mov    QWORD PTR [rax+0x30],0x1000000
ffff8000008055a5:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:123
    pz->mem_struct.heap_base=HEAP_BASE;
ffff8000008055a6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008055aa:	48 c7 40 28 00 00 00 	mov    QWORD PTR [rax+0x28],0x1000000
ffff8000008055b1:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:124
    memcpy(&pz->tss,tss, sizeof(TSS));
ffff8000008055b2:	48 b8 b8 fd ff ff ff 	movabs rax,0xfffffffffffffdb8
ffff8000008055b9:	ff ff ff 
ffff8000008055bc:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008055c0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008055c3:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff8000008055c7:	48 8d 8a f8 01 00 00 	lea    rcx,[rdx+0x1f8]
ffff8000008055ce:	ba 6c 00 00 00       	mov    edx,0x6c
ffff8000008055d3:	48 89 c6             	mov    rsi,rax
ffff8000008055d6:	48 89 cf             	mov    rdi,rcx
ffff8000008055d9:	49 89 df             	mov    r15,rbx
ffff8000008055dc:	48 b8 da 1d ef ff ff 	movabs rax,0xffffffffffef1dda
ffff8000008055e3:	ff ff ff 
ffff8000008055e6:	48 01 d8             	add    rax,rbx
ffff8000008055e9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:126

    pz->child_procs=NULL;
ffff8000008055eb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008055ef:	48 c7 80 54 03 00 00 	mov    QWORD PTR [rax+0x354],0x0
ffff8000008055f6:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:129

    //这个是进程切换的时候要读取的值
    pz->regs.cr3=PML4_ADDR&~KNL_BASE;
ffff8000008055fa:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008055fe:	48 c7 80 64 02 00 00 	mov    QWORD PTR [rax+0x264],0x101000
ffff800000805605:	00 10 10 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:130
    pz->pml4=PML4_ADDR;
ffff800000805609:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080560d:	48 bf 00 10 10 00 00 	movabs rdi,0xffff800000101000
ffff800000805614:	80 ff ff 
ffff800000805617:	48 89 b8 e0 00 00 00 	mov    QWORD PTR [rax+0xe0],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:131
    pz->cwd=root_sb->root;
ffff80000080561e:	48 b8 90 fd ff ff ff 	movabs rax,0xfffffffffffffd90
ffff800000805625:	ff ff ff 
ffff800000805628:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080562c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080562f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000805632:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000805636:	48 89 90 e8 00 00 00 	mov    QWORD PTR [rax+0xe8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:132
    pz->exef=NULL;
ffff80000080563d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000805641:	48 c7 80 f0 00 00 00 	mov    QWORD PTR [rax+0xf0],0x0
ffff800000805648:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:133
    list_init(&pz->node);
ffff80000080564c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000805650:	48 05 3c 03 00 00    	add    rax,0x33c
ffff800000805656:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff80000080565a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080565e:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff800000805665:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000805669:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff800000805670:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff800000805671:	90                   	nop
init_proc0():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:134
    pz->node.data=pz;
ffff800000805672:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000805676:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080567a:	48 89 90 44 03 00 00 	mov    QWORD PTR [rax+0x344],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:136
    
    pz->gpid=pz->pid;
ffff800000805681:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000805685:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000805687:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080568b:	89 50 04             	mov    DWORD PTR [rax+0x4],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:137
    pz->sid=pz->pid;
ffff80000080568e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000805692:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000805694:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000805698:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:138
    pz->fg_pgid=pz->pid;
ffff80000080569b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080569f:	8b 10                	mov    edx,DWORD PTR [rax]
ffff8000008056a1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008056a5:	89 50 0c             	mov    DWORD PTR [rax+0xc],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:139
    pz->in_bgpg=0;
ffff8000008056a8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008056ac:	c7 40 10 00 00 00 00 	mov    DWORD PTR [rax+0x10],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:140
    return 0;
ffff8000008056b3:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:141
}
ffff8000008056b8:	48 83 c4 10          	add    rsp,0x10
ffff8000008056bc:	5b                   	pop    rbx
ffff8000008056bd:	41 5f                	pop    r15
ffff8000008056bf:	5d                   	pop    rbp
ffff8000008056c0:	c3                   	ret    

ffff8000008056c1 <req_proc>:
req_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:142
int req_proc(){
ffff8000008056c1:	f3 0f 1e fa          	endbr64 
ffff8000008056c5:	55                   	push   rbp
ffff8000008056c6:	48 89 e5             	mov    rbp,rsp
ffff8000008056c9:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008056c9 <req_proc+0x8>
ffff8000008056d0:	49 bb 2f d5 11 00 00 	movabs r11,0x11d52f
ffff8000008056d7:	00 00 00 
ffff8000008056da:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:143
    int num=0;
ffff8000008056dd:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:144
    while(task[num].pid!=-1 && task[num].stat != TASK_EMPTY && \
ffff8000008056e4:	eb 04                	jmp    ffff8000008056ea <req_proc+0x29>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:146
    num<=MAX_PROC_COUNT){
        num++;
ffff8000008056e6:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:144
    while(task[num].pid!=-1 && task[num].stat != TASK_EMPTY && \
ffff8000008056ea:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff8000008056f1:	ff ff ff 
ffff8000008056f4:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008056f8:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff8000008056fb:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff8000008056fe:	48 63 ca             	movsxd rcx,edx
ffff800000805701:	48 89 ca             	mov    rdx,rcx
ffff800000805704:	48 01 d2             	add    rdx,rdx
ffff800000805707:	48 01 ca             	add    rdx,rcx
ffff80000080570a:	48 8d 0c d5 00 00 00 	lea    rcx,[rdx*8+0x0]
ffff800000805711:	00 
ffff800000805712:	48 01 ca             	add    rdx,rcx
ffff800000805715:	48 c1 e2 05          	shl    rdx,0x5
ffff800000805719:	48 01 f2             	add    rdx,rsi
ffff80000080571c:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff80000080571e:	83 fa ff             	cmp    edx,0xffffffff
ffff800000805721:	74 3f                	je     ffff800000805762 <req_proc+0xa1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:144 (discriminator 1)
ffff800000805723:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff80000080572a:	ff ff ff 
ffff80000080572d:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805731:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff800000805734:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000805737:	48 63 ca             	movsxd rcx,edx
ffff80000080573a:	48 89 ca             	mov    rdx,rcx
ffff80000080573d:	48 01 d2             	add    rdx,rdx
ffff800000805740:	48 01 ca             	add    rdx,rcx
ffff800000805743:	48 8d 0c d5 00 00 00 	lea    rcx,[rdx*8+0x0]
ffff80000080574a:	00 
ffff80000080574b:	48 01 ca             	add    rdx,rcx
ffff80000080574e:	48 c1 e2 05          	shl    rdx,0x5
ffff800000805752:	48 01 f2             	add    rdx,rsi
ffff800000805755:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff800000805758:	85 d2                	test   edx,edx
ffff80000080575a:	74 06                	je     ffff800000805762 <req_proc+0xa1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:144 (discriminator 2)
ffff80000080575c:	83 7d fc 40          	cmp    DWORD PTR [rbp-0x4],0x40
ffff800000805760:	7e 84                	jle    ffff8000008056e6 <req_proc+0x25>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:148
    }
    if(num>=MAX_PROC_COUNT)
ffff800000805762:	83 7d fc 3f          	cmp    DWORD PTR [rbp-0x4],0x3f
ffff800000805766:	7e 0a                	jle    ffff800000805772 <req_proc+0xb1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:149
        return -1;
ffff800000805768:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080576d:	e9 05 01 00 00       	jmp    ffff800000805877 <req_proc+0x1b6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:150
    task[num].pid=pidd++;
ffff800000805772:	48 ba 10 fe ff ff ff 	movabs rdx,0xfffffffffffffe10
ffff800000805779:	ff ff ff 
ffff80000080577c:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805780:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff800000805782:	8d 71 01             	lea    esi,[rcx+0x1]
ffff800000805785:	48 ba 10 fe ff ff ff 	movabs rdx,0xfffffffffffffe10
ffff80000080578c:	ff ff ff 
ffff80000080578f:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805793:	89 32                	mov    DWORD PTR [rdx],esi
ffff800000805795:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff80000080579c:	ff ff ff 
ffff80000080579f:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008057a3:	48 8b 3a             	mov    rdi,QWORD PTR [rdx]
ffff8000008057a6:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff8000008057a9:	48 63 f2             	movsxd rsi,edx
ffff8000008057ac:	48 89 f2             	mov    rdx,rsi
ffff8000008057af:	48 01 d2             	add    rdx,rdx
ffff8000008057b2:	48 01 f2             	add    rdx,rsi
ffff8000008057b5:	48 8d 34 d5 00 00 00 	lea    rsi,[rdx*8+0x0]
ffff8000008057bc:	00 
ffff8000008057bd:	48 01 f2             	add    rdx,rsi
ffff8000008057c0:	48 c1 e2 05          	shl    rdx,0x5
ffff8000008057c4:	48 01 fa             	add    rdx,rdi
ffff8000008057c7:	89 0a                	mov    DWORD PTR [rdx],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:151
    task[num].stat=TASK_ZOMBIE;
ffff8000008057c9:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff8000008057d0:	ff ff ff 
ffff8000008057d3:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008057d7:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff8000008057da:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff8000008057dd:	48 63 ca             	movsxd rcx,edx
ffff8000008057e0:	48 89 ca             	mov    rdx,rcx
ffff8000008057e3:	48 01 d2             	add    rdx,rdx
ffff8000008057e6:	48 01 ca             	add    rdx,rcx
ffff8000008057e9:	48 8d 0c d5 00 00 00 	lea    rcx,[rdx*8+0x0]
ffff8000008057f0:	00 
ffff8000008057f1:	48 01 ca             	add    rdx,rcx
ffff8000008057f4:	48 c1 e2 05          	shl    rdx,0x5
ffff8000008057f8:	48 01 f2             	add    rdx,rsi
ffff8000008057fb:	c7 42 18 04 00 00 00 	mov    DWORD PTR [rdx+0x18],0x4
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:152
    task[num].utime=0;
ffff800000805802:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff800000805809:	ff ff ff 
ffff80000080580c:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805810:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff800000805813:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000805816:	48 63 ca             	movsxd rcx,edx
ffff800000805819:	48 89 ca             	mov    rdx,rcx
ffff80000080581c:	48 01 d2             	add    rdx,rdx
ffff80000080581f:	48 01 ca             	add    rdx,rcx
ffff800000805822:	48 8d 0c d5 00 00 00 	lea    rcx,[rdx*8+0x0]
ffff800000805829:	00 
ffff80000080582a:	48 01 ca             	add    rdx,rcx
ffff80000080582d:	48 c1 e2 05          	shl    rdx,0x5
ffff800000805831:	48 01 f2             	add    rdx,rsi
ffff800000805834:	c7 42 1c 00 00 00 00 	mov    DWORD PTR [rdx+0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:153
    task[num].priority=0;
ffff80000080583b:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff800000805842:	ff ff ff 
ffff800000805845:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000805849:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080584c:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000080584f:	48 63 d0             	movsxd rdx,eax
ffff800000805852:	48 89 d0             	mov    rax,rdx
ffff800000805855:	48 01 c0             	add    rax,rax
ffff800000805858:	48 01 d0             	add    rax,rdx
ffff80000080585b:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000805862:	00 
ffff800000805863:	48 01 d0             	add    rax,rdx
ffff800000805866:	48 c1 e0 05          	shl    rax,0x5
ffff80000080586a:	48 01 c8             	add    rax,rcx
ffff80000080586d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [rax+0x20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:154
    return num;
ffff800000805874:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:155
}
ffff800000805877:	5d                   	pop    rbp
ffff800000805878:	c3                   	ret    

ffff800000805879 <set_proc>:
set_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:157
void set_proc(long rax, long rbx, long rcx, long rdx, long es, long cs, long ss, long ds, long fs, long gs, long rsp,
              long rbp, long rsi, long rdi, long rip, long rflags, int proc_nr) {
ffff800000805879:	f3 0f 1e fa          	endbr64 
ffff80000080587d:	55                   	push   rbp
ffff80000080587e:	48 89 e5             	mov    rbp,rsp
ffff800000805881:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000805881 <set_proc+0x8>
ffff800000805888:	49 bb 77 d3 11 00 00 	movabs r11,0x11d377
ffff80000080588f:	00 00 00 
ffff800000805892:	4c 01 d8             	add    rax,r11
ffff800000805895:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000805899:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080589d:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffff8000008058a1:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
ffff8000008058a5:	4c 89 45 c8          	mov    QWORD PTR [rbp-0x38],r8
ffff8000008058a9:	4c 89 4d c0          	mov    QWORD PTR [rbp-0x40],r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:158
    struct process* proc=&task[proc_nr];
ffff8000008058ad:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff8000008058b4:	ff ff ff 
ffff8000008058b7:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff8000008058bb:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008058be:	8b 45 60             	mov    eax,DWORD PTR [rbp+0x60]
ffff8000008058c1:	48 63 d0             	movsxd rdx,eax
ffff8000008058c4:	48 89 d0             	mov    rax,rdx
ffff8000008058c7:	48 01 c0             	add    rax,rax
ffff8000008058ca:	48 01 d0             	add    rax,rdx
ffff8000008058cd:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008058d4:	00 
ffff8000008058d5:	48 01 d0             	add    rax,rdx
ffff8000008058d8:	48 c1 e0 05          	shl    rax,0x5
ffff8000008058dc:	48 01 c8             	add    rax,rcx
ffff8000008058df:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:159
    proc->regs.rax=rax;
ffff8000008058e3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008058e7:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff8000008058eb:	48 89 90 7c 02 00 00 	mov    QWORD PTR [rax+0x27c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:160
    proc->regs.rbx=rbx;
ffff8000008058f2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008058f6:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008058fa:	48 89 90 94 02 00 00 	mov    QWORD PTR [rax+0x294],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:161
    proc->regs.rcx=rcx;
ffff800000805901:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000805905:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000805909:	48 89 90 84 02 00 00 	mov    QWORD PTR [rax+0x284],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:162
    proc->regs.rdx=rdx;
ffff800000805910:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000805914:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000805918:	48 89 90 8c 02 00 00 	mov    QWORD PTR [rax+0x28c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:163
    proc->regs.es=es;
ffff80000080591f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000805923:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000805927:	48 89 90 bc 02 00 00 	mov    QWORD PTR [rax+0x2bc],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:164
    proc->regs.cs=cs;
ffff80000080592e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000805932:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000805936:	48 89 90 c4 02 00 00 	mov    QWORD PTR [rax+0x2c4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:165
    proc->regs.ss=ss;
ffff80000080593d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000805941:	48 8b 55 10          	mov    rdx,QWORD PTR [rbp+0x10]
ffff800000805945:	48 89 90 cc 02 00 00 	mov    QWORD PTR [rax+0x2cc],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:166
    proc->regs.ds=ds;
ffff80000080594c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000805950:	48 8b 55 18          	mov    rdx,QWORD PTR [rbp+0x18]
ffff800000805954:	48 89 90 d4 02 00 00 	mov    QWORD PTR [rax+0x2d4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:167
    proc->regs.fs=fs;
ffff80000080595b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080595f:	48 8b 55 20          	mov    rdx,QWORD PTR [rbp+0x20]
ffff800000805963:	48 89 90 dc 02 00 00 	mov    QWORD PTR [rax+0x2dc],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:168
    proc->regs.gs=gs;
ffff80000080596a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080596e:	48 8b 55 28          	mov    rdx,QWORD PTR [rbp+0x28]
ffff800000805972:	48 89 90 e4 02 00 00 	mov    QWORD PTR [rax+0x2e4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:169
    proc->regs.rsp=rsp;
ffff800000805979:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080597d:	48 8b 55 30          	mov    rdx,QWORD PTR [rbp+0x30]
ffff800000805981:	48 89 90 9c 02 00 00 	mov    QWORD PTR [rax+0x29c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:170
    proc->regs.rbp=rbp;
ffff800000805988:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080598c:	48 8b 55 38          	mov    rdx,QWORD PTR [rbp+0x38]
ffff800000805990:	48 89 90 a4 02 00 00 	mov    QWORD PTR [rax+0x2a4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:171
    proc->regs.rsi=rsi;
ffff800000805997:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080599b:	48 8b 55 40          	mov    rdx,QWORD PTR [rbp+0x40]
ffff80000080599f:	48 89 90 ac 02 00 00 	mov    QWORD PTR [rax+0x2ac],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:172
    proc->regs.rdi=rdi;
ffff8000008059a6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008059aa:	48 8b 55 48          	mov    rdx,QWORD PTR [rbp+0x48]
ffff8000008059ae:	48 89 90 b4 02 00 00 	mov    QWORD PTR [rax+0x2b4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:173
    proc->regs.rflags=0x202;//设置为默认值:0b 0010 0000 0010
ffff8000008059b5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008059b9:	48 c7 80 74 02 00 00 	mov    QWORD PTR [rax+0x274],0x202
ffff8000008059c0:	02 02 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:175
    //能接受中断
    proc->regs.rip=rip;
ffff8000008059c4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008059c8:	48 8b 55 50          	mov    rdx,QWORD PTR [rbp+0x50]
ffff8000008059cc:	48 89 90 6c 02 00 00 	mov    QWORD PTR [rax+0x26c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:177

    proc->regs.cs=cs;
ffff8000008059d3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008059d7:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff8000008059db:	48 89 90 c4 02 00 00 	mov    QWORD PTR [rax+0x2c4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:178
    proc->regs.ds=ds;
ffff8000008059e2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008059e6:	48 8b 55 18          	mov    rdx,QWORD PTR [rbp+0x18]
ffff8000008059ea:	48 89 90 d4 02 00 00 	mov    QWORD PTR [rax+0x2d4],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:179
    proc->regs.es=es;
ffff8000008059f1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008059f5:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff8000008059f9:	48 89 90 bc 02 00 00 	mov    QWORD PTR [rax+0x2bc],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:180
    proc->regs.cr3=PML4_ADDR;//get_phyaddr(n1);//暂时先搞成全局
ffff800000805a00:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000805a04:	48 be 00 10 10 00 00 	movabs rsi,0xffff800000101000
ffff800000805a0b:	80 ff ff 
ffff800000805a0e:	48 89 b0 64 02 00 00 	mov    QWORD PTR [rax+0x264],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:181
    proc->pml4=PML4_ADDR;
ffff800000805a15:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000805a19:	48 89 b0 e0 00 00 00 	mov    QWORD PTR [rax+0xe0],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:184


}
ffff800000805a20:	90                   	nop
ffff800000805a21:	5d                   	pop    rbp
ffff800000805a22:	c3                   	ret    

ffff800000805a23 <proc_zero>:
proc_zero():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:186
void proc_zero()
{
ffff800000805a23:	f3 0f 1e fa          	endbr64 
ffff800000805a27:	55                   	push   rbp
ffff800000805a28:	48 89 e5             	mov    rbp,rsp
ffff800000805a2b:	41 57                	push   r15
ffff800000805a2d:	53                   	push   rbx
ffff800000805a2e:	48 83 ec 10          	sub    rsp,0x10
ffff800000805a32:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000805a32 <proc_zero+0xf>
ffff800000805a39:	49 bb c6 d1 11 00 00 	movabs r11,0x11d1c6
ffff800000805a40:	00 00 00 
ffff800000805a43:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:199 (discriminator 1)
//    }else{
//        printf("parent proc ret:%d\n",rax);
//    }
    while (1)
    {
        char c= sys_analyse_key();
ffff800000805a46:	49 89 df             	mov    r15,rbx
ffff800000805a49:	b8 00 00 00 00       	mov    eax,0x0
ffff800000805a4e:	48 ba 0f d5 ee ff ff 	movabs rdx,0xffffffffffeed50f
ffff800000805a55:	ff ff ff 
ffff800000805a58:	48 01 da             	add    rdx,rbx
ffff800000805a5b:	ff d2                	call   rdx
ffff800000805a5d:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:200 (discriminator 1)
        putchar(c);
ffff800000805a60:	0f be 45 ef          	movsx  eax,BYTE PTR [rbp-0x11]
ffff800000805a64:	89 c7                	mov    edi,eax
ffff800000805a66:	49 89 df             	mov    r15,rbx
ffff800000805a69:	48 b8 78 ed ed ff ff 	movabs rax,0xffffffffffeded78
ffff800000805a70:	ff ff ff 
ffff800000805a73:	48 01 d8             	add    rax,rbx
ffff800000805a76:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:198 (discriminator 1)
    {
ffff800000805a78:	eb cc                	jmp    ffff800000805a46 <proc_zero+0x23>

ffff800000805a7a <save_rsp>:
save_rsp():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:203
    }
}
void save_rsp(){
ffff800000805a7a:	f3 0f 1e fa          	endbr64 
ffff800000805a7e:	55                   	push   rbp
ffff800000805a7f:	48 89 e5             	mov    rbp,rsp
ffff800000805a82:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000805a82 <save_rsp+0x8>
ffff800000805a89:	49 bb 76 d1 11 00 00 	movabs r11,0x11d176
ffff800000805a90:	00 00 00 
ffff800000805a93:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:205
    //在时钟中断context下
    addr_t * p=INT_STACK_TOP-16;
ffff800000805a96:	48 be f0 ff 7f 00 00 	movabs rsi,0xffff8000007ffff0
ffff800000805a9d:	80 ff ff 
ffff800000805aa0:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:206
    current->regs.rsp=*p;
ffff800000805aa4:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000805aa8:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000805aab:	48 b9 48 fe ff ff ff 	movabs rcx,0xfffffffffffffe48
ffff800000805ab2:	ff ff ff 
ffff800000805ab5:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff800000805ab9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000805abc:	48 89 90 9c 02 00 00 	mov    QWORD PTR [rax+0x29c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:207
}
ffff800000805ac3:	90                   	nop
ffff800000805ac4:	5d                   	pop    rbp
ffff800000805ac5:	c3                   	ret    

ffff800000805ac6 <manage_proc>:
manage_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:208
void manage_proc(){
ffff800000805ac6:	f3 0f 1e fa          	endbr64 
ffff800000805aca:	55                   	push   rbp
ffff800000805acb:	48 89 e5             	mov    rbp,rsp
ffff800000805ace:	41 57                	push   r15
ffff800000805ad0:	48 83 ec 18          	sub    rsp,0x18
ffff800000805ad4:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000805ad4 <manage_proc+0xe>
ffff800000805adb:	49 bb 24 d1 11 00 00 	movabs r11,0x11d124
ffff800000805ae2:	00 00 00 
ffff800000805ae5:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:209
    if(cur_proc!=-1)
ffff800000805ae8:	48 ba d8 fd ff ff ff 	movabs rdx,0xfffffffffffffdd8
ffff800000805aef:	ff ff ff 
ffff800000805af2:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805af6:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000805af8:	83 fa ff             	cmp    edx,0xffffffff
ffff800000805afb:	74 48                	je     ffff800000805b45 <manage_proc+0x7f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:210
        task[cur_proc].utime++;
ffff800000805afd:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff800000805b04:	ff ff ff 
ffff800000805b07:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805b0b:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff800000805b0e:	48 ba d8 fd ff ff ff 	movabs rdx,0xfffffffffffffdd8
ffff800000805b15:	ff ff ff 
ffff800000805b18:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805b1c:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000805b1e:	48 63 ca             	movsxd rcx,edx
ffff800000805b21:	48 89 ca             	mov    rdx,rcx
ffff800000805b24:	48 01 d2             	add    rdx,rdx
ffff800000805b27:	48 01 ca             	add    rdx,rcx
ffff800000805b2a:	48 8d 0c d5 00 00 00 	lea    rcx,[rdx*8+0x0]
ffff800000805b31:	00 
ffff800000805b32:	48 01 ca             	add    rdx,rcx
ffff800000805b35:	48 c1 e2 05          	shl    rdx,0x5
ffff800000805b39:	48 01 f2             	add    rdx,rsi
ffff800000805b3c:	8b 4a 1c             	mov    ecx,DWORD PTR [rdx+0x1c]
ffff800000805b3f:	83 c1 01             	add    ecx,0x1
ffff800000805b42:	89 4a 1c             	mov    DWORD PTR [rdx+0x1c],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:211
    if(cur_proc==-1||task[cur_proc].utime>MAX_UTIME||\
ffff800000805b45:	48 ba d8 fd ff ff ff 	movabs rdx,0xfffffffffffffdd8
ffff800000805b4c:	ff ff ff 
ffff800000805b4f:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805b53:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000805b55:	83 fa ff             	cmp    edx,0xffffffff
ffff800000805b58:	0f 84 92 00 00 00    	je     ffff800000805bf0 <manage_proc+0x12a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:211 (discriminator 1)
ffff800000805b5e:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff800000805b65:	ff ff ff 
ffff800000805b68:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805b6c:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff800000805b6f:	48 ba d8 fd ff ff ff 	movabs rdx,0xfffffffffffffdd8
ffff800000805b76:	ff ff ff 
ffff800000805b79:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805b7d:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000805b7f:	48 63 ca             	movsxd rcx,edx
ffff800000805b82:	48 89 ca             	mov    rdx,rcx
ffff800000805b85:	48 01 d2             	add    rdx,rdx
ffff800000805b88:	48 01 ca             	add    rdx,rcx
ffff800000805b8b:	48 8d 0c d5 00 00 00 	lea    rcx,[rdx*8+0x0]
ffff800000805b92:	00 
ffff800000805b93:	48 01 ca             	add    rdx,rcx
ffff800000805b96:	48 c1 e2 05          	shl    rdx,0x5
ffff800000805b9a:	48 01 f2             	add    rdx,rsi
ffff800000805b9d:	8b 52 1c             	mov    edx,DWORD PTR [rdx+0x1c]
ffff800000805ba0:	83 fa 0a             	cmp    edx,0xa
ffff800000805ba3:	77 4b                	ja     ffff800000805bf0 <manage_proc+0x12a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:212 (discriminator 2)
    task[cur_proc].stat != TASK_READY){
ffff800000805ba5:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff800000805bac:	ff ff ff 
ffff800000805baf:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805bb3:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff800000805bb6:	48 ba d8 fd ff ff ff 	movabs rdx,0xfffffffffffffdd8
ffff800000805bbd:	ff ff ff 
ffff800000805bc0:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805bc4:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000805bc6:	48 63 ca             	movsxd rcx,edx
ffff800000805bc9:	48 89 ca             	mov    rdx,rcx
ffff800000805bcc:	48 01 d2             	add    rdx,rdx
ffff800000805bcf:	48 01 ca             	add    rdx,rcx
ffff800000805bd2:	48 8d 0c d5 00 00 00 	lea    rcx,[rdx*8+0x0]
ffff800000805bd9:	00 
ffff800000805bda:	48 01 ca             	add    rdx,rcx
ffff800000805bdd:	48 c1 e2 05          	shl    rdx,0x5
ffff800000805be1:	48 01 f2             	add    rdx,rsi
ffff800000805be4:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:211 (discriminator 2)
    if(cur_proc==-1||task[cur_proc].utime>MAX_UTIME||\
ffff800000805be7:	83 fa 02             	cmp    edx,0x2
ffff800000805bea:	0f 84 3a 02 00 00    	je     ffff800000805e2a <manage_proc+0x364>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:213
        if(cur_proc!=-1)
ffff800000805bf0:	48 ba d8 fd ff ff ff 	movabs rdx,0xfffffffffffffdd8
ffff800000805bf7:	ff ff ff 
ffff800000805bfa:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805bfe:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000805c00:	83 fa ff             	cmp    edx,0xffffffff
ffff800000805c03:	74 46                	je     ffff800000805c4b <manage_proc+0x185>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:214
            task[cur_proc].utime=0;
ffff800000805c05:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff800000805c0c:	ff ff ff 
ffff800000805c0f:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805c13:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff800000805c16:	48 ba d8 fd ff ff ff 	movabs rdx,0xfffffffffffffdd8
ffff800000805c1d:	ff ff ff 
ffff800000805c20:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805c24:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000805c26:	48 63 ca             	movsxd rcx,edx
ffff800000805c29:	48 89 ca             	mov    rdx,rcx
ffff800000805c2c:	48 01 d2             	add    rdx,rdx
ffff800000805c2f:	48 01 ca             	add    rdx,rcx
ffff800000805c32:	48 8d 0c d5 00 00 00 	lea    rcx,[rdx*8+0x0]
ffff800000805c39:	00 
ffff800000805c3a:	48 01 ca             	add    rdx,rcx
ffff800000805c3d:	48 c1 e2 05          	shl    rdx,0x5
ffff800000805c41:	48 01 f2             	add    rdx,rsi
ffff800000805c44:	c7 42 1c 00 00 00 00 	mov    DWORD PTR [rdx+0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:216
        //find
        int i=cur_proc+1;
ffff800000805c4b:	48 ba d8 fd ff ff ff 	movabs rdx,0xfffffffffffffdd8
ffff800000805c52:	ff ff ff 
ffff800000805c55:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805c59:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000805c5b:	83 c2 01             	add    edx,0x1
ffff800000805c5e:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:217
        int times=0;
ffff800000805c61:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:219
        //轮询，直到有一个符合条件
        while(times<10){
ffff800000805c68:	e9 9d 00 00 00       	jmp    ffff800000805d0a <manage_proc+0x244>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:220
            if(task[i].pid!=-1 && task[i].stat == TASK_READY && i != cur_proc){
ffff800000805c6d:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff800000805c74:	ff ff ff 
ffff800000805c77:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805c7b:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff800000805c7e:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000805c81:	48 63 ca             	movsxd rcx,edx
ffff800000805c84:	48 89 ca             	mov    rdx,rcx
ffff800000805c87:	48 01 d2             	add    rdx,rdx
ffff800000805c8a:	48 01 ca             	add    rdx,rcx
ffff800000805c8d:	48 8d 0c d5 00 00 00 	lea    rcx,[rdx*8+0x0]
ffff800000805c94:	00 
ffff800000805c95:	48 01 ca             	add    rdx,rcx
ffff800000805c98:	48 c1 e2 05          	shl    rdx,0x5
ffff800000805c9c:	48 01 f2             	add    rdx,rsi
ffff800000805c9f:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000805ca1:	83 fa ff             	cmp    edx,0xffffffff
ffff800000805ca4:	74 4f                	je     ffff800000805cf5 <manage_proc+0x22f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:220 (discriminator 1)
ffff800000805ca6:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff800000805cad:	ff ff ff 
ffff800000805cb0:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805cb4:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff800000805cb7:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000805cba:	48 63 ca             	movsxd rcx,edx
ffff800000805cbd:	48 89 ca             	mov    rdx,rcx
ffff800000805cc0:	48 01 d2             	add    rdx,rdx
ffff800000805cc3:	48 01 ca             	add    rdx,rcx
ffff800000805cc6:	48 8d 0c d5 00 00 00 	lea    rcx,[rdx*8+0x0]
ffff800000805ccd:	00 
ffff800000805cce:	48 01 ca             	add    rdx,rcx
ffff800000805cd1:	48 c1 e2 05          	shl    rdx,0x5
ffff800000805cd5:	48 01 f2             	add    rdx,rsi
ffff800000805cd8:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff800000805cdb:	83 fa 02             	cmp    edx,0x2
ffff800000805cde:	75 15                	jne    ffff800000805cf5 <manage_proc+0x22f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:220 (discriminator 2)
ffff800000805ce0:	48 ba d8 fd ff ff ff 	movabs rdx,0xfffffffffffffdd8
ffff800000805ce7:	ff ff ff 
ffff800000805cea:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805cee:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000805cf0:	39 55 ec             	cmp    DWORD PTR [rbp-0x14],edx
ffff800000805cf3:	75 21                	jne    ffff800000805d16 <manage_proc+0x250>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:223
                break;
            }
            i++;
ffff800000805cf5:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:224
            if(i>=MAX_TASKS){
ffff800000805cf9:	83 7d ec 1f          	cmp    DWORD PTR [rbp-0x14],0x1f
ffff800000805cfd:	7e 0b                	jle    ffff800000805d0a <manage_proc+0x244>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:225
                times++;
ffff800000805cff:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:226
                i=0;
ffff800000805d03:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:219
        while(times<10){
ffff800000805d0a:	83 7d e8 09          	cmp    DWORD PTR [rbp-0x18],0x9
ffff800000805d0e:	0f 8e 59 ff ff ff    	jle    ffff800000805c6d <manage_proc+0x1a7>
ffff800000805d14:	eb 01                	jmp    ffff800000805d17 <manage_proc+0x251>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:221
                break;
ffff800000805d16:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:229
            }
        }
        if(times==10)return;//超过十次尝试都没有，暂时不切换
ffff800000805d17:	83 7d e8 0a          	cmp    DWORD PTR [rbp-0x18],0xa
ffff800000805d1b:	0f 84 0c 01 00 00    	je     ffff800000805e2d <manage_proc+0x367>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:231
        //switch
        task[cur_proc].stat=TASK_READY;
ffff800000805d21:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff800000805d28:	ff ff ff 
ffff800000805d2b:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805d2f:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff800000805d32:	48 ba d8 fd ff ff ff 	movabs rdx,0xfffffffffffffdd8
ffff800000805d39:	ff ff ff 
ffff800000805d3c:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805d40:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000805d42:	48 63 ca             	movsxd rcx,edx
ffff800000805d45:	48 89 ca             	mov    rdx,rcx
ffff800000805d48:	48 01 d2             	add    rdx,rdx
ffff800000805d4b:	48 01 ca             	add    rdx,rcx
ffff800000805d4e:	48 8d 0c d5 00 00 00 	lea    rcx,[rdx*8+0x0]
ffff800000805d55:	00 
ffff800000805d56:	48 01 ca             	add    rdx,rcx
ffff800000805d59:	48 c1 e2 05          	shl    rdx,0x5
ffff800000805d5d:	48 01 f2             	add    rdx,rsi
ffff800000805d60:	c7 42 18 02 00 00 00 	mov    DWORD PTR [rdx+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:232
        task[i].stat=TASK_RUNNING;
ffff800000805d67:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff800000805d6e:	ff ff ff 
ffff800000805d71:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805d75:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff800000805d78:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000805d7b:	48 63 ca             	movsxd rcx,edx
ffff800000805d7e:	48 89 ca             	mov    rdx,rcx
ffff800000805d81:	48 01 d2             	add    rdx,rdx
ffff800000805d84:	48 01 ca             	add    rdx,rcx
ffff800000805d87:	48 8d 0c d5 00 00 00 	lea    rcx,[rdx*8+0x0]
ffff800000805d8e:	00 
ffff800000805d8f:	48 01 ca             	add    rdx,rcx
ffff800000805d92:	48 c1 e2 05          	shl    rdx,0x5
ffff800000805d96:	48 01 f2             	add    rdx,rsi
ffff800000805d99:	c7 42 18 01 00 00 00 	mov    DWORD PTR [rdx+0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:233
        switch_to(&task[cur_proc], &task[i]);
ffff800000805da0:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff800000805da7:	ff ff ff 
ffff800000805daa:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805dae:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff800000805db1:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000805db4:	48 63 ca             	movsxd rcx,edx
ffff800000805db7:	48 89 ca             	mov    rdx,rcx
ffff800000805dba:	48 01 d2             	add    rdx,rdx
ffff800000805dbd:	48 01 ca             	add    rdx,rcx
ffff800000805dc0:	48 8d 0c d5 00 00 00 	lea    rcx,[rdx*8+0x0]
ffff800000805dc7:	00 
ffff800000805dc8:	48 01 ca             	add    rdx,rcx
ffff800000805dcb:	48 c1 e2 05          	shl    rdx,0x5
ffff800000805dcf:	48 8d 0c 16          	lea    rcx,[rsi+rdx*1]
ffff800000805dd3:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff800000805dda:	ff ff ff 
ffff800000805ddd:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805de1:	48 8b 3a             	mov    rdi,QWORD PTR [rdx]
ffff800000805de4:	48 ba d8 fd ff ff ff 	movabs rdx,0xfffffffffffffdd8
ffff800000805deb:	ff ff ff 
ffff800000805dee:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805df2:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000805df4:	48 63 f2             	movsxd rsi,edx
ffff800000805df7:	48 89 f2             	mov    rdx,rsi
ffff800000805dfa:	48 01 d2             	add    rdx,rdx
ffff800000805dfd:	48 01 f2             	add    rdx,rsi
ffff800000805e00:	48 8d 34 d5 00 00 00 	lea    rsi,[rdx*8+0x0]
ffff800000805e07:	00 
ffff800000805e08:	48 01 f2             	add    rdx,rsi
ffff800000805e0b:	48 c1 e2 05          	shl    rdx,0x5
ffff800000805e0f:	48 01 fa             	add    rdx,rdi
ffff800000805e12:	48 89 ce             	mov    rsi,rcx
ffff800000805e15:	48 89 d7             	mov    rdi,rdx
ffff800000805e18:	49 89 c7             	mov    r15,rax
ffff800000805e1b:	48 ba 12 45 ee ff ff 	movabs rdx,0xffffffffffee4512
ffff800000805e22:	ff ff ff 
ffff800000805e25:	48 01 c2             	add    rdx,rax
ffff800000805e28:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:235
    }
    return;
ffff800000805e2a:	90                   	nop
ffff800000805e2b:	eb 01                	jmp    ffff800000805e2e <manage_proc+0x368>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:229
        if(times==10)return;//超过十次尝试都没有，暂时不切换
ffff800000805e2d:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:236
}
ffff800000805e2e:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000805e32:	c9                   	leave  
ffff800000805e33:	c3                   	ret    

ffff800000805e34 <switch_proc_tss>:
switch_proc_tss():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:239

void switch_proc_tss(int pnr)
{
ffff800000805e34:	f3 0f 1e fa          	endbr64 
ffff800000805e38:	55                   	push   rbp
ffff800000805e39:	48 89 e5             	mov    rbp,rsp
ffff800000805e3c:	41 57                	push   r15
ffff800000805e3e:	48 83 ec 28          	sub    rsp,0x28
ffff800000805e42:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000805e42 <switch_proc_tss+0xe>
ffff800000805e49:	49 bb b6 cd 11 00 00 	movabs r11,0x11cdb6
ffff800000805e50:	00 00 00 
ffff800000805e53:	4c 01 d8             	add    rax,r11
ffff800000805e56:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:240
    int sel=_TSS_IND(pnr)*8;
ffff800000805e59:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000805e5c:	01 d2                	add    edx,edx
ffff800000805e5e:	83 c2 05             	add    edx,0x5
ffff800000805e61:	c1 e2 03             	shl    edx,0x3
ffff800000805e64:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:241
    cur_proc=pnr;
ffff800000805e67:	48 ba d8 fd ff ff ff 	movabs rdx,0xfffffffffffffdd8
ffff800000805e6e:	ff ff ff 
ffff800000805e71:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000805e75:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
ffff800000805e78:	89 0a                	mov    DWORD PTR [rdx],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:242
    switch_proc_asm(sel);
ffff800000805e7a:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000805e7d:	89 d7                	mov    edi,edx
ffff800000805e7f:	49 89 c7             	mov    r15,rax
ffff800000805e82:	48 ba ef 26 ef ff ff 	movabs rdx,0xffffffffffef26ef
ffff800000805e89:	ff ff ff 
ffff800000805e8c:	48 01 c2             	add    rdx,rax
ffff800000805e8f:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:243
}
ffff800000805e91:	90                   	nop
ffff800000805e92:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000805e96:	c9                   	leave  
ffff800000805e97:	c3                   	ret    

ffff800000805e98 <switch_proc>:
switch_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:244
void switch_proc(int pnr){
ffff800000805e98:	f3 0f 1e fa          	endbr64 
ffff800000805e9c:	55                   	push   rbp
ffff800000805e9d:	48 89 e5             	mov    rbp,rsp
ffff800000805ea0:	41 57                	push   r15
ffff800000805ea2:	53                   	push   rbx
ffff800000805ea3:	48 81 ec 80 03 00 00 	sub    rsp,0x380
ffff800000805eaa:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000805eaa <switch_proc+0x12>
ffff800000805eb1:	49 bb 4e cd 11 00 00 	movabs r11,0x11cd4e
ffff800000805eb8:	00 00 00 
ffff800000805ebb:	4c 01 db             	add    rbx,r11
ffff800000805ebe:	89 bd 7c fc ff ff    	mov    DWORD PTR [rbp-0x384],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:247
    //printf("switching proc to %d\n",pnr);
    //printf("eip:%x\n",task[pnr].tss.eip);
    struct process p=task[pnr];
ffff800000805ec4:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000805ecb:	ff ff ff 
ffff800000805ece:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805ed2:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000805ed5:	8b 85 7c fc ff ff    	mov    eax,DWORD PTR [rbp-0x384]
ffff800000805edb:	48 63 d0             	movsxd rdx,eax
ffff800000805ede:	48 89 d0             	mov    rax,rdx
ffff800000805ee1:	48 01 c0             	add    rax,rax
ffff800000805ee4:	48 01 d0             	add    rax,rdx
ffff800000805ee7:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000805eee:	00 
ffff800000805eef:	48 01 d0             	add    rax,rdx
ffff800000805ef2:	48 c1 e0 05          	shl    rax,0x5
ffff800000805ef6:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
ffff800000805efa:	48 8d 85 80 fc ff ff 	lea    rax,[rbp-0x380]
ffff800000805f01:	48 89 d6             	mov    rsi,rdx
ffff800000805f04:	ba 6c 00 00 00       	mov    edx,0x6c
ffff800000805f09:	48 89 c7             	mov    rdi,rax
ffff800000805f0c:	48 89 d1             	mov    rcx,rdx
ffff800000805f0f:	f3 48 a5             	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:248
    save_context(&task[cur_proc].tss);
ffff800000805f12:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000805f19:	ff ff ff 
ffff800000805f1c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805f20:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000805f23:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff800000805f2a:	ff ff ff 
ffff800000805f2d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805f31:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000805f33:	48 63 d0             	movsxd rdx,eax
ffff800000805f36:	48 89 d0             	mov    rax,rdx
ffff800000805f39:	48 01 c0             	add    rax,rax
ffff800000805f3c:	48 01 d0             	add    rax,rdx
ffff800000805f3f:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000805f46:	00 
ffff800000805f47:	48 01 d0             	add    rax,rdx
ffff800000805f4a:	48 c1 e0 05          	shl    rax,0x5
ffff800000805f4e:	48 01 c8             	add    rax,rcx
ffff800000805f51:	48 05 f8 01 00 00    	add    rax,0x1f8
ffff800000805f57:	48 89 c7             	mov    rdi,rax
ffff800000805f5a:	49 89 df             	mov    r15,rbx
ffff800000805f5d:	b8 00 00 00 00       	mov    eax,0x0
ffff800000805f62:	48 ba ef 26 ef ff ff 	movabs rdx,0xffffffffffef26ef
ffff800000805f69:	ff ff ff 
ffff800000805f6c:	48 01 da             	add    rdx,rbx
ffff800000805f6f:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:253
//    //重新设置0号进程
//    task[0].tss.eip=proc_zero;
//    task[0].tss.cr3=PAGE_INDEX_ADDR;
//    task[0].tss.eflags=0x202;
    cur_proc=pnr;
ffff800000805f71:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff800000805f78:	ff ff ff 
ffff800000805f7b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805f7f:	8b 95 7c fc ff ff    	mov    edx,DWORD PTR [rbp-0x384]
ffff800000805f85:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:254
    int sel=_TSS_IND(pnr)*8;
ffff800000805f87:	8b 85 7c fc ff ff    	mov    eax,DWORD PTR [rbp-0x384]
ffff800000805f8d:	01 c0                	add    eax,eax
ffff800000805f8f:	83 c0 05             	add    eax,0x5
ffff800000805f92:	c1 e0 03             	shl    eax,0x3
ffff800000805f95:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:255
    switch_to(NULL, &task[pnr].tss);
ffff800000805f98:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000805f9f:	ff ff ff 
ffff800000805fa2:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000805fa6:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000805fa9:	8b 85 7c fc ff ff    	mov    eax,DWORD PTR [rbp-0x384]
ffff800000805faf:	48 63 d0             	movsxd rdx,eax
ffff800000805fb2:	48 89 d0             	mov    rax,rdx
ffff800000805fb5:	48 01 c0             	add    rax,rax
ffff800000805fb8:	48 01 d0             	add    rax,rdx
ffff800000805fbb:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000805fc2:	00 
ffff800000805fc3:	48 01 d0             	add    rax,rdx
ffff800000805fc6:	48 c1 e0 05          	shl    rax,0x5
ffff800000805fca:	48 01 c8             	add    rax,rcx
ffff800000805fcd:	48 05 f8 01 00 00    	add    rax,0x1f8
ffff800000805fd3:	48 89 c6             	mov    rsi,rax
ffff800000805fd6:	bf 00 00 00 00       	mov    edi,0x0
ffff800000805fdb:	49 89 df             	mov    r15,rbx
ffff800000805fde:	48 b8 12 45 ee ff ff 	movabs rax,0xffffffffffee4512
ffff800000805fe5:	ff ff ff 
ffff800000805fe8:	48 01 d8             	add    rax,rbx
ffff800000805feb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:258
    //__asm__ volatile("push %0":"=r"(task[pnr].tss.eip));
    //switch_proc_asm(pnr*8+0x8*3);
}
ffff800000805fed:	90                   	nop
ffff800000805fee:	48 81 c4 80 03 00 00 	add    rsp,0x380
ffff800000805ff5:	5b                   	pop    rbx
ffff800000805ff6:	41 5f                	pop    r15
ffff800000805ff8:	5d                   	pop    rbp
ffff800000805ff9:	c3                   	ret    

ffff800000805ffa <save_context_c>:
save_context_c():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:260
void save_context_c(void* ctx,void *int_stk)
{
ffff800000805ffa:	f3 0f 1e fa          	endbr64 
ffff800000805ffe:	55                   	push   rbp
ffff800000805fff:	48 89 e5             	mov    rbp,rsp
ffff800000806002:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000806002 <save_context_c+0x8>
ffff800000806009:	49 bb f6 cb 11 00 00 	movabs r11,0x11cbf6
ffff800000806010:	00 00 00 
ffff800000806013:	4c 01 d8             	add    rax,r11
ffff800000806016:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff80000080601a:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:261
    unsigned long long* rs=ctx;
ffff80000080601e:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000806022:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:262
    current->regs.rbp=rs[0];
ffff800000806026:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080602a:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080602d:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000806034:	ff ff ff 
ffff800000806037:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080603b:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080603e:	48 89 8a a4 02 00 00 	mov    QWORD PTR [rdx+0x2a4],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:263
    current->regs.rip=((unsigned long long*)int_stk)[0];
ffff800000806045:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000806049:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080604c:	48 b9 48 fe ff ff ff 	movabs rcx,0xfffffffffffffe48
ffff800000806053:	ff ff ff 
ffff800000806056:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff80000080605a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080605d:	48 89 90 6c 02 00 00 	mov    QWORD PTR [rax+0x26c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:264
}
ffff800000806064:	90                   	nop
ffff800000806065:	5d                   	pop    rbp
ffff800000806066:	c3                   	ret    

ffff800000806067 <palloc>:
palloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:425
    task[index].stat=TASK_READY;
    return index;
} */
//为指定进程申请新的内存，并返回这块内存的线性地址。
void* palloc(int proc_index,int size)
{
ffff800000806067:	f3 0f 1e fa          	endbr64 
ffff80000080606b:	55                   	push   rbp
ffff80000080606c:	48 89 e5             	mov    rbp,rsp
ffff80000080606f:	41 57                	push   r15
ffff800000806071:	53                   	push   rbx
ffff800000806072:	48 83 ec 60          	sub    rsp,0x60
ffff800000806076:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000806076 <palloc+0xf>
ffff80000080607d:	49 bb 82 cb 11 00 00 	movabs r11,0x11cb82
ffff800000806084:	00 00 00 
ffff800000806087:	4c 01 db             	add    rbx,r11
ffff80000080608a:	89 7d 9c             	mov    DWORD PTR [rbp-0x64],edi
ffff80000080608d:	89 75 98             	mov    DWORD PTR [rbp-0x68],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:426
    int page_c=size/4096+size%4096?1:0;
ffff800000806090:	8b 45 98             	mov    eax,DWORD PTR [rbp-0x68]
ffff800000806093:	8d 90 ff 0f 00 00    	lea    edx,[rax+0xfff]
ffff800000806099:	85 c0                	test   eax,eax
ffff80000080609b:	0f 48 c2             	cmovs  eax,edx
ffff80000080609e:	c1 f8 0c             	sar    eax,0xc
ffff8000008060a1:	89 c1                	mov    ecx,eax
ffff8000008060a3:	8b 45 98             	mov    eax,DWORD PTR [rbp-0x68]
ffff8000008060a6:	99                   	cdq    
ffff8000008060a7:	c1 ea 14             	shr    edx,0x14
ffff8000008060aa:	01 d0                	add    eax,edx
ffff8000008060ac:	25 ff 0f 00 00       	and    eax,0xfff
ffff8000008060b1:	29 d0                	sub    eax,edx
ffff8000008060b3:	01 c8                	add    eax,ecx
ffff8000008060b5:	85 c0                	test   eax,eax
ffff8000008060b7:	0f 95 c0             	setne  al
ffff8000008060ba:	0f b6 c0             	movzx  eax,al
ffff8000008060bd:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:427
    int c=0;
ffff8000008060c0:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:428
    void *ptr=NULL;
ffff8000008060c7:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
ffff8000008060ce:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:429
    page_item *pgind=NULL;//task[proc_index].tss.cr3;
ffff8000008060cf:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff8000008060d6:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:430
    pgind++;
ffff8000008060d7:	48 83 45 e0 08       	add    QWORD PTR [rbp-0x20],0x8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:431
    for(int i=1;i<1024;i++)
ffff8000008060dc:	c7 45 dc 01 00 00 00 	mov    DWORD PTR [rbp-0x24],0x1
ffff8000008060e3:	e9 bb 03 00 00       	jmp    ffff8000008064a3 <palloc+0x43c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:433
    {
        page_item* tblp=*pgind&0xfffff000;
ffff8000008060e8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008060ec:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008060ef:	25 00 f0 ff ff       	and    eax,0xfffff000
ffff8000008060f4:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:434
        for(int j=0;j<1024;j++)
ffff8000008060f8:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
ffff8000008060ff:	e9 89 03 00 00       	jmp    ffff80000080648d <palloc+0x426>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:436
        {
            int v=*tblp&PAGE_PRESENT;
ffff800000806104:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000806108:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080610b:	83 e0 01             	and    eax,0x1
ffff80000080610e:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:437
            if(!v)
ffff800000806111:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
ffff800000806115:	0f 85 69 03 00 00    	jne    ffff800000806484 <palloc+0x41d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:439
            {
                int new_pg=req_a_page();
ffff80000080611b:	49 89 df             	mov    r15,rbx
ffff80000080611e:	b8 00 00 00 00       	mov    eax,0x0
ffff800000806123:	48 ba 61 05 ee ff ff 	movabs rdx,0xffffffffffee0561
ffff80000080612a:	ff ff ff 
ffff80000080612d:	48 01 da             	add    rdx,rbx
ffff800000806130:	ff d2                	call   rdx
ffff800000806132:	89 45 b8             	mov    DWORD PTR [rbp-0x48],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:440
                if(new_pg==-1)
ffff800000806135:	83 7d b8 ff          	cmp    DWORD PTR [rbp-0x48],0xffffffff
ffff800000806139:	0f 85 66 01 00 00    	jne    ffff8000008062a5 <palloc+0x23e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:443
                {
                    //修改ldt,增加数据空间
                    unsigned int size=task[proc_index].ldt[2].limit_lo16;
ffff80000080613f:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000806146:	ff ff ff 
ffff800000806149:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080614d:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000806150:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff800000806153:	48 63 d0             	movsxd rdx,eax
ffff800000806156:	48 89 d0             	mov    rax,rdx
ffff800000806159:	48 01 c0             	add    rax,rax
ffff80000080615c:	48 01 d0             	add    rax,rdx
ffff80000080615f:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000806166:	00 
ffff800000806167:	48 01 d0             	add    rax,rdx
ffff80000080616a:	48 c1 e0 05          	shl    rax,0x5
ffff80000080616e:	48 01 c8             	add    rax,rcx
ffff800000806171:	0f b7 80 88 00 00 00 	movzx  eax,WORD PTR [rax+0x88]
ffff800000806178:	0f b7 c0             	movzx  eax,ax
ffff80000080617b:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:444
                    size+=(task[proc_index].ldt[2].attr&0xf)<<16;
ffff80000080617e:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000806185:	ff ff ff 
ffff800000806188:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080618c:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080618f:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff800000806192:	48 63 d0             	movsxd rdx,eax
ffff800000806195:	48 89 d0             	mov    rax,rdx
ffff800000806198:	48 01 c0             	add    rax,rax
ffff80000080619b:	48 01 d0             	add    rax,rdx
ffff80000080619e:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008061a5:	00 
ffff8000008061a6:	48 01 d0             	add    rax,rdx
ffff8000008061a9:	48 c1 e0 05          	shl    rax,0x5
ffff8000008061ad:	48 01 c8             	add    rax,rcx
ffff8000008061b0:	0f b7 80 8d 00 00 00 	movzx  eax,WORD PTR [rax+0x8d]
ffff8000008061b7:	0f b7 c0             	movzx  eax,ax
ffff8000008061ba:	c1 e0 10             	shl    eax,0x10
ffff8000008061bd:	25 00 00 0f 00       	and    eax,0xf0000
ffff8000008061c2:	01 45 a4             	add    DWORD PTR [rbp-0x5c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:445
                    size+=c;
ffff8000008061c5:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff8000008061c8:	01 45 a4             	add    DWORD PTR [rbp-0x5c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:446
                    task[proc_index].ldt[2].limit_lo16=size&0xffff;
ffff8000008061cb:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff8000008061d2:	ff ff ff 
ffff8000008061d5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008061d9:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008061dc:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff8000008061df:	48 63 d0             	movsxd rdx,eax
ffff8000008061e2:	48 89 d0             	mov    rax,rdx
ffff8000008061e5:	48 01 c0             	add    rax,rax
ffff8000008061e8:	48 01 d0             	add    rax,rdx
ffff8000008061eb:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008061f2:	00 
ffff8000008061f3:	48 01 d0             	add    rax,rdx
ffff8000008061f6:	48 c1 e0 05          	shl    rax,0x5
ffff8000008061fa:	48 01 c8             	add    rax,rcx
ffff8000008061fd:	8b 55 a4             	mov    edx,DWORD PTR [rbp-0x5c]
ffff800000806200:	66 89 90 88 00 00 00 	mov    WORD PTR [rax+0x88],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:447
                    int tmp_attr=task[proc_index].ldt[2].attr;
ffff800000806207:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff80000080620e:	ff ff ff 
ffff800000806211:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806215:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000806218:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff80000080621b:	48 63 d0             	movsxd rdx,eax
ffff80000080621e:	48 89 d0             	mov    rax,rdx
ffff800000806221:	48 01 c0             	add    rax,rax
ffff800000806224:	48 01 d0             	add    rax,rdx
ffff800000806227:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080622e:	00 
ffff80000080622f:	48 01 d0             	add    rax,rdx
ffff800000806232:	48 c1 e0 05          	shl    rax,0x5
ffff800000806236:	48 01 c8             	add    rax,rcx
ffff800000806239:	0f b7 80 8d 00 00 00 	movzx  eax,WORD PTR [rax+0x8d]
ffff800000806240:	0f b7 c0             	movzx  eax,ax
ffff800000806243:	89 45 a0             	mov    DWORD PTR [rbp-0x60],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:448
                    tmp_attr&=0xfff0;
ffff800000806246:	81 65 a0 f0 ff 00 00 	and    DWORD PTR [rbp-0x60],0xfff0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:449
                    tmp_attr+=(size>>16)&0xf;
ffff80000080624d:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
ffff800000806250:	c1 e8 10             	shr    eax,0x10
ffff800000806253:	83 e0 0f             	and    eax,0xf
ffff800000806256:	89 c2                	mov    edx,eax
ffff800000806258:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
ffff80000080625b:	01 d0                	add    eax,edx
ffff80000080625d:	89 45 a0             	mov    DWORD PTR [rbp-0x60],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:450
                    task[proc_index].ldt[2].attr=tmp_attr;
ffff800000806260:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000806267:	ff ff ff 
ffff80000080626a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080626e:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000806271:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff800000806274:	48 63 d0             	movsxd rdx,eax
ffff800000806277:	48 89 d0             	mov    rax,rdx
ffff80000080627a:	48 01 c0             	add    rax,rax
ffff80000080627d:	48 01 d0             	add    rax,rdx
ffff800000806280:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000806287:	00 
ffff800000806288:	48 01 d0             	add    rax,rdx
ffff80000080628b:	48 c1 e0 05          	shl    rax,0x5
ffff80000080628f:	48 01 c8             	add    rax,rcx
ffff800000806292:	8b 55 a0             	mov    edx,DWORD PTR [rbp-0x60]
ffff800000806295:	66 89 90 8d 00 00 00 	mov    WORD PTR [rax+0x8d],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:451
                    return ptr;//失败了，只能申请一部分的内存或者返回NULL
ffff80000080629c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008062a0:	e9 10 02 00 00       	jmp    ffff8000008064b5 <palloc+0x44e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:453
                }
                int addr=get_phyaddr(new_pg);
ffff8000008062a5:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
ffff8000008062a8:	89 c7                	mov    edi,eax
ffff8000008062aa:	49 89 df             	mov    r15,rbx
ffff8000008062ad:	48 b8 15 0e ee ff ff 	movabs rax,0xffffffffffee0e15
ffff8000008062b4:	ff ff ff 
ffff8000008062b7:	48 01 d8             	add    rax,rbx
ffff8000008062ba:	ff d0                	call   rax
ffff8000008062bc:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:454
                set_page_item(tblp,addr,PAGE_PRESENT|\
ffff8000008062bf:	8b 4d b4             	mov    ecx,DWORD PTR [rbp-0x4c]
ffff8000008062c2:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008062c6:	ba 07 00 00 00       	mov    edx,0x7
ffff8000008062cb:	89 ce                	mov    esi,ecx
ffff8000008062cd:	48 89 c7             	mov    rdi,rax
ffff8000008062d0:	49 89 df             	mov    r15,rbx
ffff8000008062d3:	48 b8 49 0e ee ff ff 	movabs rax,0xffffffffffee0e49
ffff8000008062da:	ff ff ff 
ffff8000008062dd:	48 01 d8             	add    rax,rbx
ffff8000008062e0:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:456
                PAGE_RWX|PAGE_FOR_ALL);
                int laddr=i*0x400000+j*0x1000;//线性地址
ffff8000008062e2:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008062e5:	c1 e0 0a             	shl    eax,0xa
ffff8000008062e8:	89 c2                	mov    edx,eax
ffff8000008062ea:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff8000008062ed:	01 d0                	add    eax,edx
ffff8000008062ef:	c1 e0 0c             	shl    eax,0xc
ffff8000008062f2:	89 45 b0             	mov    DWORD PTR [rbp-0x50],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:457
                if(ptr==NULL)
ffff8000008062f5:	48 83 7d c0 00       	cmp    QWORD PTR [rbp-0x40],0x0
ffff8000008062fa:	75 13                	jne    ffff80000080630f <palloc+0x2a8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:460
                {
                   // ptr=laddr;
                    palloc_paddr=addr;
ffff8000008062fc:	48 b8 f8 fc ff ff ff 	movabs rax,0xfffffffffffffcf8
ffff800000806303:	ff ff ff 
ffff800000806306:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080630a:	8b 55 b4             	mov    edx,DWORD PTR [rbp-0x4c]
ffff80000080630d:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:462
                }
                page_c--;
ffff80000080630f:	83 6d ec 01          	sub    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:463
                c++;
ffff800000806313:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:464
                if(page_c==0)
ffff800000806317:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff80000080631b:	0f 85 63 01 00 00    	jne    ffff800000806484 <palloc+0x41d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:467
                {
                    //修改ldt,增加数据空间
                    unsigned int size=task[proc_index].ldt[2].limit_lo16;
ffff800000806321:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000806328:	ff ff ff 
ffff80000080632b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080632f:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000806332:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff800000806335:	48 63 d0             	movsxd rdx,eax
ffff800000806338:	48 89 d0             	mov    rax,rdx
ffff80000080633b:	48 01 c0             	add    rax,rax
ffff80000080633e:	48 01 d0             	add    rax,rdx
ffff800000806341:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000806348:	00 
ffff800000806349:	48 01 d0             	add    rax,rdx
ffff80000080634c:	48 c1 e0 05          	shl    rax,0x5
ffff800000806350:	48 01 c8             	add    rax,rcx
ffff800000806353:	0f b7 80 88 00 00 00 	movzx  eax,WORD PTR [rax+0x88]
ffff80000080635a:	0f b7 c0             	movzx  eax,ax
ffff80000080635d:	89 45 ac             	mov    DWORD PTR [rbp-0x54],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:468
                    size+=(task[proc_index].ldt[2].attr&0xf)<<16;
ffff800000806360:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000806367:	ff ff ff 
ffff80000080636a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080636e:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000806371:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff800000806374:	48 63 d0             	movsxd rdx,eax
ffff800000806377:	48 89 d0             	mov    rax,rdx
ffff80000080637a:	48 01 c0             	add    rax,rax
ffff80000080637d:	48 01 d0             	add    rax,rdx
ffff800000806380:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000806387:	00 
ffff800000806388:	48 01 d0             	add    rax,rdx
ffff80000080638b:	48 c1 e0 05          	shl    rax,0x5
ffff80000080638f:	48 01 c8             	add    rax,rcx
ffff800000806392:	0f b7 80 8d 00 00 00 	movzx  eax,WORD PTR [rax+0x8d]
ffff800000806399:	0f b7 c0             	movzx  eax,ax
ffff80000080639c:	c1 e0 10             	shl    eax,0x10
ffff80000080639f:	25 00 00 0f 00       	and    eax,0xf0000
ffff8000008063a4:	01 45 ac             	add    DWORD PTR [rbp-0x54],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:469
                    size+=c;
ffff8000008063a7:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff8000008063aa:	01 45 ac             	add    DWORD PTR [rbp-0x54],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:470
                    task[proc_index].ldt[2].limit_lo16=size&0xffff;
ffff8000008063ad:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff8000008063b4:	ff ff ff 
ffff8000008063b7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008063bb:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008063be:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff8000008063c1:	48 63 d0             	movsxd rdx,eax
ffff8000008063c4:	48 89 d0             	mov    rax,rdx
ffff8000008063c7:	48 01 c0             	add    rax,rax
ffff8000008063ca:	48 01 d0             	add    rax,rdx
ffff8000008063cd:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008063d4:	00 
ffff8000008063d5:	48 01 d0             	add    rax,rdx
ffff8000008063d8:	48 c1 e0 05          	shl    rax,0x5
ffff8000008063dc:	48 01 c8             	add    rax,rcx
ffff8000008063df:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
ffff8000008063e2:	66 89 90 88 00 00 00 	mov    WORD PTR [rax+0x88],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:471
                    int tmp_attr=task[proc_index].ldt[2].attr;
ffff8000008063e9:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff8000008063f0:	ff ff ff 
ffff8000008063f3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008063f7:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008063fa:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff8000008063fd:	48 63 d0             	movsxd rdx,eax
ffff800000806400:	48 89 d0             	mov    rax,rdx
ffff800000806403:	48 01 c0             	add    rax,rax
ffff800000806406:	48 01 d0             	add    rax,rdx
ffff800000806409:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000806410:	00 
ffff800000806411:	48 01 d0             	add    rax,rdx
ffff800000806414:	48 c1 e0 05          	shl    rax,0x5
ffff800000806418:	48 01 c8             	add    rax,rcx
ffff80000080641b:	0f b7 80 8d 00 00 00 	movzx  eax,WORD PTR [rax+0x8d]
ffff800000806422:	0f b7 c0             	movzx  eax,ax
ffff800000806425:	89 45 a8             	mov    DWORD PTR [rbp-0x58],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:472
                    tmp_attr&=0xfff0;
ffff800000806428:	81 65 a8 f0 ff 00 00 	and    DWORD PTR [rbp-0x58],0xfff0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:473
                    tmp_attr+=(size>>16)&0xf;
ffff80000080642f:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
ffff800000806432:	c1 e8 10             	shr    eax,0x10
ffff800000806435:	83 e0 0f             	and    eax,0xf
ffff800000806438:	89 c2                	mov    edx,eax
ffff80000080643a:	8b 45 a8             	mov    eax,DWORD PTR [rbp-0x58]
ffff80000080643d:	01 d0                	add    eax,edx
ffff80000080643f:	89 45 a8             	mov    DWORD PTR [rbp-0x58],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:474
                    task[proc_index].ldt[2].attr=tmp_attr;
ffff800000806442:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000806449:	ff ff ff 
ffff80000080644c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806450:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000806453:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff800000806456:	48 63 d0             	movsxd rdx,eax
ffff800000806459:	48 89 d0             	mov    rax,rdx
ffff80000080645c:	48 01 c0             	add    rax,rax
ffff80000080645f:	48 01 d0             	add    rax,rdx
ffff800000806462:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000806469:	00 
ffff80000080646a:	48 01 d0             	add    rax,rdx
ffff80000080646d:	48 c1 e0 05          	shl    rax,0x5
ffff800000806471:	48 01 c8             	add    rax,rcx
ffff800000806474:	8b 55 a8             	mov    edx,DWORD PTR [rbp-0x58]
ffff800000806477:	66 89 90 8d 00 00 00 	mov    WORD PTR [rax+0x8d],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:475
                    return ptr;
ffff80000080647e:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000806482:	eb 31                	jmp    ffff8000008064b5 <palloc+0x44e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:478 (discriminator 2)
                }
            }
            tblp++;
ffff800000806484:	48 83 45 d0 08       	add    QWORD PTR [rbp-0x30],0x8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:434 (discriminator 2)
        for(int j=0;j<1024;j++)
ffff800000806489:	83 45 cc 01          	add    DWORD PTR [rbp-0x34],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:434 (discriminator 1)
ffff80000080648d:	81 7d cc ff 03 00 00 	cmp    DWORD PTR [rbp-0x34],0x3ff
ffff800000806494:	0f 8e 6a fc ff ff    	jle    ffff800000806104 <palloc+0x9d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:480 (discriminator 2)
        }
        pgind++;
ffff80000080649a:	48 83 45 e0 08       	add    QWORD PTR [rbp-0x20],0x8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:431 (discriminator 2)
    for(int i=1;i<1024;i++)
ffff80000080649f:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:431 (discriminator 1)
ffff8000008064a3:	81 7d dc ff 03 00 00 	cmp    DWORD PTR [rbp-0x24],0x3ff
ffff8000008064aa:	0f 8e 38 fc ff ff    	jle    ffff8000008060e8 <palloc+0x81>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:482
    }
    return NULL;
ffff8000008064b0:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:483
}
ffff8000008064b5:	48 83 c4 60          	add    rsp,0x60
ffff8000008064b9:	5b                   	pop    rbx
ffff8000008064ba:	41 5f                	pop    r15
ffff8000008064bc:	5d                   	pop    rbp
ffff8000008064bd:	c3                   	ret    

ffff8000008064be <malloc>:
malloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:486
//为当前进程申请新的内存，并返回这块内存的线性地址。
void* malloc(int size)
{
ffff8000008064be:	f3 0f 1e fa          	endbr64 
ffff8000008064c2:	55                   	push   rbp
ffff8000008064c3:	48 89 e5             	mov    rbp,rsp
ffff8000008064c6:	41 57                	push   r15
ffff8000008064c8:	48 83 ec 18          	sub    rsp,0x18
ffff8000008064cc:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008064cc <malloc+0xe>
ffff8000008064d3:	49 bb 2c c7 11 00 00 	movabs r11,0x11c72c
ffff8000008064da:	00 00 00 
ffff8000008064dd:	4c 01 d8             	add    rax,r11
ffff8000008064e0:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:487
    return palloc(cur_proc,size);
ffff8000008064e3:	48 ba d8 fd ff ff ff 	movabs rdx,0xfffffffffffffdd8
ffff8000008064ea:	ff ff ff 
ffff8000008064ed:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008064f1:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff8000008064f3:	8b 4d ec             	mov    ecx,DWORD PTR [rbp-0x14]
ffff8000008064f6:	89 ce                	mov    esi,ecx
ffff8000008064f8:	89 d7                	mov    edi,edx
ffff8000008064fa:	49 89 c7             	mov    r15,rax
ffff8000008064fd:	48 ba 6f 34 ee ff ff 	movabs rdx,0xffffffffffee346f
ffff800000806504:	ff ff ff 
ffff800000806507:	48 01 c2             	add    rdx,rax
ffff80000080650a:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:488
}
ffff80000080650c:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000806510:	c9                   	leave  
ffff800000806511:	c3                   	ret    

ffff800000806512 <proc_end>:
proc_end():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:490
void proc_end()
{
ffff800000806512:	f3 0f 1e fa          	endbr64 
ffff800000806516:	55                   	push   rbp
ffff800000806517:	48 89 e5             	mov    rbp,rsp
ffff80000080651a:	41 57                	push   r15
ffff80000080651c:	53                   	push   rbx
ffff80000080651d:	48 83 ec 10          	sub    rsp,0x10
ffff800000806521:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000806521 <proc_end+0xf>
ffff800000806528:	49 bb d7 c6 11 00 00 	movabs r11,0x11c6d7
ffff80000080652f:	00 00 00 
ffff800000806532:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:492
    int ret;
    __asm__ volatile("mov %%eax,%0":"=m"(ret));
ffff800000806535:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:496
    //printf("proc #%d ended with retv %d.\n",cur_proc,ret);
    //切换堆栈
    //__asm__ volatile("mov %0,%%rsp"::"r"(task[0].tss.esp));
    del_proc(cur_proc);
ffff800000806538:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff80000080653f:	ff ff ff 
ffff800000806542:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806546:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000806548:	89 c7                	mov    edi,eax
ffff80000080654a:	49 89 df             	mov    r15,rbx
ffff80000080654d:	48 b8 a8 3a ee ff ff 	movabs rax,0xffffffffffee3aa8
ffff800000806554:	ff ff ff 
ffff800000806557:	48 01 d8             	add    rax,rbx
ffff80000080655a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:497
    if(task[cur_proc].parent_pid!=-1){
ffff80000080655c:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000806563:	ff ff ff 
ffff800000806566:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080656a:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080656d:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff800000806574:	ff ff ff 
ffff800000806577:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080657b:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080657d:	48 63 d0             	movsxd rdx,eax
ffff800000806580:	48 89 d0             	mov    rax,rdx
ffff800000806583:	48 01 c0             	add    rax,rax
ffff800000806586:	48 01 d0             	add    rax,rdx
ffff800000806589:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000806590:	00 
ffff800000806591:	48 01 d0             	add    rax,rdx
ffff800000806594:	48 c1 e0 05          	shl    rax,0x5
ffff800000806598:	48 01 c8             	add    rax,rcx
ffff80000080659b:	8b 80 bc 00 00 00    	mov    eax,DWORD PTR [rax+0xbc]
ffff8000008065a1:	83 f8 ff             	cmp    eax,0xffffffff
ffff8000008065a4:	0f 84 d5 00 00 00    	je     ffff80000080667f <proc_end+0x16d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:498
        task[task[cur_proc].parent_pid].stat=TASK_READY;
ffff8000008065aa:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff8000008065b1:	ff ff ff 
ffff8000008065b4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008065b8:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008065bb:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff8000008065c2:	ff ff ff 
ffff8000008065c5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008065c9:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff8000008065cc:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff8000008065d3:	ff ff ff 
ffff8000008065d6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008065da:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008065dc:	48 63 d0             	movsxd rdx,eax
ffff8000008065df:	48 89 d0             	mov    rax,rdx
ffff8000008065e2:	48 01 c0             	add    rax,rax
ffff8000008065e5:	48 01 d0             	add    rax,rdx
ffff8000008065e8:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008065ef:	00 
ffff8000008065f0:	48 01 d0             	add    rax,rdx
ffff8000008065f3:	48 c1 e0 05          	shl    rax,0x5
ffff8000008065f7:	48 01 f0             	add    rax,rsi
ffff8000008065fa:	8b 80 bc 00 00 00    	mov    eax,DWORD PTR [rax+0xbc]
ffff800000806600:	89 c2                	mov    edx,eax
ffff800000806602:	48 89 d0             	mov    rax,rdx
ffff800000806605:	48 01 c0             	add    rax,rax
ffff800000806608:	48 01 d0             	add    rax,rdx
ffff80000080660b:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000806612:	00 
ffff800000806613:	48 01 d0             	add    rax,rdx
ffff800000806616:	48 c1 e0 05          	shl    rax,0x5
ffff80000080661a:	48 01 c8             	add    rax,rcx
ffff80000080661d:	c7 40 18 02 00 00 00 	mov    DWORD PTR [rax+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:499
        switch_proc_tss(task[cur_proc].parent_pid);
ffff800000806624:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff80000080662b:	ff ff ff 
ffff80000080662e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806632:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000806635:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff80000080663c:	ff ff ff 
ffff80000080663f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806643:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000806645:	48 63 d0             	movsxd rdx,eax
ffff800000806648:	48 89 d0             	mov    rax,rdx
ffff80000080664b:	48 01 c0             	add    rax,rax
ffff80000080664e:	48 01 d0             	add    rax,rdx
ffff800000806651:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000806658:	00 
ffff800000806659:	48 01 d0             	add    rax,rdx
ffff80000080665c:	48 c1 e0 05          	shl    rax,0x5
ffff800000806660:	48 01 c8             	add    rax,rcx
ffff800000806663:	8b 80 bc 00 00 00    	mov    eax,DWORD PTR [rax+0xbc]
ffff800000806669:	89 c7                	mov    edi,eax
ffff80000080666b:	49 89 df             	mov    r15,rbx
ffff80000080666e:	48 b8 3c 32 ee ff ff 	movabs rax,0xffffffffffee323c
ffff800000806675:	ff ff ff 
ffff800000806678:	48 01 d8             	add    rax,rbx
ffff80000080667b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:504
    }
    else
        switch_proc_tss(0);
    //syscall(SYSCALL_DEL_PROC,cur_proc,0,0,0,0);
}
ffff80000080667d:	eb 17                	jmp    ffff800000806696 <proc_end+0x184>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:502
        switch_proc_tss(0);
ffff80000080667f:	bf 00 00 00 00       	mov    edi,0x0
ffff800000806684:	49 89 df             	mov    r15,rbx
ffff800000806687:	48 b8 3c 32 ee ff ff 	movabs rax,0xffffffffffee323c
ffff80000080668e:	ff ff ff 
ffff800000806691:	48 01 d8             	add    rax,rbx
ffff800000806694:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:504
}
ffff800000806696:	90                   	nop
ffff800000806697:	48 83 c4 10          	add    rsp,0x10
ffff80000080669b:	5b                   	pop    rbx
ffff80000080669c:	41 5f                	pop    r15
ffff80000080669e:	5d                   	pop    rbp
ffff80000080669f:	c3                   	ret    

ffff8000008066a0 <del_proc>:
del_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:506
void del_proc(int pnr)
{
ffff8000008066a0:	f3 0f 1e fa          	endbr64 
ffff8000008066a4:	55                   	push   rbp
ffff8000008066a5:	48 89 e5             	mov    rbp,rsp
ffff8000008066a8:	41 57                	push   r15
ffff8000008066aa:	53                   	push   rbx
ffff8000008066ab:	48 83 ec 20          	sub    rsp,0x20
ffff8000008066af:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008066af <del_proc+0xf>
ffff8000008066b6:	49 bb 49 c5 11 00 00 	movabs r11,0x11c549
ffff8000008066bd:	00 00 00 
ffff8000008066c0:	4c 01 db             	add    rbx,r11
ffff8000008066c3:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:507
    task[pnr].stat=TASK_ZOMBIE;
ffff8000008066c6:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff8000008066cd:	ff ff ff 
ffff8000008066d0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008066d4:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008066d7:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008066da:	48 63 d0             	movsxd rdx,eax
ffff8000008066dd:	48 89 d0             	mov    rax,rdx
ffff8000008066e0:	48 01 c0             	add    rax,rax
ffff8000008066e3:	48 01 d0             	add    rax,rdx
ffff8000008066e6:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008066ed:	00 
ffff8000008066ee:	48 01 d0             	add    rax,rdx
ffff8000008066f1:	48 c1 e0 05          	shl    rax,0x5
ffff8000008066f5:	48 01 c8             	add    rax,rcx
ffff8000008066f8:	c7 40 18 04 00 00 00 	mov    DWORD PTR [rax+0x18],0x4
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:510
//    task[pnr].pid=-1;
    //释放申请的页面
    release_mmap(&task[pnr]);
ffff8000008066ff:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000806706:	ff ff ff 
ffff800000806709:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080670d:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000806710:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806713:	48 63 d0             	movsxd rdx,eax
ffff800000806716:	48 89 d0             	mov    rax,rdx
ffff800000806719:	48 01 c0             	add    rax,rax
ffff80000080671c:	48 01 d0             	add    rax,rdx
ffff80000080671f:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000806726:	00 
ffff800000806727:	48 01 d0             	add    rax,rdx
ffff80000080672a:	48 c1 e0 05          	shl    rax,0x5
ffff80000080672e:	48 01 c8             	add    rax,rcx
ffff800000806731:	48 89 c7             	mov    rdi,rax
ffff800000806734:	49 89 df             	mov    r15,rbx
ffff800000806737:	48 b8 4e 55 ee ff ff 	movabs rax,0xffffffffffee554e
ffff80000080673e:	ff ff ff 
ffff800000806741:	48 01 d8             	add    rax,rbx
ffff800000806744:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:512
    //释放存放页目录的页面
    kmfree(task[pnr].pml4);
ffff800000806746:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff80000080674d:	ff ff ff 
ffff800000806750:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806754:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000806757:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080675a:	48 63 d0             	movsxd rdx,eax
ffff80000080675d:	48 89 d0             	mov    rax,rdx
ffff800000806760:	48 01 c0             	add    rax,rax
ffff800000806763:	48 01 d0             	add    rax,rdx
ffff800000806766:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080676d:	00 
ffff80000080676e:	48 01 d0             	add    rax,rdx
ffff800000806771:	48 c1 e0 05          	shl    rax,0x5
ffff800000806775:	48 01 c8             	add    rax,rcx
ffff800000806778:	48 8b 80 e0 00 00 00 	mov    rax,QWORD PTR [rax+0xe0]
ffff80000080677f:	48 89 c7             	mov    rdi,rax
ffff800000806782:	49 89 df             	mov    r15,rbx
ffff800000806785:	48 b8 6f 09 ee ff ff 	movabs rax,0xffffffffffee096f
ffff80000080678c:	ff ff ff 
ffff80000080678f:	48 01 d8             	add    rax,rbx
ffff800000806792:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:514
    //关闭打开的文件
    for(int i=3;i<MAX_PROC_OPENF;i++){
ffff800000806794:	c7 45 ec 03 00 00 00 	mov    DWORD PTR [rbp-0x14],0x3
ffff80000080679b:	eb 61                	jmp    ffff8000008067fe <del_proc+0x15e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:515
        if(task[pnr].openf[i]){
ffff80000080679d:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff8000008067a4:	ff ff ff 
ffff8000008067a7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008067ab:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008067ae:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008067b1:	48 63 d0             	movsxd rdx,eax
ffff8000008067b4:	48 89 d0             	mov    rax,rdx
ffff8000008067b7:	48 01 c0             	add    rax,rax
ffff8000008067ba:	48 01 d0             	add    rax,rdx
ffff8000008067bd:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008067c4:	00 
ffff8000008067c5:	48 01 d0             	add    rax,rdx
ffff8000008067c8:	48 c1 e0 05          	shl    rax,0x5
ffff8000008067cc:	48 01 c8             	add    rax,rcx
ffff8000008067cf:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff8000008067d2:	48 63 d2             	movsxd rdx,edx
ffff8000008067d5:	48 83 c2 1e          	add    rdx,0x1e
ffff8000008067d9:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff8000008067de:	48 85 c0             	test   rax,rax
ffff8000008067e1:	74 17                	je     ffff8000008067fa <del_proc+0x15a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:516
            sys_close(i);
ffff8000008067e3:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008067e6:	89 c7                	mov    edi,eax
ffff8000008067e8:	49 89 df             	mov    r15,rbx
ffff8000008067eb:	48 b8 32 ac ee ff ff 	movabs rax,0xffffffffffeeac32
ffff8000008067f2:	ff ff ff 
ffff8000008067f5:	48 01 d8             	add    rax,rbx
ffff8000008067f8:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:514 (discriminator 2)
    for(int i=3;i<MAX_PROC_OPENF;i++){
ffff8000008067fa:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:514 (discriminator 1)
ffff8000008067fe:	83 7d ec 1f          	cmp    DWORD PTR [rbp-0x14],0x1f
ffff800000806802:	7e 99                	jle    ffff80000080679d <del_proc+0xfd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:520
        }
    }
    //三个std判断一下是否是会话leader，是的话再关闭
    if(task[pnr].sid==task[pnr].pid){
ffff800000806804:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff80000080680b:	ff ff ff 
ffff80000080680e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806812:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000806815:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806818:	48 63 d0             	movsxd rdx,eax
ffff80000080681b:	48 89 d0             	mov    rax,rdx
ffff80000080681e:	48 01 c0             	add    rax,rax
ffff800000806821:	48 01 d0             	add    rax,rdx
ffff800000806824:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080682b:	00 
ffff80000080682c:	48 01 d0             	add    rax,rdx
ffff80000080682f:	48 c1 e0 05          	shl    rax,0x5
ffff800000806833:	48 01 c8             	add    rax,rcx
ffff800000806836:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffff800000806839:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000806840:	ff ff ff 
ffff800000806843:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806847:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff80000080684a:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080684d:	48 63 d0             	movsxd rdx,eax
ffff800000806850:	48 89 d0             	mov    rax,rdx
ffff800000806853:	48 01 c0             	add    rax,rax
ffff800000806856:	48 01 d0             	add    rax,rdx
ffff800000806859:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000806860:	00 
ffff800000806861:	48 01 d0             	add    rax,rdx
ffff800000806864:	48 c1 e0 05          	shl    rax,0x5
ffff800000806868:	48 01 f0             	add    rax,rsi
ffff80000080686b:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080686d:	39 c1                	cmp    ecx,eax
ffff80000080686f:	75 79                	jne    ffff8000008068ea <del_proc+0x24a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:522
        //tty和console断联
        sys_ioctl(0,TTY_DISCONNECT,0);
ffff800000806871:	ba 00 00 00 00       	mov    edx,0x0
ffff800000806876:	be 02 00 00 00       	mov    esi,0x2
ffff80000080687b:	bf 00 00 00 00       	mov    edi,0x0
ffff800000806880:	49 89 df             	mov    r15,rbx
ffff800000806883:	48 b8 82 64 ee ff ff 	movabs rax,0xffffffffffee6482
ffff80000080688a:	ff ff ff 
ffff80000080688d:	48 01 d8             	add    rax,rbx
ffff800000806890:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:523
        sys_close(0);
ffff800000806892:	bf 00 00 00 00       	mov    edi,0x0
ffff800000806897:	49 89 df             	mov    r15,rbx
ffff80000080689a:	48 b8 32 ac ee ff ff 	movabs rax,0xffffffffffeeac32
ffff8000008068a1:	ff ff ff 
ffff8000008068a4:	48 01 d8             	add    rax,rbx
ffff8000008068a7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:524
        sys_close(1);
ffff8000008068a9:	bf 01 00 00 00       	mov    edi,0x1
ffff8000008068ae:	49 89 df             	mov    r15,rbx
ffff8000008068b1:	48 b8 32 ac ee ff ff 	movabs rax,0xffffffffffeeac32
ffff8000008068b8:	ff ff ff 
ffff8000008068bb:	48 01 d8             	add    rax,rbx
ffff8000008068be:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:525
        sys_close(2);
ffff8000008068c0:	bf 02 00 00 00       	mov    edi,0x2
ffff8000008068c5:	49 89 df             	mov    r15,rbx
ffff8000008068c8:	48 b8 32 ac ee ff ff 	movabs rax,0xffffffffffeeac32
ffff8000008068cf:	ff ff ff 
ffff8000008068d2:	48 01 d8             	add    rax,rbx
ffff8000008068d5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:527
        //然后,关闭所有前台进程组的进程
        for(int i=0;i<MAX_TASKS;i++){
ffff8000008068d7:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff8000008068de:	eb 04                	jmp    ffff8000008068e4 <del_proc+0x244>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:527 (discriminator 3)
ffff8000008068e0:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:527 (discriminator 1)
ffff8000008068e4:	83 7d e8 1f          	cmp    DWORD PTR [rbp-0x18],0x1f
ffff8000008068e8:	7e f6                	jle    ffff8000008068e0 <del_proc+0x240>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:537
    }
    //TODO 给子进程发送SIGHUP信号结束他们
    //
    //从进程中解除cr3,tss和ldt
    //switch_proc_tss(task[pnr]);
}
ffff8000008068ea:	90                   	nop
ffff8000008068eb:	48 83 c4 20          	add    rsp,0x20
ffff8000008068ef:	5b                   	pop    rbx
ffff8000008068f0:	41 5f                	pop    r15
ffff8000008068f2:	5d                   	pop    rbp
ffff8000008068f3:	c3                   	ret    

ffff8000008068f4 <set_proc_stat>:
set_proc_stat():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:540

int set_proc_stat(int pid,int stat)
{
ffff8000008068f4:	f3 0f 1e fa          	endbr64 
ffff8000008068f8:	55                   	push   rbp
ffff8000008068f9:	48 89 e5             	mov    rbp,rsp
ffff8000008068fc:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008068fc <set_proc_stat+0x8>
ffff800000806903:	49 bb fc c2 11 00 00 	movabs r11,0x11c2fc
ffff80000080690a:	00 00 00 
ffff80000080690d:	4c 01 d8             	add    rax,r11
ffff800000806910:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff800000806913:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:541
    if(pid==-1)return -1;
ffff800000806916:	83 7d ec ff          	cmp    DWORD PTR [rbp-0x14],0xffffffff
ffff80000080691a:	75 0a                	jne    ffff800000806926 <set_proc_stat+0x32>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:541 (discriminator 1)
ffff80000080691c:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000806921:	e9 f1 00 00 00       	jmp    ffff800000806a17 <set_proc_stat+0x123>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:542
    int i=0;
ffff800000806926:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:543
    for(;task[i].pid!=pid;i++);
ffff80000080692d:	eb 04                	jmp    ffff800000806933 <set_proc_stat+0x3f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:543 (discriminator 2)
ffff80000080692f:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:543 (discriminator 1)
ffff800000806933:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff80000080693a:	ff ff ff 
ffff80000080693d:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806941:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff800000806944:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000806947:	48 63 ca             	movsxd rcx,edx
ffff80000080694a:	48 89 ca             	mov    rdx,rcx
ffff80000080694d:	48 01 d2             	add    rdx,rdx
ffff800000806950:	48 01 ca             	add    rdx,rcx
ffff800000806953:	48 8d 0c d5 00 00 00 	lea    rcx,[rdx*8+0x0]
ffff80000080695a:	00 
ffff80000080695b:	48 01 ca             	add    rdx,rcx
ffff80000080695e:	48 c1 e2 05          	shl    rdx,0x5
ffff800000806962:	48 01 f2             	add    rdx,rsi
ffff800000806965:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff800000806967:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080696a:	39 d1                	cmp    ecx,edx
ffff80000080696c:	75 c1                	jne    ffff80000080692f <set_proc_stat+0x3b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:544
    if(i==MAX_PROC_COUNT)return -1;
ffff80000080696e:	83 7d fc 40          	cmp    DWORD PTR [rbp-0x4],0x40
ffff800000806972:	75 0a                	jne    ffff80000080697e <set_proc_stat+0x8a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:544 (discriminator 1)
ffff800000806974:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000806979:	e9 99 00 00 00       	jmp    ffff800000806a17 <set_proc_stat+0x123>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:545
    task[i].stat=stat;
ffff80000080697e:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff800000806985:	ff ff ff 
ffff800000806988:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080698c:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff80000080698f:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000806992:	48 63 ca             	movsxd rcx,edx
ffff800000806995:	48 89 ca             	mov    rdx,rcx
ffff800000806998:	48 01 d2             	add    rdx,rdx
ffff80000080699b:	48 01 ca             	add    rdx,rcx
ffff80000080699e:	48 8d 0c d5 00 00 00 	lea    rcx,[rdx*8+0x0]
ffff8000008069a5:	00 
ffff8000008069a6:	48 01 ca             	add    rdx,rcx
ffff8000008069a9:	48 c1 e2 05          	shl    rdx,0x5
ffff8000008069ad:	48 8d 0c 16          	lea    rcx,[rsi+rdx*1]
ffff8000008069b1:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff8000008069b4:	89 51 18             	mov    DWORD PTR [rcx+0x18],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:547
    //如果这就是正在运行的进程，那么马上停止
    if(cur_proc==i)
ffff8000008069b7:	48 ba d8 fd ff ff ff 	movabs rdx,0xfffffffffffffdd8
ffff8000008069be:	ff ff ff 
ffff8000008069c1:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008069c5:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff8000008069c7:	39 55 fc             	cmp    DWORD PTR [rbp-0x4],edx
ffff8000008069ca:	75 46                	jne    ffff800000806a12 <set_proc_stat+0x11e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:548
        task[cur_proc].utime=MAX_UTIME;
ffff8000008069cc:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff8000008069d3:	ff ff ff 
ffff8000008069d6:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008069da:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008069dd:	48 ba d8 fd ff ff ff 	movabs rdx,0xfffffffffffffdd8
ffff8000008069e4:	ff ff ff 
ffff8000008069e7:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff8000008069eb:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008069ed:	48 63 d0             	movsxd rdx,eax
ffff8000008069f0:	48 89 d0             	mov    rax,rdx
ffff8000008069f3:	48 01 c0             	add    rax,rax
ffff8000008069f6:	48 01 d0             	add    rax,rdx
ffff8000008069f9:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000806a00:	00 
ffff800000806a01:	48 01 d0             	add    rax,rdx
ffff800000806a04:	48 c1 e0 05          	shl    rax,0x5
ffff800000806a08:	48 01 c8             	add    rax,rcx
ffff800000806a0b:	c7 40 1c 0a 00 00 00 	mov    DWORD PTR [rax+0x1c],0xa
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:549
    return 0;
ffff800000806a12:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:550
}
ffff800000806a17:	5d                   	pop    rbp
ffff800000806a18:	c3                   	ret    

ffff800000806a19 <sys_exit>:
sys_exit():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:582
//}
/*
 * 进程结束。
 * */
int sys_exit(int code)
{
ffff800000806a19:	f3 0f 1e fa          	endbr64 
ffff800000806a1d:	55                   	push   rbp
ffff800000806a1e:	48 89 e5             	mov    rbp,rsp
ffff800000806a21:	41 57                	push   r15
ffff800000806a23:	53                   	push   rbx
ffff800000806a24:	48 83 ec 10          	sub    rsp,0x10
ffff800000806a28:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000806a28 <sys_exit+0xf>
ffff800000806a2f:	49 bb d0 c1 11 00 00 	movabs r11,0x11c1d0
ffff800000806a36:	00 00 00 
ffff800000806a39:	4c 01 db             	add    rbx,r11
ffff800000806a3c:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:583
    current->exit_code=code;
ffff800000806a3f:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff800000806a46:	ff ff ff 
ffff800000806a49:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806a4d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000806a50:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000806a53:	89 50 24             	mov    DWORD PTR [rax+0x24],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:584
    del_proc(cur_proc);
ffff800000806a56:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff800000806a5d:	ff ff ff 
ffff800000806a60:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806a64:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000806a66:	89 c7                	mov    edi,eax
ffff800000806a68:	49 89 df             	mov    r15,rbx
ffff800000806a6b:	48 b8 a8 3a ee ff ff 	movabs rax,0xffffffffffee3aa8
ffff800000806a72:	ff ff ff 
ffff800000806a75:	48 01 d8             	add    rax,rbx
ffff800000806a78:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:586 (discriminator 1)
    while(1)
        manage_proc();
ffff800000806a7a:	49 89 df             	mov    r15,rbx
ffff800000806a7d:	b8 00 00 00 00       	mov    eax,0x0
ffff800000806a82:	48 ba ce 2e ee ff ff 	movabs rdx,0xffffffffffee2ece
ffff800000806a89:	ff ff ff 
ffff800000806a8c:	48 01 da             	add    rdx,rbx
ffff800000806a8f:	ff d2                	call   rdx
ffff800000806a91:	eb e7                	jmp    ffff800000806a7a <sys_exit+0x61>

ffff800000806a93 <reg_proc>:
reg_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:642
    dllmain(NULL,0,NULL);
    
}*/

int reg_proc(addr_t entry, struct index_node *cwd, struct index_node *exef)
{
ffff800000806a93:	f3 0f 1e fa          	endbr64 
ffff800000806a97:	55                   	push   rbp
ffff800000806a98:	48 89 e5             	mov    rbp,rsp
ffff800000806a9b:	41 57                	push   r15
ffff800000806a9d:	41 54                	push   r12
ffff800000806a9f:	53                   	push   rbx
ffff800000806aa0:	48 83 ec 48          	sub    rsp,0x48
ffff800000806aa4:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000806aa4 <reg_proc+0x11>
ffff800000806aab:	49 bb 54 c1 11 00 00 	movabs r11,0x11c154
ffff800000806ab2:	00 00 00 
ffff800000806ab5:	4c 01 db             	add    rbx,r11
ffff800000806ab8:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
ffff800000806abc:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
ffff800000806ac0:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:644
    
    int i=req_proc();
ffff800000806ac4:	49 89 df             	mov    r15,rbx
ffff800000806ac7:	b8 00 00 00 00       	mov    eax,0x0
ffff800000806acc:	48 ba c9 2a ee ff ff 	movabs rdx,0xffffffffffee2ac9
ffff800000806ad3:	ff ff ff 
ffff800000806ad6:	48 01 da             	add    rdx,rbx
ffff800000806ad9:	ff d2                	call   rdx
ffff800000806adb:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:645
    if(i==-1)return -1;
ffff800000806ade:	83 7d dc ff          	cmp    DWORD PTR [rbp-0x24],0xffffffff
ffff800000806ae2:	75 0a                	jne    ffff800000806aee <reg_proc+0x5b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:645 (discriminator 1)
ffff800000806ae4:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000806ae9:	e9 25 03 00 00       	jmp    ffff800000806e13 <reg_proc+0x380>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:648

    //栈顶设置在了4G处
    set_proc(0, 0, 0, 0, DS_USER, CS_USER, DS_USER, DS_USER\
ffff800000806aee:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000806af2:	48 83 ec 08          	sub    rsp,0x8
ffff800000806af6:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000806af9:	52                   	push   rdx
ffff800000806afa:	6a 00                	push   0x0
ffff800000806afc:	50                   	push   rax
ffff800000806afd:	6a 00                	push   0x0
ffff800000806aff:	6a 00                	push   0x0
ffff800000806b01:	6a 00                	push   0x0
ffff800000806b03:	68 00 f0 ff ff       	push   0xfffffffffffff000
ffff800000806b08:	c7 44 24 04 ff 7f 00 	mov    DWORD PTR [rsp+0x4],0x7fff
ffff800000806b0f:	00 
ffff800000806b10:	6a 28                	push   0x28
ffff800000806b12:	6a 28                	push   0x28
ffff800000806b14:	6a 28                	push   0x28
ffff800000806b16:	6a 28                	push   0x28
ffff800000806b18:	41 b9 30 00 00 00    	mov    r9d,0x30
ffff800000806b1e:	41 b8 28 00 00 00    	mov    r8d,0x28
ffff800000806b24:	b9 00 00 00 00       	mov    ecx,0x0
ffff800000806b29:	ba 00 00 00 00       	mov    edx,0x0
ffff800000806b2e:	be 00 00 00 00       	mov    esi,0x0
ffff800000806b33:	bf 00 00 00 00       	mov    edi,0x0
ffff800000806b38:	49 89 df             	mov    r15,rbx
ffff800000806b3b:	48 b8 81 2c ee ff ff 	movabs rax,0xffffffffffee2c81
ffff800000806b42:	ff ff ff 
ffff800000806b45:	48 01 d8             	add    rax,rbx
ffff800000806b48:	ff d0                	call   rax
ffff800000806b4a:	48 83 c4 60          	add    rsp,0x60
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:650
, DS_USER, DS_USER, STACK_TOP, 0, 0, 0, entry, 0, i);
    task[i].pml4= kmalloc(0,PAGE_4K_SIZE);
ffff800000806b4e:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000806b55:	ff ff ff 
ffff800000806b58:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806b5c:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000806b5f:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806b62:	48 63 d0             	movsxd rdx,eax
ffff800000806b65:	48 89 d0             	mov    rax,rdx
ffff800000806b68:	48 01 c0             	add    rax,rax
ffff800000806b6b:	48 01 d0             	add    rax,rdx
ffff800000806b6e:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000806b75:	00 
ffff800000806b76:	48 01 d0             	add    rax,rdx
ffff800000806b79:	48 c1 e0 05          	shl    rax,0x5
ffff800000806b7d:	4c 8d 24 01          	lea    r12,[rcx+rax*1]
ffff800000806b81:	be 00 10 00 00       	mov    esi,0x1000
ffff800000806b86:	bf 00 00 00 00       	mov    edi,0x0
ffff800000806b8b:	49 89 df             	mov    r15,rbx
ffff800000806b8e:	48 b8 ce 07 ee ff ff 	movabs rax,0xffffffffffee07ce
ffff800000806b95:	ff ff ff 
ffff800000806b98:	48 01 d8             	add    rax,rbx
ffff800000806b9b:	ff d0                	call   rax
ffff800000806b9d:	49 89 84 24 e0 00 00 	mov    QWORD PTR [r12+0xe0],rax
ffff800000806ba4:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:651
    task[i].pml4[0]= kmalloc(0,PAGE_4K_SIZE);
ffff800000806ba5:	be 00 10 00 00       	mov    esi,0x1000
ffff800000806baa:	bf 00 00 00 00       	mov    edi,0x0
ffff800000806baf:	49 89 df             	mov    r15,rbx
ffff800000806bb2:	48 b8 ce 07 ee ff ff 	movabs rax,0xffffffffffee07ce
ffff800000806bb9:	ff ff ff 
ffff800000806bbc:	48 01 d8             	add    rax,rbx
ffff800000806bbf:	ff d0                	call   rax
ffff800000806bc1:	48 89 c2             	mov    rdx,rax
ffff800000806bc4:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000806bcb:	ff ff ff 
ffff800000806bce:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806bd2:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff800000806bd5:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806bd8:	48 63 c8             	movsxd rcx,eax
ffff800000806bdb:	48 89 c8             	mov    rax,rcx
ffff800000806bde:	48 01 c0             	add    rax,rax
ffff800000806be1:	48 01 c8             	add    rax,rcx
ffff800000806be4:	48 8d 0c c5 00 00 00 	lea    rcx,[rax*8+0x0]
ffff800000806beb:	00 
ffff800000806bec:	48 01 c8             	add    rax,rcx
ffff800000806bef:	48 c1 e0 05          	shl    rax,0x5
ffff800000806bf3:	48 01 f0             	add    rax,rsi
ffff800000806bf6:	48 8b 80 e0 00 00 00 	mov    rax,QWORD PTR [rax+0xe0]
ffff800000806bfd:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:652
    unsigned long *pdpt=task[i].pml4;
ffff800000806c00:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000806c07:	ff ff ff 
ffff800000806c0a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806c0e:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000806c11:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806c14:	48 63 d0             	movsxd rdx,eax
ffff800000806c17:	48 89 d0             	mov    rax,rdx
ffff800000806c1a:	48 01 c0             	add    rax,rax
ffff800000806c1d:	48 01 d0             	add    rax,rdx
ffff800000806c20:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000806c27:	00 
ffff800000806c28:	48 01 d0             	add    rax,rdx
ffff800000806c2b:	48 c1 e0 05          	shl    rax,0x5
ffff800000806c2f:	48 01 c8             	add    rax,rcx
ffff800000806c32:	48 8b 80 e0 00 00 00 	mov    rax,QWORD PTR [rax+0xe0]
ffff800000806c39:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:654
    //pdpt第一项(0-1GB)设置为内核空间，这样才能访问中断
    set_1gb_pdpt(pdpt,0,PAGE_PRESENT|PAGE_RWX);
ffff800000806c3d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000806c41:	ba 03 00 00 00       	mov    edx,0x3
ffff800000806c46:	be 00 00 00 00       	mov    esi,0x0
ffff800000806c4b:	48 89 c7             	mov    rdi,rax
ffff800000806c4e:	49 89 df             	mov    r15,rbx
ffff800000806c51:	48 b8 ae 0e ee ff ff 	movabs rax,0xffffffffffee0eae
ffff800000806c58:	ff ff ff 
ffff800000806c5b:	48 01 d8             	add    rax,rbx
ffff800000806c5e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:657

    //申请一项pd,里面申请一2mb页用于堆栈
    addr_t *stackb= kmalloc(0,PAGE_4K_SIZE);
ffff800000806c60:	be 00 10 00 00       	mov    esi,0x1000
ffff800000806c65:	bf 00 00 00 00       	mov    edi,0x0
ffff800000806c6a:	49 89 df             	mov    r15,rbx
ffff800000806c6d:	48 b8 ce 07 ee ff ff 	movabs rax,0xffffffffffee07ce
ffff800000806c74:	ff ff ff 
ffff800000806c77:	48 01 d8             	add    rax,rbx
ffff800000806c7a:	ff d0                	call   rax
ffff800000806c7c:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:658
    pdpt[3]=(unsigned long)stackb|PAGE_PRESENT|PAGE_FOR_ALL|PAGE_RWX;//3-4G分配栈空间
ffff800000806c80:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000806c84:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000806c88:	48 83 c0 18          	add    rax,0x18
ffff800000806c8c:	48 83 ca 07          	or     rdx,0x7
ffff800000806c90:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:659
    set_2mb_pde(stackb + 511, get_phyaddr(req_a_page()), PAGE_FOR_ALL|PAGE_RWX);
ffff800000806c93:	49 89 df             	mov    r15,rbx
ffff800000806c96:	b8 00 00 00 00       	mov    eax,0x0
ffff800000806c9b:	48 ba 61 05 ee ff ff 	movabs rdx,0xffffffffffee0561
ffff800000806ca2:	ff ff ff 
ffff800000806ca5:	48 01 da             	add    rdx,rbx
ffff800000806ca8:	ff d2                	call   rdx
ffff800000806caa:	89 c7                	mov    edi,eax
ffff800000806cac:	49 89 df             	mov    r15,rbx
ffff800000806caf:	48 b8 15 0e ee ff ff 	movabs rax,0xffffffffffee0e15
ffff800000806cb6:	ff ff ff 
ffff800000806cb9:	48 01 d8             	add    rax,rbx
ffff800000806cbc:	ff d0                	call   rax
ffff800000806cbe:	89 c1                	mov    ecx,eax
ffff800000806cc0:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000806cc4:	48 05 f8 0f 00 00    	add    rax,0xff8
ffff800000806cca:	ba 06 00 00 00       	mov    edx,0x6
ffff800000806ccf:	89 ce                	mov    esi,ecx
ffff800000806cd1:	48 89 c7             	mov    rdi,rax
ffff800000806cd4:	49 89 df             	mov    r15,rbx
ffff800000806cd7:	48 b8 19 0f ee ff ff 	movabs rax,0xffffffffffee0f19
ffff800000806cde:	ff ff ff 
ffff800000806ce1:	48 01 d8             	add    rax,rbx
ffff800000806ce4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:660
    task[i].regs.cr3=task[i].pml4;
ffff800000806ce6:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000806ced:	ff ff ff 
ffff800000806cf0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806cf4:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000806cf7:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806cfa:	48 63 d0             	movsxd rdx,eax
ffff800000806cfd:	48 89 d0             	mov    rax,rdx
ffff800000806d00:	48 01 c0             	add    rax,rax
ffff800000806d03:	48 01 d0             	add    rax,rdx
ffff800000806d06:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000806d0d:	00 
ffff800000806d0e:	48 01 d0             	add    rax,rdx
ffff800000806d11:	48 c1 e0 05          	shl    rax,0x5
ffff800000806d15:	48 01 c8             	add    rax,rcx
ffff800000806d18:	48 8b 88 e0 00 00 00 	mov    rcx,QWORD PTR [rax+0xe0]
ffff800000806d1f:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000806d26:	ff ff ff 
ffff800000806d29:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806d2d:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff800000806d30:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806d33:	48 63 d0             	movsxd rdx,eax
ffff800000806d36:	48 89 d0             	mov    rax,rdx
ffff800000806d39:	48 01 c0             	add    rax,rax
ffff800000806d3c:	48 01 d0             	add    rax,rdx
ffff800000806d3f:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000806d46:	00 
ffff800000806d47:	48 01 d0             	add    rax,rdx
ffff800000806d4a:	48 c1 e0 05          	shl    rax,0x5
ffff800000806d4e:	48 01 f0             	add    rax,rsi
ffff800000806d51:	48 89 ca             	mov    rdx,rcx
ffff800000806d54:	48 89 90 64 02 00 00 	mov    QWORD PTR [rax+0x264],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:662

    task[i].stat=TASK_READY;
ffff800000806d5b:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000806d62:	ff ff ff 
ffff800000806d65:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806d69:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000806d6c:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806d6f:	48 63 d0             	movsxd rdx,eax
ffff800000806d72:	48 89 d0             	mov    rax,rdx
ffff800000806d75:	48 01 c0             	add    rax,rax
ffff800000806d78:	48 01 d0             	add    rax,rdx
ffff800000806d7b:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000806d82:	00 
ffff800000806d83:	48 01 d0             	add    rax,rdx
ffff800000806d86:	48 c1 e0 05          	shl    rax,0x5
ffff800000806d8a:	48 01 c8             	add    rax,rcx
ffff800000806d8d:	c7 40 18 02 00 00 00 	mov    DWORD PTR [rax+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:663
    task[i].cwd=cwd;
ffff800000806d94:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000806d9b:	ff ff ff 
ffff800000806d9e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806da2:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000806da5:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806da8:	48 63 d0             	movsxd rdx,eax
ffff800000806dab:	48 89 d0             	mov    rax,rdx
ffff800000806dae:	48 01 c0             	add    rax,rax
ffff800000806db1:	48 01 d0             	add    rax,rdx
ffff800000806db4:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000806dbb:	00 
ffff800000806dbc:	48 01 d0             	add    rax,rdx
ffff800000806dbf:	48 c1 e0 05          	shl    rax,0x5
ffff800000806dc3:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
ffff800000806dc7:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000806dcb:	48 89 82 e8 00 00 00 	mov    QWORD PTR [rdx+0xe8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:664
    task[i].exef=exef;
ffff800000806dd2:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000806dd9:	ff ff ff 
ffff800000806ddc:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000806de0:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000806de3:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000806de6:	48 63 d0             	movsxd rdx,eax
ffff800000806de9:	48 89 d0             	mov    rax,rdx
ffff800000806dec:	48 01 c0             	add    rax,rax
ffff800000806def:	48 01 d0             	add    rax,rdx
ffff800000806df2:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000806df9:	00 
ffff800000806dfa:	48 01 d0             	add    rax,rdx
ffff800000806dfd:	48 c1 e0 05          	shl    rax,0x5
ffff800000806e01:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
ffff800000806e05:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000806e09:	48 89 82 f0 00 00 00 	mov    QWORD PTR [rdx+0xf0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:666

    return i;
ffff800000806e10:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:721
    proc_ret_stack *pstack=stack_paddr+stack_size-12;
    pstack->argc=0;
    pstack->argv=0;
    pstack->proc_end_addr=proc_end;
    int *pptr=pstack;*/
}
ffff800000806e13:	48 8d 65 e8          	lea    rsp,[rbp-0x18]
ffff800000806e17:	5b                   	pop    rbx
ffff800000806e18:	41 5c                	pop    r12
ffff800000806e1a:	41 5f                	pop    r15
ffff800000806e1c:	5d                   	pop    rbp
ffff800000806e1d:	c3                   	ret    

ffff800000806e1e <sys_malloc>:
sys_malloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:724

void * sys_malloc(size_t size)
{
ffff800000806e1e:	f3 0f 1e fa          	endbr64 
ffff800000806e22:	55                   	push   rbp
ffff800000806e23:	48 89 e5             	mov    rbp,rsp
ffff800000806e26:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000806e26 <sys_malloc+0x8>
ffff800000806e2d:	49 bb d2 bd 11 00 00 	movabs r11,0x11bdd2
ffff800000806e34:	00 00 00 
ffff800000806e37:	4c 01 d8             	add    rax,r11
ffff800000806e3a:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:741
    void *data=current->mem_struct.heap_top;
    current->mem_struct.heap_top=new_heaptop;
    return data; */
    

    int n=size/CHUNK_SIZE+size%CHUNK_SIZE?1:0;
ffff800000806e3e:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000806e42:	48 89 d1             	mov    rcx,rdx
ffff800000806e45:	48 c1 e9 0c          	shr    rcx,0xc
ffff800000806e49:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000806e4d:	81 e2 ff 0f 00 00    	and    edx,0xfff
ffff800000806e53:	48 01 ca             	add    rdx,rcx
ffff800000806e56:	48 85 d2             	test   rdx,rdx
ffff800000806e59:	0f 95 c2             	setne  dl
ffff800000806e5c:	0f b6 d2             	movzx  edx,dl
ffff800000806e5f:	89 55 e8             	mov    DWORD PTR [rbp-0x18],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:742
    chunk_header *hp=(chunk_header*)task[cur_proc].mem_struct.heap_base;
ffff800000806e62:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff800000806e69:	ff ff ff 
ffff800000806e6c:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806e70:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff800000806e73:	48 ba d8 fd ff ff ff 	movabs rdx,0xfffffffffffffdd8
ffff800000806e7a:	ff ff ff 
ffff800000806e7d:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806e81:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000806e83:	48 63 ca             	movsxd rcx,edx
ffff800000806e86:	48 89 ca             	mov    rdx,rcx
ffff800000806e89:	48 01 d2             	add    rdx,rdx
ffff800000806e8c:	48 01 ca             	add    rdx,rcx
ffff800000806e8f:	48 8d 0c d5 00 00 00 	lea    rcx,[rdx*8+0x0]
ffff800000806e96:	00 
ffff800000806e97:	48 01 ca             	add    rdx,rcx
ffff800000806e9a:	48 c1 e2 05          	shl    rdx,0x5
ffff800000806e9e:	48 01 f2             	add    rdx,rsi
ffff800000806ea1:	48 8b 52 28          	mov    rdx,QWORD PTR [rdx+0x28]
ffff800000806ea5:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:743
    while (hp->next!=NULL&&hp->alloc==0&&hp->pgn>=n)
ffff800000806ea9:	eb 0c                	jmp    ffff800000806eb7 <sys_malloc+0x99>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:744
        hp=hp->next;
ffff800000806eab:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000806eaf:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff800000806eb3:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:743
    while (hp->next!=NULL&&hp->alloc==0&&hp->pgn>=n)
ffff800000806eb7:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000806ebb:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff800000806ebf:	48 85 d2             	test   rdx,rdx
ffff800000806ec2:	74 16                	je     ffff800000806eda <sys_malloc+0xbc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:743 (discriminator 1)
ffff800000806ec4:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000806ec8:	8b 52 04             	mov    edx,DWORD PTR [rdx+0x4]
ffff800000806ecb:	85 d2                	test   edx,edx
ffff800000806ecd:	75 0b                	jne    ffff800000806eda <sys_malloc+0xbc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:743 (discriminator 2)
ffff800000806ecf:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000806ed3:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000806ed5:	39 55 e8             	cmp    DWORD PTR [rbp-0x18],edx
ffff800000806ed8:	7e d1                	jle    ffff800000806eab <sys_malloc+0x8d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:745
    if(hp->pgn<n)
ffff800000806eda:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000806ede:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000806ee0:	39 55 e8             	cmp    DWORD PTR [rbp-0x18],edx
ffff800000806ee3:	0f 8e db 00 00 00    	jle    ffff800000806fc4 <sys_malloc+0x1a6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:748
    {
        //上抬heap top
        if(task[cur_proc].mem_struct.heap_top+CHUNK_SIZE*n>=HEAP_MAXTOP)
ffff800000806ee9:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff800000806ef0:	ff ff ff 
ffff800000806ef3:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806ef7:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff800000806efa:	48 ba d8 fd ff ff ff 	movabs rdx,0xfffffffffffffdd8
ffff800000806f01:	ff ff ff 
ffff800000806f04:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806f08:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000806f0a:	48 63 ca             	movsxd rcx,edx
ffff800000806f0d:	48 89 ca             	mov    rdx,rcx
ffff800000806f10:	48 01 d2             	add    rdx,rdx
ffff800000806f13:	48 01 ca             	add    rdx,rcx
ffff800000806f16:	48 8d 0c d5 00 00 00 	lea    rcx,[rdx*8+0x0]
ffff800000806f1d:	00 
ffff800000806f1e:	48 01 ca             	add    rdx,rcx
ffff800000806f21:	48 c1 e2 05          	shl    rdx,0x5
ffff800000806f25:	48 01 f2             	add    rdx,rsi
ffff800000806f28:	48 8b 4a 30          	mov    rcx,QWORD PTR [rdx+0x30]
ffff800000806f2c:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000806f2f:	c1 e2 0c             	shl    edx,0xc
ffff800000806f32:	48 63 d2             	movsxd rdx,edx
ffff800000806f35:	48 01 ca             	add    rdx,rcx
ffff800000806f38:	48 81 fa ff ff ef 01 	cmp    rdx,0x1efffff
ffff800000806f3f:	76 0a                	jbe    ffff800000806f4b <sys_malloc+0x12d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:751
        {
            //超过顶部
            return NULL;
ffff800000806f41:	b8 00 00 00 00       	mov    eax,0x0
ffff800000806f46:	e9 f2 00 00 00       	jmp    ffff80000080703d <sys_malloc+0x21f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:753
        }
        int needed=n-hp->pgn;
ffff800000806f4b:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000806f4f:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff800000806f51:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000806f54:	29 ca                	sub    edx,ecx
ffff800000806f56:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:754
        char* p=task[cur_proc].mem_struct.heap_top;
ffff800000806f59:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff800000806f60:	ff ff ff 
ffff800000806f63:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000806f67:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000806f6a:	48 ba d8 fd ff ff ff 	movabs rdx,0xfffffffffffffdd8
ffff800000806f71:	ff ff ff 
ffff800000806f74:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000806f78:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000806f7a:	48 63 d0             	movsxd rdx,eax
ffff800000806f7d:	48 89 d0             	mov    rax,rdx
ffff800000806f80:	48 01 c0             	add    rax,rax
ffff800000806f83:	48 01 d0             	add    rax,rdx
ffff800000806f86:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000806f8d:	00 
ffff800000806f8e:	48 01 d0             	add    rax,rdx
ffff800000806f91:	48 c1 e0 05          	shl    rax,0x5
ffff800000806f95:	48 01 c8             	add    rax,rcx
ffff800000806f98:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff800000806f9c:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:755
        for(int i=0;i<needed*CHUNK_SIZE/PAGE_SIZE;i++)
ffff800000806fa0:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000806fa7:	eb 13                	jmp    ffff800000806fbc <sys_malloc+0x19e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:758 (discriminator 3)
        {
            //TODO 改掉，不要触发
            *p=0;//触发缺页中断
ffff800000806fa9:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000806fad:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:759 (discriminator 3)
            p+=PAGE_SIZE;
ffff800000806fb0:	48 81 45 f0 00 10 00 	add    QWORD PTR [rbp-0x10],0x1000
ffff800000806fb7:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:755 (discriminator 3)
        for(int i=0;i<needed*CHUNK_SIZE/PAGE_SIZE;i++)
ffff800000806fb8:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:755 (discriminator 1)
ffff800000806fbc:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000806fbf:	3b 45 e4             	cmp    eax,DWORD PTR [rbp-0x1c]
ffff800000806fc2:	7c e5                	jl     ffff800000806fa9 <sys_malloc+0x18b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:762
        }
    }
    if(hp->pgn>n)
ffff800000806fc4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000806fc8:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000806fca:	39 45 e8             	cmp    DWORD PTR [rbp-0x18],eax
ffff800000806fcd:	7d 59                	jge    ffff800000807028 <sys_malloc+0x20a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:765
    {
        //在后面新建一个头
        char *p=hp;
ffff800000806fcf:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000806fd3:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:766
        p+=(n+1)*CHUNK_SIZE;//算上存储头一个
ffff800000806fd7:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000806fda:	83 c0 01             	add    eax,0x1
ffff800000806fdd:	c1 e0 0c             	shl    eax,0xc
ffff800000806fe0:	48 98                	cdqe   
ffff800000806fe2:	48 01 45 d8          	add    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:767
        chunk_header *np=p;
ffff800000806fe6:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000806fea:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:768
        np->pgn=hp->pgn-n-1;
ffff800000806fee:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000806ff2:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000806ff4:	2b 45 e8             	sub    eax,DWORD PTR [rbp-0x18]
ffff800000806ff7:	8d 50 ff             	lea    edx,[rax-0x1]
ffff800000806ffa:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000806ffe:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:769
        np->next=hp->next;
ffff800000807000:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000807004:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff800000807008:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080700c:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:770
        np->prev=hp;
ffff800000807010:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000807014:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000807018:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:771
        hp->next=np;
ffff80000080701c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000807020:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000807024:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:773
    }
    hp->alloc=1;//分配完毕
ffff800000807028:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080702c:	c7 40 04 01 00 00 00 	mov    DWORD PTR [rax+0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:774
    return (char*)hp+CHUNK_SIZE;//返回后边的第一个数据块地址
ffff800000807033:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000807037:	48 05 00 10 00 00    	add    rax,0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:775
}
ffff80000080703d:	5d                   	pop    rbp
ffff80000080703e:	c3                   	ret    

ffff80000080703f <sys_free>:
sys_free():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:777
int sys_free(int ptr)
{
ffff80000080703f:	f3 0f 1e fa          	endbr64 
ffff800000807043:	55                   	push   rbp
ffff800000807044:	48 89 e5             	mov    rbp,rsp
ffff800000807047:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807047 <sys_free+0x8>
ffff80000080704e:	49 bb b1 bb 11 00 00 	movabs r11,0x11bbb1
ffff800000807055:	00 00 00 
ffff800000807058:	4c 01 d8             	add    rax,r11
ffff80000080705b:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:778
    chunk_header *hp=ptr-CHUNK_SIZE;//回退到头
ffff80000080705e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000807061:	2d 00 10 00 00       	sub    eax,0x1000
ffff800000807066:	48 98                	cdqe   
ffff800000807068:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:779
    hp->alloc=0;    //合并
ffff80000080706c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000807070:	c7 40 04 00 00 00 00 	mov    DWORD PTR [rax+0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:781
    //向后合并
    chunk_header *p=hp->next;
ffff800000807077:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080707b:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080707f:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:782
    while(p!=NULL)
ffff800000807083:	eb 2e                	jmp    ffff8000008070b3 <sys_free+0x74>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:784
    {
        if(p->alloc==0)
ffff800000807085:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000807089:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff80000080708c:	85 c0                	test   eax,eax
ffff80000080708e:	75 2c                	jne    ffff8000008070bc <sys_free+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:786
        {
            hp->pgn+=p->pgn+1;//把区域合并
ffff800000807090:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000807094:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000807096:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080709a:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080709c:	83 c0 01             	add    eax,0x1
ffff80000080709f:	01 c2                	add    edx,eax
ffff8000008070a1:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008070a5:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:789
        }else
            break;
        p=p->next;
ffff8000008070a7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008070ab:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff8000008070af:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:782
    while(p!=NULL)
ffff8000008070b3:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffff8000008070b8:	75 cb                	jne    ffff800000807085 <sys_free+0x46>
ffff8000008070ba:	eb 01                	jmp    ffff8000008070bd <sys_free+0x7e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:788
            break;
ffff8000008070bc:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:792
    }
    //向前合并
    p=hp->prev;
ffff8000008070bd:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008070c1:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008070c5:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:793
    while(p!=NULL)
ffff8000008070c9:	eb 2e                	jmp    ffff8000008070f9 <sys_free+0xba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:795
    {
        if(p->alloc==0)
ffff8000008070cb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008070cf:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff8000008070d2:	85 c0                	test   eax,eax
ffff8000008070d4:	75 2c                	jne    ffff800000807102 <sys_free+0xc3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:797
        {
            p->pgn+=hp->pgn+1;//把区域合并
ffff8000008070d6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008070da:	8b 10                	mov    edx,DWORD PTR [rax]
ffff8000008070dc:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008070e0:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008070e2:	83 c0 01             	add    eax,0x1
ffff8000008070e5:	01 c2                	add    edx,eax
ffff8000008070e7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008070eb:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:800
        }else
            break;
        p=p->prev;
ffff8000008070ed:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008070f1:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008070f5:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:793
    while(p!=NULL)
ffff8000008070f9:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffff8000008070fe:	75 cb                	jne    ffff8000008070cb <sys_free+0x8c>
ffff800000807100:	eb 01                	jmp    ffff800000807103 <sys_free+0xc4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:799
            break;
ffff800000807102:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:803
    }
    //合并完成
    return 0;
ffff800000807103:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:804
}
ffff800000807108:	5d                   	pop    rbp
ffff800000807109:	c3                   	ret    

ffff80000080710a <switch_to>:
switch_to():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:806

void switch_to(struct process *from, struct process *to) {
ffff80000080710a:	f3 0f 1e fa          	endbr64 
ffff80000080710e:	55                   	push   rbp
ffff80000080710f:	48 89 e5             	mov    rbp,rsp
ffff800000807112:	53                   	push   rbx
ffff800000807113:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000807113 <switch_to+0x9>
ffff80000080711a:	49 bb e5 ba 11 00 00 	movabs r11,0x11bae5
ffff800000807121:	00 00 00 
ffff800000807124:	4c 01 d8             	add    rax,r11
ffff800000807127:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
ffff80000080712b:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:807
    cur_proc=to-task;
ffff80000080712f:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff800000807136:	ff ff ff 
ffff800000807139:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080713d:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000807140:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000807144:	48 29 ca             	sub    rdx,rcx
ffff800000807147:	48 89 d1             	mov    rcx,rdx
ffff80000080714a:	48 c1 f9 05          	sar    rcx,0x5
ffff80000080714e:	48 ba 13 da 4b 68 2f 	movabs rdx,0x84bda12f684bda13
ffff800000807155:	a1 bd 84 
ffff800000807158:	48 0f af d1          	imul   rdx,rcx
ffff80000080715c:	89 d1                	mov    ecx,edx
ffff80000080715e:	48 ba d8 fd ff ff ff 	movabs rdx,0xfffffffffffffdd8
ffff800000807165:	ff ff ff 
ffff800000807168:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080716c:	89 0a                	mov    DWORD PTR [rdx],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:808
    current=&task[cur_proc];
ffff80000080716e:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff800000807175:	ff ff ff 
ffff800000807178:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080717c:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff80000080717f:	48 ba d8 fd ff ff ff 	movabs rdx,0xfffffffffffffdd8
ffff800000807186:	ff ff ff 
ffff800000807189:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080718d:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff80000080718f:	48 63 ca             	movsxd rcx,edx
ffff800000807192:	48 89 ca             	mov    rdx,rcx
ffff800000807195:	48 01 d2             	add    rdx,rdx
ffff800000807198:	48 01 ca             	add    rdx,rcx
ffff80000080719b:	48 8d 0c d5 00 00 00 	lea    rcx,[rdx*8+0x0]
ffff8000008071a2:	00 
ffff8000008071a3:	48 01 ca             	add    rdx,rcx
ffff8000008071a6:	48 c1 e2 05          	shl    rdx,0x5
ffff8000008071aa:	48 01 f2             	add    rdx,rsi
ffff8000008071ad:	48 b9 48 fe ff ff ff 	movabs rcx,0xfffffffffffffe48
ffff8000008071b4:	ff ff ff 
ffff8000008071b7:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff8000008071bb:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:810
    //cr3需要物理地址,regs.cr3里面填的就是物理地址
    __asm__ volatile("mov %0,%%rax\n"
ffff8000008071be:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008071c2:	48 8b 80 64 02 00 00 	mov    rax,QWORD PTR [rax+0x264]
ffff8000008071c9:	0f 22 d8             	mov    cr3,rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:812
                 "mov %%rax,%%cr3\n":"=m"(to->regs.cr3));
    __asm__ volatile("mov %%rsp,%0\r\n"
ffff8000008071cc:	4c 8b 4d f0          	mov    r9,QWORD PTR [rbp-0x10]
ffff8000008071d0:	4c 8b 55 f0          	mov    r10,QWORD PTR [rbp-0x10]
ffff8000008071d4:	4c 8b 5d f0          	mov    r11,QWORD PTR [rbp-0x10]
ffff8000008071d8:	48 8b 5d f0          	mov    rbx,QWORD PTR [rbp-0x10]
ffff8000008071dc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008071e0:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff8000008071e4:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff8000008071e8:	4c 8b 45 e8          	mov    r8,QWORD PTR [rbp-0x18]
ffff8000008071ec:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
ffff8000008071f0:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
ffff8000008071f4:	49 89 a1 9c 02 00 00 	mov    QWORD PTR [r9+0x29c],rsp
ffff8000008071fb:	48 8d 05 24 00 00 00 	lea    rax,[rip+0x24]        # ffff800000807226 <done>
ffff800000807202:	49 89 82 6c 02 00 00 	mov    QWORD PTR [r10+0x26c],rax
ffff800000807209:	41 8c a3 dc 02 00 00 	mov    WORD PTR [r11+0x2dc],fs
ffff800000807210:	8c ab e4 02 00 00    	mov    WORD PTR [rbx+0x2e4],gs
ffff800000807216:	48 8b a1 9c 02 00 00 	mov    rsp,QWORD PTR [rcx+0x29c]
ffff80000080721d:	41 ff b0 6c 02 00 00 	push   QWORD PTR [r8+0x26c]
ffff800000807224:	eb 08                	jmp    ffff80000080722e <__switch_to>

ffff800000807226 <done>:
ffff800000807226:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:826
                 "nop":"=m"(from->regs.rsp),"=m"(from->regs.rip),
                 "=m"(from->regs.fs),"=m"(from->regs.gs):
                "m"(to->regs.fs),"m"(to->regs.gs),"m"(to->regs.rsp),"m"(to->regs.rip),
                "D"(from),"S"(to));

}
ffff800000807227:	90                   	nop
ffff800000807228:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
ffff80000080722c:	c9                   	leave  
ffff80000080722d:	c3                   	ret    

ffff80000080722e <__switch_to>:
__switch_to():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:827
void __switch_to(struct process *from, struct process *to) {
ffff80000080722e:	f3 0f 1e fa          	endbr64 
ffff800000807232:	55                   	push   rbp
ffff800000807233:	48 89 e5             	mov    rbp,rsp
ffff800000807236:	41 57                	push   r15
ffff800000807238:	41 54                	push   r12
ffff80000080723a:	53                   	push   rbx
ffff80000080723b:	48 83 ec 18          	sub    rsp,0x18
ffff80000080723f:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080723f <__switch_to+0x11>
ffff800000807246:	49 bb b9 b9 11 00 00 	movabs r11,0x11b9b9
ffff80000080724d:	00 00 00 
ffff800000807250:	4c 01 d8             	add    rax,r11
ffff800000807253:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000807257:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:828
    set_tss(to->tss.rsp0,to->tss.rsp1,to->tss.rsp2,to->tss.ists[0],to->tss.ists[1],
ffff80000080725b:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000080725f:	4c 8b 9a 4c 02 00 00 	mov    r11,QWORD PTR [rdx+0x24c]
ffff800000807266:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000080726a:	4c 8b 92 44 02 00 00 	mov    r10,QWORD PTR [rdx+0x244]
ffff800000807271:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000807275:	4c 8b 8a 3c 02 00 00 	mov    r9,QWORD PTR [rdx+0x23c]
ffff80000080727c:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000807280:	4c 8b 82 34 02 00 00 	mov    r8,QWORD PTR [rdx+0x234]
ffff800000807287:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000080728b:	4c 8b a2 2c 02 00 00 	mov    r12,QWORD PTR [rdx+0x22c]
ffff800000807292:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000807296:	48 8b 9a 24 02 00 00 	mov    rbx,QWORD PTR [rdx+0x224]
ffff80000080729d:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff8000008072a1:	48 8b 8a 1c 02 00 00 	mov    rcx,QWORD PTR [rdx+0x21c]
ffff8000008072a8:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff8000008072ac:	48 8b 92 0c 02 00 00 	mov    rdx,QWORD PTR [rdx+0x20c]
ffff8000008072b3:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff8000008072b7:	48 8b b6 04 02 00 00 	mov    rsi,QWORD PTR [rsi+0x204]
ffff8000008072be:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffff8000008072c2:	48 8b bf fc 01 00 00 	mov    rdi,QWORD PTR [rdi+0x1fc]
ffff8000008072c9:	41 53                	push   r11
ffff8000008072cb:	41 52                	push   r10
ffff8000008072cd:	41 51                	push   r9
ffff8000008072cf:	41 50                	push   r8
ffff8000008072d1:	4d 89 e1             	mov    r9,r12
ffff8000008072d4:	49 89 d8             	mov    r8,rbx
ffff8000008072d7:	49 89 c7             	mov    r15,rax
ffff8000008072da:	49 ba 2b 47 ee ff ff 	movabs r10,0xffffffffffee472b
ffff8000008072e1:	ff ff ff 
ffff8000008072e4:	49 01 c2             	add    r10,rax
ffff8000008072e7:	41 ff d2             	call   r10
ffff8000008072ea:	48 83 c4 20          	add    rsp,0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:830
            to->tss.ists[2],to->tss.ists[3],to->tss.ists[4],to->tss.ists[5],to->tss.ists[6]);
    __asm__ volatile("mov %%fs,%0\r\n"
ffff8000008072ee:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008072f2:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff8000008072f6:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff8000008072fa:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff8000008072fe:	8c a0 dc 02 00 00    	mov    WORD PTR [rax+0x2dc],fs
ffff800000807304:	8c ae e4 02 00 00    	mov    WORD PTR [rsi+0x2e4],gs
ffff80000080730a:	8e a2 dc 02 00 00    	mov    fs,WORD PTR [rdx+0x2dc]
ffff800000807310:	8e a9 e4 02 00 00    	mov    gs,WORD PTR [rcx+0x2e4]
ffff800000807316:	fb                   	sti    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:836
                 "mov %%gs,%1\r\n"
                 "mov %2,%%fs\r\n"
                 "mov %3,%%gs\r\n"
                 "sti":"=m"(to->regs.fs),"=m"(to->regs.gs):
                 "m"(from->regs.fs),"m"(from->regs.gs));
}
ffff800000807317:	90                   	nop
ffff800000807318:	48 8d 65 e8          	lea    rsp,[rbp-0x18]
ffff80000080731c:	5b                   	pop    rbx
ffff80000080731d:	41 5c                	pop    r12
ffff80000080731f:	41 5f                	pop    r15
ffff800000807321:	5d                   	pop    rbp
ffff800000807322:	c3                   	ret    

ffff800000807323 <set_tss>:
set_tss():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:838

void set_tss(u64 rsp0,u64 rsp1,u64 rsp2,u64 ist0,u64 ist1,u64 ist2,u64 ist3,u64 ist4,u64 ist5,u64 ist6){
ffff800000807323:	f3 0f 1e fa          	endbr64 
ffff800000807327:	55                   	push   rbp
ffff800000807328:	48 89 e5             	mov    rbp,rsp
ffff80000080732b:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080732b <set_tss+0x8>
ffff800000807332:	49 bb cd b8 11 00 00 	movabs r11,0x11b8cd
ffff800000807339:	00 00 00 
ffff80000080733c:	4c 01 d8             	add    rax,r11
ffff80000080733f:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000807343:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000807347:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080734b:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
ffff80000080734f:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
ffff800000807353:	4c 89 4d d0          	mov    QWORD PTR [rbp-0x30],r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:839
    tss->rsp0=rsp0;
ffff800000807357:	48 ba b8 fd ff ff ff 	movabs rdx,0xfffffffffffffdb8
ffff80000080735e:	ff ff ff 
ffff800000807361:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807365:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000807368:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
ffff80000080736c:	48 89 4a 04          	mov    QWORD PTR [rdx+0x4],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:840
    tss->rsp1=rsp1;
ffff800000807370:	48 ba b8 fd ff ff ff 	movabs rdx,0xfffffffffffffdb8
ffff800000807377:	ff ff ff 
ffff80000080737a:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080737e:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000807381:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff800000807385:	48 89 4a 0c          	mov    QWORD PTR [rdx+0xc],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:841
    tss->rsp2=rsp2;
ffff800000807389:	48 ba b8 fd ff ff ff 	movabs rdx,0xfffffffffffffdb8
ffff800000807390:	ff ff ff 
ffff800000807393:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807397:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080739a:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff80000080739e:	48 89 4a 14          	mov    QWORD PTR [rdx+0x14],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:842
    tss->ists[0]=ist0;
ffff8000008073a2:	48 ba b8 fd ff ff ff 	movabs rdx,0xfffffffffffffdb8
ffff8000008073a9:	ff ff ff 
ffff8000008073ac:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008073b0:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008073b3:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
ffff8000008073b7:	48 89 4a 24          	mov    QWORD PTR [rdx+0x24],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:843
    tss->ists[1]=ist1;
ffff8000008073bb:	48 ba b8 fd ff ff ff 	movabs rdx,0xfffffffffffffdb8
ffff8000008073c2:	ff ff ff 
ffff8000008073c5:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008073c9:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008073cc:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff8000008073d0:	48 89 4a 2c          	mov    QWORD PTR [rdx+0x2c],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:844
    tss->ists[2]=ist2;
ffff8000008073d4:	48 ba b8 fd ff ff ff 	movabs rdx,0xfffffffffffffdb8
ffff8000008073db:	ff ff ff 
ffff8000008073de:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008073e2:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008073e5:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffff8000008073e9:	48 89 4a 34          	mov    QWORD PTR [rdx+0x34],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:845
    tss->ists[3]=ist3;
ffff8000008073ed:	48 ba b8 fd ff ff ff 	movabs rdx,0xfffffffffffffdb8
ffff8000008073f4:	ff ff ff 
ffff8000008073f7:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008073fb:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008073fe:	48 8b 4d 10          	mov    rcx,QWORD PTR [rbp+0x10]
ffff800000807402:	48 89 4a 3c          	mov    QWORD PTR [rdx+0x3c],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:846
    tss->ists[4]=ist4;
ffff800000807406:	48 ba b8 fd ff ff ff 	movabs rdx,0xfffffffffffffdb8
ffff80000080740d:	ff ff ff 
ffff800000807410:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000807414:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000807417:	48 8b 4d 18          	mov    rcx,QWORD PTR [rbp+0x18]
ffff80000080741b:	48 89 4a 44          	mov    QWORD PTR [rdx+0x44],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:847
    tss->ists[5]=ist5;
ffff80000080741f:	48 ba b8 fd ff ff ff 	movabs rdx,0xfffffffffffffdb8
ffff800000807426:	ff ff ff 
ffff800000807429:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080742d:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000807430:	48 8b 4d 20          	mov    rcx,QWORD PTR [rbp+0x20]
ffff800000807434:	48 89 4a 4c          	mov    QWORD PTR [rdx+0x4c],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:848
    tss->ists[6]=ist6;
ffff800000807438:	48 ba b8 fd ff ff ff 	movabs rdx,0xfffffffffffffdb8
ffff80000080743f:	ff ff ff 
ffff800000807442:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000807446:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807449:	48 8b 55 28          	mov    rdx,QWORD PTR [rbp+0x28]
ffff80000080744d:	48 89 50 54          	mov    QWORD PTR [rax+0x54],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:849
}
ffff800000807451:	90                   	nop
ffff800000807452:	5d                   	pop    rbp
ffff800000807453:	c3                   	ret    

ffff800000807454 <fork_child_ret>:
fork_child_ret():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:851

int fork_child_ret(){
ffff800000807454:	f3 0f 1e fa          	endbr64 
ffff800000807458:	55                   	push   rbp
ffff800000807459:	48 89 e5             	mov    rbp,rsp
ffff80000080745c:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080745c <fork_child_ret+0x8>
ffff800000807463:	49 bb 9c b7 11 00 00 	movabs r11,0x11b79c
ffff80000080746a:	00 00 00 
ffff80000080746d:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:852
    return 0;
ffff800000807470:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:854

}
ffff800000807475:	5d                   	pop    rbp
ffff800000807476:	c3                   	ret    

ffff800000807477 <sys_fork>:
sys_fork():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:856

int sys_fork(void){
ffff800000807477:	f3 0f 1e fa          	endbr64 
ffff80000080747b:	55                   	push   rbp
ffff80000080747c:	48 89 e5             	mov    rbp,rsp
ffff80000080747f:	41 57                	push   r15
ffff800000807481:	53                   	push   rbx
ffff800000807482:	48 83 c4 80          	add    rsp,0xffffffffffffff80
ffff800000807486:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000807486 <sys_fork+0xf>
ffff80000080748d:	49 bb 72 b7 11 00 00 	movabs r11,0x11b772
ffff800000807494:	00 00 00 
ffff800000807497:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:857
    cli();
ffff80000080749a:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:858
    int pid=req_proc();
ffff80000080749b:	49 89 df             	mov    r15,rbx
ffff80000080749e:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008074a3:	48 ba c9 2a ee ff ff 	movabs rdx,0xffffffffffee2ac9
ffff8000008074aa:	ff ff ff 
ffff8000008074ad:	48 01 da             	add    rdx,rbx
ffff8000008074b0:	ff d2                	call   rdx
ffff8000008074b2:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:859
    int pids=task[pid].pid;
ffff8000008074b5:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff8000008074bc:	ff ff ff 
ffff8000008074bf:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008074c3:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008074c6:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008074c9:	48 63 d0             	movsxd rdx,eax
ffff8000008074cc:	48 89 d0             	mov    rax,rdx
ffff8000008074cf:	48 01 c0             	add    rax,rax
ffff8000008074d2:	48 01 d0             	add    rax,rdx
ffff8000008074d5:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008074dc:	00 
ffff8000008074dd:	48 01 d0             	add    rax,rdx
ffff8000008074e0:	48 c1 e0 05          	shl    rax,0x5
ffff8000008074e4:	48 01 c8             	add    rax,rcx
ffff8000008074e7:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008074e9:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:860
    if(pid==-1)return -1;
ffff8000008074ec:	83 7d dc ff          	cmp    DWORD PTR [rbp-0x24],0xffffffff
ffff8000008074f0:	75 0a                	jne    ffff8000008074fc <sys_fork+0x85>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:860 (discriminator 1)
ffff8000008074f2:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff8000008074f7:	e9 41 0c 00 00       	jmp    ffff80000080813d <sys_fork+0xcc6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:862
    //首先完全复制
    task[pid]=*current;
ffff8000008074fc:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff800000807503:	ff ff ff 
ffff800000807506:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080750a:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080750d:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000807514:	ff ff ff 
ffff800000807517:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080751b:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff80000080751e:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000807521:	48 63 d0             	movsxd rdx,eax
ffff800000807524:	48 89 d0             	mov    rax,rdx
ffff800000807527:	48 01 c0             	add    rax,rax
ffff80000080752a:	48 01 d0             	add    rax,rdx
ffff80000080752d:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807534:	00 
ffff800000807535:	48 01 d0             	add    rax,rdx
ffff800000807538:	48 c1 e0 05          	shl    rax,0x5
ffff80000080753c:	48 01 f0             	add    rax,rsi
ffff80000080753f:	48 89 c2             	mov    rdx,rax
ffff800000807542:	48 89 c8             	mov    rax,rcx
ffff800000807545:	b9 60 03 00 00       	mov    ecx,0x360
ffff80000080754a:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff80000080754d:	48 89 32             	mov    QWORD PTR [rdx],rsi
ffff800000807550:	89 ce                	mov    esi,ecx
ffff800000807552:	48 01 d6             	add    rsi,rdx
ffff800000807555:	48 8d 7e 08          	lea    rdi,[rsi+0x8]
ffff800000807559:	89 ce                	mov    esi,ecx
ffff80000080755b:	48 01 c6             	add    rsi,rax
ffff80000080755e:	48 83 c6 08          	add    rsi,0x8
ffff800000807562:	48 8b 76 f0          	mov    rsi,QWORD PTR [rsi-0x10]
ffff800000807566:	48 89 77 f0          	mov    QWORD PTR [rdi-0x10],rsi
ffff80000080756a:	48 8d 7a 08          	lea    rdi,[rdx+0x8]
ffff80000080756e:	48 83 e7 f8          	and    rdi,0xfffffffffffffff8
ffff800000807572:	48 29 fa             	sub    rdx,rdi
ffff800000807575:	48 29 d0             	sub    rax,rdx
ffff800000807578:	01 d1                	add    ecx,edx
ffff80000080757a:	83 e1 f8             	and    ecx,0xfffffff8
ffff80000080757d:	c1 e9 03             	shr    ecx,0x3
ffff800000807580:	89 ca                	mov    edx,ecx
ffff800000807582:	89 d2                	mov    edx,edx
ffff800000807584:	48 89 c6             	mov    rsi,rax
ffff800000807587:	48 89 d1             	mov    rcx,rdx
ffff80000080758a:	f3 48 a5             	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:863
    task[pid].pid=pids;
ffff80000080758d:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000807594:	ff ff ff 
ffff800000807597:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080759b:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080759e:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008075a1:	48 63 d0             	movsxd rdx,eax
ffff8000008075a4:	48 89 d0             	mov    rax,rdx
ffff8000008075a7:	48 01 c0             	add    rax,rax
ffff8000008075aa:	48 01 d0             	add    rax,rdx
ffff8000008075ad:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008075b4:	00 
ffff8000008075b5:	48 01 d0             	add    rax,rdx
ffff8000008075b8:	48 c1 e0 05          	shl    rax,0x5
ffff8000008075bc:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
ffff8000008075c0:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff8000008075c3:	89 02                	mov    DWORD PTR [rdx],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:864
    task[pid].stat=TASK_ZOMBIE;
ffff8000008075c5:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff8000008075cc:	ff ff ff 
ffff8000008075cf:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008075d3:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008075d6:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008075d9:	48 63 d0             	movsxd rdx,eax
ffff8000008075dc:	48 89 d0             	mov    rax,rdx
ffff8000008075df:	48 01 c0             	add    rax,rax
ffff8000008075e2:	48 01 d0             	add    rax,rdx
ffff8000008075e5:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008075ec:	00 
ffff8000008075ed:	48 01 d0             	add    rax,rdx
ffff8000008075f0:	48 c1 e0 05          	shl    rax,0x5
ffff8000008075f4:	48 01 c8             	add    rax,rcx
ffff8000008075f7:	c7 40 18 04 00 00 00 	mov    DWORD PTR [rax+0x18],0x4
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:871

//    __asm__ volatile("mov %%r10,%0"::"m"(r->rip));
    // r->rip=current->regs.rip;

    // memcpy(&task[pid].tss,tss, sizeof(TSS));
    task[pid].parent_pid=current->pid;
ffff8000008075fe:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff800000807605:	ff ff ff 
ffff800000807608:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080760c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080760f:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000807616:	ff ff ff 
ffff800000807619:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080761d:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff800000807620:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000807623:	48 63 c8             	movsxd rcx,eax
ffff800000807626:	48 89 c8             	mov    rax,rcx
ffff800000807629:	48 01 c0             	add    rax,rax
ffff80000080762c:	48 01 c8             	add    rax,rcx
ffff80000080762f:	48 8d 0c c5 00 00 00 	lea    rcx,[rax*8+0x0]
ffff800000807636:	00 
ffff800000807637:	48 01 c8             	add    rax,rcx
ffff80000080763a:	48 c1 e0 05          	shl    rax,0x5
ffff80000080763e:	48 8d 0c 06          	lea    rcx,[rsi+rax*1]
ffff800000807642:	8b 02                	mov    eax,DWORD PTR [rdx]
ffff800000807644:	89 81 bc 00 00 00    	mov    DWORD PTR [rcx+0xbc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:873
    //设置父子关系以及初始化子进程的的list节点
    list_init(&task[pid].node);
ffff80000080764a:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000807651:	ff ff ff 
ffff800000807654:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807658:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080765b:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080765e:	48 63 d0             	movsxd rdx,eax
ffff800000807661:	48 89 d0             	mov    rax,rdx
ffff800000807664:	48 01 c0             	add    rax,rax
ffff800000807667:	48 01 d0             	add    rax,rdx
ffff80000080766a:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807671:	00 
ffff800000807672:	48 01 d0             	add    rax,rdx
ffff800000807675:	48 c1 e0 05          	shl    rax,0x5
ffff800000807679:	48 01 c8             	add    rax,rcx
ffff80000080767c:	48 05 3c 03 00 00    	add    rax,0x33c
ffff800000807682:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff800000807686:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080768a:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff800000807691:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000807695:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000080769c:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000080769d:	90                   	nop
sys_fork():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:874
    task[pid].child_procs=NULL;
ffff80000080769e:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff8000008076a5:	ff ff ff 
ffff8000008076a8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008076ac:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008076af:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008076b2:	48 63 d0             	movsxd rdx,eax
ffff8000008076b5:	48 89 d0             	mov    rax,rdx
ffff8000008076b8:	48 01 c0             	add    rax,rax
ffff8000008076bb:	48 01 d0             	add    rax,rdx
ffff8000008076be:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008076c5:	00 
ffff8000008076c6:	48 01 d0             	add    rax,rdx
ffff8000008076c9:	48 c1 e0 05          	shl    rax,0x5
ffff8000008076cd:	48 01 c8             	add    rax,rcx
ffff8000008076d0:	48 c7 80 54 03 00 00 	mov    QWORD PTR [rax+0x354],0x0
ffff8000008076d7:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:875
    task[pid].node.data=&task[pid];
ffff8000008076db:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff8000008076e2:	ff ff ff 
ffff8000008076e5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008076e9:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008076ec:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008076ef:	48 63 d0             	movsxd rdx,eax
ffff8000008076f2:	48 89 d0             	mov    rax,rdx
ffff8000008076f5:	48 01 c0             	add    rax,rax
ffff8000008076f8:	48 01 d0             	add    rax,rdx
ffff8000008076fb:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807702:	00 
ffff800000807703:	48 01 d0             	add    rax,rdx
ffff800000807706:	48 c1 e0 05          	shl    rax,0x5
ffff80000080770a:	48 89 c7             	mov    rdi,rax
ffff80000080770d:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000807714:	ff ff ff 
ffff800000807717:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080771b:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff80000080771e:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000807721:	48 63 d0             	movsxd rdx,eax
ffff800000807724:	48 89 d0             	mov    rax,rdx
ffff800000807727:	48 01 c0             	add    rax,rax
ffff80000080772a:	48 01 d0             	add    rax,rdx
ffff80000080772d:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807734:	00 
ffff800000807735:	48 01 d0             	add    rax,rdx
ffff800000807738:	48 c1 e0 05          	shl    rax,0x5
ffff80000080773c:	48 01 f0             	add    rax,rsi
ffff80000080773f:	48 8d 14 39          	lea    rdx,[rcx+rdi*1]
ffff800000807743:	48 89 90 44 03 00 00 	mov    QWORD PTR [rax+0x344],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:876
    if(!current->child_procs)
ffff80000080774a:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff800000807751:	ff ff ff 
ffff800000807754:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807758:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080775b:	48 8b 80 54 03 00 00 	mov    rax,QWORD PTR [rax+0x354]
ffff800000807762:	48 85 c0             	test   rax,rax
ffff800000807765:	75 57                	jne    ffff8000008077be <sys_fork+0x347>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:877
        current->child_procs=&task[pid].node;
ffff800000807767:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff80000080776e:	ff ff ff 
ffff800000807771:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807775:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000807778:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080777b:	48 63 d0             	movsxd rdx,eax
ffff80000080777e:	48 89 d0             	mov    rax,rdx
ffff800000807781:	48 01 c0             	add    rax,rax
ffff800000807784:	48 01 d0             	add    rax,rdx
ffff800000807787:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080778e:	00 
ffff80000080778f:	48 01 d0             	add    rax,rdx
ffff800000807792:	48 c1 e0 05          	shl    rax,0x5
ffff800000807796:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
ffff80000080779a:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff8000008077a1:	ff ff ff 
ffff8000008077a4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008077a8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008077ab:	48 81 c2 3c 03 00 00 	add    rdx,0x33c
ffff8000008077b2:	48 89 90 54 03 00 00 	mov    QWORD PTR [rax+0x354],rdx
ffff8000008077b9:	e9 0e 01 00 00       	jmp    ffff8000008078cc <sys_fork+0x455>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:879
    else
        list_add(current->child_procs,&task[pid].node);
ffff8000008077be:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff8000008077c5:	ff ff ff 
ffff8000008077c8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008077cc:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008077cf:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008077d2:	48 63 d0             	movsxd rdx,eax
ffff8000008077d5:	48 89 d0             	mov    rax,rdx
ffff8000008077d8:	48 01 c0             	add    rax,rax
ffff8000008077db:	48 01 d0             	add    rax,rdx
ffff8000008077de:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008077e5:	00 
ffff8000008077e6:	48 01 d0             	add    rax,rdx
ffff8000008077e9:	48 c1 e0 05          	shl    rax,0x5
ffff8000008077ed:	48 01 c8             	add    rax,rcx
ffff8000008077f0:	48 8d 90 3c 03 00 00 	lea    rdx,[rax+0x33c]
ffff8000008077f7:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff8000008077fe:	ff ff ff 
ffff800000807801:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807805:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807808:	48 8b 80 54 03 00 00 	mov    rax,QWORD PTR [rax+0x354]
ffff80000080780f:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
ffff800000807813:	48 89 55 90          	mov    QWORD PTR [rbp-0x70],rdx
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:33
    struct List* p=entry;
ffff800000807817:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080781b:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:34
    for(;p->next&&p->next!=p;p=p->next){
ffff80000080781f:	eb 25                	jmp    ffff800000807846 <sys_fork+0x3cf>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:35
        if(p->data==new->data)
ffff800000807821:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000807825:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff800000807829:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080782d:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000807831:	48 39 c2             	cmp    rdx,rax
ffff800000807834:	0f 84 91 00 00 00    	je     ffff8000008078cb <sys_fork+0x454>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:34
    for(;p->next&&p->next!=p;p=p->next){
ffff80000080783a:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080783e:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000807842:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
ffff800000807846:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080784a:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080784e:	48 85 c0             	test   rax,rax
ffff800000807851:	74 0e                	je     ffff800000807861 <sys_fork+0x3ea>
ffff800000807853:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000807857:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080785b:	48 39 45 88          	cmp    QWORD PTR [rbp-0x78],rax
ffff80000080785f:	75 c0                	jne    ffff800000807821 <sys_fork+0x3aa>
ffff800000807861:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000807865:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
ffff800000807869:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080786d:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff800000807874:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000807878:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080787c:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000807883:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff800000807887:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff80000080788e:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
ffff800000807892:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff800000807895:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff80000080789c:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008078a0:	48 85 c0             	test   rax,rax
ffff8000008078a3:	74 15                	je     ffff8000008078ba <sys_fork+0x443>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff8000008078a5:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff8000008078ac:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008078b0:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
ffff8000008078b7:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:29
    entry->next = new;
ffff8000008078ba:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff8000008078be:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
ffff8000008078c5:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff8000008078c9:	eb 01                	jmp    ffff8000008078cc <sys_fork+0x455>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:36
            return;
ffff8000008078cb:	90                   	nop
sys_fork():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:881

    task[pid].utime=0;
ffff8000008078cc:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff8000008078d3:	ff ff ff 
ffff8000008078d6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008078da:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008078dd:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008078e0:	48 63 d0             	movsxd rdx,eax
ffff8000008078e3:	48 89 d0             	mov    rax,rdx
ffff8000008078e6:	48 01 c0             	add    rax,rax
ffff8000008078e9:	48 01 d0             	add    rax,rdx
ffff8000008078ec:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008078f3:	00 
ffff8000008078f4:	48 01 d0             	add    rax,rdx
ffff8000008078f7:	48 c1 e0 05          	shl    rax,0x5
ffff8000008078fb:	48 01 c8             	add    rax,rcx
ffff8000008078fe:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [rax+0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:884

    //复制父进程的内存映射到子进程，然后重新映射并复制子进程的堆栈和数据段
    copy_mmap(current,&task[pid]);
ffff800000807905:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff80000080790c:	ff ff ff 
ffff80000080790f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807913:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000807916:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000807919:	48 63 d0             	movsxd rdx,eax
ffff80000080791c:	48 89 d0             	mov    rax,rdx
ffff80000080791f:	48 01 c0             	add    rax,rax
ffff800000807922:	48 01 d0             	add    rax,rdx
ffff800000807925:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080792c:	00 
ffff80000080792d:	48 01 d0             	add    rax,rdx
ffff800000807930:	48 c1 e0 05          	shl    rax,0x5
ffff800000807934:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
ffff800000807938:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080793f:	ff ff ff 
ffff800000807942:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807946:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807949:	48 89 d6             	mov    rsi,rdx
ffff80000080794c:	48 89 c7             	mov    rdi,rax
ffff80000080794f:	49 89 df             	mov    r15,rbx
ffff800000807952:	48 b8 f0 58 ee ff ff 	movabs rax,0xffffffffffee58f0
ffff800000807959:	ff ff ff 
ffff80000080795c:	48 01 d8             	add    rax,rbx
ffff80000080795f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:889
    
    //复制完毕，开始更改堆栈
    //栈
    //首先获取物理内存，然后临时映射到一个地方，然后拷贝数据，再解除映射，再映射到目标进程的页表。
    addr_t stk=task[pid].mem_struct.stack_top-PAGE_4K_SIZE;
ffff800000807961:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000807968:	ff ff ff 
ffff80000080796b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080796f:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000807972:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000807975:	48 63 d0             	movsxd rdx,eax
ffff800000807978:	48 89 d0             	mov    rax,rdx
ffff80000080797b:	48 01 c0             	add    rax,rax
ffff80000080797e:	48 01 d0             	add    rax,rdx
ffff800000807981:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807988:	00 
ffff800000807989:	48 01 d0             	add    rax,rdx
ffff80000080798c:	48 c1 e0 05          	shl    rax,0x5
ffff800000807990:	48 01 c8             	add    rax,rcx
ffff800000807993:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000807997:	48 2d 00 10 00 00    	sub    rax,0x1000
ffff80000080799d:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:890
    addr_t tmpla=KNL_BASE+0x80000000;
ffff8000008079a1:	48 b8 00 00 00 80 00 	movabs rax,0xffff800080000000
ffff8000008079a8:	80 ff ff 
ffff8000008079ab:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:891
    for(;stk>=task[pid].mem_struct.stack_bottom;stk-=PAGE_4K_SIZE){
ffff8000008079af:	e9 e3 00 00 00       	jmp    ffff800000807a97 <sys_fork+0x620>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:892 (discriminator 2)
        addr_t new_stkpg= pmalloc(PAGE_4K_SIZE);
ffff8000008079b4:	bf 00 10 00 00       	mov    edi,0x1000
ffff8000008079b9:	49 89 df             	mov    r15,rbx
ffff8000008079bc:	48 b8 83 0a ee ff ff 	movabs rax,0xffffffffffee0a83
ffff8000008079c3:	ff ff ff 
ffff8000008079c6:	48 01 d8             	add    rax,rbx
ffff8000008079c9:	ff d0                	call   rax
ffff8000008079cb:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:893 (discriminator 2)
        smmap(new_stkpg,tmpla,PAGE_PRESENT|PAGE_RWX,current->pml4);
ffff8000008079cf:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff8000008079d6:	ff ff ff 
ffff8000008079d9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008079dd:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008079e0:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff8000008079e7:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff8000008079eb:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008079ef:	48 89 d1             	mov    rcx,rdx
ffff8000008079f2:	ba 03 00 00 00       	mov    edx,0x3
ffff8000008079f7:	48 89 c7             	mov    rdi,rax
ffff8000008079fa:	49 89 df             	mov    r15,rbx
ffff8000008079fd:	48 b8 d4 f1 ed ff ff 	movabs rax,0xffffffffffedf1d4
ffff800000807a04:	ff ff ff 
ffff800000807a07:	48 01 d8             	add    rax,rbx
ffff800000807a0a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:894 (discriminator 2)
        memcpy(tmpla,stk,PAGE_4K_SIZE);//把当前进程的栈空间复制到新栈里面
ffff800000807a0c:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff800000807a10:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000807a14:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000807a19:	48 89 ce             	mov    rsi,rcx
ffff800000807a1c:	48 89 c7             	mov    rdi,rax
ffff800000807a1f:	49 89 df             	mov    r15,rbx
ffff800000807a22:	48 b8 da 1d ef ff ff 	movabs rax,0xffffffffffef1dda
ffff800000807a29:	ff ff ff 
ffff800000807a2c:	48 01 d8             	add    rax,rbx
ffff800000807a2f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:897 (discriminator 2)
        
        //把新的页面映射到进程页表里
        smmap(new_stkpg,stk,PAGE_PRESENT|PAGE_RWX|PAGE_FOR_ALL,task[pid].pml4);
ffff800000807a31:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000807a38:	ff ff ff 
ffff800000807a3b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807a3f:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000807a42:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000807a45:	48 63 d0             	movsxd rdx,eax
ffff800000807a48:	48 89 d0             	mov    rax,rdx
ffff800000807a4b:	48 01 c0             	add    rax,rax
ffff800000807a4e:	48 01 d0             	add    rax,rdx
ffff800000807a51:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807a58:	00 
ffff800000807a59:	48 01 d0             	add    rax,rdx
ffff800000807a5c:	48 c1 e0 05          	shl    rax,0x5
ffff800000807a60:	48 01 c8             	add    rax,rcx
ffff800000807a63:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff800000807a6a:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
ffff800000807a6e:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000807a72:	48 89 d1             	mov    rcx,rdx
ffff800000807a75:	ba 07 00 00 00       	mov    edx,0x7
ffff800000807a7a:	48 89 c7             	mov    rdi,rax
ffff800000807a7d:	49 89 df             	mov    r15,rbx
ffff800000807a80:	48 b8 d4 f1 ed ff ff 	movabs rax,0xffffffffffedf1d4
ffff800000807a87:	ff ff ff 
ffff800000807a8a:	48 01 d8             	add    rax,rbx
ffff800000807a8d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:891 (discriminator 2)
    for(;stk>=task[pid].mem_struct.stack_bottom;stk-=PAGE_4K_SIZE){
ffff800000807a8f:	48 81 6d e8 00 10 00 	sub    QWORD PTR [rbp-0x18],0x1000
ffff800000807a96:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:891 (discriminator 1)
ffff800000807a97:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000807a9e:	ff ff ff 
ffff800000807aa1:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807aa5:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000807aa8:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000807aab:	48 63 d0             	movsxd rdx,eax
ffff800000807aae:	48 89 d0             	mov    rax,rdx
ffff800000807ab1:	48 01 c0             	add    rax,rax
ffff800000807ab4:	48 01 d0             	add    rax,rdx
ffff800000807ab7:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807abe:	00 
ffff800000807abf:	48 01 d0             	add    rax,rdx
ffff800000807ac2:	48 c1 e0 05          	shl    rax,0x5
ffff800000807ac6:	48 01 c8             	add    rax,rcx
ffff800000807ac9:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff800000807acd:	48 39 45 e8          	cmp    QWORD PTR [rbp-0x18],rax
ffff800000807ad1:	0f 83 dd fe ff ff    	jae    ffff8000008079b4 <sys_fork+0x53d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:899
    }
    if(task[pid].mem_struct.stack_top<=task[pid].mem_struct.stack_bottom){
ffff800000807ad7:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000807ade:	ff ff ff 
ffff800000807ae1:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807ae5:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000807ae8:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000807aeb:	48 63 d0             	movsxd rdx,eax
ffff800000807aee:	48 89 d0             	mov    rax,rdx
ffff800000807af1:	48 01 c0             	add    rax,rax
ffff800000807af4:	48 01 d0             	add    rax,rdx
ffff800000807af7:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807afe:	00 
ffff800000807aff:	48 01 d0             	add    rax,rdx
ffff800000807b02:	48 c1 e0 05          	shl    rax,0x5
ffff800000807b06:	48 01 c8             	add    rax,rcx
ffff800000807b09:	48 8b 48 40          	mov    rcx,QWORD PTR [rax+0x40]
ffff800000807b0d:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000807b14:	ff ff ff 
ffff800000807b17:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807b1b:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff800000807b1e:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000807b21:	48 63 d0             	movsxd rdx,eax
ffff800000807b24:	48 89 d0             	mov    rax,rdx
ffff800000807b27:	48 01 c0             	add    rax,rax
ffff800000807b2a:	48 01 d0             	add    rax,rdx
ffff800000807b2d:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807b34:	00 
ffff800000807b35:	48 01 d0             	add    rax,rdx
ffff800000807b38:	48 c1 e0 05          	shl    rax,0x5
ffff800000807b3c:	48 01 f0             	add    rax,rsi
ffff800000807b3f:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff800000807b43:	48 39 c1             	cmp    rcx,rax
ffff800000807b46:	0f 87 f4 00 00 00    	ja     ffff800000807c40 <sys_fork+0x7c9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:902
        //父进程没有栈空间（一般是不可能的，这个几乎就是为了内核进程fork而写）
        //开辟一页空栈。
        addr_t new_stkpg= (addr_t) pmalloc(PAGE_4K_SIZE);
ffff800000807b4c:	bf 00 10 00 00       	mov    edi,0x1000
ffff800000807b51:	49 89 df             	mov    r15,rbx
ffff800000807b54:	48 b8 83 0a ee ff ff 	movabs rax,0xffffffffffee0a83
ffff800000807b5b:	ff ff ff 
ffff800000807b5e:	48 01 d8             	add    rax,rbx
ffff800000807b61:	ff d0                	call   rax
ffff800000807b63:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:903
        stk=task[pid].mem_struct.stack_top-PAGE_4K_SIZE;
ffff800000807b67:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000807b6e:	ff ff ff 
ffff800000807b71:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807b75:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000807b78:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000807b7b:	48 63 d0             	movsxd rdx,eax
ffff800000807b7e:	48 89 d0             	mov    rax,rdx
ffff800000807b81:	48 01 c0             	add    rax,rax
ffff800000807b84:	48 01 d0             	add    rax,rdx
ffff800000807b87:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807b8e:	00 
ffff800000807b8f:	48 01 d0             	add    rax,rdx
ffff800000807b92:	48 c1 e0 05          	shl    rax,0x5
ffff800000807b96:	48 01 c8             	add    rax,rcx
ffff800000807b99:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000807b9d:	48 2d 00 10 00 00    	sub    rax,0x1000
ffff800000807ba3:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:905
        //把新的页面映射到进程页表里
        smmap(new_stkpg,stk,PAGE_PRESENT|PAGE_RWX|PAGE_FOR_ALL,task[pid].pml4);
ffff800000807ba7:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000807bae:	ff ff ff 
ffff800000807bb1:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807bb5:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000807bb8:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000807bbb:	48 63 d0             	movsxd rdx,eax
ffff800000807bbe:	48 89 d0             	mov    rax,rdx
ffff800000807bc1:	48 01 c0             	add    rax,rax
ffff800000807bc4:	48 01 d0             	add    rax,rdx
ffff800000807bc7:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807bce:	00 
ffff800000807bcf:	48 01 d0             	add    rax,rdx
ffff800000807bd2:	48 c1 e0 05          	shl    rax,0x5
ffff800000807bd6:	48 01 c8             	add    rax,rcx
ffff800000807bd9:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff800000807be0:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
ffff800000807be4:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000807be8:	48 89 d1             	mov    rcx,rdx
ffff800000807beb:	ba 07 00 00 00       	mov    edx,0x7
ffff800000807bf0:	48 89 c7             	mov    rdi,rax
ffff800000807bf3:	49 89 df             	mov    r15,rbx
ffff800000807bf6:	48 b8 d4 f1 ed ff ff 	movabs rax,0xffffffffffedf1d4
ffff800000807bfd:	ff ff ff 
ffff800000807c00:	48 01 d8             	add    rax,rbx
ffff800000807c03:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:907
        //给新进程分配一页栈
        task[pid].mem_struct.stack_bottom=stk;
ffff800000807c05:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000807c0c:	ff ff ff 
ffff800000807c0f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807c13:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000807c16:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000807c19:	48 63 d0             	movsxd rdx,eax
ffff800000807c1c:	48 89 d0             	mov    rax,rdx
ffff800000807c1f:	48 01 c0             	add    rax,rax
ffff800000807c22:	48 01 d0             	add    rax,rdx
ffff800000807c25:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807c2c:	00 
ffff800000807c2d:	48 01 d0             	add    rax,rdx
ffff800000807c30:	48 c1 e0 05          	shl    rax,0x5
ffff800000807c34:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
ffff800000807c38:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000807c3c:	48 89 42 38          	mov    QWORD PTR [rdx+0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:913
        //给这页新的栈填上恢复上下文需要的内容
        
    }
    //中断使用的栈空间
    //ist一页就够
    addr_t new_stkpg= kmalloc(0,PAGE_4K_SIZE);
ffff800000807c40:	be 00 10 00 00       	mov    esi,0x1000
ffff800000807c45:	bf 00 00 00 00       	mov    edi,0x0
ffff800000807c4a:	49 89 df             	mov    r15,rbx
ffff800000807c4d:	48 b8 ce 07 ee ff ff 	movabs rax,0xffffffffffee07ce
ffff800000807c54:	ff ff ff 
ffff800000807c57:	48 01 d8             	add    rax,rbx
ffff800000807c5a:	ff d0                	call   rax
ffff800000807c5c:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:914
    memcpy(new_stkpg,current->tss.ists[0]-PAGE_4K_SIZE,PAGE_4K_SIZE);//把当前进程的栈空间复制到新栈里面
ffff800000807c60:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff800000807c67:	ff ff ff 
ffff800000807c6a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807c6e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807c71:	48 8b 80 1c 02 00 00 	mov    rax,QWORD PTR [rax+0x21c]
ffff800000807c78:	48 2d 00 10 00 00    	sub    rax,0x1000
ffff800000807c7e:	48 89 c1             	mov    rcx,rax
ffff800000807c81:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000807c85:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000807c8a:	48 89 ce             	mov    rsi,rcx
ffff800000807c8d:	48 89 c7             	mov    rdi,rax
ffff800000807c90:	49 89 df             	mov    r15,rbx
ffff800000807c93:	48 b8 da 1d ef ff ff 	movabs rax,0xffffffffffef1dda
ffff800000807c9a:	ff ff ff 
ffff800000807c9d:	48 01 d8             	add    rax,rbx
ffff800000807ca0:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:915
    stack_store_regs* ctx_dup=new_stkpg+PAGE_4K_SIZE-sizeof(stack_store_regs);//拷贝的上下文
ffff800000807ca2:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000807ca6:	48 05 58 0f 00 00    	add    rax,0xf58
ffff800000807cac:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:916
    ctx_dup->rax=0;//这样进程切换到子进程的done标签，从时钟中断返回弹出堆栈的时候rax弹出来的就是0，成为返回值。
ffff800000807cb0:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000807cb4:	48 c7 40 78 00 00 00 	mov    QWORD PTR [rax+0x78],0x0
ffff800000807cbb:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:917
    task[pid].regs.rip=clock_ret;
ffff800000807cbc:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000807cc3:	ff ff ff 
ffff800000807cc6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807cca:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000807ccd:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000807cd0:	48 63 d0             	movsxd rdx,eax
ffff800000807cd3:	48 89 d0             	mov    rax,rdx
ffff800000807cd6:	48 01 c0             	add    rax,rax
ffff800000807cd9:	48 01 d0             	add    rax,rdx
ffff800000807cdc:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807ce3:	00 
ffff800000807ce4:	48 01 d0             	add    rax,rdx
ffff800000807ce7:	48 c1 e0 05          	shl    rax,0x5
ffff800000807ceb:	48 01 c8             	add    rax,rcx
ffff800000807cee:	48 ba a8 ff ff ff ff 	movabs rdx,0xffffffffffffffa8
ffff800000807cf5:	ff ff ff 
ffff800000807cf8:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000807cfc:	48 89 90 6c 02 00 00 	mov    QWORD PTR [rax+0x26c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:918
    task[pid].regs.rsp=ctx_dup;
ffff800000807d03:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000807d0a:	ff ff ff 
ffff800000807d0d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807d11:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000807d14:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000807d17:	48 63 d0             	movsxd rdx,eax
ffff800000807d1a:	48 89 d0             	mov    rax,rdx
ffff800000807d1d:	48 01 c0             	add    rax,rax
ffff800000807d20:	48 01 d0             	add    rax,rdx
ffff800000807d23:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807d2a:	00 
ffff800000807d2b:	48 01 d0             	add    rax,rdx
ffff800000807d2e:	48 c1 e0 05          	shl    rax,0x5
ffff800000807d32:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
ffff800000807d36:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000807d3a:	48 89 82 9c 02 00 00 	mov    QWORD PTR [rdx+0x29c],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:919
    task[pid].tss.ists[0]=new_stkpg+PAGE_4K_SIZE;
ffff800000807d41:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000807d48:	ff ff ff 
ffff800000807d4b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807d4f:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000807d52:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000807d55:	48 63 d0             	movsxd rdx,eax
ffff800000807d58:	48 89 d0             	mov    rax,rdx
ffff800000807d5b:	48 01 c0             	add    rax,rax
ffff800000807d5e:	48 01 d0             	add    rax,rdx
ffff800000807d61:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807d68:	00 
ffff800000807d69:	48 01 d0             	add    rax,rdx
ffff800000807d6c:	48 c1 e0 05          	shl    rax,0x5
ffff800000807d70:	48 01 c8             	add    rax,rcx
ffff800000807d73:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000807d77:	48 81 c2 00 10 00 00 	add    rdx,0x1000
ffff800000807d7e:	48 89 90 1c 02 00 00 	mov    QWORD PTR [rax+0x21c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:920
    task[pid].tss.ists[1]=new_stkpg+PAGE_4K_SIZE;
ffff800000807d85:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000807d8c:	ff ff ff 
ffff800000807d8f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807d93:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000807d96:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000807d99:	48 63 d0             	movsxd rdx,eax
ffff800000807d9c:	48 89 d0             	mov    rax,rdx
ffff800000807d9f:	48 01 c0             	add    rax,rax
ffff800000807da2:	48 01 d0             	add    rax,rdx
ffff800000807da5:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807dac:	00 
ffff800000807dad:	48 01 d0             	add    rax,rdx
ffff800000807db0:	48 c1 e0 05          	shl    rax,0x5
ffff800000807db4:	48 01 c8             	add    rax,rcx
ffff800000807db7:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000807dbb:	48 81 c2 00 10 00 00 	add    rdx,0x1000
ffff800000807dc2:	48 89 90 24 02 00 00 	mov    QWORD PTR [rax+0x224],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:921
    task[pid].tss.ists[2]=new_stkpg+PAGE_4K_SIZE;
ffff800000807dc9:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000807dd0:	ff ff ff 
ffff800000807dd3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807dd7:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000807dda:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000807ddd:	48 63 d0             	movsxd rdx,eax
ffff800000807de0:	48 89 d0             	mov    rax,rdx
ffff800000807de3:	48 01 c0             	add    rax,rax
ffff800000807de6:	48 01 d0             	add    rax,rdx
ffff800000807de9:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807df0:	00 
ffff800000807df1:	48 01 d0             	add    rax,rdx
ffff800000807df4:	48 c1 e0 05          	shl    rax,0x5
ffff800000807df8:	48 01 c8             	add    rax,rcx
ffff800000807dfb:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000807dff:	48 81 c2 00 10 00 00 	add    rdx,0x1000
ffff800000807e06:	48 89 90 2c 02 00 00 	mov    QWORD PTR [rax+0x22c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:922
    task[pid].tss.ists[3]=new_stkpg+PAGE_4K_SIZE;
ffff800000807e0d:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000807e14:	ff ff ff 
ffff800000807e17:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807e1b:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000807e1e:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000807e21:	48 63 d0             	movsxd rdx,eax
ffff800000807e24:	48 89 d0             	mov    rax,rdx
ffff800000807e27:	48 01 c0             	add    rax,rax
ffff800000807e2a:	48 01 d0             	add    rax,rdx
ffff800000807e2d:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807e34:	00 
ffff800000807e35:	48 01 d0             	add    rax,rdx
ffff800000807e38:	48 c1 e0 05          	shl    rax,0x5
ffff800000807e3c:	48 01 c8             	add    rax,rcx
ffff800000807e3f:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000807e43:	48 81 c2 00 10 00 00 	add    rdx,0x1000
ffff800000807e4a:	48 89 90 34 02 00 00 	mov    QWORD PTR [rax+0x234],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:923
    task[pid].tss.ists[4]=new_stkpg+PAGE_4K_SIZE;
ffff800000807e51:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000807e58:	ff ff ff 
ffff800000807e5b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807e5f:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000807e62:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000807e65:	48 63 d0             	movsxd rdx,eax
ffff800000807e68:	48 89 d0             	mov    rax,rdx
ffff800000807e6b:	48 01 c0             	add    rax,rax
ffff800000807e6e:	48 01 d0             	add    rax,rdx
ffff800000807e71:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807e78:	00 
ffff800000807e79:	48 01 d0             	add    rax,rdx
ffff800000807e7c:	48 c1 e0 05          	shl    rax,0x5
ffff800000807e80:	48 01 c8             	add    rax,rcx
ffff800000807e83:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000807e87:	48 81 c2 00 10 00 00 	add    rdx,0x1000
ffff800000807e8e:	48 89 90 3c 02 00 00 	mov    QWORD PTR [rax+0x23c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:924
    task[pid].tss.ists[5]=new_stkpg+PAGE_4K_SIZE;
ffff800000807e95:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000807e9c:	ff ff ff 
ffff800000807e9f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807ea3:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000807ea6:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000807ea9:	48 63 d0             	movsxd rdx,eax
ffff800000807eac:	48 89 d0             	mov    rax,rdx
ffff800000807eaf:	48 01 c0             	add    rax,rax
ffff800000807eb2:	48 01 d0             	add    rax,rdx
ffff800000807eb5:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807ebc:	00 
ffff800000807ebd:	48 01 d0             	add    rax,rdx
ffff800000807ec0:	48 c1 e0 05          	shl    rax,0x5
ffff800000807ec4:	48 01 c8             	add    rax,rcx
ffff800000807ec7:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000807ecb:	48 81 c2 00 10 00 00 	add    rdx,0x1000
ffff800000807ed2:	48 89 90 44 02 00 00 	mov    QWORD PTR [rax+0x244],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:925
    task[pid].tss.ists[6]=new_stkpg+PAGE_4K_SIZE;
ffff800000807ed9:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000807ee0:	ff ff ff 
ffff800000807ee3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807ee7:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000807eea:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000807eed:	48 63 d0             	movsxd rdx,eax
ffff800000807ef0:	48 89 d0             	mov    rax,rdx
ffff800000807ef3:	48 01 c0             	add    rax,rax
ffff800000807ef6:	48 01 d0             	add    rax,rdx
ffff800000807ef9:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807f00:	00 
ffff800000807f01:	48 01 d0             	add    rax,rdx
ffff800000807f04:	48 c1 e0 05          	shl    rax,0x5
ffff800000807f08:	48 01 c8             	add    rax,rcx
ffff800000807f0b:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000807f0f:	48 81 c2 00 10 00 00 	add    rdx,0x1000
ffff800000807f16:	48 89 90 4c 02 00 00 	mov    QWORD PTR [rax+0x24c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:928

    //堆
    addr_t hp=task[pid].mem_struct.heap_top-PAGE_4K_SIZE;
ffff800000807f1d:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000807f24:	ff ff ff 
ffff800000807f27:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807f2b:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000807f2e:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000807f31:	48 63 d0             	movsxd rdx,eax
ffff800000807f34:	48 89 d0             	mov    rax,rdx
ffff800000807f37:	48 01 c0             	add    rax,rax
ffff800000807f3a:	48 01 d0             	add    rax,rdx
ffff800000807f3d:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000807f44:	00 
ffff800000807f45:	48 01 d0             	add    rax,rdx
ffff800000807f48:	48 c1 e0 05          	shl    rax,0x5
ffff800000807f4c:	48 01 c8             	add    rax,rcx
ffff800000807f4f:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff800000807f53:	48 2d 00 10 00 00    	sub    rax,0x1000
ffff800000807f59:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:929
    for(;hp>=task[pid].mem_struct.heap_base;hp-=PAGE_4K_SIZE){
ffff800000807f5d:	e9 e3 00 00 00       	jmp    ffff800000808045 <sys_fork+0xbce>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:930 (discriminator 2)
        addr_t new_hppg= pmalloc(PAGE_4K_SIZE);
ffff800000807f62:	bf 00 10 00 00       	mov    edi,0x1000
ffff800000807f67:	49 89 df             	mov    r15,rbx
ffff800000807f6a:	48 b8 83 0a ee ff ff 	movabs rax,0xffffffffffee0a83
ffff800000807f71:	ff ff ff 
ffff800000807f74:	48 01 d8             	add    rax,rbx
ffff800000807f77:	ff d0                	call   rax
ffff800000807f79:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:931 (discriminator 2)
        smmap(new_hppg,tmpla,PAGE_PRESENT|PAGE_RWX,current->pml4);
ffff800000807f7d:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff800000807f84:	ff ff ff 
ffff800000807f87:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807f8b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000807f8e:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff800000807f95:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff800000807f99:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000807f9d:	48 89 d1             	mov    rcx,rdx
ffff800000807fa0:	ba 03 00 00 00       	mov    edx,0x3
ffff800000807fa5:	48 89 c7             	mov    rdi,rax
ffff800000807fa8:	49 89 df             	mov    r15,rbx
ffff800000807fab:	48 b8 d4 f1 ed ff ff 	movabs rax,0xffffffffffedf1d4
ffff800000807fb2:	ff ff ff 
ffff800000807fb5:	48 01 d8             	add    rax,rbx
ffff800000807fb8:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:932 (discriminator 2)
        memcpy(tmpla,hp,PAGE_4K_SIZE);//把当前进程的栈空间复制到新栈里面
ffff800000807fba:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
ffff800000807fbe:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000807fc2:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000807fc7:	48 89 ce             	mov    rsi,rcx
ffff800000807fca:	48 89 c7             	mov    rdi,rax
ffff800000807fcd:	49 89 df             	mov    r15,rbx
ffff800000807fd0:	48 b8 da 1d ef ff ff 	movabs rax,0xffffffffffef1dda
ffff800000807fd7:	ff ff ff 
ffff800000807fda:	48 01 d8             	add    rax,rbx
ffff800000807fdd:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:934 (discriminator 2)
        //把新的页面映射到进程页表里
        smmap(new_hppg,hp,PAGE_PRESENT|PAGE_RWX|PAGE_FOR_ALL,task[pid].pml4);
ffff800000807fdf:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000807fe6:	ff ff ff 
ffff800000807fe9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000807fed:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000807ff0:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000807ff3:	48 63 d0             	movsxd rdx,eax
ffff800000807ff6:	48 89 d0             	mov    rax,rdx
ffff800000807ff9:	48 01 c0             	add    rax,rax
ffff800000807ffc:	48 01 d0             	add    rax,rdx
ffff800000807fff:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000808006:	00 
ffff800000808007:	48 01 d0             	add    rax,rdx
ffff80000080800a:	48 c1 e0 05          	shl    rax,0x5
ffff80000080800e:	48 01 c8             	add    rax,rcx
ffff800000808011:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff800000808018:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff80000080801c:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000808020:	48 89 d1             	mov    rcx,rdx
ffff800000808023:	ba 07 00 00 00       	mov    edx,0x7
ffff800000808028:	48 89 c7             	mov    rdi,rax
ffff80000080802b:	49 89 df             	mov    r15,rbx
ffff80000080802e:	48 b8 d4 f1 ed ff ff 	movabs rax,0xffffffffffedf1d4
ffff800000808035:	ff ff ff 
ffff800000808038:	48 01 d8             	add    rax,rbx
ffff80000080803b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:929 (discriminator 2)
    for(;hp>=task[pid].mem_struct.heap_base;hp-=PAGE_4K_SIZE){
ffff80000080803d:	48 81 6d e0 00 10 00 	sub    QWORD PTR [rbp-0x20],0x1000
ffff800000808044:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:929 (discriminator 1)
ffff800000808045:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff80000080804c:	ff ff ff 
ffff80000080804f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808053:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000808056:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000808059:	48 63 d0             	movsxd rdx,eax
ffff80000080805c:	48 89 d0             	mov    rax,rdx
ffff80000080805f:	48 01 c0             	add    rax,rax
ffff800000808062:	48 01 d0             	add    rax,rdx
ffff800000808065:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080806c:	00 
ffff80000080806d:	48 01 d0             	add    rax,rdx
ffff800000808070:	48 c1 e0 05          	shl    rax,0x5
ffff800000808074:	48 01 c8             	add    rax,rcx
ffff800000808077:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080807b:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
ffff80000080807f:	0f 83 dd fe ff ff    	jae    ffff800000807f62 <sys_fork+0xaeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:936
    }
    smmap(0,tmpla,0,current->pml4);//解除映射
ffff800000808085:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080808c:	ff ff ff 
ffff80000080808f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808093:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808096:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff80000080809d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008080a1:	48 89 d1             	mov    rcx,rdx
ffff8000008080a4:	ba 00 00 00 00       	mov    edx,0x0
ffff8000008080a9:	48 89 c6             	mov    rsi,rax
ffff8000008080ac:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008080b1:	49 89 df             	mov    r15,rbx
ffff8000008080b4:	48 b8 d4 f1 ed ff ff 	movabs rax,0xffffffffffedf1d4
ffff8000008080bb:	ff ff ff 
ffff8000008080be:	48 01 d8             	add    rax,rbx
ffff8000008080c1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:938
    //TODO 拷贝父进程的映射
    task[pid].mmaps=NULL;
ffff8000008080c3:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff8000008080ca:	ff ff ff 
ffff8000008080cd:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008080d1:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff8000008080d4:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008080d7:	48 63 d0             	movsxd rdx,eax
ffff8000008080da:	48 89 d0             	mov    rax,rdx
ffff8000008080dd:	48 01 c0             	add    rax,rax
ffff8000008080e0:	48 01 d0             	add    rax,rdx
ffff8000008080e3:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008080ea:	00 
ffff8000008080eb:	48 01 d0             	add    rax,rdx
ffff8000008080ee:	48 c1 e0 05          	shl    rax,0x5
ffff8000008080f2:	48 01 c8             	add    rax,rcx
ffff8000008080f5:	48 c7 80 34 03 00 00 	mov    QWORD PTR [rax+0x334],0x0
ffff8000008080fc:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:940
    
    task[pid].stat=TASK_READY;
ffff800000808100:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000808107:	ff ff ff 
ffff80000080810a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080810e:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000808111:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000808114:	48 63 d0             	movsxd rdx,eax
ffff800000808117:	48 89 d0             	mov    rax,rdx
ffff80000080811a:	48 01 c0             	add    rax,rax
ffff80000080811d:	48 01 d0             	add    rax,rdx
ffff800000808120:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000808127:	00 
ffff800000808128:	48 01 d0             	add    rax,rdx
ffff80000080812b:	48 c1 e0 05          	shl    rax,0x5
ffff80000080812f:	48 01 c8             	add    rax,rcx
ffff800000808132:	c7 40 18 02 00 00 00 	mov    DWORD PTR [rax+0x18],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:943
    

    sti();
ffff800000808139:	fb                   	sti    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:946
    //如果父进程没有堆，不开辟。留给load_xx函数。
    //父进程运行到这里
    return pid;
ffff80000080813a:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:947
}
ffff80000080813d:	48 83 ec 80          	sub    rsp,0xffffffffffffff80
ffff800000808141:	5b                   	pop    rbx
ffff800000808142:	41 5f                	pop    r15
ffff800000808144:	5d                   	pop    rbp
ffff800000808145:	c3                   	ret    

ffff800000808146 <release_mmap>:
release_mmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:949
//释放进程页表映射的内存，内核空间除外。
void release_mmap(struct process* p){
ffff800000808146:	f3 0f 1e fa          	endbr64 
ffff80000080814a:	55                   	push   rbp
ffff80000080814b:	48 89 e5             	mov    rbp,rsp
ffff80000080814e:	41 57                	push   r15
ffff800000808150:	53                   	push   rbx
ffff800000808151:	48 83 ec 50          	sub    rsp,0x50
ffff800000808155:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000808155 <release_mmap+0xf>
ffff80000080815c:	49 bb a3 aa 11 00 00 	movabs r11,0x11aaa3
ffff800000808163:	00 00 00 
ffff800000808166:	4c 01 db             	add    rbx,r11
ffff800000808169:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:950
    page_item * pml4p=p->pml4;
ffff80000080816d:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000808171:	48 8b 80 e0 00 00 00 	mov    rax,QWORD PTR [rax+0xe0]
ffff800000808178:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:952
    //复制pdpt
    page_item *pml4e= pml4p;
ffff80000080817c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000808180:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:953
    for(int i=0;i<256;i++)//高地址不释放（内核空间）
ffff800000808184:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff80000080818b:	e9 40 03 00 00       	jmp    ffff8000008084d0 <release_mmap+0x38a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:955
    {
        if(pml4e[i]&PAGE_PRESENT){
ffff800000808190:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000808193:	48 98                	cdqe   
ffff800000808195:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080819c:	00 
ffff80000080819d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008081a1:	48 01 d0             	add    rax,rdx
ffff8000008081a4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008081a7:	83 e0 01             	and    eax,0x1
ffff8000008081aa:	48 85 c0             	test   rax,rax
ffff8000008081ad:	0f 84 19 03 00 00    	je     ffff8000008084cc <release_mmap+0x386>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:956
            page_item *pdpte=pml4e[i]&PAGE_4K_MASK|KNL_BASE;
ffff8000008081b3:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008081b6:	48 98                	cdqe   
ffff8000008081b8:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008081bf:	00 
ffff8000008081c0:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008081c4:	48 01 d0             	add    rax,rdx
ffff8000008081c7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008081ca:	48 ba 00 f0 ff ff ff 	movabs rdx,0x7ffffffff000
ffff8000008081d1:	7f 00 00 
ffff8000008081d4:	48 21 c2             	and    rdx,rax
ffff8000008081d7:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff8000008081de:	80 ff ff 
ffff8000008081e1:	48 09 d0             	or     rax,rdx
ffff8000008081e4:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:957
            for(int j=0;j<512;j++)
ffff8000008081e8:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff8000008081ef:	e9 85 02 00 00       	jmp    ffff800000808479 <release_mmap+0x333>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:959
            {
                if(pdpte[j]&PAGE_PRESENT&&!(pdpte[j]&PDPTE_1GB)){
ffff8000008081f4:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff8000008081f7:	48 98                	cdqe   
ffff8000008081f9:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000808200:	00 
ffff800000808201:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000808205:	48 01 d0             	add    rax,rdx
ffff800000808208:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080820b:	83 e0 01             	and    eax,0x1
ffff80000080820e:	48 85 c0             	test   rax,rax
ffff800000808211:	0f 84 5e 02 00 00    	je     ffff800000808475 <release_mmap+0x32f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:959 (discriminator 1)
ffff800000808217:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080821a:	48 98                	cdqe   
ffff80000080821c:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000808223:	00 
ffff800000808224:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000808228:	48 01 d0             	add    rax,rdx
ffff80000080822b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080822e:	25 80 00 00 00       	and    eax,0x80
ffff800000808233:	48 85 c0             	test   rax,rax
ffff800000808236:	0f 85 39 02 00 00    	jne    ffff800000808475 <release_mmap+0x32f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:960
                    page_item *pde=pdpte[j]&PAGE_4K_MASK|KNL_BASE;
ffff80000080823c:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080823f:	48 98                	cdqe   
ffff800000808241:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000808248:	00 
ffff800000808249:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080824d:	48 01 d0             	add    rax,rdx
ffff800000808250:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808253:	48 ba 00 f0 ff ff ff 	movabs rdx,0x7ffffffff000
ffff80000080825a:	7f 00 00 
ffff80000080825d:	48 21 c2             	and    rdx,rax
ffff800000808260:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff800000808267:	80 ff ff 
ffff80000080826a:	48 09 d0             	or     rax,rdx
ffff80000080826d:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:961
                    for(int k=0;k<512;k++)
ffff800000808271:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff800000808278:	e9 a5 01 00 00       	jmp    ffff800000808422 <release_mmap+0x2dc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:963
                    {
                        if(pde[k]&PAGE_PRESENT&&!(pde[k] & PDE_2MB)){
ffff80000080827d:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000808280:	48 98                	cdqe   
ffff800000808282:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000808289:	00 
ffff80000080828a:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080828e:	48 01 d0             	add    rax,rdx
ffff800000808291:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808294:	83 e0 01             	and    eax,0x1
ffff800000808297:	48 85 c0             	test   rax,rax
ffff80000080829a:	0f 84 09 01 00 00    	je     ffff8000008083a9 <release_mmap+0x263>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:963 (discriminator 1)
ffff8000008082a0:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008082a3:	48 98                	cdqe   
ffff8000008082a5:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008082ac:	00 
ffff8000008082ad:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008082b1:	48 01 d0             	add    rax,rdx
ffff8000008082b4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008082b7:	25 80 00 00 00       	and    eax,0x80
ffff8000008082bc:	48 85 c0             	test   rax,rax
ffff8000008082bf:	0f 85 e4 00 00 00    	jne    ffff8000008083a9 <release_mmap+0x263>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:964
                            page_item *pte=pde[k]&PAGE_4K_MASK|KNL_BASE;
ffff8000008082c5:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008082c8:	48 98                	cdqe   
ffff8000008082ca:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008082d1:	00 
ffff8000008082d2:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008082d6:	48 01 d0             	add    rax,rdx
ffff8000008082d9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008082dc:	48 ba 00 f0 ff ff ff 	movabs rdx,0x7ffffffff000
ffff8000008082e3:	7f 00 00 
ffff8000008082e6:	48 21 c2             	and    rdx,rax
ffff8000008082e9:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff8000008082f0:	80 ff ff 
ffff8000008082f3:	48 09 d0             	or     rax,rdx
ffff8000008082f6:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:965
                            for(int l=0;l<512;l++){
ffff8000008082fa:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff800000808301:	eb 55                	jmp    ffff800000808358 <release_mmap+0x212>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:966
                                if(pte[l]&PAGE_PRESENT){
ffff800000808303:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000808306:	48 98                	cdqe   
ffff800000808308:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080830f:	00 
ffff800000808310:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000808314:	48 01 d0             	add    rax,rdx
ffff800000808317:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080831a:	83 e0 01             	and    eax,0x1
ffff80000080831d:	48 85 c0             	test   rax,rax
ffff800000808320:	74 32                	je     ffff800000808354 <release_mmap+0x20e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:968
                                    //释放申请的物理内存
                                    free_page(pte[l]&PAGE_4K_MASK);
ffff800000808322:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000808325:	48 98                	cdqe   
ffff800000808327:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080832e:	00 
ffff80000080832f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000808333:	48 01 d0             	add    rax,rdx
ffff800000808336:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808339:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
ffff80000080833f:	48 89 c7             	mov    rdi,rax
ffff800000808342:	49 89 df             	mov    r15,rbx
ffff800000808345:	48 b8 7b 0c ee ff ff 	movabs rax,0xffffffffffee0c7b
ffff80000080834c:	ff ff ff 
ffff80000080834f:	48 01 d8             	add    rax,rbx
ffff800000808352:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:965 (discriminator 2)
                            for(int l=0;l<512;l++){
ffff800000808354:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:965 (discriminator 1)
ffff800000808358:	81 7d e0 ff 01 00 00 	cmp    DWORD PTR [rbp-0x20],0x1ff
ffff80000080835f:	7e a2                	jle    ffff800000808303 <release_mmap+0x1bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:972
                                }
                            }
                            //里面的项释放完了，这一项指向的vmalloc内存可以释放了
                            kmfree(pde[k] & PAGE_4K_MASK|KNL_BASE);
ffff800000808361:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000808364:	48 98                	cdqe   
ffff800000808366:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080836d:	00 
ffff80000080836e:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000808372:	48 01 d0             	add    rax,rdx
ffff800000808375:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808378:	48 ba 00 f0 ff ff ff 	movabs rdx,0x7ffffffff000
ffff80000080837f:	7f 00 00 
ffff800000808382:	48 21 c2             	and    rdx,rax
ffff800000808385:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff80000080838c:	80 ff ff 
ffff80000080838f:	48 09 d0             	or     rax,rdx
ffff800000808392:	48 89 c7             	mov    rdi,rax
ffff800000808395:	49 89 df             	mov    r15,rbx
ffff800000808398:	48 b8 6f 09 ee ff ff 	movabs rax,0xffffffffffee096f
ffff80000080839f:	ff ff ff 
ffff8000008083a2:	48 01 d8             	add    rax,rbx
ffff8000008083a5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:963
                        if(pde[k]&PAGE_PRESENT&&!(pde[k] & PDE_2MB)){
ffff8000008083a7:	eb 75                	jmp    ffff80000080841e <release_mmap+0x2d8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:973
                        }else if((pde[k]&PAGE_PRESENT)&&(pde[k] & PDE_2MB)){
ffff8000008083a9:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008083ac:	48 98                	cdqe   
ffff8000008083ae:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008083b5:	00 
ffff8000008083b6:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008083ba:	48 01 d0             	add    rax,rdx
ffff8000008083bd:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008083c0:	83 e0 01             	and    eax,0x1
ffff8000008083c3:	48 85 c0             	test   rax,rax
ffff8000008083c6:	74 56                	je     ffff80000080841e <release_mmap+0x2d8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:973 (discriminator 1)
ffff8000008083c8:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008083cb:	48 98                	cdqe   
ffff8000008083cd:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008083d4:	00 
ffff8000008083d5:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008083d9:	48 01 d0             	add    rax,rdx
ffff8000008083dc:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008083df:	25 80 00 00 00       	and    eax,0x80
ffff8000008083e4:	48 85 c0             	test   rax,rax
ffff8000008083e7:	74 35                	je     ffff80000080841e <release_mmap+0x2d8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:975
                            //释放2MB页
                            free_pages_at(pde[k]&PAGE_4K_MASK,512);
ffff8000008083e9:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008083ec:	48 98                	cdqe   
ffff8000008083ee:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008083f5:	00 
ffff8000008083f6:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008083fa:	48 01 d0             	add    rax,rdx
ffff8000008083fd:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808400:	25 00 f0 ff ff       	and    eax,0xfffff000
ffff800000808405:	be 00 02 00 00       	mov    esi,0x200
ffff80000080840a:	89 c7                	mov    edi,eax
ffff80000080840c:	49 89 df             	mov    r15,rbx
ffff80000080840f:	48 b8 2d 0d ee ff ff 	movabs rax,0xffffffffffee0d2d
ffff800000808416:	ff ff ff 
ffff800000808419:	48 01 d8             	add    rax,rbx
ffff80000080841c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:961 (discriminator 2)
                    for(int k=0;k<512;k++)
ffff80000080841e:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:961 (discriminator 1)
ffff800000808422:	81 7d e4 ff 01 00 00 	cmp    DWORD PTR [rbp-0x1c],0x1ff
ffff800000808429:	0f 8e 4e fe ff ff    	jle    ffff80000080827d <release_mmap+0x137>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:979
                        }
                    }
                    //这一页pde的内容释放完了，这一项指向的vmalloc可以释放了
                    kmfree(pdpte[j] & PAGE_4K_MASK|KNL_BASE);
ffff80000080842f:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000808432:	48 98                	cdqe   
ffff800000808434:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080843b:	00 
ffff80000080843c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000808440:	48 01 d0             	add    rax,rdx
ffff800000808443:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808446:	48 ba 00 f0 ff ff ff 	movabs rdx,0x7ffffffff000
ffff80000080844d:	7f 00 00 
ffff800000808450:	48 21 c2             	and    rdx,rax
ffff800000808453:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff80000080845a:	80 ff ff 
ffff80000080845d:	48 09 d0             	or     rax,rdx
ffff800000808460:	48 89 c7             	mov    rdi,rax
ffff800000808463:	49 89 df             	mov    r15,rbx
ffff800000808466:	48 b8 6f 09 ee ff ff 	movabs rax,0xffffffffffee096f
ffff80000080846d:	ff ff ff 
ffff800000808470:	48 01 d8             	add    rax,rbx
ffff800000808473:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:957 (discriminator 2)
            for(int j=0;j<512;j++)
ffff800000808475:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:957 (discriminator 1)
ffff800000808479:	81 7d e8 ff 01 00 00 	cmp    DWORD PTR [rbp-0x18],0x1ff
ffff800000808480:	0f 8e 6e fd ff ff    	jle    ffff8000008081f4 <release_mmap+0xae>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:984
                }//1GB先不写，目前还没有初始化之后动态申请1GB页的

            }
            //这一页pdpte的内容释放完了，这一项指向的vmalloc可以释放了
            kmfree(pml4e[i] & PAGE_4K_MASK|KNL_BASE);
ffff800000808486:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000808489:	48 98                	cdqe   
ffff80000080848b:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000808492:	00 
ffff800000808493:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000808497:	48 01 d0             	add    rax,rdx
ffff80000080849a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080849d:	48 ba 00 f0 ff ff ff 	movabs rdx,0x7ffffffff000
ffff8000008084a4:	7f 00 00 
ffff8000008084a7:	48 21 c2             	and    rdx,rax
ffff8000008084aa:	48 b8 00 00 00 00 00 	movabs rax,0xffff800000000000
ffff8000008084b1:	80 ff ff 
ffff8000008084b4:	48 09 d0             	or     rax,rdx
ffff8000008084b7:	48 89 c7             	mov    rdi,rax
ffff8000008084ba:	49 89 df             	mov    r15,rbx
ffff8000008084bd:	48 b8 6f 09 ee ff ff 	movabs rax,0xffffffffffee096f
ffff8000008084c4:	ff ff ff 
ffff8000008084c7:	48 01 d8             	add    rax,rbx
ffff8000008084ca:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:953 (discriminator 2)
    for(int i=0;i<256;i++)//高地址不释放（内核空间）
ffff8000008084cc:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:953 (discriminator 1)
ffff8000008084d0:	81 7d ec ff 00 00 00 	cmp    DWORD PTR [rbp-0x14],0xff
ffff8000008084d7:	0f 8e b3 fc ff ff    	jle    ffff800000808190 <release_mmap+0x4a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:987
        }
    }
}
ffff8000008084dd:	90                   	nop
ffff8000008084de:	90                   	nop
ffff8000008084df:	48 83 c4 50          	add    rsp,0x50
ffff8000008084e3:	5b                   	pop    rbx
ffff8000008084e4:	41 5f                	pop    r15
ffff8000008084e6:	5d                   	pop    rbp
ffff8000008084e7:	c3                   	ret    

ffff8000008084e8 <copy_mmap>:
copy_mmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:988
void copy_mmap(struct process* from, struct process *to){
ffff8000008084e8:	f3 0f 1e fa          	endbr64 
ffff8000008084ec:	55                   	push   rbp
ffff8000008084ed:	48 89 e5             	mov    rbp,rsp
ffff8000008084f0:	41 57                	push   r15
ffff8000008084f2:	53                   	push   rbx
ffff8000008084f3:	48 83 ec 70          	sub    rsp,0x70
ffff8000008084f7:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008084f7 <copy_mmap+0xf>
ffff8000008084fe:	49 bb 01 a7 11 00 00 	movabs r11,0x11a701
ffff800000808505:	00 00 00 
ffff800000808508:	4c 01 db             	add    rbx,r11
ffff80000080850b:	48 89 7d 88          	mov    QWORD PTR [rbp-0x78],rdi
ffff80000080850f:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:989
    page_item * pml4p= kmalloc(0,PAGE_4K_SIZE);
ffff800000808513:	be 00 10 00 00       	mov    esi,0x1000
ffff800000808518:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080851d:	49 89 df             	mov    r15,rbx
ffff800000808520:	48 b8 ce 07 ee ff ff 	movabs rax,0xffffffffffee07ce
ffff800000808527:	ff ff ff 
ffff80000080852a:	48 01 d8             	add    rax,rbx
ffff80000080852d:	ff d0                	call   rax
ffff80000080852f:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:990
    memcpy(pml4p, (unsigned char *) from->pml4, PAGE_4K_SIZE);//复制pml4
ffff800000808533:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000808537:	48 8b 88 e0 00 00 00 	mov    rcx,QWORD PTR [rax+0xe0]
ffff80000080853e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000808542:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000808547:	48 89 ce             	mov    rsi,rcx
ffff80000080854a:	48 89 c7             	mov    rdi,rax
ffff80000080854d:	49 89 df             	mov    r15,rbx
ffff800000808550:	48 b8 da 1d ef ff ff 	movabs rax,0xffffffffffef1dda
ffff800000808557:	ff ff ff 
ffff80000080855a:	48 01 d8             	add    rax,rbx
ffff80000080855d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:991
    to->regs.cr3=(unsigned long)pml4p&~KNL_BASE;
ffff80000080855f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000808563:	48 ba ff ff ff ff ff 	movabs rdx,0x7fffffffffff
ffff80000080856a:	7f 00 00 
ffff80000080856d:	48 21 c2             	and    rdx,rax
ffff800000808570:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000808574:	48 89 90 64 02 00 00 	mov    QWORD PTR [rax+0x264],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:992
    to->pml4=pml4p;
ffff80000080857b:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080857f:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000808583:	48 89 90 e0 00 00 00 	mov    QWORD PTR [rax+0xe0],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:995
    //复制pdpt

    page_item *pml4e= pml4p;
ffff80000080858a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080858e:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:996
    for(int i=0;i<512;i++)
ffff800000808592:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000808599:	e9 1d 03 00 00       	jmp    ffff8000008088bb <copy_mmap+0x3d3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:998
    {
        if((pml4e[i]&PAGE_PRESENT)==0)
ffff80000080859e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008085a1:	48 98                	cdqe   
ffff8000008085a3:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008085aa:	00 
ffff8000008085ab:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008085af:	48 01 d0             	add    rax,rdx
ffff8000008085b2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008085b5:	83 e0 01             	and    eax,0x1
ffff8000008085b8:	48 85 c0             	test   rax,rax
ffff8000008085bb:	0f 84 f5 02 00 00    	je     ffff8000008088b6 <copy_mmap+0x3ce>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1000
            continue;
        addr_t old_data=pml4e[i];//旧的数据，里面保存了属性和要拷贝的数据的地址
ffff8000008085c1:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008085c4:	48 98                	cdqe   
ffff8000008085c6:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008085cd:	00 
ffff8000008085ce:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008085d2:	48 01 d0             	add    rax,rdx
ffff8000008085d5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008085d8:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1001
        addr_t m4=kmalloc(0,PAGE_4K_SIZE);
ffff8000008085dc:	be 00 10 00 00       	mov    esi,0x1000
ffff8000008085e1:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008085e6:	49 89 df             	mov    r15,rbx
ffff8000008085e9:	48 b8 ce 07 ee ff ff 	movabs rax,0xffffffffffee07ce
ffff8000008085f0:	ff ff ff 
ffff8000008085f3:	48 01 d8             	add    rax,rbx
ffff8000008085f6:	ff d0                	call   rax
ffff8000008085f8:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1002
        pml4e[i]= (m4&~KNL_BASE) | (old_data & ~PAGE_4K_MASK);
ffff8000008085fc:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffff
ffff800000808603:	7f 00 00 
ffff800000808606:	48 23 45 c0          	and    rax,QWORD PTR [rbp-0x40]
ffff80000080860a:	48 89 c2             	mov    rdx,rax
ffff80000080860d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000808611:	25 ff 0f 00 00       	and    eax,0xfff
ffff800000808616:	48 89 c1             	mov    rcx,rax
ffff800000808619:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080861c:	48 98                	cdqe   
ffff80000080861e:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
ffff800000808625:	00 
ffff800000808626:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080862a:	48 01 f0             	add    rax,rsi
ffff80000080862d:	48 09 ca             	or     rdx,rcx
ffff800000808630:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1003
        memcpy((unsigned char *) m4, old_data & PAGE_4K_MASK | KNL_BASE, PAGE_4K_SIZE);//把老的数据拷贝到新的页面里
ffff800000808633:	48 b8 00 f0 ff ff ff 	movabs rax,0x7ffffffff000
ffff80000080863a:	7f 00 00 
ffff80000080863d:	48 23 45 c8          	and    rax,QWORD PTR [rbp-0x38]
ffff800000808641:	48 ba 00 00 00 00 00 	movabs rdx,0xffff800000000000
ffff800000808648:	80 ff ff 
ffff80000080864b:	48 09 d0             	or     rax,rdx
ffff80000080864e:	48 89 c1             	mov    rcx,rax
ffff800000808651:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000808655:	ba 00 10 00 00       	mov    edx,0x1000
ffff80000080865a:	48 89 ce             	mov    rsi,rcx
ffff80000080865d:	48 89 c7             	mov    rdi,rax
ffff800000808660:	49 89 df             	mov    r15,rbx
ffff800000808663:	48 b8 da 1d ef ff ff 	movabs rax,0xffffffffffef1dda
ffff80000080866a:	ff ff ff 
ffff80000080866d:	48 01 d8             	add    rax,rbx
ffff800000808670:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1004
        page_item *pdpte= (page_item *) m4;
ffff800000808672:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000808676:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1005
        for(int j=0;j<512;j++)
ffff80000080867a:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff800000808681:	e9 21 02 00 00       	jmp    ffff8000008088a7 <copy_mmap+0x3bf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1007
        {
            if((pdpte[j]&PAGE_PRESENT)==0||(pdpte[j]&PDPTE_1GB)!=0)
ffff800000808686:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000808689:	48 98                	cdqe   
ffff80000080868b:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000808692:	00 
ffff800000808693:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000808697:	48 01 d0             	add    rax,rdx
ffff80000080869a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080869d:	83 e0 01             	and    eax,0x1
ffff8000008086a0:	48 85 c0             	test   rax,rax
ffff8000008086a3:	0f 84 f9 01 00 00    	je     ffff8000008088a2 <copy_mmap+0x3ba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1007 (discriminator 2)
ffff8000008086a9:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff8000008086ac:	48 98                	cdqe   
ffff8000008086ae:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008086b5:	00 
ffff8000008086b6:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008086ba:	48 01 d0             	add    rax,rdx
ffff8000008086bd:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008086c0:	25 80 00 00 00       	and    eax,0x80
ffff8000008086c5:	48 85 c0             	test   rax,rax
ffff8000008086c8:	0f 85 d4 01 00 00    	jne    ffff8000008088a2 <copy_mmap+0x3ba>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1009
                continue;
            addr_t old_data2=pdpte[j];//旧的数据，里面保存了属性和要拷贝的数据的地址
ffff8000008086ce:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff8000008086d1:	48 98                	cdqe   
ffff8000008086d3:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008086da:	00 
ffff8000008086db:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008086df:	48 01 d0             	add    rax,rdx
ffff8000008086e2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008086e5:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1010
            addr_t m3=kmalloc(0,PAGE_4K_SIZE);
ffff8000008086e9:	be 00 10 00 00       	mov    esi,0x1000
ffff8000008086ee:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008086f3:	49 89 df             	mov    r15,rbx
ffff8000008086f6:	48 b8 ce 07 ee ff ff 	movabs rax,0xffffffffffee07ce
ffff8000008086fd:	ff ff ff 
ffff800000808700:	48 01 d8             	add    rax,rbx
ffff800000808703:	ff d0                	call   rax
ffff800000808705:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1011
            pdpte[j]= (m3&~KNL_BASE) | (old_data2 & ~PAGE_4K_MASK);
ffff800000808709:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffff
ffff800000808710:	7f 00 00 
ffff800000808713:	48 23 45 a8          	and    rax,QWORD PTR [rbp-0x58]
ffff800000808717:	48 89 c2             	mov    rdx,rax
ffff80000080871a:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080871e:	25 ff 0f 00 00       	and    eax,0xfff
ffff800000808723:	48 89 c1             	mov    rcx,rax
ffff800000808726:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000808729:	48 98                	cdqe   
ffff80000080872b:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
ffff800000808732:	00 
ffff800000808733:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000808737:	48 01 f0             	add    rax,rsi
ffff80000080873a:	48 09 ca             	or     rdx,rcx
ffff80000080873d:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1012
            memcpy((unsigned char *) m3, old_data2 & PAGE_4K_MASK | KNL_BASE, PAGE_4K_SIZE);//把老的数据拷贝到新的页面里
ffff800000808740:	48 b8 00 f0 ff ff ff 	movabs rax,0x7ffffffff000
ffff800000808747:	7f 00 00 
ffff80000080874a:	48 23 45 b0          	and    rax,QWORD PTR [rbp-0x50]
ffff80000080874e:	48 ba 00 00 00 00 00 	movabs rdx,0xffff800000000000
ffff800000808755:	80 ff ff 
ffff800000808758:	48 09 d0             	or     rax,rdx
ffff80000080875b:	48 89 c1             	mov    rcx,rax
ffff80000080875e:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000808762:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000808767:	48 89 ce             	mov    rsi,rcx
ffff80000080876a:	48 89 c7             	mov    rdi,rax
ffff80000080876d:	49 89 df             	mov    r15,rbx
ffff800000808770:	48 b8 da 1d ef ff ff 	movabs rax,0xffffffffffef1dda
ffff800000808777:	ff ff ff 
ffff80000080877a:	48 01 d8             	add    rax,rbx
ffff80000080877d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1013
            page_item *pde= (page_item *) m3;
ffff80000080877f:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000808783:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1014
            for(int k=0;k<512;k++)
ffff800000808787:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff80000080878e:	e9 00 01 00 00       	jmp    ffff800000808893 <copy_mmap+0x3ab>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1016
            {
                if((pde[k]&PAGE_PRESENT)==0||(pde[k]&PDE_2MB)!=0)
ffff800000808793:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000808796:	48 98                	cdqe   
ffff800000808798:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080879f:	00 
ffff8000008087a0:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff8000008087a4:	48 01 d0             	add    rax,rdx
ffff8000008087a7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008087aa:	83 e0 01             	and    eax,0x1
ffff8000008087ad:	48 85 c0             	test   rax,rax
ffff8000008087b0:	0f 84 d8 00 00 00    	je     ffff80000080888e <copy_mmap+0x3a6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1016 (discriminator 2)
ffff8000008087b6:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008087b9:	48 98                	cdqe   
ffff8000008087bb:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008087c2:	00 
ffff8000008087c3:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff8000008087c7:	48 01 d0             	add    rax,rdx
ffff8000008087ca:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008087cd:	25 80 00 00 00       	and    eax,0x80
ffff8000008087d2:	48 85 c0             	test   rax,rax
ffff8000008087d5:	0f 85 b3 00 00 00    	jne    ffff80000080888e <copy_mmap+0x3a6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1018
                    continue;
                addr_t old_data3=pde[k];//旧的数据，里面保存了属性和要拷贝的数据的地址
ffff8000008087db:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008087de:	48 98                	cdqe   
ffff8000008087e0:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008087e7:	00 
ffff8000008087e8:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff8000008087ec:	48 01 d0             	add    rax,rdx
ffff8000008087ef:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008087f2:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1019
                addr_t m2=kmalloc(0,PAGE_4K_SIZE);
ffff8000008087f6:	be 00 10 00 00       	mov    esi,0x1000
ffff8000008087fb:	bf 00 00 00 00       	mov    edi,0x0
ffff800000808800:	49 89 df             	mov    r15,rbx
ffff800000808803:	48 b8 ce 07 ee ff ff 	movabs rax,0xffffffffffee07ce
ffff80000080880a:	ff ff ff 
ffff80000080880d:	48 01 d8             	add    rax,rbx
ffff800000808810:	ff d0                	call   rax
ffff800000808812:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1020
                pde[k]= (m2&~KNL_BASE) | (old_data3 & ~PAGE_4K_MASK);
ffff800000808816:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffff
ffff80000080881d:	7f 00 00 
ffff800000808820:	48 23 45 90          	and    rax,QWORD PTR [rbp-0x70]
ffff800000808824:	48 89 c2             	mov    rdx,rax
ffff800000808827:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080882b:	25 ff 0f 00 00       	and    eax,0xfff
ffff800000808830:	48 89 c1             	mov    rcx,rax
ffff800000808833:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000808836:	48 98                	cdqe   
ffff800000808838:	48 8d 34 c5 00 00 00 	lea    rsi,[rax*8+0x0]
ffff80000080883f:	00 
ffff800000808840:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000808844:	48 01 f0             	add    rax,rsi
ffff800000808847:	48 09 ca             	or     rdx,rcx
ffff80000080884a:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1021
                memcpy((unsigned char *) m2, old_data3 & PAGE_4K_MASK | KNL_BASE, PAGE_4K_SIZE);//把老的数据拷贝到新的页面里
ffff80000080884d:	48 b8 00 f0 ff ff ff 	movabs rax,0x7ffffffff000
ffff800000808854:	7f 00 00 
ffff800000808857:	48 23 45 98          	and    rax,QWORD PTR [rbp-0x68]
ffff80000080885b:	48 ba 00 00 00 00 00 	movabs rdx,0xffff800000000000
ffff800000808862:	80 ff ff 
ffff800000808865:	48 09 d0             	or     rax,rdx
ffff800000808868:	48 89 c1             	mov    rcx,rax
ffff80000080886b:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080886f:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000808874:	48 89 ce             	mov    rsi,rcx
ffff800000808877:	48 89 c7             	mov    rdi,rax
ffff80000080887a:	49 89 df             	mov    r15,rbx
ffff80000080887d:	48 b8 da 1d ef ff ff 	movabs rax,0xffffffffffef1dda
ffff800000808884:	ff ff ff 
ffff800000808887:	48 01 d8             	add    rax,rbx
ffff80000080888a:	ff d0                	call   rax
ffff80000080888c:	eb 01                	jmp    ffff80000080888f <copy_mmap+0x3a7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1017
                    continue;
ffff80000080888e:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1014 (discriminator 2)
            for(int k=0;k<512;k++)
ffff80000080888f:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1014 (discriminator 1)
ffff800000808893:	81 7d e4 ff 01 00 00 	cmp    DWORD PTR [rbp-0x1c],0x1ff
ffff80000080889a:	0f 8e f3 fe ff ff    	jle    ffff800000808793 <copy_mmap+0x2ab>
ffff8000008088a0:	eb 01                	jmp    ffff8000008088a3 <copy_mmap+0x3bb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1008
                continue;
ffff8000008088a2:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1005 (discriminator 2)
        for(int j=0;j<512;j++)
ffff8000008088a3:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1005 (discriminator 1)
ffff8000008088a7:	81 7d e8 ff 01 00 00 	cmp    DWORD PTR [rbp-0x18],0x1ff
ffff8000008088ae:	0f 8e d2 fd ff ff    	jle    ffff800000808686 <copy_mmap+0x19e>
ffff8000008088b4:	eb 01                	jmp    ffff8000008088b7 <copy_mmap+0x3cf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:999
            continue;
ffff8000008088b6:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:996 (discriminator 2)
    for(int i=0;i<512;i++)
ffff8000008088b7:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:996 (discriminator 1)
ffff8000008088bb:	81 7d ec ff 01 00 00 	cmp    DWORD PTR [rbp-0x14],0x1ff
ffff8000008088c2:	0f 8e d6 fc ff ff    	jle    ffff80000080859e <copy_mmap+0xb6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1028
            }

        }

    }
}
ffff8000008088c8:	90                   	nop
ffff8000008088c9:	90                   	nop
ffff8000008088ca:	48 83 c4 70          	add    rsp,0x70
ffff8000008088ce:	5b                   	pop    rbx
ffff8000008088cf:	41 5f                	pop    r15
ffff8000008088d1:	5d                   	pop    rbp
ffff8000008088d2:	c3                   	ret    

ffff8000008088d3 <chk_mmap>:
chk_mmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1030

int chk_mmap(off_t base, size_t mem_size){
ffff8000008088d3:	f3 0f 1e fa          	endbr64 
ffff8000008088d7:	55                   	push   rbp
ffff8000008088d8:	48 89 e5             	mov    rbp,rsp
ffff8000008088db:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008088db <chk_mmap+0x8>
ffff8000008088e2:	49 bb 1d a3 11 00 00 	movabs r11,0x11a31d
ffff8000008088e9:	00 00 00 
ffff8000008088ec:	4c 01 d8             	add    rax,r11
ffff8000008088ef:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff8000008088f3:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1031
    mmap_struct* mp=current->mmaps;
ffff8000008088f7:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff8000008088fe:	ff ff ff 
ffff800000808901:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000808905:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808908:	48 8b 80 34 03 00 00 	mov    rax,QWORD PTR [rax+0x334]
ffff80000080890f:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1032
    for (; mp; mp=mp->node.next->data)
ffff800000808913:	eb 46                	jmp    ffff80000080895b <chk_mmap+0x88>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1034
    {
        if(mp->base<=base&&mp->base+mp->len>=base+mem_size)return 0;
ffff800000808915:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000808919:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080891c:	48 39 45 e8          	cmp    QWORD PTR [rbp-0x18],rax
ffff800000808920:	72 29                	jb     ffff80000080894b <chk_mmap+0x78>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1034 (discriminator 1)
ffff800000808922:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000808926:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000808929:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080892d:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000808931:	48 01 c2             	add    rdx,rax
ffff800000808934:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff800000808938:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080893c:	48 01 c8             	add    rax,rcx
ffff80000080893f:	48 39 c2             	cmp    rdx,rax
ffff800000808942:	72 07                	jb     ffff80000080894b <chk_mmap+0x78>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1034 (discriminator 2)
ffff800000808944:	b8 00 00 00 00       	mov    eax,0x0
ffff800000808949:	eb 1c                	jmp    ffff800000808967 <chk_mmap+0x94>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1032
    for (; mp; mp=mp->node.next->data)
ffff80000080894b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080894f:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000808953:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000808957:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1032 (discriminator 1)
ffff80000080895b:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffff800000808960:	75 b3                	jne    ffff800000808915 <chk_mmap+0x42>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1036
    }
    return 1;
ffff800000808962:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1038
    
}
ffff800000808967:	5d                   	pop    rbp
ffff800000808968:	c3                   	ret    

ffff800000808969 <chk_mtable>:
chk_mtable():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1043
/// @brief 查看当前进程下相应内存页表是否已经被填写。
/// @param base 
/// @param mem_size 
/// @return 
int chk_mtable(off_t base, size_t mem_size){
ffff800000808969:	f3 0f 1e fa          	endbr64 
ffff80000080896d:	55                   	push   rbp
ffff80000080896e:	48 89 e5             	mov    rbp,rsp
ffff800000808971:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000808971 <chk_mtable+0x8>
ffff800000808978:	49 bb 87 a2 11 00 00 	movabs r11,0x11a287
ffff80000080897f:	00 00 00 
ffff800000808982:	4c 01 d8             	add    rax,r11
ffff800000808985:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000808989:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1045
    size_t nr_pte;
    size_t ndx_pml4=0,ndx_pdpt=0,ndx_pd=0,ndx_pt=0;
ffff80000080898d:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffff800000808994:	00 
ffff800000808995:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080899c:	00 
ffff80000080899d:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff8000008089a4:	00 
ffff8000008089a5:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff8000008089ac:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1046
    page_item *pml4e= current->pml4;
ffff8000008089ad:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff8000008089b4:	ff ff ff 
ffff8000008089b7:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff8000008089bb:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008089be:	48 8b 80 e0 00 00 00 	mov    rax,QWORD PTR [rax+0xe0]
ffff8000008089c5:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1047
    nr_pte=  (mem_size-1+PAGE_4K_SIZE)/PAGE_4K_SIZE;
ffff8000008089c9:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008089cd:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff8000008089d3:	48 c1 e8 0c          	shr    rax,0xc
ffff8000008089d7:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1048
    ndx_pt=  base/PAGE_4K_SIZE;
ffff8000008089db:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008089df:	48 c1 e8 0c          	shr    rax,0xc
ffff8000008089e3:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1049
    ndx_pd=  ndx_pt/512%512;
ffff8000008089e7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008089eb:	48 c1 e8 09          	shr    rax,0x9
ffff8000008089ef:	25 ff 01 00 00       	and    eax,0x1ff
ffff8000008089f4:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1050
    ndx_pdpt=ndx_pd/512%512;
ffff8000008089f8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008089fc:	48 c1 e8 09          	shr    rax,0x9
ffff800000808a00:	25 ff 01 00 00       	and    eax,0x1ff
ffff800000808a05:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1051
    ndx_pml4=ndx_pdpt/512%512;
ffff800000808a09:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000808a0d:	48 c1 e8 09          	shr    rax,0x9
ffff800000808a11:	25 ff 01 00 00       	and    eax,0x1ff
ffff800000808a16:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1052
    while (nr_pte)
ffff800000808a1a:	eb 25                	jmp    ffff800000808a41 <chk_mtable+0xd8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1054
    {
        if(ndx_pdpt==512){
ffff800000808a1c:	48 81 7d f8 00 02 00 	cmp    QWORD PTR [rbp-0x8],0x200
ffff800000808a23:	00 
ffff800000808a24:	75 0d                	jne    ffff800000808a33 <chk_mtable+0xca>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1055
            ndx_pml4++;
ffff800000808a26:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1056
            ndx_pdpt=0;
ffff800000808a2b:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff800000808a32:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1059 (discriminator 1)
        }
        if(pml4e[ndx_pml4]%PAGE_PRESENT==0){
            ndx_pml4++;
ffff800000808a33:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1060 (discriminator 1)
            ndx_pdpt=0;
ffff800000808a38:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff800000808a3f:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1061 (discriminator 1)
            continue;
ffff800000808a40:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1052
    while (nr_pte)
ffff800000808a41:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
ffff800000808a46:	75 d4                	jne    ffff800000808a1c <chk_mtable+0xb3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1091
        if(pt[ndx_pt]&PAGE_PRESENT)return 0;
        ndx_pt++;
        nr_pte--;
    }
    
    return 1;
ffff800000808a48:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1092
}
ffff800000808a4d:	5d                   	pop    rbp
ffff800000808a4e:	c3                   	ret    

ffff800000808a4f <sys_getpgrp>:
sys_getpgrp():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1093
pid_t sys_getpgrp(void){
ffff800000808a4f:	f3 0f 1e fa          	endbr64 
ffff800000808a53:	55                   	push   rbp
ffff800000808a54:	48 89 e5             	mov    rbp,rsp
ffff800000808a57:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000808a57 <sys_getpgrp+0x8>
ffff800000808a5e:	49 bb a1 a1 11 00 00 	movabs r11,0x11a1a1
ffff800000808a65:	00 00 00 
ffff800000808a68:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1094
    return current->gpid;
ffff800000808a6b:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000808a72:	ff ff ff 
ffff800000808a75:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000808a79:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808a7c:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1095
}
ffff800000808a7f:	5d                   	pop    rbp
ffff800000808a80:	c3                   	ret    

ffff800000808a81 <sys_getpgid>:
sys_getpgid():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1097

int sys_getpgid(pid_t pid,gid_t gid){
ffff800000808a81:	f3 0f 1e fa          	endbr64 
ffff800000808a85:	55                   	push   rbp
ffff800000808a86:	48 89 e5             	mov    rbp,rsp
ffff800000808a89:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000808a89 <sys_getpgid+0x8>
ffff800000808a90:	49 bb 6f a1 11 00 00 	movabs r11,0x11a16f
ffff800000808a97:	00 00 00 
ffff800000808a9a:	4c 01 da             	add    rdx,r11
ffff800000808a9d:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff800000808aa0:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1098
    if(pid==0)
ffff800000808aa3:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff800000808aa7:	75 19                	jne    ffff800000808ac2 <sys_getpgid+0x41>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1099
        return current->gpid;
ffff800000808aa9:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff800000808ab0:	ff ff ff 
ffff800000808ab3:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000808ab7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808aba:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff800000808abd:	e9 8a 00 00 00       	jmp    ffff800000808b4c <sys_getpgid+0xcb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1100
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000808ac2:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000808ac9:	eb 76                	jmp    ffff800000808b41 <sys_getpgid+0xc0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1101
        if(task[i].pid==pid)
ffff800000808acb:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000808ad2:	ff ff ff 
ffff800000808ad5:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000808ad9:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff800000808adc:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000808adf:	48 63 c8             	movsxd rcx,eax
ffff800000808ae2:	48 89 c8             	mov    rax,rcx
ffff800000808ae5:	48 01 c0             	add    rax,rax
ffff800000808ae8:	48 01 c8             	add    rax,rcx
ffff800000808aeb:	48 8d 0c c5 00 00 00 	lea    rcx,[rax*8+0x0]
ffff800000808af2:	00 
ffff800000808af3:	48 01 c8             	add    rax,rcx
ffff800000808af6:	48 c1 e0 05          	shl    rax,0x5
ffff800000808afa:	48 01 f0             	add    rax,rsi
ffff800000808afd:	8b 08                	mov    ecx,DWORD PTR [rax]
ffff800000808aff:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000808b02:	39 c1                	cmp    ecx,eax
ffff800000808b04:	75 37                	jne    ffff800000808b3d <sys_getpgid+0xbc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1102
            return task[i].gpid;
ffff800000808b06:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000808b0d:	ff ff ff 
ffff800000808b10:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000808b14:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000808b17:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000808b1a:	48 63 d0             	movsxd rdx,eax
ffff800000808b1d:	48 89 d0             	mov    rax,rdx
ffff800000808b20:	48 01 c0             	add    rax,rax
ffff800000808b23:	48 01 d0             	add    rax,rdx
ffff800000808b26:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000808b2d:	00 
ffff800000808b2e:	48 01 d0             	add    rax,rdx
ffff800000808b31:	48 c1 e0 05          	shl    rax,0x5
ffff800000808b35:	48 01 c8             	add    rax,rcx
ffff800000808b38:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff800000808b3b:	eb 0f                	jmp    ffff800000808b4c <sys_getpgid+0xcb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1100 (discriminator 2)
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000808b3d:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1100 (discriminator 1)
ffff800000808b41:	83 7d fc 1f          	cmp    DWORD PTR [rbp-0x4],0x1f
ffff800000808b45:	7e 84                	jle    ffff800000808acb <sys_getpgid+0x4a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1104
    }
    return -1;
ffff800000808b47:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1105
}
ffff800000808b4c:	5d                   	pop    rbp
ffff800000808b4d:	c3                   	ret    

ffff800000808b4e <sys_setpgid>:
sys_setpgid():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1106
int sys_setpgid(pid_t pid,gid_t gid){
ffff800000808b4e:	f3 0f 1e fa          	endbr64 
ffff800000808b52:	55                   	push   rbp
ffff800000808b53:	48 89 e5             	mov    rbp,rsp
ffff800000808b56:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000808b56 <sys_setpgid+0x8>
ffff800000808b5d:	49 bb a2 a0 11 00 00 	movabs r11,0x11a0a2
ffff800000808b64:	00 00 00 
ffff800000808b67:	4c 01 d8             	add    rax,r11
ffff800000808b6a:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff800000808b6d:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1107
    if(pid==0)
ffff800000808b70:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff800000808b74:	75 56                	jne    ffff800000808bcc <sys_setpgid+0x7e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1109
    {
        if(current->sid==current->pid)
ffff800000808b76:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000808b7d:	ff ff ff 
ffff800000808b80:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000808b84:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000808b87:	8b 4a 08             	mov    ecx,DWORD PTR [rdx+0x8]
ffff800000808b8a:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000808b91:	ff ff ff 
ffff800000808b94:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000808b98:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000808b9b:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000808b9d:	39 d1                	cmp    ecx,edx
ffff800000808b9f:	75 0a                	jne    ffff800000808bab <sys_setpgid+0x5d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1110
            return -1;
ffff800000808ba1:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000808ba6:	e9 33 01 00 00       	jmp    ffff800000808cde <sys_setpgid+0x190>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1111
        current->gpid=gid;
ffff800000808bab:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000808bb2:	ff ff ff 
ffff800000808bb5:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000808bb9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808bbc:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000808bbf:	89 50 04             	mov    DWORD PTR [rax+0x4],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1112
        return 0;
ffff800000808bc2:	b8 00 00 00 00       	mov    eax,0x0
ffff800000808bc7:	e9 12 01 00 00       	jmp    ffff800000808cde <sys_setpgid+0x190>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1114
    }
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000808bcc:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000808bd3:	e9 f7 00 00 00       	jmp    ffff800000808ccf <sys_setpgid+0x181>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1115
        if(task[i].pid==pid)
ffff800000808bd8:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff800000808bdf:	ff ff ff 
ffff800000808be2:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000808be6:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff800000808be9:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000808bec:	48 63 ca             	movsxd rcx,edx
ffff800000808bef:	48 89 ca             	mov    rdx,rcx
ffff800000808bf2:	48 01 d2             	add    rdx,rdx
ffff800000808bf5:	48 01 ca             	add    rdx,rcx
ffff800000808bf8:	48 8d 0c d5 00 00 00 	lea    rcx,[rdx*8+0x0]
ffff800000808bff:	00 
ffff800000808c00:	48 01 ca             	add    rdx,rcx
ffff800000808c03:	48 c1 e2 05          	shl    rdx,0x5
ffff800000808c07:	48 01 f2             	add    rdx,rsi
ffff800000808c0a:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff800000808c0c:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000808c0f:	39 d1                	cmp    ecx,edx
ffff800000808c11:	0f 85 b4 00 00 00    	jne    ffff800000808ccb <sys_setpgid+0x17d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1117
        {
            if(task[i].sid==task[i].pid)
ffff800000808c17:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff800000808c1e:	ff ff ff 
ffff800000808c21:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000808c25:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff800000808c28:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000808c2b:	48 63 ca             	movsxd rcx,edx
ffff800000808c2e:	48 89 ca             	mov    rdx,rcx
ffff800000808c31:	48 01 d2             	add    rdx,rdx
ffff800000808c34:	48 01 ca             	add    rdx,rcx
ffff800000808c37:	48 8d 0c d5 00 00 00 	lea    rcx,[rdx*8+0x0]
ffff800000808c3e:	00 
ffff800000808c3f:	48 01 ca             	add    rdx,rcx
ffff800000808c42:	48 c1 e2 05          	shl    rdx,0x5
ffff800000808c46:	48 01 f2             	add    rdx,rsi
ffff800000808c49:	8b 72 08             	mov    esi,DWORD PTR [rdx+0x8]
ffff800000808c4c:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff800000808c53:	ff ff ff 
ffff800000808c56:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000808c5a:	48 8b 3a             	mov    rdi,QWORD PTR [rdx]
ffff800000808c5d:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff800000808c60:	48 63 ca             	movsxd rcx,edx
ffff800000808c63:	48 89 ca             	mov    rdx,rcx
ffff800000808c66:	48 01 d2             	add    rdx,rdx
ffff800000808c69:	48 01 ca             	add    rdx,rcx
ffff800000808c6c:	48 8d 0c d5 00 00 00 	lea    rcx,[rdx*8+0x0]
ffff800000808c73:	00 
ffff800000808c74:	48 01 ca             	add    rdx,rcx
ffff800000808c77:	48 c1 e2 05          	shl    rdx,0x5
ffff800000808c7b:	48 01 fa             	add    rdx,rdi
ffff800000808c7e:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000808c80:	39 d6                	cmp    esi,edx
ffff800000808c82:	75 07                	jne    ffff800000808c8b <sys_setpgid+0x13d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1118
                return -1;
ffff800000808c84:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000808c89:	eb 53                	jmp    ffff800000808cde <sys_setpgid+0x190>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1119
            task[i].gpid=gid;
ffff800000808c8b:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff800000808c92:	ff ff ff 
ffff800000808c95:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000808c99:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000808c9c:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000808c9f:	48 63 d0             	movsxd rdx,eax
ffff800000808ca2:	48 89 d0             	mov    rax,rdx
ffff800000808ca5:	48 01 c0             	add    rax,rax
ffff800000808ca8:	48 01 d0             	add    rax,rdx
ffff800000808cab:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000808cb2:	00 
ffff800000808cb3:	48 01 d0             	add    rax,rdx
ffff800000808cb6:	48 c1 e0 05          	shl    rax,0x5
ffff800000808cba:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
ffff800000808cbe:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000808cc1:	89 42 04             	mov    DWORD PTR [rdx+0x4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1120
            return 0;
ffff800000808cc4:	b8 00 00 00 00       	mov    eax,0x0
ffff800000808cc9:	eb 13                	jmp    ffff800000808cde <sys_setpgid+0x190>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1114 (discriminator 2)
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000808ccb:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1114 (discriminator 1)
ffff800000808ccf:	83 7d fc 1f          	cmp    DWORD PTR [rbp-0x4],0x1f
ffff800000808cd3:	0f 8e ff fe ff ff    	jle    ffff800000808bd8 <sys_setpgid+0x8a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1123
        }
    }
    return -1;
ffff800000808cd9:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1124
}
ffff800000808cde:	5d                   	pop    rbp
ffff800000808cdf:	c3                   	ret    

ffff800000808ce0 <sys_setsid>:
sys_setsid():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1126

pid_t sys_setsid(void){
ffff800000808ce0:	f3 0f 1e fa          	endbr64 
ffff800000808ce4:	55                   	push   rbp
ffff800000808ce5:	48 89 e5             	mov    rbp,rsp
ffff800000808ce8:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000808ce8 <sys_setsid+0x8>
ffff800000808cef:	49 bb 10 9f 11 00 00 	movabs r11,0x119f10
ffff800000808cf6:	00 00 00 
ffff800000808cf9:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1127
    current->sid=current->pid;
ffff800000808cfc:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff800000808d03:	ff ff ff 
ffff800000808d06:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff800000808d0a:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000808d0d:	48 b9 48 fe ff ff ff 	movabs rcx,0xfffffffffffffe48
ffff800000808d14:	ff ff ff 
ffff800000808d17:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff800000808d1b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808d1e:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff800000808d20:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1128
}
ffff800000808d23:	90                   	nop
ffff800000808d24:	5d                   	pop    rbp
ffff800000808d25:	c3                   	ret    

ffff800000808d26 <sys_getsid>:
sys_getsid():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1129
pid_t sys_getsid(pid_t pid){
ffff800000808d26:	f3 0f 1e fa          	endbr64 
ffff800000808d2a:	55                   	push   rbp
ffff800000808d2b:	48 89 e5             	mov    rbp,rsp
ffff800000808d2e:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff800000808d2e <sys_getsid+0x8>
ffff800000808d35:	49 bb ca 9e 11 00 00 	movabs r11,0x119eca
ffff800000808d3c:	00 00 00 
ffff800000808d3f:	4c 01 da             	add    rdx,r11
ffff800000808d42:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1130
    if(pid==0)
ffff800000808d45:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff800000808d49:	75 19                	jne    ffff800000808d64 <sys_getsid+0x3e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1131
        return current->sid;
ffff800000808d4b:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff800000808d52:	ff ff ff 
ffff800000808d55:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000808d59:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000808d5c:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000808d5f:	e9 8a 00 00 00       	jmp    ffff800000808dee <sys_getsid+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1132
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000808d64:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000808d6b:	eb 76                	jmp    ffff800000808de3 <sys_getsid+0xbd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1133
        if(task[i].pid==pid)
ffff800000808d6d:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000808d74:	ff ff ff 
ffff800000808d77:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000808d7b:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff800000808d7e:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000808d81:	48 63 c8             	movsxd rcx,eax
ffff800000808d84:	48 89 c8             	mov    rax,rcx
ffff800000808d87:	48 01 c0             	add    rax,rax
ffff800000808d8a:	48 01 c8             	add    rax,rcx
ffff800000808d8d:	48 8d 0c c5 00 00 00 	lea    rcx,[rax*8+0x0]
ffff800000808d94:	00 
ffff800000808d95:	48 01 c8             	add    rax,rcx
ffff800000808d98:	48 c1 e0 05          	shl    rax,0x5
ffff800000808d9c:	48 01 f0             	add    rax,rsi
ffff800000808d9f:	8b 08                	mov    ecx,DWORD PTR [rax]
ffff800000808da1:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000808da4:	39 c1                	cmp    ecx,eax
ffff800000808da6:	75 37                	jne    ffff800000808ddf <sys_getsid+0xb9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1134
            return task[i].sid;
ffff800000808da8:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000808daf:	ff ff ff 
ffff800000808db2:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff800000808db6:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000808db9:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000808dbc:	48 63 d0             	movsxd rdx,eax
ffff800000808dbf:	48 89 d0             	mov    rax,rdx
ffff800000808dc2:	48 01 c0             	add    rax,rax
ffff800000808dc5:	48 01 d0             	add    rax,rdx
ffff800000808dc8:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000808dcf:	00 
ffff800000808dd0:	48 01 d0             	add    rax,rdx
ffff800000808dd3:	48 c1 e0 05          	shl    rax,0x5
ffff800000808dd7:	48 01 c8             	add    rax,rcx
ffff800000808dda:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000808ddd:	eb 0f                	jmp    ffff800000808dee <sys_getsid+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1132 (discriminator 2)
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000808ddf:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1132 (discriminator 1)
ffff800000808de3:	83 7d fc 1f          	cmp    DWORD PTR [rbp-0x4],0x1f
ffff800000808de7:	7e 84                	jle    ffff800000808d6d <sys_getsid+0x47>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1136
    }
    return -1;
ffff800000808de9:	b8 ff ff ff ff       	mov    eax,0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1137
}
ffff800000808dee:	5d                   	pop    rbp
ffff800000808def:	c3                   	ret    

ffff800000808df0 <sys_tcsetpgrp>:
sys_tcsetpgrp():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1138
int sys_tcsetpgrp(int fildes,pid_t pgid_id){
ffff800000808df0:	f3 0f 1e fa          	endbr64 
ffff800000808df4:	55                   	push   rbp
ffff800000808df5:	48 89 e5             	mov    rbp,rsp
ffff800000808df8:	41 57                	push   r15
ffff800000808dfa:	53                   	push   rbx
ffff800000808dfb:	48 83 ec 20          	sub    rsp,0x20
ffff800000808dff:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000808dff <sys_tcsetpgrp+0xf>
ffff800000808e06:	49 bb f9 9d 11 00 00 	movabs r11,0x119df9
ffff800000808e0d:	00 00 00 
ffff800000808e10:	4c 01 db             	add    rbx,r11
ffff800000808e13:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff800000808e16:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1140
    //当前controlling terminal断联
    sys_ioctl(fildes,TTY_DISCONNECT,0);
ffff800000808e19:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000808e1c:	ba 00 00 00 00       	mov    edx,0x0
ffff800000808e21:	be 02 00 00 00       	mov    esi,0x2
ffff800000808e26:	89 c7                	mov    edi,eax
ffff800000808e28:	49 89 df             	mov    r15,rbx
ffff800000808e2b:	48 b8 82 64 ee ff ff 	movabs rax,0xffffffffffee6482
ffff800000808e32:	ff ff ff 
ffff800000808e35:	48 01 d8             	add    rax,rbx
ffff800000808e38:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1141
    int sid= sys_getsid(0);//获取session id
ffff800000808e3a:	bf 00 00 00 00       	mov    edi,0x0
ffff800000808e3f:	49 89 df             	mov    r15,rbx
ffff800000808e42:	48 b8 2e 61 ee ff ff 	movabs rax,0xffffffffffee612e
ffff800000808e49:	ff ff ff 
ffff800000808e4c:	48 01 d8             	add    rax,rbx
ffff800000808e4f:	ff d0                	call   rax
ffff800000808e51:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1142
    struct process* new_fgl=NULL;
ffff800000808e54:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff800000808e5b:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1143
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000808e5c:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff800000808e63:	e9 6c 01 00 00       	jmp    ffff800000808fd4 <sys_tcsetpgrp+0x1e4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1144
        if(task[i].stat == TASK_ZOMBIE||task[i].stat == TASK_EMPTY)continue;
ffff800000808e68:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000808e6f:	ff ff ff 
ffff800000808e72:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808e76:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000808e79:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000808e7c:	48 63 d0             	movsxd rdx,eax
ffff800000808e7f:	48 89 d0             	mov    rax,rdx
ffff800000808e82:	48 01 c0             	add    rax,rax
ffff800000808e85:	48 01 d0             	add    rax,rdx
ffff800000808e88:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000808e8f:	00 
ffff800000808e90:	48 01 d0             	add    rax,rdx
ffff800000808e93:	48 c1 e0 05          	shl    rax,0x5
ffff800000808e97:	48 01 c8             	add    rax,rcx
ffff800000808e9a:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff800000808e9d:	83 f8 04             	cmp    eax,0x4
ffff800000808ea0:	0f 84 29 01 00 00    	je     ffff800000808fcf <sys_tcsetpgrp+0x1df>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1144 (discriminator 2)
ffff800000808ea6:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000808ead:	ff ff ff 
ffff800000808eb0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808eb4:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000808eb7:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000808eba:	48 63 d0             	movsxd rdx,eax
ffff800000808ebd:	48 89 d0             	mov    rax,rdx
ffff800000808ec0:	48 01 c0             	add    rax,rax
ffff800000808ec3:	48 01 d0             	add    rax,rdx
ffff800000808ec6:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000808ecd:	00 
ffff800000808ece:	48 01 d0             	add    rax,rdx
ffff800000808ed1:	48 c1 e0 05          	shl    rax,0x5
ffff800000808ed5:	48 01 c8             	add    rax,rcx
ffff800000808ed8:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff800000808edb:	85 c0                	test   eax,eax
ffff800000808edd:	0f 84 ec 00 00 00    	je     ffff800000808fcf <sys_tcsetpgrp+0x1df>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1145
        if(task[i].sid==sid){
ffff800000808ee3:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000808eea:	ff ff ff 
ffff800000808eed:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808ef1:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000808ef4:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000808ef7:	48 63 d0             	movsxd rdx,eax
ffff800000808efa:	48 89 d0             	mov    rax,rdx
ffff800000808efd:	48 01 c0             	add    rax,rax
ffff800000808f00:	48 01 d0             	add    rax,rdx
ffff800000808f03:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000808f0a:	00 
ffff800000808f0b:	48 01 d0             	add    rax,rdx
ffff800000808f0e:	48 c1 e0 05          	shl    rax,0x5
ffff800000808f12:	48 01 c8             	add    rax,rcx
ffff800000808f15:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffff800000808f18:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000808f1b:	39 c2                	cmp    edx,eax
ffff800000808f1d:	0f 85 ad 00 00 00    	jne    ffff800000808fd0 <sys_tcsetpgrp+0x1e0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1146
            task[i].fg_pgid=pgid_id;
ffff800000808f23:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000808f2a:	ff ff ff 
ffff800000808f2d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808f31:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000808f34:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000808f37:	48 63 d0             	movsxd rdx,eax
ffff800000808f3a:	48 89 d0             	mov    rax,rdx
ffff800000808f3d:	48 01 c0             	add    rax,rax
ffff800000808f40:	48 01 d0             	add    rax,rdx
ffff800000808f43:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000808f4a:	00 
ffff800000808f4b:	48 01 d0             	add    rax,rdx
ffff800000808f4e:	48 c1 e0 05          	shl    rax,0x5
ffff800000808f52:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
ffff800000808f56:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000808f59:	89 42 0c             	mov    DWORD PTR [rdx+0xc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1147
            if(task[i].pid==pgid_id){
ffff800000808f5c:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000808f63:	ff ff ff 
ffff800000808f66:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808f6a:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000808f6d:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000808f70:	48 63 d0             	movsxd rdx,eax
ffff800000808f73:	48 89 d0             	mov    rax,rdx
ffff800000808f76:	48 01 c0             	add    rax,rax
ffff800000808f79:	48 01 d0             	add    rax,rdx
ffff800000808f7c:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000808f83:	00 
ffff800000808f84:	48 01 d0             	add    rax,rdx
ffff800000808f87:	48 c1 e0 05          	shl    rax,0x5
ffff800000808f8b:	48 01 c8             	add    rax,rcx
ffff800000808f8e:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000808f90:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000808f93:	39 c2                	cmp    edx,eax
ffff800000808f95:	75 39                	jne    ffff800000808fd0 <sys_tcsetpgrp+0x1e0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1149
                //这是新前台进程组的leader
                new_fgl=&task[i];
ffff800000808f97:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000808f9e:	ff ff ff 
ffff800000808fa1:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000808fa5:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000808fa8:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000808fab:	48 63 d0             	movsxd rdx,eax
ffff800000808fae:	48 89 d0             	mov    rax,rdx
ffff800000808fb1:	48 01 c0             	add    rax,rax
ffff800000808fb4:	48 01 d0             	add    rax,rdx
ffff800000808fb7:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000808fbe:	00 
ffff800000808fbf:	48 01 d0             	add    rax,rdx
ffff800000808fc2:	48 c1 e0 05          	shl    rax,0x5
ffff800000808fc6:	48 01 c8             	add    rax,rcx
ffff800000808fc9:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff800000808fcd:	eb 01                	jmp    ffff800000808fd0 <sys_tcsetpgrp+0x1e0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1144
        if(task[i].stat == TASK_ZOMBIE||task[i].stat == TASK_EMPTY)continue;
ffff800000808fcf:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1143 (discriminator 2)
    for (int i = 0; i <MAX_TASKS; ++i) {
ffff800000808fd0:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1143 (discriminator 1)
ffff800000808fd4:	83 7d e4 1f          	cmp    DWORD PTR [rbp-0x1c],0x1f
ffff800000808fd8:	0f 8e 8a fe ff ff    	jle    ffff800000808e68 <sys_tcsetpgrp+0x78>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1154
            }
        }
    }
    //新leader把tty连接
    new_fgl->openf[new_fgl->tty_fd]->f_ops->ioctl(new_fgl->openf[fildes]->dentry->dir_inode,new_fgl->openf[fildes]\
ffff800000808fde:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000808fe2:	8b 50 14             	mov    edx,DWORD PTR [rax+0x14]
ffff800000808fe5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000808fe9:	48 63 d2             	movsxd rdx,edx
ffff800000808fec:	48 83 c2 1e          	add    rdx,0x1e
ffff800000808ff0:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff800000808ff5:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000808ff9:	4c 8b 40 28          	mov    r8,QWORD PTR [rax+0x28]
ffff800000808ffd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000809001:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000809004:	48 63 d2             	movsxd rdx,edx
ffff800000809007:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080900b:	48 8b 74 d0 08       	mov    rsi,QWORD PTR [rax+rdx*8+0x8]
ffff800000809010:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000809014:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000809017:	48 63 d2             	movsxd rdx,edx
ffff80000080901a:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080901e:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff800000809023:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000809027:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080902b:	b9 00 00 00 00       	mov    ecx,0x0
ffff800000809030:	ba 01 00 00 00       	mov    edx,0x1
ffff800000809035:	48 89 c7             	mov    rdi,rax
ffff800000809038:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1156
    ,TTY_CONNECT,0);
}
ffff80000080903b:	90                   	nop
ffff80000080903c:	48 83 c4 20          	add    rsp,0x20
ffff800000809040:	5b                   	pop    rbx
ffff800000809041:	41 5f                	pop    r15
ffff800000809043:	5d                   	pop    rbp
ffff800000809044:	c3                   	ret    

ffff800000809045 <sys_tcgetpgrp>:
sys_tcgetpgrp():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1157
pid_t sys_tcgetpgrp(int fildes){
ffff800000809045:	f3 0f 1e fa          	endbr64 
ffff800000809049:	55                   	push   rbp
ffff80000080904a:	48 89 e5             	mov    rbp,rsp
ffff80000080904d:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080904d <sys_tcgetpgrp+0x8>
ffff800000809054:	49 bb ab 9b 11 00 00 	movabs r11,0x119bab
ffff80000080905b:	00 00 00 
ffff80000080905e:	4c 01 d8             	add    rax,r11
ffff800000809061:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1158
    return current->fg_pgid;
ffff800000809064:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff80000080906b:	ff ff ff 
ffff80000080906e:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000809072:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809075:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1159
}
ffff800000809078:	5d                   	pop    rbp
ffff800000809079:	c3                   	ret    

ffff80000080907a <sys_ioctl>:
sys_ioctl():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1162
//===============

int sys_ioctl(int fildes, int request, unsigned long args){
ffff80000080907a:	f3 0f 1e fa          	endbr64 
ffff80000080907e:	55                   	push   rbp
ffff80000080907f:	48 89 e5             	mov    rbp,rsp
ffff800000809082:	48 83 ec 10          	sub    rsp,0x10
ffff800000809086:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000809086 <sys_ioctl+0xc>
ffff80000080908d:	49 bb 72 9b 11 00 00 	movabs r11,0x119b72
ffff800000809094:	00 00 00 
ffff800000809097:	4c 01 d8             	add    rax,r11
ffff80000080909a:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffff80000080909d:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
ffff8000008090a0:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1163
    current->openf[fildes]->f_ops->ioctl(current->openf[fildes]->dentry->dir_inode,current->openf[fildes]\
ffff8000008090a4:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff8000008090ab:	ff ff ff 
ffff8000008090ae:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008090b2:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff8000008090b5:	8b 4d fc             	mov    ecx,DWORD PTR [rbp-0x4]
ffff8000008090b8:	48 63 c9             	movsxd rcx,ecx
ffff8000008090bb:	48 83 c1 1e          	add    rcx,0x1e
ffff8000008090bf:	48 8b 54 ca 08       	mov    rdx,QWORD PTR [rdx+rcx*8+0x8]
ffff8000008090c4:	48 8b 52 18          	mov    rdx,QWORD PTR [rdx+0x18]
ffff8000008090c8:	4c 8b 42 28          	mov    r8,QWORD PTR [rdx+0x28]
ffff8000008090cc:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff8000008090cf:	48 63 d2             	movsxd rdx,edx
ffff8000008090d2:	48 b9 48 fe ff ff ff 	movabs rcx,0xfffffffffffffe48
ffff8000008090d9:	ff ff ff 
ffff8000008090dc:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff8000008090e0:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
ffff8000008090e3:	8b 75 fc             	mov    esi,DWORD PTR [rbp-0x4]
ffff8000008090e6:	48 63 f6             	movsxd rsi,esi
ffff8000008090e9:	48 83 c6 1e          	add    rsi,0x1e
ffff8000008090ed:	48 8b 74 f1 08       	mov    rsi,QWORD PTR [rcx+rsi*8+0x8]
ffff8000008090f2:	48 b9 48 fe ff ff ff 	movabs rcx,0xfffffffffffffe48
ffff8000008090f9:	ff ff ff 
ffff8000008090fc:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff800000809100:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809103:	8b 4d fc             	mov    ecx,DWORD PTR [rbp-0x4]
ffff800000809106:	48 63 c9             	movsxd rcx,ecx
ffff800000809109:	48 83 c1 1e          	add    rcx,0x1e
ffff80000080910d:	48 8b 44 c8 08       	mov    rax,QWORD PTR [rax+rcx*8+0x8]
ffff800000809112:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000809116:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080911a:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff80000080911e:	48 89 c7             	mov    rdi,rax
ffff800000809121:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1165
    ,request,args);
}
ffff800000809124:	90                   	nop
ffff800000809125:	c9                   	leave  
ffff800000809126:	c3                   	ret    

ffff800000809127 <set_errno>:
set_errno():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1166
void set_errno(int errno){
ffff800000809127:	f3 0f 1e fa          	endbr64 
ffff80000080912b:	55                   	push   rbp
ffff80000080912c:	48 89 e5             	mov    rbp,rsp
ffff80000080912f:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080912f <set_errno+0x8>
ffff800000809136:	49 bb c9 9a 11 00 00 	movabs r11,0x119ac9
ffff80000080913d:	00 00 00 
ffff800000809140:	4c 01 d8             	add    rax,r11
ffff800000809143:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1167
    current->regs.errcode=errno;
ffff800000809146:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff80000080914d:	ff ff ff 
ffff800000809150:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000809154:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809157:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080915a:	48 63 d2             	movsxd rdx,edx
ffff80000080915d:	48 89 90 2c 03 00 00 	mov    QWORD PTR [rax+0x32c],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/proc.c:1168
ffff800000809164:	90                   	nop
ffff800000809165:	5d                   	pop    rbp
ffff800000809166:	c3                   	ret    
ffff800000809167:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
ffff80000080916e:	00 00 

ffff800000809170 <outb>:
outb():
ffff800000809170:	66 89 fa             	mov    dx,di
ffff800000809173:	66 89 f0             	mov    ax,si
ffff800000809176:	ee                   	out    dx,al
ffff800000809177:	e8 29 00 00 00       	call   ffff8000008091a5 <io_delay>
ffff80000080917c:	c3                   	ret    

ffff80000080917d <outw>:
outw():
ffff80000080917d:	66 89 fa             	mov    dx,di
ffff800000809180:	66 89 f0             	mov    ax,si
ffff800000809183:	66 ef                	out    dx,ax
ffff800000809185:	90                   	nop
ffff800000809186:	90                   	nop
ffff800000809187:	90                   	nop
ffff800000809188:	c3                   	ret    

ffff800000809189 <inb>:
inb():
ffff800000809189:	31 c0                	xor    eax,eax
ffff80000080918b:	66 89 fa             	mov    dx,di
ffff80000080918e:	ec                   	in     al,dx
ffff80000080918f:	90                   	nop
ffff800000809190:	90                   	nop
ffff800000809191:	90                   	nop
ffff800000809192:	c3                   	ret    

ffff800000809193 <inw>:
inw():
ffff800000809193:	31 c0                	xor    eax,eax
ffff800000809195:	66 89 fa             	mov    dx,di
ffff800000809198:	66 ed                	in     ax,dx
ffff80000080919a:	90                   	nop
ffff80000080919b:	90                   	nop
ffff80000080919c:	90                   	nop
ffff80000080919d:	c3                   	ret    

ffff80000080919e <eoi>:
eoi():
ffff80000080919e:	b0 20                	mov    al,0x20
ffff8000008091a0:	e6 a0                	out    0xa0,al
ffff8000008091a2:	e6 20                	out    0x20,al
ffff8000008091a4:	c3                   	ret    

ffff8000008091a5 <io_delay>:
io_delay():
ffff8000008091a5:	90                   	nop
ffff8000008091a6:	90                   	nop
ffff8000008091a7:	90                   	nop
ffff8000008091a8:	90                   	nop
ffff8000008091a9:	c3                   	ret    

ffff8000008091aa <turn_on_int>:
turn_on_int():
ffff8000008091aa:	b0 f8                	mov    al,0xf8
ffff8000008091ac:	e6 21                	out    0x21,al
ffff8000008091ae:	e8 f2 ff ff ff       	call   ffff8000008091a5 <io_delay>
ffff8000008091b3:	b0 af                	mov    al,0xaf
ffff8000008091b5:	e6 a1                	out    0xa1,al
ffff8000008091b7:	e8 e9 ff ff ff       	call   ffff8000008091a5 <io_delay>
ffff8000008091bc:	48 b8 00 70 10 00 00 	movabs rax,0xffff800000107000
ffff8000008091c3:	80 ff ff 
ffff8000008091c6:	0f 01 18             	lidt   [rax]
ffff8000008091c9:	90                   	nop
ffff8000008091ca:	90                   	nop
ffff8000008091cb:	90                   	nop
ffff8000008091cc:	90                   	nop
ffff8000008091cd:	c3                   	ret    

ffff8000008091ce <_report_back_trace_of_err>:
_report_back_trace_of_err():
ffff8000008091ce:	67 8b 44 24 04       	mov    eax,DWORD PTR [esp+0x4]
ffff8000008091d3:	50                   	push   rax
ffff8000008091d4:	83 c4 08             	add    esp,0x8
ffff8000008091d7:	c3                   	ret    

ffff8000008091d8 <bt_msg>:
bt_msg():
ffff8000008091d8:	65 72 72             	gs jb  ffff80000080924d <fill_desc+0x3a>
ffff8000008091db:	6f                   	outs   dx,DWORD PTR ds:[rsi]
ffff8000008091dc:	72 20                	jb     ffff8000008091fe <init_gdt+0x11>
ffff8000008091de:	6f                   	outs   dx,DWORD PTR ds:[rsi]
ffff8000008091df:	63 63 75             	movsxd esp,DWORD PTR [rbx+0x75]
ffff8000008091e2:	72 73                	jb     ffff800000809257 <fill_desc+0x44>
ffff8000008091e4:	20 61 74             	and    BYTE PTR [rcx+0x74],ah
ffff8000008091e7:	3a 25 78 5c 6e 00    	cmp    ah,BYTE PTR [rip+0x6e5c78]        # ffff800000eeee65 <_knl_end+0x2eee65>

ffff8000008091ed <init_gdt>:
init_gdt():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:9
#include "proc.h"

descriptor *gdt=GDT_ADDR+KNL_BASE;
extern char *gdtptr;
int init_gdt()
{
ffff8000008091ed:	f3 0f 1e fa          	endbr64 
ffff8000008091f1:	55                   	push   rbp
ffff8000008091f2:	48 89 e5             	mov    rbp,rsp
ffff8000008091f5:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008091f5 <init_gdt+0x8>
ffff8000008091fc:	49 bb 03 9a 11 00 00 	movabs r11,0x119a03
ffff800000809203:	00 00 00 
ffff800000809206:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:11
//    fill_desc(0x108000,108,SEG_SYS_TSS|SEG_PRESENT,4);
    __asm__ volatile("mov $0x48,%ax\r\n"
ffff800000809209:	66 b8 48 00          	mov    ax,0x48
ffff80000080920d:	0f 00 d8             	ltr    ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:13
                 "ltr %ax");  
}
ffff800000809210:	90                   	nop
ffff800000809211:	5d                   	pop    rbp
ffff800000809212:	c3                   	ret    

ffff800000809213 <fill_desc>:
fill_desc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:15
void fill_desc(u64 base, u64 limit, u16 attr, u32 index)
{
ffff800000809213:	f3 0f 1e fa          	endbr64 
ffff800000809217:	55                   	push   rbp
ffff800000809218:	48 89 e5             	mov    rbp,rsp
ffff80000080921b:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080921b <fill_desc+0x8>
ffff800000809222:	49 bb dd 99 11 00 00 	movabs r11,0x1199dd
ffff800000809229:	00 00 00 
ffff80000080922c:	4c 01 d8             	add    rax,r11
ffff80000080922f:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000809233:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000809237:	89 4d e8             	mov    DWORD PTR [rbp-0x18],ecx
ffff80000080923a:	66 89 55 ec          	mov    WORD PTR [rbp-0x14],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:16
    gdt[index].base_12=base&0xffff;
ffff80000080923e:	48 ba 40 fd ff ff ff 	movabs rdx,0xfffffffffffffd40
ffff800000809245:	ff ff ff 
ffff800000809248:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080924c:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080924f:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000809252:	48 c1 e2 04          	shl    rdx,0x4
ffff800000809256:	48 01 ca             	add    rdx,rcx
ffff800000809259:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
ffff80000080925d:	66 89 4a 02          	mov    WORD PTR [rdx+0x2],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:17
    gdt[index].base_3=(base>>16)&0xff;
ffff800000809261:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000809265:	48 89 d6             	mov    rsi,rdx
ffff800000809268:	48 c1 ee 10          	shr    rsi,0x10
ffff80000080926c:	48 ba 40 fd ff ff ff 	movabs rdx,0xfffffffffffffd40
ffff800000809273:	ff ff ff 
ffff800000809276:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080927a:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080927d:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000809280:	48 c1 e2 04          	shl    rdx,0x4
ffff800000809284:	48 01 ca             	add    rdx,rcx
ffff800000809287:	89 f1                	mov    ecx,esi
ffff800000809289:	88 4a 04             	mov    BYTE PTR [rdx+0x4],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:18
    gdt[index].base_4=(base>>24)&0xff;
ffff80000080928c:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff800000809290:	48 89 d6             	mov    rsi,rdx
ffff800000809293:	48 c1 ee 18          	shr    rsi,0x18
ffff800000809297:	48 ba 40 fd ff ff ff 	movabs rdx,0xfffffffffffffd40
ffff80000080929e:	ff ff ff 
ffff8000008092a1:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008092a5:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008092a8:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff8000008092ab:	48 c1 e2 04          	shl    rdx,0x4
ffff8000008092af:	48 01 ca             	add    rdx,rcx
ffff8000008092b2:	89 f1                	mov    ecx,esi
ffff8000008092b4:	88 4a 07             	mov    BYTE PTR [rdx+0x7],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:19
    gdt[index].base_5678=(base>>32)&0xffffffff;
ffff8000008092b7:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff8000008092bb:	48 89 d1             	mov    rcx,rdx
ffff8000008092be:	48 c1 e9 20          	shr    rcx,0x20
ffff8000008092c2:	48 ba 40 fd ff ff ff 	movabs rdx,0xfffffffffffffd40
ffff8000008092c9:	ff ff ff 
ffff8000008092cc:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008092d0:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff8000008092d3:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff8000008092d6:	48 c1 e2 04          	shl    rdx,0x4
ffff8000008092da:	48 01 f2             	add    rdx,rsi
ffff8000008092dd:	89 4a 08             	mov    DWORD PTR [rdx+0x8],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:20
    gdt[index].limit_lo16=limit&0xffff;
ffff8000008092e0:	48 ba 40 fd ff ff ff 	movabs rdx,0xfffffffffffffd40
ffff8000008092e7:	ff ff ff 
ffff8000008092ea:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff8000008092ee:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008092f1:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff8000008092f4:	48 c1 e2 04          	shl    rdx,0x4
ffff8000008092f8:	48 01 ca             	add    rdx,rcx
ffff8000008092fb:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff8000008092ff:	66 89 0a             	mov    WORD PTR [rdx],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:21
    gdt[index].attr=attr|((limit>>8)&0xf0);
ffff800000809302:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff800000809306:	48 c1 ea 08          	shr    rdx,0x8
ffff80000080930a:	89 d1                	mov    ecx,edx
ffff80000080930c:	66 81 e1 f0 00       	and    cx,0xf0
ffff800000809311:	48 ba 40 fd ff ff ff 	movabs rdx,0xfffffffffffffd40
ffff800000809318:	ff ff ff 
ffff80000080931b:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080931f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000809322:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000809325:	48 c1 e0 04          	shl    rax,0x4
ffff800000809329:	48 01 c2             	add    rdx,rax
ffff80000080932c:	89 c8                	mov    eax,ecx
ffff80000080932e:	66 0b 45 ec          	or     ax,WORD PTR [rbp-0x14]
ffff800000809332:	66 89 42 05          	mov    WORD PTR [rdx+0x5],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:23

}
ffff800000809336:	90                   	nop
ffff800000809337:	5d                   	pop    rbp
ffff800000809338:	c3                   	ret    

ffff800000809339 <fill_gate>:
fill_gate():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:26

void fill_gate(u32 index,u32 offset,u16 selector,u16 attr)
{
ffff800000809339:	f3 0f 1e fa          	endbr64 
ffff80000080933d:	55                   	push   rbp
ffff80000080933e:	48 89 e5             	mov    rbp,rsp
ffff800000809341:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000809341 <fill_gate+0x8>
ffff800000809348:	49 bb b7 98 11 00 00 	movabs r11,0x1198b7
ffff80000080934f:	00 00 00 
ffff800000809352:	4c 01 d8             	add    rax,r11
ffff800000809355:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff800000809358:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
ffff80000080935b:	89 d6                	mov    esi,edx
ffff80000080935d:	89 ca                	mov    edx,ecx
ffff80000080935f:	89 f1                	mov    ecx,esi
ffff800000809361:	66 89 4d e4          	mov    WORD PTR [rbp-0x1c],cx
ffff800000809365:	66 89 55 e0          	mov    WORD PTR [rbp-0x20],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:27
    gate* ptr=gdt;
ffff800000809369:	48 ba 40 fd ff ff ff 	movabs rdx,0xfffffffffffffd40
ffff800000809370:	ff ff ff 
ffff800000809373:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff800000809377:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080937a:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:28
    ptr[index].offset_low=offset&0xffff;
ffff80000080937e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000809381:	48 c1 e0 04          	shl    rax,0x4
ffff800000809385:	48 89 c2             	mov    rdx,rax
ffff800000809388:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080938c:	48 01 d0             	add    rax,rdx
ffff80000080938f:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000809392:	66 89 10             	mov    WORD PTR [rax],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:29
    ptr[index].offset_high=(offset>>16)&0xffff;
ffff800000809395:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000809398:	48 c1 e0 04          	shl    rax,0x4
ffff80000080939c:	48 89 c2             	mov    rdx,rax
ffff80000080939f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008093a3:	48 01 d0             	add    rax,rdx
ffff8000008093a6:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff8000008093a9:	c1 ea 10             	shr    edx,0x10
ffff8000008093ac:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:30
    ptr[index].selector=selector;
ffff8000008093af:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008093b2:	48 c1 e0 04          	shl    rax,0x4
ffff8000008093b6:	48 89 c2             	mov    rdx,rax
ffff8000008093b9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008093bd:	48 01 c2             	add    rdx,rax
ffff8000008093c0:	0f b7 45 e4          	movzx  eax,WORD PTR [rbp-0x1c]
ffff8000008093c4:	66 89 42 02          	mov    WORD PTR [rdx+0x2],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:31
    ptr[index].attr=attr;
ffff8000008093c8:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008093cb:	48 c1 e0 04          	shl    rax,0x4
ffff8000008093cf:	48 89 c2             	mov    rdx,rax
ffff8000008093d2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008093d6:	48 01 c2             	add    rdx,rax
ffff8000008093d9:	0f b7 45 e0          	movzx  eax,WORD PTR [rbp-0x20]
ffff8000008093dd:	66 89 42 04          	mov    WORD PTR [rdx+0x4],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:32
}
ffff8000008093e1:	90                   	nop
ffff8000008093e2:	5d                   	pop    rbp
ffff8000008093e3:	c3                   	ret    

ffff8000008093e4 <fill_ldt_desc>:
fill_ldt_desc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:35

void fill_ldt_desc(u32 base, u32 limit,u16 attr,descriptor *desc)
{
ffff8000008093e4:	f3 0f 1e fa          	endbr64 
ffff8000008093e8:	55                   	push   rbp
ffff8000008093e9:	48 89 e5             	mov    rbp,rsp
ffff8000008093ec:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008093ec <fill_ldt_desc+0x8>
ffff8000008093f3:	49 bb 0c 98 11 00 00 	movabs r11,0x11980c
ffff8000008093fa:	00 00 00 
ffff8000008093fd:	4c 01 d8             	add    rax,r11
ffff800000809400:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffff800000809403:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
ffff800000809406:	89 d0                	mov    eax,edx
ffff800000809408:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
ffff80000080940c:	66 89 45 f4          	mov    WORD PTR [rbp-0xc],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/gdt.c:41
//    desc->base_lo16=base&0xffff;
//    desc->base_mid8=(base>>16)&0xff;
//    desc->base_hi8=(base>>24)&0xff;
//    desc->limit_lo16=limit&0xffff;
//    desc->attr=attr|(limit>>16&0xf)<<8;
ffff800000809410:	90                   	nop
ffff800000809411:	5d                   	pop    rbp
ffff800000809412:	c3                   	ret    
ffff800000809413:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffff80000080941a:	00 00 00 
ffff80000080941d:	0f 1f 00             	nop    DWORD PTR [rax]

ffff800000809420 <fill_desc>:
fill_desc():
ffff800000809420:	67 8b 44 24 04       	mov    eax,DWORD PTR [esp+0x4]
ffff800000809425:	67 8b 5c 24 08       	mov    ebx,DWORD PTR [esp+0x8]
ffff80000080942a:	67 8b 4c 24 0c       	mov    ecx,DWORD PTR [esp+0xc]
ffff80000080942f:	67 8b 54 24 10       	mov    edx,DWORD PTR [esp+0x10]
ffff800000809434:	be 00 60 00 00       	mov    esi,0x6000
ffff800000809439:	c1 e2 03             	shl    edx,0x3
ffff80000080943c:	01 d6                	add    esi,edx
ffff80000080943e:	66 67 89 1e          	mov    WORD PTR [esi],bx
ffff800000809442:	66 67 89 46 02       	mov    WORD PTR [esi+0x2],ax
ffff800000809447:	c1 e8 10             	shr    eax,0x10
ffff80000080944a:	67 88 46 04          	mov    BYTE PTR [esi+0x4],al
ffff80000080944e:	c1 eb 10             	shr    ebx,0x10
ffff800000809451:	67 88 5e 06          	mov    BYTE PTR [esi+0x6],bl
ffff800000809455:	67 88 66 07          	mov    BYTE PTR [esi+0x7],ah
ffff800000809459:	67 09 4e 05          	or     DWORD PTR [esi+0x5],ecx
ffff80000080945d:	c3                   	ret    

ffff80000080945e <clock_c>:
clock_c():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/clock.c:9
#include <devman.h>
#include <disk.h>
extern int manage_proc_lock;
extern int cur_proc;
extern struct process *task;
void clock_c(){
ffff80000080945e:	f3 0f 1e fa          	endbr64 
ffff800000809462:	55                   	push   rbp
ffff800000809463:	48 89 e5             	mov    rbp,rsp
ffff800000809466:	41 57                	push   r15
ffff800000809468:	48 83 ec 08          	sub    rsp,0x8
ffff80000080946c:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080946c <clock_c+0xe>
ffff800000809473:	49 bb 8c 97 11 00 00 	movabs r11,0x11978c
ffff80000080947a:	00 00 00 
ffff80000080947d:	4c 01 da             	add    rdx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/clock.c:11
    //refresh_wnds();
    if(!manage_proc_lock)
ffff800000809480:	48 b8 c8 fc ff ff ff 	movabs rax,0xfffffffffffffcc8
ffff800000809487:	ff ff ff 
ffff80000080948a:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff80000080948e:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000809490:	85 c0                	test   eax,eax
ffff800000809492:	75 17                	jne    ffff8000008094ab <clock_c+0x4d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/clock.c:13
    {
        manage_proc();
ffff800000809494:	49 89 d7             	mov    r15,rdx
ffff800000809497:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080949c:	48 b9 ce 2e ee ff ff 	movabs rcx,0xffffffffffee2ece
ffff8000008094a3:	ff ff ff 
ffff8000008094a6:	48 01 d1             	add    rcx,rdx
ffff8000008094a9:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/clock.c:16
    }
    //puts("1 disk req executed.");
ffff8000008094ab:	90                   	nop
ffff8000008094ac:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff8000008094b0:	c9                   	leave  
ffff8000008094b1:	c3                   	ret    
ffff8000008094b2:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffff8000008094b9:	00 00 00 
ffff8000008094bc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

ffff8000008094c0 <clock>:
clock():
ffff8000008094c0:	50                   	push   rax
ffff8000008094c1:	53                   	push   rbx
ffff8000008094c2:	51                   	push   rcx
ffff8000008094c3:	52                   	push   rdx
ffff8000008094c4:	57                   	push   rdi
ffff8000008094c5:	56                   	push   rsi
ffff8000008094c6:	41 50                	push   r8
ffff8000008094c8:	41 51                	push   r9
ffff8000008094ca:	41 52                	push   r10
ffff8000008094cc:	41 53                	push   r11
ffff8000008094ce:	41 54                	push   r12
ffff8000008094d0:	41 55                	push   r13
ffff8000008094d2:	41 56                	push   r14
ffff8000008094d4:	41 57                	push   r15
ffff8000008094d6:	e8 9f c5 ff ff       	call   ffff800000805a7a <save_rsp>
ffff8000008094db:	66 8c c0             	mov    ax,es
ffff8000008094de:	50                   	push   rax
ffff8000008094df:	66 8c d8             	mov    ax,ds
ffff8000008094e2:	50                   	push   rax
ffff8000008094e3:	66 b8 10 00          	mov    ax,0x10
ffff8000008094e7:	8e c0                	mov    es,eax
ffff8000008094e9:	8e d8                	mov    ds,eax

ffff8000008094eb <clock.normal_part>:
clock.normal_part():
ffff8000008094eb:	b0 20                	mov    al,0x20
ffff8000008094ed:	e6 a0                	out    0xa0,al
ffff8000008094ef:	e6 20                	out    0x20,al
ffff8000008094f1:	e8 68 ff ff ff       	call   ffff80000080945e <clock_c>

ffff8000008094f6 <clock_ret>:
clock_ret():
ffff8000008094f6:	58                   	pop    rax
ffff8000008094f7:	8e d8                	mov    ds,eax
ffff8000008094f9:	58                   	pop    rax
ffff8000008094fa:	8e c0                	mov    es,eax
ffff8000008094fc:	41 5f                	pop    r15
ffff8000008094fe:	41 5e                	pop    r14
ffff800000809500:	41 5d                	pop    r13
ffff800000809502:	41 5c                	pop    r12
ffff800000809504:	41 5b                	pop    r11
ffff800000809506:	41 5a                	pop    r10
ffff800000809508:	41 59                	pop    r9
ffff80000080950a:	41 58                	pop    r8
ffff80000080950c:	5e                   	pop    rsi
ffff80000080950d:	5f                   	pop    rdi
ffff80000080950e:	5a                   	pop    rdx
ffff80000080950f:	59                   	pop    rcx
ffff800000809510:	5b                   	pop    rbx
ffff800000809511:	58                   	pop    rax
ffff800000809512:	48 cf                	iretq  

ffff800000809514 <execute>:
execute():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:118
    return ind;
}
*/

int execute(char *path, char **argv)
{
ffff800000809514:	f3 0f 1e fa          	endbr64 
ffff800000809518:	55                   	push   rbp
ffff800000809519:	48 89 e5             	mov    rbp,rsp
ffff80000080951c:	41 57                	push   r15
ffff80000080951e:	53                   	push   rbx
ffff80000080951f:	48 83 ec 20          	sub    rsp,0x20
ffff800000809523:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000809523 <execute+0xf>
ffff80000080952a:	49 bb d5 96 11 00 00 	movabs r11,0x1196d5
ffff800000809531:	00 00 00 
ffff800000809534:	4c 01 db             	add    rbx,r11
ffff800000809537:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff80000080953b:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:121
    //尚未切换到目标进程
    //syscall(SYSCALL_REG_PROC, load_pe,0,0,0,0);
    int fno=-1,cwd_fno=-1;
ffff80000080953f:	c7 45 e4 ff ff ff ff 	mov    DWORD PTR [rbp-0x1c],0xffffffff
ffff800000809546:	c7 45 e0 ff ff ff ff 	mov    DWORD PTR [rbp-0x20],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:122
    if((fno=sys_open(path, O_EXEC)) <0)return -1;
ffff80000080954d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000809551:	be 00 10 00 00       	mov    esi,0x1000
ffff800000809556:	48 89 c7             	mov    rdi,rax
ffff800000809559:	49 89 df             	mov    r15,rbx
ffff80000080955c:	48 b8 fe a5 ee ff ff 	movabs rax,0xffffffffffeea5fe
ffff800000809563:	ff ff ff 
ffff800000809566:	48 01 d8             	add    rax,rbx
ffff800000809569:	ff d0                	call   rax
ffff80000080956b:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
ffff80000080956e:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
ffff800000809572:	79 0a                	jns    ffff80000080957e <execute+0x6a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:122 (discriminator 1)
ffff800000809574:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000809579:	e9 81 00 00 00       	jmp    ffff8000008095ff <execute+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:124
    //
    char *p=path;
ffff80000080957e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000809582:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:125
    for(;*p!='\0';p++);
ffff800000809586:	eb 05                	jmp    ffff80000080958d <execute+0x79>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:125 (discriminator 2)
ffff800000809588:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:125 (discriminator 1)
ffff80000080958d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000809591:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000809594:	84 c0                	test   al,al
ffff800000809596:	75 f0                	jne    ffff800000809588 <execute+0x74>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:126
    for(;*p!='/'&&p>path;p--);
ffff800000809598:	eb 05                	jmp    ffff80000080959f <execute+0x8b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:126 (discriminator 3)
ffff80000080959a:	48 83 6d e8 01       	sub    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:126 (discriminator 1)
ffff80000080959f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008095a3:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008095a6:	3c 2f                	cmp    al,0x2f
ffff8000008095a8:	74 0a                	je     ffff8000008095b4 <execute+0xa0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:126 (discriminator 2)
ffff8000008095aa:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008095ae:	48 3b 45 d8          	cmp    rax,QWORD PTR [rbp-0x28]
ffff8000008095b2:	77 e6                	ja     ffff80000080959a <execute+0x86>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:127
    if(p>path)
ffff8000008095b4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008095b8:	48 3b 45 d8          	cmp    rax,QWORD PTR [rbp-0x28]
ffff8000008095bc:	76 3c                	jbe    ffff8000008095fa <execute+0xe6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:129
    {
        *p='\0';
ffff8000008095be:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008095c2:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:130
        if((cwd_fno=sys_open(path, O_DIRECTORY)) <0)return -1;
ffff8000008095c5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008095c9:	be 00 40 00 00       	mov    esi,0x4000
ffff8000008095ce:	48 89 c7             	mov    rdi,rax
ffff8000008095d1:	49 89 df             	mov    r15,rbx
ffff8000008095d4:	48 b8 fe a5 ee ff ff 	movabs rax,0xffffffffffeea5fe
ffff8000008095db:	ff ff ff 
ffff8000008095de:	48 01 d8             	add    rax,rbx
ffff8000008095e1:	ff d0                	call   rax
ffff8000008095e3:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
ffff8000008095e6:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
ffff8000008095ea:	79 07                	jns    ffff8000008095f3 <execute+0xdf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:130 (discriminator 1)
ffff8000008095ec:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff8000008095f1:	eb 0c                	jmp    ffff8000008095ff <execute+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:131
        *p='/';
ffff8000008095f3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008095f7:	c6 00 2f             	mov    BYTE PTR [rax],0x2f
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:136
    }
    // extern struct file opened[];
    extern struct process task[];
    // int pi= reg_proc(proc_start, &opened[cwd_fno], &opened[fno]);
    return 0;
ffff8000008095fa:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:137
}
ffff8000008095ff:	48 83 c4 20          	add    rsp,0x20
ffff800000809603:	5b                   	pop    rbx
ffff800000809604:	41 5f                	pop    r15
ffff800000809606:	5d                   	pop    rbp
ffff800000809607:	c3                   	ret    

ffff800000809608 <sys_execve>:
sys_execve():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:139

int sys_execve(char *path, int argc, char **argv) {
ffff800000809608:	f3 0f 1e fa          	endbr64 
ffff80000080960c:	55                   	push   rbp
ffff80000080960d:	48 89 e5             	mov    rbp,rsp
ffff800000809610:	41 57                	push   r15
ffff800000809612:	41 55                	push   r13
ffff800000809614:	41 54                	push   r12
ffff800000809616:	53                   	push   rbx
ffff800000809617:	48 83 c4 80          	add    rsp,0xffffffffffffff80
ffff80000080961b:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080961b <sys_execve+0x13>
ffff800000809622:	49 bb dd 95 11 00 00 	movabs r11,0x1195dd
ffff800000809629:	00 00 00 
ffff80000080962c:	4c 01 db             	add    rbx,r11
ffff80000080962f:	48 89 bd 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdi
ffff800000809636:	89 b5 74 ff ff ff    	mov    DWORD PTR [rbp-0x8c],esi
ffff80000080963c:	48 89 95 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:140
    int fno=-1,cwd_fno=-1;
ffff800000809643:	c7 45 b8 ff ff ff ff 	mov    DWORD PTR [rbp-0x48],0xffffffff
ffff80000080964a:	c7 45 b4 ff ff ff ff 	mov    DWORD PTR [rbp-0x4c],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:141
    if((fno=sys_open(path, O_EXEC)) <0)return -ENOENT;
ffff800000809651:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000809658:	be 00 10 00 00       	mov    esi,0x1000
ffff80000080965d:	48 89 c7             	mov    rdi,rax
ffff800000809660:	49 89 df             	mov    r15,rbx
ffff800000809663:	48 b8 fe a5 ee ff ff 	movabs rax,0xffffffffffeea5fe
ffff80000080966a:	ff ff ff 
ffff80000080966d:	48 01 d8             	add    rax,rbx
ffff800000809670:	ff d0                	call   rax
ffff800000809672:	89 45 b8             	mov    DWORD PTR [rbp-0x48],eax
ffff800000809675:	83 7d b8 00          	cmp    DWORD PTR [rbp-0x48],0x0
ffff800000809679:	79 0a                	jns    ffff800000809685 <sys_execve+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:141 (discriminator 1)
ffff80000080967b:	b8 d3 ff ff ff       	mov    eax,0xffffffd3
ffff800000809680:	e9 f9 03 00 00       	jmp    ffff800000809a7e <sys_execve+0x476>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:145

    //重新设置进程数据
    //清空原来的页表
    release_mmap(current);
ffff800000809685:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080968c:	ff ff ff 
ffff80000080968f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809693:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809696:	48 89 c7             	mov    rdi,rax
ffff800000809699:	49 89 df             	mov    r15,rbx
ffff80000080969c:	48 b8 4e 55 ee ff ff 	movabs rax,0xffffffffffee554e
ffff8000008096a3:	ff ff ff 
ffff8000008096a6:	48 01 d8             	add    rax,rbx
ffff8000008096a9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:149
    // current->regs.rsp=STACK_TOP;//清空栈
    extern TSS* tss;

    current->exef=current->openf[fno];//改变执行文件
ffff8000008096ab:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff8000008096b2:	ff ff ff 
ffff8000008096b5:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008096b9:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008096bc:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff8000008096c3:	ff ff ff 
ffff8000008096c6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008096ca:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008096cd:	8b 4d b8             	mov    ecx,DWORD PTR [rbp-0x48]
ffff8000008096d0:	48 63 c9             	movsxd rcx,ecx
ffff8000008096d3:	48 83 c1 1e          	add    rcx,0x1e
ffff8000008096d7:	48 8b 54 ca 08       	mov    rdx,QWORD PTR [rdx+rcx*8+0x8]
ffff8000008096dc:	48 89 90 f0 00 00 00 	mov    QWORD PTR [rax+0xf0],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:150
    off_t entry= load_elf(current->exef);
ffff8000008096e3:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff8000008096ea:	ff ff ff 
ffff8000008096ed:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008096f1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008096f4:	48 8b 80 f0 00 00 00 	mov    rax,QWORD PTR [rax+0xf0]
ffff8000008096fb:	48 89 c7             	mov    rdi,rax
ffff8000008096fe:	49 89 df             	mov    r15,rbx
ffff800000809701:	48 b8 60 7a ee ff ff 	movabs rax,0xffffffffffee7a60
ffff800000809708:	ff ff ff 
ffff80000080970b:	48 01 d8             	add    rax,rbx
ffff80000080970e:	ff d0                	call   rax
ffff800000809710:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:151
    if(entry==-1)
ffff800000809714:	48 83 7d a8 ff       	cmp    QWORD PTR [rbp-0x58],0xffffffffffffffff
ffff800000809719:	75 4d                	jne    ffff800000809768 <sys_execve+0x160>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:153
    {
        comprintf("failed execve, errcode:%d\n",current->regs.errcode);
ffff80000080971b:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff800000809722:	ff ff ff 
ffff800000809725:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809729:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080972c:	48 8b 80 2c 03 00 00 	mov    rax,QWORD PTR [rax+0x32c]
ffff800000809733:	48 89 c6             	mov    rsi,rax
ffff800000809736:	48 b8 28 d4 ff ff ff 	movabs rax,0xffffffffffffd428
ffff80000080973d:	ff ff ff 
ffff800000809740:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000809744:	48 89 c7             	mov    rdi,rax
ffff800000809747:	49 89 df             	mov    r15,rbx
ffff80000080974a:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080974f:	48 ba 3a 19 ef ff ff 	movabs rdx,0xffffffffffef193a
ffff800000809756:	ff ff ff 
ffff800000809759:	48 01 da             	add    rdx,rbx
ffff80000080975c:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:154
        return -1;
ffff80000080975e:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000809763:	e9 16 03 00 00       	jmp    ffff800000809a7e <sys_execve+0x476>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:156
    }
    if(sys_close(fno)<0)return -1;
ffff800000809768:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
ffff80000080976b:	89 c7                	mov    edi,eax
ffff80000080976d:	49 89 df             	mov    r15,rbx
ffff800000809770:	48 b8 32 ac ee ff ff 	movabs rax,0xffffffffffeeac32
ffff800000809777:	ff ff ff 
ffff80000080977a:	48 01 d8             	add    rax,rbx
ffff80000080977d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:159

    //sysret直接返回到新程序的main
    void *retp= (void *) entry;
ffff80000080977f:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000809783:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:160
    stack_store_regs *rs= (stack_store_regs *) (tss->ists[0] - sizeof(stack_store_regs));
ffff800000809787:	48 b8 b8 fd ff ff ff 	movabs rax,0xfffffffffffffdb8
ffff80000080978e:	ff ff ff 
ffff800000809791:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809795:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809798:	48 8b 40 24          	mov    rax,QWORD PTR [rax+0x24]
ffff80000080979c:	48 2d a8 00 00 00    	sub    rax,0xa8
ffff8000008097a2:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:161
    rs->rcx= (unsigned long) retp;//返回地址
ffff8000008097a6:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
ffff8000008097aa:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008097ae:	48 89 50 68          	mov    QWORD PTR [rax+0x68],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:163
    //第二个参数argv需要把内容从内核空间拷贝到用户堆里面
    size_t arglen=0;
ffff8000008097b2:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff8000008097b9:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:164
    for(int i=0;i<argc;i++){
ffff8000008097ba:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x0
ffff8000008097c1:	eb 3c                	jmp    ffff8000008097ff <sys_execve+0x1f7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:165 (discriminator 3)
        arglen+= strlen(argv[i])+1;
ffff8000008097c3:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff8000008097c6:	48 98                	cdqe   
ffff8000008097c8:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008097cf:	00 
ffff8000008097d0:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff8000008097d7:	48 01 d0             	add    rax,rdx
ffff8000008097da:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008097dd:	48 89 c7             	mov    rdi,rax
ffff8000008097e0:	49 89 df             	mov    r15,rbx
ffff8000008097e3:	48 b8 ab 21 ef ff ff 	movabs rax,0xffffffffffef21ab
ffff8000008097ea:	ff ff ff 
ffff8000008097ed:	48 01 d8             	add    rax,rbx
ffff8000008097f0:	ff d0                	call   rax
ffff8000008097f2:	83 c0 01             	add    eax,0x1
ffff8000008097f5:	48 98                	cdqe   
ffff8000008097f7:	48 01 45 d8          	add    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:164 (discriminator 3)
    for(int i=0;i<argc;i++){
ffff8000008097fb:	83 45 d4 01          	add    DWORD PTR [rbp-0x2c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:164 (discriminator 1)
ffff8000008097ff:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000809802:	3b 85 74 ff ff ff    	cmp    eax,DWORD PTR [rbp-0x8c]
ffff800000809808:	7c b9                	jl     ffff8000008097c3 <sys_execve+0x1bb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:168
    }
    //参数放栈
    int tot_argsz=0;
ffff80000080980a:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:169
    for(int i=0;i<argc;i++){
ffff800000809811:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
ffff800000809818:	eb 3f                	jmp    ffff800000809859 <sys_execve+0x251>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:170 (discriminator 3)
        int tmpsz=strlen(argv[i])+1;
ffff80000080981a:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080981d:	48 98                	cdqe   
ffff80000080981f:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000809826:	00 
ffff800000809827:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080982e:	48 01 d0             	add    rax,rdx
ffff800000809831:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809834:	48 89 c7             	mov    rdi,rax
ffff800000809837:	49 89 df             	mov    r15,rbx
ffff80000080983a:	48 b8 ab 21 ef ff ff 	movabs rax,0xffffffffffef21ab
ffff800000809841:	ff ff ff 
ffff800000809844:	48 01 d8             	add    rax,rbx
ffff800000809847:	ff d0                	call   rax
ffff800000809849:	83 c0 01             	add    eax,0x1
ffff80000080984c:	89 45 84             	mov    DWORD PTR [rbp-0x7c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:171 (discriminator 3)
        tot_argsz+=tmpsz;
ffff80000080984f:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
ffff800000809852:	01 45 d0             	add    DWORD PTR [rbp-0x30],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:169 (discriminator 3)
    for(int i=0;i<argc;i++){
ffff800000809855:	83 45 cc 01          	add    DWORD PTR [rbp-0x34],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:169 (discriminator 1)
ffff800000809859:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080985c:	3b 85 74 ff ff ff    	cmp    eax,DWORD PTR [rbp-0x8c]
ffff800000809862:	7c b6                	jl     ffff80000080981a <sys_execve+0x212>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:175
    }
    //初始需要的栈大小为argv指向的字符串大小之和+argv指针数组大小+
    // argc+一个main函数返回地址+一个rbp入栈空间
    if(tot_argsz+argc*8+24>=PAGE_4K_SIZE){
ffff800000809864:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
ffff80000080986a:	8d 14 c5 00 00 00 00 	lea    edx,[rax*8+0x0]
ffff800000809871:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000809874:	01 d0                	add    eax,edx
ffff800000809876:	3d e7 0f 00 00       	cmp    eax,0xfe7
ffff80000080987b:	0f 8e 9c 00 00 00    	jle    ffff80000080991d <sys_execve+0x315>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:176
        int needed=(tot_argsz+PAGE_4K_SIZE-1)/PAGE_4K_SIZE-1;
ffff800000809881:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000809884:	05 ff 0f 00 00       	add    eax,0xfff
ffff800000809889:	8d 90 ff 0f 00 00    	lea    edx,[rax+0xfff]
ffff80000080988f:	85 c0                	test   eax,eax
ffff800000809891:	0f 48 c2             	cmovs  eax,edx
ffff800000809894:	c1 f8 0c             	sar    eax,0xc
ffff800000809897:	83 e8 01             	sub    eax,0x1
ffff80000080989a:	89 45 94             	mov    DWORD PTR [rbp-0x6c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:177
        for(int i=0;i<needed;i++){
ffff80000080989d:	c7 45 c8 00 00 00 00 	mov    DWORD PTR [rbp-0x38],0x0
ffff8000008098a4:	eb 6f                	jmp    ffff800000809915 <sys_execve+0x30d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:178 (discriminator 3)
            smmap(pmalloc(PAGE_4K_SIZE),STACK_TOP-PAGE_4K_SIZE*(i+1),PAGE_PRESENT|PAGE_RWX|PAGE_FOR_ALL,current->pml4);
ffff8000008098a6:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff8000008098ad:	ff ff ff 
ffff8000008098b0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008098b4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008098b7:	4c 8b a0 e0 00 00 00 	mov    r12,QWORD PTR [rax+0xe0]
ffff8000008098be:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
ffff8000008098c1:	83 c0 01             	add    eax,0x1
ffff8000008098c4:	c1 e0 0c             	shl    eax,0xc
ffff8000008098c7:	48 63 d0             	movsxd rdx,eax
ffff8000008098ca:	48 b8 00 f0 ff ff ff 	movabs rax,0x7ffffffff000
ffff8000008098d1:	7f 00 00 
ffff8000008098d4:	48 29 d0             	sub    rax,rdx
ffff8000008098d7:	49 89 c5             	mov    r13,rax
ffff8000008098da:	bf 00 10 00 00       	mov    edi,0x1000
ffff8000008098df:	49 89 df             	mov    r15,rbx
ffff8000008098e2:	48 b8 83 0a ee ff ff 	movabs rax,0xffffffffffee0a83
ffff8000008098e9:	ff ff ff 
ffff8000008098ec:	48 01 d8             	add    rax,rbx
ffff8000008098ef:	ff d0                	call   rax
ffff8000008098f1:	4c 89 e1             	mov    rcx,r12
ffff8000008098f4:	ba 07 00 00 00       	mov    edx,0x7
ffff8000008098f9:	4c 89 ee             	mov    rsi,r13
ffff8000008098fc:	48 89 c7             	mov    rdi,rax
ffff8000008098ff:	49 89 df             	mov    r15,rbx
ffff800000809902:	48 b8 d4 f1 ed ff ff 	movabs rax,0xffffffffffedf1d4
ffff800000809909:	ff ff ff 
ffff80000080990c:	48 01 d8             	add    rax,rbx
ffff80000080990f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:177 (discriminator 3)
        for(int i=0;i<needed;i++){
ffff800000809911:	83 45 c8 01          	add    DWORD PTR [rbp-0x38],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:177 (discriminator 1)
ffff800000809915:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
ffff800000809918:	3b 45 94             	cmp    eax,DWORD PTR [rbp-0x6c]
ffff80000080991b:	7c 89                	jl     ffff8000008098a6 <sys_execve+0x29e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:181
        }
    }
    unsigned long* argp_aryp=STACK_TOP-tot_argsz;
ffff80000080991d:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000809920:	48 63 d0             	movsxd rdx,eax
ffff800000809923:	48 b8 00 f0 ff ff ff 	movabs rax,0x7ffffffff000
ffff80000080992a:	7f 00 00 
ffff80000080992d:	48 29 d0             	sub    rax,rdx
ffff800000809930:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:182
    argp_aryp-=argc;
ffff800000809934:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
ffff80000080993a:	48 98                	cdqe   
ffff80000080993c:	48 c1 e0 03          	shl    rax,0x3
ffff800000809940:	48 f7 d8             	neg    rax
ffff800000809943:	48 01 45 88          	add    QWORD PTR [rbp-0x78],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:184

    char* p= STACK_TOP;
ffff800000809947:	48 b8 00 f0 ff ff ff 	movabs rax,0x7ffffffff000
ffff80000080994e:	7f 00 00 
ffff800000809951:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:185
    for(int i=0;i<argc;i++){
ffff800000809955:	c7 45 bc 00 00 00 00 	mov    DWORD PTR [rbp-0x44],0x0
ffff80000080995c:	e9 90 00 00 00       	jmp    ffff8000008099f1 <sys_execve+0x3e9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:186 (discriminator 3)
        p-=strlen(argv[i])+1;
ffff800000809961:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
ffff800000809964:	48 98                	cdqe   
ffff800000809966:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080996d:	00 
ffff80000080996e:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff800000809975:	48 01 d0             	add    rax,rdx
ffff800000809978:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080997b:	48 89 c7             	mov    rdi,rax
ffff80000080997e:	49 89 df             	mov    r15,rbx
ffff800000809981:	48 b8 ab 21 ef ff ff 	movabs rax,0xffffffffffef21ab
ffff800000809988:	ff ff ff 
ffff80000080998b:	48 01 d8             	add    rax,rbx
ffff80000080998e:	ff d0                	call   rax
ffff800000809990:	83 c0 01             	add    eax,0x1
ffff800000809993:	48 98                	cdqe   
ffff800000809995:	48 f7 d8             	neg    rax
ffff800000809998:	48 01 45 c0          	add    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:187 (discriminator 3)
        strcpy(p,argv[i]);
ffff80000080999c:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
ffff80000080999f:	48 98                	cdqe   
ffff8000008099a1:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008099a8:	00 
ffff8000008099a9:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff8000008099b0:	48 01 d0             	add    rax,rdx
ffff8000008099b3:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008099b6:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008099ba:	48 89 d6             	mov    rsi,rdx
ffff8000008099bd:	48 89 c7             	mov    rdi,rax
ffff8000008099c0:	49 89 df             	mov    r15,rbx
ffff8000008099c3:	48 b8 de 1e ef ff ff 	movabs rax,0xffffffffffef1ede
ffff8000008099ca:	ff ff ff 
ffff8000008099cd:	48 01 d8             	add    rax,rbx
ffff8000008099d0:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:188 (discriminator 3)
        argp_aryp[i]=p;
ffff8000008099d2:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
ffff8000008099d5:	48 98                	cdqe   
ffff8000008099d7:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff8000008099de:	00 
ffff8000008099df:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff8000008099e3:	48 01 c2             	add    rdx,rax
ffff8000008099e6:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008099ea:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:185 (discriminator 3)
    for(int i=0;i<argc;i++){
ffff8000008099ed:	83 45 bc 01          	add    DWORD PTR [rbp-0x44],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:185 (discriminator 1)
ffff8000008099f1:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
ffff8000008099f4:	3b 85 74 ff ff ff    	cmp    eax,DWORD PTR [rbp-0x8c]
ffff8000008099fa:	0f 8c 61 ff ff ff    	jl     ffff800000809961 <sys_execve+0x359>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:192
    }
    
    //第一个参数argc
    if(current->dl){
ffff800000809a00:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff800000809a07:	ff ff ff 
ffff800000809a0a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809a0e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809a11:	8b 80 5c 03 00 00    	mov    eax,DWORD PTR [rax+0x35c]
ffff800000809a17:	85 c0                	test   eax,eax
ffff800000809a19:	74 41                	je     ffff800000809a5c <sys_execve+0x454>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:193
        rs->rsi=current->dl;
ffff800000809a1b:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff800000809a22:	ff ff ff 
ffff800000809a25:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809a29:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809a2c:	8b 80 5c 03 00 00    	mov    eax,DWORD PTR [rax+0x35c]
ffff800000809a32:	48 63 d0             	movsxd rdx,eax
ffff800000809a35:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000809a39:	48 89 50 50          	mov    QWORD PTR [rax+0x50],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:194
        rs->rdi=argc;
ffff800000809a3d:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
ffff800000809a43:	48 63 d0             	movsxd rdx,eax
ffff800000809a46:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000809a4a:	48 89 50 58          	mov    QWORD PTR [rax+0x58],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:195
        rs->rdx=argp_aryp;
ffff800000809a4e:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
ffff800000809a52:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000809a56:	48 89 50 60          	mov    QWORD PTR [rax+0x60],rdx
ffff800000809a5a:	eb 1d                	jmp    ffff800000809a79 <sys_execve+0x471>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:197
    }else{
        rs->rsi=argc;
ffff800000809a5c:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
ffff800000809a62:	48 63 d0             	movsxd rdx,eax
ffff800000809a65:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000809a69:	48 89 50 50          	mov    QWORD PTR [rax+0x50],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:198
        rs->rdi=argp_aryp;
ffff800000809a6d:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
ffff800000809a71:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000809a75:	48 89 50 58          	mov    QWORD PTR [rax+0x58],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:204
    }
    
    //以下部分是临时测试代码
//    int (*pmain)(int argc,char **argv)=(int (*)(int, char **)) entry;
//    pmain(argc, (char **) rs->rdi);
    return 0;
ffff800000809a79:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:205
}
ffff800000809a7e:	48 83 ec 80          	sub    rsp,0xffffffffffffff80
ffff800000809a82:	5b                   	pop    rbx
ffff800000809a83:	41 5c                	pop    r12
ffff800000809a85:	41 5d                	pop    r13
ffff800000809a87:	41 5f                	pop    r15
ffff800000809a89:	5d                   	pop    rbp
ffff800000809a8a:	c3                   	ret    

ffff800000809a8b <exec_call>:
exec_call():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:207
int exec_call(char *path)
{
ffff800000809a8b:	f3 0f 1e fa          	endbr64 
ffff800000809a8f:	55                   	push   rbp
ffff800000809a90:	48 89 e5             	mov    rbp,rsp
ffff800000809a93:	41 57                	push   r15
ffff800000809a95:	53                   	push   rbx
ffff800000809a96:	48 83 ec 20          	sub    rsp,0x20
ffff800000809a9a:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000809a9a <exec_call+0xf>
ffff800000809aa1:	49 bb 5e 91 11 00 00 	movabs r11,0x11915e
ffff800000809aa8:	00 00 00 
ffff800000809aab:	4c 01 db             	add    rbx,r11
ffff800000809aae:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:208
    int pi= execute(path, NULL);
ffff800000809ab2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000809ab6:	be 00 00 00 00       	mov    esi,0x0
ffff800000809abb:	48 89 c7             	mov    rdi,rax
ffff800000809abe:	49 89 df             	mov    r15,rbx
ffff800000809ac1:	48 b8 1c 69 ee ff ff 	movabs rax,0xffffffffffee691c
ffff800000809ac8:	ff ff ff 
ffff800000809acb:	48 01 d8             	add    rax,rbx
ffff800000809ace:	ff d0                	call   rax
ffff800000809ad0:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:209
    int tss= _TSS_IND(pi)*8;
ffff800000809ad3:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000809ad6:	01 c0                	add    eax,eax
ffff800000809ad8:	83 c0 05             	add    eax,0x5
ffff800000809adb:	c1 e0 03             	shl    eax,0x3
ffff800000809ade:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:212
    extern struct process task[];
    extern int cur_proc;
    switch_proc_tss(pi);
ffff800000809ae1:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000809ae4:	89 c7                	mov    edi,eax
ffff800000809ae6:	49 89 df             	mov    r15,rbx
ffff800000809ae9:	48 b8 3c 32 ee ff ff 	movabs rax,0xffffffffffee323c
ffff800000809af0:	ff ff ff 
ffff800000809af3:	48 01 d8             	add    rax,rbx
ffff800000809af6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:213
    while(task[pi].stat != TASK_ZOMBIE);
ffff800000809af8:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:213 (discriminator 1)
ffff800000809af9:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000809b00:	ff ff ff 
ffff800000809b03:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000809b07:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000809b0a:	48 63 d0             	movsxd rdx,eax
ffff800000809b0d:	48 89 d0             	mov    rax,rdx
ffff800000809b10:	48 01 c0             	add    rax,rax
ffff800000809b13:	48 01 d0             	add    rax,rdx
ffff800000809b16:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000809b1d:	00 
ffff800000809b1e:	48 01 d0             	add    rax,rdx
ffff800000809b21:	48 c1 e0 05          	shl    rax,0x5
ffff800000809b25:	48 01 c8             	add    rax,rcx
ffff800000809b28:	48 83 c0 10          	add    rax,0x10
ffff800000809b2c:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000809b2f:	83 f8 04             	cmp    eax,0x4
ffff800000809b32:	75 c5                	jne    ffff800000809af9 <exec_call+0x6e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:214
    return task[pi].exit_code;
ffff800000809b34:	48 b8 60 fe ff ff ff 	movabs rax,0xfffffffffffffe60
ffff800000809b3b:	ff ff ff 
ffff800000809b3e:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff800000809b42:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000809b45:	48 63 d0             	movsxd rdx,eax
ffff800000809b48:	48 89 d0             	mov    rax,rdx
ffff800000809b4b:	48 01 c0             	add    rax,rax
ffff800000809b4e:	48 01 d0             	add    rax,rdx
ffff800000809b51:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000809b58:	00 
ffff800000809b59:	48 01 d0             	add    rax,rdx
ffff800000809b5c:	48 c1 e0 05          	shl    rax,0x5
ffff800000809b60:	48 01 c8             	add    rax,rcx
ffff800000809b63:	48 83 c0 20          	add    rax,0x20
ffff800000809b67:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:215
}
ffff800000809b6a:	48 83 c4 20          	add    rsp,0x20
ffff800000809b6e:	5b                   	pop    rbx
ffff800000809b6f:	41 5f                	pop    r15
ffff800000809b71:	5d                   	pop    rbp
ffff800000809b72:	c3                   	ret    

ffff800000809b73 <proc_start>:
proc_start():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:217
int proc_start()
{
ffff800000809b73:	f3 0f 1e fa          	endbr64 
ffff800000809b77:	55                   	push   rbp
ffff800000809b78:	48 89 e5             	mov    rbp,rsp
ffff800000809b7b:	41 57                	push   r15
ffff800000809b7d:	53                   	push   rbx
ffff800000809b7e:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000809b7e <proc_start+0xb>
ffff800000809b85:	49 bb 7a 90 11 00 00 	movabs r11,0x11907a
ffff800000809b8c:	00 00 00 
ffff800000809b8f:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:220
    extern struct process task[];
    extern int cur_proc;
    load_pe(&task[cur_proc]);
ffff800000809b92:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff800000809b99:	ff ff ff 
ffff800000809b9c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809ba0:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000809ba2:	48 63 d0             	movsxd rdx,eax
ffff800000809ba5:	48 89 d0             	mov    rax,rdx
ffff800000809ba8:	48 01 c0             	add    rax,rax
ffff800000809bab:	48 01 d0             	add    rax,rdx
ffff800000809bae:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff800000809bb5:	00 
ffff800000809bb6:	48 01 d0             	add    rax,rdx
ffff800000809bb9:	48 c1 e0 05          	shl    rax,0x5
ffff800000809bbd:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff800000809bc4:	ff ff ff 
ffff800000809bc7:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000809bcb:	48 01 d0             	add    rax,rdx
ffff800000809bce:	48 89 c7             	mov    rdi,rax
ffff800000809bd1:	49 89 df             	mov    r15,rbx
ffff800000809bd4:	48 b8 08 70 ee ff ff 	movabs rax,0xffffffffffee7008
ffff800000809bdb:	ff ff ff 
ffff800000809bde:	48 01 d8             	add    rax,rbx
ffff800000809be1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:222
    //释放进程资源
    sys_exit(0);
ffff800000809be3:	bf 00 00 00 00       	mov    edi,0x0
ffff800000809be8:	49 89 df             	mov    r15,rbx
ffff800000809beb:	48 b8 21 3e ee ff ff 	movabs rax,0xffffffffffee3e21
ffff800000809bf2:	ff ff ff 
ffff800000809bf5:	48 01 d8             	add    rax,rbx
ffff800000809bf8:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:223
}
ffff800000809bfa:	90                   	nop
ffff800000809bfb:	5b                   	pop    rbx
ffff800000809bfc:	41 5f                	pop    r15
ffff800000809bfe:	5d                   	pop    rbp
ffff800000809bff:	c3                   	ret    

ffff800000809c00 <load_pe>:
load_pe():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:226
//在cr3切换到目标进程下的加载程序
int load_pe(struct process *proc)
{
ffff800000809c00:	f3 0f 1e fa          	endbr64 
ffff800000809c04:	55                   	push   rbp
ffff800000809c05:	48 89 e5             	mov    rbp,rsp
ffff800000809c08:	41 57                	push   r15
ffff800000809c0a:	53                   	push   rbx
ffff800000809c0b:	48 81 ec 10 03 00 00 	sub    rsp,0x310
ffff800000809c12:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000809c12 <load_pe+0x12>
ffff800000809c19:	49 bb e6 8f 11 00 00 	movabs r11,0x118fe6
ffff800000809c20:	00 00 00 
ffff800000809c23:	4c 01 db             	add    rbx,r11
ffff800000809c26:	48 89 bd e8 fc ff ff 	mov    QWORD PTR [rbp-0x318],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:228
    // 读取文件头
    struct file *f=proc->exef;
ffff800000809c2d:	48 8b 85 e8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x318]
ffff800000809c34:	48 8b 80 f0 00 00 00 	mov    rax,QWORD PTR [rax+0xf0]
ffff800000809c3b:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:229
    int exefno=-1;
ffff800000809c3f:	c7 45 ec ff ff ff ff 	mov    DWORD PTR [rbp-0x14],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:230
    for(int i=0;i<MAX_PROC_OPENF;i++)
ffff800000809c46:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff800000809c4d:	eb 32                	jmp    ffff800000809c81 <load_pe+0x81>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:231
        if(current->openf[i]==f)
ffff800000809c4f:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff800000809c56:	ff ff ff 
ffff800000809c59:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000809c5d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000809c60:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff800000809c63:	48 63 d2             	movsxd rdx,edx
ffff800000809c66:	48 83 c2 1e          	add    rdx,0x1e
ffff800000809c6a:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff800000809c6f:	48 39 45 88          	cmp    QWORD PTR [rbp-0x78],rax
ffff800000809c73:	75 08                	jne    ffff800000809c7d <load_pe+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:233
        {
            exefno=i;
ffff800000809c75:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000809c78:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:234
            break;
ffff800000809c7b:	eb 0a                	jmp    ffff800000809c87 <load_pe+0x87>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:230 (discriminator 2)
    for(int i=0;i<MAX_PROC_OPENF;i++)
ffff800000809c7d:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:230 (discriminator 1)
ffff800000809c81:	83 7d e8 1f          	cmp    DWORD PTR [rbp-0x18],0x1f
ffff800000809c85:	7e c8                	jle    ffff800000809c4f <load_pe+0x4f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:236
        }
    if(exefno==-1)return ERR;
ffff800000809c87:	83 7d ec ff          	cmp    DWORD PTR [rbp-0x14],0xffffffff
ffff800000809c8b:	75 0a                	jne    ffff800000809c97 <load_pe+0x97>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:236 (discriminator 1)
ffff800000809c8d:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000809c92:	e9 a0 08 00 00       	jmp    ffff80000080a537 <load_pe+0x937>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:240

    IMAGE_DOS_HEADER tdh;
    IMAGE_NT_HEADERS32 tnth;
    sys_read(exefno, &tdh, sizeof(tdh));
ffff800000809c97:	48 8d 8d 30 fe ff ff 	lea    rcx,[rbp-0x1d0]
ffff800000809c9e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000809ca1:	ba 44 00 00 00       	mov    edx,0x44
ffff800000809ca6:	48 89 ce             	mov    rsi,rcx
ffff800000809ca9:	89 c7                	mov    edi,eax
ffff800000809cab:	49 89 df             	mov    r15,rbx
ffff800000809cae:	48 b8 3b ad ee ff ff 	movabs rax,0xffffffffffeead3b
ffff800000809cb5:	ff ff ff 
ffff800000809cb8:	48 01 d8             	add    rax,rbx
ffff800000809cbb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:241
    sys_lseek(exefno,tdh.e_lfanew,SEEK_SET);
ffff800000809cbd:	48 8b 85 6c fe ff ff 	mov    rax,QWORD PTR [rbp-0x194]
ffff800000809cc4:	48 89 c1             	mov    rcx,rax
ffff800000809cc7:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000809cca:	ba 00 00 00 00       	mov    edx,0x0
ffff800000809ccf:	48 89 ce             	mov    rsi,rcx
ffff800000809cd2:	89 c7                	mov    edi,eax
ffff800000809cd4:	49 89 df             	mov    r15,rbx
ffff800000809cd7:	48 b8 d7 ae ee ff ff 	movabs rax,0xffffffffffeeaed7
ffff800000809cde:	ff ff ff 
ffff800000809ce1:	48 01 d8             	add    rax,rbx
ffff800000809ce4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:242
    sys_read(exefno, &tnth, sizeof(tnth));
ffff800000809ce6:	48 8d 8d 20 fd ff ff 	lea    rcx,[rbp-0x2e0]
ffff800000809ced:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000809cf0:	ba 0c 01 00 00       	mov    edx,0x10c
ffff800000809cf5:	48 89 ce             	mov    rsi,rcx
ffff800000809cf8:	89 c7                	mov    edi,eax
ffff800000809cfa:	49 89 df             	mov    r15,rbx
ffff800000809cfd:	48 b8 3b ad ee ff ff 	movabs rax,0xffffffffffeead3b
ffff800000809d04:	ff ff ff 
ffff800000809d07:	48 01 d8             	add    rax,rbx
ffff800000809d0a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:245

    //是否需要移动base(先不检查)
    off_t nbase=tnth.OptionalHeader.ImageBase;
ffff800000809d0c:	48 8b 85 54 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2ac]
ffff800000809d13:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:246
    int pgn=tnth.OptionalHeader.SizeOfImage/PAGE_SIZE;
ffff800000809d17:	8b 85 74 fd ff ff    	mov    eax,DWORD PTR [rbp-0x28c]
ffff800000809d1d:	c1 e8 0c             	shr    eax,0xc
ffff800000809d20:	89 85 7c ff ff ff    	mov    DWORD PTR [rbp-0x84],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:271
//        break;
//    }

    //proc->tss.eip=tnth.OptionalHeader.AddressOfEntryPoint+nbase;
    //存放文件头
    sys_lseek(exefno,0,SEEK_SET);
ffff800000809d26:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000809d29:	ba 00 00 00 00       	mov    edx,0x0
ffff800000809d2e:	be 00 00 00 00       	mov    esi,0x0
ffff800000809d33:	89 c7                	mov    edi,eax
ffff800000809d35:	49 89 df             	mov    r15,rbx
ffff800000809d38:	48 b8 d7 ae ee ff ff 	movabs rax,0xffffffffffeeaed7
ffff800000809d3f:	ff ff ff 
ffff800000809d42:	48 01 d8             	add    rax,rbx
ffff800000809d45:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:272
    sys_read(exefno, nbase, PAGE_SIZE);
ffff800000809d47:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
ffff800000809d4b:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000809d4e:	ba 00 10 00 00       	mov    edx,0x1000
ffff800000809d53:	48 89 ce             	mov    rsi,rcx
ffff800000809d56:	89 c7                	mov    edi,eax
ffff800000809d58:	49 89 df             	mov    r15,rbx
ffff800000809d5b:	48 b8 3b ad ee ff ff 	movabs rax,0xffffffffffeead3b
ffff800000809d62:	ff ff ff 
ffff800000809d65:	48 01 d8             	add    rax,rbx
ffff800000809d68:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:274
    //dos头
    PIMAGE_DOS_HEADER dosh=nbase;
ffff800000809d6a:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000809d6e:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:275
    PIMAGE_NT_HEADERS64 nth=nbase+dosh->e_lfanew;
ffff800000809d75:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000809d7c:	48 8b 50 3c          	mov    rdx,QWORD PTR [rax+0x3c]
ffff800000809d80:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000809d84:	48 01 d0             	add    rax,rdx
ffff800000809d87:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:276
    PIMAGE_FILE_HEADER fh=&nth->FileHeader;
ffff800000809d8e:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff800000809d95:	48 83 c0 04          	add    rax,0x4
ffff800000809d99:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:279
    //为新进程分配内存页
    //计算所需的页
    int prog_size=nth->OptionalHeader.SizeOfImage;
ffff800000809da0:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff800000809da7:	8b 40 50             	mov    eax,DWORD PTR [rax+0x50]
ffff800000809daa:	89 85 5c ff ff ff    	mov    DWORD PTR [rbp-0xa4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:280
    int page_count=prog_size/4096;
ffff800000809db0:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
ffff800000809db6:	8d 90 ff 0f 00 00    	lea    edx,[rax+0xfff]
ffff800000809dbc:	85 c0                	test   eax,eax
ffff800000809dbe:	0f 48 c2             	cmovs  eax,edx
ffff800000809dc1:	c1 f8 0c             	sar    eax,0xc
ffff800000809dc4:	89 85 58 ff ff ff    	mov    DWORD PTR [rbp-0xa8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:282

    off_t shell_addr=nth->OptionalHeader.AddressOfEntryPoint+nbase;
ffff800000809dca:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff800000809dd1:	8b 40 28             	mov    eax,DWORD PTR [rax+0x28]
ffff800000809dd4:	89 c2                	mov    edx,eax
ffff800000809dd6:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000809dda:	48 01 d0             	add    rax,rdx
ffff800000809ddd:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:283
    int page_index_item_count=page_count/1024+page_count%1024==0?0:1;
ffff800000809de4:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
ffff800000809dea:	8d 90 ff 03 00 00    	lea    edx,[rax+0x3ff]
ffff800000809df0:	85 c0                	test   eax,eax
ffff800000809df2:	0f 48 c2             	cmovs  eax,edx
ffff800000809df5:	c1 f8 0a             	sar    eax,0xa
ffff800000809df8:	89 c1                	mov    ecx,eax
ffff800000809dfa:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
ffff800000809e00:	99                   	cdq    
ffff800000809e01:	c1 ea 16             	shr    edx,0x16
ffff800000809e04:	01 d0                	add    eax,edx
ffff800000809e06:	25 ff 03 00 00       	and    eax,0x3ff
ffff800000809e0b:	29 d0                	sub    eax,edx
ffff800000809e0d:	01 c8                	add    eax,ecx
ffff800000809e0f:	85 c0                	test   eax,eax
ffff800000809e11:	0f 95 c0             	setne  al
ffff800000809e14:	0f b6 c0             	movzx  eax,al
ffff800000809e17:	89 85 4c ff ff ff    	mov    DWORD PTR [rbp-0xb4],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:284
    int start_pgind_item=shell_addr/PAGE_INDEX_SIZE;
ffff800000809e1d:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
ffff800000809e24:	48 c1 e8 15          	shr    rax,0x15
ffff800000809e28:	89 85 48 ff ff ff    	mov    DWORD PTR [rbp-0xb8],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:287

    //sys_read sections
    PIMAGE_SECTION_HEADER psec=(u32)nth+sizeof(IMAGE_NT_HEADERS32);
ffff800000809e2e:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff800000809e35:	89 c0                	mov    eax,eax
ffff800000809e37:	48 05 0c 01 00 00    	add    rax,0x10c
ffff800000809e3d:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:289
    int data_start=sizeof(IMAGE_DOS_HEADER)+sizeof(IMAGE_NT_HEADERS32)+\
    nth->FileHeader.NumberOfSections*sizeof(IMAGE_SECTION_HEADER);
ffff800000809e41:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff800000809e48:	0f b7 40 06          	movzx  eax,WORD PTR [rax+0x6]
ffff800000809e4c:	0f b7 d0             	movzx  edx,ax
ffff800000809e4f:	89 d0                	mov    eax,edx
ffff800000809e51:	c1 e0 02             	shl    eax,0x2
ffff800000809e54:	01 d0                	add    eax,edx
ffff800000809e56:	c1 e0 03             	shl    eax,0x3
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:288
    int data_start=sizeof(IMAGE_DOS_HEADER)+sizeof(IMAGE_NT_HEADERS32)+\
ffff800000809e59:	05 50 01 00 00       	add    eax,0x150
ffff800000809e5e:	89 85 44 ff ff ff    	mov    DWORD PTR [rbp-0xbc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:290
    int align=nth->OptionalHeader.FileAlignment;
ffff800000809e64:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff800000809e6b:	8b 40 3c             	mov    eax,DWORD PTR [rax+0x3c]
ffff800000809e6e:	89 85 40 ff ff ff    	mov    DWORD PTR [rbp-0xc0],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:291
    data_start=data_start%align?data_start-data_start%align+align:data_start;
ffff800000809e74:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
ffff800000809e7a:	99                   	cdq    
ffff800000809e7b:	f7 bd 40 ff ff ff    	idiv   DWORD PTR [rbp-0xc0]
ffff800000809e81:	89 d0                	mov    eax,edx
ffff800000809e83:	85 c0                	test   eax,eax
ffff800000809e85:	74 23                	je     ffff800000809eaa <load_pe+0x2aa>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:291 (discriminator 1)
ffff800000809e87:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
ffff800000809e8d:	99                   	cdq    
ffff800000809e8e:	f7 bd 40 ff ff ff    	idiv   DWORD PTR [rbp-0xc0]
ffff800000809e94:	89 d1                	mov    ecx,edx
ffff800000809e96:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
ffff800000809e9c:	29 c8                	sub    eax,ecx
ffff800000809e9e:	89 c2                	mov    edx,eax
ffff800000809ea0:	8b 85 40 ff ff ff    	mov    eax,DWORD PTR [rbp-0xc0]
ffff800000809ea6:	01 d0                	add    eax,edx
ffff800000809ea8:	eb 06                	jmp    ffff800000809eb0 <load_pe+0x2b0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:291 (discriminator 2)
ffff800000809eaa:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:291 (discriminator 4)
ffff800000809eb0:	89 85 44 ff ff ff    	mov    DWORD PTR [rbp-0xbc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:292 (discriminator 4)
    for(int i=0;i<nth->FileHeader.NumberOfSections;i++,psec++)
ffff800000809eb6:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
ffff800000809ebd:	e9 85 00 00 00       	jmp    ffff800000809f47 <load_pe+0x347>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:294
    {
        int disca=psec->Characteristics&IMAGE_SCN_MEM_DISCARDABLE;
ffff800000809ec2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000809ec6:	8b 40 24             	mov    eax,DWORD PTR [rax+0x24]
ffff800000809ec9:	25 00 00 00 02       	and    eax,0x2000000
ffff800000809ece:	89 85 b0 fe ff ff    	mov    DWORD PTR [rbp-0x150],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:295
        if(disca)
ffff800000809ed4:	83 bd b0 fe ff ff 00 	cmp    DWORD PTR [rbp-0x150],0x0
ffff800000809edb:	75 60                	jne    ffff800000809f3d <load_pe+0x33d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:298
            continue;
        //直接读，缺页内核解决
        sys_lseek(exefno,psec->PointerToRawData,SEEK_SET);
ffff800000809edd:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000809ee1:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
ffff800000809ee4:	89 c1                	mov    ecx,eax
ffff800000809ee6:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000809ee9:	ba 00 00 00 00       	mov    edx,0x0
ffff800000809eee:	48 89 ce             	mov    rsi,rcx
ffff800000809ef1:	89 c7                	mov    edi,eax
ffff800000809ef3:	49 89 df             	mov    r15,rbx
ffff800000809ef6:	48 b8 d7 ae ee ff ff 	movabs rax,0xffffffffffeeaed7
ffff800000809efd:	ff ff ff 
ffff800000809f00:	48 01 d8             	add    rax,rbx
ffff800000809f03:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:299
        sys_read(exefno, psec->VirtualAddress + nbase,  psec->SizeOfRawData);
ffff800000809f05:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000809f09:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff800000809f0c:	89 c2                	mov    edx,eax
ffff800000809f0e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000809f12:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff800000809f15:	89 c1                	mov    ecx,eax
ffff800000809f17:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000809f1b:	48 01 c8             	add    rax,rcx
ffff800000809f1e:	48 89 c1             	mov    rcx,rax
ffff800000809f21:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000809f24:	48 89 ce             	mov    rsi,rcx
ffff800000809f27:	89 c7                	mov    edi,eax
ffff800000809f29:	49 89 df             	mov    r15,rbx
ffff800000809f2c:	48 b8 3b ad ee ff ff 	movabs rax,0xffffffffffeead3b
ffff800000809f33:	ff ff ff 
ffff800000809f36:	48 01 d8             	add    rax,rbx
ffff800000809f39:	ff d0                	call   rax
ffff800000809f3b:	eb 01                	jmp    ffff800000809f3e <load_pe+0x33e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:296
            continue;
ffff800000809f3d:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:292 (discriminator 2)
    for(int i=0;i<nth->FileHeader.NumberOfSections;i++,psec++)
ffff800000809f3e:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
ffff800000809f42:	48 83 45 e0 28       	add    QWORD PTR [rbp-0x20],0x28
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:292 (discriminator 1)
ffff800000809f47:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff800000809f4e:	0f b7 40 06          	movzx  eax,WORD PTR [rax+0x6]
ffff800000809f52:	0f b7 c0             	movzx  eax,ax
ffff800000809f55:	39 45 dc             	cmp    DWORD PTR [rbp-0x24],eax
ffff800000809f58:	0f 8c 64 ff ff ff    	jl     ffff800000809ec2 <load_pe+0x2c2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:304

    }

    //通过导入表加载需要的dll
    PIMAGE_DATA_DIRECTORY impd=&nth->OptionalHeader.DataDirectory[1];
ffff800000809f5e:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff800000809f65:	48 05 90 00 00 00    	add    rax,0x90
ffff800000809f6b:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:305
    if(impd->Size>0)
ffff800000809f72:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000809f79:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff800000809f7c:	85 c0                	test   eax,eax
ffff800000809f7e:	0f 84 bc 02 00 00    	je     ffff80000080a240 <load_pe+0x640>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:307
    {
        int tmpi=impd->VirtualAddress+nbase;
ffff800000809f84:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000809f8b:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000809f8d:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000809f91:	01 d0                	add    eax,edx
ffff800000809f93:	89 85 34 ff ff ff    	mov    DWORD PTR [rbp-0xcc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:308
        PIMAGE_IMPORT_DESCRIPTOR impdes=tmpi;
ffff800000809f99:	8b 85 34 ff ff ff    	mov    eax,DWORD PTR [rbp-0xcc]
ffff800000809f9f:	48 98                	cdqe   
ffff800000809fa1:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:310
        int dllp;
        while (impdes->Characteristics)
ffff800000809fa5:	e9 88 02 00 00       	jmp    ffff80000080a232 <load_pe+0x632>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:313
        {
            //加载dll
            char *dllname=impdes->Name+nbase;
ffff800000809faa:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000809fae:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff800000809fb1:	89 c2                	mov    edx,eax
ffff800000809fb3:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000809fb7:	48 01 d0             	add    rax,rdx
ffff800000809fba:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:316
            //此处应有加载dll代码
            int dlli;
            if(strcmp(dllname,"sys.dll")==0)//加载系统dll的部分由内核已经完成
ffff800000809fc1:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
ffff800000809fc8:	48 ba 43 d4 ff ff ff 	movabs rdx,0xffffffffffffd443
ffff800000809fcf:	ff ff ff 
ffff800000809fd2:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff800000809fd6:	48 89 d6             	mov    rsi,rdx
ffff800000809fd9:	48 89 c7             	mov    rdi,rax
ffff800000809fdc:	49 89 df             	mov    r15,rbx
ffff800000809fdf:	48 b8 2c 21 ef ff ff 	movabs rax,0xffffffffffef212c
ffff800000809fe6:	ff ff ff 
ffff800000809fe9:	48 01 d8             	add    rax,rbx
ffff800000809fec:	ff d0                	call   rax
ffff800000809fee:	85 c0                	test   eax,eax
ffff800000809ff0:	75 09                	jne    ffff800000809ffb <load_pe+0x3fb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:318
            {
                dllp=0x1c00000;
ffff800000809ff2:	c7 45 cc 00 00 c0 01 	mov    DWORD PTR [rbp-0x34],0x1c00000
ffff800000809ff9:	eb 3d                	jmp    ffff80000080a038 <load_pe+0x438>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:321
            }else{
                //load_pe要记录module的加载
                dlli= load_pe(proc);
ffff800000809ffb:	48 8b 85 e8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x318]
ffff80000080a002:	48 89 c7             	mov    rdi,rax
ffff80000080a005:	48 b8 08 70 ee ff ff 	movabs rax,0xffffffffffee7008
ffff80000080a00c:	ff ff ff 
ffff80000080a00f:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080a013:	ff d0                	call   rax
ffff80000080a015:	89 85 24 ff ff ff    	mov    DWORD PTR [rbp-0xdc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:324
                //dlli=load_library(dllname);
                //这个是线性地址
                dllp=get_module_addr(dlli);
ffff80000080a01b:	8b 85 24 ff ff ff    	mov    eax,DWORD PTR [rbp-0xdc]
ffff80000080a021:	89 c7                	mov    edi,eax
ffff80000080a023:	49 89 df             	mov    r15,rbx
ffff80000080a026:	48 b8 4b 79 ee ff ff 	movabs rax,0xffffffffffee794b
ffff80000080a02d:	ff ff ff 
ffff80000080a030:	48 01 d8             	add    rax,rbx
ffff80000080a033:	ff d0                	call   rax
ffff80000080a035:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:327
            }
            //从线性地址查页表找到物理地址
            PIMAGE_DOS_HEADER dlldos=dllp;
ffff80000080a038:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080a03b:	48 98                	cdqe   
ffff80000080a03d:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:328
            PIMAGE_NT_HEADERS32 dllnth=dllp+dlldos->e_lfanew;
ffff80000080a044:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080a047:	48 63 d0             	movsxd rdx,eax
ffff80000080a04a:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
ffff80000080a051:	48 8b 40 3c          	mov    rax,QWORD PTR [rax+0x3c]
ffff80000080a055:	48 01 d0             	add    rax,rdx
ffff80000080a058:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:329
            PIMAGE_EXPORT_DIRECTORY dllexp=(dllnth->OptionalHeader.DataDirectory[0].VirtualAddress+dllp);
ffff80000080a05f:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff80000080a066:	8b 90 8c 00 00 00    	mov    edx,DWORD PTR [rax+0x8c]
ffff80000080a06c:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080a06f:	01 d0                	add    eax,edx
ffff80000080a071:	89 c0                	mov    eax,eax
ffff80000080a073:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:330
            int funcn=dllexp->NumberOfNames;
ffff80000080a07a:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff80000080a081:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff80000080a084:	89 85 04 ff ff ff    	mov    DWORD PTR [rbp-0xfc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:331
            char **fnames=dllexp->AddressOfNames+dllp;
ffff80000080a08a:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff80000080a091:	8b 50 20             	mov    edx,DWORD PTR [rax+0x20]
ffff80000080a094:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080a097:	01 d0                	add    eax,edx
ffff80000080a099:	89 c0                	mov    eax,eax
ffff80000080a09b:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:332
            int *funcaddrs=dllexp->AddressOfFunctions+dllp;
ffff80000080a0a2:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff80000080a0a9:	8b 50 1c             	mov    edx,DWORD PTR [rax+0x1c]
ffff80000080a0ac:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080a0af:	01 d0                	add    eax,edx
ffff80000080a0b1:	89 c0                	mov    eax,eax
ffff80000080a0b3:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:333
            short *funcords=dllexp->AddressOfNameOrdinals+dllp;
ffff80000080a0ba:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff80000080a0c1:	8b 50 24             	mov    edx,DWORD PTR [rax+0x24]
ffff80000080a0c4:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080a0c7:	01 d0                	add    eax,edx
ffff80000080a0c9:	89 c0                	mov    eax,eax
ffff80000080a0cb:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:335
            //寻找nameordinal的base（最小值），里面的数据加上base才是真正的序号
            unsigned int ord_base=dllexp->Base;
ffff80000080a0d2:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff80000080a0d9:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff80000080a0dc:	89 85 e4 fe ff ff    	mov    DWORD PTR [rbp-0x11c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:337
            //开始将导入表IAT的内容更新为函数地址
            unsigned int *iataddrs=impdes->FirstThunk+nbase;//IAT和INT内容一样，只用IAT
ffff80000080a0e2:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080a0e6:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff80000080a0e9:	89 c2                	mov    edx,eax
ffff80000080a0eb:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080a0ef:	48 01 d0             	add    rax,rdx
ffff80000080a0f2:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:338
            char **siataddrs=impdes->FirstThunk+nbase;
ffff80000080a0f6:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080a0fa:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff80000080a0fd:	89 c2                	mov    edx,eax
ffff80000080a0ff:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080a103:	48 01 d0             	add    rax,rdx
ffff80000080a106:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:339
            while (*iataddrs)
ffff80000080a10a:	e9 10 01 00 00       	jmp    ffff80000080a21f <load_pe+0x61f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:342
            {
                //判断是序号导入还是名称导入
                if(((unsigned)*iataddrs)&0x80000000)
ffff80000080a10f:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080a113:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080a115:	85 c0                	test   eax,eax
ffff80000080a117:	79 43                	jns    ffff80000080a15c <load_pe+0x55c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:345
                {
                    //序号导入
                    unsigned int ord=((*iataddrs)&0x7fffffff)-ord_base;
ffff80000080a119:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080a11d:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080a11f:	25 ff ff ff 7f       	and    eax,0x7fffffff
ffff80000080a124:	2b 85 e4 fe ff ff    	sub    eax,DWORD PTR [rbp-0x11c]
ffff80000080a12a:	89 85 d0 fe ff ff    	mov    DWORD PTR [rbp-0x130],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:346
                    *iataddrs=funcaddrs[ord]+dllp;
ffff80000080a130:	8b 85 d0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x130]
ffff80000080a136:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff80000080a13d:	00 
ffff80000080a13e:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff80000080a145:	48 01 d0             	add    rax,rdx
ffff80000080a148:	8b 10                	mov    edx,DWORD PTR [rax]
ffff80000080a14a:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080a14d:	01 d0                	add    eax,edx
ffff80000080a14f:	89 c2                	mov    edx,eax
ffff80000080a151:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080a155:	89 10                	mov    DWORD PTR [rax],edx
ffff80000080a157:	e9 b9 00 00 00       	jmp    ffff80000080a215 <load_pe+0x615>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:350
                }else
                {
                    //名称导入
                    char *import_by_name_p=*iataddrs;//指向IMPORT_BY_NAME
ffff80000080a15c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080a160:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080a162:	89 c0                	mov    eax,eax
ffff80000080a164:	48 89 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:351
                    import_by_name_p+=2;//跳过开头两字节序号
ffff80000080a16b:	48 83 85 d8 fe ff ff 	add    QWORD PTR [rbp-0x128],0x2
ffff80000080a172:	02 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:352
                    int i=0;
ffff80000080a173:	c7 45 b4 00 00 00 00 	mov    DWORD PTR [rbp-0x4c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:353
                    for(;i<funcn;i++)
ffff80000080a17a:	e9 87 00 00 00       	jmp    ffff80000080a206 <load_pe+0x606>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:355
                    {
                        if(strcmp(import_by_name_p,fnames[i])==0)
ffff80000080a17f:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffff80000080a182:	48 98                	cdqe   
ffff80000080a184:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080a18b:	00 
ffff80000080a18c:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff80000080a193:	48 01 d0             	add    rax,rdx
ffff80000080a196:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080a199:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
ffff80000080a1a0:	48 89 d6             	mov    rsi,rdx
ffff80000080a1a3:	48 89 c7             	mov    rdi,rax
ffff80000080a1a6:	49 89 df             	mov    r15,rbx
ffff80000080a1a9:	48 b8 2c 21 ef ff ff 	movabs rax,0xffffffffffef212c
ffff80000080a1b0:	ff ff ff 
ffff80000080a1b3:	48 01 d8             	add    rax,rbx
ffff80000080a1b6:	ff d0                	call   rax
ffff80000080a1b8:	85 c0                	test   eax,eax
ffff80000080a1ba:	75 46                	jne    ffff80000080a202 <load_pe+0x602>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:357
                        {
                            int ordi=funcords[i];
ffff80000080a1bc:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffff80000080a1bf:	48 98                	cdqe   
ffff80000080a1c1:	48 8d 14 00          	lea    rdx,[rax+rax*1]
ffff80000080a1c5:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
ffff80000080a1cc:	48 01 d0             	add    rax,rdx
ffff80000080a1cf:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff80000080a1d2:	98                   	cwde   
ffff80000080a1d3:	89 85 d4 fe ff ff    	mov    DWORD PTR [rbp-0x12c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:358
                            *iataddrs=funcaddrs[ordi]+dllp;//导入表中的IAT内容修改成地址
ffff80000080a1d9:	8b 85 d4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x12c]
ffff80000080a1df:	48 98                	cdqe   
ffff80000080a1e1:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff80000080a1e8:	00 
ffff80000080a1e9:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff80000080a1f0:	48 01 d0             	add    rax,rdx
ffff80000080a1f3:	8b 10                	mov    edx,DWORD PTR [rax]
ffff80000080a1f5:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080a1f8:	01 d0                	add    eax,edx
ffff80000080a1fa:	89 c2                	mov    edx,eax
ffff80000080a1fc:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080a200:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:353
                    for(;i<funcn;i++)
ffff80000080a202:	83 45 b4 01          	add    DWORD PTR [rbp-0x4c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:353 (discriminator 1)
ffff80000080a206:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffff80000080a209:	3b 85 04 ff ff ff    	cmp    eax,DWORD PTR [rbp-0xfc]
ffff80000080a20f:	0f 8c 6a ff ff ff    	jl     ffff80000080a17f <load_pe+0x57f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:362
                        }
                    }
                }
                iataddrs++;
ffff80000080a215:	48 83 45 c0 04       	add    QWORD PTR [rbp-0x40],0x4
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:363
                siataddrs++;
ffff80000080a21a:	48 83 45 b8 08       	add    QWORD PTR [rbp-0x48],0x8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:339
            while (*iataddrs)
ffff80000080a21f:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080a223:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080a225:	85 c0                	test   eax,eax
ffff80000080a227:	0f 85 e2 fe ff ff    	jne    ffff80000080a10f <load_pe+0x50f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:365
            }
            impdes++;
ffff80000080a22d:	48 83 45 d0 14       	add    QWORD PTR [rbp-0x30],0x14
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:310
        while (impdes->Characteristics)
ffff80000080a232:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080a236:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080a238:	85 c0                	test   eax,eax
ffff80000080a23a:	0f 85 6a fd ff ff    	jne    ffff800000809faa <load_pe+0x3aa>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:372
        }
    }


    //开始重定位
    PIMAGE_BASE_RELOCATION relp=0;
ffff80000080a240:	48 c7 45 a8 00 00 00 	mov    QWORD PTR [rbp-0x58],0x0
ffff80000080a247:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:373
    if(nth->OptionalHeader.DataDirectory[5].Size>0)
ffff80000080a248:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080a24f:	8b 80 b4 00 00 00    	mov    eax,DWORD PTR [rax+0xb4]
ffff80000080a255:	85 c0                	test   eax,eax
ffff80000080a257:	0f 84 ec 00 00 00    	je     ffff80000080a349 <load_pe+0x749>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:375
    {
        relp=(u32)(nth->OptionalHeader.DataDirectory[5].VirtualAddress\
ffff80000080a25d:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080a264:	8b 90 b0 00 00 00    	mov    edx,DWORD PTR [rax+0xb0]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:376
                                +(u32)nbase);
ffff80000080a26a:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:375
        relp=(u32)(nth->OptionalHeader.DataDirectory[5].VirtualAddress\
ffff80000080a26e:	01 d0                	add    eax,edx
ffff80000080a270:	89 c0                	mov    eax,eax
ffff80000080a272:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:377
        u16 *reloc=relp+sizeof(IMAGE_BASE_RELOCATION);
ffff80000080a276:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080a27a:	48 83 c0 40          	add    rax,0x40
ffff80000080a27e:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:378
        u16 *rtype=reloc+1;
ffff80000080a282:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080a286:	48 83 c0 02          	add    rax,0x2
ffff80000080a28a:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:379
        int old_base=nth->OptionalHeader.ImageBase;
ffff80000080a28e:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080a295:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff80000080a299:	89 85 cc fe ff ff    	mov    DWORD PTR [rbp-0x134],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:380
        while(relp->VirtualAddress){
ffff80000080a29f:	e9 97 00 00 00       	jmp    ffff80000080a33b <load_pe+0x73b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:381
            int pgva=relp->VirtualAddress+nbase;
ffff80000080a2a4:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080a2a8:	8b 10                	mov    edx,DWORD PTR [rax]
ffff80000080a2aa:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080a2ae:	01 d0                	add    eax,edx
ffff80000080a2b0:	89 85 c8 fe ff ff    	mov    DWORD PTR [rbp-0x138],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:382
            for(int i=0;i<relp->SizeOfBlock/4;i++)
ffff80000080a2b6:	c7 45 94 00 00 00 00 	mov    DWORD PTR [rbp-0x6c],0x0
ffff80000080a2bd:	eb 5a                	jmp    ffff80000080a319 <load_pe+0x719>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:384
            {
                if(*rtype==IMAGE_REL_BASED_ABSOLUTE)continue;//不用重定位
ffff80000080a2bf:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080a2c3:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff80000080a2c6:	66 85 c0             	test   ax,ax
ffff80000080a2c9:	74 49                	je     ffff80000080a314 <load_pe+0x714>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:385
                int *at=*reloc+pgva;//要重定位的数据的地址
ffff80000080a2cb:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080a2cf:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff80000080a2d2:	0f b7 d0             	movzx  edx,ax
ffff80000080a2d5:	8b 85 c8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x138]
ffff80000080a2db:	01 d0                	add    eax,edx
ffff80000080a2dd:	48 98                	cdqe   
ffff80000080a2df:	48 89 85 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:386
                *at=*at-old_base+nbase;
ffff80000080a2e6:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
ffff80000080a2ed:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080a2ef:	2b 85 cc fe ff ff    	sub    eax,DWORD PTR [rbp-0x134]
ffff80000080a2f5:	89 c2                	mov    edx,eax
ffff80000080a2f7:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080a2fb:	01 d0                	add    eax,edx
ffff80000080a2fd:	89 c2                	mov    edx,eax
ffff80000080a2ff:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
ffff80000080a306:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:388
                //下一个
                reloc+=2;
ffff80000080a308:	48 83 45 a0 04       	add    QWORD PTR [rbp-0x60],0x4
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:389
                rtype+=2;
ffff80000080a30d:	48 83 45 98 04       	add    QWORD PTR [rbp-0x68],0x4
ffff80000080a312:	eb 01                	jmp    ffff80000080a315 <load_pe+0x715>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:384
                if(*rtype==IMAGE_REL_BASED_ABSOLUTE)continue;//不用重定位
ffff80000080a314:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:382 (discriminator 2)
            for(int i=0;i<relp->SizeOfBlock/4;i++)
ffff80000080a315:	83 45 94 01          	add    DWORD PTR [rbp-0x6c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:382 (discriminator 1)
ffff80000080a319:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080a31d:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff80000080a320:	c1 e8 02             	shr    eax,0x2
ffff80000080a323:	89 c2                	mov    edx,eax
ffff80000080a325:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
ffff80000080a328:	39 c2                	cmp    edx,eax
ffff80000080a32a:	77 93                	ja     ffff80000080a2bf <load_pe+0x6bf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:391
            }
            relp=(int)relp+0x1000;
ffff80000080a32c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080a330:	05 00 10 00 00       	add    eax,0x1000
ffff80000080a335:	48 98                	cdqe   
ffff80000080a337:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:380
        while(relp->VirtualAddress){
ffff80000080a33b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080a33f:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080a341:	85 c0                	test   eax,eax
ffff80000080a343:	0f 85 5b ff ff ff    	jne    ffff80000080a2a4 <load_pe+0x6a4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:397
        }
    }
    extern struct process task[];
    extern int cur_proc;
    //初始化堆
    chunk_header hdrtmp={
ffff80000080a349:	c7 85 00 fd ff ff 00 	mov    DWORD PTR [rbp-0x300],0x0
ffff80000080a350:	00 00 00 
ffff80000080a353:	c7 85 04 fd ff ff 00 	mov    DWORD PTR [rbp-0x2fc],0x0
ffff80000080a35a:	00 00 00 
ffff80000080a35d:	48 c7 85 08 fd ff ff 	mov    QWORD PTR [rbp-0x2f8],0x0
ffff80000080a364:	00 00 00 00 
ffff80000080a368:	48 c7 85 10 fd ff ff 	mov    QWORD PTR [rbp-0x2f0],0x0
ffff80000080a36f:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:404
            .next=NULL,
            .pgn=0,
            .prev=NULL
    };//空堆
    //拷贝触发页中断然后分配
    memcpy((chunk_header*)HEAP_BASE,&hdrtmp,sizeof(hdrtmp));
ffff80000080a373:	48 8d 85 00 fd ff ff 	lea    rax,[rbp-0x300]
ffff80000080a37a:	ba 18 00 00 00       	mov    edx,0x18
ffff80000080a37f:	48 89 c6             	mov    rsi,rax
ffff80000080a382:	bf 00 00 00 01       	mov    edi,0x1000000
ffff80000080a387:	49 89 df             	mov    r15,rbx
ffff80000080a38a:	48 b8 da 1d ef ff ff 	movabs rax,0xffffffffffef1dda
ffff80000080a391:	ff ff ff 
ffff80000080a394:	48 01 d8             	add    rax,rbx
ffff80000080a397:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:405
    task[cur_proc].mem_struct.heap_base=HEAP_BASE;
ffff80000080a399:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff80000080a3a0:	ff ff ff 
ffff80000080a3a3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a3a7:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080a3a9:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff80000080a3b0:	ff ff ff 
ffff80000080a3b3:	48 8b 0c 13          	mov    rcx,QWORD PTR [rbx+rdx*1]
ffff80000080a3b7:	48 63 d0             	movsxd rdx,eax
ffff80000080a3ba:	48 89 d0             	mov    rax,rdx
ffff80000080a3bd:	48 01 c0             	add    rax,rax
ffff80000080a3c0:	48 01 d0             	add    rax,rdx
ffff80000080a3c3:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080a3ca:	00 
ffff80000080a3cb:	48 01 d0             	add    rax,rdx
ffff80000080a3ce:	48 c1 e0 05          	shl    rax,0x5
ffff80000080a3d2:	48 01 c8             	add    rax,rcx
ffff80000080a3d5:	48 83 c0 20          	add    rax,0x20
ffff80000080a3d9:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x1000000
ffff80000080a3e0:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:406
    task[cur_proc].mem_struct.heap_top=HEAP_BASE+CHUNK_SIZE;
ffff80000080a3e1:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff80000080a3e8:	ff ff ff 
ffff80000080a3eb:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a3ef:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080a3f1:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff80000080a3f8:	ff ff ff 
ffff80000080a3fb:	48 8b 0c 13          	mov    rcx,QWORD PTR [rbx+rdx*1]
ffff80000080a3ff:	48 63 d0             	movsxd rdx,eax
ffff80000080a402:	48 89 d0             	mov    rax,rdx
ffff80000080a405:	48 01 c0             	add    rax,rax
ffff80000080a408:	48 01 d0             	add    rax,rdx
ffff80000080a40b:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080a412:	00 
ffff80000080a413:	48 01 d0             	add    rax,rdx
ffff80000080a416:	48 c1 e0 05          	shl    rax,0x5
ffff80000080a41a:	48 01 c8             	add    rax,rcx
ffff80000080a41d:	48 83 c0 20          	add    rax,0x20
ffff80000080a421:	48 c7 40 10 00 10 00 	mov    QWORD PTR [rax+0x10],0x1001000
ffff80000080a428:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:408
    //设置栈
    task[cur_proc].mem_struct.stack_top=STACK_TOP;
ffff80000080a429:	48 b8 d8 fd ff ff ff 	movabs rax,0xfffffffffffffdd8
ffff80000080a430:	ff ff ff 
ffff80000080a433:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a437:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080a439:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff80000080a440:	ff ff ff 
ffff80000080a443:	48 8b 0c 13          	mov    rcx,QWORD PTR [rbx+rdx*1]
ffff80000080a447:	48 63 d0             	movsxd rdx,eax
ffff80000080a44a:	48 89 d0             	mov    rax,rdx
ffff80000080a44d:	48 01 c0             	add    rax,rax
ffff80000080a450:	48 01 d0             	add    rax,rdx
ffff80000080a453:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080a45a:	00 
ffff80000080a45b:	48 01 d0             	add    rax,rdx
ffff80000080a45e:	48 c1 e0 05          	shl    rax,0x5
ffff80000080a462:	48 01 c8             	add    rax,rcx
ffff80000080a465:	48 83 c0 30          	add    rax,0x30
ffff80000080a469:	48 be 00 f0 ff ff ff 	movabs rsi,0x7ffffffff000
ffff80000080a470:	7f 00 00 
ffff80000080a473:	48 89 70 10          	mov    QWORD PTR [rax+0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:415


    //完毕,调用入口函数
    //重定位完毕，准备调用DllMain
    typedef int (*Main)(int,void*);
    Main main=shell_addr;
ffff80000080a477:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
ffff80000080a47e:	48 89 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:416
    int ecode=main(0,NULL);
ffff80000080a485:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
ffff80000080a48c:	be 00 00 00 00       	mov    esi,0x0
ffff80000080a491:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080a496:	ff d0                	call   rax
ffff80000080a498:	89 85 b4 fe ff ff    	mov    DWORD PTR [rbp-0x14c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:417
    do_syscall(SYSCALL_EXIT,ecode,0,0,0,0,0);
ffff80000080a49e:	8b 85 b4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x14c]
ffff80000080a4a4:	48 98                	cdqe   
ffff80000080a4a6:	48 c7 85 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],0x14
ffff80000080a4ad:	14 00 00 00 
ffff80000080a4b1:	48 89 85 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rax
ffff80000080a4b8:	48 c7 85 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],0x0
ffff80000080a4bf:	00 00 00 00 
ffff80000080a4c3:	48 c7 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],0x0
ffff80000080a4ca:	00 00 00 00 
ffff80000080a4ce:	48 c7 85 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],0x0
ffff80000080a4d5:	00 00 00 00 
ffff80000080a4d9:	48 c7 85 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],0x0
ffff80000080a4e0:	00 00 00 00 
ffff80000080a4e4:	48 c7 85 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],0x0
ffff80000080a4eb:	00 00 00 00 
do_syscall():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:63
        __asm__ volatile(".byte 0x48\n"
ffff80000080a4ef:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
ffff80000080a4f6:	48 8b bd a0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x160]
ffff80000080a4fd:	48 8b b5 98 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x168]
ffff80000080a504:	48 8b 95 90 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x170]
ffff80000080a50b:	48 8b 8d 88 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x178]
ffff80000080a512:	4c 8b 85 80 fe ff ff 	mov    r8,QWORD PTR [rbp-0x180]
ffff80000080a519:	4c 8b 8d 78 fe ff ff 	mov    r9,QWORD PTR [rbp-0x188]
ffff80000080a520:	48 0f 05             	rex.W syscall 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:65
        long ret=0;
ffff80000080a523:	48 c7 85 f8 fc ff ff 	mov    QWORD PTR [rbp-0x308],0x0
ffff80000080a52a:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/syscall.h:66
        __asm__ volatile("mov %%rax,%0"::"m"(ret));
ffff80000080a52e:	48 89 85 f8 fc ff ff 	mov    QWORD PTR [rbp-0x308],rax
load_pe():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:420 (discriminator 1)
    //
    //不应该执行到这
    while(1);
ffff80000080a535:	eb fe                	jmp    ffff80000080a535 <load_pe+0x935>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:422 (discriminator 2)
    return task[cur_proc].exit_code;
}
ffff80000080a537:	48 81 c4 10 03 00 00 	add    rsp,0x310
ffff80000080a53e:	5b                   	pop    rbx
ffff80000080a53f:	41 5f                	pop    r15
ffff80000080a541:	5d                   	pop    rbp
ffff80000080a542:	c3                   	ret    

ffff80000080a543 <get_module_addr>:
get_module_addr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:425

int get_module_addr(int mi)
{
ffff80000080a543:	f3 0f 1e fa          	endbr64 
ffff80000080a547:	55                   	push   rbp
ffff80000080a548:	48 89 e5             	mov    rbp,rsp
ffff80000080a54b:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080a54b <get_module_addr+0x8>
ffff80000080a552:	49 bb ad 86 11 00 00 	movabs r11,0x1186ad
ffff80000080a559:	00 00 00 
ffff80000080a55c:	4c 01 d8             	add    rax,r11
ffff80000080a55f:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:426
    return modules[mi].base;
ffff80000080a562:	48 ba a0 fd ff ff ff 	movabs rdx,0xfffffffffffffda0
ffff80000080a569:	ff ff ff 
ffff80000080a56c:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080a570:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000080a573:	48 63 d0             	movsxd rdx,eax
ffff80000080a576:	48 89 d0             	mov    rax,rdx
ffff80000080a579:	48 c1 e0 03          	shl    rax,0x3
ffff80000080a57d:	48 29 d0             	sub    rax,rdx
ffff80000080a580:	48 c1 e0 03          	shl    rax,0x3
ffff80000080a584:	48 01 c8             	add    rax,rcx
ffff80000080a587:	48 8b 00             	mov    rax,QWORD PTR [rax]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:427
}
ffff80000080a58a:	5d                   	pop    rbp
ffff80000080a58b:	c3                   	ret    

ffff80000080a58c <dispose_library>:
dispose_library():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:429
int dispose_library(int dlln)
{
ffff80000080a58c:	f3 0f 1e fa          	endbr64 
ffff80000080a590:	55                   	push   rbp
ffff80000080a591:	48 89 e5             	mov    rbp,rsp
ffff80000080a594:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080a594 <dispose_library+0x8>
ffff80000080a59b:	49 bb 64 86 11 00 00 	movabs r11,0x118664
ffff80000080a5a2:	00 00 00 
ffff80000080a5a5:	4c 01 d8             	add    rax,r11
ffff80000080a5a8:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:430
    if(dlln<0||dlln>=MAX_DLLS)return -1;
ffff80000080a5ab:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
ffff80000080a5af:	78 09                	js     ffff80000080a5ba <dispose_library+0x2e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:430 (discriminator 2)
ffff80000080a5b1:	81 7d fc ff 00 00 00 	cmp    DWORD PTR [rbp-0x4],0xff
ffff80000080a5b8:	7e 07                	jle    ffff80000080a5c1 <dispose_library+0x35>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:430 (discriminator 3)
ffff80000080a5ba:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000080a5bf:	eb 2c                	jmp    ffff80000080a5ed <dispose_library+0x61>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:435
    //空间不够，释放之前申请的
    // for(int j=0;j<dlls[dlln].page_used;j++)
    //     dispose_page(get_phyaddr(dlls[dlln].page_num[j]));
    //释放dll
    dlls[dlln].flag=DLL_STAT_EMPTY;
ffff80000080a5c1:	48 ba c0 fe ff ff ff 	movabs rdx,0xfffffffffffffec0
ffff80000080a5c8:	ff ff ff 
ffff80000080a5cb:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080a5cf:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000080a5d2:	48 98                	cdqe   
ffff80000080a5d4:	48 69 c0 2c 01 00 00 	imul   rax,rax,0x12c
ffff80000080a5db:	48 01 d0             	add    rax,rdx
ffff80000080a5de:	48 83 c0 08          	add    rax,0x8
ffff80000080a5e2:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:436
    return 0;
ffff80000080a5e8:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:437
}
ffff80000080a5ed:	5d                   	pop    rbp
ffff80000080a5ee:	c3                   	ret    

ffff80000080a5ef <sys_insmod>:
sys_insmod():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:485

    return 0;
} */

int sys_insmod(char *path)
{
ffff80000080a5ef:	f3 0f 1e fa          	endbr64 
ffff80000080a5f3:	55                   	push   rbp
ffff80000080a5f4:	48 89 e5             	mov    rbp,rsp
ffff80000080a5f7:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080a5f7 <sys_insmod+0x8>
ffff80000080a5fe:	49 bb 01 86 11 00 00 	movabs r11,0x118601
ffff80000080a605:	00 00 00 
ffff80000080a608:	4c 01 d8             	add    rax,r11
ffff80000080a60b:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:487

}
ffff80000080a60f:	90                   	nop
ffff80000080a610:	5d                   	pop    rbp
ffff80000080a611:	c3                   	ret    

ffff80000080a612 <sys_rmmod>:
sys_rmmod():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:489
int sys_rmmod(char *name)
{
ffff80000080a612:	f3 0f 1e fa          	endbr64 
ffff80000080a616:	55                   	push   rbp
ffff80000080a617:	48 89 e5             	mov    rbp,rsp
ffff80000080a61a:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080a61a <sys_rmmod+0x8>
ffff80000080a621:	49 bb de 85 11 00 00 	movabs r11,0x1185de
ffff80000080a628:	00 00 00 
ffff80000080a62b:	4c 01 d8             	add    rax,r11
ffff80000080a62e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:491

}
ffff80000080a632:	90                   	nop
ffff80000080a633:	5d                   	pop    rbp
ffff80000080a634:	c3                   	ret    

ffff80000080a635 <new_load_elf>:
new_load_elf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:492
off_t new_load_elf(struct file* elf){
ffff80000080a635:	f3 0f 1e fa          	endbr64 
ffff80000080a639:	55                   	push   rbp
ffff80000080a63a:	48 89 e5             	mov    rbp,rsp
ffff80000080a63d:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080a63d <new_load_elf+0x8>
ffff80000080a644:	49 bb bb 85 11 00 00 	movabs r11,0x1185bb
ffff80000080a64b:	00 00 00 
ffff80000080a64e:	4c 01 d8             	add    rax,r11
ffff80000080a651:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:498
    //读取文件头
    //if ET_DYN
    //load dl
    //else
    // load elf
}
ffff80000080a655:	90                   	nop
ffff80000080a656:	5d                   	pop    rbp
ffff80000080a657:	c3                   	ret    

ffff80000080a658 <load_elf>:
load_elf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:500
//切换进程前,在execve系统调用中
off_t load_elf(struct file *elf) {
ffff80000080a658:	f3 0f 1e fa          	endbr64 
ffff80000080a65c:	55                   	push   rbp
ffff80000080a65d:	48 89 e5             	mov    rbp,rsp
ffff80000080a660:	41 57                	push   r15
ffff80000080a662:	53                   	push   rbx
ffff80000080a663:	48 81 ec 50 01 00 00 	sub    rsp,0x150
ffff80000080a66a:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080a66a <load_elf+0x12>
ffff80000080a671:	49 bb 8e 85 11 00 00 	movabs r11,0x11858e
ffff80000080a678:	00 00 00 
ffff80000080a67b:	4c 01 db             	add    rbx,r11
ffff80000080a67e:	48 89 bd a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:502
    // 读取文件头
    struct file* elf_storage=elf;
ffff80000080a685:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
ffff80000080a68c:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:503
    off_t tmpla=kmalloc(0,PAGE_4K_SIZE);
ffff80000080a693:	be 00 10 00 00       	mov    esi,0x1000
ffff80000080a698:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080a69d:	49 89 df             	mov    r15,rbx
ffff80000080a6a0:	48 b8 ce 07 ee ff ff 	movabs rax,0xffffffffffee07ce
ffff80000080a6a7:	ff ff ff 
ffff80000080a6aa:	48 01 d8             	add    rax,rbx
ffff80000080a6ad:	ff d0                	call   rax
ffff80000080a6af:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:504
    off_t shla=kmalloc(0,PAGE_4K_SIZE);
ffff80000080a6b6:	be 00 10 00 00       	mov    esi,0x1000
ffff80000080a6bb:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080a6c0:	49 89 df             	mov    r15,rbx
ffff80000080a6c3:	48 b8 ce 07 ee ff ff 	movabs rax,0xffffffffffee07ce
ffff80000080a6ca:	ff ff ff 
ffff80000080a6cd:	48 01 d8             	add    rax,rbx
ffff80000080a6d0:	ff d0                	call   rax
ffff80000080a6d2:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:505
    if(tmpla==-1)
ffff80000080a6d9:	48 83 bd 70 ff ff ff 	cmp    QWORD PTR [rbp-0x90],0xffffffffffffffff
ffff80000080a6e0:	ff 
ffff80000080a6e1:	75 28                	jne    ffff80000080a70b <load_elf+0xb3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:507
    {
        current->regs.errcode=-ENOMEM;
ffff80000080a6e3:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080a6ea:	ff ff ff 
ffff80000080a6ed:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a6f1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a6f4:	48 c7 80 2c 03 00 00 	mov    QWORD PTR [rax+0x32c],0xffffffffffffffcf
ffff80000080a6fb:	cf ff ff ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:508
        return -1;
ffff80000080a6ff:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff80000080a706:	e9 01 0b 00 00       	jmp    ffff80000080b20c <load_elf+0xbb4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:510
    }
ready:
ffff80000080a70b:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:511
    elf->position=0;
ffff80000080a70c:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
ffff80000080a713:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:513
    //读取文件头
    elf->f_ops->read(elf, (char *) tmpla, PAGE_4K_SIZE, &elf->position);
ffff80000080a71a:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
ffff80000080a721:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080a725:	4c 8b 40 10          	mov    r8,QWORD PTR [rax+0x10]
ffff80000080a729:	48 8b 95 a8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x158]
ffff80000080a730:	48 8b b5 70 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x90]
ffff80000080a737:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
ffff80000080a73e:	48 89 d1             	mov    rcx,rdx
ffff80000080a741:	ba 00 10 00 00       	mov    edx,0x1000
ffff80000080a746:	48 89 c7             	mov    rdi,rax
ffff80000080a749:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:515

    Elf64_Ehdr *ehdr=(Elf64_Phdr*)tmpla;
ffff80000080a74c:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080a753:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:516
    u16 entn=ehdr->e_phnum;
ffff80000080a75a:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff80000080a761:	0f b7 40 38          	movzx  eax,WORD PTR [rax+0x38]
ffff80000080a765:	66 89 85 5e ff ff ff 	mov    WORD PTR [rbp-0xa2],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:517
    u16 ents=ehdr->e_phentsize;
ffff80000080a76c:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff80000080a773:	0f b7 40 36          	movzx  eax,WORD PTR [rax+0x36]
ffff80000080a777:	66 89 85 5c ff ff ff 	mov    WORD PTR [rbp-0xa4],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:518
    elf->position=ehdr->e_shoff;
ffff80000080a77e:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff80000080a785:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080a789:	48 89 c2             	mov    rdx,rax
ffff80000080a78c:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
ffff80000080a793:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:519
    elf->f_ops->read(elf,(char*)shla,ehdr->e_shnum*ehdr->e_shentsize,&elf->position);
ffff80000080a796:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
ffff80000080a79d:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080a7a1:	4c 8b 40 10          	mov    r8,QWORD PTR [rax+0x10]
ffff80000080a7a5:	48 8b 8d a8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x158]
ffff80000080a7ac:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff80000080a7b3:	0f b7 40 3c          	movzx  eax,WORD PTR [rax+0x3c]
ffff80000080a7b7:	0f b7 d0             	movzx  edx,ax
ffff80000080a7ba:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff80000080a7c1:	0f b7 40 3a          	movzx  eax,WORD PTR [rax+0x3a]
ffff80000080a7c5:	0f b7 c0             	movzx  eax,ax
ffff80000080a7c8:	0f af c2             	imul   eax,edx
ffff80000080a7cb:	48 63 d0             	movsxd rdx,eax
ffff80000080a7ce:	48 8b b5 68 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x98]
ffff80000080a7d5:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
ffff80000080a7dc:	48 89 c7             	mov    rdi,rax
ffff80000080a7df:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:520
    struct Elf64_Shdr* sh= (struct Elf64_Shdr *) (shla);
ffff80000080a7e2:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080a7e9:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:521
    Elf64_Phdr *ph= (Elf64_Phdr *) (tmpla + ehdr->e_phoff);
ffff80000080a7f0:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff80000080a7f7:	48 8b 50 20          	mov    rdx,QWORD PTR [rax+0x20]
ffff80000080a7fb:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080a802:	48 01 d0             	add    rax,rdx
ffff80000080a805:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:522
    size_t tot_sz=0;
ffff80000080a809:	48 c7 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],0x0
ffff80000080a810:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:523
    off_t base=ph->p_vaddr,offset=0;
ffff80000080a814:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080a818:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080a81c:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
ffff80000080a823:	48 c7 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],0x0
ffff80000080a82a:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:524
    int reloc_flag=0;
ffff80000080a82e:	c7 85 34 ff ff ff 00 	mov    DWORD PTR [rbp-0xcc],0x0
ffff80000080a835:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:548
            offset=new_base-base;
        }
    } */
    

    module* mod=0;
ffff80000080a838:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff80000080a83f:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:550
    //module项设置
    for(int i=0;i<MAX_MODULES;i++){
ffff80000080a840:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
ffff80000080a847:	e9 04 01 00 00       	jmp    ffff80000080a950 <load_elf+0x2f8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:551
        if(modules[i].type==ET_NONE){
ffff80000080a84c:	48 b8 a0 fd ff ff ff 	movabs rax,0xfffffffffffffda0
ffff80000080a853:	ff ff ff 
ffff80000080a856:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff80000080a85a:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080a85d:	48 63 d0             	movsxd rdx,eax
ffff80000080a860:	48 89 d0             	mov    rax,rdx
ffff80000080a863:	48 c1 e0 03          	shl    rax,0x3
ffff80000080a867:	48 29 d0             	sub    rax,rdx
ffff80000080a86a:	48 c1 e0 03          	shl    rax,0x3
ffff80000080a86e:	48 01 c8             	add    rax,rcx
ffff80000080a871:	48 83 c0 18          	add    rax,0x18
ffff80000080a875:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a878:	48 85 c0             	test   rax,rax
ffff80000080a87b:	0f 85 cb 00 00 00    	jne    ffff80000080a94c <load_elf+0x2f4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:552
            modules[i].type=ehdr->e_type;
ffff80000080a881:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff80000080a888:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff80000080a88c:	0f b7 d0             	movzx  edx,ax
ffff80000080a88f:	48 b8 a0 fd ff ff ff 	movabs rax,0xfffffffffffffda0
ffff80000080a896:	ff ff ff 
ffff80000080a899:	48 8b 34 03          	mov    rsi,QWORD PTR [rbx+rax*1]
ffff80000080a89d:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080a8a0:	48 63 c8             	movsxd rcx,eax
ffff80000080a8a3:	48 89 c8             	mov    rax,rcx
ffff80000080a8a6:	48 c1 e0 03          	shl    rax,0x3
ffff80000080a8aa:	48 29 c8             	sub    rax,rcx
ffff80000080a8ad:	48 c1 e0 03          	shl    rax,0x3
ffff80000080a8b1:	48 01 f0             	add    rax,rsi
ffff80000080a8b4:	48 83 c0 18          	add    rax,0x18
ffff80000080a8b8:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:553
            modules[i].load_offset=offset;
ffff80000080a8bb:	48 b8 a0 fd ff ff ff 	movabs rax,0xfffffffffffffda0
ffff80000080a8c2:	ff ff ff 
ffff80000080a8c5:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff80000080a8c9:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080a8cc:	48 63 d0             	movsxd rdx,eax
ffff80000080a8cf:	48 89 d0             	mov    rax,rdx
ffff80000080a8d2:	48 c1 e0 03          	shl    rax,0x3
ffff80000080a8d6:	48 29 d0             	sub    rax,rdx
ffff80000080a8d9:	48 c1 e0 03          	shl    rax,0x3
ffff80000080a8dd:	48 01 c8             	add    rax,rcx
ffff80000080a8e0:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff80000080a8e4:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff80000080a8eb:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:554
            modules[i].base=base;
ffff80000080a8ee:	48 b8 a0 fd ff ff ff 	movabs rax,0xfffffffffffffda0
ffff80000080a8f5:	ff ff ff 
ffff80000080a8f8:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff80000080a8fc:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080a8ff:	48 63 d0             	movsxd rdx,eax
ffff80000080a902:	48 89 d0             	mov    rax,rdx
ffff80000080a905:	48 c1 e0 03          	shl    rax,0x3
ffff80000080a909:	48 29 d0             	sub    rax,rdx
ffff80000080a90c:	48 c1 e0 03          	shl    rax,0x3
ffff80000080a910:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
ffff80000080a914:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
ffff80000080a91b:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:555
            mod=modules+i;
ffff80000080a91e:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080a921:	48 63 d0             	movsxd rdx,eax
ffff80000080a924:	48 89 d0             	mov    rax,rdx
ffff80000080a927:	48 c1 e0 03          	shl    rax,0x3
ffff80000080a92b:	48 29 d0             	sub    rax,rdx
ffff80000080a92e:	48 c1 e0 03          	shl    rax,0x3
ffff80000080a932:	48 89 c2             	mov    rdx,rax
ffff80000080a935:	48 b8 a0 fd ff ff ff 	movabs rax,0xfffffffffffffda0
ffff80000080a93c:	ff ff ff 
ffff80000080a93f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a943:	48 01 d0             	add    rax,rdx
ffff80000080a946:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:556
            break;
ffff80000080a94a:	eb 0e                	jmp    ffff80000080a95a <load_elf+0x302>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:550 (discriminator 2)
    for(int i=0;i<MAX_MODULES;i++){
ffff80000080a94c:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:550 (discriminator 1)
ffff80000080a950:	83 7d dc 7f          	cmp    DWORD PTR [rbp-0x24],0x7f
ffff80000080a954:	0f 8e f2 fe ff ff    	jle    ffff80000080a84c <load_elf+0x1f4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:559
        }
    }
    for(int i=0;i<entn;i++){
ffff80000080a95a:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [rbp-0x28],0x0
ffff80000080a961:	e9 fe 00 00 00       	jmp    ffff80000080aa64 <load_elf+0x40c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:561
        
        if(ph[i].p_type==PT_INTERP){
ffff80000080a966:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080a969:	48 63 d0             	movsxd rdx,eax
ffff80000080a96c:	48 89 d0             	mov    rax,rdx
ffff80000080a96f:	48 c1 e0 03          	shl    rax,0x3
ffff80000080a973:	48 29 d0             	sub    rax,rdx
ffff80000080a976:	48 c1 e0 03          	shl    rax,0x3
ffff80000080a97a:	48 89 c2             	mov    rdx,rax
ffff80000080a97d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080a981:	48 01 d0             	add    rax,rdx
ffff80000080a984:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080a986:	83 f8 03             	cmp    eax,0x3
ffff80000080a989:	0f 85 d1 00 00 00    	jne    ffff80000080aa60 <load_elf+0x408>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:564
            //load dl
            //
            if(current->dl)break;
ffff80000080a98f:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080a996:	ff ff ff 
ffff80000080a999:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080a99d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080a9a0:	8b 80 5c 03 00 00    	mov    eax,DWORD PTR [rax+0x35c]
ffff80000080a9a6:	85 c0                	test   eax,eax
ffff80000080a9a8:	0f 85 c8 00 00 00    	jne    ffff80000080aa76 <load_elf+0x41e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:565
            int fd=sys_open("/mnt/dl.so",O_EXEC);
ffff80000080a9ae:	be 00 10 00 00       	mov    esi,0x1000
ffff80000080a9b3:	48 b8 4b d4 ff ff ff 	movabs rax,0xffffffffffffd44b
ffff80000080a9ba:	ff ff ff 
ffff80000080a9bd:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080a9c1:	48 89 c7             	mov    rdi,rax
ffff80000080a9c4:	49 89 df             	mov    r15,rbx
ffff80000080a9c7:	48 b8 fe a5 ee ff ff 	movabs rax,0xffffffffffeea5fe
ffff80000080a9ce:	ff ff ff 
ffff80000080a9d1:	48 01 d8             	add    rax,rbx
ffff80000080a9d4:	ff d0                	call   rax
ffff80000080a9d6:	89 85 30 ff ff ff    	mov    DWORD PTR [rbp-0xd0],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:566
            kmfree(tmpla);
ffff80000080a9dc:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080a9e3:	48 89 c7             	mov    rdi,rax
ffff80000080a9e6:	49 89 df             	mov    r15,rbx
ffff80000080a9e9:	48 b8 6f 09 ee ff ff 	movabs rax,0xffffffffffee096f
ffff80000080a9f0:	ff ff ff 
ffff80000080a9f3:	48 01 d8             	add    rax,rbx
ffff80000080a9f6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:567
            kmfree(shla);
ffff80000080a9f8:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080a9ff:	48 89 c7             	mov    rdi,rax
ffff80000080aa02:	49 89 df             	mov    r15,rbx
ffff80000080aa05:	48 b8 6f 09 ee ff ff 	movabs rax,0xffffffffffee096f
ffff80000080aa0c:	ff ff ff 
ffff80000080aa0f:	48 01 d8             	add    rax,rbx
ffff80000080aa12:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:568
            current->dl=fd;
ffff80000080aa14:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080aa1b:	ff ff ff 
ffff80000080aa1e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080aa22:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080aa25:	8b 95 30 ff ff ff    	mov    edx,DWORD PTR [rbp-0xd0]
ffff80000080aa2b:	89 90 5c 03 00 00    	mov    DWORD PTR [rax+0x35c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:569
            elf=current->openf[fd];
ffff80000080aa31:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080aa38:	ff ff ff 
ffff80000080aa3b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080aa3f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080aa42:	8b 95 30 ff ff ff    	mov    edx,DWORD PTR [rbp-0xd0]
ffff80000080aa48:	48 63 d2             	movsxd rdx,edx
ffff80000080aa4b:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080aa4f:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff80000080aa54:	48 89 85 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:570
            goto ready;
ffff80000080aa5b:	e9 ac fc ff ff       	jmp    ffff80000080a70c <load_elf+0xb4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:559 (discriminator 2)
    for(int i=0;i<entn;i++){
ffff80000080aa60:	83 45 d8 01          	add    DWORD PTR [rbp-0x28],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:559 (discriminator 1)
ffff80000080aa64:	0f b7 85 5e ff ff ff 	movzx  eax,WORD PTR [rbp-0xa2]
ffff80000080aa6b:	39 45 d8             	cmp    DWORD PTR [rbp-0x28],eax
ffff80000080aa6e:	0f 8c f2 fe ff ff    	jl     ffff80000080a966 <load_elf+0x30e>
ffff80000080aa74:	eb 01                	jmp    ffff80000080aa77 <load_elf+0x41f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:564
            if(current->dl)break;
ffff80000080aa76:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:573
        }
    }
    for(int i=0;i<entn;i++){
ffff80000080aa77:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x0
ffff80000080aa7e:	e9 be 01 00 00       	jmp    ffff80000080ac41 <load_elf+0x5e9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:575
        //加载段
        if(ph->p_type==PT_LOAD){
ffff80000080aa83:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080aa87:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080aa89:	83 f8 01             	cmp    eax,0x1
ffff80000080aa8c:	0f 85 a6 01 00 00    	jne    ffff80000080ac38 <load_elf+0x5e0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:576
            unsigned long off=ph->p_offset;
ffff80000080aa92:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080aa96:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080aa9a:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:577
            unsigned long fs=ph->p_filesz;
ffff80000080aaa1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080aaa5:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000080aaa9:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:578
            size_t ms=ph->p_memsz;
ffff80000080aab0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080aab4:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080aab8:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:579
            char* vptr= (char *) ph->p_vaddr+offset;
ffff80000080aabf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080aac3:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080aac7:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff80000080aace:	48 01 d0             	add    rax,rdx
ffff80000080aad1:	48 89 85 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:580
            elf->position=off;
ffff80000080aad8:	48 8b 95 f8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x108]
ffff80000080aadf:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
ffff80000080aae6:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:581
            if(off==0){
ffff80000080aae9:	48 83 bd f8 fe ff ff 	cmp    QWORD PTR [rbp-0x108],0x0
ffff80000080aaf0:	00 
ffff80000080aaf1:	75 0f                	jne    ffff80000080ab02 <load_elf+0x4aa>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:582
                mod->header=vptr;
ffff80000080aaf3:	48 8b 95 e0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x120]
ffff80000080aafa:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080aafe:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:585
            }
            //先映射好内存
            int attr=PAGE_PRESENT|PAGE_FOR_ALL;
ffff80000080ab02:	c7 45 d0 05 00 00 00 	mov    DWORD PTR [rbp-0x30],0x5
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:586
            if((ph->p_flags&PF_X)!=0||(ph->p_flags&PF_W)!=0)
ffff80000080ab09:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080ab0d:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff80000080ab10:	83 e0 01             	and    eax,0x1
ffff80000080ab13:	85 c0                	test   eax,eax
ffff80000080ab15:	75 0e                	jne    ffff80000080ab25 <load_elf+0x4cd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:586 (discriminator 1)
ffff80000080ab17:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080ab1b:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff80000080ab1e:	83 e0 02             	and    eax,0x2
ffff80000080ab21:	85 c0                	test   eax,eax
ffff80000080ab23:	74 04                	je     ffff80000080ab29 <load_elf+0x4d1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:587
                attr|=PAGE_RWX;
ffff80000080ab25:	83 4d d0 02          	or     DWORD PTR [rbp-0x30],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:588
            int pgc=(ms-1+PAGE_4K_SIZE)/PAGE_4K_SIZE;
ffff80000080ab29:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
ffff80000080ab30:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff80000080ab36:	48 c1 e8 0c          	shr    rax,0xc
ffff80000080ab3a:	89 85 dc fe ff ff    	mov    DWORD PTR [rbp-0x124],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:589
            for(int j=0;j<pgc;j++){
ffff80000080ab40:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
ffff80000080ab47:	e9 ac 00 00 00       	jmp    ffff80000080abf8 <load_elf+0x5a0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:590
                off_t dest=(off_t) (vptr + j * PAGE_4K_SIZE);
ffff80000080ab4c:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080ab4f:	c1 e0 0c             	shl    eax,0xc
ffff80000080ab52:	48 63 d0             	movsxd rdx,eax
ffff80000080ab55:	48 8b 85 e0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x120]
ffff80000080ab5c:	48 01 d0             	add    rax,rdx
ffff80000080ab5f:	48 89 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:591
                off_t lma=pmalloc(PAGE_4K_SIZE);
ffff80000080ab66:	bf 00 10 00 00       	mov    edi,0x1000
ffff80000080ab6b:	49 89 df             	mov    r15,rbx
ffff80000080ab6e:	48 b8 83 0a ee ff ff 	movabs rax,0xffffffffffee0a83
ffff80000080ab75:	ff ff ff 
ffff80000080ab78:	48 01 d8             	add    rax,rbx
ffff80000080ab7b:	ff d0                	call   rax
ffff80000080ab7d:	48 89 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:592
                if(lma==-1)
ffff80000080ab84:	48 83 bd c8 fe ff ff 	cmp    QWORD PTR [rbp-0x138],0xffffffffffffffff
ffff80000080ab8b:	ff 
ffff80000080ab8c:	75 28                	jne    ffff80000080abb6 <load_elf+0x55e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:594
                {
                    current->regs.errcode=-ENOMEM;
ffff80000080ab8e:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080ab95:	ff ff ff 
ffff80000080ab98:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ab9c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ab9f:	48 c7 80 2c 03 00 00 	mov    QWORD PTR [rax+0x32c],0xffffffffffffffcf
ffff80000080aba6:	cf ff ff ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:595
                    return -1;
ffff80000080abaa:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff80000080abb1:	e9 56 06 00 00       	jmp    ffff80000080b20c <load_elf+0xbb4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:597 (discriminator 2)
                }
                smmap(lma , dest, attr, current->pml4);
ffff80000080abb6:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080abbd:	ff ff ff 
ffff80000080abc0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080abc4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080abc7:	48 8b 88 e0 00 00 00 	mov    rcx,QWORD PTR [rax+0xe0]
ffff80000080abce:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
ffff80000080abd1:	48 8b b5 d0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x130]
ffff80000080abd8:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
ffff80000080abdf:	48 89 c7             	mov    rdi,rax
ffff80000080abe2:	49 89 df             	mov    r15,rbx
ffff80000080abe5:	48 b8 d4 f1 ed ff ff 	movabs rax,0xffffffffffedf1d4
ffff80000080abec:	ff ff ff 
ffff80000080abef:	48 01 d8             	add    rax,rbx
ffff80000080abf2:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:589 (discriminator 2)
            for(int j=0;j<pgc;j++){
ffff80000080abf4:	83 45 cc 01          	add    DWORD PTR [rbp-0x34],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:589 (discriminator 1)
ffff80000080abf8:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080abfb:	3b 85 dc fe ff ff    	cmp    eax,DWORD PTR [rbp-0x124]
ffff80000080ac01:	0f 8c 45 ff ff ff    	jl     ffff80000080ab4c <load_elf+0x4f4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:600
            }
            //读取
            elf->f_ops->read(elf,vptr,fs,&elf->position);
ffff80000080ac07:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
ffff80000080ac0e:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080ac12:	4c 8b 40 10          	mov    r8,QWORD PTR [rax+0x10]
ffff80000080ac16:	48 8b 8d a8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x158]
ffff80000080ac1d:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
ffff80000080ac24:	48 8b b5 e0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x120]
ffff80000080ac2b:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
ffff80000080ac32:	48 89 c7             	mov    rdi,rax
ffff80000080ac35:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:603 (discriminator 2)

        }
        ph++;
ffff80000080ac38:	48 83 45 e8 38       	add    QWORD PTR [rbp-0x18],0x38
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:573 (discriminator 2)
    for(int i=0;i<entn;i++){
ffff80000080ac3d:	83 45 d4 01          	add    DWORD PTR [rbp-0x2c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:573 (discriminator 1)
ffff80000080ac41:	0f b7 85 5e ff ff ff 	movzx  eax,WORD PTR [rbp-0xa2]
ffff80000080ac48:	39 45 d4             	cmp    DWORD PTR [rbp-0x2c],eax
ffff80000080ac4b:	0f 8c 32 fe ff ff    	jl     ffff80000080aa83 <load_elf+0x42b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:606
    }
    //找dynamic段
    struct Elf64_Shdr *dynamic=NULL;
ffff80000080ac51:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
ffff80000080ac58:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:607
    off_t* got=NULL;
ffff80000080ac59:	48 c7 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],0x0
ffff80000080ac60:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:608
    for(int i=0;i<ehdr->e_shnum;i++){
ffff80000080ac64:	c7 45 bc 00 00 00 00 	mov    DWORD PTR [rbp-0x44],0x0
ffff80000080ac6b:	eb 50                	jmp    ffff80000080acbd <load_elf+0x665>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:609
        if(sh[i].sh_type==SHT_DYNAMIC)
ffff80000080ac6d:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
ffff80000080ac70:	48 63 d0             	movsxd rdx,eax
ffff80000080ac73:	48 89 d0             	mov    rax,rdx
ffff80000080ac76:	48 01 c0             	add    rax,rax
ffff80000080ac79:	48 01 d0             	add    rax,rdx
ffff80000080ac7c:	48 c1 e0 04          	shl    rax,0x4
ffff80000080ac80:	48 89 c2             	mov    rdx,rax
ffff80000080ac83:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
ffff80000080ac8a:	48 01 d0             	add    rax,rdx
ffff80000080ac8d:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff80000080ac90:	83 f8 06             	cmp    eax,0x6
ffff80000080ac93:	75 24                	jne    ffff80000080acb9 <load_elf+0x661>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:610
            dynamic=sh+i;
ffff80000080ac95:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
ffff80000080ac98:	48 63 d0             	movsxd rdx,eax
ffff80000080ac9b:	48 89 d0             	mov    rax,rdx
ffff80000080ac9e:	48 01 c0             	add    rax,rax
ffff80000080aca1:	48 01 d0             	add    rax,rdx
ffff80000080aca4:	48 c1 e0 04          	shl    rax,0x4
ffff80000080aca8:	48 89 c2             	mov    rdx,rax
ffff80000080acab:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
ffff80000080acb2:	48 01 d0             	add    rax,rdx
ffff80000080acb5:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:608 (discriminator 2)
    for(int i=0;i<ehdr->e_shnum;i++){
ffff80000080acb9:	83 45 bc 01          	add    DWORD PTR [rbp-0x44],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:608 (discriminator 1)
ffff80000080acbd:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff80000080acc4:	0f b7 40 3c          	movzx  eax,WORD PTR [rax+0x3c]
ffff80000080acc8:	0f b7 c0             	movzx  eax,ax
ffff80000080accb:	39 45 bc             	cmp    DWORD PTR [rbp-0x44],eax
ffff80000080acce:	7c 9d                	jl     ffff80000080ac6d <load_elf+0x615>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:612
    }
    if(dynamic){
ffff80000080acd0:	48 83 7d c0 00       	cmp    QWORD PTR [rbp-0x40],0x0
ffff80000080acd5:	0f 84 87 03 00 00    	je     ffff80000080b062 <load_elf+0xa0a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:613
        char* dynstr=0;
ffff80000080acdb:	48 c7 45 b0 00 00 00 	mov    QWORD PTR [rbp-0x50],0x0
ffff80000080ace2:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:614
        Elf64_Dyn *dyn=dynamic->sh_addr+offset;
ffff80000080ace3:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080ace7:	48 8b 50 0c          	mov    rdx,QWORD PTR [rax+0xc]
ffff80000080aceb:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff80000080acf2:	48 01 d0             	add    rax,rdx
ffff80000080acf5:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:616

        mod->p_dynamic=dynamic;
ffff80000080acfc:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff80000080ad00:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ad04:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:620
        //这里一堆获取函数之后实现细节
        // dynstr=so_get_dynstr(dyn);
        //so_get_dynstr从so中获取.dynstr节
        for(Elf64_Dyn* p=dyn;p->d_tag;p++){
ffff80000080ad08:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
ffff80000080ad0f:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
ffff80000080ad13:	eb 2a                	jmp    ffff80000080ad3f <load_elf+0x6e7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:621
            if(p->d_tag==DT_STRTAB){
ffff80000080ad15:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080ad19:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ad1c:	48 83 f8 05          	cmp    rax,0x5
ffff80000080ad20:	75 18                	jne    ffff80000080ad3a <load_elf+0x6e2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:622
                dynstr=p->d_un.d_ptr+offset;
ffff80000080ad22:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080ad26:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff80000080ad2a:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff80000080ad31:	48 01 d0             	add    rax,rdx
ffff80000080ad34:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:623
                break;
ffff80000080ad38:	eb 11                	jmp    ffff80000080ad4b <load_elf+0x6f3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:620 (discriminator 2)
        for(Elf64_Dyn* p=dyn;p->d_tag;p++){
ffff80000080ad3a:	48 83 45 a8 10       	add    QWORD PTR [rbp-0x58],0x10
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:620 (discriminator 1)
ffff80000080ad3f:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080ad43:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ad46:	48 85 c0             	test   rax,rax
ffff80000080ad49:	75 ca                	jne    ffff80000080ad15 <load_elf+0x6bd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:626
            }
        }
        if(!dynstr){
ffff80000080ad4b:	48 83 7d b0 00       	cmp    QWORD PTR [rbp-0x50],0x0
ffff80000080ad50:	75 28                	jne    ffff80000080ad7a <load_elf+0x722>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:627
            comprintf("cannot find dynstr in .dynamic!\n");
ffff80000080ad52:	48 b8 58 d4 ff ff ff 	movabs rax,0xffffffffffffd458
ffff80000080ad59:	ff ff ff 
ffff80000080ad5c:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080ad60:	48 89 c7             	mov    rdi,rax
ffff80000080ad63:	49 89 df             	mov    r15,rbx
ffff80000080ad66:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080ad6b:	48 ba 3a 19 ef ff ff 	movabs rdx,0xffffffffffef193a
ffff80000080ad72:	ff ff ff 
ffff80000080ad75:	48 01 da             	add    rdx,rbx
ffff80000080ad78:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:636
        // so_load_sos(so_paths);
        //so_get_needed&so_load_sos
        //so_get_got
        // got=so_get_got(dyn);
        //intel架构上DT_PLTGOT存放的是got地址
        size_t relsz=0,relentsz=0;
ffff80000080ad7a:	48 c7 45 a0 00 00 00 	mov    QWORD PTR [rbp-0x60],0x0
ffff80000080ad81:	00 
ffff80000080ad82:	48 c7 45 98 00 00 00 	mov    QWORD PTR [rbp-0x68],0x0
ffff80000080ad89:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:637
        off_t relptr=0;
ffff80000080ad8a:	48 c7 45 90 00 00 00 	mov    QWORD PTR [rbp-0x70],0x0
ffff80000080ad91:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:638
        for(Elf64_Dyn* p=dyn;p->d_tag;p++){
ffff80000080ad92:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
ffff80000080ad99:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
ffff80000080ad9d:	e9 b0 02 00 00       	jmp    ffff80000080b052 <load_elf+0x9fa>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:639
            char* pathname=p->d_un.d_val+dynstr;
ffff80000080ada2:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080ada6:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff80000080adaa:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080adae:	48 01 d0             	add    rax,rdx
ffff80000080adb1:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:640
            int so_fno=sys_open(pathname,O_EXEC);
ffff80000080adb8:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
ffff80000080adbf:	be 00 10 00 00       	mov    esi,0x1000
ffff80000080adc4:	48 89 c7             	mov    rdi,rax
ffff80000080adc7:	49 89 df             	mov    r15,rbx
ffff80000080adca:	48 b8 fe a5 ee ff ff 	movabs rax,0xffffffffffeea5fe
ffff80000080add1:	ff ff ff 
ffff80000080add4:	48 01 d8             	add    rax,rbx
ffff80000080add7:	ff d0                	call   rax
ffff80000080add9:	89 85 14 ff ff ff    	mov    DWORD PTR [rbp-0xec],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:641
            switch (p->d_tag)
ffff80000080addf:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080ade3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ade6:	48 83 f8 13          	cmp    rax,0x13
ffff80000080adea:	0f 87 95 01 00 00    	ja     ffff80000080af85 <load_elf+0x92d>
ffff80000080adf0:	48 83 f8 07          	cmp    rax,0x7
ffff80000080adf4:	73 29                	jae    ffff80000080ae1f <load_elf+0x7c7>
ffff80000080adf6:	48 83 f8 06          	cmp    rax,0x6
ffff80000080adfa:	0f 84 49 01 00 00    	je     ffff80000080af49 <load_elf+0x8f1>
ffff80000080ae00:	48 83 f8 06          	cmp    rax,0x6
ffff80000080ae04:	0f 87 7b 01 00 00    	ja     ffff80000080af85 <load_elf+0x92d>
ffff80000080ae0a:	48 83 f8 01          	cmp    rax,0x1
ffff80000080ae0e:	74 62                	je     ffff80000080ae72 <load_elf+0x81a>
ffff80000080ae10:	48 83 f8 03          	cmp    rax,0x3
ffff80000080ae14:	0f 84 ad 00 00 00    	je     ffff80000080aec7 <load_elf+0x86f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:674
                relentsz=p->d_un.d_val;
                goto is_rel_prepared;

            
            default:
                break;
ffff80000080ae1a:	e9 66 01 00 00       	jmp    ffff80000080af85 <load_elf+0x92d>
ffff80000080ae1f:	ba 01 00 00 00       	mov    edx,0x1
ffff80000080ae24:	89 c1                	mov    ecx,eax
ffff80000080ae26:	48 d3 e2             	shl    rdx,cl
ffff80000080ae29:	48 89 d0             	mov    rax,rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:641
            switch (p->d_tag)
ffff80000080ae2c:	48 89 c2             	mov    rdx,rax
ffff80000080ae2f:	81 e2 00 02 08 00    	and    edx,0x80200
ffff80000080ae35:	48 85 d2             	test   rdx,rdx
ffff80000080ae38:	0f 95 c2             	setne  dl
ffff80000080ae3b:	84 d2                	test   dl,dl
ffff80000080ae3d:	0f 85 34 01 00 00    	jne    ffff80000080af77 <load_elf+0x91f>
ffff80000080ae43:	48 89 c2             	mov    rdx,rax
ffff80000080ae46:	81 e2 80 00 02 00    	and    edx,0x20080
ffff80000080ae4c:	48 85 d2             	test   rdx,rdx
ffff80000080ae4f:	0f 95 c2             	setne  dl
ffff80000080ae52:	84 d2                	test   dl,dl
ffff80000080ae54:	0f 85 0f 01 00 00    	jne    ffff80000080af69 <load_elf+0x911>
ffff80000080ae5a:	25 00 01 04 00       	and    eax,0x40100
ffff80000080ae5f:	48 85 c0             	test   rax,rax
ffff80000080ae62:	0f 95 c0             	setne  al
ffff80000080ae65:	84 c0                	test   al,al
ffff80000080ae67:	0f 85 ee 00 00 00    	jne    ffff80000080af5b <load_elf+0x903>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:674
                break;
ffff80000080ae6d:	e9 13 01 00 00       	jmp    ffff80000080af85 <load_elf+0x92d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:645
                load_elf(current->openf[so_fno]);
ffff80000080ae72:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080ae79:	ff ff ff 
ffff80000080ae7c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ae80:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ae83:	8b 95 14 ff ff ff    	mov    edx,DWORD PTR [rbp-0xec]
ffff80000080ae89:	48 63 d2             	movsxd rdx,edx
ffff80000080ae8c:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080ae90:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff80000080ae95:	48 89 c7             	mov    rdi,rax
ffff80000080ae98:	48 b8 60 7a ee ff ff 	movabs rax,0xffffffffffee7a60
ffff80000080ae9f:	ff ff ff 
ffff80000080aea2:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080aea6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:646
                sys_close(so_fno);
ffff80000080aea8:	8b 85 14 ff ff ff    	mov    eax,DWORD PTR [rbp-0xec]
ffff80000080aeae:	89 c7                	mov    edi,eax
ffff80000080aeb0:	49 89 df             	mov    r15,rbx
ffff80000080aeb3:	48 b8 32 ac ee ff ff 	movabs rax,0xffffffffffeeac32
ffff80000080aeba:	ff ff ff 
ffff80000080aebd:	48 01 d8             	add    rax,rbx
ffff80000080aec0:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:647
                break;
ffff80000080aec2:	e9 bf 00 00 00       	jmp    ffff80000080af86 <load_elf+0x92e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:649
                got=p->d_un.d_ptr+offset;
ffff80000080aec7:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080aecb:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff80000080aecf:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff80000080aed6:	48 01 d0             	add    rax,rdx
ffff80000080aed9:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:652
                got[2]=dl_runtime_resolve;
ffff80000080aee0:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
ffff80000080aee7:	48 83 c0 10          	add    rax,0x10
ffff80000080aeeb:	48 ba d0 fe ff ff ff 	movabs rdx,0xfffffffffffffed0
ffff80000080aef2:	ff ff ff 
ffff80000080aef5:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080aef9:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:654
                got[1]=mod-modules;
ffff80000080aefc:	48 b8 a0 fd ff ff ff 	movabs rax,0xfffffffffffffda0
ffff80000080af03:	ff ff ff 
ffff80000080af06:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080af0a:	48 89 c2             	mov    rdx,rax
ffff80000080af0d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080af11:	48 29 d0             	sub    rax,rdx
ffff80000080af14:	48 c1 f8 03          	sar    rax,0x3
ffff80000080af18:	48 89 c2             	mov    rdx,rax
ffff80000080af1b:	48 b8 b7 6d db b6 6d 	movabs rax,0x6db6db6db6db6db7
ffff80000080af22:	db b6 6d 
ffff80000080af25:	48 0f af c2          	imul   rax,rdx
ffff80000080af29:	48 89 c2             	mov    rdx,rax
ffff80000080af2c:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
ffff80000080af33:	48 83 c0 08          	add    rax,0x8
ffff80000080af37:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:655
                mod->p_got=got;
ffff80000080af3a:	48 8b 95 28 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd8]
ffff80000080af41:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080af45:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:657
                mod->p_symbol=p->d_un.d_ptr;
ffff80000080af49:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080af4d:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff80000080af51:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080af55:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:658
                break;
ffff80000080af59:	eb 2b                	jmp    ffff80000080af86 <load_elf+0x92e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:661
                relsz=p->d_un.d_val;
ffff80000080af5b:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080af5f:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080af63:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:662
                goto is_rel_prepared;
ffff80000080af67:	eb 22                	jmp    ffff80000080af8b <load_elf+0x933>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:665
                relptr=p->d_un.d_ptr;
ffff80000080af69:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080af6d:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080af71:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:666
                goto is_rel_prepared;
ffff80000080af75:	eb 14                	jmp    ffff80000080af8b <load_elf+0x933>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:669
                relentsz=p->d_un.d_val;
ffff80000080af77:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080af7b:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080af7f:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:670
                goto is_rel_prepared;
ffff80000080af83:	eb 06                	jmp    ffff80000080af8b <load_elf+0x933>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:674
                break;
ffff80000080af85:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:676
            }
            continue;
ffff80000080af86:	e9 c2 00 00 00       	jmp    ffff80000080b04d <load_elf+0x9f5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:678
is_rel_prepared:
            if(!(relsz&&relentsz&&relptr))continue;
ffff80000080af8b:	48 83 7d a0 00       	cmp    QWORD PTR [rbp-0x60],0x0
ffff80000080af90:	0f 84 b6 00 00 00    	je     ffff80000080b04c <load_elf+0x9f4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:678 (discriminator 2)
ffff80000080af96:	48 83 7d 98 00       	cmp    QWORD PTR [rbp-0x68],0x0
ffff80000080af9b:	0f 84 ab 00 00 00    	je     ffff80000080b04c <load_elf+0x9f4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:678 (discriminator 4)
ffff80000080afa1:	48 83 7d 90 00       	cmp    QWORD PTR [rbp-0x70],0x0
ffff80000080afa6:	0f 84 a0 00 00 00    	je     ffff80000080b04c <load_elf+0x9f4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:679
            for(int j=0;j<relsz/relentsz;j++){
ffff80000080afac:	c7 45 84 00 00 00 00 	mov    DWORD PTR [rbp-0x7c],0x0
ffff80000080afb3:	eb 65                	jmp    ffff80000080b01a <load_elf+0x9c2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:680 (discriminator 3)
                fill_reloc(relptr+j*relentsz,mod-modules);
ffff80000080afb5:	48 b8 a0 fd ff ff ff 	movabs rax,0xfffffffffffffda0
ffff80000080afbc:	ff ff ff 
ffff80000080afbf:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080afc3:	48 89 c2             	mov    rdx,rax
ffff80000080afc6:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080afca:	48 29 d0             	sub    rax,rdx
ffff80000080afcd:	48 c1 f8 03          	sar    rax,0x3
ffff80000080afd1:	48 89 c2             	mov    rdx,rax
ffff80000080afd4:	48 b8 b7 6d db b6 6d 	movabs rax,0x6db6db6db6db6db7
ffff80000080afdb:	db b6 6d 
ffff80000080afde:	48 0f af c2          	imul   rax,rdx
ffff80000080afe2:	48 89 c2             	mov    rdx,rax
ffff80000080afe5:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
ffff80000080afe8:	48 98                	cdqe   
ffff80000080afea:	48 0f af 45 98       	imul   rax,QWORD PTR [rbp-0x68]
ffff80000080afef:	48 89 c1             	mov    rcx,rax
ffff80000080aff2:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080aff6:	48 01 c8             	add    rax,rcx
ffff80000080aff9:	48 89 d6             	mov    rsi,rdx
ffff80000080affc:	48 89 c7             	mov    rdi,rax
ffff80000080afff:	49 89 df             	mov    r15,rbx
ffff80000080b002:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080b007:	48 ba 1d 8a ee ff ff 	movabs rdx,0xffffffffffee8a1d
ffff80000080b00e:	ff ff ff 
ffff80000080b011:	48 01 da             	add    rdx,rbx
ffff80000080b014:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:679 (discriminator 3)
            for(int j=0;j<relsz/relentsz;j++){
ffff80000080b016:	83 45 84 01          	add    DWORD PTR [rbp-0x7c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:679 (discriminator 1)
ffff80000080b01a:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
ffff80000080b01d:	48 63 c8             	movsxd rcx,eax
ffff80000080b020:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080b024:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080b029:	48 f7 75 98          	div    QWORD PTR [rbp-0x68]
ffff80000080b02d:	48 39 c1             	cmp    rcx,rax
ffff80000080b030:	72 83                	jb     ffff80000080afb5 <load_elf+0x95d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:682
            }
            relsz=relentsz=relptr=0;
ffff80000080b032:	48 c7 45 90 00 00 00 	mov    QWORD PTR [rbp-0x70],0x0
ffff80000080b039:	00 
ffff80000080b03a:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080b03e:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
ffff80000080b042:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080b046:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
ffff80000080b04a:	eb 01                	jmp    ffff80000080b04d <load_elf+0x9f5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:678
            if(!(relsz&&relentsz&&relptr))continue;
ffff80000080b04c:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:638 (discriminator 2)
        for(Elf64_Dyn* p=dyn;p->d_tag;p++){
ffff80000080b04d:	48 83 45 88 10       	add    QWORD PTR [rbp-0x78],0x10
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:638 (discriminator 3)
ffff80000080b052:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080b056:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b059:	48 85 c0             	test   rax,rax
ffff80000080b05c:	0f 85 40 fd ff ff    	jne    ffff80000080ada2 <load_elf+0x74a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:689
        }
        
    }
    
    //初始化堆
    chunk_header hdrtmp={
ffff80000080b062:	c7 85 b0 fe ff ff 00 	mov    DWORD PTR [rbp-0x150],0x0
ffff80000080b069:	00 00 00 
ffff80000080b06c:	c7 85 b4 fe ff ff 00 	mov    DWORD PTR [rbp-0x14c],0x0
ffff80000080b073:	00 00 00 
ffff80000080b076:	48 c7 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],0x0
ffff80000080b07d:	00 00 00 00 
ffff80000080b081:	48 c7 85 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],0x0
ffff80000080b088:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:697
            .pgn=0,
            .prev=NULL
    };
    //空堆
    //分配堆
    off_t lma=pmalloc(PAGE_4K_SIZE);
ffff80000080b08c:	bf 00 10 00 00       	mov    edi,0x1000
ffff80000080b091:	49 89 df             	mov    r15,rbx
ffff80000080b094:	48 b8 83 0a ee ff ff 	movabs rax,0xffffffffffee0a83
ffff80000080b09b:	ff ff ff 
ffff80000080b09e:	48 01 d8             	add    rax,rbx
ffff80000080b0a1:	ff d0                	call   rax
ffff80000080b0a3:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:698
    if(lma==-1)
ffff80000080b0aa:	48 83 bd 08 ff ff ff 	cmp    QWORD PTR [rbp-0xf8],0xffffffffffffffff
ffff80000080b0b1:	ff 
ffff80000080b0b2:	75 23                	jne    ffff80000080b0d7 <load_elf+0xa7f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:700
    {
        set_errno(-ENOMEM);
ffff80000080b0b4:	bf cf ff ff ff       	mov    edi,0xffffffcf
ffff80000080b0b9:	49 89 df             	mov    r15,rbx
ffff80000080b0bc:	48 b8 2f 65 ee ff ff 	movabs rax,0xffffffffffee652f
ffff80000080b0c3:	ff ff ff 
ffff80000080b0c6:	48 01 d8             	add    rax,rbx
ffff80000080b0c9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:701
        return -1;
ffff80000080b0cb:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff80000080b0d2:	e9 35 01 00 00       	jmp    ffff80000080b20c <load_elf+0xbb4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:703
    }
    smmap(lma, HEAP_BASE, PAGE_PRESENT | PAGE_FOR_ALL | PAGE_RWX, current->pml4);
ffff80000080b0d7:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080b0de:	ff ff ff 
ffff80000080b0e1:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b0e5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b0e8:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
ffff80000080b0ef:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffff80000080b0f6:	48 89 d1             	mov    rcx,rdx
ffff80000080b0f9:	ba 07 00 00 00       	mov    edx,0x7
ffff80000080b0fe:	be 00 00 00 01       	mov    esi,0x1000000
ffff80000080b103:	48 89 c7             	mov    rdi,rax
ffff80000080b106:	49 89 df             	mov    r15,rbx
ffff80000080b109:	48 b8 d4 f1 ed ff ff 	movabs rax,0xffffffffffedf1d4
ffff80000080b110:	ff ff ff 
ffff80000080b113:	48 01 d8             	add    rax,rbx
ffff80000080b116:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:704
    memset((unsigned char *) HEAP_BASE, 0, CHUNK_SIZE);
ffff80000080b118:	ba 00 10 00 00       	mov    edx,0x1000
ffff80000080b11d:	be 00 00 00 00       	mov    esi,0x0
ffff80000080b122:	bf 00 00 00 01       	mov    edi,0x1000000
ffff80000080b127:	49 89 df             	mov    r15,rbx
ffff80000080b12a:	48 b8 89 1e ef ff ff 	movabs rax,0xffffffffffef1e89
ffff80000080b131:	ff ff ff 
ffff80000080b134:	48 01 d8             	add    rax,rbx
ffff80000080b137:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:705
    current->mem_struct.heap_base=HEAP_BASE;
ffff80000080b139:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080b140:	ff ff ff 
ffff80000080b143:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b147:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b14a:	48 c7 40 28 00 00 00 	mov    QWORD PTR [rax+0x28],0x1000000
ffff80000080b151:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:706
    current->mem_struct.heap_top=HEAP_BASE+CHUNK_SIZE;
ffff80000080b152:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080b159:	ff ff ff 
ffff80000080b15c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b160:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b163:	48 c7 40 30 00 10 00 	mov    QWORD PTR [rax+0x30],0x1001000
ffff80000080b16a:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:707
    memcpy((chunk_header*)HEAP_BASE,&hdrtmp,sizeof(hdrtmp));
ffff80000080b16b:	48 8d 85 b0 fe ff ff 	lea    rax,[rbp-0x150]
ffff80000080b172:	ba 18 00 00 00       	mov    edx,0x18
ffff80000080b177:	48 89 c6             	mov    rsi,rax
ffff80000080b17a:	bf 00 00 00 01       	mov    edi,0x1000000
ffff80000080b17f:	49 89 df             	mov    r15,rbx
ffff80000080b182:	48 b8 da 1d ef ff ff 	movabs rax,0xffffffffffef1dda
ffff80000080b189:	ff ff ff 
ffff80000080b18c:	48 01 d8             	add    rax,rbx
ffff80000080b18f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:709
    //设置栈
    current->mem_struct.stack_top=STACK_TOP;
ffff80000080b191:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080b198:	ff ff ff 
ffff80000080b19b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b19f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b1a2:	48 be 00 f0 ff ff ff 	movabs rsi,0x7ffffffff000
ffff80000080b1a9:	7f 00 00 
ffff80000080b1ac:	48 89 70 40          	mov    QWORD PTR [rax+0x40],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:710
    off_t entry=0;
ffff80000080b1b0:	48 c7 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],0x0
ffff80000080b1b7:	00 00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:711
    entry=ehdr->e_entry;
ffff80000080b1bb:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff80000080b1c2:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080b1c6:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:712
    kmfree(tmpla);
ffff80000080b1cd:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080b1d4:	48 89 c7             	mov    rdi,rax
ffff80000080b1d7:	49 89 df             	mov    r15,rbx
ffff80000080b1da:	48 b8 6f 09 ee ff ff 	movabs rax,0xffffffffffee096f
ffff80000080b1e1:	ff ff ff 
ffff80000080b1e4:	48 01 d8             	add    rax,rbx
ffff80000080b1e7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:713
    kmfree(shla);
ffff80000080b1e9:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080b1f0:	48 89 c7             	mov    rdi,rax
ffff80000080b1f3:	49 89 df             	mov    r15,rbx
ffff80000080b1f6:	48 b8 6f 09 ee ff ff 	movabs rax,0xffffffffffee096f
ffff80000080b1fd:	ff ff ff 
ffff80000080b200:	48 01 d8             	add    rax,rbx
ffff80000080b203:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:715
    //从系统调用返回
    return entry;
ffff80000080b205:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:716 (discriminator 1)
}
ffff80000080b20c:	48 81 c4 50 01 00 00 	add    rsp,0x150
ffff80000080b213:	5b                   	pop    rbx
ffff80000080b214:	41 5f                	pop    r15
ffff80000080b216:	5d                   	pop    rbp
ffff80000080b217:	c3                   	ret    

ffff80000080b218 <get_modid>:
get_modid():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:717
id_t get_modid(void){
ffff80000080b218:	f3 0f 1e fa          	endbr64 
ffff80000080b21c:	55                   	push   rbp
ffff80000080b21d:	48 89 e5             	mov    rbp,rsp
ffff80000080b220:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080b220 <get_modid+0x8>
ffff80000080b227:	49 bb d8 79 11 00 00 	movabs r11,0x1179d8
ffff80000080b22e:	00 00 00 
ffff80000080b231:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:719
    static id_t modid_d=0;
    return modid_d++;
ffff80000080b234:	48 ba 08 20 af ff ff 	movabs rdx,0xffffffffffaf2008
ffff80000080b23b:	ff ff ff 
ffff80000080b23e:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080b241:	8d 4a 01             	lea    ecx,[rdx+0x1]
ffff80000080b244:	48 be 08 20 af ff ff 	movabs rsi,0xffffffffffaf2008
ffff80000080b24b:	ff ff ff 
ffff80000080b24e:	89 0c 30             	mov    DWORD PTR [rax+rsi*1],ecx
ffff80000080b251:	89 d0                	mov    eax,edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:720
}
ffff80000080b253:	5d                   	pop    rbp
ffff80000080b254:	c3                   	ret    

ffff80000080b255 <dl_runtime_resolve>:
dl_runtime_resolve():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:721
void dl_runtime_resolve(){
ffff80000080b255:	f3 0f 1e fa          	endbr64 
ffff80000080b259:	55                   	push   rbp
ffff80000080b25a:	48 89 e5             	mov    rbp,rsp
ffff80000080b25d:	41 57                	push   r15
ffff80000080b25f:	53                   	push   rbx
ffff80000080b260:	48 83 ec 30          	sub    rsp,0x30
ffff80000080b264:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080b264 <dl_runtime_resolve+0xf>
ffff80000080b26b:	49 bb 94 79 11 00 00 	movabs r11,0x117994
ffff80000080b272:	00 00 00 
ffff80000080b275:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:724
    //获取modid
    unsigned long modid,rel_offset;
    __asm__ volatile("push %%rax\n mov 8(%%rsp),%%rax\n mov %%rax,%0":"=m"(modid));
ffff80000080b278:	50                   	push   rax
ffff80000080b279:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
ffff80000080b27e:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:725
    __asm__ volatile("push %%rax\n mov 16(%%rsp),%%rax\n mov %%rax,%0":"=m"(rel_offset));
ffff80000080b282:	50                   	push   rax
ffff80000080b283:	48 8b 44 24 10       	mov    rax,QWORD PTR [rsp+0x10]
ffff80000080b288:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:726
    Elf64_Rel* rel=rel_offset;
ffff80000080b28c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080b290:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:727
    int symi=ELF64_R_SYM(rel->r_info),type=ELF64_R_TYPE(rel->r_info);
ffff80000080b294:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b298:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080b29b:	ba 20 00 00 00       	mov    edx,0x20
ffff80000080b2a0:	89 d1                	mov    ecx,edx
ffff80000080b2a2:	d3 e8                	shr    eax,cl
ffff80000080b2a4:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
ffff80000080b2a7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b2ab:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080b2ae:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:728
    off_t sym_off=get_sym_addr(modid,symi);
ffff80000080b2b1:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080b2b4:	48 63 d0             	movsxd rdx,eax
ffff80000080b2b7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b2bb:	48 89 d6             	mov    rsi,rdx
ffff80000080b2be:	48 89 c7             	mov    rdi,rax
ffff80000080b2c1:	49 89 df             	mov    r15,rbx
ffff80000080b2c4:	48 b8 27 88 ee ff ff 	movabs rax,0xffffffffffee8827
ffff80000080b2cb:	ff ff ff 
ffff80000080b2ce:	48 01 d8             	add    rax,rbx
ffff80000080b2d1:	ff d0                	call   rax
ffff80000080b2d3:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:731
    //这里假定获取符号的地址是正确的，可以不修改符号表，而是通过记录模块整体加载地址，
    //来加上偏移量获取正确的符号地址
    off_t* v_rel=rel->r_offset;
ffff80000080b2d7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b2db:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b2de:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:732
    switch (type)
ffff80000080b2e2:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff80000080b2e5:	83 e8 03             	sub    eax,0x3
ffff80000080b2e8:	83 f8 07             	cmp    eax,0x7
ffff80000080b2eb:	0f 87 18 01 00 00    	ja     ffff80000080b409 <dl_runtime_resolve+0x1b4>
ffff80000080b2f1:	89 c0                	mov    eax,eax
ffff80000080b2f3:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080b2fa:	00 
ffff80000080b2fb:	48 8d 05 76 4d 11 00 	lea    rax,[rip+0x114d76]        # ffff800000920078 <.LC3+0x28>
ffff80000080b302:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff80000080b306:	48 8d 15 6b 4d 11 00 	lea    rdx,[rip+0x114d6b]        # ffff800000920078 <.LC3+0x28>
ffff80000080b30d:	48 01 d0             	add    rax,rdx
ffff80000080b310:	3e ff e0             	notrack jmp rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:736
    {
    case R_X86_64_GLOB_DAT:
    case R_X86_64_JUMP_SLOT:
        *v_rel=sym_off;
ffff80000080b313:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080b317:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080b31b:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:737
        break;
ffff80000080b31e:	e9 e7 00 00 00       	jmp    ffff80000080b40a <dl_runtime_resolve+0x1b5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:739
    case R_X86_64_PLT32:
        *v_rel=get_sym_plt(modid,symi);
ffff80000080b323:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000080b326:	48 63 d0             	movsxd rdx,eax
ffff80000080b329:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b32d:	48 89 d6             	mov    rsi,rdx
ffff80000080b330:	48 89 c7             	mov    rdi,rax
ffff80000080b333:	49 89 df             	mov    r15,rbx
ffff80000080b336:	48 b8 62 89 ee ff ff 	movabs rax,0xffffffffffee8962
ffff80000080b33d:	ff ff ff 
ffff80000080b340:	48 01 d8             	add    rax,rbx
ffff80000080b343:	ff d0                	call   rax
ffff80000080b345:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000080b349:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:740
        break;
ffff80000080b34c:	e9 b9 00 00 00       	jmp    ffff80000080b40a <dl_runtime_resolve+0x1b5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:742
    case R_X86_64_RELATIVE:
        *v_rel+=get_load_base(modid);
ffff80000080b351:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b355:	48 89 c7             	mov    rdi,rax
ffff80000080b358:	49 89 df             	mov    r15,rbx
ffff80000080b35b:	48 b8 89 89 ee ff ff 	movabs rax,0xffffffffffee8989
ffff80000080b362:	ff ff ff 
ffff80000080b365:	48 01 d8             	add    rax,rbx
ffff80000080b368:	ff d0                	call   rax
ffff80000080b36a:	48 89 c2             	mov    rdx,rax
ffff80000080b36d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080b371:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b374:	48 01 c2             	add    rdx,rax
ffff80000080b377:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080b37b:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:743
        break;
ffff80000080b37e:	e9 87 00 00 00       	jmp    ffff80000080b40a <dl_runtime_resolve+0x1b5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:745
    case R_X86_64_GOTOFF:
        *v_rel+=sym_off-get_got(modid);
ffff80000080b383:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b387:	48 89 c7             	mov    rdi,rax
ffff80000080b38a:	49 89 df             	mov    r15,rbx
ffff80000080b38d:	48 b8 d1 89 ee ff ff 	movabs rax,0xffffffffffee89d1
ffff80000080b394:	ff ff ff 
ffff80000080b397:	48 01 d8             	add    rax,rbx
ffff80000080b39a:	ff d0                	call   rax
ffff80000080b39c:	48 89 c2             	mov    rdx,rax
ffff80000080b39f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080b3a3:	48 29 d0             	sub    rax,rdx
ffff80000080b3a6:	48 89 c1             	mov    rcx,rax
ffff80000080b3a9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080b3ad:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b3b0:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
ffff80000080b3b4:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080b3b8:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:746
        break;
ffff80000080b3bb:	eb 4d                	jmp    ffff80000080b40a <dl_runtime_resolve+0x1b5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:748
    case R_X86_64_GOTPC:
        *v_rel+=get_got(modid)-rel_offset;
ffff80000080b3bd:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b3c1:	48 89 c7             	mov    rdi,rax
ffff80000080b3c4:	49 89 df             	mov    r15,rbx
ffff80000080b3c7:	48 b8 d1 89 ee ff ff 	movabs rax,0xffffffffffee89d1
ffff80000080b3ce:	ff ff ff 
ffff80000080b3d1:	48 01 d8             	add    rax,rbx
ffff80000080b3d4:	ff d0                	call   rax
ffff80000080b3d6:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff80000080b3da:	48 29 d0             	sub    rax,rdx
ffff80000080b3dd:	48 89 c1             	mov    rcx,rax
ffff80000080b3e0:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080b3e4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b3e7:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
ffff80000080b3eb:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080b3ef:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:749
        break;
ffff80000080b3f2:	eb 16                	jmp    ffff80000080b40a <dl_runtime_resolve+0x1b5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:752
    case R_X86_64_GOT32:
    //这一项,rel里面指向的符号的地址就是got
        *v_rel+=sym_off;
ffff80000080b3f4:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080b3f8:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080b3fb:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080b3ff:	48 01 c2             	add    rdx,rax
ffff80000080b402:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080b406:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:754
    default:
        break;
ffff80000080b409:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:758
    }
    //重定位完毕，直接返回到目标地址

    __asm__ volatile("mov %0,%%rax\n mov %%rax,0(%%rsp)"::"m"(*v_rel));
ffff80000080b40a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080b40e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b411:	48 89 04 24          	mov    QWORD PTR [rsp],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:759
}
ffff80000080b415:	90                   	nop
ffff80000080b416:	48 83 c4 30          	add    rsp,0x30
ffff80000080b41a:	5b                   	pop    rbx
ffff80000080b41b:	41 5f                	pop    r15
ffff80000080b41d:	5d                   	pop    rbp
ffff80000080b41e:	c3                   	ret    

ffff80000080b41f <get_sym_addr>:
get_sym_addr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:760
off_t get_sym_addr(unsigned long modid,unsigned long symi){
ffff80000080b41f:	f3 0f 1e fa          	endbr64 
ffff80000080b423:	55                   	push   rbp
ffff80000080b424:	48 89 e5             	mov    rbp,rsp
ffff80000080b427:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080b427 <get_sym_addr+0x8>
ffff80000080b42e:	49 bb d1 77 11 00 00 	movabs r11,0x1177d1
ffff80000080b435:	00 00 00 
ffff80000080b438:	4c 01 d8             	add    rax,r11
ffff80000080b43b:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff80000080b43f:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:761
    struct Elf64_Sym *sym=modules[modid].p_symbol;
ffff80000080b443:	48 ba a0 fd ff ff ff 	movabs rdx,0xfffffffffffffda0
ffff80000080b44a:	ff ff ff 
ffff80000080b44d:	48 8b 34 10          	mov    rsi,QWORD PTR [rax+rdx*1]
ffff80000080b451:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff80000080b455:	48 89 ca             	mov    rdx,rcx
ffff80000080b458:	48 c1 e2 03          	shl    rdx,0x3
ffff80000080b45c:	48 29 ca             	sub    rdx,rcx
ffff80000080b45f:	48 c1 e2 03          	shl    rdx,0x3
ffff80000080b463:	48 01 f2             	add    rdx,rsi
ffff80000080b466:	48 83 c2 28          	add    rdx,0x28
ffff80000080b46a:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080b46d:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:762
    sym+=symi;
ffff80000080b471:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffff80000080b475:	48 89 ca             	mov    rdx,rcx
ffff80000080b478:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080b47c:	48 01 ca             	add    rdx,rcx
ffff80000080b47f:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080b483:	48 01 55 f0          	add    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:768
    if(sym->st_shndx==SHN_COMMON){
        //还没分配空间的符号，需要分配空间，st_value表示地址对齐约束

    }

    off_t symaddr=sym->st_value+modules[modid].load_offset;
ffff80000080b487:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080b48b:	48 8b 72 04          	mov    rsi,QWORD PTR [rdx+0x4]
ffff80000080b48f:	48 ba a0 fd ff ff ff 	movabs rdx,0xfffffffffffffda0
ffff80000080b496:	ff ff ff 
ffff80000080b499:	48 8b 3c 10          	mov    rdi,QWORD PTR [rax+rdx*1]
ffff80000080b49d:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff80000080b4a1:	48 89 ca             	mov    rdx,rcx
ffff80000080b4a4:	48 c1 e2 03          	shl    rdx,0x3
ffff80000080b4a8:	48 29 ca             	sub    rdx,rcx
ffff80000080b4ab:	48 c1 e2 03          	shl    rdx,0x3
ffff80000080b4af:	48 01 fa             	add    rdx,rdi
ffff80000080b4b2:	48 83 c2 08          	add    rdx,0x8
ffff80000080b4b6:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080b4b9:	48 01 f2             	add    rdx,rsi
ffff80000080b4bc:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:769
    if(modules[modid].type==ET_DYN){
ffff80000080b4c0:	48 ba a0 fd ff ff ff 	movabs rdx,0xfffffffffffffda0
ffff80000080b4c7:	ff ff ff 
ffff80000080b4ca:	48 8b 34 10          	mov    rsi,QWORD PTR [rax+rdx*1]
ffff80000080b4ce:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff80000080b4d2:	48 89 ca             	mov    rdx,rcx
ffff80000080b4d5:	48 c1 e2 03          	shl    rdx,0x3
ffff80000080b4d9:	48 29 ca             	sub    rdx,rcx
ffff80000080b4dc:	48 c1 e2 03          	shl    rdx,0x3
ffff80000080b4e0:	48 01 f2             	add    rdx,rsi
ffff80000080b4e3:	48 83 c2 18          	add    rdx,0x18
ffff80000080b4e7:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080b4ea:	48 83 fa 03          	cmp    rdx,0x3
ffff80000080b4ee:	75 64                	jne    ffff80000080b554 <get_sym_addr+0x135>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:771
        //还要加上节地址
        Elf64_Ehdr* ehdr=modules[modid].header;
ffff80000080b4f0:	48 ba a0 fd ff ff ff 	movabs rdx,0xfffffffffffffda0
ffff80000080b4f7:	ff ff ff 
ffff80000080b4fa:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080b4fe:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080b502:	48 89 d0             	mov    rax,rdx
ffff80000080b505:	48 c1 e0 03          	shl    rax,0x3
ffff80000080b509:	48 29 d0             	sub    rax,rdx
ffff80000080b50c:	48 c1 e0 03          	shl    rax,0x3
ffff80000080b510:	48 01 c8             	add    rax,rcx
ffff80000080b513:	48 83 c0 10          	add    rax,0x10
ffff80000080b517:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b51a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:772
        struct Elf64_Shdr* shdr=ehdr->e_shoff;
ffff80000080b51e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080b522:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080b526:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:773
        symaddr+=shdr[sym->st_shndx].sh_addr;
ffff80000080b52a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080b52e:	0f b7 40 12          	movzx  eax,WORD PTR [rax+0x12]
ffff80000080b532:	0f b7 d0             	movzx  edx,ax
ffff80000080b535:	48 89 d0             	mov    rax,rdx
ffff80000080b538:	48 01 c0             	add    rax,rax
ffff80000080b53b:	48 01 d0             	add    rax,rdx
ffff80000080b53e:	48 c1 e0 04          	shl    rax,0x4
ffff80000080b542:	48 89 c2             	mov    rdx,rax
ffff80000080b545:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080b549:	48 01 d0             	add    rax,rdx
ffff80000080b54c:	48 8b 40 0c          	mov    rax,QWORD PTR [rax+0xc]
ffff80000080b550:	48 01 45 f8          	add    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:775
    }
    return symaddr;
ffff80000080b554:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:776
}
ffff80000080b558:	5d                   	pop    rbp
ffff80000080b559:	c3                   	ret    

ffff80000080b55a <get_sym_plt>:
get_sym_plt():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:777
off_t get_sym_plt(unsigned long modid,unsigned long symi){
ffff80000080b55a:	f3 0f 1e fa          	endbr64 
ffff80000080b55e:	55                   	push   rbp
ffff80000080b55f:	48 89 e5             	mov    rbp,rsp
ffff80000080b562:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080b562 <get_sym_plt+0x8>
ffff80000080b569:	49 bb 96 76 11 00 00 	movabs r11,0x117696
ffff80000080b570:	00 00 00 
ffff80000080b573:	4c 01 d8             	add    rax,r11
ffff80000080b576:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080b57a:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:779

}
ffff80000080b57e:	90                   	nop
ffff80000080b57f:	5d                   	pop    rbp
ffff80000080b580:	c3                   	ret    

ffff80000080b581 <get_load_base>:
get_load_base():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:780
off_t get_load_base(unsigned long modid){
ffff80000080b581:	f3 0f 1e fa          	endbr64 
ffff80000080b585:	55                   	push   rbp
ffff80000080b586:	48 89 e5             	mov    rbp,rsp
ffff80000080b589:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080b589 <get_load_base+0x8>
ffff80000080b590:	49 bb 6f 76 11 00 00 	movabs r11,0x11766f
ffff80000080b597:	00 00 00 
ffff80000080b59a:	4c 01 d8             	add    rax,r11
ffff80000080b59d:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:781
    return modules[modid].base;
ffff80000080b5a1:	48 ba a0 fd ff ff ff 	movabs rdx,0xfffffffffffffda0
ffff80000080b5a8:	ff ff ff 
ffff80000080b5ab:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080b5af:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080b5b3:	48 89 d0             	mov    rax,rdx
ffff80000080b5b6:	48 c1 e0 03          	shl    rax,0x3
ffff80000080b5ba:	48 29 d0             	sub    rax,rdx
ffff80000080b5bd:	48 c1 e0 03          	shl    rax,0x3
ffff80000080b5c1:	48 01 c8             	add    rax,rcx
ffff80000080b5c4:	48 8b 00             	mov    rax,QWORD PTR [rax]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:782
}
ffff80000080b5c7:	5d                   	pop    rbp
ffff80000080b5c8:	c3                   	ret    

ffff80000080b5c9 <get_got>:
get_got():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:783
off_t get_got(unsigned long modid){
ffff80000080b5c9:	f3 0f 1e fa          	endbr64 
ffff80000080b5cd:	55                   	push   rbp
ffff80000080b5ce:	48 89 e5             	mov    rbp,rsp
ffff80000080b5d1:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080b5d1 <get_got+0x8>
ffff80000080b5d8:	49 bb 27 76 11 00 00 	movabs r11,0x117627
ffff80000080b5df:	00 00 00 
ffff80000080b5e2:	4c 01 d8             	add    rax,r11
ffff80000080b5e5:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:784
    return modules[modid].p_got;
ffff80000080b5e9:	48 ba a0 fd ff ff ff 	movabs rdx,0xfffffffffffffda0
ffff80000080b5f0:	ff ff ff 
ffff80000080b5f3:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080b5f7:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080b5fb:	48 89 d0             	mov    rax,rdx
ffff80000080b5fe:	48 c1 e0 03          	shl    rax,0x3
ffff80000080b602:	48 29 d0             	sub    rax,rdx
ffff80000080b605:	48 c1 e0 03          	shl    rax,0x3
ffff80000080b609:	48 01 c8             	add    rax,rcx
ffff80000080b60c:	48 83 c0 30          	add    rax,0x30
ffff80000080b610:	48 8b 00             	mov    rax,QWORD PTR [rax]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:785
}
ffff80000080b613:	5d                   	pop    rbp
ffff80000080b614:	c3                   	ret    

ffff80000080b615 <fill_reloc>:
fill_reloc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:787

void fill_reloc(Elf64_Rel* rel,int modid){
ffff80000080b615:	f3 0f 1e fa          	endbr64 
ffff80000080b619:	55                   	push   rbp
ffff80000080b61a:	48 89 e5             	mov    rbp,rsp
ffff80000080b61d:	41 57                	push   r15
ffff80000080b61f:	53                   	push   rbx
ffff80000080b620:	48 83 ec 30          	sub    rsp,0x30
ffff80000080b624:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080b624 <fill_reloc+0xf>
ffff80000080b62b:	49 bb d4 75 11 00 00 	movabs r11,0x1175d4
ffff80000080b632:	00 00 00 
ffff80000080b635:	4c 01 db             	add    rbx,r11
ffff80000080b638:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff80000080b63c:	89 75 c4             	mov    DWORD PTR [rbp-0x3c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:788
    int symi=ELF64_R_SYM(rel->r_info),type=ELF64_R_TYPE(rel->r_info);
ffff80000080b63f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b643:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080b646:	ba 20 00 00 00       	mov    edx,0x20
ffff80000080b64b:	89 d1                	mov    ecx,edx
ffff80000080b64d:	d3 e8                	shr    eax,cl
ffff80000080b64f:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
ffff80000080b652:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b656:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080b659:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:789
    off_t sym_off=get_sym_addr(modid,symi);
ffff80000080b65c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080b65f:	48 63 d0             	movsxd rdx,eax
ffff80000080b662:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080b665:	48 98                	cdqe   
ffff80000080b667:	48 89 d6             	mov    rsi,rdx
ffff80000080b66a:	48 89 c7             	mov    rdi,rax
ffff80000080b66d:	49 89 df             	mov    r15,rbx
ffff80000080b670:	48 b8 27 88 ee ff ff 	movabs rax,0xffffffffffee8827
ffff80000080b677:	ff ff ff 
ffff80000080b67a:	48 01 d8             	add    rax,rbx
ffff80000080b67d:	ff d0                	call   rax
ffff80000080b67f:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:792
    //这里假定获取符号的地址是正确的，可以不修改符号表，而是通过记录模块整体加载地址，
    //来加上偏移量获取正确的符号地址
    off_t* v_rel=rel->r_offset;
ffff80000080b683:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b687:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b68a:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:793
    switch (type)
ffff80000080b68e:	83 7d e8 0b          	cmp    DWORD PTR [rbp-0x18],0xb
ffff80000080b692:	0f 87 57 01 00 00    	ja     ffff80000080b7ef <fill_reloc+0x1da>
ffff80000080b698:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080b69b:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080b6a2:	00 
ffff80000080b6a3:	48 8d 05 0e 4a 11 00 	lea    rax,[rip+0x114a0e]        # ffff8000009200b8 <.LC3+0x68>
ffff80000080b6aa:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
ffff80000080b6ae:	48 8d 15 03 4a 11 00 	lea    rdx,[rip+0x114a03]        # ffff8000009200b8 <.LC3+0x68>
ffff80000080b6b5:	48 01 d0             	add    rax,rdx
ffff80000080b6b8:	3e ff e0             	notrack jmp rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:797
    {
    case R_X86_64_GLOB_DAT:
    case R_X86_64_JUMP_SLOT:
        *v_rel=sym_off;
ffff80000080b6bb:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080b6bf:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080b6c3:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:798
        break;
ffff80000080b6c6:	e9 25 01 00 00       	jmp    ffff80000080b7f0 <fill_reloc+0x1db>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:800
    case R_X86_64_PLT32:
        *v_rel=get_sym_plt(modid,symi);
ffff80000080b6cb:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080b6ce:	48 63 d0             	movsxd rdx,eax
ffff80000080b6d1:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080b6d4:	48 98                	cdqe   
ffff80000080b6d6:	48 89 d6             	mov    rsi,rdx
ffff80000080b6d9:	48 89 c7             	mov    rdi,rax
ffff80000080b6dc:	49 89 df             	mov    r15,rbx
ffff80000080b6df:	48 b8 62 89 ee ff ff 	movabs rax,0xffffffffffee8962
ffff80000080b6e6:	ff ff ff 
ffff80000080b6e9:	48 01 d8             	add    rax,rbx
ffff80000080b6ec:	ff d0                	call   rax
ffff80000080b6ee:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080b6f2:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:801
        break;
ffff80000080b6f5:	e9 f6 00 00 00       	jmp    ffff80000080b7f0 <fill_reloc+0x1db>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:803
    case R_X86_64_RELATIVE:
        *v_rel+=get_load_base(modid);
ffff80000080b6fa:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080b6fd:	48 98                	cdqe   
ffff80000080b6ff:	48 89 c7             	mov    rdi,rax
ffff80000080b702:	49 89 df             	mov    r15,rbx
ffff80000080b705:	48 b8 89 89 ee ff ff 	movabs rax,0xffffffffffee8989
ffff80000080b70c:	ff ff ff 
ffff80000080b70f:	48 01 d8             	add    rax,rbx
ffff80000080b712:	ff d0                	call   rax
ffff80000080b714:	48 89 c2             	mov    rdx,rax
ffff80000080b717:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080b71b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b71e:	48 01 c2             	add    rdx,rax
ffff80000080b721:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080b725:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:804
        break;
ffff80000080b728:	e9 c3 00 00 00       	jmp    ffff80000080b7f0 <fill_reloc+0x1db>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:806
    case R_X86_64_GOTOFF:
        *v_rel+=sym_off-get_got(modid);
ffff80000080b72d:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080b730:	48 98                	cdqe   
ffff80000080b732:	48 89 c7             	mov    rdi,rax
ffff80000080b735:	49 89 df             	mov    r15,rbx
ffff80000080b738:	48 b8 d1 89 ee ff ff 	movabs rax,0xffffffffffee89d1
ffff80000080b73f:	ff ff ff 
ffff80000080b742:	48 01 d8             	add    rax,rbx
ffff80000080b745:	ff d0                	call   rax
ffff80000080b747:	48 89 c2             	mov    rdx,rax
ffff80000080b74a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080b74e:	48 29 d0             	sub    rax,rdx
ffff80000080b751:	48 89 c1             	mov    rcx,rax
ffff80000080b754:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080b758:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b75b:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
ffff80000080b75f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080b763:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:807
        break;
ffff80000080b766:	e9 85 00 00 00       	jmp    ffff80000080b7f0 <fill_reloc+0x1db>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:809
    case R_X86_64_GOTPC:
        *v_rel+=get_got(modid)-(off_t)rel;
ffff80000080b76b:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000080b76e:	48 98                	cdqe   
ffff80000080b770:	48 89 c7             	mov    rdi,rax
ffff80000080b773:	49 89 df             	mov    r15,rbx
ffff80000080b776:	48 b8 d1 89 ee ff ff 	movabs rax,0xffffffffffee89d1
ffff80000080b77d:	ff ff ff 
ffff80000080b780:	48 01 d8             	add    rax,rbx
ffff80000080b783:	ff d0                	call   rax
ffff80000080b785:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080b789:	48 29 d0             	sub    rax,rdx
ffff80000080b78c:	48 89 c1             	mov    rcx,rax
ffff80000080b78f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080b793:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080b796:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
ffff80000080b79a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080b79e:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:810
        break;
ffff80000080b7a1:	eb 4d                	jmp    ffff80000080b7f0 <fill_reloc+0x1db>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:813
    case R_X86_64_GOT32:
    //这一项,rel里面指向的符号的地址就是got
        *v_rel+=sym_off;
ffff80000080b7a3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080b7a7:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080b7aa:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080b7ae:	48 01 c2             	add    rdx,rax
ffff80000080b7b1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080b7b5:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:814
        break;
ffff80000080b7b8:	eb 36                	jmp    ffff80000080b7f0 <fill_reloc+0x1db>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:817
    case R_X86_64_32S:
    case R_X86_64_64:
        *v_rel+=sym_off;
ffff80000080b7ba:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080b7be:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080b7c1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080b7c5:	48 01 c2             	add    rdx,rax
ffff80000080b7c8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080b7cc:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:818
        break;
ffff80000080b7cf:	eb 1f                	jmp    ffff80000080b7f0 <fill_reloc+0x1db>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:820
    case R_X86_64_PC32:
        *v_rel+=sym_off-(off_t)rel;
ffff80000080b7d1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080b7d5:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080b7d8:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
ffff80000080b7dc:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080b7e0:	48 29 c8             	sub    rax,rcx
ffff80000080b7e3:	48 01 c2             	add    rdx,rax
ffff80000080b7e6:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080b7ea:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:821
        break;
ffff80000080b7ed:	eb 01                	jmp    ffff80000080b7f0 <fill_reloc+0x1db>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:823
    default:
        break;
ffff80000080b7ef:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/exe.c:825
    }
ffff80000080b7f0:	90                   	nop
ffff80000080b7f1:	48 83 c4 30          	add    rsp,0x30
ffff80000080b7f5:	5b                   	pop    rbx
ffff80000080b7f6:	41 5f                	pop    r15
ffff80000080b7f8:	5d                   	pop    rbp
ffff80000080b7f9:	c3                   	ret    
ffff80000080b7fa:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

ffff80000080b800 <_syscall>:
_syscall():
ffff80000080b800:	55                   	push   rbp
ffff80000080b801:	48 bd 00 80 10 00 00 	movabs rbp,0xffff800000108000
ffff80000080b808:	80 ff ff 
ffff80000080b80b:	48 89 65 14          	mov    QWORD PTR [rbp+0x14],rsp
ffff80000080b80f:	48 8b 65 24          	mov    rsp,QWORD PTR [rbp+0x24]
ffff80000080b813:	6a 2b                	push   0x2b
ffff80000080b815:	54                   	push   rsp
ffff80000080b816:	9c                   	pushf  
ffff80000080b817:	6a 33                	push   0x33
ffff80000080b819:	51                   	push   rcx
ffff80000080b81a:	50                   	push   rax
ffff80000080b81b:	53                   	push   rbx
ffff80000080b81c:	51                   	push   rcx
ffff80000080b81d:	52                   	push   rdx
ffff80000080b81e:	57                   	push   rdi
ffff80000080b81f:	56                   	push   rsi
ffff80000080b820:	41 50                	push   r8
ffff80000080b822:	41 51                	push   r9
ffff80000080b824:	41 52                	push   r10
ffff80000080b826:	41 53                	push   r11
ffff80000080b828:	41 54                	push   r12
ffff80000080b82a:	41 55                	push   r13
ffff80000080b82c:	41 56                	push   r14
ffff80000080b82e:	41 57                	push   r15
ffff80000080b830:	66 8c c0             	mov    ax,es
ffff80000080b833:	50                   	push   rax
ffff80000080b834:	66 8c d8             	mov    ax,ds
ffff80000080b837:	50                   	push   rax
ffff80000080b838:	66 b8 10 00          	mov    ax,0x10
ffff80000080b83c:	8e c0                	mov    es,eax
ffff80000080b83e:	8e d8                	mov    ds,eax
ffff80000080b840:	48 8b 44 24 78       	mov    rax,QWORD PTR [rsp+0x78]
ffff80000080b845:	41 53                	push   r11
ffff80000080b847:	51                   	push   rcx
ffff80000080b848:	49 87 ca             	xchg   r10,rcx
ffff80000080b84b:	57                   	push   rdi
ffff80000080b84c:	48 bf 48 03 40 00 00 	movabs rdi,0xffff800000400348
ffff80000080b853:	80 ff ff 
ffff80000080b856:	48 8b 3f             	mov    rdi,QWORD PTR [rdi]
ffff80000080b859:	4c 89 97 6c 02 00 00 	mov    QWORD PTR [rdi+0x26c],r10
ffff80000080b860:	5f                   	pop    rdi
ffff80000080b861:	e8 dd 52 ff ff       	call   ffff800000800b43 <syscall>

ffff80000080b866 <_syscall_sysret>:
_syscall_sysret():
ffff80000080b866:	4c 87 d1             	xchg   rcx,r10
ffff80000080b869:	59                   	pop    rcx
ffff80000080b86a:	41 5b                	pop    r11
ffff80000080b86c:	58                   	pop    rax
ffff80000080b86d:	8e d8                	mov    ds,eax
ffff80000080b86f:	58                   	pop    rax
ffff80000080b870:	8e c0                	mov    es,eax
ffff80000080b872:	41 5f                	pop    r15
ffff80000080b874:	41 5e                	pop    r14
ffff80000080b876:	41 5d                	pop    r13
ffff80000080b878:	41 5c                	pop    r12
ffff80000080b87a:	41 5b                	pop    r11
ffff80000080b87c:	41 5a                	pop    r10
ffff80000080b87e:	41 59                	pop    r9
ffff80000080b880:	41 58                	pop    r8
ffff80000080b882:	5e                   	pop    rsi
ffff80000080b883:	5f                   	pop    rdi
ffff80000080b884:	5a                   	pop    rdx
ffff80000080b885:	59                   	pop    rcx
ffff80000080b886:	5b                   	pop    rbx
ffff80000080b887:	48 83 c4 08          	add    rsp,0x8
ffff80000080b88b:	48 8b 65 14          	mov    rsp,QWORD PTR [rbp+0x14]
ffff80000080b88f:	5d                   	pop    rbp
ffff80000080b890:	fb                   	sti    
ffff80000080b891:	48 0f 07             	sysretq 

ffff80000080b894 <init_framebuffer>:
init_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:27
static u32 font_width_bytes;
static u8 *glyph_table;
static u32 bytes_per_glyph, glyph_nr;
int font_size=1;
void init_framebuffer()
{
ffff80000080b894:	f3 0f 1e fa          	endbr64 
ffff80000080b898:	55                   	push   rbp
ffff80000080b899:	48 89 e5             	mov    rbp,rsp
ffff80000080b89c:	41 57                	push   r15
ffff80000080b89e:	53                   	push   rbx
ffff80000080b89f:	48 83 ec 50          	sub    rsp,0x50
ffff80000080b8a3:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080b8a3 <init_framebuffer+0xf>
ffff80000080b8aa:	49 bb 55 73 11 00 00 	movabs r11,0x117355
ffff80000080b8b1:	00 00 00 
ffff80000080b8b4:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:29
    //映射页帧内存
    size_t w=framebuffer.common.framebuffer_width;
ffff80000080b8b7:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff80000080b8be:	ff ff ff 
ffff80000080b8c1:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b8c5:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
ffff80000080b8c8:	89 c0                	mov    eax,eax
ffff80000080b8ca:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:30
    size_t h=framebuffer.common.framebuffer_height;
ffff80000080b8ce:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff80000080b8d5:	ff ff ff 
ffff80000080b8d8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b8dc:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff80000080b8df:	89 c0                	mov    eax,eax
ffff80000080b8e1:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:31
    size_t bypp=framebuffer.common.framebuffer_bpp/8;
ffff80000080b8e5:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff80000080b8ec:	ff ff ff 
ffff80000080b8ef:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b8f3:	0f b6 40 1c          	movzx  eax,BYTE PTR [rax+0x1c]
ffff80000080b8f7:	c0 e8 03             	shr    al,0x3
ffff80000080b8fa:	0f b6 c0             	movzx  eax,al
ffff80000080b8fd:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:32
    size_t inter=framebuffer.common.framebuffer_pitch;
ffff80000080b901:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff80000080b908:	ff ff ff 
ffff80000080b90b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b90f:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff80000080b912:	89 c0                	mov    eax,eax
ffff80000080b914:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:33
    size_t pc=w*h;
ffff80000080b918:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080b91c:	48 0f af 45 c8       	imul   rax,QWORD PTR [rbp-0x38]
ffff80000080b921:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:34
    size_t size=h*inter;
ffff80000080b925:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080b929:	48 0f af 45 b8       	imul   rax,QWORD PTR [rbp-0x48]
ffff80000080b92e:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:35
    int pgc=size/PAGE_SIZE;
ffff80000080b932:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080b936:	48 c1 e8 0c          	shr    rax,0xc
ffff80000080b93a:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:36
    addr_t p=FRAMEBUFFER_ADDR;
ffff80000080b93d:	48 b8 00 00 00 40 00 	movabs rax,0xffff800040000000
ffff80000080b944:	80 ff ff 
ffff80000080b947:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:37
    addr_t pp=framebuffer.common.framebuffer_addr;
ffff80000080b94b:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff80000080b952:	ff ff ff 
ffff80000080b955:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080b959:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080b95d:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:38
    for (size_t i = 0; i < pgc; i++)
ffff80000080b961:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff80000080b968:	00 
ffff80000080b969:	eb 44                	jmp    ffff80000080b9af <init_framebuffer+0x11b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:40 (discriminator 3)
    {
        smmap(pp,p,PAGE_PRESENT|PAGE_RWX|PAGE_FOR_ALL,PML4_ADDR);
ffff80000080b96b:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
ffff80000080b96f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080b973:	48 ba 00 10 10 00 00 	movabs rdx,0xffff800000101000
ffff80000080b97a:	80 ff ff 
ffff80000080b97d:	48 89 d1             	mov    rcx,rdx
ffff80000080b980:	ba 07 00 00 00       	mov    edx,0x7
ffff80000080b985:	48 89 c7             	mov    rdi,rax
ffff80000080b988:	49 89 df             	mov    r15,rbx
ffff80000080b98b:	48 b8 d4 f1 ed ff ff 	movabs rax,0xffffffffffedf1d4
ffff80000080b992:	ff ff ff 
ffff80000080b995:	48 01 d8             	add    rax,rbx
ffff80000080b998:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:41 (discriminator 3)
        pp+=PAGE_SIZE;
ffff80000080b99a:	48 81 45 e0 00 10 00 	add    QWORD PTR [rbp-0x20],0x1000
ffff80000080b9a1:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:42 (discriminator 3)
        p+=PAGE_SIZE;
ffff80000080b9a2:	48 81 45 e8 00 10 00 	add    QWORD PTR [rbp-0x18],0x1000
ffff80000080b9a9:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:38 (discriminator 3)
    for (size_t i = 0; i < pgc; i++)
ffff80000080b9aa:	48 83 45 d8 01       	add    QWORD PTR [rbp-0x28],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:38 (discriminator 1)
ffff80000080b9af:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
ffff80000080b9b2:	48 98                	cdqe   
ffff80000080b9b4:	48 39 45 d8          	cmp    QWORD PTR [rbp-0x28],rax
ffff80000080b9b8:	72 b1                	jb     ffff80000080b96b <init_framebuffer+0xd7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:46
    }
    
    
}
ffff80000080b9ba:	90                   	nop
ffff80000080b9bb:	90                   	nop
ffff80000080b9bc:	48 83 c4 50          	add    rsp,0x50
ffff80000080b9c0:	5b                   	pop    rbx
ffff80000080b9c1:	41 5f                	pop    r15
ffff80000080b9c3:	5d                   	pop    rbp
ffff80000080b9c4:	c3                   	ret    

ffff80000080b9c5 <init_font>:
init_font():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:47
void init_font(){
ffff80000080b9c5:	f3 0f 1e fa          	endbr64 
ffff80000080b9c9:	55                   	push   rbp
ffff80000080b9ca:	48 89 e5             	mov    rbp,rsp
ffff80000080b9cd:	48 8d 0d f9 ff ff ff 	lea    rcx,[rip+0xfffffffffffffff9]        # ffff80000080b9cd <init_font+0x8>
ffff80000080b9d4:	49 bb 2b 72 11 00 00 	movabs r11,0x11722b
ffff80000080b9db:	00 00 00 
ffff80000080b9de:	4c 01 d9             	add    rcx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:48
    boot_font = (struct psf2_header*) (_binary_res_font_psf_start);
ffff80000080b9e1:	48 b8 68 20 af ff ff 	movabs rax,0xffffffffffaf2068
ffff80000080b9e8:	ff ff ff 
ffff80000080b9eb:	48 ba 38 fd ff ff ff 	movabs rdx,0xfffffffffffffd38
ffff80000080b9f2:	ff ff ff 
ffff80000080b9f5:	48 8b 14 11          	mov    rdx,QWORD PTR [rcx+rdx*1]
ffff80000080b9f9:	48 89 14 01          	mov    QWORD PTR [rcx+rax*1],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:50

    font_width_bytes = (boot_font->width + 7) / 8;
ffff80000080b9fd:	48 b8 68 20 af ff ff 	movabs rax,0xffffffffffaf2068
ffff80000080ba04:	ff ff ff 
ffff80000080ba07:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080ba0b:	8b 40 1c             	mov    eax,DWORD PTR [rax+0x1c]
ffff80000080ba0e:	83 c0 07             	add    eax,0x7
ffff80000080ba11:	c1 e8 03             	shr    eax,0x3
ffff80000080ba14:	89 c2                	mov    edx,eax
ffff80000080ba16:	48 b8 78 20 af ff ff 	movabs rax,0xffffffffffaf2078
ffff80000080ba1d:	ff ff ff 
ffff80000080ba20:	89 14 01             	mov    DWORD PTR [rcx+rax*1],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:51
    font_width = font_width_bytes * 8;
ffff80000080ba23:	48 b8 78 20 af ff ff 	movabs rax,0xffffffffffaf2078
ffff80000080ba2a:	ff ff ff 
ffff80000080ba2d:	8b 04 01             	mov    eax,DWORD PTR [rcx+rax*1]
ffff80000080ba30:	8d 14 c5 00 00 00 00 	lea    edx,[rax*8+0x0]
ffff80000080ba37:	48 b8 70 20 af ff ff 	movabs rax,0xffffffffffaf2070
ffff80000080ba3e:	ff ff ff 
ffff80000080ba41:	89 14 01             	mov    DWORD PTR [rcx+rax*1],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:52
    font_height = boot_font->height;
ffff80000080ba44:	48 b8 68 20 af ff ff 	movabs rax,0xffffffffffaf2068
ffff80000080ba4b:	ff ff ff 
ffff80000080ba4e:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080ba52:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff80000080ba55:	48 ba 74 20 af ff ff 	movabs rdx,0xffffffffffaf2074
ffff80000080ba5c:	ff ff ff 
ffff80000080ba5f:	89 04 11             	mov    DWORD PTR [rcx+rdx*1],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:54

    glyph_table = (u8*)(_binary_res_font_psf_start)+boot_font->header_size;
ffff80000080ba62:	48 b8 68 20 af ff ff 	movabs rax,0xffffffffffaf2068
ffff80000080ba69:	ff ff ff 
ffff80000080ba6c:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080ba70:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080ba73:	89 c2                	mov    edx,eax
ffff80000080ba75:	48 b8 38 fd ff ff ff 	movabs rax,0xfffffffffffffd38
ffff80000080ba7c:	ff ff ff 
ffff80000080ba7f:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080ba83:	48 01 c2             	add    rdx,rax
ffff80000080ba86:	48 b8 80 20 af ff ff 	movabs rax,0xffffffffffaf2080
ffff80000080ba8d:	ff ff ff 
ffff80000080ba90:	48 89 14 01          	mov    QWORD PTR [rcx+rax*1],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:55
    glyph_nr = boot_font->glyph_nr;
ffff80000080ba94:	48 b8 68 20 af ff ff 	movabs rax,0xffffffffffaf2068
ffff80000080ba9b:	ff ff ff 
ffff80000080ba9e:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080baa2:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff80000080baa5:	48 ba 8c 20 af ff ff 	movabs rdx,0xffffffffffaf208c
ffff80000080baac:	ff ff ff 
ffff80000080baaf:	89 04 11             	mov    DWORD PTR [rcx+rdx*1],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:56
    bytes_per_glyph = boot_font->bytes_per_glyph;
ffff80000080bab2:	48 b8 68 20 af ff ff 	movabs rax,0xffffffffffaf2068
ffff80000080bab9:	ff ff ff 
ffff80000080babc:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080bac0:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
ffff80000080bac3:	48 ba 88 20 af ff ff 	movabs rdx,0xffffffffffaf2088
ffff80000080baca:	ff ff ff 
ffff80000080bacd:	89 04 11             	mov    DWORD PTR [rcx+rdx*1],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:58

    fb_cursor_x = fb_cursor_y = 0;
ffff80000080bad0:	48 b8 58 20 af ff ff 	movabs rax,0xffffffffffaf2058
ffff80000080bad7:	ff ff ff 
ffff80000080bada:	c7 04 01 00 00 00 00 	mov    DWORD PTR [rcx+rax*1],0x0
ffff80000080bae1:	48 b8 58 20 af ff ff 	movabs rax,0xffffffffffaf2058
ffff80000080bae8:	ff ff ff 
ffff80000080baeb:	8b 04 01             	mov    eax,DWORD PTR [rcx+rax*1]
ffff80000080baee:	48 ba 54 20 af ff ff 	movabs rdx,0xffffffffffaf2054
ffff80000080baf5:	ff ff ff 
ffff80000080baf8:	89 04 11             	mov    DWORD PTR [rcx+rdx*1],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:59
    max_ch_nr_x = framebuffer.common.framebuffer_width / font_width;
ffff80000080bafb:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff80000080bb02:	ff ff ff 
ffff80000080bb05:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080bb09:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
ffff80000080bb0c:	48 ba 70 20 af ff ff 	movabs rdx,0xffffffffffaf2070
ffff80000080bb13:	ff ff ff 
ffff80000080bb16:	8b 34 11             	mov    esi,DWORD PTR [rcx+rdx*1]
ffff80000080bb19:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080bb1e:	f7 f6                	div    esi
ffff80000080bb20:	89 c2                	mov    edx,eax
ffff80000080bb22:	48 b8 5c 20 af ff ff 	movabs rax,0xffffffffffaf205c
ffff80000080bb29:	ff ff ff 
ffff80000080bb2c:	89 14 01             	mov    DWORD PTR [rcx+rax*1],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:60
    max_ch_nr_y = framebuffer.common.framebuffer_height / font_height;
ffff80000080bb2f:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff80000080bb36:	ff ff ff 
ffff80000080bb39:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080bb3d:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff80000080bb40:	48 ba 74 20 af ff ff 	movabs rdx,0xffffffffffaf2074
ffff80000080bb47:	ff ff ff 
ffff80000080bb4a:	8b 3c 11             	mov    edi,DWORD PTR [rcx+rdx*1]
ffff80000080bb4d:	ba 00 00 00 00       	mov    edx,0x0
ffff80000080bb52:	f7 f7                	div    edi
ffff80000080bb54:	89 c2                	mov    edx,eax
ffff80000080bb56:	48 b8 60 20 af ff ff 	movabs rax,0xffffffffffaf2060
ffff80000080bb5d:	ff ff ff 
ffff80000080bb60:	89 14 01             	mov    DWORD PTR [rcx+rax*1],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:61
    font_size=1;
ffff80000080bb63:	48 b8 c8 fd ff ff ff 	movabs rax,0xfffffffffffffdc8
ffff80000080bb6a:	ff ff ff 
ffff80000080bb6d:	48 8b 04 01          	mov    rax,QWORD PTR [rcx+rax*1]
ffff80000080bb71:	c7 00 01 00 00 00    	mov    DWORD PTR [rax],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:62
}
ffff80000080bb77:	90                   	nop
ffff80000080bb78:	5d                   	pop    rbp
ffff80000080bb79:	c3                   	ret    

ffff80000080bb7a <set_framebuffer>:
set_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:64
void set_framebuffer(struct multiboot_tag_framebuffer tag)
{
ffff80000080bb7a:	f3 0f 1e fa          	endbr64 
ffff80000080bb7e:	55                   	push   rbp
ffff80000080bb7f:	48 89 e5             	mov    rbp,rsp
ffff80000080bb82:	53                   	push   rbx
ffff80000080bb83:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080bb83 <set_framebuffer+0x9>
ffff80000080bb8a:	49 bb 75 70 11 00 00 	movabs r11,0x117075
ffff80000080bb91:	00 00 00 
ffff80000080bb94:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:65
    framebuffer=tag;
ffff80000080bb97:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff80000080bb9e:	ff ff ff 
ffff80000080bba1:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080bba5:	48 8b 4d 10          	mov    rcx,QWORD PTR [rbp+0x10]
ffff80000080bba9:	48 8b 5d 18          	mov    rbx,QWORD PTR [rbp+0x18]
ffff80000080bbad:	48 89 08             	mov    QWORD PTR [rax],rcx
ffff80000080bbb0:	48 89 58 08          	mov    QWORD PTR [rax+0x8],rbx
ffff80000080bbb4:	48 8b 4d 20          	mov    rcx,QWORD PTR [rbp+0x20]
ffff80000080bbb8:	48 8b 5d 28          	mov    rbx,QWORD PTR [rbp+0x28]
ffff80000080bbbc:	48 89 48 10          	mov    QWORD PTR [rax+0x10],rcx
ffff80000080bbc0:	48 89 58 18          	mov    QWORD PTR [rax+0x18],rbx
ffff80000080bbc4:	48 8b 55 30          	mov    rdx,QWORD PTR [rbp+0x30]
ffff80000080bbc8:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:66
}
ffff80000080bbcc:	90                   	nop
ffff80000080bbcd:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
ffff80000080bbd1:	c9                   	leave  
ffff80000080bbd2:	c3                   	ret    

ffff80000080bbd3 <fill_rect>:
fill_rect():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:68

void fill_rect(int x,int y,int w,int h,unsigned int color){
ffff80000080bbd3:	f3 0f 1e fa          	endbr64 
ffff80000080bbd7:	55                   	push   rbp
ffff80000080bbd8:	48 89 e5             	mov    rbp,rsp
ffff80000080bbdb:	4c 8d 0d f9 ff ff ff 	lea    r9,[rip+0xfffffffffffffff9]        # ffff80000080bbdb <fill_rect+0x8>
ffff80000080bbe2:	49 bb 1d 70 11 00 00 	movabs r11,0x11701d
ffff80000080bbe9:	00 00 00 
ffff80000080bbec:	4d 01 d9             	add    r9,r11
ffff80000080bbef:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff80000080bbf2:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080bbf5:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff80000080bbf8:	89 4d d0             	mov    DWORD PTR [rbp-0x30],ecx
ffff80000080bbfb:	44 89 45 cc          	mov    DWORD PTR [rbp-0x34],r8d
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:69
    unsigned int* fb= (unsigned int*) FRAMEBUFFER_ADDR;
ffff80000080bbff:	48 b8 00 00 00 40 00 	movabs rax,0xffff800040000000
ffff80000080bc06:	80 ff ff 
ffff80000080bc09:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:71
    //目前只写32bpp
    for(int py=x;py<h+x;py++){
ffff80000080bc0d:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080bc10:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffff80000080bc13:	e9 82 00 00 00       	jmp    ffff80000080bc9a <fill_rect+0xc7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:72
        for(int px=y;px<w+y;px++){
ffff80000080bc18:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080bc1b:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffff80000080bc1e:	eb 69                	jmp    ffff80000080bc89 <fill_rect+0xb6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:73 (discriminator 3)
            addr_t ptr=FRAMEBUFFER_ADDR+py*framebuffer.common.framebuffer_pitch
ffff80000080bc20:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff80000080bc27:	ff ff ff 
ffff80000080bc2a:	49 8b 04 01          	mov    rax,QWORD PTR [r9+rax*1]
ffff80000080bc2e:	8b 50 10             	mov    edx,DWORD PTR [rax+0x10]
ffff80000080bc31:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000080bc34:	0f af c2             	imul   eax,edx
ffff80000080bc37:	89 c1                	mov    ecx,eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:74 (discriminator 3)
                       +px*framebuffer.common.framebuffer_bpp/8;
ffff80000080bc39:	48 b8 a8 fe ff ff ff 	movabs rax,0xfffffffffffffea8
ffff80000080bc40:	ff ff ff 
ffff80000080bc43:	49 8b 04 01          	mov    rax,QWORD PTR [r9+rax*1]
ffff80000080bc47:	0f b6 40 1c          	movzx  eax,BYTE PTR [rax+0x1c]
ffff80000080bc4b:	0f b6 c0             	movzx  eax,al
ffff80000080bc4e:	0f af 45 f8          	imul   eax,DWORD PTR [rbp-0x8]
ffff80000080bc52:	8d 50 07             	lea    edx,[rax+0x7]
ffff80000080bc55:	85 c0                	test   eax,eax
ffff80000080bc57:	0f 48 c2             	cmovs  eax,edx
ffff80000080bc5a:	c1 f8 03             	sar    eax,0x3
ffff80000080bc5d:	48 98                	cdqe   
ffff80000080bc5f:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:73 (discriminator 3)
            addr_t ptr=FRAMEBUFFER_ADDR+py*framebuffer.common.framebuffer_pitch
ffff80000080bc63:	48 b8 00 00 00 40 00 	movabs rax,0xffff800040000000
ffff80000080bc6a:	80 ff ff 
ffff80000080bc6d:	48 01 d0             	add    rax,rdx
ffff80000080bc70:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:75 (discriminator 3)
            fb=(unsigned int*)ptr;
ffff80000080bc74:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080bc78:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:76 (discriminator 3)
            *fb=color;
ffff80000080bc7c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080bc80:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000080bc83:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:72 (discriminator 3)
        for(int px=y;px<w+y;px++){
ffff80000080bc85:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:72 (discriminator 1)
ffff80000080bc89:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff80000080bc8c:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080bc8f:	01 d0                	add    eax,edx
ffff80000080bc91:	39 45 f8             	cmp    DWORD PTR [rbp-0x8],eax
ffff80000080bc94:	7c 8a                	jl     ffff80000080bc20 <fill_rect+0x4d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:71 (discriminator 2)
    for(int py=x;py<h+x;py++){
ffff80000080bc96:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:71 (discriminator 1)
ffff80000080bc9a:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
ffff80000080bc9d:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080bca0:	01 d0                	add    eax,edx
ffff80000080bca2:	39 45 fc             	cmp    DWORD PTR [rbp-0x4],eax
ffff80000080bca5:	0f 8c 6d ff ff ff    	jl     ffff80000080bc18 <fill_rect+0x45>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:79
        }
    }
}
ffff80000080bcab:	90                   	nop
ffff80000080bcac:	90                   	nop
ffff80000080bcad:	5d                   	pop    rbp
ffff80000080bcae:	c3                   	ret    

ffff80000080bcaf <draw_text>:
draw_text():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:82
unsigned char letters[];
void draw_text(int x, int y, int size, char *str)
{
ffff80000080bcaf:	f3 0f 1e fa          	endbr64 
ffff80000080bcb3:	55                   	push   rbp
ffff80000080bcb4:	48 89 e5             	mov    rbp,rsp
ffff80000080bcb7:	41 57                	push   r15
ffff80000080bcb9:	53                   	push   rbx
ffff80000080bcba:	48 83 ec 30          	sub    rsp,0x30
ffff80000080bcbe:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080bcbe <draw_text+0xf>
ffff80000080bcc5:	49 bb 3a 6f 11 00 00 	movabs r11,0x116f3a
ffff80000080bccc:	00 00 00 
ffff80000080bccf:	4c 01 db             	add    rbx,r11
ffff80000080bcd2:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff80000080bcd5:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080bcd8:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff80000080bcdb:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:83
    int tx=x;
ffff80000080bcdf:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080bce2:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:84
    while(*str!='\0')
ffff80000080bce5:	eb 75                	jmp    ffff80000080bd5c <draw_text+0xad>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:86
    {
        if(*str=='\n')
ffff80000080bce7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080bceb:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080bcee:	3c 0a                	cmp    al,0xa
ffff80000080bcf0:	75 23                	jne    ffff80000080bd15 <draw_text+0x66>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:88
        {
            y+=font_height*size;
ffff80000080bcf2:	48 b8 74 20 af ff ff 	movabs rax,0xffffffffffaf2074
ffff80000080bcf9:	ff ff ff 
ffff80000080bcfc:	8b 14 03             	mov    edx,DWORD PTR [rbx+rax*1]
ffff80000080bcff:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000080bd02:	0f af d0             	imul   edx,eax
ffff80000080bd05:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080bd08:	01 d0                	add    eax,edx
ffff80000080bd0a:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:89
            tx=x;
ffff80000080bd0d:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080bd10:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
ffff80000080bd13:	eb 42                	jmp    ffff80000080bd57 <draw_text+0xa8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:93
        }
        else
        {
            draw_letter(tx,y,size,*str);
ffff80000080bd15:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080bd19:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080bd1c:	0f be c8             	movsx  ecx,al
ffff80000080bd1f:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff80000080bd22:	8b 75 d8             	mov    esi,DWORD PTR [rbp-0x28]
ffff80000080bd25:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080bd28:	89 c7                	mov    edi,eax
ffff80000080bd2a:	49 89 df             	mov    r15,rbx
ffff80000080bd2d:	48 b8 7a 91 ee ff ff 	movabs rax,0xffffffffffee917a
ffff80000080bd34:	ff ff ff 
ffff80000080bd37:	48 01 d8             	add    rax,rbx
ffff80000080bd3a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:94
            tx+=size*font_width;
ffff80000080bd3c:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff80000080bd3f:	48 b8 70 20 af ff ff 	movabs rax,0xffffffffffaf2070
ffff80000080bd46:	ff ff ff 
ffff80000080bd49:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080bd4c:	0f af d0             	imul   edx,eax
ffff80000080bd4f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080bd52:	01 d0                	add    eax,edx
ffff80000080bd54:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:96
        }
        str++;
ffff80000080bd57:	48 83 45 c8 01       	add    QWORD PTR [rbp-0x38],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:84
    while(*str!='\0')
ffff80000080bd5c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080bd60:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080bd63:	84 c0                	test   al,al
ffff80000080bd65:	75 80                	jne    ffff80000080bce7 <draw_text+0x38>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:98
    }
}
ffff80000080bd67:	90                   	nop
ffff80000080bd68:	90                   	nop
ffff80000080bd69:	48 83 c4 30          	add    rsp,0x30
ffff80000080bd6d:	5b                   	pop    rbx
ffff80000080bd6e:	41 5f                	pop    r15
ffff80000080bd70:	5d                   	pop    rbp
ffff80000080bd71:	c3                   	ret    

ffff80000080bd72 <draw_letter>:
draw_letter():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:99
void draw_letter(int x, volatile int y, int size, char c) {
ffff80000080bd72:	f3 0f 1e fa          	endbr64 
ffff80000080bd76:	55                   	push   rbp
ffff80000080bd77:	48 89 e5             	mov    rbp,rsp
ffff80000080bd7a:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080bd7a <draw_letter+0x8>
ffff80000080bd81:	49 bb 7e 6e 11 00 00 	movabs r11,0x116e7e
ffff80000080bd88:	00 00 00 
ffff80000080bd8b:	4c 01 d8             	add    rax,r11
ffff80000080bd8e:	89 7d cc             	mov    DWORD PTR [rbp-0x34],edi
ffff80000080bd91:	89 75 c8             	mov    DWORD PTR [rbp-0x38],esi
ffff80000080bd94:	89 55 c4             	mov    DWORD PTR [rbp-0x3c],edx
ffff80000080bd97:	89 ca                	mov    edx,ecx
ffff80000080bd99:	88 55 c0             	mov    BYTE PTR [rbp-0x40],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:100
    u8 *glyph = glyph_table;
ffff80000080bd9c:	48 ba 80 20 af ff ff 	movabs rdx,0xffffffffffaf2080
ffff80000080bda3:	ff ff ff 
ffff80000080bda6:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080bdaa:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:101
    if (c < glyph_nr) {
ffff80000080bdae:	0f be 4d c0          	movsx  ecx,BYTE PTR [rbp-0x40]
ffff80000080bdb2:	48 ba 8c 20 af ff ff 	movabs rdx,0xffffffffffaf208c
ffff80000080bdb9:	ff ff ff 
ffff80000080bdbc:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080bdbf:	39 d1                	cmp    ecx,edx
ffff80000080bdc1:	73 1a                	jae    ffff80000080bddd <draw_letter+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:102
        glyph += c * bytes_per_glyph;
ffff80000080bdc3:	0f be 4d c0          	movsx  ecx,BYTE PTR [rbp-0x40]
ffff80000080bdc7:	48 ba 88 20 af ff ff 	movabs rdx,0xffffffffffaf2088
ffff80000080bdce:	ff ff ff 
ffff80000080bdd1:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080bdd4:	0f af d1             	imul   edx,ecx
ffff80000080bdd7:	89 d2                	mov    edx,edx
ffff80000080bdd9:	48 01 55 f8          	add    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:105
    }
    /* output the font to frame buffer */
    for (u32 ch_y = 0; ch_y < font_height; ch_y++) {
ffff80000080bddd:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
ffff80000080bde4:	e9 f8 00 00 00       	jmp    ffff80000080bee1 <draw_letter+0x16f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:106
        u8 mask = 1 << 7;
ffff80000080bde9:	c6 45 f3 80          	mov    BYTE PTR [rbp-0xd],0x80
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:108

        for (u32 ch_x = 0; ch_x < font_width; ch_x++) {
ffff80000080bded:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff80000080bdf4:	e9 bb 00 00 00       	jmp    ffff80000080beb4 <draw_letter+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:109
            int px=x+ch_x*size;
ffff80000080bdf9:	8b 55 c4             	mov    edx,DWORD PTR [rbp-0x3c]
ffff80000080bdfc:	89 d1                	mov    ecx,edx
ffff80000080bdfe:	0f af 4d ec          	imul   ecx,DWORD PTR [rbp-0x14]
ffff80000080be02:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000080be05:	01 ca                	add    edx,ecx
ffff80000080be07:	89 55 e8             	mov    DWORD PTR [rbp-0x18],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:110
            int py=y+ch_y*size;
ffff80000080be0a:	8b 55 c4             	mov    edx,DWORD PTR [rbp-0x3c]
ffff80000080be0d:	89 d1                	mov    ecx,edx
ffff80000080be0f:	0f af 4d f4          	imul   ecx,DWORD PTR [rbp-0xc]
ffff80000080be13:	8b 55 c8             	mov    edx,DWORD PTR [rbp-0x38]
ffff80000080be16:	01 ca                	add    edx,ecx
ffff80000080be18:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:111
            int* ptr=FRAMEBUFFER_ADDR+py*framebuffer.common.framebuffer_pitch
ffff80000080be1b:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff80000080be22:	ff ff ff 
ffff80000080be25:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080be29:	8b 4a 10             	mov    ecx,DWORD PTR [rdx+0x10]
ffff80000080be2c:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffff80000080be2f:	0f af d1             	imul   edx,ecx
ffff80000080be32:	89 d6                	mov    esi,edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:112
                     +px*framebuffer.common.framebuffer_bpp/8;
ffff80000080be34:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff80000080be3b:	ff ff ff 
ffff80000080be3e:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080be42:	0f b6 52 1c          	movzx  edx,BYTE PTR [rdx+0x1c]
ffff80000080be46:	0f b6 d2             	movzx  edx,dl
ffff80000080be49:	0f af 55 e8          	imul   edx,DWORD PTR [rbp-0x18]
ffff80000080be4d:	8d 4a 07             	lea    ecx,[rdx+0x7]
ffff80000080be50:	85 d2                	test   edx,edx
ffff80000080be52:	0f 48 d1             	cmovs  edx,ecx
ffff80000080be55:	c1 fa 03             	sar    edx,0x3
ffff80000080be58:	48 63 d2             	movsxd rdx,edx
ffff80000080be5b:	48 8d 0c 16          	lea    rcx,[rsi+rdx*1]
ffff80000080be5f:	48 ba 00 00 00 40 00 	movabs rdx,0xffff800040000000
ffff80000080be66:	80 ff ff 
ffff80000080be69:	48 01 ca             	add    rdx,rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:111
            int* ptr=FRAMEBUFFER_ADDR+py*framebuffer.common.framebuffer_pitch
ffff80000080be6c:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:113
            if ((*(glyph + ch_x / 8) & mask) != 0) {
ffff80000080be70:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080be73:	c1 ea 03             	shr    edx,0x3
ffff80000080be76:	89 d1                	mov    ecx,edx
ffff80000080be78:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080be7c:	48 01 ca             	add    rdx,rcx
ffff80000080be7f:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080be82:	22 55 f3             	and    dl,BYTE PTR [rbp-0xd]
ffff80000080be85:	84 d2                	test   dl,dl
ffff80000080be87:	74 0c                	je     ffff80000080be95 <draw_letter+0x123>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:114
                *ptr=-1;
ffff80000080be89:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080be8d:	c7 02 ff ff ff ff    	mov    DWORD PTR [rdx],0xffffffff
ffff80000080be93:	eb 0a                	jmp    ffff80000080be9f <draw_letter+0x12d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:116
            } else {
                *ptr=0;
ffff80000080be95:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080be99:	c7 02 00 00 00 00    	mov    DWORD PTR [rdx],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:119
            }

            mask >>= 1;
ffff80000080be9f:	d0 6d f3             	shr    BYTE PTR [rbp-0xd],1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:120
            if (ch_x % 8 == 0) {
ffff80000080bea2:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080bea5:	83 e2 07             	and    edx,0x7
ffff80000080bea8:	85 d2                	test   edx,edx
ffff80000080beaa:	75 04                	jne    ffff80000080beb0 <draw_letter+0x13e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:121
                mask = 1 << 7;
ffff80000080beac:	c6 45 f3 80          	mov    BYTE PTR [rbp-0xd],0x80
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:108 (discriminator 2)
        for (u32 ch_x = 0; ch_x < font_width; ch_x++) {
ffff80000080beb0:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:108 (discriminator 1)
ffff80000080beb4:	48 ba 70 20 af ff ff 	movabs rdx,0xffffffffffaf2070
ffff80000080bebb:	ff ff ff 
ffff80000080bebe:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080bec1:	39 55 ec             	cmp    DWORD PTR [rbp-0x14],edx
ffff80000080bec4:	0f 82 2f ff ff ff    	jb     ffff80000080bdf9 <draw_letter+0x87>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:125 (discriminator 2)
            }
        }

        glyph += font_width_bytes;
ffff80000080beca:	48 ba 78 20 af ff ff 	movabs rdx,0xffffffffffaf2078
ffff80000080bed1:	ff ff ff 
ffff80000080bed4:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080bed7:	89 d2                	mov    edx,edx
ffff80000080bed9:	48 01 55 f8          	add    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:105 (discriminator 2)
    for (u32 ch_y = 0; ch_y < font_height; ch_y++) {
ffff80000080bedd:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:105 (discriminator 1)
ffff80000080bee1:	48 ba 74 20 af ff ff 	movabs rdx,0xffffffffffaf2074
ffff80000080bee8:	ff ff ff 
ffff80000080beeb:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080beee:	39 55 f4             	cmp    DWORD PTR [rbp-0xc],edx
ffff80000080bef1:	0f 82 f2 fe ff ff    	jb     ffff80000080bde9 <draw_letter+0x77>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:127
    }
}
ffff80000080bef7:	90                   	nop
ffff80000080bef8:	90                   	nop
ffff80000080bef9:	5d                   	pop    rbp
ffff80000080befa:	c3                   	ret    

ffff80000080befb <scr_up>:
scr_up():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:129
//向上滚动一个像素
void scr_up(){
ffff80000080befb:	f3 0f 1e fa          	endbr64 
ffff80000080beff:	55                   	push   rbp
ffff80000080bf00:	48 89 e5             	mov    rbp,rsp
ffff80000080bf03:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080bf03 <scr_up+0x8>
ffff80000080bf0a:	49 bb f5 6c 11 00 00 	movabs r11,0x116cf5
ffff80000080bf11:	00 00 00 
ffff80000080bf14:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:130
    for(int dy=0;dy<framebuffer.common.framebuffer_height-1;dy++){
ffff80000080bf17:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff80000080bf1e:	e9 ad 00 00 00       	jmp    ffff80000080bfd0 <scr_up+0xd5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:131
        for(int dx=0;dx<framebuffer.common.framebuffer_width;dx++){
ffff80000080bf23:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
ffff80000080bf2a:	e9 81 00 00 00       	jmp    ffff80000080bfb0 <scr_up+0xb5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:133 (discriminator 3)
            char *p=(char*)(FRAMEBUFFER_ADDR+
                    dy*framebuffer.common.framebuffer_pitch
ffff80000080bf2f:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff80000080bf36:	ff ff ff 
ffff80000080bf39:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080bf3d:	8b 4a 10             	mov    ecx,DWORD PTR [rdx+0x10]
ffff80000080bf40:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080bf43:	0f af d1             	imul   edx,ecx
ffff80000080bf46:	89 d6                	mov    esi,edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:134 (discriminator 3)
                    +dx*framebuffer.common.framebuffer_bpp/8);
ffff80000080bf48:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff80000080bf4f:	ff ff ff 
ffff80000080bf52:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080bf56:	0f b6 52 1c          	movzx  edx,BYTE PTR [rdx+0x1c]
ffff80000080bf5a:	0f b6 d2             	movzx  edx,dl
ffff80000080bf5d:	0f af 55 f8          	imul   edx,DWORD PTR [rbp-0x8]
ffff80000080bf61:	8d 4a 07             	lea    ecx,[rdx+0x7]
ffff80000080bf64:	85 d2                	test   edx,edx
ffff80000080bf66:	0f 48 d1             	cmovs  edx,ecx
ffff80000080bf69:	c1 fa 03             	sar    edx,0x3
ffff80000080bf6c:	48 63 d2             	movsxd rdx,edx
ffff80000080bf6f:	48 8d 0c 16          	lea    rcx,[rsi+rdx*1]
ffff80000080bf73:	48 ba 00 00 00 40 00 	movabs rdx,0xffff800040000000
ffff80000080bf7a:	80 ff ff 
ffff80000080bf7d:	48 01 ca             	add    rdx,rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:132 (discriminator 3)
            char *p=(char*)(FRAMEBUFFER_ADDR+
ffff80000080bf80:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:135 (discriminator 3)
            *p=*(p+framebuffer.common.framebuffer_pitch);
ffff80000080bf84:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff80000080bf8b:	ff ff ff 
ffff80000080bf8e:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080bf92:	8b 52 10             	mov    edx,DWORD PTR [rdx+0x10]
ffff80000080bf95:	89 d1                	mov    ecx,edx
ffff80000080bf97:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080bf9b:	48 01 ca             	add    rdx,rcx
ffff80000080bf9e:	0f b6 0a             	movzx  ecx,BYTE PTR [rdx]
ffff80000080bfa1:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080bfa5:	88 0a                	mov    BYTE PTR [rdx],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:136 (discriminator 3)
            p++;
ffff80000080bfa7:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:131 (discriminator 3)
        for(int dx=0;dx<framebuffer.common.framebuffer_width;dx++){
ffff80000080bfac:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:131 (discriminator 1)
ffff80000080bfb0:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff80000080bfb7:	ff ff ff 
ffff80000080bfba:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080bfbe:	8b 4a 14             	mov    ecx,DWORD PTR [rdx+0x14]
ffff80000080bfc1:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff80000080bfc4:	39 d1                	cmp    ecx,edx
ffff80000080bfc6:	0f 87 63 ff ff ff    	ja     ffff80000080bf2f <scr_up+0x34>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:130 (discriminator 2)
    for(int dy=0;dy<framebuffer.common.framebuffer_height-1;dy++){
ffff80000080bfcc:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:130 (discriminator 1)
ffff80000080bfd0:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff80000080bfd7:	ff ff ff 
ffff80000080bfda:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080bfde:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff80000080bfe1:	8d 4a ff             	lea    ecx,[rdx-0x1]
ffff80000080bfe4:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080bfe7:	39 d1                	cmp    ecx,edx
ffff80000080bfe9:	0f 87 34 ff ff ff    	ja     ffff80000080bf23 <scr_up+0x28>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:142
        }

    }
//    for(int i=0;i< framebuffer.common.framebuffer_width*framebuffer.common.framebuffer_bpp/8;i++)
//        *(p++)=0;
}
ffff80000080bfef:	90                   	nop
ffff80000080bff0:	90                   	nop
ffff80000080bff1:	5d                   	pop    rbp
ffff80000080bff2:	c3                   	ret    

ffff80000080bff3 <scr_down>:
scr_down():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:143
void scr_down(){
ffff80000080bff3:	f3 0f 1e fa          	endbr64 
ffff80000080bff7:	55                   	push   rbp
ffff80000080bff8:	48 89 e5             	mov    rbp,rsp
ffff80000080bffb:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080bffb <scr_down+0x8>
ffff80000080c002:	49 bb fd 6b 11 00 00 	movabs r11,0x116bfd
ffff80000080c009:	00 00 00 
ffff80000080c00c:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:144
    for(int dy=1;dy<max_ch_nr_y;dy++){
ffff80000080c00f:	c7 45 fc 01 00 00 00 	mov    DWORD PTR [rbp-0x4],0x1
ffff80000080c016:	e9 aa 00 00 00       	jmp    ffff80000080c0c5 <scr_down+0xd2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:145
        for(int dx=0;dx<max_ch_nr_x;dx++){
ffff80000080c01b:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
ffff80000080c022:	e9 82 00 00 00       	jmp    ffff80000080c0a9 <scr_down+0xb6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:146 (discriminator 3)
            char *p=(char*)(FRAMEBUFFER_ADDR+dy*framebuffer.common.framebuffer_pitch
ffff80000080c027:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff80000080c02e:	ff ff ff 
ffff80000080c031:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080c035:	8b 4a 10             	mov    ecx,DWORD PTR [rdx+0x10]
ffff80000080c038:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080c03b:	0f af d1             	imul   edx,ecx
ffff80000080c03e:	89 d6                	mov    esi,edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:147 (discriminator 3)
                            +dx*framebuffer.common.framebuffer_bpp/8);
ffff80000080c040:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff80000080c047:	ff ff ff 
ffff80000080c04a:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080c04e:	0f b6 52 1c          	movzx  edx,BYTE PTR [rdx+0x1c]
ffff80000080c052:	0f b6 d2             	movzx  edx,dl
ffff80000080c055:	0f af 55 f8          	imul   edx,DWORD PTR [rbp-0x8]
ffff80000080c059:	8d 4a 07             	lea    ecx,[rdx+0x7]
ffff80000080c05c:	85 d2                	test   edx,edx
ffff80000080c05e:	0f 48 d1             	cmovs  edx,ecx
ffff80000080c061:	c1 fa 03             	sar    edx,0x3
ffff80000080c064:	48 63 d2             	movsxd rdx,edx
ffff80000080c067:	48 8d 0c 16          	lea    rcx,[rsi+rdx*1]
ffff80000080c06b:	48 ba 00 00 00 40 00 	movabs rdx,0xffff800040000000
ffff80000080c072:	80 ff ff 
ffff80000080c075:	48 01 ca             	add    rdx,rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:146 (discriminator 3)
            char *p=(char*)(FRAMEBUFFER_ADDR+dy*framebuffer.common.framebuffer_pitch
ffff80000080c078:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:148 (discriminator 3)
            *p=*(p-framebuffer.common.framebuffer_pitch);
ffff80000080c07c:	48 ba a8 fe ff ff ff 	movabs rdx,0xfffffffffffffea8
ffff80000080c083:	ff ff ff 
ffff80000080c086:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080c08a:	8b 52 10             	mov    edx,DWORD PTR [rdx+0x10]
ffff80000080c08d:	89 d2                	mov    edx,edx
ffff80000080c08f:	48 89 d1             	mov    rcx,rdx
ffff80000080c092:	48 f7 d9             	neg    rcx
ffff80000080c095:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080c099:	48 01 ca             	add    rdx,rcx
ffff80000080c09c:	0f b6 0a             	movzx  ecx,BYTE PTR [rdx]
ffff80000080c09f:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080c0a3:	88 0a                	mov    BYTE PTR [rdx],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:145 (discriminator 3)
        for(int dx=0;dx<max_ch_nr_x;dx++){
ffff80000080c0a5:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:145 (discriminator 1)
ffff80000080c0a9:	8b 4d f8             	mov    ecx,DWORD PTR [rbp-0x8]
ffff80000080c0ac:	48 ba 5c 20 af ff ff 	movabs rdx,0xffffffffffaf205c
ffff80000080c0b3:	ff ff ff 
ffff80000080c0b6:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080c0b9:	39 d1                	cmp    ecx,edx
ffff80000080c0bb:	0f 82 66 ff ff ff    	jb     ffff80000080c027 <scr_down+0x34>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:144 (discriminator 2)
    for(int dy=1;dy<max_ch_nr_y;dy++){
ffff80000080c0c1:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:144 (discriminator 1)
ffff80000080c0c5:	8b 4d fc             	mov    ecx,DWORD PTR [rbp-0x4]
ffff80000080c0c8:	48 ba 60 20 af ff ff 	movabs rdx,0xffffffffffaf2060
ffff80000080c0cf:	ff ff ff 
ffff80000080c0d2:	8b 14 10             	mov    edx,DWORD PTR [rax+rdx*1]
ffff80000080c0d5:	39 d1                	cmp    ecx,edx
ffff80000080c0d7:	0f 82 3e ff ff ff    	jb     ffff80000080c01b <scr_down+0x28>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:152
        }

    }
}
ffff80000080c0dd:	90                   	nop
ffff80000080c0de:	90                   	nop
ffff80000080c0df:	5d                   	pop    rbp
ffff80000080c0e0:	c3                   	ret    

ffff80000080c0e1 <print>:
print():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:153
void print(char* s){
ffff80000080c0e1:	f3 0f 1e fa          	endbr64 
ffff80000080c0e5:	55                   	push   rbp
ffff80000080c0e6:	48 89 e5             	mov    rbp,rsp
ffff80000080c0e9:	41 57                	push   r15
ffff80000080c0eb:	53                   	push   rbx
ffff80000080c0ec:	48 83 ec 10          	sub    rsp,0x10
ffff80000080c0f0:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080c0f0 <print+0xf>
ffff80000080c0f7:	49 bb 08 6b 11 00 00 	movabs r11,0x116b08
ffff80000080c0fe:	00 00 00 
ffff80000080c101:	4c 01 db             	add    rbx,r11
ffff80000080c104:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:154
    for(;*s;s++){
ffff80000080c108:	e9 55 01 00 00       	jmp    ffff80000080c262 <print+0x181>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:155
        if(fb_cursor_x>max_ch_nr_x||*s=='\n')
ffff80000080c10d:	48 b8 54 20 af ff ff 	movabs rax,0xffffffffffaf2054
ffff80000080c114:	ff ff ff 
ffff80000080c117:	8b 14 03             	mov    edx,DWORD PTR [rbx+rax*1]
ffff80000080c11a:	48 b8 5c 20 af ff ff 	movabs rax,0xffffffffffaf205c
ffff80000080c121:	ff ff ff 
ffff80000080c124:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080c127:	39 c2                	cmp    edx,eax
ffff80000080c129:	77 0b                	ja     ffff80000080c136 <print+0x55>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:155 (discriminator 1)
ffff80000080c12b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c12f:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080c132:	3c 0a                	cmp    al,0xa
ffff80000080c134:	75 2e                	jne    ffff80000080c164 <print+0x83>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:157
        {
            fb_cursor_y+=1;
ffff80000080c136:	48 b8 58 20 af ff ff 	movabs rax,0xffffffffffaf2058
ffff80000080c13d:	ff ff ff 
ffff80000080c140:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080c143:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080c146:	48 b8 58 20 af ff ff 	movabs rax,0xffffffffffaf2058
ffff80000080c14d:	ff ff ff 
ffff80000080c150:	89 14 03             	mov    DWORD PTR [rbx+rax*1],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:158
            fb_cursor_x=0;
ffff80000080c153:	48 b8 54 20 af ff ff 	movabs rax,0xffffffffffaf2054
ffff80000080c15a:	ff ff ff 
ffff80000080c15d:	c7 04 03 00 00 00 00 	mov    DWORD PTR [rbx+rax*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:160
        }
        if(*s=='\n')continue;
ffff80000080c164:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c168:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080c16b:	3c 0a                	cmp    al,0xa
ffff80000080c16d:	0f 84 e9 00 00 00    	je     ffff80000080c25c <print+0x17b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:161
        if(fb_cursor_y>=max_ch_nr_y-1){
ffff80000080c173:	48 b8 60 20 af ff ff 	movabs rax,0xffffffffffaf2060
ffff80000080c17a:	ff ff ff 
ffff80000080c17d:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080c180:	8d 50 ff             	lea    edx,[rax-0x1]
ffff80000080c183:	48 b8 58 20 af ff ff 	movabs rax,0xffffffffffaf2058
ffff80000080c18a:	ff ff ff 
ffff80000080c18d:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080c190:	39 c2                	cmp    edx,eax
ffff80000080c192:	77 11                	ja     ffff80000080c1a5 <print+0xc4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:165
//            for(int i=0;i<font_height*font_size;i++)
////                scr_up();
////            fb_cursor_y=max_ch_nr_y-1;
            fb_cursor_y=0;
ffff80000080c194:	48 b8 58 20 af ff ff 	movabs rax,0xffffffffffaf2058
ffff80000080c19b:	ff ff ff 
ffff80000080c19e:	c7 04 03 00 00 00 00 	mov    DWORD PTR [rbx+rax*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:167
        }
        draw_letter(fb_cursor_x*font_width*font_size,fb_cursor_y*font_height*font_size,font_size,*s);
ffff80000080c1a5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c1a9:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080c1ac:	0f be d0             	movsx  edx,al
ffff80000080c1af:	48 b8 c8 fd ff ff ff 	movabs rax,0xfffffffffffffdc8
ffff80000080c1b6:	ff ff ff 
ffff80000080c1b9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080c1bd:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080c1bf:	48 b9 58 20 af ff ff 	movabs rcx,0xffffffffffaf2058
ffff80000080c1c6:	ff ff ff 
ffff80000080c1c9:	8b 34 0b             	mov    esi,DWORD PTR [rbx+rcx*1]
ffff80000080c1cc:	48 b9 74 20 af ff ff 	movabs rcx,0xffffffffffaf2074
ffff80000080c1d3:	ff ff ff 
ffff80000080c1d6:	8b 0c 0b             	mov    ecx,DWORD PTR [rbx+rcx*1]
ffff80000080c1d9:	0f af f1             	imul   esi,ecx
ffff80000080c1dc:	48 b9 c8 fd ff ff ff 	movabs rcx,0xfffffffffffffdc8
ffff80000080c1e3:	ff ff ff 
ffff80000080c1e6:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff80000080c1ea:	8b 09                	mov    ecx,DWORD PTR [rcx]
ffff80000080c1ec:	0f af ce             	imul   ecx,esi
ffff80000080c1ef:	41 89 c8             	mov    r8d,ecx
ffff80000080c1f2:	48 b9 54 20 af ff ff 	movabs rcx,0xffffffffffaf2054
ffff80000080c1f9:	ff ff ff 
ffff80000080c1fc:	8b 34 0b             	mov    esi,DWORD PTR [rbx+rcx*1]
ffff80000080c1ff:	48 b9 70 20 af ff ff 	movabs rcx,0xffffffffffaf2070
ffff80000080c206:	ff ff ff 
ffff80000080c209:	8b 0c 0b             	mov    ecx,DWORD PTR [rbx+rcx*1]
ffff80000080c20c:	0f af f1             	imul   esi,ecx
ffff80000080c20f:	48 b9 c8 fd ff ff ff 	movabs rcx,0xfffffffffffffdc8
ffff80000080c216:	ff ff ff 
ffff80000080c219:	48 8b 0c 0b          	mov    rcx,QWORD PTR [rbx+rcx*1]
ffff80000080c21d:	8b 09                	mov    ecx,DWORD PTR [rcx]
ffff80000080c21f:	0f af ce             	imul   ecx,esi
ffff80000080c222:	89 cf                	mov    edi,ecx
ffff80000080c224:	89 d1                	mov    ecx,edx
ffff80000080c226:	89 c2                	mov    edx,eax
ffff80000080c228:	44 89 c6             	mov    esi,r8d
ffff80000080c22b:	49 89 df             	mov    r15,rbx
ffff80000080c22e:	48 b8 7a 91 ee ff ff 	movabs rax,0xffffffffffee917a
ffff80000080c235:	ff ff ff 
ffff80000080c238:	48 01 d8             	add    rax,rbx
ffff80000080c23b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:168
        fb_cursor_x+=1;
ffff80000080c23d:	48 b8 54 20 af ff ff 	movabs rax,0xffffffffffaf2054
ffff80000080c244:	ff ff ff 
ffff80000080c247:	8b 04 03             	mov    eax,DWORD PTR [rbx+rax*1]
ffff80000080c24a:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080c24d:	48 b8 54 20 af ff ff 	movabs rax,0xffffffffffaf2054
ffff80000080c254:	ff ff ff 
ffff80000080c257:	89 14 03             	mov    DWORD PTR [rbx+rax*1],edx
ffff80000080c25a:	eb 01                	jmp    ffff80000080c25d <print+0x17c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:160
        if(*s=='\n')continue;
ffff80000080c25c:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:154
    for(;*s;s++){
ffff80000080c25d:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:154 (discriminator 1)
ffff80000080c262:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c266:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080c269:	84 c0                	test   al,al
ffff80000080c26b:	0f 85 9c fe ff ff    	jne    ffff80000080c10d <print+0x2c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:170
    }
}
ffff80000080c271:	90                   	nop
ffff80000080c272:	90                   	nop
ffff80000080c273:	48 83 c4 10          	add    rsp,0x10
ffff80000080c277:	5b                   	pop    rbx
ffff80000080c278:	41 5f                	pop    r15
ffff80000080c27a:	5d                   	pop    rbp
ffff80000080c27b:	c3                   	ret    

ffff80000080c27c <open_framebuffer>:
open_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:175
struct file_operations framebuffer_fops={
        .open=open_framebuffer,.close=close_framebuffer,.read=read_framebuffer,.write=write_framebuffer,
        .ioctl=ioctl_framebuffer
};
long open_framebuffer(struct index_node * inode,struct file * filp){
ffff80000080c27c:	f3 0f 1e fa          	endbr64 
ffff80000080c280:	55                   	push   rbp
ffff80000080c281:	48 89 e5             	mov    rbp,rsp
ffff80000080c284:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080c284 <open_framebuffer+0x8>
ffff80000080c28b:	49 bb 74 69 11 00 00 	movabs r11,0x116974
ffff80000080c292:	00 00 00 
ffff80000080c295:	4c 01 d8             	add    rax,r11
ffff80000080c298:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080c29c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:176
    inode->f_ops=&framebuffer_fops;
ffff80000080c2a0:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080c2a4:	48 b9 e8 fd ff ff ff 	movabs rcx,0xfffffffffffffde8
ffff80000080c2ab:	ff ff ff 
ffff80000080c2ae:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080c2b2:	48 89 4a 28          	mov    QWORD PTR [rdx+0x28],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:177
    filp->f_ops=&framebuffer_fops;
ffff80000080c2b6:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080c2ba:	48 b9 e8 fd ff ff ff 	movabs rcx,0xfffffffffffffde8
ffff80000080c2c1:	ff ff ff 
ffff80000080c2c4:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff80000080c2c8:	48 89 42 18          	mov    QWORD PTR [rdx+0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:178
    return 1;
ffff80000080c2cc:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:179
}
ffff80000080c2d1:	5d                   	pop    rbp
ffff80000080c2d2:	c3                   	ret    

ffff80000080c2d3 <close_framebuffer>:
close_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:180
long close_framebuffer(struct index_node * inode,struct file * filp){
ffff80000080c2d3:	f3 0f 1e fa          	endbr64 
ffff80000080c2d7:	55                   	push   rbp
ffff80000080c2d8:	48 89 e5             	mov    rbp,rsp
ffff80000080c2db:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080c2db <close_framebuffer+0x8>
ffff80000080c2e2:	49 bb 1d 69 11 00 00 	movabs r11,0x11691d
ffff80000080c2e9:	00 00 00 
ffff80000080c2ec:	4c 01 d8             	add    rax,r11
ffff80000080c2ef:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080c2f3:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:182

}
ffff80000080c2f7:	90                   	nop
ffff80000080c2f8:	5d                   	pop    rbp
ffff80000080c2f9:	c3                   	ret    

ffff80000080c2fa <read_framebuffer>:
read_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:183
long read_framebuffer(struct file * filp,char * buf,unsigned long count,long * position){
ffff80000080c2fa:	f3 0f 1e fa          	endbr64 
ffff80000080c2fe:	55                   	push   rbp
ffff80000080c2ff:	48 89 e5             	mov    rbp,rsp
ffff80000080c302:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080c302 <read_framebuffer+0x8>
ffff80000080c309:	49 bb f6 68 11 00 00 	movabs r11,0x1168f6
ffff80000080c310:	00 00 00 
ffff80000080c313:	4c 01 d8             	add    rax,r11
ffff80000080c316:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080c31a:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080c31e:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080c322:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:185

}
ffff80000080c326:	90                   	nop
ffff80000080c327:	5d                   	pop    rbp
ffff80000080c328:	c3                   	ret    

ffff80000080c329 <write_framebuffer>:
write_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:186
long write_framebuffer(struct file * filp,char * buf,unsigned long count,long * position){
ffff80000080c329:	f3 0f 1e fa          	endbr64 
ffff80000080c32d:	55                   	push   rbp
ffff80000080c32e:	48 89 e5             	mov    rbp,rsp
ffff80000080c331:	41 57                	push   r15
ffff80000080c333:	53                   	push   rbx
ffff80000080c334:	48 83 ec 40          	sub    rsp,0x40
ffff80000080c338:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080c338 <write_framebuffer+0xf>
ffff80000080c33f:	49 bb c0 68 11 00 00 	movabs r11,0x1168c0
ffff80000080c346:	00 00 00 
ffff80000080c349:	4c 01 db             	add    rbx,r11
ffff80000080c34c:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff80000080c350:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffff80000080c354:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
ffff80000080c358:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:187
    char *tmp= (char*) kmalloc(0,PAGE_4K_SIZE);
ffff80000080c35c:	be 00 10 00 00       	mov    esi,0x1000
ffff80000080c361:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080c366:	49 89 df             	mov    r15,rbx
ffff80000080c369:	48 b8 ce 07 ee ff ff 	movabs rax,0xffffffffffee07ce
ffff80000080c370:	ff ff ff 
ffff80000080c373:	48 01 d8             	add    rax,rbx
ffff80000080c376:	ff d0                	call   rax
ffff80000080c378:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:188
    int c=count/(PAGE_4K_SIZE-1),p=0;
ffff80000080c37c:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
ffff80000080c380:	48 ba 11 00 01 10 00 	movabs rdx,0x10010010010011
ffff80000080c387:	01 10 00 
ffff80000080c38a:	48 89 c8             	mov    rax,rcx
ffff80000080c38d:	48 f7 e2             	mul    rdx
ffff80000080c390:	48 89 c8             	mov    rax,rcx
ffff80000080c393:	48 29 d0             	sub    rax,rdx
ffff80000080c396:	48 d1 e8             	shr    rax,1
ffff80000080c399:	48 01 d0             	add    rax,rdx
ffff80000080c39c:	48 c1 e8 0b          	shr    rax,0xb
ffff80000080c3a0:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
ffff80000080c3a3:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190
    //一块一块输出
    for(int i=0;i<(c?c:1);i++){
ffff80000080c3aa:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff80000080c3b1:	eb 60                	jmp    ffff80000080c413 <write_framebuffer+0xea>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:191 (discriminator 7)
        memcpy(tmp,buf+p,PAGE_4K_SIZE-1);
ffff80000080c3b3:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080c3b6:	48 63 d0             	movsxd rdx,eax
ffff80000080c3b9:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080c3bd:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
ffff80000080c3c1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080c3c5:	ba ff 0f 00 00       	mov    edx,0xfff
ffff80000080c3ca:	48 89 ce             	mov    rsi,rcx
ffff80000080c3cd:	48 89 c7             	mov    rdi,rax
ffff80000080c3d0:	49 89 df             	mov    r15,rbx
ffff80000080c3d3:	48 b8 da 1d ef ff ff 	movabs rax,0xffffffffffef1dda
ffff80000080c3da:	ff ff ff 
ffff80000080c3dd:	48 01 d8             	add    rax,rbx
ffff80000080c3e0:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:192 (discriminator 7)
        tmp[PAGE_4K_SIZE-1]=0;
ffff80000080c3e2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080c3e6:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff80000080c3ec:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:193 (discriminator 7)
        print(tmp);
ffff80000080c3ef:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080c3f3:	48 89 c7             	mov    rdi,rax
ffff80000080c3f6:	49 89 df             	mov    r15,rbx
ffff80000080c3f9:	48 b8 e9 94 ee ff ff 	movabs rax,0xffffffffffee94e9
ffff80000080c400:	ff ff ff 
ffff80000080c403:	48 01 d8             	add    rax,rbx
ffff80000080c406:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:194 (discriminator 7)
        p+=PAGE_4K_SIZE-1;
ffff80000080c408:	81 45 ec ff 0f 00 00 	add    DWORD PTR [rbp-0x14],0xfff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190 (discriminator 7)
    for(int i=0;i<(c?c:1);i++){
ffff80000080c40f:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190 (discriminator 1)
ffff80000080c413:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
ffff80000080c417:	74 05                	je     ffff80000080c41e <write_framebuffer+0xf5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190 (discriminator 3)
ffff80000080c419:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080c41c:	eb 05                	jmp    ffff80000080c423 <write_framebuffer+0xfa>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190 (discriminator 4)
ffff80000080c41e:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:190 (discriminator 6)
ffff80000080c423:	3b 45 e8             	cmp    eax,DWORD PTR [rbp-0x18]
ffff80000080c426:	7f 8b                	jg     ffff80000080c3b3 <write_framebuffer+0x8a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:196
    }
    kmfree(tmp);
ffff80000080c428:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080c42c:	48 89 c7             	mov    rdi,rax
ffff80000080c42f:	49 89 df             	mov    r15,rbx
ffff80000080c432:	48 b8 6f 09 ee ff ff 	movabs rax,0xffffffffffee096f
ffff80000080c439:	ff ff ff 
ffff80000080c43c:	48 01 d8             	add    rax,rbx
ffff80000080c43f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:197
    return 0;
ffff80000080c441:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:198
}
ffff80000080c446:	48 83 c4 40          	add    rsp,0x40
ffff80000080c44a:	5b                   	pop    rbx
ffff80000080c44b:	41 5f                	pop    r15
ffff80000080c44d:	5d                   	pop    rbp
ffff80000080c44e:	c3                   	ret    

ffff80000080c44f <ioctl_framebuffer>:
ioctl_framebuffer():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:199
long ioctl_framebuffer(struct index_node * inode,struct file * filp,unsigned long cmd,unsigned long arg){
ffff80000080c44f:	f3 0f 1e fa          	endbr64 
ffff80000080c453:	55                   	push   rbp
ffff80000080c454:	48 89 e5             	mov    rbp,rsp
ffff80000080c457:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080c457 <ioctl_framebuffer+0x8>
ffff80000080c45e:	49 bb a1 67 11 00 00 	movabs r11,0x1167a1
ffff80000080c465:	00 00 00 
ffff80000080c468:	4c 01 d8             	add    rax,r11
ffff80000080c46b:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080c46f:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080c473:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080c477:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/framebuffer.c:201

}
ffff80000080c47b:	90                   	nop
ffff80000080c47c:	5d                   	pop    rbp
ffff80000080c47d:	c3                   	ret    

ffff80000080c47e <drelse>:
drelse():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:21
每一个被使用或者创建的dentry，会被放到数组的开头，剩余后移。当有dentry被挤出去的时候，如果不是necessary，则释放dentry。如果期间被使用了，
则被放到开头。
*/
struct dir_entry* history_dentry[48];

void drelse(struct dir_entry* d){
ffff80000080c47e:	f3 0f 1e fa          	endbr64 
ffff80000080c482:	55                   	push   rbp
ffff80000080c483:	48 89 e5             	mov    rbp,rsp
ffff80000080c486:	41 57                	push   r15
ffff80000080c488:	53                   	push   rbx
ffff80000080c489:	48 83 ec 20          	sub    rsp,0x20
ffff80000080c48d:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080c48d <drelse+0xf>
ffff80000080c494:	49 bb 6b 67 11 00 00 	movabs r11,0x11676b
ffff80000080c49b:	00 00 00 
ffff80000080c49e:	4c 01 db             	add    rbx,r11
ffff80000080c4a1:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:23
    //同步inode到介质中
    d->dir_ops->iput(d,d->dir_inode);
ffff80000080c4a5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080c4a9:	48 8b 40 60          	mov    rax,QWORD PTR [rax+0x60]
ffff80000080c4ad:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
ffff80000080c4b1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080c4b5:	48 8b 50 40          	mov    rdx,QWORD PTR [rax+0x40]
ffff80000080c4b9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080c4bd:	48 89 d6             	mov    rsi,rdx
ffff80000080c4c0:	48 89 c7             	mov    rdi,rax
ffff80000080c4c3:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:25
    //释放
    list_drop(&d->child_node);
ffff80000080c4c5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080c4c9:	48 83 c0 10          	add    rax,0x10
ffff80000080c4cd:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
list_drop():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:43
    list_add_to_behind(p,new);
}
__attribute__((always_inline)) inline void list_drop(struct List * entry)
{
    //从链表中删除
    if(entry->prev)
ffff80000080c4d1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c4d5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c4d8:	48 85 c0             	test   rax,rax
ffff80000080c4db:	74 13                	je     ffff80000080c4f0 <drelse+0x72>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:44
        entry->prev->next=entry->next;
ffff80000080c4dd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c4e1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c4e4:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080c4e8:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
ffff80000080c4ec:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:45
    if(entry->next)
ffff80000080c4f0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c4f4:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080c4f8:	48 85 c0             	test   rax,rax
ffff80000080c4fb:	74 12                	je     ffff80000080c50f <drelse+0x91>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:46
        entry->next->prev=entry->prev;
ffff80000080c4fd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c501:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080c505:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080c509:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080c50c:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:47
}
ffff80000080c50f:	90                   	nop
drelse():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:26
    kmfree(d->name);
ffff80000080c510:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080c514:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c517:	48 89 c7             	mov    rdi,rax
ffff80000080c51a:	49 89 df             	mov    r15,rbx
ffff80000080c51d:	48 b8 6f 09 ee ff ff 	movabs rax,0xffffffffffee096f
ffff80000080c524:	ff ff ff 
ffff80000080c527:	48 01 d8             	add    rax,rbx
ffff80000080c52a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:27
    d->dir_inode->link--;
ffff80000080c52c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080c530:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080c534:	8b 50 1c             	mov    edx,DWORD PTR [rax+0x1c]
ffff80000080c537:	83 ea 01             	sub    edx,0x1
ffff80000080c53a:	89 50 1c             	mov    DWORD PTR [rax+0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:28
    if(!d->dir_inode->link)
ffff80000080c53d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080c541:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080c545:	8b 40 1c             	mov    eax,DWORD PTR [rax+0x1c]
ffff80000080c548:	85 c0                	test   eax,eax
ffff80000080c54a:	75 3e                	jne    ffff80000080c58a <drelse+0x10c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:30
    {
        kmfree(d->dir_inode->private_index_info);
ffff80000080c54c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080c550:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080c554:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff80000080c558:	48 89 c7             	mov    rdi,rax
ffff80000080c55b:	49 89 df             	mov    r15,rbx
ffff80000080c55e:	48 b8 6f 09 ee ff ff 	movabs rax,0xffffffffffee096f
ffff80000080c565:	ff ff ff 
ffff80000080c568:	48 01 d8             	add    rax,rbx
ffff80000080c56b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:31
        kmfree(d->dir_inode);//释放inode
ffff80000080c56d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080c571:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080c575:	48 89 c7             	mov    rdi,rax
ffff80000080c578:	49 89 df             	mov    r15,rbx
ffff80000080c57b:	48 b8 6f 09 ee ff ff 	movabs rax,0xffffffffffee096f
ffff80000080c582:	ff ff ff 
ffff80000080c585:	48 01 d8             	add    rax,rbx
ffff80000080c588:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:33
    }
    kmfree(d);
ffff80000080c58a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080c58e:	48 89 c7             	mov    rdi,rax
ffff80000080c591:	49 89 df             	mov    r15,rbx
ffff80000080c594:	48 b8 6f 09 ee ff ff 	movabs rax,0xffffffffffee096f
ffff80000080c59b:	ff ff ff 
ffff80000080c59e:	48 01 d8             	add    rax,rbx
ffff80000080c5a1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:34
}
ffff80000080c5a3:	90                   	nop
ffff80000080c5a4:	48 83 c4 20          	add    rsp,0x20
ffff80000080c5a8:	5b                   	pop    rbx
ffff80000080c5a9:	41 5f                	pop    r15
ffff80000080c5ab:	5d                   	pop    rbp
ffff80000080c5ac:	c3                   	ret    

ffff80000080c5ad <dentry_cmp>:
dentry_cmp():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:35
int dentry_cmp(struct dir_entry* a,struct dir_entry* b){
ffff80000080c5ad:	f3 0f 1e fa          	endbr64 
ffff80000080c5b1:	55                   	push   rbp
ffff80000080c5b2:	48 89 e5             	mov    rbp,rsp
ffff80000080c5b5:	41 57                	push   r15
ffff80000080c5b7:	53                   	push   rbx
ffff80000080c5b8:	48 83 ec 10          	sub    rsp,0x10
ffff80000080c5bc:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080c5bc <dentry_cmp+0xf>
ffff80000080c5c3:	49 bb 3c 66 11 00 00 	movabs r11,0x11663c
ffff80000080c5ca:	00 00 00 
ffff80000080c5cd:	4c 01 db             	add    rbx,r11
ffff80000080c5d0:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff80000080c5d4:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:36
    while (a&&b) {
ffff80000080c5d8:	eb 72                	jmp    ffff80000080c64c <dentry_cmp+0x9f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:37
        if(strcmp(a->name, b->name)!=0)return a->name_length-b->name_length;
ffff80000080c5da:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080c5de:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080c5e1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c5e5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c5e8:	48 89 d6             	mov    rsi,rdx
ffff80000080c5eb:	48 89 c7             	mov    rdi,rax
ffff80000080c5ee:	49 89 df             	mov    r15,rbx
ffff80000080c5f1:	48 b8 2c 21 ef ff ff 	movabs rax,0xffffffffffef212c
ffff80000080c5f8:	ff ff ff 
ffff80000080c5fb:	48 01 d8             	add    rax,rbx
ffff80000080c5fe:	ff d0                	call   rax
ffff80000080c600:	85 c0                	test   eax,eax
ffff80000080c602:	74 14                	je     ffff80000080c618 <dentry_cmp+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:37 (discriminator 1)
ffff80000080c604:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c608:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffff80000080c60b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080c60f:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffff80000080c612:	89 d0                	mov    eax,edx
ffff80000080c614:	29 c8                	sub    eax,ecx
ffff80000080c616:	eb 4a                	jmp    ffff80000080c662 <dentry_cmp+0xb5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:38
        a=a->parent;
ffff80000080c618:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c61c:	48 8b 40 48          	mov    rax,QWORD PTR [rax+0x48]
ffff80000080c620:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:39
        b=b->parent;
ffff80000080c624:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080c628:	48 8b 40 48          	mov    rax,QWORD PTR [rax+0x48]
ffff80000080c62c:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:40
        if(a->parent==a&&b->parent==b){
ffff80000080c630:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c634:	48 8b 40 48          	mov    rax,QWORD PTR [rax+0x48]
ffff80000080c638:	48 39 45 e8          	cmp    QWORD PTR [rbp-0x18],rax
ffff80000080c63c:	75 0e                	jne    ffff80000080c64c <dentry_cmp+0x9f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:40 (discriminator 1)
ffff80000080c63e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080c642:	48 8b 40 48          	mov    rax,QWORD PTR [rax+0x48]
ffff80000080c646:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
ffff80000080c64a:	74 10                	je     ffff80000080c65c <dentry_cmp+0xaf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:36
    while (a&&b) {
ffff80000080c64c:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080c651:	74 0a                	je     ffff80000080c65d <dentry_cmp+0xb0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:36 (discriminator 1)
ffff80000080c653:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
ffff80000080c658:	75 80                	jne    ffff80000080c5da <dentry_cmp+0x2d>
ffff80000080c65a:	eb 01                	jmp    ffff80000080c65d <dentry_cmp+0xb0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:42
            //有的根目录会把parent设置成自己，这里的代码是为了检测这种情况，即已经比较到根目录了
            break;
ffff80000080c65c:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:45
        }
    }
    return 0;
ffff80000080c65d:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:46
}
ffff80000080c662:	48 83 c4 10          	add    rsp,0x10
ffff80000080c666:	5b                   	pop    rbx
ffff80000080c667:	41 5f                	pop    r15
ffff80000080c669:	5d                   	pop    rbp
ffff80000080c66a:	c3                   	ret    

ffff80000080c66b <mark_use>:
mark_use():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:47
void mark_use(struct dir_entry* d){
ffff80000080c66b:	f3 0f 1e fa          	endbr64 
ffff80000080c66f:	55                   	push   rbp
ffff80000080c670:	48 89 e5             	mov    rbp,rsp
ffff80000080c673:	41 57                	push   r15
ffff80000080c675:	53                   	push   rbx
ffff80000080c676:	48 83 ec 20          	sub    rsp,0x20
ffff80000080c67a:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080c67a <mark_use+0xf>
ffff80000080c681:	49 bb 7e 65 11 00 00 	movabs r11,0x11657e
ffff80000080c688:	00 00 00 
ffff80000080c68b:	4c 01 db             	add    rbx,r11
ffff80000080c68e:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:48
    int mk=47;
ffff80000080c692:	c7 45 ec 2f 00 00 00 	mov    DWORD PTR [rbp-0x14],0x2f
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:49
    for(int i=0;i<48;i++){
ffff80000080c699:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff80000080c6a0:	eb 44                	jmp    ffff80000080c6e6 <mark_use+0x7b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:50
        if(dentry_cmp(history_dentry[i],d)==0){
ffff80000080c6a2:	48 b8 b8 ff ff ff ff 	movabs rax,0xffffffffffffffb8
ffff80000080c6a9:	ff ff ff 
ffff80000080c6ac:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080c6b0:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
ffff80000080c6b3:	48 63 d2             	movsxd rdx,edx
ffff80000080c6b6:	48 8b 04 d0          	mov    rax,QWORD PTR [rax+rdx*8]
ffff80000080c6ba:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080c6be:	48 89 d6             	mov    rsi,rdx
ffff80000080c6c1:	48 89 c7             	mov    rdi,rax
ffff80000080c6c4:	49 89 df             	mov    r15,rbx
ffff80000080c6c7:	48 b8 b5 99 ee ff ff 	movabs rax,0xffffffffffee99b5
ffff80000080c6ce:	ff ff ff 
ffff80000080c6d1:	48 01 d8             	add    rax,rbx
ffff80000080c6d4:	ff d0                	call   rax
ffff80000080c6d6:	85 c0                	test   eax,eax
ffff80000080c6d8:	75 08                	jne    ffff80000080c6e2 <mark_use+0x77>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:51
            mk=i;
ffff80000080c6da:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080c6dd:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:52
            break;
ffff80000080c6e0:	eb 0a                	jmp    ffff80000080c6ec <mark_use+0x81>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:49 (discriminator 2)
    for(int i=0;i<48;i++){
ffff80000080c6e2:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:49 (discriminator 1)
ffff80000080c6e6:	83 7d e8 2f          	cmp    DWORD PTR [rbp-0x18],0x2f
ffff80000080c6ea:	7e b6                	jle    ffff80000080c6a2 <mark_use+0x37>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:56
        }
    }
    struct dir_entry* dropped;
    if(mk==47){
ffff80000080c6ec:	83 7d ec 2f          	cmp    DWORD PTR [rbp-0x14],0x2f
ffff80000080c6f0:	0f 85 94 00 00 00    	jne    ffff80000080c78a <mark_use+0x11f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:57
        dropped=history_dentry[mk];
ffff80000080c6f6:	48 b8 b8 ff ff ff ff 	movabs rax,0xffffffffffffffb8
ffff80000080c6fd:	ff ff ff 
ffff80000080c700:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080c704:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080c707:	48 63 d2             	movsxd rdx,edx
ffff80000080c70a:	48 8b 04 d0          	mov    rax,QWORD PTR [rax+rdx*8]
ffff80000080c70e:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:58
        if(!dropped->mount_point&&!dropped->subdirs_list.next&&!dropped->link){
ffff80000080c712:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080c716:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
ffff80000080c71a:	48 85 c0             	test   rax,rax
ffff80000080c71d:	75 6b                	jne    ffff80000080c78a <mark_use+0x11f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:58 (discriminator 1)
ffff80000080c71f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080c723:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff80000080c727:	48 85 c0             	test   rax,rax
ffff80000080c72a:	75 5e                	jne    ffff80000080c78a <mark_use+0x11f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:58 (discriminator 2)
ffff80000080c72c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080c730:	0f b6 40 50          	movzx  eax,BYTE PTR [rax+0x50]
ffff80000080c734:	84 c0                	test   al,al
ffff80000080c736:	75 52                	jne    ffff80000080c78a <mark_use+0x11f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:59
            drelse(dropped);
ffff80000080c738:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080c73c:	48 89 c7             	mov    rdi,rax
ffff80000080c73f:	49 89 df             	mov    r15,rbx
ffff80000080c742:	48 b8 86 98 ee ff ff 	movabs rax,0xffffffffffee9886
ffff80000080c749:	ff ff ff 
ffff80000080c74c:	48 01 d8             	add    rax,rbx
ffff80000080c74f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:62
        }
    }
    for(;mk>0;mk--){
ffff80000080c751:	eb 37                	jmp    ffff80000080c78a <mark_use+0x11f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:63 (discriminator 2)
        history_dentry[mk]=history_dentry[mk-1];
ffff80000080c753:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080c756:	8d 50 ff             	lea    edx,[rax-0x1]
ffff80000080c759:	48 b8 b8 ff ff ff ff 	movabs rax,0xffffffffffffffb8
ffff80000080c760:	ff ff ff 
ffff80000080c763:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080c767:	48 63 d2             	movsxd rdx,edx
ffff80000080c76a:	48 8b 0c d0          	mov    rcx,QWORD PTR [rax+rdx*8]
ffff80000080c76e:	48 b8 b8 ff ff ff ff 	movabs rax,0xffffffffffffffb8
ffff80000080c775:	ff ff ff 
ffff80000080c778:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080c77c:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080c77f:	48 63 d2             	movsxd rdx,edx
ffff80000080c782:	48 89 0c d0          	mov    QWORD PTR [rax+rdx*8],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:62 (discriminator 2)
    for(;mk>0;mk--){
ffff80000080c786:	83 6d ec 01          	sub    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:62 (discriminator 1)
ffff80000080c78a:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff80000080c78e:	7f c3                	jg     ffff80000080c753 <mark_use+0xe8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:65
    }
    history_dentry[0]=d;
ffff80000080c790:	48 b8 b8 ff ff ff ff 	movabs rax,0xffffffffffffffb8
ffff80000080c797:	ff ff ff 
ffff80000080c79a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080c79e:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080c7a2:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:67

}
ffff80000080c7a5:	90                   	nop
ffff80000080c7a6:	48 83 c4 20          	add    rsp,0x20
ffff80000080c7aa:	5b                   	pop    rbx
ffff80000080c7ab:	41 5f                	pop    r15
ffff80000080c7ad:	5d                   	pop    rbp
ffff80000080c7ae:	c3                   	ret    

ffff80000080c7af <path_walk>:
path_walk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:69
struct dir_entry * path_walk(char * name,unsigned long flags)
{
ffff80000080c7af:	f3 0f 1e fa          	endbr64 
ffff80000080c7b3:	55                   	push   rbp
ffff80000080c7b4:	48 89 e5             	mov    rbp,rsp
ffff80000080c7b7:	41 57                	push   r15
ffff80000080c7b9:	53                   	push   rbx
ffff80000080c7ba:	48 83 ec 60          	sub    rsp,0x60
ffff80000080c7be:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080c7be <path_walk+0xf>
ffff80000080c7c5:	49 bb 3a 64 11 00 00 	movabs r11,0x11643a
ffff80000080c7cc:	00 00 00 
ffff80000080c7cf:	4c 01 db             	add    rbx,r11
ffff80000080c7d2:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
ffff80000080c7d6:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:70
    char * tmpname = NULL;
ffff80000080c7da:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff80000080c7e1:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:71
    int tmpnamelen = 0;
ffff80000080c7e2:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:72
    struct dir_entry * parent = root_sb->root;
ffff80000080c7e9:	48 b8 90 fd ff ff ff 	movabs rax,0xfffffffffffffd90
ffff80000080c7f0:	ff ff ff 
ffff80000080c7f3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080c7f7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c7fa:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c7fd:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:73
    struct dir_entry * path = NULL;
ffff80000080c801:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff80000080c808:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:75

    while(*name == '/')
ffff80000080c809:	eb 05                	jmp    ffff80000080c810 <path_walk+0x61>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:76
        name++;
ffff80000080c80b:	48 83 45 98 01       	add    QWORD PTR [rbp-0x68],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:75
    while(*name == '/')
ffff80000080c810:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080c814:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080c817:	3c 2f                	cmp    al,0x2f
ffff80000080c819:	74 f0                	je     ffff80000080c80b <path_walk+0x5c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:78

    if(!*name)
ffff80000080c81b:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080c81f:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080c822:	84 c0                	test   al,al
ffff80000080c824:	75 09                	jne    ffff80000080c82f <path_walk+0x80>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:80
    {
        return parent;
ffff80000080c826:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c82a:	e9 15 03 00 00       	jmp    ffff80000080cb44 <path_walk+0x395>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:85
    }

    for(;;)
    {
        tmpname = name;
ffff80000080c82f:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080c833:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:86
        while(*name && (*name != '/'))
ffff80000080c837:	eb 05                	jmp    ffff80000080c83e <path_walk+0x8f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:87
            name++;
ffff80000080c839:	48 83 45 98 01       	add    QWORD PTR [rbp-0x68],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:86
        while(*name && (*name != '/'))
ffff80000080c83e:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080c842:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080c845:	84 c0                	test   al,al
ffff80000080c847:	74 0b                	je     ffff80000080c854 <path_walk+0xa5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:86 (discriminator 1)
ffff80000080c849:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080c84d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080c850:	3c 2f                	cmp    al,0x2f
ffff80000080c852:	75 e5                	jne    ffff80000080c839 <path_walk+0x8a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:88
        tmpnamelen = name - tmpname;
ffff80000080c854:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080c858:	48 2b 45 d0          	sub    rax,QWORD PTR [rbp-0x30]
ffff80000080c85c:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:89
        if(parent->mount_point)
ffff80000080c85f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c863:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
ffff80000080c867:	48 85 c0             	test   rax,rax
ffff80000080c86a:	74 12                	je     ffff80000080c87e <path_walk+0xcf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:92
        {
            //有挂载点，则进入挂载文件系统的文件树
            parent=parent->mount_point->sb->root;
ffff80000080c86c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c870:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
ffff80000080c874:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c877:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c87a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:96
        }
        //先在缓存中寻找已有的dentry
        //寻找名字为tmpname的dentry
        struct List* lp=parent->subdirs_list.next;
ffff80000080c87e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c882:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff80000080c886:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:97
        while (lp)
ffff80000080c88a:	eb 4e                	jmp    ffff80000080c8da <path_walk+0x12b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:99
        {
            path=lp->data;
ffff80000080c88c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080c890:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080c894:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:100
            if(memcmp(tmpname,path->name,tmpnamelen)==0){
ffff80000080c898:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080c89c:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080c89f:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000080c8a2:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080c8a6:	48 89 ce             	mov    rsi,rcx
ffff80000080c8a9:	48 89 c7             	mov    rdi,rax
ffff80000080c8ac:	49 89 df             	mov    r15,rbx
ffff80000080c8af:	48 b8 24 1e ef ff ff 	movabs rax,0xffffffffffef1e24
ffff80000080c8b6:	ff ff ff 
ffff80000080c8b9:	48 01 d8             	add    rax,rbx
ffff80000080c8bc:	ff d0                	call   rax
ffff80000080c8be:	85 c0                	test   eax,eax
ffff80000080c8c0:	74 21                	je     ffff80000080c8e3 <path_walk+0x134>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:103
                break;
            }
            lp=&path->child_node;
ffff80000080c8c2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080c8c6:	48 83 c0 10          	add    rax,0x10
ffff80000080c8ca:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:104
            lp=lp->next;
ffff80000080c8ce:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080c8d2:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080c8d6:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:97
        while (lp)
ffff80000080c8da:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff80000080c8df:	75 ab                	jne    ffff80000080c88c <path_walk+0xdd>
ffff80000080c8e1:	eb 01                	jmp    ffff80000080c8e4 <path_walk+0x135>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:101
                break;
ffff80000080c8e3:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:106
        }
        if(!lp){
ffff80000080c8e4:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff80000080c8e9:	0f 85 ed 01 00 00    	jne    ffff80000080cadc <path_walk+0x32d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:108
            //缓存中没有，再读取介质
            path = (struct dir_entry *) kmalloc(sizeof(struct dir_entry), 0);
ffff80000080c8ef:	be 00 00 00 00       	mov    esi,0x0
ffff80000080c8f4:	bf 68 00 00 00       	mov    edi,0x68
ffff80000080c8f9:	49 89 df             	mov    r15,rbx
ffff80000080c8fc:	48 b8 ce 07 ee ff ff 	movabs rax,0xffffffffffee07ce
ffff80000080c903:	ff ff ff 
ffff80000080c906:	48 01 d8             	add    rax,rbx
ffff80000080c909:	ff d0                	call   rax
ffff80000080c90b:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:109
            memset(path,0,sizeof(struct dir_entry));
ffff80000080c90f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080c913:	ba 68 00 00 00       	mov    edx,0x68
ffff80000080c918:	be 00 00 00 00       	mov    esi,0x0
ffff80000080c91d:	48 89 c7             	mov    rdi,rax
ffff80000080c920:	49 89 df             	mov    r15,rbx
ffff80000080c923:	48 b8 89 1e ef ff ff 	movabs rax,0xffffffffffef1e89
ffff80000080c92a:	ff ff ff 
ffff80000080c92d:	48 01 d8             	add    rax,rbx
ffff80000080c930:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:111

            path->name = kmalloc(0,tmpnamelen+1);
ffff80000080c932:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080c935:	83 c0 01             	add    eax,0x1
ffff80000080c938:	48 98                	cdqe   
ffff80000080c93a:	48 89 c6             	mov    rsi,rax
ffff80000080c93d:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080c942:	49 89 df             	mov    r15,rbx
ffff80000080c945:	48 b8 ce 07 ee ff ff 	movabs rax,0xffffffffffee07ce
ffff80000080c94c:	ff ff ff 
ffff80000080c94f:	48 01 d8             	add    rax,rbx
ffff80000080c952:	ff d0                	call   rax
ffff80000080c954:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080c958:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:112
            memset(path->name,0,tmpnamelen+1);
ffff80000080c95b:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080c95e:	83 c0 01             	add    eax,0x1
ffff80000080c961:	89 c2                	mov    edx,eax
ffff80000080c963:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080c967:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c96a:	be 00 00 00 00       	mov    esi,0x0
ffff80000080c96f:	48 89 c7             	mov    rdi,rax
ffff80000080c972:	49 89 df             	mov    r15,rbx
ffff80000080c975:	48 b8 89 1e ef ff ff 	movabs rax,0xffffffffffef1e89
ffff80000080c97c:	ff ff ff 
ffff80000080c97f:	48 01 d8             	add    rax,rbx
ffff80000080c982:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:113
            memcpy(path->name,tmpname,tmpnamelen);
ffff80000080c984:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000080c987:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080c98b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080c98e:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffff80000080c992:	48 89 ce             	mov    rsi,rcx
ffff80000080c995:	48 89 c7             	mov    rdi,rax
ffff80000080c998:	49 89 df             	mov    r15,rbx
ffff80000080c99b:	48 b8 da 1d ef ff ff 	movabs rax,0xffffffffffef1dda
ffff80000080c9a2:	ff ff ff 
ffff80000080c9a5:	48 01 d8             	add    rax,rbx
ffff80000080c9a8:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:114
            path->name_length = tmpnamelen;
ffff80000080c9aa:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080c9ae:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000080c9b1:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:116

            path=parent->dir_inode->inode_ops->lookup(parent->dir_inode,path);
ffff80000080c9b4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c9b8:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080c9bc:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff80000080c9c0:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
ffff80000080c9c4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080c9c8:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080c9cc:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080c9d0:	48 89 d6             	mov    rsi,rdx
ffff80000080c9d3:	48 89 c7             	mov    rdi,rax
ffff80000080c9d6:	ff d1                	call   rcx
ffff80000080c9d8:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:118
        
            if(path == NULL)
ffff80000080c9dc:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
ffff80000080c9e1:	75 39                	jne    ffff80000080ca1c <path_walk+0x26d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:120
            {
                printf("can not find file or dir:%s\n",name);
ffff80000080c9e3:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080c9e7:	48 89 c6             	mov    rsi,rax
ffff80000080c9ea:	48 b8 20 d5 ff ff ff 	movabs rax,0xffffffffffffd520
ffff80000080c9f1:	ff ff ff 
ffff80000080c9f4:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080c9f8:	48 89 c7             	mov    rdi,rax
ffff80000080c9fb:	49 89 df             	mov    r15,rbx
ffff80000080c9fe:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080ca03:	48 ba c9 ed ed ff ff 	movabs rdx,0xffffffffffededc9
ffff80000080ca0a:	ff ff ff 
ffff80000080ca0d:	48 01 da             	add    rdx,rbx
ffff80000080ca10:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:123
                // kmfree(path->name);
                // kmfree(path);
                return NULL;
ffff80000080ca12:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080ca17:	e9 28 01 00 00       	jmp    ffff80000080cb44 <path_walk+0x395>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:127
            }
//        list_init(&path->child_node);
//        list_init(&path->subdirs_list);
            path->parent = parent;
ffff80000080ca1c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ca20:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080ca24:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:130
            //list_add会查重，如果链表里面已经有了data指针值相同的项，就不添加。
            //不过这里已经是缓存中没有找到dentry的情况了，一般不会出现data一样。
            list_add(&parent->subdirs_list,&path->child_node);
ffff80000080ca28:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080ca2c:	48 83 c0 10          	add    rax,0x10
ffff80000080ca30:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080ca34:	48 83 c2 28          	add    rdx,0x28
ffff80000080ca38:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
ffff80000080ca3c:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:33
    struct List* p=entry;
ffff80000080ca40:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080ca44:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:34
    for(;p->next&&p->next!=p;p=p->next){
ffff80000080ca48:	eb 21                	jmp    ffff80000080ca6b <path_walk+0x2bc>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:35
        if(p->data==new->data)
ffff80000080ca4a:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080ca4e:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff80000080ca52:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080ca56:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080ca5a:	48 39 c2             	cmp    rdx,rax
ffff80000080ca5d:	74 7c                	je     ffff80000080cadb <path_walk+0x32c>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:34
    for(;p->next&&p->next!=p;p=p->next){
ffff80000080ca5f:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080ca63:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080ca67:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
ffff80000080ca6b:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080ca6f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080ca73:	48 85 c0             	test   rax,rax
ffff80000080ca76:	74 0e                	je     ffff80000080ca86 <path_walk+0x2d7>
ffff80000080ca78:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080ca7c:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080ca80:	48 39 45 b0          	cmp    QWORD PTR [rbp-0x50],rax
ffff80000080ca84:	75 c4                	jne    ffff80000080ca4a <path_walk+0x29b>
ffff80000080ca86:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080ca8a:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
ffff80000080ca8e:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080ca92:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff80000080ca96:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080ca9a:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080ca9e:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080caa2:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff80000080caa6:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080caaa:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff80000080caae:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff80000080cab1:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080cab5:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080cab9:	48 85 c0             	test   rax,rax
ffff80000080cabc:	74 0f                	je     ffff80000080cacd <path_walk+0x31e>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff80000080cabe:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080cac2:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080cac6:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
ffff80000080caca:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:29
    entry->next = new;
ffff80000080cacd:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080cad1:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
ffff80000080cad5:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff80000080cad9:	eb 01                	jmp    ffff80000080cadc <path_walk+0x32d>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:36
            return;
ffff80000080cadb:	90                   	nop
path_walk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:136

        }
        
        
        //标记这个dentry刚刚使用过
        mark_use(path);
ffff80000080cadc:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080cae0:	48 89 c7             	mov    rdi,rax
ffff80000080cae3:	49 89 df             	mov    r15,rbx
ffff80000080cae6:	48 b8 73 9a ee ff ff 	movabs rax,0xffffffffffee9a73
ffff80000080caed:	ff ff ff 
ffff80000080caf0:	48 01 d8             	add    rax,rbx
ffff80000080caf3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:137
        if(!*name)
ffff80000080caf5:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080caf9:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080cafc:	84 c0                	test   al,al
ffff80000080cafe:	74 2a                	je     ffff80000080cb2a <path_walk+0x37b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:139
            goto last_component;
        while(*name == '/')
ffff80000080cb00:	eb 05                	jmp    ffff80000080cb07 <path_walk+0x358>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:140
            name++;
ffff80000080cb02:	48 83 45 98 01       	add    QWORD PTR [rbp-0x68],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:139
        while(*name == '/')
ffff80000080cb07:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080cb0b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080cb0e:	3c 2f                	cmp    al,0x2f
ffff80000080cb10:	74 f0                	je     ffff80000080cb02 <path_walk+0x353>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:141
        if(!*name)
ffff80000080cb12:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080cb16:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080cb19:	84 c0                	test   al,al
ffff80000080cb1b:	74 10                	je     ffff80000080cb2d <path_walk+0x37e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:143
            goto last_slash;
        parent = path;
ffff80000080cb1d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080cb21:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:84
    {
ffff80000080cb25:	e9 05 fd ff ff       	jmp    ffff80000080c82f <path_walk+0x80>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:138
            goto last_component;
ffff80000080cb2a:	90                   	nop
ffff80000080cb2b:	eb 01                	jmp    ffff80000080cb2e <path_walk+0x37f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:142
            goto last_slash;
ffff80000080cb2d:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:149
    }

    last_slash:
    last_component:

    if(flags & 1)
ffff80000080cb2e:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080cb32:	83 e0 01             	and    eax,0x1
ffff80000080cb35:	48 85 c0             	test   rax,rax
ffff80000080cb38:	74 06                	je     ffff80000080cb40 <path_walk+0x391>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:151
    {
        return parent;
ffff80000080cb3a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080cb3e:	eb 04                	jmp    ffff80000080cb44 <path_walk+0x395>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:154
    }

    return path;
ffff80000080cb40:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:155
}
ffff80000080cb44:	48 83 c4 60          	add    rsp,0x60
ffff80000080cb48:	5b                   	pop    rbx
ffff80000080cb49:	41 5f                	pop    r15
ffff80000080cb4b:	5d                   	pop    rbp
ffff80000080cb4c:	c3                   	ret    

ffff80000080cb4d <fill_dentry>:
fill_dentry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:159


int fill_dentry(void *buf,char *name, long namelen,long type,long offset)
{
ffff80000080cb4d:	f3 0f 1e fa          	endbr64 
ffff80000080cb51:	55                   	push   rbp
ffff80000080cb52:	48 89 e5             	mov    rbp,rsp
ffff80000080cb55:	41 57                	push   r15
ffff80000080cb57:	48 83 ec 48          	sub    rsp,0x48
ffff80000080cb5b:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080cb5b <fill_dentry+0xe>
ffff80000080cb62:	49 bb 9d 60 11 00 00 	movabs r11,0x11609d
ffff80000080cb69:	00 00 00 
ffff80000080cb6c:	4c 01 d8             	add    rax,r11
ffff80000080cb6f:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff80000080cb73:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffff80000080cb77:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
ffff80000080cb7b:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
ffff80000080cb7f:	4c 89 45 b8          	mov    QWORD PTR [rbp-0x48],r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:160
    struct dirent* dent = (struct dirent*)buf;
ffff80000080cb83:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080cb87:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:162

    if((unsigned long)buf < PAGE_4K_SIZE)
ffff80000080cb8b:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080cb8f:	48 81 fa ff 0f 00 00 	cmp    rdx,0xfff
ffff80000080cb96:	77 07                	ja     ffff80000080cb9f <fill_dentry+0x52>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:163
        return -EFAULT;
ffff80000080cb98:	b8 eb ff ff ff       	mov    eax,0xffffffeb
ffff80000080cb9d:	eb 53                	jmp    ffff80000080cbf2 <fill_dentry+0xa5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:165

    memcpy(name,dent->d_name,namelen);
ffff80000080cb9f:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080cba3:	89 d7                	mov    edi,edx
ffff80000080cba5:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080cba9:	48 8d 72 18          	lea    rsi,[rdx+0x18]
ffff80000080cbad:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffff80000080cbb1:	89 fa                	mov    edx,edi
ffff80000080cbb3:	48 89 cf             	mov    rdi,rcx
ffff80000080cbb6:	49 89 c7             	mov    r15,rax
ffff80000080cbb9:	48 b9 da 1d ef ff ff 	movabs rcx,0xffffffffffef1dda
ffff80000080cbc0:	ff ff ff 
ffff80000080cbc3:	48 01 c1             	add    rcx,rax
ffff80000080cbc6:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:166
    dent->d_namelen = namelen;
ffff80000080cbc8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080cbcc:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080cbd0:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:167
    dent->d_type = type;
ffff80000080cbd4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080cbd8:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff80000080cbdc:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:168
    dent->d_offset = offset;
ffff80000080cbe0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080cbe4:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000080cbe8:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:169
    return sizeof(struct dirent) + namelen;
ffff80000080cbeb:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080cbef:	83 c0 18             	add    eax,0x18
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:170
}
ffff80000080cbf2:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080cbf6:	c9                   	leave  
ffff80000080cbf7:	c3                   	ret    

ffff80000080cbf8 <mount_fs>:
mount_fs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:177
//function mount_root
struct super_block * root_sb = NULL;
struct file_system_type filesystem = {"filesystem",0};

struct super_block* mount_fs(char * name,struct Disk_Partition_Table_Entry * DPTE,void * buf)
{
ffff80000080cbf8:	f3 0f 1e fa          	endbr64 
ffff80000080cbfc:	55                   	push   rbp
ffff80000080cbfd:	48 89 e5             	mov    rbp,rsp
ffff80000080cc00:	41 57                	push   r15
ffff80000080cc02:	53                   	push   rbx
ffff80000080cc03:	48 83 ec 30          	sub    rsp,0x30
ffff80000080cc07:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080cc07 <mount_fs+0xf>
ffff80000080cc0e:	49 bb f1 5f 11 00 00 	movabs r11,0x115ff1
ffff80000080cc15:	00 00 00 
ffff80000080cc18:	4c 01 db             	add    rbx,r11
ffff80000080cc1b:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff80000080cc1f:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffff80000080cc23:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:178
    struct file_system_type * p = NULL;
ffff80000080cc27:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000080cc2e:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:180

    for(p = &filesystem;p;p = p->next)
ffff80000080cc2f:	48 b8 20 ff ff ff ff 	movabs rax,0xffffffffffffff20
ffff80000080cc36:	ff ff ff 
ffff80000080cc39:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080cc3d:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff80000080cc41:	eb 4d                	jmp    ffff80000080cc90 <mount_fs+0x98>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:181
        if(!strcmp(p->name,name))
ffff80000080cc43:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080cc47:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080cc4a:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080cc4e:	48 89 d6             	mov    rsi,rdx
ffff80000080cc51:	48 89 c7             	mov    rdi,rax
ffff80000080cc54:	49 89 df             	mov    r15,rbx
ffff80000080cc57:	48 b8 2c 21 ef ff ff 	movabs rax,0xffffffffffef212c
ffff80000080cc5e:	ff ff ff 
ffff80000080cc61:	48 01 d8             	add    rax,rbx
ffff80000080cc64:	ff d0                	call   rax
ffff80000080cc66:	85 c0                	test   eax,eax
ffff80000080cc68:	75 1a                	jne    ffff80000080cc84 <mount_fs+0x8c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:183
        {
            return p->read_superblock(DPTE,buf);
ffff80000080cc6a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080cc6e:	48 8b 48 10          	mov    rcx,QWORD PTR [rax+0x10]
ffff80000080cc72:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080cc76:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080cc7a:	48 89 d6             	mov    rsi,rdx
ffff80000080cc7d:	48 89 c7             	mov    rdi,rax
ffff80000080cc80:	ff d1                	call   rcx
ffff80000080cc82:	eb 18                	jmp    ffff80000080cc9c <mount_fs+0xa4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:180 (discriminator 2)
    for(p = &filesystem;p;p = p->next)
ffff80000080cc84:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080cc88:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080cc8c:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:180 (discriminator 1)
ffff80000080cc90:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080cc95:	75 ac                	jne    ffff80000080cc43 <mount_fs+0x4b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:185
        }
    return 0;
ffff80000080cc97:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:186
}
ffff80000080cc9c:	48 83 c4 30          	add    rsp,0x30
ffff80000080cca0:	5b                   	pop    rbx
ffff80000080cca1:	41 5f                	pop    r15
ffff80000080cca3:	5d                   	pop    rbp
ffff80000080cca4:	c3                   	ret    

ffff80000080cca5 <mount_fs_on>:
mount_fs_on():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:187
int mount_fs_on(struct dir_entry *d_to_mount,struct super_block* fs){
ffff80000080cca5:	f3 0f 1e fa          	endbr64 
ffff80000080cca9:	55                   	push   rbp
ffff80000080ccaa:	48 89 e5             	mov    rbp,rsp
ffff80000080ccad:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080ccad <mount_fs_on+0x8>
ffff80000080ccb4:	49 bb 4b 5f 11 00 00 	movabs r11,0x115f4b
ffff80000080ccbb:	00 00 00 
ffff80000080ccbe:	4c 01 d8             	add    rax,r11
ffff80000080ccc1:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff80000080ccc5:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:188
    for(int i=0;i<MAX_MOUNTPOINTS;i++){
ffff80000080ccc9:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff80000080ccd0:	e9 9d 00 00 00       	jmp    ffff80000080cd72 <mount_fs_on+0xcd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:189
        if(!mp_mount_points[i].sb){
ffff80000080ccd5:	48 ba 38 fe ff ff ff 	movabs rdx,0xfffffffffffffe38
ffff80000080ccdc:	ff ff ff 
ffff80000080ccdf:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080cce3:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080cce6:	48 63 d2             	movsxd rdx,edx
ffff80000080cce9:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080cced:	48 01 ca             	add    rdx,rcx
ffff80000080ccf0:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080ccf3:	48 85 d2             	test   rdx,rdx
ffff80000080ccf6:	75 76                	jne    ffff80000080cd6e <mount_fs_on+0xc9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:190
            mp_mount_points[i].sb=fs;
ffff80000080ccf8:	48 ba 38 fe ff ff ff 	movabs rdx,0xfffffffffffffe38
ffff80000080ccff:	ff ff ff 
ffff80000080cd02:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080cd06:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080cd09:	48 63 d2             	movsxd rdx,edx
ffff80000080cd0c:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080cd10:	48 01 d1             	add    rcx,rdx
ffff80000080cd13:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080cd17:	48 89 11             	mov    QWORD PTR [rcx],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:191
            mp_mount_points[i].dmount_point=d_to_mount;
ffff80000080cd1a:	48 ba 38 fe ff ff ff 	movabs rdx,0xfffffffffffffe38
ffff80000080cd21:	ff ff ff 
ffff80000080cd24:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080cd28:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080cd2b:	48 63 d2             	movsxd rdx,edx
ffff80000080cd2e:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080cd32:	48 01 ca             	add    rdx,rcx
ffff80000080cd35:	48 8d 4a 08          	lea    rcx,[rdx+0x8]
ffff80000080cd39:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080cd3d:	48 89 11             	mov    QWORD PTR [rcx],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:192
            d_to_mount->mount_point=mp_mount_points+i;
ffff80000080cd40:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080cd43:	48 63 d2             	movsxd rdx,edx
ffff80000080cd46:	48 89 d1             	mov    rcx,rdx
ffff80000080cd49:	48 c1 e1 04          	shl    rcx,0x4
ffff80000080cd4d:	48 ba 38 fe ff ff ff 	movabs rdx,0xfffffffffffffe38
ffff80000080cd54:	ff ff ff 
ffff80000080cd57:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080cd5b:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
ffff80000080cd5f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080cd63:	48 89 50 58          	mov    QWORD PTR [rax+0x58],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:193
            return 1;
ffff80000080cd67:	b8 01 00 00 00       	mov    eax,0x1
ffff80000080cd6c:	eb 13                	jmp    ffff80000080cd81 <mount_fs_on+0xdc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:188 (discriminator 2)
    for(int i=0;i<MAX_MOUNTPOINTS;i++){
ffff80000080cd6e:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:188 (discriminator 1)
ffff80000080cd72:	83 7d fc 17          	cmp    DWORD PTR [rbp-0x4],0x17
ffff80000080cd76:	0f 8e 59 ff ff ff    	jle    ffff80000080ccd5 <mount_fs_on+0x30>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:196
        }
    }
    return -ENOMEM;
ffff80000080cd7c:	b8 cf ff ff ff       	mov    eax,0xffffffcf
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:197
}
ffff80000080cd81:	5d                   	pop    rbp
ffff80000080cd82:	c3                   	ret    

ffff80000080cd83 <umount_fs>:
umount_fs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:198
int umount_fs(struct dir_entry* d_mp){
ffff80000080cd83:	f3 0f 1e fa          	endbr64 
ffff80000080cd87:	55                   	push   rbp
ffff80000080cd88:	48 89 e5             	mov    rbp,rsp
ffff80000080cd8b:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080cd8b <umount_fs+0x8>
ffff80000080cd92:	49 bb 6d 5e 11 00 00 	movabs r11,0x115e6d
ffff80000080cd99:	00 00 00 
ffff80000080cd9c:	4c 01 d8             	add    rax,r11
ffff80000080cd9f:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:199
    if(d_mp->mount_point){
ffff80000080cda3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080cda7:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
ffff80000080cdab:	48 85 c0             	test   rax,rax
ffff80000080cdae:	74 26                	je     ffff80000080cdd6 <umount_fs+0x53>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:200
        d_mp->mount_point->dmount_point=0;
ffff80000080cdb0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080cdb4:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
ffff80000080cdb8:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
ffff80000080cdbf:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:201
        d_mp->mount_point->sb=0;
ffff80000080cdc0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080cdc4:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
ffff80000080cdc8:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:202
        return 1;
ffff80000080cdcf:	b8 01 00 00 00       	mov    eax,0x1
ffff80000080cdd4:	eb 05                	jmp    ffff80000080cddb <umount_fs+0x58>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:204
    }
    return -ENOENT;
ffff80000080cdd6:	b8 d3 ff ff ff       	mov    eax,0xffffffd3
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:205
}
ffff80000080cddb:	5d                   	pop    rbp
ffff80000080cddc:	c3                   	ret    

ffff80000080cddd <register_filesystem>:
register_filesystem():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:207
unsigned long register_filesystem(struct file_system_type * fs)
{
ffff80000080cddd:	f3 0f 1e fa          	endbr64 
ffff80000080cde1:	55                   	push   rbp
ffff80000080cde2:	48 89 e5             	mov    rbp,rsp
ffff80000080cde5:	41 57                	push   r15
ffff80000080cde7:	53                   	push   rbx
ffff80000080cde8:	48 83 ec 20          	sub    rsp,0x20
ffff80000080cdec:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080cdec <register_filesystem+0xf>
ffff80000080cdf3:	49 bb 0c 5e 11 00 00 	movabs r11,0x115e0c
ffff80000080cdfa:	00 00 00 
ffff80000080cdfd:	4c 01 db             	add    rbx,r11
ffff80000080ce00:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:208
    struct file_system_type * p = NULL;
ffff80000080ce04:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000080ce0b:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:210

    for(p = &filesystem;p;p = p->next)
ffff80000080ce0c:	48 b8 20 ff ff ff ff 	movabs rax,0xffffffffffffff20
ffff80000080ce13:	ff ff ff 
ffff80000080ce16:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ce1a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff80000080ce1e:	eb 3d                	jmp    ffff80000080ce5d <register_filesystem+0x80>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:211
        if(!strcmp(fs->name,p->name))
ffff80000080ce20:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080ce24:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080ce27:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080ce2b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ce2e:	48 89 d6             	mov    rsi,rdx
ffff80000080ce31:	48 89 c7             	mov    rdi,rax
ffff80000080ce34:	49 89 df             	mov    r15,rbx
ffff80000080ce37:	48 b8 2c 21 ef ff ff 	movabs rax,0xffffffffffef212c
ffff80000080ce3e:	ff ff ff 
ffff80000080ce41:	48 01 d8             	add    rax,rbx
ffff80000080ce44:	ff d0                	call   rax
ffff80000080ce46:	85 c0                	test   eax,eax
ffff80000080ce48:	75 07                	jne    ffff80000080ce51 <register_filesystem+0x74>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:212
            return 0;
ffff80000080ce4a:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080ce4f:	eb 48                	jmp    ffff80000080ce99 <register_filesystem+0xbc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:210 (discriminator 2)
    for(p = &filesystem;p;p = p->next)
ffff80000080ce51:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080ce55:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080ce59:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:210 (discriminator 1)
ffff80000080ce5d:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080ce62:	75 bc                	jne    ffff80000080ce20 <register_filesystem+0x43>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:214

    fs->next = filesystem.next;
ffff80000080ce64:	48 b8 20 ff ff ff ff 	movabs rax,0xffffffffffffff20
ffff80000080ce6b:	ff ff ff 
ffff80000080ce6e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ce72:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
ffff80000080ce76:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080ce7a:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:215
    filesystem.next = fs;
ffff80000080ce7e:	48 b8 20 ff ff ff ff 	movabs rax,0xffffffffffffff20
ffff80000080ce85:	ff ff ff 
ffff80000080ce88:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ce8c:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080ce90:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:217

    return 1;
ffff80000080ce94:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:218
}
ffff80000080ce99:	48 83 c4 20          	add    rsp,0x20
ffff80000080ce9d:	5b                   	pop    rbx
ffff80000080ce9e:	41 5f                	pop    r15
ffff80000080cea0:	5d                   	pop    rbp
ffff80000080cea1:	c3                   	ret    

ffff80000080cea2 <unregister_filesystem>:
unregister_filesystem():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:221

unsigned long unregister_filesystem(struct file_system_type * fs)
{
ffff80000080cea2:	f3 0f 1e fa          	endbr64 
ffff80000080cea6:	55                   	push   rbp
ffff80000080cea7:	48 89 e5             	mov    rbp,rsp
ffff80000080ceaa:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080ceaa <unregister_filesystem+0x8>
ffff80000080ceb1:	49 bb 4e 5d 11 00 00 	movabs r11,0x115d4e
ffff80000080ceb8:	00 00 00 
ffff80000080cebb:	4c 01 d8             	add    rax,r11
ffff80000080cebe:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:222
    struct file_system_type * p = &filesystem;
ffff80000080cec2:	48 ba 20 ff ff ff ff 	movabs rdx,0xffffffffffffff20
ffff80000080cec9:	ff ff ff 
ffff80000080cecc:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080ced0:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:224

    while(p->next)
ffff80000080ced4:	eb 41                	jmp    ffff80000080cf17 <unregister_filesystem+0x75>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:225
        if(p->next == fs)
ffff80000080ced6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080ceda:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080cede:	48 39 45 e8          	cmp    QWORD PTR [rbp-0x18],rax
ffff80000080cee2:	75 27                	jne    ffff80000080cf0b <unregister_filesystem+0x69>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:227
        {
            p->next = p->next->next;
ffff80000080cee4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080cee8:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080ceec:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
ffff80000080cef0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080cef4:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:228
            fs->next = NULL;
ffff80000080cef8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080cefc:	48 c7 40 18 00 00 00 	mov    QWORD PTR [rax+0x18],0x0
ffff80000080cf03:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:229
            return 1;
ffff80000080cf04:	b8 01 00 00 00       	mov    eax,0x1
ffff80000080cf09:	eb 1e                	jmp    ffff80000080cf29 <unregister_filesystem+0x87>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:232
        }
        else
            p = p->next;
ffff80000080cf0b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080cf0f:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080cf13:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:224
    while(p->next)
ffff80000080cf17:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080cf1b:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080cf1f:	48 85 c0             	test   rax,rax
ffff80000080cf22:	75 b2                	jne    ffff80000080ced6 <unregister_filesystem+0x34>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:233
    return 0;
ffff80000080cf24:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:234
}
ffff80000080cf29:	5d                   	pop    rbp
ffff80000080cf2a:	c3                   	ret    

ffff80000080cf2b <root_lookup>:
root_lookup():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:236
//在parent inode下查找dest dentry
struct dir_entry* root_lookup(struct index_node * parent_inode,struct dir_entry * dest_dentry){
ffff80000080cf2b:	f3 0f 1e fa          	endbr64 
ffff80000080cf2f:	55                   	push   rbp
ffff80000080cf30:	48 89 e5             	mov    rbp,rsp
ffff80000080cf33:	41 57                	push   r15
ffff80000080cf35:	53                   	push   rbx
ffff80000080cf36:	48 83 ec 30          	sub    rsp,0x30
ffff80000080cf3a:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080cf3a <root_lookup+0xf>
ffff80000080cf41:	49 bb be 5c 11 00 00 	movabs r11,0x115cbe
ffff80000080cf48:	00 00 00 
ffff80000080cf4b:	4c 01 db             	add    rbx,r11
ffff80000080cf4e:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff80000080cf52:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:237
    struct dir_entry* tmp= (struct dir_entry *) parent_inode->private_index_info;
ffff80000080cf56:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080cf5a:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff80000080cf5e:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:238
    struct List* p= tmp->subdirs_list.next;
ffff80000080cf62:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080cf66:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff80000080cf6a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:239
    while (p){
ffff80000080cf6e:	eb 61                	jmp    ffff80000080cfd1 <root_lookup+0xa6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:240
        struct dir_entry* dp=p->data;
ffff80000080cf70:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080cf74:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080cf78:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:241
        if(strcmp(dp->name,dest_dentry->name)==0){
ffff80000080cf7c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080cf80:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080cf83:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080cf87:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080cf8a:	48 89 d6             	mov    rsi,rdx
ffff80000080cf8d:	48 89 c7             	mov    rdi,rax
ffff80000080cf90:	49 89 df             	mov    r15,rbx
ffff80000080cf93:	48 b8 2c 21 ef ff ff 	movabs rax,0xffffffffffef212c
ffff80000080cf9a:	ff ff ff 
ffff80000080cf9d:	48 01 d8             	add    rax,rbx
ffff80000080cfa0:	ff d0                	call   rax
ffff80000080cfa2:	85 c0                	test   eax,eax
ffff80000080cfa4:	75 1f                	jne    ffff80000080cfc5 <root_lookup+0x9a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:242
            kmfree(dest_dentry);
ffff80000080cfa6:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080cfaa:	48 89 c7             	mov    rdi,rax
ffff80000080cfad:	49 89 df             	mov    r15,rbx
ffff80000080cfb0:	48 b8 6f 09 ee ff ff 	movabs rax,0xffffffffffee096f
ffff80000080cfb7:	ff ff ff 
ffff80000080cfba:	48 01 d8             	add    rax,rbx
ffff80000080cfbd:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:243
            return dp;
ffff80000080cfbf:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080cfc3:	eb 31                	jmp    ffff80000080cff6 <root_lookup+0xcb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:245
        }
        p=p->next;
ffff80000080cfc5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080cfc9:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080cfcd:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:239
    while (p){
ffff80000080cfd1:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080cfd6:	75 98                	jne    ffff80000080cf70 <root_lookup+0x45>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:247
    }
    kmfree(dest_dentry);
ffff80000080cfd8:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080cfdc:	48 89 c7             	mov    rdi,rax
ffff80000080cfdf:	49 89 df             	mov    r15,rbx
ffff80000080cfe2:	48 b8 6f 09 ee ff ff 	movabs rax,0xffffffffffee096f
ffff80000080cfe9:	ff ff ff 
ffff80000080cfec:	48 01 d8             	add    rax,rbx
ffff80000080cfef:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:248
    return NULL;
ffff80000080cff1:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:249
}
ffff80000080cff6:	48 83 c4 30          	add    rsp,0x30
ffff80000080cffa:	5b                   	pop    rbx
ffff80000080cffb:	41 5f                	pop    r15
ffff80000080cffd:	5d                   	pop    rbp
ffff80000080cffe:	c3                   	ret    

ffff80000080cfff <init_rootfs>:
init_rootfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:253
struct index_node_operations root_iops={
    .lookup=root_lookup
};
void init_rootfs(){
ffff80000080cfff:	f3 0f 1e fa          	endbr64 
ffff80000080d003:	55                   	push   rbp
ffff80000080d004:	48 89 e5             	mov    rbp,rsp
ffff80000080d007:	41 57                	push   r15
ffff80000080d009:	53                   	push   rbx
ffff80000080d00a:	48 83 ec 10          	sub    rsp,0x10
ffff80000080d00e:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080d00e <init_rootfs+0xf>
ffff80000080d015:	49 bb ea 5b 11 00 00 	movabs r11,0x115bea
ffff80000080d01c:	00 00 00 
ffff80000080d01f:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:257
    /* root_sb=(struct super_block*) kmalloc(0,PAGE_4K_SIZE);
    root_sb->root=root_sb+1;//紧凑跟在后面
    root_sb->sb_ops=NULL; */
    droot=kmalloc(0,sizeof(struct dir_entry));
ffff80000080d022:	be 68 00 00 00       	mov    esi,0x68
ffff80000080d027:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080d02c:	49 89 df             	mov    r15,rbx
ffff80000080d02f:	48 b8 ce 07 ee ff ff 	movabs rax,0xffffffffffee07ce
ffff80000080d036:	ff ff ff 
ffff80000080d039:	48 01 d8             	add    rax,rbx
ffff80000080d03c:	ff d0                	call   rax
ffff80000080d03e:	48 ba 48 fd ff ff ff 	movabs rdx,0xfffffffffffffd48
ffff80000080d045:	ff ff ff 
ffff80000080d048:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080d04c:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:268
    ir->file_size=0;
    ir->inode_ops=&root_iops;//lookup函数是必要的
    ir->f_ops=NULL;
    ir->private_index_info=droot; */

    droot->name=droot+1;//紧凑跟在后面
ffff80000080d04f:	48 b8 48 fd ff ff ff 	movabs rax,0xfffffffffffffd48
ffff80000080d056:	ff ff ff 
ffff80000080d059:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d05d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080d060:	48 b8 48 fd ff ff ff 	movabs rax,0xfffffffffffffd48
ffff80000080d067:	ff ff ff 
ffff80000080d06a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d06e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d071:	48 83 c2 68          	add    rdx,0x68
ffff80000080d075:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:269
    strcpy(droot->name,"/");
ffff80000080d078:	48 b8 48 fd ff ff ff 	movabs rax,0xfffffffffffffd48
ffff80000080d07f:	ff ff ff 
ffff80000080d082:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d086:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d089:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d08c:	48 ba 48 d5 ff ff ff 	movabs rdx,0xffffffffffffd548
ffff80000080d093:	ff ff ff 
ffff80000080d096:	48 8d 14 13          	lea    rdx,[rbx+rdx*1]
ffff80000080d09a:	48 89 d6             	mov    rsi,rdx
ffff80000080d09d:	48 89 c7             	mov    rdi,rax
ffff80000080d0a0:	49 89 df             	mov    r15,rbx
ffff80000080d0a3:	48 b8 de 1e ef ff ff 	movabs rax,0xffffffffffef1ede
ffff80000080d0aa:	ff ff ff 
ffff80000080d0ad:	48 01 d8             	add    rax,rbx
ffff80000080d0b0:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:270
    droot->name_length=1;
ffff80000080d0b2:	48 b8 48 fd ff ff ff 	movabs rax,0xfffffffffffffd48
ffff80000080d0b9:	ff ff ff 
ffff80000080d0bc:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d0c0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d0c3:	c7 40 08 01 00 00 00 	mov    DWORD PTR [rax+0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:271
    droot->parent=droot;
ffff80000080d0ca:	48 b8 48 fd ff ff ff 	movabs rax,0xfffffffffffffd48
ffff80000080d0d1:	ff ff ff 
ffff80000080d0d4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d0d8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d0db:	48 ba 48 fd ff ff ff 	movabs rdx,0xfffffffffffffd48
ffff80000080d0e2:	ff ff ff 
ffff80000080d0e5:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080d0e9:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080d0ec:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:272
    list_init(&droot->subdirs_list);
ffff80000080d0f0:	48 b8 48 fd ff ff ff 	movabs rax,0xfffffffffffffd48
ffff80000080d0f7:	ff ff ff 
ffff80000080d0fa:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d0fe:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d101:	48 83 c0 28          	add    rax,0x28
ffff80000080d105:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff80000080d109:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d10d:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000080d114:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d118:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000080d11f:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000080d120:	90                   	nop
init_rootfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:273
    list_init(&droot->child_node);
ffff80000080d121:	48 b8 48 fd ff ff ff 	movabs rax,0xfffffffffffffd48
ffff80000080d128:	ff ff ff 
ffff80000080d12b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d12f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d132:	48 83 c0 10          	add    rax,0x10
ffff80000080d136:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff80000080d13a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d13e:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000080d145:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d149:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000080d150:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000080d151:	90                   	nop
init_rootfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:274
    droot->child_node.data=droot;
ffff80000080d152:	48 b8 48 fd ff ff ff 	movabs rax,0xfffffffffffffd48
ffff80000080d159:	ff ff ff 
ffff80000080d15c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d160:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d163:	48 ba 48 fd ff ff ff 	movabs rdx,0xfffffffffffffd48
ffff80000080d16a:	ff ff ff 
ffff80000080d16d:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080d171:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080d174:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:279

    // root_sb->dev=dev_ramdisk<<8;
    // root_sb->p_dev=&bd_ramdisk;
    //TODO 以后要直接拿设备号，这个设备号通过devman创建设备文件（节点）分配。
    ROOT_DEV=dev_ramdisk<<8;
ffff80000080d178:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff80000080d17f:	ff ff ff 
ffff80000080d182:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d186:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080d188:	c1 e0 08             	shl    eax,0x8
ffff80000080d18b:	89 c2                	mov    edx,eax
ffff80000080d18d:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff80000080d194:	ff ff ff 
ffff80000080d197:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d19b:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/vfs.c:281
    
}
ffff80000080d19d:	90                   	nop
ffff80000080d19e:	48 83 c4 10          	add    rsp,0x10
ffff80000080d1a2:	5b                   	pop    rbx
ffff80000080d1a3:	41 5f                	pop    r15
ffff80000080d1a5:	5d                   	pop    rbp
ffff80000080d1a6:	c3                   	ret    

ffff80000080d1a7 <sys_putstring>:
sys_putstring():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:21
#include "int.h"
#include <sys/mman.h>


unsigned long sys_putstring(char *string)
{
ffff80000080d1a7:	f3 0f 1e fa          	endbr64 
ffff80000080d1ab:	55                   	push   rbp
ffff80000080d1ac:	48 89 e5             	mov    rbp,rsp
ffff80000080d1af:	41 57                	push   r15
ffff80000080d1b1:	48 83 ec 18          	sub    rsp,0x18
ffff80000080d1b5:	48 8d 15 f9 ff ff ff 	lea    rdx,[rip+0xfffffffffffffff9]        # ffff80000080d1b5 <sys_putstring+0xe>
ffff80000080d1bc:	49 bb 43 5a 11 00 00 	movabs r11,0x115a43
ffff80000080d1c3:	00 00 00 
ffff80000080d1c6:	4c 01 da             	add    rdx,r11
ffff80000080d1c9:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:22
    printf(string);
ffff80000080d1cd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d1d1:	48 89 c7             	mov    rdi,rax
ffff80000080d1d4:	49 89 d7             	mov    r15,rdx
ffff80000080d1d7:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080d1dc:	48 b9 c9 ed ed ff ff 	movabs rcx,0xffffffffffededc9
ffff80000080d1e3:	ff ff ff 
ffff80000080d1e6:	48 01 d1             	add    rcx,rdx
ffff80000080d1e9:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:23
    return 0;
ffff80000080d1eb:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:24
}
ffff80000080d1f0:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080d1f4:	c9                   	leave  
ffff80000080d1f5:	c3                   	ret    

ffff80000080d1f6 <sys_open>:
sys_open():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:27

unsigned long sys_open(char *filename,int flags)
{
ffff80000080d1f6:	f3 0f 1e fa          	endbr64 
ffff80000080d1fa:	55                   	push   rbp
ffff80000080d1fb:	48 89 e5             	mov    rbp,rsp
ffff80000080d1fe:	41 57                	push   r15
ffff80000080d200:	53                   	push   rbx
ffff80000080d201:	48 81 ec 90 00 00 00 	sub    rsp,0x90
ffff80000080d208:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080d208 <sys_open+0x12>
ffff80000080d20f:	49 bb f0 59 11 00 00 	movabs r11,0x1159f0
ffff80000080d216:	00 00 00 
ffff80000080d219:	4c 01 db             	add    rbx,r11
ffff80000080d21c:	48 89 bd 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdi
ffff80000080d223:	89 b5 64 ff ff ff    	mov    DWORD PTR [rbp-0x9c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:28
    char * path = NULL;
ffff80000080d229:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff80000080d230:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:29
    long pathlen = 0;
ffff80000080d231:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
ffff80000080d238:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:30
    long error = 0;
ffff80000080d239:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000080d240:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:31
    struct dir_entry * dentry = NULL;
ffff80000080d241:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff80000080d248:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:32
    struct file * filp = NULL;
ffff80000080d249:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffff80000080d250:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:33
    struct file ** f = NULL;
ffff80000080d251:	48 c7 45 b0 00 00 00 	mov    QWORD PTR [rbp-0x50],0x0
ffff80000080d258:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:34
    int fd = -1;
ffff80000080d259:	c7 45 dc ff ff ff ff 	mov    DWORD PTR [rbp-0x24],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:38
    int i;

//	printf("sys_open\n");
    path = (char *) kmalloc(0,PAGE_4K_SIZE);
ffff80000080d260:	be 00 10 00 00       	mov    esi,0x1000
ffff80000080d265:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080d26a:	49 89 df             	mov    r15,rbx
ffff80000080d26d:	48 b8 ce 07 ee ff ff 	movabs rax,0xffffffffffee07ce
ffff80000080d274:	ff ff ff 
ffff80000080d277:	48 01 d8             	add    rax,rbx
ffff80000080d27a:	ff d0                	call   rax
ffff80000080d27c:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:39
    if(path == NULL)
ffff80000080d280:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffff80000080d285:	75 0c                	jne    ffff80000080d293 <sys_open+0x9d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:40
        return -ENOMEM;
ffff80000080d287:	48 c7 c0 cf ff ff ff 	mov    rax,0xffffffffffffffcf
ffff80000080d28e:	e9 8b 05 00 00       	jmp    ffff80000080d81e <sys_open+0x628>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:41
    memset(path,0,PAGE_4K_SIZE);
ffff80000080d293:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080d297:	ba 00 10 00 00       	mov    edx,0x1000
ffff80000080d29c:	be 00 00 00 00       	mov    esi,0x0
ffff80000080d2a1:	48 89 c7             	mov    rdi,rax
ffff80000080d2a4:	49 89 df             	mov    r15,rbx
ffff80000080d2a7:	48 b8 89 1e ef ff ff 	movabs rax,0xffffffffffef1e89
ffff80000080d2ae:	ff ff ff 
ffff80000080d2b1:	48 01 d8             	add    rax,rbx
ffff80000080d2b4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:42
    pathlen = strlen(filename);
ffff80000080d2b6:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080d2bd:	48 89 c7             	mov    rdi,rax
ffff80000080d2c0:	49 89 df             	mov    r15,rbx
ffff80000080d2c3:	48 b8 ab 21 ef ff ff 	movabs rax,0xffffffffffef21ab
ffff80000080d2ca:	ff ff ff 
ffff80000080d2cd:	48 01 d8             	add    rax,rbx
ffff80000080d2d0:	ff d0                	call   rax
ffff80000080d2d2:	48 98                	cdqe   
ffff80000080d2d4:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:43
    if(pathlen <= 0)
ffff80000080d2d8:	48 83 7d c0 00       	cmp    QWORD PTR [rbp-0x40],0x0
ffff80000080d2dd:	7f 25                	jg     ffff80000080d304 <sys_open+0x10e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:45
    {
        kmfree(path);
ffff80000080d2df:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080d2e3:	48 89 c7             	mov    rdi,rax
ffff80000080d2e6:	49 89 df             	mov    r15,rbx
ffff80000080d2e9:	48 b8 6f 09 ee ff ff 	movabs rax,0xffffffffffee096f
ffff80000080d2f0:	ff ff ff 
ffff80000080d2f3:	48 01 d8             	add    rax,rbx
ffff80000080d2f6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:46
        return -EFAULT;
ffff80000080d2f8:	48 c7 c0 eb ff ff ff 	mov    rax,0xffffffffffffffeb
ffff80000080d2ff:	e9 1a 05 00 00       	jmp    ffff80000080d81e <sys_open+0x628>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:48
    }
    else if(pathlen >= PAGE_4K_SIZE)
ffff80000080d304:	48 81 7d c0 ff 0f 00 	cmp    QWORD PTR [rbp-0x40],0xfff
ffff80000080d30b:	00 
ffff80000080d30c:	7e 25                	jle    ffff80000080d333 <sys_open+0x13d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:50
    {
        kmfree(path);
ffff80000080d30e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080d312:	48 89 c7             	mov    rdi,rax
ffff80000080d315:	49 89 df             	mov    r15,rbx
ffff80000080d318:	48 b8 6f 09 ee ff ff 	movabs rax,0xffffffffffee096f
ffff80000080d31f:	ff ff ff 
ffff80000080d322:	48 01 d8             	add    rax,rbx
ffff80000080d325:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:51
        return -ENAMETOOLONG;
ffff80000080d327:	48 c7 c0 db ff ff ff 	mov    rax,0xffffffffffffffdb
ffff80000080d32e:	e9 eb 04 00 00       	jmp    ffff80000080d81e <sys_open+0x628>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:53
    }
    strcpy(path,filename);
ffff80000080d333:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
ffff80000080d33a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080d33e:	48 89 d6             	mov    rsi,rdx
ffff80000080d341:	48 89 c7             	mov    rdi,rax
ffff80000080d344:	49 89 df             	mov    r15,rbx
ffff80000080d347:	48 b8 de 1e ef ff ff 	movabs rax,0xffffffffffef1ede
ffff80000080d34e:	ff ff ff 
ffff80000080d351:	48 01 d8             	add    rax,rbx
ffff80000080d354:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:55

    dentry = path_walk(path,0);
ffff80000080d356:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080d35a:	be 00 00 00 00       	mov    esi,0x0
ffff80000080d35f:	48 89 c7             	mov    rdi,rax
ffff80000080d362:	49 89 df             	mov    r15,rbx
ffff80000080d365:	48 b8 b7 9b ee ff ff 	movabs rax,0xffffffffffee9bb7
ffff80000080d36c:	ff ff ff 
ffff80000080d36f:	48 01 d8             	add    rax,rbx
ffff80000080d372:	ff d0                	call   rax
ffff80000080d374:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:57

    if(dentry == NULL){
ffff80000080d378:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
ffff80000080d37d:	0f 85 37 02 00 00    	jne    ffff80000080d5ba <sys_open+0x3c4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:63
        if(!flags&O_CREAT)
            return -ENOENT;
        //创建文件
        //TODO 创建文件改为更正规的方法
        //找到上一级目录
        char* p=path+strlen(path)-1;
ffff80000080d383:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080d387:	48 89 c7             	mov    rdi,rax
ffff80000080d38a:	49 89 df             	mov    r15,rbx
ffff80000080d38d:	48 b8 ab 21 ef ff ff 	movabs rax,0xffffffffffef21ab
ffff80000080d394:	ff ff ff 
ffff80000080d397:	48 01 d8             	add    rax,rbx
ffff80000080d39a:	ff d0                	call   rax
ffff80000080d39c:	48 98                	cdqe   
ffff80000080d39e:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff80000080d3a2:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080d3a6:	48 01 d0             	add    rax,rdx
ffff80000080d3a9:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:64
        for(;*p!='/'&&p>path;p--);
ffff80000080d3ad:	eb 05                	jmp    ffff80000080d3b4 <sys_open+0x1be>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:64 (discriminator 3)
ffff80000080d3af:	48 83 6d d0 01       	sub    QWORD PTR [rbp-0x30],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:64 (discriminator 1)
ffff80000080d3b4:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080d3b8:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080d3bb:	3c 2f                	cmp    al,0x2f
ffff80000080d3bd:	74 0a                	je     ffff80000080d3c9 <sys_open+0x1d3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:64 (discriminator 2)
ffff80000080d3bf:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080d3c3:	48 3b 45 c8          	cmp    rax,QWORD PTR [rbp-0x38]
ffff80000080d3c7:	77 e6                	ja     ffff80000080d3af <sys_open+0x1b9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:65
        *p='\0';
ffff80000080d3c9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080d3cd:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:66
        struct dir_entry *parent= path_walk(path,O_DIRECTORY);
ffff80000080d3d0:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080d3d4:	be 00 40 00 00       	mov    esi,0x4000
ffff80000080d3d9:	48 89 c7             	mov    rdi,rax
ffff80000080d3dc:	49 89 df             	mov    r15,rbx
ffff80000080d3df:	48 b8 b7 9b ee ff ff 	movabs rax,0xffffffffffee9bb7
ffff80000080d3e6:	ff ff ff 
ffff80000080d3e9:	48 01 d8             	add    rax,rbx
ffff80000080d3ec:	ff d0                	call   rax
ffff80000080d3ee:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:67
        if(parent==NULL)
ffff80000080d3f2:	48 83 7d a8 00       	cmp    QWORD PTR [rbp-0x58],0x0
ffff80000080d3f7:	75 0c                	jne    ffff80000080d405 <sys_open+0x20f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:68
            return -ENOENT;//上级目录也不在
ffff80000080d3f9:	48 c7 c0 d3 ff ff ff 	mov    rax,0xffffffffffffffd3
ffff80000080d400:	e9 19 04 00 00       	jmp    ffff80000080d81e <sys_open+0x628>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:70
        //创建新的文件
        dentry=(struct dir_entry*) kmalloc(0,sizeof(struct dir_entry));
ffff80000080d405:	be 68 00 00 00       	mov    esi,0x68
ffff80000080d40a:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080d40f:	49 89 df             	mov    r15,rbx
ffff80000080d412:	48 b8 ce 07 ee ff ff 	movabs rax,0xffffffffffee07ce
ffff80000080d419:	ff ff ff 
ffff80000080d41c:	48 01 d8             	add    rax,rbx
ffff80000080d41f:	ff d0                	call   rax
ffff80000080d421:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:71
        list_init(&dentry->subdirs_list);
ffff80000080d425:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d429:	48 83 c0 28          	add    rax,0x28
ffff80000080d42d:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff80000080d434:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080d43b:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000080d442:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080d449:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000080d450:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000080d451:	90                   	nop
sys_open():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:72
        list_init(&dentry->child_node);
ffff80000080d452:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d456:	48 83 c0 10          	add    rax,0x10
ffff80000080d45a:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff80000080d461:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff80000080d468:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000080d46f:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff80000080d476:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000080d47d:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000080d47e:	90                   	nop
sys_open():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:73
        dentry->child_node.data=dentry;
ffff80000080d47f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d483:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080d487:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:74
        list_add(&parent->subdirs_list,&dentry->child_node);
ffff80000080d48b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d48f:	48 83 c0 10          	add    rax,0x10
ffff80000080d493:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff80000080d497:	48 83 c2 28          	add    rdx,0x28
ffff80000080d49b:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
ffff80000080d49f:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:33
    struct List* p=entry;
ffff80000080d4a3:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080d4a7:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:34
    for(;p->next&&p->next!=p;p=p->next){
ffff80000080d4ab:	eb 21                	jmp    ffff80000080d4ce <sys_open+0x2d8>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:35
        if(p->data==new->data)
ffff80000080d4ad:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080d4b1:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff80000080d4b5:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080d4b9:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080d4bd:	48 39 c2             	cmp    rdx,rax
ffff80000080d4c0:	74 7c                	je     ffff80000080d53e <sys_open+0x348>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:34
    for(;p->next&&p->next!=p;p=p->next){
ffff80000080d4c2:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080d4c6:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080d4ca:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
ffff80000080d4ce:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080d4d2:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080d4d6:	48 85 c0             	test   rax,rax
ffff80000080d4d9:	74 0e                	je     ffff80000080d4e9 <sys_open+0x2f3>
ffff80000080d4db:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080d4df:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080d4e3:	48 39 45 90          	cmp    QWORD PTR [rbp-0x70],rax
ffff80000080d4e7:	75 c4                	jne    ffff80000080d4ad <sys_open+0x2b7>
ffff80000080d4e9:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080d4ed:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
ffff80000080d4f1:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080d4f5:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff80000080d4f9:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080d4fd:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080d501:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080d505:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff80000080d509:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080d50d:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
ffff80000080d511:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff80000080d514:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080d518:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080d51c:	48 85 c0             	test   rax,rax
ffff80000080d51f:	74 0f                	je     ffff80000080d530 <sys_open+0x33a>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff80000080d521:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080d525:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080d529:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
ffff80000080d52d:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:29
    entry->next = new;
ffff80000080d530:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080d534:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
ffff80000080d538:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff80000080d53c:	eb 01                	jmp    ffff80000080d53f <sys_open+0x349>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:36
            return;
ffff80000080d53e:	90                   	nop
sys_open():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:75
        dentry->parent=parent;
ffff80000080d53f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d543:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff80000080d547:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:76
        dentry->dir_inode=dentry+1;//放在后面
ffff80000080d54b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d54f:	48 8d 50 68          	lea    rdx,[rax+0x68]
ffff80000080d553:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d557:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:77
        dentry->dir_inode->file_size=0;
ffff80000080d55b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d55f:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080d563:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:79
        //继承操作方法
        dentry->dir_inode->f_ops=parent->dir_inode->f_ops;
ffff80000080d56a:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080d56e:	48 8b 50 40          	mov    rdx,QWORD PTR [rax+0x40]
ffff80000080d572:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d576:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080d57a:	48 8b 52 28          	mov    rdx,QWORD PTR [rdx+0x28]
ffff80000080d57e:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:80
        dentry->dir_inode->inode_ops=parent->dir_inode->inode_ops;
ffff80000080d582:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080d586:	48 8b 50 40          	mov    rdx,QWORD PTR [rax+0x40]
ffff80000080d58a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d58e:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080d592:	48 8b 52 30          	mov    rdx,QWORD PTR [rdx+0x30]
ffff80000080d596:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:81
        dentry->dir_ops=parent->dir_ops;
ffff80000080d59a:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080d59e:	48 8b 50 60          	mov    rdx,QWORD PTR [rax+0x60]
ffff80000080d5a2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d5a6:	48 89 50 60          	mov    QWORD PTR [rax+0x60],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:83
        //这样的创建文件只能创建普通文件，设备文件要通过devman创建
        dentry->dir_inode->attribute=FS_ATTR_FILE;
ffff80000080d5aa:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d5ae:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080d5b2:	48 c7 40 10 01 00 00 	mov    QWORD PTR [rax+0x10],0x1
ffff80000080d5b9:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:85
    }
    dentry->link++;//这样哪怕长时间不path walk，也不会被释放
ffff80000080d5ba:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d5be:	0f b6 40 50          	movzx  eax,BYTE PTR [rax+0x50]
ffff80000080d5c2:	83 c0 01             	add    eax,0x1
ffff80000080d5c5:	89 c2                	mov    edx,eax
ffff80000080d5c7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d5cb:	88 50 50             	mov    BYTE PTR [rax+0x50],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:88
    // kmfree(path);

    if((flags & O_DIRECTORY) && (dentry->dir_inode->attribute != FS_ATTR_DIR))
ffff80000080d5ce:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
ffff80000080d5d4:	25 00 40 00 00       	and    eax,0x4000
ffff80000080d5d9:	85 c0                	test   eax,eax
ffff80000080d5db:	74 1e                	je     ffff80000080d5fb <sys_open+0x405>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:88 (discriminator 1)
ffff80000080d5dd:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d5e1:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080d5e5:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080d5e9:	48 83 f8 02          	cmp    rax,0x2
ffff80000080d5ed:	74 0c                	je     ffff80000080d5fb <sys_open+0x405>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:89
        return -ENOTDIR;
ffff80000080d5ef:	48 c7 c0 c7 ff ff ff 	mov    rax,0xffffffffffffffc7
ffff80000080d5f6:	e9 23 02 00 00       	jmp    ffff80000080d81e <sys_open+0x628>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:90
    if(!(flags & O_DIRECTORY) && (dentry->dir_inode->attribute == FS_ATTR_DIR))
ffff80000080d5fb:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
ffff80000080d601:	25 00 40 00 00       	and    eax,0x4000
ffff80000080d606:	85 c0                	test   eax,eax
ffff80000080d608:	75 1e                	jne    ffff80000080d628 <sys_open+0x432>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:90 (discriminator 1)
ffff80000080d60a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d60e:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080d612:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080d616:	48 83 f8 02          	cmp    rax,0x2
ffff80000080d61a:	75 0c                	jne    ffff80000080d628 <sys_open+0x432>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:91
        return -EISDIR;
ffff80000080d61c:	48 c7 c0 e1 ff ff ff 	mov    rax,0xffffffffffffffe1
ffff80000080d623:	e9 f6 01 00 00       	jmp    ffff80000080d81e <sys_open+0x628>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:93

    filp = (struct file *) kmalloc(0,sizeof(struct file));
ffff80000080d628:	be 28 00 00 00       	mov    esi,0x28
ffff80000080d62d:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080d632:	49 89 df             	mov    r15,rbx
ffff80000080d635:	48 b8 ce 07 ee ff ff 	movabs rax,0xffffffffffee07ce
ffff80000080d63c:	ff ff ff 
ffff80000080d63f:	48 01 d8             	add    rax,rbx
ffff80000080d642:	ff d0                	call   rax
ffff80000080d644:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:94
    memset(filp,0,sizeof(struct file));
ffff80000080d648:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080d64c:	ba 28 00 00 00       	mov    edx,0x28
ffff80000080d651:	be 00 00 00 00       	mov    esi,0x0
ffff80000080d656:	48 89 c7             	mov    rdi,rax
ffff80000080d659:	49 89 df             	mov    r15,rbx
ffff80000080d65c:	48 b8 89 1e ef ff ff 	movabs rax,0xffffffffffef1e89
ffff80000080d663:	ff ff ff 
ffff80000080d666:	48 01 d8             	add    rax,rbx
ffff80000080d669:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:95
    filp->dentry = dentry;
ffff80000080d66b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080d66f:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080d673:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:96
    filp->mode = flags;
ffff80000080d677:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
ffff80000080d67d:	48 63 d0             	movsxd rdx,eax
ffff80000080d680:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080d684:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:98

    if(dentry->dir_inode->attribute & FS_ATTR_DEVICE){
ffff80000080d688:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d68c:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080d690:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080d694:	83 e0 04             	and    eax,0x4
ffff80000080d697:	48 85 c0             	test   rax,rax
ffff80000080d69a:	74 18                	je     ffff80000080d6b4 <sys_open+0x4be>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:100
        extern struct file_operations devfs_fops;
        filp->f_ops = &devfs_fops;	//////	find device file operation function
ffff80000080d69c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080d6a0:	48 ba 78 fd ff ff ff 	movabs rdx,0xfffffffffffffd78
ffff80000080d6a7:	ff ff ff 
ffff80000080d6aa:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080d6ae:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
ffff80000080d6b2:	eb 14                	jmp    ffff80000080d6c8 <sys_open+0x4d2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:103
    }
    else
        filp->f_ops = dentry->dir_inode->f_ops;
ffff80000080d6b4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d6b8:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080d6bc:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
ffff80000080d6c0:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080d6c4:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:104
    if(filp->f_ops && filp->f_ops->open)
ffff80000080d6c8:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080d6cc:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080d6d0:	48 85 c0             	test   rax,rax
ffff80000080d6d3:	74 33                	je     ffff80000080d708 <sys_open+0x512>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:104 (discriminator 1)
ffff80000080d6d5:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080d6d9:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080d6dd:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d6e0:	48 85 c0             	test   rax,rax
ffff80000080d6e3:	74 23                	je     ffff80000080d708 <sys_open+0x512>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:105
        error = filp->f_ops->open(dentry->dir_inode,filp);
ffff80000080d6e5:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080d6e9:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080d6ed:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080d6f0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080d6f4:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080d6f8:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000080d6fc:	48 89 d6             	mov    rsi,rdx
ffff80000080d6ff:	48 89 c7             	mov    rdi,rax
ffff80000080d702:	ff d1                	call   rcx
ffff80000080d704:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:106
    if(error != 1)
ffff80000080d708:	48 83 7d e8 01       	cmp    QWORD PTR [rbp-0x18],0x1
ffff80000080d70d:	74 25                	je     ffff80000080d734 <sys_open+0x53e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:108
    {
        kmfree(filp);
ffff80000080d70f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080d713:	48 89 c7             	mov    rdi,rax
ffff80000080d716:	49 89 df             	mov    r15,rbx
ffff80000080d719:	48 b8 6f 09 ee ff ff 	movabs rax,0xffffffffffee096f
ffff80000080d720:	ff ff ff 
ffff80000080d723:	48 01 d8             	add    rax,rbx
ffff80000080d726:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:109
        return -EFAULT;
ffff80000080d728:	48 c7 c0 eb ff ff ff 	mov    rax,0xffffffffffffffeb
ffff80000080d72f:	e9 ea 00 00 00       	jmp    ffff80000080d81e <sys_open+0x628>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:112
    }

    if(filp->mode & O_TRUNC)
ffff80000080d734:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080d738:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080d73c:	25 00 02 00 00       	and    eax,0x200
ffff80000080d741:	48 85 c0             	test   rax,rax
ffff80000080d744:	74 13                	je     ffff80000080d759 <sys_open+0x563>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:114
    {
        filp->dentry->dir_inode->file_size = 0;
ffff80000080d746:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080d74a:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080d74e:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080d752:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:116
    }
    if(filp->mode & O_APPEND)
ffff80000080d759:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080d75d:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080d761:	25 00 04 00 00       	and    eax,0x400
ffff80000080d766:	48 85 c0             	test   rax,rax
ffff80000080d769:	74 19                	je     ffff80000080d784 <sys_open+0x58e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:118
    {
        filp->position = filp->dentry->dir_inode->file_size;
ffff80000080d76b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080d76f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080d773:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080d777:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d77a:	48 89 c2             	mov    rdx,rax
ffff80000080d77d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080d781:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:121
    }

    f = current->openf;
ffff80000080d784:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080d78b:	ff ff ff 
ffff80000080d78e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d792:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d795:	48 05 f8 00 00 00    	add    rax,0xf8
ffff80000080d79b:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:122
    for(i = 0;i < MAX_TASKS;i++)
ffff80000080d79f:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [rbp-0x28],0x0
ffff80000080d7a6:	eb 28                	jmp    ffff80000080d7d0 <sys_open+0x5da>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:123
        if(f[i] == NULL)
ffff80000080d7a8:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080d7ab:	48 98                	cdqe   
ffff80000080d7ad:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080d7b4:	00 
ffff80000080d7b5:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080d7b9:	48 01 d0             	add    rax,rdx
ffff80000080d7bc:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d7bf:	48 85 c0             	test   rax,rax
ffff80000080d7c2:	75 08                	jne    ffff80000080d7cc <sys_open+0x5d6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:125
        {
            fd = i;
ffff80000080d7c4:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080d7c7:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:126
            break;
ffff80000080d7ca:	eb 0a                	jmp    ffff80000080d7d6 <sys_open+0x5e0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:122 (discriminator 2)
    for(i = 0;i < MAX_TASKS;i++)
ffff80000080d7cc:	83 45 d8 01          	add    DWORD PTR [rbp-0x28],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:122 (discriminator 1)
ffff80000080d7d0:	83 7d d8 1f          	cmp    DWORD PTR [rbp-0x28],0x1f
ffff80000080d7d4:	7e d2                	jle    ffff80000080d7a8 <sys_open+0x5b2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:128
        }
    if(i == MAX_TASKS)
ffff80000080d7d6:	83 7d d8 20          	cmp    DWORD PTR [rbp-0x28],0x20
ffff80000080d7da:	75 22                	jne    ffff80000080d7fe <sys_open+0x608>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:130
    {
        kmfree(filp);
ffff80000080d7dc:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080d7e0:	48 89 c7             	mov    rdi,rax
ffff80000080d7e3:	49 89 df             	mov    r15,rbx
ffff80000080d7e6:	48 b8 6f 09 ee ff ff 	movabs rax,0xffffffffffee096f
ffff80000080d7ed:	ff ff ff 
ffff80000080d7f0:	48 01 d8             	add    rax,rbx
ffff80000080d7f3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:132
        //// reclaim struct index_node & struct dir_entry
        return -EMFILE;
ffff80000080d7f5:	48 c7 c0 df ff ff ff 	mov    rax,0xffffffffffffffdf
ffff80000080d7fc:	eb 20                	jmp    ffff80000080d81e <sys_open+0x628>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:134
    }
    f[fd] = filp;
ffff80000080d7fe:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080d801:	48 98                	cdqe   
ffff80000080d803:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffff80000080d80a:	00 
ffff80000080d80b:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080d80f:	48 01 c2             	add    rdx,rax
ffff80000080d812:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080d816:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:136

    return fd;
ffff80000080d819:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080d81c:	48 98                	cdqe   
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:137
}
ffff80000080d81e:	48 81 c4 90 00 00 00 	add    rsp,0x90
ffff80000080d825:	5b                   	pop    rbx
ffff80000080d826:	41 5f                	pop    r15
ffff80000080d828:	5d                   	pop    rbp
ffff80000080d829:	c3                   	ret    

ffff80000080d82a <sys_close>:
sys_close():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:140

unsigned long sys_close(int fd)
{
ffff80000080d82a:	f3 0f 1e fa          	endbr64 
ffff80000080d82e:	55                   	push   rbp
ffff80000080d82f:	48 89 e5             	mov    rbp,rsp
ffff80000080d832:	41 57                	push   r15
ffff80000080d834:	53                   	push   rbx
ffff80000080d835:	48 83 ec 20          	sub    rsp,0x20
ffff80000080d839:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080d839 <sys_close+0xf>
ffff80000080d840:	49 bb bf 53 11 00 00 	movabs r11,0x1153bf
ffff80000080d847:	00 00 00 
ffff80000080d84a:	4c 01 db             	add    rbx,r11
ffff80000080d84d:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:141
    struct file * filp = NULL;
ffff80000080d850:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000080d857:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:144

//	printf("sys_close:%d\n",fd);
    if(fd < 0 || fd >= MAX_TASKS)
ffff80000080d858:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
ffff80000080d85c:	78 06                	js     ffff80000080d864 <sys_close+0x3a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:144 (discriminator 1)
ffff80000080d85e:	83 7d dc 1f          	cmp    DWORD PTR [rbp-0x24],0x1f
ffff80000080d862:	7e 0c                	jle    ffff80000080d870 <sys_close+0x46>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:145
        return -EBADF;
ffff80000080d864:	48 c7 c0 f8 ff ff ff 	mov    rax,0xfffffffffffffff8
ffff80000080d86b:	e9 ba 00 00 00       	jmp    ffff80000080d92a <sys_close+0x100>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:147

    filp = current->openf[fd];
ffff80000080d870:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080d877:	ff ff ff 
ffff80000080d87a:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d87e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d881:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080d884:	48 63 d2             	movsxd rdx,edx
ffff80000080d887:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080d88b:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff80000080d890:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:148
    if(filp->f_ops && filp->f_ops->close)
ffff80000080d894:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d898:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080d89c:	48 85 c0             	test   rax,rax
ffff80000080d89f:	74 35                	je     ffff80000080d8d6 <sys_close+0xac>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:148 (discriminator 1)
ffff80000080d8a1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d8a5:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080d8a9:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080d8ad:	48 85 c0             	test   rax,rax
ffff80000080d8b0:	74 24                	je     ffff80000080d8d6 <sys_close+0xac>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:149
        filp->f_ops->close(filp->dentry->dir_inode,filp);
ffff80000080d8b2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d8b6:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080d8ba:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
ffff80000080d8be:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d8c2:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080d8c6:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080d8ca:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080d8ce:	48 89 d6             	mov    rsi,rdx
ffff80000080d8d1:	48 89 c7             	mov    rdi,rax
ffff80000080d8d4:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:150
    filp->dentry->link--;
ffff80000080d8d6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d8da:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080d8de:	0f b6 50 50          	movzx  edx,BYTE PTR [rax+0x50]
ffff80000080d8e2:	83 ea 01             	sub    edx,0x1
ffff80000080d8e5:	88 50 50             	mov    BYTE PTR [rax+0x50],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:151
    kmfree(filp);
ffff80000080d8e8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080d8ec:	48 89 c7             	mov    rdi,rax
ffff80000080d8ef:	49 89 df             	mov    r15,rbx
ffff80000080d8f2:	48 b8 6f 09 ee ff ff 	movabs rax,0xffffffffffee096f
ffff80000080d8f9:	ff ff ff 
ffff80000080d8fc:	48 01 d8             	add    rax,rbx
ffff80000080d8ff:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:152
    current->openf[fd] = NULL;
ffff80000080d901:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080d908:	ff ff ff 
ffff80000080d90b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080d90f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d912:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080d915:	48 63 d2             	movsxd rdx,edx
ffff80000080d918:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080d91c:	48 c7 44 d0 08 00 00 	mov    QWORD PTR [rax+rdx*8+0x8],0x0
ffff80000080d923:	00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:154

    return 0;
ffff80000080d925:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:155
}
ffff80000080d92a:	48 83 c4 20          	add    rsp,0x20
ffff80000080d92e:	5b                   	pop    rbx
ffff80000080d92f:	41 5f                	pop    r15
ffff80000080d931:	5d                   	pop    rbp
ffff80000080d932:	c3                   	ret    

ffff80000080d933 <sys_read>:
sys_read():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:158

unsigned long sys_read(int fd,void * buf,long count)
{
ffff80000080d933:	f3 0f 1e fa          	endbr64 
ffff80000080d937:	55                   	push   rbp
ffff80000080d938:	48 89 e5             	mov    rbp,rsp
ffff80000080d93b:	48 83 ec 30          	sub    rsp,0x30
ffff80000080d93f:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080d93f <sys_read+0xc>
ffff80000080d946:	49 bb b9 52 11 00 00 	movabs r11,0x1152b9
ffff80000080d94d:	00 00 00 
ffff80000080d950:	4c 01 d8             	add    rax,r11
ffff80000080d953:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff80000080d956:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080d95a:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:159
    struct file * filp = NULL;
ffff80000080d95e:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffff80000080d965:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:160
    unsigned long ret = 0;
ffff80000080d966:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080d96d:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:163

//	printf("sys_read:%d\n",fd);
    if(fd < 0 || fd >= MAX_TASKS)
ffff80000080d96e:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff80000080d972:	78 06                	js     ffff80000080d97a <sys_read+0x47>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:163 (discriminator 1)
ffff80000080d974:	83 7d ec 1f          	cmp    DWORD PTR [rbp-0x14],0x1f
ffff80000080d978:	7e 09                	jle    ffff80000080d983 <sys_read+0x50>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:164
        return -EBADF;
ffff80000080d97a:	48 c7 c0 f8 ff ff ff 	mov    rax,0xfffffffffffffff8
ffff80000080d981:	eb 7c                	jmp    ffff80000080d9ff <sys_read+0xcc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:165
    if(count < 0)
ffff80000080d983:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff80000080d988:	79 09                	jns    ffff80000080d993 <sys_read+0x60>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:166
        return -EINVAL;
ffff80000080d98a:	48 c7 c0 e4 ff ff ff 	mov    rax,0xffffffffffffffe4
ffff80000080d991:	eb 6c                	jmp    ffff80000080d9ff <sys_read+0xcc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:168

    filp = current->openf[fd];
ffff80000080d993:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff80000080d99a:	ff ff ff 
ffff80000080d99d:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080d9a1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080d9a4:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080d9a7:	48 63 d2             	movsxd rdx,edx
ffff80000080d9aa:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080d9ae:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff80000080d9b3:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:169
    if(filp->f_ops && filp->f_ops->read)
ffff80000080d9b7:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080d9bb:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080d9bf:	48 85 c0             	test   rax,rax
ffff80000080d9c2:	74 37                	je     ffff80000080d9fb <sys_read+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:169 (discriminator 1)
ffff80000080d9c4:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080d9c8:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080d9cc:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080d9d0:	48 85 c0             	test   rax,rax
ffff80000080d9d3:	74 26                	je     ffff80000080d9fb <sys_read+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:170
        ret = filp->f_ops->read(filp,buf,count,&filp->position);
ffff80000080d9d5:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080d9d9:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080d9dd:	4c 8b 40 10          	mov    r8,QWORD PTR [rax+0x10]
ffff80000080d9e1:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff80000080d9e5:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080d9e9:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff80000080d9ed:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080d9f1:	48 89 c7             	mov    rdi,rax
ffff80000080d9f4:	41 ff d0             	call   r8
ffff80000080d9f7:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:171
    return ret;
ffff80000080d9fb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:172
}
ffff80000080d9ff:	c9                   	leave  
ffff80000080da00:	c3                   	ret    

ffff80000080da01 <sys_write>:
sys_write():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:175

unsigned long sys_write(int fd,void * buf,long count)
{
ffff80000080da01:	f3 0f 1e fa          	endbr64 
ffff80000080da05:	55                   	push   rbp
ffff80000080da06:	48 89 e5             	mov    rbp,rsp
ffff80000080da09:	48 83 ec 30          	sub    rsp,0x30
ffff80000080da0d:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080da0d <sys_write+0xc>
ffff80000080da14:	49 bb eb 51 11 00 00 	movabs r11,0x1151eb
ffff80000080da1b:	00 00 00 
ffff80000080da1e:	4c 01 d8             	add    rax,r11
ffff80000080da21:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff80000080da24:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080da28:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:176
    struct file * filp = NULL;
ffff80000080da2c:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffff80000080da33:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:177
    unsigned long ret = 0;
ffff80000080da34:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080da3b:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:180

//	printf("sys_write:%d\n",fd);
    if(fd < 0 || fd >= MAX_TASKS)
ffff80000080da3c:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff80000080da40:	78 06                	js     ffff80000080da48 <sys_write+0x47>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:180 (discriminator 1)
ffff80000080da42:	83 7d ec 1f          	cmp    DWORD PTR [rbp-0x14],0x1f
ffff80000080da46:	7e 09                	jle    ffff80000080da51 <sys_write+0x50>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:181
        return -EBADF;
ffff80000080da48:	48 c7 c0 f8 ff ff ff 	mov    rax,0xfffffffffffffff8
ffff80000080da4f:	eb 7c                	jmp    ffff80000080dacd <sys_write+0xcc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:182
    if(count < 0)
ffff80000080da51:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff80000080da56:	79 09                	jns    ffff80000080da61 <sys_write+0x60>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:183
        return -EINVAL;
ffff80000080da58:	48 c7 c0 e4 ff ff ff 	mov    rax,0xffffffffffffffe4
ffff80000080da5f:	eb 6c                	jmp    ffff80000080dacd <sys_write+0xcc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:185

    filp = current->openf[fd];
ffff80000080da61:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff80000080da68:	ff ff ff 
ffff80000080da6b:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080da6f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080da72:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080da75:	48 63 d2             	movsxd rdx,edx
ffff80000080da78:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080da7c:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff80000080da81:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:186
    if(filp->f_ops && filp->f_ops->write)
ffff80000080da85:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080da89:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080da8d:	48 85 c0             	test   rax,rax
ffff80000080da90:	74 37                	je     ffff80000080dac9 <sys_write+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:186 (discriminator 1)
ffff80000080da92:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080da96:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080da9a:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080da9e:	48 85 c0             	test   rax,rax
ffff80000080daa1:	74 26                	je     ffff80000080dac9 <sys_write+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:187
        ret = filp->f_ops->write(filp,buf,count,&filp->position);
ffff80000080daa3:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080daa7:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080daab:	4c 8b 40 18          	mov    r8,QWORD PTR [rax+0x18]
ffff80000080daaf:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff80000080dab3:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080dab7:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff80000080dabb:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080dabf:	48 89 c7             	mov    rdi,rax
ffff80000080dac2:	41 ff d0             	call   r8
ffff80000080dac5:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:188
    return ret;
ffff80000080dac9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:189
}
ffff80000080dacd:	c9                   	leave  
ffff80000080dace:	c3                   	ret    

ffff80000080dacf <sys_lseek>:
sys_lseek():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:193


unsigned long sys_lseek(int filds,long offset,int whence)
{
ffff80000080dacf:	f3 0f 1e fa          	endbr64 
ffff80000080dad3:	55                   	push   rbp
ffff80000080dad4:	48 89 e5             	mov    rbp,rsp
ffff80000080dad7:	48 83 ec 20          	sub    rsp,0x20
ffff80000080dadb:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080dadb <sys_lseek+0xc>
ffff80000080dae2:	49 bb 1d 51 11 00 00 	movabs r11,0x11511d
ffff80000080dae9:	00 00 00 
ffff80000080daec:	4c 01 d8             	add    rax,r11
ffff80000080daef:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff80000080daf2:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080daf6:	89 55 e8             	mov    DWORD PTR [rbp-0x18],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:194
    struct file * filp = NULL;
ffff80000080daf9:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffff80000080db00:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:195
    unsigned long ret = 0;
ffff80000080db01:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080db08:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:198

//	printf("sys_lseek:%d\n",filds);
    if(filds < 0 || filds >= MAX_TASKS)
ffff80000080db09:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff80000080db0d:	78 06                	js     ffff80000080db15 <sys_lseek+0x46>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:198 (discriminator 1)
ffff80000080db0f:	83 7d ec 1f          	cmp    DWORD PTR [rbp-0x14],0x1f
ffff80000080db13:	7e 0c                	jle    ffff80000080db21 <sys_lseek+0x52>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:199
        return -EBADF;
ffff80000080db15:	48 c7 c0 f8 ff ff ff 	mov    rax,0xfffffffffffffff8
ffff80000080db1c:	e9 82 00 00 00       	jmp    ffff80000080dba3 <sys_lseek+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:200
    if(whence < 0 || whence >= SEEK_MAX)
ffff80000080db21:	83 7d e8 00          	cmp    DWORD PTR [rbp-0x18],0x0
ffff80000080db25:	78 06                	js     ffff80000080db2d <sys_lseek+0x5e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:200 (discriminator 1)
ffff80000080db27:	83 7d e8 02          	cmp    DWORD PTR [rbp-0x18],0x2
ffff80000080db2b:	7e 09                	jle    ffff80000080db36 <sys_lseek+0x67>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:201
        return -EINVAL;
ffff80000080db2d:	48 c7 c0 e4 ff ff ff 	mov    rax,0xffffffffffffffe4
ffff80000080db34:	eb 6d                	jmp    ffff80000080dba3 <sys_lseek+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:203

    filp = current->openf[filds];
ffff80000080db36:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff80000080db3d:	ff ff ff 
ffff80000080db40:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080db44:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080db47:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080db4a:	48 63 d2             	movsxd rdx,edx
ffff80000080db4d:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080db51:	48 8b 44 d0 08       	mov    rax,QWORD PTR [rax+rdx*8+0x8]
ffff80000080db56:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:204
    if(filp->f_ops && filp->f_ops->lseek)
ffff80000080db5a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080db5e:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080db62:	48 85 c0             	test   rax,rax
ffff80000080db65:	74 38                	je     ffff80000080db9f <sys_lseek+0xd0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:204 (discriminator 1)
ffff80000080db67:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080db6b:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080db6f:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000080db73:	48 85 c0             	test   rax,rax
ffff80000080db76:	74 27                	je     ffff80000080db9f <sys_lseek+0xd0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:205
        ret = filp->f_ops->lseek(filp,offset,whence);
ffff80000080db78:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080db7c:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000080db80:	4c 8b 40 20          	mov    r8,QWORD PTR [rax+0x20]
ffff80000080db84:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff80000080db87:	48 63 d0             	movsxd rdx,eax
ffff80000080db8a:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
ffff80000080db8e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080db92:	48 89 ce             	mov    rsi,rcx
ffff80000080db95:	48 89 c7             	mov    rdi,rax
ffff80000080db98:	41 ff d0             	call   r8
ffff80000080db9b:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:206
    return ret;
ffff80000080db9f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:207
}
ffff80000080dba3:	c9                   	leave  
ffff80000080dba4:	c3                   	ret    

ffff80000080dba5 <sys_vfork>:
sys_vfork():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:217
//    printf("sys_fork\n");
//    //return do_fork(regs,0,regs->rsp,0);
//}

unsigned long sys_vfork()
{
ffff80000080dba5:	f3 0f 1e fa          	endbr64 
ffff80000080dba9:	55                   	push   rbp
ffff80000080dbaa:	48 89 e5             	mov    rbp,rsp
ffff80000080dbad:	41 57                	push   r15
ffff80000080dbaf:	53                   	push   rbx
ffff80000080dbb0:	48 83 ec 10          	sub    rsp,0x10
ffff80000080dbb4:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080dbb4 <sys_vfork+0xf>
ffff80000080dbbb:	49 bb 44 50 11 00 00 	movabs r11,0x115044
ffff80000080dbc2:	00 00 00 
ffff80000080dbc5:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:218
    regs_t *regs = (regs_t *)current->tss.rsp0 -1;
ffff80000080dbc8:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080dbcf:	ff ff ff 
ffff80000080dbd2:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080dbd6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080dbd9:	48 8b 80 fc 01 00 00 	mov    rax,QWORD PTR [rax+0x1fc]
ffff80000080dbe0:	48 2d d0 00 00 00    	sub    rax,0xd0
ffff80000080dbe6:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:219
    printf("sys_vfork\n");
ffff80000080dbea:	48 b8 50 d5 ff ff ff 	movabs rax,0xffffffffffffd550
ffff80000080dbf1:	ff ff ff 
ffff80000080dbf4:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080dbf8:	48 89 c7             	mov    rdi,rax
ffff80000080dbfb:	49 89 df             	mov    r15,rbx
ffff80000080dbfe:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080dc03:	48 ba c9 ed ed ff ff 	movabs rdx,0xffffffffffededc9
ffff80000080dc0a:	ff ff ff 
ffff80000080dc0d:	48 01 da             	add    rdx,rbx
ffff80000080dc10:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:220
    return sys_fork();
ffff80000080dc12:	49 89 df             	mov    r15,rbx
ffff80000080dc15:	48 b8 7f 48 ee ff ff 	movabs rax,0xffffffffffee487f
ffff80000080dc1c:	ff ff ff 
ffff80000080dc1f:	48 01 d8             	add    rax,rbx
ffff80000080dc22:	ff d0                	call   rax
ffff80000080dc24:	48 98                	cdqe   
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:222
    //return do_fork(regs,CLONE_VM | CLONE_FS | CLONE_SIGNAL,regs->rsp,0);
}
ffff80000080dc26:	48 83 c4 10          	add    rsp,0x10
ffff80000080dc2a:	5b                   	pop    rbx
ffff80000080dc2b:	41 5f                	pop    r15
ffff80000080dc2d:	5d                   	pop    rbp
ffff80000080dc2e:	c3                   	ret    

ffff80000080dc2f <sys_wait>:
sys_wait():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:265

/*
	rusage reserved
*/

unsigned long sys_wait(pid_t pid, int *stat_loc, int options){
ffff80000080dc2f:	f3 0f 1e fa          	endbr64 
ffff80000080dc33:	55                   	push   rbp
ffff80000080dc34:	48 89 e5             	mov    rbp,rsp
ffff80000080dc37:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080dc37 <sys_wait+0x8>
ffff80000080dc3e:	49 bb c1 4f 11 00 00 	movabs r11,0x114fc1
ffff80000080dc45:	00 00 00 
ffff80000080dc48:	4c 01 d8             	add    rax,r11
ffff80000080dc4b:	89 7d bc             	mov    DWORD PTR [rbp-0x44],edi
ffff80000080dc4e:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
ffff80000080dc52:	89 55 b8             	mov    DWORD PTR [rbp-0x48],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:266
    struct process* waitee=NULL;
ffff80000080dc55:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080dc5c:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:268
    extern struct process task[];
    if(!current->child_procs)
ffff80000080dc5d:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff80000080dc64:	ff ff ff 
ffff80000080dc67:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080dc6b:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080dc6e:	48 8b 92 54 03 00 00 	mov    rdx,QWORD PTR [rdx+0x354]
ffff80000080dc75:	48 85 d2             	test   rdx,rdx
ffff80000080dc78:	75 0c                	jne    ffff80000080dc86 <sys_wait+0x57>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:269
        return -ECHILD;//没有子进程可以等
ffff80000080dc7a:	48 c7 c0 f4 ff ff ff 	mov    rax,0xfffffffffffffff4
ffff80000080dc81:	e9 11 02 00 00       	jmp    ffff80000080de97 <sys_wait+0x268>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:270
    if(pid==-1){
ffff80000080dc86:	83 7d bc ff          	cmp    DWORD PTR [rbp-0x44],0xffffffff
ffff80000080dc8a:	75 58                	jne    ffff80000080dce4 <sys_wait+0xb5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:273
        //任意一个子进程
        while (1) {
            for(struct List* l=current->child_procs;l;l=l->next) {
ffff80000080dc8c:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff80000080dc93:	ff ff ff 
ffff80000080dc96:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080dc9a:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080dc9d:	48 8b 92 54 03 00 00 	mov    rdx,QWORD PTR [rdx+0x354]
ffff80000080dca4:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
ffff80000080dca8:	eb 31                	jmp    ffff80000080dcdb <sys_wait+0xac>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:274
                struct process* p=l->data;
ffff80000080dcaa:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080dcae:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff80000080dcb2:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:275
                if(p->stat == TASK_ZOMBIE) {
ffff80000080dcb6:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000080dcba:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff80000080dcbd:	83 fa 04             	cmp    edx,0x4
ffff80000080dcc0:	75 0d                	jne    ffff80000080dccf <sys_wait+0xa0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:276
                    waitee=p;
ffff80000080dcc2:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000080dcc6:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:277
                    goto done;
ffff80000080dcca:	e9 68 01 00 00       	jmp    ffff80000080de37 <sys_wait+0x208>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:273 (discriminator 2)
            for(struct List* l=current->child_procs;l;l=l->next) {
ffff80000080dccf:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080dcd3:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
ffff80000080dcd7:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:273 (discriminator 1)
ffff80000080dcdb:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
ffff80000080dce0:	75 c8                	jne    ffff80000080dcaa <sys_wait+0x7b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:273
ffff80000080dce2:	eb a8                	jmp    ffff80000080dc8c <sys_wait+0x5d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:282
                }
            }
        }

    }else if(pid==0) {
ffff80000080dce4:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
ffff80000080dce8:	75 77                	jne    ffff80000080dd61 <sys_wait+0x132>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:285
        //等待任意一个和父进程同一个进程组的子进程
        while (1) {
            for(struct List* l=current->child_procs;l;l=l->next) {
ffff80000080dcea:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff80000080dcf1:	ff ff ff 
ffff80000080dcf4:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080dcf8:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080dcfb:	48 8b 92 54 03 00 00 	mov    rdx,QWORD PTR [rdx+0x354]
ffff80000080dd02:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080dd06:	eb 50                	jmp    ffff80000080dd58 <sys_wait+0x129>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:286
                struct process* p=l->data;
ffff80000080dd08:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080dd0c:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff80000080dd10:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:287
                if(p->gpid==current->gpid&& p->stat == TASK_ZOMBIE) {
ffff80000080dd14:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080dd18:	8b 4a 04             	mov    ecx,DWORD PTR [rdx+0x4]
ffff80000080dd1b:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff80000080dd22:	ff ff ff 
ffff80000080dd25:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080dd29:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080dd2c:	8b 52 04             	mov    edx,DWORD PTR [rdx+0x4]
ffff80000080dd2f:	39 d1                	cmp    ecx,edx
ffff80000080dd31:	75 19                	jne    ffff80000080dd4c <sys_wait+0x11d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:287 (discriminator 1)
ffff80000080dd33:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080dd37:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff80000080dd3a:	83 fa 04             	cmp    edx,0x4
ffff80000080dd3d:	75 0d                	jne    ffff80000080dd4c <sys_wait+0x11d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:288
                    waitee=p;
ffff80000080dd3f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080dd43:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:289
                    goto done;
ffff80000080dd47:	e9 eb 00 00 00       	jmp    ffff80000080de37 <sys_wait+0x208>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:285 (discriminator 2)
            for(struct List* l=current->child_procs;l;l=l->next) {
ffff80000080dd4c:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080dd50:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
ffff80000080dd54:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:285 (discriminator 1)
ffff80000080dd58:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080dd5d:	75 a9                	jne    ffff80000080dd08 <sys_wait+0xd9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:285
ffff80000080dd5f:	eb 89                	jmp    ffff80000080dcea <sys_wait+0xbb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:294
                }
            }
        }
    }else{
        if(pid<0)pid=-pid;
ffff80000080dd61:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
ffff80000080dd65:	79 03                	jns    ffff80000080dd6a <sys_wait+0x13b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:294 (discriminator 1)
ffff80000080dd67:	f7 5d bc             	neg    DWORD PTR [rbp-0x44]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:296
        //检查是不是本进程的子进程
        for(int i=0;i<MAX_TASKS;i++){
ffff80000080dd6a:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff80000080dd71:	eb 71                	jmp    ffff80000080dde4 <sys_wait+0x1b5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:297
            if(task[i].pid==pid){
ffff80000080dd73:	48 ba 60 fe ff ff ff 	movabs rdx,0xfffffffffffffe60
ffff80000080dd7a:	ff ff ff 
ffff80000080dd7d:	48 8b 34 10          	mov    rsi,QWORD PTR [rax+rdx*1]
ffff80000080dd81:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffff80000080dd84:	48 63 ca             	movsxd rcx,edx
ffff80000080dd87:	48 89 ca             	mov    rdx,rcx
ffff80000080dd8a:	48 01 d2             	add    rdx,rdx
ffff80000080dd8d:	48 01 ca             	add    rdx,rcx
ffff80000080dd90:	48 8d 0c d5 00 00 00 	lea    rcx,[rdx*8+0x0]
ffff80000080dd97:	00 
ffff80000080dd98:	48 01 ca             	add    rdx,rcx
ffff80000080dd9b:	48 c1 e2 05          	shl    rdx,0x5
ffff80000080dd9f:	48 01 f2             	add    rdx,rsi
ffff80000080dda2:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffff80000080dda4:	8b 55 bc             	mov    edx,DWORD PTR [rbp-0x44]
ffff80000080dda7:	39 d1                	cmp    ecx,edx
ffff80000080dda9:	75 35                	jne    ffff80000080dde0 <sys_wait+0x1b1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:298
                waitee=&task[i];
ffff80000080ddab:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffff80000080ddae:	48 63 ca             	movsxd rcx,edx
ffff80000080ddb1:	48 89 ca             	mov    rdx,rcx
ffff80000080ddb4:	48 01 d2             	add    rdx,rdx
ffff80000080ddb7:	48 01 ca             	add    rdx,rcx
ffff80000080ddba:	48 8d 0c d5 00 00 00 	lea    rcx,[rdx*8+0x0]
ffff80000080ddc1:	00 
ffff80000080ddc2:	48 01 ca             	add    rdx,rcx
ffff80000080ddc5:	48 c1 e2 05          	shl    rdx,0x5
ffff80000080ddc9:	48 b9 60 fe ff ff ff 	movabs rcx,0xfffffffffffffe60
ffff80000080ddd0:	ff ff ff 
ffff80000080ddd3:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080ddd7:	48 01 ca             	add    rdx,rcx
ffff80000080ddda:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:299
                break;
ffff80000080ddde:	eb 0a                	jmp    ffff80000080ddea <sys_wait+0x1bb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:296 (discriminator 2)
        for(int i=0;i<MAX_TASKS;i++){
ffff80000080dde0:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:296 (discriminator 1)
ffff80000080dde4:	83 7d e4 1f          	cmp    DWORD PTR [rbp-0x1c],0x1f
ffff80000080dde8:	7e 89                	jle    ffff80000080dd73 <sys_wait+0x144>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:302
            }
        }
        if(waitee==NULL||waitee->parent_pid!=current->pid)
ffff80000080ddea:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffff80000080ddef:	74 21                	je     ffff80000080de12 <sys_wait+0x1e3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:302 (discriminator 1)
ffff80000080ddf1:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080ddf5:	8b 92 bc 00 00 00    	mov    edx,DWORD PTR [rdx+0xbc]
ffff80000080ddfb:	48 b9 48 fe ff ff ff 	movabs rcx,0xfffffffffffffe48
ffff80000080de02:	ff ff ff 
ffff80000080de05:	48 8b 04 08          	mov    rax,QWORD PTR [rax+rcx*1]
ffff80000080de09:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080de0c:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080de0e:	39 c2                	cmp    edx,eax
ffff80000080de10:	74 09                	je     ffff80000080de1b <sys_wait+0x1ec>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:303
            return -ECHILD;//没有这个进程或者不是子进程
ffff80000080de12:	48 c7 c0 f4 ff ff ff 	mov    rax,0xfffffffffffffff4
ffff80000080de19:	eb 7c                	jmp    ffff80000080de97 <sys_wait+0x268>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:305
        //TODO 等待结束以及等待信号
        while (waitee->stat != TASK_ZOMBIE);
ffff80000080de1b:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:305 (discriminator 1)
ffff80000080de1c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080de20:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffff80000080de23:	83 f8 04             	cmp    eax,0x4
ffff80000080de26:	75 f4                	jne    ffff80000080de1c <sys_wait+0x1ed>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:306
        *stat_loc=waitee->exit_code;
ffff80000080de28:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080de2c:	8b 40 24             	mov    eax,DWORD PTR [rax+0x24]
ffff80000080de2f:	89 c2                	mov    edx,eax
ffff80000080de31:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080de35:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:310
    }
    done:
    //清除子进程
    waitee->stat=TASK_EMPTY;
ffff80000080de37:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080de3b:	c7 40 18 00 00 00 00 	mov    DWORD PTR [rax+0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:312
    //从链表中删除，不再是子进程
    list_drop(&waitee->node);
ffff80000080de42:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080de46:	48 05 3c 03 00 00    	add    rax,0x33c
ffff80000080de4c:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
list_drop():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:43
    if(entry->prev)
ffff80000080de50:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080de54:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080de57:	48 85 c0             	test   rax,rax
ffff80000080de5a:	74 13                	je     ffff80000080de6f <sys_wait+0x240>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:44
        entry->prev->next=entry->next;
ffff80000080de5c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080de60:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080de63:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080de67:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
ffff80000080de6b:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:45
    if(entry->next)
ffff80000080de6f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080de73:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080de77:	48 85 c0             	test   rax,rax
ffff80000080de7a:	74 12                	je     ffff80000080de8e <sys_wait+0x25f>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:46
        entry->next->prev=entry->prev;
ffff80000080de7c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080de80:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080de84:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080de88:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080de8b:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:47
}
ffff80000080de8e:	90                   	nop
sys_wait():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:314
    //TODO 被信号中断时返回-1
    return waitee->pid;
ffff80000080de8f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080de93:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080de95:	89 c0                	mov    eax,eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:315
}
ffff80000080de97:	5d                   	pop    rbp
ffff80000080de98:	c3                   	ret    

ffff80000080de99 <sys_wait4>:
sys_wait4():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:317
unsigned long sys_wait4(unsigned long pid,int *status,int options,void *rusage)
{
ffff80000080de99:	f3 0f 1e fa          	endbr64 
ffff80000080de9d:	55                   	push   rbp
ffff80000080de9e:	48 89 e5             	mov    rbp,rsp
ffff80000080dea1:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080dea1 <sys_wait4+0x8>
ffff80000080dea8:	49 bb 57 4d 11 00 00 	movabs r11,0x114d57
ffff80000080deaf:	00 00 00 
ffff80000080deb2:	4c 01 d8             	add    rax,r11
ffff80000080deb5:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080deb9:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080debd:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
ffff80000080dec0:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:353
//    copy_to_user(&child->exit_code,status,sizeof(long));
//    tsk->next = child->next;
//    exit_mm(child);
//    vmfree(child);
//    return retval;
}
ffff80000080dec4:	90                   	nop
ffff80000080dec5:	5d                   	pop    rbp
ffff80000080dec6:	c3                   	ret    

ffff80000080dec7 <sys_brk>:
sys_brk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:356

unsigned long sys_brk(unsigned long brk)
{
ffff80000080dec7:	f3 0f 1e fa          	endbr64 
ffff80000080decb:	55                   	push   rbp
ffff80000080decc:	48 89 e5             	mov    rbp,rsp
ffff80000080decf:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080decf <sys_brk+0x8>
ffff80000080ded6:	49 bb 29 4d 11 00 00 	movabs r11,0x114d29
ffff80000080dedd:	00 00 00 
ffff80000080dee0:	4c 01 d8             	add    rax,r11
ffff80000080dee3:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:370
//
//    new_brk = do_brk(current->mm->end_brk,new_brk - current->mm->end_brk);	//expand brk space
//
//    current->mm->end_brk = new_brk;
//    return new_brk;
}
ffff80000080dee7:	90                   	nop
ffff80000080dee8:	5d                   	pop    rbp
ffff80000080dee9:	c3                   	ret    

ffff80000080deea <sys_reboot>:
sys_reboot():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:373

unsigned long sys_reboot(unsigned long cmd,void * arg)
{
ffff80000080deea:	f3 0f 1e fa          	endbr64 
ffff80000080deee:	55                   	push   rbp
ffff80000080deef:	48 89 e5             	mov    rbp,rsp
ffff80000080def2:	41 57                	push   r15
ffff80000080def4:	53                   	push   rbx
ffff80000080def5:	48 83 ec 10          	sub    rsp,0x10
ffff80000080def9:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080def9 <sys_reboot+0xf>
ffff80000080df00:	49 bb ff 4c 11 00 00 	movabs r11,0x114cff
ffff80000080df07:	00 00 00 
ffff80000080df0a:	4c 01 db             	add    rbx,r11
ffff80000080df0d:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff80000080df11:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:374
    printf("sys_reboot\n");
ffff80000080df15:	48 b8 5b d5 ff ff ff 	movabs rax,0xffffffffffffd55b
ffff80000080df1c:	ff ff ff 
ffff80000080df1f:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080df23:	48 89 c7             	mov    rdi,rax
ffff80000080df26:	49 89 df             	mov    r15,rbx
ffff80000080df29:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080df2e:	48 ba c9 ed ed ff ff 	movabs rdx,0xffffffffffededc9
ffff80000080df35:	ff ff ff 
ffff80000080df38:	48 01 da             	add    rdx,rbx
ffff80000080df3b:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:375
    switch(cmd)
ffff80000080df3d:	48 83 7d e8 01       	cmp    QWORD PTR [rbp-0x18],0x1
ffff80000080df42:	74 09                	je     ffff80000080df4d <sys_reboot+0x63>
ffff80000080df44:	48 83 7d e8 02       	cmp    QWORD PTR [rbp-0x18],0x2
ffff80000080df49:	74 20                	je     ffff80000080df6b <sys_reboot+0x81>
ffff80000080df4b:	eb 48                	jmp    ffff80000080df95 <sys_reboot+0xab>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:378
    {
        case SYSTEM_REBOOT:
            outb(0x64,0xFE);
ffff80000080df4d:	be fe 00 00 00       	mov    esi,0xfe
ffff80000080df52:	bf 64 00 00 00       	mov    edi,0x64
ffff80000080df57:	49 89 df             	mov    r15,rbx
ffff80000080df5a:	48 b8 78 65 ee ff ff 	movabs rax,0xffffffffffee6578
ffff80000080df61:	ff ff ff 
ffff80000080df64:	48 01 d8             	add    rax,rbx
ffff80000080df67:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:379
            break;
ffff80000080df69:	eb 53                	jmp    ffff80000080dfbe <sys_reboot+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:382

        case SYSTEM_POWEROFF:
            printf("sys_reboot cmd SYSTEM_POWEROFF\n");
ffff80000080df6b:	48 b8 68 d5 ff ff ff 	movabs rax,0xffffffffffffd568
ffff80000080df72:	ff ff ff 
ffff80000080df75:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080df79:	48 89 c7             	mov    rdi,rax
ffff80000080df7c:	49 89 df             	mov    r15,rbx
ffff80000080df7f:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080df84:	48 ba c9 ed ed ff ff 	movabs rdx,0xffffffffffededc9
ffff80000080df8b:	ff ff ff 
ffff80000080df8e:	48 01 da             	add    rdx,rbx
ffff80000080df91:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:383
            break;
ffff80000080df93:	eb 29                	jmp    ffff80000080dfbe <sys_reboot+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:386

        default:
            printf("sys_reboot cmd ERROR!\n");
ffff80000080df95:	48 b8 88 d5 ff ff ff 	movabs rax,0xffffffffffffd588
ffff80000080df9c:	ff ff ff 
ffff80000080df9f:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080dfa3:	48 89 c7             	mov    rdi,rax
ffff80000080dfa6:	49 89 df             	mov    r15,rbx
ffff80000080dfa9:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080dfae:	48 ba c9 ed ed ff ff 	movabs rdx,0xffffffffffededc9
ffff80000080dfb5:	ff ff ff 
ffff80000080dfb8:	48 01 da             	add    rdx,rbx
ffff80000080dfbb:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:387
            break;
ffff80000080dfbd:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:389
    }
    return 0;
ffff80000080dfbe:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:390
}
ffff80000080dfc3:	48 83 c4 10          	add    rsp,0x10
ffff80000080dfc7:	5b                   	pop    rbx
ffff80000080dfc8:	41 5f                	pop    r15
ffff80000080dfca:	5d                   	pop    rbp
ffff80000080dfcb:	c3                   	ret    

ffff80000080dfcc <sys_chdir>:
sys_chdir():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:394


unsigned long sys_chdir(char *filename)
{
ffff80000080dfcc:	f3 0f 1e fa          	endbr64 
ffff80000080dfd0:	55                   	push   rbp
ffff80000080dfd1:	48 89 e5             	mov    rbp,rsp
ffff80000080dfd4:	41 57                	push   r15
ffff80000080dfd6:	53                   	push   rbx
ffff80000080dfd7:	48 83 ec 30          	sub    rsp,0x30
ffff80000080dfdb:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080dfdb <sys_chdir+0xf>
ffff80000080dfe2:	49 bb 1d 4c 11 00 00 	movabs r11,0x114c1d
ffff80000080dfe9:	00 00 00 
ffff80000080dfec:	4c 01 db             	add    rbx,r11
ffff80000080dfef:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:395
    char * path = NULL;
ffff80000080dff3:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000080dffa:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:396
    long pathlen = 0;
ffff80000080dffb:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff80000080e002:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:397
    struct dir_entry * dentry = NULL;
ffff80000080e003:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff80000080e00a:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:399

    printf("sys_chdir\n");
ffff80000080e00b:	48 b8 9f d5 ff ff ff 	movabs rax,0xffffffffffffd59f
ffff80000080e012:	ff ff ff 
ffff80000080e015:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080e019:	48 89 c7             	mov    rdi,rax
ffff80000080e01c:	49 89 df             	mov    r15,rbx
ffff80000080e01f:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080e024:	48 ba c9 ed ed ff ff 	movabs rdx,0xffffffffffededc9
ffff80000080e02b:	ff ff ff 
ffff80000080e02e:	48 01 da             	add    rdx,rbx
ffff80000080e031:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:400
    pathlen = strlen(filename);
ffff80000080e033:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080e037:	48 89 c7             	mov    rdi,rax
ffff80000080e03a:	49 89 df             	mov    r15,rbx
ffff80000080e03d:	48 b8 ab 21 ef ff ff 	movabs rax,0xffffffffffef21ab
ffff80000080e044:	ff ff ff 
ffff80000080e047:	48 01 d8             	add    rax,rbx
ffff80000080e04a:	ff d0                	call   rax
ffff80000080e04c:	48 98                	cdqe   
ffff80000080e04e:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:401
    path = (char *) kmalloc(0,pathlen);
ffff80000080e052:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080e056:	48 89 c6             	mov    rsi,rax
ffff80000080e059:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080e05e:	49 89 df             	mov    r15,rbx
ffff80000080e061:	48 b8 ce 07 ee ff ff 	movabs rax,0xffffffffffee07ce
ffff80000080e068:	ff ff ff 
ffff80000080e06b:	48 01 d8             	add    rax,rbx
ffff80000080e06e:	ff d0                	call   rax
ffff80000080e070:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:403

    if(path == NULL)
ffff80000080e074:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080e079:	75 0c                	jne    ffff80000080e087 <sys_chdir+0xbb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:404
        return -ENOMEM;
ffff80000080e07b:	48 c7 c0 cf ff ff ff 	mov    rax,0xffffffffffffffcf
ffff80000080e082:	e9 09 01 00 00       	jmp    ffff80000080e190 <sys_chdir+0x1c4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:405
    memset(path,0,PAGE_4K_SIZE);
ffff80000080e087:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080e08b:	ba 00 10 00 00       	mov    edx,0x1000
ffff80000080e090:	be 00 00 00 00       	mov    esi,0x0
ffff80000080e095:	48 89 c7             	mov    rdi,rax
ffff80000080e098:	49 89 df             	mov    r15,rbx
ffff80000080e09b:	48 b8 89 1e ef ff ff 	movabs rax,0xffffffffffef1e89
ffff80000080e0a2:	ff ff ff 
ffff80000080e0a5:	48 01 d8             	add    rax,rbx
ffff80000080e0a8:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:406
    if(pathlen <= 0)
ffff80000080e0aa:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
ffff80000080e0af:	7f 25                	jg     ffff80000080e0d6 <sys_chdir+0x10a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:408
    {
        kmfree(path);
ffff80000080e0b1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080e0b5:	48 89 c7             	mov    rdi,rax
ffff80000080e0b8:	49 89 df             	mov    r15,rbx
ffff80000080e0bb:	48 b8 6f 09 ee ff ff 	movabs rax,0xffffffffffee096f
ffff80000080e0c2:	ff ff ff 
ffff80000080e0c5:	48 01 d8             	add    rax,rbx
ffff80000080e0c8:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:409
        return -EFAULT;
ffff80000080e0ca:	48 c7 c0 eb ff ff ff 	mov    rax,0xffffffffffffffeb
ffff80000080e0d1:	e9 ba 00 00 00       	jmp    ffff80000080e190 <sys_chdir+0x1c4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:411
    }
    else if(pathlen >= PAGE_4K_SIZE)
ffff80000080e0d6:	48 81 7d e0 ff 0f 00 	cmp    QWORD PTR [rbp-0x20],0xfff
ffff80000080e0dd:	00 
ffff80000080e0de:	7e 25                	jle    ffff80000080e105 <sys_chdir+0x139>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:413
    {
        kmfree(path);
ffff80000080e0e0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080e0e4:	48 89 c7             	mov    rdi,rax
ffff80000080e0e7:	49 89 df             	mov    r15,rbx
ffff80000080e0ea:	48 b8 6f 09 ee ff ff 	movabs rax,0xffffffffffee096f
ffff80000080e0f1:	ff ff ff 
ffff80000080e0f4:	48 01 d8             	add    rax,rbx
ffff80000080e0f7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:414
        return -ENAMETOOLONG;
ffff80000080e0f9:	48 c7 c0 db ff ff ff 	mov    rax,0xffffffffffffffdb
ffff80000080e100:	e9 8b 00 00 00       	jmp    ffff80000080e190 <sys_chdir+0x1c4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:416
    }
    strcpy(filename,path);
ffff80000080e105:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080e109:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080e10d:	48 89 d6             	mov    rsi,rdx
ffff80000080e110:	48 89 c7             	mov    rdi,rax
ffff80000080e113:	49 89 df             	mov    r15,rbx
ffff80000080e116:	48 b8 de 1e ef ff ff 	movabs rax,0xffffffffffef1ede
ffff80000080e11d:	ff ff ff 
ffff80000080e120:	48 01 d8             	add    rax,rbx
ffff80000080e123:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:418

    dentry = path_walk(path,0);
ffff80000080e125:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080e129:	be 00 00 00 00       	mov    esi,0x0
ffff80000080e12e:	48 89 c7             	mov    rdi,rax
ffff80000080e131:	49 89 df             	mov    r15,rbx
ffff80000080e134:	48 b8 b7 9b ee ff ff 	movabs rax,0xffffffffffee9bb7
ffff80000080e13b:	ff ff ff 
ffff80000080e13e:	48 01 d8             	add    rax,rbx
ffff80000080e141:	ff d0                	call   rax
ffff80000080e143:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:419
    kmfree(path);
ffff80000080e147:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080e14b:	48 89 c7             	mov    rdi,rax
ffff80000080e14e:	49 89 df             	mov    r15,rbx
ffff80000080e151:	48 b8 6f 09 ee ff ff 	movabs rax,0xffffffffffee096f
ffff80000080e158:	ff ff ff 
ffff80000080e15b:	48 01 d8             	add    rax,rbx
ffff80000080e15e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:421

    if(dentry == NULL)
ffff80000080e160:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff80000080e165:	75 09                	jne    ffff80000080e170 <sys_chdir+0x1a4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:422
        return -ENOENT;
ffff80000080e167:	48 c7 c0 d3 ff ff ff 	mov    rax,0xffffffffffffffd3
ffff80000080e16e:	eb 20                	jmp    ffff80000080e190 <sys_chdir+0x1c4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:423
    if(dentry->dir_inode->attribute != FS_ATTR_DIR)
ffff80000080e170:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080e174:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080e178:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080e17c:	48 83 f8 02          	cmp    rax,0x2
ffff80000080e180:	74 09                	je     ffff80000080e18b <sys_chdir+0x1bf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:424
        return -ENOTDIR;
ffff80000080e182:	48 c7 c0 c7 ff ff ff 	mov    rax,0xffffffffffffffc7
ffff80000080e189:	eb 05                	jmp    ffff80000080e190 <sys_chdir+0x1c4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:425
    return 0;
ffff80000080e18b:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:426
}
ffff80000080e190:	48 83 c4 30          	add    rsp,0x30
ffff80000080e194:	5b                   	pop    rbx
ffff80000080e195:	41 5f                	pop    r15
ffff80000080e197:	5d                   	pop    rbp
ffff80000080e198:	c3                   	ret    

ffff80000080e199 <sys_getdents>:
sys_getdents():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:429

unsigned long sys_getdents(int fd, void * dirent, long count)
{
ffff80000080e199:	f3 0f 1e fa          	endbr64 
ffff80000080e19d:	55                   	push   rbp
ffff80000080e19e:	48 89 e5             	mov    rbp,rsp
ffff80000080e1a1:	48 83 ec 30          	sub    rsp,0x30
ffff80000080e1a5:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080e1a5 <sys_getdents+0xc>
ffff80000080e1ac:	49 bb 53 4a 11 00 00 	movabs r11,0x114a53
ffff80000080e1b3:	00 00 00 
ffff80000080e1b6:	4c 01 d8             	add    rax,r11
ffff80000080e1b9:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffff80000080e1bc:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080e1c0:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:430
    struct file * filp = NULL;
ffff80000080e1c4:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffff80000080e1cb:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:431
    unsigned long ret = 0;
ffff80000080e1cc:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080e1d3:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:434

//	printf("sys_getdents:%d\n",fd);
    if(fd < 0 || fd > MAX_TASKS)
ffff80000080e1d4:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
ffff80000080e1d8:	78 06                	js     ffff80000080e1e0 <sys_getdents+0x47>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:434 (discriminator 1)
ffff80000080e1da:	83 7d ec 20          	cmp    DWORD PTR [rbp-0x14],0x20
ffff80000080e1de:	7e 0c                	jle    ffff80000080e1ec <sys_getdents+0x53>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:435
        return -EBADF;
ffff80000080e1e0:	48 c7 c0 f8 ff ff ff 	mov    rax,0xfffffffffffffff8
ffff80000080e1e7:	e9 85 00 00 00       	jmp    ffff80000080e271 <sys_getdents+0xd8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:436
    if(count < 0)
ffff80000080e1ec:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff80000080e1f1:	79 09                	jns    ffff80000080e1fc <sys_getdents+0x63>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:437
        return -EINVAL;
ffff80000080e1f3:	48 c7 c0 e4 ff ff ff 	mov    rax,0xffffffffffffffe4
ffff80000080e1fa:	eb 75                	jmp    ffff80000080e271 <sys_getdents+0xd8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:439

    filp = current->openf[fd];
ffff80000080e1fc:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff80000080e203:	ff ff ff 
ffff80000080e206:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080e20a:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080e20d:	8b 4d ec             	mov    ecx,DWORD PTR [rbp-0x14]
ffff80000080e210:	48 63 c9             	movsxd rcx,ecx
ffff80000080e213:	48 83 c1 1e          	add    rcx,0x1e
ffff80000080e217:	48 8b 54 ca 08       	mov    rdx,QWORD PTR [rdx+rcx*8+0x8]
ffff80000080e21c:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:440
    if(filp->f_ops && filp->f_ops->readdir)
ffff80000080e220:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080e224:	48 8b 52 18          	mov    rdx,QWORD PTR [rdx+0x18]
ffff80000080e228:	48 85 d2             	test   rdx,rdx
ffff80000080e22b:	74 40                	je     ffff80000080e26d <sys_getdents+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:440 (discriminator 1)
ffff80000080e22d:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080e231:	48 8b 52 18          	mov    rdx,QWORD PTR [rdx+0x18]
ffff80000080e235:	48 8b 52 30          	mov    rdx,QWORD PTR [rdx+0x30]
ffff80000080e239:	48 85 d2             	test   rdx,rdx
ffff80000080e23c:	74 2f                	je     ffff80000080e26d <sys_getdents+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:441
        ret = filp->f_ops->readdir(filp,dirent,&fill_dentry);
ffff80000080e23e:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080e242:	48 8b 52 18          	mov    rdx,QWORD PTR [rdx+0x18]
ffff80000080e246:	4c 8b 42 30          	mov    r8,QWORD PTR [rdx+0x30]
ffff80000080e24a:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff80000080e24e:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffff80000080e252:	48 ba 50 ff ff ff ff 	movabs rdx,0xffffffffffffff50
ffff80000080e259:	ff ff ff 
ffff80000080e25c:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080e260:	48 89 c2             	mov    rdx,rax
ffff80000080e263:	48 89 cf             	mov    rdi,rcx
ffff80000080e266:	41 ff d0             	call   r8
ffff80000080e269:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:442
    return ret;
ffff80000080e26d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:443
}
ffff80000080e271:	c9                   	leave  
ffff80000080e272:	c3                   	ret    

ffff80000080e273 <sys_mmap>:
sys_mmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:445

void *sys_mmap(void *addr, size_t len, int prot, int flags,int fildes, off_t off){
ffff80000080e273:	f3 0f 1e fa          	endbr64 
ffff80000080e277:	55                   	push   rbp
ffff80000080e278:	48 89 e5             	mov    rbp,rsp
ffff80000080e27b:	41 57                	push   r15
ffff80000080e27d:	53                   	push   rbx
ffff80000080e27e:	48 81 ec c0 00 00 00 	sub    rsp,0xc0
ffff80000080e285:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080e285 <sys_mmap+0x12>
ffff80000080e28c:	49 bb 73 49 11 00 00 	movabs r11,0x114973
ffff80000080e293:	00 00 00 
ffff80000080e296:	4c 01 db             	add    rbx,r11
ffff80000080e299:	48 89 bd 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdi
ffff80000080e2a0:	48 89 b5 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rsi
ffff80000080e2a7:	89 95 4c ff ff ff    	mov    DWORD PTR [rbp-0xb4],edx
ffff80000080e2ad:	89 8d 48 ff ff ff    	mov    DWORD PTR [rbp-0xb8],ecx
ffff80000080e2b3:	44 89 85 44 ff ff ff 	mov    DWORD PTR [rbp-0xbc],r8d
ffff80000080e2ba:	4c 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:446
    int attr=PAGE_PRESENT|PAGE_FOR_ALL;
ffff80000080e2c1:	c7 45 d4 05 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x5
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:448
    if((prot|PROT_WRITE)||(prot|PROT_EXEC))
        attr|=PAGE_RWX;
ffff80000080e2c8:	83 4d d4 02          	or     DWORD PTR [rbp-0x2c],0x2
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:449
    if(!addr){
ffff80000080e2cc:	48 83 bd 58 ff ff ff 	cmp    QWORD PTR [rbp-0xa8],0x0
ffff80000080e2d3:	00 
ffff80000080e2d4:	75 6d                	jne    ffff80000080e343 <sys_mmap+0xd0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:452
        //没有指定地址
        //寻找一块空的虚拟内存
        while (!chk_mmap(addr,len))
ffff80000080e2d6:	eb 41                	jmp    ffff80000080e319 <sys_mmap+0xa6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:454
        {
            addr+=PAGE_4K_SIZE;
ffff80000080e2d8:	48 81 85 58 ff ff ff 	add    QWORD PTR [rbp-0xa8],0x1000
ffff80000080e2df:	00 10 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:455
            if(addr>=KNL_BASE){
ffff80000080e2e3:	48 b8 ff ff ff ff ff 	movabs rax,0xffff7fffffffffff
ffff80000080e2ea:	7f ff ff 
ffff80000080e2ed:	48 39 85 58 ff ff ff 	cmp    QWORD PTR [rbp-0xa8],rax
ffff80000080e2f4:	76 23                	jbe    ffff80000080e319 <sys_mmap+0xa6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:456
                set_errno(-ENOMEM);
ffff80000080e2f6:	bf cf ff ff ff       	mov    edi,0xffffffcf
ffff80000080e2fb:	49 89 df             	mov    r15,rbx
ffff80000080e2fe:	48 b8 2f 65 ee ff ff 	movabs rax,0xffffffffffee652f
ffff80000080e305:	ff ff ff 
ffff80000080e308:	48 01 d8             	add    rax,rbx
ffff80000080e30b:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:457
                return MAP_FAILED;
ffff80000080e30d:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff80000080e314:	e9 3c 04 00 00       	jmp    ffff80000080e755 <sys_mmap+0x4e2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:452
        while (!chk_mmap(addr,len))
ffff80000080e319:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
ffff80000080e320:	48 8b 95 50 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb0]
ffff80000080e327:	48 89 d6             	mov    rsi,rdx
ffff80000080e32a:	48 89 c7             	mov    rdi,rax
ffff80000080e32d:	49 89 df             	mov    r15,rbx
ffff80000080e330:	48 b8 db 5c ee ff ff 	movabs rax,0xffffffffffee5cdb
ffff80000080e337:	ff ff ff 
ffff80000080e33a:	48 01 d8             	add    rax,rbx
ffff80000080e33d:	ff d0                	call   rax
ffff80000080e33f:	85 c0                	test   eax,eax
ffff80000080e341:	74 95                	je     ffff80000080e2d8 <sys_mmap+0x65>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:461
            }
        }
    }
    if(!chk_mmap(addr,len)&&(flags&MAP_FIXED)){
ffff80000080e343:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
ffff80000080e34a:	48 8b 95 50 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb0]
ffff80000080e351:	48 89 d6             	mov    rsi,rdx
ffff80000080e354:	48 89 c7             	mov    rdi,rax
ffff80000080e357:	49 89 df             	mov    r15,rbx
ffff80000080e35a:	48 b8 db 5c ee ff ff 	movabs rax,0xffffffffffee5cdb
ffff80000080e361:	ff ff ff 
ffff80000080e364:	48 01 d8             	add    rax,rbx
ffff80000080e367:	ff d0                	call   rax
ffff80000080e369:	85 c0                	test   eax,eax
ffff80000080e36b:	75 30                	jne    ffff80000080e39d <sys_mmap+0x12a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:461 (discriminator 1)
ffff80000080e36d:	8b 85 48 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb8]
ffff80000080e373:	83 e0 01             	and    eax,0x1
ffff80000080e376:	85 c0                	test   eax,eax
ffff80000080e378:	74 23                	je     ffff80000080e39d <sys_mmap+0x12a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:462
        set_errno(-ENOMEM);
ffff80000080e37a:	bf cf ff ff ff       	mov    edi,0xffffffcf
ffff80000080e37f:	49 89 df             	mov    r15,rbx
ffff80000080e382:	48 b8 2f 65 ee ff ff 	movabs rax,0xffffffffffee652f
ffff80000080e389:	ff ff ff 
ffff80000080e38c:	48 01 d8             	add    rax,rbx
ffff80000080e38f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:463
        return MAP_FAILED;
ffff80000080e391:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff80000080e398:	e9 b8 03 00 00       	jmp    ffff80000080e755 <sys_mmap+0x4e2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:466
    }
    //创建mmap struct
    mmap_struct* mmps=kmalloc(0,sizeof(mmap_struct)),*mp=all_mmaps;
ffff80000080e39d:	be 48 00 00 00       	mov    esi,0x48
ffff80000080e3a2:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080e3a7:	49 89 df             	mov    r15,rbx
ffff80000080e3aa:	48 b8 ce 07 ee ff ff 	movabs rax,0xffffffffffee07ce
ffff80000080e3b1:	ff ff ff 
ffff80000080e3b4:	48 01 d8             	add    rax,rbx
ffff80000080e3b7:	ff d0                	call   rax
ffff80000080e3b9:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
ffff80000080e3bd:	48 b8 98 fe ff ff ff 	movabs rax,0xfffffffffffffe98
ffff80000080e3c4:	ff ff ff 
ffff80000080e3c7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e3cb:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e3ce:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:468
    //TODO 创建进程时要设置mmaps.node
    for(;mp&&mp->node.next;mp=mp->node.next->data);
ffff80000080e3d2:	eb 10                	jmp    ffff80000080e3e4 <sys_mmap+0x171>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:468 (discriminator 3)
ffff80000080e3d4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080e3d8:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080e3dc:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080e3e0:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:468 (discriminator 1)
ffff80000080e3e4:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080e3e9:	74 0d                	je     ffff80000080e3f8 <sys_mmap+0x185>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:468 (discriminator 2)
ffff80000080e3eb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080e3ef:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000080e3f3:	48 85 c0             	test   rax,rax
ffff80000080e3f6:	75 dc                	jne    ffff80000080e3d4 <sys_mmap+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:469
    if(!mp)all_mmaps=kmalloc(0,sizeof(mmap_struct));
ffff80000080e3f8:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080e3fd:	75 2d                	jne    ffff80000080e42c <sys_mmap+0x1b9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:469 (discriminator 1)
ffff80000080e3ff:	be 48 00 00 00       	mov    esi,0x48
ffff80000080e404:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080e409:	49 89 df             	mov    r15,rbx
ffff80000080e40c:	48 b8 ce 07 ee ff ff 	movabs rax,0xffffffffffee07ce
ffff80000080e413:	ff ff ff 
ffff80000080e416:	48 01 d8             	add    rax,rbx
ffff80000080e419:	ff d0                	call   rax
ffff80000080e41b:	48 ba 98 fe ff ff ff 	movabs rdx,0xfffffffffffffe98
ffff80000080e422:	ff ff ff 
ffff80000080e425:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080e429:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:470
    list_init(&mmps->node);
ffff80000080e42c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080e430:	48 83 c0 30          	add    rax,0x30
ffff80000080e434:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff80000080e438:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080e43c:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000080e443:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080e447:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000080e44e:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000080e44f:	90                   	nop
ffff80000080e450:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080e454:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
ffff80000080e458:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080e45c:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:33
    struct List* p=entry;
ffff80000080e460:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080e464:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:34
    for(;p->next&&p->next!=p;p=p->next){
ffff80000080e468:	eb 21                	jmp    ffff80000080e48b <sys_mmap+0x218>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:35
        if(p->data==new->data)
ffff80000080e46a:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080e46e:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff80000080e472:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080e476:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080e47a:	48 39 c2             	cmp    rdx,rax
ffff80000080e47d:	74 7c                	je     ffff80000080e4fb <sys_mmap+0x288>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:34
    for(;p->next&&p->next!=p;p=p->next){
ffff80000080e47f:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080e483:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080e487:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
ffff80000080e48b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080e48f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080e493:	48 85 c0             	test   rax,rax
ffff80000080e496:	74 0e                	je     ffff80000080e4a6 <sys_mmap+0x233>
ffff80000080e498:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080e49c:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080e4a0:	48 39 45 a8          	cmp    QWORD PTR [rbp-0x58],rax
ffff80000080e4a4:	75 c4                	jne    ffff80000080e46a <sys_mmap+0x1f7>
ffff80000080e4a6:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000080e4aa:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
ffff80000080e4ae:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000080e4b2:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff80000080e4b6:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080e4ba:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080e4be:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080e4c2:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff80000080e4c6:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080e4ca:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
ffff80000080e4ce:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff80000080e4d1:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080e4d5:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080e4d9:	48 85 c0             	test   rax,rax
ffff80000080e4dc:	74 0f                	je     ffff80000080e4ed <sys_mmap+0x27a>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff80000080e4de:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080e4e2:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080e4e6:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
ffff80000080e4ea:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:29
    entry->next = new;
ffff80000080e4ed:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080e4f1:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
ffff80000080e4f5:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff80000080e4f9:	eb 01                	jmp    ffff80000080e4fc <sys_mmap+0x289>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:36
            return;
ffff80000080e4fb:	90                   	nop
sys_mmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:473
    list_add(mp,mmps);
    //设置mmap struct
    mmps->base=addr;
ffff80000080e4fc:	48 8b 95 58 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa8]
ffff80000080e503:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080e507:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:474
    mmps->len=len;
ffff80000080e50a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080e50e:	48 8b 95 50 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb0]
ffff80000080e515:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:475
    if(fildes>0)
ffff80000080e519:	83 bd 44 ff ff ff 00 	cmp    DWORD PTR [rbp-0xbc],0x0
ffff80000080e520:	7e 2d                	jle    ffff80000080e54f <sys_mmap+0x2dc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:476
        mmps->file=current->openf[fildes];
ffff80000080e522:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080e529:	ff ff ff 
ffff80000080e52c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e530:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e533:	8b 95 44 ff ff ff    	mov    edx,DWORD PTR [rbp-0xbc]
ffff80000080e539:	48 63 d2             	movsxd rdx,edx
ffff80000080e53c:	48 83 c2 1e          	add    rdx,0x1e
ffff80000080e540:	48 8b 54 d0 08       	mov    rdx,QWORD PTR [rax+rdx*8+0x8]
ffff80000080e545:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080e549:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
ffff80000080e54d:	eb 0c                	jmp    ffff80000080e55b <sys_mmap+0x2e8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:478
    else
        mmps->file=NULL;
ffff80000080e54f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080e553:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000080e55a:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:479
    mmps->offset=off;
ffff80000080e55b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080e55f:	48 8b 95 38 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xc8]
ffff80000080e566:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:480
    mmps->pmhdr=NULL;
ffff80000080e56a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080e56e:	48 c7 40 28 00 00 00 	mov    QWORD PTR [rax+0x28],0x0
ffff80000080e575:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:481
    mmps->flags=prot|(flags&MAP_SHARED?MMAP_FLAG_S:0);
ffff80000080e576:	8b 85 48 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb8]
ffff80000080e57c:	01 c0                	add    eax,eax
ffff80000080e57e:	83 e0 08             	and    eax,0x8
ffff80000080e581:	89 c2                	mov    edx,eax
ffff80000080e583:	8b 85 4c ff ff ff    	mov    eax,DWORD PTR [rbp-0xb4]
ffff80000080e589:	09 d0                	or     eax,edx
ffff80000080e58b:	89 c2                	mov    edx,eax
ffff80000080e58d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000080e591:	66 89 50 20          	mov    WORD PTR [rax+0x20],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:483
    //加入到进程mmaps链表
    struct List *new_node=kmalloc(0,sizeof(struct List)),*np=current->mmaps,*prevnp=np;
ffff80000080e595:	be 18 00 00 00       	mov    esi,0x18
ffff80000080e59a:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080e59f:	49 89 df             	mov    r15,rbx
ffff80000080e5a2:	48 b8 ce 07 ee ff ff 	movabs rax,0xffffffffffee07ce
ffff80000080e5a9:	ff ff ff 
ffff80000080e5ac:	48 01 d8             	add    rax,rbx
ffff80000080e5af:	ff d0                	call   rax
ffff80000080e5b1:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
ffff80000080e5b5:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080e5bc:	ff ff ff 
ffff80000080e5bf:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e5c3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e5c6:	48 8b 80 34 03 00 00 	mov    rax,QWORD PTR [rax+0x334]
ffff80000080e5cd:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffff80000080e5d1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080e5d5:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffff80000080e5d9:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080e5dd:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff80000080e5e1:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080e5e5:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000080e5ec:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000080e5f0:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000080e5f7:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000080e5f8:	90                   	nop
sys_mmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:485
    list_init(new_node);
    new_node->data=mmps;
ffff80000080e5f9:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080e5fd:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080e601:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:486
    if(!np)current->mmaps=new_node;
ffff80000080e605:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
ffff80000080e60a:	75 35                	jne    ffff80000080e641 <sys_mmap+0x3ce>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:486 (discriminator 1)
ffff80000080e60c:	48 b8 48 fe ff ff ff 	movabs rax,0xfffffffffffffe48
ffff80000080e613:	ff ff ff 
ffff80000080e616:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080e61a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e61d:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff80000080e621:	48 89 90 34 03 00 00 	mov    QWORD PTR [rax+0x334],rdx
ffff80000080e628:	e9 21 01 00 00       	jmp    ffff80000080e74e <sys_mmap+0x4db>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:489 (discriminator 3)
    else{
        for(;np&&((mmap_struct*)np->data)->base<addr;np=((mmap_struct*)np->next)){
            prevnp=np;
ffff80000080e62d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080e631:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:488 (discriminator 3)
        for(;np&&((mmap_struct*)np->data)->base<addr;np=((mmap_struct*)np->next)){
ffff80000080e635:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080e639:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080e63d:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:488 (discriminator 1)
ffff80000080e641:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
ffff80000080e646:	74 14                	je     ffff80000080e65c <sys_mmap+0x3e9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:488 (discriminator 2)
ffff80000080e648:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080e64c:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080e650:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080e653:	48 39 85 58 ff ff ff 	cmp    QWORD PTR [rbp-0xa8],rax
ffff80000080e65a:	77 d1                	ja     ffff80000080e62d <sys_mmap+0x3ba>
ffff80000080e65c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080e660:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
ffff80000080e664:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080e668:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:33
    struct List* p=entry;
ffff80000080e66f:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff80000080e673:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:34
    for(;p->next&&p->next!=p;p=p->next){
ffff80000080e67a:	eb 31                	jmp    ffff80000080e6ad <sys_mmap+0x43a>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:35
        if(p->data==new->data)
ffff80000080e67c:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080e683:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff80000080e687:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff80000080e68e:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080e692:	48 39 c2             	cmp    rdx,rax
ffff80000080e695:	0f 84 b2 00 00 00    	je     ffff80000080e74d <sys_mmap+0x4da>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:34
    for(;p->next&&p->next!=p;p=p->next){
ffff80000080e69b:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080e6a2:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080e6a6:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
ffff80000080e6ad:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080e6b4:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080e6b8:	48 85 c0             	test   rax,rax
ffff80000080e6bb:	74 14                	je     ffff80000080e6d1 <sys_mmap+0x45e>
ffff80000080e6bd:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080e6c4:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080e6c8:	48 39 85 70 ff ff ff 	cmp    QWORD PTR [rbp-0x90],rax
ffff80000080e6cf:	75 ab                	jne    ffff80000080e67c <sys_mmap+0x409>
ffff80000080e6d1:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000080e6d8:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
ffff80000080e6df:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff80000080e6e6:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
list_add_to_behind():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:25
    new->next = entry->next;
ffff80000080e6ed:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080e6f4:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff80000080e6f8:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff80000080e6ff:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:26
    new->prev = entry;
ffff80000080e703:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff80000080e70a:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
ffff80000080e711:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:27
    if(new->next)
ffff80000080e714:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff80000080e71b:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080e71f:	48 85 c0             	test   rax,rax
ffff80000080e722:	74 15                	je     ffff80000080e739 <sys_mmap+0x4c6>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:28
        new->next->prev = new;
ffff80000080e724:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffff80000080e72b:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000080e72f:	48 8b 95 60 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa0]
ffff80000080e736:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:29
    entry->next = new;
ffff80000080e739:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffff80000080e740:	48 8b 95 60 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa0]
ffff80000080e747:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:30
}
ffff80000080e74b:	eb 01                	jmp    ffff80000080e74e <sys_mmap+0x4db>
list_add():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:36
            return;
ffff80000080e74d:	90                   	nop
sys_mmap():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:515
//     }
    //根据需要是否同步文件内容
    //目前先一致读取
    // sys_lseek(fildes,off,SEEK_SET);
    // sys_read(fildes,addr,len);
    return addr;
ffff80000080e74e:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/sys.c:517
    
}
ffff80000080e755:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
ffff80000080e75c:	5b                   	pop    rbx
ffff80000080e75d:	41 5f                	pop    r15
ffff80000080e75f:	5d                   	pop    rbp
ffff80000080e760:	c3                   	ret    

ffff80000080e761 <init_ramfs>:
init_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:28
};
struct index_node_operations ramfs_iops={
        .lookup=lookup_inode_ramfs,.create=create_inode_ramfs
};
struct index_node* test;
void init_ramfs(){
ffff80000080e761:	f3 0f 1e fa          	endbr64 
ffff80000080e765:	55                   	push   rbp
ffff80000080e766:	48 89 e5             	mov    rbp,rsp
ffff80000080e769:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080e769 <init_ramfs+0x8>
ffff80000080e770:	49 bb 8f 44 11 00 00 	movabs r11,0x11448f
ffff80000080e777:	00 00 00 
ffff80000080e77a:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:31
    //挂载新文件系统到/mnt,设备为/dev/ram

    ramfs_sb.sb_ops=&ramfs_fops;
ffff80000080e77d:	48 ba f0 fd ff ff ff 	movabs rdx,0xfffffffffffffdf0
ffff80000080e784:	ff ff ff 
ffff80000080e787:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080e78b:	48 b9 d0 fc ff ff ff 	movabs rcx,0xfffffffffffffcd0
ffff80000080e792:	ff ff ff 
ffff80000080e795:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080e799:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:32
    ramfs_sb.root=dmnt;
ffff80000080e79d:	48 ba 90 fe ff ff ff 	movabs rdx,0xfffffffffffffe90
ffff80000080e7a4:	ff ff ff 
ffff80000080e7a7:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080e7ab:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080e7ae:	48 ba f0 fd ff ff ff 	movabs rdx,0xfffffffffffffdf0
ffff80000080e7b5:	ff ff ff 
ffff80000080e7b8:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080e7bc:	48 89 0a             	mov    QWORD PTR [rdx],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:33
    ramfs_sb.p_dev=&bd_ramdisk;
ffff80000080e7bf:	48 ba f0 fd ff ff ff 	movabs rdx,0xfffffffffffffdf0
ffff80000080e7c6:	ff ff ff 
ffff80000080e7c9:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080e7cd:	48 b9 80 ff ff ff ff 	movabs rcx,0xffffffffffffff80
ffff80000080e7d4:	ff ff ff 
ffff80000080e7d7:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080e7db:	48 89 4a 18          	mov    QWORD PTR [rdx+0x18],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:34
    ramfs_sb.dev=dev_ramdisk;
ffff80000080e7df:	48 ba 78 fe ff ff ff 	movabs rdx,0xfffffffffffffe78
ffff80000080e7e6:	ff ff ff 
ffff80000080e7e9:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080e7ed:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff80000080e7ef:	89 d1                	mov    ecx,edx
ffff80000080e7f1:	48 ba f0 fd ff ff ff 	movabs rdx,0xfffffffffffffdf0
ffff80000080e7f8:	ff ff ff 
ffff80000080e7fb:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080e7ff:	66 89 48 10          	mov    WORD PTR [rax+0x10],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:45
    // test->sb=&ramfs_sb;
    // test->attribute=FS_ATTR_FILE;
    // test->inode_ops=&ramfs_iops;
    //设置一下dmnt的inode的操作，查找的时候会用到
    // dmnt->dir_inode->inode_ops=&ramfs_iops;
}
ffff80000080e803:	90                   	nop
ffff80000080e804:	5d                   	pop    rbp
ffff80000080e805:	c3                   	ret    

ffff80000080e806 <create_inode_ramfs>:
create_inode_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:47

long create_inode_ramfs(struct index_node * inode,struct dir_entry * dentry,int mode){}
ffff80000080e806:	f3 0f 1e fa          	endbr64 
ffff80000080e80a:	55                   	push   rbp
ffff80000080e80b:	48 89 e5             	mov    rbp,rsp
ffff80000080e80e:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080e80e <create_inode_ramfs+0x8>
ffff80000080e815:	49 bb ea 43 11 00 00 	movabs r11,0x1143ea
ffff80000080e81c:	00 00 00 
ffff80000080e81f:	4c 01 d8             	add    rax,r11
ffff80000080e822:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080e826:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080e82a:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
ffff80000080e82d:	90                   	nop
ffff80000080e82e:	5d                   	pop    rbp
ffff80000080e82f:	c3                   	ret    

ffff80000080e830 <lookup_inode_ramfs>:
lookup_inode_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:48
struct dir_entry* lookup_inode_ramfs(struct index_node * parent_inode,struct dir_entry * dest_dentry){
ffff80000080e830:	f3 0f 1e fa          	endbr64 
ffff80000080e834:	55                   	push   rbp
ffff80000080e835:	48 89 e5             	mov    rbp,rsp
ffff80000080e838:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080e838 <lookup_inode_ramfs+0x8>
ffff80000080e83f:	49 bb c0 43 11 00 00 	movabs r11,0x1143c0
ffff80000080e846:	00 00 00 
ffff80000080e849:	4c 01 d8             	add    rax,r11
ffff80000080e84c:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff80000080e850:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:49
    list_init(&dest_dentry->subdirs_list);
ffff80000080e854:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080e858:	48 83 c2 28          	add    rdx,0x28
ffff80000080e85c:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff80000080e860:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080e864:	48 c7 02 00 00 00 00 	mov    QWORD PTR [rdx],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000080e86b:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff80000080e86f:	48 c7 42 10 00 00 00 	mov    QWORD PTR [rdx+0x10],0x0
ffff80000080e876:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000080e877:	90                   	nop
lookup_inode_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:50
    list_init(&dest_dentry->child_node);
ffff80000080e878:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080e87c:	48 83 c2 10          	add    rdx,0x10
ffff80000080e880:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff80000080e884:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080e888:	48 c7 02 00 00 00 00 	mov    QWORD PTR [rdx],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff80000080e88f:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080e893:	48 c7 42 10 00 00 00 	mov    QWORD PTR [rdx+0x10],0x0
ffff80000080e89a:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000080e89b:	90                   	nop
lookup_inode_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:51
    dest_dentry->dir_inode=test;
ffff80000080e89c:	48 ba 18 fe ff ff ff 	movabs rdx,0xfffffffffffffe18
ffff80000080e8a3:	ff ff ff 
ffff80000080e8a6:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080e8aa:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080e8ad:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080e8b1:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:52
    dest_dentry->child_node.data=dest_dentry;
ffff80000080e8b5:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080e8b9:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080e8bd:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:53
    return dest_dentry;
ffff80000080e8c1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:54
}
ffff80000080e8c5:	5d                   	pop    rbp
ffff80000080e8c6:	c3                   	ret    

ffff80000080e8c7 <open_ramfs>:
open_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:55
long open_ramfs(struct index_node * inode,struct file * filp){
ffff80000080e8c7:	f3 0f 1e fa          	endbr64 
ffff80000080e8cb:	55                   	push   rbp
ffff80000080e8cc:	48 89 e5             	mov    rbp,rsp
ffff80000080e8cf:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080e8cf <open_ramfs+0x8>
ffff80000080e8d6:	49 bb 29 43 11 00 00 	movabs r11,0x114329
ffff80000080e8dd:	00 00 00 
ffff80000080e8e0:	4c 01 d8             	add    rax,r11
ffff80000080e8e3:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080e8e7:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:56
    filp->f_ops=inode->f_ops;
ffff80000080e8eb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080e8ef:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
ffff80000080e8f3:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080e8f7:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:57
    filp->position=0;
ffff80000080e8fb:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000080e8ff:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:58
    return 1;
ffff80000080e906:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:59
}
ffff80000080e90b:	5d                   	pop    rbp
ffff80000080e90c:	c3                   	ret    

ffff80000080e90d <close_ramfs>:
close_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:61

long close_ramfs(struct index_node * inode,struct file * filp){
ffff80000080e90d:	f3 0f 1e fa          	endbr64 
ffff80000080e911:	55                   	push   rbp
ffff80000080e912:	48 89 e5             	mov    rbp,rsp
ffff80000080e915:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080e915 <close_ramfs+0x8>
ffff80000080e91c:	49 bb e3 42 11 00 00 	movabs r11,0x1142e3
ffff80000080e923:	00 00 00 
ffff80000080e926:	4c 01 d8             	add    rax,r11
ffff80000080e929:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080e92d:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:62
    return 0;
ffff80000080e931:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:63
}
ffff80000080e936:	5d                   	pop    rbp
ffff80000080e937:	c3                   	ret    

ffff80000080e938 <read_ramfs>:
read_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:65
//注意一下:position是指针
long read_ramfs(struct file * filp,char * buf,unsigned long count,long * position){
ffff80000080e938:	f3 0f 1e fa          	endbr64 
ffff80000080e93c:	55                   	push   rbp
ffff80000080e93d:	48 89 e5             	mov    rbp,rsp
ffff80000080e940:	41 57                	push   r15
ffff80000080e942:	48 83 ec 28          	sub    rsp,0x28
ffff80000080e946:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080e946 <read_ramfs+0xe>
ffff80000080e94d:	49 bb b2 42 11 00 00 	movabs r11,0x1142b2
ffff80000080e954:	00 00 00 
ffff80000080e957:	4c 01 d8             	add    rax,r11
ffff80000080e95a:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff80000080e95e:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080e962:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffff80000080e966:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:66
    blkdev_read(filp->dentry->dir_inode->dev,*position,count,buf);
ffff80000080e96a:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff80000080e96e:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080e971:	48 89 d6             	mov    rsi,rdx
ffff80000080e974:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080e978:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
ffff80000080e97c:	48 8b 52 40          	mov    rdx,QWORD PTR [rdx+0x40]
ffff80000080e980:	0f b7 52 18          	movzx  edx,WORD PTR [rdx+0x18]
ffff80000080e984:	0f b7 fa             	movzx  edi,dx
ffff80000080e987:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
ffff80000080e98b:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080e98f:	49 89 c7             	mov    r15,rax
ffff80000080e992:	49 b8 34 cc ee ff ff 	movabs r8,0xffffffffffeecc34
ffff80000080e999:	ff ff ff 
ffff80000080e99c:	49 01 c0             	add    r8,rax
ffff80000080e99f:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:73
    if(len>count)len=count;
    for(int i=0;i<len;i++){
        buf[i]=_binary_bin_test_elf_start[i + *position];
    }
    *position+=len; */
    return 0;
ffff80000080e9a2:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:74
}
ffff80000080e9a7:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080e9ab:	c9                   	leave  
ffff80000080e9ac:	c3                   	ret    

ffff80000080e9ad <write_ramfs>:
write_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:75
long write_ramfs(struct file * filp,char * buf,unsigned long count,long * position){
ffff80000080e9ad:	f3 0f 1e fa          	endbr64 
ffff80000080e9b1:	55                   	push   rbp
ffff80000080e9b2:	48 89 e5             	mov    rbp,rsp
ffff80000080e9b5:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080e9b5 <write_ramfs+0x8>
ffff80000080e9bc:	49 bb 43 42 11 00 00 	movabs r11,0x114243
ffff80000080e9c3:	00 00 00 
ffff80000080e9c6:	4c 01 d8             	add    rax,r11
ffff80000080e9c9:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080e9cd:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080e9d1:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080e9d5:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:76
    return 0;
ffff80000080e9d9:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:77
}
ffff80000080e9de:	5d                   	pop    rbp
ffff80000080e9df:	c3                   	ret    

ffff80000080e9e0 <ioctl_ramfs>:
ioctl_ramfs():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:78
long ioctl_ramfs(struct index_node * inode,struct file * filp,unsigned long cmd,unsigned long arg){
ffff80000080e9e0:	f3 0f 1e fa          	endbr64 
ffff80000080e9e4:	55                   	push   rbp
ffff80000080e9e5:	48 89 e5             	mov    rbp,rsp
ffff80000080e9e8:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080e9e8 <ioctl_ramfs+0x8>
ffff80000080e9ef:	49 bb 10 42 11 00 00 	movabs r11,0x114210
ffff80000080e9f6:	00 00 00 
ffff80000080e9f9:	4c 01 d8             	add    rax,r11
ffff80000080e9fc:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000080ea00:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000080ea04:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff80000080ea08:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:79
    return 0;
ffff80000080ea0c:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramfs.c:80
ffff80000080ea11:	5d                   	pop    rbp
ffff80000080ea12:	c3                   	ret    

ffff80000080ea13 <ramdisk_do_req>:
ramdisk_do_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:22
long ramdisk_size;
int dev_ramdisk=-1;
struct blk_dev bd_ramdisk={
    .do_request=ramdisk_do_req
};
void ramdisk_do_req(struct request* req){
ffff80000080ea13:	f3 0f 1e fa          	endbr64 
ffff80000080ea17:	55                   	push   rbp
ffff80000080ea18:	48 89 e5             	mov    rbp,rsp
ffff80000080ea1b:	48 83 ec 40          	sub    rsp,0x40
ffff80000080ea1f:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080ea1f <ramdisk_do_req+0xc>
ffff80000080ea26:	49 bb d9 41 11 00 00 	movabs r11,0x1141d9
ffff80000080ea2d:	00 00 00 
ffff80000080ea30:	4c 01 d8             	add    rax,r11
ffff80000080ea33:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:23
    if(!req)
ffff80000080ea37:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffff80000080ea3c:	0f 84 ff 01 00 00    	je     ffff80000080ec41 <ramdisk_do_req+0x22e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:25
        return;
    start_request(req->dev);
ffff80000080ea42:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080ea46:	0f b7 12             	movzx  edx,WORD PTR [rdx]
ffff80000080ea49:	0f b7 d2             	movzx  edx,dx
ffff80000080ea4c:	66 89 55 ee          	mov    WORD PTR [rbp-0x12],dx
start_request():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:71
    int major=BLKDEV_MAJOR(dev);
    blk_devs[major].current_request->dev=-1;
    blk_devs[major].current_request=blk_devs[major].current_request->next;
}
__attribute__((__always_inline__))inline void start_request(unsigned short dev){
    wait_on_req(blk_devs[BLKDEV_MAJOR(dev)].current_request->waiting);
ffff80000080ea50:	0f b7 55 ee          	movzx  edx,WORD PTR [rbp-0x12]
ffff80000080ea54:	c1 fa 04             	sar    edx,0x4
ffff80000080ea57:	89 d1                	mov    ecx,edx
ffff80000080ea59:	83 e1 0f             	and    ecx,0xf
ffff80000080ea5c:	48 ba 70 ff ff ff ff 	movabs rdx,0xffffffffffffff70
ffff80000080ea63:	ff ff ff 
ffff80000080ea66:	48 8b 34 10          	mov    rsi,QWORD PTR [rax+rdx*1]
ffff80000080ea6a:	48 63 d1             	movsxd rdx,ecx
ffff80000080ea6d:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080ea71:	48 01 f2             	add    rdx,rsi
ffff80000080ea74:	48 83 c2 08          	add    rdx,0x8
ffff80000080ea78:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080ea7b:	48 8b 52 30          	mov    rdx,QWORD PTR [rdx+0x30]
ffff80000080ea7f:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
wait_on_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:218
    unsigned int argv;
    unsigned int argc;
}proc_ret_stack;

__attribute__((__always_inline__))inline void wait_on_req(struct process* p){
        if(p->stat==TASK_READY||p->stat==TASK_RUNNING)
ffff80000080ea83:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080ea87:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff80000080ea8a:	83 fa 02             	cmp    edx,0x2
ffff80000080ea8d:	74 0c                	je     ffff80000080ea9b <ramdisk_do_req+0x88>
ffff80000080ea8f:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080ea93:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff80000080ea96:	83 fa 01             	cmp    edx,0x1
ffff80000080ea99:	75 0b                	jne    ffff80000080eaa6 <ramdisk_do_req+0x93>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:219
            p->stat=TASK_SUSPENDED;
ffff80000080ea9b:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080ea9f:	c7 42 18 03 00 00 00 	mov    DWORD PTR [rdx+0x18],0x3
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:220
}
ffff80000080eaa6:	90                   	nop
start_request():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:72
ffff80000080eaa7:	90                   	nop
ramdisk_do_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:26
    int len= req->nr_sectors*SECTOR_SIZE;
ffff80000080eaa8:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080eaac:	48 8b 52 18          	mov    rdx,QWORD PTR [rdx+0x18]
ffff80000080eab0:	c1 e2 09             	shl    edx,0x9
ffff80000080eab3:	89 55 f4             	mov    DWORD PTR [rbp-0xc],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:27
    int base=req->sector*SECTOR_SIZE;
ffff80000080eab6:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080eaba:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
ffff80000080eabe:	c1 e2 09             	shl    edx,0x9
ffff80000080eac1:	89 55 f0             	mov    DWORD PTR [rbp-0x10],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:28
    switch (req->cmd)
ffff80000080eac4:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080eac8:	8b 52 04             	mov    edx,DWORD PTR [rdx+0x4]
ffff80000080eacb:	85 d2                	test   edx,edx
ffff80000080eacd:	74 0a                	je     ffff80000080ead9 <ramdisk_do_req+0xc6>
ffff80000080eacf:	83 fa 01             	cmp    edx,0x1
ffff80000080ead2:	74 52                	je     ffff80000080eb26 <ramdisk_do_req+0x113>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:41
        for(int i=0;i<len;i++){
            ramdisk_base[i + base]=req->buffer[i];
        }
        break;
    default:
        break;
ffff80000080ead4:	e9 99 00 00 00       	jmp    ffff80000080eb72 <ramdisk_do_req+0x15f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:31
        for(int i=0;i<len;i++){
ffff80000080ead9:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff80000080eae0:	eb 3a                	jmp    ffff80000080eb1c <ramdisk_do_req+0x109>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:32 (discriminator 3)
            req->buffer[i]=ramdisk_base[i + base];
ffff80000080eae2:	48 ba d8 ff ff ff ff 	movabs rdx,0xffffffffffffffd8
ffff80000080eae9:	ff ff ff 
ffff80000080eaec:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080eaf0:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080eaf3:	8b 75 fc             	mov    esi,DWORD PTR [rbp-0x4]
ffff80000080eaf6:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
ffff80000080eaf9:	01 f2                	add    edx,esi
ffff80000080eafb:	48 63 d2             	movsxd rdx,edx
ffff80000080eafe:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff80000080eb02:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080eb06:	48 8b 4a 28          	mov    rcx,QWORD PTR [rdx+0x28]
ffff80000080eb0a:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080eb0d:	48 63 d2             	movsxd rdx,edx
ffff80000080eb10:	48 01 d1             	add    rcx,rdx
ffff80000080eb13:	0f b6 16             	movzx  edx,BYTE PTR [rsi]
ffff80000080eb16:	88 11                	mov    BYTE PTR [rcx],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:31 (discriminator 3)
        for(int i=0;i<len;i++){
ffff80000080eb18:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:31 (discriminator 1)
ffff80000080eb1c:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080eb1f:	3b 55 f4             	cmp    edx,DWORD PTR [rbp-0xc]
ffff80000080eb22:	7c be                	jl     ffff80000080eae2 <ramdisk_do_req+0xcf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:34
        break;
ffff80000080eb24:	eb 4c                	jmp    ffff80000080eb72 <ramdisk_do_req+0x15f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:36
        for(int i=0;i<len;i++){
ffff80000080eb26:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
ffff80000080eb2d:	eb 3a                	jmp    ffff80000080eb69 <ramdisk_do_req+0x156>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:37 (discriminator 3)
            ramdisk_base[i + base]=req->buffer[i];
ffff80000080eb2f:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080eb33:	48 8b 4a 28          	mov    rcx,QWORD PTR [rdx+0x28]
ffff80000080eb37:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff80000080eb3a:	48 63 d2             	movsxd rdx,edx
ffff80000080eb3d:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff80000080eb41:	48 ba d8 ff ff ff ff 	movabs rdx,0xffffffffffffffd8
ffff80000080eb48:	ff ff ff 
ffff80000080eb4b:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080eb4f:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080eb52:	8b 7d f8             	mov    edi,DWORD PTR [rbp-0x8]
ffff80000080eb55:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
ffff80000080eb58:	01 fa                	add    edx,edi
ffff80000080eb5a:	48 63 d2             	movsxd rdx,edx
ffff80000080eb5d:	48 01 d1             	add    rcx,rdx
ffff80000080eb60:	0f b6 16             	movzx  edx,BYTE PTR [rsi]
ffff80000080eb63:	88 11                	mov    BYTE PTR [rcx],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:36 (discriminator 3)
        for(int i=0;i<len;i++){
ffff80000080eb65:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:36 (discriminator 1)
ffff80000080eb69:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffff80000080eb6c:	3b 55 f4             	cmp    edx,DWORD PTR [rbp-0xc]
ffff80000080eb6f:	7c be                	jl     ffff80000080eb2f <ramdisk_do_req+0x11c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:39
        break;
ffff80000080eb71:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:43
    }
    end_request(req->dev);
ffff80000080eb72:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080eb76:	0f b7 12             	movzx  edx,WORD PTR [rdx]
ffff80000080eb79:	0f b7 d2             	movzx  edx,dx
ffff80000080eb7c:	66 89 55 de          	mov    WORD PTR [rbp-0x22],dx
end_request():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:66
    int major=BLKDEV_MAJOR(dev);
ffff80000080eb80:	0f b7 55 de          	movzx  edx,WORD PTR [rbp-0x22]
ffff80000080eb84:	c1 fa 04             	sar    edx,0x4
ffff80000080eb87:	83 e2 0f             	and    edx,0xf
ffff80000080eb8a:	89 55 d8             	mov    DWORD PTR [rbp-0x28],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:67
    blk_devs[major].current_request->dev=-1;
ffff80000080eb8d:	48 ba 70 ff ff ff ff 	movabs rdx,0xffffffffffffff70
ffff80000080eb94:	ff ff ff 
ffff80000080eb97:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080eb9b:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
ffff80000080eb9e:	48 63 d2             	movsxd rdx,edx
ffff80000080eba1:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080eba5:	48 01 ca             	add    rdx,rcx
ffff80000080eba8:	48 83 c2 08          	add    rdx,0x8
ffff80000080ebac:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080ebaf:	66 c7 02 ff ff       	mov    WORD PTR [rdx],0xffff
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:68
    blk_devs[major].current_request=blk_devs[major].current_request->next;
ffff80000080ebb4:	48 ba 70 ff ff ff ff 	movabs rdx,0xffffffffffffff70
ffff80000080ebbb:	ff ff ff 
ffff80000080ebbe:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080ebc2:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
ffff80000080ebc5:	48 63 d2             	movsxd rdx,edx
ffff80000080ebc8:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080ebcc:	48 01 ca             	add    rdx,rcx
ffff80000080ebcf:	48 83 c2 08          	add    rdx,0x8
ffff80000080ebd3:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080ebd6:	48 8b 52 38          	mov    rdx,QWORD PTR [rdx+0x38]
ffff80000080ebda:	48 b9 70 ff ff ff ff 	movabs rcx,0xffffffffffffff70
ffff80000080ebe1:	ff ff ff 
ffff80000080ebe4:	48 8b 34 08          	mov    rsi,QWORD PTR [rax+rcx*1]
ffff80000080ebe8:	8b 4d d8             	mov    ecx,DWORD PTR [rbp-0x28]
ffff80000080ebeb:	48 63 c9             	movsxd rcx,ecx
ffff80000080ebee:	48 c1 e1 04          	shl    rcx,0x4
ffff80000080ebf2:	48 01 f1             	add    rcx,rsi
ffff80000080ebf5:	48 83 c1 08          	add    rcx,0x8
ffff80000080ebf9:	48 89 11             	mov    QWORD PTR [rcx],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:69
}
ffff80000080ebfc:	90                   	nop
ramdisk_do_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:44
    ramdisk_do_req(blk_devs[dev_ramdisk].current_request);
ffff80000080ebfd:	48 ba 78 fe ff ff ff 	movabs rdx,0xfffffffffffffe78
ffff80000080ec04:	ff ff ff 
ffff80000080ec07:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080ec0b:	8b 12                	mov    edx,DWORD PTR [rdx]
ffff80000080ec0d:	48 b9 70 ff ff ff ff 	movabs rcx,0xffffffffffffff70
ffff80000080ec14:	ff ff ff 
ffff80000080ec17:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080ec1b:	48 63 d2             	movsxd rdx,edx
ffff80000080ec1e:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080ec22:	48 01 ca             	add    rdx,rcx
ffff80000080ec25:	48 83 c2 08          	add    rdx,0x8
ffff80000080ec29:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080ec2c:	48 89 d7             	mov    rdi,rdx
ffff80000080ec2f:	48 ba 1b be ee ff ff 	movabs rdx,0xffffffffffeebe1b
ffff80000080ec36:	ff ff ff 
ffff80000080ec39:	48 8d 04 10          	lea    rax,[rax+rdx*1]
ffff80000080ec3d:	ff d0                	call   rax
ffff80000080ec3f:	eb 01                	jmp    ffff80000080ec42 <ramdisk_do_req+0x22f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:24
        return;
ffff80000080ec41:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:45
}
ffff80000080ec42:	c9                   	leave  
ffff80000080ec43:	c3                   	ret    

ffff80000080ec44 <init_ramdisk>:
init_ramdisk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:46
void init_ramdisk(){
ffff80000080ec44:	f3 0f 1e fa          	endbr64 
ffff80000080ec48:	55                   	push   rbp
ffff80000080ec49:	48 89 e5             	mov    rbp,rsp
ffff80000080ec4c:	41 57                	push   r15
ffff80000080ec4e:	41 54                	push   r12
ffff80000080ec50:	53                   	push   rbx
ffff80000080ec51:	48 83 ec 18          	sub    rsp,0x18
ffff80000080ec55:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080ec55 <init_ramdisk+0x11>
ffff80000080ec5c:	49 bb a3 3f 11 00 00 	movabs r11,0x113fa3
ffff80000080ec63:	00 00 00 
ffff80000080ec66:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:48
    //初始化ramdisk，在/dev下创建一个ram
    ramdisk_base= KNL_BASE+0x81000000;//(char *) kmallocat(0, 100);
ffff80000080ec69:	48 b8 d8 ff ff ff ff 	movabs rax,0xffffffffffffffd8
ffff80000080ec70:	ff ff ff 
ffff80000080ec73:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ec77:	48 be 00 00 00 81 00 	movabs rsi,0xffff800081000000
ffff80000080ec7e:	80 ff ff 
ffff80000080ec81:	48 89 30             	mov    QWORD PTR [rax],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:49
    if(ramdisk_base==-1){
ffff80000080ec84:	48 b8 d8 ff ff ff ff 	movabs rax,0xffffffffffffffd8
ffff80000080ec8b:	ff ff ff 
ffff80000080ec8e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ec92:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ec95:	48 83 f8 ff          	cmp    rax,0xffffffffffffffff
ffff80000080ec99:	75 2d                	jne    ffff80000080ecc8 <init_ramdisk+0x84>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:50
        comprintf("failed to init ramdisk.\n");
ffff80000080ec9b:	48 b8 aa d5 ff ff ff 	movabs rax,0xffffffffffffd5aa
ffff80000080eca2:	ff ff ff 
ffff80000080eca5:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080eca9:	48 89 c7             	mov    rdi,rax
ffff80000080ecac:	49 89 df             	mov    r15,rbx
ffff80000080ecaf:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080ecb4:	48 ba 3a 19 ef ff ff 	movabs rdx,0xffffffffffef193a
ffff80000080ecbb:	ff ff ff 
ffff80000080ecbe:	48 01 da             	add    rdx,rbx
ffff80000080ecc1:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:51
        return;
ffff80000080ecc3:	e9 a3 01 00 00       	jmp    ffff80000080ee6b <init_ramdisk+0x227>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:53
    }
    ramdisk_size= (char*)_binary_rd_img_end - (char*)_binary_rd_img_start;//PAGE_4K_SIZE*100;
ffff80000080ecc8:	48 b8 28 fd ff ff ff 	movabs rax,0xfffffffffffffd28
ffff80000080eccf:	ff ff ff 
ffff80000080ecd2:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ecd6:	48 89 c2             	mov    rdx,rax
ffff80000080ecd9:	48 b8 f8 fd ff ff ff 	movabs rax,0xfffffffffffffdf8
ffff80000080ece0:	ff ff ff 
ffff80000080ece3:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ece7:	48 29 c2             	sub    rdx,rax
ffff80000080ecea:	48 b8 50 fd ff ff ff 	movabs rax,0xfffffffffffffd50
ffff80000080ecf1:	ff ff ff 
ffff80000080ecf4:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ecf8:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:54
    if((dev_ramdisk=reg_blkdev(&bd_ramdisk))<0){
ffff80000080ecfb:	48 b8 80 ff ff ff ff 	movabs rax,0xffffffffffffff80
ffff80000080ed02:	ff ff ff 
ffff80000080ed05:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ed09:	48 89 c7             	mov    rdi,rax
ffff80000080ed0c:	49 89 df             	mov    r15,rbx
ffff80000080ed0f:	48 b8 7e c2 ee ff ff 	movabs rax,0xffffffffffeec27e
ffff80000080ed16:	ff ff ff 
ffff80000080ed19:	48 01 d8             	add    rax,rbx
ffff80000080ed1c:	ff d0                	call   rax
ffff80000080ed1e:	48 ba 78 fe ff ff ff 	movabs rdx,0xfffffffffffffe78
ffff80000080ed25:	ff ff ff 
ffff80000080ed28:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff80000080ed2c:	89 02                	mov    DWORD PTR [rdx],eax
ffff80000080ed2e:	48 b8 78 fe ff ff ff 	movabs rax,0xfffffffffffffe78
ffff80000080ed35:	ff ff ff 
ffff80000080ed38:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ed3c:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000080ed3e:	85 c0                	test   eax,eax
ffff80000080ed40:	79 2d                	jns    ffff80000080ed6f <init_ramdisk+0x12b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:55
        comprintf("no place for more blkdev.\n");
ffff80000080ed42:	48 b8 c3 d5 ff ff ff 	movabs rax,0xffffffffffffd5c3
ffff80000080ed49:	ff ff ff 
ffff80000080ed4c:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000080ed50:	48 89 c7             	mov    rdi,rax
ffff80000080ed53:	49 89 df             	mov    r15,rbx
ffff80000080ed56:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080ed5b:	48 ba 3a 19 ef ff ff 	movabs rdx,0xffffffffffef193a
ffff80000080ed62:	ff ff ff 
ffff80000080ed65:	48 01 da             	add    rdx,rbx
ffff80000080ed68:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:56
        return;
ffff80000080ed6a:	e9 fc 00 00 00       	jmp    ffff80000080ee6b <init_ramdisk+0x227>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:58
    }
    for(int i=0;i<(ramdisk_size+PAGE_4K_SIZE-1)/PAGE_4K_SIZE;i++){
ffff80000080ed6f:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
ffff80000080ed76:	e9 b8 00 00 00       	jmp    ffff80000080ee33 <init_ramdisk+0x1ef>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:59 (discriminator 3)
        smmap(pmalloc(PAGE_4K_SIZE),ramdisk_base+i*PAGE_4K_SIZE,PAGE_PRESENT|PAGE_RWX,PML4_ADDR);
ffff80000080ed7b:	48 b8 d8 ff ff ff ff 	movabs rax,0xffffffffffffffd8
ffff80000080ed82:	ff ff ff 
ffff80000080ed85:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ed89:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080ed8c:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080ed8f:	c1 e0 0c             	shl    eax,0xc
ffff80000080ed92:	48 98                	cdqe   
ffff80000080ed94:	48 01 d0             	add    rax,rdx
ffff80000080ed97:	49 89 c4             	mov    r12,rax
ffff80000080ed9a:	bf 00 10 00 00       	mov    edi,0x1000
ffff80000080ed9f:	49 89 df             	mov    r15,rbx
ffff80000080eda2:	48 b8 83 0a ee ff ff 	movabs rax,0xffffffffffee0a83
ffff80000080eda9:	ff ff ff 
ffff80000080edac:	48 01 d8             	add    rax,rbx
ffff80000080edaf:	ff d0                	call   rax
ffff80000080edb1:	48 89 c7             	mov    rdi,rax
ffff80000080edb4:	48 b8 00 10 10 00 00 	movabs rax,0xffff800000101000
ffff80000080edbb:	80 ff ff 
ffff80000080edbe:	48 89 c1             	mov    rcx,rax
ffff80000080edc1:	ba 03 00 00 00       	mov    edx,0x3
ffff80000080edc6:	4c 89 e6             	mov    rsi,r12
ffff80000080edc9:	49 89 df             	mov    r15,rbx
ffff80000080edcc:	48 b8 d4 f1 ed ff ff 	movabs rax,0xffffffffffedf1d4
ffff80000080edd3:	ff ff ff 
ffff80000080edd6:	48 01 d8             	add    rax,rbx
ffff80000080edd9:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:61 (discriminator 3)
        //解压img里面的test程序
        memcpy(ramdisk_base+i*PAGE_4K_SIZE, _binary_rd_img_start+i*PAGE_4K_SIZE,PAGE_4K_SIZE);
ffff80000080eddb:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080edde:	c1 e0 0c             	shl    eax,0xc
ffff80000080ede1:	48 63 d0             	movsxd rdx,eax
ffff80000080ede4:	48 b8 f8 fd ff ff ff 	movabs rax,0xfffffffffffffdf8
ffff80000080edeb:	ff ff ff 
ffff80000080edee:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080edf2:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
ffff80000080edf6:	48 b8 d8 ff ff ff ff 	movabs rax,0xffffffffffffffd8
ffff80000080edfd:	ff ff ff 
ffff80000080ee00:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ee04:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080ee07:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080ee0a:	c1 e0 0c             	shl    eax,0xc
ffff80000080ee0d:	48 98                	cdqe   
ffff80000080ee0f:	48 01 d0             	add    rax,rdx
ffff80000080ee12:	ba 00 10 00 00       	mov    edx,0x1000
ffff80000080ee17:	48 89 ce             	mov    rsi,rcx
ffff80000080ee1a:	48 89 c7             	mov    rdi,rax
ffff80000080ee1d:	49 89 df             	mov    r15,rbx
ffff80000080ee20:	48 b8 da 1d ef ff ff 	movabs rax,0xffffffffffef1dda
ffff80000080ee27:	ff ff ff 
ffff80000080ee2a:	48 01 d8             	add    rax,rbx
ffff80000080ee2d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:58 (discriminator 3)
    for(int i=0;i<(ramdisk_size+PAGE_4K_SIZE-1)/PAGE_4K_SIZE;i++){
ffff80000080ee2f:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:58 (discriminator 1)
ffff80000080ee33:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000080ee36:	48 63 d0             	movsxd rdx,eax
ffff80000080ee39:	48 b8 50 fd ff ff ff 	movabs rax,0xfffffffffffffd50
ffff80000080ee40:	ff ff ff 
ffff80000080ee43:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ee47:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080ee4a:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff80000080ee50:	48 8d 88 ff 0f 00 00 	lea    rcx,[rax+0xfff]
ffff80000080ee57:	48 85 c0             	test   rax,rax
ffff80000080ee5a:	48 0f 48 c1          	cmovs  rax,rcx
ffff80000080ee5e:	48 c1 f8 0c          	sar    rax,0xc
ffff80000080ee62:	48 39 c2             	cmp    rdx,rax
ffff80000080ee65:	0f 8c 10 ff ff ff    	jl     ffff80000080ed7b <init_ramdisk+0x137>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/ramdisk.c:65

    }
    
}
ffff80000080ee6b:	48 83 c4 18          	add    rsp,0x18
ffff80000080ee6f:	5b                   	pop    rbx
ffff80000080ee70:	41 5c                	pop    r12
ffff80000080ee72:	41 5f                	pop    r15
ffff80000080ee74:	5d                   	pop    rbp
ffff80000080ee75:	c3                   	ret    

ffff80000080ee76 <reg_blkdev>:
reg_blkdev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:5
#include <blk_dev.h>
#include <errno.h>
struct blk_dev blk_devs[MAX_BLKDEVS];
struct request requests[MAX_REQUESTS];
int reg_blkdev(struct blk_dev* dev){
ffff80000080ee76:	f3 0f 1e fa          	endbr64 
ffff80000080ee7a:	55                   	push   rbp
ffff80000080ee7b:	48 89 e5             	mov    rbp,rsp
ffff80000080ee7e:	53                   	push   rbx
ffff80000080ee7f:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080ee7f <reg_blkdev+0x9>
ffff80000080ee86:	49 bb 79 3d 11 00 00 	movabs r11,0x113d79
ffff80000080ee8d:	00 00 00 
ffff80000080ee90:	4c 01 d8             	add    rax,r11
ffff80000080ee93:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:6
    for(int i=0;i<MAX_BLKDEVS;i++){
ffff80000080ee97:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
ffff80000080ee9e:	e9 80 00 00 00       	jmp    ffff80000080ef23 <reg_blkdev+0xad>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:7
        if(blk_devs[i].do_request)continue;
ffff80000080eea3:	48 ba 70 ff ff ff ff 	movabs rdx,0xffffffffffffff70
ffff80000080eeaa:	ff ff ff 
ffff80000080eead:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080eeb1:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff80000080eeb4:	48 63 d2             	movsxd rdx,edx
ffff80000080eeb7:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080eebb:	48 01 ca             	add    rdx,rcx
ffff80000080eebe:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080eec1:	48 85 d2             	test   rdx,rdx
ffff80000080eec4:	75 58                	jne    ffff80000080ef1e <reg_blkdev+0xa8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:8
        blk_devs[i]=*dev;
ffff80000080eec6:	48 ba 70 ff ff ff ff 	movabs rdx,0xffffffffffffff70
ffff80000080eecd:	ff ff ff 
ffff80000080eed0:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080eed4:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff80000080eed7:	48 63 d2             	movsxd rdx,edx
ffff80000080eeda:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080eede:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff80000080eee2:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080eee6:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000080eee9:	48 8b 5a 08          	mov    rbx,QWORD PTR [rdx+0x8]
ffff80000080eeed:	48 89 0e             	mov    QWORD PTR [rsi],rcx
ffff80000080eef0:	48 89 5e 08          	mov    QWORD PTR [rsi+0x8],rbx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:9
        blk_devs[i].current_request=NULL;
ffff80000080eef4:	48 ba 70 ff ff ff ff 	movabs rdx,0xffffffffffffff70
ffff80000080eefb:	ff ff ff 
ffff80000080eefe:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080ef02:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffff80000080ef05:	48 98                	cdqe   
ffff80000080ef07:	48 c1 e0 04          	shl    rax,0x4
ffff80000080ef0b:	48 01 d0             	add    rax,rdx
ffff80000080ef0e:	48 83 c0 08          	add    rax,0x8
ffff80000080ef12:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:10
        return i;
ffff80000080ef19:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffff80000080ef1c:	eb 14                	jmp    ffff80000080ef32 <reg_blkdev+0xbc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:7
        if(blk_devs[i].do_request)continue;
ffff80000080ef1e:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:6
    for(int i=0;i<MAX_BLKDEVS;i++){
ffff80000080ef1f:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:6 (discriminator 1)
ffff80000080ef23:	83 7d f4 0b          	cmp    DWORD PTR [rbp-0xc],0xb
ffff80000080ef27:	0f 8e 76 ff ff ff    	jle    ffff80000080eea3 <reg_blkdev+0x2d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:12
    }
    return -ENOMEM;
ffff80000080ef2d:	b8 cf ff ff ff       	mov    eax,0xffffffcf
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:13
}
ffff80000080ef32:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
ffff80000080ef36:	c9                   	leave  
ffff80000080ef37:	c3                   	ret    

ffff80000080ef38 <unreg_blkdev>:
unreg_blkdev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:14
int unreg_blkdev(unsigned short dev){
ffff80000080ef38:	f3 0f 1e fa          	endbr64 
ffff80000080ef3c:	55                   	push   rbp
ffff80000080ef3d:	48 89 e5             	mov    rbp,rsp
ffff80000080ef40:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080ef40 <unreg_blkdev+0x8>
ffff80000080ef47:	49 bb b8 3c 11 00 00 	movabs r11,0x113cb8
ffff80000080ef4e:	00 00 00 
ffff80000080ef51:	4c 01 d8             	add    rax,r11
ffff80000080ef54:	89 fa                	mov    edx,edi
ffff80000080ef56:	66 89 55 fc          	mov    WORD PTR [rbp-0x4],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:15
    if(blk_devs[dev].current_request)
ffff80000080ef5a:	0f b7 55 fc          	movzx  edx,WORD PTR [rbp-0x4]
ffff80000080ef5e:	48 b9 70 ff ff ff ff 	movabs rcx,0xffffffffffffff70
ffff80000080ef65:	ff ff ff 
ffff80000080ef68:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080ef6c:	48 63 d2             	movsxd rdx,edx
ffff80000080ef6f:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080ef73:	48 01 ca             	add    rdx,rcx
ffff80000080ef76:	48 83 c2 08          	add    rdx,0x8
ffff80000080ef7a:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080ef7d:	48 85 d2             	test   rdx,rdx
ffff80000080ef80:	74 07                	je     ffff80000080ef89 <unreg_blkdev+0x51>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:16
        return -EBUSY;//设备还有没完成的请求
ffff80000080ef82:	b8 f6 ff ff ff       	mov    eax,0xfffffff6
ffff80000080ef87:	eb 23                	jmp    ffff80000080efac <unreg_blkdev+0x74>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:17
    blk_devs[dev].do_request=0;//清除
ffff80000080ef89:	0f b7 55 fc          	movzx  edx,WORD PTR [rbp-0x4]
ffff80000080ef8d:	48 b9 70 ff ff ff ff 	movabs rcx,0xffffffffffffff70
ffff80000080ef94:	ff ff ff 
ffff80000080ef97:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080ef9b:	48 63 c2             	movsxd rax,edx
ffff80000080ef9e:	48 c1 e0 04          	shl    rax,0x4
ffff80000080efa2:	48 01 c8             	add    rax,rcx
ffff80000080efa5:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:18
}
ffff80000080efac:	5d                   	pop    rbp
ffff80000080efad:	c3                   	ret    

ffff80000080efae <make_request>:
make_request():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:19
int make_request(unsigned short dev,int cmd,unsigned long sector, unsigned long count,char * buffer){
ffff80000080efae:	f3 0f 1e fa          	endbr64 
ffff80000080efb2:	55                   	push   rbp
ffff80000080efb3:	48 89 e5             	mov    rbp,rsp
ffff80000080efb6:	48 83 ec 40          	sub    rsp,0x40
ffff80000080efba:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080efba <make_request+0xc>
ffff80000080efc1:	49 bb 3e 3c 11 00 00 	movabs r11,0x113c3e
ffff80000080efc8:	00 00 00 
ffff80000080efcb:	4c 01 d8             	add    rax,r11
ffff80000080efce:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080efd1:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
ffff80000080efd5:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
ffff80000080efd9:	4c 89 45 c0          	mov    QWORD PTR [rbp-0x40],r8
ffff80000080efdd:	89 fa                	mov    edx,edi
ffff80000080efdf:	66 89 55 dc          	mov    WORD PTR [rbp-0x24],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:20
    struct blk_dev* d=&blk_devs[BLKDEV_MAJOR(dev)];
ffff80000080efe3:	0f b7 55 dc          	movzx  edx,WORD PTR [rbp-0x24]
ffff80000080efe7:	c1 fa 04             	sar    edx,0x4
ffff80000080efea:	83 e2 0f             	and    edx,0xf
ffff80000080efed:	48 63 d2             	movsxd rdx,edx
ffff80000080eff0:	48 89 d1             	mov    rcx,rdx
ffff80000080eff3:	48 c1 e1 04          	shl    rcx,0x4
ffff80000080eff7:	48 ba 70 ff ff ff ff 	movabs rdx,0xffffffffffffff70
ffff80000080effe:	ff ff ff 
ffff80000080f001:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080f005:	48 01 ca             	add    rdx,rcx
ffff80000080f008:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:21
    if(!d->do_request)
ffff80000080f00c:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000080f010:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080f013:	48 85 d2             	test   rdx,rdx
ffff80000080f016:	75 0a                	jne    ffff80000080f022 <make_request+0x74>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:22
        return -ENODEV;//没有这个设备
ffff80000080f018:	b8 d4 ff ff ff       	mov    eax,0xffffffd4
ffff80000080f01d:	e9 53 01 00 00       	jmp    ffff80000080f175 <make_request+0x1c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:24
    //找一个空的请求
    struct request* req=NULL;
ffff80000080f022:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffff80000080f029:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:25
    for(int i=0;i<MAX_REQUESTS;i++){
ffff80000080f02a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
ffff80000080f031:	eb 4c                	jmp    ffff80000080f07f <make_request+0xd1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:26
        if(requests[i].dev==(unsigned short)-1){
ffff80000080f033:	48 ba 88 fd ff ff ff 	movabs rdx,0xfffffffffffffd88
ffff80000080f03a:	ff ff ff 
ffff80000080f03d:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080f041:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff80000080f044:	48 63 d2             	movsxd rdx,edx
ffff80000080f047:	48 c1 e2 06          	shl    rdx,0x6
ffff80000080f04b:	48 01 ca             	add    rdx,rcx
ffff80000080f04e:	0f b7 12             	movzx  edx,WORD PTR [rdx]
ffff80000080f051:	66 83 fa ff          	cmp    dx,0xffff
ffff80000080f055:	75 24                	jne    ffff80000080f07b <make_request+0xcd>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:27
            req=requests+i;
ffff80000080f057:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffff80000080f05a:	48 63 d2             	movsxd rdx,edx
ffff80000080f05d:	48 89 d1             	mov    rcx,rdx
ffff80000080f060:	48 c1 e1 06          	shl    rcx,0x6
ffff80000080f064:	48 ba 88 fd ff ff ff 	movabs rdx,0xfffffffffffffd88
ffff80000080f06b:	ff ff ff 
ffff80000080f06e:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080f072:	48 01 ca             	add    rdx,rcx
ffff80000080f075:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:28
            break;
ffff80000080f079:	eb 0a                	jmp    ffff80000080f085 <make_request+0xd7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:25 (discriminator 2)
    for(int i=0;i<MAX_REQUESTS;i++){
ffff80000080f07b:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:25 (discriminator 1)
ffff80000080f07f:	83 7d f4 3f          	cmp    DWORD PTR [rbp-0xc],0x3f
ffff80000080f083:	7e ae                	jle    ffff80000080f033 <make_request+0x85>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:32
        }
    }
    //下面的处理不太好。感觉最好是等到有空位置为止。
    if(!req)
ffff80000080f085:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffff80000080f08a:	75 0a                	jne    ffff80000080f096 <make_request+0xe8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:33
        return -ENOMEM;//没有空的请求位置。
ffff80000080f08c:	b8 cf ff ff ff       	mov    eax,0xffffffcf
ffff80000080f091:	e9 df 00 00 00       	jmp    ffff80000080f175 <make_request+0x1c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:38
    /*
    检查有没有请求正在运行，有的话接到后面，没有的话直接接上去，前面请求完成之后顺着链表下一个，
    这样就能保证所有请求都可以被访问到。
    */
    req->dev=dev;
ffff80000080f096:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080f09a:	0f b7 4d dc          	movzx  ecx,WORD PTR [rbp-0x24]
ffff80000080f09e:	66 89 0a             	mov    WORD PTR [rdx],cx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:39
    req->cmd=cmd;
ffff80000080f0a1:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080f0a5:	8b 4d d8             	mov    ecx,DWORD PTR [rbp-0x28]
ffff80000080f0a8:	89 4a 04             	mov    DWORD PTR [rdx+0x4],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:40
    req->buffer=buffer;
ffff80000080f0ab:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080f0af:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
ffff80000080f0b3:	48 89 4a 28          	mov    QWORD PTR [rdx+0x28],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:41
    req->count=count;
ffff80000080f0b7:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080f0bb:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
ffff80000080f0bf:	48 89 4a 20          	mov    QWORD PTR [rdx+0x20],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:42
    req->next=NULL;
ffff80000080f0c3:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080f0c7:	48 c7 42 38 00 00 00 	mov    QWORD PTR [rdx+0x38],0x0
ffff80000080f0ce:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:43
    req->nr_sectors=TO_SECN(count);
ffff80000080f0cf:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff80000080f0d3:	48 81 c2 ff 01 00 00 	add    rdx,0x1ff
ffff80000080f0da:	48 89 d1             	mov    rcx,rdx
ffff80000080f0dd:	48 c1 e9 09          	shr    rcx,0x9
ffff80000080f0e1:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080f0e5:	48 89 4a 18          	mov    QWORD PTR [rdx+0x18],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:44
    req->sector=sector;
ffff80000080f0e9:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080f0ed:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffff80000080f0f1:	48 89 4a 10          	mov    QWORD PTR [rdx+0x10],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:45
    req->waiting=current;
ffff80000080f0f5:	48 ba 48 fe ff ff ff 	movabs rdx,0xfffffffffffffe48
ffff80000080f0fc:	ff ff ff 
ffff80000080f0ff:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080f103:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080f106:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff80000080f10a:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:47
    //这里可能不需要阻塞进程，有的设备不需要阻塞。    
    if(!d->current_request)
ffff80000080f10e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080f112:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080f116:	48 85 c0             	test   rax,rax
ffff80000080f119:	75 22                	jne    ffff80000080f13d <make_request+0x18f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:49
    {
        d->current_request=req;
ffff80000080f11b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080f11f:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080f123:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:50
        d->do_request(d->current_request);
ffff80000080f127:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080f12b:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080f12e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080f132:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080f136:	48 89 c7             	mov    rdi,rax
ffff80000080f139:	ff d2                	call   rdx
ffff80000080f13b:	eb 33                	jmp    ffff80000080f170 <make_request+0x1c2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:52
    }else{
        struct request* rp=d->current_request;
ffff80000080f13d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080f141:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff80000080f145:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:53
        for(;rp->next;rp=rp->next);
ffff80000080f149:	eb 0c                	jmp    ffff80000080f157 <make_request+0x1a9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:53 (discriminator 2)
ffff80000080f14b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080f14f:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff80000080f153:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:53 (discriminator 1)
ffff80000080f157:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080f15b:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff80000080f15f:	48 85 c0             	test   rax,rax
ffff80000080f162:	75 e7                	jne    ffff80000080f14b <make_request+0x19d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:54
        rp->next=req;
ffff80000080f164:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080f168:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffff80000080f16c:	48 89 50 38          	mov    QWORD PTR [rax+0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:56
    }
    return 1;
ffff80000080f170:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:57
}
ffff80000080f175:	c9                   	leave  
ffff80000080f176:	c3                   	ret    

ffff80000080f177 <init_blkdev>:
init_blkdev():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:58
void init_blkdev(void){
ffff80000080f177:	f3 0f 1e fa          	endbr64 
ffff80000080f17b:	55                   	push   rbp
ffff80000080f17c:	48 89 e5             	mov    rbp,rsp
ffff80000080f17f:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080f17f <init_blkdev+0x8>
ffff80000080f186:	49 bb 79 3a 11 00 00 	movabs r11,0x113a79
ffff80000080f18d:	00 00 00 
ffff80000080f190:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:59
    for(int i=0;i<MAX_REQUESTS;i++){
ffff80000080f193:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff80000080f19a:	eb 24                	jmp    ffff80000080f1c0 <init_blkdev+0x49>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:60 (discriminator 3)
        requests[i].dev=-1;
ffff80000080f19c:	48 ba 88 fd ff ff ff 	movabs rdx,0xfffffffffffffd88
ffff80000080f1a3:	ff ff ff 
ffff80000080f1a6:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080f1aa:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080f1ad:	48 63 d2             	movsxd rdx,edx
ffff80000080f1b0:	48 c1 e2 06          	shl    rdx,0x6
ffff80000080f1b4:	48 01 ca             	add    rdx,rcx
ffff80000080f1b7:	66 c7 02 ff ff       	mov    WORD PTR [rdx],0xffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:59 (discriminator 3)
    for(int i=0;i<MAX_REQUESTS;i++){
ffff80000080f1bc:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:59 (discriminator 1)
ffff80000080f1c0:	83 7d fc 3f          	cmp    DWORD PTR [rbp-0x4],0x3f
ffff80000080f1c4:	7e d6                	jle    ffff80000080f19c <init_blkdev+0x25>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_dev.c:62
    }
ffff80000080f1c6:	90                   	nop
ffff80000080f1c7:	90                   	nop
ffff80000080f1c8:	5d                   	pop    rbp
ffff80000080f1c9:	c3                   	ret    

ffff80000080f1ca <init_blkbuf>:
init_blkbuf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:9
#include <errno.h>
#include <memory.h>
buffer_head l_buffer_heads[MAX_BUFFERHEADS];
//这个存储的是各个块设备映射的缓冲区链表中的头
buffer_head* l_blk_bh_heads[MAX_BLKDEVS];
void init_blkbuf(){
ffff80000080f1ca:	f3 0f 1e fa          	endbr64 
ffff80000080f1ce:	55                   	push   rbp
ffff80000080f1cf:	48 89 e5             	mov    rbp,rsp
ffff80000080f1d2:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080f1d2 <init_blkbuf+0x8>
ffff80000080f1d9:	49 bb 26 3a 11 00 00 	movabs r11,0x113a26
ffff80000080f1e0:	00 00 00 
ffff80000080f1e3:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:10
    for(int i=0;i<MAX_BUFFERHEADS;i++){
ffff80000080f1e6:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff80000080f1ed:	eb 44                	jmp    ffff80000080f233 <init_blkbuf+0x69>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:11 (discriminator 3)
        l_buffer_heads[i].dev=-1;
ffff80000080f1ef:	48 ba 70 fd ff ff ff 	movabs rdx,0xfffffffffffffd70
ffff80000080f1f6:	ff ff ff 
ffff80000080f1f9:	48 8b 0c 10          	mov    rcx,QWORD PTR [rax+rdx*1]
ffff80000080f1fd:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080f200:	48 63 d2             	movsxd rdx,edx
ffff80000080f203:	48 c1 e2 06          	shl    rdx,0x6
ffff80000080f207:	48 01 ca             	add    rdx,rcx
ffff80000080f20a:	48 83 c2 10          	add    rdx,0x10
ffff80000080f20e:	66 c7 02 ff ff       	mov    WORD PTR [rdx],0xffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:12 (discriminator 3)
        l_blk_bh_heads[i]=NULL;
ffff80000080f213:	48 ba 88 fe ff ff ff 	movabs rdx,0xfffffffffffffe88
ffff80000080f21a:	ff ff ff 
ffff80000080f21d:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080f221:	8b 4d fc             	mov    ecx,DWORD PTR [rbp-0x4]
ffff80000080f224:	48 63 c9             	movsxd rcx,ecx
ffff80000080f227:	48 c7 04 ca 00 00 00 	mov    QWORD PTR [rdx+rcx*8],0x0
ffff80000080f22e:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:10 (discriminator 3)
    for(int i=0;i<MAX_BUFFERHEADS;i++){
ffff80000080f22f:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:10 (discriminator 1)
ffff80000080f233:	83 7d fc 7f          	cmp    DWORD PTR [rbp-0x4],0x7f
ffff80000080f237:	7e b6                	jle    ffff80000080f1ef <init_blkbuf+0x25>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:14
    }
}
ffff80000080f239:	90                   	nop
ffff80000080f23a:	90                   	nop
ffff80000080f23b:	5d                   	pop    rbp
ffff80000080f23c:	c3                   	ret    

ffff80000080f23d <bget>:
bget():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:15
buffer_head *bget(){
ffff80000080f23d:	f3 0f 1e fa          	endbr64 
ffff80000080f241:	55                   	push   rbp
ffff80000080f242:	48 89 e5             	mov    rbp,rsp
ffff80000080f245:	41 57                	push   r15
ffff80000080f247:	53                   	push   rbx
ffff80000080f248:	48 83 ec 10          	sub    rsp,0x10
ffff80000080f24c:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080f24c <bget+0xf>
ffff80000080f253:	49 bb ac 39 11 00 00 	movabs r11,0x1139ac
ffff80000080f25a:	00 00 00 
ffff80000080f25d:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:16
    for(int i=0;i<MAX_BUFFERHEADS;i++){
ffff80000080f260:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff80000080f267:	e9 f3 00 00 00       	jmp    ffff80000080f35f <bget+0x122>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:17
        if(l_buffer_heads[i].dev==(unsigned short)-1)
ffff80000080f26c:	48 b8 70 fd ff ff ff 	movabs rax,0xfffffffffffffd70
ffff80000080f273:	ff ff ff 
ffff80000080f276:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff80000080f27a:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080f27d:	48 98                	cdqe   
ffff80000080f27f:	48 c1 e0 06          	shl    rax,0x6
ffff80000080f283:	48 01 d0             	add    rax,rdx
ffff80000080f286:	48 83 c0 10          	add    rax,0x10
ffff80000080f28a:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff80000080f28d:	66 83 f8 ff          	cmp    ax,0xffff
ffff80000080f291:	0f 85 c4 00 00 00    	jne    ffff80000080f35b <bget+0x11e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:19
        {
            l_buffer_heads[i].data=kmalloc(0,PAGE_4K_SIZE);
ffff80000080f297:	be 00 10 00 00       	mov    esi,0x1000
ffff80000080f29c:	bf 00 00 00 00       	mov    edi,0x0
ffff80000080f2a1:	49 89 df             	mov    r15,rbx
ffff80000080f2a4:	48 b8 ce 07 ee ff ff 	movabs rax,0xffffffffffee07ce
ffff80000080f2ab:	ff ff ff 
ffff80000080f2ae:	48 01 d8             	add    rax,rbx
ffff80000080f2b1:	ff d0                	call   rax
ffff80000080f2b3:	48 ba 70 fd ff ff ff 	movabs rdx,0xfffffffffffffd70
ffff80000080f2ba:	ff ff ff 
ffff80000080f2bd:	48 8b 0c 13          	mov    rcx,QWORD PTR [rbx+rdx*1]
ffff80000080f2c1:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080f2c4:	48 63 d2             	movsxd rdx,edx
ffff80000080f2c7:	48 c1 e2 06          	shl    rdx,0x6
ffff80000080f2cb:	48 01 ca             	add    rdx,rcx
ffff80000080f2ce:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:20
            l_buffer_heads[i].count=0;
ffff80000080f2d1:	48 b8 70 fd ff ff ff 	movabs rax,0xfffffffffffffd70
ffff80000080f2d8:	ff ff ff 
ffff80000080f2db:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff80000080f2df:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080f2e2:	48 98                	cdqe   
ffff80000080f2e4:	48 c1 e0 06          	shl    rax,0x6
ffff80000080f2e8:	48 01 d0             	add    rax,rdx
ffff80000080f2eb:	48 83 c0 14          	add    rax,0x14
ffff80000080f2ef:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:21
            l_buffer_heads[i].next=NULL;
ffff80000080f2f2:	48 b8 70 fd ff ff ff 	movabs rax,0xfffffffffffffd70
ffff80000080f2f9:	ff ff ff 
ffff80000080f2fc:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff80000080f300:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080f303:	48 98                	cdqe   
ffff80000080f305:	48 c1 e0 06          	shl    rax,0x6
ffff80000080f309:	48 01 d0             	add    rax,rdx
ffff80000080f30c:	48 83 c0 28          	add    rax,0x28
ffff80000080f310:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:22
            l_buffer_heads[i].prev=NULL;
ffff80000080f317:	48 b8 70 fd ff ff ff 	movabs rax,0xfffffffffffffd70
ffff80000080f31e:	ff ff ff 
ffff80000080f321:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff80000080f325:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080f328:	48 98                	cdqe   
ffff80000080f32a:	48 c1 e0 06          	shl    rax,0x6
ffff80000080f32e:	48 01 d0             	add    rax,rdx
ffff80000080f331:	48 83 c0 20          	add    rax,0x20
ffff80000080f335:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:23
            return l_buffer_heads+i;
ffff80000080f33c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000080f33f:	48 98                	cdqe   
ffff80000080f341:	48 c1 e0 06          	shl    rax,0x6
ffff80000080f345:	48 89 c2             	mov    rdx,rax
ffff80000080f348:	48 b8 70 fd ff ff ff 	movabs rax,0xfffffffffffffd70
ffff80000080f34f:	ff ff ff 
ffff80000080f352:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080f356:	48 01 d0             	add    rax,rdx
ffff80000080f359:	eb 13                	jmp    ffff80000080f36e <bget+0x131>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:16 (discriminator 2)
    for(int i=0;i<MAX_BUFFERHEADS;i++){
ffff80000080f35b:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:16 (discriminator 1)
ffff80000080f35f:	83 7d ec 7f          	cmp    DWORD PTR [rbp-0x14],0x7f
ffff80000080f363:	0f 8e 03 ff ff ff    	jle    ffff80000080f26c <bget+0x2f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:27
        }
    }
    //errno = -ENOBUF
    return NULL;
ffff80000080f369:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:28
}
ffff80000080f36e:	48 83 c4 10          	add    rsp,0x10
ffff80000080f372:	5b                   	pop    rbx
ffff80000080f373:	41 5f                	pop    r15
ffff80000080f375:	5d                   	pop    rbp
ffff80000080f376:	c3                   	ret    

ffff80000080f377 <get_block>:
get_block():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:30

buffer_head *get_block(unsigned short dev,int blocknr){
ffff80000080f377:	f3 0f 1e fa          	endbr64 
ffff80000080f37b:	55                   	push   rbp
ffff80000080f37c:	48 89 e5             	mov    rbp,rsp
ffff80000080f37f:	41 57                	push   r15
ffff80000080f381:	53                   	push   rbx
ffff80000080f382:	48 83 ec 20          	sub    rsp,0x20
ffff80000080f386:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080f386 <get_block+0xf>
ffff80000080f38d:	49 bb 72 38 11 00 00 	movabs r11,0x113872
ffff80000080f394:	00 00 00 
ffff80000080f397:	4c 01 db             	add    rbx,r11
ffff80000080f39a:	89 f8                	mov    eax,edi
ffff80000080f39c:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080f39f:	66 89 45 dc          	mov    WORD PTR [rbp-0x24],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:31
    buffer_head *bh=l_blk_bh_heads[BLKDEV_MAJOR(dev)];
ffff80000080f3a3:	0f b7 45 dc          	movzx  eax,WORD PTR [rbp-0x24]
ffff80000080f3a7:	c1 f8 04             	sar    eax,0x4
ffff80000080f3aa:	83 e0 0f             	and    eax,0xf
ffff80000080f3ad:	89 c2                	mov    edx,eax
ffff80000080f3af:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff80000080f3b6:	ff ff ff 
ffff80000080f3b9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080f3bd:	48 63 d2             	movsxd rdx,edx
ffff80000080f3c0:	48 8b 04 d0          	mov    rax,QWORD PTR [rax+rdx*8]
ffff80000080f3c4:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:32
    if(!bh){
ffff80000080f3c8:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080f3cd:	75 7c                	jne    ffff80000080f44b <get_block+0xd4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:34
        //这个设备没有任何的缓冲区
        bh=bget();
ffff80000080f3cf:	49 89 df             	mov    r15,rbx
ffff80000080f3d2:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080f3d7:	48 ba 45 c6 ee ff ff 	movabs rdx,0xffffffffffeec645
ffff80000080f3de:	ff ff ff 
ffff80000080f3e1:	48 01 da             	add    rdx,rbx
ffff80000080f3e4:	ff d2                	call   rdx
ffff80000080f3e6:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:35
        if(!bh){
ffff80000080f3ea:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080f3ef:	75 0a                	jne    ffff80000080f3fb <get_block+0x84>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:37
            //errno=-ENOBUFS
            return NULL;
ffff80000080f3f1:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080f3f6:	e9 f0 00 00 00       	jmp    ffff80000080f4eb <get_block+0x174>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:39
        }
        bh->dev=dev;
ffff80000080f3fb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080f3ff:	0f b7 55 dc          	movzx  edx,WORD PTR [rbp-0x24]
ffff80000080f403:	66 89 50 10          	mov    WORD PTR [rax+0x10],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:40
        bh->blocknr=blocknr;
ffff80000080f407:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080f40a:	48 63 d0             	movsxd rdx,eax
ffff80000080f40d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080f411:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:41
        l_blk_bh_heads[BLKDEV_MAJOR(dev)]=bh;
ffff80000080f415:	0f b7 45 dc          	movzx  eax,WORD PTR [rbp-0x24]
ffff80000080f419:	c1 f8 04             	sar    eax,0x4
ffff80000080f41c:	83 e0 0f             	and    eax,0xf
ffff80000080f41f:	89 c2                	mov    edx,eax
ffff80000080f421:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff80000080f428:	ff ff ff 
ffff80000080f42b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080f42f:	48 63 d2             	movsxd rdx,edx
ffff80000080f432:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff80000080f436:	48 89 0c d0          	mov    QWORD PTR [rax+rdx*8],rcx
ffff80000080f43a:	e9 96 00 00 00       	jmp    ffff80000080f4d5 <get_block+0x15e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:43 (discriminator 3)
    }else{
        for(;bh->next&&bh->blocknr!=blocknr;bh=bh->next);
ffff80000080f43f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080f443:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080f447:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:43 (discriminator 1)
ffff80000080f44b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080f44f:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080f453:	48 85 c0             	test   rax,rax
ffff80000080f456:	74 12                	je     ffff80000080f46a <get_block+0xf3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:43 (discriminator 2)
ffff80000080f458:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080f45c:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff80000080f460:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080f463:	48 98                	cdqe   
ffff80000080f465:	48 39 c2             	cmp    rdx,rax
ffff80000080f468:	75 d5                	jne    ffff80000080f43f <get_block+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:44
        if(bh->blocknr!=blocknr)
ffff80000080f46a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080f46e:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffff80000080f472:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080f475:	48 98                	cdqe   
ffff80000080f477:	48 39 c2             	cmp    rdx,rax
ffff80000080f47a:	74 59                	je     ffff80000080f4d5 <get_block+0x15e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:48
        {
            //这块数据没有缓冲
            //这个时候肯定处于链表最后一个了
            bh->next=bget();
ffff80000080f47c:	49 89 df             	mov    r15,rbx
ffff80000080f47f:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080f484:	48 ba 45 c6 ee ff ff 	movabs rdx,0xffffffffffeec645
ffff80000080f48b:	ff ff ff 
ffff80000080f48e:	48 01 da             	add    rdx,rbx
ffff80000080f491:	ff d2                	call   rdx
ffff80000080f493:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080f497:	48 89 42 28          	mov    QWORD PTR [rdx+0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:49
            buffer_head *bhn=bh->next;
ffff80000080f49b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080f49f:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080f4a3:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:50
            bhn->prev=bh;
ffff80000080f4a7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080f4ab:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080f4af:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:51
            bh=bhn;
ffff80000080f4b3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080f4b7:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:52
            bh->dev=dev;
ffff80000080f4bb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080f4bf:	0f b7 55 dc          	movzx  edx,WORD PTR [rbp-0x24]
ffff80000080f4c3:	66 89 50 10          	mov    WORD PTR [rax+0x10],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:53
            bh->blocknr=blocknr;
ffff80000080f4c7:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080f4ca:	48 63 d0             	movsxd rdx,eax
ffff80000080f4cd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080f4d1:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:57
        }
    }
    //TODO 等待缓冲解锁
    bh->count++;
ffff80000080f4d5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080f4d9:	0f b6 40 14          	movzx  eax,BYTE PTR [rax+0x14]
ffff80000080f4dd:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080f4e0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080f4e4:	88 50 14             	mov    BYTE PTR [rax+0x14],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:58
    return bh;
ffff80000080f4e7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:59
}
ffff80000080f4eb:	48 83 c4 20          	add    rsp,0x20
ffff80000080f4ef:	5b                   	pop    rbx
ffff80000080f4f0:	41 5f                	pop    r15
ffff80000080f4f2:	5d                   	pop    rbp
ffff80000080f4f3:	c3                   	ret    

ffff80000080f4f4 <bread>:
bread():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:61
//从指定的块设备中读取一块数据，然后返回这块数据。
buffer_head* bread(unsigned short dev,int blkn){
ffff80000080f4f4:	f3 0f 1e fa          	endbr64 
ffff80000080f4f8:	55                   	push   rbp
ffff80000080f4f9:	48 89 e5             	mov    rbp,rsp
ffff80000080f4fc:	41 57                	push   r15
ffff80000080f4fe:	53                   	push   rbx
ffff80000080f4ff:	48 83 ec 20          	sub    rsp,0x20
ffff80000080f503:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080f503 <bread+0xf>
ffff80000080f50a:	49 bb f5 36 11 00 00 	movabs r11,0x1136f5
ffff80000080f511:	00 00 00 
ffff80000080f514:	4c 01 db             	add    rbx,r11
ffff80000080f517:	89 f8                	mov    eax,edi
ffff80000080f519:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000080f51c:	66 89 45 dc          	mov    WORD PTR [rbp-0x24],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:62
    if(!blk_devs[BLKDEV_MAJOR(dev)].do_request)
ffff80000080f520:	0f b7 45 dc          	movzx  eax,WORD PTR [rbp-0x24]
ffff80000080f524:	c1 f8 04             	sar    eax,0x4
ffff80000080f527:	83 e0 0f             	and    eax,0xf
ffff80000080f52a:	89 c2                	mov    edx,eax
ffff80000080f52c:	48 b8 70 ff ff ff ff 	movabs rax,0xffffffffffffff70
ffff80000080f533:	ff ff ff 
ffff80000080f536:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff80000080f53a:	48 63 c2             	movsxd rax,edx
ffff80000080f53d:	48 c1 e0 04          	shl    rax,0x4
ffff80000080f541:	48 01 c8             	add    rax,rcx
ffff80000080f544:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080f547:	48 85 c0             	test   rax,rax
ffff80000080f54a:	75 07                	jne    ffff80000080f553 <bread+0x5f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:63
        return NULL;
ffff80000080f54c:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080f551:	eb 7a                	jmp    ffff80000080f5cd <bread+0xd9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:64
    buffer_head *bh=get_block(dev,blkn);
ffff80000080f553:	0f b7 45 dc          	movzx  eax,WORD PTR [rbp-0x24]
ffff80000080f557:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
ffff80000080f55a:	89 d6                	mov    esi,edx
ffff80000080f55c:	89 c7                	mov    edi,eax
ffff80000080f55e:	49 89 df             	mov    r15,rbx
ffff80000080f561:	48 b8 7f c7 ee ff ff 	movabs rax,0xffffffffffeec77f
ffff80000080f568:	ff ff ff 
ffff80000080f56b:	48 01 d8             	add    rax,rbx
ffff80000080f56e:	ff d0                	call   rax
ffff80000080f570:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:65
    if(!bh)
ffff80000080f574:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080f579:	75 07                	jne    ffff80000080f582 <bread+0x8e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:66
        return NULL;
ffff80000080f57b:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080f580:	eb 4b                	jmp    ffff80000080f5cd <bread+0xd9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:67
    if(bh->uptodate)
ffff80000080f582:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080f586:	0f b6 40 12          	movzx  eax,BYTE PTR [rax+0x12]
ffff80000080f58a:	84 c0                	test   al,al
ffff80000080f58c:	74 06                	je     ffff80000080f594 <bread+0xa0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:68
        return bh;//数据没变，可以直接返回
ffff80000080f58e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080f592:	eb 39                	jmp    ffff80000080f5cd <bread+0xd9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:71
    //这里的疑点是，可以直接返回吗？
    //应该要等数据准备完毕之后再返回的
    make_request(dev,BLKDEV_REQ_READ,blkn*BLOCK_SIZE/SECTOR_SIZE,BLOCK_SIZE,bh->data);
ffff80000080f594:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080f598:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080f59b:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000080f59e:	c1 e0 03             	shl    eax,0x3
ffff80000080f5a1:	48 63 d0             	movsxd rdx,eax
ffff80000080f5a4:	0f b7 45 dc          	movzx  eax,WORD PTR [rbp-0x24]
ffff80000080f5a8:	49 89 c8             	mov    r8,rcx
ffff80000080f5ab:	b9 00 10 00 00       	mov    ecx,0x1000
ffff80000080f5b0:	be 00 00 00 00       	mov    esi,0x0
ffff80000080f5b5:	89 c7                	mov    edi,eax
ffff80000080f5b7:	49 89 df             	mov    r15,rbx
ffff80000080f5ba:	48 b8 b6 c3 ee ff ff 	movabs rax,0xffffffffffeec3b6
ffff80000080f5c1:	ff ff ff 
ffff80000080f5c4:	48 01 d8             	add    rax,rbx
ffff80000080f5c7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:73
    //TODO 等待读取完成
    return bh;
ffff80000080f5c9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:74
}
ffff80000080f5cd:	48 83 c4 20          	add    rsp,0x20
ffff80000080f5d1:	5b                   	pop    rbx
ffff80000080f5d2:	41 5f                	pop    r15
ffff80000080f5d4:	5d                   	pop    rbp
ffff80000080f5d5:	c3                   	ret    

ffff80000080f5d6 <bwrite>:
bwrite():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:79
/*
向缓冲区写入数据。注意缓冲区的大小固定BLOCK_SIZE。
这会使得dirty置位。
*/
int bwrite(buffer_head* bh,char* src,int pos,int count){
ffff80000080f5d6:	f3 0f 1e fa          	endbr64 
ffff80000080f5da:	55                   	push   rbp
ffff80000080f5db:	48 89 e5             	mov    rbp,rsp
ffff80000080f5de:	41 57                	push   r15
ffff80000080f5e0:	48 83 ec 28          	sub    rsp,0x28
ffff80000080f5e4:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080f5e4 <bwrite+0xe>
ffff80000080f5eb:	49 bb 14 36 11 00 00 	movabs r11,0x113614
ffff80000080f5f2:	00 00 00 
ffff80000080f5f5:	4c 01 d8             	add    rax,r11
ffff80000080f5f8:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff80000080f5fc:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff80000080f600:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff80000080f603:	89 4d d8             	mov    DWORD PTR [rbp-0x28],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:80
    if(!bh)
ffff80000080f606:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000080f60b:	75 07                	jne    ffff80000080f614 <bwrite+0x3e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:81
        return -ENOBUFS;
ffff80000080f60d:	b8 d6 ff ff ff       	mov    eax,0xffffffd6
ffff80000080f612:	eb 5d                	jmp    ffff80000080f671 <bwrite+0x9b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:82
    if (count+pos>BLOCK_SIZE)
ffff80000080f614:	8b 4d d8             	mov    ecx,DWORD PTR [rbp-0x28]
ffff80000080f617:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff80000080f61a:	01 ca                	add    edx,ecx
ffff80000080f61c:	81 fa 00 10 00 00    	cmp    edx,0x1000
ffff80000080f622:	7e 0b                	jle    ffff80000080f62f <bwrite+0x59>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:83
        count=BLOCK_SIZE-pos;//truncate
ffff80000080f624:	ba 00 10 00 00       	mov    edx,0x1000
ffff80000080f629:	2b 55 dc             	sub    edx,DWORD PTR [rbp-0x24]
ffff80000080f62c:	89 55 d8             	mov    DWORD PTR [rbp-0x28],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:84
    memcpy(bh->data+pos,src,count);
ffff80000080f62f:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
ffff80000080f632:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff80000080f636:	48 8b 31             	mov    rsi,QWORD PTR [rcx]
ffff80000080f639:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
ffff80000080f63c:	48 63 c9             	movsxd rcx,ecx
ffff80000080f63f:	48 8d 3c 0e          	lea    rdi,[rsi+rcx*1]
ffff80000080f643:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
ffff80000080f647:	48 89 ce             	mov    rsi,rcx
ffff80000080f64a:	49 89 c7             	mov    r15,rax
ffff80000080f64d:	48 b9 da 1d ef ff ff 	movabs rcx,0xffffffffffef1dda
ffff80000080f654:	ff ff ff 
ffff80000080f657:	48 01 c1             	add    rcx,rax
ffff80000080f65a:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:85
    bh->dirt=1;
ffff80000080f65c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080f660:	c6 40 13 01          	mov    BYTE PTR [rax+0x13],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:86
    bh->uptodate=0;
ffff80000080f664:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080f668:	c6 40 12 00          	mov    BYTE PTR [rax+0x12],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:87
    return 1;
ffff80000080f66c:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:88
}
ffff80000080f671:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080f675:	c9                   	leave  
ffff80000080f676:	c3                   	ret    

ffff80000080f677 <bflush>:
bflush():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:92
/*
立即把缓冲区里面的更新应用到块设备上。
*/
int bflush(buffer_head* bh){
ffff80000080f677:	f3 0f 1e fa          	endbr64 
ffff80000080f67b:	55                   	push   rbp
ffff80000080f67c:	48 89 e5             	mov    rbp,rsp
ffff80000080f67f:	41 57                	push   r15
ffff80000080f681:	48 83 ec 18          	sub    rsp,0x18
ffff80000080f685:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080f685 <bflush+0xe>
ffff80000080f68c:	49 bb 73 35 11 00 00 	movabs r11,0x113573
ffff80000080f693:	00 00 00 
ffff80000080f696:	4c 01 d8             	add    rax,r11
ffff80000080f699:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:93
    if(!blk_devs[bh->dev].do_request)
ffff80000080f69d:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080f6a1:	0f b7 52 10          	movzx  edx,WORD PTR [rdx+0x10]
ffff80000080f6a5:	0f b7 d2             	movzx  edx,dx
ffff80000080f6a8:	48 b9 70 ff ff ff ff 	movabs rcx,0xffffffffffffff70
ffff80000080f6af:	ff ff ff 
ffff80000080f6b2:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080f6b6:	48 63 d2             	movsxd rdx,edx
ffff80000080f6b9:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080f6bd:	48 01 ca             	add    rdx,rcx
ffff80000080f6c0:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080f6c3:	48 85 d2             	test   rdx,rdx
ffff80000080f6c6:	75 07                	jne    ffff80000080f6cf <bflush+0x58>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:94
        return -ENODEV;
ffff80000080f6c8:	b8 d4 ff ff ff       	mov    eax,0xffffffd4
ffff80000080f6cd:	eb 5a                	jmp    ffff80000080f729 <bflush+0xb2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:95
    if(!bh->dirt)
ffff80000080f6cf:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080f6d3:	0f b6 52 13          	movzx  edx,BYTE PTR [rdx+0x13]
ffff80000080f6d7:	84 d2                	test   dl,dl
ffff80000080f6d9:	75 07                	jne    ffff80000080f6e2 <bflush+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:96
        return 1;
ffff80000080f6db:	b8 01 00 00 00       	mov    eax,0x1
ffff80000080f6e0:	eb 47                	jmp    ffff80000080f729 <bflush+0xb2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:97
    make_request(bh->dev,BLKDEV_REQ_WRITE,bh->blocknr*BLOCK_SIZE/SECTOR_SIZE,BLOCK_SIZE/SECTOR_SIZE,bh->data);
ffff80000080f6e2:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080f6e6:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff80000080f6e9:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080f6ed:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff80000080f6f1:	48 c1 e2 0c          	shl    rdx,0xc
ffff80000080f6f5:	48 c1 ea 09          	shr    rdx,0x9
ffff80000080f6f9:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff80000080f6fd:	0f b7 49 10          	movzx  ecx,WORD PTR [rcx+0x10]
ffff80000080f701:	0f b7 f9             	movzx  edi,cx
ffff80000080f704:	49 89 f0             	mov    r8,rsi
ffff80000080f707:	b9 08 00 00 00       	mov    ecx,0x8
ffff80000080f70c:	be 01 00 00 00       	mov    esi,0x1
ffff80000080f711:	49 89 c7             	mov    r15,rax
ffff80000080f714:	49 b9 b6 c3 ee ff ff 	movabs r9,0xffffffffffeec3b6
ffff80000080f71b:	ff ff ff 
ffff80000080f71e:	49 01 c1             	add    r9,rax
ffff80000080f721:	41 ff d1             	call   r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:99
    //这个不用等
    return 1;
ffff80000080f724:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:100
}
ffff80000080f729:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080f72d:	c9                   	leave  
ffff80000080f72e:	c3                   	ret    

ffff80000080f72f <bdiscard>:
bdiscard():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:102
//丢弃更改。
int bdiscard(buffer_head *bh){
ffff80000080f72f:	f3 0f 1e fa          	endbr64 
ffff80000080f733:	55                   	push   rbp
ffff80000080f734:	48 89 e5             	mov    rbp,rsp
ffff80000080f737:	41 57                	push   r15
ffff80000080f739:	48 83 ec 18          	sub    rsp,0x18
ffff80000080f73d:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080f73d <bdiscard+0xe>
ffff80000080f744:	49 bb bb 34 11 00 00 	movabs r11,0x1134bb
ffff80000080f74b:	00 00 00 
ffff80000080f74e:	4c 01 d8             	add    rax,r11
ffff80000080f751:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:103
    if(bh->dev==-1||!blk_devs[bh->dev].do_request)
ffff80000080f755:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080f759:	0f b7 52 10          	movzx  edx,WORD PTR [rdx+0x10]
ffff80000080f75d:	0f b7 d2             	movzx  edx,dx
ffff80000080f760:	48 b9 70 ff ff ff ff 	movabs rcx,0xffffffffffffff70
ffff80000080f767:	ff ff ff 
ffff80000080f76a:	48 8b 0c 08          	mov    rcx,QWORD PTR [rax+rcx*1]
ffff80000080f76e:	48 63 d2             	movsxd rdx,edx
ffff80000080f771:	48 c1 e2 04          	shl    rdx,0x4
ffff80000080f775:	48 01 ca             	add    rdx,rcx
ffff80000080f778:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000080f77b:	48 85 d2             	test   rdx,rdx
ffff80000080f77e:	75 07                	jne    ffff80000080f787 <bdiscard+0x58>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:104
        return -ENODEV;
ffff80000080f780:	b8 d4 ff ff ff       	mov    eax,0xffffffd4
ffff80000080f785:	eb 5a                	jmp    ffff80000080f7e1 <bdiscard+0xb2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:106
    
    if(bh->uptodate)
ffff80000080f787:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080f78b:	0f b6 52 12          	movzx  edx,BYTE PTR [rdx+0x12]
ffff80000080f78f:	84 d2                	test   dl,dl
ffff80000080f791:	74 07                	je     ffff80000080f79a <bdiscard+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:107
        return 1;//数据没变，可以直接返回
ffff80000080f793:	b8 01 00 00 00       	mov    eax,0x1
ffff80000080f798:	eb 47                	jmp    ffff80000080f7e1 <bdiscard+0xb2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:110
    //这里的疑点是，可以直接返回吗？
    //应该要等数据准备完毕之后再返回的
    make_request(bh->dev,BLKDEV_REQ_READ,bh->blocknr*BLOCK_SIZE/SECTOR_SIZE,BLOCK_SIZE/SECTOR_SIZE,bh->data);
ffff80000080f79a:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080f79e:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffff80000080f7a1:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080f7a5:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffff80000080f7a9:	48 c1 e2 0c          	shl    rdx,0xc
ffff80000080f7ad:	48 c1 ea 09          	shr    rdx,0x9
ffff80000080f7b1:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffff80000080f7b5:	0f b7 49 10          	movzx  ecx,WORD PTR [rcx+0x10]
ffff80000080f7b9:	0f b7 f9             	movzx  edi,cx
ffff80000080f7bc:	49 89 f0             	mov    r8,rsi
ffff80000080f7bf:	b9 08 00 00 00       	mov    ecx,0x8
ffff80000080f7c4:	be 00 00 00 00       	mov    esi,0x0
ffff80000080f7c9:	49 89 c7             	mov    r15,rax
ffff80000080f7cc:	49 b9 b6 c3 ee ff ff 	movabs r9,0xffffffffffeec3b6
ffff80000080f7d3:	ff ff ff 
ffff80000080f7d6:	49 01 c1             	add    r9,rax
ffff80000080f7d9:	41 ff d1             	call   r9
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:112
    //TODO 等待读取完成
    return 1;
ffff80000080f7dc:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:113
}
ffff80000080f7e1:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080f7e5:	c9                   	leave  
ffff80000080f7e6:	c3                   	ret    

ffff80000080f7e7 <bupdate>:
bupdate():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:115

int bupdate(buffer_head *bh){
ffff80000080f7e7:	f3 0f 1e fa          	endbr64 
ffff80000080f7eb:	55                   	push   rbp
ffff80000080f7ec:	48 89 e5             	mov    rbp,rsp
ffff80000080f7ef:	41 57                	push   r15
ffff80000080f7f1:	48 83 ec 18          	sub    rsp,0x18
ffff80000080f7f5:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080f7f5 <bupdate+0xe>
ffff80000080f7fc:	49 bb 03 34 11 00 00 	movabs r11,0x113403
ffff80000080f803:	00 00 00 
ffff80000080f806:	4c 01 d8             	add    rax,r11
ffff80000080f809:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:116
    return bdiscard(bh);
ffff80000080f80d:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000080f811:	48 89 d7             	mov    rdi,rdx
ffff80000080f814:	49 89 c7             	mov    r15,rax
ffff80000080f817:	48 ba 37 cb ee ff ff 	movabs rdx,0xffffffffffeecb37
ffff80000080f81e:	ff ff ff 
ffff80000080f821:	48 01 c2             	add    rdx,rax
ffff80000080f824:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:117
}
ffff80000080f826:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000080f82a:	c9                   	leave  
ffff80000080f82b:	c3                   	ret    

ffff80000080f82c <blkdev_read>:
blkdev_read():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:121
/*
bread的更高级封装，可以不以块为单位读取到buf。
*/
int blkdev_read(unsigned short dev,off_t offset, size_t count, char *buf){
ffff80000080f82c:	f3 0f 1e fa          	endbr64 
ffff80000080f830:	55                   	push   rbp
ffff80000080f831:	48 89 e5             	mov    rbp,rsp
ffff80000080f834:	41 57                	push   r15
ffff80000080f836:	53                   	push   rbx
ffff80000080f837:	48 83 ec 60          	sub    rsp,0x60
ffff80000080f83b:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080f83b <blkdev_read+0xf>
ffff80000080f842:	49 bb bd 33 11 00 00 	movabs r11,0x1133bd
ffff80000080f849:	00 00 00 
ffff80000080f84c:	4c 01 db             	add    rbx,r11
ffff80000080f84f:	89 f8                	mov    eax,edi
ffff80000080f851:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
ffff80000080f855:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
ffff80000080f859:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
ffff80000080f85d:	66 89 45 ac          	mov    WORD PTR [rbp-0x54],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:122
    int n=TO_BLKN(count);
ffff80000080f861:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080f865:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff80000080f86b:	48 c1 e8 0c          	shr    rax,0xc
ffff80000080f86f:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:123
    off_t blkn=BLOCK_FLOOR(offset);
ffff80000080f872:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080f876:	48 c1 e8 0c          	shr    rax,0xc
ffff80000080f87a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:124
    off_t first_off=offset%BLOCK_SIZE;
ffff80000080f87e:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080f882:	25 ff 0f 00 00       	and    eax,0xfff
ffff80000080f887:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:125
    char* p=buf;
ffff80000080f88b:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080f88f:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:126
    size_t mod_count=count%BLOCK_SIZE;
ffff80000080f893:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080f897:	25 ff 0f 00 00       	and    eax,0xfff
ffff80000080f89c:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:127
    int len=BLOCK_SIZE-first_off;
ffff80000080f8a0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080f8a4:	89 c2                	mov    edx,eax
ffff80000080f8a6:	b8 00 10 00 00       	mov    eax,0x1000
ffff80000080f8ab:	29 d0                	sub    eax,edx
ffff80000080f8ad:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:128
    for(int i=0;i<n;i++){
ffff80000080f8b0:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
ffff80000080f8b7:	e9 b5 00 00 00       	jmp    ffff80000080f971 <blkdev_read+0x145>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:129
        buffer_head *bh=bread(dev,blkn);
ffff80000080f8bc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080f8c0:	89 c2                	mov    edx,eax
ffff80000080f8c2:	0f b7 45 ac          	movzx  eax,WORD PTR [rbp-0x54]
ffff80000080f8c6:	89 d6                	mov    esi,edx
ffff80000080f8c8:	89 c7                	mov    edi,eax
ffff80000080f8ca:	49 89 df             	mov    r15,rbx
ffff80000080f8cd:	48 b8 fc c8 ee ff ff 	movabs rax,0xffffffffffeec8fc
ffff80000080f8d4:	ff ff ff 
ffff80000080f8d7:	48 01 d8             	add    rax,rbx
ffff80000080f8da:	ff d0                	call   rax
ffff80000080f8dc:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:130
        if(!bh)
ffff80000080f8e0:	48 83 7d b8 00       	cmp    QWORD PTR [rbp-0x48],0x0
ffff80000080f8e5:	75 0a                	jne    ffff80000080f8f1 <blkdev_read+0xc5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:131
            return -ENOBUFS;//buffer不够了
ffff80000080f8e7:	b8 d6 ff ff ff       	mov    eax,0xffffffd6
ffff80000080f8ec:	e9 91 00 00 00       	jmp    ffff80000080f982 <blkdev_read+0x156>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:132
        if(i==n-1)
ffff80000080f8f1:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080f8f4:	83 e8 01             	sub    eax,0x1
ffff80000080f8f7:	39 45 d0             	cmp    DWORD PTR [rbp-0x30],eax
ffff80000080f8fa:	75 09                	jne    ffff80000080f905 <blkdev_read+0xd9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:133
            len=mod_count;
ffff80000080f8fc:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080f900:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
ffff80000080f903:	eb 0d                	jmp    ffff80000080f912 <blkdev_read+0xe6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:134
        else if(i==2)
ffff80000080f905:	83 7d d0 02          	cmp    DWORD PTR [rbp-0x30],0x2
ffff80000080f909:	75 07                	jne    ffff80000080f912 <blkdev_read+0xe6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:135
            len=BLOCK_SIZE;
ffff80000080f90b:	c7 45 d4 00 10 00 00 	mov    DWORD PTR [rbp-0x2c],0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:136 (discriminator 2)
        memcpy(p,bh->data+first_off,len);
ffff80000080f912:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff80000080f915:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080f919:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080f91c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080f920:	48 01 c1             	add    rcx,rax
ffff80000080f923:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080f927:	48 89 ce             	mov    rsi,rcx
ffff80000080f92a:	48 89 c7             	mov    rdi,rax
ffff80000080f92d:	49 89 df             	mov    r15,rbx
ffff80000080f930:	48 b8 da 1d ef ff ff 	movabs rax,0xffffffffffef1dda
ffff80000080f937:	ff ff ff 
ffff80000080f93a:	48 01 d8             	add    rax,rbx
ffff80000080f93d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:137 (discriminator 2)
        brelse(bh);
ffff80000080f93f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080f943:	48 89 c7             	mov    rdi,rax
ffff80000080f946:	49 89 df             	mov    r15,rbx
ffff80000080f949:	48 b8 f2 ce ee ff ff 	movabs rax,0xffffffffffeecef2
ffff80000080f950:	ff ff ff 
ffff80000080f953:	48 01 d8             	add    rax,rbx
ffff80000080f956:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:138 (discriminator 2)
        blkn++;
ffff80000080f958:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:139 (discriminator 2)
        p+=BLOCK_SIZE;
ffff80000080f95d:	48 81 45 d8 00 10 00 	add    QWORD PTR [rbp-0x28],0x1000
ffff80000080f964:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:140 (discriminator 2)
        first_off=0;
ffff80000080f965:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff80000080f96c:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:128 (discriminator 2)
    for(int i=0;i<n;i++){
ffff80000080f96d:	83 45 d0 01          	add    DWORD PTR [rbp-0x30],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:128 (discriminator 1)
ffff80000080f971:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff80000080f974:	3b 45 cc             	cmp    eax,DWORD PTR [rbp-0x34]
ffff80000080f977:	0f 8c 3f ff ff ff    	jl     ffff80000080f8bc <blkdev_read+0x90>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:142
    }
    return 1;
ffff80000080f97d:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:143
}
ffff80000080f982:	48 83 c4 60          	add    rsp,0x60
ffff80000080f986:	5b                   	pop    rbx
ffff80000080f987:	41 5f                	pop    r15
ffff80000080f989:	5d                   	pop    rbp
ffff80000080f98a:	c3                   	ret    

ffff80000080f98b <blkdev_write>:
blkdev_write():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:145

int blkdev_write(unsigned short dev,off_t offset, size_t count, char *buf){
ffff80000080f98b:	f3 0f 1e fa          	endbr64 
ffff80000080f98f:	55                   	push   rbp
ffff80000080f990:	48 89 e5             	mov    rbp,rsp
ffff80000080f993:	41 57                	push   r15
ffff80000080f995:	53                   	push   rbx
ffff80000080f996:	48 83 ec 60          	sub    rsp,0x60
ffff80000080f99a:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080f99a <blkdev_write+0xf>
ffff80000080f9a1:	49 bb 5e 32 11 00 00 	movabs r11,0x11325e
ffff80000080f9a8:	00 00 00 
ffff80000080f9ab:	4c 01 db             	add    rbx,r11
ffff80000080f9ae:	89 f8                	mov    eax,edi
ffff80000080f9b0:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
ffff80000080f9b4:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
ffff80000080f9b8:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
ffff80000080f9bc:	66 89 45 ac          	mov    WORD PTR [rbp-0x54],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:146
    int n=TO_BLKN(count);
ffff80000080f9c0:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080f9c4:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff80000080f9ca:	48 c1 e8 0c          	shr    rax,0xc
ffff80000080f9ce:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:147
    off_t blkn=BLOCK_FLOOR(offset);
ffff80000080f9d1:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080f9d5:	48 c1 e8 0c          	shr    rax,0xc
ffff80000080f9d9:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:148
    off_t first_off=offset%BLOCK_SIZE;
ffff80000080f9dd:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff80000080f9e1:	25 ff 0f 00 00       	and    eax,0xfff
ffff80000080f9e6:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:149
    char* p=buf;
ffff80000080f9ea:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000080f9ee:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:150
    size_t mod_count=count%BLOCK_SIZE;
ffff80000080f9f2:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff80000080f9f6:	25 ff 0f 00 00       	and    eax,0xfff
ffff80000080f9fb:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:151
    int len=BLOCK_SIZE-first_off;
ffff80000080f9ff:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080fa03:	89 c2                	mov    edx,eax
ffff80000080fa05:	b8 00 10 00 00       	mov    eax,0x1000
ffff80000080fa0a:	29 d0                	sub    eax,edx
ffff80000080fa0c:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:152
    for(int i=0;i<n;i++){
ffff80000080fa0f:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
ffff80000080fa16:	e9 b5 00 00 00       	jmp    ffff80000080fad0 <blkdev_write+0x145>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:153
        buffer_head *bh=get_block(dev,blkn);
ffff80000080fa1b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000080fa1f:	89 c2                	mov    edx,eax
ffff80000080fa21:	0f b7 45 ac          	movzx  eax,WORD PTR [rbp-0x54]
ffff80000080fa25:	89 d6                	mov    esi,edx
ffff80000080fa27:	89 c7                	mov    edi,eax
ffff80000080fa29:	49 89 df             	mov    r15,rbx
ffff80000080fa2c:	48 b8 7f c7 ee ff ff 	movabs rax,0xffffffffffeec77f
ffff80000080fa33:	ff ff ff 
ffff80000080fa36:	48 01 d8             	add    rax,rbx
ffff80000080fa39:	ff d0                	call   rax
ffff80000080fa3b:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:154
        if(!bh)
ffff80000080fa3f:	48 83 7d b8 00       	cmp    QWORD PTR [rbp-0x48],0x0
ffff80000080fa44:	75 0a                	jne    ffff80000080fa50 <blkdev_write+0xc5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:155
            return -ENOBUFS;//buffer不够了
ffff80000080fa46:	b8 d6 ff ff ff       	mov    eax,0xffffffd6
ffff80000080fa4b:	e9 91 00 00 00       	jmp    ffff80000080fae1 <blkdev_write+0x156>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:156
        if(i==n-1)
ffff80000080fa50:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff80000080fa53:	83 e8 01             	sub    eax,0x1
ffff80000080fa56:	39 45 d0             	cmp    DWORD PTR [rbp-0x30],eax
ffff80000080fa59:	75 09                	jne    ffff80000080fa64 <blkdev_write+0xd9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:157
            len=mod_count;
ffff80000080fa5b:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000080fa5f:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
ffff80000080fa62:	eb 0d                	jmp    ffff80000080fa71 <blkdev_write+0xe6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:158
        else if(i==2)
ffff80000080fa64:	83 7d d0 02          	cmp    DWORD PTR [rbp-0x30],0x2
ffff80000080fa68:	75 07                	jne    ffff80000080fa71 <blkdev_write+0xe6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:159
            len=BLOCK_SIZE;
ffff80000080fa6a:	c7 45 d4 00 10 00 00 	mov    DWORD PTR [rbp-0x2c],0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:160 (discriminator 2)
        memcpy(bh->data+first_off,p,len);
ffff80000080fa71:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff80000080fa74:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080fa78:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff80000080fa7b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000080fa7f:	48 01 c1             	add    rcx,rax
ffff80000080fa82:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080fa86:	48 89 c6             	mov    rsi,rax
ffff80000080fa89:	48 89 cf             	mov    rdi,rcx
ffff80000080fa8c:	49 89 df             	mov    r15,rbx
ffff80000080fa8f:	48 b8 da 1d ef ff ff 	movabs rax,0xffffffffffef1dda
ffff80000080fa96:	ff ff ff 
ffff80000080fa99:	48 01 d8             	add    rax,rbx
ffff80000080fa9c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:161 (discriminator 2)
        brelse(bh);
ffff80000080fa9e:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000080faa2:	48 89 c7             	mov    rdi,rax
ffff80000080faa5:	49 89 df             	mov    r15,rbx
ffff80000080faa8:	48 b8 f2 ce ee ff ff 	movabs rax,0xffffffffffeecef2
ffff80000080faaf:	ff ff ff 
ffff80000080fab2:	48 01 d8             	add    rax,rbx
ffff80000080fab5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:162 (discriminator 2)
        blkn++;
ffff80000080fab7:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:163 (discriminator 2)
        p+=BLOCK_SIZE;
ffff80000080fabc:	48 81 45 d8 00 10 00 	add    QWORD PTR [rbp-0x28],0x1000
ffff80000080fac3:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:164 (discriminator 2)
        first_off=0;
ffff80000080fac4:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff80000080facb:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:152 (discriminator 2)
    for(int i=0;i<n;i++){
ffff80000080facc:	83 45 d0 01          	add    DWORD PTR [rbp-0x30],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:152 (discriminator 1)
ffff80000080fad0:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff80000080fad3:	3b 45 cc             	cmp    eax,DWORD PTR [rbp-0x34]
ffff80000080fad6:	0f 8c 3f ff ff ff    	jl     ffff80000080fa1b <blkdev_write+0x90>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:166
    }
    return 1;
ffff80000080fadc:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:168

}
ffff80000080fae1:	48 83 c4 60          	add    rsp,0x60
ffff80000080fae5:	5b                   	pop    rbx
ffff80000080fae6:	41 5f                	pop    r15
ffff80000080fae8:	5d                   	pop    rbp
ffff80000080fae9:	c3                   	ret    

ffff80000080faea <brelse>:
brelse():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:169
int brelse(buffer_head *bh){
ffff80000080faea:	f3 0f 1e fa          	endbr64 
ffff80000080faee:	55                   	push   rbp
ffff80000080faef:	48 89 e5             	mov    rbp,rsp
ffff80000080faf2:	41 57                	push   r15
ffff80000080faf4:	53                   	push   rbx
ffff80000080faf5:	48 83 ec 20          	sub    rsp,0x20
ffff80000080faf9:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080faf9 <brelse+0xf>
ffff80000080fb00:	49 bb ff 30 11 00 00 	movabs r11,0x1130ff
ffff80000080fb07:	00 00 00 
ffff80000080fb0a:	4c 01 db             	add    rbx,r11
ffff80000080fb0d:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:170
    if(bh->dev==(unsigned short)-1||!blk_devs[BLKDEV_MAJOR(bh->dev)].do_request)
ffff80000080fb11:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080fb15:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff80000080fb19:	66 83 f8 ff          	cmp    ax,0xffff
ffff80000080fb1d:	74 33                	je     ffff80000080fb52 <brelse+0x68>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:170 (discriminator 1)
ffff80000080fb1f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080fb23:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff80000080fb27:	0f b7 c0             	movzx  eax,ax
ffff80000080fb2a:	c1 f8 04             	sar    eax,0x4
ffff80000080fb2d:	83 e0 0f             	and    eax,0xf
ffff80000080fb30:	89 c2                	mov    edx,eax
ffff80000080fb32:	48 b8 70 ff ff ff ff 	movabs rax,0xffffffffffffff70
ffff80000080fb39:	ff ff ff 
ffff80000080fb3c:	48 8b 0c 03          	mov    rcx,QWORD PTR [rbx+rax*1]
ffff80000080fb40:	48 63 c2             	movsxd rax,edx
ffff80000080fb43:	48 c1 e0 04          	shl    rax,0x4
ffff80000080fb47:	48 01 c8             	add    rax,rcx
ffff80000080fb4a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080fb4d:	48 85 c0             	test   rax,rax
ffff80000080fb50:	75 0a                	jne    ffff80000080fb5c <brelse+0x72>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:171
        return -ENODEV;
ffff80000080fb52:	b8 d4 ff ff ff       	mov    eax,0xffffffd4
ffff80000080fb57:	e9 07 01 00 00       	jmp    ffff80000080fc63 <brelse+0x179>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:172
    if(bh->dirt)
ffff80000080fb5c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080fb60:	0f b6 40 13          	movzx  eax,BYTE PTR [rax+0x13]
ffff80000080fb64:	84 c0                	test   al,al
ffff80000080fb66:	74 19                	je     ffff80000080fb81 <brelse+0x97>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:173
        bflush(bh);
ffff80000080fb68:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080fb6c:	48 89 c7             	mov    rdi,rax
ffff80000080fb6f:	49 89 df             	mov    r15,rbx
ffff80000080fb72:	48 b8 7f ca ee ff ff 	movabs rax,0xffffffffffeeca7f
ffff80000080fb79:	ff ff ff 
ffff80000080fb7c:	48 01 d8             	add    rax,rbx
ffff80000080fb7f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:174
    bh->count--;
ffff80000080fb81:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080fb85:	0f b6 40 14          	movzx  eax,BYTE PTR [rax+0x14]
ffff80000080fb89:	8d 50 ff             	lea    edx,[rax-0x1]
ffff80000080fb8c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080fb90:	88 50 14             	mov    BYTE PTR [rax+0x14],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:175
    if(bh->count==0)
ffff80000080fb93:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080fb97:	0f b6 40 14          	movzx  eax,BYTE PTR [rax+0x14]
ffff80000080fb9b:	84 c0                	test   al,al
ffff80000080fb9d:	0f 85 bb 00 00 00    	jne    ffff80000080fc5e <brelse+0x174>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:177
    {
        if(bh->prev)
ffff80000080fba3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080fba7:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000080fbab:	48 85 c0             	test   rax,rax
ffff80000080fbae:	74 14                	je     ffff80000080fbc4 <brelse+0xda>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:178
            bh->prev->next=bh->next;
ffff80000080fbb0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080fbb4:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000080fbb8:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080fbbc:	48 8b 52 28          	mov    rdx,QWORD PTR [rdx+0x28]
ffff80000080fbc0:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:179
        if(bh->next)
ffff80000080fbc4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080fbc8:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080fbcc:	48 85 c0             	test   rax,rax
ffff80000080fbcf:	74 14                	je     ffff80000080fbe5 <brelse+0xfb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:180
            bh->next->prev=bh->prev;
ffff80000080fbd1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080fbd5:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000080fbd9:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff80000080fbdd:	48 8b 52 20          	mov    rdx,QWORD PTR [rdx+0x20]
ffff80000080fbe1:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:181
        for(int i=0;i<MAX_BLKDEVS;i++){
ffff80000080fbe5:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff80000080fbec:	eb 44                	jmp    ffff80000080fc32 <brelse+0x148>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:182
            if(l_blk_bh_heads[i]==bh)
ffff80000080fbee:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff80000080fbf5:	ff ff ff 
ffff80000080fbf8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080fbfc:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080fbff:	48 63 d2             	movsxd rdx,edx
ffff80000080fc02:	48 8b 04 d0          	mov    rax,QWORD PTR [rax+rdx*8]
ffff80000080fc06:	48 39 45 d8          	cmp    QWORD PTR [rbp-0x28],rax
ffff80000080fc0a:	75 22                	jne    ffff80000080fc2e <brelse+0x144>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:184
            {
                l_blk_bh_heads[i]=bh->next;
ffff80000080fc0c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080fc10:	48 8b 48 28          	mov    rcx,QWORD PTR [rax+0x28]
ffff80000080fc14:	48 b8 88 fe ff ff ff 	movabs rax,0xfffffffffffffe88
ffff80000080fc1b:	ff ff ff 
ffff80000080fc1e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080fc22:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000080fc25:	48 63 d2             	movsxd rdx,edx
ffff80000080fc28:	48 89 0c d0          	mov    QWORD PTR [rax+rdx*8],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:185
                break;
ffff80000080fc2c:	eb 0a                	jmp    ffff80000080fc38 <brelse+0x14e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:181 (discriminator 2)
        for(int i=0;i<MAX_BLKDEVS;i++){
ffff80000080fc2e:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:181 (discriminator 1)
ffff80000080fc32:	83 7d ec 0b          	cmp    DWORD PTR [rbp-0x14],0xb
ffff80000080fc36:	7e b6                	jle    ffff80000080fbee <brelse+0x104>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:188
            }
        }
        bh->dev=-1;
ffff80000080fc38:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080fc3c:	66 c7 40 10 ff ff    	mov    WORD PTR [rax+0x10],0xffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:189
        kmfree(bh->data);
ffff80000080fc42:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000080fc46:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000080fc49:	48 89 c7             	mov    rdi,rax
ffff80000080fc4c:	49 89 df             	mov    r15,rbx
ffff80000080fc4f:	48 b8 6f 09 ee ff ff 	movabs rax,0xffffffffffee096f
ffff80000080fc56:	ff ff ff 
ffff80000080fc59:	48 01 d8             	add    rax,rbx
ffff80000080fc5c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:191
    }
    return 1;
ffff80000080fc5e:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/blk_buf.c:192
ffff80000080fc63:	48 83 c4 20          	add    rsp,0x20
ffff80000080fc67:	5b                   	pop    rbx
ffff80000080fc68:	41 5f                	pop    r15
ffff80000080fc6a:	5d                   	pop    rbp
ffff80000080fc6b:	c3                   	ret    

ffff80000080fc6c <shift>:
shift():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:123
/* 0x5D - Apps      */ {  0,        0,       0x5D,      0x5D }
        };
char k_shift=0,k_ctrl=0,k_capslock=0;

void shift()
{
ffff80000080fc6c:	f3 0f 1e fa          	endbr64 
ffff80000080fc70:	55                   	push   rbp
ffff80000080fc71:	48 89 e5             	mov    rbp,rsp
ffff80000080fc74:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080fc74 <shift+0x8>
ffff80000080fc7b:	49 bb 84 2f 11 00 00 	movabs r11,0x112f84
ffff80000080fc82:	00 00 00 
ffff80000080fc85:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:124
    k_shift=!k_shift;
ffff80000080fc88:	48 ba 40 ff ff ff ff 	movabs rdx,0xffffffffffffff40
ffff80000080fc8f:	ff ff ff 
ffff80000080fc92:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080fc96:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080fc99:	84 d2                	test   dl,dl
ffff80000080fc9b:	0f 94 c2             	sete   dl
ffff80000080fc9e:	89 d1                	mov    ecx,edx
ffff80000080fca0:	48 ba 40 ff ff ff ff 	movabs rdx,0xffffffffffffff40
ffff80000080fca7:	ff ff ff 
ffff80000080fcaa:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080fcae:	88 08                	mov    BYTE PTR [rax],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:125
}
ffff80000080fcb0:	90                   	nop
ffff80000080fcb1:	5d                   	pop    rbp
ffff80000080fcb2:	c3                   	ret    

ffff80000080fcb3 <ctrl>:
ctrl():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:127
void ctrl()
{
ffff80000080fcb3:	f3 0f 1e fa          	endbr64 
ffff80000080fcb7:	55                   	push   rbp
ffff80000080fcb8:	48 89 e5             	mov    rbp,rsp
ffff80000080fcbb:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080fcbb <ctrl+0x8>
ffff80000080fcc2:	49 bb 3d 2f 11 00 00 	movabs r11,0x112f3d
ffff80000080fcc9:	00 00 00 
ffff80000080fccc:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:128
    k_ctrl=!k_ctrl;
ffff80000080fccf:	48 ba c0 fc ff ff ff 	movabs rdx,0xfffffffffffffcc0
ffff80000080fcd6:	ff ff ff 
ffff80000080fcd9:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080fcdd:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080fce0:	84 d2                	test   dl,dl
ffff80000080fce2:	0f 94 c2             	sete   dl
ffff80000080fce5:	89 d1                	mov    ecx,edx
ffff80000080fce7:	48 ba c0 fc ff ff ff 	movabs rdx,0xfffffffffffffcc0
ffff80000080fcee:	ff ff ff 
ffff80000080fcf1:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080fcf5:	88 08                	mov    BYTE PTR [rax],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:129
}
ffff80000080fcf7:	90                   	nop
ffff80000080fcf8:	5d                   	pop    rbp
ffff80000080fcf9:	c3                   	ret    

ffff80000080fcfa <capslock>:
capslock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:131
void capslock()
{
ffff80000080fcfa:	f3 0f 1e fa          	endbr64 
ffff80000080fcfe:	55                   	push   rbp
ffff80000080fcff:	48 89 e5             	mov    rbp,rsp
ffff80000080fd02:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080fd02 <capslock+0x8>
ffff80000080fd09:	49 bb f6 2e 11 00 00 	movabs r11,0x112ef6
ffff80000080fd10:	00 00 00 
ffff80000080fd13:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:132
    k_capslock=k_capslock==0?1:0;
ffff80000080fd16:	48 ba 30 fe ff ff ff 	movabs rdx,0xfffffffffffffe30
ffff80000080fd1d:	ff ff ff 
ffff80000080fd20:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080fd24:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080fd27:	84 d2                	test   dl,dl
ffff80000080fd29:	0f 94 c2             	sete   dl
ffff80000080fd2c:	89 d1                	mov    ecx,edx
ffff80000080fd2e:	48 ba 30 fe ff ff ff 	movabs rdx,0xfffffffffffffe30
ffff80000080fd35:	ff ff ff 
ffff80000080fd38:	48 8b 04 10          	mov    rax,QWORD PTR [rax+rdx*1]
ffff80000080fd3c:	88 08                	mov    BYTE PTR [rax],cl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:133
}
ffff80000080fd3e:	90                   	nop
ffff80000080fd3f:	5d                   	pop    rbp
ffff80000080fd40:	c3                   	ret    

ffff80000080fd41 <to_ascii>:
to_ascii():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:135
char to_ascii(char scan_code)
{
ffff80000080fd41:	f3 0f 1e fa          	endbr64 
ffff80000080fd45:	55                   	push   rbp
ffff80000080fd46:	48 89 e5             	mov    rbp,rsp
ffff80000080fd49:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080fd49 <to_ascii+0x8>
ffff80000080fd50:	49 bb af 2e 11 00 00 	movabs r11,0x112eaf
ffff80000080fd57:	00 00 00 
ffff80000080fd5a:	4c 01 d8             	add    rax,r11
ffff80000080fd5d:	89 fa                	mov    edx,edi
ffff80000080fd5f:	88 55 ec             	mov    BYTE PTR [rbp-0x14],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:136
    for(int i=0;i<0x5e;i++)//sizeof(key_map)/sizeof(key_code)
ffff80000080fd62:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff80000080fd69:	e9 25 01 00 00       	jmp    ffff80000080fe93 <to_ascii+0x152>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:137
        if(key_map[i].scan_code==scan_code)
ffff80000080fd6e:	48 be e8 d5 ff ff ff 	movabs rsi,0xffffffffffffd5e8
ffff80000080fd75:	ff ff ff 
ffff80000080fd78:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080fd7b:	48 63 ca             	movsxd rcx,edx
ffff80000080fd7e:	48 89 ca             	mov    rdx,rcx
ffff80000080fd81:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080fd85:	48 01 ca             	add    rdx,rcx
ffff80000080fd88:	48 01 c2             	add    rdx,rax
ffff80000080fd8b:	48 01 f2             	add    rdx,rsi
ffff80000080fd8e:	48 83 c2 02          	add    rdx,0x2
ffff80000080fd92:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080fd95:	38 55 ec             	cmp    BYTE PTR [rbp-0x14],dl
ffff80000080fd98:	0f 85 f1 00 00 00    	jne    ffff80000080fe8f <to_ascii+0x14e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:139
        {
            if(k_capslock&&key_map[i].ascii>='a'&&key_map[i].ascii<='z')return key_map[i].ascii_shift;
ffff80000080fd9e:	48 ba 30 fe ff ff ff 	movabs rdx,0xfffffffffffffe30
ffff80000080fda5:	ff ff ff 
ffff80000080fda8:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080fdac:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080fdaf:	84 d2                	test   dl,dl
ffff80000080fdb1:	74 79                	je     ffff80000080fe2c <to_ascii+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:139 (discriminator 1)
ffff80000080fdb3:	48 be e8 d5 ff ff ff 	movabs rsi,0xffffffffffffd5e8
ffff80000080fdba:	ff ff ff 
ffff80000080fdbd:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080fdc0:	48 63 ca             	movsxd rcx,edx
ffff80000080fdc3:	48 01 c6             	add    rsi,rax
ffff80000080fdc6:	48 89 ca             	mov    rdx,rcx
ffff80000080fdc9:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080fdcd:	48 01 ca             	add    rdx,rcx
ffff80000080fdd0:	48 01 f2             	add    rdx,rsi
ffff80000080fdd3:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080fdd6:	80 fa 60             	cmp    dl,0x60
ffff80000080fdd9:	7e 51                	jle    ffff80000080fe2c <to_ascii+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:139 (discriminator 2)
ffff80000080fddb:	48 be e8 d5 ff ff ff 	movabs rsi,0xffffffffffffd5e8
ffff80000080fde2:	ff ff ff 
ffff80000080fde5:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080fde8:	48 63 ca             	movsxd rcx,edx
ffff80000080fdeb:	48 01 c6             	add    rsi,rax
ffff80000080fdee:	48 89 ca             	mov    rdx,rcx
ffff80000080fdf1:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080fdf5:	48 01 ca             	add    rdx,rcx
ffff80000080fdf8:	48 01 f2             	add    rdx,rsi
ffff80000080fdfb:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080fdfe:	80 fa 7a             	cmp    dl,0x7a
ffff80000080fe01:	7f 29                	jg     ffff80000080fe2c <to_ascii+0xeb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:139 (discriminator 3)
ffff80000080fe03:	48 be e8 d5 ff ff ff 	movabs rsi,0xffffffffffffd5e8
ffff80000080fe0a:	ff ff ff 
ffff80000080fe0d:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080fe10:	48 63 ca             	movsxd rcx,edx
ffff80000080fe13:	48 89 ca             	mov    rdx,rcx
ffff80000080fe16:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080fe1a:	48 01 ca             	add    rdx,rcx
ffff80000080fe1d:	48 01 d0             	add    rax,rdx
ffff80000080fe20:	48 01 f0             	add    rax,rsi
ffff80000080fe23:	48 83 c0 01          	add    rax,0x1
ffff80000080fe27:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080fe2a:	eb 76                	jmp    ffff80000080fea2 <to_ascii+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:140
            else if(k_shift)return key_map[i].ascii_shift;
ffff80000080fe2c:	48 ba 40 ff ff ff ff 	movabs rdx,0xffffffffffffff40
ffff80000080fe33:	ff ff ff 
ffff80000080fe36:	48 8b 14 10          	mov    rdx,QWORD PTR [rax+rdx*1]
ffff80000080fe3a:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff80000080fe3d:	84 d2                	test   dl,dl
ffff80000080fe3f:	74 29                	je     ffff80000080fe6a <to_ascii+0x129>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:140 (discriminator 1)
ffff80000080fe41:	48 be e8 d5 ff ff ff 	movabs rsi,0xffffffffffffd5e8
ffff80000080fe48:	ff ff ff 
ffff80000080fe4b:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080fe4e:	48 63 ca             	movsxd rcx,edx
ffff80000080fe51:	48 89 ca             	mov    rdx,rcx
ffff80000080fe54:	48 c1 e2 02          	shl    rdx,0x2
ffff80000080fe58:	48 01 ca             	add    rdx,rcx
ffff80000080fe5b:	48 01 d0             	add    rax,rdx
ffff80000080fe5e:	48 01 f0             	add    rax,rsi
ffff80000080fe61:	48 83 c0 01          	add    rax,0x1
ffff80000080fe65:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080fe68:	eb 38                	jmp    ffff80000080fea2 <to_ascii+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:141
            else return key_map[i].ascii;
ffff80000080fe6a:	48 b9 e8 d5 ff ff ff 	movabs rcx,0xffffffffffffd5e8
ffff80000080fe71:	ff ff ff 
ffff80000080fe74:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffff80000080fe77:	48 63 d2             	movsxd rdx,edx
ffff80000080fe7a:	48 01 c1             	add    rcx,rax
ffff80000080fe7d:	48 89 d0             	mov    rax,rdx
ffff80000080fe80:	48 c1 e0 02          	shl    rax,0x2
ffff80000080fe84:	48 01 d0             	add    rax,rdx
ffff80000080fe87:	48 01 c8             	add    rax,rcx
ffff80000080fe8a:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000080fe8d:	eb 13                	jmp    ffff80000080fea2 <to_ascii+0x161>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:136 (discriminator 2)
    for(int i=0;i<0x5e;i++)//sizeof(key_map)/sizeof(key_code)
ffff80000080fe8f:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:136 (discriminator 1)
ffff80000080fe93:	83 7d fc 5d          	cmp    DWORD PTR [rbp-0x4],0x5d
ffff80000080fe97:	0f 8e d1 fe ff ff    	jle    ffff80000080fd6e <to_ascii+0x2d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:144
        }

    return '\0';
ffff80000080fe9d:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:145
}
ffff80000080fea2:	5d                   	pop    rbp
ffff80000080fea3:	c3                   	ret    

ffff80000080fea4 <init_kb>:
init_kb():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:147
int init_kb()
{
ffff80000080fea4:	f3 0f 1e fa          	endbr64 
ffff80000080fea8:	55                   	push   rbp
ffff80000080fea9:	48 89 e5             	mov    rbp,rsp
ffff80000080feac:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000080feac <init_kb+0x8>
ffff80000080feb3:	49 bb 4c 2d 11 00 00 	movabs r11,0x112d4c
ffff80000080feba:	00 00 00 
ffff80000080febd:	4c 01 d8             	add    rax,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:148
}
ffff80000080fec0:	90                   	nop
ffff80000080fec1:	5d                   	pop    rbp
ffff80000080fec2:	c3                   	ret    

ffff80000080fec3 <key_proc>:
key_proc():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:150
int key_proc()
{
ffff80000080fec3:	f3 0f 1e fa          	endbr64 
ffff80000080fec7:	55                   	push   rbp
ffff80000080fec8:	48 89 e5             	mov    rbp,rsp
ffff80000080fecb:	41 57                	push   r15
ffff80000080fecd:	53                   	push   rbx
ffff80000080fece:	48 83 ec 20          	sub    rsp,0x20
ffff80000080fed2:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000080fed2 <key_proc+0xf>
ffff80000080fed9:	49 bb 26 2d 11 00 00 	movabs r11,0x112d26
ffff80000080fee0:	00 00 00 
ffff80000080fee3:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:151
    __asm__ volatile("cli");
ffff80000080fee6:	fa                   	cli    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:153
    //获取完整的扫描码
    u8 scan1=0,scan2=0,ch=0;
ffff80000080fee7:	c6 45 ef 00          	mov    BYTE PTR [rbp-0x11],0x0
ffff80000080feeb:	c6 45 ee 00          	mov    BYTE PTR [rbp-0x12],0x0
ffff80000080feef:	c6 45 ed 00          	mov    BYTE PTR [rbp-0x13],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:155
    key_code tmpc;
    scan1=inb(0x60);
ffff80000080fef3:	bf 60 00 00 00       	mov    edi,0x60
ffff80000080fef8:	49 89 df             	mov    r15,rbx
ffff80000080fefb:	48 b8 91 65 ee ff ff 	movabs rax,0xffffffffffee6591
ffff80000080ff02:	ff ff ff 
ffff80000080ff05:	48 01 d8             	add    rax,rbx
ffff80000080ff08:	ff d0                	call   rax
ffff80000080ff0a:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:167
//    tmpc.scan_code2=scan2;
//    tmpc.ascii= ch;


//    ENQUEUE(key_bufq,tmpc)
    if((key_bufq.tail+1)%key_bufq.size!=key_bufq.head)
ffff80000080ff0d:	48 b8 78 ff ff ff ff 	movabs rax,0xffffffffffffff78
ffff80000080ff14:	ff ff ff 
ffff80000080ff17:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ff1b:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff80000080ff1e:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080ff21:	48 b8 78 ff ff ff ff 	movabs rax,0xffffffffffffff78
ffff80000080ff28:	ff ff ff 
ffff80000080ff2b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ff2f:	8b 48 10             	mov    ecx,DWORD PTR [rax+0x10]
ffff80000080ff32:	89 d0                	mov    eax,edx
ffff80000080ff34:	99                   	cdq    
ffff80000080ff35:	f7 f9                	idiv   ecx
ffff80000080ff37:	48 b8 78 ff ff ff ff 	movabs rax,0xffffffffffffff78
ffff80000080ff3e:	ff ff ff 
ffff80000080ff41:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ff45:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000080ff48:	39 c2                	cmp    edx,eax
ffff80000080ff4a:	74 68                	je     ffff80000080ffb4 <key_proc+0xf1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:169
    {
        key_bufq.data[key_bufq.tail]=scan1;
ffff80000080ff4c:	48 b8 78 ff ff ff ff 	movabs rax,0xffffffffffffff78
ffff80000080ff53:	ff ff ff 
ffff80000080ff56:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ff5a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000080ff5d:	48 b8 78 ff ff ff ff 	movabs rax,0xffffffffffffff78
ffff80000080ff64:	ff ff ff 
ffff80000080ff67:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ff6b:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff80000080ff6e:	48 98                	cdqe   
ffff80000080ff70:	48 01 c2             	add    rdx,rax
ffff80000080ff73:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
ffff80000080ff77:	88 02                	mov    BYTE PTR [rdx],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:170
        key_bufq.tail=(key_bufq.tail+1)%key_bufq.size;
ffff80000080ff79:	48 b8 78 ff ff ff ff 	movabs rax,0xffffffffffffff78
ffff80000080ff80:	ff ff ff 
ffff80000080ff83:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ff87:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff80000080ff8a:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000080ff8d:	48 b8 78 ff ff ff ff 	movabs rax,0xffffffffffffff78
ffff80000080ff94:	ff ff ff 
ffff80000080ff97:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ff9b:	8b 48 10             	mov    ecx,DWORD PTR [rax+0x10]
ffff80000080ff9e:	89 d0                	mov    eax,edx
ffff80000080ffa0:	99                   	cdq    
ffff80000080ffa1:	f7 f9                	idiv   ecx
ffff80000080ffa3:	48 b8 78 ff ff ff ff 	movabs rax,0xffffffffffffff78
ffff80000080ffaa:	ff ff ff 
ffff80000080ffad:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000080ffb1:	89 50 0c             	mov    DWORD PTR [rax+0xc],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:173
    }

    if(scan1==0x48)
ffff80000080ffb4:	80 7d ef 48          	cmp    BYTE PTR [rbp-0x11],0x48
ffff80000080ffb8:	75 17                	jne    ffff80000080ffd1 <key_proc+0x10e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:174
        scr_up();
ffff80000080ffba:	49 89 df             	mov    r15,rbx
ffff80000080ffbd:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080ffc2:	48 ba 03 93 ee ff ff 	movabs rdx,0xffffffffffee9303
ffff80000080ffc9:	ff ff ff 
ffff80000080ffcc:	48 01 da             	add    rdx,rbx
ffff80000080ffcf:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:175
    if(scan1==0x50)
ffff80000080ffd1:	80 7d ef 50          	cmp    BYTE PTR [rbp-0x11],0x50
ffff80000080ffd5:	75 17                	jne    ffff80000080ffee <key_proc+0x12b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:176
        scr_down();
ffff80000080ffd7:	49 89 df             	mov    r15,rbx
ffff80000080ffda:	b8 00 00 00 00       	mov    eax,0x0
ffff80000080ffdf:	48 ba fb 93 ee ff ff 	movabs rdx,0xffffffffffee93fb
ffff80000080ffe6:	ff ff ff 
ffff80000080ffe9:	48 01 da             	add    rdx,rbx
ffff80000080ffec:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:177
    switch (scan1)
ffff80000080ffee:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
ffff80000080fff2:	3d b6 00 00 00       	cmp    eax,0xb6
ffff80000080fff7:	74 45                	je     ffff80000081003e <key_proc+0x17b>
ffff80000080fff9:	3d b6 00 00 00       	cmp    eax,0xb6
ffff80000080fffe:	0f 8f 85 00 00 00    	jg     ffff800000810089 <key_proc+0x1c6>
ffff800000810004:	3d aa 00 00 00       	cmp    eax,0xaa
ffff800000810009:	74 33                	je     ffff80000081003e <key_proc+0x17b>
ffff80000081000b:	3d aa 00 00 00       	cmp    eax,0xaa
ffff800000810010:	7f 77                	jg     ffff800000810089 <key_proc+0x1c6>
ffff800000810012:	3d 9d 00 00 00       	cmp    eax,0x9d
ffff800000810017:	74 3e                	je     ffff800000810057 <key_proc+0x194>
ffff800000810019:	3d 9d 00 00 00       	cmp    eax,0x9d
ffff80000081001e:	7f 69                	jg     ffff800000810089 <key_proc+0x1c6>
ffff800000810020:	83 f8 3a             	cmp    eax,0x3a
ffff800000810023:	74 4b                	je     ffff800000810070 <key_proc+0x1ad>
ffff800000810025:	83 f8 3a             	cmp    eax,0x3a
ffff800000810028:	7f 5f                	jg     ffff800000810089 <key_proc+0x1c6>
ffff80000081002a:	83 f8 36             	cmp    eax,0x36
ffff80000081002d:	74 0f                	je     ffff80000081003e <key_proc+0x17b>
ffff80000081002f:	83 f8 36             	cmp    eax,0x36
ffff800000810032:	7f 55                	jg     ffff800000810089 <key_proc+0x1c6>
ffff800000810034:	83 f8 1d             	cmp    eax,0x1d
ffff800000810037:	74 1e                	je     ffff800000810057 <key_proc+0x194>
ffff800000810039:	83 f8 2a             	cmp    eax,0x2a
ffff80000081003c:	75 4b                	jne    ffff800000810089 <key_proc+0x1c6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:183
    {
        case 0x36:
        case 0x2a:
        case 0xaa:
        case 0xb6:
            shift();
ffff80000081003e:	49 89 df             	mov    r15,rbx
ffff800000810041:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810046:	48 ba 74 d0 ee ff ff 	movabs rdx,0xffffffffffeed074
ffff80000081004d:	ff ff ff 
ffff800000810050:	48 01 da             	add    rdx,rbx
ffff800000810053:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:184
            break;
ffff800000810055:	eb 33                	jmp    ffff80000081008a <key_proc+0x1c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:187
        case 0x1d:
        case 0x9d:
            ctrl();
ffff800000810057:	49 89 df             	mov    r15,rbx
ffff80000081005a:	b8 00 00 00 00       	mov    eax,0x0
ffff80000081005f:	48 ba bb d0 ee ff ff 	movabs rdx,0xffffffffffeed0bb
ffff800000810066:	ff ff ff 
ffff800000810069:	48 01 da             	add    rdx,rbx
ffff80000081006c:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:188
            break;
ffff80000081006e:	eb 1a                	jmp    ffff80000081008a <key_proc+0x1c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:190
        case 0x3a:
            capslock();
ffff800000810070:	49 89 df             	mov    r15,rbx
ffff800000810073:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810078:	48 ba 02 d1 ee ff ff 	movabs rdx,0xffffffffffeed102
ffff80000081007f:	ff ff ff 
ffff800000810082:	48 01 da             	add    rdx,rbx
ffff800000810085:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:191
            break;
ffff800000810087:	eb 01                	jmp    ffff80000081008a <key_proc+0x1c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:193
        default:
            break;
ffff800000810089:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:196
    }
    //发送到std
    if(!(scan1&FLAG_BREAK)){
ffff80000081008a:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
ffff80000081008e:	84 c0                	test   al,al
ffff800000810090:	78 51                	js     ffff8000008100e3 <key_proc+0x220>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:197
        char ch= to_ascii(scan1);
ffff800000810092:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
ffff800000810096:	0f be c0             	movsx  eax,al
ffff800000810099:	89 c7                	mov    edi,eax
ffff80000081009b:	49 89 df             	mov    r15,rbx
ffff80000081009e:	48 b8 49 d1 ee ff ff 	movabs rax,0xffffffffffeed149
ffff8000008100a5:	ff ff ff 
ffff8000008100a8:	48 01 d8             	add    rax,rbx
ffff8000008100ab:	ff d0                	call   rax
ffff8000008100ad:	88 45 e7             	mov    BYTE PTR [rbp-0x19],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:198
        unsigned long args[]={(unsigned long) &ch, 1};
ffff8000008100b0:	48 8d 45 e7          	lea    rax,[rbp-0x19]
ffff8000008100b4:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
ffff8000008100b8:	48 c7 45 d8 01 00 00 	mov    QWORD PTR [rbp-0x28],0x1
ffff8000008100bf:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:200
        //写入stdin
        sys_ioctl(0,TTY_WSTDIN,(unsigned long)args);
ffff8000008100c0:	48 8d 45 d0          	lea    rax,[rbp-0x30]
ffff8000008100c4:	48 89 c2             	mov    rdx,rax
ffff8000008100c7:	be 03 00 00 00       	mov    esi,0x3
ffff8000008100cc:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008100d1:	49 89 df             	mov    r15,rbx
ffff8000008100d4:	48 b8 82 64 ee ff ff 	movabs rax,0xffffffffffee6482
ffff8000008100db:	ff ff ff 
ffff8000008100de:	48 01 d8             	add    rax,rbx
ffff8000008100e1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:219
//        //logf("%x\n",stdin.w_ptr);
//        //print_stdin();
//        //printchar(ch);
//        //flush_screen(0);*/
//    }
    eoi();
ffff8000008100e3:	49 89 df             	mov    r15,rbx
ffff8000008100e6:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008100eb:	48 ba a6 65 ee ff ff 	movabs rdx,0xffffffffffee65a6
ffff8000008100f2:	ff ff ff 
ffff8000008100f5:	48 01 da             	add    rdx,rbx
ffff8000008100f8:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:220
    __asm__ volatile("leave\r\n iretq");
ffff8000008100fa:	c9                   	leave  
ffff8000008100fb:	48 cf                	iretq  
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:221
}
ffff8000008100fd:	90                   	nop
ffff8000008100fe:	48 83 c4 20          	add    rsp,0x20
ffff800000810102:	5b                   	pop    rbx
ffff800000810103:	41 5f                	pop    r15
ffff800000810105:	5d                   	pop    rbp
ffff800000810106:	c3                   	ret    

ffff800000810107 <sys_analyse_key>:
sys_analyse_key():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:224

char sys_analyse_key()
{
ffff800000810107:	f3 0f 1e fa          	endbr64 
ffff80000081010b:	55                   	push   rbp
ffff80000081010c:	48 89 e5             	mov    rbp,rsp
ffff80000081010f:	41 57                	push   r15
ffff800000810111:	53                   	push   rbx
ffff800000810112:	48 83 ec 30          	sub    rsp,0x30
ffff800000810116:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000810116 <sys_analyse_key+0xf>
ffff80000081011d:	49 bb e2 2a 11 00 00 	movabs r11,0x112ae2
ffff800000810124:	00 00 00 
ffff800000810127:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:225
    if(key_bufq.tail==key_bufq.head)return -1;
ffff80000081012a:	48 b8 78 ff ff ff ff 	movabs rax,0xffffffffffffff78
ffff800000810131:	ff ff ff 
ffff800000810134:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000810138:	8b 50 0c             	mov    edx,DWORD PTR [rax+0xc]
ffff80000081013b:	48 b8 78 ff ff ff ff 	movabs rax,0xffffffffffffff78
ffff800000810142:	ff ff ff 
ffff800000810145:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000810149:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000081014c:	39 c2                	cmp    edx,eax
ffff80000081014e:	75 0a                	jne    ffff80000081015a <sys_analyse_key+0x53>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:225 (discriminator 1)
ffff800000810150:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000810155:	e9 b1 01 00 00       	jmp    ffff80000081030b <sys_analyse_key+0x204>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:226
    char c=key_buf[key_bufq.head];
ffff80000081015a:	48 b8 78 ff ff ff ff 	movabs rax,0xffffffffffffff78
ffff800000810161:	ff ff ff 
ffff800000810164:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000810168:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff80000081016b:	48 ba 10 fd ff ff ff 	movabs rdx,0xfffffffffffffd10
ffff800000810172:	ff ff ff 
ffff800000810175:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000810179:	48 98                	cdqe   
ffff80000081017b:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff80000081017f:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:227
    key_bufq.head=(key_bufq.head+1)%key_bufq.size;
ffff800000810182:	48 b8 78 ff ff ff ff 	movabs rax,0xffffffffffffff78
ffff800000810189:	ff ff ff 
ffff80000081018c:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000810190:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000810193:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000810196:	48 b8 78 ff ff ff ff 	movabs rax,0xffffffffffffff78
ffff80000081019d:	ff ff ff 
ffff8000008101a0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008101a4:	8b 48 10             	mov    ecx,DWORD PTR [rax+0x10]
ffff8000008101a7:	89 d0                	mov    eax,edx
ffff8000008101a9:	99                   	cdq    
ffff8000008101aa:	f7 f9                	idiv   ecx
ffff8000008101ac:	48 b8 78 ff ff ff ff 	movabs rax,0xffffffffffffff78
ffff8000008101b3:	ff ff ff 
ffff8000008101b6:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008101ba:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:229
//    QHEAD(key_bufq)=(QHEAD(key_bufq)+1)%QSIZE(key_bufq);
    printf("scan code:");
ffff8000008101bd:	48 b8 be d7 ff ff ff 	movabs rax,0xffffffffffffd7be
ffff8000008101c4:	ff ff ff 
ffff8000008101c7:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008101cb:	48 89 c7             	mov    rdi,rax
ffff8000008101ce:	49 89 df             	mov    r15,rbx
ffff8000008101d1:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008101d6:	48 ba c9 ed ed ff ff 	movabs rdx,0xffffffffffededc9
ffff8000008101dd:	ff ff ff 
ffff8000008101e0:	48 01 da             	add    rdx,rbx
ffff8000008101e3:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:230
    char res[33]={0};
ffff8000008101e5:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
ffff8000008101ec:	00 
ffff8000008101ed:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff8000008101f4:	00 
ffff8000008101f5:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff8000008101fc:	00 
ffff8000008101fd:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff800000810204:	00 
ffff800000810205:	c6 45 e0 00          	mov    BYTE PTR [rbp-0x20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:231
    itoa(res,16,c);
ffff800000810209:	0f be 55 ef          	movsx  edx,BYTE PTR [rbp-0x11]
ffff80000081020d:	48 8d 45 c0          	lea    rax,[rbp-0x40]
ffff800000810211:	be 10 00 00 00       	mov    esi,0x10
ffff800000810216:	48 89 c7             	mov    rdi,rax
ffff800000810219:	49 89 df             	mov    r15,rbx
ffff80000081021c:	48 b8 4f ec ed ff ff 	movabs rax,0xffffffffffedec4f
ffff800000810223:	ff ff ff 
ffff800000810226:	48 01 d8             	add    rax,rbx
ffff800000810229:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:232
    printf(res);
ffff80000081022b:	48 8d 45 c0          	lea    rax,[rbp-0x40]
ffff80000081022f:	48 89 c7             	mov    rdi,rax
ffff800000810232:	49 89 df             	mov    r15,rbx
ffff800000810235:	b8 00 00 00 00       	mov    eax,0x0
ffff80000081023a:	48 ba c9 ed ed ff ff 	movabs rdx,0xffffffffffededc9
ffff800000810241:	ff ff ff 
ffff800000810244:	48 01 da             	add    rdx,rbx
ffff800000810247:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:233
    if(c&FLAG_BREAK){
ffff800000810249:	80 7d ef 00          	cmp    BYTE PTR [rbp-0x11],0x0
ffff80000081024d:	79 32                	jns    ffff800000810281 <sys_analyse_key+0x17a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:234
        printf("\n");
ffff80000081024f:	48 b8 c9 d7 ff ff ff 	movabs rax,0xffffffffffffd7c9
ffff800000810256:	ff ff ff 
ffff800000810259:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000081025d:	48 89 c7             	mov    rdi,rax
ffff800000810260:	49 89 df             	mov    r15,rbx
ffff800000810263:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810268:	48 ba c9 ed ed ff ff 	movabs rdx,0xffffffffffededc9
ffff80000081026f:	ff ff ff 
ffff800000810272:	48 01 da             	add    rdx,rbx
ffff800000810275:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:235
        return -1;
ffff800000810277:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000081027c:	e9 8a 00 00 00       	jmp    ffff80000081030b <sys_analyse_key+0x204>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:237
    }
    c= to_ascii(c&0x7f);
ffff800000810281:	0f be 45 ef          	movsx  eax,BYTE PTR [rbp-0x11]
ffff800000810285:	83 e0 7f             	and    eax,0x7f
ffff800000810288:	89 c7                	mov    edi,eax
ffff80000081028a:	49 89 df             	mov    r15,rbx
ffff80000081028d:	48 b8 49 d1 ee ff ff 	movabs rax,0xffffffffffeed149
ffff800000810294:	ff ff ff 
ffff800000810297:	48 01 d8             	add    rax,rbx
ffff80000081029a:	ff d0                	call   rax
ffff80000081029c:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:238
    printf(" char:");
ffff80000081029f:	48 b8 cb d7 ff ff ff 	movabs rax,0xffffffffffffd7cb
ffff8000008102a6:	ff ff ff 
ffff8000008102a9:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008102ad:	48 89 c7             	mov    rdi,rax
ffff8000008102b0:	49 89 df             	mov    r15,rbx
ffff8000008102b3:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008102b8:	48 ba c9 ed ed ff ff 	movabs rdx,0xffffffffffededc9
ffff8000008102bf:	ff ff ff 
ffff8000008102c2:	48 01 da             	add    rdx,rbx
ffff8000008102c5:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:239
    putchar(c);
ffff8000008102c7:	0f be 45 ef          	movsx  eax,BYTE PTR [rbp-0x11]
ffff8000008102cb:	89 c7                	mov    edi,eax
ffff8000008102cd:	49 89 df             	mov    r15,rbx
ffff8000008102d0:	48 b8 78 ed ed ff ff 	movabs rax,0xffffffffffeded78
ffff8000008102d7:	ff ff ff 
ffff8000008102da:	48 01 d8             	add    rax,rbx
ffff8000008102dd:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:240
    printf("\n");
ffff8000008102df:	48 b8 c9 d7 ff ff ff 	movabs rax,0xffffffffffffd7c9
ffff8000008102e6:	ff ff ff 
ffff8000008102e9:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008102ed:	48 89 c7             	mov    rdi,rax
ffff8000008102f0:	49 89 df             	mov    r15,rbx
ffff8000008102f3:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008102f8:	48 ba c9 ed ed ff ff 	movabs rdx,0xffffffffffededc9
ffff8000008102ff:	ff ff ff 
ffff800000810302:	48 01 da             	add    rdx,rbx
ffff800000810305:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:241
    return c;
ffff800000810307:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/kb.c:242 (discriminator 1)
ffff80000081030b:	48 83 c4 30          	add    rsp,0x30
ffff80000081030f:	5b                   	pop    rbx
ffff800000810310:	41 5f                	pop    r15
ffff800000810312:	5d                   	pop    rbp
ffff800000810313:	c3                   	ret    

ffff800000810314 <init_disk>:
init_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:20
struct blk_dev bd_hd={
    .do_request=hd_do_req
};
int dev_hd=-1,last_chk_res=0;
int init_disk()
{
ffff800000810314:	f3 0f 1e fa          	endbr64 
ffff800000810318:	55                   	push   rbp
ffff800000810319:	48 89 e5             	mov    rbp,rsp
ffff80000081031c:	41 57                	push   r15
ffff80000081031e:	53                   	push   rbx
ffff80000081031f:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000081031f <init_disk+0xb>
ffff800000810326:	49 bb d9 28 11 00 00 	movabs r11,0x1128d9
ffff80000081032d:	00 00 00 
ffff800000810330:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:21
    if((dev_hd= reg_blkdev(&bd_hd))<0)
ffff800000810333:	48 b8 20 fd ff ff ff 	movabs rax,0xfffffffffffffd20
ffff80000081033a:	ff ff ff 
ffff80000081033d:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000810341:	48 89 c7             	mov    rdi,rax
ffff800000810344:	49 89 df             	mov    r15,rbx
ffff800000810347:	48 b8 7e c2 ee ff ff 	movabs rax,0xffffffffffeec27e
ffff80000081034e:	ff ff ff 
ffff800000810351:	48 01 d8             	add    rax,rbx
ffff800000810354:	ff d0                	call   rax
ffff800000810356:	48 ba c8 fe ff ff ff 	movabs rdx,0xfffffffffffffec8
ffff80000081035d:	ff ff ff 
ffff800000810360:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000810364:	89 02                	mov    DWORD PTR [rdx],eax
ffff800000810366:	48 b8 c8 fe ff ff ff 	movabs rax,0xfffffffffffffec8
ffff80000081036d:	ff ff ff 
ffff800000810370:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000810374:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000810376:	85 c0                	test   eax,eax
ffff800000810378:	79 07                	jns    ffff800000810381 <init_disk+0x6d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:22
        return -1;
ffff80000081037a:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff80000081037f:	eb 05                	jmp    ffff800000810386 <init_disk+0x72>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:27
    //disk_devi= reg_device(&dev_disk);
    //disk_drvi= reg_driver(&drv_disk);
    //dev_disk.drv=&drv_disk;
    // hd_iterate();
    return 0;
ffff800000810381:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:28
}
ffff800000810386:	5b                   	pop    rbx
ffff800000810387:	41 5f                	pop    r15
ffff800000810389:	5d                   	pop    rbp
ffff80000081038a:	c3                   	ret    

ffff80000081038b <disk_int_handler_c>:
disk_int_handler_c():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:31

int disk_int_handler_c()
{
ffff80000081038b:	f3 0f 1e fa          	endbr64 
ffff80000081038f:	55                   	push   rbp
ffff800000810390:	48 89 e5             	mov    rbp,rsp
ffff800000810393:	41 57                	push   r15
ffff800000810395:	53                   	push   rbx
ffff800000810396:	48 83 ec 30          	sub    rsp,0x30
ffff80000081039a:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000081039a <disk_int_handler_c+0xf>
ffff8000008103a1:	49 bb 5e 28 11 00 00 	movabs r11,0x11285e
ffff8000008103a8:	00 00 00 
ffff8000008103ab:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:32
    if(r_running==NULL)
ffff8000008103ae:	48 b8 e0 fc ff ff ff 	movabs rax,0xfffffffffffffce0
ffff8000008103b5:	ff ff ff 
ffff8000008103b8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008103bc:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008103bf:	48 85 c0             	test   rax,rax
ffff8000008103c2:	75 32                	jne    ffff8000008103f6 <disk_int_handler_c+0x6b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:34
    {
        comprintf("err:null running dreq\n");
ffff8000008103c4:	48 b8 d2 d7 ff ff ff 	movabs rax,0xffffffffffffd7d2
ffff8000008103cb:	ff ff ff 
ffff8000008103ce:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008103d2:	48 89 c7             	mov    rdi,rax
ffff8000008103d5:	49 89 df             	mov    r15,rbx
ffff8000008103d8:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008103dd:	48 ba 3a 19 ef ff ff 	movabs rdx,0xffffffffffef193a
ffff8000008103e4:	ff ff ff 
ffff8000008103e7:	48 01 da             	add    rdx,rbx
ffff8000008103ea:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:35
        return 1;//同步读写硬盘
ffff8000008103ec:	b8 01 00 00 00       	mov    eax,0x1
ffff8000008103f1:	e9 20 03 00 00       	jmp    ffff800000810716 <disk_int_handler_c+0x38b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:37
    }
    short *p=r_running->buffer;
ffff8000008103f6:	48 b8 e0 fc ff ff ff 	movabs rax,0xfffffffffffffce0
ffff8000008103fd:	ff ff ff 
ffff800000810400:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000810404:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810407:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffff80000081040b:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:38
    int port=PORT_DISK_MAJOR;
ffff80000081040f:	c7 45 e4 f0 01 00 00 	mov    DWORD PTR [rbp-0x1c],0x1f0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:39
    if(BLKDEV_MINOR(r_running->dev)==DISK_SLAVE_MAJOR||\
ffff800000810416:	48 b8 e0 fc ff ff ff 	movabs rax,0xfffffffffffffce0
ffff80000081041d:	ff ff ff 
ffff800000810420:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000810424:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810427:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff80000081042a:	0f b7 c0             	movzx  eax,ax
ffff80000081042d:	83 e0 0f             	and    eax,0xf
ffff800000810430:	83 f8 02             	cmp    eax,0x2
ffff800000810433:	74 1f                	je     ffff800000810454 <disk_int_handler_c+0xc9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:40 (discriminator 1)
    BLKDEV_MINOR(r_running->dev)==DISK_SLAVE_SLAVE)
ffff800000810435:	48 b8 e0 fc ff ff ff 	movabs rax,0xfffffffffffffce0
ffff80000081043c:	ff ff ff 
ffff80000081043f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000810443:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810446:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff800000810449:	0f b7 c0             	movzx  eax,ax
ffff80000081044c:	83 e0 0f             	and    eax,0xf
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:39 (discriminator 1)
    if(BLKDEV_MINOR(r_running->dev)==DISK_SLAVE_MAJOR||\
ffff80000081044f:	83 f8 03             	cmp    eax,0x3
ffff800000810452:	75 07                	jne    ffff80000081045b <disk_int_handler_c+0xd0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:41
        port=PORT_DISK_SLAVE;
ffff800000810454:	c7 45 e4 70 01 00 00 	mov    DWORD PTR [rbp-0x1c],0x170
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:42
    if(r_running->cmd==BLKDEV_REQ_READ)
ffff80000081045b:	48 b8 e0 fc ff ff ff 	movabs rax,0xfffffffffffffce0
ffff800000810462:	ff ff ff 
ffff800000810465:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000810469:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000081046c:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff80000081046f:	85 c0                	test   eax,eax
ffff800000810471:	75 61                	jne    ffff8000008104d4 <disk_int_handler_c+0x149>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:46
    {
        ////printf("sys_read dist:%x\n",p);
        //读取
        for(int i=0;i<r_running->nr_sectors*256;i++)
ffff800000810473:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff80000081047a:	eb 2f                	jmp    ffff8000008104ab <disk_int_handler_c+0x120>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:48 (discriminator 3)
        {
            *p++=inw(port);
ffff80000081047c:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000081047f:	0f b7 c0             	movzx  eax,ax
ffff800000810482:	89 c7                	mov    edi,eax
ffff800000810484:	49 89 df             	mov    r15,rbx
ffff800000810487:	48 b8 9b 65 ee ff ff 	movabs rax,0xffffffffffee659b
ffff80000081048e:	ff ff ff 
ffff800000810491:	48 01 d8             	add    rax,rbx
ffff800000810494:	ff d0                	call   rax
ffff800000810496:	89 c2                	mov    edx,eax
ffff800000810498:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081049c:	48 8d 48 02          	lea    rcx,[rax+0x2]
ffff8000008104a0:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
ffff8000008104a4:	66 89 10             	mov    WORD PTR [rax],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:46 (discriminator 3)
        for(int i=0;i<r_running->nr_sectors*256;i++)
ffff8000008104a7:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:46 (discriminator 1)
ffff8000008104ab:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff8000008104ae:	48 63 d0             	movsxd rdx,eax
ffff8000008104b1:	48 b8 e0 fc ff ff ff 	movabs rax,0xfffffffffffffce0
ffff8000008104b8:	ff ff ff 
ffff8000008104bb:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008104bf:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008104c2:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff8000008104c6:	48 c1 e0 08          	shl    rax,0x8
ffff8000008104ca:	48 39 c2             	cmp    rdx,rax
ffff8000008104cd:	72 ad                	jb     ffff80000081047c <disk_int_handler_c+0xf1>
ffff8000008104cf:	e9 53 01 00 00       	jmp    ffff800000810627 <disk_int_handler_c+0x29c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:50
        }
    }else if(r_running->cmd==BLKDEV_REQ_WRITE)
ffff8000008104d4:	48 b8 e0 fc ff ff ff 	movabs rax,0xfffffffffffffce0
ffff8000008104db:	ff ff ff 
ffff8000008104de:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008104e2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008104e5:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff8000008104e8:	83 f8 01             	cmp    eax,0x1
ffff8000008104eb:	75 64                	jne    ffff800000810551 <disk_int_handler_c+0x1c6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:52
    {
        for(int i=0;i<r_running->nr_sectors*256;i++)
ffff8000008104ed:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
ffff8000008104f4:	eb 32                	jmp    ffff800000810528 <disk_int_handler_c+0x19d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:53 (discriminator 3)
            outw(port,*p++);
ffff8000008104f6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008104fa:	48 8d 50 02          	lea    rdx,[rax+0x2]
ffff8000008104fe:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff800000810502:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffff800000810505:	0f b7 d0             	movzx  edx,ax
ffff800000810508:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000081050b:	0f b7 c0             	movzx  eax,ax
ffff80000081050e:	89 d6                	mov    esi,edx
ffff800000810510:	89 c7                	mov    edi,eax
ffff800000810512:	49 89 df             	mov    r15,rbx
ffff800000810515:	48 b8 85 65 ee ff ff 	movabs rax,0xffffffffffee6585
ffff80000081051c:	ff ff ff 
ffff80000081051f:	48 01 d8             	add    rax,rbx
ffff800000810522:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:52 (discriminator 3)
        for(int i=0;i<r_running->nr_sectors*256;i++)
ffff800000810524:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:52 (discriminator 1)
ffff800000810528:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000081052b:	48 63 d0             	movsxd rdx,eax
ffff80000081052e:	48 b8 e0 fc ff ff ff 	movabs rax,0xfffffffffffffce0
ffff800000810535:	ff ff ff 
ffff800000810538:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000081053c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000081053f:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000810543:	48 c1 e0 08          	shl    rax,0x8
ffff800000810547:	48 39 c2             	cmp    rdx,rax
ffff80000081054a:	72 aa                	jb     ffff8000008104f6 <disk_int_handler_c+0x16b>
ffff80000081054c:	e9 d6 00 00 00       	jmp    ffff800000810627 <disk_int_handler_c+0x29c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:54
    }else if(r_running->cmd==DISKREQ_CHECK)
ffff800000810551:	48 b8 e0 fc ff ff ff 	movabs rax,0xfffffffffffffce0
ffff800000810558:	ff ff ff 
ffff80000081055b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000081055f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810562:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff800000810565:	83 f8 02             	cmp    eax,0x2
ffff800000810568:	75 54                	jne    ffff8000008105be <disk_int_handler_c+0x233>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:56
    {
        char stat=inb(port+7);
ffff80000081056a:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000081056d:	83 c0 07             	add    eax,0x7
ffff800000810570:	0f b6 c0             	movzx  eax,al
ffff800000810573:	89 c7                	mov    edi,eax
ffff800000810575:	49 89 df             	mov    r15,rbx
ffff800000810578:	48 b8 91 65 ee ff ff 	movabs rax,0xffffffffffee6591
ffff80000081057f:	ff ff ff 
ffff800000810582:	48 01 d8             	add    rax,rbx
ffff800000810585:	ff d0                	call   rax
ffff800000810587:	88 45 d7             	mov    BYTE PTR [rbp-0x29],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:57
        short dat=inw(port);
ffff80000081058a:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000081058d:	0f b7 c0             	movzx  eax,ax
ffff800000810590:	89 c7                	mov    edi,eax
ffff800000810592:	49 89 df             	mov    r15,rbx
ffff800000810595:	48 b8 9b 65 ee ff ff 	movabs rax,0xffffffffffee659b
ffff80000081059c:	ff ff ff 
ffff80000081059f:	48 01 d8             	add    rax,rbx
ffff8000008105a2:	ff d0                	call   rax
ffff8000008105a4:	66 89 45 d4          	mov    WORD PTR [rbp-0x2c],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:60
        if(1)
        {
            last_chk_res=DISK_CHK_OK;
ffff8000008105a8:	48 b8 30 fd ff ff ff 	movabs rax,0xfffffffffffffd30
ffff8000008105af:	ff ff ff 
ffff8000008105b2:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008105b6:	c7 00 01 00 00 00    	mov    DWORD PTR [rax],0x1
ffff8000008105bc:	eb 69                	jmp    ffff800000810627 <disk_int_handler_c+0x29c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:67
        {
            char err=inb(port+1);//错误原因
            printf("checking disk err:%x\nresetting hd\n",err);
            last_chk_res=DISK_CHK_ERR;
        }
    }else if(r_running->cmd==DISKREQ_RESET)
ffff8000008105be:	48 b8 e0 fc ff ff ff 	movabs rax,0xfffffffffffffce0
ffff8000008105c5:	ff ff ff 
ffff8000008105c8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008105cc:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008105cf:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffff8000008105d2:	83 f8 03             	cmp    eax,0x3
ffff8000008105d5:	75 50                	jne    ffff800000810627 <disk_int_handler_c+0x29c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:69
    {
        int stat=inb(port+7);
ffff8000008105d7:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008105da:	83 c0 07             	add    eax,0x7
ffff8000008105dd:	0f b6 c0             	movzx  eax,al
ffff8000008105e0:	89 c7                	mov    edi,eax
ffff8000008105e2:	49 89 df             	mov    r15,rbx
ffff8000008105e5:	48 b8 91 65 ee ff ff 	movabs rax,0xffffffffffee6591
ffff8000008105ec:	ff ff ff 
ffff8000008105ef:	48 01 d8             	add    rax,rbx
ffff8000008105f2:	ff d0                	call   rax
ffff8000008105f4:	0f b6 c0             	movzx  eax,al
ffff8000008105f7:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:70
        printf("reset disk done.\nstat now:%x\n",stat);
ffff8000008105fa:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff8000008105fd:	89 c6                	mov    esi,eax
ffff8000008105ff:	48 b8 e9 d7 ff ff ff 	movabs rax,0xffffffffffffd7e9
ffff800000810606:	ff ff ff 
ffff800000810609:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000081060d:	48 89 c7             	mov    rdi,rax
ffff800000810610:	49 89 df             	mov    r15,rbx
ffff800000810613:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810618:	48 ba c9 ed ed ff ff 	movabs rdx,0xffffffffffededc9
ffff80000081061f:	ff ff ff 
ffff800000810622:	48 01 da             	add    rdx,rbx
ffff800000810625:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:73
    }
    
    r_running=NULL;
ffff800000810627:	48 b8 e0 fc ff ff ff 	movabs rax,0xfffffffffffffce0
ffff80000081062e:	ff ff ff 
ffff800000810631:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000810635:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:74
    end_request(dev_hd);
ffff80000081063c:	48 b8 c8 fe ff ff ff 	movabs rax,0xfffffffffffffec8
ffff800000810643:	ff ff ff 
ffff800000810646:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000081064a:	8b 00                	mov    eax,DWORD PTR [rax]
ffff80000081064c:	0f b7 c0             	movzx  eax,ax
ffff80000081064f:	66 89 45 d2          	mov    WORD PTR [rbp-0x2e],ax
end_request():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:66
    int major=BLKDEV_MAJOR(dev);
ffff800000810653:	0f b7 45 d2          	movzx  eax,WORD PTR [rbp-0x2e]
ffff800000810657:	c1 f8 04             	sar    eax,0x4
ffff80000081065a:	83 e0 0f             	and    eax,0xf
ffff80000081065d:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:67
    blk_devs[major].current_request->dev=-1;
ffff800000810660:	48 b8 70 ff ff ff ff 	movabs rax,0xffffffffffffff70
ffff800000810667:	ff ff ff 
ffff80000081066a:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff80000081066e:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000810671:	48 98                	cdqe   
ffff800000810673:	48 c1 e0 04          	shl    rax,0x4
ffff800000810677:	48 01 d0             	add    rax,rdx
ffff80000081067a:	48 83 c0 08          	add    rax,0x8
ffff80000081067e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810681:	66 c7 00 ff ff       	mov    WORD PTR [rax],0xffff
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:68
    blk_devs[major].current_request=blk_devs[major].current_request->next;
ffff800000810686:	48 b8 70 ff ff ff ff 	movabs rax,0xffffffffffffff70
ffff80000081068d:	ff ff ff 
ffff800000810690:	48 8b 14 03          	mov    rdx,QWORD PTR [rbx+rax*1]
ffff800000810694:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffff800000810697:	48 98                	cdqe   
ffff800000810699:	48 c1 e0 04          	shl    rax,0x4
ffff80000081069d:	48 01 d0             	add    rax,rdx
ffff8000008106a0:	48 83 c0 08          	add    rax,0x8
ffff8000008106a4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008106a7:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff8000008106ab:	48 ba 70 ff ff ff ff 	movabs rdx,0xffffffffffffff70
ffff8000008106b2:	ff ff ff 
ffff8000008106b5:	48 8b 0c 13          	mov    rcx,QWORD PTR [rbx+rdx*1]
ffff8000008106b9:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff8000008106bc:	48 63 d2             	movsxd rdx,edx
ffff8000008106bf:	48 c1 e2 04          	shl    rdx,0x4
ffff8000008106c3:	48 01 ca             	add    rdx,rcx
ffff8000008106c6:	48 83 c2 08          	add    rdx,0x8
ffff8000008106ca:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:69
}
ffff8000008106cd:	90                   	nop
disk_int_handler_c():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:76
    //执行下一个请求
    hd_do_req(blk_devs[dev_hd].current_request);
ffff8000008106ce:	48 b8 c8 fe ff ff ff 	movabs rax,0xfffffffffffffec8
ffff8000008106d5:	ff ff ff 
ffff8000008106d8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008106dc:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008106de:	48 ba 70 ff ff ff ff 	movabs rdx,0xffffffffffffff70
ffff8000008106e5:	ff ff ff 
ffff8000008106e8:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff8000008106ec:	48 98                	cdqe   
ffff8000008106ee:	48 c1 e0 04          	shl    rax,0x4
ffff8000008106f2:	48 01 d0             	add    rax,rdx
ffff8000008106f5:	48 83 c0 08          	add    rax,0x8
ffff8000008106f9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008106fc:	48 89 c7             	mov    rdi,rax
ffff8000008106ff:	49 89 df             	mov    r15,rbx
ffff800000810702:	48 b8 db e0 ee ff ff 	movabs rax,0xffffffffffeee0db
ffff800000810709:	ff ff ff 
ffff80000081070c:	48 01 d8             	add    rax,rbx
ffff80000081070f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:77
    return 0;
ffff800000810711:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:78
}
ffff800000810716:	48 83 c4 30          	add    rsp,0x30
ffff80000081071a:	5b                   	pop    rbx
ffff80000081071b:	41 5f                	pop    r15
ffff80000081071d:	5d                   	pop    rbp
ffff80000081071e:	c3                   	ret    

ffff80000081071f <async_reset_disk>:
async_reset_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:80
int async_reset_disk(int disk)
{
ffff80000081071f:	f3 0f 1e fa          	endbr64 
ffff800000810723:	55                   	push   rbp
ffff800000810724:	48 89 e5             	mov    rbp,rsp
ffff800000810727:	41 57                	push   r15
ffff800000810729:	48 83 ec 18          	sub    rsp,0x18
ffff80000081072d:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000081072d <async_reset_disk+0xe>
ffff800000810734:	49 bb cb 24 11 00 00 	movabs r11,0x1124cb
ffff80000081073b:	00 00 00 
ffff80000081073e:	4c 01 d8             	add    rax,r11
ffff800000810741:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:81
    outb(PORT_DISK_CONTROL,DISK_CMD_RESET);
ffff800000810744:	be 0c 00 00 00       	mov    esi,0xc
ffff800000810749:	bf f6 03 00 00       	mov    edi,0x3f6
ffff80000081074e:	49 89 c7             	mov    r15,rax
ffff800000810751:	48 ba 78 65 ee ff ff 	movabs rdx,0xffffffffffee6578
ffff800000810758:	ff ff ff 
ffff80000081075b:	48 01 c2             	add    rdx,rax
ffff80000081075e:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:82
    return 0;
ffff800000810760:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:83
}
ffff800000810765:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000810769:	c9                   	leave  
ffff80000081076a:	c3                   	ret    

ffff80000081076b <async_read_disk>:
async_read_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:85
int async_read_disk(int disk,unsigned int lba,int sec_n,char* mem_addr)
{
ffff80000081076b:	f3 0f 1e fa          	endbr64 
ffff80000081076f:	55                   	push   rbp
ffff800000810770:	48 89 e5             	mov    rbp,rsp
ffff800000810773:	41 57                	push   r15
ffff800000810775:	53                   	push   rbx
ffff800000810776:	48 83 ec 30          	sub    rsp,0x30
ffff80000081077a:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000081077a <async_read_disk+0xf>
ffff800000810781:	49 bb 7e 24 11 00 00 	movabs r11,0x11247e
ffff800000810788:	00 00 00 
ffff80000081078b:	4c 01 db             	add    rbx,r11
ffff80000081078e:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff800000810791:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff800000810794:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff800000810797:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:86
    unsigned short port=PORT_DISK_MAJOR;
ffff80000081079b:	66 c7 45 ee f0 01    	mov    WORD PTR [rbp-0x12],0x1f0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:87
    int slave_disk=0;
ffff8000008107a1:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:88
    if(disk==DISK_SLAVE_MAJOR||disk==DISK_SLAVE_SLAVE)
ffff8000008107a8:	83 7d dc 02          	cmp    DWORD PTR [rbp-0x24],0x2
ffff8000008107ac:	74 06                	je     ffff8000008107b4 <async_read_disk+0x49>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:88 (discriminator 1)
ffff8000008107ae:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff8000008107b2:	75 06                	jne    ffff8000008107ba <async_read_disk+0x4f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:89
        port=PORT_DISK_SLAVE;
ffff8000008107b4:	66 c7 45 ee 70 01    	mov    WORD PTR [rbp-0x12],0x170
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:90
    if(disk==DISK_SLAVE_SLAVE||disk==DISK_MAJOR_SLAVE)
ffff8000008107ba:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff8000008107be:	74 06                	je     ffff8000008107c6 <async_read_disk+0x5b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:90 (discriminator 1)
ffff8000008107c0:	83 7d dc 01          	cmp    DWORD PTR [rbp-0x24],0x1
ffff8000008107c4:	75 07                	jne    ffff8000008107cd <async_read_disk+0x62>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:91
        slave_disk=1;
ffff8000008107c6:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:92
    outb(port+2,sec_n);
ffff8000008107cd:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff8000008107d0:	0f b6 d0             	movzx  edx,al
ffff8000008107d3:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff8000008107d7:	83 c0 02             	add    eax,0x2
ffff8000008107da:	0f b7 c0             	movzx  eax,ax
ffff8000008107dd:	89 d6                	mov    esi,edx
ffff8000008107df:	89 c7                	mov    edi,eax
ffff8000008107e1:	49 89 df             	mov    r15,rbx
ffff8000008107e4:	48 b8 78 65 ee ff ff 	movabs rax,0xffffffffffee6578
ffff8000008107eb:	ff ff ff 
ffff8000008107ee:	48 01 d8             	add    rax,rbx
ffff8000008107f1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:93
    outb(port+3,lba&0xff);
ffff8000008107f3:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff8000008107f6:	0f b6 d0             	movzx  edx,al
ffff8000008107f9:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff8000008107fd:	83 c0 03             	add    eax,0x3
ffff800000810800:	0f b7 c0             	movzx  eax,ax
ffff800000810803:	89 d6                	mov    esi,edx
ffff800000810805:	89 c7                	mov    edi,eax
ffff800000810807:	49 89 df             	mov    r15,rbx
ffff80000081080a:	48 b8 78 65 ee ff ff 	movabs rax,0xffffffffffee6578
ffff800000810811:	ff ff ff 
ffff800000810814:	48 01 d8             	add    rax,rbx
ffff800000810817:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:94
    outb(port+4,(lba>>8)&0xff);
ffff800000810819:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff80000081081c:	c1 e8 08             	shr    eax,0x8
ffff80000081081f:	0f b6 d0             	movzx  edx,al
ffff800000810822:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff800000810826:	83 c0 04             	add    eax,0x4
ffff800000810829:	0f b7 c0             	movzx  eax,ax
ffff80000081082c:	89 d6                	mov    esi,edx
ffff80000081082e:	89 c7                	mov    edi,eax
ffff800000810830:	49 89 df             	mov    r15,rbx
ffff800000810833:	48 b8 78 65 ee ff ff 	movabs rax,0xffffffffffee6578
ffff80000081083a:	ff ff ff 
ffff80000081083d:	48 01 d8             	add    rax,rbx
ffff800000810840:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:95
    outb(port+5,(lba>>16)&0xff);
ffff800000810842:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000810845:	c1 e8 10             	shr    eax,0x10
ffff800000810848:	0f b6 d0             	movzx  edx,al
ffff80000081084b:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000081084f:	83 c0 05             	add    eax,0x5
ffff800000810852:	0f b7 c0             	movzx  eax,ax
ffff800000810855:	89 d6                	mov    esi,edx
ffff800000810857:	89 c7                	mov    edi,eax
ffff800000810859:	49 89 df             	mov    r15,rbx
ffff80000081085c:	48 b8 78 65 ee ff ff 	movabs rax,0xffffffffffee6578
ffff800000810863:	ff ff ff 
ffff800000810866:	48 01 d8             	add    rax,rbx
ffff800000810869:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:96
    char drv=slave_disk?0x10:0;
ffff80000081086b:	83 7d e8 00          	cmp    DWORD PTR [rbp-0x18],0x0
ffff80000081086f:	74 07                	je     ffff800000810878 <async_read_disk+0x10d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:96 (discriminator 1)
ffff800000810871:	b8 10 00 00 00       	mov    eax,0x10
ffff800000810876:	eb 05                	jmp    ffff80000081087d <async_read_disk+0x112>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:96 (discriminator 2)
ffff800000810878:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:96 (discriminator 4)
ffff80000081087d:	88 45 e7             	mov    BYTE PTR [rbp-0x19],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:97 (discriminator 4)
    char lba_hi=(lba>>24)&0xf|drv|0xe0;
ffff800000810880:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000810883:	c1 e8 18             	shr    eax,0x18
ffff800000810886:	83 e0 0f             	and    eax,0xf
ffff800000810889:	89 c2                	mov    edx,eax
ffff80000081088b:	0f b6 45 e7          	movzx  eax,BYTE PTR [rbp-0x19]
ffff80000081088f:	09 d0                	or     eax,edx
ffff800000810891:	83 c8 e0             	or     eax,0xffffffe0
ffff800000810894:	88 45 e6             	mov    BYTE PTR [rbp-0x1a],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:98 (discriminator 4)
    outb(port+6,lba_hi);
ffff800000810897:	0f b6 45 e6          	movzx  eax,BYTE PTR [rbp-0x1a]
ffff80000081089b:	0f b6 d0             	movzx  edx,al
ffff80000081089e:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff8000008108a2:	83 c0 06             	add    eax,0x6
ffff8000008108a5:	0f b7 c0             	movzx  eax,ax
ffff8000008108a8:	89 d6                	mov    esi,edx
ffff8000008108aa:	89 c7                	mov    edi,eax
ffff8000008108ac:	49 89 df             	mov    r15,rbx
ffff8000008108af:	48 b8 78 65 ee ff ff 	movabs rax,0xffffffffffee6578
ffff8000008108b6:	ff ff ff 
ffff8000008108b9:	48 01 d8             	add    rax,rbx
ffff8000008108bc:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:99 (discriminator 4)
    outb(port+7,DISK_CMD_READ);
ffff8000008108be:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff8000008108c2:	83 c0 07             	add    eax,0x7
ffff8000008108c5:	0f b7 c0             	movzx  eax,ax
ffff8000008108c8:	be 20 00 00 00       	mov    esi,0x20
ffff8000008108cd:	89 c7                	mov    edi,eax
ffff8000008108cf:	49 89 df             	mov    r15,rbx
ffff8000008108d2:	48 b8 78 65 ee ff ff 	movabs rax,0xffffffffffee6578
ffff8000008108d9:	ff ff ff 
ffff8000008108dc:	48 01 d8             	add    rax,rbx
ffff8000008108df:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:119 (discriminator 4)
    // }
    // for(int i=0;i<running_req->sec_n*256;i++)
    // {
    //     *mem_addr++=inw(port);
    // }
    return 0;
ffff8000008108e1:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:120 (discriminator 4)
}
ffff8000008108e6:	48 83 c4 30          	add    rsp,0x30
ffff8000008108ea:	5b                   	pop    rbx
ffff8000008108eb:	41 5f                	pop    r15
ffff8000008108ed:	5d                   	pop    rbp
ffff8000008108ee:	c3                   	ret    

ffff8000008108ef <async_write_disk>:
async_write_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:122
int async_write_disk(int disk,unsigned int lba, int sec_n, char* mem_ptr)
{
ffff8000008108ef:	f3 0f 1e fa          	endbr64 
ffff8000008108f3:	55                   	push   rbp
ffff8000008108f4:	48 89 e5             	mov    rbp,rsp
ffff8000008108f7:	41 57                	push   r15
ffff8000008108f9:	53                   	push   rbx
ffff8000008108fa:	48 83 ec 30          	sub    rsp,0x30
ffff8000008108fe:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008108fe <async_write_disk+0xf>
ffff800000810905:	49 bb fa 22 11 00 00 	movabs r11,0x1122fa
ffff80000081090c:	00 00 00 
ffff80000081090f:	4c 01 db             	add    rbx,r11
ffff800000810912:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff800000810915:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff800000810918:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff80000081091b:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:123
    unsigned short port=PORT_DISK_MAJOR;
ffff80000081091f:	66 c7 45 ee f0 01    	mov    WORD PTR [rbp-0x12],0x1f0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:124
    int slave_disk=0;
ffff800000810925:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:125
    if(disk==DISK_SLAVE_MAJOR||disk==DISK_SLAVE_SLAVE)
ffff80000081092c:	83 7d dc 02          	cmp    DWORD PTR [rbp-0x24],0x2
ffff800000810930:	74 06                	je     ffff800000810938 <async_write_disk+0x49>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:125 (discriminator 1)
ffff800000810932:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff800000810936:	75 06                	jne    ffff80000081093e <async_write_disk+0x4f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:126
        port=PORT_DISK_SLAVE;
ffff800000810938:	66 c7 45 ee 70 01    	mov    WORD PTR [rbp-0x12],0x170
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:127
    if(disk==DISK_SLAVE_SLAVE||disk==DISK_MAJOR_SLAVE)
ffff80000081093e:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff800000810942:	74 06                	je     ffff80000081094a <async_write_disk+0x5b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:127 (discriminator 1)
ffff800000810944:	83 7d dc 01          	cmp    DWORD PTR [rbp-0x24],0x1
ffff800000810948:	75 07                	jne    ffff800000810951 <async_write_disk+0x62>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:128
        slave_disk=1;
ffff80000081094a:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:131
    while (1)
    {
        byte t=inb(0x1f7);
ffff800000810951:	bf f7 00 00 00       	mov    edi,0xf7
ffff800000810956:	49 89 df             	mov    r15,rbx
ffff800000810959:	48 b8 91 65 ee ff ff 	movabs rax,0xffffffffffee6591
ffff800000810960:	ff ff ff 
ffff800000810963:	48 01 d8             	add    rax,rbx
ffff800000810966:	ff d0                	call   rax
ffff800000810968:	88 45 e7             	mov    BYTE PTR [rbp-0x19],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:133
        //logf("istat:%x",t);
        byte err=t&1;
ffff80000081096b:	0f b6 45 e7          	movzx  eax,BYTE PTR [rbp-0x19]
ffff80000081096f:	83 e0 01             	and    eax,0x1
ffff800000810972:	88 45 e6             	mov    BYTE PTR [rbp-0x1a],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:134
        if(err!=0)
ffff800000810975:	80 7d e6 00          	cmp    BYTE PTR [rbp-0x1a],0x0
ffff800000810979:	74 0a                	je     ffff800000810985 <async_write_disk+0x96>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:137
        {
            //printf("ERR iwriting disk\n");
            return -1;
ffff80000081097b:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000810980:	e9 23 01 00 00       	jmp    ffff800000810aa8 <async_write_disk+0x1b9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:139
        }
        t&=0x88;
ffff800000810985:	80 65 e7 88          	and    BYTE PTR [rbp-0x19],0x88
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:140
        if(t==0x8)break;
ffff800000810989:	80 7d e7 08          	cmp    BYTE PTR [rbp-0x19],0x8
ffff80000081098d:	74 02                	je     ffff800000810991 <async_write_disk+0xa2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:130
    {
ffff80000081098f:	eb c0                	jmp    ffff800000810951 <async_write_disk+0x62>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:140
        if(t==0x8)break;
ffff800000810991:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:142
    }
    outb(port+2,sec_n);
ffff800000810992:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff800000810995:	0f b6 d0             	movzx  edx,al
ffff800000810998:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff80000081099c:	83 c0 02             	add    eax,0x2
ffff80000081099f:	0f b7 c0             	movzx  eax,ax
ffff8000008109a2:	89 d6                	mov    esi,edx
ffff8000008109a4:	89 c7                	mov    edi,eax
ffff8000008109a6:	49 89 df             	mov    r15,rbx
ffff8000008109a9:	48 b8 78 65 ee ff ff 	movabs rax,0xffffffffffee6578
ffff8000008109b0:	ff ff ff 
ffff8000008109b3:	48 01 d8             	add    rax,rbx
ffff8000008109b6:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:143
    outb(port+3,lba&0xff);
ffff8000008109b8:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff8000008109bb:	0f b6 d0             	movzx  edx,al
ffff8000008109be:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff8000008109c2:	83 c0 03             	add    eax,0x3
ffff8000008109c5:	0f b7 c0             	movzx  eax,ax
ffff8000008109c8:	89 d6                	mov    esi,edx
ffff8000008109ca:	89 c7                	mov    edi,eax
ffff8000008109cc:	49 89 df             	mov    r15,rbx
ffff8000008109cf:	48 b8 78 65 ee ff ff 	movabs rax,0xffffffffffee6578
ffff8000008109d6:	ff ff ff 
ffff8000008109d9:	48 01 d8             	add    rax,rbx
ffff8000008109dc:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:144
    outb(port+4,(lba>>8)&0xff);
ffff8000008109de:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff8000008109e1:	c1 e8 08             	shr    eax,0x8
ffff8000008109e4:	0f b6 d0             	movzx  edx,al
ffff8000008109e7:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff8000008109eb:	83 c0 04             	add    eax,0x4
ffff8000008109ee:	0f b7 c0             	movzx  eax,ax
ffff8000008109f1:	89 d6                	mov    esi,edx
ffff8000008109f3:	89 c7                	mov    edi,eax
ffff8000008109f5:	49 89 df             	mov    r15,rbx
ffff8000008109f8:	48 b8 78 65 ee ff ff 	movabs rax,0xffffffffffee6578
ffff8000008109ff:	ff ff ff 
ffff800000810a02:	48 01 d8             	add    rax,rbx
ffff800000810a05:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:145
    outb(port+5,(lba>>16)&0xff);
ffff800000810a07:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000810a0a:	c1 e8 10             	shr    eax,0x10
ffff800000810a0d:	0f b6 d0             	movzx  edx,al
ffff800000810a10:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff800000810a14:	83 c0 05             	add    eax,0x5
ffff800000810a17:	0f b7 c0             	movzx  eax,ax
ffff800000810a1a:	89 d6                	mov    esi,edx
ffff800000810a1c:	89 c7                	mov    edi,eax
ffff800000810a1e:	49 89 df             	mov    r15,rbx
ffff800000810a21:	48 b8 78 65 ee ff ff 	movabs rax,0xffffffffffee6578
ffff800000810a28:	ff ff ff 
ffff800000810a2b:	48 01 d8             	add    rax,rbx
ffff800000810a2e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:146
    char drv=slave_disk?0x10:0;
ffff800000810a30:	83 7d e8 00          	cmp    DWORD PTR [rbp-0x18],0x0
ffff800000810a34:	74 07                	je     ffff800000810a3d <async_write_disk+0x14e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:146 (discriminator 1)
ffff800000810a36:	b8 10 00 00 00       	mov    eax,0x10
ffff800000810a3b:	eb 05                	jmp    ffff800000810a42 <async_write_disk+0x153>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:146 (discriminator 2)
ffff800000810a3d:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:146 (discriminator 4)
ffff800000810a42:	88 45 e5             	mov    BYTE PTR [rbp-0x1b],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:147 (discriminator 4)
    unsigned char lba_hi=(lba>>24)&0xf|drv|0xe0;
ffff800000810a45:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000810a48:	c1 e8 18             	shr    eax,0x18
ffff800000810a4b:	83 e0 0f             	and    eax,0xf
ffff800000810a4e:	89 c2                	mov    edx,eax
ffff800000810a50:	0f b6 45 e5          	movzx  eax,BYTE PTR [rbp-0x1b]
ffff800000810a54:	09 d0                	or     eax,edx
ffff800000810a56:	83 c8 e0             	or     eax,0xffffffe0
ffff800000810a59:	88 45 e4             	mov    BYTE PTR [rbp-0x1c],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:148 (discriminator 4)
    outb(port+6,lba_hi);
ffff800000810a5c:	0f b6 55 e4          	movzx  edx,BYTE PTR [rbp-0x1c]
ffff800000810a60:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff800000810a64:	83 c0 06             	add    eax,0x6
ffff800000810a67:	0f b7 c0             	movzx  eax,ax
ffff800000810a6a:	89 d6                	mov    esi,edx
ffff800000810a6c:	89 c7                	mov    edi,eax
ffff800000810a6e:	49 89 df             	mov    r15,rbx
ffff800000810a71:	48 b8 78 65 ee ff ff 	movabs rax,0xffffffffffee6578
ffff800000810a78:	ff ff ff 
ffff800000810a7b:	48 01 d8             	add    rax,rbx
ffff800000810a7e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:149 (discriminator 4)
    outb(port+7,DISK_CMD_WRITE);
ffff800000810a80:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff800000810a84:	83 c0 07             	add    eax,0x7
ffff800000810a87:	0f b7 c0             	movzx  eax,ax
ffff800000810a8a:	be 30 00 00 00       	mov    esi,0x30
ffff800000810a8f:	89 c7                	mov    edi,eax
ffff800000810a91:	49 89 df             	mov    r15,rbx
ffff800000810a94:	48 b8 78 65 ee ff ff 	movabs rax,0xffffffffffee6578
ffff800000810a9b:	ff ff ff 
ffff800000810a9e:	48 01 d8             	add    rax,rbx
ffff800000810aa1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:166 (discriminator 4)
    //     if(t==0x8)break;
    // }
    // short *p=mem_ptr;
    // for(int i=0;i<running_req->sec_n*256;i++)
    //         outw(port,*p++);
    return 0;
ffff800000810aa3:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:167
}
ffff800000810aa8:	48 83 c4 30          	add    rsp,0x30
ffff800000810aac:	5b                   	pop    rbx
ffff800000810aad:	41 5f                	pop    r15
ffff800000810aaf:	5d                   	pop    rbp
ffff800000810ab0:	c3                   	ret    

ffff800000810ab1 <read_disk>:
read_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:169
int read_disk(int disk, int lba, int secn, char *dest)
{
ffff800000810ab1:	f3 0f 1e fa          	endbr64 
ffff800000810ab5:	55                   	push   rbp
ffff800000810ab6:	48 89 e5             	mov    rbp,rsp
ffff800000810ab9:	41 57                	push   r15
ffff800000810abb:	53                   	push   rbx
ffff800000810abc:	48 83 ec 30          	sub    rsp,0x30
ffff800000810ac0:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000810ac0 <read_disk+0xf>
ffff800000810ac7:	49 bb 38 21 11 00 00 	movabs r11,0x112138
ffff800000810ace:	00 00 00 
ffff800000810ad1:	4c 01 db             	add    rbx,r11
ffff800000810ad4:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff800000810ad7:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff800000810ada:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff800000810add:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:171
    // request(disk,DISKREQ_READ,lba,secn,dest);
    int ret=read_disk_asm(lba,secn,dest);
ffff800000810ae1:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000810ae5:	8b 4d d4             	mov    ecx,DWORD PTR [rbp-0x2c]
ffff800000810ae8:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000810aeb:	89 ce                	mov    esi,ecx
ffff800000810aed:	89 c7                	mov    edi,eax
ffff800000810aef:	49 89 df             	mov    r15,rbx
ffff800000810af2:	48 b8 64 e2 ee ff ff 	movabs rax,0xffffffffffeee264
ffff800000810af9:	ff ff ff 
ffff800000810afc:	48 01 d8             	add    rax,rbx
ffff800000810aff:	ff d0                	call   rax
ffff800000810b01:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:179

        // running_req->stat=REQ_STAT_DONE;
        // running_req->args->stat=REQ_STAT_EMPTY;
    }
    //set_proc_stat(running_req->pid,TASK_READY);
    running_req=NULL;
ffff800000810b04:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff800000810b0b:	ff ff ff 
ffff800000810b0e:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000810b12:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:180
    return ret;
ffff800000810b19:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:181
}
ffff800000810b1c:	48 83 c4 30          	add    rsp,0x30
ffff800000810b20:	5b                   	pop    rbx
ffff800000810b21:	41 5f                	pop    r15
ffff800000810b23:	5d                   	pop    rbp
ffff800000810b24:	c3                   	ret    

ffff800000810b25 <write_disk>:
write_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:183
int write_disk(int disk, int lba, int secn, char *src)
{
ffff800000810b25:	f3 0f 1e fa          	endbr64 
ffff800000810b29:	55                   	push   rbp
ffff800000810b2a:	48 89 e5             	mov    rbp,rsp
ffff800000810b2d:	41 57                	push   r15
ffff800000810b2f:	53                   	push   rbx
ffff800000810b30:	48 83 ec 30          	sub    rsp,0x30
ffff800000810b34:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000810b34 <write_disk+0xf>
ffff800000810b3b:	49 bb c4 20 11 00 00 	movabs r11,0x1120c4
ffff800000810b42:	00 00 00 
ffff800000810b45:	4c 01 db             	add    rbx,r11
ffff800000810b48:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffff800000810b4b:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff800000810b4e:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
ffff800000810b51:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:185
    // request(disk,DISKREQ_WRITE,lba,secn,src);
    int ret=write_disk_asm(lba,secn,src);
ffff800000810b55:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000810b59:	8b 4d d4             	mov    ecx,DWORD PTR [rbp-0x2c]
ffff800000810b5c:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000810b5f:	89 ce                	mov    esi,ecx
ffff800000810b61:	89 c7                	mov    edi,eax
ffff800000810b63:	49 89 df             	mov    r15,rbx
ffff800000810b66:	48 b8 d8 e2 ee ff ff 	movabs rax,0xffffffffffeee2d8
ffff800000810b6d:	ff ff ff 
ffff800000810b70:	48 01 d8             	add    rax,rbx
ffff800000810b73:	ff d0                	call   rax
ffff800000810b75:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:192
    if(running_req){

        // running_req->stat=REQ_STAT_DONE;
        // running_req->args->stat=REQ_STAT_EMPTY;
    }
    running_req=NULL;
ffff800000810b78:	48 b8 80 fe ff ff ff 	movabs rax,0xfffffffffffffe80
ffff800000810b7f:	ff ff ff 
ffff800000810b82:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000810b86:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:193
    return ret;
ffff800000810b8d:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:194
}
ffff800000810b90:	48 83 c4 30          	add    rsp,0x30
ffff800000810b94:	5b                   	pop    rbx
ffff800000810b95:	41 5f                	pop    r15
ffff800000810b97:	5d                   	pop    rbp
ffff800000810b98:	c3                   	ret    

ffff800000810b99 <async_check_disk>:
async_check_disk():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:198


int async_check_disk(int disk)
{
ffff800000810b99:	f3 0f 1e fa          	endbr64 
ffff800000810b9d:	55                   	push   rbp
ffff800000810b9e:	48 89 e5             	mov    rbp,rsp
ffff800000810ba1:	41 57                	push   r15
ffff800000810ba3:	53                   	push   rbx
ffff800000810ba4:	48 83 ec 20          	sub    rsp,0x20
ffff800000810ba8:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000810ba8 <async_check_disk+0xf>
ffff800000810baf:	49 bb 50 20 11 00 00 	movabs r11,0x112050
ffff800000810bb6:	00 00 00 
ffff800000810bb9:	4c 01 db             	add    rbx,r11
ffff800000810bbc:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:199
    unsigned short disknr=PORT_DISK_MAJOR;
ffff800000810bbf:	66 c7 45 ee f0 01    	mov    WORD PTR [rbp-0x12],0x1f0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:200
    unsigned short chkcmd=0xe0;
ffff800000810bc5:	66 c7 45 ec e0 00    	mov    WORD PTR [rbp-0x14],0xe0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:201
    if(disk==DISK_SLAVE_MAJOR||disk==DISK_SLAVE_SLAVE)
ffff800000810bcb:	83 7d dc 02          	cmp    DWORD PTR [rbp-0x24],0x2
ffff800000810bcf:	74 06                	je     ffff800000810bd7 <async_check_disk+0x3e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:201 (discriminator 1)
ffff800000810bd1:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff800000810bd5:	75 06                	jne    ffff800000810bdd <async_check_disk+0x44>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:202
        disknr=PORT_DISK_SLAVE;
ffff800000810bd7:	66 c7 45 ee 70 01    	mov    WORD PTR [rbp-0x12],0x170
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:203
    if(disk==DISK_MAJOR_SLAVE||disk==DISK_SLAVE_SLAVE)
ffff800000810bdd:	83 7d dc 01          	cmp    DWORD PTR [rbp-0x24],0x1
ffff800000810be1:	74 06                	je     ffff800000810be9 <async_check_disk+0x50>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:203 (discriminator 1)
ffff800000810be3:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
ffff800000810be7:	75 06                	jne    ffff800000810bef <async_check_disk+0x56>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:204
        chkcmd=0xf0;
ffff800000810be9:	66 c7 45 ec f0 00    	mov    WORD PTR [rbp-0x14],0xf0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:205
    outb(disknr+2,1);
ffff800000810bef:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff800000810bf3:	83 c0 02             	add    eax,0x2
ffff800000810bf6:	0f b7 c0             	movzx  eax,ax
ffff800000810bf9:	be 01 00 00 00       	mov    esi,0x1
ffff800000810bfe:	89 c7                	mov    edi,eax
ffff800000810c00:	49 89 df             	mov    r15,rbx
ffff800000810c03:	48 b8 78 65 ee ff ff 	movabs rax,0xffffffffffee6578
ffff800000810c0a:	ff ff ff 
ffff800000810c0d:	48 01 d8             	add    rax,rbx
ffff800000810c10:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:206
    outb(disknr+3,0);
ffff800000810c12:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff800000810c16:	83 c0 03             	add    eax,0x3
ffff800000810c19:	0f b7 c0             	movzx  eax,ax
ffff800000810c1c:	be 00 00 00 00       	mov    esi,0x0
ffff800000810c21:	89 c7                	mov    edi,eax
ffff800000810c23:	49 89 df             	mov    r15,rbx
ffff800000810c26:	48 b8 78 65 ee ff ff 	movabs rax,0xffffffffffee6578
ffff800000810c2d:	ff ff ff 
ffff800000810c30:	48 01 d8             	add    rax,rbx
ffff800000810c33:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:207
    outb(disknr+4,0);
ffff800000810c35:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff800000810c39:	83 c0 04             	add    eax,0x4
ffff800000810c3c:	0f b7 c0             	movzx  eax,ax
ffff800000810c3f:	be 00 00 00 00       	mov    esi,0x0
ffff800000810c44:	89 c7                	mov    edi,eax
ffff800000810c46:	49 89 df             	mov    r15,rbx
ffff800000810c49:	48 b8 78 65 ee ff ff 	movabs rax,0xffffffffffee6578
ffff800000810c50:	ff ff ff 
ffff800000810c53:	48 01 d8             	add    rax,rbx
ffff800000810c56:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:208
    outb(disknr+5,0);
ffff800000810c58:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff800000810c5c:	83 c0 05             	add    eax,0x5
ffff800000810c5f:	0f b7 c0             	movzx  eax,ax
ffff800000810c62:	be 00 00 00 00       	mov    esi,0x0
ffff800000810c67:	89 c7                	mov    edi,eax
ffff800000810c69:	49 89 df             	mov    r15,rbx
ffff800000810c6c:	48 b8 78 65 ee ff ff 	movabs rax,0xffffffffffee6578
ffff800000810c73:	ff ff ff 
ffff800000810c76:	48 01 d8             	add    rax,rbx
ffff800000810c79:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:209
    outb(disknr+6,chkcmd);//主硬盘
ffff800000810c7b:	0f b7 45 ec          	movzx  eax,WORD PTR [rbp-0x14]
ffff800000810c7f:	0f b6 d0             	movzx  edx,al
ffff800000810c82:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff800000810c86:	83 c0 06             	add    eax,0x6
ffff800000810c89:	0f b7 c0             	movzx  eax,ax
ffff800000810c8c:	89 d6                	mov    esi,edx
ffff800000810c8e:	89 c7                	mov    edi,eax
ffff800000810c90:	49 89 df             	mov    r15,rbx
ffff800000810c93:	48 b8 78 65 ee ff ff 	movabs rax,0xffffffffffee6578
ffff800000810c9a:	ff ff ff 
ffff800000810c9d:	48 01 d8             	add    rax,rbx
ffff800000810ca0:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:210
    outb(disknr+7,DISK_CMD_CHECK);
ffff800000810ca2:	0f b7 45 ee          	movzx  eax,WORD PTR [rbp-0x12]
ffff800000810ca6:	83 c0 07             	add    eax,0x7
ffff800000810ca9:	0f b7 c0             	movzx  eax,ax
ffff800000810cac:	be 90 00 00 00       	mov    esi,0x90
ffff800000810cb1:	89 c7                	mov    edi,eax
ffff800000810cb3:	49 89 df             	mov    r15,rbx
ffff800000810cb6:	48 b8 78 65 ee ff ff 	movabs rax,0xffffffffffee6578
ffff800000810cbd:	ff ff ff 
ffff800000810cc0:	48 01 d8             	add    rax,rbx
ffff800000810cc3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:221
    //     // {
    //     //     printf("DISK ERR\n");
    //     //     return -1;
    //     // }
    // }
    return 0;
ffff800000810cc5:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:222
}
ffff800000810cca:	48 83 c4 20          	add    rsp,0x20
ffff800000810cce:	5b                   	pop    rbx
ffff800000810ccf:	41 5f                	pop    r15
ffff800000810cd1:	5d                   	pop    rbp
ffff800000810cd2:	c3                   	ret    

ffff800000810cd3 <hd_do_req>:
hd_do_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:226

//接口函数：负责接收VFS的请求然后执行
int hd_do_req(struct request* req)
{
ffff800000810cd3:	f3 0f 1e fa          	endbr64 
ffff800000810cd7:	55                   	push   rbp
ffff800000810cd8:	48 89 e5             	mov    rbp,rsp
ffff800000810cdb:	41 57                	push   r15
ffff800000810cdd:	48 83 ec 28          	sub    rsp,0x28
ffff800000810ce1:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000810ce1 <hd_do_req+0xe>
ffff800000810ce8:	49 bb 17 1f 11 00 00 	movabs r11,0x111f17
ffff800000810cef:	00 00 00 
ffff800000810cf2:	4c 01 d8             	add    rax,r11
ffff800000810cf5:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:227
    if(!req)
ffff800000810cf9:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff800000810cfe:	75 0a                	jne    ffff800000810d0a <hd_do_req+0x37>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:228
        return -1;
ffff800000810d00:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000810d05:	e9 38 01 00 00       	jmp    ffff800000810e42 <hd_do_req+0x16f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:229
    start_request(req->dev);
ffff800000810d0a:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000810d0e:	0f b7 12             	movzx  edx,WORD PTR [rdx]
ffff800000810d11:	0f b7 d2             	movzx  edx,dx
ffff800000810d14:	66 89 55 ea          	mov    WORD PTR [rbp-0x16],dx
start_request():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:71
    wait_on_req(blk_devs[BLKDEV_MAJOR(dev)].current_request->waiting);
ffff800000810d18:	0f b7 55 ea          	movzx  edx,WORD PTR [rbp-0x16]
ffff800000810d1c:	c1 fa 04             	sar    edx,0x4
ffff800000810d1f:	89 d1                	mov    ecx,edx
ffff800000810d21:	83 e1 0f             	and    ecx,0xf
ffff800000810d24:	48 ba 70 ff ff ff ff 	movabs rdx,0xffffffffffffff70
ffff800000810d2b:	ff ff ff 
ffff800000810d2e:	48 8b 34 10          	mov    rsi,QWORD PTR [rax+rdx*1]
ffff800000810d32:	48 63 d1             	movsxd rdx,ecx
ffff800000810d35:	48 c1 e2 04          	shl    rdx,0x4
ffff800000810d39:	48 01 f2             	add    rdx,rsi
ffff800000810d3c:	48 83 c2 08          	add    rdx,0x8
ffff800000810d40:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000810d43:	48 8b 52 30          	mov    rdx,QWORD PTR [rdx+0x30]
ffff800000810d47:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
wait_on_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:218
        if(p->stat==TASK_READY||p->stat==TASK_RUNNING)
ffff800000810d4b:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000810d4f:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff800000810d52:	83 fa 02             	cmp    edx,0x2
ffff800000810d55:	74 0c                	je     ffff800000810d63 <hd_do_req+0x90>
ffff800000810d57:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000810d5b:	8b 52 18             	mov    edx,DWORD PTR [rdx+0x18]
ffff800000810d5e:	83 fa 01             	cmp    edx,0x1
ffff800000810d61:	75 0b                	jne    ffff800000810d6e <hd_do_req+0x9b>
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:219
            p->stat=TASK_SUSPENDED;
ffff800000810d63:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000810d67:	c7 42 18 03 00 00 00 	mov    DWORD PTR [rdx+0x18],0x3
/mnt/d/Code/Comprehensive/OS/workspace/64/include/proc.h:220
}
ffff800000810d6e:	90                   	nop
start_request():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/blk_dev.h:72
ffff800000810d6f:	90                   	nop
hd_do_req():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:230
    int diski=BLKDEV_MINOR(req->dev);
ffff800000810d70:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000810d74:	0f b7 12             	movzx  edx,WORD PTR [rdx]
ffff800000810d77:	0f b7 d2             	movzx  edx,dx
ffff800000810d7a:	83 e2 0f             	and    edx,0xf
ffff800000810d7d:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:233
    // for(;disks[diski]!=args->dev;diski++);

    switch (req->cmd)
ffff800000810d80:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000810d84:	8b 52 04             	mov    edx,DWORD PTR [rdx+0x4]
ffff800000810d87:	83 fa 04             	cmp    edx,0x4
ffff800000810d8a:	0f 84 8d 00 00 00    	je     ffff800000810e1d <hd_do_req+0x14a>
ffff800000810d90:	83 fa 04             	cmp    edx,0x4
ffff800000810d93:	0f 8f 9d 00 00 00    	jg     ffff800000810e36 <hd_do_req+0x163>
ffff800000810d99:	85 d2                	test   edx,edx
ffff800000810d9b:	74 0a                	je     ffff800000810da7 <hd_do_req+0xd4>
ffff800000810d9d:	83 fa 01             	cmp    edx,0x1
ffff800000810da0:	74 40                	je     ffff800000810de2 <hd_do_req+0x10f>
ffff800000810da2:	e9 8f 00 00 00       	jmp    ffff800000810e36 <hd_do_req+0x163>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:236
    {
    case BLKDEV_REQ_READ:
        async_read_disk(diski,req->sector,req->nr_sectors,req->buffer);
ffff800000810da7:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000810dab:	48 8b 52 28          	mov    rdx,QWORD PTR [rdx+0x28]
ffff800000810daf:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff800000810db3:	48 8b 49 18          	mov    rcx,QWORD PTR [rcx+0x18]
ffff800000810db7:	41 89 c8             	mov    r8d,ecx
ffff800000810dba:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff800000810dbe:	48 8b 49 10          	mov    rcx,QWORD PTR [rcx+0x10]
ffff800000810dc2:	89 ce                	mov    esi,ecx
ffff800000810dc4:	8b 7d ec             	mov    edi,DWORD PTR [rbp-0x14]
ffff800000810dc7:	48 89 d1             	mov    rcx,rdx
ffff800000810dca:	44 89 c2             	mov    edx,r8d
ffff800000810dcd:	49 89 c7             	mov    r15,rax
ffff800000810dd0:	49 b8 73 db ee ff ff 	movabs r8,0xffffffffffeedb73
ffff800000810dd7:	ff ff ff 
ffff800000810dda:	49 01 c0             	add    r8,rax
ffff800000810ddd:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:237
        break;
ffff800000810de0:	eb 5b                	jmp    ffff800000810e3d <hd_do_req+0x16a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:239
    case BLKDEV_REQ_WRITE:
        async_write_disk(diski,req->sector,req->nr_sectors,req->buffer);
ffff800000810de2:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000810de6:	48 8b 52 28          	mov    rdx,QWORD PTR [rdx+0x28]
ffff800000810dea:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff800000810dee:	48 8b 49 18          	mov    rcx,QWORD PTR [rcx+0x18]
ffff800000810df2:	41 89 c8             	mov    r8d,ecx
ffff800000810df5:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffff800000810df9:	48 8b 49 10          	mov    rcx,QWORD PTR [rcx+0x10]
ffff800000810dfd:	89 ce                	mov    esi,ecx
ffff800000810dff:	8b 7d ec             	mov    edi,DWORD PTR [rbp-0x14]
ffff800000810e02:	48 89 d1             	mov    rcx,rdx
ffff800000810e05:	44 89 c2             	mov    edx,r8d
ffff800000810e08:	49 89 c7             	mov    r15,rax
ffff800000810e0b:	49 b8 f7 dc ee ff ff 	movabs r8,0xffffffffffeedcf7
ffff800000810e12:	ff ff ff 
ffff800000810e15:	49 01 c0             	add    r8,rax
ffff800000810e18:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:240
        break;
ffff800000810e1b:	eb 20                	jmp    ffff800000810e3d <hd_do_req+0x16a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:242
    case DRVF_CHK:
        async_check_disk(diski);
ffff800000810e1d:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000810e20:	89 d7                	mov    edi,edx
ffff800000810e22:	49 89 c7             	mov    r15,rax
ffff800000810e25:	48 ba a1 df ee ff ff 	movabs rdx,0xffffffffffeedfa1
ffff800000810e2c:	ff ff ff 
ffff800000810e2f:	48 01 c2             	add    rdx,rax
ffff800000810e32:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:243
        break;
ffff800000810e34:	eb 07                	jmp    ffff800000810e3d <hd_do_req+0x16a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:244
    default:return -1;
ffff800000810e36:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000810e3b:	eb 05                	jmp    ffff800000810e42 <hd_do_req+0x16f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:246
    }
    return 0;
ffff800000810e3d:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/disk.c:247
ffff800000810e42:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000810e46:	c9                   	leave  
ffff800000810e47:	c3                   	ret    
ffff800000810e48:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffff800000810e4f:	00 

ffff800000810e50 <disk_int_handler>:
disk_int_handler():
ffff800000810e50:	e8 49 83 ff ff       	call   ffff80000080919e <eoi>
ffff800000810e55:	e8 31 f5 ff ff       	call   ffff80000081038b <disk_int_handler_c>
ffff800000810e5a:	48 cf                	iretq  

ffff800000810e5c <read_disk_asm>:
read_disk_asm():
ffff800000810e5c:	55                   	push   rbp
ffff800000810e5d:	48 89 e5             	mov    rbp,rsp
ffff800000810e60:	66 ba f7 01          	mov    dx,0x1f7
ffff800000810e64:	31 c9                	xor    ecx,ecx
ffff800000810e66:	48 89 f8             	mov    rax,rdi
ffff800000810e69:	48 89 f1             	mov    rcx,rsi
ffff800000810e6c:	48 89 d3             	mov    rbx,rdx
ffff800000810e6f:	48 89 c6             	mov    rsi,rax
ffff800000810e72:	66 ba f2 01          	mov    dx,0x1f2
ffff800000810e76:	88 c8                	mov    al,cl
ffff800000810e78:	ee                   	out    dx,al
ffff800000810e79:	66 ba f3 01          	mov    dx,0x1f3
ffff800000810e7d:	89 f0                	mov    eax,esi
ffff800000810e7f:	ee                   	out    dx,al
ffff800000810e80:	66 ff c2             	inc    dx
ffff800000810e83:	c1 e8 08             	shr    eax,0x8
ffff800000810e86:	ee                   	out    dx,al
ffff800000810e87:	66 ff c2             	inc    dx
ffff800000810e8a:	c1 e8 08             	shr    eax,0x8
ffff800000810e8d:	ee                   	out    dx,al
ffff800000810e8e:	66 ff c2             	inc    dx
ffff800000810e91:	66 c1 e8 08          	shr    ax,0x8
ffff800000810e95:	24 0f                	and    al,0xf
ffff800000810e97:	0c e0                	or     al,0xe0
ffff800000810e99:	ee                   	out    dx,al
ffff800000810e9a:	66 ff c2             	inc    dx
ffff800000810e9d:	b0 20                	mov    al,0x20
ffff800000810e9f:	ee                   	out    dx,al

ffff800000810ea0 <read_disk_asm.wait>:
read_disk_asm.wait():
ffff800000810ea0:	90                   	nop
ffff800000810ea1:	ec                   	in     al,dx
ffff800000810ea2:	24 88                	and    al,0x88
ffff800000810ea4:	3c 08                	cmp    al,0x8
ffff800000810ea6:	75 f8                	jne    ffff800000810ea0 <read_disk_asm.wait>
ffff800000810ea8:	66 89 d7             	mov    di,dx
ffff800000810eab:	48 c1 e1 08          	shl    rcx,0x8
ffff800000810eaf:	66 ba f0 01          	mov    dx,0x1f0

ffff800000810eb3 <read_disk_asm.read>:
read_disk_asm.read():
ffff800000810eb3:	66 ed                	in     ax,dx
ffff800000810eb5:	66 89 03             	mov    WORD PTR [rbx],ax
ffff800000810eb8:	48 83 c3 02          	add    rbx,0x2
ffff800000810ebc:	e2 f5                	loop   ffff800000810eb3 <read_disk_asm.read>
ffff800000810ebe:	c9                   	leave  
ffff800000810ebf:	b8 00 00 00 00       	mov    eax,0x0
ffff800000810ec4:	c3                   	ret    

ffff800000810ec5 <read_disk_asm.err_disk_reading>:
read_disk_asm.err_disk_reading():
ffff800000810ec5:	66 ba f1 01          	mov    dx,0x1f1
ffff800000810ec9:	48 31 c0             	xor    rax,rax
ffff800000810ecc:	66 ed                	in     ax,dx
ffff800000810ece:	c9                   	leave  
ffff800000810ecf:	c3                   	ret    

ffff800000810ed0 <write_disk_asm>:
write_disk_asm():
ffff800000810ed0:	55                   	push   rbp
ffff800000810ed1:	48 89 e5             	mov    rbp,rsp
ffff800000810ed4:	48 89 f8             	mov    rax,rdi
ffff800000810ed7:	48 89 f1             	mov    rcx,rsi
ffff800000810eda:	48 89 d3             	mov    rbx,rdx
ffff800000810edd:	50                   	push   rax
ffff800000810ede:	66 ba f2 01          	mov    dx,0x1f2
ffff800000810ee2:	88 c8                	mov    al,cl
ffff800000810ee4:	ee                   	out    dx,al
ffff800000810ee5:	58                   	pop    rax
ffff800000810ee6:	66 ba f3 01          	mov    dx,0x1f3
ffff800000810eea:	ee                   	out    dx,al
ffff800000810eeb:	c1 e8 08             	shr    eax,0x8
ffff800000810eee:	66 ba f4 01          	mov    dx,0x1f4
ffff800000810ef2:	ee                   	out    dx,al
ffff800000810ef3:	c1 e8 08             	shr    eax,0x8
ffff800000810ef6:	66 ba f5 01          	mov    dx,0x1f5
ffff800000810efa:	ee                   	out    dx,al
ffff800000810efb:	c1 e8 08             	shr    eax,0x8
ffff800000810efe:	24 0f                	and    al,0xf
ffff800000810f00:	0c e0                	or     al,0xe0
ffff800000810f02:	66 ba f6 01          	mov    dx,0x1f6
ffff800000810f06:	ee                   	out    dx,al
ffff800000810f07:	66 ba f7 01          	mov    dx,0x1f7
ffff800000810f0b:	b0 30                	mov    al,0x30
ffff800000810f0d:	ee                   	out    dx,al

ffff800000810f0e <write_disk_asm.not_ready2>:
write_disk_asm.not_ready2():
ffff800000810f0e:	90                   	nop
ffff800000810f0f:	ec                   	in     al,dx
ffff800000810f10:	24 88                	and    al,0x88
ffff800000810f12:	3c 08                	cmp    al,0x8
ffff800000810f14:	75 f8                	jne    ffff800000810f0e <write_disk_asm.not_ready2>
ffff800000810f16:	48 c1 e1 08          	shl    rcx,0x8
ffff800000810f1a:	66 ba f0 01          	mov    dx,0x1f0

ffff800000810f1e <write_disk_asm.go_on_write>:
write_disk_asm.go_on_write():
ffff800000810f1e:	66 8b 03             	mov    ax,WORD PTR [rbx]
ffff800000810f21:	66 ef                	out    dx,ax
ffff800000810f23:	83 c3 02             	add    ebx,0x2
ffff800000810f26:	e2 f6                	loop   ffff800000810f1e <write_disk_asm.go_on_write>
ffff800000810f28:	c9                   	leave  
ffff800000810f29:	c3                   	ret    

ffff800000810f2a <DISK1_FAT32_read_FAT_Entry>:
DISK1_FAT32_read_FAT_Entry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:14
#include "memory.h"
#include "devman.h"
#include <sys/unistd.h>

unsigned int DISK1_FAT32_read_FAT_Entry(struct FAT32_sb_info * fsbi,unsigned int fat_entry)
{
ffff800000810f2a:	f3 0f 1e fa          	endbr64 
ffff800000810f2e:	55                   	push   rbp
ffff800000810f2f:	48 89 e5             	mov    rbp,rsp
ffff800000810f32:	41 57                	push   r15
ffff800000810f34:	53                   	push   rbx
ffff800000810f35:	48 83 ec 40          	sub    rsp,0x40
ffff800000810f39:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000810f39 <DISK1_FAT32_read_FAT_Entry+0xf>
ffff800000810f40:	49 bb bf 1c 11 00 00 	movabs r11,0x111cbf
ffff800000810f47:	00 00 00 
ffff800000810f4a:	4c 01 db             	add    rbx,r11
ffff800000810f4d:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
ffff800000810f51:	89 75 b4             	mov    DWORD PTR [rbp-0x4c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:15
	size_t fat_size=TO_MPGN(fsbi->sector_per_FAT*SECTOR_SIZE);
ffff800000810f54:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810f58:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff800000810f5c:	48 c1 e0 09          	shl    rax,0x9
ffff800000810f60:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff800000810f66:	48 c1 e8 0c          	shr    rax,0xc
ffff800000810f6a:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:16
	int sector=fsbi->FAT1_firstsector + (fat_entry >> 7);
ffff800000810f6e:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000810f72:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff800000810f76:	89 c2                	mov    edx,eax
ffff800000810f78:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffff800000810f7b:	c1 e8 07             	shr    eax,0x7
ffff800000810f7e:	01 d0                	add    eax,edx
ffff800000810f80:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:17
	unsigned int *buf=kmallocat(0,fat_size);
ffff800000810f83:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000810f87:	89 c6                	mov    esi,eax
ffff800000810f89:	bf 00 00 00 00       	mov    edi,0x0
ffff800000810f8e:	49 89 df             	mov    r15,rbx
ffff800000810f91:	48 b8 5a f7 ed ff ff 	movabs rax,0xffffffffffedf75a
ffff800000810f98:	ff ff ff 
ffff800000810f9b:	48 01 d8             	add    rax,rbx
ffff800000810f9e:	ff d0                	call   rax
ffff800000810fa0:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:19
	//FIXME 这里的cluster查找存在问题
	blkdev_read(root_sb->dev,sector*SECTOR_SIZE,fat_size,buf);
ffff800000810fa4:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000810fa7:	c1 e0 09             	shl    eax,0x9
ffff800000810faa:	48 63 f0             	movsxd rsi,eax
ffff800000810fad:	48 b8 90 fd ff ff ff 	movabs rax,0xfffffffffffffd90
ffff800000810fb4:	ff ff ff 
ffff800000810fb7:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000810fbb:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000810fbe:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff800000810fc2:	0f b7 c0             	movzx  eax,ax
ffff800000810fc5:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffff800000810fc9:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000810fcd:	89 c7                	mov    edi,eax
ffff800000810fcf:	49 89 df             	mov    r15,rbx
ffff800000810fd2:	48 b8 34 cc ee ff ff 	movabs rax,0xffffffffffeecc34
ffff800000810fd9:	ff ff ff 
ffff800000810fdc:	48 01 d8             	add    rax,rbx
ffff800000810fdf:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:20
    printf("DISK1_FAT32_read_FAT_Entry fat_entry:%x,%x\n",fat_entry,buf[fat_entry & 0x7f]);
ffff800000810fe1:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffff800000810fe4:	83 e0 7f             	and    eax,0x7f
ffff800000810fe7:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff800000810fee:	00 
ffff800000810fef:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000810ff3:	48 01 d0             	add    rax,rdx
ffff800000810ff6:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000810ff8:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffff800000810ffb:	89 c6                	mov    esi,eax
ffff800000810ffd:	48 b8 08 d8 ff ff ff 	movabs rax,0xffffffffffffd808
ffff800000811004:	ff ff ff 
ffff800000811007:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff80000081100b:	48 89 c7             	mov    rdi,rax
ffff80000081100e:	49 89 df             	mov    r15,rbx
ffff800000811011:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811016:	48 b9 c9 ed ed ff ff 	movabs rcx,0xffffffffffededc9
ffff80000081101d:	ff ff ff 
ffff800000811020:	48 01 d9             	add    rcx,rbx
ffff800000811023:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:21
	for(int i=0;i<fat_size;i++){
ffff800000811025:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff80000081102c:	eb 29                	jmp    ffff800000811057 <DISK1_FAT32_read_FAT_Entry+0x12d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:22 (discriminator 3)
		kmfree((void*)buf+PAGE_4K_SIZE*i);
ffff80000081102e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000811031:	c1 e0 0c             	shl    eax,0xc
ffff800000811034:	48 63 d0             	movsxd rdx,eax
ffff800000811037:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081103b:	48 01 d0             	add    rax,rdx
ffff80000081103e:	48 89 c7             	mov    rdi,rax
ffff800000811041:	49 89 df             	mov    r15,rbx
ffff800000811044:	48 b8 6f 09 ee ff ff 	movabs rax,0xffffffffffee096f
ffff80000081104b:	ff ff ff 
ffff80000081104e:	48 01 d8             	add    rax,rbx
ffff800000811051:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:21 (discriminator 3)
	for(int i=0;i<fat_size;i++){
ffff800000811053:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:21 (discriminator 1)
ffff800000811057:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000081105a:	48 98                	cdqe   
ffff80000081105c:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
ffff800000811060:	77 cc                	ja     ffff80000081102e <DISK1_FAT32_read_FAT_Entry+0x104>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:24
	}
	unsigned int fatr=buf[fat_entry & 0x7f] & 0x0fffffff;
ffff800000811062:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffff800000811065:	83 e0 7f             	and    eax,0x7f
ffff800000811068:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff80000081106f:	00 
ffff800000811070:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811074:	48 01 d0             	add    rax,rdx
ffff800000811077:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000811079:	25 ff ff ff 0f       	and    eax,0xfffffff
ffff80000081107e:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:25
	return fatr;
ffff800000811081:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:26
}
ffff800000811084:	48 83 c4 40          	add    rsp,0x40
ffff800000811088:	5b                   	pop    rbx
ffff800000811089:	41 5f                	pop    r15
ffff80000081108b:	5d                   	pop    rbp
ffff80000081108c:	c3                   	ret    

ffff80000081108d <DISK1_FAT32_write_FAT_Entry>:
DISK1_FAT32_write_FAT_Entry():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:30


unsigned long DISK1_FAT32_write_FAT_Entry(struct FAT32_sb_info * fsbi,unsigned int fat_entry,unsigned int value)
{
ffff80000081108d:	f3 0f 1e fa          	endbr64 
ffff800000811091:	55                   	push   rbp
ffff800000811092:	48 89 e5             	mov    rbp,rsp
ffff800000811095:	41 57                	push   r15
ffff800000811097:	53                   	push   rbx
ffff800000811098:	48 83 ec 30          	sub    rsp,0x30
ffff80000081109c:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000081109c <DISK1_FAT32_write_FAT_Entry+0xf>
ffff8000008110a3:	49 bb 5c 1b 11 00 00 	movabs r11,0x111b5c
ffff8000008110aa:	00 00 00 
ffff8000008110ad:	4c 01 db             	add    rbx,r11
ffff8000008110b0:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff8000008110b4:	89 75 c4             	mov    DWORD PTR [rbp-0x3c],esi
ffff8000008110b7:	89 55 c0             	mov    DWORD PTR [rbp-0x40],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:34
	unsigned int *buf;
	int i;

	buffer_head *bh=bread(root_sb->dev,fsbi->FAT1_firstsector + (fat_entry >> 7));
ffff8000008110ba:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008110be:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
ffff8000008110c2:	89 c2                	mov    edx,eax
ffff8000008110c4:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff8000008110c7:	c1 e8 07             	shr    eax,0x7
ffff8000008110ca:	01 d0                	add    eax,edx
ffff8000008110cc:	89 c2                	mov    edx,eax
ffff8000008110ce:	48 b8 90 fd ff ff ff 	movabs rax,0xfffffffffffffd90
ffff8000008110d5:	ff ff ff 
ffff8000008110d8:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008110dc:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008110df:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff8000008110e3:	0f b7 c0             	movzx  eax,ax
ffff8000008110e6:	89 d6                	mov    esi,edx
ffff8000008110e8:	89 c7                	mov    edi,eax
ffff8000008110ea:	49 89 df             	mov    r15,rbx
ffff8000008110ed:	48 b8 fc c8 ee ff ff 	movabs rax,0xffffffffffeec8fc
ffff8000008110f4:	ff ff ff 
ffff8000008110f7:	48 01 d8             	add    rax,rbx
ffff8000008110fa:	ff d0                	call   rax
ffff8000008110fc:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:35
	buf=bh->data;
ffff800000811100:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000811104:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811107:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:36
    buf[fat_entry & 0x7f] = (buf[fat_entry & 0x7f] & 0xf0000000) | (value & 0x0fffffff);
ffff80000081110b:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff80000081110e:	83 e0 7f             	and    eax,0x7f
ffff800000811111:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffff800000811118:	00 
ffff800000811119:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081111d:	48 01 d0             	add    rax,rdx
ffff800000811120:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000811122:	25 00 00 00 f0       	and    eax,0xf0000000
ffff800000811127:	89 c1                	mov    ecx,eax
ffff800000811129:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
ffff80000081112c:	25 ff ff ff 0f       	and    eax,0xfffffff
ffff800000811131:	89 c2                	mov    edx,eax
ffff800000811133:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff800000811136:	83 e0 7f             	and    eax,0x7f
ffff800000811139:	48 8d 34 85 00 00 00 	lea    rsi,[rax*4+0x0]
ffff800000811140:	00 
ffff800000811141:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811145:	48 01 f0             	add    rax,rsi
ffff800000811148:	09 ca                	or     edx,ecx
ffff80000081114a:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:38

	for(i = 0;i < fsbi->NumFATs;i++){
ffff80000081114c:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000811153:	eb 70                	jmp    ffff8000008111c5 <DISK1_FAT32_write_FAT_Entry+0x138>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:39 (discriminator 3)
		off_t off=(fsbi->FAT1_firstsector + fsbi->sector_per_FAT * i + (fat_entry >> 7))*SECTOR_SIZE;
ffff800000811155:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000811159:	48 8b 48 30          	mov    rcx,QWORD PTR [rax+0x30]
ffff80000081115d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000811161:	48 8b 50 38          	mov    rdx,QWORD PTR [rax+0x38]
ffff800000811165:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000811168:	48 98                	cdqe   
ffff80000081116a:	48 0f af c2          	imul   rax,rdx
ffff80000081116e:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
ffff800000811172:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff800000811175:	c1 e8 07             	shr    eax,0x7
ffff800000811178:	89 c0                	mov    eax,eax
ffff80000081117a:	48 01 d0             	add    rax,rdx
ffff80000081117d:	48 c1 e0 09          	shl    rax,0x9
ffff800000811181:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:40 (discriminator 3)
		blkdev_write(root_sb->dev,off,SECTOR_SIZE,buf);
ffff800000811185:	48 b8 90 fd ff ff ff 	movabs rax,0xfffffffffffffd90
ffff80000081118c:	ff ff ff 
ffff80000081118f:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000811193:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811196:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff80000081119a:	0f b7 c0             	movzx  eax,ax
ffff80000081119d:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff8000008111a1:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffff8000008111a5:	48 89 d1             	mov    rcx,rdx
ffff8000008111a8:	ba 00 02 00 00       	mov    edx,0x200
ffff8000008111ad:	89 c7                	mov    edi,eax
ffff8000008111af:	49 89 df             	mov    r15,rbx
ffff8000008111b2:	48 b8 93 cd ee ff ff 	movabs rax,0xffffffffffeecd93
ffff8000008111b9:	ff ff ff 
ffff8000008111bc:	48 01 d8             	add    rax,rbx
ffff8000008111bf:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:38 (discriminator 3)
	for(i = 0;i < fsbi->NumFATs;i++){
ffff8000008111c1:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:38 (discriminator 1)
ffff8000008111c5:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008111c8:	48 63 d0             	movsxd rdx,eax
ffff8000008111cb:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008111cf:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008111d3:	48 39 c2             	cmp    rdx,rax
ffff8000008111d6:	0f 82 79 ff ff ff    	jb     ffff800000811155 <DISK1_FAT32_write_FAT_Entry+0xc8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:42
    }
	brelse(bh);
ffff8000008111dc:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008111e0:	48 89 c7             	mov    rdi,rax
ffff8000008111e3:	49 89 df             	mov    r15,rbx
ffff8000008111e6:	48 b8 f2 ce ee ff ff 	movabs rax,0xffffffffffeecef2
ffff8000008111ed:	ff ff ff 
ffff8000008111f0:	48 01 d8             	add    rax,rbx
ffff8000008111f3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:43
	return 1;
ffff8000008111f5:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:44
}
ffff8000008111fa:	48 83 c4 30          	add    rsp,0x30
ffff8000008111fe:	5b                   	pop    rbx
ffff8000008111ff:	41 5f                	pop    r15
ffff800000811201:	5d                   	pop    rbp
ffff800000811202:	c3                   	ret    

ffff800000811203 <FAT32_open>:
FAT32_open():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:48


long FAT32_open(struct index_node * inode,struct file * filp)
{
ffff800000811203:	f3 0f 1e fa          	endbr64 
ffff800000811207:	55                   	push   rbp
ffff800000811208:	48 89 e5             	mov    rbp,rsp
ffff80000081120b:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000081120b <FAT32_open+0x8>
ffff800000811212:	49 bb ed 19 11 00 00 	movabs r11,0x1119ed
ffff800000811219:	00 00 00 
ffff80000081121c:	4c 01 d8             	add    rax,r11
ffff80000081121f:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000811223:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:49
	return 1;
ffff800000811227:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:50
}
ffff80000081122c:	5d                   	pop    rbp
ffff80000081122d:	c3                   	ret    

ffff80000081122e <FAT32_close>:
FAT32_close():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:54


long FAT32_close(struct index_node * inode,struct file * filp)
{
ffff80000081122e:	f3 0f 1e fa          	endbr64 
ffff800000811232:	55                   	push   rbp
ffff800000811233:	48 89 e5             	mov    rbp,rsp
ffff800000811236:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000811236 <FAT32_close+0x8>
ffff80000081123d:	49 bb c2 19 11 00 00 	movabs r11,0x1119c2
ffff800000811244:	00 00 00 
ffff800000811247:	4c 01 d8             	add    rax,r11
ffff80000081124a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000081124e:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:55
	return 1;
ffff800000811252:	b8 01 00 00 00       	mov    eax,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:56
}
ffff800000811257:	5d                   	pop    rbp
ffff800000811258:	c3                   	ret    

ffff800000811259 <FAT32_read>:
FAT32_read():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:60


long FAT32_read(struct file * filp,char * buf,unsigned long count,long * position)
{
ffff800000811259:	f3 0f 1e fa          	endbr64 
ffff80000081125d:	55                   	push   rbp
ffff80000081125e:	48 89 e5             	mov    rbp,rsp
ffff800000811261:	41 57                	push   r15
ffff800000811263:	53                   	push   rbx
ffff800000811264:	48 83 ec 70          	sub    rsp,0x70
ffff800000811268:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000811268 <FAT32_read+0xf>
ffff80000081126f:	49 bb 90 19 11 00 00 	movabs r11,0x111990
ffff800000811276:	00 00 00 
ffff800000811279:	4c 01 db             	add    rbx,r11
ffff80000081127c:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
ffff800000811280:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
ffff800000811284:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
ffff800000811288:	48 89 4d 80          	mov    QWORD PTR [rbp-0x80],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:61
	struct FAT32_inode_info * finode = filp->dentry->dir_inode->private_index_info;
ffff80000081128c:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000811290:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000811294:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000811298:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff80000081129c:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:62
	struct FAT32_sb_info * fsbi = filp->dentry->dir_inode->sb->private_sb_info;
ffff8000008112a0:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008112a4:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008112a8:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008112ac:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff8000008112b0:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff8000008112b4:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:64

	unsigned long cluster = finode->first_cluster;
ffff8000008112b8:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008112bc:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008112bf:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:65
	unsigned long sector = 0;
ffff8000008112c3:	48 c7 45 b0 00 00 00 	mov    QWORD PTR [rbp-0x50],0x0
ffff8000008112ca:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:66
	int i,length = 0;
ffff8000008112cb:	c7 45 ac 00 00 00 00 	mov    DWORD PTR [rbp-0x54],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:67
	long retval = 0;
ffff8000008112d2:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff8000008112d9:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:68
	int index = *position / fsbi->bytes_per_cluster;
ffff8000008112da:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff8000008112de:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008112e1:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff8000008112e5:	48 8b 72 18          	mov    rsi,QWORD PTR [rdx+0x18]
ffff8000008112e9:	48 99                	cqo    
ffff8000008112eb:	48 f7 fe             	idiv   rsi
ffff8000008112ee:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:69
	long offset = *position % fsbi->bytes_per_cluster;
ffff8000008112f1:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff8000008112f5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008112f8:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff8000008112fc:	48 8b 4a 18          	mov    rcx,QWORD PTR [rdx+0x18]
ffff800000811300:	48 99                	cqo    
ffff800000811302:	48 f7 f9             	idiv   rcx
ffff800000811305:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:70
	char * buffer = (char *) kmallocat(0,(fsbi->bytes_per_cluster+PAGE_4K_SIZE-1)/PAGE_4K_SIZE);
ffff800000811309:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081130d:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000811311:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff800000811317:	48 8d 90 ff 0f 00 00 	lea    rdx,[rax+0xfff]
ffff80000081131e:	48 85 c0             	test   rax,rax
ffff800000811321:	48 0f 48 c2          	cmovs  rax,rdx
ffff800000811325:	48 c1 f8 0c          	sar    rax,0xc
ffff800000811329:	89 c6                	mov    esi,eax
ffff80000081132b:	bf 00 00 00 00       	mov    edi,0x0
ffff800000811330:	49 89 df             	mov    r15,rbx
ffff800000811333:	48 b8 5a f7 ed ff ff 	movabs rax,0xffffffffffedf75a
ffff80000081133a:	ff ff ff 
ffff80000081133d:	48 01 d8             	add    rax,rbx
ffff800000811340:	ff d0                	call   rax
ffff800000811342:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:72

	if(!cluster)
ffff800000811346:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff80000081134b:	75 0c                	jne    ffff800000811359 <FAT32_read+0x100>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:73
		return -EFAULT;
ffff80000081134d:	48 c7 c0 eb ff ff ff 	mov    rax,0xffffffffffffffeb
ffff800000811354:	e9 6f 02 00 00       	jmp    ffff8000008115c8 <FAT32_read+0x36f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:74
	for(i = 0;i < index;i++)
ffff800000811359:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff800000811360:	eb 2b                	jmp    ffff80000081138d <FAT32_read+0x134>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:75 (discriminator 3)
		cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff800000811362:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811366:	89 c2                	mov    edx,eax
ffff800000811368:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081136c:	89 d6                	mov    esi,edx
ffff80000081136e:	48 89 c7             	mov    rdi,rax
ffff800000811371:	49 89 df             	mov    r15,rbx
ffff800000811374:	48 b8 32 e3 ee ff ff 	movabs rax,0xffffffffffeee332
ffff80000081137b:	ff ff ff 
ffff80000081137e:	48 01 d8             	add    rax,rbx
ffff800000811381:	ff d0                	call   rax
ffff800000811383:	89 c0                	mov    eax,eax
ffff800000811385:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:74 (discriminator 3)
	for(i = 0;i < index;i++)
ffff800000811389:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:74 (discriminator 1)
ffff80000081138d:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000811390:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
ffff800000811393:	7c cd                	jl     ffff800000811362 <FAT32_read+0x109>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:77

	if(*position + count > filp->dentry->dir_inode->file_size)
ffff800000811395:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000811399:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000081139c:	48 89 c2             	mov    rdx,rax
ffff80000081139f:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff8000008113a3:	48 01 c2             	add    rdx,rax
ffff8000008113a6:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008113aa:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008113ae:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008113b2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008113b5:	48 39 c2             	cmp    rdx,rax
ffff8000008113b8:	76 2c                	jbe    ffff8000008113e6 <FAT32_read+0x18d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:78
		index = count = filp->dentry->dir_inode->file_size - *position;
ffff8000008113ba:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008113be:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008113c2:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008113c6:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008113c9:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff8000008113cd:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008113d0:	48 89 c1             	mov    rcx,rax
ffff8000008113d3:	48 89 d0             	mov    rax,rdx
ffff8000008113d6:	48 29 c8             	sub    rax,rcx
ffff8000008113d9:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
ffff8000008113dd:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff8000008113e1:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
ffff8000008113e4:	eb 07                	jmp    ffff8000008113ed <FAT32_read+0x194>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:80
	else
		index = count;
ffff8000008113e6:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff8000008113ea:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:86

//	printf("FAT32_read first_cluster:%d,size:%d,preempt_count:%d\n",finode->first_cluster,filp->dentry->dir_inode->file_size,current->preempt_count);

	do
	{
		memset(buffer,0,fsbi->bytes_per_cluster);
ffff8000008113ed:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008113f1:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff8000008113f5:	89 c2                	mov    edx,eax
ffff8000008113f7:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff8000008113fb:	be 00 00 00 00       	mov    esi,0x0
ffff800000811400:	48 89 c7             	mov    rdi,rax
ffff800000811403:	49 89 df             	mov    r15,rbx
ffff800000811406:	48 b8 89 1e ef ff ff 	movabs rax,0xffffffffffef1e89
ffff80000081140d:	ff ff ff 
ffff800000811410:	48 01 d8             	add    rax,rbx
ffff800000811413:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:87
		sector = fsbi->Data_firstsector + (cluster - 2) * fsbi->sector_per_cluster;
ffff800000811415:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000811419:	48 8b 48 28          	mov    rcx,QWORD PTR [rax+0x28]
ffff80000081141d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811421:	48 8d 50 fe          	lea    rdx,[rax-0x2]
ffff800000811425:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000811429:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000081142d:	48 0f af c2          	imul   rax,rdx
ffff800000811431:	48 01 c8             	add    rax,rcx
ffff800000811434:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:88
		if(blkdev_read(filp->dentry->dir_inode->dev,sector*SECTOR_SIZE,fsbi->sector_per_cluster*SECTOR_SIZE,buffer)<0)
ffff800000811438:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081143c:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000811440:	48 c1 e0 09          	shl    rax,0x9
ffff800000811444:	48 89 c7             	mov    rdi,rax
ffff800000811447:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000081144b:	48 c1 e0 09          	shl    rax,0x9
ffff80000081144f:	48 89 c6             	mov    rsi,rax
ffff800000811452:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000811456:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000081145a:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000081145e:	0f b7 40 18          	movzx  eax,WORD PTR [rax+0x18]
ffff800000811462:	0f b7 c0             	movzx  eax,ax
ffff800000811465:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
ffff800000811469:	48 89 d1             	mov    rcx,rdx
ffff80000081146c:	48 89 fa             	mov    rdx,rdi
ffff80000081146f:	89 c7                	mov    edi,eax
ffff800000811471:	49 89 df             	mov    r15,rbx
ffff800000811474:	48 b8 34 cc ee ff ff 	movabs rax,0xffffffffffeecc34
ffff80000081147b:	ff ff ff 
ffff80000081147e:	48 01 d8             	add    rax,rbx
ffff800000811481:	ff d0                	call   rax
ffff800000811483:	85 c0                	test   eax,eax
ffff800000811485:	79 35                	jns    ffff8000008114bc <FAT32_read+0x263>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:90
		{
			printf("FAT32 FS(read) read disk ERROR!!!!!!!!!!\n");
ffff800000811487:	48 b8 38 d8 ff ff ff 	movabs rax,0xffffffffffffd838
ffff80000081148e:	ff ff ff 
ffff800000811491:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000811495:	48 89 c7             	mov    rdi,rax
ffff800000811498:	49 89 df             	mov    r15,rbx
ffff80000081149b:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008114a0:	48 ba c9 ed ed ff ff 	movabs rdx,0xffffffffffededc9
ffff8000008114a7:	ff ff ff 
ffff8000008114aa:	48 01 da             	add    rdx,rbx
ffff8000008114ad:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:91
			retval = -EIO;
ffff8000008114af:	48 c7 45 d8 e3 ff ff 	mov    QWORD PTR [rbp-0x28],0xffffffffffffffe3
ffff8000008114b6:	ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:92
			break;
ffff8000008114b7:	e9 e1 00 00 00       	jmp    ffff80000081159d <FAT32_read+0x344>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:95
		}

		length = index <= fsbi->bytes_per_cluster - offset ? index : fsbi->bytes_per_cluster - offset;
ffff8000008114bc:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff8000008114bf:	48 63 d0             	movsxd rdx,eax
ffff8000008114c2:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008114c6:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff8000008114ca:	48 2b 45 c8          	sub    rax,QWORD PTR [rbp-0x38]
ffff8000008114ce:	48 39 c2             	cmp    rdx,rax
ffff8000008114d1:	48 0f 4e c2          	cmovle rax,rdx
ffff8000008114d5:	89 45 ac             	mov    DWORD PTR [rbp-0x54],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:97

		if((unsigned long)buf < MAX_TASKS)
ffff8000008114d8:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008114dc:	48 83 f8 1f          	cmp    rax,0x1f
ffff8000008114e0:	77 2c                	ja     ffff80000081150e <FAT32_read+0x2b5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:98
			memcpy(buf,buffer + offset,length);
ffff8000008114e2:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
ffff8000008114e5:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
ffff8000008114e9:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff8000008114ed:	48 01 c1             	add    rcx,rax
ffff8000008114f0:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008114f4:	48 89 ce             	mov    rsi,rcx
ffff8000008114f7:	48 89 c7             	mov    rdi,rax
ffff8000008114fa:	49 89 df             	mov    r15,rbx
ffff8000008114fd:	48 b8 da 1d ef ff ff 	movabs rax,0xffffffffffef1dda
ffff800000811504:	ff ff ff 
ffff800000811507:	48 01 d8             	add    rax,rbx
ffff80000081150a:	ff d0                	call   rax
ffff80000081150c:	eb 2a                	jmp    ffff800000811538 <FAT32_read+0x2df>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:100
		else
			memcpy(buf,buffer + offset,length);
ffff80000081150e:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
ffff800000811511:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
ffff800000811515:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000811519:	48 01 c1             	add    rcx,rax
ffff80000081151c:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811520:	48 89 ce             	mov    rsi,rcx
ffff800000811523:	48 89 c7             	mov    rdi,rax
ffff800000811526:	49 89 df             	mov    r15,rbx
ffff800000811529:	48 b8 da 1d ef ff ff 	movabs rax,0xffffffffffef1dda
ffff800000811530:	ff ff ff 
ffff800000811533:	48 01 d8             	add    rax,rbx
ffff800000811536:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:102

		index -= length;
ffff800000811538:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
ffff80000081153b:	29 45 d4             	sub    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:103
		buf += length;
ffff80000081153e:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
ffff800000811541:	48 98                	cdqe   
ffff800000811543:	48 01 45 90          	add    QWORD PTR [rbp-0x70],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:104
		offset -= offset;
ffff800000811547:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff80000081154e:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:105
		*position += length;
ffff80000081154f:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000811553:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000811556:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
ffff800000811559:	48 98                	cdqe   
ffff80000081155b:	48 01 c2             	add    rdx,rax
ffff80000081155e:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000811562:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:106
	}while(index && (cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster)));
ffff800000811565:	83 7d d4 00          	cmp    DWORD PTR [rbp-0x2c],0x0
ffff800000811569:	74 32                	je     ffff80000081159d <FAT32_read+0x344>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:106 (discriminator 1)
ffff80000081156b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081156f:	89 c2                	mov    edx,eax
ffff800000811571:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000811575:	89 d6                	mov    esi,edx
ffff800000811577:	48 89 c7             	mov    rdi,rax
ffff80000081157a:	49 89 df             	mov    r15,rbx
ffff80000081157d:	48 b8 32 e3 ee ff ff 	movabs rax,0xffffffffffeee332
ffff800000811584:	ff ff ff 
ffff800000811587:	48 01 d8             	add    rax,rbx
ffff80000081158a:	ff d0                	call   rax
ffff80000081158c:	89 c0                	mov    eax,eax
ffff80000081158e:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffff800000811592:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff800000811597:	0f 85 50 fe ff ff    	jne    ffff8000008113ed <FAT32_read+0x194>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:108

    kmfree(buffer);
ffff80000081159d:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff8000008115a1:	48 89 c7             	mov    rdi,rax
ffff8000008115a4:	49 89 df             	mov    r15,rbx
ffff8000008115a7:	48 b8 6f 09 ee ff ff 	movabs rax,0xffffffffffee096f
ffff8000008115ae:	ff ff ff 
ffff8000008115b1:	48 01 d8             	add    rax,rbx
ffff8000008115b4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:109
	if(!index)
ffff8000008115b6:	83 7d d4 00          	cmp    DWORD PTR [rbp-0x2c],0x0
ffff8000008115ba:	75 08                	jne    ffff8000008115c4 <FAT32_read+0x36b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:110
		retval = count;
ffff8000008115bc:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff8000008115c0:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:111
	return retval;
ffff8000008115c4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:112
}
ffff8000008115c8:	48 83 c4 70          	add    rsp,0x70
ffff8000008115cc:	5b                   	pop    rbx
ffff8000008115cd:	41 5f                	pop    r15
ffff8000008115cf:	5d                   	pop    rbp
ffff8000008115d0:	c3                   	ret    

ffff8000008115d1 <FAT32_find_available_cluster>:
FAT32_find_available_cluster():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:116


unsigned long FAT32_find_available_cluster(struct FAT32_sb_info * fsbi)
{
ffff8000008115d1:	f3 0f 1e fa          	endbr64 
ffff8000008115d5:	55                   	push   rbp
ffff8000008115d6:	48 89 e5             	mov    rbp,rsp
ffff8000008115d9:	41 57                	push   r15
ffff8000008115db:	53                   	push   rbx
ffff8000008115dc:	48 81 ec 20 02 00 00 	sub    rsp,0x220
ffff8000008115e3:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008115e3 <FAT32_find_available_cluster+0x12>
ffff8000008115ea:	49 bb 15 16 11 00 00 	movabs r11,0x111615
ffff8000008115f1:	00 00 00 
ffff8000008115f4:	4c 01 db             	add    rbx,r11
ffff8000008115f7:	48 89 bd d8 fd ff ff 	mov    QWORD PTR [rbp-0x228],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:119
	int i,j;
	int fat_entry;
	unsigned long sector_per_fat = fsbi->sector_per_FAT;
ffff8000008115fe:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffff800000811605:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff800000811609:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:124
	unsigned int buf[128];

//	fsbi->fat_fsinfo->FSI_Free_Count & fsbi->fat_fsinfo->FSI_Nxt_Free not exactly,so unuse

	for(i = 0;i < sector_per_fat;i++)
ffff80000081160d:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffff800000811614:	e9 b8 00 00 00       	jmp    ffff8000008116d1 <FAT32_find_available_cluster+0x100>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:126
	{
		memset(buf,0,512);
ffff800000811619:	48 8d 85 e0 fd ff ff 	lea    rax,[rbp-0x220]
ffff800000811620:	ba 00 02 00 00       	mov    edx,0x200
ffff800000811625:	be 00 00 00 00       	mov    esi,0x0
ffff80000081162a:	48 89 c7             	mov    rdi,rax
ffff80000081162d:	49 89 df             	mov    r15,rbx
ffff800000811630:	48 b8 89 1e ef ff ff 	movabs rax,0xffffffffffef1e89
ffff800000811637:	ff ff ff 
ffff80000081163a:	48 01 d8             	add    rax,rbx
ffff80000081163d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:127
		blkdev_read(root_sb->dev,(fsbi->FAT1_firstsector + i)*SECTOR_SIZE,SECTOR_SIZE,buf);
ffff80000081163f:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffff800000811646:	48 8b 50 30          	mov    rdx,QWORD PTR [rax+0x30]
ffff80000081164a:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000081164d:	48 98                	cdqe   
ffff80000081164f:	48 01 d0             	add    rax,rdx
ffff800000811652:	48 c1 e0 09          	shl    rax,0x9
ffff800000811656:	48 89 c6             	mov    rsi,rax
ffff800000811659:	48 b8 90 fd ff ff ff 	movabs rax,0xfffffffffffffd90
ffff800000811660:	ff ff ff 
ffff800000811663:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000811667:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000081166a:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff80000081166e:	0f b7 c0             	movzx  eax,ax
ffff800000811671:	48 8d 95 e0 fd ff ff 	lea    rdx,[rbp-0x220]
ffff800000811678:	48 89 d1             	mov    rcx,rdx
ffff80000081167b:	ba 00 02 00 00       	mov    edx,0x200
ffff800000811680:	89 c7                	mov    edi,eax
ffff800000811682:	49 89 df             	mov    r15,rbx
ffff800000811685:	48 b8 34 cc ee ff ff 	movabs rax,0xffffffffffeecc34
ffff80000081168c:	ff ff ff 
ffff80000081168f:	48 01 d8             	add    rax,rbx
ffff800000811692:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:129

		for(j = 0;j < 128;j++)
ffff800000811694:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff80000081169b:	eb 2a                	jmp    ffff8000008116c7 <FAT32_find_available_cluster+0xf6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:131
		{
			if((buf[j] & 0x0fffffff) == 0)
ffff80000081169d:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff8000008116a0:	48 98                	cdqe   
ffff8000008116a2:	8b 84 85 e0 fd ff ff 	mov    eax,DWORD PTR [rbp+rax*4-0x220]
ffff8000008116a9:	25 ff ff ff 0f       	and    eax,0xfffffff
ffff8000008116ae:	85 c0                	test   eax,eax
ffff8000008116b0:	75 11                	jne    ffff8000008116c3 <FAT32_find_available_cluster+0xf2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:132
				return (i << 7) + j;
ffff8000008116b2:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008116b5:	c1 e0 07             	shl    eax,0x7
ffff8000008116b8:	89 c2                	mov    edx,eax
ffff8000008116ba:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff8000008116bd:	01 d0                	add    eax,edx
ffff8000008116bf:	48 98                	cdqe   
ffff8000008116c1:	eb 22                	jmp    ffff8000008116e5 <FAT32_find_available_cluster+0x114>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:129 (discriminator 2)
		for(j = 0;j < 128;j++)
ffff8000008116c3:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:129 (discriminator 1)
ffff8000008116c7:	83 7d e8 7f          	cmp    DWORD PTR [rbp-0x18],0x7f
ffff8000008116cb:	7e d0                	jle    ffff80000081169d <FAT32_find_available_cluster+0xcc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:124 (discriminator 2)
	for(i = 0;i < sector_per_fat;i++)
ffff8000008116cd:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:124 (discriminator 1)
ffff8000008116d1:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008116d4:	48 98                	cdqe   
ffff8000008116d6:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
ffff8000008116da:	0f 87 39 ff ff ff    	ja     ffff800000811619 <FAT32_find_available_cluster+0x48>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:135
		}
	}
	return 0;
ffff8000008116e0:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:136 (discriminator 1)
}
ffff8000008116e5:	48 81 c4 20 02 00 00 	add    rsp,0x220
ffff8000008116ec:	5b                   	pop    rbx
ffff8000008116ed:	41 5f                	pop    r15
ffff8000008116ef:	5d                   	pop    rbp
ffff8000008116f0:	c3                   	ret    

ffff8000008116f1 <FAT32_write>:
FAT32_write():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:140


long FAT32_write(struct file * filp,char * buf,unsigned long count,long * position)
{
ffff8000008116f1:	f3 0f 1e fa          	endbr64 
ffff8000008116f5:	55                   	push   rbp
ffff8000008116f6:	48 89 e5             	mov    rbp,rsp
ffff8000008116f9:	41 57                	push   r15
ffff8000008116fb:	53                   	push   rbx
ffff8000008116fc:	48 83 c4 80          	add    rsp,0xffffffffffffff80
ffff800000811700:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000811700 <FAT32_write+0xf>
ffff800000811707:	49 bb f8 14 11 00 00 	movabs r11,0x1114f8
ffff80000081170e:	00 00 00 
ffff800000811711:	4c 01 db             	add    rbx,r11
ffff800000811714:	48 89 7d 88          	mov    QWORD PTR [rbp-0x78],rdi
ffff800000811718:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
ffff80000081171c:	48 89 95 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdx
ffff800000811723:	48 89 8d 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:141
	struct FAT32_inode_info * finode = filp->dentry->dir_inode->private_index_info;
ffff80000081172a:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000081172e:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000811732:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000811736:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff80000081173a:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:142
	struct FAT32_sb_info * fsbi = filp->dentry->dir_inode->sb->private_sb_info;
ffff80000081173e:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000811742:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000811746:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000081174a:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000081174e:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000811752:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:144

	unsigned long cluster = finode->first_cluster;
ffff800000811756:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000081175a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000081175d:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:145
	unsigned long next_cluster = 0;
ffff800000811761:	48 c7 45 a0 00 00 00 	mov    QWORD PTR [rbp-0x60],0x0
ffff800000811768:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:146
	unsigned long sector = 0;
ffff800000811769:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff800000811770:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:147
	int i,length = 0;
ffff800000811771:	c7 45 9c 00 00 00 00 	mov    DWORD PTR [rbp-0x64],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:148
	long retval = 0;
ffff800000811778:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff80000081177f:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:149
	long flags = 0;
ffff800000811780:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff800000811787:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:150
	int index = *position / fsbi->bytes_per_cluster;
ffff800000811788:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff80000081178f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811792:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff800000811796:	48 8b 72 18          	mov    rsi,QWORD PTR [rdx+0x18]
ffff80000081179a:	48 99                	cqo    
ffff80000081179c:	48 f7 fe             	idiv   rsi
ffff80000081179f:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:151
	long offset = *position % fsbi->bytes_per_cluster;
ffff8000008117a2:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff8000008117a9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008117ac:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff8000008117b0:	48 8b 4a 18          	mov    rcx,QWORD PTR [rdx+0x18]
ffff8000008117b4:	48 99                	cqo    
ffff8000008117b6:	48 f7 f9             	idiv   rcx
ffff8000008117b9:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:152
	char * buffer = (char *) kmallocat(0,TO_MPGN(fsbi->bytes_per_cluster));
ffff8000008117bd:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008117c1:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff8000008117c5:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff8000008117cb:	48 8d 90 ff 0f 00 00 	lea    rdx,[rax+0xfff]
ffff8000008117d2:	48 85 c0             	test   rax,rax
ffff8000008117d5:	48 0f 48 c2          	cmovs  rax,rdx
ffff8000008117d9:	48 c1 f8 0c          	sar    rax,0xc
ffff8000008117dd:	89 c6                	mov    esi,eax
ffff8000008117df:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008117e4:	49 89 df             	mov    r15,rbx
ffff8000008117e7:	48 b8 5a f7 ed ff ff 	movabs rax,0xffffffffffedf75a
ffff8000008117ee:	ff ff ff 
ffff8000008117f1:	48 01 d8             	add    rax,rbx
ffff8000008117f4:	ff d0                	call   rax
ffff8000008117f6:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:154

	if(!cluster)
ffff8000008117fa:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff8000008117ff:	75 27                	jne    ffff800000811828 <FAT32_write+0x137>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:156
	{
		cluster = FAT32_find_available_cluster(fsbi);
ffff800000811801:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000811805:	48 89 c7             	mov    rdi,rax
ffff800000811808:	49 89 df             	mov    r15,rbx
ffff80000081180b:	48 b8 d9 e9 ee ff ff 	movabs rax,0xffffffffffeee9d9
ffff800000811812:	ff ff ff 
ffff800000811815:	48 01 d8             	add    rax,rbx
ffff800000811818:	ff d0                	call   rax
ffff80000081181a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:157
		flags = 1;
ffff80000081181e:	48 c7 45 c8 01 00 00 	mov    QWORD PTR [rbp-0x38],0x1
ffff800000811825:	00 
ffff800000811826:	eb 3c                	jmp    ffff800000811864 <FAT32_write+0x173>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:160
	}
	else
		for(i = 0;i < index;i++)
ffff800000811828:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
ffff80000081182f:	eb 2b                	jmp    ffff80000081185c <FAT32_write+0x16b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:161 (discriminator 3)
			cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff800000811831:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811835:	89 c2                	mov    edx,eax
ffff800000811837:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000081183b:	89 d6                	mov    esi,edx
ffff80000081183d:	48 89 c7             	mov    rdi,rax
ffff800000811840:	49 89 df             	mov    r15,rbx
ffff800000811843:	48 b8 32 e3 ee ff ff 	movabs rax,0xffffffffffeee332
ffff80000081184a:	ff ff ff 
ffff80000081184d:	48 01 d8             	add    rax,rbx
ffff800000811850:	ff d0                	call   rax
ffff800000811852:	89 c0                	mov    eax,eax
ffff800000811854:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:160 (discriminator 3)
		for(i = 0;i < index;i++)
ffff800000811858:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:160 (discriminator 1)
ffff80000081185c:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000081185f:	3b 45 c4             	cmp    eax,DWORD PTR [rbp-0x3c]
ffff800000811862:	7c cd                	jl     ffff800000811831 <FAT32_write+0x140>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:163

	if(!cluster)
ffff800000811864:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff800000811869:	75 25                	jne    ffff800000811890 <FAT32_write+0x19f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:165
	{
        kmfree(buffer);
ffff80000081186b:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000081186f:	48 89 c7             	mov    rdi,rax
ffff800000811872:	49 89 df             	mov    r15,rbx
ffff800000811875:	48 b8 6f 09 ee ff ff 	movabs rax,0xffffffffffee096f
ffff80000081187c:	ff ff ff 
ffff80000081187f:	48 01 d8             	add    rax,rbx
ffff800000811882:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:166
		return -ENOSPC;
ffff800000811884:	48 c7 c0 cc ff ff ff 	mov    rax,0xffffffffffffffcc
ffff80000081188b:	e9 fb 03 00 00       	jmp    ffff800000811c8b <FAT32_write+0x59a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:169
	}

	if(flags)
ffff800000811890:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffff800000811895:	74 5a                	je     ffff8000008118f1 <FAT32_write+0x200>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:171
	{
		finode->first_cluster = cluster;
ffff800000811897:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000081189b:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff80000081189f:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:172
		filp->dentry->dir_inode->sb->sb_ops->write_inode(filp->dentry->dir_inode);
ffff8000008118a2:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff8000008118a6:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008118aa:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008118ae:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff8000008118b2:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff8000008118b6:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff8000008118ba:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff8000008118be:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008118c2:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008118c6:	48 89 c7             	mov    rdi,rax
ffff8000008118c9:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:173
		DISK1_FAT32_write_FAT_Entry(fsbi,cluster,0x0ffffff8);
ffff8000008118cb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008118cf:	89 c1                	mov    ecx,eax
ffff8000008118d1:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008118d5:	ba f8 ff ff 0f       	mov    edx,0xffffff8
ffff8000008118da:	89 ce                	mov    esi,ecx
ffff8000008118dc:	48 89 c7             	mov    rdi,rax
ffff8000008118df:	49 89 df             	mov    r15,rbx
ffff8000008118e2:	48 b8 95 e4 ee ff ff 	movabs rax,0xffffffffffeee495
ffff8000008118e9:	ff ff ff 
ffff8000008118ec:	48 01 d8             	add    rax,rbx
ffff8000008118ef:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:176
	}

	index = count;
ffff8000008118f1:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff8000008118f8:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:180

	do
	{
		if(!flags)
ffff8000008118fb:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffff800000811900:	0f 85 cf 00 00 00    	jne    ffff8000008119d5 <FAT32_write+0x2e4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:182
		{
			memset(buffer,0,fsbi->bytes_per_cluster);
ffff800000811906:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff80000081190a:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff80000081190e:	89 c2                	mov    edx,eax
ffff800000811910:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811914:	be 00 00 00 00       	mov    esi,0x0
ffff800000811919:	48 89 c7             	mov    rdi,rax
ffff80000081191c:	49 89 df             	mov    r15,rbx
ffff80000081191f:	48 b8 89 1e ef ff ff 	movabs rax,0xffffffffffef1e89
ffff800000811926:	ff ff ff 
ffff800000811929:	48 01 d8             	add    rax,rbx
ffff80000081192c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:183
			sector = fsbi->Data_firstsector + (cluster - 2) * fsbi->sector_per_cluster;
ffff80000081192e:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000811932:	48 8b 48 28          	mov    rcx,QWORD PTR [rax+0x28]
ffff800000811936:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081193a:	48 8d 50 fe          	lea    rdx,[rax-0x2]
ffff80000081193e:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000811942:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000811946:	48 0f af c2          	imul   rax,rdx
ffff80000081194a:	48 01 c8             	add    rax,rcx
ffff80000081194d:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:185
			
			if(blkdev_read(filp->dentry->dir_inode->dev,sector*SECTOR_SIZE,fsbi->sector_per_cluster*SECTOR_SIZE,buffer)<0)
ffff800000811951:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000811955:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000811959:	48 c1 e0 09          	shl    rax,0x9
ffff80000081195d:	48 89 c7             	mov    rdi,rax
ffff800000811960:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000811964:	48 c1 e0 09          	shl    rax,0x9
ffff800000811968:	48 89 c6             	mov    rsi,rax
ffff80000081196b:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000081196f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000811973:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000811977:	0f b7 40 18          	movzx  eax,WORD PTR [rax+0x18]
ffff80000081197b:	0f b7 c0             	movzx  eax,ax
ffff80000081197e:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
ffff800000811982:	48 89 d1             	mov    rcx,rdx
ffff800000811985:	48 89 fa             	mov    rdx,rdi
ffff800000811988:	89 c7                	mov    edi,eax
ffff80000081198a:	49 89 df             	mov    r15,rbx
ffff80000081198d:	48 b8 34 cc ee ff ff 	movabs rax,0xffffffffffeecc34
ffff800000811994:	ff ff ff 
ffff800000811997:	48 01 d8             	add    rax,rbx
ffff80000081199a:	ff d0                	call   rax
ffff80000081199c:	85 c0                	test   eax,eax
ffff80000081199e:	79 35                	jns    ffff8000008119d5 <FAT32_write+0x2e4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:187
			{
				printf("FAT32 FS(write) read disk ERROR!!!!!!!!!!\n");
ffff8000008119a0:	48 b8 68 d8 ff ff ff 	movabs rax,0xffffffffffffd868
ffff8000008119a7:	ff ff ff 
ffff8000008119aa:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008119ae:	48 89 c7             	mov    rdi,rax
ffff8000008119b1:	49 89 df             	mov    r15,rbx
ffff8000008119b4:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008119b9:	48 ba c9 ed ed ff ff 	movabs rdx,0xffffffffffededc9
ffff8000008119c0:	ff ff ff 
ffff8000008119c3:	48 01 da             	add    rdx,rbx
ffff8000008119c6:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:188
				retval = -EIO;
ffff8000008119c8:	48 c7 45 d0 e3 ff ff 	mov    QWORD PTR [rbp-0x30],0xffffffffffffffe3
ffff8000008119cf:	ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:189
				break;
ffff8000008119d0:	e9 25 02 00 00       	jmp    ffff800000811bfa <FAT32_write+0x509>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:193
			}
		}

		length = index <= fsbi->bytes_per_cluster - offset ? index : fsbi->bytes_per_cluster - offset;
ffff8000008119d5:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
ffff8000008119d8:	48 63 d0             	movsxd rdx,eax
ffff8000008119db:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008119df:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff8000008119e3:	48 2b 45 b8          	sub    rax,QWORD PTR [rbp-0x48]
ffff8000008119e7:	48 39 c2             	cmp    rdx,rax
ffff8000008119ea:	48 0f 4e c2          	cmovle rax,rdx
ffff8000008119ee:	89 45 9c             	mov    DWORD PTR [rbp-0x64],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:195

		if((unsigned long)buf < MAX_TASKS)
ffff8000008119f1:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff8000008119f5:	48 83 f8 1f          	cmp    rax,0x1f
ffff8000008119f9:	77 2c                	ja     ffff800000811a27 <FAT32_write+0x336>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:196
			memcpy(buf,buffer + offset,length);
ffff8000008119fb:	8b 55 9c             	mov    edx,DWORD PTR [rbp-0x64]
ffff8000008119fe:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
ffff800000811a02:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811a06:	48 01 c1             	add    rcx,rax
ffff800000811a09:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000811a0d:	48 89 ce             	mov    rsi,rcx
ffff800000811a10:	48 89 c7             	mov    rdi,rax
ffff800000811a13:	49 89 df             	mov    r15,rbx
ffff800000811a16:	48 b8 da 1d ef ff ff 	movabs rax,0xffffffffffef1dda
ffff800000811a1d:	ff ff ff 
ffff800000811a20:	48 01 d8             	add    rax,rbx
ffff800000811a23:	ff d0                	call   rax
ffff800000811a25:	eb 2a                	jmp    ffff800000811a51 <FAT32_write+0x360>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:198
		else
			memcpy(buf,buffer + offset,length);
ffff800000811a27:	8b 55 9c             	mov    edx,DWORD PTR [rbp-0x64]
ffff800000811a2a:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
ffff800000811a2e:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811a32:	48 01 c1             	add    rcx,rax
ffff800000811a35:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000811a39:	48 89 ce             	mov    rsi,rcx
ffff800000811a3c:	48 89 c7             	mov    rdi,rax
ffff800000811a3f:	49 89 df             	mov    r15,rbx
ffff800000811a42:	48 b8 da 1d ef ff ff 	movabs rax,0xffffffffffef1dda
ffff800000811a49:	ff ff ff 
ffff800000811a4c:	48 01 d8             	add    rax,rbx
ffff800000811a4f:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:199
        if(blkdev_write(filp->dentry->dir_inode->dev,sector*SECTOR_SIZE,fsbi->sector_per_cluster*SECTOR_SIZE,buffer)<0)
ffff800000811a51:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000811a55:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000811a59:	48 c1 e0 09          	shl    rax,0x9
ffff800000811a5d:	48 89 c7             	mov    rdi,rax
ffff800000811a60:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000811a64:	48 c1 e0 09          	shl    rax,0x9
ffff800000811a68:	48 89 c6             	mov    rsi,rax
ffff800000811a6b:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000811a6f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000811a73:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000811a77:	0f b7 40 18          	movzx  eax,WORD PTR [rax+0x18]
ffff800000811a7b:	0f b7 c0             	movzx  eax,ax
ffff800000811a7e:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
ffff800000811a82:	48 89 d1             	mov    rcx,rdx
ffff800000811a85:	48 89 fa             	mov    rdx,rdi
ffff800000811a88:	89 c7                	mov    edi,eax
ffff800000811a8a:	49 89 df             	mov    r15,rbx
ffff800000811a8d:	48 b8 93 cd ee ff ff 	movabs rax,0xffffffffffeecd93
ffff800000811a94:	ff ff ff 
ffff800000811a97:	48 01 d8             	add    rax,rbx
ffff800000811a9a:	ff d0                	call   rax
ffff800000811a9c:	85 c0                	test   eax,eax
ffff800000811a9e:	79 35                	jns    ffff800000811ad5 <FAT32_write+0x3e4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:201
		{
			printf("FAT32 FS(write) write disk ERROR!!!!!!!!!!\n");
ffff800000811aa0:	48 b8 98 d8 ff ff ff 	movabs rax,0xffffffffffffd898
ffff800000811aa7:	ff ff ff 
ffff800000811aaa:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000811aae:	48 89 c7             	mov    rdi,rax
ffff800000811ab1:	49 89 df             	mov    r15,rbx
ffff800000811ab4:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811ab9:	48 ba c9 ed ed ff ff 	movabs rdx,0xffffffffffededc9
ffff800000811ac0:	ff ff ff 
ffff800000811ac3:	48 01 da             	add    rdx,rbx
ffff800000811ac6:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:202
			retval = -EIO;
ffff800000811ac8:	48 c7 45 d0 e3 ff ff 	mov    QWORD PTR [rbp-0x30],0xffffffffffffffe3
ffff800000811acf:	ff 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:203
			break;
ffff800000811ad0:	e9 25 01 00 00       	jmp    ffff800000811bfa <FAT32_write+0x509>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:206
		}

		index -= length;
ffff800000811ad5:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff800000811ad8:	29 45 c4             	sub    DWORD PTR [rbp-0x3c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:207
		buf += length;
ffff800000811adb:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff800000811ade:	48 98                	cdqe   
ffff800000811ae0:	48 01 45 80          	add    QWORD PTR [rbp-0x80],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:208
		offset -= offset;
ffff800000811ae4:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffff800000811aeb:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:209
		*position += length;
ffff800000811aec:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000811af3:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000811af6:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffff800000811af9:	48 98                	cdqe   
ffff800000811afb:	48 01 c2             	add    rdx,rax
ffff800000811afe:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000811b05:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:211

		if(index)
ffff800000811b08:	83 7d c4 00          	cmp    DWORD PTR [rbp-0x3c],0x0
ffff800000811b0c:	0f 84 e7 00 00 00    	je     ffff800000811bf9 <FAT32_write+0x508>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:212
			next_cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff800000811b12:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811b16:	89 c2                	mov    edx,eax
ffff800000811b18:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000811b1c:	89 d6                	mov    esi,edx
ffff800000811b1e:	48 89 c7             	mov    rdi,rax
ffff800000811b21:	49 89 df             	mov    r15,rbx
ffff800000811b24:	48 b8 32 e3 ee ff ff 	movabs rax,0xffffffffffeee332
ffff800000811b2b:	ff ff ff 
ffff800000811b2e:	48 01 d8             	add    rax,rbx
ffff800000811b31:	ff d0                	call   rax
ffff800000811b33:	89 c0                	mov    eax,eax
ffff800000811b35:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:216
		else
			break;

		if(next_cluster >= 0x0ffffff8)
ffff800000811b39:	48 81 7d a0 f7 ff ff 	cmp    QWORD PTR [rbp-0x60],0xffffff7
ffff800000811b40:	0f 
ffff800000811b41:	0f 86 a6 00 00 00    	jbe    ffff800000811bed <FAT32_write+0x4fc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:218
		{
			next_cluster = FAT32_find_available_cluster(fsbi);
ffff800000811b47:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000811b4b:	48 89 c7             	mov    rdi,rax
ffff800000811b4e:	49 89 df             	mov    r15,rbx
ffff800000811b51:	48 b8 d9 e9 ee ff ff 	movabs rax,0xffffffffffeee9d9
ffff800000811b58:	ff ff ff 
ffff800000811b5b:	48 01 d8             	add    rax,rbx
ffff800000811b5e:	ff d0                	call   rax
ffff800000811b60:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:219
			if(!next_cluster)
ffff800000811b64:	48 83 7d a0 00       	cmp    QWORD PTR [rbp-0x60],0x0
ffff800000811b69:	75 25                	jne    ffff800000811b90 <FAT32_write+0x49f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:221
			{
                kmfree(buffer);
ffff800000811b6b:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811b6f:	48 89 c7             	mov    rdi,rax
ffff800000811b72:	49 89 df             	mov    r15,rbx
ffff800000811b75:	48 b8 6f 09 ee ff ff 	movabs rax,0xffffffffffee096f
ffff800000811b7c:	ff ff ff 
ffff800000811b7f:	48 01 d8             	add    rax,rbx
ffff800000811b82:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:222
				return -ENOSPC;
ffff800000811b84:	48 c7 c0 cc ff ff ff 	mov    rax,0xffffffffffffffcc
ffff800000811b8b:	e9 fb 00 00 00       	jmp    ffff800000811c8b <FAT32_write+0x59a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:225
			}			
				
			DISK1_FAT32_write_FAT_Entry(fsbi,cluster,next_cluster);
ffff800000811b90:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000811b94:	89 c2                	mov    edx,eax
ffff800000811b96:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811b9a:	89 c1                	mov    ecx,eax
ffff800000811b9c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000811ba0:	89 ce                	mov    esi,ecx
ffff800000811ba2:	48 89 c7             	mov    rdi,rax
ffff800000811ba5:	49 89 df             	mov    r15,rbx
ffff800000811ba8:	48 b8 95 e4 ee ff ff 	movabs rax,0xffffffffffeee495
ffff800000811baf:	ff ff ff 
ffff800000811bb2:	48 01 d8             	add    rax,rbx
ffff800000811bb5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:226
			DISK1_FAT32_write_FAT_Entry(fsbi,next_cluster,0x0ffffff8);
ffff800000811bb7:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000811bbb:	89 c1                	mov    ecx,eax
ffff800000811bbd:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000811bc1:	ba f8 ff ff 0f       	mov    edx,0xffffff8
ffff800000811bc6:	89 ce                	mov    esi,ecx
ffff800000811bc8:	48 89 c7             	mov    rdi,rax
ffff800000811bcb:	49 89 df             	mov    r15,rbx
ffff800000811bce:	48 b8 95 e4 ee ff ff 	movabs rax,0xffffffffffeee495
ffff800000811bd5:	ff ff ff 
ffff800000811bd8:	48 01 d8             	add    rax,rbx
ffff800000811bdb:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:227
			cluster = next_cluster;
ffff800000811bdd:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000811be1:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:228
			flags = 1;
ffff800000811be5:	48 c7 45 c8 01 00 00 	mov    QWORD PTR [rbp-0x38],0x1
ffff800000811bec:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:231
		}

	}while(index);
ffff800000811bed:	83 7d c4 00          	cmp    DWORD PTR [rbp-0x3c],0x0
ffff800000811bf1:	0f 85 04 fd ff ff    	jne    ffff8000008118fb <FAT32_write+0x20a>
ffff800000811bf7:	eb 01                	jmp    ffff800000811bfa <FAT32_write+0x509>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:214
			break;
ffff800000811bf9:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:233

	if(*position > filp->dentry->dir_inode->file_size)
ffff800000811bfa:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000811c01:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811c04:	48 89 c2             	mov    rdx,rax
ffff800000811c07:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000811c0b:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000811c0f:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000811c13:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811c16:	48 39 c2             	cmp    rdx,rax
ffff800000811c19:	76 42                	jbe    ffff800000811c5d <FAT32_write+0x56c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:235
	{
		filp->dentry->dir_inode->file_size = *position;
ffff800000811c1b:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffff800000811c22:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000811c25:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000811c29:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000811c2d:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000811c31:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:236
		filp->dentry->dir_inode->sb->sb_ops->write_inode(filp->dentry->dir_inode);
ffff800000811c34:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000811c38:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000811c3c:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000811c40:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000811c44:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000811c48:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffff800000811c4c:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000811c50:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000811c54:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000811c58:	48 89 c7             	mov    rdi,rax
ffff800000811c5b:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:239
	}

    kmfree(buffer);
ffff800000811c5d:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000811c61:	48 89 c7             	mov    rdi,rax
ffff800000811c64:	49 89 df             	mov    r15,rbx
ffff800000811c67:	48 b8 6f 09 ee ff ff 	movabs rax,0xffffffffffee096f
ffff800000811c6e:	ff ff ff 
ffff800000811c71:	48 01 d8             	add    rax,rbx
ffff800000811c74:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:240
	if(!index)
ffff800000811c76:	83 7d c4 00          	cmp    DWORD PTR [rbp-0x3c],0x0
ffff800000811c7a:	75 0b                	jne    ffff800000811c87 <FAT32_write+0x596>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:241
		retval = count;
ffff800000811c7c:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffff800000811c83:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:242
	return retval;
ffff800000811c87:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:243
}
ffff800000811c8b:	48 83 ec 80          	sub    rsp,0xffffffffffffff80
ffff800000811c8f:	5b                   	pop    rbx
ffff800000811c90:	41 5f                	pop    r15
ffff800000811c92:	5d                   	pop    rbp
ffff800000811c93:	c3                   	ret    

ffff800000811c94 <FAT32_lseek>:
FAT32_lseek():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:247


long FAT32_lseek(struct file * filp,long offset,long origin)
{
ffff800000811c94:	f3 0f 1e fa          	endbr64 
ffff800000811c98:	55                   	push   rbp
ffff800000811c99:	48 89 e5             	mov    rbp,rsp
ffff800000811c9c:	41 57                	push   r15
ffff800000811c9e:	48 83 ec 38          	sub    rsp,0x38
ffff800000811ca2:	48 8d 0d f9 ff ff ff 	lea    rcx,[rip+0xfffffffffffffff9]        # ffff800000811ca2 <FAT32_lseek+0xe>
ffff800000811ca9:	49 bb 56 0f 11 00 00 	movabs r11,0x110f56
ffff800000811cb0:	00 00 00 
ffff800000811cb3:	4c 01 d9             	add    rcx,r11
ffff800000811cb6:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000811cba:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffff800000811cbe:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:248
	struct index_node *inode = filp->dentry->dir_inode;
ffff800000811cc2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811cc6:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000811cca:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000811cce:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:249
	long pos = 0;
ffff800000811cd2:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff800000811cd9:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:251

	switch(origin)
ffff800000811cda:	48 83 7d c8 02       	cmp    QWORD PTR [rbp-0x38],0x2
ffff800000811cdf:	74 21                	je     ffff800000811d02 <FAT32_lseek+0x6e>
ffff800000811ce1:	48 83 7d c8 02       	cmp    QWORD PTR [rbp-0x38],0x2
ffff800000811ce6:	7f 4a                	jg     ffff800000811d32 <FAT32_lseek+0x9e>
ffff800000811ce8:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffff800000811ced:	74 09                	je     ffff800000811cf8 <FAT32_lseek+0x64>
ffff800000811cef:	48 83 7d c8 01       	cmp    QWORD PTR [rbp-0x38],0x1
ffff800000811cf4:	74 20                	je     ffff800000811d16 <FAT32_lseek+0x82>
ffff800000811cf6:	eb 3a                	jmp    ffff800000811d32 <FAT32_lseek+0x9e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:254
	{
		case SEEK_SET:
				pos = offset;
ffff800000811cf8:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811cfc:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:255
			break;
ffff800000811d00:	eb 39                	jmp    ffff800000811d3b <FAT32_lseek+0xa7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:258

		case SEEK_CUR:
				pos =  filp->position + offset;
ffff800000811d02:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811d06:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000811d09:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811d0d:	48 01 d0             	add    rax,rdx
ffff800000811d10:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:259
			break;
ffff800000811d14:	eb 25                	jmp    ffff800000811d3b <FAT32_lseek+0xa7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:262

		case SEEK_END:
				pos = filp->dentry->dir_inode->file_size + offset;
ffff800000811d16:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811d1a:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000811d1e:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000811d22:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000811d25:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000811d29:	48 01 d0             	add    rax,rdx
ffff800000811d2c:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:263
			break;
ffff800000811d30:	eb 09                	jmp    ffff800000811d3b <FAT32_lseek+0xa7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:266

		default:
			return -EINVAL;
ffff800000811d32:	48 c7 c0 e4 ff ff ff 	mov    rax,0xffffffffffffffe4
ffff800000811d39:	eb 69                	jmp    ffff800000811da4 <FAT32_lseek+0x110>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:270
			break;
	}

	if(pos < 0 || pos > filp->dentry->dir_inode->file_size)
ffff800000811d3b:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffff800000811d40:	78 18                	js     ffff800000811d5a <FAT32_lseek+0xc6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:270 (discriminator 1)
ffff800000811d42:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811d46:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000811d4a:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000811d4e:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000811d51:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000811d55:	48 39 c2             	cmp    rdx,rax
ffff800000811d58:	73 09                	jae    ffff800000811d63 <FAT32_lseek+0xcf>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:271
		return -EOVERFLOW;
ffff800000811d5a:	48 c7 c0 bf ff ff ff 	mov    rax,0xffffffffffffffbf
ffff800000811d61:	eb 41                	jmp    ffff800000811da4 <FAT32_lseek+0x110>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:273

	filp->position = pos;
ffff800000811d63:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811d67:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000811d6b:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:274
	printf("FAT32 FS(lseek) alert position:%d\n",filp->position);
ffff800000811d6e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000811d72:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811d75:	48 89 c6             	mov    rsi,rax
ffff800000811d78:	48 b8 c8 d8 ff ff ff 	movabs rax,0xffffffffffffd8c8
ffff800000811d7f:	ff ff ff 
ffff800000811d82:	48 8d 04 01          	lea    rax,[rcx+rax*1]
ffff800000811d86:	48 89 c7             	mov    rdi,rax
ffff800000811d89:	49 89 cf             	mov    r15,rcx
ffff800000811d8c:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811d91:	48 ba c9 ed ed ff ff 	movabs rdx,0xffffffffffededc9
ffff800000811d98:	ff ff ff 
ffff800000811d9b:	48 01 ca             	add    rdx,rcx
ffff800000811d9e:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:276

	return pos;
ffff800000811da0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:277
}
ffff800000811da4:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000811da8:	c9                   	leave  
ffff800000811da9:	c3                   	ret    

ffff800000811daa <FAT32_ioctl>:
FAT32_ioctl():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:281


long FAT32_ioctl(struct index_node * inode,struct file * filp,unsigned long cmd,unsigned long arg)
{}
ffff800000811daa:	f3 0f 1e fa          	endbr64 
ffff800000811dae:	55                   	push   rbp
ffff800000811daf:	48 89 e5             	mov    rbp,rsp
ffff800000811db2:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000811db2 <FAT32_ioctl+0x8>
ffff800000811db9:	49 bb 46 0e 11 00 00 	movabs r11,0x110e46
ffff800000811dc0:	00 00 00 
ffff800000811dc3:	4c 01 d8             	add    rax,r11
ffff800000811dc6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000811dca:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000811dce:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff800000811dd2:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
ffff800000811dd6:	90                   	nop
ffff800000811dd7:	5d                   	pop    rbp
ffff800000811dd8:	c3                   	ret    

ffff800000811dd9 <FAT32_readdir>:
FAT32_readdir():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:284

long FAT32_readdir(struct file * filp,void * dirent,filldir_t filler)
{
ffff800000811dd9:	f3 0f 1e fa          	endbr64 
ffff800000811ddd:	55                   	push   rbp
ffff800000811dde:	48 89 e5             	mov    rbp,rsp
ffff800000811de1:	41 57                	push   r15
ffff800000811de3:	53                   	push   rbx
ffff800000811de4:	48 83 c4 80          	add    rsp,0xffffffffffffff80
ffff800000811de8:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000811de8 <FAT32_readdir+0xf>
ffff800000811def:	49 bb 10 0e 11 00 00 	movabs r11,0x110e10
ffff800000811df6:	00 00 00 
ffff800000811df9:	4c 01 db             	add    rbx,r11
ffff800000811dfc:	48 89 7d 88          	mov    QWORD PTR [rbp-0x78],rdi
ffff800000811e00:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
ffff800000811e04:	48 89 95 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:285
	struct FAT32_inode_info * finode = filp->dentry->dir_inode->private_index_info;
ffff800000811e0b:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000811e0f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000811e13:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000811e17:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff800000811e1b:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:286
	struct FAT32_sb_info * fsbi = filp->dentry->dir_inode->sb->private_sb_info;
ffff800000811e1f:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000811e23:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000811e27:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000811e2b:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000811e2f:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000811e33:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:288

	unsigned int cluster = 0;
ffff800000811e37:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:289
	unsigned long sector = 0;
ffff800000811e3e:	48 c7 45 a0 00 00 00 	mov    QWORD PTR [rbp-0x60],0x0
ffff800000811e45:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:290
	unsigned char * buf =NULL; 
ffff800000811e46:	48 c7 45 98 00 00 00 	mov    QWORD PTR [rbp-0x68],0x0
ffff800000811e4d:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:291
	char *name = NULL;
ffff800000811e4e:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff800000811e55:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:292
	int namelen = 0;
ffff800000811e56:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:293
	int i = 0,j = 0,x = 0,y = 0;
ffff800000811e5d:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [rbp-0x28],0x0
ffff800000811e64:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x0
ffff800000811e6b:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
ffff800000811e72:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:294
	struct FAT32_Directory * tmpdentry = NULL;
ffff800000811e79:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
ffff800000811e80:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:295
	struct FAT32_LongDirectory * tmpldentry = NULL;
ffff800000811e81:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffff800000811e88:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:297

	buf = kmallocat(0,TO_MPGN(fsbi->bytes_per_cluster));
ffff800000811e89:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000811e8d:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000811e91:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff800000811e97:	48 8d 90 ff 0f 00 00 	lea    rdx,[rax+0xfff]
ffff800000811e9e:	48 85 c0             	test   rax,rax
ffff800000811ea1:	48 0f 48 c2          	cmovs  rax,rdx
ffff800000811ea5:	48 c1 f8 0c          	sar    rax,0xc
ffff800000811ea9:	89 c6                	mov    esi,eax
ffff800000811eab:	bf 00 00 00 00       	mov    edi,0x0
ffff800000811eb0:	49 89 df             	mov    r15,rbx
ffff800000811eb3:	48 b8 5a f7 ed ff ff 	movabs rax,0xffffffffffedf75a
ffff800000811eba:	ff ff ff 
ffff800000811ebd:	48 01 d8             	add    rax,rbx
ffff800000811ec0:	ff d0                	call   rax
ffff800000811ec2:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:299

	cluster = finode->first_cluster;
ffff800000811ec6:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000811eca:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811ecd:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:301

	j = filp->position/fsbi->bytes_per_cluster;
ffff800000811ed0:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000811ed4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000811ed7:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff800000811edb:	48 8b 72 18          	mov    rsi,QWORD PTR [rdx+0x18]
ffff800000811edf:	48 99                	cqo    
ffff800000811ee1:	48 f7 fe             	idiv   rsi
ffff800000811ee4:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:303
	
	for(i = 0;i<j;i++)
ffff800000811ee7:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [rbp-0x28],0x0
ffff800000811eee:	eb 60                	jmp    ffff800000811f50 <FAT32_readdir+0x177>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:305
	{
		cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff800000811ef0:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000811ef3:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000811ef7:	89 d6                	mov    esi,edx
ffff800000811ef9:	48 89 c7             	mov    rdi,rax
ffff800000811efc:	49 89 df             	mov    r15,rbx
ffff800000811eff:	48 b8 32 e3 ee ff ff 	movabs rax,0xffffffffffeee332
ffff800000811f06:	ff ff ff 
ffff800000811f09:	48 01 d8             	add    rax,rbx
ffff800000811f0c:	ff d0                	call   rax
ffff800000811f0e:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:306
		if(cluster > 0x0ffffff7)
ffff800000811f11:	81 7d ec f7 ff ff 0f 	cmp    DWORD PTR [rbp-0x14],0xffffff7
ffff800000811f18:	76 32                	jbe    ffff800000811f4c <FAT32_readdir+0x173>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:308
		{
			printf("FAT32 FS(readdir) cluster didn`t exist\n");
ffff800000811f1a:	48 b8 f0 d8 ff ff ff 	movabs rax,0xffffffffffffd8f0
ffff800000811f21:	ff ff ff 
ffff800000811f24:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000811f28:	48 89 c7             	mov    rdi,rax
ffff800000811f2b:	49 89 df             	mov    r15,rbx
ffff800000811f2e:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811f33:	48 ba c9 ed ed ff ff 	movabs rdx,0xffffffffffededc9
ffff800000811f3a:	ff ff ff 
ffff800000811f3d:	48 01 da             	add    rdx,rbx
ffff800000811f40:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:309
			return NULL;
ffff800000811f42:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811f47:	e9 1e 06 00 00       	jmp    ffff80000081256a <FAT32_readdir+0x791>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:303 (discriminator 2)
	for(i = 0;i<j;i++)
ffff800000811f4c:	83 45 d8 01          	add    DWORD PTR [rbp-0x28],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:303 (discriminator 1)
ffff800000811f50:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000811f53:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
ffff800000811f56:	7c 98                	jl     ffff800000811ef0 <FAT32_readdir+0x117>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:313
		}
	}

next_cluster:
ffff800000811f58:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:314
	sector = fsbi->Data_firstsector + (cluster - 2) * fsbi->sector_per_cluster;
ffff800000811f59:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000811f5d:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
ffff800000811f61:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000811f64:	83 e8 02             	sub    eax,0x2
ffff800000811f67:	89 c1                	mov    ecx,eax
ffff800000811f69:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000811f6d:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000811f71:	48 0f af c1          	imul   rax,rcx
ffff800000811f75:	48 01 d0             	add    rax,rdx
ffff800000811f78:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:315
    if(blkdev_read(filp->dentry->dir_inode->dev,sector*SECTOR_SIZE,fsbi->sector_per_cluster*SECTOR_SIZE,buf)<0)
ffff800000811f7c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000811f80:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000811f84:	48 c1 e0 09          	shl    rax,0x9
ffff800000811f88:	48 89 c7             	mov    rdi,rax
ffff800000811f8b:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffff800000811f8f:	48 c1 e0 09          	shl    rax,0x9
ffff800000811f93:	48 89 c6             	mov    rsi,rax
ffff800000811f96:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000811f9a:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000811f9e:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000811fa2:	0f b7 40 18          	movzx  eax,WORD PTR [rax+0x18]
ffff800000811fa6:	0f b7 c0             	movzx  eax,ax
ffff800000811fa9:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
ffff800000811fad:	48 89 d1             	mov    rcx,rdx
ffff800000811fb0:	48 89 fa             	mov    rdx,rdi
ffff800000811fb3:	89 c7                	mov    edi,eax
ffff800000811fb5:	49 89 df             	mov    r15,rbx
ffff800000811fb8:	48 b8 34 cc ee ff ff 	movabs rax,0xffffffffffeecc34
ffff800000811fbf:	ff ff ff 
ffff800000811fc2:	48 01 d8             	add    rax,rbx
ffff800000811fc5:	ff d0                	call   rax
ffff800000811fc7:	85 c0                	test   eax,eax
ffff800000811fc9:	79 4b                	jns    ffff800000812016 <FAT32_readdir+0x23d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:317
	{
		printf("FAT32 FS(readdir) read disk ERROR!!!!!!!!!!\n");
ffff800000811fcb:	48 b8 18 d9 ff ff ff 	movabs rax,0xffffffffffffd918
ffff800000811fd2:	ff ff ff 
ffff800000811fd5:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000811fd9:	48 89 c7             	mov    rdi,rax
ffff800000811fdc:	49 89 df             	mov    r15,rbx
ffff800000811fdf:	b8 00 00 00 00       	mov    eax,0x0
ffff800000811fe4:	48 ba c9 ed ed ff ff 	movabs rdx,0xffffffffffededc9
ffff800000811feb:	ff ff ff 
ffff800000811fee:	48 01 da             	add    rdx,rbx
ffff800000811ff1:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:318
        kmfree(buf);
ffff800000811ff3:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000811ff7:	48 89 c7             	mov    rdi,rax
ffff800000811ffa:	49 89 df             	mov    r15,rbx
ffff800000811ffd:	48 b8 6f 09 ee ff ff 	movabs rax,0xffffffffffee096f
ffff800000812004:	ff ff ff 
ffff800000812007:	48 01 d8             	add    rax,rbx
ffff80000081200a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:319
		return NULL;
ffff80000081200c:	b8 00 00 00 00       	mov    eax,0x0
ffff800000812011:	e9 54 05 00 00       	jmp    ffff80000081256a <FAT32_readdir+0x791>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:322
	}

	tmpdentry = (struct FAT32_Directory *)(buf + filp->position%fsbi->bytes_per_cluster);
ffff800000812016:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000081201a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000081201d:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff800000812021:	48 8b 4a 18          	mov    rcx,QWORD PTR [rdx+0x18]
ffff800000812025:	48 99                	cqo    
ffff800000812027:	48 f7 f9             	idiv   rcx
ffff80000081202a:	48 89 d0             	mov    rax,rdx
ffff80000081202d:	48 89 c2             	mov    rdx,rax
ffff800000812030:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000812034:	48 01 d0             	add    rax,rdx
ffff800000812037:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:324

	for(i = filp->position%fsbi->bytes_per_cluster;i < fsbi->bytes_per_cluster;i += 32,tmpdentry++,filp->position += 32)
ffff80000081203b:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000081203f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812042:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff800000812046:	48 8b 4a 18          	mov    rcx,QWORD PTR [rdx+0x18]
ffff80000081204a:	48 99                	cqo    
ffff80000081204c:	48 f7 f9             	idiv   rcx
ffff80000081204f:	48 89 d0             	mov    rax,rdx
ffff800000812052:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
ffff800000812055:	e9 6c 04 00 00       	jmp    ffff8000008124c6 <FAT32_readdir+0x6ed>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:326
	{
		if(tmpdentry->DIR_Attr == ATTR_LONG_NAME)
ffff80000081205a:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000081205e:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff800000812062:	3c 0f                	cmp    al,0xf
ffff800000812064:	0f 84 3d 04 00 00    	je     ffff8000008124a7 <FAT32_readdir+0x6ce>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:328
			continue;
		if(tmpdentry->DIR_Name[0] == 0xe5 || tmpdentry->DIR_Name[0] == 0x00 || tmpdentry->DIR_Name[0] == 0x05)
ffff80000081206a:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000081206e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812071:	3c e5                	cmp    al,0xe5
ffff800000812073:	0f 84 31 04 00 00    	je     ffff8000008124aa <FAT32_readdir+0x6d1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:328 (discriminator 2)
ffff800000812079:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000081207d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812080:	84 c0                	test   al,al
ffff800000812082:	0f 84 22 04 00 00    	je     ffff8000008124aa <FAT32_readdir+0x6d1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:328 (discriminator 4)
ffff800000812088:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000081208c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081208f:	3c 05                	cmp    al,0x5
ffff800000812091:	0f 84 13 04 00 00    	je     ffff8000008124aa <FAT32_readdir+0x6d1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:331
			continue;

		namelen = 0;
ffff800000812097:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:332
		tmpldentry = (struct FAT32_LongDirectory *)tmpdentry-1;
ffff80000081209e:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008120a2:	48 83 e8 20          	sub    rax,0x20
ffff8000008120a6:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:334

		if(tmpldentry->LDIR_Attr == ATTR_LONG_NAME && tmpldentry->LDIR_Ord != 0xe5 && tmpldentry->LDIR_Ord != 0x00 && tmpldentry->LDIR_Ord != 0x05)
ffff8000008120aa:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008120ae:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff8000008120b2:	3c 0f                	cmp    al,0xf
ffff8000008120b4:	0f 85 4f 02 00 00    	jne    ffff800000812309 <FAT32_readdir+0x530>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:334 (discriminator 1)
ffff8000008120ba:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008120be:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008120c1:	3c e5                	cmp    al,0xe5
ffff8000008120c3:	0f 84 40 02 00 00    	je     ffff800000812309 <FAT32_readdir+0x530>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:334 (discriminator 2)
ffff8000008120c9:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008120cd:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008120d0:	84 c0                	test   al,al
ffff8000008120d2:	0f 84 31 02 00 00    	je     ffff800000812309 <FAT32_readdir+0x530>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:334 (discriminator 3)
ffff8000008120d8:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008120dc:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008120df:	3c 05                	cmp    al,0x5
ffff8000008120e1:	0f 84 22 02 00 00    	je     ffff800000812309 <FAT32_readdir+0x530>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:336
		{
			j = 0;
ffff8000008120e7:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:338
			//long file/dir name read
			while(tmpldentry->LDIR_Attr == ATTR_LONG_NAME  && tmpldentry->LDIR_Ord != 0xe5 && tmpldentry->LDIR_Ord != 0x00 && tmpldentry->LDIR_Ord != 0x05)
ffff8000008120ee:	eb 1a                	jmp    ffff80000081210a <FAT32_readdir+0x331>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:340
			{
				j++;
ffff8000008120f0:	83 45 d4 01          	add    DWORD PTR [rbp-0x2c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:341
				if(tmpldentry->LDIR_Ord & 0x40)
ffff8000008120f4:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008120f8:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008120fb:	0f b6 c0             	movzx  eax,al
ffff8000008120fe:	83 e0 40             	and    eax,0x40
ffff800000812101:	85 c0                	test   eax,eax
ffff800000812103:	75 34                	jne    ffff800000812139 <FAT32_readdir+0x360>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:343
					break;
				tmpldentry --;
ffff800000812105:	48 83 6d b8 20       	sub    QWORD PTR [rbp-0x48],0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:338
			while(tmpldentry->LDIR_Attr == ATTR_LONG_NAME  && tmpldentry->LDIR_Ord != 0xe5 && tmpldentry->LDIR_Ord != 0x00 && tmpldentry->LDIR_Ord != 0x05)
ffff80000081210a:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081210e:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff800000812112:	3c 0f                	cmp    al,0xf
ffff800000812114:	75 24                	jne    ffff80000081213a <FAT32_readdir+0x361>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:338 (discriminator 1)
ffff800000812116:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081211a:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081211d:	3c e5                	cmp    al,0xe5
ffff80000081211f:	74 19                	je     ffff80000081213a <FAT32_readdir+0x361>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:338 (discriminator 2)
ffff800000812121:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000812125:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812128:	84 c0                	test   al,al
ffff80000081212a:	74 0e                	je     ffff80000081213a <FAT32_readdir+0x361>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:338 (discriminator 3)
ffff80000081212c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000812130:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812133:	3c 05                	cmp    al,0x5
ffff800000812135:	75 b9                	jne    ffff8000008120f0 <FAT32_readdir+0x317>
ffff800000812137:	eb 01                	jmp    ffff80000081213a <FAT32_readdir+0x361>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:342
					break;
ffff800000812139:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:346
			}

			name = kmallocat(0,TO_MPGN(j * 13 + 1));
ffff80000081213a:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff80000081213d:	89 d0                	mov    eax,edx
ffff80000081213f:	01 c0                	add    eax,eax
ffff800000812141:	01 d0                	add    eax,edx
ffff800000812143:	c1 e0 02             	shl    eax,0x2
ffff800000812146:	01 d0                	add    eax,edx
ffff800000812148:	05 00 10 00 00       	add    eax,0x1000
ffff80000081214d:	8d 90 ff 0f 00 00    	lea    edx,[rax+0xfff]
ffff800000812153:	85 c0                	test   eax,eax
ffff800000812155:	0f 48 c2             	cmovs  eax,edx
ffff800000812158:	c1 f8 0c             	sar    eax,0xc
ffff80000081215b:	89 c6                	mov    esi,eax
ffff80000081215d:	bf 00 00 00 00       	mov    edi,0x0
ffff800000812162:	49 89 df             	mov    r15,rbx
ffff800000812165:	48 b8 5a f7 ed ff ff 	movabs rax,0xffffffffffedf75a
ffff80000081216c:	ff ff ff 
ffff80000081216f:	48 01 d8             	add    rax,rbx
ffff800000812172:	ff d0                	call   rax
ffff800000812174:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:347
			memset(name,0,j*13+1);
ffff800000812178:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff80000081217b:	89 d0                	mov    eax,edx
ffff80000081217d:	01 c0                	add    eax,eax
ffff80000081217f:	01 d0                	add    eax,edx
ffff800000812181:	c1 e0 02             	shl    eax,0x2
ffff800000812184:	01 d0                	add    eax,edx
ffff800000812186:	83 c0 01             	add    eax,0x1
ffff800000812189:	89 c2                	mov    edx,eax
ffff80000081218b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000081218f:	be 00 00 00 00       	mov    esi,0x0
ffff800000812194:	48 89 c7             	mov    rdi,rax
ffff800000812197:	49 89 df             	mov    r15,rbx
ffff80000081219a:	48 b8 89 1e ef ff ff 	movabs rax,0xffffffffffef1e89
ffff8000008121a1:	ff ff ff 
ffff8000008121a4:	48 01 d8             	add    rax,rbx
ffff8000008121a7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:348
			tmpldentry = (struct FAT32_LongDirectory *)tmpdentry-1;
ffff8000008121a9:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008121ad:	48 83 e8 20          	sub    rax,0x20
ffff8000008121b1:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:350

			for(x = 0;x<j;x++,tmpldentry --)
ffff8000008121b5:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
ffff8000008121bc:	e9 37 01 00 00       	jmp    ffff8000008122f8 <FAT32_readdir+0x51f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:352
			{
				for(y = 0;y<5;y++)
ffff8000008121c1:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
ffff8000008121c8:	eb 53                	jmp    ffff80000081221d <FAT32_readdir+0x444>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:353
					if(tmpldentry->LDIR_Name1[y] != 0xffff && tmpldentry->LDIR_Name1[y] != 0x0000)
ffff8000008121ca:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008121ce:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff8000008121d1:	48 63 d2             	movsxd rdx,edx
ffff8000008121d4:	0f b7 44 50 01       	movzx  eax,WORD PTR [rax+rdx*2+0x1]
ffff8000008121d9:	66 83 f8 ff          	cmp    ax,0xffff
ffff8000008121dd:	74 3a                	je     ffff800000812219 <FAT32_readdir+0x440>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:353 (discriminator 1)
ffff8000008121df:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008121e3:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff8000008121e6:	48 63 d2             	movsxd rdx,edx
ffff8000008121e9:	0f b7 44 50 01       	movzx  eax,WORD PTR [rax+rdx*2+0x1]
ffff8000008121ee:	66 85 c0             	test   ax,ax
ffff8000008121f1:	74 26                	je     ffff800000812219 <FAT32_readdir+0x440>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:354
						name[namelen++] = (char)tmpldentry->LDIR_Name1[y];
ffff8000008121f3:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008121f7:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff8000008121fa:	48 63 d2             	movsxd rdx,edx
ffff8000008121fd:	0f b7 4c 50 01       	movzx  ecx,WORD PTR [rax+rdx*2+0x1]
ffff800000812202:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000812205:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000812208:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff80000081220b:	48 63 d0             	movsxd rdx,eax
ffff80000081220e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000812212:	48 01 d0             	add    rax,rdx
ffff800000812215:	89 ca                	mov    edx,ecx
ffff800000812217:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:352 (discriminator 2)
				for(y = 0;y<5;y++)
ffff800000812219:	83 45 cc 01          	add    DWORD PTR [rbp-0x34],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:352 (discriminator 1)
ffff80000081221d:	83 7d cc 04          	cmp    DWORD PTR [rbp-0x34],0x4
ffff800000812221:	7e a7                	jle    ffff8000008121ca <FAT32_readdir+0x3f1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:356

				for(y = 0;y<6;y++)
ffff800000812223:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
ffff80000081222a:	eb 53                	jmp    ffff80000081227f <FAT32_readdir+0x4a6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:357
					if(tmpldentry->LDIR_Name2[y] != 0xffff && tmpldentry->LDIR_Name1[y] != 0x0000)
ffff80000081222c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000812230:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff800000812233:	48 63 d2             	movsxd rdx,edx
ffff800000812236:	0f b7 44 50 0e       	movzx  eax,WORD PTR [rax+rdx*2+0xe]
ffff80000081223b:	66 83 f8 ff          	cmp    ax,0xffff
ffff80000081223f:	74 3a                	je     ffff80000081227b <FAT32_readdir+0x4a2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:357 (discriminator 1)
ffff800000812241:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000812245:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff800000812248:	48 63 d2             	movsxd rdx,edx
ffff80000081224b:	0f b7 44 50 01       	movzx  eax,WORD PTR [rax+rdx*2+0x1]
ffff800000812250:	66 85 c0             	test   ax,ax
ffff800000812253:	74 26                	je     ffff80000081227b <FAT32_readdir+0x4a2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:358
						name[namelen++] = (char)tmpldentry->LDIR_Name2[y];
ffff800000812255:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000812259:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff80000081225c:	48 63 d2             	movsxd rdx,edx
ffff80000081225f:	0f b7 4c 50 0e       	movzx  ecx,WORD PTR [rax+rdx*2+0xe]
ffff800000812264:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000812267:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000081226a:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff80000081226d:	48 63 d0             	movsxd rdx,eax
ffff800000812270:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000812274:	48 01 d0             	add    rax,rdx
ffff800000812277:	89 ca                	mov    edx,ecx
ffff800000812279:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:356 (discriminator 2)
				for(y = 0;y<6;y++)
ffff80000081227b:	83 45 cc 01          	add    DWORD PTR [rbp-0x34],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:356 (discriminator 1)
ffff80000081227f:	83 7d cc 05          	cmp    DWORD PTR [rbp-0x34],0x5
ffff800000812283:	7e a7                	jle    ffff80000081222c <FAT32_readdir+0x453>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:360

				for(y = 0;y<2;y++)
ffff800000812285:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
ffff80000081228c:	eb 5b                	jmp    ffff8000008122e9 <FAT32_readdir+0x510>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:361
					if(tmpldentry->LDIR_Name3[y] != 0xffff && tmpldentry->LDIR_Name1[y] != 0x0000)
ffff80000081228e:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000812292:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff800000812295:	48 63 d2             	movsxd rdx,edx
ffff800000812298:	48 83 c2 08          	add    rdx,0x8
ffff80000081229c:	0f b7 44 50 0c       	movzx  eax,WORD PTR [rax+rdx*2+0xc]
ffff8000008122a1:	66 83 f8 ff          	cmp    ax,0xffff
ffff8000008122a5:	74 3e                	je     ffff8000008122e5 <FAT32_readdir+0x50c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:361 (discriminator 1)
ffff8000008122a7:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008122ab:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff8000008122ae:	48 63 d2             	movsxd rdx,edx
ffff8000008122b1:	0f b7 44 50 01       	movzx  eax,WORD PTR [rax+rdx*2+0x1]
ffff8000008122b6:	66 85 c0             	test   ax,ax
ffff8000008122b9:	74 2a                	je     ffff8000008122e5 <FAT32_readdir+0x50c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:362
						name[namelen++] = (char)tmpldentry->LDIR_Name3[y];
ffff8000008122bb:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008122bf:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffff8000008122c2:	48 63 d2             	movsxd rdx,edx
ffff8000008122c5:	48 83 c2 08          	add    rdx,0x8
ffff8000008122c9:	0f b7 4c 50 0c       	movzx  ecx,WORD PTR [rax+rdx*2+0xc]
ffff8000008122ce:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008122d1:	8d 50 01             	lea    edx,[rax+0x1]
ffff8000008122d4:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff8000008122d7:	48 63 d0             	movsxd rdx,eax
ffff8000008122da:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008122de:	48 01 d0             	add    rax,rdx
ffff8000008122e1:	89 ca                	mov    edx,ecx
ffff8000008122e3:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:360 (discriminator 2)
				for(y = 0;y<2;y++)
ffff8000008122e5:	83 45 cc 01          	add    DWORD PTR [rbp-0x34],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:360 (discriminator 1)
ffff8000008122e9:	83 7d cc 01          	cmp    DWORD PTR [rbp-0x34],0x1
ffff8000008122ed:	7e 9f                	jle    ffff80000081228e <FAT32_readdir+0x4b5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:350 (discriminator 2)
			for(x = 0;x<j;x++,tmpldentry --)
ffff8000008122ef:	83 45 d0 01          	add    DWORD PTR [rbp-0x30],0x1
ffff8000008122f3:	48 83 6d b8 20       	sub    QWORD PTR [rbp-0x48],0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:350 (discriminator 1)
ffff8000008122f8:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff8000008122fb:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
ffff8000008122fe:	0f 8c bd fe ff ff    	jl     ffff8000008121c1 <FAT32_readdir+0x3e8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:364
			}
			goto find_lookup_success;
ffff800000812304:	e9 27 02 00 00       	jmp    ffff800000812530 <FAT32_readdir+0x757>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:367
		}

		name = kmallocat(0,TO_MPGN(15));
ffff800000812309:	be 01 00 00 00       	mov    esi,0x1
ffff80000081230e:	bf 00 00 00 00       	mov    edi,0x0
ffff800000812313:	49 89 df             	mov    r15,rbx
ffff800000812316:	48 b8 5a f7 ed ff ff 	movabs rax,0xffffffffffedf75a
ffff80000081231d:	ff ff ff 
ffff800000812320:	48 01 d8             	add    rax,rbx
ffff800000812323:	ff d0                	call   rax
ffff800000812325:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:368
		memset(name,0,15);
ffff800000812329:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000081232d:	ba 0f 00 00 00       	mov    edx,0xf
ffff800000812332:	be 00 00 00 00       	mov    esi,0x0
ffff800000812337:	48 89 c7             	mov    rdi,rax
ffff80000081233a:	49 89 df             	mov    r15,rbx
ffff80000081233d:	48 b8 89 1e ef ff ff 	movabs rax,0xffffffffffef1e89
ffff800000812344:	ff ff ff 
ffff800000812347:	48 01 d8             	add    rax,rbx
ffff80000081234a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:370
		//short file/dir base name compare
		for(x=0;x<8;x++)
ffff80000081234c:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
ffff800000812353:	eb 74                	jmp    ffff8000008123c9 <FAT32_readdir+0x5f0>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:372
		{
			if(tmpdentry->DIR_Name[x] == ' ')
ffff800000812355:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000812359:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff80000081235c:	48 98                	cdqe   
ffff80000081235e:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000812362:	3c 20                	cmp    al,0x20
ffff800000812364:	74 6b                	je     ffff8000008123d1 <FAT32_readdir+0x5f8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:374
				break;
			if(tmpdentry->DIR_NTRes & LOWERCASE_BASE)
ffff800000812366:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000081236a:	0f b6 40 0c          	movzx  eax,BYTE PTR [rax+0xc]
ffff80000081236e:	0f b6 c0             	movzx  eax,al
ffff800000812371:	83 e0 08             	and    eax,0x8
ffff800000812374:	85 c0                	test   eax,eax
ffff800000812376:	74 29                	je     ffff8000008123a1 <FAT32_readdir+0x5c8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:375
				name[namelen++] = tmpdentry->DIR_Name[x] + 32;
ffff800000812378:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff80000081237c:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff80000081237f:	48 98                	cdqe   
ffff800000812381:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000812385:	8d 48 20             	lea    ecx,[rax+0x20]
ffff800000812388:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000081238b:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000081238e:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff800000812391:	48 63 d0             	movsxd rdx,eax
ffff800000812394:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000812398:	48 01 d0             	add    rax,rdx
ffff80000081239b:	89 ca                	mov    edx,ecx
ffff80000081239d:	88 10                	mov    BYTE PTR [rax],dl
ffff80000081239f:	eb 24                	jmp    ffff8000008123c5 <FAT32_readdir+0x5ec>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:377
			else
				name[namelen++] = tmpdentry->DIR_Name[x];
ffff8000008123a1:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff8000008123a5:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff8000008123a8:	48 98                	cdqe   
ffff8000008123aa:	0f b6 0c 02          	movzx  ecx,BYTE PTR [rdx+rax*1]
ffff8000008123ae:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008123b1:	8d 50 01             	lea    edx,[rax+0x1]
ffff8000008123b4:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff8000008123b7:	48 63 d0             	movsxd rdx,eax
ffff8000008123ba:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008123be:	48 01 d0             	add    rax,rdx
ffff8000008123c1:	89 ca                	mov    edx,ecx
ffff8000008123c3:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:370 (discriminator 2)
		for(x=0;x<8;x++)
ffff8000008123c5:	83 45 d0 01          	add    DWORD PTR [rbp-0x30],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:370 (discriminator 1)
ffff8000008123c9:	83 7d d0 07          	cmp    DWORD PTR [rbp-0x30],0x7
ffff8000008123cd:	7e 86                	jle    ffff800000812355 <FAT32_readdir+0x57c>
ffff8000008123cf:	eb 01                	jmp    ffff8000008123d2 <FAT32_readdir+0x5f9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:373
				break;
ffff8000008123d1:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:380
		}

		if(tmpdentry->DIR_Attr & ATTR_DIRECTORY)
ffff8000008123d2:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008123d6:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff8000008123da:	0f b6 c0             	movzx  eax,al
ffff8000008123dd:	83 e0 10             	and    eax,0x10
ffff8000008123e0:	85 c0                	test   eax,eax
ffff8000008123e2:	0f 85 44 01 00 00    	jne    ffff80000081252c <FAT32_readdir+0x753>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:383
			goto find_lookup_success;

		name[namelen++] = '.';
ffff8000008123e8:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff8000008123eb:	8d 50 01             	lea    edx,[rax+0x1]
ffff8000008123ee:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff8000008123f1:	48 63 d0             	movsxd rdx,eax
ffff8000008123f4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008123f8:	48 01 d0             	add    rax,rdx
ffff8000008123fb:	c6 00 2e             	mov    BYTE PTR [rax],0x2e
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:386

		//short file ext name compare
		for(x=8;x<11;x++)
ffff8000008123fe:	c7 45 d0 08 00 00 00 	mov    DWORD PTR [rbp-0x30],0x8
ffff800000812405:	eb 74                	jmp    ffff80000081247b <FAT32_readdir+0x6a2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:388
		{
			if(tmpdentry->DIR_Name[x] == ' ')
ffff800000812407:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff80000081240b:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff80000081240e:	48 98                	cdqe   
ffff800000812410:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000812414:	3c 20                	cmp    al,0x20
ffff800000812416:	74 6b                	je     ffff800000812483 <FAT32_readdir+0x6aa>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:390
				break;
			if(tmpdentry->DIR_NTRes & LOWERCASE_EXT)
ffff800000812418:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000081241c:	0f b6 40 0c          	movzx  eax,BYTE PTR [rax+0xc]
ffff800000812420:	0f b6 c0             	movzx  eax,al
ffff800000812423:	83 e0 10             	and    eax,0x10
ffff800000812426:	85 c0                	test   eax,eax
ffff800000812428:	74 29                	je     ffff800000812453 <FAT32_readdir+0x67a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:391
				name[namelen++] = tmpdentry->DIR_Name[x] + 32;
ffff80000081242a:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff80000081242e:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff800000812431:	48 98                	cdqe   
ffff800000812433:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000812437:	8d 48 20             	lea    ecx,[rax+0x20]
ffff80000081243a:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff80000081243d:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000812440:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff800000812443:	48 63 d0             	movsxd rdx,eax
ffff800000812446:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000081244a:	48 01 d0             	add    rax,rdx
ffff80000081244d:	89 ca                	mov    edx,ecx
ffff80000081244f:	88 10                	mov    BYTE PTR [rax],dl
ffff800000812451:	eb 24                	jmp    ffff800000812477 <FAT32_readdir+0x69e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:393
			else
				name[namelen++] = tmpdentry->DIR_Name[x];
ffff800000812453:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff800000812457:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
ffff80000081245a:	48 98                	cdqe   
ffff80000081245c:	0f b6 0c 02          	movzx  ecx,BYTE PTR [rdx+rax*1]
ffff800000812460:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000812463:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000812466:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffff800000812469:	48 63 d0             	movsxd rdx,eax
ffff80000081246c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000812470:	48 01 d0             	add    rax,rdx
ffff800000812473:	89 ca                	mov    edx,ecx
ffff800000812475:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:386 (discriminator 2)
		for(x=8;x<11;x++)
ffff800000812477:	83 45 d0 01          	add    DWORD PTR [rbp-0x30],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:386 (discriminator 1)
ffff80000081247b:	83 7d d0 0a          	cmp    DWORD PTR [rbp-0x30],0xa
ffff80000081247f:	7e 86                	jle    ffff800000812407 <FAT32_readdir+0x62e>
ffff800000812481:	eb 01                	jmp    ffff800000812484 <FAT32_readdir+0x6ab>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:389
				break;
ffff800000812483:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:395
		}
		if(x == 8)
ffff800000812484:	83 7d d0 08          	cmp    DWORD PTR [rbp-0x30],0x8
ffff800000812488:	0f 85 a1 00 00 00    	jne    ffff80000081252f <FAT32_readdir+0x756>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:396
			name[--namelen] = 0;
ffff80000081248e:	83 6d dc 01          	sub    DWORD PTR [rbp-0x24],0x1
ffff800000812492:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000812495:	48 63 d0             	movsxd rdx,eax
ffff800000812498:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000081249c:	48 01 d0             	add    rax,rdx
ffff80000081249f:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:397
		goto find_lookup_success;
ffff8000008124a2:	e9 88 00 00 00       	jmp    ffff80000081252f <FAT32_readdir+0x756>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:327
			continue;
ffff8000008124a7:	90                   	nop
ffff8000008124a8:	eb 01                	jmp    ffff8000008124ab <FAT32_readdir+0x6d2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:329
			continue;
ffff8000008124aa:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:324 (discriminator 2)
	for(i = filp->position%fsbi->bytes_per_cluster;i < fsbi->bytes_per_cluster;i += 32,tmpdentry++,filp->position += 32)
ffff8000008124ab:	83 45 d8 20          	add    DWORD PTR [rbp-0x28],0x20
ffff8000008124af:	48 83 45 c0 20       	add    QWORD PTR [rbp-0x40],0x20
ffff8000008124b4:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff8000008124b8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008124bb:	48 8d 50 20          	lea    rdx,[rax+0x20]
ffff8000008124bf:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff8000008124c3:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:324 (discriminator 1)
ffff8000008124c6:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff8000008124c9:	48 63 d0             	movsxd rdx,eax
ffff8000008124cc:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008124d0:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff8000008124d4:	48 39 c2             	cmp    rdx,rax
ffff8000008124d7:	0f 8c 7d fb ff ff    	jl     ffff80000081205a <FAT32_readdir+0x281>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:400
	}
	
	cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff8000008124dd:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff8000008124e0:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff8000008124e4:	89 d6                	mov    esi,edx
ffff8000008124e6:	48 89 c7             	mov    rdi,rax
ffff8000008124e9:	49 89 df             	mov    r15,rbx
ffff8000008124ec:	48 b8 32 e3 ee ff ff 	movabs rax,0xffffffffffeee332
ffff8000008124f3:	ff ff ff 
ffff8000008124f6:	48 01 d8             	add    rax,rbx
ffff8000008124f9:	ff d0                	call   rax
ffff8000008124fb:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:401
	if(cluster < 0x0ffffff7)
ffff8000008124fe:	81 7d ec f6 ff ff 0f 	cmp    DWORD PTR [rbp-0x14],0xffffff6
ffff800000812505:	77 05                	ja     ffff80000081250c <FAT32_readdir+0x733>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:402
		goto next_cluster;
ffff800000812507:	e9 4d fa ff ff       	jmp    ffff800000811f59 <FAT32_readdir+0x180>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:404

    kmfree(buf);
ffff80000081250c:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000812510:	48 89 c7             	mov    rdi,rax
ffff800000812513:	49 89 df             	mov    r15,rbx
ffff800000812516:	48 b8 6f 09 ee ff ff 	movabs rax,0xffffffffffee096f
ffff80000081251d:	ff ff ff 
ffff800000812520:	48 01 d8             	add    rax,rbx
ffff800000812523:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:405
	return NULL;
ffff800000812525:	b8 00 00 00 00       	mov    eax,0x0
ffff80000081252a:	eb 3e                	jmp    ffff80000081256a <FAT32_readdir+0x791>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:381
			goto find_lookup_success;
ffff80000081252c:	90                   	nop
ffff80000081252d:	eb 01                	jmp    ffff800000812530 <FAT32_readdir+0x757>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:397
		goto find_lookup_success;
ffff80000081252f:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:409

find_lookup_success:

	filp->position += 32;
ffff800000812530:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff800000812534:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000812537:	48 8d 50 20          	lea    rdx,[rax+0x20]
ffff80000081253b:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffff80000081253f:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:410
	return filler(dirent,name,namelen,0,0);
ffff800000812542:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffff800000812545:	48 63 d0             	movsxd rdx,eax
ffff800000812548:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffff80000081254c:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffff800000812550:	4c 8b 8d 78 ff ff ff 	mov    r9,QWORD PTR [rbp-0x88]
ffff800000812557:	41 b8 00 00 00 00    	mov    r8d,0x0
ffff80000081255d:	b9 00 00 00 00       	mov    ecx,0x0
ffff800000812562:	48 89 c7             	mov    rdi,rax
ffff800000812565:	41 ff d1             	call   r9
ffff800000812568:	48 98                	cdqe   
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:411
}
ffff80000081256a:	48 83 ec 80          	sub    rsp,0xffffffffffffff80
ffff80000081256e:	5b                   	pop    rbx
ffff80000081256f:	41 5f                	pop    r15
ffff800000812571:	5d                   	pop    rbp
ffff800000812572:	c3                   	ret    

ffff800000812573 <FAT32_create>:
FAT32_create():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:428
	.readdir = FAT32_readdir,
};


long FAT32_create(struct index_node * inode,struct dir_entry * dentry,int mode)
{}
ffff800000812573:	f3 0f 1e fa          	endbr64 
ffff800000812577:	55                   	push   rbp
ffff800000812578:	48 89 e5             	mov    rbp,rsp
ffff80000081257b:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000081257b <FAT32_create+0x8>
ffff800000812582:	49 bb 7d 06 11 00 00 	movabs r11,0x11067d
ffff800000812589:	00 00 00 
ffff80000081258c:	4c 01 d8             	add    rax,r11
ffff80000081258f:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000812593:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000812597:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
ffff80000081259a:	90                   	nop
ffff80000081259b:	5d                   	pop    rbp
ffff80000081259c:	c3                   	ret    

ffff80000081259d <FAT32_lookup>:
FAT32_lookup():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:432


struct dir_entry * FAT32_lookup(struct index_node * parent_inode,struct dir_entry * dest_dentry)
{
ffff80000081259d:	f3 0f 1e fa          	endbr64 
ffff8000008125a1:	55                   	push   rbp
ffff8000008125a2:	48 89 e5             	mov    rbp,rsp
ffff8000008125a5:	41 57                	push   r15
ffff8000008125a7:	53                   	push   rbx
ffff8000008125a8:	48 83 ec 60          	sub    rsp,0x60
ffff8000008125ac:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008125ac <FAT32_lookup+0xf>
ffff8000008125b3:	49 bb 4c 06 11 00 00 	movabs r11,0x11064c
ffff8000008125ba:	00 00 00 
ffff8000008125bd:	4c 01 db             	add    rbx,r11
ffff8000008125c0:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
ffff8000008125c4:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:433
	struct FAT32_inode_info * finode = parent_inode->private_index_info;
ffff8000008125c8:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008125cc:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff8000008125d0:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:434
	struct FAT32_sb_info * fsbi = parent_inode->sb->private_sb_info;
ffff8000008125d4:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008125d8:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff8000008125dc:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff8000008125e0:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:436

	unsigned int cluster = 0;
ffff8000008125e4:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:437
	unsigned long sector = 0;
ffff8000008125eb:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffff8000008125f2:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:438
	unsigned char * buf =NULL; 
ffff8000008125f3:	48 c7 45 b0 00 00 00 	mov    QWORD PTR [rbp-0x50],0x0
ffff8000008125fa:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:439
	int i = 0,j = 0,x = 0;
ffff8000008125fb:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff800000812602:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
ffff800000812609:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:440
	struct FAT32_Directory * tmpdentry = NULL;
ffff800000812610:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff800000812617:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:441
	struct FAT32_LongDirectory * tmpldentry = NULL;
ffff800000812618:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff80000081261f:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:442
	struct index_node * p = NULL;
ffff800000812620:	48 c7 45 a8 00 00 00 	mov    QWORD PTR [rbp-0x58],0x0
ffff800000812627:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:444

	buf = kmallocat(0,TO_MPGN(fsbi->bytes_per_cluster));
ffff800000812628:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff80000081262c:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000812630:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff800000812636:	48 8d 90 ff 0f 00 00 	lea    rdx,[rax+0xfff]
ffff80000081263d:	48 85 c0             	test   rax,rax
ffff800000812640:	48 0f 48 c2          	cmovs  rax,rdx
ffff800000812644:	48 c1 f8 0c          	sar    rax,0xc
ffff800000812648:	89 c6                	mov    esi,eax
ffff80000081264a:	bf 00 00 00 00       	mov    edi,0x0
ffff80000081264f:	49 89 df             	mov    r15,rbx
ffff800000812652:	48 b8 5a f7 ed ff ff 	movabs rax,0xffffffffffedf75a
ffff800000812659:	ff ff ff 
ffff80000081265c:	48 01 d8             	add    rax,rbx
ffff80000081265f:	ff d0                	call   rax
ffff800000812661:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:446

	cluster = finode->first_cluster;
ffff800000812665:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000812669:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000081266c:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:449

next_cluster:
	sector = fsbi->Data_firstsector + (cluster - 2) * fsbi->sector_per_cluster;
ffff80000081266f:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000812673:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
ffff800000812677:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000081267a:	83 e8 02             	sub    eax,0x2
ffff80000081267d:	89 c1                	mov    ecx,eax
ffff80000081267f:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000812683:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000812687:	48 0f af c1          	imul   rax,rcx
ffff80000081268b:	48 01 d0             	add    rax,rdx
ffff80000081268e:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:450
	printf("lookup cluster:0x%x,sector:0x%x\r\n",cluster,sector);
ffff800000812692:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff800000812696:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000812699:	89 c6                	mov    esi,eax
ffff80000081269b:	48 b8 48 d9 ff ff ff 	movabs rax,0xffffffffffffd948
ffff8000008126a2:	ff ff ff 
ffff8000008126a5:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff8000008126a9:	48 89 c7             	mov    rdi,rax
ffff8000008126ac:	49 89 df             	mov    r15,rbx
ffff8000008126af:	b8 00 00 00 00       	mov    eax,0x0
ffff8000008126b4:	48 b9 c9 ed ed ff ff 	movabs rcx,0xffffffffffededc9
ffff8000008126bb:	ff ff ff 
ffff8000008126be:	48 01 d9             	add    rcx,rbx
ffff8000008126c1:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:451
    if(blkdev_read(parent_inode->dev,sector*SECTOR_SIZE,fsbi->sector_per_cluster*SECTOR_SIZE,buf)<0)
ffff8000008126c3:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008126c7:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008126cb:	48 c1 e0 09          	shl    rax,0x9
ffff8000008126cf:	48 89 c7             	mov    rdi,rax
ffff8000008126d2:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008126d6:	48 c1 e0 09          	shl    rax,0x9
ffff8000008126da:	48 89 c6             	mov    rsi,rax
ffff8000008126dd:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff8000008126e1:	0f b7 40 18          	movzx  eax,WORD PTR [rax+0x18]
ffff8000008126e5:	0f b7 c0             	movzx  eax,ax
ffff8000008126e8:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffff8000008126ec:	48 89 d1             	mov    rcx,rdx
ffff8000008126ef:	48 89 fa             	mov    rdx,rdi
ffff8000008126f2:	89 c7                	mov    edi,eax
ffff8000008126f4:	49 89 df             	mov    r15,rbx
ffff8000008126f7:	48 b8 34 cc ee ff ff 	movabs rax,0xffffffffffeecc34
ffff8000008126fe:	ff ff ff 
ffff800000812701:	48 01 d8             	add    rax,rbx
ffff800000812704:	ff d0                	call   rax
ffff800000812706:	85 c0                	test   eax,eax
ffff800000812708:	79 4b                	jns    ffff800000812755 <FAT32_lookup+0x1b8>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:453
	{
		printf("FAT32 FS(lookup) read disk ERROR!!!!!!!!!!\n");
ffff80000081270a:	48 b8 70 d9 ff ff ff 	movabs rax,0xffffffffffffd970
ffff800000812711:	ff ff ff 
ffff800000812714:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000812718:	48 89 c7             	mov    rdi,rax
ffff80000081271b:	49 89 df             	mov    r15,rbx
ffff80000081271e:	b8 00 00 00 00       	mov    eax,0x0
ffff800000812723:	48 ba c9 ed ed ff ff 	movabs rdx,0xffffffffffededc9
ffff80000081272a:	ff ff ff 
ffff80000081272d:	48 01 da             	add    rdx,rbx
ffff800000812730:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:454
        kmfree(buf);
ffff800000812732:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000812736:	48 89 c7             	mov    rdi,rax
ffff800000812739:	49 89 df             	mov    r15,rbx
ffff80000081273c:	48 b8 6f 09 ee ff ff 	movabs rax,0xffffffffffee096f
ffff800000812743:	ff ff ff 
ffff800000812746:	48 01 d8             	add    rax,rbx
ffff800000812749:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:455
		return NULL;
ffff80000081274b:	b8 00 00 00 00       	mov    eax,0x0
ffff800000812750:	e9 60 08 00 00       	jmp    ffff800000812fb5 <FAT32_lookup+0xa18>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:458
	}

	tmpdentry = (struct FAT32_Directory *)buf;
ffff800000812755:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000812759:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:460

	for(i = 0;i < fsbi->bytes_per_cluster;i+= 32,tmpdentry++)
ffff80000081275d:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
ffff800000812764:	e9 9d 05 00 00       	jmp    ffff800000812d06 <FAT32_lookup+0x769>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:462
	{
		if(tmpdentry->DIR_Attr == ATTR_LONG_NAME)
ffff800000812769:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081276d:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff800000812771:	3c 0f                	cmp    al,0xf
ffff800000812773:	0f 84 59 05 00 00    	je     ffff800000812cd2 <FAT32_lookup+0x735>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:464
			continue;
		if(tmpdentry->DIR_Name[0] == 0xe5 || tmpdentry->DIR_Name[0] == 0x00 || tmpdentry->DIR_Name[0] == 0x05)
ffff800000812779:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081277d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812780:	3c e5                	cmp    al,0xe5
ffff800000812782:	0f 84 4d 05 00 00    	je     ffff800000812cd5 <FAT32_lookup+0x738>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:464 (discriminator 2)
ffff800000812788:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081278c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081278f:	84 c0                	test   al,al
ffff800000812791:	0f 84 3e 05 00 00    	je     ffff800000812cd5 <FAT32_lookup+0x738>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:464 (discriminator 4)
ffff800000812797:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081279b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081279e:	3c 05                	cmp    al,0x5
ffff8000008127a0:	0f 84 2f 05 00 00    	je     ffff800000812cd5 <FAT32_lookup+0x738>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:467
			continue;

		tmpldentry = (struct FAT32_LongDirectory *)tmpdentry-1;
ffff8000008127a6:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008127aa:	48 83 e8 20          	sub    rax,0x20
ffff8000008127ae:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:468
		j = 0;
ffff8000008127b2:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:471

		//long file/dir name compare
		while(tmpldentry->LDIR_Attr == ATTR_LONG_NAME && tmpldentry->LDIR_Ord != 0xe5)
ffff8000008127b9:	e9 88 01 00 00       	jmp    ffff800000812946 <FAT32_lookup+0x3a9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:473
		{
			for(x=0;x<5;x++)
ffff8000008127be:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff8000008127c5:	eb 6a                	jmp    ffff800000812831 <FAT32_lookup+0x294>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:475
			{
				if(j>dest_dentry->name_length && tmpldentry->LDIR_Name1[x] == 0xffff)
ffff8000008127c7:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008127cb:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff8000008127ce:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff8000008127d1:	7e 15                	jle    ffff8000008127e8 <FAT32_lookup+0x24b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:475 (discriminator 1)
ffff8000008127d3:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008127d7:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff8000008127da:	48 63 d2             	movsxd rdx,edx
ffff8000008127dd:	0f b7 44 50 01       	movzx  eax,WORD PTR [rax+rdx*2+0x1]
ffff8000008127e2:	66 83 f8 ff          	cmp    ax,0xffff
ffff8000008127e6:	74 44                	je     ffff80000081282c <FAT32_lookup+0x28f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:477
					continue;
				else if(j>dest_dentry->name_length || tmpldentry->LDIR_Name1[x] != (unsigned short)(dest_dentry->name[j++]))
ffff8000008127e8:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008127ec:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff8000008127ef:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff8000008127f2:	0f 8f e0 04 00 00    	jg     ffff800000812cd8 <FAT32_lookup+0x73b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:477 (discriminator 1)
ffff8000008127f8:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008127fc:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff8000008127ff:	48 63 d2             	movsxd rdx,edx
ffff800000812802:	0f b7 4c 50 01       	movzx  ecx,WORD PTR [rax+rdx*2+0x1]
ffff800000812807:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff80000081280b:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff80000081280e:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000812811:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000812814:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
ffff800000812817:	48 98                	cdqe   
ffff800000812819:	48 01 f0             	add    rax,rsi
ffff80000081281c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081281f:	66 98                	cbw    
ffff800000812821:	66 39 c1             	cmp    cx,ax
ffff800000812824:	0f 85 ae 04 00 00    	jne    ffff800000812cd8 <FAT32_lookup+0x73b>
ffff80000081282a:	eb 01                	jmp    ffff80000081282d <FAT32_lookup+0x290>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:476
					continue;
ffff80000081282c:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:473 (discriminator 2)
			for(x=0;x<5;x++)
ffff80000081282d:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:473 (discriminator 1)
ffff800000812831:	83 7d e0 04          	cmp    DWORD PTR [rbp-0x20],0x4
ffff800000812835:	7e 90                	jle    ffff8000008127c7 <FAT32_lookup+0x22a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:480
					goto continue_cmp_fail;
			}
			for(x=0;x<6;x++)
ffff800000812837:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff80000081283e:	eb 6a                	jmp    ffff8000008128aa <FAT32_lookup+0x30d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:482
			{
				if(j>dest_dentry->name_length && tmpldentry->LDIR_Name2[x] == 0xffff)
ffff800000812840:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000812844:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000812847:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff80000081284a:	7e 15                	jle    ffff800000812861 <FAT32_lookup+0x2c4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:482 (discriminator 1)
ffff80000081284c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000812850:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff800000812853:	48 63 d2             	movsxd rdx,edx
ffff800000812856:	0f b7 44 50 0e       	movzx  eax,WORD PTR [rax+rdx*2+0xe]
ffff80000081285b:	66 83 f8 ff          	cmp    ax,0xffff
ffff80000081285f:	74 44                	je     ffff8000008128a5 <FAT32_lookup+0x308>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:484
					continue;
				else if(j>dest_dentry->name_length || tmpldentry->LDIR_Name2[x] != (unsigned short)(dest_dentry->name[j++]))
ffff800000812861:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000812865:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000812868:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff80000081286b:	0f 8f 6a 04 00 00    	jg     ffff800000812cdb <FAT32_lookup+0x73e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:484 (discriminator 1)
ffff800000812871:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000812875:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff800000812878:	48 63 d2             	movsxd rdx,edx
ffff80000081287b:	0f b7 4c 50 0e       	movzx  ecx,WORD PTR [rax+rdx*2+0xe]
ffff800000812880:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000812884:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff800000812887:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000081288a:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000081288d:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
ffff800000812890:	48 98                	cdqe   
ffff800000812892:	48 01 f0             	add    rax,rsi
ffff800000812895:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812898:	66 98                	cbw    
ffff80000081289a:	66 39 c1             	cmp    cx,ax
ffff80000081289d:	0f 85 38 04 00 00    	jne    ffff800000812cdb <FAT32_lookup+0x73e>
ffff8000008128a3:	eb 01                	jmp    ffff8000008128a6 <FAT32_lookup+0x309>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:483
					continue;
ffff8000008128a5:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:480 (discriminator 2)
			for(x=0;x<6;x++)
ffff8000008128a6:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:480 (discriminator 1)
ffff8000008128aa:	83 7d e0 05          	cmp    DWORD PTR [rbp-0x20],0x5
ffff8000008128ae:	7e 90                	jle    ffff800000812840 <FAT32_lookup+0x2a3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:487
					goto continue_cmp_fail;
			}
			for(x=0;x<2;x++)
ffff8000008128b0:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff8000008128b7:	eb 72                	jmp    ffff80000081292b <FAT32_lookup+0x38e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:489
			{
				if(j>dest_dentry->name_length && tmpldentry->LDIR_Name3[x] == 0xffff)
ffff8000008128b9:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008128bd:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff8000008128c0:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff8000008128c3:	7e 19                	jle    ffff8000008128de <FAT32_lookup+0x341>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:489 (discriminator 1)
ffff8000008128c5:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008128c9:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff8000008128cc:	48 63 d2             	movsxd rdx,edx
ffff8000008128cf:	48 83 c2 08          	add    rdx,0x8
ffff8000008128d3:	0f b7 44 50 0c       	movzx  eax,WORD PTR [rax+rdx*2+0xc]
ffff8000008128d8:	66 83 f8 ff          	cmp    ax,0xffff
ffff8000008128dc:	74 48                	je     ffff800000812926 <FAT32_lookup+0x389>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:491
					continue;
				else if(j>dest_dentry->name_length || tmpldentry->LDIR_Name3[x] != (unsigned short)(dest_dentry->name[j++]))
ffff8000008128de:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008128e2:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff8000008128e5:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff8000008128e8:	0f 8f f0 03 00 00    	jg     ffff800000812cde <FAT32_lookup+0x741>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:491 (discriminator 1)
ffff8000008128ee:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008128f2:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffff8000008128f5:	48 63 d2             	movsxd rdx,edx
ffff8000008128f8:	48 83 c2 08          	add    rdx,0x8
ffff8000008128fc:	0f b7 4c 50 0c       	movzx  ecx,WORD PTR [rax+rdx*2+0xc]
ffff800000812901:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000812905:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffff800000812908:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff80000081290b:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000081290e:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
ffff800000812911:	48 98                	cdqe   
ffff800000812913:	48 01 f0             	add    rax,rsi
ffff800000812916:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812919:	66 98                	cbw    
ffff80000081291b:	66 39 c1             	cmp    cx,ax
ffff80000081291e:	0f 85 ba 03 00 00    	jne    ffff800000812cde <FAT32_lookup+0x741>
ffff800000812924:	eb 01                	jmp    ffff800000812927 <FAT32_lookup+0x38a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:490
					continue;
ffff800000812926:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:487 (discriminator 2)
			for(x=0;x<2;x++)
ffff800000812927:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:487 (discriminator 1)
ffff80000081292b:	83 7d e0 01          	cmp    DWORD PTR [rbp-0x20],0x1
ffff80000081292f:	7e 88                	jle    ffff8000008128b9 <FAT32_lookup+0x31c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:495
					goto continue_cmp_fail;
			}

			if(j >= dest_dentry->name_length)
ffff800000812931:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000812935:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000812938:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff80000081293b:	0f 8d 2e 04 00 00    	jge    ffff800000812d6f <FAT32_lookup+0x7d2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:500
			{
				goto find_lookup_success;
			}

			tmpldentry --;
ffff800000812941:	48 83 6d d0 20       	sub    QWORD PTR [rbp-0x30],0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:471
		while(tmpldentry->LDIR_Attr == ATTR_LONG_NAME && tmpldentry->LDIR_Ord != 0xe5)
ffff800000812946:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081294a:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff80000081294e:	3c 0f                	cmp    al,0xf
ffff800000812950:	75 0f                	jne    ffff800000812961 <FAT32_lookup+0x3c4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:471 (discriminator 1)
ffff800000812952:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000812956:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812959:	3c e5                	cmp    al,0xe5
ffff80000081295b:	0f 85 5d fe ff ff    	jne    ffff8000008127be <FAT32_lookup+0x221>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:504
		}

		//short file/dir base name compare
		j = 0;
ffff800000812961:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:505
		for(x=0;x<8;x++)
ffff800000812968:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [rbp-0x20],0x0
ffff80000081296f:	e9 f4 01 00 00       	jmp    ffff800000812b68 <FAT32_lookup+0x5cb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:507
		{
			switch(tmpdentry->DIR_Name[x])
ffff800000812974:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000812978:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff80000081297b:	48 98                	cdqe   
ffff80000081297d:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000812981:	0f b6 c0             	movzx  eax,al
ffff800000812984:	83 f8 7a             	cmp    eax,0x7a
ffff800000812987:	0f 8f d0 01 00 00    	jg     ffff800000812b5d <FAT32_lookup+0x5c0>
ffff80000081298d:	83 f8 61             	cmp    eax,0x61
ffff800000812990:	0f 8d e6 00 00 00    	jge    ffff800000812a7c <FAT32_lookup+0x4df>
ffff800000812996:	83 f8 5a             	cmp    eax,0x5a
ffff800000812999:	0f 8f be 01 00 00    	jg     ffff800000812b5d <FAT32_lookup+0x5c0>
ffff80000081299f:	83 f8 41             	cmp    eax,0x41
ffff8000008129a2:	0f 8d d4 00 00 00    	jge    ffff800000812a7c <FAT32_lookup+0x4df>
ffff8000008129a8:	83 f8 20             	cmp    eax,0x20
ffff8000008129ab:	74 1a                	je     ffff8000008129c7 <FAT32_lookup+0x42a>
ffff8000008129ad:	83 f8 20             	cmp    eax,0x20
ffff8000008129b0:	0f 8c a7 01 00 00    	jl     ffff800000812b5d <FAT32_lookup+0x5c0>
ffff8000008129b6:	83 e8 30             	sub    eax,0x30
ffff8000008129b9:	83 f8 09             	cmp    eax,0x9
ffff8000008129bc:	0f 87 9b 01 00 00    	ja     ffff800000812b5d <FAT32_lookup+0x5c0>
ffff8000008129c2:	e9 53 01 00 00       	jmp    ffff800000812b1a <FAT32_lookup+0x57d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:510
			{
				case ' ':
					if(!(tmpdentry->DIR_Attr & ATTR_DIRECTORY))
ffff8000008129c7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008129cb:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff8000008129cf:	0f b6 c0             	movzx  eax,al
ffff8000008129d2:	83 e0 10             	and    eax,0x10
ffff8000008129d5:	85 c0                	test   eax,eax
ffff8000008129d7:	75 50                	jne    ffff800000812a29 <FAT32_lookup+0x48c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:512
					{
						if(dest_dentry->name[j]=='.')
ffff8000008129d9:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff8000008129dd:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008129e0:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff8000008129e3:	48 98                	cdqe   
ffff8000008129e5:	48 01 d0             	add    rax,rdx
ffff8000008129e8:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008129eb:	3c 2e                	cmp    al,0x2e
ffff8000008129ed:	0f 84 70 01 00 00    	je     ffff800000812b63 <FAT32_lookup+0x5c6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:514
							continue;
						else if(tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff8000008129f3:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff8000008129f7:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff8000008129fa:	48 98                	cdqe   
ffff8000008129fc:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000812a00:	0f b6 d0             	movzx  edx,al
ffff800000812a03:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000812a07:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000812a0a:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000812a0d:	48 98                	cdqe   
ffff800000812a0f:	48 01 c8             	add    rax,rcx
ffff800000812a12:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812a15:	0f be c0             	movsx  eax,al
ffff800000812a18:	39 c2                	cmp    edx,eax
ffff800000812a1a:	0f 85 c1 02 00 00    	jne    ffff800000812ce1 <FAT32_lookup+0x744>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:516
						{
							j++;
ffff800000812a20:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:517
							break;
ffff800000812a24:	e9 3b 01 00 00       	jmp    ffff800000812b64 <FAT32_lookup+0x5c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:524
						else
							goto continue_cmp_fail;
					}
					else
					{
						if(j < dest_dentry->name_length && tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff800000812a29:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000812a2d:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000812a30:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000812a33:	7d 32                	jge    ffff800000812a67 <FAT32_lookup+0x4ca>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:524 (discriminator 1)
ffff800000812a35:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000812a39:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000812a3c:	48 98                	cdqe   
ffff800000812a3e:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000812a42:	0f b6 d0             	movzx  edx,al
ffff800000812a45:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000812a49:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000812a4c:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000812a4f:	48 98                	cdqe   
ffff800000812a51:	48 01 c8             	add    rax,rcx
ffff800000812a54:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812a57:	0f be c0             	movsx  eax,al
ffff800000812a5a:	39 c2                	cmp    edx,eax
ffff800000812a5c:	75 09                	jne    ffff800000812a67 <FAT32_lookup+0x4ca>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:526
						{
							j++;
ffff800000812a5e:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:527
							break;
ffff800000812a62:	e9 fd 00 00 00       	jmp    ffff800000812b64 <FAT32_lookup+0x5c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:529
						}
						else if(j == dest_dentry->name_length)
ffff800000812a67:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000812a6b:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000812a6e:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000812a71:	0f 85 6d 02 00 00    	jne    ffff800000812ce4 <FAT32_lookup+0x747>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:530
							continue;
ffff800000812a77:	e9 e8 00 00 00       	jmp    ffff800000812b64 <FAT32_lookup+0x5c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:537
							goto continue_cmp_fail;
					}

				case 'A' ... 'Z':
				case 'a' ... 'z':
					if(tmpdentry->DIR_NTRes & LOWERCASE_BASE)
ffff800000812a7c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812a80:	0f b6 40 0c          	movzx  eax,BYTE PTR [rax+0xc]
ffff800000812a84:	0f b6 c0             	movzx  eax,al
ffff800000812a87:	83 e0 08             	and    eax,0x8
ffff800000812a8a:	85 c0                	test   eax,eax
ffff800000812a8c:	74 49                	je     ffff800000812ad7 <FAT32_lookup+0x53a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:538
						if(j < dest_dentry->name_length && tmpdentry->DIR_Name[x] + 32 == dest_dentry->name[j])
ffff800000812a8e:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000812a92:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000812a95:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000812a98:	0f 8d 49 02 00 00    	jge    ffff800000812ce7 <FAT32_lookup+0x74a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:538 (discriminator 1)
ffff800000812a9e:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000812aa2:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000812aa5:	48 98                	cdqe   
ffff800000812aa7:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000812aab:	0f b6 c0             	movzx  eax,al
ffff800000812aae:	8d 50 20             	lea    edx,[rax+0x20]
ffff800000812ab1:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000812ab5:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000812ab8:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000812abb:	48 98                	cdqe   
ffff800000812abd:	48 01 c8             	add    rax,rcx
ffff800000812ac0:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812ac3:	0f be c0             	movsx  eax,al
ffff800000812ac6:	39 c2                	cmp    edx,eax
ffff800000812ac8:	0f 85 19 02 00 00    	jne    ffff800000812ce7 <FAT32_lookup+0x74a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:540
						{
							j++;
ffff800000812ace:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:541
							break;
ffff800000812ad2:	e9 8d 00 00 00       	jmp    ffff800000812b64 <FAT32_lookup+0x5c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:547
						}
						else
							goto continue_cmp_fail;
					else
					{
						if(j < dest_dentry->name_length && tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff800000812ad7:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000812adb:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000812ade:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000812ae1:	0f 8d 03 02 00 00    	jge    ffff800000812cea <FAT32_lookup+0x74d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:547 (discriminator 1)
ffff800000812ae7:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000812aeb:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000812aee:	48 98                	cdqe   
ffff800000812af0:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000812af4:	0f b6 d0             	movzx  edx,al
ffff800000812af7:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000812afb:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000812afe:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000812b01:	48 98                	cdqe   
ffff800000812b03:	48 01 c8             	add    rax,rcx
ffff800000812b06:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812b09:	0f be c0             	movsx  eax,al
ffff800000812b0c:	39 c2                	cmp    edx,eax
ffff800000812b0e:	0f 85 d6 01 00 00    	jne    ffff800000812cea <FAT32_lookup+0x74d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:549
						{
							j++;
ffff800000812b14:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:550
							break;
ffff800000812b18:	eb 4a                	jmp    ffff800000812b64 <FAT32_lookup+0x5c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:557
						else
							goto continue_cmp_fail;
					}

				case '0' ... '9':
					if(j < dest_dentry->name_length && tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff800000812b1a:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000812b1e:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000812b21:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
ffff800000812b24:	0f 8d c3 01 00 00    	jge    ffff800000812ced <FAT32_lookup+0x750>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:557 (discriminator 1)
ffff800000812b2a:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000812b2e:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000812b31:	48 98                	cdqe   
ffff800000812b33:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000812b37:	0f b6 d0             	movzx  edx,al
ffff800000812b3a:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000812b3e:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000812b41:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000812b44:	48 98                	cdqe   
ffff800000812b46:	48 01 c8             	add    rax,rcx
ffff800000812b49:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812b4c:	0f be c0             	movsx  eax,al
ffff800000812b4f:	39 c2                	cmp    edx,eax
ffff800000812b51:	0f 85 96 01 00 00    	jne    ffff800000812ced <FAT32_lookup+0x750>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:559
					{
						j++;
ffff800000812b57:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:560
						break;
ffff800000812b5b:	eb 07                	jmp    ffff800000812b64 <FAT32_lookup+0x5c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:566
					}
					else
						goto continue_cmp_fail;

				default :
					j++;
ffff800000812b5d:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:567
					break;
ffff800000812b61:	eb 01                	jmp    ffff800000812b64 <FAT32_lookup+0x5c7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:513
							continue;
ffff800000812b63:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:505 (discriminator 2)
		for(x=0;x<8;x++)
ffff800000812b64:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:505 (discriminator 1)
ffff800000812b68:	83 7d e0 07          	cmp    DWORD PTR [rbp-0x20],0x7
ffff800000812b6c:	0f 8e 02 fe ff ff    	jle    ffff800000812974 <FAT32_lookup+0x3d7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:571
			}
		}
		//short file ext name compare
		if(!(tmpdentry->DIR_Attr & ATTR_DIRECTORY))
ffff800000812b72:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812b76:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff800000812b7a:	0f b6 c0             	movzx  eax,al
ffff800000812b7d:	83 e0 10             	and    eax,0x10
ffff800000812b80:	85 c0                	test   eax,eax
ffff800000812b82:	0f 85 ea 01 00 00    	jne    ffff800000812d72 <FAT32_lookup+0x7d5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:573
		{
			j++;
ffff800000812b88:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:574
			for(x=8;x<11;x++)
ffff800000812b8c:	c7 45 e0 08 00 00 00 	mov    DWORD PTR [rbp-0x20],0x8
ffff800000812b93:	e9 2b 01 00 00       	jmp    ffff800000812cc3 <FAT32_lookup+0x726>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:576
			{
				switch(tmpdentry->DIR_Name[x])
ffff800000812b98:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000812b9c:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000812b9f:	48 98                	cdqe   
ffff800000812ba1:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000812ba5:	0f b6 c0             	movzx  eax,al
ffff800000812ba8:	83 f8 7a             	cmp    eax,0x7a
ffff800000812bab:	0f 8f 3f 01 00 00    	jg     ffff800000812cf0 <FAT32_lookup+0x753>
ffff800000812bb1:	83 f8 61             	cmp    eax,0x61
ffff800000812bb4:	7d 2e                	jge    ffff800000812be4 <FAT32_lookup+0x647>
ffff800000812bb6:	83 f8 5a             	cmp    eax,0x5a
ffff800000812bb9:	0f 8f 31 01 00 00    	jg     ffff800000812cf0 <FAT32_lookup+0x753>
ffff800000812bbf:	83 f8 41             	cmp    eax,0x41
ffff800000812bc2:	7d 20                	jge    ffff800000812be4 <FAT32_lookup+0x647>
ffff800000812bc4:	83 f8 20             	cmp    eax,0x20
ffff800000812bc7:	0f 84 c4 00 00 00    	je     ffff800000812c91 <FAT32_lookup+0x6f4>
ffff800000812bcd:	83 f8 20             	cmp    eax,0x20
ffff800000812bd0:	0f 8c 1a 01 00 00    	jl     ffff800000812cf0 <FAT32_lookup+0x753>
ffff800000812bd6:	83 e8 30             	sub    eax,0x30
ffff800000812bd9:	83 f8 09             	cmp    eax,0x9
ffff800000812bdc:	0f 87 0e 01 00 00    	ja     ffff800000812cf0 <FAT32_lookup+0x753>
ffff800000812be2:	eb 7e                	jmp    ffff800000812c62 <FAT32_lookup+0x6c5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:580
				{
					case 'A' ... 'Z':
					case 'a' ... 'z':
						if(tmpdentry->DIR_NTRes & LOWERCASE_EXT)
ffff800000812be4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812be8:	0f b6 40 0c          	movzx  eax,BYTE PTR [rax+0xc]
ffff800000812bec:	0f b6 c0             	movzx  eax,al
ffff800000812bef:	83 e0 10             	and    eax,0x10
ffff800000812bf2:	85 c0                	test   eax,eax
ffff800000812bf4:	74 39                	je     ffff800000812c2f <FAT32_lookup+0x692>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:581
							if(tmpdentry->DIR_Name[x] + 32 == dest_dentry->name[j])
ffff800000812bf6:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000812bfa:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000812bfd:	48 98                	cdqe   
ffff800000812bff:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000812c03:	0f b6 c0             	movzx  eax,al
ffff800000812c06:	8d 50 20             	lea    edx,[rax+0x20]
ffff800000812c09:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000812c0d:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000812c10:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000812c13:	48 98                	cdqe   
ffff800000812c15:	48 01 c8             	add    rax,rcx
ffff800000812c18:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812c1b:	0f be c0             	movsx  eax,al
ffff800000812c1e:	39 c2                	cmp    edx,eax
ffff800000812c20:	0f 85 cd 00 00 00    	jne    ffff800000812cf3 <FAT32_lookup+0x756>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:583
							{
								j++;
ffff800000812c26:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:584
								break;
ffff800000812c2a:	e9 90 00 00 00       	jmp    ffff800000812cbf <FAT32_lookup+0x722>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:590
							}
							else
								goto continue_cmp_fail;
						else
						{
							if(tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff800000812c2f:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000812c33:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000812c36:	48 98                	cdqe   
ffff800000812c38:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000812c3c:	0f b6 d0             	movzx  edx,al
ffff800000812c3f:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000812c43:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000812c46:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000812c49:	48 98                	cdqe   
ffff800000812c4b:	48 01 c8             	add    rax,rcx
ffff800000812c4e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812c51:	0f be c0             	movsx  eax,al
ffff800000812c54:	39 c2                	cmp    edx,eax
ffff800000812c56:	0f 85 9a 00 00 00    	jne    ffff800000812cf6 <FAT32_lookup+0x759>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:592
							{
								j++;
ffff800000812c5c:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:593
								break;
ffff800000812c60:	eb 5d                	jmp    ffff800000812cbf <FAT32_lookup+0x722>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:600
							else
								goto continue_cmp_fail;
						}

					case '0' ... '9':
						if(tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff800000812c62:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000812c66:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000812c69:	48 98                	cdqe   
ffff800000812c6b:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000812c6f:	0f b6 d0             	movzx  edx,al
ffff800000812c72:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000812c76:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000812c79:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000812c7c:	48 98                	cdqe   
ffff800000812c7e:	48 01 c8             	add    rax,rcx
ffff800000812c81:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812c84:	0f be c0             	movsx  eax,al
ffff800000812c87:	39 c2                	cmp    edx,eax
ffff800000812c89:	75 6e                	jne    ffff800000812cf9 <FAT32_lookup+0x75c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:602
						{
							j++;
ffff800000812c8b:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:603
							break;
ffff800000812c8f:	eb 2e                	jmp    ffff800000812cbf <FAT32_lookup+0x722>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:609
						}
						else
							goto continue_cmp_fail;

					case ' ':
						if(tmpdentry->DIR_Name[x] == dest_dentry->name[j])
ffff800000812c91:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffff800000812c95:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffff800000812c98:	48 98                	cdqe   
ffff800000812c9a:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000812c9e:	0f b6 d0             	movzx  edx,al
ffff800000812ca1:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000812ca5:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffff800000812ca8:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffff800000812cab:	48 98                	cdqe   
ffff800000812cad:	48 01 c8             	add    rax,rcx
ffff800000812cb0:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000812cb3:	0f be c0             	movsx  eax,al
ffff800000812cb6:	39 c2                	cmp    edx,eax
ffff800000812cb8:	75 42                	jne    ffff800000812cfc <FAT32_lookup+0x75f>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:611
						{
							j++;
ffff800000812cba:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:612
							break;
ffff800000812cbe:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:574 (discriminator 2)
			for(x=8;x<11;x++)
ffff800000812cbf:	83 45 e0 01          	add    DWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:574 (discriminator 1)
ffff800000812cc3:	83 7d e0 0a          	cmp    DWORD PTR [rbp-0x20],0xa
ffff800000812cc7:	0f 8e cb fe ff ff    	jle    ffff800000812b98 <FAT32_lookup+0x5fb>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:622
					default :
						goto continue_cmp_fail;
				}
			}
		}
		goto find_lookup_success;
ffff800000812ccd:	e9 a0 00 00 00       	jmp    ffff800000812d72 <FAT32_lookup+0x7d5>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:463
			continue;
ffff800000812cd2:	90                   	nop
ffff800000812cd3:	eb 28                	jmp    ffff800000812cfd <FAT32_lookup+0x760>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:465
			continue;
ffff800000812cd5:	90                   	nop
ffff800000812cd6:	eb 25                	jmp    ffff800000812cfd <FAT32_lookup+0x760>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:478
					goto continue_cmp_fail;
ffff800000812cd8:	90                   	nop
ffff800000812cd9:	eb 22                	jmp    ffff800000812cfd <FAT32_lookup+0x760>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:485
					goto continue_cmp_fail;
ffff800000812cdb:	90                   	nop
ffff800000812cdc:	eb 1f                	jmp    ffff800000812cfd <FAT32_lookup+0x760>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:492
					goto continue_cmp_fail;
ffff800000812cde:	90                   	nop
ffff800000812cdf:	eb 1c                	jmp    ffff800000812cfd <FAT32_lookup+0x760>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:520
							goto continue_cmp_fail;
ffff800000812ce1:	90                   	nop
ffff800000812ce2:	eb 19                	jmp    ffff800000812cfd <FAT32_lookup+0x760>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:532
							goto continue_cmp_fail;
ffff800000812ce4:	90                   	nop
ffff800000812ce5:	eb 16                	jmp    ffff800000812cfd <FAT32_lookup+0x760>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:544
							goto continue_cmp_fail;
ffff800000812ce7:	90                   	nop
ffff800000812ce8:	eb 13                	jmp    ffff800000812cfd <FAT32_lookup+0x760>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:553
							goto continue_cmp_fail;
ffff800000812cea:	90                   	nop
ffff800000812ceb:	eb 10                	jmp    ffff800000812cfd <FAT32_lookup+0x760>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:563
						goto continue_cmp_fail;
ffff800000812ced:	90                   	nop
ffff800000812cee:	eb 0d                	jmp    ffff800000812cfd <FAT32_lookup+0x760>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:618
						goto continue_cmp_fail;
ffff800000812cf0:	90                   	nop
ffff800000812cf1:	eb 0a                	jmp    ffff800000812cfd <FAT32_lookup+0x760>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:587
								goto continue_cmp_fail;
ffff800000812cf3:	90                   	nop
ffff800000812cf4:	eb 07                	jmp    ffff800000812cfd <FAT32_lookup+0x760>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:596
								goto continue_cmp_fail;
ffff800000812cf6:	90                   	nop
ffff800000812cf7:	eb 04                	jmp    ffff800000812cfd <FAT32_lookup+0x760>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:606
							goto continue_cmp_fail;
ffff800000812cf9:	90                   	nop
ffff800000812cfa:	eb 01                	jmp    ffff800000812cfd <FAT32_lookup+0x760>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:615
							goto continue_cmp_fail;
ffff800000812cfc:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:460 (discriminator 2)
	for(i = 0;i < fsbi->bytes_per_cluster;i+= 32,tmpdentry++)
ffff800000812cfd:	83 45 e8 20          	add    DWORD PTR [rbp-0x18],0x20
ffff800000812d01:	48 83 45 d8 20       	add    QWORD PTR [rbp-0x28],0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:460 (discriminator 1)
ffff800000812d06:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffff800000812d09:	48 63 d0             	movsxd rdx,eax
ffff800000812d0c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000812d10:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000812d14:	48 39 c2             	cmp    rdx,rax
ffff800000812d17:	0f 8c 4c fa ff ff    	jl     ffff800000812769 <FAT32_lookup+0x1cc>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:627

continue_cmp_fail:;
	}
	
	cluster = DISK1_FAT32_read_FAT_Entry(fsbi,cluster);
ffff800000812d1d:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000812d20:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000812d24:	89 d6                	mov    esi,edx
ffff800000812d26:	48 89 c7             	mov    rdi,rax
ffff800000812d29:	49 89 df             	mov    r15,rbx
ffff800000812d2c:	48 b8 32 e3 ee ff ff 	movabs rax,0xffffffffffeee332
ffff800000812d33:	ff ff ff 
ffff800000812d36:	48 01 d8             	add    rax,rbx
ffff800000812d39:	ff d0                	call   rax
ffff800000812d3b:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:628
	if(cluster < 0x0ffffff7)
ffff800000812d3e:	81 7d ec f6 ff ff 0f 	cmp    DWORD PTR [rbp-0x14],0xffffff6
ffff800000812d45:	77 05                	ja     ffff800000812d4c <FAT32_lookup+0x7af>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:629
		goto next_cluster;
ffff800000812d47:	e9 23 f9 ff ff       	jmp    ffff80000081266f <FAT32_lookup+0xd2>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:631

    kmfree(buf);
ffff800000812d4c:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000812d50:	48 89 c7             	mov    rdi,rax
ffff800000812d53:	49 89 df             	mov    r15,rbx
ffff800000812d56:	48 b8 6f 09 ee ff ff 	movabs rax,0xffffffffffee096f
ffff800000812d5d:	ff ff ff 
ffff800000812d60:	48 01 d8             	add    rax,rbx
ffff800000812d63:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:632
	return NULL;
ffff800000812d65:	b8 00 00 00 00       	mov    eax,0x0
ffff800000812d6a:	e9 46 02 00 00       	jmp    ffff800000812fb5 <FAT32_lookup+0xa18>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:497
				goto find_lookup_success;
ffff800000812d6f:	90                   	nop
ffff800000812d70:	eb 01                	jmp    ffff800000812d73 <FAT32_lookup+0x7d6>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:622
		goto find_lookup_success;
ffff800000812d72:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:635

find_lookup_success:
	p = (struct index_node *) kmallocat(0,TO_MPGN(sizeof(struct index_node)));
ffff800000812d73:	be 01 00 00 00       	mov    esi,0x1
ffff800000812d78:	bf 00 00 00 00       	mov    edi,0x0
ffff800000812d7d:	49 89 df             	mov    r15,rbx
ffff800000812d80:	48 b8 5a f7 ed ff ff 	movabs rax,0xffffffffffedf75a
ffff800000812d87:	ff ff ff 
ffff800000812d8a:	48 01 d8             	add    rax,rbx
ffff800000812d8d:	ff d0                	call   rax
ffff800000812d8f:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:636
	memset(p,0,sizeof(struct index_node));
ffff800000812d93:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000812d97:	ba 40 00 00 00       	mov    edx,0x40
ffff800000812d9c:	be 00 00 00 00       	mov    esi,0x0
ffff800000812da1:	48 89 c7             	mov    rdi,rax
ffff800000812da4:	49 89 df             	mov    r15,rbx
ffff800000812da7:	48 b8 89 1e ef ff ff 	movabs rax,0xffffffffffef1e89
ffff800000812dae:	ff ff ff 
ffff800000812db1:	48 01 d8             	add    rax,rbx
ffff800000812db4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:637
	p->file_size = tmpdentry->DIR_FileSize;
ffff800000812db6:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812dba:	8b 40 1c             	mov    eax,DWORD PTR [rax+0x1c]
ffff800000812dbd:	89 c2                	mov    edx,eax
ffff800000812dbf:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000812dc3:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:638
	p->blocks = (p->file_size + fsbi->bytes_per_cluster - 1)/fsbi->bytes_per_sector;
ffff800000812dc6:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000812dca:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000812dcd:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000812dd1:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000812dd5:	48 01 d0             	add    rax,rdx
ffff800000812dd8:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff800000812ddc:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000812de0:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000812de4:	48 89 c1             	mov    rcx,rax
ffff800000812de7:	48 89 d0             	mov    rax,rdx
ffff800000812dea:	ba 00 00 00 00       	mov    edx,0x0
ffff800000812def:	48 f7 f1             	div    rcx
ffff800000812df2:	48 89 c2             	mov    rdx,rax
ffff800000812df5:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000812df9:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:639
	p->attribute = (tmpdentry->DIR_Attr & ATTR_DIRECTORY) ? FS_ATTR_DIR : FS_ATTR_FILE;
ffff800000812dfd:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812e01:	0f b6 40 0b          	movzx  eax,BYTE PTR [rax+0xb]
ffff800000812e05:	0f b6 c0             	movzx  eax,al
ffff800000812e08:	83 e0 10             	and    eax,0x10
ffff800000812e0b:	85 c0                	test   eax,eax
ffff800000812e0d:	74 07                	je     ffff800000812e16 <FAT32_lookup+0x879>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:639 (discriminator 1)
ffff800000812e0f:	ba 02 00 00 00       	mov    edx,0x2
ffff800000812e14:	eb 05                	jmp    ffff800000812e1b <FAT32_lookup+0x87e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:639 (discriminator 2)
ffff800000812e16:	ba 01 00 00 00       	mov    edx,0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:639 (discriminator 4)
ffff800000812e1b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000812e1f:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:640 (discriminator 4)
	p->sb = parent_inode->sb;
ffff800000812e23:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffff800000812e27:	48 8b 50 20          	mov    rdx,QWORD PTR [rax+0x20]
ffff800000812e2b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000812e2f:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:641 (discriminator 4)
	p->f_ops = &FAT32_file_ops;
ffff800000812e33:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000812e37:	48 ba c0 fd ff ff ff 	movabs rdx,0xfffffffffffffdc0
ffff800000812e3e:	ff ff ff 
ffff800000812e41:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000812e45:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:642 (discriminator 4)
	p->inode_ops = &FAT32_inode_ops;
ffff800000812e49:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000812e4d:	48 ba 18 ff ff ff ff 	movabs rdx,0xffffffffffffff18
ffff800000812e54:	ff ff ff 
ffff800000812e57:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000812e5b:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:644 (discriminator 4)

	p->private_index_info = (struct FAT32_inode_info *) kmallocat(0,TO_MPGN(sizeof(struct FAT32_inode_info)));
ffff800000812e5f:	be 01 00 00 00       	mov    esi,0x1
ffff800000812e64:	bf 00 00 00 00       	mov    edi,0x0
ffff800000812e69:	49 89 df             	mov    r15,rbx
ffff800000812e6c:	48 b8 5a f7 ed ff ff 	movabs rax,0xffffffffffedf75a
ffff800000812e73:	ff ff ff 
ffff800000812e76:	48 01 d8             	add    rax,rbx
ffff800000812e79:	ff d0                	call   rax
ffff800000812e7b:	48 89 c2             	mov    rdx,rax
ffff800000812e7e:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000812e82:	48 89 50 38          	mov    QWORD PTR [rax+0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:645 (discriminator 4)
	memset(p->private_index_info,0,sizeof(struct FAT32_inode_info));
ffff800000812e86:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000812e8a:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff800000812e8e:	ba 20 00 00 00       	mov    edx,0x20
ffff800000812e93:	be 00 00 00 00       	mov    esi,0x0
ffff800000812e98:	48 89 c7             	mov    rdi,rax
ffff800000812e9b:	49 89 df             	mov    r15,rbx
ffff800000812e9e:	48 b8 89 1e ef ff ff 	movabs rax,0xffffffffffef1e89
ffff800000812ea5:	ff ff ff 
ffff800000812ea8:	48 01 d8             	add    rax,rbx
ffff800000812eab:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:646 (discriminator 4)
	finode = p->private_index_info;
ffff800000812ead:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000812eb1:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff800000812eb5:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:648 (discriminator 4)

	finode->first_cluster = (tmpdentry->DIR_FstClusHI<< 16 | tmpdentry->DIR_FstClusLO) & 0x0fffffff;
ffff800000812eb9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812ebd:	0f b7 40 14          	movzx  eax,WORD PTR [rax+0x14]
ffff800000812ec1:	0f b7 c0             	movzx  eax,ax
ffff800000812ec4:	c1 e0 10             	shl    eax,0x10
ffff800000812ec7:	89 c2                	mov    edx,eax
ffff800000812ec9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812ecd:	0f b7 40 1a          	movzx  eax,WORD PTR [rax+0x1a]
ffff800000812ed1:	0f b7 c0             	movzx  eax,ax
ffff800000812ed4:	09 d0                	or     eax,edx
ffff800000812ed6:	48 98                	cdqe   
ffff800000812ed8:	25 ff ff ff 0f       	and    eax,0xfffffff
ffff800000812edd:	48 89 c2             	mov    rdx,rax
ffff800000812ee0:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000812ee4:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:649 (discriminator 4)
	finode->dentry_location = cluster;
ffff800000812ee7:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000812eea:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000812eee:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:650 (discriminator 4)
	finode->dentry_position = tmpdentry - (struct FAT32_Directory *)buf;
ffff800000812ef2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812ef6:	48 2b 45 b0          	sub    rax,QWORD PTR [rbp-0x50]
ffff800000812efa:	48 c1 f8 05          	sar    rax,0x5
ffff800000812efe:	48 89 c2             	mov    rdx,rax
ffff800000812f01:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000812f05:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:651 (discriminator 4)
	finode->create_date = tmpdentry->DIR_CrtTime;
ffff800000812f09:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812f0d:	0f b7 50 0e          	movzx  edx,WORD PTR [rax+0xe]
ffff800000812f11:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000812f15:	66 89 50 18          	mov    WORD PTR [rax+0x18],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:652 (discriminator 4)
	finode->create_time = tmpdentry->DIR_CrtDate;
ffff800000812f19:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812f1d:	0f b7 50 10          	movzx  edx,WORD PTR [rax+0x10]
ffff800000812f21:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000812f25:	66 89 50 1a          	mov    WORD PTR [rax+0x1a],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:653 (discriminator 4)
	finode->write_date = tmpdentry->DIR_WrtTime;
ffff800000812f29:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812f2d:	0f b7 50 16          	movzx  edx,WORD PTR [rax+0x16]
ffff800000812f31:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000812f35:	66 89 50 1c          	mov    WORD PTR [rax+0x1c],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:654 (discriminator 4)
	finode->write_time = tmpdentry->DIR_WrtDate;
ffff800000812f39:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812f3d:	0f b7 50 18          	movzx  edx,WORD PTR [rax+0x18]
ffff800000812f41:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000812f45:	66 89 50 1e          	mov    WORD PTR [rax+0x1e],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:656 (discriminator 4)

	if((tmpdentry->DIR_FstClusHI >> 12) && (p->attribute & FS_ATTR_FILE))
ffff800000812f49:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000812f4d:	0f b7 40 14          	movzx  eax,WORD PTR [rax+0x14]
ffff800000812f51:	66 c1 e8 0c          	shr    ax,0xc
ffff800000812f55:	66 85 c0             	test   ax,ax
ffff800000812f58:	74 27                	je     ffff800000812f81 <FAT32_lookup+0x9e4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:656 (discriminator 1)
ffff800000812f5a:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000812f5e:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000812f62:	83 e0 01             	and    eax,0x1
ffff800000812f65:	48 85 c0             	test   rax,rax
ffff800000812f68:	74 17                	je     ffff800000812f81 <FAT32_lookup+0x9e4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:658
	{
		p->attribute |= FS_ATTR_DEVICE;
ffff800000812f6a:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000812f6e:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff800000812f72:	48 83 c8 04          	or     rax,0x4
ffff800000812f76:	48 89 c2             	mov    rdx,rax
ffff800000812f79:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000812f7d:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:660
	}
	p->link=1;
ffff800000812f81:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffff800000812f85:	c7 40 1c 01 00 00 00 	mov    DWORD PTR [rax+0x1c],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:661
	dest_dentry->dir_inode = p;
ffff800000812f8c:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffff800000812f90:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffff800000812f94:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:662
    kmfree(buf);
ffff800000812f98:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000812f9c:	48 89 c7             	mov    rdi,rax
ffff800000812f9f:	49 89 df             	mov    r15,rbx
ffff800000812fa2:	48 b8 6f 09 ee ff ff 	movabs rax,0xffffffffffee096f
ffff800000812fa9:	ff ff ff 
ffff800000812fac:	48 01 d8             	add    rax,rbx
ffff800000812faf:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:663
	return dest_dentry;	
ffff800000812fb1:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:664
}
ffff800000812fb5:	48 83 c4 60          	add    rsp,0x60
ffff800000812fb9:	5b                   	pop    rbx
ffff800000812fba:	41 5f                	pop    r15
ffff800000812fbc:	5d                   	pop    rbp
ffff800000812fbd:	c3                   	ret    

ffff800000812fbe <FAT32_mkdir>:
FAT32_mkdir():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:668


long FAT32_mkdir(struct index_node * inode,struct dir_entry * dentry,int mode)
{}
ffff800000812fbe:	f3 0f 1e fa          	endbr64 
ffff800000812fc2:	55                   	push   rbp
ffff800000812fc3:	48 89 e5             	mov    rbp,rsp
ffff800000812fc6:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000812fc6 <FAT32_mkdir+0x8>
ffff800000812fcd:	49 bb 32 fc 10 00 00 	movabs r11,0x10fc32
ffff800000812fd4:	00 00 00 
ffff800000812fd7:	4c 01 d8             	add    rax,r11
ffff800000812fda:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000812fde:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000812fe2:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
ffff800000812fe5:	90                   	nop
ffff800000812fe6:	5d                   	pop    rbp
ffff800000812fe7:	c3                   	ret    

ffff800000812fe8 <FAT32_rmdir>:
FAT32_rmdir():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:672


long FAT32_rmdir(struct index_node * inode,struct dir_entry * dentry)
{}
ffff800000812fe8:	f3 0f 1e fa          	endbr64 
ffff800000812fec:	55                   	push   rbp
ffff800000812fed:	48 89 e5             	mov    rbp,rsp
ffff800000812ff0:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000812ff0 <FAT32_rmdir+0x8>
ffff800000812ff7:	49 bb 08 fc 10 00 00 	movabs r11,0x10fc08
ffff800000812ffe:	00 00 00 
ffff800000813001:	4c 01 d8             	add    rax,r11
ffff800000813004:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000813008:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff80000081300c:	90                   	nop
ffff80000081300d:	5d                   	pop    rbp
ffff80000081300e:	c3                   	ret    

ffff80000081300f <FAT32_rename>:
FAT32_rename():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:675

long FAT32_rename(struct index_node * old_inode,struct dir_entry * old_dentry,struct index_node * new_inode,struct dir_entry * new_dentry)
{}
ffff80000081300f:	f3 0f 1e fa          	endbr64 
ffff800000813013:	55                   	push   rbp
ffff800000813014:	48 89 e5             	mov    rbp,rsp
ffff800000813017:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000813017 <FAT32_rename+0x8>
ffff80000081301e:	49 bb e1 fb 10 00 00 	movabs r11,0x10fbe1
ffff800000813025:	00 00 00 
ffff800000813028:	4c 01 d8             	add    rax,r11
ffff80000081302b:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000081302f:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000813033:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff800000813037:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
ffff80000081303b:	90                   	nop
ffff80000081303c:	5d                   	pop    rbp
ffff80000081303d:	c3                   	ret    

ffff80000081303e <FAT32_getattr>:
FAT32_getattr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:678

long FAT32_getattr(struct dir_entry * dentry,unsigned long * attr)
{}
ffff80000081303e:	f3 0f 1e fa          	endbr64 
ffff800000813042:	55                   	push   rbp
ffff800000813043:	48 89 e5             	mov    rbp,rsp
ffff800000813046:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000813046 <FAT32_getattr+0x8>
ffff80000081304d:	49 bb b2 fb 10 00 00 	movabs r11,0x10fbb2
ffff800000813054:	00 00 00 
ffff800000813057:	4c 01 d8             	add    rax,r11
ffff80000081305a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff80000081305e:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000813062:	90                   	nop
ffff800000813063:	5d                   	pop    rbp
ffff800000813064:	c3                   	ret    

ffff800000813065 <FAT32_setattr>:
FAT32_setattr():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:681

long FAT32_setattr(struct dir_entry * dentry,unsigned long * attr)
{}
ffff800000813065:	f3 0f 1e fa          	endbr64 
ffff800000813069:	55                   	push   rbp
ffff80000081306a:	48 89 e5             	mov    rbp,rsp
ffff80000081306d:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff80000081306d <FAT32_setattr+0x8>
ffff800000813074:	49 bb 8b fb 10 00 00 	movabs r11,0x10fb8b
ffff80000081307b:	00 00 00 
ffff80000081307e:	4c 01 d8             	add    rax,r11
ffff800000813081:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000813085:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000813089:	90                   	nop
ffff80000081308a:	5d                   	pop    rbp
ffff80000081308b:	c3                   	ret    

ffff80000081308c <FAT32_compare>:
FAT32_compare():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:696
	.setattr = FAT32_setattr,
};


//// these operation need cache and list
long FAT32_compare(struct dir_entry * parent_dentry,char * source_filename,char * destination_filename){}
ffff80000081308c:	f3 0f 1e fa          	endbr64 
ffff800000813090:	55                   	push   rbp
ffff800000813091:	48 89 e5             	mov    rbp,rsp
ffff800000813094:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000813094 <FAT32_compare+0x8>
ffff80000081309b:	49 bb 64 fb 10 00 00 	movabs r11,0x10fb64
ffff8000008130a2:	00 00 00 
ffff8000008130a5:	4c 01 d8             	add    rax,r11
ffff8000008130a8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff8000008130ac:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff8000008130b0:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff8000008130b4:	90                   	nop
ffff8000008130b5:	5d                   	pop    rbp
ffff8000008130b6:	c3                   	ret    

ffff8000008130b7 <FAT32_hash>:
FAT32_hash():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:697
long FAT32_hash(struct dir_entry * dentry,char * filename){}
ffff8000008130b7:	f3 0f 1e fa          	endbr64 
ffff8000008130bb:	55                   	push   rbp
ffff8000008130bc:	48 89 e5             	mov    rbp,rsp
ffff8000008130bf:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008130bf <FAT32_hash+0x8>
ffff8000008130c6:	49 bb 39 fb 10 00 00 	movabs r11,0x10fb39
ffff8000008130cd:	00 00 00 
ffff8000008130d0:	4c 01 d8             	add    rax,r11
ffff8000008130d3:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff8000008130d7:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff8000008130db:	90                   	nop
ffff8000008130dc:	5d                   	pop    rbp
ffff8000008130dd:	c3                   	ret    

ffff8000008130de <FAT32_release>:
FAT32_release():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:698
long FAT32_release(struct dir_entry * dentry){}
ffff8000008130de:	f3 0f 1e fa          	endbr64 
ffff8000008130e2:	55                   	push   rbp
ffff8000008130e3:	48 89 e5             	mov    rbp,rsp
ffff8000008130e6:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008130e6 <FAT32_release+0x8>
ffff8000008130ed:	49 bb 12 fb 10 00 00 	movabs r11,0x10fb12
ffff8000008130f4:	00 00 00 
ffff8000008130f7:	4c 01 d8             	add    rax,r11
ffff8000008130fa:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff8000008130fe:	90                   	nop
ffff8000008130ff:	5d                   	pop    rbp
ffff800000813100:	c3                   	ret    

ffff800000813101 <FAT32_iput>:
FAT32_iput():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:699
long FAT32_iput(struct dir_entry * dentry,struct index_node * inode){}
ffff800000813101:	f3 0f 1e fa          	endbr64 
ffff800000813105:	55                   	push   rbp
ffff800000813106:	48 89 e5             	mov    rbp,rsp
ffff800000813109:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000813109 <FAT32_iput+0x8>
ffff800000813110:	49 bb ef fa 10 00 00 	movabs r11,0x10faef
ffff800000813117:	00 00 00 
ffff80000081311a:	4c 01 d8             	add    rax,r11
ffff80000081311d:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000813121:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffff800000813125:	90                   	nop
ffff800000813126:	5d                   	pop    rbp
ffff800000813127:	c3                   	ret    

ffff800000813128 <fat32_write_superblock>:
fat32_write_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:711
	.release = FAT32_release,
	.iput = FAT32_iput,
};


void fat32_write_superblock(struct super_block * sb){}
ffff800000813128:	f3 0f 1e fa          	endbr64 
ffff80000081312c:	55                   	push   rbp
ffff80000081312d:	48 89 e5             	mov    rbp,rsp
ffff800000813130:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000813130 <fat32_write_superblock+0x8>
ffff800000813137:	49 bb c8 fa 10 00 00 	movabs r11,0x10fac8
ffff80000081313e:	00 00 00 
ffff800000813141:	4c 01 d8             	add    rax,r11
ffff800000813144:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000813148:	90                   	nop
ffff800000813149:	5d                   	pop    rbp
ffff80000081314a:	c3                   	ret    

ffff80000081314b <fat32_put_superblock>:
fat32_put_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:714

void fat32_put_superblock(struct super_block * sb)
{
ffff80000081314b:	f3 0f 1e fa          	endbr64 
ffff80000081314f:	55                   	push   rbp
ffff800000813150:	48 89 e5             	mov    rbp,rsp
ffff800000813153:	41 57                	push   r15
ffff800000813155:	53                   	push   rbx
ffff800000813156:	48 83 ec 10          	sub    rsp,0x10
ffff80000081315a:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff80000081315a <fat32_put_superblock+0xf>
ffff800000813161:	49 bb 9e fa 10 00 00 	movabs r11,0x10fa9e
ffff800000813168:	00 00 00 
ffff80000081316b:	4c 01 db             	add    rbx,r11
ffff80000081316e:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:715
    kmfree(sb->private_sb_info);
ffff800000813172:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813176:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000081317a:	48 89 c7             	mov    rdi,rax
ffff80000081317d:	49 89 df             	mov    r15,rbx
ffff800000813180:	48 b8 6f 09 ee ff ff 	movabs rax,0xffffffffffee096f
ffff800000813187:	ff ff ff 
ffff80000081318a:	48 01 d8             	add    rax,rbx
ffff80000081318d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:716
    kmfree(sb->root->dir_inode->private_index_info);
ffff80000081318f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813193:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000813196:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000081319a:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff80000081319e:	48 89 c7             	mov    rdi,rax
ffff8000008131a1:	49 89 df             	mov    r15,rbx
ffff8000008131a4:	48 b8 6f 09 ee ff ff 	movabs rax,0xffffffffffee096f
ffff8000008131ab:	ff ff ff 
ffff8000008131ae:	48 01 d8             	add    rax,rbx
ffff8000008131b1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:717
    kmfree(sb->root->dir_inode);
ffff8000008131b3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008131b7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008131ba:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008131be:	48 89 c7             	mov    rdi,rax
ffff8000008131c1:	49 89 df             	mov    r15,rbx
ffff8000008131c4:	48 b8 6f 09 ee ff ff 	movabs rax,0xffffffffffee096f
ffff8000008131cb:	ff ff ff 
ffff8000008131ce:	48 01 d8             	add    rax,rbx
ffff8000008131d1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:718
    kmfree(sb->root);
ffff8000008131d3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008131d7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008131da:	48 89 c7             	mov    rdi,rax
ffff8000008131dd:	49 89 df             	mov    r15,rbx
ffff8000008131e0:	48 b8 6f 09 ee ff ff 	movabs rax,0xffffffffffee096f
ffff8000008131e7:	ff ff ff 
ffff8000008131ea:	48 01 d8             	add    rax,rbx
ffff8000008131ed:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:719
    kmfree(sb);
ffff8000008131ef:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008131f3:	48 89 c7             	mov    rdi,rax
ffff8000008131f6:	49 89 df             	mov    r15,rbx
ffff8000008131f9:	48 b8 6f 09 ee ff ff 	movabs rax,0xffffffffffee096f
ffff800000813200:	ff ff ff 
ffff800000813203:	48 01 d8             	add    rax,rbx
ffff800000813206:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:720
}
ffff800000813208:	90                   	nop
ffff800000813209:	48 83 c4 10          	add    rsp,0x10
ffff80000081320d:	5b                   	pop    rbx
ffff80000081320e:	41 5f                	pop    r15
ffff800000813210:	5d                   	pop    rbp
ffff800000813211:	c3                   	ret    

ffff800000813212 <fat32_write_inode>:
fat32_write_inode():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:723

void fat32_write_inode(struct index_node * inode)
{
ffff800000813212:	f3 0f 1e fa          	endbr64 
ffff800000813216:	55                   	push   rbp
ffff800000813217:	48 89 e5             	mov    rbp,rsp
ffff80000081321a:	41 57                	push   r15
ffff80000081321c:	53                   	push   rbx
ffff80000081321d:	48 83 ec 40          	sub    rsp,0x40
ffff800000813221:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000813221 <fat32_write_inode+0xf>
ffff800000813228:	49 bb d7 f9 10 00 00 	movabs r11,0x10f9d7
ffff80000081322f:	00 00 00 
ffff800000813232:	4c 01 db             	add    rbx,r11
ffff800000813235:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:724
	struct FAT32_Directory * fdentry = NULL;
ffff800000813239:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff800000813240:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:725
	struct FAT32_Directory * buf = NULL;
ffff800000813241:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff800000813248:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:726
	struct FAT32_inode_info * finode = inode->private_index_info;
ffff800000813249:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff80000081324d:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff800000813251:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:727
	struct FAT32_sb_info * fsbi = inode->sb->private_sb_info;
ffff800000813255:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000813259:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000081325d:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000813261:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:728
	unsigned long sector = 0;
ffff800000813265:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffff80000081326c:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:730

	if(finode->dentry_location == 0)
ffff80000081326d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000813271:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff800000813275:	48 85 c0             	test   rax,rax
ffff800000813278:	75 2d                	jne    ffff8000008132a7 <fat32_write_inode+0x95>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:732
	{
		printf("FS ERROR:write root inode!\n");	
ffff80000081327a:	48 b8 9c d9 ff ff ff 	movabs rax,0xffffffffffffd99c
ffff800000813281:	ff ff ff 
ffff800000813284:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000813288:	48 89 c7             	mov    rdi,rax
ffff80000081328b:	49 89 df             	mov    r15,rbx
ffff80000081328e:	b8 00 00 00 00       	mov    eax,0x0
ffff800000813293:	48 ba c9 ed ed ff ff 	movabs rdx,0xffffffffffededc9
ffff80000081329a:	ff ff ff 
ffff80000081329d:	48 01 da             	add    rdx,rbx
ffff8000008132a0:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:733
		return ;
ffff8000008132a2:	e9 89 01 00 00       	jmp    ffff800000813430 <fat32_write_inode+0x21e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:736
	}

	sector = fsbi->Data_firstsector + (finode->dentry_location - 2) * fsbi->sector_per_cluster;
ffff8000008132a7:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008132ab:	48 8b 48 28          	mov    rcx,QWORD PTR [rax+0x28]
ffff8000008132af:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008132b3:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffff8000008132b7:	48 8d 50 fe          	lea    rdx,[rax-0x2]
ffff8000008132bb:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008132bf:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008132c3:	48 0f af c2          	imul   rax,rdx
ffff8000008132c7:	48 01 c8             	add    rax,rcx
ffff8000008132ca:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:737
	buf = (struct FAT32_Directory *) kmallocat(0,TO_MPGN(fsbi->bytes_per_cluster));
ffff8000008132ce:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008132d2:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff8000008132d6:	48 05 ff 0f 00 00    	add    rax,0xfff
ffff8000008132dc:	48 8d 90 ff 0f 00 00 	lea    rdx,[rax+0xfff]
ffff8000008132e3:	48 85 c0             	test   rax,rax
ffff8000008132e6:	48 0f 48 c2          	cmovs  rax,rdx
ffff8000008132ea:	48 c1 f8 0c          	sar    rax,0xc
ffff8000008132ee:	89 c6                	mov    esi,eax
ffff8000008132f0:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008132f5:	49 89 df             	mov    r15,rbx
ffff8000008132f8:	48 b8 5a f7 ed ff ff 	movabs rax,0xffffffffffedf75a
ffff8000008132ff:	ff ff ff 
ffff800000813302:	48 01 d8             	add    rax,rbx
ffff800000813305:	ff d0                	call   rax
ffff800000813307:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:738
	memset(buf,0,fsbi->bytes_per_cluster);
ffff80000081330b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081330f:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000813313:	89 c2                	mov    edx,eax
ffff800000813315:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000813319:	be 00 00 00 00       	mov    esi,0x0
ffff80000081331e:	48 89 c7             	mov    rdi,rax
ffff800000813321:	49 89 df             	mov    r15,rbx
ffff800000813324:	48 b8 89 1e ef ff ff 	movabs rax,0xffffffffffef1e89
ffff80000081332b:	ff ff ff 
ffff80000081332e:	48 01 d8             	add    rax,rbx
ffff800000813331:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:739
	blkdev_read(inode->dev,sector*SECTOR_SIZE,fsbi->sector_per_cluster*SECTOR_SIZE,buf);
ffff800000813333:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000813337:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000081333b:	48 c1 e0 09          	shl    rax,0x9
ffff80000081333f:	48 89 c7             	mov    rdi,rax
ffff800000813342:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000813346:	48 c1 e0 09          	shl    rax,0x9
ffff80000081334a:	48 89 c6             	mov    rsi,rax
ffff80000081334d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000813351:	0f b7 40 18          	movzx  eax,WORD PTR [rax+0x18]
ffff800000813355:	0f b7 c0             	movzx  eax,ax
ffff800000813358:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000081335c:	48 89 d1             	mov    rcx,rdx
ffff80000081335f:	48 89 fa             	mov    rdx,rdi
ffff800000813362:	89 c7                	mov    edi,eax
ffff800000813364:	49 89 df             	mov    r15,rbx
ffff800000813367:	48 b8 34 cc ee ff ff 	movabs rax,0xffffffffffeecc34
ffff80000081336e:	ff ff ff 
ffff800000813371:	48 01 d8             	add    rax,rbx
ffff800000813374:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:740
    fdentry = buf+finode->dentry_position;
ffff800000813376:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081337a:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff80000081337e:	48 c1 e0 05          	shl    rax,0x5
ffff800000813382:	48 89 c2             	mov    rdx,rax
ffff800000813385:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000813389:	48 01 d0             	add    rax,rdx
ffff80000081338c:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:743

	////alert fat32 dentry data
	fdentry->DIR_FileSize = inode->file_size;
ffff800000813390:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000813394:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000813397:	89 c2                	mov    edx,eax
ffff800000813399:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081339d:	89 50 1c             	mov    DWORD PTR [rax+0x1c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:744
	fdentry->DIR_FstClusLO = finode->first_cluster & 0xffff;
ffff8000008133a0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008133a4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008133a7:	89 c2                	mov    edx,eax
ffff8000008133a9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008133ad:	66 89 50 1a          	mov    WORD PTR [rax+0x1a],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:745
	fdentry->DIR_FstClusHI = (fdentry->DIR_FstClusHI & 0xf000) | (finode->first_cluster >> 16);
ffff8000008133b1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008133b5:	0f b7 40 14          	movzx  eax,WORD PTR [rax+0x14]
ffff8000008133b9:	66 25 00 f0          	and    ax,0xf000
ffff8000008133bd:	89 c2                	mov    edx,eax
ffff8000008133bf:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008133c3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008133c6:	48 c1 e8 10          	shr    rax,0x10
ffff8000008133ca:	09 c2                	or     edx,eax
ffff8000008133cc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008133d0:	66 89 50 14          	mov    WORD PTR [rax+0x14],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:747
	
	blkdev_write(inode->dev,sector*SECTOR_SIZE,fsbi->sector_per_cluster*SECTOR_SIZE,buf);
ffff8000008133d4:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008133d8:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffff8000008133dc:	48 c1 e0 09          	shl    rax,0x9
ffff8000008133e0:	48 89 c7             	mov    rdi,rax
ffff8000008133e3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff8000008133e7:	48 c1 e0 09          	shl    rax,0x9
ffff8000008133eb:	48 89 c6             	mov    rsi,rax
ffff8000008133ee:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008133f2:	0f b7 40 18          	movzx  eax,WORD PTR [rax+0x18]
ffff8000008133f6:	0f b7 c0             	movzx  eax,ax
ffff8000008133f9:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008133fd:	48 89 d1             	mov    rcx,rdx
ffff800000813400:	48 89 fa             	mov    rdx,rdi
ffff800000813403:	89 c7                	mov    edi,eax
ffff800000813405:	49 89 df             	mov    r15,rbx
ffff800000813408:	48 b8 93 cd ee ff ff 	movabs rax,0xffffffffffeecd93
ffff80000081340f:	ff ff ff 
ffff800000813412:	48 01 d8             	add    rax,rbx
ffff800000813415:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:748
    kmfree(buf);
ffff800000813417:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff80000081341b:	48 89 c7             	mov    rdi,rax
ffff80000081341e:	49 89 df             	mov    r15,rbx
ffff800000813421:	48 b8 6f 09 ee ff ff 	movabs rax,0xffffffffffee096f
ffff800000813428:	ff ff ff 
ffff80000081342b:	48 01 d8             	add    rax,rbx
ffff80000081342e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:749
}
ffff800000813430:	48 83 c4 40          	add    rsp,0x40
ffff800000813434:	5b                   	pop    rbx
ffff800000813435:	41 5f                	pop    r15
ffff800000813437:	5d                   	pop    rbp
ffff800000813438:	c3                   	ret    

ffff800000813439 <fat32_read_superblock>:
fat32_read_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:760

	.write_inode = fat32_write_inode,
};

struct super_block * fat32_read_superblock(struct Disk_Partition_Table_Entry * DPTE,void * buf)
{
ffff800000813439:	f3 0f 1e fa          	endbr64 
ffff80000081343d:	55                   	push   rbp
ffff80000081343e:	48 89 e5             	mov    rbp,rsp
ffff800000813441:	41 57                	push   r15
ffff800000813443:	53                   	push   rbx
ffff800000813444:	48 83 ec 40          	sub    rsp,0x40
ffff800000813448:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000813448 <fat32_read_superblock+0xf>
ffff80000081344f:	49 bb b0 f7 10 00 00 	movabs r11,0x10f7b0
ffff800000813456:	00 00 00 
ffff800000813459:	4c 01 db             	add    rbx,r11
ffff80000081345c:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
ffff800000813460:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:761
	struct super_block * sbp = NULL;
ffff800000813464:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff80000081346b:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:762
	struct FAT32_inode_info * finode = NULL;
ffff80000081346c:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffff800000813473:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:763
	struct FAT32_BootSector * fbs = NULL;
ffff800000813474:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffff80000081347b:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:764
	struct FAT32_sb_info * fsbi = NULL;
ffff80000081347c:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffff800000813483:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:767

	////super block
	sbp = (struct super_block *) kmallocat(0,TO_MPGN(sizeof(struct super_block)));
ffff800000813484:	be 01 00 00 00       	mov    esi,0x1
ffff800000813489:	bf 00 00 00 00       	mov    edi,0x0
ffff80000081348e:	49 89 df             	mov    r15,rbx
ffff800000813491:	48 b8 5a f7 ed ff ff 	movabs rax,0xffffffffffedf75a
ffff800000813498:	ff ff ff 
ffff80000081349b:	48 01 d8             	add    rax,rbx
ffff80000081349e:	ff d0                	call   rax
ffff8000008134a0:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:768
	memset(sbp,0,sizeof(struct super_block));
ffff8000008134a4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008134a8:	ba 28 00 00 00       	mov    edx,0x28
ffff8000008134ad:	be 00 00 00 00       	mov    esi,0x0
ffff8000008134b2:	48 89 c7             	mov    rdi,rax
ffff8000008134b5:	49 89 df             	mov    r15,rbx
ffff8000008134b8:	48 b8 89 1e ef ff ff 	movabs rax,0xffffffffffef1e89
ffff8000008134bf:	ff ff ff 
ffff8000008134c2:	48 01 d8             	add    rax,rbx
ffff8000008134c5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:770

	sbp->sb_ops = &FAT32_sb_ops;
ffff8000008134c7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008134cb:	48 ba 58 fe ff ff ff 	movabs rdx,0xfffffffffffffe58
ffff8000008134d2:	ff ff ff 
ffff8000008134d5:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff8000008134d9:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:771
	sbp->private_sb_info = (struct FAT32_sb_info *) kmallocat(0,TO_MPGN(sizeof(struct FAT32_sb_info)));
ffff8000008134dd:	be 01 00 00 00       	mov    esi,0x1
ffff8000008134e2:	bf 00 00 00 00       	mov    edi,0x0
ffff8000008134e7:	49 89 df             	mov    r15,rbx
ffff8000008134ea:	48 b8 5a f7 ed ff ff 	movabs rax,0xffffffffffedf75a
ffff8000008134f1:	ff ff ff 
ffff8000008134f4:	48 01 d8             	add    rax,rbx
ffff8000008134f7:	ff d0                	call   rax
ffff8000008134f9:	48 89 c2             	mov    rdx,rax
ffff8000008134fc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813500:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:772
	memset(sbp->private_sb_info,0,sizeof(struct FAT32_sb_info));
ffff800000813504:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813508:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000081350c:	ba 60 00 00 00       	mov    edx,0x60
ffff800000813511:	be 00 00 00 00       	mov    esi,0x0
ffff800000813516:	48 89 c7             	mov    rdi,rax
ffff800000813519:	49 89 df             	mov    r15,rbx
ffff80000081351c:	48 b8 89 1e ef ff ff 	movabs rax,0xffffffffffef1e89
ffff800000813523:	ff ff ff 
ffff800000813526:	48 01 d8             	add    rax,rbx
ffff800000813529:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:775

	////fat32 boot sector
	fbs = (struct FAT32_BootSector *)buf;
ffff80000081352b:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff80000081352f:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:776
 	fsbi = sbp->private_sb_info;
ffff800000813533:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813537:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff80000081353b:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:777
	fsbi->start_sector = DPTE->start_LBA;
ffff80000081353f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000813543:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000813546:	89 c2                	mov    edx,eax
ffff800000813548:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081354c:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:778
	fsbi->sector_count = DPTE->sectors_limit;
ffff80000081354f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff800000813553:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff800000813556:	89 c2                	mov    edx,eax
ffff800000813558:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081355c:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:779
	fsbi->sector_per_cluster = fbs->BPB_SecPerClus;
ffff800000813560:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000813564:	0f b6 40 0d          	movzx  eax,BYTE PTR [rax+0xd]
ffff800000813568:	0f b6 d0             	movzx  edx,al
ffff80000081356b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081356f:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:780
	fsbi->bytes_per_cluster = fbs->BPB_SecPerClus * fbs->BPB_BytesPerSec;
ffff800000813573:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000813577:	0f b6 40 0d          	movzx  eax,BYTE PTR [rax+0xd]
ffff80000081357b:	0f b6 d0             	movzx  edx,al
ffff80000081357e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000813582:	0f b7 40 0b          	movzx  eax,WORD PTR [rax+0xb]
ffff800000813586:	0f b7 c0             	movzx  eax,ax
ffff800000813589:	0f af c2             	imul   eax,edx
ffff80000081358c:	48 63 d0             	movsxd rdx,eax
ffff80000081358f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000813593:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:781
	fsbi->bytes_per_sector = fbs->BPB_BytesPerSec;
ffff800000813597:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081359b:	0f b7 40 0b          	movzx  eax,WORD PTR [rax+0xb]
ffff80000081359f:	0f b7 d0             	movzx  edx,ax
ffff8000008135a2:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008135a6:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:782
	fsbi->Data_firstsector = DPTE->start_LBA + fbs->BPB_RsvdSecCnt + fbs->BPB_FATSz32 * fbs->BPB_NumFATs;
ffff8000008135aa:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008135ae:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffff8000008135b1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008135b5:	0f b7 40 0e          	movzx  eax,WORD PTR [rax+0xe]
ffff8000008135b9:	0f b7 c0             	movzx  eax,ax
ffff8000008135bc:	8d 0c 02             	lea    ecx,[rdx+rax*1]
ffff8000008135bf:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008135c3:	8b 50 24             	mov    edx,DWORD PTR [rax+0x24]
ffff8000008135c6:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008135ca:	0f b6 40 10          	movzx  eax,BYTE PTR [rax+0x10]
ffff8000008135ce:	0f b6 c0             	movzx  eax,al
ffff8000008135d1:	0f af c2             	imul   eax,edx
ffff8000008135d4:	01 c8                	add    eax,ecx
ffff8000008135d6:	89 c2                	mov    edx,eax
ffff8000008135d8:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008135dc:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:783
	fsbi->FAT1_firstsector = DPTE->start_LBA + fbs->BPB_RsvdSecCnt;
ffff8000008135e0:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008135e4:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffff8000008135e7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008135eb:	0f b7 40 0e          	movzx  eax,WORD PTR [rax+0xe]
ffff8000008135ef:	0f b7 c0             	movzx  eax,ax
ffff8000008135f2:	01 d0                	add    eax,edx
ffff8000008135f4:	89 c2                	mov    edx,eax
ffff8000008135f6:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008135fa:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:784
	fsbi->sector_per_FAT = fbs->BPB_FATSz32;
ffff8000008135fe:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000813602:	8b 40 24             	mov    eax,DWORD PTR [rax+0x24]
ffff800000813605:	89 c2                	mov    edx,eax
ffff800000813607:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081360b:	48 89 50 38          	mov    QWORD PTR [rax+0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:785
	fsbi->NumFATs = fbs->BPB_NumFATs;
ffff80000081360f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000813613:	0f b6 40 10          	movzx  eax,BYTE PTR [rax+0x10]
ffff800000813617:	0f b6 d0             	movzx  edx,al
ffff80000081361a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081361e:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:786
	fsbi->fsinfo_sector_infat = fbs->BPB_FSInfo;
ffff800000813622:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000813626:	0f b7 40 30          	movzx  eax,WORD PTR [rax+0x30]
ffff80000081362a:	0f b7 d0             	movzx  edx,ax
ffff80000081362d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000813631:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:787
	fsbi->bootsector_bk_infat = fbs->BPB_BkBootSec;	
ffff800000813635:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000813639:	0f b7 40 32          	movzx  eax,WORD PTR [rax+0x32]
ffff80000081363d:	0f b7 d0             	movzx  edx,ax
ffff800000813640:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000813644:	48 89 50 50          	mov    QWORD PTR [rax+0x50],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:789
	
	printf("FAT32 Boot Sector\n\tBPB_FSInfo:%x\n\tBPB_BkBootSec:%x\n\tBPB_TotSec32:%x\n",fbs->BPB_FSInfo,fbs->BPB_BkBootSec,fbs->BPB_TotSec32);
ffff800000813648:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081364c:	8b 48 20             	mov    ecx,DWORD PTR [rax+0x20]
ffff80000081364f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000813653:	0f b7 40 32          	movzx  eax,WORD PTR [rax+0x32]
ffff800000813657:	0f b7 d0             	movzx  edx,ax
ffff80000081365a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff80000081365e:	0f b7 40 30          	movzx  eax,WORD PTR [rax+0x30]
ffff800000813662:	0f b7 c0             	movzx  eax,ax
ffff800000813665:	89 c6                	mov    esi,eax
ffff800000813667:	48 b8 b8 d9 ff ff ff 	movabs rax,0xffffffffffffd9b8
ffff80000081366e:	ff ff ff 
ffff800000813671:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000813675:	48 89 c7             	mov    rdi,rax
ffff800000813678:	49 89 df             	mov    r15,rbx
ffff80000081367b:	b8 00 00 00 00       	mov    eax,0x0
ffff800000813680:	49 b8 c9 ed ed ff ff 	movabs r8,0xffffffffffededc9
ffff800000813687:	ff ff ff 
ffff80000081368a:	49 01 d8             	add    r8,rbx
ffff80000081368d:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:792
	
	////fat32 fsinfo sector
	fsbi->fat_fsinfo = (struct FAT32_FSInfo *) kmallocat(0,TO_MPGN(sizeof(struct FAT32_FSInfo)));
ffff800000813690:	be 01 00 00 00       	mov    esi,0x1
ffff800000813695:	bf 00 00 00 00       	mov    edi,0x0
ffff80000081369a:	49 89 df             	mov    r15,rbx
ffff80000081369d:	48 b8 5a f7 ed ff ff 	movabs rax,0xffffffffffedf75a
ffff8000008136a4:	ff ff ff 
ffff8000008136a7:	48 01 d8             	add    rax,rbx
ffff8000008136aa:	ff d0                	call   rax
ffff8000008136ac:	48 89 c2             	mov    rdx,rax
ffff8000008136af:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008136b3:	48 89 50 58          	mov    QWORD PTR [rax+0x58],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:793
	memset(fsbi->fat_fsinfo,0,512);
ffff8000008136b7:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008136bb:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
ffff8000008136bf:	ba 00 02 00 00       	mov    edx,0x200
ffff8000008136c4:	be 00 00 00 00       	mov    esi,0x0
ffff8000008136c9:	48 89 c7             	mov    rdi,rax
ffff8000008136cc:	49 89 df             	mov    r15,rbx
ffff8000008136cf:	48 b8 89 1e ef ff ff 	movabs rax,0xffffffffffef1e89
ffff8000008136d6:	ff ff ff 
ffff8000008136d9:	48 01 d8             	add    rax,rbx
ffff8000008136dc:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:794
	blkdev_read(root_sb->dev,(DPTE->start_LBA + fbs->BPB_FSInfo)*SECTOR_SIZE,SECTOR_SIZE,(unsigned char *)fsbi->fat_fsinfo);
ffff8000008136de:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008136e2:	48 8b 50 58          	mov    rdx,QWORD PTR [rax+0x58]
ffff8000008136e6:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffff8000008136ea:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffff8000008136ed:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008136f1:	0f b7 40 30          	movzx  eax,WORD PTR [rax+0x30]
ffff8000008136f5:	0f b7 c0             	movzx  eax,ax
ffff8000008136f8:	01 c8                	add    eax,ecx
ffff8000008136fa:	c1 e0 09             	shl    eax,0x9
ffff8000008136fd:	89 c6                	mov    esi,eax
ffff8000008136ff:	48 b8 90 fd ff ff ff 	movabs rax,0xfffffffffffffd90
ffff800000813706:	ff ff ff 
ffff800000813709:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff80000081370d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000813710:	0f b7 40 10          	movzx  eax,WORD PTR [rax+0x10]
ffff800000813714:	0f b7 c0             	movzx  eax,ax
ffff800000813717:	48 89 d1             	mov    rcx,rdx
ffff80000081371a:	ba 00 02 00 00       	mov    edx,0x200
ffff80000081371f:	89 c7                	mov    edi,eax
ffff800000813721:	49 89 df             	mov    r15,rbx
ffff800000813724:	48 b8 34 cc ee ff ff 	movabs rax,0xffffffffffeecc34
ffff80000081372b:	ff ff ff 
ffff80000081372e:	48 01 d8             	add    rax,rbx
ffff800000813731:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:795
	printf("FAT32 FSInfo\n\tFSI_LeadSig:%x\n\tFSI_StrucSig:%x\n\tFSI_Free_Count:%x\n",fsbi->fat_fsinfo->FSI_LeadSig,fsbi->fat_fsinfo->FSI_StrucSig,fsbi->fat_fsinfo->FSI_Free_Count);
ffff800000813733:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000813737:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
ffff80000081373b:	8b 88 e8 01 00 00    	mov    ecx,DWORD PTR [rax+0x1e8]
ffff800000813741:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000813745:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
ffff800000813749:	8b 90 e4 01 00 00    	mov    edx,DWORD PTR [rax+0x1e4]
ffff80000081374f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000813753:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
ffff800000813757:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000813759:	89 c6                	mov    esi,eax
ffff80000081375b:	48 b8 00 da ff ff ff 	movabs rax,0xffffffffffffda00
ffff800000813762:	ff ff ff 
ffff800000813765:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000813769:	48 89 c7             	mov    rdi,rax
ffff80000081376c:	49 89 df             	mov    r15,rbx
ffff80000081376f:	b8 00 00 00 00       	mov    eax,0x0
ffff800000813774:	49 b8 c9 ed ed ff ff 	movabs r8,0xffffffffffededc9
ffff80000081377b:	ff ff ff 
ffff80000081377e:	49 01 d8             	add    r8,rbx
ffff800000813781:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:798
	
	////directory entry
	sbp->root = (struct dir_entry *) kmallocat(0,TO_MPGN(sizeof(struct dir_entry)));
ffff800000813784:	be 01 00 00 00       	mov    esi,0x1
ffff800000813789:	bf 00 00 00 00       	mov    edi,0x0
ffff80000081378e:	49 89 df             	mov    r15,rbx
ffff800000813791:	48 b8 5a f7 ed ff ff 	movabs rax,0xffffffffffedf75a
ffff800000813798:	ff ff ff 
ffff80000081379b:	48 01 d8             	add    rax,rbx
ffff80000081379e:	ff d0                	call   rax
ffff8000008137a0:	48 89 c2             	mov    rdx,rax
ffff8000008137a3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008137a7:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:799
	memset(sbp->root,0,sizeof(struct dir_entry));
ffff8000008137aa:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008137ae:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008137b1:	ba 68 00 00 00       	mov    edx,0x68
ffff8000008137b6:	be 00 00 00 00       	mov    esi,0x0
ffff8000008137bb:	48 89 c7             	mov    rdi,rax
ffff8000008137be:	49 89 df             	mov    r15,rbx
ffff8000008137c1:	48 b8 89 1e ef ff ff 	movabs rax,0xffffffffffef1e89
ffff8000008137c8:	ff ff ff 
ffff8000008137cb:	48 01 d8             	add    rax,rbx
ffff8000008137ce:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:801

	list_init(&sbp->root->child_node);
ffff8000008137d0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008137d4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008137d7:	48 83 c0 10          	add    rax,0x10
ffff8000008137db:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff8000008137df:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008137e3:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff8000008137ea:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff8000008137ee:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff8000008137f5:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff8000008137f6:	90                   	nop
fat32_read_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:802
	list_init(&sbp->root->subdirs_list);
ffff8000008137f7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008137fb:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008137fe:	48 83 c0 28          	add    rax,0x28
ffff800000813802:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
list_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:19
    list->prev = NULL;
ffff800000813806:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff80000081380a:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:20
    list->next = NULL;
ffff800000813811:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffff800000813815:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff80000081381c:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/include/vfs.h:21
}
ffff80000081381d:	90                   	nop
fat32_read_superblock():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:803
	sbp->root->parent = sbp->root;
ffff80000081381e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813822:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000813825:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000813829:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000081382c:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:804
	sbp->root->dir_ops = &FAT32_dentry_ops;
ffff800000813830:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813834:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000813837:	48 ba 00 ff ff ff ff 	movabs rdx,0xffffffffffffff00
ffff80000081383e:	ff ff ff 
ffff800000813841:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000813845:	48 89 50 60          	mov    QWORD PTR [rax+0x60],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:805
	sbp->root->name = (char *) kmallocat(0,TO_MPGN(2));
ffff800000813849:	be 01 00 00 00       	mov    esi,0x1
ffff80000081384e:	bf 00 00 00 00       	mov    edi,0x0
ffff800000813853:	49 89 df             	mov    r15,rbx
ffff800000813856:	48 b8 5a f7 ed ff ff 	movabs rax,0xffffffffffedf75a
ffff80000081385d:	ff ff ff 
ffff800000813860:	48 01 d8             	add    rax,rbx
ffff800000813863:	ff d0                	call   rax
ffff800000813865:	48 89 c2             	mov    rdx,rax
ffff800000813868:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081386c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000081386f:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:806
	sbp->root->name[0] = '/';
ffff800000813872:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813876:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000813879:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000081387c:	c6 00 2f             	mov    BYTE PTR [rax],0x2f
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:807
	sbp->root->name_length = 1;
ffff80000081387f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813883:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000813886:	c7 40 08 01 00 00 00 	mov    DWORD PTR [rax+0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:810

	////index node
	sbp->root->dir_inode = (struct index_node *) kmallocat(0,TO_MPGN(sizeof(struct index_node)));
ffff80000081388d:	be 01 00 00 00       	mov    esi,0x1
ffff800000813892:	bf 00 00 00 00       	mov    edi,0x0
ffff800000813897:	49 89 df             	mov    r15,rbx
ffff80000081389a:	48 b8 5a f7 ed ff ff 	movabs rax,0xffffffffffedf75a
ffff8000008138a1:	ff ff ff 
ffff8000008138a4:	48 01 d8             	add    rax,rbx
ffff8000008138a7:	ff d0                	call   rax
ffff8000008138a9:	48 89 c2             	mov    rdx,rax
ffff8000008138ac:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008138b0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008138b3:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:811
	memset(sbp->root->dir_inode,0,sizeof(struct index_node));
ffff8000008138b7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008138bb:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008138be:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008138c2:	ba 40 00 00 00       	mov    edx,0x40
ffff8000008138c7:	be 00 00 00 00       	mov    esi,0x0
ffff8000008138cc:	48 89 c7             	mov    rdi,rax
ffff8000008138cf:	49 89 df             	mov    r15,rbx
ffff8000008138d2:	48 b8 89 1e ef ff ff 	movabs rax,0xffffffffffef1e89
ffff8000008138d9:	ff ff ff 
ffff8000008138dc:	48 01 d8             	add    rax,rbx
ffff8000008138df:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:812
	sbp->root->dir_inode->inode_ops = &FAT32_inode_ops;
ffff8000008138e1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008138e5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008138e8:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008138ec:	48 ba 18 ff ff ff ff 	movabs rdx,0xffffffffffffff18
ffff8000008138f3:	ff ff ff 
ffff8000008138f6:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff8000008138fa:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:813
	sbp->root->dir_inode->f_ops = &FAT32_file_ops;
ffff8000008138fe:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813902:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000813905:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000813909:	48 ba c0 fd ff ff ff 	movabs rdx,0xfffffffffffffdc0
ffff800000813910:	ff ff ff 
ffff800000813913:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000813917:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:814
	sbp->root->dir_inode->file_size = 0;
ffff80000081391b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff80000081391f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000813922:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000813926:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:815
	sbp->root->dir_inode->blocks = (sbp->root->dir_inode->file_size + fsbi->bytes_per_cluster - 1)/fsbi->bytes_per_sector;
ffff80000081392d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813931:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000813934:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff800000813938:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff80000081393b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081393f:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffff800000813943:	48 01 d0             	add    rax,rdx
ffff800000813946:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffff80000081394a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff80000081394e:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000813952:	48 89 c6             	mov    rsi,rax
ffff800000813955:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813959:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000081395c:	48 8b 48 40          	mov    rcx,QWORD PTR [rax+0x40]
ffff800000813960:	48 89 d0             	mov    rax,rdx
ffff800000813963:	ba 00 00 00 00       	mov    edx,0x0
ffff800000813968:	48 f7 f6             	div    rsi
ffff80000081396b:	48 89 41 08          	mov    QWORD PTR [rcx+0x8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:816
	sbp->root->dir_inode->attribute = FS_ATTR_DIR;
ffff80000081396f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813973:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000813976:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000081397a:	48 c7 40 10 02 00 00 	mov    QWORD PTR [rax+0x10],0x2
ffff800000813981:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:817
	sbp->root->dir_inode->sb = sbp;
ffff800000813982:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813986:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000813989:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff80000081398d:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000813991:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:820

	////fat32 root inode
	sbp->root->dir_inode->private_index_info = (struct FAT32_inode_info *) kmallocat(0,TO_MPGN(sizeof(struct FAT32_inode_info)));
ffff800000813995:	be 01 00 00 00       	mov    esi,0x1
ffff80000081399a:	bf 00 00 00 00       	mov    edi,0x0
ffff80000081399f:	49 89 df             	mov    r15,rbx
ffff8000008139a2:	48 b8 5a f7 ed ff ff 	movabs rax,0xffffffffffedf75a
ffff8000008139a9:	ff ff ff 
ffff8000008139ac:	48 01 d8             	add    rax,rbx
ffff8000008139af:	ff d0                	call   rax
ffff8000008139b1:	48 89 c2             	mov    rdx,rax
ffff8000008139b4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008139b8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008139bb:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008139bf:	48 89 50 38          	mov    QWORD PTR [rax+0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:821
	memset(sbp->root->dir_inode->private_index_info,0,sizeof(struct FAT32_inode_info));
ffff8000008139c3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008139c7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008139ca:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008139ce:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff8000008139d2:	ba 20 00 00 00       	mov    edx,0x20
ffff8000008139d7:	be 00 00 00 00       	mov    esi,0x0
ffff8000008139dc:	48 89 c7             	mov    rdi,rax
ffff8000008139df:	49 89 df             	mov    r15,rbx
ffff8000008139e2:	48 b8 89 1e ef ff ff 	movabs rax,0xffffffffffef1e89
ffff8000008139e9:	ff ff ff 
ffff8000008139ec:	48 01 d8             	add    rax,rbx
ffff8000008139ef:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:822
	finode = (struct FAT32_inode_info *)sbp->root->dir_inode->private_index_info;
ffff8000008139f1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008139f5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008139f8:	48 8b 40 40          	mov    rax,QWORD PTR [rax+0x40]
ffff8000008139fc:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffff800000813a00:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:823
	finode->first_cluster = fbs->BPB_RootClus;
ffff800000813a04:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000813a08:	8b 40 2c             	mov    eax,DWORD PTR [rax+0x2c]
ffff800000813a0b:	89 c2                	mov    edx,eax
ffff800000813a0d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000813a11:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:824
	finode->dentry_location = 0;
ffff800000813a14:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000813a18:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
ffff800000813a1f:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:825
	finode->dentry_position = 0; 
ffff800000813a20:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000813a24:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffff800000813a2b:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:826
	finode->create_date = 0;
ffff800000813a2c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000813a30:	66 c7 40 18 00 00    	mov    WORD PTR [rax+0x18],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:827
	finode->create_time = 0;
ffff800000813a36:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000813a3a:	66 c7 40 1a 00 00    	mov    WORD PTR [rax+0x1a],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:828
	finode->write_date = 0;
ffff800000813a40:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000813a44:	66 c7 40 1c 00 00    	mov    WORD PTR [rax+0x1c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:829
	finode->write_time = 0;
ffff800000813a4a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000813a4e:	66 c7 40 1e 00 00    	mov    WORD PTR [rax+0x1e],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:831

	return sbp;
ffff800000813a54:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:832
}
ffff800000813a58:	48 83 c4 40          	add    rsp,0x40
ffff800000813a5c:	5b                   	pop    rbx
ffff800000813a5d:	41 5f                	pop    r15
ffff800000813a5f:	5d                   	pop    rbp
ffff800000813a60:	c3                   	ret    

ffff800000813a61 <DISK1_FAT32_FS_init>:
DISK1_FAT32_FS_init():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:844
	.read_superblock = fat32_read_superblock,
	.next = NULL,
};
//这个函数临时作为挂载根文件系统的函数。等硬盘驱动完成分区识别并注册分区设备之后会更改。
void DISK1_FAT32_FS_init()
{
ffff800000813a61:	f3 0f 1e fa          	endbr64 
ffff800000813a65:	55                   	push   rbp
ffff800000813a66:	48 89 e5             	mov    rbp,rsp
ffff800000813a69:	41 57                	push   r15
ffff800000813a6b:	53                   	push   rbx
ffff800000813a6c:	48 81 ec 10 04 00 00 	sub    rsp,0x410
ffff800000813a73:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000813a73 <DISK1_FAT32_FS_init+0x12>
ffff800000813a7a:	49 bb 85 f1 10 00 00 	movabs r11,0x10f185
ffff800000813a81:	00 00 00 
ffff800000813a84:	4c 01 db             	add    rbx,r11
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:847
	int i;
	unsigned char buf[512];
	struct dir_entry * dentry = NULL;
ffff800000813a87:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffff800000813a8e:	00 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:848
	struct Disk_Partition_Table DPT = {0};
ffff800000813a8f:	48 8d 95 e0 fb ff ff 	lea    rdx,[rbp-0x420]
ffff800000813a96:	b8 00 00 00 00       	mov    eax,0x0
ffff800000813a9b:	b9 40 00 00 00       	mov    ecx,0x40
ffff800000813aa0:	48 89 d7             	mov    rdi,rdx
ffff800000813aa3:	f3 48 ab             	rep stos QWORD PTR es:[rdi],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:850

	register_filesystem(&FAT32_fs_type);
ffff800000813aa6:	48 b8 b8 fe ff ff ff 	movabs rax,0xfffffffffffffeb8
ffff800000813aad:	ff ff ff 
ffff800000813ab0:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000813ab4:	48 89 c7             	mov    rdi,rax
ffff800000813ab7:	49 89 df             	mov    r15,rbx
ffff800000813aba:	48 b8 e5 a1 ee ff ff 	movabs rax,0xffffffffffeea1e5
ffff800000813ac1:	ff ff ff 
ffff800000813ac4:	48 01 d8             	add    rax,rbx
ffff800000813ac7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:852
	
	memset(buf,0,512);
ffff800000813ac9:	48 8d 85 e0 fd ff ff 	lea    rax,[rbp-0x220]
ffff800000813ad0:	ba 00 02 00 00       	mov    edx,0x200
ffff800000813ad5:	be 00 00 00 00       	mov    esi,0x0
ffff800000813ada:	48 89 c7             	mov    rdi,rax
ffff800000813add:	49 89 df             	mov    r15,rbx
ffff800000813ae0:	48 b8 89 1e ef ff ff 	movabs rax,0xffffffffffef1e89
ffff800000813ae7:	ff ff ff 
ffff800000813aea:	48 01 d8             	add    rax,rbx
ffff800000813aed:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:854

	blkdev_read(ROOT_DEV,0,512,buf);
ffff800000813aef:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff800000813af6:	ff ff ff 
ffff800000813af9:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000813afd:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000813aff:	0f b7 c0             	movzx  eax,ax
ffff800000813b02:	48 8d 95 e0 fd ff ff 	lea    rdx,[rbp-0x220]
ffff800000813b09:	48 89 d1             	mov    rcx,rdx
ffff800000813b0c:	ba 00 02 00 00       	mov    edx,0x200
ffff800000813b11:	be 00 00 00 00       	mov    esi,0x0
ffff800000813b16:	89 c7                	mov    edi,eax
ffff800000813b18:	49 89 df             	mov    r15,rbx
ffff800000813b1b:	48 b8 34 cc ee ff ff 	movabs rax,0xffffffffffeecc34
ffff800000813b22:	ff ff ff 
ffff800000813b25:	48 01 d8             	add    rax,rbx
ffff800000813b28:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:857
    // read_disk(DISK_MAJOR_MAJOR, 0, 1, buf);/*rint r= equest(DISK_MAJOR_MAJOR,DISKREQ_READ,0x0,1,(unsigned char *)buf);
    // chk_result(r);
    DPT = *(struct Disk_Partition_Table *)buf;
ffff800000813b2a:	48 8d 95 e0 fd ff ff 	lea    rdx,[rbp-0x220]
ffff800000813b31:	48 8d 85 e0 fb ff ff 	lea    rax,[rbp-0x420]
ffff800000813b38:	48 89 d6             	mov    rsi,rdx
ffff800000813b3b:	ba 40 00 00 00       	mov    edx,0x40
ffff800000813b40:	48 89 c7             	mov    rdi,rax
ffff800000813b43:	48 89 d1             	mov    rcx,rdx
ffff800000813b46:	f3 48 a5             	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:858
	printf("DPTE[0] start_LBA:%x\ttype:%x\n",DPT.DPTE[0].start_LBA,DPT.DPTE[0].type);
ffff800000813b49:	0f b6 85 a2 fd ff ff 	movzx  eax,BYTE PTR [rbp-0x25e]
ffff800000813b50:	0f b6 d0             	movzx  edx,al
ffff800000813b53:	8b 85 a6 fd ff ff    	mov    eax,DWORD PTR [rbp-0x25a]
ffff800000813b59:	89 c6                	mov    esi,eax
ffff800000813b5b:	48 b8 48 da ff ff ff 	movabs rax,0xffffffffffffda48
ffff800000813b62:	ff ff ff 
ffff800000813b65:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000813b69:	48 89 c7             	mov    rdi,rax
ffff800000813b6c:	49 89 df             	mov    r15,rbx
ffff800000813b6f:	b8 00 00 00 00       	mov    eax,0x0
ffff800000813b74:	48 b9 c9 ed ed ff ff 	movabs rcx,0xffffffffffededc9
ffff800000813b7b:	ff ff ff 
ffff800000813b7e:	48 01 d9             	add    rcx,rbx
ffff800000813b81:	ff d1                	call   rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:860

	memset(buf,0,512);
ffff800000813b83:	48 8d 85 e0 fd ff ff 	lea    rax,[rbp-0x220]
ffff800000813b8a:	ba 00 02 00 00       	mov    edx,0x200
ffff800000813b8f:	be 00 00 00 00       	mov    esi,0x0
ffff800000813b94:	48 89 c7             	mov    rdi,rax
ffff800000813b97:	49 89 df             	mov    r15,rbx
ffff800000813b9a:	48 b8 89 1e ef ff ff 	movabs rax,0xffffffffffef1e89
ffff800000813ba1:	ff ff ff 
ffff800000813ba4:	48 01 d8             	add    rax,rbx
ffff800000813ba7:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:861
	blkdev_read(ROOT_DEV,DPT.DPTE[0].start_LBA*512,512,buf);
ffff800000813ba9:	8b 85 a6 fd ff ff    	mov    eax,DWORD PTR [rbp-0x25a]
ffff800000813baf:	c1 e0 09             	shl    eax,0x9
ffff800000813bb2:	89 c6                	mov    esi,eax
ffff800000813bb4:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff800000813bbb:	ff ff ff 
ffff800000813bbe:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000813bc2:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000813bc4:	0f b7 c0             	movzx  eax,ax
ffff800000813bc7:	48 8d 95 e0 fd ff ff 	lea    rdx,[rbp-0x220]
ffff800000813bce:	48 89 d1             	mov    rcx,rdx
ffff800000813bd1:	ba 00 02 00 00       	mov    edx,0x200
ffff800000813bd6:	89 c7                	mov    edi,eax
ffff800000813bd8:	49 89 df             	mov    r15,rbx
ffff800000813bdb:	48 b8 34 cc ee ff ff 	movabs rax,0xffffffffffeecc34
ffff800000813be2:	ff ff ff 
ffff800000813be5:	48 01 d8             	add    rax,rbx
ffff800000813be8:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:864

    //挂载新文件系统到/
	struct super_block *fat32_sb= mount_fs("FAT32",&DPT.DPTE[0],buf);	//not dev node
ffff800000813bea:	48 8d 85 e0 fd ff ff 	lea    rax,[rbp-0x220]
ffff800000813bf1:	48 8d 95 e0 fb ff ff 	lea    rdx,[rbp-0x420]
ffff800000813bf8:	48 8d 8a be 01 00 00 	lea    rcx,[rdx+0x1be]
ffff800000813bff:	48 89 c2             	mov    rdx,rax
ffff800000813c02:	48 89 ce             	mov    rsi,rcx
ffff800000813c05:	48 b8 42 da ff ff ff 	movabs rax,0xffffffffffffda42
ffff800000813c0c:	ff ff ff 
ffff800000813c0f:	48 8d 04 03          	lea    rax,[rbx+rax*1]
ffff800000813c13:	48 89 c7             	mov    rdi,rax
ffff800000813c16:	49 89 df             	mov    r15,rbx
ffff800000813c19:	48 b8 00 a0 ee ff ff 	movabs rax,0xffffffffffeea000
ffff800000813c20:	ff ff ff 
ffff800000813c23:	48 01 d8             	add    rax,rbx
ffff800000813c26:	ff d0                	call   rax
ffff800000813c28:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:866
	
	root_sb=fat32_sb;
ffff800000813c2c:	48 b8 90 fd ff ff ff 	movabs rax,0xfffffffffffffd90
ffff800000813c33:	ff ff ff 
ffff800000813c36:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000813c3a:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000813c3e:	48 89 10             	mov    QWORD PTR [rax],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:867
	root_sb->dev=ROOT_DEV;
ffff800000813c41:	48 b8 90 ff ff ff ff 	movabs rax,0xffffffffffffff90
ffff800000813c48:	ff ff ff 
ffff800000813c4b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000813c4f:	8b 10                	mov    edx,DWORD PTR [rax]
ffff800000813c51:	48 b8 90 fd ff ff ff 	movabs rax,0xfffffffffffffd90
ffff800000813c58:	ff ff ff 
ffff800000813c5b:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000813c5f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000813c62:	66 89 50 10          	mov    WORD PTR [rax+0x10],dx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:868
	root_sb->p_dev=&bd_ramdisk;
ffff800000813c66:	48 b8 90 fd ff ff ff 	movabs rax,0xfffffffffffffd90
ffff800000813c6d:	ff ff ff 
ffff800000813c70:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000813c74:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000813c77:	48 ba 80 ff ff ff ff 	movabs rdx,0xffffffffffffff80
ffff800000813c7e:	ff ff ff 
ffff800000813c81:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000813c85:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:869
	mount_fs_on(droot,fat32_sb);//挂载到/上
ffff800000813c89:	48 b8 48 fd ff ff ff 	movabs rax,0xfffffffffffffd48
ffff800000813c90:	ff ff ff 
ffff800000813c93:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff800000813c97:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000813c9a:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000813c9e:	48 89 d6             	mov    rsi,rdx
ffff800000813ca1:	48 89 c7             	mov    rdi,rax
ffff800000813ca4:	49 89 df             	mov    r15,rbx
ffff800000813ca7:	48 b8 ad a0 ee ff ff 	movabs rax,0xffffffffffeea0ad
ffff800000813cae:	ff ff ff 
ffff800000813cb1:	48 01 d8             	add    rax,rbx
ffff800000813cb4:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/fat32.c:870
}
ffff800000813cb6:	90                   	nop
ffff800000813cb7:	48 81 c4 10 04 00 00 	add    rsp,0x410
ffff800000813cbe:	5b                   	pop    rbx
ffff800000813cbf:	41 5f                	pop    r15
ffff800000813cc1:	5d                   	pop    rbp
ffff800000813cc2:	c3                   	ret    

ffff800000813cc3 <close_tty>:
close_tty():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:12
int stdd=0;
struct file_operations tty_fops={
        .open=init_tty, .close=close_tty,.write=write_tty,.read=read_tty,.ioctl=ioctl_tty
};

long close_tty(struct index_node * inode,struct file * filp){
ffff800000813cc3:	f3 0f 1e fa          	endbr64 
ffff800000813cc7:	55                   	push   rbp
ffff800000813cc8:	48 89 e5             	mov    rbp,rsp
ffff800000813ccb:	41 57                	push   r15
ffff800000813ccd:	53                   	push   rbx
ffff800000813cce:	48 83 ec 30          	sub    rsp,0x30
ffff800000813cd2:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000813cd2 <close_tty+0xf>
ffff800000813cd9:	49 bb 26 ef 10 00 00 	movabs r11,0x10ef26
ffff800000813ce0:	00 00 00 
ffff800000813ce3:	4c 01 db             	add    rbx,r11
ffff800000813ce6:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000813cea:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:13
    stdbuf_t * bi=&((tty_t*)filp->private_data)->stdin_buf;
ffff800000813cee:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000813cf2:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000813cf6:	48 83 c0 18          	add    rax,0x18
ffff800000813cfa:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:14
    stdbuf_t * bo=&((tty_t*)filp->private_data)->stdout_buf;
ffff800000813cfe:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000813d02:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000813d06:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:15
    stdbuf_t * be=&((tty_t*)filp->private_data)->stderr_buf;
ffff800000813d0a:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000813d0e:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000813d12:	48 83 c0 30          	add    rax,0x30
ffff800000813d16:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:16
    kmfree((addr_t) bi);
ffff800000813d1a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813d1e:	48 89 c7             	mov    rdi,rax
ffff800000813d21:	49 89 df             	mov    r15,rbx
ffff800000813d24:	48 b8 6f 09 ee ff ff 	movabs rax,0xffffffffffee096f
ffff800000813d2b:	ff ff ff 
ffff800000813d2e:	48 01 d8             	add    rax,rbx
ffff800000813d31:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:17
    kmfree((addr_t) bo);
ffff800000813d33:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000813d37:	48 89 c7             	mov    rdi,rax
ffff800000813d3a:	49 89 df             	mov    r15,rbx
ffff800000813d3d:	48 b8 6f 09 ee ff ff 	movabs rax,0xffffffffffee096f
ffff800000813d44:	ff ff ff 
ffff800000813d47:	48 01 d8             	add    rax,rbx
ffff800000813d4a:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:18
    kmfree((addr_t) be);
ffff800000813d4c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000813d50:	48 89 c7             	mov    rdi,rax
ffff800000813d53:	49 89 df             	mov    r15,rbx
ffff800000813d56:	48 b8 6f 09 ee ff ff 	movabs rax,0xffffffffffee096f
ffff800000813d5d:	ff ff ff 
ffff800000813d60:	48 01 d8             	add    rax,rbx
ffff800000813d63:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:19
    kmfree((addr_t) filp->private_data);
ffff800000813d65:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffff800000813d69:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000813d6d:	48 89 c7             	mov    rdi,rax
ffff800000813d70:	49 89 df             	mov    r15,rbx
ffff800000813d73:	48 b8 6f 09 ee ff ff 	movabs rax,0xffffffffffee096f
ffff800000813d7a:	ff ff ff 
ffff800000813d7d:	48 01 d8             	add    rax,rbx
ffff800000813d80:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:20
    return 0;
ffff800000813d82:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:21
}
ffff800000813d87:	48 83 c4 30          	add    rsp,0x30
ffff800000813d8b:	5b                   	pop    rbx
ffff800000813d8c:	41 5f                	pop    r15
ffff800000813d8e:	5d                   	pop    rbp
ffff800000813d8f:	c3                   	ret    

ffff800000813d90 <init_tty>:
init_tty():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:24
//打开文件
long init_tty(struct index_node * inode,struct file * filp)
{
ffff800000813d90:	f3 0f 1e fa          	endbr64 
ffff800000813d94:	55                   	push   rbp
ffff800000813d95:	48 89 e5             	mov    rbp,rsp
ffff800000813d98:	41 57                	push   r15
ffff800000813d9a:	53                   	push   rbx
ffff800000813d9b:	48 83 ec 20          	sub    rsp,0x20
ffff800000813d9f:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000813d9f <init_tty+0xf>
ffff800000813da6:	49 bb 59 ee 10 00 00 	movabs r11,0x10ee59
ffff800000813dad:	00 00 00 
ffff800000813db0:	4c 01 db             	add    rbx,r11
ffff800000813db3:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000813db7:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:25
    tty_t *ntty=(tty_t*) kmalloc(0,PAGE_4K_SIZE);
ffff800000813dbb:	be 00 10 00 00       	mov    esi,0x1000
ffff800000813dc0:	bf 00 00 00 00       	mov    edi,0x0
ffff800000813dc5:	49 89 df             	mov    r15,rbx
ffff800000813dc8:	48 b8 ce 07 ee ff ff 	movabs rax,0xffffffffffee07ce
ffff800000813dcf:	ff ff ff 
ffff800000813dd2:	48 01 d8             	add    rax,rbx
ffff800000813dd5:	ff d0                	call   rax
ffff800000813dd7:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:27
    //创建三个缓冲区
    ntty->stdin_buf.data= (char*) kmalloc(0,PAGE_4K_SIZE);
ffff800000813ddb:	be 00 10 00 00       	mov    esi,0x1000
ffff800000813de0:	bf 00 00 00 00       	mov    edi,0x0
ffff800000813de5:	49 89 df             	mov    r15,rbx
ffff800000813de8:	48 b8 ce 07 ee ff ff 	movabs rax,0xffffffffffee07ce
ffff800000813def:	ff ff ff 
ffff800000813df2:	48 01 d8             	add    rax,rbx
ffff800000813df5:	ff d0                	call   rax
ffff800000813df7:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000813dfb:	48 89 42 18          	mov    QWORD PTR [rdx+0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:28
    ntty->stdout_buf.data=(char*) kmalloc(0,PAGE_4K_SIZE);
ffff800000813dff:	be 00 10 00 00       	mov    esi,0x1000
ffff800000813e04:	bf 00 00 00 00       	mov    edi,0x0
ffff800000813e09:	49 89 df             	mov    r15,rbx
ffff800000813e0c:	48 b8 ce 07 ee ff ff 	movabs rax,0xffffffffffee07ce
ffff800000813e13:	ff ff ff 
ffff800000813e16:	48 01 d8             	add    rax,rbx
ffff800000813e19:	ff d0                	call   rax
ffff800000813e1b:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000813e1f:	48 89 02             	mov    QWORD PTR [rdx],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:29
    ntty->stderr_buf.data=(char*) kmalloc(0,PAGE_4K_SIZE);
ffff800000813e22:	be 00 10 00 00       	mov    esi,0x1000
ffff800000813e27:	bf 00 00 00 00       	mov    edi,0x0
ffff800000813e2c:	49 89 df             	mov    r15,rbx
ffff800000813e2f:	48 b8 ce 07 ee ff ff 	movabs rax,0xffffffffffee07ce
ffff800000813e36:	ff ff ff 
ffff800000813e39:	48 01 d8             	add    rax,rbx
ffff800000813e3c:	ff d0                	call   rax
ffff800000813e3e:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000813e42:	48 89 42 30          	mov    QWORD PTR [rdx+0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:30
    ntty->stdin_buf. wptr= 0;
ffff800000813e46:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813e4a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [rax+0x20],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:31
    ntty->stdout_buf.wptr= 0;
ffff800000813e51:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813e55:	c7 40 08 00 00 00 00 	mov    DWORD PTR [rax+0x8],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:32
    ntty->stderr_buf.wptr= 0;
ffff800000813e5c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813e60:	c7 40 38 00 00 00 00 	mov    DWORD PTR [rax+0x38],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:33
    ntty->stdin_buf. rptr= 0;
ffff800000813e67:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813e6b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [rax+0x24],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:34
    ntty->stdout_buf.rptr= 0;
ffff800000813e72:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813e76:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [rax+0xc],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:35
    ntty->stderr_buf.rptr= 0;
ffff800000813e7d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813e81:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [rax+0x3c],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:36
    ntty->stdin_buf.size= PAGE_4K_SIZE;
ffff800000813e88:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813e8c:	c7 40 28 00 10 00 00 	mov    DWORD PTR [rax+0x28],0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:37
    ntty->stdout_buf.size= PAGE_4K_SIZE;
ffff800000813e93:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813e97:	c7 40 10 00 10 00 00 	mov    DWORD PTR [rax+0x10],0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:38
    ntty->stderr_buf.size= PAGE_4K_SIZE;
ffff800000813e9e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813ea2:	c7 40 40 00 10 00 00 	mov    DWORD PTR [rax+0x40],0x1000
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:40
    //设置inode文件操作方式为tty方式
    inode->f_ops=&tty_fops;
ffff800000813ea9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000813ead:	48 ba 70 fe ff ff ff 	movabs rdx,0xfffffffffffffe70
ffff800000813eb4:	ff ff ff 
ffff800000813eb7:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000813ebb:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:41
    filp->f_ops=&tty_fops;
ffff800000813ebf:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000813ec3:	48 ba 70 fe ff ff ff 	movabs rdx,0xfffffffffffffe70
ffff800000813eca:	ff ff ff 
ffff800000813ecd:	48 8b 14 13          	mov    rdx,QWORD PTR [rbx+rdx*1]
ffff800000813ed1:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:42
    filp->private_data=ntty;
ffff800000813ed5:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000813ed9:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffff800000813edd:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:43
    return 0;
ffff800000813ee1:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:44
}
ffff800000813ee6:	48 83 c4 20          	add    rsp,0x20
ffff800000813eea:	5b                   	pop    rbx
ffff800000813eeb:	41 5f                	pop    r15
ffff800000813eed:	5d                   	pop    rbp
ffff800000813eee:	c3                   	ret    

ffff800000813eef <read_tty>:
read_tty():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:47

long read_tty(struct file * filp,char * buf,unsigned long count,long * position)
{
ffff800000813eef:	f3 0f 1e fa          	endbr64 
ffff800000813ef3:	55                   	push   rbp
ffff800000813ef4:	48 89 e5             	mov    rbp,rsp
ffff800000813ef7:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000813ef7 <read_tty+0x8>
ffff800000813efe:	49 bb 01 ed 10 00 00 	movabs r11,0x10ed01
ffff800000813f05:	00 00 00 
ffff800000813f08:	4c 01 d8             	add    rax,r11
ffff800000813f0b:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000813f0f:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff800000813f13:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffff800000813f17:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:48
    stdbuf_t * b=&((tty_t*)filp->private_data)->stdin_buf;
ffff800000813f1b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000813f1f:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000813f23:	48 83 c0 18          	add    rax,0x18
ffff800000813f27:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:49
    int i=0;
ffff800000813f2b:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:50
    while (i<count){
ffff800000813f32:	eb 6e                	jmp    ffff800000813fa2 <read_tty+0xb3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:51
        if(b->rptr==b->size)
ffff800000813f34:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000813f38:	8b 50 0c             	mov    edx,DWORD PTR [rax+0xc]
ffff800000813f3b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000813f3f:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff800000813f42:	39 c2                	cmp    edx,eax
ffff800000813f44:	75 0b                	jne    ffff800000813f51 <read_tty+0x62>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:52
            b->rptr=0;
ffff800000813f46:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000813f4a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [rax+0xc],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:53
        if(b->rptr==b->wptr)continue;
ffff800000813f51:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000813f55:	8b 50 0c             	mov    edx,DWORD PTR [rax+0xc]
ffff800000813f58:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000813f5c:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff800000813f5f:	39 c2                	cmp    edx,eax
ffff800000813f61:	75 02                	jne    ffff800000813f65 <read_tty+0x76>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:53 (discriminator 1)
ffff800000813f63:	eb 3d                	jmp    ffff800000813fa2 <read_tty+0xb3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:54
        buf[i++]=b->data[b->rptr];
ffff800000813f65:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000813f69:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff800000813f6c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000813f70:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff800000813f73:	48 98                	cdqe   
ffff800000813f75:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
ffff800000813f79:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000813f7c:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000813f7f:	89 55 fc             	mov    DWORD PTR [rbp-0x4],edx
ffff800000813f82:	48 63 d0             	movsxd rdx,eax
ffff800000813f85:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000813f89:	48 01 c2             	add    rdx,rax
ffff800000813f8c:	0f b6 01             	movzx  eax,BYTE PTR [rcx]
ffff800000813f8f:	88 02                	mov    BYTE PTR [rdx],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:55
        b->rptr++;
ffff800000813f91:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000813f95:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffff800000813f98:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000813f9b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000813f9f:	89 50 0c             	mov    DWORD PTR [rax+0xc],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:50
    while (i<count){
ffff800000813fa2:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000813fa5:	48 98                	cdqe   
ffff800000813fa7:	48 39 45 d8          	cmp    QWORD PTR [rbp-0x28],rax
ffff800000813fab:	77 87                	ja     ffff800000813f34 <read_tty+0x45>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:57
    }
}
ffff800000813fad:	90                   	nop
ffff800000813fae:	5d                   	pop    rbp
ffff800000813faf:	c3                   	ret    

ffff800000813fb0 <write_tty>:
write_tty():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:59
long write_tty(struct file * filp,char * buf,unsigned long count,long * position)
{
ffff800000813fb0:	f3 0f 1e fa          	endbr64 
ffff800000813fb4:	55                   	push   rbp
ffff800000813fb5:	48 89 e5             	mov    rbp,rsp
ffff800000813fb8:	41 57                	push   r15
ffff800000813fba:	48 83 ec 48          	sub    rsp,0x48
ffff800000813fbe:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff800000813fbe <write_tty+0xe>
ffff800000813fc5:	49 bb 3a ec 10 00 00 	movabs r11,0x10ec3a
ffff800000813fcc:	00 00 00 
ffff800000813fcf:	4c 01 d8             	add    rax,r11
ffff800000813fd2:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffff800000813fd6:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffff800000813fda:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
ffff800000813fde:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:60
    stdbuf_t * b=&((tty_t*)filp->private_data)->stdout_buf;
ffff800000813fe2:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff800000813fe6:	48 8b 52 20          	mov    rdx,QWORD PTR [rdx+0x20]
ffff800000813fea:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:61
    int i=0;
ffff800000813fee:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:62
    int saved_wptr=b->wptr;
ffff800000813ff5:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000813ff9:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff800000813ffc:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:63
    while (i<count){
ffff800000813fff:	eb 5b                	jmp    ffff80000081405c <write_tty+0xac>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:64
        if(b->wptr==b->size)
ffff800000814001:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000814005:	8b 4a 08             	mov    ecx,DWORD PTR [rdx+0x8]
ffff800000814008:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000081400c:	8b 52 10             	mov    edx,DWORD PTR [rdx+0x10]
ffff80000081400f:	39 d1                	cmp    ecx,edx
ffff800000814011:	75 0b                	jne    ffff80000081401e <write_tty+0x6e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:65
            b->wptr=0;
ffff800000814013:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000814017:	c7 42 08 00 00 00 00 	mov    DWORD PTR [rdx+0x8],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:66
        b->data[b->wptr]=buf[i++];
ffff80000081401e:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000814021:	8d 4a 01             	lea    ecx,[rdx+0x1]
ffff800000814024:	89 4d ec             	mov    DWORD PTR [rbp-0x14],ecx
ffff800000814027:	48 63 ca             	movsxd rcx,edx
ffff80000081402a:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffff80000081402e:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff800000814032:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000814036:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff800000814039:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000081403d:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff800000814040:	48 63 d2             	movsxd rdx,edx
ffff800000814043:	48 01 d1             	add    rcx,rdx
ffff800000814046:	0f b6 16             	movzx  edx,BYTE PTR [rsi]
ffff800000814049:	88 11                	mov    BYTE PTR [rcx],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:67
        b->wptr++;
ffff80000081404b:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000081404f:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff800000814052:	8d 4a 01             	lea    ecx,[rdx+0x1]
ffff800000814055:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000814059:	89 4a 08             	mov    DWORD PTR [rdx+0x8],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:63
    while (i<count){
ffff80000081405c:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff80000081405f:	48 63 d2             	movsxd rdx,edx
ffff800000814062:	48 39 55 b8          	cmp    QWORD PTR [rbp-0x48],rdx
ffff800000814066:	77 99                	ja     ffff800000814001 <write_tty+0x51>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:70
    }
    //刷新到framebuffer
    write_framebuffer(filp,b->data+saved_wptr,count,0);
ffff800000814068:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000081406c:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000081406f:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffff800000814072:	48 63 d2             	movsxd rdx,edx
ffff800000814075:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff800000814079:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffff80000081407d:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
ffff800000814081:	b9 00 00 00 00       	mov    ecx,0x0
ffff800000814086:	49 89 c7             	mov    r15,rax
ffff800000814089:	49 b8 31 97 ee ff ff 	movabs r8,0xffffffffffee9731
ffff800000814090:	ff ff ff 
ffff800000814093:	49 01 c0             	add    r8,rax
ffff800000814096:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:71
}
ffff800000814099:	90                   	nop
ffff80000081409a:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff80000081409e:	c9                   	leave  
ffff80000081409f:	c3                   	ret    

ffff8000008140a0 <ioctl_tty>:
ioctl_tty():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:81
 * TTY_CONNECT:尝试连接到dev/console,这样会成为controlling terminal,里面的数据才能输出到屏幕上，
 * 因为除了特殊指定的进程都会有一个自己的天tty。
 * 成功返回0。
 * */
long ioctl_tty(struct index_node * inode, struct file * filp, unsigned long cmd, unsigned long arg)
{
ffff8000008140a0:	f3 0f 1e fa          	endbr64 
ffff8000008140a4:	55                   	push   rbp
ffff8000008140a5:	48 89 e5             	mov    rbp,rsp
ffff8000008140a8:	41 57                	push   r15
ffff8000008140aa:	48 83 ec 58          	sub    rsp,0x58
ffff8000008140ae:	48 8d 05 f9 ff ff ff 	lea    rax,[rip+0xfffffffffffffff9]        # ffff8000008140ae <ioctl_tty+0xe>
ffff8000008140b5:	49 bb 4a eb 10 00 00 	movabs r11,0x10eb4a
ffff8000008140bc:	00 00 00 
ffff8000008140bf:	4c 01 d8             	add    rax,r11
ffff8000008140c2:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
ffff8000008140c6:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
ffff8000008140ca:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
ffff8000008140ce:	48 89 4d a0          	mov    QWORD PTR [rbp-0x60],rcx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:82
    stdbuf_t * b=&((tty_t*)filp->private_data)->stderr_buf;
ffff8000008140d2:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffff8000008140d6:	48 8b 52 20          	mov    rdx,QWORD PTR [rdx+0x20]
ffff8000008140da:	48 83 c2 30          	add    rdx,0x30
ffff8000008140de:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:83
    stdbuf_t * ib=&((tty_t*)filp->private_data)->stdin_buf;
ffff8000008140e2:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffff8000008140e6:	48 8b 52 20          	mov    rdx,QWORD PTR [rdx+0x20]
ffff8000008140ea:	48 83 c2 18          	add    rdx,0x18
ffff8000008140ee:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:84
    int i=0;
ffff8000008140f2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:85
    char* buf=*((char**)arg);
ffff8000008140f9:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
ffff8000008140fd:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff800000814100:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:86
    unsigned long count=*((unsigned long*)(arg+8));
ffff800000814104:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
ffff800000814108:	48 83 c2 08          	add    rdx,0x8
ffff80000081410c:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffff80000081410f:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:87
    int saved_wptr=b->wptr;
ffff800000814113:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000814117:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff80000081411a:	89 55 c4             	mov    DWORD PTR [rbp-0x3c],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:88
    int fd=-1;
ffff80000081411d:	c7 45 c0 ff ff ff ff 	mov    DWORD PTR [rbp-0x40],0xffffffff
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:89
    switch (cmd)
ffff800000814124:	48 83 7d a8 03       	cmp    QWORD PTR [rbp-0x58],0x3
ffff800000814129:	0f 84 b8 01 00 00    	je     ffff8000008142e7 <ioctl_tty+0x247>
ffff80000081412f:	48 83 7d a8 03       	cmp    QWORD PTR [rbp-0x58],0x3
ffff800000814134:	0f 87 b8 01 00 00    	ja     ffff8000008142f2 <ioctl_tty+0x252>
ffff80000081413a:	48 83 7d a8 02       	cmp    QWORD PTR [rbp-0x58],0x2
ffff80000081413f:	0f 84 0f 01 00 00    	je     ffff800000814254 <ioctl_tty+0x1b4>
ffff800000814145:	48 83 7d a8 02       	cmp    QWORD PTR [rbp-0x58],0x2
ffff80000081414a:	0f 87 a2 01 00 00    	ja     ffff8000008142f2 <ioctl_tty+0x252>
ffff800000814150:	48 83 7d a8 00       	cmp    QWORD PTR [rbp-0x58],0x0
ffff800000814155:	74 6b                	je     ffff8000008141c2 <ioctl_tty+0x122>
ffff800000814157:	48 83 7d a8 01       	cmp    QWORD PTR [rbp-0x58],0x1
ffff80000081415c:	0f 84 a2 00 00 00    	je     ffff800000814204 <ioctl_tty+0x164>
ffff800000814162:	e9 8b 01 00 00       	jmp    ffff8000008142f2 <ioctl_tty+0x252>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:93
    {
        case TTY_WSTDERR:
            while (i<count){
                if(b->wptr==b->size)
ffff800000814167:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000081416b:	8b 4a 08             	mov    ecx,DWORD PTR [rdx+0x8]
ffff80000081416e:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff800000814172:	8b 52 10             	mov    edx,DWORD PTR [rdx+0x10]
ffff800000814175:	39 d1                	cmp    ecx,edx
ffff800000814177:	75 0b                	jne    ffff800000814184 <ioctl_tty+0xe4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:94
                    b->wptr=0;
ffff800000814179:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000081417d:	c7 42 08 00 00 00 00 	mov    DWORD PTR [rdx+0x8],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:95
                b->data[b->wptr]=buf[i++];
ffff800000814184:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff800000814187:	8d 4a 01             	lea    ecx,[rdx+0x1]
ffff80000081418a:	89 4d ec             	mov    DWORD PTR [rbp-0x14],ecx
ffff80000081418d:	48 63 ca             	movsxd rcx,edx
ffff800000814190:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffff800000814194:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff800000814198:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff80000081419c:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff80000081419f:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008141a3:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff8000008141a6:	48 63 d2             	movsxd rdx,edx
ffff8000008141a9:	48 01 d1             	add    rcx,rdx
ffff8000008141ac:	0f b6 16             	movzx  edx,BYTE PTR [rsi]
ffff8000008141af:	88 11                	mov    BYTE PTR [rcx],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:96
                b->wptr++;
ffff8000008141b1:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008141b5:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffff8000008141b8:	8d 4a 01             	lea    ecx,[rdx+0x1]
ffff8000008141bb:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008141bf:	89 4a 08             	mov    DWORD PTR [rdx+0x8],ecx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:92
            while (i<count){
ffff8000008141c2:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffff8000008141c5:	48 63 d2             	movsxd rdx,edx
ffff8000008141c8:	48 39 55 c8          	cmp    QWORD PTR [rbp-0x38],rdx
ffff8000008141cc:	77 99                	ja     ffff800000814167 <ioctl_tty+0xc7>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:99
            }
            //刷新到framebuffer
            write_framebuffer(filp,b->data+saved_wptr,count,0);
ffff8000008141ce:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffff8000008141d2:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffff8000008141d5:	8b 55 c4             	mov    edx,DWORD PTR [rbp-0x3c]
ffff8000008141d8:	48 63 d2             	movsxd rdx,edx
ffff8000008141db:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
ffff8000008141df:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffff8000008141e3:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
ffff8000008141e7:	b9 00 00 00 00       	mov    ecx,0x0
ffff8000008141ec:	49 89 c7             	mov    r15,rax
ffff8000008141ef:	49 b8 31 97 ee ff ff 	movabs r8,0xffffffffffee9731
ffff8000008141f6:	ff ff ff 
ffff8000008141f9:	49 01 c0             	add    r8,rax
ffff8000008141fc:	41 ff d0             	call   r8
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:100
        break;
ffff8000008141ff:	e9 f7 00 00 00       	jmp    ffff8000008142fb <ioctl_tty+0x25b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:102
        case TTY_CONNECT:
            fd=sys_open("dev/console",O_WRONLY|O_CREAT|O_EXCL);
ffff800000814204:	be c1 00 00 00       	mov    esi,0xc1
ffff800000814209:	48 ba 66 da ff ff ff 	movabs rdx,0xffffffffffffda66
ffff800000814210:	ff ff ff 
ffff800000814213:	48 8d 14 10          	lea    rdx,[rax+rdx*1]
ffff800000814217:	48 89 d7             	mov    rdi,rdx
ffff80000081421a:	49 89 c7             	mov    r15,rax
ffff80000081421d:	48 ba fe a5 ee ff ff 	movabs rdx,0xffffffffffeea5fe
ffff800000814224:	ff ff ff 
ffff800000814227:	48 01 c2             	add    rdx,rax
ffff80000081422a:	ff d2                	call   rdx
ffff80000081422c:	89 45 c0             	mov    DWORD PTR [rbp-0x40],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:103
            if(fd==-1)return -1;
ffff80000081422f:	83 7d c0 ff          	cmp    DWORD PTR [rbp-0x40],0xffffffff
ffff800000814233:	75 0c                	jne    ffff800000814241 <ioctl_tty+0x1a1>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:103 (discriminator 1)
ffff800000814235:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff80000081423c:	e9 bf 00 00 00       	jmp    ffff800000814300 <ioctl_tty+0x260>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:104
            ((tty_t*)filp->private_data)->console_fd=fd;
ffff800000814241:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffff800000814245:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffff800000814249:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
ffff80000081424c:	89 50 48             	mov    DWORD PTR [rax+0x48],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:105
            break;
ffff80000081424f:	e9 a7 00 00 00       	jmp    ffff8000008142fb <ioctl_tty+0x25b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:107
        case TTY_DISCONNECT:
            fd=((tty_t*)filp->private_data)->console_fd;
ffff800000814254:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffff800000814258:	48 8b 52 20          	mov    rdx,QWORD PTR [rdx+0x20]
ffff80000081425c:	8b 52 48             	mov    edx,DWORD PTR [rdx+0x48]
ffff80000081425f:	89 55 c0             	mov    DWORD PTR [rbp-0x40],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:108
            if(fd==-1)return -1;
ffff800000814262:	83 7d c0 ff          	cmp    DWORD PTR [rbp-0x40],0xffffffff
ffff800000814266:	75 0c                	jne    ffff800000814274 <ioctl_tty+0x1d4>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:108 (discriminator 1)
ffff800000814268:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff80000081426f:	e9 8c 00 00 00       	jmp    ffff800000814300 <ioctl_tty+0x260>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:109
            sys_close(fd);
ffff800000814274:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
ffff800000814277:	89 d7                	mov    edi,edx
ffff800000814279:	49 89 c7             	mov    r15,rax
ffff80000081427c:	48 ba 32 ac ee ff ff 	movabs rdx,0xffffffffffeeac32
ffff800000814283:	ff ff ff 
ffff800000814286:	48 01 c2             	add    rdx,rax
ffff800000814289:	ff d2                	call   rdx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:111
        case TTY_WSTDIN:
            while (i<count){
ffff80000081428b:	eb 5a                	jmp    ffff8000008142e7 <ioctl_tty+0x247>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:112
                if(ib->wptr==ib->size)
ffff80000081428d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000814291:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffff800000814294:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000814298:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffff80000081429b:	39 c2                	cmp    edx,eax
ffff80000081429d:	75 0b                	jne    ffff8000008142aa <ioctl_tty+0x20a>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:113
                    ib->wptr=0;
ffff80000081429f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008142a3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [rax+0x8],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:114
                ib->data[ib->wptr]=buf[i++];
ffff8000008142aa:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008142ad:	8d 50 01             	lea    edx,[rax+0x1]
ffff8000008142b0:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
ffff8000008142b3:	48 63 d0             	movsxd rdx,eax
ffff8000008142b6:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff8000008142ba:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
ffff8000008142be:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008142c2:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffff8000008142c5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008142c9:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff8000008142cc:	48 98                	cdqe   
ffff8000008142ce:	48 01 c2             	add    rdx,rax
ffff8000008142d1:	0f b6 01             	movzx  eax,BYTE PTR [rcx]
ffff8000008142d4:	88 02                	mov    BYTE PTR [rdx],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:115
                ib->wptr++;
ffff8000008142d6:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008142da:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffff8000008142dd:	8d 50 01             	lea    edx,[rax+0x1]
ffff8000008142e0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008142e4:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:111
            while (i<count){
ffff8000008142e7:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008142ea:	48 98                	cdqe   
ffff8000008142ec:	48 39 45 c8          	cmp    QWORD PTR [rbp-0x38],rax
ffff8000008142f0:	77 9b                	ja     ffff80000081428d <ioctl_tty+0x1ed>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:117
            }
    default:return -1;
ffff8000008142f2:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffff8000008142f9:	eb 05                	jmp    ffff800000814300 <ioctl_tty+0x260>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:119
    }
    return 0;
ffff8000008142fb:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/mods/tty.c:120
}
ffff800000814300:	4c 8b 7d f8          	mov    r15,QWORD PTR [rbp-0x8]
ffff800000814304:	c9                   	leave  
ffff800000814305:	c3                   	ret    

ffff800000814306 <init_com>:
init_com():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:12
#include "str.h"
#include "memory.h"
#include "mem.h"

char combuf[1024];
void init_com(int base_port){
ffff800000814306:	f3 0f 1e fa          	endbr64 
ffff80000081430a:	55                   	push   rbp
ffff80000081430b:	48 89 e5             	mov    rbp,rsp
ffff80000081430e:	41 57                	push   r15
ffff800000814310:	53                   	push   rbx
ffff800000814311:	48 83 ec 10          	sub    rsp,0x10
ffff800000814315:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000814315 <init_com+0xf>
ffff80000081431c:	49 bb e3 e8 10 00 00 	movabs r11,0x10e8e3
ffff800000814323:	00 00 00 
ffff800000814326:	4c 01 db             	add    rbx,r11
ffff800000814329:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:14
    /* disable all interrupts */
    outb(base_port + COM_REG_IER, 0x00);
ffff80000081432c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000081432f:	83 c0 01             	add    eax,0x1
ffff800000814332:	0f b7 c0             	movzx  eax,ax
ffff800000814335:	be 00 00 00 00       	mov    esi,0x0
ffff80000081433a:	89 c7                	mov    edi,eax
ffff80000081433c:	49 89 df             	mov    r15,rbx
ffff80000081433f:	48 b8 78 65 ee ff ff 	movabs rax,0xffffffffffee6578
ffff800000814346:	ff ff ff 
ffff800000814349:	48 01 d8             	add    rax,rbx
ffff80000081434c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:17
    
    /* enable DLAB to set bound rate divisor */
    outb(base_port + COM_REG_LCR, 0x80);
ffff80000081434e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000814351:	83 c0 03             	add    eax,0x3
ffff800000814354:	0f b7 c0             	movzx  eax,ax
ffff800000814357:	be 80 00 00 00       	mov    esi,0x80
ffff80000081435c:	89 c7                	mov    edi,eax
ffff80000081435e:	49 89 df             	mov    r15,rbx
ffff800000814361:	48 b8 78 65 ee ff ff 	movabs rax,0xffffffffffee6578
ffff800000814368:	ff ff ff 
ffff80000081436b:	48 01 d8             	add    rax,rbx
ffff80000081436e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:20
    
    /* set divisor to 38400 baud */
    outb(base_port + COM_REG_DLL, 0x03);
ffff800000814370:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000814373:	0f b7 c0             	movzx  eax,ax
ffff800000814376:	be 03 00 00 00       	mov    esi,0x3
ffff80000081437b:	89 c7                	mov    edi,eax
ffff80000081437d:	49 89 df             	mov    r15,rbx
ffff800000814380:	48 b8 78 65 ee ff ff 	movabs rax,0xffffffffffee6578
ffff800000814387:	ff ff ff 
ffff80000081438a:	48 01 d8             	add    rax,rbx
ffff80000081438d:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:21
    outb(base_port + COM_REG_DLM, 0x00);
ffff80000081438f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff800000814392:	83 c0 01             	add    eax,0x1
ffff800000814395:	0f b7 c0             	movzx  eax,ax
ffff800000814398:	be 00 00 00 00       	mov    esi,0x0
ffff80000081439d:	89 c7                	mov    edi,eax
ffff80000081439f:	49 89 df             	mov    r15,rbx
ffff8000008143a2:	48 b8 78 65 ee ff ff 	movabs rax,0xffffffffffee6578
ffff8000008143a9:	ff ff ff 
ffff8000008143ac:	48 01 d8             	add    rax,rbx
ffff8000008143af:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:24
    
    /* 8 data bits, parity off, 1 stop bit, DLAB latch off */
    outb(base_port + COM_REG_LCR, 0x03);
ffff8000008143b1:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008143b4:	83 c0 03             	add    eax,0x3
ffff8000008143b7:	0f b7 c0             	movzx  eax,ax
ffff8000008143ba:	be 03 00 00 00       	mov    esi,0x3
ffff8000008143bf:	89 c7                	mov    edi,eax
ffff8000008143c1:	49 89 df             	mov    r15,rbx
ffff8000008143c4:	48 b8 78 65 ee ff ff 	movabs rax,0xffffffffffee6578
ffff8000008143cb:	ff ff ff 
ffff8000008143ce:	48 01 d8             	add    rax,rbx
ffff8000008143d1:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:27
    
    /* enable FIFO */
    outb(base_port + COM_REG_FCR, 0x87);//0xc7
ffff8000008143d3:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008143d6:	83 c0 02             	add    eax,0x2
ffff8000008143d9:	0f b7 c0             	movzx  eax,ax
ffff8000008143dc:	be 87 00 00 00       	mov    esi,0x87
ffff8000008143e1:	89 c7                	mov    edi,eax
ffff8000008143e3:	49 89 df             	mov    r15,rbx
ffff8000008143e6:	48 b8 78 65 ee ff ff 	movabs rax,0xffffffffffee6578
ffff8000008143ed:	ff ff ff 
ffff8000008143f0:	48 01 d8             	add    rax,rbx
ffff8000008143f3:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:30

    /* enable IRQs, set RTS/DSR */
    outb(base_port + COM_REG_MCR, 0x0B);
ffff8000008143f5:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff8000008143f8:	83 c0 04             	add    eax,0x4
ffff8000008143fb:	0f b7 c0             	movzx  eax,ax
ffff8000008143fe:	be 0b 00 00 00       	mov    esi,0xb
ffff800000814403:	89 c7                	mov    edi,eax
ffff800000814405:	49 89 df             	mov    r15,rbx
ffff800000814408:	48 b8 78 65 ee ff ff 	movabs rax,0xffffffffffee6578
ffff80000081440f:	ff ff ff 
ffff800000814412:	48 01 d8             	add    rax,rbx
ffff800000814415:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:44
//    if (inb(base_port + COM_REG_RX) != 0xae) {
//        return;
//    }
    
    /* set in normal mode */
    outb(base_port + COM_REG_MCR, 0x0F);
ffff800000814417:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffff80000081441a:	83 c0 04             	add    eax,0x4
ffff80000081441d:	0f b7 c0             	movzx  eax,ax
ffff800000814420:	be 0f 00 00 00       	mov    esi,0xf
ffff800000814425:	89 c7                	mov    edi,eax
ffff800000814427:	49 89 df             	mov    r15,rbx
ffff80000081442a:	48 b8 78 65 ee ff ff 	movabs rax,0xffffffffffee6578
ffff800000814431:	ff ff ff 
ffff800000814434:	48 01 d8             	add    rax,rbx
ffff800000814437:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:45
}
ffff800000814439:	90                   	nop
ffff80000081443a:	48 83 c4 10          	add    rsp,0x10
ffff80000081443e:	5b                   	pop    rbx
ffff80000081443f:	41 5f                	pop    r15
ffff800000814441:	5d                   	pop    rbp
ffff800000814442:	c3                   	ret    

ffff800000814443 <com_putchar>:
com_putchar():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:47
void com_putchar(unsigned short ch,int com_base)
{
ffff800000814443:	f3 0f 1e fa          	endbr64 
ffff800000814447:	55                   	push   rbp
ffff800000814448:	48 89 e5             	mov    rbp,rsp
ffff80000081444b:	41 57                	push   r15
ffff80000081444d:	53                   	push   rbx
ffff80000081444e:	48 83 ec 20          	sub    rsp,0x20
ffff800000814452:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000814452 <com_putchar+0xf>
ffff800000814459:	49 bb a6 e7 10 00 00 	movabs r11,0x10e7a6
ffff800000814460:	00 00 00 
ffff800000814463:	4c 01 db             	add    rbx,r11
ffff800000814466:	89 f8                	mov    eax,edi
ffff800000814468:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffff80000081446b:	66 89 45 dc          	mov    WORD PTR [rbp-0x24],ax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:51 (discriminator 1)
    unsigned char res;
    /* wait for the port to be ready */
    do {
        res = inb(com_base + COM_REG_LSR);
ffff80000081446f:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff800000814472:	83 c0 05             	add    eax,0x5
ffff800000814475:	0f b6 c0             	movzx  eax,al
ffff800000814478:	89 c7                	mov    edi,eax
ffff80000081447a:	49 89 df             	mov    r15,rbx
ffff80000081447d:	48 b8 91 65 ee ff ff 	movabs rax,0xffffffffffee6591
ffff800000814484:	ff ff ff 
ffff800000814487:	48 01 d8             	add    rax,rbx
ffff80000081448a:	ff d0                	call   rax
ffff80000081448c:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:52 (discriminator 1)
        res &= 0x20;
ffff80000081448f:	80 65 ef 20          	and    BYTE PTR [rbp-0x11],0x20
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:53 (discriminator 1)
    } while (res == 0);
ffff800000814493:	80 7d ef 00          	cmp    BYTE PTR [rbp-0x11],0x0
ffff800000814497:	74 d6                	je     ffff80000081446f <com_putchar+0x2c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:54
    outb(com_base, ch);
ffff800000814499:	0f b7 45 dc          	movzx  eax,WORD PTR [rbp-0x24]
ffff80000081449d:	0f b6 d0             	movzx  edx,al
ffff8000008144a0:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffff8000008144a3:	0f b7 c0             	movzx  eax,ax
ffff8000008144a6:	89 d6                	mov    esi,edx
ffff8000008144a8:	89 c7                	mov    edi,eax
ffff8000008144aa:	49 89 df             	mov    r15,rbx
ffff8000008144ad:	48 b8 78 65 ee ff ff 	movabs rax,0xffffffffffee6578
ffff8000008144b4:	ff ff ff 
ffff8000008144b7:	48 01 d8             	add    rax,rbx
ffff8000008144ba:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:55
}
ffff8000008144bc:	90                   	nop
ffff8000008144bd:	48 83 c4 20          	add    rsp,0x20
ffff8000008144c1:	5b                   	pop    rbx
ffff8000008144c2:	41 5f                	pop    r15
ffff8000008144c4:	5d                   	pop    rbp
ffff8000008144c5:	c3                   	ret    

ffff8000008144c6 <com_puts>:
com_puts():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:57

void com_puts(char* s,int com_port){
ffff8000008144c6:	f3 0f 1e fa          	endbr64 
ffff8000008144ca:	55                   	push   rbp
ffff8000008144cb:	48 89 e5             	mov    rbp,rsp
ffff8000008144ce:	41 57                	push   r15
ffff8000008144d0:	53                   	push   rbx
ffff8000008144d1:	48 83 ec 10          	sub    rsp,0x10
ffff8000008144d5:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff8000008144d5 <com_puts+0xf>
ffff8000008144dc:	49 bb 23 e7 10 00 00 	movabs r11,0x10e723
ffff8000008144e3:	00 00 00 
ffff8000008144e6:	4c 01 db             	add    rbx,r11
ffff8000008144e9:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff8000008144ed:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:58
    for(;*s;s++){
ffff8000008144f0:	eb 2a                	jmp    ffff80000081451c <com_puts+0x56>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:59 (discriminator 2)
        com_putchar(*s,com_port);
ffff8000008144f2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008144f6:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008144f9:	66 98                	cbw    
ffff8000008144fb:	0f b7 c0             	movzx  eax,ax
ffff8000008144fe:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffff800000814501:	89 d6                	mov    esi,edx
ffff800000814503:	89 c7                	mov    edi,eax
ffff800000814505:	49 89 df             	mov    r15,rbx
ffff800000814508:	48 b8 4b 18 ef ff ff 	movabs rax,0xffffffffffef184b
ffff80000081450f:	ff ff ff 
ffff800000814512:	48 01 d8             	add    rax,rbx
ffff800000814515:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:58 (discriminator 2)
    for(;*s;s++){
ffff800000814517:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:58 (discriminator 1)
ffff80000081451c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000814520:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000814523:	84 c0                	test   al,al
ffff800000814525:	75 cb                	jne    ffff8000008144f2 <com_puts+0x2c>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:61
    }
}
ffff800000814527:	90                   	nop
ffff800000814528:	90                   	nop
ffff800000814529:	48 83 c4 10          	add    rsp,0x10
ffff80000081452d:	5b                   	pop    rbx
ffff80000081452e:	41 5f                	pop    r15
ffff800000814530:	5d                   	pop    rbp
ffff800000814531:	c3                   	ret    

ffff800000814532 <comprintf>:
comprintf():
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:63

void comprintf(char* fmt,...){
ffff800000814532:	f3 0f 1e fa          	endbr64 
ffff800000814536:	55                   	push   rbp
ffff800000814537:	48 89 e5             	mov    rbp,rsp
ffff80000081453a:	41 57                	push   r15
ffff80000081453c:	53                   	push   rbx
ffff80000081453d:	48 81 ec 10 01 00 00 	sub    rsp,0x110
ffff800000814544:	48 8d 1d f9 ff ff ff 	lea    rbx,[rip+0xfffffffffffffff9]        # ffff800000814544 <comprintf+0x12>
ffff80000081454b:	49 bb b4 e6 10 00 00 	movabs r11,0x10e6b4
ffff800000814552:	00 00 00 
ffff800000814555:	4c 01 db             	add    rbx,r11
ffff800000814558:	48 89 bd e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rdi
ffff80000081455f:	48 89 b5 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rsi
ffff800000814566:	48 89 95 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rdx
ffff80000081456d:	48 89 8d 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rcx
ffff800000814574:	4c 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],r8
ffff80000081457b:	4c 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],r9
ffff800000814582:	84 c0                	test   al,al
ffff800000814584:	74 23                	je     ffff8000008145a9 <comprintf+0x77>
ffff800000814586:	0f 29 85 70 ff ff ff 	movaps XMMWORD PTR [rbp-0x90],xmm0
ffff80000081458d:	0f 29 4d 80          	movaps XMMWORD PTR [rbp-0x80],xmm1
ffff800000814591:	0f 29 55 90          	movaps XMMWORD PTR [rbp-0x70],xmm2
ffff800000814595:	0f 29 5d a0          	movaps XMMWORD PTR [rbp-0x60],xmm3
ffff800000814599:	0f 29 65 b0          	movaps XMMWORD PTR [rbp-0x50],xmm4
ffff80000081459d:	0f 29 6d c0          	movaps XMMWORD PTR [rbp-0x40],xmm5
ffff8000008145a1:	0f 29 75 d0          	movaps XMMWORD PTR [rbp-0x30],xmm6
ffff8000008145a5:	0f 29 7d e0          	movaps XMMWORD PTR [rbp-0x20],xmm7
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:64
    if(strlen(fmt)>=1024)
ffff8000008145a9:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
ffff8000008145b0:	48 89 c7             	mov    rdi,rax
ffff8000008145b3:	49 89 df             	mov    r15,rbx
ffff8000008145b6:	48 b8 ab 21 ef ff ff 	movabs rax,0xffffffffffef21ab
ffff8000008145bd:	ff ff ff 
ffff8000008145c0:	48 01 d8             	add    rax,rbx
ffff8000008145c3:	ff d0                	call   rax
ffff8000008145c5:	3d ff 03 00 00       	cmp    eax,0x3ff
ffff8000008145ca:	0f 8f f5 03 00 00    	jg     ffff8000008149c5 <comprintf+0x493>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:67
        return;//一次性输出不了太长
    //这里不使用kmalloc
    char* tmp=combuf;
ffff8000008145d0:	48 b8 18 fd ff ff ff 	movabs rax,0xfffffffffffffd18
ffff8000008145d7:	ff ff ff 
ffff8000008145da:	48 8b 04 03          	mov    rax,QWORD PTR [rbx+rax*1]
ffff8000008145de:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:68
    memset(tmp,0, sizeof(combuf));
ffff8000008145e5:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff8000008145ec:	ba 00 04 00 00       	mov    edx,0x400
ffff8000008145f1:	be 00 00 00 00       	mov    esi,0x0
ffff8000008145f6:	48 89 c7             	mov    rdi,rax
ffff8000008145f9:	49 89 df             	mov    r15,rbx
ffff8000008145fc:	48 b8 89 1e ef ff ff 	movabs rax,0xffffffffffef1e89
ffff800000814603:	ff ff ff 
ffff800000814606:	48 01 d8             	add    rax,rbx
ffff800000814609:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:70
    //count num of args
    char *pstr=fmt;
ffff80000081460b:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
ffff800000814612:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:71
    char *prev=fmt;
ffff800000814619:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
ffff800000814620:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:74

    va_list vargs;
    va_start(vargs,fmt);
ffff800000814627:	c7 85 f0 fe ff ff 08 	mov    DWORD PTR [rbp-0x110],0x8
ffff80000081462e:	00 00 00 
ffff800000814631:	c7 85 f4 fe ff ff 30 	mov    DWORD PTR [rbp-0x10c],0x30
ffff800000814638:	00 00 00 
ffff80000081463b:	48 8d 45 10          	lea    rax,[rbp+0x10]
ffff80000081463f:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
ffff800000814646:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
ffff80000081464d:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:75
    pstr=fmt;
ffff800000814654:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
ffff80000081465b:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:76
    for(;*pstr!='\0';pstr++){
ffff800000814662:	e9 29 03 00 00       	jmp    ffff800000814990 <comprintf+0x45e>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:77
        if(*pstr=='%'&&*(pstr+1)!='\0'){
ffff800000814667:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff80000081466e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000814671:	3c 25                	cmp    al,0x25
ffff800000814673:	0f 85 e4 02 00 00    	jne    ffff80000081495d <comprintf+0x42b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:77 (discriminator 1)
ffff800000814679:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000814680:	48 83 c0 01          	add    rax,0x1
ffff800000814684:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000814687:	84 c0                	test   al,al
ffff800000814689:	0f 84 ce 02 00 00    	je     ffff80000081495d <comprintf+0x42b>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:78
            pstr++;
ffff80000081468f:	48 83 85 38 ff ff ff 	add    QWORD PTR [rbp-0xc8],0x1
ffff800000814696:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:79
            if(*pstr=='x'){
ffff800000814697:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff80000081469e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008146a1:	3c 78                	cmp    al,0x78
ffff8000008146a3:	75 70                	jne    ffff800000814715 <comprintf+0x1e3>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:80
                int v=va_arg(vargs,int);
ffff8000008146a5:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x110]
ffff8000008146ab:	83 f8 2f             	cmp    eax,0x2f
ffff8000008146ae:	77 23                	ja     ffff8000008146d3 <comprintf+0x1a1>
ffff8000008146b0:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff8000008146b7:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff8000008146bd:	89 d2                	mov    edx,edx
ffff8000008146bf:	48 01 d0             	add    rax,rdx
ffff8000008146c2:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff8000008146c8:	83 c2 08             	add    edx,0x8
ffff8000008146cb:	89 95 f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],edx
ffff8000008146d1:	eb 12                	jmp    ffff8000008146e5 <comprintf+0x1b3>
ffff8000008146d3:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff8000008146da:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff8000008146de:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
ffff8000008146e5:	8b 00                	mov    eax,DWORD PTR [rax]
ffff8000008146e7:	89 85 24 ff ff ff    	mov    DWORD PTR [rbp-0xdc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:81
                sprint_hex(tmp,v);
ffff8000008146ed:	8b 85 24 ff ff ff    	mov    eax,DWORD PTR [rbp-0xdc]
ffff8000008146f3:	48 63 d0             	movsxd rdx,eax
ffff8000008146f6:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff8000008146fd:	48 89 d6             	mov    rsi,rdx
ffff800000814700:	48 89 c7             	mov    rdi,rax
ffff800000814703:	49 89 df             	mov    r15,rbx
ffff800000814706:	48 b8 fe 25 ef ff ff 	movabs rax,0xffffffffffef25fe
ffff80000081470d:	ff ff ff 
ffff800000814710:	48 01 d8             	add    rax,rbx
ffff800000814713:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:82
            }if(*pstr=='l'){
ffff800000814715:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff80000081471c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081471f:	3c 6c                	cmp    al,0x6c
ffff800000814721:	75 75                	jne    ffff800000814798 <comprintf+0x266>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:83
                unsigned long long v=va_arg(vargs,unsigned long long);
ffff800000814723:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x110]
ffff800000814729:	83 f8 2f             	cmp    eax,0x2f
ffff80000081472c:	77 23                	ja     ffff800000814751 <comprintf+0x21f>
ffff80000081472e:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff800000814735:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff80000081473b:	89 d2                	mov    edx,edx
ffff80000081473d:	48 01 d0             	add    rax,rdx
ffff800000814740:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff800000814746:	83 c2 08             	add    edx,0x8
ffff800000814749:	89 95 f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],edx
ffff80000081474f:	eb 12                	jmp    ffff800000814763 <comprintf+0x231>
ffff800000814751:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000814758:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff80000081475c:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
ffff800000814763:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000814766:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:84
                sprint_hex(tmp,v);
ffff80000081476d:	48 8b 95 08 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf8]
ffff800000814774:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff80000081477b:	48 89 d6             	mov    rsi,rdx
ffff80000081477e:	48 89 c7             	mov    rdi,rax
ffff800000814781:	49 89 df             	mov    r15,rbx
ffff800000814784:	48 b8 fe 25 ef ff ff 	movabs rax,0xffffffffffef25fe
ffff80000081478b:	ff ff ff 
ffff80000081478e:	48 01 d8             	add    rax,rbx
ffff800000814791:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:82
            }if(*pstr=='l'){
ffff800000814793:	e9 f0 01 00 00       	jmp    ffff800000814988 <comprintf+0x456>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:85
            }else if(*pstr=='s'){
ffff800000814798:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff80000081479f:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008147a2:	3c 73                	cmp    al,0x73
ffff8000008147a4:	75 75                	jne    ffff80000081481b <comprintf+0x2e9>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:86
                char* v=va_arg(vargs,char*);
ffff8000008147a6:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x110]
ffff8000008147ac:	83 f8 2f             	cmp    eax,0x2f
ffff8000008147af:	77 23                	ja     ffff8000008147d4 <comprintf+0x2a2>
ffff8000008147b1:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff8000008147b8:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff8000008147be:	89 d2                	mov    edx,edx
ffff8000008147c0:	48 01 d0             	add    rax,rdx
ffff8000008147c3:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff8000008147c9:	83 c2 08             	add    edx,0x8
ffff8000008147cc:	89 95 f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],edx
ffff8000008147d2:	eb 12                	jmp    ffff8000008147e6 <comprintf+0x2b4>
ffff8000008147d4:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff8000008147db:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff8000008147df:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
ffff8000008147e6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff8000008147e9:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:87
                sprintn(tmp,v);
ffff8000008147f0:	48 8b 95 10 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf0]
ffff8000008147f7:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff8000008147fe:	48 89 d6             	mov    rsi,rdx
ffff800000814801:	48 89 c7             	mov    rdi,rax
ffff800000814804:	49 89 df             	mov    r15,rbx
ffff800000814807:	48 b8 8c 26 ef ff ff 	movabs rax,0xffffffffffef268c
ffff80000081480e:	ff ff ff 
ffff800000814811:	48 01 d8             	add    rax,rbx
ffff800000814814:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:82
            }if(*pstr=='l'){
ffff800000814816:	e9 6d 01 00 00       	jmp    ffff800000814988 <comprintf+0x456>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:88
            }else if(*pstr=='d'){
ffff80000081481b:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000814822:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000814825:	3c 64                	cmp    al,0x64
ffff800000814827:	75 76                	jne    ffff80000081489f <comprintf+0x36d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:89
                char* v=va_arg(vargs,char*);
ffff800000814829:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x110]
ffff80000081482f:	83 f8 2f             	cmp    eax,0x2f
ffff800000814832:	77 23                	ja     ffff800000814857 <comprintf+0x325>
ffff800000814834:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff80000081483b:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff800000814841:	89 d2                	mov    edx,edx
ffff800000814843:	48 01 d0             	add    rax,rdx
ffff800000814846:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff80000081484c:	83 c2 08             	add    edx,0x8
ffff80000081484f:	89 95 f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],edx
ffff800000814855:	eb 12                	jmp    ffff800000814869 <comprintf+0x337>
ffff800000814857:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff80000081485e:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000814862:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
ffff800000814869:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff80000081486c:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:90
                sprint_decimal(tmp,v);
ffff800000814873:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
ffff80000081487a:	89 c2                	mov    edx,eax
ffff80000081487c:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000814883:	89 d6                	mov    esi,edx
ffff800000814885:	48 89 c7             	mov    rdi,rax
ffff800000814888:	49 89 df             	mov    r15,rbx
ffff80000081488b:	48 b8 43 25 ef ff ff 	movabs rax,0xffffffffffef2543
ffff800000814892:	ff ff ff 
ffff800000814895:	48 01 d8             	add    rax,rbx
ffff800000814898:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:82
            }if(*pstr=='l'){
ffff80000081489a:	e9 e9 00 00 00       	jmp    ffff800000814988 <comprintf+0x456>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:91
            }else if(*pstr=='c'){
ffff80000081489f:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff8000008148a6:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008148a9:	3c 63                	cmp    al,0x63
ffff8000008148ab:	75 02                	jne    ffff8000008148af <comprintf+0x37d>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:92
                char v=va_arg(vargs,char);
ffff8000008148ad:	0f 0b                	ud2    
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:94
                sprintchar(tmp,v);
            }else if(*pstr=='p') {
ffff8000008148af:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff8000008148b6:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008148b9:	3c 70                	cmp    al,0x70
ffff8000008148bb:	75 73                	jne    ffff800000814930 <comprintf+0x3fe>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:95
                int v=va_arg(vargs,addr_t);
ffff8000008148bd:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x110]
ffff8000008148c3:	83 f8 2f             	cmp    eax,0x2f
ffff8000008148c6:	77 23                	ja     ffff8000008148eb <comprintf+0x3b9>
ffff8000008148c8:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffff8000008148cf:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff8000008148d5:	89 d2                	mov    edx,edx
ffff8000008148d7:	48 01 d0             	add    rax,rdx
ffff8000008148da:	8b 95 f0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x110]
ffff8000008148e0:	83 c2 08             	add    edx,0x8
ffff8000008148e3:	89 95 f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],edx
ffff8000008148e9:	eb 12                	jmp    ffff8000008148fd <comprintf+0x3cb>
ffff8000008148eb:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff8000008148f2:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff8000008148f6:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
ffff8000008148fd:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000814900:	89 85 20 ff ff ff    	mov    DWORD PTR [rbp-0xe0],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:96
                sprint_hex(tmp,v);
ffff800000814906:	8b 85 20 ff ff ff    	mov    eax,DWORD PTR [rbp-0xe0]
ffff80000081490c:	48 63 d0             	movsxd rdx,eax
ffff80000081490f:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000814916:	48 89 d6             	mov    rsi,rdx
ffff800000814919:	48 89 c7             	mov    rdi,rax
ffff80000081491c:	49 89 df             	mov    r15,rbx
ffff80000081491f:	48 b8 fe 25 ef ff ff 	movabs rax,0xffffffffffef25fe
ffff800000814926:	ff ff ff 
ffff800000814929:	48 01 d8             	add    rax,rbx
ffff80000081492c:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:82
            }if(*pstr=='l'){
ffff80000081492e:	eb 58                	jmp    ffff800000814988 <comprintf+0x456>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:98
            }else{
                    sprintchar(tmp,*pstr);
ffff800000814930:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000814937:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081493a:	0f be d0             	movsx  edx,al
ffff80000081493d:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000814944:	89 d6                	mov    esi,edx
ffff800000814946:	48 89 c7             	mov    rdi,rax
ffff800000814949:	49 89 df             	mov    r15,rbx
ffff80000081494c:	48 b8 04 25 ef ff ff 	movabs rax,0xffffffffffef2504
ffff800000814953:	ff ff ff 
ffff800000814956:	48 01 d8             	add    rax,rbx
ffff800000814959:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:82
            }if(*pstr=='l'){
ffff80000081495b:	eb 2b                	jmp    ffff800000814988 <comprintf+0x456>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:101
                }
        }else{
            sprintchar(tmp,*pstr);
ffff80000081495d:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000814964:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000814967:	0f be d0             	movsx  edx,al
ffff80000081496a:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000814971:	89 d6                	mov    esi,edx
ffff800000814973:	48 89 c7             	mov    rdi,rax
ffff800000814976:	49 89 df             	mov    r15,rbx
ffff800000814979:	48 b8 04 25 ef ff ff 	movabs rax,0xffffffffffef2504
ffff800000814980:	ff ff ff 
ffff800000814983:	48 01 d8             	add    rax,rbx
ffff800000814986:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:76
    for(;*pstr!='\0';pstr++){
ffff800000814988:	48 83 85 38 ff ff ff 	add    QWORD PTR [rbp-0xc8],0x1
ffff80000081498f:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:76 (discriminator 1)
ffff800000814990:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffff800000814997:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081499a:	84 c0                	test   al,al
ffff80000081499c:	0f 85 c5 fc ff ff    	jne    ffff800000814667 <comprintf+0x135>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:105
        }
    }
    va_end(vargs);
    com_puts(tmp,PORT_COM1);
ffff8000008149a2:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff8000008149a9:	be f8 03 00 00       	mov    esi,0x3f8
ffff8000008149ae:	48 89 c7             	mov    rdi,rax
ffff8000008149b1:	49 89 df             	mov    r15,rbx
ffff8000008149b4:	48 b8 ce 18 ef ff ff 	movabs rax,0xffffffffffef18ce
ffff8000008149bb:	ff ff ff 
ffff8000008149be:	48 01 d8             	add    rax,rbx
ffff8000008149c1:	ff d0                	call   rax
ffff8000008149c3:	eb 01                	jmp    ffff8000008149c6 <comprintf+0x494>
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:65
        return;//一次性输出不了太长
ffff8000008149c5:	90                   	nop
/mnt/d/Code/Comprehensive/OS/workspace/64/knl/com.c:106
ffff8000008149c6:	48 81 c4 10 01 00 00 	add    rsp,0x110
ffff8000008149cd:	5b                   	pop    rbx
ffff8000008149ce:	41 5f                	pop    r15
ffff8000008149d0:	5d                   	pop    rbp
ffff8000008149d1:	c3                   	ret    

ffff8000008149d2 <memcpy>:
memcpy():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:5
#include "mem.h"
#include "typename.h"
static u32 mem_end;
static u32 usr_mem_base;
void memcpy(u8* dest, u8 *src,u32 size){
ffff8000008149d2:	f3 0f 1e fa          	endbr64 
ffff8000008149d6:	55                   	push   rbp
ffff8000008149d7:	48 89 e5             	mov    rbp,rsp
ffff8000008149da:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff8000008149de:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff8000008149e2:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:6
    *dest=0xff;//如果页内存还没分配，这样就可以先激发缺页异常分配了，之后写数据就会完整不会少开头第一个字节。
ffff8000008149e5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff8000008149e9:	c6 00 ff             	mov    BYTE PTR [rax],0xff
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:7
    for(int i=0;i<size;i++){
ffff8000008149ec:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff8000008149f3:	eb 1b                	jmp    ffff800000814a10 <memcpy+0x3e>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:8 (discriminator 3)
        *(dest)=*(src);
ffff8000008149f5:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff8000008149f9:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff8000008149fc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000814a00:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:9 (discriminator 3)
        dest++;
ffff800000814a02:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:10 (discriminator 3)
        src++;
ffff800000814a07:	48 83 45 e0 01       	add    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:7 (discriminator 3)
    for(int i=0;i<size;i++){
ffff800000814a0c:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:7 (discriminator 1)
ffff800000814a10:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000814a13:	39 45 dc             	cmp    DWORD PTR [rbp-0x24],eax
ffff800000814a16:	77 dd                	ja     ffff8000008149f5 <memcpy+0x23>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:12
    }
}
ffff800000814a18:	90                   	nop
ffff800000814a19:	90                   	nop
ffff800000814a1a:	5d                   	pop    rbp
ffff800000814a1b:	c3                   	ret    

ffff800000814a1c <memcmp>:
memcmp():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:14
int memcmp(u8 *a,u8* b,int len)
{
ffff800000814a1c:	f3 0f 1e fa          	endbr64 
ffff800000814a20:	55                   	push   rbp
ffff800000814a21:	48 89 e5             	mov    rbp,rsp
ffff800000814a24:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000814a28:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffff800000814a2c:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:15
    for(int i=0;i<len;i++)
ffff800000814a2f:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000814a36:	eb 3a                	jmp    ffff800000814a72 <memcmp+0x56>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:17
    {
        if(*a!=*b)
ffff800000814a38:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000814a3c:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff800000814a3f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000814a43:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000814a46:	38 c2                	cmp    dl,al
ffff800000814a48:	74 1a                	je     ffff800000814a64 <memcmp+0x48>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:18
            return *a-*b;
ffff800000814a4a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000814a4e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000814a51:	0f b6 d0             	movzx  edx,al
ffff800000814a54:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffff800000814a58:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000814a5b:	0f b6 c8             	movzx  ecx,al
ffff800000814a5e:	89 d0                	mov    eax,edx
ffff800000814a60:	29 c8                	sub    eax,ecx
ffff800000814a62:	eb 1b                	jmp    ffff800000814a7f <memcmp+0x63>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:19 (discriminator 2)
        a++;
ffff800000814a64:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:20 (discriminator 2)
        b++;
ffff800000814a69:	48 83 45 e0 01       	add    QWORD PTR [rbp-0x20],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:15 (discriminator 2)
    for(int i=0;i<len;i++)
ffff800000814a6e:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:15 (discriminator 1)
ffff800000814a72:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000814a75:	3b 45 dc             	cmp    eax,DWORD PTR [rbp-0x24]
ffff800000814a78:	7c be                	jl     ffff800000814a38 <memcmp+0x1c>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:22
    }
    return 0;
ffff800000814a7a:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:23
}
ffff800000814a7f:	5d                   	pop    rbp
ffff800000814a80:	c3                   	ret    

ffff800000814a81 <memset>:
memset():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:24
void memset(u8 *buf,u8 value,u32 size){
ffff800000814a81:	f3 0f 1e fa          	endbr64 
ffff800000814a85:	55                   	push   rbp
ffff800000814a86:	48 89 e5             	mov    rbp,rsp
ffff800000814a89:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffff800000814a8d:	89 f0                	mov    eax,esi
ffff800000814a8f:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
ffff800000814a92:	88 45 e4             	mov    BYTE PTR [rbp-0x1c],al
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:25
    for(u32 i=0;i<size;i++){
ffff800000814a95:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffff800000814a9c:	eb 16                	jmp    ffff800000814ab4 <memset+0x33>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:26 (discriminator 3)
        *(buf++)=value;
ffff800000814a9e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000814aa2:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffff800000814aa6:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffff800000814aaa:	0f b6 55 e4          	movzx  edx,BYTE PTR [rbp-0x1c]
ffff800000814aae:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:25 (discriminator 3)
    for(u32 i=0;i<size;i++){
ffff800000814ab0:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:25 (discriminator 1)
ffff800000814ab4:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000814ab7:	3b 45 e0             	cmp    eax,DWORD PTR [rbp-0x20]
ffff800000814aba:	72 e2                	jb     ffff800000814a9e <memset+0x1d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:28
    }
}
ffff800000814abc:	90                   	nop
ffff800000814abd:	90                   	nop
ffff800000814abe:	5d                   	pop    rbp
ffff800000814abf:	c3                   	ret    

ffff800000814ac0 <get_mem_size>:
get_mem_size():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:30

u32 get_mem_size(){
ffff800000814ac0:	f3 0f 1e fa          	endbr64 
ffff800000814ac4:	55                   	push   rbp
ffff800000814ac5:	48 89 e5             	mov    rbp,rsp
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:31
    return mem_end;
ffff800000814ac8:	48 b8 80 ad 41 00 00 	movabs rax,0xffff80000041ad80
ffff800000814acf:	80 ff ff 
ffff800000814ad2:	8b 00                	mov    eax,DWORD PTR [rax]
/mnt/d/Code/Comprehensive/OS/workspace/64/com/mem.c:32
}
ffff800000814ad4:	5d                   	pop    rbp
ffff800000814ad5:	c3                   	ret    

ffff800000814ad6 <strcpy>:
strcpy():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:3
#include "str.h"
#include <stdarg.h>
void strcpy(unsigned char* dest, unsigned char *buf){
ffff800000814ad6:	f3 0f 1e fa          	endbr64 
ffff800000814ada:	55                   	push   rbp
ffff800000814adb:	48 89 e5             	mov    rbp,rsp
ffff800000814ade:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000814ae2:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:4
    while(*buf!='\0'){
ffff800000814ae6:	eb 1d                	jmp    ffff800000814b05 <strcpy+0x2f>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:5
        *(dest++)=*(buf++);
ffff800000814ae8:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffff800000814aec:	48 8d 42 01          	lea    rax,[rdx+0x1]
ffff800000814af0:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffff800000814af4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000814af8:	48 8d 48 01          	lea    rcx,[rax+0x1]
ffff800000814afc:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
ffff800000814b00:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
ffff800000814b03:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:4
    while(*buf!='\0'){
ffff800000814b05:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000814b09:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000814b0c:	84 c0                	test   al,al
ffff800000814b0e:	75 d8                	jne    ffff800000814ae8 <strcpy+0x12>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:7
    }
    *dest='\0';
ffff800000814b10:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000814b14:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:8
}
ffff800000814b17:	90                   	nop
ffff800000814b18:	5d                   	pop    rbp
ffff800000814b19:	c3                   	ret    

ffff800000814b1a <strtok>:
strtok():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:12
static char strtokkee[512],*strtokkeeptr=strtokkee;
static int tokptr=0;
static char retbuf[512],*retbptr=retbuf;
char* strtok(char *str,char splitter){
ffff800000814b1a:	f3 0f 1e fa          	endbr64 
ffff800000814b1e:	55                   	push   rbp
ffff800000814b1f:	48 89 e5             	mov    rbp,rsp
ffff800000814b22:	48 83 ec 30          	sub    rsp,0x30
ffff800000814b26:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000814b2a:	89 f0                	mov    eax,esi
ffff800000814b2c:	88 45 d4             	mov    BYTE PTR [rbp-0x2c],al
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:14
    //limit: cannot cut string longer than 512
    if(str!=(void*)0){
ffff800000814b2f:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffff800000814b34:	0f 84 fa 00 00 00    	je     ffff800000814c34 <strtok+0x11a>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:16
        //cut for the first time
        strcpy(strtokkee,str);
ffff800000814b3a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000814b3e:	48 89 c6             	mov    rsi,rax
ffff800000814b41:	48 b8 a0 ad 41 00 00 	movabs rax,0xffff80000041ada0
ffff800000814b48:	80 ff ff 
ffff800000814b4b:	48 89 c7             	mov    rdi,rax
ffff800000814b4e:	48 b8 d6 4a 81 00 00 	movabs rax,0xffff800000814ad6
ffff800000814b55:	80 ff ff 
ffff800000814b58:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:17
        char* ptr=strtokkee;
ffff800000814b5a:	48 b8 a0 ad 41 00 00 	movabs rax,0xffff80000041ada0
ffff800000814b61:	80 ff ff 
ffff800000814b64:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:18
        for(tokptr=0;strtokkee[tokptr]!=splitter&&strtokkee[tokptr]!='\0';tokptr=(tokptr+1)%512);
ffff800000814b68:	48 b8 a0 af 41 00 00 	movabs rax,0xffff80000041afa0
ffff800000814b6f:	80 ff ff 
ffff800000814b72:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
ffff800000814b78:	eb 2a                	jmp    ffff800000814ba4 <strtok+0x8a>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:18 (discriminator 4)
ffff800000814b7a:	48 b8 a0 af 41 00 00 	movabs rax,0xffff80000041afa0
ffff800000814b81:	80 ff ff 
ffff800000814b84:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000814b86:	83 c0 01             	add    eax,0x1
ffff800000814b89:	99                   	cdq    
ffff800000814b8a:	c1 ea 17             	shr    edx,0x17
ffff800000814b8d:	01 d0                	add    eax,edx
ffff800000814b8f:	25 ff 01 00 00       	and    eax,0x1ff
ffff800000814b94:	29 d0                	sub    eax,edx
ffff800000814b96:	89 c2                	mov    edx,eax
ffff800000814b98:	48 b8 a0 af 41 00 00 	movabs rax,0xffff80000041afa0
ffff800000814b9f:	80 ff ff 
ffff800000814ba2:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:18 (discriminator 1)
ffff800000814ba4:	48 b8 a0 af 41 00 00 	movabs rax,0xffff80000041afa0
ffff800000814bab:	80 ff ff 
ffff800000814bae:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000814bb0:	48 ba a0 ad 41 00 00 	movabs rdx,0xffff80000041ada0
ffff800000814bb7:	80 ff ff 
ffff800000814bba:	48 98                	cdqe   
ffff800000814bbc:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000814bc0:	38 45 d4             	cmp    BYTE PTR [rbp-0x2c],al
ffff800000814bc3:	74 20                	je     ffff800000814be5 <strtok+0xcb>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:18 (discriminator 3)
ffff800000814bc5:	48 b8 a0 af 41 00 00 	movabs rax,0xffff80000041afa0
ffff800000814bcc:	80 ff ff 
ffff800000814bcf:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000814bd1:	48 ba a0 ad 41 00 00 	movabs rdx,0xffff80000041ada0
ffff800000814bd8:	80 ff ff 
ffff800000814bdb:	48 98                	cdqe   
ffff800000814bdd:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000814be1:	84 c0                	test   al,al
ffff800000814be3:	75 95                	jne    ffff800000814b7a <strtok+0x60>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:19
        strtokkee[tokptr]='\0';
ffff800000814be5:	48 b8 a0 af 41 00 00 	movabs rax,0xffff80000041afa0
ffff800000814bec:	80 ff ff 
ffff800000814bef:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000814bf1:	48 ba a0 ad 41 00 00 	movabs rdx,0xffff80000041ada0
ffff800000814bf8:	80 ff ff 
ffff800000814bfb:	48 98                	cdqe   
ffff800000814bfd:	c6 04 02 00          	mov    BYTE PTR [rdx+rax*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:20
        tokptr=(tokptr+1)%512;
ffff800000814c01:	48 b8 a0 af 41 00 00 	movabs rax,0xffff80000041afa0
ffff800000814c08:	80 ff ff 
ffff800000814c0b:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000814c0d:	83 c0 01             	add    eax,0x1
ffff800000814c10:	99                   	cdq    
ffff800000814c11:	c1 ea 17             	shr    edx,0x17
ffff800000814c14:	01 d0                	add    eax,edx
ffff800000814c16:	25 ff 01 00 00       	and    eax,0x1ff
ffff800000814c1b:	29 d0                	sub    eax,edx
ffff800000814c1d:	89 c2                	mov    edx,eax
ffff800000814c1f:	48 b8 a0 af 41 00 00 	movabs rax,0xffff80000041afa0
ffff800000814c26:	80 ff ff 
ffff800000814c29:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:21
        return ptr;
ffff800000814c2b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000814c2f:	e9 ee 00 00 00       	jmp    ffff800000814d22 <strtok+0x208>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:24
    }
    //go on cutting
    int c=0;
ffff800000814c34:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:25
    char* ptr=strtokkee+tokptr;
ffff800000814c3b:	48 b8 a0 af 41 00 00 	movabs rax,0xffff80000041afa0
ffff800000814c42:	80 ff ff 
ffff800000814c45:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000814c47:	48 98                	cdqe   
ffff800000814c49:	48 ba a0 ad 41 00 00 	movabs rdx,0xffff80000041ada0
ffff800000814c50:	80 ff ff 
ffff800000814c53:	48 01 d0             	add    rax,rdx
ffff800000814c56:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:26
    for(;strtokkee[tokptr]!=splitter&&strtokkee[tokptr]!='\0';tokptr=(tokptr+1)%512,c++);
ffff800000814c5a:	eb 2e                	jmp    ffff800000814c8a <strtok+0x170>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:26 (discriminator 3)
ffff800000814c5c:	48 b8 a0 af 41 00 00 	movabs rax,0xffff80000041afa0
ffff800000814c63:	80 ff ff 
ffff800000814c66:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000814c68:	83 c0 01             	add    eax,0x1
ffff800000814c6b:	99                   	cdq    
ffff800000814c6c:	c1 ea 17             	shr    edx,0x17
ffff800000814c6f:	01 d0                	add    eax,edx
ffff800000814c71:	25 ff 01 00 00       	and    eax,0x1ff
ffff800000814c76:	29 d0                	sub    eax,edx
ffff800000814c78:	89 c2                	mov    edx,eax
ffff800000814c7a:	48 b8 a0 af 41 00 00 	movabs rax,0xffff80000041afa0
ffff800000814c81:	80 ff ff 
ffff800000814c84:	89 10                	mov    DWORD PTR [rax],edx
ffff800000814c86:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:26 (discriminator 1)
ffff800000814c8a:	48 b8 a0 af 41 00 00 	movabs rax,0xffff80000041afa0
ffff800000814c91:	80 ff ff 
ffff800000814c94:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000814c96:	48 ba a0 ad 41 00 00 	movabs rdx,0xffff80000041ada0
ffff800000814c9d:	80 ff ff 
ffff800000814ca0:	48 98                	cdqe   
ffff800000814ca2:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000814ca6:	38 45 d4             	cmp    BYTE PTR [rbp-0x2c],al
ffff800000814ca9:	74 20                	je     ffff800000814ccb <strtok+0x1b1>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:26 (discriminator 2)
ffff800000814cab:	48 b8 a0 af 41 00 00 	movabs rax,0xffff80000041afa0
ffff800000814cb2:	80 ff ff 
ffff800000814cb5:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000814cb7:	48 ba a0 ad 41 00 00 	movabs rdx,0xffff80000041ada0
ffff800000814cbe:	80 ff ff 
ffff800000814cc1:	48 98                	cdqe   
ffff800000814cc3:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
ffff800000814cc7:	84 c0                	test   al,al
ffff800000814cc9:	75 91                	jne    ffff800000814c5c <strtok+0x142>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:27
    strtokkee[tokptr]='\0';
ffff800000814ccb:	48 b8 a0 af 41 00 00 	movabs rax,0xffff80000041afa0
ffff800000814cd2:	80 ff ff 
ffff800000814cd5:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000814cd7:	48 ba a0 ad 41 00 00 	movabs rdx,0xffff80000041ada0
ffff800000814cde:	80 ff ff 
ffff800000814ce1:	48 98                	cdqe   
ffff800000814ce3:	c6 04 02 00          	mov    BYTE PTR [rdx+rax*1],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:28
    tokptr=(tokptr+1)%512;
ffff800000814ce7:	48 b8 a0 af 41 00 00 	movabs rax,0xffff80000041afa0
ffff800000814cee:	80 ff ff 
ffff800000814cf1:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000814cf3:	83 c0 01             	add    eax,0x1
ffff800000814cf6:	99                   	cdq    
ffff800000814cf7:	c1 ea 17             	shr    edx,0x17
ffff800000814cfa:	01 d0                	add    eax,edx
ffff800000814cfc:	25 ff 01 00 00       	and    eax,0x1ff
ffff800000814d01:	29 d0                	sub    eax,edx
ffff800000814d03:	89 c2                	mov    edx,eax
ffff800000814d05:	48 b8 a0 af 41 00 00 	movabs rax,0xffff80000041afa0
ffff800000814d0c:	80 ff ff 
ffff800000814d0f:	89 10                	mov    DWORD PTR [rax],edx
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:29
    if(c)
ffff800000814d11:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
ffff800000814d15:	74 06                	je     ffff800000814d1d <strtok+0x203>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:30
        return ptr;
ffff800000814d17:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000814d1b:	eb 05                	jmp    ffff800000814d22 <strtok+0x208>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:32
    else
        return (void*)0;
ffff800000814d1d:	b8 00 00 00 00       	mov    eax,0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:33
}
ffff800000814d22:	c9                   	leave  
ffff800000814d23:	c3                   	ret    

ffff800000814d24 <strcmp>:
strcmp():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:35
int strcmp(char *s1,char *s2)
{
ffff800000814d24:	f3 0f 1e fa          	endbr64 
ffff800000814d28:	55                   	push   rbp
ffff800000814d29:	48 89 e5             	mov    rbp,rsp
ffff800000814d2c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000814d30:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:36
	while(*s1!='\0'&&*s2!='\0'){
ffff800000814d34:	eb 3c                	jmp    ffff800000814d72 <strcmp+0x4e>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:37
		if(*s1>*s2)
ffff800000814d36:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000814d3a:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff800000814d3d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000814d41:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000814d44:	38 c2                	cmp    dl,al
ffff800000814d46:	7e 07                	jle    ffff800000814d4f <strcmp+0x2b>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:38
			return 1;
ffff800000814d48:	b8 01 00 00 00       	mov    eax,0x1
ffff800000814d4d:	eb 52                	jmp    ffff800000814da1 <strcmp+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:39
		else if(*s1<*s2)
ffff800000814d4f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000814d53:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff800000814d56:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000814d5a:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000814d5d:	38 c2                	cmp    dl,al
ffff800000814d5f:	7d 07                	jge    ffff800000814d68 <strcmp+0x44>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:40
			return -1;
ffff800000814d61:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffff800000814d66:	eb 39                	jmp    ffff800000814da1 <strcmp+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:41
		s1++;
ffff800000814d68:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:42
		s2++;
ffff800000814d6d:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:36
	while(*s1!='\0'&&*s2!='\0'){
ffff800000814d72:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000814d76:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000814d79:	84 c0                	test   al,al
ffff800000814d7b:	74 0b                	je     ffff800000814d88 <strcmp+0x64>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:36 (discriminator 1)
ffff800000814d7d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000814d81:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000814d84:	84 c0                	test   al,al
ffff800000814d86:	75 ae                	jne    ffff800000814d36 <strcmp+0x12>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:44
	}
	if(*s1==*s2)
ffff800000814d88:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000814d8c:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffff800000814d8f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff800000814d93:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000814d96:	38 c2                	cmp    dl,al
ffff800000814d98:	75 07                	jne    ffff800000814da1 <strcmp+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:45
		return 0;
ffff800000814d9a:	b8 00 00 00 00       	mov    eax,0x0
ffff800000814d9f:	eb 00                	jmp    ffff800000814da1 <strcmp+0x7d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:46
}
ffff800000814da1:	5d                   	pop    rbp
ffff800000814da2:	c3                   	ret    

ffff800000814da3 <strlen>:
strlen():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:49

int strlen(char *str)
{
ffff800000814da3:	f3 0f 1e fa          	endbr64 
ffff800000814da7:	55                   	push   rbp
ffff800000814da8:	48 89 e5             	mov    rbp,rsp
ffff800000814dab:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:50
    int l=0;
ffff800000814daf:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:51
    for(;*str!='\0';str++,l++);
ffff800000814db6:	eb 09                	jmp    ffff800000814dc1 <strlen+0x1e>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:51 (discriminator 2)
ffff800000814db8:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
ffff800000814dbd:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:51 (discriminator 1)
ffff800000814dc1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffff800000814dc5:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000814dc8:	84 c0                	test   al,al
ffff800000814dca:	75 ec                	jne    ffff800000814db8 <strlen+0x15>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:52
    return l;
ffff800000814dcc:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:53
}
ffff800000814dcf:	5d                   	pop    rbp
ffff800000814dd0:	c3                   	ret    

ffff800000814dd1 <sprintf>:
sprintf():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:56

void sprintf(char *dist, char *str,...)
{
ffff800000814dd1:	f3 0f 1e fa          	endbr64 
ffff800000814dd5:	55                   	push   rbp
ffff800000814dd6:	48 89 e5             	mov    rbp,rsp
ffff800000814dd9:	48 81 ec 10 01 00 00 	sub    rsp,0x110
ffff800000814de0:	48 89 bd f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdi
ffff800000814de7:	48 89 b5 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rsi
ffff800000814dee:	48 89 95 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdx
ffff800000814df5:	48 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rcx
ffff800000814dfc:	4c 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],r8
ffff800000814e03:	4c 89 8d 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],r9
ffff800000814e0a:	84 c0                	test   al,al
ffff800000814e0c:	74 20                	je     ffff800000814e2e <sprintf+0x5d>
ffff800000814e0e:	0f 29 45 80          	movaps XMMWORD PTR [rbp-0x80],xmm0
ffff800000814e12:	0f 29 4d 90          	movaps XMMWORD PTR [rbp-0x70],xmm1
ffff800000814e16:	0f 29 55 a0          	movaps XMMWORD PTR [rbp-0x60],xmm2
ffff800000814e1a:	0f 29 5d b0          	movaps XMMWORD PTR [rbp-0x50],xmm3
ffff800000814e1e:	0f 29 65 c0          	movaps XMMWORD PTR [rbp-0x40],xmm4
ffff800000814e22:	0f 29 6d d0          	movaps XMMWORD PTR [rbp-0x30],xmm5
ffff800000814e26:	0f 29 75 e0          	movaps XMMWORD PTR [rbp-0x20],xmm6
ffff800000814e2a:	0f 29 7d f0          	movaps XMMWORD PTR [rbp-0x10],xmm7
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:59

    //count num of args
    char *pstr=str;
ffff800000814e2e:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff800000814e35:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:60
    char *prev=str;
ffff800000814e3c:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff800000814e43:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:61
    int argnum=0;
ffff800000814e4a:	c7 85 3c ff ff ff 00 	mov    DWORD PTR [rbp-0xc4],0x0
ffff800000814e51:	00 00 00 
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:62
    while (*pstr!='\n')
ffff800000814e54:	eb 39                	jmp    ffff800000814e8f <sprintf+0xbe>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:64
    {
        if(*pstr=='%'&&*prev!='%')
ffff800000814e56:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000814e5d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000814e60:	3c 25                	cmp    al,0x25
ffff800000814e62:	75 15                	jne    ffff800000814e79 <sprintf+0xa8>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:64 (discriminator 1)
ffff800000814e64:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
ffff800000814e6b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000814e6e:	3c 25                	cmp    al,0x25
ffff800000814e70:	74 07                	je     ffff800000814e79 <sprintf+0xa8>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:65
            argnum++;
ffff800000814e72:	83 85 3c ff ff ff 01 	add    DWORD PTR [rbp-0xc4],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:66
        prev=pstr;
ffff800000814e79:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000814e80:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:67
        pstr++;
ffff800000814e87:	48 83 85 48 ff ff ff 	add    QWORD PTR [rbp-0xb8],0x1
ffff800000814e8e:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:62
    while (*pstr!='\n')
ffff800000814e8f:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000814e96:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000814e99:	3c 0a                	cmp    al,0xa
ffff800000814e9b:	75 b9                	jne    ffff800000814e56 <sprintf+0x85>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:71
    }

    va_list vargs;
    va_start(vargs,str);
ffff800000814e9d:	c7 85 08 ff ff ff 10 	mov    DWORD PTR [rbp-0xf8],0x10
ffff800000814ea4:	00 00 00 
ffff800000814ea7:	c7 85 0c ff ff ff 30 	mov    DWORD PTR [rbp-0xf4],0x30
ffff800000814eae:	00 00 00 
ffff800000814eb1:	48 8d 45 10          	lea    rax,[rbp+0x10]
ffff800000814eb5:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
ffff800000814ebc:	48 8d 85 50 ff ff ff 	lea    rax,[rbp-0xb0]
ffff800000814ec3:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:72
    pstr=str;
ffff800000814eca:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffff800000814ed1:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:73
    for(;*pstr!='\0';pstr++){
ffff800000814ed8:	e9 09 02 00 00       	jmp    ffff8000008150e6 <sprintf+0x315>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:74
        if(*pstr=='%'&&*(pstr+1)!='\0'){
ffff800000814edd:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000814ee4:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000814ee7:	3c 25                	cmp    al,0x25
ffff800000814ee9:	0f 85 ca 01 00 00    	jne    ffff8000008150b9 <sprintf+0x2e8>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:74 (discriminator 1)
ffff800000814eef:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000814ef6:	48 83 c0 01          	add    rax,0x1
ffff800000814efa:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000814efd:	84 c0                	test   al,al
ffff800000814eff:	0f 84 b4 01 00 00    	je     ffff8000008150b9 <sprintf+0x2e8>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:75
            pstr++;
ffff800000814f05:	48 83 85 48 ff ff ff 	add    QWORD PTR [rbp-0xb8],0x1
ffff800000814f0c:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:76
            if(*pstr=='x'){
ffff800000814f0d:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000814f14:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000814f17:	3c 78                	cmp    al,0x78
ffff800000814f19:	75 6f                	jne    ffff800000814f8a <sprintf+0x1b9>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:77
                int v=va_arg(vargs,int);
ffff800000814f1b:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
ffff800000814f21:	83 f8 2f             	cmp    eax,0x2f
ffff800000814f24:	77 23                	ja     ffff800000814f49 <sprintf+0x178>
ffff800000814f26:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
ffff800000814f2d:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff800000814f33:	89 d2                	mov    edx,edx
ffff800000814f35:	48 01 d0             	add    rax,rdx
ffff800000814f38:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff800000814f3e:	83 c2 08             	add    edx,0x8
ffff800000814f41:	89 95 08 ff ff ff    	mov    DWORD PTR [rbp-0xf8],edx
ffff800000814f47:	eb 12                	jmp    ffff800000814f5b <sprintf+0x18a>
ffff800000814f49:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff800000814f50:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000814f54:	48 89 95 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rdx
ffff800000814f5b:	8b 00                	mov    eax,DWORD PTR [rax]
ffff800000814f5d:	89 85 24 ff ff ff    	mov    DWORD PTR [rbp-0xdc],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:78
                sprint_hex(dist,v);
ffff800000814f63:	8b 85 24 ff ff ff    	mov    eax,DWORD PTR [rbp-0xdc]
ffff800000814f69:	48 63 d0             	movsxd rdx,eax
ffff800000814f6c:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000814f73:	48 89 d6             	mov    rsi,rdx
ffff800000814f76:	48 89 c7             	mov    rdi,rax
ffff800000814f79:	48 b8 f6 51 81 00 00 	movabs rax,0xffff8000008151f6
ffff800000814f80:	80 ff ff 
ffff800000814f83:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:76
            if(*pstr=='x'){
ffff800000814f85:	e9 54 01 00 00       	jmp    ffff8000008150de <sprintf+0x30d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:79
            }else if(*pstr=='s'){
ffff800000814f8a:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000814f91:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000814f94:	3c 73                	cmp    al,0x73
ffff800000814f96:	75 6f                	jne    ffff800000815007 <sprintf+0x236>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:80
                char* v=va_arg(vargs,char*);
ffff800000814f98:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
ffff800000814f9e:	83 f8 2f             	cmp    eax,0x2f
ffff800000814fa1:	77 23                	ja     ffff800000814fc6 <sprintf+0x1f5>
ffff800000814fa3:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
ffff800000814faa:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff800000814fb0:	89 d2                	mov    edx,edx
ffff800000814fb2:	48 01 d0             	add    rax,rdx
ffff800000814fb5:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff800000814fbb:	83 c2 08             	add    edx,0x8
ffff800000814fbe:	89 95 08 ff ff ff    	mov    DWORD PTR [rbp-0xf8],edx
ffff800000814fc4:	eb 12                	jmp    ffff800000814fd8 <sprintf+0x207>
ffff800000814fc6:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff800000814fcd:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff800000814fd1:	48 89 95 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rdx
ffff800000814fd8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000814fdb:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:81
                sprintn(dist,v);
ffff800000814fe2:	48 8b 95 28 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd8]
ffff800000814fe9:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff800000814ff0:	48 89 d6             	mov    rsi,rdx
ffff800000814ff3:	48 89 c7             	mov    rdi,rax
ffff800000814ff6:	48 b8 84 52 81 00 00 	movabs rax,0xffff800000815284
ffff800000814ffd:	80 ff ff 
ffff800000815000:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:76
            if(*pstr=='x'){
ffff800000815002:	e9 d7 00 00 00       	jmp    ffff8000008150de <sprintf+0x30d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:82
            }else if(*pstr=='d'){
ffff800000815007:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff80000081500e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff800000815011:	3c 64                	cmp    al,0x64
ffff800000815013:	75 6d                	jne    ffff800000815082 <sprintf+0x2b1>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:83
                char* v=va_arg(vargs,char*);
ffff800000815015:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
ffff80000081501b:	83 f8 2f             	cmp    eax,0x2f
ffff80000081501e:	77 23                	ja     ffff800000815043 <sprintf+0x272>
ffff800000815020:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
ffff800000815027:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff80000081502d:	89 d2                	mov    edx,edx
ffff80000081502f:	48 01 d0             	add    rax,rdx
ffff800000815032:	8b 95 08 ff ff ff    	mov    edx,DWORD PTR [rbp-0xf8]
ffff800000815038:	83 c2 08             	add    edx,0x8
ffff80000081503b:	89 95 08 ff ff ff    	mov    DWORD PTR [rbp-0xf8],edx
ffff800000815041:	eb 12                	jmp    ffff800000815055 <sprintf+0x284>
ffff800000815043:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffff80000081504a:	48 8d 50 08          	lea    rdx,[rax+0x8]
ffff80000081504e:	48 89 95 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rdx
ffff800000815055:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffff800000815058:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:84
                sprint_decimal(dist,v);
ffff80000081505f:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffff800000815066:	89 c2                	mov    edx,eax
ffff800000815068:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff80000081506f:	89 d6                	mov    esi,edx
ffff800000815071:	48 89 c7             	mov    rdi,rax
ffff800000815074:	48 b8 3b 51 81 00 00 	movabs rax,0xffff80000081513b
ffff80000081507b:	80 ff ff 
ffff80000081507e:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:76
            if(*pstr=='x'){
ffff800000815080:	eb 5c                	jmp    ffff8000008150de <sprintf+0x30d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:85
            }else if(*pstr=='c'){
ffff800000815082:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000815089:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081508c:	3c 63                	cmp    al,0x63
ffff80000081508e:	75 02                	jne    ffff800000815092 <sprintf+0x2c1>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:86
                char v=va_arg(vargs,char);
ffff800000815090:	0f 0b                	ud2    
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:89
                sprintchar(dist,v);
            }else{
                sprintchar(dist,*pstr);
ffff800000815092:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff800000815099:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081509c:	0f be d0             	movsx  edx,al
ffff80000081509f:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff8000008150a6:	89 d6                	mov    esi,edx
ffff8000008150a8:	48 89 c7             	mov    rdi,rax
ffff8000008150ab:	48 b8 fc 50 81 00 00 	movabs rax,0xffff8000008150fc
ffff8000008150b2:	80 ff ff 
ffff8000008150b5:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:76
            if(*pstr=='x'){
ffff8000008150b7:	eb 25                	jmp    ffff8000008150de <sprintf+0x30d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:92
            }
        }else{
            sprintchar(dist,*pstr);
ffff8000008150b9:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff8000008150c0:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008150c3:	0f be d0             	movsx  edx,al
ffff8000008150c6:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffff8000008150cd:	89 d6                	mov    esi,edx
ffff8000008150cf:	48 89 c7             	mov    rdi,rax
ffff8000008150d2:	48 b8 fc 50 81 00 00 	movabs rax,0xffff8000008150fc
ffff8000008150d9:	80 ff ff 
ffff8000008150dc:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:73
    for(;*pstr!='\0';pstr++){
ffff8000008150de:	48 83 85 48 ff ff ff 	add    QWORD PTR [rbp-0xb8],0x1
ffff8000008150e5:	01 
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:73 (discriminator 1)
ffff8000008150e6:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffff8000008150ed:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008150f0:	84 c0                	test   al,al
ffff8000008150f2:	0f 85 e5 fd ff ff    	jne    ffff800000814edd <sprintf+0x10c>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:96
        }
    }
    va_end(vargs);
}
ffff8000008150f8:	90                   	nop
ffff8000008150f9:	90                   	nop
ffff8000008150fa:	c9                   	leave  
ffff8000008150fb:	c3                   	ret    

ffff8000008150fc <sprintchar>:
sprintchar():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:98
void sprintchar(char *dist,char c)
{
ffff8000008150fc:	f3 0f 1e fa          	endbr64 
ffff800000815100:	55                   	push   rbp
ffff800000815101:	48 89 e5             	mov    rbp,rsp
ffff800000815104:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000815108:	89 f0                	mov    eax,esi
ffff80000081510a:	88 45 f4             	mov    BYTE PTR [rbp-0xc],al
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:99
    while(*dist!='\0')
ffff80000081510d:	eb 05                	jmp    ffff800000815114 <sprintchar+0x18>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:100
        dist++;
ffff80000081510f:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:99
    while(*dist!='\0')
ffff800000815114:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000815118:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff80000081511b:	84 c0                	test   al,al
ffff80000081511d:	75 f0                	jne    ffff80000081510f <sprintchar+0x13>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:101
    *dist++=c;
ffff80000081511f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000815123:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffff800000815127:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffff80000081512b:	0f b6 55 f4          	movzx  edx,BYTE PTR [rbp-0xc]
ffff80000081512f:	88 10                	mov    BYTE PTR [rax],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:102
    *dist='\0';
ffff800000815131:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff800000815135:	c6 00 00             	mov    BYTE PTR [rax],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:103
}
ffff800000815138:	90                   	nop
ffff800000815139:	5d                   	pop    rbp
ffff80000081513a:	c3                   	ret    

ffff80000081513b <sprint_decimal>:
sprint_decimal():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:105
void sprint_decimal(char *dist,int c)
{
ffff80000081513b:	f3 0f 1e fa          	endbr64 
ffff80000081513f:	55                   	push   rbp
ffff800000815140:	48 89 e5             	mov    rbp,rsp
ffff800000815143:	48 83 ec 30          	sub    rsp,0x30
ffff800000815147:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff80000081514b:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:107
    unsigned char st[22];
    int p=0;
ffff80000081514e:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:108
    while(p<sizeof(unsigned long)*2){
ffff800000815155:	eb 65                	jmp    ffff8000008151bc <sprint_decimal+0x81>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:109
        unsigned char a=c%10+'0';
ffff800000815157:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
ffff80000081515a:	48 63 c2             	movsxd rax,edx
ffff80000081515d:	48 69 c0 67 66 66 66 	imul   rax,rax,0x66666667
ffff800000815164:	48 c1 e8 20          	shr    rax,0x20
ffff800000815168:	c1 f8 02             	sar    eax,0x2
ffff80000081516b:	89 d6                	mov    esi,edx
ffff80000081516d:	c1 fe 1f             	sar    esi,0x1f
ffff800000815170:	29 f0                	sub    eax,esi
ffff800000815172:	89 c1                	mov    ecx,eax
ffff800000815174:	89 c8                	mov    eax,ecx
ffff800000815176:	c1 e0 02             	shl    eax,0x2
ffff800000815179:	01 c8                	add    eax,ecx
ffff80000081517b:	01 c0                	add    eax,eax
ffff80000081517d:	89 d1                	mov    ecx,edx
ffff80000081517f:	29 c1                	sub    ecx,eax
ffff800000815181:	89 c8                	mov    eax,ecx
ffff800000815183:	83 c0 30             	add    eax,0x30
ffff800000815186:	88 45 fb             	mov    BYTE PTR [rbp-0x5],al
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:110
        st[p++]=a;
ffff800000815189:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000081518c:	8d 50 01             	lea    edx,[rax+0x1]
ffff80000081518f:	89 55 fc             	mov    DWORD PTR [rbp-0x4],edx
ffff800000815192:	48 98                	cdqe   
ffff800000815194:	0f b6 55 fb          	movzx  edx,BYTE PTR [rbp-0x5]
ffff800000815198:	88 54 05 e0          	mov    BYTE PTR [rbp+rax*1-0x20],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:111
        c/=10;
ffff80000081519c:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
ffff80000081519f:	48 63 d0             	movsxd rdx,eax
ffff8000008151a2:	48 69 d2 67 66 66 66 	imul   rdx,rdx,0x66666667
ffff8000008151a9:	48 c1 ea 20          	shr    rdx,0x20
ffff8000008151ad:	c1 fa 02             	sar    edx,0x2
ffff8000008151b0:	c1 f8 1f             	sar    eax,0x1f
ffff8000008151b3:	89 c1                	mov    ecx,eax
ffff8000008151b5:	89 d0                	mov    eax,edx
ffff8000008151b7:	29 c8                	sub    eax,ecx
ffff8000008151b9:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:108
    while(p<sizeof(unsigned long)*2){
ffff8000008151bc:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008151bf:	83 f8 0f             	cmp    eax,0xf
ffff8000008151c2:	76 93                	jbe    ffff800000815157 <sprint_decimal+0x1c>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:113
    }
    while(p>0)
ffff8000008151c4:	eb 26                	jmp    ffff8000008151ec <sprint_decimal+0xb1>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:115
    {
        sprintchar(dist,st[--p]);
ffff8000008151c6:	83 6d fc 01          	sub    DWORD PTR [rbp-0x4],0x1
ffff8000008151ca:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff8000008151cd:	48 98                	cdqe   
ffff8000008151cf:	0f b6 44 05 e0       	movzx  eax,BYTE PTR [rbp+rax*1-0x20]
ffff8000008151d4:	0f be d0             	movsx  edx,al
ffff8000008151d7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff8000008151db:	89 d6                	mov    esi,edx
ffff8000008151dd:	48 89 c7             	mov    rdi,rax
ffff8000008151e0:	48 b8 fc 50 81 00 00 	movabs rax,0xffff8000008150fc
ffff8000008151e7:	80 ff ff 
ffff8000008151ea:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:113
    while(p>0)
ffff8000008151ec:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
ffff8000008151f0:	7f d4                	jg     ffff8000008151c6 <sprint_decimal+0x8b>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:117
    }
}
ffff8000008151f2:	90                   	nop
ffff8000008151f3:	90                   	nop
ffff8000008151f4:	c9                   	leave  
ffff8000008151f5:	c3                   	ret    

ffff8000008151f6 <sprint_hex>:
sprint_hex():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:119
void sprint_hex(char *dist,unsigned long long c)
{
ffff8000008151f6:	f3 0f 1e fa          	endbr64 
ffff8000008151fa:	55                   	push   rbp
ffff8000008151fb:	48 89 e5             	mov    rbp,rsp
ffff8000008151fe:	48 83 ec 30          	sub    rsp,0x30
ffff800000815202:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffff800000815206:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:121
    unsigned char st[17];
    int p=0;
ffff80000081520a:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:122
    while(p<17){
ffff800000815211:	eb 39                	jmp    ffff80000081524c <sprint_hex+0x56>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:123
        unsigned char a=c%16;
ffff800000815213:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000815217:	83 e0 0f             	and    eax,0xf
ffff80000081521a:	88 45 fb             	mov    BYTE PTR [rbp-0x5],al
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:124
        if(a>9)a+='a'-10;
ffff80000081521d:	80 7d fb 09          	cmp    BYTE PTR [rbp-0x5],0x9
ffff800000815221:	76 06                	jbe    ffff800000815229 <sprint_hex+0x33>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:124 (discriminator 1)
ffff800000815223:	80 45 fb 57          	add    BYTE PTR [rbp-0x5],0x57
ffff800000815227:	eb 04                	jmp    ffff80000081522d <sprint_hex+0x37>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:125
        else a+='0';
ffff800000815229:	80 45 fb 30          	add    BYTE PTR [rbp-0x5],0x30
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:126
        st[p++]=a;
ffff80000081522d:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff800000815230:	8d 50 01             	lea    edx,[rax+0x1]
ffff800000815233:	89 55 fc             	mov    DWORD PTR [rbp-0x4],edx
ffff800000815236:	48 98                	cdqe   
ffff800000815238:	0f b6 55 fb          	movzx  edx,BYTE PTR [rbp-0x5]
ffff80000081523c:	88 54 05 e0          	mov    BYTE PTR [rbp+rax*1-0x20],dl
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:127
        c/=16;
ffff800000815240:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffff800000815244:	48 c1 e8 04          	shr    rax,0x4
ffff800000815248:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:122
    while(p<17){
ffff80000081524c:	83 7d fc 10          	cmp    DWORD PTR [rbp-0x4],0x10
ffff800000815250:	7e c1                	jle    ffff800000815213 <sprint_hex+0x1d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:129
    }
    while(p>0)
ffff800000815252:	eb 26                	jmp    ffff80000081527a <sprint_hex+0x84>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:131
    {
        sprintchar(dist,st[--p]);
ffff800000815254:	83 6d fc 01          	sub    DWORD PTR [rbp-0x4],0x1
ffff800000815258:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffff80000081525b:	48 98                	cdqe   
ffff80000081525d:	0f b6 44 05 e0       	movzx  eax,BYTE PTR [rbp+rax*1-0x20]
ffff800000815262:	0f be d0             	movsx  edx,al
ffff800000815265:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffff800000815269:	89 d6                	mov    esi,edx
ffff80000081526b:	48 89 c7             	mov    rdi,rax
ffff80000081526e:	48 b8 fc 50 81 00 00 	movabs rax,0xffff8000008150fc
ffff800000815275:	80 ff ff 
ffff800000815278:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:129
    while(p>0)
ffff80000081527a:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
ffff80000081527e:	7f d4                	jg     ffff800000815254 <sprint_hex+0x5e>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:133
    }
}
ffff800000815280:	90                   	nop
ffff800000815281:	90                   	nop
ffff800000815282:	c9                   	leave  
ffff800000815283:	c3                   	ret    

ffff800000815284 <sprintn>:
sprintn():
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:135
void sprintn(char *dist,char *str)
{
ffff800000815284:	f3 0f 1e fa          	endbr64 
ffff800000815288:	55                   	push   rbp
ffff800000815289:	48 89 e5             	mov    rbp,rsp
ffff80000081528c:	48 83 ec 10          	sub    rsp,0x10
ffff800000815290:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffff800000815294:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:136
    while(*str!='\0')
ffff800000815298:	eb 27                	jmp    ffff8000008152c1 <sprintn+0x3d>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:138
    {
        sprintchar(dist,*str++);
ffff80000081529a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff80000081529e:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffff8000008152a2:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
ffff8000008152a6:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008152a9:	0f be d0             	movsx  edx,al
ffff8000008152ac:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffff8000008152b0:	89 d6                	mov    esi,edx
ffff8000008152b2:	48 89 c7             	mov    rdi,rax
ffff8000008152b5:	48 b8 fc 50 81 00 00 	movabs rax,0xffff8000008150fc
ffff8000008152bc:	80 ff ff 
ffff8000008152bf:	ff d0                	call   rax
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:136
    while(*str!='\0')
ffff8000008152c1:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffff8000008152c5:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffff8000008152c8:	84 c0                	test   al,al
ffff8000008152ca:	75 ce                	jne    ffff80000081529a <sprintn+0x16>
/mnt/d/Code/Comprehensive/OS/workspace/64/com/str.c:140
    }
ffff8000008152cc:	90                   	nop
ffff8000008152cd:	90                   	nop
ffff8000008152ce:	c9                   	leave  
ffff8000008152cf:	c3                   	ret    

ffff8000008152d0 <create_zero>:
create_zero():
ffff8000008152d0:	e8 ec 03 ff ff       	call   ffff8000008056c1 <req_proc>
ffff8000008152d5:	83 f8 ff             	cmp    eax,0xffffffff
ffff8000008152d8:	74 0c                	je     ffff8000008152e6 <create_zero.retu>
ffff8000008152da:	e8 9a 05 ff ff       	call   ffff800000805879 <set_proc>
ffff8000008152df:	67 8b 04 24          	mov    eax,DWORD PTR [esp]
ffff8000008152e3:	83 c4 40             	add    esp,0x40

ffff8000008152e6 <create_zero.retu>:
create_zero.retu():
ffff8000008152e6:	c3                   	ret    

ffff8000008152e7 <save_context>:
switch_proc_asm():
ffff8000008152e7:	55                   	push   rbp
ffff8000008152e8:	48 89 e6             	mov    rsi,rsp
ffff8000008152eb:	48 89 f7             	mov    rdi,rsi
ffff8000008152ee:	48 83 c7 18          	add    rdi,0x18
ffff8000008152f2:	e8 03 0d ff ff       	call   ffff800000805ffa <save_context_c>
ffff8000008152f7:	c3                   	ret    

ffff8000008152f8 <discard_context>:
discard_context():
ffff8000008152f8:	c3                   	ret    

ffff8000008152f9 <desc>:
	...

ffff800000815301 <ret_sys_call>:
ret_sys_call():
ffff800000815301:	58                   	pop    rax
ffff800000815302:	8e d8                	mov    ds,eax
ffff800000815304:	58                   	pop    rax
ffff800000815305:	8e c0                	mov    es,eax
ffff800000815307:	41 5f                	pop    r15
ffff800000815309:	41 5e                	pop    r14
ffff80000081530b:	41 5d                	pop    r13
ffff80000081530d:	41 5c                	pop    r12
ffff80000081530f:	41 5b                	pop    r11
ffff800000815311:	41 5a                	pop    r10
ffff800000815313:	41 59                	pop    r9
ffff800000815315:	41 58                	pop    r8
ffff800000815317:	5e                   	pop    rsi
ffff800000815318:	5f                   	pop    rdi
ffff800000815319:	5a                   	pop    rdx
ffff80000081531a:	59                   	pop    rcx
ffff80000081531b:	5b                   	pop    rbx
ffff80000081531c:	58                   	pop    rax

ffff80000081531d <tmp>:
tmp():
ffff80000081531d:	48 0f 07             	sysretq 

ffff800000815320 <ret_normal_proc>:
ret_normal_proc():
ffff800000815320:	58                   	pop    rax
ffff800000815321:	8e d8                	mov    ds,eax
ffff800000815323:	58                   	pop    rax
ffff800000815324:	8e c0                	mov    es,eax
ffff800000815326:	41 5f                	pop    r15
ffff800000815328:	41 5e                	pop    r14
ffff80000081532a:	41 5d                	pop    r13
ffff80000081532c:	41 5c                	pop    r12
ffff80000081532e:	41 5b                	pop    r11
ffff800000815330:	41 5a                	pop    r10
ffff800000815332:	41 59                	pop    r9
ffff800000815334:	41 58                	pop    r8
ffff800000815336:	5e                   	pop    rsi
ffff800000815337:	5f                   	pop    rdi
ffff800000815338:	5a                   	pop    rdx
ffff800000815339:	59                   	pop    rcx
ffff80000081533a:	5b                   	pop    rbx
ffff80000081533b:	58                   	pop    rax
ffff80000081533c:	c3                   	ret    

ffff80000081533d <move_to_user_mode>:
move_to_user_mode():
ffff80000081533d:	48 b9 4d 53 81 00 00 	movabs rcx,0xffff80000081534d
ffff800000815344:	80 ff ff 
ffff800000815347:	9c                   	pushf  
ffff800000815348:	41 5b                	pop    r11
ffff80000081534a:	48 0f 07             	sysretq 

ffff80000081534d <move_to_user_mode.result>:
move_to_user_mode.result():
ffff80000081534d:	b8 2b 00 00 00       	mov    eax,0x2b
ffff800000815352:	8e c0                	mov    es,eax
ffff800000815354:	8e d8                	mov    ds,eax
ffff800000815356:	8e e0                	mov    fs,eax
ffff800000815358:	8e e8                	mov    gs,eax
ffff80000081535a:	c3                   	ret    
